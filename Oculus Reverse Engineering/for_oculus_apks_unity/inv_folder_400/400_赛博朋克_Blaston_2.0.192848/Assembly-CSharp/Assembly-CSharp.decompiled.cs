using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Net.WebSockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Bhaptics.Tact.Unity;
using Bowser;
using Bowser.Core;
using Bowser.Discord;
using Bowser.GameIntegration;
using Bowser.RetroBox;
using DarkTonic.MasterAudio;
using ExitGames.Client.Photon;
using Fidelity.Localization;
using Fidelity.MultiplatformIAP;
using Fidelity.Telemetry;
using Ignis;
using Ignis.AlwaysQueue;
using Ignis.DebugTools;
using Ignis.Keyboard;
using Ignis.KockoutTournaments;
using Ignis.Platform;
using Ignis.TournamentEvent;
using Ignis.Triggers;
using Ignis.Utility;
using IgnisBowser.Story;
using Il2CppDummyDll;
using JetBrains.Annotations;
using MersenneTwister;
using Microsoft.CodeAnalysis;
using Oculus.Platform;
using Oculus.Platform.Models;
using Photon.Pun;
using Photon.Realtime;
using Photon.Voice.PUN;
using Photon.Voice.Unity;
using PlayFab;
using PlayFab.ClientModels;
using PlayFab.Json;
using PlayFab.MultiplayerModels;
using RG.Ignis.Keyboard;
using RG.Ignis.PlayFab;
using RG.Ignis.SinglePlayer.StoryEvent;
using RG.IgnisBowser;
using RG.IgnisBowser.KnockOutTournament;
using RGCommon.ECS;
using RGCommon.Logging;
using RGCommon.Network;
using RGCommon.Network.Photon;
using RGCommon.PlayFab;
using RootMotion.FinalIK;
using SLua;
using TMPro;
using Unity.Profiling;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.AddressableAssets;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Networking;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;
using UnityEngine.ResourceManagement.AsyncOperations;
using UnityEngine.ResourceManagement.ResourceLocations;
using UnityEngine.ResourceManagement.ResourceProviders;
using UnityEngine.SceneManagement;
using UnityEngine.Scripting;
using UnityEngine.Serialization;
using UnityEngine.Timeline;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using UnityEngine.XR.Management;

[assembly: AssemblyVersion("0.0.0.0")]
namespace Microsoft.CodeAnalysis
{
	[Token(Token = "0x200001F")]
	[Microsoft.CodeAnalysis.Embedded]
	[CompilerGenerated]
	internal sealed class EmbeddedAttribute : Attribute
	{
		[Token(Token = "0x60000BF")]
		[Address(RVA = "0xF4A3D8", Offset = "0xF4A3D8", VA = "0xF4A3D8")]
		public EmbeddedAttribute()
		{
		}
	}
}
namespace System.Runtime.CompilerServices
{
	[Token(Token = "0x2000020")]
	[CompilerGenerated]
	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Parameter | AttributeTargets.ReturnValue | AttributeTargets.GenericParameter, AllowMultiple = false, Inherited = false)]
	[Microsoft.CodeAnalysis.Embedded]
	internal sealed class NullableAttribute : Attribute
	{
		[Token(Token = "0x400004B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly byte[] NullableFlags;

		[Token(Token = "0x60000C0")]
		[Address(RVA = "0xF4A3E0", Offset = "0xF4A3E0", VA = "0xF4A3E0")]
		public NullableAttribute(byte P_0)
		{
		}

		[Token(Token = "0x60000C1")]
		[Address(RVA = "0xF4A460", Offset = "0xF4A460", VA = "0xF4A460")]
		public NullableAttribute(byte[] P_0)
		{
		}
	}
}
[Token(Token = "0x2000021")]
[CreateAssetMenu(fileName = "Data", menuName = "Bhaptics/Create Config", order = 1)]
public class BhapticsConfig : ScriptableObject
{
	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Windows Settings")]
	public bool launchPlayerIfNotRunning;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Android Settings")]
	public BhapticsAndroidManager AndroidManagerPrefab;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("If you set it true, you don't need to define permissions and external bHaptics VR Player(beta) on SideQuest will be required.")]
	public bool UseOnlyBackgroundMode;

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xF4A488", Offset = "0xF4A488", VA = "0xF4A488")]
	public BhapticsConfig()
	{
	}
}
[Token(Token = "0x2000022")]
public class BhapticsLogger
{
	[Token(Token = "0x2000023")]
	public enum LogLevel
	{
		[Token(Token = "0x4000051")]
		Debug,
		[Token(Token = "0x4000052")]
		Info,
		[Token(Token = "0x4000053")]
		Error
	}

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LogLevel level;

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xF4A498", Offset = "0xF4A498", VA = "0xF4A498")]
	public static void LogDebug(string format, params object[] args)
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xF4A570", Offset = "0xF4A570", VA = "0xF4A570")]
	public static void LogInfo(string format, params object[] args)
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xF4A64C", Offset = "0xF4A64C", VA = "0xF4A64C")]
	public static void LogError(string format, params object[] args)
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xF4A6E0", Offset = "0xF4A6E0", VA = "0xF4A6E0")]
	public BhapticsLogger()
	{
	}
}
[Token(Token = "0x2000024")]
public class BhapticsManager
{
	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IHaptic Haptic;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool Init;

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xF4A734", Offset = "0xF4A734", VA = "0xF4A734")]
	public static IHaptic GetHaptic()
	{
		return null;
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xF4A9C0", Offset = "0xF4A9C0", VA = "0xF4A9C0")]
	public static void Initialize()
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xF4A9C4", Offset = "0xF4A9C4", VA = "0xF4A9C4")]
	public static void Dispose()
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xF4ABA4", Offset = "0xF4ABA4", VA = "0xF4ABA4")]
	public BhapticsManager()
	{
	}
}
[Token(Token = "0x2000025")]
public class BhapticsVisualizer : MonoBehaviour
{
	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private VisualFeedback[] visualFeedback;

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xF4ABAC", Offset = "0xF4ABAC", VA = "0xF4ABAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xF4ABFC", Offset = "0xF4ABFC", VA = "0xF4ABFC")]
	private void Update()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xF4AD1C", Offset = "0xF4AD1C", VA = "0xF4AD1C")]
	public BhapticsVisualizer()
	{
	}
}
[Token(Token = "0x2000026")]
public class Bhaptics_Setup : MonoBehaviour
{
	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public BhapticsConfig Config;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Bhaptics_Setup instance;

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xF4AD24", Offset = "0xF4AD24", VA = "0xF4AD24")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xF4B0E0", Offset = "0xF4B0E0", VA = "0xF4B0E0")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xF4AE18", Offset = "0xF4AE18", VA = "0xF4AE18")]
	private void Initialize()
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xF4B0E4", Offset = "0xF4B0E4", VA = "0xF4B0E4")]
	public Bhaptics_Setup()
	{
	}
}
[Serializable]
[Token(Token = "0x2000027")]
public class EasyColliderRotateDuplicate
{
	[Token(Token = "0x2000028")]
	public enum ROTATE_AXIS
	{
		[Token(Token = "0x4000060")]
		X,
		[Token(Token = "0x4000061")]
		Y,
		[Token(Token = "0x4000062")]
		Z
	}

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool enabled;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public ROTATE_AXIS axis;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int NumberOfDuplications;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float StartRotation;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float EndRotation;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject pivot;

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xF4B0EC", Offset = "0xF4B0EC", VA = "0xF4B0EC")]
	public EasyColliderRotateDuplicate()
	{
	}
}
[Token(Token = "0x2000029")]
public class RandomAnimationChooser : StateMachineBehaviour
{
	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int numOfAvailableAnimations;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string intParameterName;

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xF4B104", Offset = "0xF4B104", VA = "0xF4B104", Slot = "9")]
	public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xF4B154", Offset = "0xF4B154", VA = "0xF4B154")]
	public RandomAnimationChooser()
	{
	}
}
[Token(Token = "0x200002A")]
public class AnimatedFaceMaterialDriverReference : MonoBehaviour
{
	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float offsetMultiplier;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float offsetAdditive;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform bone;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SkinnedMeshRenderer skinnedMeshRenderer;

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xF4B15C", Offset = "0xF4B15C", VA = "0xF4B15C")]
	public AnimatedFaceMaterialDriverReference()
	{
	}
}
[Token(Token = "0x200002B")]
public class AnimationListenerBlaston : MonoBehaviour
{
	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xF4B16C", Offset = "0xF4B16C", VA = "0xF4B16C")]
	public void Backstreet_TrainPass()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xF4B21C", Offset = "0xF4B21C", VA = "0xF4B21C")]
	public void CheckGlass()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xF4B328", Offset = "0xF4B328", VA = "0xF4B328")]
	public void Policecar()
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xF4B3D8", Offset = "0xF4B3D8", VA = "0xF4B3D8")]
	public void Policecar2()
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xF4B488", Offset = "0xF4B488", VA = "0xF4B488")]
	public void Policecar3()
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xF4B538", Offset = "0xF4B538", VA = "0xF4B538")]
	public void Greetings()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xF4B644", Offset = "0xF4B644", VA = "0xF4B644")]
	public void FillGlass()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xF4B7B0", Offset = "0xF4B7B0", VA = "0xF4B7B0")]
	public void GetNewGlass()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xF4B8BC", Offset = "0xF4B8BC", VA = "0xF4B8BC")]
	public void PlaceDrinkGlass()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xF4B9C8", Offset = "0xF4B9C8", VA = "0xF4B9C8")]
	public void WipeGlass()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xF4BAA4", Offset = "0xF4BAA4", VA = "0xF4BAA4")]
	public void WipeGlass2()
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xF4BB80", Offset = "0xF4BB80", VA = "0xF4BB80")]
	public void AnimSilent()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xF4BC8C", Offset = "0xF4BC8C", VA = "0xF4BC8C")]
	public AnimationListenerBlaston()
	{
	}
}
[Token(Token = "0x200002C")]
public class substate_random_picker : StateMachineBehaviour
{
	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string m_Name;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_Count;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve pickCurve;

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xF4BC94", Offset = "0xF4BC94", VA = "0xF4BC94", Slot = "9")]
	public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xF4BDCC", Offset = "0xF4BDCC", VA = "0xF4BDCC")]
	public substate_random_picker()
	{
	}
}
[Token(Token = "0x200002D")]
public class SimpleRandomSubstatePicker : StateMachineBehaviour
{
	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int HighestVersion;

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xF4BDD4", Offset = "0xF4BDD4", VA = "0xF4BDD4", Slot = "9")]
	public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xF4BE40", Offset = "0xF4BE40", VA = "0xF4BE40")]
	public SimpleRandomSubstatePicker()
	{
	}
}
[Token(Token = "0x200002E")]
public class AnimationListener : MonoBehaviour
{
	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform box1;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform box2;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform Sec1;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform Sec2;

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xF4BE48", Offset = "0xF4BE48", VA = "0xF4BE48")]
	public void bottalk()
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xF4BEF8", Offset = "0xF4BEF8", VA = "0xF4BEF8")]
	public void Secdronescan1()
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xF4BF98", Offset = "0xF4BF98", VA = "0xF4BF98")]
	public void Secdronescan2()
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xF4C038", Offset = "0xF4C038", VA = "0xF4C038")]
	public void SecdronescanStop1()
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xF4C0A8", Offset = "0xF4C0A8", VA = "0xF4C0A8")]
	public void SecdronescanStop2()
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xF4C118", Offset = "0xF4C118", VA = "0xF4C118")]
	public void boxdrone2()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xF4C1B8", Offset = "0xF4C1B8", VA = "0xF4C1B8")]
	public void boxdrone1()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xF4C258", Offset = "0xF4C258", VA = "0xF4C258")]
	public void Secdrone1()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xF4C2F8", Offset = "0xF4C2F8", VA = "0xF4C2F8")]
	public void Secdrone2()
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xF4C3A8", Offset = "0xF4C3A8", VA = "0xF4C3A8")]
	public void Policecar()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xF4C458", Offset = "0xF4C458", VA = "0xF4C458")]
	public void Policecar2()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xF4C508", Offset = "0xF4C508", VA = "0xF4C508")]
	public void Policecar3()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xF4C5B8", Offset = "0xF4C5B8", VA = "0xF4C5B8")]
	public void LenaIdle1()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xF4C668", Offset = "0xF4C668", VA = "0xF4C668")]
	public void LenaIdle2()
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xF4C718", Offset = "0xF4C718", VA = "0xF4C718")]
	public void LenaIdle3()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xF4C7C8", Offset = "0xF4C7C8", VA = "0xF4C7C8")]
	public void LenaShutDown()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xF4C878", Offset = "0xF4C878", VA = "0xF4C878")]
	public void LenaStartUp()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xF4C928", Offset = "0xF4C928", VA = "0xF4C928")]
	public void LenaTalka()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xF4C9D8", Offset = "0xF4C9D8", VA = "0xF4C9D8")]
	public void CheckGlass()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xF4CAE4", Offset = "0xF4CAE4", VA = "0xF4CAE4")]
	public void Greetings()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xF4CBF0", Offset = "0xF4CBF0", VA = "0xF4CBF0")]
	public void FillGlass()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xF4CD5C", Offset = "0xF4CD5C", VA = "0xF4CD5C")]
	public void GetNewGlass()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xF4CE68", Offset = "0xF4CE68", VA = "0xF4CE68")]
	public void PlaceDrinkGlass()
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xF4CF74", Offset = "0xF4CF74", VA = "0xF4CF74")]
	public void WipeGlass()
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xF4D050", Offset = "0xF4D050", VA = "0xF4D050")]
	public void WipeGlass2()
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xF4D12C", Offset = "0xF4D12C", VA = "0xF4D12C")]
	public void AnimSilent()
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xF4D238", Offset = "0xF4D238", VA = "0xF4D238")]
	public AnimationListener()
	{
	}
}
[Token(Token = "0x200002F")]
public class TaxiAnimationListener : MonoBehaviour
{
	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform taxi1;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform taxi2;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform taxi3;

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xF4D240", Offset = "0xF4D240", VA = "0xF4D240")]
	public void Route1Taxi1()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xF4D2E0", Offset = "0xF4D2E0", VA = "0xF4D2E0")]
	public void Route1Taxi2Whoosh()
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xF4D380", Offset = "0xF4D380", VA = "0xF4D380")]
	public void Route2Taxi1Whoosh()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xF4D420", Offset = "0xF4D420", VA = "0xF4D420")]
	public void Route2Taxi2Whoosh()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xF4D4C0", Offset = "0xF4D4C0", VA = "0xF4D4C0")]
	public void Route2Taxi3Whoosh()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xF4D560", Offset = "0xF4D560", VA = "0xF4D560")]
	public void Route3Taxi1Whoosh()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xF4D600", Offset = "0xF4D600", VA = "0xF4D600")]
	public void Route3Taxi2Whoosh()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xF4D6A0", Offset = "0xF4D6A0", VA = "0xF4D6A0")]
	public TaxiAnimationListener()
	{
	}
}
[Token(Token = "0x2000030")]
[Preserve]
public class Lua_Bowser_RetroBox_RetroBoxLua : LuaObject
{
	[Token(Token = "0x600010B")]
	[Address(RVA = "0xF4D6A8", Offset = "0xF4D6A8", VA = "0xF4D6A8")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int LogInit_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xF4D7DC", Offset = "0xF4D7DC", VA = "0xF4D7DC")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int LogFlush_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xF4D910", Offset = "0xF4D910", VA = "0xF4D910")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int Spr_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xF4DD50", Offset = "0xF4DD50", VA = "0xF4DD50")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int SSpr_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xF4E5A8", Offset = "0xF4E5A8", VA = "0xF4E5A8")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int Map_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xF4E998", Offset = "0xF4E998", VA = "0xF4E998")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int PSet_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xF4EC80", Offset = "0xF4EC80", VA = "0xF4EC80")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int PGet_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xF4EE20", Offset = "0xF4EE20", VA = "0xF4EE20")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Cls_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xF4F078", Offset = "0xF4F078", VA = "0xF4F078")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int Print_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xF4F340", Offset = "0xF4F340", VA = "0xF4F340")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int PrintH_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xF4F4A8", Offset = "0xF4F4A8", VA = "0xF4F4A8")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int Mid_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xF4F674", Offset = "0xF4F674", VA = "0xF4F674")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Rnd_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xF4F904", Offset = "0xF4F904", VA = "0xF4F904")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Add_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xF4FC08", Offset = "0xF4FC08", VA = "0xF4FC08")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int Flr_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xF4FD84", Offset = "0xF4FD84", VA = "0xF4FD84")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int BAnd_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xF4FF1C", Offset = "0xF4FF1C", VA = "0xF4FF1C")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int TryConsumeToken_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xF5006C", Offset = "0xF5006C", VA = "0xF5006C")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int Ord_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xF50338", Offset = "0xF50338", VA = "0xF50338")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int Sub_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xF5064C", Offset = "0xF5064C", VA = "0xF5064C")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Peek_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xF507C8", Offset = "0xF507C8", VA = "0xF507C8")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Poke_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xF5094C", Offset = "0xF5094C", VA = "0xF5094C")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Cartdata_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xF50AB4", Offset = "0xF50AB4", VA = "0xF50AB4")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int DGet_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xF50C30", Offset = "0xF50C30", VA = "0xF50C30")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int DSet_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xF50DB4", Offset = "0xF50DB4", VA = "0xF50DB4")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int SGet_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xF50F54", Offset = "0xF50F54", VA = "0xF50F54")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Sfx_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xF51380", Offset = "0xF51380", VA = "0xF51380")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Music_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xF516E0", Offset = "0xF516E0", VA = "0xF516E0")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Pal_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xF51A94", Offset = "0xF51A94", VA = "0xF51A94")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int BtnP_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xF51C10", Offset = "0xF51C10", VA = "0xF51C10")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Stat_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xF51D8C", Offset = "0xF51D8C", VA = "0xF51D8C")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int Line_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xF522F4", Offset = "0xF522F4", VA = "0xF522F4")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int SprR_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xF52540", Offset = "0xF52540", VA = "0xF52540")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Track_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xF526C4", Offset = "0xF526C4", VA = "0xF526C4")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int StartGame_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xF527F8", Offset = "0xF527F8", VA = "0xF527F8")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int StopGame_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xF5292C", Offset = "0xF5292C", VA = "0xF5292C")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int get_hardware(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xF52A74", Offset = "0xF52A74", VA = "0xF52A74")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int set_hardware(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xF52BF0", Offset = "0xF52BF0", VA = "0xF52BF0")]
	[Preserve]
	public static void reg(IntPtr l)
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xF53684", Offset = "0xF53684", VA = "0xF53684")]
	public Lua_Bowser_RetroBox_RetroBoxLua()
	{
	}
}
[Token(Token = "0x2000031")]
[Preserve]
public class Lua_System_Collections_Generic_List_1_int : LuaObject
{
	[Token(Token = "0x6000131")]
	[Address(RVA = "0xF536DC", Offset = "0xF536DC", VA = "0xF536DC")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int constructor(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xF53B14", Offset = "0xF53B14", VA = "0xF53B14")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Add(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xF53D1C", Offset = "0xF53D1C", VA = "0xF53D1C")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int AddRange(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xF53EEC", Offset = "0xF53EEC", VA = "0xF53EEC")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int AsReadOnly(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xF54088", Offset = "0xF54088", VA = "0xF54088")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int BinarySearch(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xF5454C", Offset = "0xF5454C", VA = "0xF5454C")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Clear(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xF546C8", Offset = "0xF546C8", VA = "0xF546C8")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Contains(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xF54898", Offset = "0xF54898", VA = "0xF54898")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Exists(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xF54A7C", Offset = "0xF54A7C", VA = "0xF54A7C")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Find(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xF54C60", Offset = "0xF54C60", VA = "0xF54C60")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int FindAll(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xF54E44", Offset = "0xF54E44", VA = "0xF54E44")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int FindIndex(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xF552EC", Offset = "0xF552EC", VA = "0xF552EC")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int FindLast(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xF554D0", Offset = "0xF554D0", VA = "0xF554D0")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int FindLastIndex(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xF55978", Offset = "0xF55978", VA = "0xF55978")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int ForEach(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xF55B48", Offset = "0xF55B48", VA = "0xF55B48")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int GetRange(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xF55D30", Offset = "0xF55D30", VA = "0xF55D30")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int IndexOf(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xF561B0", Offset = "0xF561B0", VA = "0xF561B0")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Insert(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xF56384", Offset = "0xF56384", VA = "0xF56384")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int InsertRange(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xF56574", Offset = "0xF56574", VA = "0xF56574")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int LastIndexOf(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xF569F4", Offset = "0xF569F4", VA = "0xF569F4")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Remove(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xF56BC4", Offset = "0xF56BC4", VA = "0xF56BC4")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int RemoveAll(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xF56DA8", Offset = "0xF56DA8", VA = "0xF56DA8")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int RemoveAt(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xF56F64", Offset = "0xF56F64", VA = "0xF56F64")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int RemoveRange(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xF57138", Offset = "0xF57138", VA = "0xF57138")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Reverse(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xF5744C", Offset = "0xF5744C", VA = "0xF5744C")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Sort(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xF57A34", Offset = "0xF57A34", VA = "0xF57A34")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int ToArray(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xF57BD0", Offset = "0xF57BD0", VA = "0xF57BD0")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int TrimExcess(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xF57D50", Offset = "0xF57D50", VA = "0xF57D50")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int TrueForAll(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xF57F34", Offset = "0xF57F34", VA = "0xF57F34")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int get_Capacity(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xF580DC", Offset = "0xF580DC", VA = "0xF580DC")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int set_Capacity(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xF58298", Offset = "0xF58298", VA = "0xF58298")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int get_Count(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xF5842C", Offset = "0xF5842C", VA = "0xF5842C")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int getItem(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xF585FC", Offset = "0xF585FC", VA = "0xF585FC")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int setItem(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xF587D0", Offset = "0xF587D0", VA = "0xF587D0")]
	[Preserve]
	public static void reg(IntPtr l)
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xF591A0", Offset = "0xF591A0", VA = "0xF591A0")]
	public Lua_System_Collections_Generic_List_1_int()
	{
	}
}
[Token(Token = "0x2000032")]
[Preserve]
public class Lua_System_String : LuaObject
{
	[Token(Token = "0x6000154")]
	[Address(RVA = "0xF591F8", Offset = "0xF591F8", VA = "0xF591F8")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int constructor(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xF59518", Offset = "0xF59518", VA = "0xF59518")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int ToCharArray(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xF597F4", Offset = "0xF597F4", VA = "0xF597F4")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int Split(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xF5A1B4", Offset = "0xF5A1B4", VA = "0xF5A1B4")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int Substring(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xF5A4C0", Offset = "0xF5A4C0", VA = "0xF5A4C0")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int Trim(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xF5A784", Offset = "0xF5A784", VA = "0xF5A784")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int TrimStart(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xF5A924", Offset = "0xF5A924", VA = "0xF5A924")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int TrimEnd(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xF5AAC4", Offset = "0xF5AAC4", VA = "0xF5AAC4")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int IsNormalized(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xF5ADA0", Offset = "0xF5ADA0", VA = "0xF5ADA0")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int Normalize(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xF5B07C", Offset = "0xF5B07C", VA = "0xF5B07C")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int CompareTo(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xF5B474", Offset = "0xF5B474", VA = "0xF5B474")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int Contains(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xF5B614", Offset = "0xF5B614", VA = "0xF5B614")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int EndsWith(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xF5BA48", Offset = "0xF5BA48", VA = "0xF5BA48")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int IndexOf(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xF5C7B8", Offset = "0xF5C7B8", VA = "0xF5C7B8")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int IndexOfAny(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xF5CBB0", Offset = "0xF5CBB0", VA = "0xF5CBB0")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int LastIndexOf(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xF5D920", Offset = "0xF5D920", VA = "0xF5D920")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int LastIndexOfAny(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xF5DD18", Offset = "0xF5DD18", VA = "0xF5DD18")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int PadLeft(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xF5E028", Offset = "0xF5E028", VA = "0xF5E028")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int PadRight(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xF5E338", Offset = "0xF5E338", VA = "0xF5E338")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int StartsWith(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xF5E76C", Offset = "0xF5E76C", VA = "0xF5E76C")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int ToLower(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xF5EA44", Offset = "0xF5EA44", VA = "0xF5EA44")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int ToLowerInvariant(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xF5EBB0", Offset = "0xF5EBB0", VA = "0xF5EBB0")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int ToUpper(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xF5EE88", Offset = "0xF5EE88", VA = "0xF5EE88")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int ToUpperInvariant(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xF5EFF4", Offset = "0xF5EFF4", VA = "0xF5EFF4")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Insert(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xF5F1B4", Offset = "0xF5F1B4", VA = "0xF5F1B4")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Replace(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0xF5F60C", Offset = "0xF5F60C", VA = "0xF5F60C")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Remove(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xF5F918", Offset = "0xF5F918", VA = "0xF5F918")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int GetTypeCode(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xF5FA84", Offset = "0xF5FA84", VA = "0xF5FA84")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Join_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xF60070", Offset = "0xF60070", VA = "0xF60070")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int op_Equality(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xF601D8", Offset = "0xF601D8", VA = "0xF601D8")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int op_Inequality(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xF60340", Offset = "0xF60340", VA = "0xF60340")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int IsNullOrEmpty_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xF60490", Offset = "0xF60490", VA = "0xF60490")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int IsNullOrWhiteSpace_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xF605E0", Offset = "0xF605E0", VA = "0xF605E0")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Compare_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xF61720", Offset = "0xF61720", VA = "0xF61720")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int CompareOrdinal_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xF61A14", Offset = "0xF61A14", VA = "0xF61A14")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Format_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xF625DC", Offset = "0xF625DC", VA = "0xF625DC")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Copy_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xF6272C", Offset = "0xF6272C", VA = "0xF6272C")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int Concat_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xF634E4", Offset = "0xF634E4", VA = "0xF634E4")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int Intern_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xF63634", Offset = "0xF63634", VA = "0xF63634")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int IsInterned_s(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xF63784", Offset = "0xF63784", VA = "0xF63784")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int get_Empty(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xF638B8", Offset = "0xF638B8", VA = "0xF638B8")]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	[Preserve]
	public static int get_Length(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xF63A24", Offset = "0xF63A24", VA = "0xF63A24")]
	[Preserve]
	[MonoPInvokeCallback(typeof(LuaCSFunction))]
	public static int getItem(IntPtr l)
	{
		return default(int);
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xF63BC4", Offset = "0xF63BC4", VA = "0xF63BC4")]
	[Preserve]
	public static void reg(IntPtr l)
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xF64808", Offset = "0xF64808", VA = "0xF64808")]
	public Lua_System_String()
	{
	}
}
[Token(Token = "0x2000033")]
public class AlertData : MonoBehaviour
{
	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject AlertMessagePrefab;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MessageSmoothTime;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float MessageCameraDistance;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float DelayToShowAlert;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float AnimationTime;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float FadeValue;

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xF64860", Offset = "0xF64860", VA = "0xF64860")]
	public AlertData()
	{
	}
}
[Token(Token = "0x2000034")]
public class AvatarHandler : IBowserPunObservable
{
	[Token(Token = "0x2000035")]
	public delegate void OnAvatarReadyHandler(AvatarData avatar);

	[Token(Token = "0x2000036")]
	public delegate void OnAvatarRemovedHandler(AvatarData avatar);

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<int, AvatarData> activeAvatars;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int indexHash;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int middleHash;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly int ringHash;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static readonly int pinkyHash;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly int thumbHash;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static readonly int grabPoseHash;

	[Token(Token = "0x14000001")]
	public event OnAvatarReadyHandler OnAvatarReady
	{
		[Token(Token = "0x6000181")]
		[Address(RVA = "0xF64880", Offset = "0xF64880", VA = "0xF64880")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000182")]
		[Address(RVA = "0xF6491C", Offset = "0xF6491C", VA = "0xF6491C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event OnAvatarRemovedHandler OnAvatarRemoved
	{
		[Token(Token = "0x6000183")]
		[Address(RVA = "0xF649B8", Offset = "0xF649B8", VA = "0xF649B8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000184")]
		[Address(RVA = "0xF64A54", Offset = "0xF64A54", VA = "0xF64A54")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xF64AF0", Offset = "0xF64AF0", VA = "0xF64AF0")]
	public void RegisterAvatar(AvatarData avatar)
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xF64BCC", Offset = "0xF64BCC", VA = "0xF64BCC")]
	private void OnAvatarInstantiated(AvatarData avatar)
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xF64CE4", Offset = "0xF64CE4", VA = "0xF64CE4")]
	private void OnAvatarDestroyed(AvatarData avatar)
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xF64DCC", Offset = "0xF64DCC", VA = "0xF64DCC")]
	public void Tick()
	{
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xF655F4", Offset = "0xF655F4", VA = "0xF655F4")]
	public AvatarData GetAvatar(int actorId)
	{
		return null;
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xF6564C", Offset = "0xF6564C", VA = "0xF6564C")]
	public AvatarData GetLocalAvatar()
	{
		return null;
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xF656D4", Offset = "0xF656D4", VA = "0xF656D4")]
	public Color GetPlayerColor(int actorNumber)
	{
		return default(Color);
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xF65768", Offset = "0xF65768", VA = "0xF65768")]
	public List<FaceLocalPlayer> RotatePhotoCameraNameTags()
	{
		return null;
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xF659A0", Offset = "0xF659A0", VA = "0xF659A0")]
	public List<AvatarData> GetActiveAvatars()
	{
		return null;
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xF65A0C", Offset = "0xF65A0C", VA = "0xF65A0C")]
	public void HideLocally(AvatarData avatar)
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xF65A30", Offset = "0xF65A30", VA = "0xF65A30")]
	public void ShowLocally(AvatarData avatar)
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xF65A54", Offset = "0xF65A54", VA = "0xF65A54")]
	public void SetMuted(AvatarData avatar, bool muted)
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xF65A78", Offset = "0xF65A78", VA = "0xF65A78", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info, UnityEngine.Object instance)
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xF66060", Offset = "0xF66060", VA = "0xF66060")]
	public AvatarHandler()
	{
	}
}
[Token(Token = "0x2000037")]
public class BowserPhotonPrefabPool : IPunPrefabPool
{
	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject poolRoot;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform poolParent;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, Queue<BowserPhotonPrefabPoolEntry>> objectPools;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<string, BowserPhotonPrefabPoolData.PooledPrefabData> pooledPrefabs;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Action<Component> setupRuntimeClass;

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xF66510", Offset = "0xF66510", VA = "0xF66510")]
	public BowserPhotonPrefabPool(BowserPhotonPrefabPoolData data, Action<Component> setupRuntimeClass)
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xF668DC", Offset = "0xF668DC", VA = "0xF668DC")]
	public void Stop()
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xF6675C", Offset = "0xF6675C", VA = "0xF6675C")]
	private BowserPhotonPrefabPoolEntry[] AddPooledPrefabInstance(BowserPhotonPrefabPoolData.PooledPrefabData pooledPrefabData)
	{
		return null;
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xF66A30", Offset = "0xF66A30", VA = "0xF66A30")]
	public BowserPhotonPrefabPoolEntry[] CreatePool(BowserPhotonPrefabPoolEntry prefab, int poolCapacity, int growthCount, Action<BowserPhotonPrefabPoolEntry> onPoolGrowth)
	{
		return null;
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xF668E4", Offset = "0xF668E4", VA = "0xF668E4")]
	private void AddInstanceToPool(BowserPhotonPrefabPoolEntry prefab, string prefabName, Queue<BowserPhotonPrefabPoolEntry> pool, Action<BowserPhotonPrefabPoolEntry> onPoolGrowth)
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xF66A54", Offset = "0xF66A54", VA = "0xF66A54", Slot = "4")]
	public GameObject Instantiate(string prefabId, Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xF66E30", Offset = "0xF66E30", VA = "0xF66E30")]
	public GameObject LocalInstantiate(string prefabId, Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xF66D44", Offset = "0xF66D44", VA = "0xF66D44")]
	private static GameObject SpawnInstance(Vector3 position, Quaternion rotation, Queue<BowserPhotonPrefabPoolEntry> pool)
	{
		return null;
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xF66F28", Offset = "0xF66F28", VA = "0xF66F28")]
	public bool HasInstanceOf(string prefabId)
	{
		return default(bool);
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xF66FD4", Offset = "0xF66FD4", VA = "0xF66FD4")]
	public int NumberOfInstancesLeft(string prefabId)
	{
		return default(int);
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xF67078", Offset = "0xF67078", VA = "0xF67078", Slot = "5")]
	public void Destroy(GameObject gameObject)
	{
	}
}
[Token(Token = "0x2000038")]
public class BowserPhotonPrefabPoolData : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000039")]
	public struct PooledPrefabData
	{
		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public BowserPhotonPrefabPoolEntry prefab;

		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int poolCapacity;

		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int growthCount;

		[Token(Token = "0x400008C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public Action<BowserPhotonPrefabPoolEntry> onPoolGrowth;
	}

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PooledPrefabData[] prefabs;

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xF67270", Offset = "0xF67270", VA = "0xF67270")]
	public BowserPhotonPrefabPoolData()
	{
	}
}
[Token(Token = "0x200003A")]
public class BarDebug
{
	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private BarDebugData debugData;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private StringBuilder stringBuilder;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Recorder localPlayerRecorder;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int floor;

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xF67278", Offset = "0xF67278", VA = "0xF67278")]
	public BarDebug(BarDebugData barDebugData, GameObject localPlayerAvatar, int floor)
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xF67348", Offset = "0xF67348", VA = "0xF67348")]
	[Conditional("IGNIS_DEBUG")]
	public void Tick()
	{
	}
}
[Token(Token = "0x200003B")]
public class BarDebugData : MonoBehaviour
{
	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshPro debugText;

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xF677E8", Offset = "0xF677E8", VA = "0xF677E8")]
	public BarDebugData()
	{
	}
}
[Token(Token = "0x200003C")]
public class CachedLog
{
	[Token(Token = "0x200003D")]
	private enum Category
	{
		[Token(Token = "0x4000099")]
		Log,
		[Token(Token = "0x400009A")]
		Error
	}

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int SessionID;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private string fileName;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string linePrefix;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool includeFrameCount;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool includeCallStack;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string cachedMessages;

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xF677F0", Offset = "0xF677F0", VA = "0xF677F0")]
	public CachedLog(string fileNameBase, string linePrefixBase, bool includeFrameCount = true, bool includeCallStack = true)
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xF67C90", Offset = "0xF67C90", VA = "0xF67C90")]
	public void Log(string message)
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xF67E80", Offset = "0xF67E80", VA = "0xF67E80")]
	public void LogError(string message)
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xF67C98", Offset = "0xF67C98", VA = "0xF67C98")]
	private void MegaLog(string message, Category category)
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xF67E88", Offset = "0xF67E88", VA = "0xF67E88")]
	public void Flush()
	{
	}
}
[Token(Token = "0x200003E")]
public class DestroyIfDroppedHandler
{
	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xF67F38", Offset = "0xF67F38", VA = "0xF67F38")]
	public void RegisterInstance(GrabbableData grabbable)
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xF680C0", Offset = "0xF680C0", VA = "0xF680C0")]
	public void TickActiveGrabbable(GrabbableData grabbable)
	{
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xF68274", Offset = "0xF68274", VA = "0xF68274")]
	private void OnInstantiated(DestroyIfDroppedData instance)
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xF68294", Offset = "0xF68294", VA = "0xF68294")]
	private void OnGrabBegin(DestroyIfDroppedData instance)
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xF682B4", Offset = "0xF682B4", VA = "0xF682B4")]
	private void OnRemoteGrabBegin(DestroyIfDroppedData instance)
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xF682D4", Offset = "0xF682D4", VA = "0xF682D4")]
	public void ForceDestroy(GrabbableData grabbable, float delay)
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xF68334", Offset = "0xF68334", VA = "0xF68334")]
	public DestroyIfDroppedHandler()
	{
	}
}
[Token(Token = "0x2000040")]
public class ElevatorFloorButtonData : MonoBehaviour
{
	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BowserButtonData button;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI floorText;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI floorNumberText;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI activityText;

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xF683C0", Offset = "0xF683C0", VA = "0xF683C0")]
	public ElevatorFloorButtonData()
	{
	}
}
[Token(Token = "0x2000041")]
public class ElevatorRoomButtonData : MonoBehaviour
{
	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BowserButtonData buttonData;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI roomNumberText;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI playerCountText;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public string roomName;

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xF683C8", Offset = "0xF683C8", VA = "0xF683C8")]
	public ElevatorRoomButtonData()
	{
	}
}
[Token(Token = "0x2000042")]
public class ElevatorTournamentButtonData : MonoBehaviour
{
	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BowserButtonData buttonData;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI roomNumberText;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI playerCountText;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI tournamentHostText;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public string roomName;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public string tournamentCode;

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0xF683D0", Offset = "0xF683D0", VA = "0xF683D0")]
	public ElevatorTournamentButtonData()
	{
	}
}
[Token(Token = "0x2000043")]
public class ScrollBarData : MonoBehaviour
{
	[Token(Token = "0x40000AB")]
	public const string INDEXFINGER_COLLIDER_NAME = "IndexTipCollider";

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ColliderProxy colliderProxy;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ScrollRect scrollRect;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform topTransform;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform bottomTransform;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform barHandle;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public Action<ScrollBarData> onDisabled;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public Transform touchingFinger;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public Vector3 topPosition;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[HideInInspector]
	public Vector3 bottomPosition;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public Vector3 defaultHandleScale;

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0xF683D8", Offset = "0xF683D8", VA = "0xF683D8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xF683F8", Offset = "0xF683F8", VA = "0xF683F8")]
	public ScrollBarData()
	{
	}
}
[Token(Token = "0x2000044")]
public class ScrollBarHandler
{
	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<ScrollBarData> scrollBars;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<ScrollBarData> pressedScrollBars;

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0xF68400", Offset = "0xF68400", VA = "0xF68400")]
	public void RegisterScrollBar(ScrollBarData scrollBar)
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xF68654", Offset = "0xF68654", VA = "0xF68654")]
	public void Tick()
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xF688D4", Offset = "0xF688D4", VA = "0xF688D4")]
	private void OnBarDisabled(ScrollBarData scrollBar)
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xF68980", Offset = "0xF68980", VA = "0xF68980")]
	private void OnBarTriggerEnter(ScrollBarData scrollBar, Collider otherCollider)
	{
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xF68AF8", Offset = "0xF68AF8", VA = "0xF68AF8")]
	private void OnBarTriggerExit(ScrollBarData scrollBar, Collider otherCollider)
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xF6883C", Offset = "0xF6883C", VA = "0xF6883C")]
	internal void ScrollTo(ScrollBarData scrollBar, float v)
	{
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xF68C4C", Offset = "0xF68C4C", VA = "0xF68C4C")]
	public ScrollBarHandler()
	{
	}
}
[Token(Token = "0x2000046")]
public class FaceLocalPlayer : MonoBehaviour
{
	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Global Rotation Settings")]
	public bool ignoreY;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool flip;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[Header("Local Rotation Settings")]
	public bool rotateLocallyOnly;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform mainCamera;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform myTransform;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool overrideTarget;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform target;

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xF68D2C", Offset = "0xF68D2C", VA = "0xF68D2C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xF68DB0", Offset = "0xF68DB0", VA = "0xF68DB0")]
	private void Start()
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xF68DE8", Offset = "0xF68DE8", VA = "0xF68DE8")]
	private void Update()
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xF68F7C", Offset = "0xF68F7C", VA = "0xF68F7C")]
	private void Rotate(Transform camera)
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xF68E78", Offset = "0xF68E78", VA = "0xF68E78")]
	private void RotateLocallyOnly()
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xF690A4", Offset = "0xF690A4", VA = "0xF690A4")]
	public FaceLocalPlayer()
	{
	}
}
[Token(Token = "0x2000047")]
public class FadeData : MonoBehaviour
{
	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject FadePlanePrefab;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 localPosition;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 localRotation;

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xF690B4", Offset = "0xF690B4", VA = "0xF690B4")]
	public FadeData()
	{
	}
}
[Token(Token = "0x2000048")]
public class GlassData : MonoBehaviour
{
	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GrabbableData grabbableData;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DestroyIfDroppedData destroyIfDroppedData;

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xF690D4", Offset = "0xF690D4", VA = "0xF690D4")]
	public GlassData()
	{
	}
}
[Token(Token = "0x2000049")]
public interface IBowserPunObservable
{
	[Token(Token = "0x60001D3")]
	void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info, UnityEngine.Object instance);
}
[Token(Token = "0x200004A")]
public class AnimStateAudioTrigger : StateMachineBehaviour
{
	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("How many seconds to delay the audio trigger after the animation has started, a delay of 0 means directly as it starts")]
	public float triggerDelay;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string audioEventName;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool stopAudioOnExit;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool shouldTrigger;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float triggerAtNormalizedTime;

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xF690DC", Offset = "0xF690DC", VA = "0xF690DC", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xF69224", Offset = "0xF69224", VA = "0xF69224", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xF69300", Offset = "0xF69300", VA = "0xF69300", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xF69378", Offset = "0xF69378", VA = "0xF69378")]
	public AnimStateAudioTrigger()
	{
	}
}
[Token(Token = "0x200004B")]
public class AnimStateSetOnEnter : StateMachineBehaviour
{
	[Token(Token = "0x200004C")]
	public enum ParameterType
	{
		[Token(Token = "0x40000D1")]
		Trigger,
		[Token(Token = "0x40000D2")]
		Bool,
		[Token(Token = "0x40000D3")]
		Int,
		[Token(Token = "0x40000D4")]
		Float
	}

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParameterType parameterType;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string parameterName;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int intValue;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float floatValue;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool boolValue;

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xF69380", Offset = "0xF69380", VA = "0xF69380", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xF694F0", Offset = "0xF694F0", VA = "0xF694F0")]
	public AnimStateSetOnEnter()
	{
	}
}
[Token(Token = "0x200004D")]
public class AnimStateSetOnExit : StateMachineBehaviour
{
	[Token(Token = "0x200004E")]
	public enum ParameterType
	{
		[Token(Token = "0x40000DC")]
		Trigger,
		[Token(Token = "0x40000DD")]
		Bool,
		[Token(Token = "0x40000DE")]
		Int,
		[Token(Token = "0x40000DF")]
		Float
	}

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParameterType parameterType;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string parameterName;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int intValue;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float floatValue;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool boolValue;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0f, 1f)]
	[Tooltip("A state can be interupted at any time, how much of the clip should have been played to trigger this on exit?")]
	public float progressRequired;

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xF694F8", Offset = "0xF694F8", VA = "0xF694F8", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xF69688", Offset = "0xF69688", VA = "0xF69688")]
	public AnimStateSetOnExit()
	{
	}
}
[Token(Token = "0x200004F")]
public class AnimStateTimeSpentInState : StateMachineBehaviour
{
	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Should the delay reset when entering this animation state")]
	public bool resetOnEnter;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool resetOnExit;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string floatParameterName;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int parameterHash;

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0xF69690", Offset = "0xF69690", VA = "0xF69690", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0xF696E8", Offset = "0xF696E8", VA = "0xF696E8", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xF69740", Offset = "0xF69740", VA = "0xF69740", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xF69778", Offset = "0xF69778", VA = "0xF69778")]
	public AnimStateTimeSpentInState()
	{
	}
}
[Token(Token = "0x2000050")]
public class AnimSubStateRandomPicker : StateMachineBehaviour
{
	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string intParameter;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Number of options, note that the actual parameter will be set to values between 0 and (count - 1), so it will never be equal to count!")]
	public int count;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve pickCurve;

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xF69788", Offset = "0xF69788", VA = "0xF69788", Slot = "9")]
	public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xF69870", Offset = "0xF69870", VA = "0xF69870")]
	public AnimSubStateRandomPicker()
	{
	}
}
[Token(Token = "0x2000051")]
public class BowserPointerHandlerData : MonoBehaviour
{
	[Token(Token = "0x2000052")]
	public enum PointerMode
	{
		[Token(Token = "0x40000F5")]
		Disabled,
		[Token(Token = "0x40000F6")]
		LeftHand,
		[Token(Token = "0x40000F7")]
		RightHand,
		[Token(Token = "0x40000F8")]
		BothHands
	}

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("References")]
	public Transform[] pointers;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LineRenderer[] renderers;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] reticles;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Settings")]
	public bool switchHandOnButtonPress;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float rayCastDistance;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float noHitLength;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public LayerMask layerMask;

	[NonSerialized]
	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Collider leftHandRaycastHit;

	[NonSerialized]
	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public BowserButtonData leftHandHover;

	[NonSerialized]
	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool isLeftPressed;

	[NonSerialized]
	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Collider rightHandRaycastHit;

	[NonSerialized]
	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public BowserButtonData rightHandHover;

	[NonSerialized]
	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool isRightPressed;

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xF69878", Offset = "0xF69878", VA = "0xF69878")]
	public BowserPointerHandlerData()
	{
	}
}
[Token(Token = "0x2000053")]
public class PlayerEntryData : MonoBehaviour
{
	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshPro playerName;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BowserButtonData muteButton;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public BowserButtonData blockButton;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SpriteRenderer muteIcon;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public SpriteRenderer blockIcon;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEngine.Sprite muteSprite;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEngine.Sprite unmuteSprite;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEngine.Sprite blockSprite;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.Sprite unblockSprite;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public Player player;

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xF6988C", Offset = "0xF6988C", VA = "0xF6988C")]
	public PlayerEntryData()
	{
	}
}
[Token(Token = "0x2000054")]
public class RoomSignData : MonoBehaviour
{
	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI floorText;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI publicRoomNumberText;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI privateRoomTagText;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI privateRoomCodeText;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI tournamentTagText;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI tournamentCodeText;

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xF69894", Offset = "0xF69894", VA = "0xF69894")]
	public RoomSignData()
	{
	}
}
[Token(Token = "0x2000055")]
public class BotDoorData : MonoBehaviour
{
	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float closedHeight;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float openedHeight;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform doorTransform;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float timeToOpenClose;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minIdleAfterDoorClosed;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maxIdleAfterDoorClosed;

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xF6989C", Offset = "0xF6989C", VA = "0xF6989C")]
	public BotDoorData()
	{
	}
}
[Token(Token = "0x2000056")]
public class ShaderWarmup
{
	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<string> warmedUpSceneCombinations;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private ShaderWarmupMaterialList materialList;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Mesh warmUpMesh;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ShaderWarmupData data;

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xF698B8", Offset = "0xF698B8", VA = "0xF698B8")]
	public ShaderWarmup(ShaderWarmupData shaderWarmupData)
	{
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xF698F8", Offset = "0xF698F8", VA = "0xF698F8")]
	private void DrawAllMaterials()
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xF69E58", Offset = "0xF69E58", VA = "0xF69E58")]
	public void WarmupShaders(string environment)
	{
	}
}
[Token(Token = "0x2000057")]
public class ShaderWarmupData : MonoBehaviour
{
	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ShaderWarmupMaterialList materialList;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool logWarmedUpShaders;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Mesh warmUpMesh;

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xF6A0B8", Offset = "0xF6A0B8", VA = "0xF6A0B8")]
	public ShaderWarmupData()
	{
	}
}
[Token(Token = "0x2000058")]
[CreateAssetMenu(fileName = "MaterialList", menuName = "Bowser/ShaderWarmup/New Material List")]
public class ShaderWarmupMaterialList : ScriptableObject
{
	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string assetPathMustContain;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.Object[] scenes;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string[] prefabLocations;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material[] materials;

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xF6A0C0", Offset = "0xF6A0C0", VA = "0xF6A0C0")]
	public ShaderWarmupMaterialList()
	{
	}
}
[Token(Token = "0x2000059")]
public class TokenSlotData : MonoBehaviour
{
	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float insertRadius;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject tokenSlotTrigger;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve insertionLerpCurve;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform insertStart;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform insertEnd;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float insertionTime;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool onlyOneTokenAtATime;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool localOnly;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PhotonView photonView;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public PhotonObservableProxy photonObservableProxy;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Action<TokenSlotData, int> onUpdateTokenBalance;

	[NonSerialized]
	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int balance;

	[NonSerialized]
	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Func<bool> inputCondition;

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xF6A110", Offset = "0xF6A110", VA = "0xF6A110")]
	[PunRPC]
	private void BowserUpdateTokenBalanceRPC(int delta)
	{
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xF6A16C", Offset = "0xF6A16C", VA = "0xF6A16C")]
	public TokenSlotData()
	{
	}
}
[Token(Token = "0x200005A")]
public class TokenSlotHandler : IBowserPunObservable
{
	[Token(Token = "0x200005B")]
	[CompilerGenerated]
	private sealed class <InsertTokenRoutine>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400012A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TokenData token;

		[Token(Token = "0x400012B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TokenSlotData tokenSlot;

		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action<TokenData, bool> destroyToken;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TokenSlotHandler <>4__this;

		[Token(Token = "0x400012E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform <tokenTransform>5__2;

		[Token(Token = "0x400012F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform <start>5__3;

		[Token(Token = "0x4000130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform <end>5__4;

		[Token(Token = "0x4000131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float <insertTimer>5__5;

		[Token(Token = "0x1700004C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001FA")]
			[Address(RVA = "0xF6AC5C", Offset = "0xF6AC5C", VA = "0xF6AC5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001FC")]
			[Address(RVA = "0xF6ACA4", Offset = "0xF6ACA4", VA = "0xF6ACA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001F7")]
		[Address(RVA = "0xF6A75C", Offset = "0xF6A75C", VA = "0xF6A75C")]
		[DebuggerHidden]
		public <InsertTokenRoutine>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60001F8")]
		[Address(RVA = "0xF6A8A8", Offset = "0xF6A8A8", VA = "0xF6A8A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001F9")]
		[Address(RVA = "0xF6A8AC", Offset = "0xF6A8AC", VA = "0xF6A8AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001FB")]
		[Address(RVA = "0xF6AC64", Offset = "0xF6AC64", VA = "0xF6AC64", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<GameObject, TokenSlotData> slotLookup;

	[Token(Token = "0x1700004B")]
	public string TriggerName
	{
		[Token(Token = "0x60001EE")]
		[Address(RVA = "0xF6A188", Offset = "0xF6A188", VA = "0xF6A188")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0xF6A1C8", Offset = "0xF6A1C8", VA = "0xF6A1C8")]
	public TokenSlotHandler(TokenSlotData[] tokenSlots, TokenHandler tokenHandler)
	{
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xF6A33C", Offset = "0xF6A33C", VA = "0xF6A33C")]
	public bool TryConsumingToken(TokenSlotData tokenSlot)
	{
		return default(bool);
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xF6A464", Offset = "0xF6A464", VA = "0xF6A464")]
	private void UpdateTokenBalance(TokenSlotData tokenSlot, int delta)
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xF6A4AC", Offset = "0xF6A4AC", VA = "0xF6A4AC")]
	public bool CanInsertToken(GameObject tokenSlotTrigger)
	{
		return default(bool);
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0xF6A57C", Offset = "0xF6A57C", VA = "0xF6A57C")]
	public void InsertToken(TokenData token, GameObject tokenSlotTrigger, Action<TokenData, bool> destroyToken)
	{
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0xF6A6D4", Offset = "0xF6A6D4", VA = "0xF6A6D4")]
	[IteratorStateMachine(typeof(<InsertTokenRoutine>d__8))]
	private IEnumerator InsertTokenRoutine(TokenData token, TokenSlotData tokenSlot, Action<TokenData, bool> destroyToken)
	{
		return null;
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0xF6A784", Offset = "0xF6A784", VA = "0xF6A784")]
	public void SetInputCondition(TokenSlotData instance, Func<bool> inputCondition)
	{
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0xF6A79C", Offset = "0xF6A79C", VA = "0xF6A79C", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info, UnityEngine.Object instance)
	{
	}
}
[Token(Token = "0x200005C")]
public class BowserFallbackXR : IBowserPlatformXR
{
	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private FingerData fingerData;

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0xF6ACAC", Offset = "0xF6ACAC", VA = "0xF6ACAC")]
	public BowserFallbackXR()
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0xF6AD14", Offset = "0xF6AD14", VA = "0xF6AD14", Slot = "8")]
	public bool GetBool(RGXR_Device device, RGXR_Bool inputIdentifier)
	{
		return default(bool);
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0xF6AD1C", Offset = "0xF6AD1C", VA = "0xF6AD1C", Slot = "7")]
	public float GetFloat(RGXR_Device device, RGXR_Float inputIdentifier)
	{
		return default(float);
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0xF6AD24", Offset = "0xF6AD24", VA = "0xF6AD24", Slot = "6")]
	public Quaternion GetQuaternion(RGXR_Device device, RGXR_Quaternion inputIdentifier)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0xF6AD68", Offset = "0xF6AD68", VA = "0xF6AD68", Slot = "4")]
	public Vector2 GetVector2(RGXR_Device device, RGXR_Vector2 inputIdentifier)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0xF6ADA8", Offset = "0xF6ADA8", VA = "0xF6ADA8", Slot = "5")]
	public Vector3 GetVector3(RGXR_Device device, RGXR_Vector3 inputIdentifier)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0xF6ADEC", Offset = "0xF6ADEC", VA = "0xF6ADEC", Slot = "11")]
	public void Tick()
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0xF6ADF0", Offset = "0xF6ADF0", VA = "0xF6ADF0", Slot = "9")]
	public FingerData GetFingers(Handedness handedness)
	{
		return null;
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0xF6ADF8", Offset = "0xF6ADF8", VA = "0xF6ADF8", Slot = "10")]
	public void SetConnectionCallbacks(RGXR_Device deviceName, Action onConnected, Action onDisconnected)
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0xF6ADFC", Offset = "0xF6ADFC", VA = "0xF6ADFC", Slot = "12")]
	public void PlayHaptics(RGXR_Device device, float amplitude, float duration)
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0xF6AE00", Offset = "0xF6AE00", VA = "0xF6AE00", Slot = "13")]
	public void Stop()
	{
	}
}
[Token(Token = "0x200005D")]
public class ArcadePlayerInfoPanelReference : MonoBehaviour
{
	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Canvas canvas;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI playerName;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI playersOnline;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public BoxCollider mainCollider;

	[Token(Token = "0x6000208")]
	[Address(RVA = "0xF6AE04", Offset = "0xF6AE04", VA = "0xF6AE04")]
	public ArcadePlayerInfoPanelReference()
	{
	}
}
[Token(Token = "0x200005E")]
public class MatchTimerReference : MonoBehaviour
{
	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TMP_Text minutes;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TMP_Text seconds;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TMP_Text separator;

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xF6AE0C", Offset = "0xF6AE0C", VA = "0xF6AE0C")]
	public MatchTimerReference()
	{
	}
}
[Token(Token = "0x200005F")]
public class DebugAiPlanningReferences : MonoBehaviour
{
	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RectTransform rectTransform;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RectTransform agentWorldView;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RectTransform availableActions;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RectTransform availableGoals;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RectTransform currentPlan;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI botname;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI aiWorldViewTemplate;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI currentPlanCost;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshProUGUI currentGoal;

	[Token(Token = "0x600020A")]
	[Address(RVA = "0xF6AE14", Offset = "0xF6AE14", VA = "0xF6AE14")]
	public DebugAiPlanningReferences()
	{
	}
}
[Token(Token = "0x2000060")]
public class DebugStatsReferences : MonoBehaviour
{
	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RectTransform rectTransform;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI onlineMode;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI master;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI roomCode;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshProUGUI masterNum;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI connection;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI gameMode;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI gameState;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshProUGUI arenaState;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TextMeshProUGUI currentPlayers;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public TextMeshProUGUI maxPlayers;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public TextMeshProUGUI currentObservers;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public TextMeshProUGUI maxObservers;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public TextMeshProUGUI ping;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public TextMeshProUGUI matchId;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public TextMeshProUGUI botStatus;

	[Token(Token = "0x600020B")]
	[Address(RVA = "0xF6AE1C", Offset = "0xF6AE1C", VA = "0xF6AE1C")]
	public DebugStatsReferences()
	{
	}
}
[Token(Token = "0x2000061")]
public class AnimationCallback : MonoBehaviour
{
	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action onAnimaitonTrigger;

	[Token(Token = "0x600020C")]
	[Address(RVA = "0xF6AE24", Offset = "0xF6AE24", VA = "0xF6AE24")]
	public void OnAnimationTrigger()
	{
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0xF6AE48", Offset = "0xF6AE48", VA = "0xF6AE48")]
	public AnimationCallback()
	{
	}
}
[Token(Token = "0x2000062")]
public class PointerReferences : MonoBehaviour
{
	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LineRenderer lineRenderer;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform reticle;

	[Token(Token = "0x600020E")]
	[Address(RVA = "0xF6AE50", Offset = "0xF6AE50", VA = "0xF6AE50")]
	public PointerReferences()
	{
	}
}
[Token(Token = "0x2000063")]
public class AssignSpriteToParticleSystems : MonoBehaviour
{
	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Sprite icon;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEngine.Sprite newIcon;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ParticleSystem[] emitFromIconVFX;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ParticleSystem[] emitIconVFX;

	[Token(Token = "0x600020F")]
	[Address(RVA = "0xF6AE58", Offset = "0xF6AE58", VA = "0xF6AE58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0xF6B060", Offset = "0xF6B060", VA = "0xF6B060")]
	public AssignSpriteToParticleSystems()
	{
	}
}
[Token(Token = "0x2000064")]
[DisallowMultipleComponent]
[RequireComponent(typeof(TextMeshProUGUI))]
public class TMProUGUIHyperlinks : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
{
	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Color32 hoveredColor;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private Color32 pressedColor;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Ignis.InteractionTrigger interactionTrigger;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PointerData pointerData;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Color32[]> startColors;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private TextMeshProUGUI textMeshPro;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<int, bool> usedLinks;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int hoveredLinkIndex;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int pressedLinkIndex;

	[Token(Token = "0x6000211")]
	[Address(RVA = "0xF6B068", Offset = "0xF6B068", VA = "0xF6B068")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0xF6B0B8", Offset = "0xF6B0B8", VA = "0xF6B0B8", Slot = "4")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0xF6B574", Offset = "0xF6B574", VA = "0xF6B574", Slot = "5")]
	public void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0xF6B678", Offset = "0xF6B678", VA = "0xF6B678")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0xF6B13C", Offset = "0xF6B13C", VA = "0xF6B13C")]
	private int GetLinkIndex()
	{
		return default(int);
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0xF6B1BC", Offset = "0xF6B1BC", VA = "0xF6B1BC")]
	private List<Color32[]> SetLinkColor(int linkIndex, Color32 color)
	{
		return null;
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0xF6B73C", Offset = "0xF6B73C", VA = "0xF6B73C")]
	private void ResetLinkColor(int linkIndex, List<Color32[]> startColors)
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0xF6BA14", Offset = "0xF6BA14", VA = "0xF6BA14")]
	private int FindIntersectingLink(TMP_Text text, Vector3 position)
	{
		return default(int);
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0xF6BDDC", Offset = "0xF6BDDC", VA = "0xF6BDDC")]
	private bool PointIntersectRectangle(Vector3 m, Vector3 a, Vector3 b, Vector3 c, Vector3 d)
	{
		return default(bool);
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xF6BE9C", Offset = "0xF6BE9C", VA = "0xF6BE9C")]
	public TMProUGUIHyperlinks()
	{
	}
}
[Token(Token = "0x2000065")]
public class OnBoardingViewData
{
	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool isActive;

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xF6BF70", Offset = "0xF6BF70", VA = "0xF6BF70")]
	public OnBoardingViewData()
	{
	}
}
[Token(Token = "0x2000066")]
public class OnBoardingPopupHandler : ITickable
{
	[StructLayout(3)]
	[Token(Token = "0x2000067")]
	[CompilerGenerated]
	private struct <Clean>d__18 : IAsyncStateMachine
	{
		[Token(Token = "0x4000170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x4000171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OnBoardingPopupHandler <>4__this;

		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TaskAwaiter <>u__1;

		[Token(Token = "0x6000228")]
		[Address(RVA = "0xF6CA20", Offset = "0xF6CA20", VA = "0xF6CA20", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0xF6CB98", Offset = "0xF6CB98", VA = "0xF6CB98", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[StructLayout(3)]
	[Token(Token = "0x2000068")]
	[CompilerGenerated]
	private struct <CleanAsync>d__23 : IAsyncStateMachine
	{
		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x4000175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncTaskMethodBuilder <>t__builder;

		[Token(Token = "0x4000176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnBoardingPopupHandler <>4__this;

		[Token(Token = "0x4000177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TaskAwaiter <>u__1;

		[Token(Token = "0x600022A")]
		[Address(RVA = "0xF6CBA4", Offset = "0xF6CBA4", VA = "0xF6CBA4", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x600022B")]
		[Address(RVA = "0xF6CEAC", Offset = "0xF6CEAC", VA = "0xF6CEAC", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly UnityEngine.AddressableAssets.AssetReference onboardingPopupViewReferencePrefab;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly IgnisButton onBoardingInfoButtonPrefab;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly MenuStateData menuStateData;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Ignis.LocalPersistentData localPersistentData;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly PersistantDataUtility persistantDataUtility;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly OnBoardingViewData onBoardingViewData;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OnboardingPopupViewReference onboardingPopupViewReference;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int currentPage;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AsyncOperationHandle<GameObject> asyncOperationHandle;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private IgnisButton infoButton;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool shouldLoadPopup;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	private bool isInfoButtonActive;

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xF6BF78", Offset = "0xF6BF78", VA = "0xF6BF78")]
	public OnBoardingPopupHandler(UnityEngine.AddressableAssets.AssetReference onboardingPopupViewReferencePrefab, IgnisButton onBoardingInfoButtonPrefab, MenuStateData menuStateData, Ignis.LocalPersistentData localPersistentData, OnBoardingViewData onBoardingViewData, PersistantDataUtility persistantDataUtility)
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0xF6BFCC", Offset = "0xF6BFCC", VA = "0xF6BFCC")]
	public void Initialize()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xF6C24C", Offset = "0xF6C24C", VA = "0xF6C24C")]
	private void SetPersistentData(bool hasBeenSeen)
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xF6C2C8", Offset = "0xF6C2C8", VA = "0xF6C2C8")]
	private void ClosePopup()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xF6C2E8", Offset = "0xF6C2E8", VA = "0xF6C2E8")]
	private void ShowPopup()
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xF6C114", Offset = "0xF6C114", VA = "0xF6C114")]
	private void SetActive(bool active)
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xF6C2F0", Offset = "0xF6C2F0", VA = "0xF6C2F0")]
	[AsyncStateMachine(typeof(<Clean>d__18))]
	private void Clean()
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xF6C384", Offset = "0xF6C384", VA = "0xF6C384")]
	private void NextPage()
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xF6C390", Offset = "0xF6C390", VA = "0xF6C390")]
	private void TogglePages(int nextPage)
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xF6C624", Offset = "0xF6C624", VA = "0xF6C624")]
	private void SetDots(int pageNumber)
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xF6C78C", Offset = "0xF6C78C", VA = "0xF6C78C", Slot = "4")]
	public void Tick()
	{
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0xF6C958", Offset = "0xF6C958", VA = "0xF6C958")]
	[AsyncStateMachine(typeof(<CleanAsync>d__23))]
	private Task CleanAsync()
	{
		return null;
	}
}
[Token(Token = "0x2000069")]
public class OnboardingPopupViewReference : MonoBehaviour
{
	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OnboardingPagesReference[] pagesInOrder;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public IgnisButton continueButton;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LocalizedText buttonText;

	[Token(Token = "0x600022C")]
	[Address(RVA = "0xF6CEB8", Offset = "0xF6CEB8", VA = "0xF6CEB8")]
	public OnboardingPopupViewReference()
	{
	}
}
[Token(Token = "0x200006A")]
public class EmitFromTransform : MonoBehaviour
{
	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public ParticleSystem ps;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.VelocityOverLifetimeModule velocityModule;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.EmitParams emitParams;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	public Transform emitterTransform;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private float distanceSpeedScale;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[SerializeField]
	private int burstAmmount;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool initialized;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float distance;

	[Token(Token = "0x600022D")]
	[Address(RVA = "0xF6CEC0", Offset = "0xF6CEC0", VA = "0xF6CEC0")]
	private void Start()
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xF6CF2C", Offset = "0xF6CF2C", VA = "0xF6CF2C")]
	private void Update()
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xF6D03C", Offset = "0xF6D03C", VA = "0xF6D03C")]
	public void DoEmit()
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xF6CF54", Offset = "0xF6CF54", VA = "0xF6CF54")]
	private void CheckDistance()
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xF6D024", Offset = "0xF6D024", VA = "0xF6D024")]
	private void SetRadialVelocity()
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0xF6D0E0", Offset = "0xF6D0E0", VA = "0xF6D0E0")]
	public EmitFromTransform()
	{
	}
}
[Token(Token = "0x200006B")]
public class LookAtObject : MonoBehaviour
{
	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform lookAt;

	[Token(Token = "0x6000233")]
	[Address(RVA = "0xF6D0E8", Offset = "0xF6D0E8", VA = "0xF6D0E8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xF6D110", Offset = "0xF6D110", VA = "0xF6D110")]
	public LookAtObject()
	{
	}
}
[Token(Token = "0x200006C")]
public class PassDownParticleColor : MonoBehaviour
{
	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ParticleSystem[] colorInheritors;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ParticleSystem self;

	[Token(Token = "0x6000235")]
	[Address(RVA = "0xF6D118", Offset = "0xF6D118", VA = "0xF6D118")]
	private void Start()
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0xF6D1D4", Offset = "0xF6D1D4", VA = "0xF6D1D4")]
	public PassDownParticleColor()
	{
	}
}
[Token(Token = "0x200006D")]
public class PlayerInfoPanelReference : MonoBehaviour
{
	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Canvas canvas;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BoxCollider mainCollider;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LevelUpPopupReference levelUpPopupReference;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Animator animator;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ExperienceCounterReference experienceCounterReference;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshProUGUI premiumCoins;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshProUGUI inGameCoins;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshProUGUI displayName;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public LocalizedText level;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject processingPurchase;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Button leagueButton;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public TextMeshProUGUI ratingText;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public LocalizedText rankLocalizedText;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Image leagueTierIcon;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Image leagueTierBackground;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject leagueDefaultParent;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject leagueUpParent;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform[] vfxRewardsSourceTransform;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public TextMeshProUGUI[] rewardPopUpTexts;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Transform defaultRewardSource;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public MultiTriggerAnimatorStateData multiTriggerRewardAnimation;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public PlayerInfoPanelReferenceAnimationCallback playerInfoPanelReferenceAnimationCallback;

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xF6D1DC", Offset = "0xF6D1DC", VA = "0xF6D1DC")]
	public PlayerInfoPanelReference()
	{
	}
}
[Token(Token = "0x200006E")]
public class PlayParticle : MonoBehaviour
{
	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem ps;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool initialized;

	[Token(Token = "0x6000238")]
	[Address(RVA = "0xF6D1E4", Offset = "0xF6D1E4", VA = "0xF6D1E4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0xF6D23C", Offset = "0xF6D23C", VA = "0xF6D23C")]
	public void Play()
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0xF6D268", Offset = "0xF6D268", VA = "0xF6D268")]
	public PlayParticle()
	{
	}
}
[Token(Token = "0x200006F")]
public class ReportIssueToggleReferences : MonoBehaviour
{
	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI text;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color textActiveColor;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color textInactiveColor;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Toggle toggle;

	[Token(Token = "0x600023B")]
	[Address(RVA = "0xF6D270", Offset = "0xF6D270", VA = "0xF6D270")]
	public ReportIssueToggleReferences()
	{
	}
}
[Token(Token = "0x2000070")]
public class AttachementToolIconReference : MonoBehaviour
{
	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject frameTransform;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image[] icons;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Image[] subIcon;

	[Token(Token = "0x600023C")]
	[Address(RVA = "0xF6D288", Offset = "0xF6D288", VA = "0xF6D288")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0xF6D3CC", Offset = "0xF6D3CC", VA = "0xF6D3CC")]
	public void SetIcon(int index, bool isEnabled, bool isEquiped)
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xF6D478", Offset = "0xF6D478", VA = "0xF6D478")]
	public AttachementToolIconReference()
	{
	}
}
[Token(Token = "0x2000071")]
public class ToolCategoryReference : MonoBehaviour
{
	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LocalizedText categoryName;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RectTransform categoriesContainer;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ToolAttributeReference[] toolAttributesReferences;

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xF6D480", Offset = "0xF6D480", VA = "0xF6D480")]
	public ToolCategoryReference()
	{
	}
}
[Token(Token = "0x2000072")]
public class ToolInformationCategoryReference : MonoBehaviour
{
	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RectTransform rectTransform;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ToolCategoryReference[] toolCategoryReferences;

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xF6D488", Offset = "0xF6D488", VA = "0xF6D488")]
	public ToolInformationCategoryReference()
	{
	}
}
[Token(Token = "0x2000073")]
public class OnboardingButtonReferences : MonoBehaviour
{
	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IgnisButton startButton;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TMP_Text startText;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public IgnisButton skipButton;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TMP_Text skipText;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject parent;

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xF6D490", Offset = "0xF6D490", VA = "0xF6D490")]
	public OnboardingButtonReferences()
	{
	}
}
[Token(Token = "0x2000074")]
[CreateAssetMenu(menuName = "Settings/Passthrough", fileName = "PassthroughSettings")]
public class PassthroughSettings : ScriptableObject
{
	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Scenes")]
	public SceneId[] passthroughScenes;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Scene Style")]
	public FogMode fogMode;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float fogStart;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fogEnd;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Header("Passthrough Style")]
	[Range(0f, 1f)]
	public float opacity;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool edgeRendering;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(-1f, 1f)]
	public float contrast;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Range(-1f, 1f)]
	public float brightness;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Range(0f, 1f)]
	public float posterize;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Gradient color;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float colorShiftTime;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("UI")]
	public PassthroughSettingsViewReference passthroughSettingsViewReference;

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xF6D498", Offset = "0xF6D498", VA = "0xF6D498")]
	public PassthroughSettings()
	{
	}
}
[Token(Token = "0x2000075")]
public class ProgressionHandler : ITickable
{
	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly PlayFabProgressionData playFabProgressionData;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly OwnershipData ownershipData;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int currentLevel;

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xF6D4C4", Offset = "0xF6D4C4", VA = "0xF6D4C4")]
	public ProgressionHandler(PlayFabProgressionData playFabProgressionData, OwnershipData ownershipData)
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xF6D508", Offset = "0xF6D508", VA = "0xF6D508")]
	public void SetupDebug()
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xF6D50C", Offset = "0xF6D50C", VA = "0xF6D50C", Slot = "4")]
	public void Tick()
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0xF6D548", Offset = "0xF6D548", VA = "0xF6D548")]
	private void UpdateOwnerShip()
	{
	}
}
[Token(Token = "0x2000076")]
public class PhotonVoiceReference : MonoBehaviour
{
	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PhotonView photonView;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PhotonVoiceView photonVoiceView;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource audioSource;

	[Token(Token = "0x6000247")]
	[Address(RVA = "0xF6D5A4", Offset = "0xF6D5A4", VA = "0xF6D5A4")]
	public PhotonVoiceReference()
	{
	}
}
[Token(Token = "0x2000077")]
internal static class PlayFabStaticUtils
{
	[Token(Token = "0x6000248")]
	[Address(RVA = "0xF6D5AC", Offset = "0xF6D5AC", VA = "0xF6D5AC")]
	public static int extractInt(JsonObject objFunctionResult, string name)
	{
		return default(int);
	}
}
[Token(Token = "0x2000078")]
public class DotProjectile : MonoBehaviour
{
	[Token(Token = "0x6000249")]
	[Address(RVA = "0xF6D64C", Offset = "0xF6D64C", VA = "0xF6D64C")]
	private void Start()
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0xF6D650", Offset = "0xF6D650", VA = "0xF6D650")]
	private void Update()
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0xF6D654", Offset = "0xF6D654", VA = "0xF6D654")]
	public DotProjectile()
	{
	}
}
[Token(Token = "0x2000079")]
public class ImpactableRedirector : MonoBehaviour, IImpactableReference
{
	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TriggerColliderType colliderType;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BoxColliderReference impactableReference;

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xF6D65C", Offset = "0xF6D65C", VA = "0xF6D65C", Slot = "4")]
	public TriggerColliderType TriggerColliderType()
	{
		return default(TriggerColliderType);
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0xF6D664", Offset = "0xF6D664", VA = "0xF6D664", Slot = "5")]
	public IImpactable Impactable()
	{
		return null;
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0xF6D680", Offset = "0xF6D680", VA = "0xF6D680")]
	public ImpactableRedirector()
	{
	}
}
[Token(Token = "0x200007A")]
public class RotateObject : MonoBehaviour
{
	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float rotationSpeed;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float rotationX;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float rotationY;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float rotationZ;

	[Token(Token = "0x600024F")]
	[Address(RVA = "0xF6D688", Offset = "0xF6D688", VA = "0xF6D688")]
	private void Start()
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xF6D71C", Offset = "0xF6D71C", VA = "0xF6D71C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xF6D7A4", Offset = "0xF6D7A4", VA = "0xF6D7A4")]
	public RotateObject()
	{
	}
}
[Token(Token = "0x200007B")]
public class HealthBarReference : MonoBehaviour
{
	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer healthRenderer;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TMP_Text text;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TMP_Text leaguePointsText;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject leaguePointsContainer;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Image characterIcon;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<GameObject> pingIndicators;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ParticleSystem OutlineHit;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ParticleSystem LowHPWarning;

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xF6D7B4", Offset = "0xF6D7B4", VA = "0xF6D7B4")]
	public HealthBarReference()
	{
	}
}
[Token(Token = "0x200007C")]
[CreateAssetMenu(menuName = "Settings/Arena/ScoreHandlerSettings")]
public class ScoreHandlerSettings : ScriptableObject
{
	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve markerCurve;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float animationTime;

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xF6D7BC", Offset = "0xF6D7BC", VA = "0xF6D7BC")]
	public ScoreHandlerSettings()
	{
	}
}
[Token(Token = "0x200007D")]
public class ScoreReferences : MonoBehaviour
{
	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RoundWonReference[] roundWonMarkersPlayer1;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RoundWonReference[] roundWonMarkersPlayer2;

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xF6D7C4", Offset = "0xF6D7C4", VA = "0xF6D7C4")]
	public ScoreReferences()
	{
	}
}
[Token(Token = "0x200007E")]
public class AIRecorder : ITickable
{
	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly GameData gameData;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly MenuStateData menuStateData;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly NetworkData networkData;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly MessageSender messageSender;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly GameMessageFactory gameMessageFactory;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly RecordData recordData;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float networkMessageUpdateTimer;

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xF6D7CC", Offset = "0xF6D7CC", VA = "0xF6D7CC")]
	public AIRecorder(GameData gameData, MenuStateData menuStateData, NetworkData networkData, MessageSender messageSender, GameMessageFactory gameMessageFactory, RecordData recordData)
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xF6D820", Offset = "0xF6D820", VA = "0xF6D820", Slot = "4")]
	public void Tick()
	{
	}
}
[Token(Token = "0x200007F")]
[CreateAssetMenu(menuName = "Settings/SinglePlayer/BotSettings")]
public class BotSettings : ScriptableObject
{
	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public int aiSelectionId;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string displayName;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("A string identifying the bot in PlayFabs list of bots. Used to find this bot during matchmaking. Should be unique for bots that are available in matchmaking. Leave empty if this bot is not part of matchmaking.")]
	[Header("PlayFab")]
	public string playFabBotId;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public int leaguePoints;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[FormerlySerializedAs("toolsToSpawn")]
	[Header("Weapon Deck")]
	public List<ToolSet> classicToolsToSpawn;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<ToolName> shootOutToolsToSpawn;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<ToolName> scrapperShootOutToolsToSpawn;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<ToolName> winterClassicToolsToSpawn;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Skins")]
	public int characterSkin;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string characterSkinId;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int platformSkin;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int bannerSkin;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("Visual")]
	[Range(0.5f, 1f)]
	[Tooltip("The bot's arm length")]
	public float armLength;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[Tooltip("The bot's minimum head height. This determines how low the bot can go")]
	[Range(0.6f, 1f)]
	public float minHeadHeight;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("The bot's maximum head height. This determines how high the bot can go")]
	[Range(1.1f, 1.7f)]
	public float maxHeadHeight;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[Tooltip("The bot's standing head height. This determines the default bot height. Should not be lower than min head height, or greater than max head height")]
	[Range(0.6f, 1.7f)]
	public float standingHeadHeight;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("Determines whether the bot is able to move or not. Overrides moveSpeed below")]
	public bool isAbleToMove;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[Tooltip("The bot's movement speed. This is the mean value of a gaussian curve distribution")]
	[Range(0.333f, 1f)]
	public float moveSpeed;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Tooltip("The bot's movement speed multiplier")]
	[Range(1f, 10f)]
	public float moveSpeedMultiplier;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[Range(0f, 1f)]
	[Header("Behavior Controls")]
	[Tooltip("How accurately the bot aims weapons. 0 = very inaccurately, 1 = very accurately")]
	public float aimAccuracy;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Range(15f, 360f)]
	[Tooltip("The bot's field of view, in degrees. It will only notice threats in its FOV (but once noticed 'knows' the threat even when not looking at it)")]
	public float fieldOfView;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[Tooltip("Threats entering this range will be noticed by the bot even if outside of its field of view, subject to the Notice Chance. This simulates hearing and allows for apparent surprise")]
	[Range(0f, 1f)]
	public float veryNearSensingDistance;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("The amount of time it takes for the bot to look at threats again. The lowr the number, the less time the bot will take until it looks at the same threat again")]
	[Range(0f, 2f)]
	public float lookAgainTime;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[Tooltip("The time the bot will wait between attempts to pick up weapons")]
	[Range(0f, 10f)]
	public float pickUpWeaponDelay;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Tooltip("The variation (in +/- seconds) of the Pick Up Weapon Delay")]
	[Range(0f, 10f)]
	public float pickUpWeaponDelayVariation;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[Range(0f, 1f)]
	[Tooltip("The chance that the bot will move towards the back of the platform when the player is holding a sniper. 0=never move, 1=always move.")]
	public float moveTowardsBackOfPlatformChance;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Range(0f, 1f)]
	[Tooltip("The chance that the bot will throw empty weapons. 0=never throw, 1=always throw.")]
	public float throwWeaponsChance;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[Range(0f, 1f)]
	[Tooltip("The chance that the bot will throw empty weapons at the player, or throw them defensively at projectiles. 0=throw towards player, 1=throw towards incoming projectiles.")]
	public float throwWeaponsOffensivelyOrDefensivelyChance;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Tooltip("If unchecked, the bot will only move horizontally, and never crouch down when dodging")]
	public bool isAbleToCrouch;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	[Tooltip("If unchecked, the bot will never use its right hand")]
	public bool isRightHandUsed;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
	[Tooltip("If unchecked, the bot will never use its left hand")]
	public bool isLeftHandUsed;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB3")]
	[Tooltip("If checked, the bot will focus only on the most dangerous threat and ignore everything else (the original system)")]
	public bool isAttentionSingular;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[Tooltip("If checked, watch noticed fast projectiles. Does not affect whether the bot notices the shots, only whether it looks at them")]
	public bool canWatchFastProjectiles;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Header("Weapon Controls")]
	[Tooltip("The time (in seconds) after a bot picks up a weapon before it starts firing")]
	[Range(1f, 5f)]
	public float initialWeaponFireDelay;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	[Tooltip("The time (in seconds) the bot keeps trying to fire a weapon that has run out of ammo")]
	[Range(0f, 5f)]
	public float dryFireTime;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[FormerlySerializedAs("defaultToolSettings")]
	[Tooltip("The default classic tool settings to be used if not explicitly set")]
	public BotToolSettings classicDefaultToolSettings;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public BotToolSettings shootOutDefaultToolSettings;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public BotToolSettings scrapperShootOutDefaultToolSettings;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[FormerlySerializedAs("botToolSettings")]
	[Tooltip("Classic game mode tool specific settings to override the default settings")]
	public BotToolSettingsData[] classicBotToolSettings;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[Tooltip("Shootout game mode tool specific settings to override the default settings")]
	public BotToolSettingsData[] shootOutBotToolSettings;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[Tooltip("Scrapper Shootout game mode tool specific settings to override the default settings")]
	public BotToolSettingsData[] scrapperShootOutBotToolSettings;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[Tooltip("List of emotes available for the bot to use")]
	[Header("Emotes")]
	public List<BotEmoteSettings> emotes;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[Tooltip("Emotes played while in a round, interrupting the regular AI")]
	public BotEmoteInterruptSettings interruptingEmotes;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public readonly float headRadius;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public readonly float torsoRadius;

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xF6DB70", Offset = "0xF6DB70", VA = "0xF6DB70")]
	public BotSettings()
	{
	}
}
[Token(Token = "0x2000080")]
public class CertificateFingerprintTrackingHandler : ITickable
{
	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly LoginData loginData;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly IgnisTelemetry ignisTelemetry;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool tracked;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool gotFingerPrint;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	private bool doneGettingFingerPrint;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	private bool reportedToPlayFab;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string certificateFingerPrint;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool allDone;

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xF6E210", Offset = "0xF6E210", VA = "0xF6E210")]
	public CertificateFingerprintTrackingHandler(LoginData loginData, IgnisTelemetry ignisTelemetry)
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xF6E23C", Offset = "0xF6E23C", VA = "0xF6E23C", Slot = "4")]
	public void Tick()
	{
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xF6E714", Offset = "0xF6E714", VA = "0xF6E714")]
	private void GetCertificateString()
	{
	}
}
[Serializable]
[Token(Token = "0x2000082")]
public class BarrierSlotReference : MonoBehaviour
{
	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject selectedBarrierSlot;

	[Token(Token = "0x600025F")]
	[Address(RVA = "0xF6EA40", Offset = "0xF6EA40", VA = "0xF6EA40")]
	public BarrierSlotReference()
	{
	}
}
[Token(Token = "0x2000083")]
public interface IDamageOverTime
{
	[Token(Token = "0x1700004E")]
	Transform DOTSoundTransform
	{
		[Token(Token = "0x6000261")]
		get;
	}

	[Token(Token = "0x6000260")]
	DamageOverTimeSettings DamageOverTimeSettings();

	[Token(Token = "0x6000262")]
	int NetworkId();

	[Token(Token = "0x6000263")]
	float GetDamageProjectile();

	[Token(Token = "0x6000264")]
	float GetDamagePlayer();

	[Token(Token = "0x6000265")]
	float GetTotalPredictedPlayerDamage();

	[Token(Token = "0x6000266")]
	bool IsDestroyed();
}
[Token(Token = "0x2000084")]
[CreateAssetMenu(menuName = "Settings/ThrowSettings")]
public class ThrowSettings : ScriptableObject
{
	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float gravity;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 gravityDirection;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotationScale;

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xF6EA48", Offset = "0xF6EA48", VA = "0xF6EA48")]
	public ThrowSettings()
	{
	}
}
[Token(Token = "0x2000085")]
public class ToolSpawnViewHandler : ITickable
{
	[Token(Token = "0x2000086")]
	private struct ShowingTool
	{
		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly bool showingTool;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Material material;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Vector3 position;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly Vector3 direction;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly Mesh toolMesh;

		[Token(Token = "0x600026C")]
		[Address(RVA = "0xF6EC3C", Offset = "0xF6EC3C", VA = "0xF6EC3C")]
		public ShowingTool(bool showingTool, Material material, Vector3 position, Vector3 direction, Mesh toolMesh)
		{
		}
	}

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly ToolSpawnData toolSpawnData;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly GameData gameData;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly DeckSpawnSettings deckSpawnSettings;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly MenuStateData menuStateData;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly CustomizationData customizationData;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly ToolCustomizationSettings toolCustomizationSettings;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly ToolViewData toolViewData;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int Progress;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private readonly ShowingTool[] showingTools;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int Color;

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xF6EA50", Offset = "0xF6EA50", VA = "0xF6EA50")]
	public ToolSpawnViewHandler(ToolSpawnData toolSpawnData, GameData gameData, DeckSpawnSettings deckSpawnSettings, MenuStateData menuStateData, CustomizationData customizationData, ToolCustomizationSettings toolCustomizationSettings, ToolViewData toolViewData)
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xF6EC5C", Offset = "0xF6EC5C", VA = "0xF6EC5C", Slot = "4")]
	public void Tick()
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xF6F23C", Offset = "0xF6F23C", VA = "0xF6F23C")]
	private int TryGetToolSkinId(Dictionary<ToolName, string> toolSkinLookup, ToolName tool)
	{
		return default(int);
	}
}
[Token(Token = "0x2000087")]
public class IgnisButton : Button
{
	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[HideInInspector]
	public string id;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public ButtonClickedEvent onHover;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public ButtonClickedEvent onPointerEnter;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public ButtonClickedEvent onPointerExit;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[HideInInspector]
	public ButtonClickedEvent onPointerUp;

	[Token(Token = "0x1700004F")]
	public ButtonClickedEvent OnHover
	{
		[Token(Token = "0x600026D")]
		[Address(RVA = "0xF6F384", Offset = "0xF6F384", VA = "0xF6F384")]
		get
		{
			return null;
		}
		[Token(Token = "0x600026E")]
		[Address(RVA = "0xF6F38C", Offset = "0xF6F38C", VA = "0xF6F38C")]
		set
		{
		}
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0xF6F394", Offset = "0xF6F394", VA = "0xF6F394", Slot = "34")]
	public override void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xF6F3F4", Offset = "0xF6F3F4", VA = "0xF6F3F4", Slot = "35")]
	public override void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xF6F454", Offset = "0xF6F454", VA = "0xF6F454", Slot = "33")]
	public override void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xF6F4B4", Offset = "0xF6F4B4", VA = "0xF6F4B4", Slot = "26")]
	protected override void DoStateTransition(SelectionState state, bool instant)
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0xF6F500", Offset = "0xF6F500", VA = "0xF6F500")]
	public IgnisButton()
	{
	}
}
[Token(Token = "0x2000088")]
public class IgnisDropdown : Ignis.Dropdown
{
	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public DropdownEvent onHover;

	[Token(Token = "0x17000050")]
	public DropdownEvent OnHover
	{
		[Token(Token = "0x6000274")]
		[Address(RVA = "0xF6F5BC", Offset = "0xF6F5BC", VA = "0xF6F5BC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000275")]
		[Address(RVA = "0xF6F5C4", Offset = "0xF6F5C4", VA = "0xF6F5C4")]
		set
		{
		}
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xF6F5CC", Offset = "0xF6F5CC", VA = "0xF6F5CC", Slot = "26")]
	protected override void DoStateTransition(SelectionState state, bool instant)
	{
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xF6F65C", Offset = "0xF6F65C", VA = "0xF6F65C")]
	public IgnisDropdown()
	{
	}
}
[Token(Token = "0x2000089")]
public class CallChild : MonoBehaviour
{
	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject[] scriptHolder;

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xF6F6E8", Offset = "0xF6F6E8", VA = "0xF6F6E8")]
	public void TriggerChildScript()
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xF6F72C", Offset = "0xF6F72C", VA = "0xF6F72C")]
	public CallChild()
	{
	}
}
[Token(Token = "0x200008A")]
public class DanceFloorVFXHandler : MonoBehaviour
{
	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private MeshRenderer[] VFXobjects;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string[] TimeParameters;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float[] startValues;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float scaleSpeed;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Animator[] anim;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ParticleSystem[] particle;

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xF6F734", Offset = "0xF6F734", VA = "0xF6F734")]
	private void Start()
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xF6F8B8", Offset = "0xF6F8B8", VA = "0xF6F8B8")]
	private void Update()
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xF6FA88", Offset = "0xF6FA88", VA = "0xF6FA88")]
	public DanceFloorVFXHandler()
	{
	}
}
[Token(Token = "0x200008B")]
public class EmitFromTransform_VFX : MonoBehaviour
{
	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem ps;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.VelocityOverLifetimeModule velocityModule;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.EmitParams emitParams;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private Transform emitterTransform;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private float distanceSpeedScale;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[SerializeField]
	private int burstAmmount;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private bool initialized;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float distance;

	[Token(Token = "0x600027D")]
	[Address(RVA = "0xF6FA98", Offset = "0xF6FA98", VA = "0xF6FA98")]
	private void Start()
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0xF6FB04", Offset = "0xF6FB04", VA = "0xF6FB04")]
	private void Update()
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xF6FC14", Offset = "0xF6FC14", VA = "0xF6FC14")]
	public void DoEmit()
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xF6FB2C", Offset = "0xF6FB2C", VA = "0xF6FB2C")]
	private void CheckDistance()
	{
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xF6FBFC", Offset = "0xF6FBFC", VA = "0xF6FBFC")]
	private void SetRadialVelocity()
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xF6FCB8", Offset = "0xF6FCB8", VA = "0xF6FCB8")]
	public EmitFromTransform_VFX()
	{
	}
}
[Token(Token = "0x200008C")]
public class LineRendererAnchorsVFX : MonoBehaviour
{
	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform startPoint;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform endPoint;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private LineRenderer lineRenderer;

	[Token(Token = "0x6000283")]
	[Address(RVA = "0xF6FCC0", Offset = "0xF6FCC0", VA = "0xF6FCC0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0xF6FCF8", Offset = "0xF6FCF8", VA = "0xF6FCF8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0xF6FD60", Offset = "0xF6FD60", VA = "0xF6FD60")]
	public LineRendererAnchorsVFX()
	{
	}
}
[Token(Token = "0x200008D")]
public class LookAtObject_VFX : MonoBehaviour
{
	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform lookAt;

	[Token(Token = "0x6000286")]
	[Address(RVA = "0xF6FD68", Offset = "0xF6FD68", VA = "0xF6FD68")]
	private void Update()
	{
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0xF6FD90", Offset = "0xF6FD90", VA = "0xF6FD90")]
	public LookAtObject_VFX()
	{
	}
}
[Token(Token = "0x200008E")]
public class PassDownParticleColor_VFX : MonoBehaviour
{
	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ParticleSystem[] colorInheritors;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ParticleSystem self;

	[Token(Token = "0x6000288")]
	[Address(RVA = "0xF6FD98", Offset = "0xF6FD98", VA = "0xF6FD98")]
	private void Start()
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0xF6FE50", Offset = "0xF6FE50", VA = "0xF6FE50")]
	public PassDownParticleColor_VFX()
	{
	}
}
[Token(Token = "0x200008F")]
public class PlayParticle_VFX : MonoBehaviour
{
	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem ps;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool initialized;

	[Token(Token = "0x600028A")]
	[Address(RVA = "0xF6FE58", Offset = "0xF6FE58", VA = "0xF6FE58")]
	private void Start()
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0xF6FEB0", Offset = "0xF6FEB0", VA = "0xF6FEB0")]
	public void Play()
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0xF6FEDC", Offset = "0xF6FEDC", VA = "0xF6FEDC")]
	public PlayParticle_VFX()
	{
	}
}
[Token(Token = "0x2000090")]
public class PositionsToShader_VFX : MonoBehaviour
{
	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] position;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer shader;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string[] reference;

	[Token(Token = "0x600028D")]
	[Address(RVA = "0xF6FEE4", Offset = "0xF6FEE4", VA = "0xF6FEE4")]
	private void Start()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0xF6FFB4", Offset = "0xF6FFB4", VA = "0xF6FFB4")]
	private void Update()
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0xF7006C", Offset = "0xF7006C", VA = "0xF7006C")]
	public PositionsToShader_VFX()
	{
	}
}
namespace RGCommon.PlayFab
{
	[Token(Token = "0x2000091")]
	public class PlatformLoginData
	{
		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlatformLoginState state;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public LoginProvider loginProvider;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string platformAuthenticationString;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string platformUserId;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool retryInCaseOfError;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float timeOfError;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool isEntitled;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string platformPushToken;

		[Token(Token = "0x6000290")]
		[Address(RVA = "0xF70074", Offset = "0xF70074", VA = "0xF70074")]
		public PlatformLoginData()
		{
		}
	}
	[Token(Token = "0x2000092")]
	public enum LoginProvider
	{
		[Token(Token = "0x400024E")]
		CustomId,
		[Token(Token = "0x400024F")]
		Steam,
		[Token(Token = "0x4000250")]
		UserNamePassword
	}
	[Token(Token = "0x2000093")]
	public enum PlatformLoginState
	{
		[Token(Token = "0x4000252")]
		Uninitialized,
		[Token(Token = "0x4000253")]
		Initializing,
		[Token(Token = "0x4000254")]
		GettingUserInfo,
		[Token(Token = "0x4000255")]
		GotUserInfo,
		[Token(Token = "0x4000256")]
		ErrorWaitForRetry,
		[Token(Token = "0x4000257")]
		EntitlementFailed
	}
	[Token(Token = "0x2000094")]
	public class PlayFabCloudScriptInvocationData
	{
		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<CloudScriptInvocationRequest> requests;

		[Token(Token = "0x6000291")]
		[Address(RVA = "0xF7007C", Offset = "0xF7007C", VA = "0xF7007C")]
		public PlayFabCloudScriptInvocationData()
		{
		}
	}
	[Token(Token = "0x2000095")]
	public class CloudScriptInvocationRequest
	{
		[Token(Token = "0x2000096")]
		public enum State
		{
			[Token(Token = "0x4000269")]
			NotSent,
			[Token(Token = "0x400026A")]
			Sending,
			[Token(Token = "0x400026B")]
			Sent,
			[Token(Token = "0x400026C")]
			Error,
			[Token(Token = "0x400026D")]
			Failed
		}

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static State[] TerminalStates;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string functionName;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int retryCount;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float retryTimeout;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public State state;

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string responseData;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string cachedResponseData;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int errorCount;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float nextRetryTimestamp;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public object functionParameter;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool shouldCacheResponse;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool useCachedResultIfAvailable;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool hasCachedValue;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly Type verifyResponseDataCanBeParsedTo;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float setCurfewAfterSendingThisRequestTo;

		[Token(Token = "0x6000292")]
		[Address(RVA = "0xF700F8", Offset = "0xF700F8", VA = "0xF700F8")]
		public CloudScriptInvocationRequest(string functionName, [Optional] object functionParameter, int retryCount = 5, float retryTimeout = 30f, bool shouldCacheResponse = true, bool useCachedResultIfAvailable = false, [Optional] Type verifyResponseDataCanBeParsedTo, float setCurfewAfterSendingThisRequestTo = 0f)
		{
		}

		[Token(Token = "0x6000293")]
		[Address(RVA = "0xF70170", Offset = "0xF70170", VA = "0xF70170")]
		public bool HasTerminated()
		{
			return default(bool);
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0xF701E8", Offset = "0xF701E8", VA = "0xF701E8")]
		public bool VerifyResponseData(string responseData)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000097")]
	public class PlayFabCloudScriptInvocationHandler : ITickable
	{
		[Token(Token = "0x2000098")]
		public interface IPersistentCache
		{
			[Token(Token = "0x60002A1")]
			[CanBeNull]
			string GetCachedValue(string functionName, object functionParameter);

			[Token(Token = "0x60002A2")]
			void SetCachedValue(string functionName, object functionParameter, string value);

			[Token(Token = "0x60002A3")]
			void PlayerLoggedIn(string playerId);
		}

		[Token(Token = "0x2000099")]
		public class NoCache : IPersistentCache
		{
			[Token(Token = "0x60002A4")]
			[Address(RVA = "0xF7124C", Offset = "0xF7124C", VA = "0xF7124C", Slot = "4")]
			public string GetCachedValue(string functionName, object functionParameter)
			{
				return null;
			}

			[Token(Token = "0x60002A5")]
			[Address(RVA = "0xF71254", Offset = "0xF71254", VA = "0xF71254", Slot = "5")]
			public void SetCachedValue(string functionName, object functionParameter, string value)
			{
			}

			[Token(Token = "0x60002A6")]
			[Address(RVA = "0xF71258", Offset = "0xF71258", VA = "0xF71258", Slot = "6")]
			public void PlayerLoggedIn(string playerId)
			{
			}

			[Token(Token = "0x60002A7")]
			[Address(RVA = "0xF7125C", Offset = "0xF7125C", VA = "0xF7125C")]
			public NoCache()
			{
			}
		}

		[Token(Token = "0x200009A")]
		public class PlayerPrefsPersistentCache : IPersistentCache
		{
			[Token(Token = "0x4000279")]
			private const string PlayFabCloudScriptCachePlayerIdKey = "PlayFabCloudScriptCachePlayerId";

			[Token(Token = "0x60002A8")]
			[Address(RVA = "0xF71264", Offset = "0xF71264", VA = "0xF71264", Slot = "4")]
			public string GetCachedValue(string functionName, object functionParameter)
			{
				return null;
			}

			[Token(Token = "0x60002A9")]
			[Address(RVA = "0xF714B4", Offset = "0xF714B4", VA = "0xF714B4", Slot = "5")]
			public void SetCachedValue(string functionName, object functionParameter, string value)
			{
			}

			[Token(Token = "0x60002AA")]
			[Address(RVA = "0xF714D8", Offset = "0xF714D8", VA = "0xF714D8", Slot = "6")]
			public void PlayerLoggedIn(string playerId)
			{
			}

			[Token(Token = "0x60002AB")]
			[Address(RVA = "0xF71280", Offset = "0xF71280", VA = "0xF71280")]
			public static string GetCacheKey(string functionName, object functionParameter)
			{
				return null;
			}

			[Token(Token = "0x60002AC")]
			[Address(RVA = "0xF71524", Offset = "0xF71524", VA = "0xF71524")]
			public PlayerPrefsPersistentCache()
			{
			}
		}

		[Token(Token = "0x200009B")]
		public interface IPlayFabCloudScriptFacade
		{
			[Token(Token = "0x60002AD")]
			void InvokeCouldScript(CloudScriptInvocationRequest request, Action<CloudScriptInvocationRequest, string> OnSuccess, Action<CloudScriptInvocationRequest, string> OnError);
		}

		[Token(Token = "0x200009C")]
		public class PlayFabCloudScriptFacade : IPlayFabCloudScriptFacade
		{
			[Token(Token = "0x400027A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly RGCommon.Logging.ILogger logger;

			[Token(Token = "0x60002AE")]
			[Address(RVA = "0xF7152C", Offset = "0xF7152C", VA = "0xF7152C")]
			public PlayFabCloudScriptFacade(RGCommon.Logging.ILogger logger)
			{
			}

			[Token(Token = "0x60002AF")]
			[Address(RVA = "0xF71554", Offset = "0xF71554", VA = "0xF71554", Slot = "4")]
			public void InvokeCouldScript(CloudScriptInvocationRequest request, Action<CloudScriptInvocationRequest, string> OnSuccess, Action<CloudScriptInvocationRequest, string> OnError)
			{
			}
		}

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabLoginData playFabLoginData;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IPlayFabCloudScriptFacade playFabCloudScriptFacade;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly RGCommon.Logging.ILogger logger;

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IPersistentCache cache;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CloudScriptInvocationRequest currentRequest;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<CloudScriptInvocationRequest> pendingRetries;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Queue<CloudScriptInvocationRequest> requests;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string lastSeenPlayerId;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float doNotSendAnyNewRequestsBeforeTime;

		[Token(Token = "0x6000296")]
		[Address(RVA = "0xF70378", Offset = "0xF70378", VA = "0xF70378")]
		public PlayFabCloudScriptInvocationHandler(PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData, PlayFabLoginData playFabLoginData, IPlayFabCloudScriptFacade playFabCloudScriptFacade, ITimeProvider timeProvider, RGCommon.Logging.ILogger logger, IPersistentCache cache)
		{
		}

		[Token(Token = "0x6000297")]
		[Address(RVA = "0xF70480", Offset = "0xF70480", VA = "0xF70480", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000298")]
		[Address(RVA = "0xF70658", Offset = "0xF70658", VA = "0xF70658")]
		private void CheckPlayerId()
		{
		}

		[Token(Token = "0x6000299")]
		[Address(RVA = "0xF709C4", Offset = "0xF709C4", VA = "0xF709C4")]
		private void SendNextRequestIfNoPendingRequests()
		{
		}

		[Token(Token = "0x600029A")]
		[Address(RVA = "0xF70B44", Offset = "0xF70B44", VA = "0xF70B44")]
		private bool NoActiveCurfew()
		{
			return default(bool);
		}

		[Token(Token = "0x600029B")]
		[Address(RVA = "0xF70738", Offset = "0xF70738", VA = "0xF70738")]
		private void CheckRetries()
		{
		}

		[Token(Token = "0x600029C")]
		[Address(RVA = "0xF704C8", Offset = "0xF704C8", VA = "0xF704C8")]
		private void PreprocessIncomingRequests()
		{
		}

		[Token(Token = "0x600029D")]
		[Address(RVA = "0xF70B24", Offset = "0xF70B24", VA = "0xF70B24")]
		private bool NoRequestInFlight()
		{
			return default(bool);
		}

		[Token(Token = "0x600029E")]
		[Address(RVA = "0xF70BF4", Offset = "0xF70BF4", VA = "0xF70BF4")]
		private void SendRequest(CloudScriptInvocationRequest request)
		{
		}

		[Token(Token = "0x600029F")]
		[Address(RVA = "0xF70E5C", Offset = "0xF70E5C", VA = "0xF70E5C")]
		private void OnSuccess(CloudScriptInvocationRequest cloudScriptInvocationRequest, string responseData)
		{
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0xF710E8", Offset = "0xF710E8", VA = "0xF710E8")]
		private void OnError(CloudScriptInvocationRequest cloudScriptInvocationRequest, string responseData)
		{
		}
	}
	[Token(Token = "0x200009E")]
	public class PlayFabErrorReporter
	{
		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int errorsIndicatingLossOfConnectivity;

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0xF719C8", Offset = "0xF719C8", VA = "0xF719C8")]
		public static void ReportSuccessfulPlayFabInteraction()
		{
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0xF71B30", Offset = "0xF71B30", VA = "0xF71B30")]
		public static void ReportPlayFabError(PlayFabError error, string customMessage, bool logAsError)
		{
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0xF71FE4", Offset = "0xF71FE4", VA = "0xF71FE4")]
		private static void CheckForMagicErrorMessageThatIndicatesLossOfConnectivity(PlayFabError error)
		{
		}

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0xF71C20", Offset = "0xF71C20", VA = "0xF71C20")]
		private static void TrackError(PlayFabError obj)
		{
		}

		[Token(Token = "0x60002B7")]
		[Address(RVA = "0xF72098", Offset = "0xF72098", VA = "0xF72098")]
		public PlayFabErrorReporter()
		{
		}
	}
	[Token(Token = "0x200009F")]
	public interface ILoginHandler : ITickable, ILogin
	{
	}
	[Token(Token = "0x20000A0")]
	public class PlayFabLoginHandler : ILoginHandler, ITickable, ILogin
	{
		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly RGCommon.Logging.ILogger logger;

		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabLoginData loginData;

		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PlatformLoginData platformLoginData;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IPlayFabLoginFacade playFabLoginFacade;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IPlayFabTitleIdComponent playFabTitleIdComponent;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly IGameVersionProvider gameVersionProvider;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly string gameName;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string CURRENT_PLAYFAB_ACCOUNT_USERNAME;

		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string CURRENT_PLAYFAB_ACCOUNT_PASSWORD;

		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private DateTime lastSuccessfulLogin;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private DateTime timeToReAuthenticateAt;

		[Token(Token = "0x400028C")]
		public const float HOURS_UNTIL_NEXT_AUTHENTICATION = 6f;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ProfilerMarker tickMarker;

		[Token(Token = "0x60002B8")]
		[Address(RVA = "0xF720A0", Offset = "0xF720A0", VA = "0xF720A0")]
		public PlayFabLoginHandler(RGCommon.Logging.ILogger logger, PlayFabLoginData loginData, PlatformLoginData platformLoginData, IPlayFabLoginFacade playFabLoginFacade, ITimeProvider timeProvider, IPlayFabTitleIdComponent playFabTitleIdComponent, IGameVersionProvider gameVersionProvider, string gameName)
		{
		}

		[Token(Token = "0x60002B9")]
		[Address(RVA = "0xF72158", Offset = "0xF72158", VA = "0xF72158")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60002BA")]
		[Address(RVA = "0xF721EC", Offset = "0xF721EC", VA = "0xF721EC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60002BB")]
		[Address(RVA = "0xF72D90", Offset = "0xF72D90", VA = "0xF72D90")]
		private void LoggedInFailed()
		{
		}

		[Token(Token = "0x60002BC")]
		[Address(RVA = "0xF72C80", Offset = "0xF72C80", VA = "0xF72C80")]
		private void LoggedIn()
		{
		}

		[Token(Token = "0x60002BD")]
		[Address(RVA = "0xF72AB0", Offset = "0xF72AB0", VA = "0xF72AB0")]
		private void LoggingIn()
		{
		}

		[Token(Token = "0x60002BE")]
		[Address(RVA = "0xF727C0", Offset = "0xF727C0", VA = "0xF727C0")]
		private void NotLoggedIn()
		{
		}

		[Token(Token = "0x60002BF")]
		[Address(RVA = "0xF72630", Offset = "0xF72630", VA = "0xF72630")]
		private void DecidingPlayFabEnvironment()
		{
		}

		[Token(Token = "0x60002C0")]
		[Address(RVA = "0xF72460", Offset = "0xF72460", VA = "0xF72460")]
		private void PlayfabEnvironmentNoDecided()
		{
		}

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0xF72DDC", Offset = "0xF72DDC", VA = "0xF72DDC")]
		private void RefreshAuthenticationIfExpiring()
		{
		}

		[Token(Token = "0x60002C2")]
		[Address(RVA = "0xF72F14", Offset = "0xF72F14", VA = "0xF72F14")]
		private string GetTitleId()
		{
			return null;
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0xF72F5C", Offset = "0xF72F5C", VA = "0xF72F5C")]
		private bool PrepareToProceedWithLogin()
		{
			return default(bool);
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0xF72F30", Offset = "0xF72F30", VA = "0xF72F30")]
		private bool HasUsernamePassword()
		{
			return default(bool);
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0xF72F8C", Offset = "0xF72F8C", VA = "0xF72F8C", Slot = "5")]
		public void CreateUsernamePassword(string email, string username, string password)
		{
		}

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0xF73050", Offset = "0xF73050", VA = "0xF73050", Slot = "6")]
		public void CreateNewAccount(string email, string username, string password)
		{
		}

		[Token(Token = "0x60002C7")]
		[Address(RVA = "0xF73114", Offset = "0xF73114", VA = "0xF73114", Slot = "7")]
		public void UpdateCredentials(string username, string password)
		{
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0xF7228C", Offset = "0xF7228C", VA = "0xF7228C", Slot = "8")]
		public void ClearCredentials()
		{
		}

		[Token(Token = "0x60002C9")]
		[Address(RVA = "0xF72320", Offset = "0xF72320", VA = "0xF72320")]
		private void ChangeState(LoginData.LoginState newState)
		{
		}
	}
	[Token(Token = "0x20000A1")]
	public interface IGameVersionProvider
	{
		[Token(Token = "0x60002CB")]
		string GetGameVersionString();
	}
	[Token(Token = "0x20000A2")]
	public interface IPlayFabLoginFacade
	{
		[Token(Token = "0x60002CC")]
		void LoginWithCustomId();

		[Token(Token = "0x60002CD")]
		void LoginWithSteamId();

		[Token(Token = "0x60002CE")]
		void LoginWithUserNamePassword();

		[Token(Token = "0x60002CF")]
		void SetDisplayName(ChangeDisplayNameRequest changeDisplayNameRequest);

		[Token(Token = "0x60002D0")]
		void SetRandomDisplayName();

		[Token(Token = "0x60002D1")]
		void CreateAccount(string username, string password, string email);

		[Token(Token = "0x60002D2")]
		void LinkUsernamePassword(string username, string password, string email);
	}
	[Token(Token = "0x20000A3")]
	public class PlayFabLoginFacade : IPlayFabLoginFacade
	{
		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly RGCommon.Logging.ILogger logger;

		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabLoginData loginData;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly float timeBetweenLoginAttempts;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlatformLoginData platformLoginData;

		[Token(Token = "0x60002D3")]
		[Address(RVA = "0xF731C4", Offset = "0xF731C4", VA = "0xF731C4")]
		public PlayFabLoginFacade(RGCommon.Logging.ILogger logger, PlayFabLoginData loginData, float timeBetweenLoginAttempts, PlatformLoginData platformLoginData)
		{
		}

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0xF73210", Offset = "0xF73210", VA = "0xF73210", Slot = "4")]
		public void LoginWithCustomId()
		{
		}

		[Token(Token = "0x60002D5")]
		[Address(RVA = "0xF734BC", Offset = "0xF734BC", VA = "0xF734BC", Slot = "5")]
		public void LoginWithSteamId()
		{
		}

		[Token(Token = "0x60002D6")]
		[Address(RVA = "0xF7344C", Offset = "0xF7344C", VA = "0xF7344C")]
		private static GetPlayerCombinedInfoRequestParams CreateInfoRequestParameters()
		{
			return null;
		}

		[Token(Token = "0x60002D7")]
		[Address(RVA = "0xF736F8", Offset = "0xF736F8", VA = "0xF736F8", Slot = "6")]
		public void LoginWithUserNamePassword()
		{
		}

		[Token(Token = "0x60002D8")]
		[Address(RVA = "0xF73900", Offset = "0xF73900", VA = "0xF73900", Slot = "7")]
		public void SetDisplayName(ChangeDisplayNameRequest changeDisplayNameRequest)
		{
		}

		[Token(Token = "0x60002D9")]
		[Address(RVA = "0xF73A7C", Offset = "0xF73A7C", VA = "0xF73A7C", Slot = "8")]
		public void SetRandomDisplayName()
		{
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0xF73C34", Offset = "0xF73C34", VA = "0xF73C34", Slot = "9")]
		public void CreateAccount(string username, string password, string email)
		{
		}

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0xF73E94", Offset = "0xF73E94", VA = "0xF73E94", Slot = "10")]
		public void LinkUsernamePassword(string username, string password, string email)
		{
		}

		[Token(Token = "0x60002DC")]
		[Address(RVA = "0xF740F0", Offset = "0xF740F0", VA = "0xF740F0")]
		private void LoginError(PlayFabError obj)
		{
		}

		[Token(Token = "0x60002DD")]
		[Address(RVA = "0xF74264", Offset = "0xF74264", VA = "0xF74264")]
		private void LoginWithUsernamePasswordError(PlayFabError obj)
		{
		}

		[Token(Token = "0x60002DE")]
		[Address(RVA = "0xF742B0", Offset = "0xF742B0", VA = "0xF742B0")]
		private void GotLoginResponse(LoginResult loginResult)
		{
		}

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0xF7445C", Offset = "0xF7445C", VA = "0xF7445C")]
		private void HandlePlayFabUsernamePasswordCreationSuccess(string username, string password)
		{
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0xF745A0", Offset = "0xF745A0", VA = "0xF745A0")]
		private void HandlePlayFabUsernamePasswordCreationError(PlayFabError e)
		{
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0xF74218", Offset = "0xF74218", VA = "0xF74218")]
		private void PlayFabError(PlayFabError obj)
		{
		}
	}
	[Token(Token = "0x20000A8")]
	public class LoginData
	{
		[Token(Token = "0x20000A9")]
		public enum LoginState
		{
			[Token(Token = "0x40002A6")]
			NotLoggedIn,
			[Token(Token = "0x40002A7")]
			LoggingIn,
			[Token(Token = "0x40002A8")]
			LoggedIn,
			[Token(Token = "0x40002A9")]
			LoggingOut,
			[Token(Token = "0x40002AA")]
			LoginWithUsernamePasswordError,
			[Token(Token = "0x40002AB")]
			LoginError,
			[Token(Token = "0x40002AC")]
			RetryLoginSameCredentials,
			[Token(Token = "0x40002AD")]
			RetryLoginNoCredentials,
			[Token(Token = "0x40002AE")]
			PlayFabEnvironmentNotDecided,
			[Token(Token = "0x40002AF")]
			DecidingPlayFabEnvironment,
			[Token(Token = "0x40002B0")]
			Banned
		}

		[Token(Token = "0x20000AA")]
		public enum AccountCreationState
		{
			[Token(Token = "0x40002B2")]
			UNKNOWN = 0,
			[Token(Token = "0x40002B3")]
			CREATING = 1,
			[Token(Token = "0x40002B4")]
			CREATED = 2,
			[Token(Token = "0x40002B5")]
			INVALID_PARAMETERS = 1000,
			[Token(Token = "0x40002B6")]
			ACCOUNT_ALREADY_LINKED = 1011,
			[Token(Token = "0x40002B7")]
			EMAIL_ADDRESS_NOT_AVAILABLE = 1006,
			[Token(Token = "0x40002B8")]
			INVALID_EMAIL_ADDRESS = 1005,
			[Token(Token = "0x40002B9")]
			INVALID_PASSWORD = 1008,
			[Token(Token = "0x40002BA")]
			INVALID_USERNAME = 1007,
			[Token(Token = "0x40002BB")]
			USERNAME_NOT_AVAILABLE = 1009,
			[Token(Token = "0x40002BC")]
			UNKNOWN_ERROR = 1010
		}

		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LoginState state;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AccountCreationState accountCreationState;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string playerDisplayName;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string username;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string password;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool accountHasUsernamePassword;

		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string customErrorMessage;

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string playerId;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Queue<ChangeDisplayNameRequest> changeDisplayNameRequests;

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0xF754CC", Offset = "0xF754CC", VA = "0xF754CC")]
		public LoginData()
		{
		}
	}
	[Token(Token = "0x20000AB")]
	public class ChangeDisplayNameRequest
	{
		[Token(Token = "0x20000AC")]
		public enum State
		{
			[Token(Token = "0x40002C0")]
			NotSent,
			[Token(Token = "0x40002C1")]
			Changing,
			[Token(Token = "0x40002C2")]
			Changed,
			[Token(Token = "0x40002C3")]
			Error,
			[Token(Token = "0x40002C4")]
			ErrorNotAvailable,
			[Token(Token = "0x40002C5")]
			ErrorProfane,
			[Token(Token = "0x40002C6")]
			ErrorInvalid
		}

		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string newDisplayName;

		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public State state;

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0xF75550", Offset = "0xF75550", VA = "0xF75550")]
		public ChangeDisplayNameRequest(string newDisplayName)
		{
		}
	}
	[Token(Token = "0x20000AD")]
	public class PlayFabLoginData : LoginData
	{
		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LoginResult cachedLoginResult;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float nextLoginRetryTime;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public LoginError errorLoggingIn;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool errorLoggingInWithUsernamePassword;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string gdprId;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string defaultPlayFabEnvironment;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string selectedPlayFabEnvironment;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public int numOfAttemptedLogins;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float latestGetPlayFabEnvironmentTimeout;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool recommendVersionUpgrade;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		public bool requireVersionUpgrade;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string banReason;

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0xF75578", Offset = "0xF75578", VA = "0xF75578")]
		public PlayFabLoginData(string defaultPlayFabEnvironment)
		{
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0xF7559C", Offset = "0xF7559C", VA = "0xF7559C")]
		public PlayFabLoginData()
		{
		}
	}
	[Token(Token = "0x20000AE")]
	public enum LoginError
	{
		[Token(Token = "0x40002D4")]
		None,
		[Token(Token = "0x40002D5")]
		Banned,
		[Token(Token = "0x40002D6")]
		Error
	}
	[Token(Token = "0x20000AF")]
	public interface ILogin
	{
		[Token(Token = "0x60002F7")]
		void CreateUsernamePassword(string email, string username, string password);

		[Token(Token = "0x60002F8")]
		void CreateNewAccount(string email, string username, string password);

		[Token(Token = "0x60002F9")]
		void UpdateCredentials(string username, string password);

		[Token(Token = "0x60002FA")]
		void ClearCredentials();
	}
	[Token(Token = "0x20000B0")]
	public class PlayFabTitleIdComponent : MonoBehaviour, IPlayFabTitleIdComponent
	{
		[Token(Token = "0x20000B1")]
		public class PlayFabTitleSelectorData
		{
			[Token(Token = "0x40002D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string name;

			[Token(Token = "0x40002D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string title_id;

			[Token(Token = "0x40002D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool recommend_version_upgrade;

			[Token(Token = "0x40002DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			public bool require_version_upgrade;

			[Token(Token = "0x60002FE")]
			[Address(RVA = "0xF7566C", Offset = "0xF7566C", VA = "0xF7566C")]
			public PlayFabTitleSelectorData()
			{
			}
		}

		[Token(Token = "0x20000B2")]
		[CompilerGenerated]
		private sealed class <GetPlayFabEnvironmentFromHttp>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40002DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40002DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40002DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string gameName;

			[Token(Token = "0x40002DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string version;

			[Token(Token = "0x40002DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public PlayFabLoginData loginData;

			[Token(Token = "0x40002E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UnityWebRequest <uwr>5__2;

			[Token(Token = "0x17000051")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000302")]
				[Address(RVA = "0xF75A04", Offset = "0xF75A04", VA = "0xF75A04", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000052")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000304")]
				[Address(RVA = "0xF75A4C", Offset = "0xF75A4C", VA = "0xF75A4C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60002FF")]
			[Address(RVA = "0xF7563C", Offset = "0xF7563C", VA = "0xF7563C")]
			[DebuggerHidden]
			public <GetPlayFabEnvironmentFromHttp>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6000300")]
			[Address(RVA = "0xF75674", Offset = "0xF75674", VA = "0xF75674", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000301")]
			[Address(RVA = "0xF75678", Offset = "0xF75678", VA = "0xF75678", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000303")]
			[Address(RVA = "0xF75A0C", Offset = "0xF75A0C", VA = "0xF75A0C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0xF755A0", Offset = "0xF755A0", VA = "0xF755A0", Slot = "4")]
		public void GetPlayFabEnvironment(PlayFabLoginData loginData, string gameName, string version)
		{
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0xF755C0", Offset = "0xF755C0", VA = "0xF755C0")]
		[IteratorStateMachine(typeof(<GetPlayFabEnvironmentFromHttp>d__1))]
		private IEnumerator GetPlayFabEnvironmentFromHttp(PlayFabLoginData loginData, string gameName, string version)
		{
			return null;
		}

		[Token(Token = "0x60002FD")]
		[Address(RVA = "0xF75664", Offset = "0xF75664", VA = "0xF75664")]
		public PlayFabTitleIdComponent()
		{
		}
	}
	[Token(Token = "0x20000B3")]
	public interface IPlayFabTitleIdComponent
	{
		[Token(Token = "0x6000305")]
		void GetPlayFabEnvironment(PlayFabLoginData loginData, string gameName, string version);
	}
	[Token(Token = "0x20000B4")]
	public class MockPlayFabTitleIdComponent : IPlayFabTitleIdComponent
	{
		[Token(Token = "0x6000306")]
		[Address(RVA = "0xF75A54", Offset = "0xF75A54", VA = "0xF75A54", Slot = "4")]
		public void GetPlayFabEnvironment(PlayFabLoginData loginData, string gameName, string version)
		{
		}

		[Token(Token = "0x6000307")]
		[Address(RVA = "0xF75A84", Offset = "0xF75A84", VA = "0xF75A84")]
		public MockPlayFabTitleIdComponent()
		{
		}
	}
	[Token(Token = "0x20000B5")]
	public class PlayFabUtil
	{
		[Token(Token = "0x6000308")]
		[Address(RVA = "0xF718AC", Offset = "0xF718AC", VA = "0xF718AC")]
		public static bool ResponseIsMissing(ExecuteCloudScriptResult result)
		{
			return default(bool);
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0xF718D0", Offset = "0xF718D0", VA = "0xF718D0")]
		public static string ExtractJsonResponse(ExecuteCloudScriptResult result)
		{
			return null;
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0xF75A8C", Offset = "0xF75A8C", VA = "0xF75A8C")]
		public PlayFabUtil()
		{
		}
	}
	[Token(Token = "0x20000B6")]
	public interface ITimeProvider
	{
		[Token(Token = "0x600030B")]
		float GetTime();

		[Token(Token = "0x600030C")]
		DateTime GetDateTimeNow();
	}
	[Token(Token = "0x20000B7")]
	public class RealTimeProvider : ITimeProvider
	{
		[Token(Token = "0x600030D")]
		[Address(RVA = "0xF75A94", Offset = "0xF75A94", VA = "0xF75A94", Slot = "4")]
		public float GetTime()
		{
			return default(float);
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0xF75A9C", Offset = "0xF75A9C", VA = "0xF75A9C", Slot = "5")]
		public DateTime GetDateTimeNow()
		{
			return default(DateTime);
		}

		[Token(Token = "0x600030F")]
		[Address(RVA = "0xF75AEC", Offset = "0xF75AEC", VA = "0xF75AEC")]
		public RealTimeProvider()
		{
		}
	}
	[Token(Token = "0x20000B8")]
	public class MockTimeProvider : ITimeProvider
	{
		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float time;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DateTime dateTime;

		[Token(Token = "0x6000310")]
		[Address(RVA = "0xF75AF4", Offset = "0xF75AF4", VA = "0xF75AF4")]
		public MockTimeProvider()
		{
		}

		[Token(Token = "0x6000311")]
		[Address(RVA = "0xF75B5C", Offset = "0xF75B5C", VA = "0xF75B5C", Slot = "4")]
		public float GetTime()
		{
			return default(float);
		}

		[Token(Token = "0x6000312")]
		[Address(RVA = "0xF75B64", Offset = "0xF75B64", VA = "0xF75B64", Slot = "5")]
		public DateTime GetDateTimeNow()
		{
			return default(DateTime);
		}
	}
}
namespace RGCommon.Network
{
	[Token(Token = "0x20000B9")]
	public interface NetworkPlayerDataFactory
	{
		[Token(Token = "0x6000313")]
		int GetLocalPlayerId();

		[Token(Token = "0x6000314")]
		bool IsMasterClient();

		[Token(Token = "0x6000315")]
		int MasterPlayerId();
	}
	[Token(Token = "0x20000BA")]
	public sealed class NetworkConnectionHandler : INetworkConnectionHandler, ITickable
	{
		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string networkProtocolVersion;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly NetworkData networkData;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly NetworkConnectionProxy networkConnectionProxy;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly NetworkPlayerDataFactory networkPlayerDataFactory;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly RGCommon.Logging.ILogger logger;

		[Token(Token = "0x6000316")]
		[Address(RVA = "0xF75B6C", Offset = "0xF75B6C", VA = "0xF75B6C")]
		public NetworkConnectionHandler(string networkProtocolVersion, NetworkData networkData, NetworkConnectionProxy networkConnectionProxy, RGCommon.Logging.ILogger logger, NetworkPlayerDataFactory networkPlayerDataFactory)
		{
		}

		[Token(Token = "0x6000317")]
		[Address(RVA = "0xF75BBC", Offset = "0xF75BBC", VA = "0xF75BBC")]
		private void ChangeState(NetworkConnectionState connectionStateNext)
		{
		}

		[Token(Token = "0x6000318")]
		[Address(RVA = "0xF75CFC", Offset = "0xF75CFC", VA = "0xF75CFC", Slot = "10")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000319")]
		[Address(RVA = "0xF766A4", Offset = "0xF766A4", VA = "0xF766A4")]
		private void GatherDiagnostics()
		{
		}

		[Token(Token = "0x600031A")]
		[Address(RVA = "0xF75D98", Offset = "0xF75D98", VA = "0xF75D98")]
		private void ProcessPossibleStateChange(NetworkConnectionEvent evt)
		{
		}

		[Token(Token = "0x600031B")]
		[Address(RVA = "0xF76A20", Offset = "0xF76A20", VA = "0xF76A20")]
		private void DoConnect()
		{
		}

		[Token(Token = "0x600031C")]
		[Address(RVA = "0xF76574", Offset = "0xF76574", VA = "0xF76574")]
		private void CheckMasterClient()
		{
		}

		[Token(Token = "0x600031D")]
		[Address(RVA = "0xF76AD4", Offset = "0xF76AD4", VA = "0xF76AD4", Slot = "8")]
		public void Connect()
		{
		}

		[Token(Token = "0x600031E")]
		[Address(RVA = "0xF76B30", Offset = "0xF76B30", VA = "0xF76B30", Slot = "9")]
		public void SetBackgroundDisconnectTimeout(float timeoutInSeconds)
		{
		}

		[Token(Token = "0x600031F")]
		[Address(RVA = "0xF76B90", Offset = "0xF76B90", VA = "0xF76B90", Slot = "7")]
		public void JoinRoom(string roomCode)
		{
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0xF76BF4", Offset = "0xF76BF4", VA = "0xF76BF4", Slot = "6")]
		public void LeaveRoom()
		{
		}

		[Token(Token = "0x6000321")]
		[Address(RVA = "0xF76C50", Offset = "0xF76C50", VA = "0xF76C50", Slot = "5")]
		public void CreateRoom(string roomCode, int maxNumberOfPlayersInRoom, bool roomIsVisible)
		{
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0xF76CD0", Offset = "0xF76CD0", VA = "0xF76CD0", Slot = "4")]
		public void Disconnect()
		{
		}
	}
	[Token(Token = "0x20000BB")]
	public interface INetworkConnectionHandler
	{
		[Token(Token = "0x6000323")]
		void Disconnect();

		[Token(Token = "0x6000324")]
		void CreateRoom(string roomCode, int maxNumberOfPlayersInRoom, bool roomIsVisible);

		[Token(Token = "0x6000325")]
		void LeaveRoom();

		[Token(Token = "0x6000326")]
		void JoinRoom(string roomCode);

		[Token(Token = "0x6000327")]
		void Connect();

		[Token(Token = "0x6000328")]
		void SetBackgroundDisconnectTimeout(float timeoutInSeconds);
	}
	[Token(Token = "0x20000BC")]
	public interface NetworkConnectionProxy
	{
		[Token(Token = "0x6000329")]
		void Connect(string networkProtocolVersion);

		[Token(Token = "0x600032A")]
		void JoinLobby(string lobbyName);

		[Token(Token = "0x600032B")]
		void JoinRoom(string roomCode);

		[Token(Token = "0x600032C")]
		void LeaveRoom(string roomCode);

		[Token(Token = "0x600032D")]
		void Reconnect();

		[Token(Token = "0x600032E")]
		void RejoinRoom(string roomCode);

		[Token(Token = "0x600032F")]
		void CreateRoom(string roomCode, int maxPlayers, bool isVisible);

		[Token(Token = "0x6000330")]
		int GetPingRoundtripTime();

		[Token(Token = "0x6000331")]
		int GetReliableSendsCount();

		[Token(Token = "0x6000332")]
		int GetReliableResendsCount();

		[Token(Token = "0x6000333")]
		double GetTime();

		[Token(Token = "0x6000334")]
		void Disconnect();

		[Token(Token = "0x6000335")]
		float GetSerializationRate();

		[Token(Token = "0x6000336")]
		Dictionary<NetworkingRegion, int> GetRegionPings();
	}
	[Token(Token = "0x20000BD")]
	public enum NetworkConnectionState
	{
		[Token(Token = "0x40002E9")]
		Disconnected,
		[Token(Token = "0x40002EA")]
		Connected,
		[Token(Token = "0x40002EB")]
		Joined,
		[Token(Token = "0x40002EC")]
		Connecting,
		[Token(Token = "0x40002ED")]
		Joining,
		[Token(Token = "0x40002EE")]
		Leaving,
		[Token(Token = "0x40002EF")]
		CreatingRoom,
		[Token(Token = "0x40002F0")]
		Disconnecting,
		[Token(Token = "0x40002F1")]
		JoiningLobby
	}
	[Token(Token = "0x20000BE")]
	public enum NetworkConnectionEvent
	{
		[Token(Token = "0x40002F3")]
		OnConnect,
		[Token(Token = "0x40002F4")]
		OnConnectFail,
		[Token(Token = "0x40002F5")]
		OnDisconnectError,
		[Token(Token = "0x40002F6")]
		OnDisconnectIntentional,
		[Token(Token = "0x40002F7")]
		OnJoin,
		[Token(Token = "0x40002F8")]
		OnJoinFail,
		[Token(Token = "0x40002F9")]
		OnJoinFailExpectedRejoin,
		[Token(Token = "0x40002FA")]
		OnLeftRoom,
		[Token(Token = "0x40002FB")]
		OnJoinedLobby,
		[Token(Token = "0x40002FC")]
		OnCreatedRoom,
		[Token(Token = "0x40002FD")]
		OnCreateRoomFailed,
		[Token(Token = "0x40002FE")]
		RequestConnect,
		[Token(Token = "0x40002FF")]
		RequestJoin,
		[Token(Token = "0x4000300")]
		RequestLeaveRoom,
		[Token(Token = "0x4000301")]
		RequestCreateRoom,
		[Token(Token = "0x4000302")]
		RequestDisconnect,
		[Token(Token = "0x4000303")]
		Tick,
		[Token(Token = "0x4000304")]
		OnLeftLobby
	}
	[Token(Token = "0x20000BF")]
	public enum NetworkPeerEvent
	{
		[Token(Token = "0x4000306")]
		Active,
		[Token(Token = "0x4000307")]
		Inactive,
		[Token(Token = "0x4000308")]
		Connect,
		[Token(Token = "0x4000309")]
		Disconnect
	}
	[Token(Token = "0x20000C0")]
	public static class NetworkSettings
	{
		[Token(Token = "0x400030A")]
		public const int NUMBER_OF_TICKS_PER_PING_MEASUREMENT = 100;

		[Token(Token = "0x400030B")]
		public const int NUMBER_OF_PING_MEASUREMENTS = 30;

		[Token(Token = "0x400030C")]
		public const int APP_BACKGROUND_DISCONNECT_TIMEOUT = 0;

		[Token(Token = "0x400030D")]
		public const int PHOTON_NETWORK_SENDRATE = 20;

		[Token(Token = "0x400030E")]
		public const int PLAYER_TTL = 5000;

		[Token(Token = "0x400030F")]
		public const int MAX_PLAYERS = 2;

		[Token(Token = "0x4000310")]
		public const int MAX_SPECTATORS = 8;
	}
	[Token(Token = "0x20000C1")]
	public struct PeerEvent
	{
		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly NetworkPeerEvent networkEvent;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int serverID;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string userID;

		[Token(Token = "0x6000337")]
		[Address(RVA = "0xF76D2C", Offset = "0xF76D2C", VA = "0xF76D2C")]
		public PeerEvent(NetworkPeerEvent networkEvent, int netID, string userID)
		{
		}
	}
	[Token(Token = "0x20000C2")]
	public enum FailJoinRoomReasons
	{
		[Token(Token = "0x4000315")]
		None,
		[Token(Token = "0x4000316")]
		RoomDoesNotExist,
		[Token(Token = "0x4000317")]
		RoomIsFull,
		[Token(Token = "0x4000318")]
		FailExpectedRejoin
	}
	[Token(Token = "0x20000C3")]
	public struct PlayerNetworkData
	{
		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int netID;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string userID;

		[Token(Token = "0x6000338")]
		[Address(RVA = "0xF76D38", Offset = "0xF76D38", VA = "0xF76D38")]
		public PlayerNetworkData(int netID, string userID)
		{
		}
	}
	[Token(Token = "0x20000C4")]
	public class NetworkData
	{
		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public NetworkConnectionState networkConnectionStatePrev;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public NetworkConnectionState networkConnectionState;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string roomCode;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool roomIsVisible;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int maxNumberOfPlayersInRoom;

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isMaster;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int masterID;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int localPlayerServerId;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly Queue<NetworkConnectionEvent> networkConnectionEventQueue;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly Queue<PeerEvent> networkPeerEventQueue;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public FailJoinRoomReasons lastJoinRoomFailReason;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float serializationRate;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int ticksSinceLastPing;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int nextPingMeasurementIndex;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public readonly double[] timeMeasurements;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public readonly int[] pingMeasurements;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public readonly int[] reliableResendMeasurements;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public readonly double[] lossPerSecondMeasurements;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int currentPing;

		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public int disconnectCount;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<string> rooms;

		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool shouldJoinLobby;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string lobbyName;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public NetworkingRegion selectedNetworkingRegion;

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int consecutiveConnectErrorCount;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Dictionary<NetworkingRegion, int> regionPings;

		[Token(Token = "0x6000339")]
		[Address(RVA = "0xF76D44", Offset = "0xF76D44", VA = "0xF76D44")]
		public NetworkData()
		{
		}
	}
	[Token(Token = "0x20000C5")]
	public interface NetworkRegionSelector
	{
		[Token(Token = "0x600033A")]
		void SelectRegion(NetworkingRegion region);

		[Token(Token = "0x600033B")]
		NetworkingRegion GetSelectedRegion();
	}
	[Token(Token = "0x20000C6")]
	public interface NetworkRegionProvider
	{
		[Token(Token = "0x600033C")]
		NetworkingRegion GetCurrentRegion();
	}
	[Token(Token = "0x20000C7")]
	public enum NetworkingRegion
	{
		[Token(Token = "0x4000336")]
		None,
		[Token(Token = "0x4000337")]
		Best,
		[Token(Token = "0x4000338")]
		EU,
		[Token(Token = "0x4000339")]
		US,
		[Token(Token = "0x400033A")]
		Asia,
		[Token(Token = "0x400033B")]
		Japan,
		[Token(Token = "0x400033C")]
		Australia,
		[Token(Token = "0x400033D")]
		UsWest,
		[Token(Token = "0x400033E")]
		SouthAmerica,
		[Token(Token = "0x400033F")]
		India,
		[Token(Token = "0x4000340")]
		CanadaEast,
		[Token(Token = "0x4000341")]
		SouthKorea,
		[Token(Token = "0x4000342")]
		Russia,
		[Token(Token = "0x4000343")]
		RussiaEast,
		[Token(Token = "0x4000344")]
		ChineseMainland,
		[Token(Token = "0x4000345")]
		SouthAfrica
	}
}
namespace RGCommon.Network.Photon
{
	[Token(Token = "0x20000C8")]
	public class PhotonNetworkPlayerDataFactory : NetworkPlayerDataFactory
	{
		[Token(Token = "0x600033D")]
		[Address(RVA = "0xF76EC4", Offset = "0xF76EC4", VA = "0xF76EC4", Slot = "4")]
		public int GetLocalPlayerId()
		{
			return default(int);
		}

		[Token(Token = "0x600033E")]
		[Address(RVA = "0xF76F24", Offset = "0xF76F24", VA = "0xF76F24", Slot = "5")]
		public bool IsMasterClient()
		{
			return default(bool);
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0xF76F74", Offset = "0xF76F74", VA = "0xF76F74", Slot = "6")]
		public int MasterPlayerId()
		{
			return default(int);
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0xF76FF8", Offset = "0xF76FF8", VA = "0xF76FF8")]
		public PhotonNetworkPlayerDataFactory()
		{
		}
	}
	[Token(Token = "0x20000C9")]
	public sealed class PhotonNetworkConnectionCallbacks : IDisposable, IConnectionCallbacks, IInRoomCallbacks, IMatchmakingCallbacks, ILobbyCallbacks
	{
		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private NetworkData networkData;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RGCommon.Logging.ILogger logger;

		[Token(Token = "0x6000341")]
		[Address(RVA = "0xF77000", Offset = "0xF77000", VA = "0xF77000")]
		public PhotonNetworkConnectionCallbacks(NetworkData networkData, RGCommon.Logging.ILogger logger)
		{
		}

		[Token(Token = "0x6000342")]
		[Address(RVA = "0xF77078", Offset = "0xF77078", VA = "0xF77078", Slot = "1")]
		~PhotonNetworkConnectionCallbacks()
		{
		}

		[Token(Token = "0x6000343")]
		[Address(RVA = "0xF77168", Offset = "0xF77168", VA = "0xF77168", Slot = "4")]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000344")]
		[Address(RVA = "0xF77110", Offset = "0xF77110", VA = "0xF77110")]
		private void Disposepublic(bool disposeManagedResources)
		{
		}

		[Token(Token = "0x6000345")]
		[Address(RVA = "0xF771CC", Offset = "0xF771CC", VA = "0xF771CC", Slot = "5")]
		private void Photon.Realtime.IConnectionCallbacks.OnConnected()
		{
		}

		[Token(Token = "0x6000346")]
		[Address(RVA = "0xF7728C", Offset = "0xF7728C", VA = "0xF7728C", Slot = "6")]
		private void Photon.Realtime.IConnectionCallbacks.OnConnectedToMaster()
		{
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0xF7737C", Offset = "0xF7737C", VA = "0xF7737C", Slot = "7")]
		private void Photon.Realtime.IConnectionCallbacks.OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0xF774BC", Offset = "0xF774BC", VA = "0xF774BC", Slot = "8")]
		private void Photon.Realtime.IConnectionCallbacks.OnRegionListReceived(RegionHandler regionHandler)
		{
		}

		[Token(Token = "0x6000349")]
		[Address(RVA = "0xF7757C", Offset = "0xF7757C", VA = "0xF7757C", Slot = "9")]
		private void Photon.Realtime.IConnectionCallbacks.OnCustomAuthenticationResponse(Dictionary<string, object> data)
		{
		}

		[Token(Token = "0x600034A")]
		[Address(RVA = "0xF7763C", Offset = "0xF7763C", VA = "0xF7763C", Slot = "10")]
		private void Photon.Realtime.IConnectionCallbacks.OnCustomAuthenticationFailed(string debugMessage)
		{
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0xF776FC", Offset = "0xF776FC", VA = "0xF776FC", Slot = "11")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x600034C")]
		[Address(RVA = "0xF7784C", Offset = "0xF7784C", VA = "0xF7784C", Slot = "12")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerLeftRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0xF7799C", Offset = "0xF7799C", VA = "0xF7799C", Slot = "13")]
		private void Photon.Realtime.IInRoomCallbacks.OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
		{
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0xF77A5C", Offset = "0xF77A5C", VA = "0xF77A5C", Slot = "14")]
		private void Photon.Realtime.IInRoomCallbacks.OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x600034F")]
		[Address(RVA = "0xF77B1C", Offset = "0xF77B1C", VA = "0xF77B1C", Slot = "15")]
		private void Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched(Player newMasterClient)
		{
		}

		[Token(Token = "0x6000350")]
		[Address(RVA = "0xF77C30", Offset = "0xF77C30", VA = "0xF77C30", Slot = "16")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnFriendListUpdate(List<global::Photon.Realtime.FriendInfo> friendList)
		{
		}

		[Token(Token = "0x6000351")]
		[Address(RVA = "0xF77C34", Offset = "0xF77C34", VA = "0xF77C34", Slot = "17")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnCreatedRoom()
		{
		}

		[Token(Token = "0x6000352")]
		[Address(RVA = "0xF77D24", Offset = "0xF77D24", VA = "0xF77D24", Slot = "18")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000353")]
		[Address(RVA = "0xF77E14", Offset = "0xF77E14", VA = "0xF77E14", Slot = "19")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnJoinedRoom()
		{
		}

		[Token(Token = "0x6000354")]
		[Address(RVA = "0xF77F9C", Offset = "0xF77F9C", VA = "0xF77F9C", Slot = "20")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000355")]
		[Address(RVA = "0xF78188", Offset = "0xF78188", VA = "0xF78188", Slot = "21")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000356")]
		[Address(RVA = "0xF78248", Offset = "0xF78248", VA = "0xF78248", Slot = "22")]
		private void Photon.Realtime.IMatchmakingCallbacks.OnLeftRoom()
		{
		}

		[Token(Token = "0x6000357")]
		[Address(RVA = "0xF78338", Offset = "0xF78338", VA = "0xF78338", Slot = "23")]
		public void OnJoinedLobby()
		{
		}

		[Token(Token = "0x6000358")]
		[Address(RVA = "0xF78428", Offset = "0xF78428", VA = "0xF78428", Slot = "24")]
		public void OnLeftLobby()
		{
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0xF78518", Offset = "0xF78518", VA = "0xF78518", Slot = "25")]
		public void OnRoomListUpdate(List<RoomInfo> roomList)
		{
		}

		[Token(Token = "0x600035A")]
		[Address(RVA = "0xF78768", Offset = "0xF78768", VA = "0xF78768", Slot = "26")]
		public void OnLobbyStatisticsUpdate(List<TypedLobbyInfo> lobbyStatistics)
		{
		}

		[Token(Token = "0x600035B")]
		[Address(RVA = "0xF7876C", Offset = "0xF7876C", VA = "0xF7876C")]
		public void OnDestroy()
		{
		}
	}
	[Token(Token = "0x20000CA")]
	public sealed class PhotonNetworkConnectionProxy : NetworkConnectionProxy
	{
		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AuthenticationValues authenticationValues;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly RGCommon.Logging.ILogger logger;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<NetworkingRegion, int> regionPings;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float nextRegionPingRetryAttempt;

		[Token(Token = "0x600035C")]
		[Address(RVA = "0xF787C4", Offset = "0xF787C4", VA = "0xF787C4")]
		public PhotonNetworkConnectionProxy(AuthenticationValues authenticationValues, RGCommon.Logging.ILogger logger)
		{
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0xF78874", Offset = "0xF78874", VA = "0xF78874", Slot = "4")]
		public void Connect(string networkProtocolVersion)
		{
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0xF78A60", Offset = "0xF78A60", VA = "0xF78A60", Slot = "5")]
		public void JoinLobby(string lobbyName)
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0xF78AF0", Offset = "0xF78AF0", VA = "0xF78AF0", Slot = "6")]
		public void JoinRoom(string roomCode)
		{
		}

		[Token(Token = "0x6000360")]
		[Address(RVA = "0xF78D18", Offset = "0xF78D18", VA = "0xF78D18", Slot = "7")]
		public void LeaveRoom(string roomCode)
		{
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0xF78F2C", Offset = "0xF78F2C", VA = "0xF78F2C", Slot = "8")]
		public void Reconnect()
		{
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0xF790B8", Offset = "0xF790B8", VA = "0xF790B8", Slot = "9")]
		public void RejoinRoom(string roomCode)
		{
		}

		[Token(Token = "0x6000363")]
		[Address(RVA = "0xF792DC", Offset = "0xF792DC", VA = "0xF792DC", Slot = "10")]
		public void CreateRoom(string roomCode, int maxPlayers, bool isVisible)
		{
		}

		[Token(Token = "0x6000364")]
		[Address(RVA = "0xF79570", Offset = "0xF79570", VA = "0xF79570", Slot = "11")]
		public int GetPingRoundtripTime()
		{
			return default(int);
		}

		[Token(Token = "0x6000365")]
		[Address(RVA = "0xF795C0", Offset = "0xF795C0", VA = "0xF795C0", Slot = "12")]
		public int GetReliableSendsCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000366")]
		[Address(RVA = "0xF7962C", Offset = "0xF7962C", VA = "0xF7962C", Slot = "13")]
		public int GetReliableResendsCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000367")]
		[Address(RVA = "0xF79698", Offset = "0xF79698", VA = "0xF79698", Slot = "14")]
		public double GetTime()
		{
			return default(double);
		}

		[Token(Token = "0x6000368")]
		[Address(RVA = "0xF796E8", Offset = "0xF796E8", VA = "0xF796E8", Slot = "15")]
		public void Disconnect()
		{
		}

		[Token(Token = "0x6000369")]
		[Address(RVA = "0xF79738", Offset = "0xF79738", VA = "0xF79738", Slot = "16")]
		public float GetSerializationRate()
		{
			return default(float);
		}

		[Token(Token = "0x600036A")]
		[Address(RVA = "0xF79790", Offset = "0xF79790", VA = "0xF79790", Slot = "17")]
		public Dictionary<NetworkingRegion, int> GetRegionPings()
		{
			return null;
		}
	}
	[Token(Token = "0x20000CB")]
	public class PhotonRegionSelector : NetworkRegionProvider, NetworkRegionSelector, ITickable
	{
		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly NetworkConnectionHandler networkConnectionHandler;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly NetworkData networkData;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool requestedDisconnect;

		[Token(Token = "0x600036B")]
		[Address(RVA = "0xF7A640", Offset = "0xF7A640", VA = "0xF7A640")]
		public PhotonRegionSelector(NetworkConnectionHandler networkConnectionHandler, NetworkData networkData)
		{
		}

		[Token(Token = "0x600036C")]
		[Address(RVA = "0xF7A67C", Offset = "0xF7A67C", VA = "0xF7A67C", Slot = "5")]
		public void SelectRegion(NetworkingRegion networkingRegion)
		{
		}

		[Token(Token = "0x600036D")]
		[Address(RVA = "0xF7A910", Offset = "0xF7A910", VA = "0xF7A910", Slot = "4")]
		public NetworkingRegion GetCurrentRegion()
		{
			return default(NetworkingRegion);
		}

		[Token(Token = "0x600036E")]
		[Address(RVA = "0xF7A964", Offset = "0xF7A964", VA = "0xF7A964", Slot = "6")]
		public NetworkingRegion GetSelectedRegion()
		{
			return default(NetworkingRegion);
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0xF7A768", Offset = "0xF7A768", VA = "0xF7A768")]
		private static string GetRegionString(NetworkingRegion networkingRegion)
		{
			return null;
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0xF7A1CC", Offset = "0xF7A1CC", VA = "0xF7A1CC")]
		public static NetworkingRegion TranslateRegion(string networkingRegion)
		{
			return default(NetworkingRegion);
		}

		[Token(Token = "0x6000371")]
		[Address(RVA = "0xF7A980", Offset = "0xF7A980", VA = "0xF7A980", Slot = "7")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000372")]
		[Address(RVA = "0xF7A9C0", Offset = "0xF7A9C0", VA = "0xF7A9C0")]
		internal void Reset()
		{
		}
	}
}
namespace RGCommon.Logging
{
	[Token(Token = "0x20000CC")]
	public interface ILogger
	{
		[Token(Token = "0x6000373")]
		void Error(string message);

		[Token(Token = "0x6000374")]
		void Warn(string message);

		[Token(Token = "0x6000375")]
		void Info(string message);
	}
	[Token(Token = "0x20000CD")]
	public class DefaultLogger : ILogger
	{
		[Token(Token = "0x6000376")]
		[Address(RVA = "0xF7A9C8", Offset = "0xF7A9C8", VA = "0xF7A9C8", Slot = "4")]
		public void Error(string message)
		{
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0xF7AA20", Offset = "0xF7AA20", VA = "0xF7AA20", Slot = "5")]
		public void Warn(string message)
		{
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0xF7AA78", Offset = "0xF7AA78", VA = "0xF7AA78", Slot = "6")]
		public void Info(string message)
		{
		}

		[Token(Token = "0x6000379")]
		[Address(RVA = "0xF7AAD0", Offset = "0xF7AAD0", VA = "0xF7AAD0")]
		public DefaultLogger()
		{
		}
	}
}
namespace RGCommon.ECS
{
	[Token(Token = "0x20000CE")]
	public interface ITickable
	{
		[Token(Token = "0x600037A")]
		void Tick();
	}
	[Token(Token = "0x20000CF")]
	public interface IFixedTickable
	{
		[Token(Token = "0x600037B")]
		void FixedTick();
	}
	[Token(Token = "0x20000D0")]
	public interface ILateTickable
	{
		[Token(Token = "0x600037C")]
		void LateTick();
	}
	[Token(Token = "0x20000D1")]
	public interface IInitialisable
	{
		[Token(Token = "0x600037D")]
		void Initialize();
	}
}
namespace IgnisBowser.Story
{
	[Token(Token = "0x20000D2")]
	public class StoryData
	{
		[Token(Token = "0x20000D3")]
		public enum State
		{
			[Token(Token = "0x4000357")]
			NotInitialized,
			[Token(Token = "0x4000358")]
			Updating,
			[Token(Token = "0x4000359")]
			Ready,
			[Token(Token = "0x400035A")]
			Error
		}

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Act currentAct;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string currentStageId;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectiveWithProgress currentObjective;

		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Queue<ObjectiveUpdateRequest> updateRequests;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float latestUpdateTimestamp;

		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public State state;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool skipCutscenes;

		[Token(Token = "0x600037E")]
		[Address(RVA = "0xF7AAD8", Offset = "0xF7AAD8", VA = "0xF7AAD8")]
		public StoryData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000D4")]
	public class Act
	{
		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string actId;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Stage> stages;

		[Token(Token = "0x600037F")]
		[Address(RVA = "0xF7AB54", Offset = "0xF7AB54", VA = "0xF7AB54")]
		public Act()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000D5")]
	public class Stage
	{
		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string stageId;

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Objective> objectives;

		[Token(Token = "0x6000380")]
		[Address(RVA = "0xF7ABD0", Offset = "0xF7ABD0", VA = "0xF7ABD0")]
		public Stage()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000D6")]
	public class Objective
	{
		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string objectiveId;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int amountToComplete;

		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Reward rewardWhenObjectiveComplete;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool completed;

		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int sortOrder;

		[Token(Token = "0x6000381")]
		[Address(RVA = "0xF7ABD8", Offset = "0xF7ABD8", VA = "0xF7ABD8")]
		public Objective()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000D7")]
	public class Reward
	{
		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<string> grantAccessToItems;

		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int freemiumReward;

		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int premiumReward;

		[Token(Token = "0x6000382")]
		[Address(RVA = "0xF7ABE0", Offset = "0xF7ABE0", VA = "0xF7ABE0")]
		public Reward()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000D8")]
	public class ObjectiveWithProgress : Objective
	{
		[Token(Token = "0x4000367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int progress;

		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool active;

		[Token(Token = "0x6000383")]
		[Address(RVA = "0xF7AC5C", Offset = "0xF7AC5C", VA = "0xF7AC5C")]
		public ObjectiveWithProgress()
		{
		}
	}
	[Token(Token = "0x20000D9")]
	public class ObjectiveUpdateRequest
	{
		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string objectiveId;

		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int progressValue;

		[Token(Token = "0x400036B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool isDeltaUpdate;

		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CloudScriptInvocationRequest.State state;

		[Token(Token = "0x6000384")]
		[Address(RVA = "0xF7AC64", Offset = "0xF7AC64", VA = "0xF7AC64")]
		private ObjectiveUpdateRequest(string objectiveId, int progressValue, bool isDeltaUpdate)
		{
		}

		[Token(Token = "0x6000385")]
		[Address(RVA = "0xF7ACA4", Offset = "0xF7ACA4", VA = "0xF7ACA4")]
		public static ObjectiveUpdateRequest CreateDeltaRequest(string taskId, int progressValue)
		{
			return null;
		}

		[Token(Token = "0x6000386")]
		[Address(RVA = "0xF7AD20", Offset = "0xF7AD20", VA = "0xF7AD20")]
		public static ObjectiveUpdateRequest CreateSetRequest(string taskId, int progressValue)
		{
			return null;
		}
	}
	[Token(Token = "0x20000DA")]
	public class PlayFabStoryHandler : ITickable
	{
		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly StoryData storyData;

		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData;

		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly float retryTimeout;

		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CloudScriptInvocationRequest pendingPlayFabRequest;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ObjectiveUpdateRequest pendingUpdateRequest;

		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float timeOfLastError;

		[Token(Token = "0x6000387")]
		[Address(RVA = "0xF7AD98", Offset = "0xF7AD98", VA = "0xF7AD98")]
		public PlayFabStoryHandler(StoryData storyData, PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData, ITimeProvider timeProvider, float retryTimeout = 30f)
		{
		}

		[Token(Token = "0x6000388")]
		[Address(RVA = "0xF7ADE4", Offset = "0xF7ADE4", VA = "0xF7ADE4", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000389")]
		[Address(RVA = "0xF7B0A0", Offset = "0xF7B0A0", VA = "0xF7B0A0")]
		private void CheckUpdateRequests()
		{
		}

		[Token(Token = "0x600038A")]
		[Address(RVA = "0xF7AF4C", Offset = "0xF7AF4C", VA = "0xF7AF4C")]
		private void CheckPendingPlayFabRequest()
		{
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0xF7B168", Offset = "0xF7B168", VA = "0xF7B168")]
		private void CheckErrorTimeout()
		{
		}

		[Token(Token = "0x600038C")]
		[Address(RVA = "0xF7B8C0", Offset = "0xF7B8C0", VA = "0xF7B8C0")]
		private void ClearPendingUpdateRequest()
		{
		}

		[Token(Token = "0x600038D")]
		[Address(RVA = "0xF7B7B4", Offset = "0xF7B7B4", VA = "0xF7B7B4")]
		private void ParseSuccesfulUpdateResponse()
		{
		}

		[Token(Token = "0x600038E")]
		[Address(RVA = "0xF7AE74", Offset = "0xF7AE74", VA = "0xF7AE74")]
		private void RequestCurrentStoryEvent()
		{
		}

		[Token(Token = "0x600038F")]
		[Address(RVA = "0xF7B234", Offset = "0xF7B234", VA = "0xF7B234")]
		private void RequestStoryEventUpdate(ObjectiveUpdateRequest objectiveUpdateRequest)
		{
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0xF7B8A4", Offset = "0xF7B8A4", VA = "0xF7B8A4")]
		private void ChangeState(StoryData.State newState)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000DB")]
	public class GetCurrentStoryResponse
	{
		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[CanBeNull]
		public ObjectiveWithProgress currentObjective;

		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string currentStageId;

		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Act currentAct;

		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string actId;

		[Token(Token = "0x6000391")]
		[Address(RVA = "0xF7B8C8", Offset = "0xF7B8C8", VA = "0xF7B8C8")]
		public GetCurrentStoryResponse()
		{
		}
	}
}
namespace Assets.RG.Ignis.PlayFab
{
	[Token(Token = "0x20000DC")]
	public class PlayFabVersionedLeaderboardHandler : ITickable
	{
		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly LoginData loginData;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly LeaderBoardData leaderBoardDataLatestVersion;

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly LeaderBoardData leaderBoardDataPreviousVersion;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IPlayFabLeaderboardFacade playFabLeaderboardFacade;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x6000392")]
		[Address(RVA = "0xF7B8D0", Offset = "0xF7B8D0", VA = "0xF7B8D0")]
		public PlayFabVersionedLeaderboardHandler(LoginData loginData, LeaderBoardData leaderBoardDataLatestVersion, LeaderBoardData leaderBoardDataPreviousVersion, IPlayFabLeaderboardFacade playFabLeaderboardFacade, ITimeProvider timeProvider, PlayFabConnectionSettings playFabConnectionSettings)
		{
		}

		[Token(Token = "0x6000393")]
		[Address(RVA = "0xF7B924", Offset = "0xF7B924", VA = "0xF7B924", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x20000DD")]
	public class PlayFabLeaderboardFacade : IPlayFabLeaderboardFacade
	{
		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabLoginData loginData;

		[Token(Token = "0x6000394")]
		[Address(RVA = "0xF7BCC0", Offset = "0xF7BCC0", VA = "0xF7BCC0")]
		public PlayFabLeaderboardFacade(PlayFabConnectionSettings playFabConnectionSettings, PlayFabLoginData loginData)
		{
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0xF7BCEC", Offset = "0xF7BCEC", VA = "0xF7BCEC", Slot = "4")]
		public void GetLeaderboard(LeaderBoardData leaderBoardData, int? versionToGet)
		{
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0xF7BFCC", Offset = "0xF7BFCC", VA = "0xF7BFCC")]
		private void PlayFabError(PlayFabError obj)
		{
		}
	}
	[Token(Token = "0x20000DF")]
	public interface IPlayFabLeaderboardFacade
	{
		[Token(Token = "0x600039A")]
		void GetLeaderboard(LeaderBoardData data, int? versionToGet);
	}
}
namespace RG.IgnisBowser
{
	[Token(Token = "0x20000E0")]
	public class BlastonApiTokenData
	{
		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string authenticationToken;

		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DateTime validUntil;

		[Token(Token = "0x600039B")]
		[Address(RVA = "0xF7C3B8", Offset = "0xF7C3B8", VA = "0xF7C3B8")]
		public bool HasValidToken()
		{
			return default(bool);
		}

		[Token(Token = "0x600039C")]
		[Address(RVA = "0xF7C43C", Offset = "0xF7C43C", VA = "0xF7C43C")]
		public BlastonApiTokenData()
		{
		}
	}
	[Token(Token = "0x20000E1")]
	public class BlastonApiTokenHandler : ITickable
	{
		[Serializable]
		[Token(Token = "0x20000E2")]
		public class TokenResponse
		{
			[Token(Token = "0x4000387")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string token;

			[Token(Token = "0x4000388")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string valid_until;

			[Token(Token = "0x60003A0")]
			[Address(RVA = "0xF7C698", Offset = "0xF7C698", VA = "0xF7C698")]
			public TokenResponse()
			{
			}
		}

		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData;

		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BlastonApiTokenData blastonApiTokenData;

		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CloudScriptInvocationRequest pendingGetRequest;

		[Token(Token = "0x600039D")]
		[Address(RVA = "0xF7C444", Offset = "0xF7C444", VA = "0xF7C444")]
		public BlastonApiTokenHandler(PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData, BlastonApiTokenData blastonApiTokenData)
		{
		}

		[Token(Token = "0x600039E")]
		[Address(RVA = "0xF7C470", Offset = "0xF7C470", VA = "0xF7C470", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0xF7C580", Offset = "0xF7C580", VA = "0xF7C580")]
		private void MakeNewRequest()
		{
		}
	}
}
namespace RG.IgnisBowser.PlayFab
{
	[Token(Token = "0x20000E3")]
	public class PlayFabReferenceData
	{
		[Token(Token = "0x4000389")]
		public const string releaseEnvironmentId = "B0549";

		[Token(Token = "0x400038A")]
		public const string stageEnvironmentId = "C6A22";

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0xF7C6A0", Offset = "0xF7C6A0", VA = "0xF7C6A0")]
		public static string GetDefaultEnvironment()
		{
			return null;
		}

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0xF7C6E0", Offset = "0xF7C6E0", VA = "0xF7C6E0")]
		public PlayFabReferenceData()
		{
		}
	}
}
namespace RG.IgnisBowser.KnockOutTournament
{
	[Token(Token = "0x20000E4")]
	public interface IKnockoutTournamentClient
	{
		[Token(Token = "0x60003A3")]
		Task<KnockoutTournamentClient.CreateTournamentResponse> CreateTournament(string organizerName, string organizerId, NetworkingRegion networkingRegion, int size, string gameplayRules = "Classic");

		[Token(Token = "0x60003A4")]
		Task<KnockoutTournamentClient.GetTournamentResponse> GetTournamentById(string tournamentId);

		[Token(Token = "0x60003A5")]
		Task<KnockoutTournamentClient.GetTournamentResponse> GetTournamentByAccessCode(string accessCode);

		[Token(Token = "0x60003A6")]
		Task<KnockoutTournamentClient.JoinTournamentResponse> JoinTournament(string tournamentId, string userId, string displayName);

		[Token(Token = "0x60003A7")]
		Task<KnockoutTournamentClient.LeaveTournamentResponse> LeaveTournament(string tournamentId, string userId);

		[Token(Token = "0x60003A8")]
		Task<KnockoutTournamentClient.LeaveTournamentResponse> KickFromTournament(string tournamentId, string userId);

		[Token(Token = "0x60003A9")]
		Task<KnockoutTournamentClient.GetMyTournamentsResponse> GetMyTournaments(string userId);

		[Token(Token = "0x60003AA")]
		Task<KnockoutTournamentClient.StartTournamentResponse> StartTournament(string tournamentId);

		[Token(Token = "0x60003AB")]
		Task<KnockoutTournamentClient.ReportMatchStartResponse> ReportStartMatch(string tournamentId, string matchId, string roomCode, NetworkingRegion networkingRegion);

		[Token(Token = "0x60003AC")]
		Task<KnockoutTournamentClient.ReportResultResponse> ReportResult(string tournamentId, string matchId, string playerOneUserId, int playerOneScore, bool playerOneWinner, string playerOneReplayUri, string playerTwoUserId, int playerTwoScore, bool playerTwoWinner, string playerTwoReplayUri);

		[Token(Token = "0x60003AD")]
		Task<KnockoutTournamentClient.ReportResultResponse> ForceResult(string tournamentId, string matchId, string playerOneUserId, int playerOneScore, bool playerOneWinner, string playerTwoUserId, int playerTwoScore, bool playerTwoWinner);

		[Token(Token = "0x60003AE")]
		Task<KnockoutTournamentClient.ReportCelebrationPlayedResponse> ReportCelebrationPlayed(string tournamentId);

		[Token(Token = "0x60003AF")]
		Task<KnockoutTournamentClient.RecreateTournamentResponse> ReCreateTournament(string tournamentId);
	}
	[Token(Token = "0x20000E5")]
	public class KnockoutTournamentClient : IKnockoutTournamentClient
	{
		[Serializable]
		[Token(Token = "0x20000E6")]
		public class GetTournamentResponse : SerializableTournament
		{
			[Token(Token = "0x60003C3")]
			[Address(RVA = "0x104DF54", Offset = "0x104DF54", VA = "0x104DF54")]
			public GetTournamentResponse()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000E7")]
		public class SerializableTournament
		{
			[Token(Token = "0x400038D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string tournamentId;

			[Token(Token = "0x400038E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string organizerName;

			[Token(Token = "0x400038F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string organizerId;

			[Token(Token = "0x4000390")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string networkingRegion;

			[Token(Token = "0x4000391")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string latestUpdateTimestamp;

			[Token(Token = "0x4000392")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int size;

			[Token(Token = "0x4000393")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public int generation;

			[Token(Token = "0x4000394")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string accessCode;

			[Token(Token = "0x4000395")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public string roomCode;

			[Token(Token = "0x4000396")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public List<TournamentParticipant> participants;

			[Token(Token = "0x4000397")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public List<TournamentRound> rounds;

			[Token(Token = "0x4000398")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public string state;

			[Token(Token = "0x4000399")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public string endTime;

			[Token(Token = "0x400039A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[CanBeNull]
			public string gameplayRules;

			[Token(Token = "0x60003C4")]
			[Address(RVA = "0x104DF5C", Offset = "0x104DF5C", VA = "0x104DF5C")]
			public SerializableTournament()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000E8")]
		public class MatchParticipant : TournamentParticipant
		{
			[Token(Token = "0x400039B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int score;

			[Token(Token = "0x400039C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public bool isWinner;

			[Token(Token = "0x400039D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string replayUri;

			[Token(Token = "0x60003C5")]
			[Address(RVA = "0x104DF64", Offset = "0x104DF64", VA = "0x104DF64")]
			public MatchParticipant()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000E9")]
		public class TournamentRoundMatch
		{
			[Token(Token = "0x400039E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string matchId;

			[Token(Token = "0x400039F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<MatchParticipant> participants;

			[Token(Token = "0x40003A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[CanBeNull]
			public string roomCode;

			[Token(Token = "0x40003A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[CanBeNull]
			public string networkingRegion;

			[Token(Token = "0x40003A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[CanBeNull]
			public string startTime;

			[Token(Token = "0x40003A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[CanBeNull]
			public bool isForfeit;

			[Token(Token = "0x40003A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
			[CanBeNull]
			public bool forcedResults;

			[Token(Token = "0x40003A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
			[CanBeNull]
			public bool isProgressByBye;

			[Token(Token = "0x60003C6")]
			[Address(RVA = "0x104DF74", Offset = "0x104DF74", VA = "0x104DF74")]
			public TournamentRoundMatch()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000EA")]
		public class TournamentRound
		{
			[Token(Token = "0x40003A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<TournamentRoundMatch> matches;

			[Token(Token = "0x60003C7")]
			[Address(RVA = "0x104DF7C", Offset = "0x104DF7C", VA = "0x104DF7C")]
			public TournamentRound()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000EB")]
		public class TournamentParticipant
		{
			[Token(Token = "0x40003A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string userId;

			[Token(Token = "0x40003A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string displayName;

			[Token(Token = "0x60003C8")]
			[Address(RVA = "0x104DF6C", Offset = "0x104DF6C", VA = "0x104DF6C")]
			public TournamentParticipant()
			{
			}
		}

		[Token(Token = "0x20000EC")]
		public class CreateTournamentResponse
		{
			[Token(Token = "0x40003A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string tournamentId;

			[Token(Token = "0x60003C9")]
			[Address(RVA = "0x104DF84", Offset = "0x104DF84", VA = "0x104DF84")]
			public CreateTournamentResponse()
			{
			}
		}

		[Token(Token = "0x20000ED")]
		public class CreateTournamentRequest
		{
			[Token(Token = "0x40003AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string organizerName;

			[Token(Token = "0x40003AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string organizerId;

			[Token(Token = "0x40003AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string networkingRegion;

			[Token(Token = "0x40003AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int size;

			[Token(Token = "0x40003AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string gameplayRules;

			[Token(Token = "0x60003CA")]
			[Address(RVA = "0x104DF8C", Offset = "0x104DF8C", VA = "0x104DF8C")]
			public CreateTournamentRequest(string organizerName, string organizerId, string networkingRegion, int size, string gameplayRules)
			{
			}
		}

		[Token(Token = "0x20000EE")]
		public class RecreateTournamentResponse
		{
			[Token(Token = "0x60003CB")]
			[Address(RVA = "0x104DFE0", Offset = "0x104DFE0", VA = "0x104DFE0")]
			public RecreateTournamentResponse()
			{
			}
		}

		[Token(Token = "0x20000EF")]
		public class JoinTournamentRequest
		{
			[Token(Token = "0x40003AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string displayName;

			[Token(Token = "0x40003B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string userId;

			[Token(Token = "0x60003CC")]
			[Address(RVA = "0x104DFE8", Offset = "0x104DFE8", VA = "0x104DFE8")]
			public JoinTournamentRequest(string displayName, string userId)
			{
			}
		}

		[Token(Token = "0x20000F0")]
		public class JoinTournamentResponse
		{
			[Token(Token = "0x60003CD")]
			[Address(RVA = "0x104E014", Offset = "0x104E014", VA = "0x104E014")]
			public JoinTournamentResponse()
			{
			}
		}

		[Token(Token = "0x20000F1")]
		public class LeaveTournamentResponse
		{
			[Token(Token = "0x60003CE")]
			[Address(RVA = "0x104E01C", Offset = "0x104E01C", VA = "0x104E01C")]
			public LeaveTournamentResponse()
			{
			}
		}

		[Token(Token = "0x20000F2")]
		public class GetMyTournamentsResponse
		{
			[Token(Token = "0x40003B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<string> organizedTournaments;

			[Token(Token = "0x40003B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<string> joinedTournaments;

			[Token(Token = "0x60003CF")]
			[Address(RVA = "0x104E024", Offset = "0x104E024", VA = "0x104E024")]
			public GetMyTournamentsResponse()
			{
			}
		}

		[Token(Token = "0x20000F3")]
		public class ChangeTournamentStateRequest
		{
			[Token(Token = "0x40003B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string state;

			[Token(Token = "0x60003D0")]
			[Address(RVA = "0x104E02C", Offset = "0x104E02C", VA = "0x104E02C")]
			public ChangeTournamentStateRequest(string state)
			{
			}
		}

		[Token(Token = "0x20000F4")]
		public class StartTournamentResponse
		{
			[Token(Token = "0x60003D1")]
			[Address(RVA = "0x104E054", Offset = "0x104E054", VA = "0x104E054")]
			public StartTournamentResponse()
			{
			}
		}

		[Token(Token = "0x20000F5")]
		public class ReportCelebrationPlayedResponse
		{
			[Token(Token = "0x60003D2")]
			[Address(RVA = "0x104E05C", Offset = "0x104E05C", VA = "0x104E05C")]
			public ReportCelebrationPlayedResponse()
			{
			}
		}

		[Token(Token = "0x20000F6")]
		public class ChangeTournamentSizeRequest
		{
			[Token(Token = "0x40003B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int size;

			[Token(Token = "0x60003D3")]
			[Address(RVA = "0x104E064", Offset = "0x104E064", VA = "0x104E064")]
			public ChangeTournamentSizeRequest(int size)
			{
			}
		}

		[Token(Token = "0x20000F7")]
		public class ChangeTournamentSizeResponse
		{
			[Token(Token = "0x60003D4")]
			[Address(RVA = "0x104E08C", Offset = "0x104E08C", VA = "0x104E08C")]
			public ChangeTournamentSizeResponse()
			{
			}
		}

		[Token(Token = "0x20000F8")]
		public class ReportResultRequest
		{
			[Token(Token = "0x40003B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<ParticipantResult> participants;

			[Token(Token = "0x60003D5")]
			[Address(RVA = "0x104E094", Offset = "0x104E094", VA = "0x104E094")]
			public ReportResultRequest(List<ParticipantResult> participants)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000F9")]
		public class ParticipantResult
		{
			[Token(Token = "0x40003B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string userId;

			[Token(Token = "0x40003B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int score;

			[Token(Token = "0x40003B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool isWinner;

			[Token(Token = "0x40003B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string replayUri;

			[Token(Token = "0x60003D6")]
			[Address(RVA = "0x104E0BC", Offset = "0x104E0BC", VA = "0x104E0BC")]
			public ParticipantResult(string userId, int score, bool isWinner, string replayUri)
			{
			}
		}

		[Token(Token = "0x20000FA")]
		public class ReportResultResponse
		{
			[Token(Token = "0x60003D7")]
			[Address(RVA = "0x104E104", Offset = "0x104E104", VA = "0x104E104")]
			public ReportResultResponse()
			{
			}
		}

		[Token(Token = "0x20000FB")]
		public class ReportMatchStartRequest
		{
			[Token(Token = "0x40003BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string roomCode;

			[Token(Token = "0x40003BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string networkingRegion;

			[Token(Token = "0x60003D8")]
			[Address(RVA = "0x104E10C", Offset = "0x104E10C", VA = "0x104E10C")]
			public ReportMatchStartRequest(string roomCode, string networkingRegion)
			{
			}
		}

		[Token(Token = "0x20000FC")]
		public class ReportMatchStartResponse
		{
			[Token(Token = "0x60003D9")]
			[Address(RVA = "0x104E138", Offset = "0x104E138", VA = "0x104E138")]
			public ReportMatchStartResponse()
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20000FD")]
		[CompilerGenerated]
		private struct <CreateTournament>d__4 : IAsyncStateMachine
		{
			[Token(Token = "0x40003BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40003BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<CreateTournamentResponse> <>t__builder;

			[Token(Token = "0x40003BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string organizerName;

			[Token(Token = "0x40003BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string organizerId;

			[Token(Token = "0x40003C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public NetworkingRegion networkingRegion;

			[Token(Token = "0x40003C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int size;

			[Token(Token = "0x40003C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string gameplayRules;

			[Token(Token = "0x40003C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public KnockoutTournamentClient <>4__this;

			[Token(Token = "0x40003C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Task<string> <request>5__2;

			[Token(Token = "0x40003C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private TaskAwaiter<string> <>u__1;

			[Token(Token = "0x60003DA")]
			[Address(RVA = "0x104E140", Offset = "0x104E140", VA = "0x104E140", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60003DB")]
			[Address(RVA = "0x104E518", Offset = "0x104E518", VA = "0x104E518", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20000FE")]
		[CompilerGenerated]
		private struct <ReCreateTournament>d__5 : IAsyncStateMachine
		{
			[Token(Token = "0x40003C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40003C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<RecreateTournamentResponse> <>t__builder;

			[Token(Token = "0x40003C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KnockoutTournamentClient <>4__this;

			[Token(Token = "0x40003C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string tournamentId;

			[Token(Token = "0x40003CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Task<string> <request>5__2;

			[Token(Token = "0x40003CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private TaskAwaiter<string> <>u__1;

			[Token(Token = "0x60003DC")]
			[Address(RVA = "0x104E570", Offset = "0x104E570", VA = "0x104E570", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60003DD")]
			[Address(RVA = "0x104E918", Offset = "0x104E918", VA = "0x104E918", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20000FF")]
		[CompilerGenerated]
		private struct <GetTournamentById>d__6 : IAsyncStateMachine
		{
			[Token(Token = "0x40003CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40003CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<GetTournamentResponse> <>t__builder;

			[Token(Token = "0x40003CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KnockoutTournamentClient <>4__this;

			[Token(Token = "0x40003CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string tournamentId;

			[Token(Token = "0x40003D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Task<string> <request>5__2;

			[Token(Token = "0x40003D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private TaskAwaiter<string> <>u__1;

			[Token(Token = "0x60003DE")]
			[Address(RVA = "0x104E970", Offset = "0x104E970", VA = "0x104E970", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60003DF")]
			[Address(RVA = "0x104EC88", Offset = "0x104EC88", VA = "0x104EC88", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000100")]
		[CompilerGenerated]
		private struct <GetTournamentByAccessCode>d__7 : IAsyncStateMachine
		{
			[Token(Token = "0x40003D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40003D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<GetTournamentResponse> <>t__builder;

			[Token(Token = "0x40003D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KnockoutTournamentClient <>4__this;

			[Token(Token = "0x40003D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string accessCode;

			[Token(Token = "0x40003D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Task<string> <request>5__2;

			[Token(Token = "0x40003D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private TaskAwaiter<string> <>u__1;

			[Token(Token = "0x60003E0")]
			[Address(RVA = "0x104ECE0", Offset = "0x104ECE0", VA = "0x104ECE0", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60003E1")]
			[Address(RVA = "0x104EFF8", Offset = "0x104EFF8", VA = "0x104EFF8", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000101")]
		[CompilerGenerated]
		private struct <JoinTournament>d__8 : IAsyncStateMachine
		{
			[Token(Token = "0x40003D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40003D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<JoinTournamentResponse> <>t__builder;

			[Token(Token = "0x40003DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string displayName;

			[Token(Token = "0x40003DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string userId;

			[Token(Token = "0x40003DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public KnockoutTournamentClient <>4__this;

			[Token(Token = "0x40003DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string tournamentId;

			[Token(Token = "0x40003DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Task<string> <request>5__2;

			[Token(Token = "0x40003DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private TaskAwaiter<string> <>u__1;

			[Token(Token = "0x60003E2")]
			[Address(RVA = "0x104F050", Offset = "0x104F050", VA = "0x104F050", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60003E3")]
			[Address(RVA = "0x104F3EC", Offset = "0x104F3EC", VA = "0x104F3EC", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000102")]
		[CompilerGenerated]
		private struct <LeaveTournament>d__9 : IAsyncStateMachine
		{
			[Token(Token = "0x40003E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40003E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<LeaveTournamentResponse> <>t__builder;

			[Token(Token = "0x40003E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KnockoutTournamentClient <>4__this;

			[Token(Token = "0x40003E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string tournamentId;

			[Token(Token = "0x40003E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string userId;

			[Token(Token = "0x40003E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Task<string> <request>5__2;

			[Token(Token = "0x40003E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private TaskAwaiter<string> <>u__1;

			[Token(Token = "0x60003E4")]
			[Address(RVA = "0x104F444", Offset = "0x104F444", VA = "0x104F444", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60003E5")]
			[Address(RVA = "0x104F8DC", Offset = "0x104F8DC", VA = "0x104F8DC", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000103")]
		[CompilerGenerated]
		private struct <KickFromTournament>d__10 : IAsyncStateMachine
		{
			[Token(Token = "0x40003E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40003E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<LeaveTournamentResponse> <>t__builder;

			[Token(Token = "0x40003E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KnockoutTournamentClient <>4__this;

			[Token(Token = "0x40003EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string tournamentId;

			[Token(Token = "0x40003EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string userId;

			[Token(Token = "0x40003EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Task<string> <request>5__2;

			[Token(Token = "0x40003ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private TaskAwaiter<string> <>u__1;

			[Token(Token = "0x60003E6")]
			[Address(RVA = "0x104F934", Offset = "0x104F934", VA = "0x104F934", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60003E7")]
			[Address(RVA = "0x104FDCC", Offset = "0x104FDCC", VA = "0x104FDCC", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000104")]
		[CompilerGenerated]
		private struct <GetMyTournaments>d__11 : IAsyncStateMachine
		{
			[Token(Token = "0x40003EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40003EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<GetMyTournamentsResponse> <>t__builder;

			[Token(Token = "0x40003F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KnockoutTournamentClient <>4__this;

			[Token(Token = "0x40003F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string userId;

			[Token(Token = "0x40003F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Task<string> <request>5__2;

			[Token(Token = "0x40003F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private TaskAwaiter<string> <>u__1;

			[Token(Token = "0x60003E8")]
			[Address(RVA = "0x104FE24", Offset = "0x104FE24", VA = "0x104FE24", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60003E9")]
			[Address(RVA = "0x1050154", Offset = "0x1050154", VA = "0x1050154", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000105")]
		[CompilerGenerated]
		private struct <StartTournament>d__12 : IAsyncStateMachine
		{
			[Token(Token = "0x40003F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40003F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<StartTournamentResponse> <>t__builder;

			[Token(Token = "0x40003F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KnockoutTournamentClient <>4__this;

			[Token(Token = "0x40003F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string tournamentId;

			[Token(Token = "0x40003F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Task<string> <request>5__2;

			[Token(Token = "0x40003F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private TaskAwaiter<string> <>u__1;

			[Token(Token = "0x60003EA")]
			[Address(RVA = "0x10501AC", Offset = "0x10501AC", VA = "0x10501AC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60003EB")]
			[Address(RVA = "0x1050554", Offset = "0x1050554", VA = "0x1050554", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000106")]
		[CompilerGenerated]
		private struct <ReportCelebrationPlayed>d__13 : IAsyncStateMachine
		{
			[Token(Token = "0x40003FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40003FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<ReportCelebrationPlayedResponse> <>t__builder;

			[Token(Token = "0x40003FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KnockoutTournamentClient <>4__this;

			[Token(Token = "0x40003FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string tournamentId;

			[Token(Token = "0x40003FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Task<string> <request>5__2;

			[Token(Token = "0x40003FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private TaskAwaiter<string> <>u__1;

			[Token(Token = "0x60003EC")]
			[Address(RVA = "0x10505AC", Offset = "0x10505AC", VA = "0x10505AC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60003ED")]
			[Address(RVA = "0x1050954", Offset = "0x1050954", VA = "0x1050954", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000107")]
		[CompilerGenerated]
		private struct <ChangeTournamentSize>d__14 : IAsyncStateMachine
		{
			[Token(Token = "0x4000400")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000401")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<ChangeTournamentSizeResponse> <>t__builder;

			[Token(Token = "0x4000402")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int newSize;

			[Token(Token = "0x4000403")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public KnockoutTournamentClient <>4__this;

			[Token(Token = "0x4000404")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string tournamentId;

			[Token(Token = "0x4000405")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Task<string> <request>5__2;

			[Token(Token = "0x4000406")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private TaskAwaiter<string> <>u__1;

			[Token(Token = "0x60003EE")]
			[Address(RVA = "0x10509AC", Offset = "0x10509AC", VA = "0x10509AC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60003EF")]
			[Address(RVA = "0x1050D24", Offset = "0x1050D24", VA = "0x1050D24", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000108")]
		[CompilerGenerated]
		private struct <ReportStartMatch>d__16 : IAsyncStateMachine
		{
			[Token(Token = "0x4000407")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000408")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<ReportMatchStartResponse> <>t__builder;

			[Token(Token = "0x4000409")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string roomCode;

			[Token(Token = "0x400040A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public NetworkingRegion networkingRegion;

			[Token(Token = "0x400040B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public KnockoutTournamentClient <>4__this;

			[Token(Token = "0x400040C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string tournamentId;

			[Token(Token = "0x400040D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string matchId;

			[Token(Token = "0x400040E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Task<string> <request>5__2;

			[Token(Token = "0x400040F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private TaskAwaiter<string> <>u__1;

			[Token(Token = "0x60003F0")]
			[Address(RVA = "0x1050D7C", Offset = "0x1050D7C", VA = "0x1050D7C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60003F1")]
			[Address(RVA = "0x1051310", Offset = "0x1051310", VA = "0x1051310", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000109")]
		[CompilerGenerated]
		private struct <ReportResult>d__17 : IAsyncStateMachine
		{
			[Token(Token = "0x4000410")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000411")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<ReportResultResponse> <>t__builder;

			[Token(Token = "0x4000412")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string playerOneUserId;

			[Token(Token = "0x4000413")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int playerOneScore;

			[Token(Token = "0x4000414")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public bool playerOneWinner;

			[Token(Token = "0x4000415")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string playerOneReplayUri;

			[Token(Token = "0x4000416")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string playerTwoUserId;

			[Token(Token = "0x4000417")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int playerTwoScore;

			[Token(Token = "0x4000418")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public bool playerTwoWinner;

			[Token(Token = "0x4000419")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public string playerTwoReplayUri;

			[Token(Token = "0x400041A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public KnockoutTournamentClient <>4__this;

			[Token(Token = "0x400041B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public string tournamentId;

			[Token(Token = "0x400041C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public string matchId;

			[Token(Token = "0x400041D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Task<string> <request>5__2;

			[Token(Token = "0x400041E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private TaskAwaiter<string> <>u__1;

			[Token(Token = "0x60003F2")]
			[Address(RVA = "0x1051368", Offset = "0x1051368", VA = "0x1051368", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60003F3")]
			[Address(RVA = "0x1051A20", Offset = "0x1051A20", VA = "0x1051A20", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200010A")]
		[CompilerGenerated]
		private struct <ForceResult>d__19 : IAsyncStateMachine
		{
			[Token(Token = "0x400041F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000420")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<ReportResultResponse> <>t__builder;

			[Token(Token = "0x4000421")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KnockoutTournamentClient <>4__this;

			[Token(Token = "0x4000422")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string tournamentId;

			[Token(Token = "0x4000423")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string matchId;

			[Token(Token = "0x4000424")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string playerOneUserId;

			[Token(Token = "0x4000425")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int playerOneScore;

			[Token(Token = "0x4000426")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public bool playerOneWinner;

			[Token(Token = "0x4000427")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public string playerTwoUserId;

			[Token(Token = "0x4000428")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public int playerTwoScore;

			[Token(Token = "0x4000429")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public bool playerTwoWinner;

			[Token(Token = "0x400042A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private TaskAwaiter<ReportResultResponse> <>u__1;

			[Token(Token = "0x60003F4")]
			[Address(RVA = "0x1051A78", Offset = "0x1051A78", VA = "0x1051A78", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60003F5")]
			[Address(RVA = "0x1051C84", Offset = "0x1051C84", VA = "0x1051C84", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IHttpClient httpClient;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string baseUrl;

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0xF7C6E8", Offset = "0xF7C6E8", VA = "0xF7C6E8")]
		public KnockoutTournamentClient(IHttpClient httpClient)
		{
		}

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0xF7C710", Offset = "0xF7C710", VA = "0xF7C710")]
		public static void WriteTextFile(string path, string content)
		{
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0xF7C7A0", Offset = "0xF7C7A0", VA = "0xF7C7A0", Slot = "4")]
		[AsyncStateMachine(typeof(<CreateTournament>d__4))]
		public Task<CreateTournamentResponse> CreateTournament(string organizerName, string organizerId, NetworkingRegion networkingRegion, int size, string gameplayRules = "Classic")
		{
			return null;
		}

		[Token(Token = "0x60003B3")]
		[Address(RVA = "0xF7C8C8", Offset = "0xF7C8C8", VA = "0xF7C8C8", Slot = "16")]
		[AsyncStateMachine(typeof(<ReCreateTournament>d__5))]
		public Task<RecreateTournamentResponse> ReCreateTournament(string tournamentId)
		{
			return null;
		}

		[Token(Token = "0x60003B4")]
		[Address(RVA = "0xF7C9C0", Offset = "0xF7C9C0", VA = "0xF7C9C0", Slot = "5")]
		[AsyncStateMachine(typeof(<GetTournamentById>d__6))]
		public Task<GetTournamentResponse> GetTournamentById(string tournamentId)
		{
			return null;
		}

		[Token(Token = "0x60003B5")]
		[Address(RVA = "0xF7CAB8", Offset = "0xF7CAB8", VA = "0xF7CAB8", Slot = "6")]
		[AsyncStateMachine(typeof(<GetTournamentByAccessCode>d__7))]
		public Task<GetTournamentResponse> GetTournamentByAccessCode(string accessCode)
		{
			return null;
		}

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0xF7CBB0", Offset = "0xF7CBB0", VA = "0xF7CBB0", Slot = "7")]
		[AsyncStateMachine(typeof(<JoinTournament>d__8))]
		public Task<JoinTournamentResponse> JoinTournament(string tournamentId, string userId, string displayName)
		{
			return null;
		}

		[Token(Token = "0x60003B7")]
		[Address(RVA = "0xF7CCC0", Offset = "0xF7CCC0", VA = "0xF7CCC0", Slot = "8")]
		[AsyncStateMachine(typeof(<LeaveTournament>d__9))]
		public Task<LeaveTournamentResponse> LeaveTournament(string tournamentId, string userId)
		{
			return null;
		}

		[Token(Token = "0x60003B8")]
		[Address(RVA = "0xF7CDC8", Offset = "0xF7CDC8", VA = "0xF7CDC8", Slot = "9")]
		[AsyncStateMachine(typeof(<KickFromTournament>d__10))]
		public Task<LeaveTournamentResponse> KickFromTournament(string tournamentId, string userId)
		{
			return null;
		}

		[Token(Token = "0x60003B9")]
		[Address(RVA = "0xF7CED0", Offset = "0xF7CED0", VA = "0xF7CED0", Slot = "10")]
		[AsyncStateMachine(typeof(<GetMyTournaments>d__11))]
		public Task<GetMyTournamentsResponse> GetMyTournaments(string userId)
		{
			return null;
		}

		[Token(Token = "0x60003BA")]
		[Address(RVA = "0xF7CFC8", Offset = "0xF7CFC8", VA = "0xF7CFC8", Slot = "11")]
		[AsyncStateMachine(typeof(<StartTournament>d__12))]
		public Task<StartTournamentResponse> StartTournament(string tournamentId)
		{
			return null;
		}

		[Token(Token = "0x60003BB")]
		[Address(RVA = "0xF7D0C0", Offset = "0xF7D0C0", VA = "0xF7D0C0", Slot = "15")]
		[AsyncStateMachine(typeof(<ReportCelebrationPlayed>d__13))]
		public Task<ReportCelebrationPlayedResponse> ReportCelebrationPlayed(string tournamentId)
		{
			return null;
		}

		[Token(Token = "0x60003BC")]
		[Address(RVA = "0xF7D1B8", Offset = "0xF7D1B8", VA = "0xF7D1B8")]
		[AsyncStateMachine(typeof(<ChangeTournamentSize>d__14))]
		public Task<ChangeTournamentSizeResponse> ChangeTournamentSize(string tournamentId, int newSize)
		{
			return null;
		}

		[Token(Token = "0x60003BD")]
		[Address(RVA = "0xF7D2C4", Offset = "0xF7D2C4", VA = "0xF7D2C4")]
		private static string FixEmptyRequestResult(Task<string> request)
		{
			return null;
		}

		[Token(Token = "0x60003BE")]
		[Address(RVA = "0xF7D388", Offset = "0xF7D388", VA = "0xF7D388", Slot = "12")]
		[AsyncStateMachine(typeof(<ReportStartMatch>d__16))]
		public Task<ReportMatchStartResponse> ReportStartMatch(string tournamentId, string matchId, string roomCode, NetworkingRegion networkingRegion)
		{
			return null;
		}

		[Token(Token = "0x60003BF")]
		[Address(RVA = "0xF7D4AC", Offset = "0xF7D4AC", VA = "0xF7D4AC", Slot = "13")]
		[AsyncStateMachine(typeof(<ReportResult>d__17))]
		public Task<ReportResultResponse> ReportResult(string tournamentId, string matchId, string playerOneUserId, int playerOneScore, bool playerOneWinner, string playerOneReplayUri, string playerTwoUserId, int playerTwoScore, bool playerTwoWinner, string playerTwoReplayUri)
		{
			return null;
		}

		[Token(Token = "0x60003C0")]
		[Address(RVA = "0xF7D60C", Offset = "0xF7D60C", VA = "0xF7D60C")]
		private static ParticipantResult CreateParticipantResult(string userId, int score, bool isWinner, string replayUri)
		{
			return null;
		}

		[Token(Token = "0x60003C1")]
		[Address(RVA = "0xF7D698", Offset = "0xF7D698", VA = "0xF7D698", Slot = "14")]
		[AsyncStateMachine(typeof(<ForceResult>d__19))]
		public Task<ReportResultResponse> ForceResult(string tournamentId, string matchId, string playerOneUserId, int playerOneScore, bool playerOneWinner, string playerTwoUserId, int playerTwoScore, bool playerTwoWinner)
		{
			return null;
		}
	}
	[Token(Token = "0x200010B")]
	public interface IHttpClient
	{
		[Token(Token = "0x60003F6")]
		Task<string> DoPatch(string url, string patchData);

		[Token(Token = "0x60003F7")]
		Task<string> DoPost(string url, string postData);

		[Token(Token = "0x60003F8")]
		Task<string> DoDelete(string url);

		[Token(Token = "0x60003F9")]
		Task<string> DoGet(string url);
	}
	[Token(Token = "0x200010C")]
	public class HttpClient : IHttpClient
	{
		[Token(Token = "0x200010D")]
		public class RequestException : Exception
		{
			[Token(Token = "0x400042E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public readonly UnityWebRequest request;

			[Token(Token = "0x6000402")]
			[Address(RVA = "0x10525F0", Offset = "0x10525F0", VA = "0x10525F0")]
			public RequestException(UnityWebRequest request)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200010E")]
		[CompilerGenerated]
		private struct <DoPatch>d__4 : IAsyncStateMachine
		{
			[Token(Token = "0x400042F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000430")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<string> <>t__builder;

			[Token(Token = "0x4000431")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HttpClient <>4__this;

			[Token(Token = "0x4000432")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string url;

			[Token(Token = "0x4000433")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string patchData;

			[Token(Token = "0x4000434")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x4000435")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6000403")]
			[Address(RVA = "0x105265C", Offset = "0x105265C", VA = "0x105265C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000404")]
			[Address(RVA = "0x1052C74", Offset = "0x1052C74", VA = "0x1052C74", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200010F")]
		[CompilerGenerated]
		private struct <DoPost>d__5 : IAsyncStateMachine
		{
			[Token(Token = "0x4000436")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000437")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<string> <>t__builder;

			[Token(Token = "0x4000438")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string postData;

			[Token(Token = "0x4000439")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HttpClient <>4__this;

			[Token(Token = "0x400043A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string url;

			[Token(Token = "0x400043B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x400043C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6000405")]
			[Address(RVA = "0x1052CCC", Offset = "0x1052CCC", VA = "0x1052CCC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000406")]
			[Address(RVA = "0x10532E8", Offset = "0x10532E8", VA = "0x10532E8", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000110")]
		[CompilerGenerated]
		private struct <DoDelete>d__6 : IAsyncStateMachine
		{
			[Token(Token = "0x400043D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400043E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<string> <>t__builder;

			[Token(Token = "0x400043F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HttpClient <>4__this;

			[Token(Token = "0x4000440")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string url;

			[Token(Token = "0x4000441")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x4000442")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6000407")]
			[Address(RVA = "0x1053340", Offset = "0x1053340", VA = "0x1053340", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000408")]
			[Address(RVA = "0x1053898", Offset = "0x1053898", VA = "0x1053898", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000111")]
		[CompilerGenerated]
		private struct <DoGet>d__7 : IAsyncStateMachine
		{
			[Token(Token = "0x4000443")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000444")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<string> <>t__builder;

			[Token(Token = "0x4000445")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string url;

			[Token(Token = "0x4000446")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HttpClient <>4__this;

			[Token(Token = "0x4000447")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x4000448")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6000409")]
			[Address(RVA = "0x10538F0", Offset = "0x10538F0", VA = "0x10538F0", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600040A")]
			[Address(RVA = "0x1053E20", Offset = "0x1053E20", VA = "0x1053E20", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool DebugForceNextGetRequestToFail;

		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static bool DebugForceNextUpdateRequestToFail;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BlastonApiTokenData blastonApiTokenData;

		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x1051CDC", Offset = "0x1051CDC", VA = "0x1051CDC")]
		public HttpClient(BlastonApiTokenData blastonApiTokenData)
		{
		}

		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x1051D04", Offset = "0x1051D04", VA = "0x1051D04", Slot = "4")]
		[AsyncStateMachine(typeof(<DoPatch>d__4))]
		public Task<string> DoPatch(string url, string patchData)
		{
			return null;
		}

		[Token(Token = "0x60003FC")]
		[Address(RVA = "0x1051E0C", Offset = "0x1051E0C", VA = "0x1051E0C", Slot = "5")]
		[AsyncStateMachine(typeof(<DoPost>d__5))]
		public Task<string> DoPost(string url, string postData)
		{
			return null;
		}

		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x1051F14", Offset = "0x1051F14", VA = "0x1051F14", Slot = "6")]
		[AsyncStateMachine(typeof(<DoDelete>d__6))]
		public Task<string> DoDelete(string url)
		{
			return null;
		}

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x105200C", Offset = "0x105200C", VA = "0x105200C", Slot = "7")]
		[AsyncStateMachine(typeof(<DoGet>d__7))]
		public Task<string> DoGet(string url)
		{
			return null;
		}

		[Token(Token = "0x60003FF")]
		[Address(RVA = "0x1052104", Offset = "0x1052104", VA = "0x1052104")]
		private void LogRequest(string method, string url, string data)
		{
		}

		[Token(Token = "0x6000400")]
		[Address(RVA = "0x1052300", Offset = "0x1052300", VA = "0x1052300")]
		private void LogError(UnityWebRequest request)
		{
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0x10524F4", Offset = "0x10524F4", VA = "0x10524F4")]
		private void SetHeaders(UnityWebRequest request)
		{
		}
	}
}
namespace RG.Timeline
{
	[Token(Token = "0x2000112")]
	public class MaserAudioPlayableAsset : PlayableAsset
	{
		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MasterAudioPlayableBehaviour template;

		[Token(Token = "0x600040B")]
		[Address(RVA = "0x1053E78", Offset = "0x1053E78", VA = "0x1053E78", Slot = "6")]
		public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
		{
			return default(Playable);
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0x1053F20", Offset = "0x1053F20", VA = "0x1053F20")]
		public MaserAudioPlayableAsset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000113")]
	public class MasterAudioPlayableBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string[] startCustomEvents;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] endCustomEvents;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] startSounds;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform transform;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool soundIsTriggered;

		[Token(Token = "0x600040D")]
		[Address(RVA = "0x1053F28", Offset = "0x1053F28", VA = "0x1053F28", Slot = "18")]
		public override void OnBehaviourPause(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x1054164", Offset = "0x1054164", VA = "0x1054164", Slot = "17")]
		public override void OnBehaviourPlay(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x105419C", Offset = "0x105419C", VA = "0x105419C", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0x10542F8", Offset = "0x10542F8", VA = "0x10542F8")]
		private void PlaySoundAndFollow(string[] ids, Transform t)
		{
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0x10540AC", Offset = "0x10540AC", VA = "0x10540AC")]
		private void PlayCustomEvents(string[] ids, Transform t)
		{
		}

		[Token(Token = "0x6000412")]
		[Address(RVA = "0x1053FF8", Offset = "0x1053FF8", VA = "0x1053FF8")]
		private void StopPlayingSound(string[] ids, Transform t)
		{
		}

		[Token(Token = "0x6000413")]
		[Address(RVA = "0x10543D0", Offset = "0x10543D0", VA = "0x10543D0")]
		public MasterAudioPlayableBehaviour()
		{
		}
	}
	[Token(Token = "0x2000114")]
	[TrackBindingType(typeof(Transform))]
	[TrackClipType(typeof(MaserAudioPlayableAsset))]
	public class MasterAudioTrack : PlayableTrack
	{
		[Token(Token = "0x6000414")]
		[Address(RVA = "0x1054448", Offset = "0x1054448", VA = "0x1054448")]
		public MasterAudioTrack()
		{
		}
	}
}
namespace RG.Ignis.PlayFab
{
	[Token(Token = "0x2000115")]
	public interface IBotSelector
	{
		[Token(Token = "0x6000415")]
		PlayFabTitleDataBot GetBotByLeaguePoints();

		[Token(Token = "0x6000416")]
		PlayFabTitleDataBot GetRetentionBotByLeaguePoints();

		[Token(Token = "0x6000417")]
		PlayFabTitleDataBot GetBoRandomBotInRankRange(int rank);
	}
	[Token(Token = "0x2000116")]
	public class BotSelector : IBotSelector
	{
		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int DEFAULT_MATCHMAKING_LP_RANGE;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayFabTitleData playFabTitleData;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<BotSettings> listOfBotSettings;

		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly RatingMatchmakerSettingsData ratingMatchmakerSettingsData;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly List<PlayFabTitleDataBot> candidates;

		[Token(Token = "0x6000418")]
		[Address(RVA = "0x1054450", Offset = "0x1054450", VA = "0x1054450")]
		public BotSelector(PlayFabTitleData playFabTitleData, PlayFabProgressionData playFabProgressionData, List<BotSettings> listOfBotSettings, RatingMatchmakerSettingsData ratingMatchmakerSettingsData)
		{
		}

		[Token(Token = "0x6000419")]
		[Address(RVA = "0x10544FC", Offset = "0x10544FC", VA = "0x10544FC", Slot = "4")]
		public PlayFabTitleDataBot GetBotByLeaguePoints()
		{
			return null;
		}

		[Token(Token = "0x600041A")]
		[Address(RVA = "0x1054838", Offset = "0x1054838", VA = "0x1054838", Slot = "5")]
		public PlayFabTitleDataBot GetRetentionBotByLeaguePoints()
		{
			return null;
		}

		[Token(Token = "0x600041B")]
		[Address(RVA = "0x1054898", Offset = "0x1054898", VA = "0x1054898", Slot = "6")]
		public PlayFabTitleDataBot GetBoRandomBotInRankRange(int rank)
		{
			return null;
		}

		[Token(Token = "0x600041C")]
		[Address(RVA = "0x1054524", Offset = "0x1054524", VA = "0x1054524")]
		private PlayFabTitleDataBot PlayFabTitleDataBot(int myLeaguePoints, bool useClosestHarderBotIfNoBotInRange)
		{
			return null;
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0x1054B94", Offset = "0x1054B94", VA = "0x1054B94")]
		private PlayFabTitleDataBot GetLowestBotLeaguePoints()
		{
			return null;
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0x1054AB8", Offset = "0x1054AB8", VA = "0x1054AB8")]
		private PlayFabTitleDataBot GetHighestBotLeaguePoints()
		{
			return null;
		}
	}
	[Token(Token = "0x2000118")]
	public class PlayFabAbuseReportingHandler : ITickable
	{
		[Token(Token = "0x4000456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AbuseReportingData abuseReportingData;

		[Token(Token = "0x4000457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly LoginData loginData;

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PlayFabPlayerIdentitiesData playerIdentitiesData;

		[Token(Token = "0x4000459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IPlayFabReportFacade playFabReportFacade;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly List<AbuseReportRequest> pendingRequests;

		[Token(Token = "0x400045B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ProfilerMarker tickMarker;

		[Token(Token = "0x6000423")]
		[Address(RVA = "0x1054E04", Offset = "0x1054E04", VA = "0x1054E04")]
		public PlayFabAbuseReportingHandler(AbuseReportingData abuseReportingData, LoginData loginData, PlayFabPlayerIdentitiesData playerIdentitiesData, IPlayFabReportFacade playFabReportFacade)
		{
		}

		[Token(Token = "0x6000424")]
		[Address(RVA = "0x1054EDC", Offset = "0x1054EDC", VA = "0x1054EDC", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x200011A")]
	public interface IPlayFabReportFacade
	{
		[Token(Token = "0x6000428")]
		void SendReport(AbuseReportRequest playerToReport);
	}
	[Token(Token = "0x200011B")]
	public class PlayFabReportFacade : IPlayFabReportFacade
	{
		[Token(Token = "0x6000429")]
		[Address(RVA = "0x1055358", Offset = "0x1055358", VA = "0x1055358", Slot = "4")]
		public void SendReport(AbuseReportRequest playerToReport)
		{
		}

		[Token(Token = "0x600042A")]
		[Address(RVA = "0x1055534", Offset = "0x1055534", VA = "0x1055534")]
		public PlayFabReportFacade()
		{
		}
	}
	[Token(Token = "0x200011E")]
	public class AbuseReportingData
	{
		[Token(Token = "0x200011F")]
		public class Match
		{
			[Token(Token = "0x4000466")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public readonly string matchId;

			[Token(Token = "0x4000467")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public readonly string opponentId;

			[Token(Token = "0x4000468")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int myScore;

			[Token(Token = "0x4000469")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int opponentScore;

			[Token(Token = "0x400046A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string opponentName;

			[Token(Token = "0x400046B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public DateTime time;

			[Token(Token = "0x6000432")]
			[Address(RVA = "0x1055808", Offset = "0x1055808", VA = "0x1055808")]
			public Match(string matchId, string opponentId, int myScore, int opponentScore, string opponentName, DateTime time)
			{
			}
		}

		[Token(Token = "0x4000461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Match> matches;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<AbuseReportRequest> playersToReport;

		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string PLAYER_NAME;

		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string GESTURES;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string CHEATING;

		[Token(Token = "0x6000430")]
		[Address(RVA = "0x10556A0", Offset = "0x10556A0", VA = "0x10556A0")]
		public AbuseReportingData()
		{
		}
	}
	[Token(Token = "0x2000120")]
	public class AbuseReportRequest
	{
		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string playerEntityId;

		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string matchId;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<string> reportReasons;

		[Token(Token = "0x400046F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string masterPlayerId;

		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool sent;

		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string logFileName;

		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string reportedDisplayName;

		[Token(Token = "0x4000473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string message;

		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string email;

		[Token(Token = "0x6000433")]
		[Address(RVA = "0x105585C", Offset = "0x105585C", VA = "0x105585C")]
		public AbuseReportRequest(string playerEntityId, string matchId, string logFileName, List<string> reportReasons, string reportedDisplayName, string message, string email)
		{
		}
	}
	[Token(Token = "0x2000121")]
	public class ApiTokenData
	{
		[Token(Token = "0x2000122")]
		public enum State
		{
			[Token(Token = "0x400047B")]
			NotLoggedIn,
			[Token(Token = "0x400047C")]
			Requesting,
			[Token(Token = "0x400047D")]
			Idle,
			[Token(Token = "0x400047E")]
			Error
		}

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float lastUpdateTimestamp;

		[Token(Token = "0x4000476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool requestUpdate;

		[Token(Token = "0x4000477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public State state;

		[Token(Token = "0x4000478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string token;

		[Token(Token = "0x4000479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DateTime validUntil;

		[Token(Token = "0x6000434")]
		[Address(RVA = "0x10558C0", Offset = "0x10558C0", VA = "0x10558C0")]
		public ApiTokenData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000123")]
	public class TokenResponse
	{
		[Token(Token = "0x400047F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string token;

		[Token(Token = "0x4000480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string valid_until;

		[Token(Token = "0x6000435")]
		[Address(RVA = "0x10558C8", Offset = "0x10558C8", VA = "0x10558C8")]
		public TokenResponse()
		{
		}
	}
	[Token(Token = "0x2000124")]
	public class PlayFabApiTokenHandler : ITickable
	{
		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly LoginData loginData;

		[Token(Token = "0x4000482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ApiTokenData apiTokenData;

		[Token(Token = "0x4000483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IPlayFabApiTokenFacade playFabApiTokenFacade;

		[Token(Token = "0x4000484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x4000485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x4000486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float lastRequest;

		[Token(Token = "0x4000487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ProfilerMarker tickProfileMarker;

		[Token(Token = "0x6000436")]
		[Address(RVA = "0x10558D0", Offset = "0x10558D0", VA = "0x10558D0")]
		public PlayFabApiTokenHandler(LoginData loginData, ApiTokenData ApiTokenData, IPlayFabApiTokenFacade playFabApiTokenFacade, ITimeProvider timeProvider, PlayFabConnectionSettings playFabConnectionSettings)
		{
		}

		[Token(Token = "0x6000437")]
		[Address(RVA = "0x1055970", Offset = "0x1055970", VA = "0x1055970", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0x1055B20", Offset = "0x1055B20", VA = "0x1055B20")]
		private void RequestApiToken()
		{
		}

		[Token(Token = "0x6000439")]
		[Address(RVA = "0x1055DAC", Offset = "0x1055DAC", VA = "0x1055DAC")]
		private void OnGotToken(string json)
		{
		}

		[Token(Token = "0x600043A")]
		[Address(RVA = "0x1055EEC", Offset = "0x1055EEC", VA = "0x1055EEC")]
		private void OnError()
		{
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0x1055CE4", Offset = "0x1055CE4", VA = "0x1055CE4")]
		private void ChangeState(ApiTokenData.State newState)
		{
		}
	}
	[Token(Token = "0x2000125")]
	public interface IPlayFabApiTokenFacade
	{
		[Token(Token = "0x600043C")]
		void GetApiToken(Action<string> OnGotToken, Action onError);
	}
	[Token(Token = "0x2000126")]
	public class PlayFabApiTokenFacade : IPlayFabApiTokenFacade
	{
		[Token(Token = "0x600043D")]
		[Address(RVA = "0x1055EF4", Offset = "0x1055EF4", VA = "0x1055EF4", Slot = "4")]
		public void GetApiToken(Action<string> OnGotToken, Action OnError)
		{
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0x105607C", Offset = "0x105607C", VA = "0x105607C")]
		public PlayFabApiTokenFacade()
		{
		}
	}
	[Token(Token = "0x2000128")]
	[CreateAssetMenu(menuName = "Settings/PlayFab/PlayFabConnectionSettings")]
	public class PlayFabConnectionSettings : ScriptableObject
	{
		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float timeBetweenLoginAttempts;

		[Token(Token = "0x400048B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float reportMatchRetryTimeout;

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float timeBetweenExperienceReloads;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float timeBetweenRewardPredicitonsRetries;

		[Token(Token = "0x400048E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float timeBetweenUpdatingNews;

		[Token(Token = "0x400048F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float timeBetweenUpdatingNewsInCaseOfError;

		[Token(Token = "0x4000490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float timeBetweenPlayerStatisticsUpdate;

		[Token(Token = "0x4000491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float timeBetweenTitleDataReload;

		[Token(Token = "0x4000492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float timeBetweenTitleDataReloadDueToError;

		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float timeBetweenLeaderboardChecks;

		[Token(Token = "0x4000494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float timeBetweenInventoryChecks;

		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float timeBetweenCatalogChecks;

		[Token(Token = "0x4000496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float timeBetweenStoreChecks;

		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float timeBetweenMatchmakingSettingsChecks;

		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float matchmakingSettingsChecksTimeout;

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float timeBetweenMatchmakingSettingsChecksInCaseOfError;

		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float timeBetweenUserDataChecks;

		[Token(Token = "0x400049B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float timeBetweenPlayerSettingsUpdate;

		[Token(Token = "0x400049C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float timeBetweenPlayerSettingsUpdateIfError;

		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float getPlayerIdRetryTimeout;

		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int getPlayerIdRetryAttempts;

		[Token(Token = "0x400049F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int timeBetweenSetPlayerMatchmakingSettings;

		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float tournamentEventReloadTime;

		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float tournamentEventReloadTimeWhenTournamentIsActive;

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float tournamentEventRetryTime;

		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float apiTokenRetryTime;

		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float tournamentEventBuyTimeout;

		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float timeBetweenServerTimeChecks;

		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float timeBetweenServerTimeChecksWhenError;

		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public int missionsErrorRetryTimeout;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public int missionsUpdateErrorRetryTimeout;

		[Token(Token = "0x40004A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int missionsUpgradeRewardTimeout;

		[Token(Token = "0x40004AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int missionsUnlockRetryTimeout;

		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int storyEventErrorRetryTimeout;

		[Token(Token = "0x40004AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public int timeBetweenUserMessageChecks;

		[Token(Token = "0x6000442")]
		[Address(RVA = "0x10561AC", Offset = "0x10561AC", VA = "0x10561AC")]
		public PlayFabConnectionSettings()
		{
		}
	}
	[Token(Token = "0x2000129")]
	public class PlayFabDeckHandler : ITickable
	{
		[Token(Token = "0x40004AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData;

		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DeckData deckData;

		[Token(Token = "0x40004AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool initialized;

		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CloudScriptInvocationRequest pendingGetDecksRequest;

		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CloudScriptInvocationRequest pendingStoreDeckRequest;

		[Token(Token = "0x40004B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool useCachedGetValueIfAvailible;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string latestSeenResponseData;

		[Token(Token = "0x6000443")]
		[Address(RVA = "0x1056244", Offset = "0x1056244", VA = "0x1056244")]
		public PlayFabDeckHandler(PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData, DeckData deckData)
		{
		}

		[Token(Token = "0x6000444")]
		[Address(RVA = "0x1056270", Offset = "0x1056270", VA = "0x1056270", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000445")]
		[Address(RVA = "0x10562C8", Offset = "0x10562C8", VA = "0x10562C8")]
		private void InitializeIfNeeded()
		{
		}

		[Token(Token = "0x6000446")]
		[Address(RVA = "0x10562F0", Offset = "0x10562F0", VA = "0x10562F0")]
		private void CheckCacheForPendingGetRequests()
		{
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0x1056318", Offset = "0x1056318", VA = "0x1056318")]
		private void CheckPendingGetRequest()
		{
		}

		[Token(Token = "0x6000448")]
		[Address(RVA = "0x1056344", Offset = "0x1056344", VA = "0x1056344")]
		private void IssueStoreRequestIfThereAreLocalModifications()
		{
		}

		[Token(Token = "0x6000449")]
		[Address(RVA = "0x1056694", Offset = "0x1056694", VA = "0x1056694")]
		private void CheckStoreReponse()
		{
		}

		[Token(Token = "0x600044A")]
		[Address(RVA = "0x10566DC", Offset = "0x10566DC", VA = "0x10566DC")]
		private void IssueGetRequestToGetDecks()
		{
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0x1056C2C", Offset = "0x1056C2C", VA = "0x1056C2C")]
		private void IssueGetRequestToStoreDecksInCache()
		{
		}

		[Token(Token = "0x600044C")]
		[Address(RVA = "0x10566BC", Offset = "0x10566BC", VA = "0x10566BC")]
		private bool NoPendingRequests()
		{
			return default(bool);
		}

		[Token(Token = "0x600044D")]
		[Address(RVA = "0x1056C38", Offset = "0x1056C38", VA = "0x1056C38")]
		private void IssueGetRequest(bool cachedGetValueIfAvailible, bool shouldParseAndNotifyDeckHandlerOfGetResponse)
		{
		}

		[Token(Token = "0x600044E")]
		[Address(RVA = "0x10566E8", Offset = "0x10566E8", VA = "0x10566E8")]
		private void ParseDeckFromPlayFab(string responseData)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200012A")]
	public class GetDecksResponse
	{
		[Serializable]
		[Token(Token = "0x200012B")]
		public class Deck
		{
			[Token(Token = "0x40004B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string deckName;

			[Token(Token = "0x40004B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<Tool> tools;

			[Token(Token = "0x6000450")]
			[Address(RVA = "0x1056D18", Offset = "0x1056D18", VA = "0x1056D18")]
			public Deck()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200012C")]
		public class Tool
		{
			[Token(Token = "0x40004B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string toolName;

			[Token(Token = "0x40004B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string toolAttachment;

			[Token(Token = "0x6000451")]
			[Address(RVA = "0x1056D20", Offset = "0x1056D20", VA = "0x1056D20")]
			public Tool()
			{
			}
		}

		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Deck> decks;

		[Token(Token = "0x600044F")]
		[Address(RVA = "0x1056D10", Offset = "0x1056D10", VA = "0x1056D10")]
		public GetDecksResponse()
		{
		}
	}
	[Token(Token = "0x200012D")]
	public class ExperimentalFeaturesData
	{
		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ExperimentalUiSettings experimentalUiSettings;

		[Token(Token = "0x6000452")]
		[Address(RVA = "0x1056D28", Offset = "0x1056D28", VA = "0x1056D28")]
		public ExperimentalFeaturesData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200012E")]
	public class ExperimentalUiSettings
	{
		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool spectatorView;

		[Token(Token = "0x6000453")]
		[Address(RVA = "0x1056D90", Offset = "0x1056D90", VA = "0x1056D90")]
		public ExperimentalUiSettings()
		{
		}
	}
	[Token(Token = "0x200012F")]
	public class PlayFabExperimentalFeaturesHandler : ITickable
	{
		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ExperimentalFeaturesData experimentalFeaturesData;

		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabUserData playFabUserData;

		[Token(Token = "0x40004BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastUpdate;

		[Token(Token = "0x6000454")]
		[Address(RVA = "0x1056D98", Offset = "0x1056D98", VA = "0x1056D98")]
		public PlayFabExperimentalFeaturesHandler(ExperimentalFeaturesData experimentalFeaturesData, PlayFabUserData playFabUserData, ITimeProvider timeProvider)
		{
		}

		[Token(Token = "0x6000455")]
		[Address(RVA = "0x1056DD4", Offset = "0x1056DD4", VA = "0x1056DD4", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x2000130")]
	public class PlayFabLeaguePointsSeasonHandler : ITickable
	{
		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayFabLeaguePointsSeasonData playFabLeaguePointsSeasonData;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CloudScriptInvocationRequest pendingCloudScriptInvocationRequest;

		[Token(Token = "0x6000456")]
		[Address(RVA = "0x1056F6C", Offset = "0x1056F6C", VA = "0x1056F6C")]
		public PlayFabLeaguePointsSeasonHandler(PlayFabLeaguePointsSeasonData playFabLeaguePointsSeasonData, PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData, ITimeProvider timeProvider, PlayFabConnectionSettings playFabConnectionSettings)
		{
		}

		[Token(Token = "0x6000457")]
		[Address(RVA = "0x1056FAC", Offset = "0x1056FAC", VA = "0x1056FAC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000458")]
		[Address(RVA = "0x1056FC4", Offset = "0x1056FC4", VA = "0x1056FC4")]
		private void CheckIfTimeToSendNewRequest()
		{
		}

		[Token(Token = "0x6000459")]
		[Address(RVA = "0x1057174", Offset = "0x1057174", VA = "0x1057174")]
		private void CheckPendingRequest()
		{
		}
	}
	[Token(Token = "0x2000131")]
	public class PlayFabLeaguePointsSeasonData
	{
		[Token(Token = "0x40004C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LeaguePointsSeasonResponse dataFromPlayFab;

		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float lastTimeDataWasUpdated;

		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool forceUpdate;

		[Token(Token = "0x600045A")]
		[Address(RVA = "0x10572B4", Offset = "0x10572B4", VA = "0x10572B4")]
		public PlayFabLeaguePointsSeasonData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000132")]
	public class LeaguePointsSeasonResponse
	{
		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LeaguePointsSeason currentSeason;

		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LeaguePointsSeason previousSeason;

		[Token(Token = "0x600045B")]
		[Address(RVA = "0x1057318", Offset = "0x1057318", VA = "0x1057318")]
		public LeaguePointsSeasonResponse()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000133")]
	public class LeaguePointsSeason
	{
		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string seasonName;

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int version;

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<LeaguePointsSeasonItem> leaderboard;

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string nextReset;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string lastMatchStartTimestamp;

		[Token(Token = "0x40004CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string firstMatchStartTimestamp;

		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<LeaguePointsSeasonItem> myPosition;

		[Token(Token = "0x600045C")]
		[Address(RVA = "0x1057394", Offset = "0x1057394", VA = "0x1057394")]
		public LeaguePointsSeason()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000134")]
	public class LeaguePointsSeasonItem
	{
		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string displayName;

		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string playFabMasterPlayerId;

		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int position;

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int value;

		[Token(Token = "0x600045D")]
		[Address(RVA = "0x1057434", Offset = "0x1057434", VA = "0x1057434")]
		public LeaguePointsSeasonItem()
		{
		}
	}
	[Token(Token = "0x2000135")]
	public class PlayFabLoginResponseHandler : ITickable
	{
		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayFabLoginData loginData;

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ShopData shopData;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly OwnershipData ownershipData;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayFabTitleData playFabTitleData;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PlayerStatisticsData playerStatisticsData;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PlayFabUserData playFabUserData;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ITimeSinceStartupTracking timeSinceStartupTracking;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool expectingNewData;

		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool firstLoginAfterAppStartup;

		[Token(Token = "0x600045E")]
		[Address(RVA = "0x105743C", Offset = "0x105743C", VA = "0x105743C")]
		public PlayFabLoginResponseHandler(PlayFabLoginData loginData, ShopData shopData, OwnershipData ownershipData, PlayFabTitleData playFabTitleData, PlayerStatisticsData playerStatisticsData, PlayFabUserData playFabUserData, ITimeSinceStartupTracking timeSinceStartupTracking)
		{
		}

		[Token(Token = "0x600045F")]
		[Address(RVA = "0x10574A8", Offset = "0x10574A8", VA = "0x10574A8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000460")]
		[Address(RVA = "0x10575F8", Offset = "0x10575F8", VA = "0x10575F8")]
		private void GetUserDataFromLoginData()
		{
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0x10577F8", Offset = "0x10577F8", VA = "0x10577F8")]
		private void GetTitleDataFromLoginData()
		{
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0x1057B78", Offset = "0x1057B78", VA = "0x1057B78")]
		private void GetPlayerStatisticsFromLoginData()
		{
		}

		[Token(Token = "0x6000463")]
		[Address(RVA = "0x1057A00", Offset = "0x1057A00", VA = "0x1057A00")]
		private void GetPurchasedItemsFromLoginData()
		{
		}

		[Token(Token = "0x6000464")]
		[Address(RVA = "0x10579C8", Offset = "0x10579C8", VA = "0x10579C8")]
		private void GetCurrenciesFromLoginData()
		{
		}

		[Token(Token = "0x6000465")]
		[Address(RVA = "0x1057AE0", Offset = "0x1057AE0", VA = "0x1057AE0")]
		private void GetDisplayNameFromLoginData()
		{
		}

		[Token(Token = "0x6000466")]
		[Address(RVA = "0x1057DB8", Offset = "0x1057DB8", VA = "0x1057DB8")]
		private void GetUserIdFromLoginData()
		{
		}
	}
	[Token(Token = "0x2000136")]
	public class PlayFabMatchRewardPredictionHandler : ITickable
	{
		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MatchRewardPredictionData matchRewardPredictionData;

		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IPlayFabMatchRewardPredictionFacade playFabMatchRewardPredictionFacade;

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x6000467")]
		[Address(RVA = "0x1057E14", Offset = "0x1057E14", VA = "0x1057E14")]
		public PlayFabMatchRewardPredictionHandler(MatchRewardPredictionData matchRewardPredictionData, IPlayFabMatchRewardPredictionFacade playFabMatchRewardPredictionFacade, ITimeProvider timeProvider, PlayFabConnectionSettings playFabConnectionSettings)
		{
		}

		[Token(Token = "0x6000468")]
		[Address(RVA = "0x1057E54", Offset = "0x1057E54", VA = "0x1057E54", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000469")]
		[Address(RVA = "0x10581B4", Offset = "0x10581B4", VA = "0x10581B4")]
		private void CheckIfShouldResend(MatchRewardPredicitonRequest request)
		{
		}
	}
	[Token(Token = "0x2000138")]
	public class MatchRewardPredictionData
	{
		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<string, MatchRewardPrediction> predicions;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<MatchRewardPredicitonRequest> requests;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string currentlyPlayingId;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string currentRandomSeed;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MatchRewardResult localPredictionResult;

		[Token(Token = "0x600046D")]
		[Address(RVA = "0x1058314", Offset = "0x1058314", VA = "0x1058314")]
		public MatchRewardPredictionData()
		{
		}
	}
	[Token(Token = "0x2000139")]
	public class MatchRewardPredicitonRequest
	{
		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string opponentId;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isBot;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string randomSeed;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string matchmakingQueue;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MatchRewardPredictionRequestState state;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public MatchRewardPrediction prediction;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float lastSentTimestamp;

		[Token(Token = "0x600046E")]
		[Address(RVA = "0x10583F0", Offset = "0x10583F0", VA = "0x10583F0")]
		private MatchRewardPredicitonRequest(string opponentId, bool isBot, string randomSeed, string matchmakingQueue)
		{
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0x1058434", Offset = "0x1058434", VA = "0x1058434")]
		public static MatchRewardPredicitonRequest CreateBotMatchReques(string botId, string randomSeed)
		{
			return null;
		}

		[Token(Token = "0x6000470")]
		[Address(RVA = "0x10584B0", Offset = "0x10584B0", VA = "0x10584B0")]
		public static MatchRewardPredicitonRequest CreateHumanMatchReques(string opponentId, string randomSeed, string matchmakingQueue)
		{
			return null;
		}
	}
	[Token(Token = "0x200013A")]
	public struct MatchRewardResult
	{
		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int leaguePoints;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int exp;

		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int freemium;

		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly int premium;

		[Token(Token = "0x6000471")]
		[Address(RVA = "0x105852C", Offset = "0x105852C", VA = "0x105852C")]
		public MatchRewardResult(int leaguePoints, int exp, int freemium, int premium)
		{
		}
	}
	[Token(Token = "0x200013B")]
	public struct MatchRewardResultPrediction
	{
		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int winnerLeaguePoints;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int loserLeaguePoints;

		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int winnerExp;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly int loserExp;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int winnerFreemium;

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly int loserFreemium;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly int winnerPremium;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly int loserPremium;

		[Token(Token = "0x6000472")]
		[Address(RVA = "0x1058538", Offset = "0x1058538", VA = "0x1058538")]
		public MatchRewardResultPrediction(int winnerLeaguePoints, int loserLeaguePoints, int winnerExp, int loserExp, int winnerFreemium, int loserFreemium, int winnerPremium, int loserPremium)
		{
		}
	}
	[Token(Token = "0x200013C")]
	public struct MatchRewardPrediction
	{
		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly MatchRewardResultPrediction ifIWinPrediction;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly MatchRewardResultPrediction IfILosePredicion;

		[Token(Token = "0x6000473")]
		[Address(RVA = "0x1058550", Offset = "0x1058550", VA = "0x1058550")]
		public MatchRewardPrediction(MatchRewardResultPrediction ifIWinPrediction, MatchRewardResultPrediction ifILosePredicion)
		{
		}
	}
	[Token(Token = "0x200013D")]
	public enum MatchRewardPredictionRequestState
	{
		[Token(Token = "0x40004FE")]
		NotSent,
		[Token(Token = "0x40004FF")]
		Sent,
		[Token(Token = "0x4000500")]
		Done,
		[Token(Token = "0x4000501")]
		Error,
		[Token(Token = "0x4000502")]
		Delete
	}
	[Token(Token = "0x200013E")]
	public interface IPlayFabMatchRewardPredictionFacade
	{
		[Token(Token = "0x6000474")]
		void GetLeaguePointsPredictions(MatchRewardPredicitonRequest request);
	}
	[Token(Token = "0x200013F")]
	public class PlayFabMatchRewardPredictionFacade : IPlayFabMatchRewardPredictionFacade
	{
		[Token(Token = "0x6000475")]
		[Address(RVA = "0x1058564", Offset = "0x1058564", VA = "0x1058564", Slot = "4")]
		public void GetLeaguePointsPredictions(MatchRewardPredicitonRequest request)
		{
		}

		[Token(Token = "0x6000476")]
		[Address(RVA = "0x10586B0", Offset = "0x10586B0", VA = "0x10586B0")]
		private static ExecuteCloudScriptRequest CreateRequest(MatchRewardPredicitonRequest request)
		{
			return null;
		}

		[Token(Token = "0x6000477")]
		[Address(RVA = "0x1058868", Offset = "0x1058868", VA = "0x1058868")]
		public PlayFabMatchRewardPredictionFacade()
		{
		}
	}
	[Token(Token = "0x2000141")]
	public class PlayFabNewsHandler : ITickable
	{
		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private LoginData loginData;

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private NewsData newsData;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IPlayFabNewsFacade playFabNewsFacade;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ITimeProvider timeProvider;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x600047B")]
		[Address(RVA = "0x1058CEC", Offset = "0x1058CEC", VA = "0x1058CEC")]
		public PlayFabNewsHandler(LoginData loginData, NewsData newsData, IPlayFabNewsFacade playFabNewsFacade, ITimeProvider timeProvider, PlayFabConnectionSettings playFabConnectionSettings)
		{
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0x1058D3C", Offset = "0x1058D3C", VA = "0x1058D3C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0x1058F1C", Offset = "0x1058F1C", VA = "0x1058F1C")]
		private void CheckReRequestNews(double timeBetweenUpdate)
		{
		}
	}
	[Token(Token = "0x2000142")]
	public class NewsData
	{
		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public NewsDataState state;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<NewsDataItem> news;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float lastLoadedTimestamp;

		[Token(Token = "0x600047E")]
		[Address(RVA = "0x1058FF8", Offset = "0x1058FF8", VA = "0x1058FF8")]
		public NewsData()
		{
		}
	}
	[Token(Token = "0x2000143")]
	public enum NewsDataState
	{
		[Token(Token = "0x400050D")]
		NotLoaded,
		[Token(Token = "0x400050E")]
		Requesting,
		[Token(Token = "0x400050F")]
		Loaded,
		[Token(Token = "0x4000510")]
		Error
	}
	[Token(Token = "0x2000144")]
	public class NewsDataItem
	{
		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string NewsId;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DateTime Timestamp;

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Title;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Body;

		[Token(Token = "0x600047F")]
		[Address(RVA = "0x1059074", Offset = "0x1059074", VA = "0x1059074")]
		public NewsDataItem(string newsId, DateTime timestamp, string title, string body)
		{
		}
	}
	[Token(Token = "0x2000145")]
	public interface IPlayFabNewsFacade
	{
		[Token(Token = "0x6000480")]
		void UpdateNews(NewsData newsData);
	}
	[Token(Token = "0x2000146")]
	public class PlayFabNewsFacade : IPlayFabNewsFacade
	{
		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private LoginData loginData;

		[Token(Token = "0x4000516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x6000481")]
		[Address(RVA = "0x10590B4", Offset = "0x10590B4", VA = "0x10590B4")]
		public PlayFabNewsFacade(LoginData loginData, PlayFabConnectionSettings playFabConnectionSettings)
		{
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0x10590E0", Offset = "0x10590E0", VA = "0x10590E0", Slot = "4")]
		public void UpdateNews(NewsData newsData)
		{
		}
	}
	[Token(Token = "0x2000149")]
	public class PlayFabPlayerIdentitiesData
	{
		[Token(Token = "0x400051B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Dictionary<string, PlayFabPlayerIdentity> playersFromEntityId;

		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Queue<PlayFabPlayerIdentityRequest> entityIdsToGet;

		[Token(Token = "0x6000489")]
		[Address(RVA = "0x10597A4", Offset = "0x10597A4", VA = "0x10597A4")]
		public PlayFabPlayerIdentitiesData()
		{
		}
	}
	[Token(Token = "0x200014A")]
	public class PlayFabPlayerIdentity
	{
		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string entityId;

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string masterPlayerId;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string displayName;

		[Token(Token = "0x600048A")]
		[Address(RVA = "0x1059864", Offset = "0x1059864", VA = "0x1059864")]
		public PlayFabPlayerIdentity(string entityId, string masterPlayerId, string displayName)
		{
		}
	}
	[Token(Token = "0x200014B")]
	public class PlayFabPlayerIdentitiesHandler : ITickable
	{
		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData;

		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabPlayerIdentitiesData playFabPlayerIdentitiesData;

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CloudScriptInvocationRequest pendingCloudScriptRequest;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PlayFabPlayerIdentityRequest pendingRequest;

		[Token(Token = "0x600048B")]
		[Address(RVA = "0x10598A0", Offset = "0x10598A0", VA = "0x10598A0")]
		public PlayFabPlayerIdentitiesHandler(PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData, PlayFabPlayerIdentitiesData playFabPlayerIdentitiesData)
		{
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0x10598CC", Offset = "0x10598CC", VA = "0x10598CC", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x200014C")]
	public class PlayFabPlayerIdentityRequest
	{
		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string entityId;

		[Token(Token = "0x600048D")]
		[Address(RVA = "0x10552AC", Offset = "0x10552AC", VA = "0x10552AC")]
		public PlayFabPlayerIdentityRequest(string entityId)
		{
		}
	}
	[Token(Token = "0x200014D")]
	public class PlayFabPlayerStatisticsHandler : ITickable
	{
		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayerStatisticsData playerStatisticsData;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IPlayFabPlayerStatisticsFacade playFabPlayerStatisticsFacade;

		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly LoginData loginData;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x600048E")]
		[Address(RVA = "0x1059B0C", Offset = "0x1059B0C", VA = "0x1059B0C")]
		public PlayFabPlayerStatisticsHandler(PlayerStatisticsData playerStatisticsData, IPlayFabPlayerStatisticsFacade playFabPlayerStatisticsFacade, ITimeProvider timeProvider, LoginData loginData, PlayFabConnectionSettings playFabConnectionSettings)
		{
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0x1059B5C", Offset = "0x1059B5C", VA = "0x1059B5C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0x1059F70", Offset = "0x1059F70", VA = "0x1059F70")]
		private void PlayFabError(PlayFabError obj)
		{
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0x105A018", Offset = "0x105A018", VA = "0x105A018")]
		private void GotStatistics(List<PlayerStatisticsDataItem> listOfStatitics)
		{
		}

		[Token(Token = "0x6000492")]
		[Address(RVA = "0x1059D9C", Offset = "0x1059D9C", VA = "0x1059D9C")]
		private bool TimeToUpdate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0x1059E88", Offset = "0x1059E88", VA = "0x1059E88")]
		private void ReadUpdatedStatisticsData()
		{
		}

		[Token(Token = "0x6000494")]
		[Address(RVA = "0x105A158", Offset = "0x105A158", VA = "0x105A158")]
		private int GetCurrentLosingStreak()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200014E")]
	public class PlayerStatisticsData
	{
		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string ELO_RATING;

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string LOSING_STREAK;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static int START_RATING;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<string, PlayerStatisticsDataItem> stats;

		[Token(Token = "0x400052E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float lastUpdateTime;

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool isUpdating;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool forceUpdate;

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool hasNewData;

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int eloRating;

		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int losingStreak;

		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isDataValid;

		[Token(Token = "0x6000495")]
		[Address(RVA = "0x105A208", Offset = "0x105A208", VA = "0x105A208")]
		public PlayerStatisticsData()
		{
		}
	}
	[Token(Token = "0x200014F")]
	public class PlayerStatisticsDataItem
	{
		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string key;

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly int value;

		[Token(Token = "0x6000497")]
		[Address(RVA = "0x1057DE4", Offset = "0x1057DE4", VA = "0x1057DE4")]
		public PlayerStatisticsDataItem(string key, int value)
		{
		}
	}
	[Token(Token = "0x2000150")]
	public interface IPlayFabPlayerStatisticsFacade
	{
		[Token(Token = "0x6000498")]
		void GetPlayerStatistics(Action<List<PlayerStatisticsDataItem>> successCallback, Action<PlayFabError> errorCallback);
	}
	[Token(Token = "0x2000151")]
	public class PlayFabPlayerStatisticsFacade : IPlayFabPlayerStatisticsFacade
	{
		[Token(Token = "0x6000499")]
		[Address(RVA = "0x105A34C", Offset = "0x105A34C", VA = "0x105A34C", Slot = "4")]
		public void GetPlayerStatistics(Action<List<PlayerStatisticsDataItem>> successCallback, Action<PlayFabError> errorCallback)
		{
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0x105A470", Offset = "0x105A470", VA = "0x105A470")]
		public PlayFabPlayerStatisticsFacade()
		{
		}
	}
	[Token(Token = "0x2000153")]
	public class PlayFabProgressionHandler : ITickable
	{
		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly LoginData loginData;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IPlayFabExperienceFacade playFabExperienceFacade;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PlayerInfoPanelData playerInfoPanelData;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly OwnershipData ownershipData;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ProfilerMarker tickMarker;

		[Token(Token = "0x600049D")]
		[Address(RVA = "0x105A654", Offset = "0x105A654", VA = "0x105A654")]
		public PlayFabProgressionHandler(LoginData loginData, PlayFabProgressionData playFabProgressionData, IPlayFabExperienceFacade playFabExperienceFacade, ITimeProvider timeProvider, PlayFabConnectionSettings playFabConnectionSettings, PlayerInfoPanelData playerInfoPanelData, OwnershipData ownershipData, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0x105A70C", Offset = "0x105A70C", VA = "0x105A70C")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0x105A710", Offset = "0x105A710", VA = "0x105A710")]
		private void CreateReward()
		{
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0x105A714", Offset = "0x105A714", VA = "0x105A714", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x105AF40", Offset = "0x105AF40", VA = "0x105AF40")]
		private bool HasPendingClaimRewardRequest()
		{
			return default(bool);
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x105AE64", Offset = "0x105AE64", VA = "0x105AE64")]
		private void CheckRetryAwardReqeust(AwardExperienceRequest request)
		{
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x105AFFC", Offset = "0x105AFFC", VA = "0x105AFFC")]
		private void CheckRetryClaimReqeust(ClaimRewardRequest request)
		{
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x105B0D0", Offset = "0x105B0D0", VA = "0x105B0D0")]
		private void GotExperienceInfo(ExecuteCloudScriptResult obj)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000156")]
	public class PlayerInfoFromPlayFab
	{
		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int level;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int maxLevel;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int totalExp;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int currentLevelExp;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int currentLevelSpan;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int leaguePoints;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int leagueTier;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<RewardFromPlayFab> rewards;

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string displayName;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string masterPlayerAccountId;

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x105B88C", Offset = "0x105B88C", VA = "0x105B88C")]
		public bool RewardExist(string rewardType)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0x105B94C", Offset = "0x105B94C", VA = "0x105B94C")]
		public RewardFromPlayFab GetRewardExist(string rewardType)
		{
			return null;
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x105BA14", Offset = "0x105BA14", VA = "0x105BA14")]
		public PlayerInfoFromPlayFab()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000157")]
	public class RewardFromPlayFab
	{
		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool claimed;

		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RewardDataFromPlayFab data;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string rewardId;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string rewardType;

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string time;

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x105BA98", Offset = "0x105BA98", VA = "0x105BA98")]
		public RewardFromPlayFab()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000158")]
	public class RewardDataFromPlayFab
	{
		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string newLevel;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string freemium;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string premium;

		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string exp;

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string position;

		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string season;

		[Token(Token = "0x400055A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string points;

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x105BAA0", Offset = "0x105BAA0", VA = "0x105BAA0")]
		public RewardDataFromPlayFab()
		{
		}
	}
	[Token(Token = "0x2000159")]
	public interface IPlayFabExperienceFacade
	{
		[Token(Token = "0x60004B0")]
		void ReqeustExperience(Action<ExecuteCloudScriptResult> GotExperienceInfo);

		[Token(Token = "0x60004B1")]
		void AwardExperience(AwardExperienceRequest request);

		[Token(Token = "0x60004B2")]
		void ClaimReward(ClaimRewardRequest request);
	}
	[Token(Token = "0x200015A")]
	public class PlayFabExperienceFacade : IPlayFabExperienceFacade
	{
		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly LoginData loginData;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x105BAA8", Offset = "0x105BAA8", VA = "0x105BAA8")]
		public PlayFabExperienceFacade(LoginData loginData, PlayFabConnectionSettings playFabConnectionSettings)
		{
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x105BAD4", Offset = "0x105BAD4", VA = "0x105BAD4", Slot = "4")]
		public void ReqeustExperience(Action<ExecuteCloudScriptResult> GotExperienceInfo)
		{
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x105BC48", Offset = "0x105BC48", VA = "0x105BC48", Slot = "5")]
		public void AwardExperience(AwardExperienceRequest request)
		{
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x105BE70", Offset = "0x105BE70", VA = "0x105BE70", Slot = "6")]
		public void ClaimReward(ClaimRewardRequest request)
		{
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x105C084", Offset = "0x105C084", VA = "0x105C084")]
		private void PlayFabError(PlayFabError obj)
		{
		}
	}
	[Token(Token = "0x200015D")]
	public class PlayFabProgressionData
	{
		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string LevelUpRewardType;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string LeagueUpRewardType;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string ExperienceRewardType;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string SeasonEndRewardType;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string ToolPurchaseRewardsType;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayerInfoFromPlayFab dataFromPlayFab;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float latestUpdateRequestTimestamp;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float UPDATE_PERIOD;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool forceUpdate;

		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<AwardExperienceRequest> awardExperienceRequests;

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool isValid;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<ClaimRewardRequest> claimRewardRequests;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Queue<CreateRewardRequest> createRewardRequests;

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float latestValidResponseTime;

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x105C4BC", Offset = "0x105C4BC", VA = "0x105C4BC")]
		public string GetLeagueTierName(int tier)
		{
			return null;
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x105C598", Offset = "0x105C598", VA = "0x105C598")]
		public string GetLeagueTierName()
		{
			return null;
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x105C680", Offset = "0x105C680", VA = "0x105C680")]
		public PlayFabProgressionData()
		{
		}
	}
	[Token(Token = "0x200015E")]
	public class AwardExperienceRequest
	{
		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RequestState state;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string amountKey;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string reason;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string rewardType;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float lastSentTimestamp;

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x105C8A8", Offset = "0x105C8A8", VA = "0x105C8A8")]
		public AwardExperienceRequest(string amountKey, string reason, string rewardType)
		{
		}
	}
	[Token(Token = "0x200015F")]
	public class CreateRewardRequest
	{
		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string rewardId;

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly RewardDataFromPlayFab data;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string rewardType;

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x105C8E4", Offset = "0x105C8E4", VA = "0x105C8E4")]
		public CreateRewardRequest(string rewardId, RewardDataFromPlayFab data, string rewardType)
		{
		}
	}
	[Token(Token = "0x2000160")]
	public class ClaimRewardRequest
	{
		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RequestState state;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string rewardId;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float lastSentTimestamp;

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x105C920", Offset = "0x105C920", VA = "0x105C920")]
		public ClaimRewardRequest(string rewardId)
		{
		}
	}
	[Token(Token = "0x2000161")]
	public enum RequestState
	{
		[Token(Token = "0x400057B")]
		Created,
		[Token(Token = "0x400057C")]
		Sending,
		[Token(Token = "0x400057D")]
		Sent,
		[Token(Token = "0x400057E")]
		Error
	}
	[Token(Token = "0x2000162")]
	public class SeasonMissionsData
	{
		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayerMissionsProgress currentSeasonProgress;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<CompletedSeason> completedSeasons;

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Queue<MissionProgressUpdateRequest> updateProgressRequests;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Queue<UpgradeRewardRequest> upgradeRewardRequests;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Queue<ClaimMissionRewardRequest> claimRewardRequests;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MissionHandlerState state;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MissionLockInfo missionLockInfo;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool hasDownloadedData;

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x105C948", Offset = "0x105C948", VA = "0x105C948")]
		public SeasonMissionsData()
		{
		}
	}
	[Token(Token = "0x2000163")]
	public class MissionLockInfo
	{
		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int unlocksAtLevel;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool locked;

		[Token(Token = "0x60004C6")]
		[Address(RVA = "0x105CA4C", Offset = "0x105CA4C", VA = "0x105CA4C")]
		public MissionLockInfo()
		{
		}
	}
	[Token(Token = "0x2000164")]
	public class ClaimMissionRewardRequest
	{
		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string seasonId;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MissionRequestState state;

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0x105CA54", Offset = "0x105CA54", VA = "0x105CA54")]
		public ClaimMissionRewardRequest(string seasonId)
		{
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0x105CA7C", Offset = "0x105CA7C", VA = "0x105CA7C")]
		public bool Finished()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000165")]
	public class UpgradeRewardRequest
	{
		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string seasonId;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string rewardId;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float latestSendAttempt;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public MissionRequestState state;

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0x105CA98", Offset = "0x105CA98", VA = "0x105CA98")]
		public UpgradeRewardRequest(string seasonId, string rewardId)
		{
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0x105CAC4", Offset = "0x105CAC4", VA = "0x105CAC4")]
		public bool Finished()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000166")]
	public enum MissionHandlerState
	{
		[Token(Token = "0x4000590")]
		NotInitialized,
		[Token(Token = "0x4000591")]
		Loading,
		[Token(Token = "0x4000592")]
		Ready,
		[Token(Token = "0x4000593")]
		ErrorLoading,
		[Token(Token = "0x4000594")]
		NoSeasonAvailible
	}
	[Token(Token = "0x2000167")]
	public enum MissionRequestState
	{
		[Token(Token = "0x4000596")]
		NotSent,
		[Token(Token = "0x4000597")]
		Sending,
		[Token(Token = "0x4000598")]
		Sent,
		[Token(Token = "0x4000599")]
		Error,
		[Token(Token = "0x400059A")]
		Failed
	}
	[Token(Token = "0x2000168")]
	public class MissionProgressUpdateRequest
	{
		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string seasonId;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string missionId;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string qualifier;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isDeltaChange;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int value;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool forceSend;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public MissionRequestState state;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int numberOfAttempts;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float latestSendAttempt;

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x105CAE0", Offset = "0x105CAE0", VA = "0x105CAE0")]
		public MissionProgressUpdateRequest(string missionId, bool isDeltaChange, int value, string qualifier, bool forceSend)
		{
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0x105CB34", Offset = "0x105CB34", VA = "0x105CB34")]
		public static MissionProgressUpdateRequest CreateDeltaRequest(string missionId, int delta, [Optional] string qualifier, bool forceSend = false)
		{
			return null;
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0x105CBC8", Offset = "0x105CBC8", VA = "0x105CBC8")]
		public static MissionProgressUpdateRequest CreateSetRequest(string missionId, int newValue, [Optional] string qualifier, bool forceSend = false)
		{
			return null;
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0x105CC58", Offset = "0x105CC58", VA = "0x105CC58")]
		public bool Finished()
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x2000169")]
	public class PlayerMissionsProgress
	{
		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string seasonId;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string startTime;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string endTime;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<PlayerMissionProgress> missions;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<PlayerMissionReward> missionRewards;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float latestUpdatedTimestamp;

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0x105CC74", Offset = "0x105CC74", VA = "0x105CC74")]
		public PlayerMissionsProgress()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200016A")]
	public class MissionProgressBase
	{
		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string missionId;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int progress;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int amountToComplete;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool active;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool complete;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string qualifier;

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0x105CD34", Offset = "0x105CD34", VA = "0x105CD34")]
		public MissionProgressBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200016B")]
	public class PlayerMissionProgress : MissionProgressBase
	{
		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[CanBeNull]
		public string unlockTime;

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x105CD3C", Offset = "0x105CD3C", VA = "0x105CD3C")]
		public PlayerMissionProgress(string missionId, int progress, int amountToComplete, bool active, [CanBeNull] string unlockTime, [CanBeNull] string qualifier)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200016C")]
	public class PlayerMissionReward
	{
		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string rewardId;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string itemId;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int premiumReward;

		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int freemiumReward;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int premiumPrice;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int freemiumPrice;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool unlocked;

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x105CD94", Offset = "0x105CD94", VA = "0x105CD94")]
		public PlayerMissionReward(string rewardId, string itemId, int premiumReward, int freemiumReward, int premiumPrice, int freemiumPrice, bool unlocked)
		{
		}
	}
	[Token(Token = "0x200016D")]
	public class PlayFabSeasonMissionHandler : ITickable
	{
		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly LoginData loginData;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly SeasonMissionsData seasonMissionsData;

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly OwnershipData ownershipData;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ServerTimeSyncData serverTimeSyncData;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly GameDesignTrackingData gameDesignTrackingData;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float latestLoadAttemptTimestamp;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MissionProgressUpdateRequest currentMissionProgressUpdateRequest;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UpgradeRewardRequest currentRewardUpgradeRequest;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ClaimMissionRewardRequest currentClaimRewardRequest;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool debugMenuInitialized;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<string> zeroProgressionTrackedForActiveMission;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private CloudScriptInvocationRequest pendingGetCurrentSeasonRequest;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private CloudScriptInvocationRequest pendingUpdateMissionProgressRequest;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private CloudScriptInvocationRequest pendingUpgradeRewardRequest;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private CloudScriptInvocationRequest pendingClaimRewardRequest;

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x105CDF8", Offset = "0x105CDF8", VA = "0x105CDF8")]
		public PlayFabSeasonMissionHandler(LoginData loginData, SeasonMissionsData seasonMissionsData, ITimeProvider timeProvider, PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData, PlayFabConnectionSettings playFabConnectionSettings, OwnershipData ownershipData, PlayFabProgressionData playFabProgressionData, ServerTimeSyncData serverTimeSyncData, GameDesignTrackingData gameDesignTrackingData, CustomizationData customizationData, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x105CEE0", Offset = "0x105CEE0", VA = "0x105CEE0", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x105D21C", Offset = "0x105D21C", VA = "0x105D21C")]
		private void CheckPendingRequests()
		{
		}

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x105D864", Offset = "0x105D864", VA = "0x105D864")]
		private void CheckForReloadIfLevelUnlockIsReached()
		{
		}

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0x105D974", Offset = "0x105D974", VA = "0x105D974")]
		private void CheckForReloadIfNextMissionCountdownReached()
		{
		}

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0x105D140", Offset = "0x105D140", VA = "0x105D140")]
		private void CheckForRequestResetTimeout(int timeout)
		{
		}

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0x105CFDC", Offset = "0x105CFDC", VA = "0x105CFDC")]
		private void LoadCurrentMissionsSeason()
		{
		}

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0x105DB6C", Offset = "0x105DB6C", VA = "0x105DB6C")]
		private void OnGotCurrentMissionSeason(string json)
		{
		}

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0x105ECB0", Offset = "0x105ECB0", VA = "0x105ECB0")]
		private void CheckNewlyActivatedMissionsForTracking()
		{
		}

		[Token(Token = "0x60004DC")]
		[Address(RVA = "0x105EA38", Offset = "0x105EA38", VA = "0x105EA38")]
		private void UpdateDebugMenuIfFirstLoad()
		{
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0x105F300", Offset = "0x105F300", VA = "0x105F300")]
		private void DebugClaimRewards()
		{
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0x105F39C", Offset = "0x105F39C", VA = "0x105F39C")]
		private void DebugUpgradeReward(PlayerMissionReward reward)
		{
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0x105F44C", Offset = "0x105F44C", VA = "0x105F44C")]
		private void DebugUpdateMission(PlayerMissionProgress playerMissionProgress, int value)
		{
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0x105DD34", Offset = "0x105DD34", VA = "0x105DD34")]
		private void OnGetCurrentSeasonError()
		{
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x105E74C", Offset = "0x105E74C", VA = "0x105E74C")]
		private void OnMissionProgressUpdateSuccess(MissionProgressUpdateRequest request, string json)
		{
		}

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x105EE18", Offset = "0x105EE18", VA = "0x105EE18")]
		private void SendTelemetryForMissionProgress(string missionId)
		{
		}

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0x105E8A8", Offset = "0x105E8A8", VA = "0x105E8A8")]
		private void OnMissionProgressUpdateError(MissionProgressUpdateRequest request)
		{
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x105E174", Offset = "0x105E174", VA = "0x105E174")]
		private void OnUpgradeRewardUpdateSuccess(UpgradeRewardRequest request, string json)
		{
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x105E730", Offset = "0x105E730", VA = "0x105E730")]
		private void OnUpgradeRewardUpdateError(UpgradeRewardRequest request)
		{
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x105DD3C", Offset = "0x105DD3C", VA = "0x105DD3C")]
		private void OnClaimRewardSuccess(ClaimMissionRewardRequest request, string json)
		{
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x105E158", Offset = "0x105E158", VA = "0x105E158")]
		private void OnClaimRewardError(ClaimMissionRewardRequest request)
		{
		}

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0x105D390", Offset = "0x105D390", VA = "0x105D390")]
		private void ProcessMissionProgressRequests()
		{
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x105F710", Offset = "0x105F710", VA = "0x105F710")]
		private bool HasUnclaimedRewards()
		{
			return default(bool);
		}

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x105D62C", Offset = "0x105D62C", VA = "0x105D62C")]
		private void ProcessUpgradeRequests()
		{
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x105D798", Offset = "0x105D798", VA = "0x105D798")]
		private void ProcessClaimRewardRequests()
		{
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x105F4D4", Offset = "0x105F4D4", VA = "0x105F4D4")]
		private void SendUpdateRequest(MissionProgressUpdateRequest missionProgressUpdateRequest)
		{
		}

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0x105F7B8", Offset = "0x105F7B8", VA = "0x105F7B8")]
		private void SendUpgradeRequest(UpgradeRewardRequest request)
		{
		}

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0x105F954", Offset = "0x105F954", VA = "0x105F954")]
		private void SendClaimRewardReqeust(ClaimMissionRewardRequest request)
		{
		}

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x105F6A4", Offset = "0x105F6A4", VA = "0x105F6A4")]
		private bool HasPendingMissionUpdateRequest()
		{
			return default(bool);
		}

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0x105E8C4", Offset = "0x105E8C4", VA = "0x105E8C4")]
		private void ChangeState(MissionHandlerState newState)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200016E")]
	public class PlayFabGetCurrentMissionsSeasonResponse
	{
		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayerMissionsProgress currentSeason;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<CompletedSeason> completedSeasons;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int unlocksAtLevel;

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0x105FA74", Offset = "0x105FA74", VA = "0x105FA74")]
		public PlayFabGetCurrentMissionsSeasonResponse()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200016F")]
	public class PlayFabUpdateMissionsProgressResponse
	{
		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string status;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[CanBeNull]
		public PlayerMissionsProgress season;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<CompletedSeason> completedSeasons;

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x105FA7C", Offset = "0x105FA7C", VA = "0x105FA7C")]
		public PlayFabUpdateMissionsProgressResponse()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000170")]
	public class PlayFabUpgradeRewardResponse
	{
		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string status;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[CanBeNull]
		public PlayerMissionsProgress season;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<CompletedSeason> completedSeasons;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dictionary<string, int> userVirtualCurrencies;

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0x105FA84", Offset = "0x105FA84", VA = "0x105FA84")]
		public PlayFabUpgradeRewardResponse()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000171")]
	public class PlayFabClaimRewardResponse
	{
		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string status;

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[CanBeNull]
		public PlayerMissionsProgress season;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<CompletedSeason> completedSeasons;

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0x105FA8C", Offset = "0x105FA8C", VA = "0x105FA8C")]
		public PlayFabClaimRewardResponse()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000172")]
	public class CompletedSeason
	{
		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string seasonId;

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string timestamp;

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool rewardClaimed;

		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<PlayerMissionReward> missionRewards;

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x105FA94", Offset = "0x105FA94", VA = "0x105FA94")]
		public CompletedSeason()
		{
		}
	}
	[Token(Token = "0x2000173")]
	public class ServerTimeSyncData
	{
		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float latestUpdate;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayFabTimeSyncData playFabTimeSyncData;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public double nextCheck;

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0x105FA9C", Offset = "0x105FA9C", VA = "0x105FA9C")]
		public DateTime ServerNow()
		{
			return default(DateTime);
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0x105E98C", Offset = "0x105E98C", VA = "0x105E98C")]
		public TimeSpan TimeLeftUntilServerTime(string fromTime)
		{
			return default(TimeSpan);
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0x105FB64", Offset = "0x105FB64", VA = "0x105FB64")]
		public ServerTimeSyncData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000174")]
	public class PlayFabTimeSyncData
	{
		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string serverTime;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DateTime serverDateTime;

		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int offsetInSeconds;

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0x105FBDC", Offset = "0x105FBDC", VA = "0x105FBDC")]
		public PlayFabTimeSyncData()
		{
		}
	}
	[Token(Token = "0x2000175")]
	public class PlayFabServerTimeSyncHandler : ITickable
	{
		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ServerTimeSyncData serverTimeSyncData;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IPlayFabServerTimeSyncFacade facade;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0x105FBE4", Offset = "0x105FBE4", VA = "0x105FBE4")]
		public PlayFabServerTimeSyncHandler(ServerTimeSyncData serverTimeSyncData, PlayFabConnectionSettings playFabConnectionSettings, ITimeProvider timeProvider, IPlayFabServerTimeSyncFacade facade, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0x105FC34", Offset = "0x105FC34", VA = "0x105FC34")]
		public void SetupDebug(global::Ignis.DebugMenu instance)
		{
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0x105FC38", Offset = "0x105FC38", VA = "0x105FC38")]
		private void DebugMoveTime(int minutes)
		{
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x105FCFC", Offset = "0x105FCFC", VA = "0x105FCFC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x1060034", Offset = "0x1060034", VA = "0x1060034")]
		private void Error()
		{
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x10600F8", Offset = "0x10600F8", VA = "0x10600F8")]
		private void GotSync(string localTimeAtTimeOfSync, string json)
		{
		}
	}
	[Token(Token = "0x2000176")]
	public interface IPlayFabServerTimeSyncFacade
	{
		[Token(Token = "0x6000500")]
		void GetTimeSync(string clientTime, Action<string, string> GotSync, Action OnError);
	}
	[Token(Token = "0x2000177")]
	public class PlayFabServerTimeSyncFacade : IPlayFabServerTimeSyncFacade
	{
		[Token(Token = "0x6000501")]
		[Address(RVA = "0x10603F4", Offset = "0x10603F4", VA = "0x10603F4", Slot = "4")]
		public void GetTimeSync(string clientTime, Action<string, string> GotSync, Action OnError)
		{
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0x106060C", Offset = "0x106060C", VA = "0x106060C")]
		public PlayFabServerTimeSyncFacade()
		{
		}
	}
	[Token(Token = "0x2000179")]
	public interface IPlayFabShopFacade
	{
		[Token(Token = "0x6000506")]
		void BuyItem(BuyItemRequest request, ShopData shopData);

		[Token(Token = "0x6000507")]
		void BuyTool(BuyToolRequest request);

		[Token(Token = "0x6000508")]
		void RequestCatalogue(CustomizationData customizationData, Dictionary<ToolName, ToolSetting> toolSettings, ShopData shopData);

		[Token(Token = "0x6000509")]
		void BuyFremiumCoins(Action<OnStatus> onStatus, ShopData shopData, CoinItem coinItem);
	}
	[Token(Token = "0x200017A")]
	public class PlayFabShopFacade : IPlayFabShopFacade
	{
		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string catalogueVersion;

		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly OwnershipData ownershipData;

		[Token(Token = "0x600050A")]
		[Address(RVA = "0x1060740", Offset = "0x1060740", VA = "0x1060740")]
		public PlayFabShopFacade(OwnershipData ownershipData)
		{
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0x10607A4", Offset = "0x10607A4", VA = "0x10607A4", Slot = "4")]
		public void BuyItem(BuyItemRequest buyRequest, ShopData shopData)
		{
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0x1060A14", Offset = "0x1060A14", VA = "0x1060A14", Slot = "5")]
		public void BuyTool(BuyToolRequest buyRequest)
		{
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0x1060BFC", Offset = "0x1060BFC", VA = "0x1060BFC", Slot = "6")]
		public void RequestCatalogue(CustomizationData customizationData, Dictionary<ToolName, ToolSetting> toolSettings, ShopData shopData)
		{
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0x1060D7C", Offset = "0x1060D7C", VA = "0x1060D7C", Slot = "7")]
		public void BuyFremiumCoins(Action<OnStatus> onStatus, ShopData shopData, CoinItem coinItem)
		{
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0x1060F64", Offset = "0x1060F64", VA = "0x1060F64")]
		private int GetPriceOfItem(CatalogItem item, string premiumCurrencyCode, string freemiumCurrencyCode)
		{
			return default(int);
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0x1061030", Offset = "0x1061030", VA = "0x1061030")]
		private ErrorCode ConvertErrorCode(PlayFabErrorCode playFabErrorCode)
		{
			return default(ErrorCode);
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0x106093C", Offset = "0x106093C", VA = "0x106093C")]
		public static string GetCurrencyCode(Currency currency)
		{
			return null;
		}
	}
	[Token(Token = "0x200017F")]
	public enum Currency
	{
		[Token(Token = "0x40005FD")]
		Premium,
		[Token(Token = "0x40005FE")]
		Freemium
	}
	[Token(Token = "0x2000180")]
	public enum ErrorCode
	{
		[Token(Token = "0x4000600")]
		Unknown = 0,
		[Token(Token = "0x4000601")]
		InsufficientFunds = 1059,
		[Token(Token = "0x4000602")]
		ItemNotFound = 1047,
		[Token(Token = "0x4000603")]
		OperationNotSupportedForPlatform = 1219,
		[Token(Token = "0x4000604")]
		WrongPrice = 1053,
		[Token(Token = "0x4000605")]
		WrongVirtualCurrency = 1052
	}
	[Token(Token = "0x2000181")]
	public class PlayFabStorageSyncHandler : ITickable
	{
		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string CUSTOMIZATION_DATA_ACTIVE_LIST_KEY;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string CUSTOMIZATION_DATA_ACTIVE_TOOL_ITEM_LIST_KEY;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayFabStorageSyncHandlerData playFabStorageSyncHandlerData;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabUserData userData;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ITimeSinceStartupTracking timeSinceStartupTracking;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool firstLoginAfterAppStartup;

		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ProfilerMarker checkForDataChangeMaker;

		[Token(Token = "0x400060E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ProfilerMarker tickmarMarker;

		[Token(Token = "0x600051E")]
		[Address(RVA = "0x1061BD8", Offset = "0x1061BD8", VA = "0x1061BD8")]
		public PlayFabStorageSyncHandler(PlayFabStorageSyncHandlerData playFabStorageSyncHandlerData, PlayFabUserData userData, CustomizationData customizationData, ITimeSinceStartupTracking timeSinceStartupTracking)
		{
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0x1061CA8", Offset = "0x1061CA8", VA = "0x1061CA8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000520")]
		[Address(RVA = "0x10622CC", Offset = "0x10622CC", VA = "0x10622CC")]
		private void CheckForDataChange()
		{
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0x1061DE0", Offset = "0x1061DE0", VA = "0x1061DE0")]
		private void ReadAllDataFromServer()
		{
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0x1062204", Offset = "0x1062204", VA = "0x1062204")]
		private void ChangeState(PlayFabStorageSyncHandlerState newState)
		{
		}
	}
	[Token(Token = "0x2000182")]
	public class StringListWrapper
	{
		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<string> list;

		[Token(Token = "0x6000524")]
		[Address(RVA = "0x1062710", Offset = "0x1062710", VA = "0x1062710")]
		public StringListWrapper(List<string> list)
		{
		}
	}
	[Token(Token = "0x2000183")]
	public class ToolNameListWrapper
	{
		[Token(Token = "0x4000610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<ToolName> list;

		[Token(Token = "0x6000525")]
		[Address(RVA = "0x1062870", Offset = "0x1062870", VA = "0x1062870")]
		public ToolNameListWrapper(List<ToolName> list)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000184")]
	public class ToolNameCustomizationListWrapper
	{
		[Token(Token = "0x4000611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<ToolCustomizationItem> list;

		[Token(Token = "0x6000526")]
		[Address(RVA = "0x1062738", Offset = "0x1062738", VA = "0x1062738")]
		public ToolNameCustomizationListWrapper()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000185")]
	public class ToolCustomizationItem
	{
		[Token(Token = "0x4000612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ToolName toolName;

		[Token(Token = "0x4000613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string customization;

		[Token(Token = "0x6000527")]
		[Address(RVA = "0x10627B4", Offset = "0x10627B4", VA = "0x10627B4")]
		public ToolCustomizationItem(ToolName toolName, string customization)
		{
		}
	}
	[Token(Token = "0x2000186")]
	public class PlayFabStorageSyncHandlerData
	{
		[Token(Token = "0x4000614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayFabStorageSyncHandlerState state;

		[Token(Token = "0x6000528")]
		[Address(RVA = "0x1062898", Offset = "0x1062898", VA = "0x1062898")]
		public PlayFabStorageSyncHandlerData()
		{
		}
	}
	[Token(Token = "0x2000187")]
	public enum PlayFabStorageSyncHandlerState
	{
		[Token(Token = "0x4000616")]
		NotInitialized,
		[Token(Token = "0x4000617")]
		Initialized
	}
	[Token(Token = "0x2000188")]
	public class PlayFabTitleDataHandler : ITickable
	{
		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayFabTitleData playFabTitleData;

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<BotSettings> listOfBotSettings;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IPlayFabTitleDataFacade playFabTitleDataFacade;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string BOT_LEAGUE_POINTS;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string EXPERIENCE_POINTS_FOR_DEFEAT;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string EXPERIENCE_POINTS_FOR_VICTORY;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string LEAGUE_POINTS_DEFEAT_BASE;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string LEAGUE_POINTS_WIN_BASE;

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string LEAGUE_TIER_TRESHOLDS;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static string MATCHMAKING_SETTINGS;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string EXPERIENCE_FOR_BUYING_TOOL;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string BOT_MATCH_REWARD_FACTOR_SETTINGS;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static string LOG_UPLOAD_SETTINGS;

		[Token(Token = "0x6000529")]
		[Address(RVA = "0x10628A0", Offset = "0x10628A0", VA = "0x10628A0")]
		public PlayFabTitleDataHandler(PlayFabTitleData playFabTitleData, List<BotSettings> listOfBotSettings, ITimeProvider timeProvider, IPlayFabTitleDataFacade playFabTitleDataFacade, PlayFabConnectionSettings playFabConnectionSettings)
		{
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0x10628F0", Offset = "0x10628F0", VA = "0x10628F0", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0x1063150", Offset = "0x1063150", VA = "0x1063150")]
		private int ParseIntFromPlayFabTitleData(string key)
		{
			return default(int);
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0x10631FC", Offset = "0x10631FC", VA = "0x10631FC")]
		private void FilterBotsThatAreInPlayFabButNotInThisVersionOfTheClient()
		{
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0x10632AC", Offset = "0x10632AC", VA = "0x10632AC")]
		private bool DataIsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0x1063134", Offset = "0x1063134", VA = "0x1063134")]
		private void ChangeState(PlayFabTitleDataState newState)
		{
		}
	}
	[Token(Token = "0x200018A")]
	public interface IPlayFabTitleDataFacade
	{
		[Token(Token = "0x6000534")]
		void GetTitleData(PlayFabTitleData playFabTitleData);
	}
	[Token(Token = "0x200018B")]
	public class PlayFabTitleData
	{
		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayFabTitleDataState state;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<string, string> data;

		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int experiencePointsForDefeat;

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int experiencePointsForVictory;

		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int leaguePointsDefeatBase;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int leaguePointsWinBase;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int experiencePointsForBuyingTool;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PlayFabTitleDataBotList bots;

		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float latestUpdateTimestamp;

		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool errorLoading;

		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LeagueTierThresholdList leagueTierThresholds;

		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public BotMatchRewardFactorSettings botMatchRewardFactorSettings;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LogUploadSettings logUploadSettings;

		[Token(Token = "0x6000535")]
		[Address(RVA = "0x10635F0", Offset = "0x10635F0", VA = "0x10635F0")]
		public PlayFabTitleData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200018C")]
	public class LogUploadSettings
	{
		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool shouldUploadGameLogsAtEndOfEverySuccessfulMatchmakingGame;

		[Token(Token = "0x6000536")]
		[Address(RVA = "0x10636EC", Offset = "0x10636EC", VA = "0x10636EC")]
		public LogUploadSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200018D")]
	public class BotMatchRewardFactorSettings
	{
		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float leastReward;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float timeWhenAMatchIsConsederedComplete;

		[Token(Token = "0x6000537")]
		[Address(RVA = "0x10636D8", Offset = "0x10636D8", VA = "0x10636D8")]
		public BotMatchRewardFactorSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200018E")]
	public class PlayFabTitleDataBotList
	{
		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<PlayFabTitleDataBot> list;

		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int leaguePointsRange;

		[Token(Token = "0x6000538")]
		[Address(RVA = "0x10636F4", Offset = "0x10636F4", VA = "0x10636F4")]
		public PlayFabTitleDataBotList()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200018F")]
	public class PlayFabTitleDataBot
	{
		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string botId;

		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int leaguePoints;

		[Token(Token = "0x6000539")]
		[Address(RVA = "0x106375C", Offset = "0x106375C", VA = "0x106375C")]
		public PlayFabTitleDataBot(string botId, int leaguePoints)
		{
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0x106378C", Offset = "0x106378C", VA = "0x106378C")]
		public PlayFabTitleDataBot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000190")]
	public class LeagueTierThresholdList
	{
		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<LeagueTierThreshold> thresholds;

		[Token(Token = "0x600053B")]
		[Address(RVA = "0x1063794", Offset = "0x1063794", VA = "0x1063794")]
		public LeagueTierThresholdList()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000191")]
	public class LeagueTierThreshold
	{
		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int tierIndex;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int threshold;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int experienceReward;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int freemiumReward;

		[Token(Token = "0x4000642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int premiumReward;

		[Token(Token = "0x600053C")]
		[Address(RVA = "0x1063810", Offset = "0x1063810", VA = "0x1063810")]
		public LeagueTierThreshold()
		{
		}
	}
	[Token(Token = "0x2000192")]
	public enum PlayFabTitleDataState
	{
		[Token(Token = "0x4000644")]
		NotInitialized,
		[Token(Token = "0x4000645")]
		Initialized,
		[Token(Token = "0x4000646")]
		Error,
		[Token(Token = "0x4000647")]
		ReFetchData
	}
	[Token(Token = "0x2000193")]
	public class PlayFabTitleDataFacade : IPlayFabTitleDataFacade
	{
		[Token(Token = "0x600053D")]
		[Address(RVA = "0x1063818", Offset = "0x1063818", VA = "0x1063818", Slot = "4")]
		public void GetTitleData(PlayFabTitleData playFabTitleData)
		{
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0x1063980", Offset = "0x1063980", VA = "0x1063980")]
		public PlayFabTitleDataFacade()
		{
		}
	}
	[Token(Token = "0x2000195")]
	public class PlayFabToolAttachmentHandler : ITickable
	{
		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ToolAttachmentsData toolAttachmentsData;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ToolMasteryData toolMasteryData;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool initialized;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CloudScriptInvocationRequest pendingGetAttachmentsRequest;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float latestToolAttachmentUpdateTime;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float uploadCurfewTime;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float latestMissionProgressChangeTimestamp;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CloudScriptInvocationRequest latestClaimAttachmentRequest;

		[Token(Token = "0x4000653")]
		private const float CurfewLength = 10f;

		[Token(Token = "0x6000542")]
		[Address(RVA = "0x1063A20", Offset = "0x1063A20", VA = "0x1063A20")]
		public PlayFabToolAttachmentHandler(ToolAttachmentsData toolAttachmentsData, PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData, ITimeProvider timeProvider, ToolMasteryData toolMasteryData)
		{
		}

		[Token(Token = "0x6000543")]
		[Address(RVA = "0x1063A68", Offset = "0x1063A68", VA = "0x1063A68", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0x1064134", Offset = "0x1064134", VA = "0x1064134")]
		private bool IsAnUploadCurfewInPlace()
		{
			return default(bool);
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0x1063C0C", Offset = "0x1063C0C", VA = "0x1063C0C")]
		private void CheckCachedResponse()
		{
		}

		[Token(Token = "0x6000546")]
		[Address(RVA = "0x10644C0", Offset = "0x10644C0", VA = "0x10644C0")]
		private void CheckClaimAttachmentQueueAndSendRequests()
		{
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0x1064650", Offset = "0x1064650", VA = "0x1064650")]
		private void CheckLatestClaimAttachmentRequestForResponse()
		{
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0x1064AE0", Offset = "0x1064AE0", VA = "0x1064AE0")]
		public void SetupDebug(global::Ignis.DebugMenu debugMenu)
		{
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0x1064AE4", Offset = "0x1064AE4", VA = "0x1064AE4")]
		private void DebugClaimAttachment(ToolName toolName, ToolConfigurationType toolAttachment)
		{
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0x1064B88", Offset = "0x1064B88", VA = "0x1064B88")]
		private void SetUploadCurfew()
		{
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0x1063B44", Offset = "0x1063B44", VA = "0x1063B44")]
		private void MakeGetAttachmentsRequest()
		{
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0x10641EC", Offset = "0x10641EC", VA = "0x10641EC")]
		private void MakeSetAttachmentsRequest()
		{
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0x1063C84", Offset = "0x1063C84", VA = "0x1063C84")]
		private void ParseGetAttachmentResponse(string responseData)
		{
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0x10646DC", Offset = "0x10646DC", VA = "0x10646DC")]
		private void ParseOwnedToolAttachmentsResponse(List<GetAttachmentsResponse.Tool> responseOwnedAttachments)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000196")]
	public class GetAttachmentsResponse
	{
		[Serializable]
		[Token(Token = "0x2000197")]
		public class Tool
		{
			[Token(Token = "0x4000656")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string toolName;

			[Token(Token = "0x4000657")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string toolAttachment;

			[Token(Token = "0x4000658")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool claimed;

			[Token(Token = "0x6000550")]
			[Address(RVA = "0x1126A08", Offset = "0x1126A08", VA = "0x1126A08")]
			public Tool()
			{
			}
		}

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Tool> selectedAttachments;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Tool> ownedAttachments;

		[Token(Token = "0x600054F")]
		[Address(RVA = "0x1126A00", Offset = "0x1126A00", VA = "0x1126A00")]
		public GetAttachmentsResponse()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000198")]
	public class ClaimAttachmentsResponse
	{
		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<GetAttachmentsResponse.Tool> ownedAttachments;

		[Token(Token = "0x6000551")]
		[Address(RVA = "0x1126A10", Offset = "0x1126A10", VA = "0x1126A10")]
		public ClaimAttachmentsResponse()
		{
		}
	}
	[Token(Token = "0x2000199")]
	public class ToolMasteryData
	{
		[Token(Token = "0x200019A")]
		public class ChangeMasteryRequest
		{
			[Token(Token = "0x4000660")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ToolName toolName;

			[Token(Token = "0x4000661")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public ToolConfigurationType toolAttachment;

			[Token(Token = "0x6000553")]
			[Address(RVA = "0x1126BC0", Offset = "0x1126BC0", VA = "0x1126BC0")]
			public ChangeMasteryRequest(ToolName toolName, ToolConfigurationType toolAttachment)
			{
			}
		}

		[Token(Token = "0x200019B")]
		public class ToolMasteryProgress
		{
			[Token(Token = "0x4000662")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ToolName toolName;

			[Token(Token = "0x4000663")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public ToolConfigurationType toolAttachment;

			[Token(Token = "0x6000554")]
			[Address(RVA = "0x1126B3C", Offset = "0x1126B3C", VA = "0x1126B3C")]
			public ToolMasteryProgress()
			{
			}
		}

		[Token(Token = "0x200019C")]
		public class MasteryMissionUpdateReqeust
		{
			[Token(Token = "0x4000664")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string missionId;

			[Token(Token = "0x4000665")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string qualifier;

			[Token(Token = "0x4000666")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool isDeltaChange;

			[Token(Token = "0x4000667")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int value;

			[Token(Token = "0x6000555")]
			[Address(RVA = "0x1126BEC", Offset = "0x1126BEC", VA = "0x1126BEC")]
			public MasteryMissionUpdateReqeust(string missionId, string qualifier, bool isDeltaChange, int value)
			{
			}
		}

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Queue<ChangeMasteryRequest> changeMasteryRequests;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Queue<MasteryMissionUpdateReqeust> updateProgressRequests;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly ToolMasteryProgress currentlyTracked;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CurrentMasteryMissionProgress currentMasteryMissionProgress;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float lastUpdatedTimestamp;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float latestToolOrAttachmentUnlockTimestamp;

		[Token(Token = "0x6000552")]
		[Address(RVA = "0x1126A18", Offset = "0x1126A18", VA = "0x1126A18")]
		public ToolMasteryData()
		{
		}
	}
	[Token(Token = "0x200019D")]
	public class CurrentMasteryMissionProgress
	{
		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly List<ToolMasteryMissionProgress> missions;

		[Token(Token = "0x6000556")]
		[Address(RVA = "0x1126B44", Offset = "0x1126B44", VA = "0x1126B44")]
		public CurrentMasteryMissionProgress()
		{
		}
	}
	[Token(Token = "0x200019E")]
	public class ToolMasteryMissionProgress : MissionProgressBase
	{
		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ToolName toolName;

		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public ToolConfigurationType toolAttachment;

		[Token(Token = "0x6000557")]
		[Address(RVA = "0x1126C30", Offset = "0x1126C30", VA = "0x1126C30")]
		public ToolMasteryMissionProgress(string missionId, int progress, int amountToComplete, bool active, ToolName toolName, ToolConfigurationType toolAttachment, [Optional][CanBeNull] string qualifier)
		{
		}
	}
	[Token(Token = "0x200019F")]
	public class PlayFabToolMasteryHandler : ITickable
	{
		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ToolMasteryData toolMasteryData;

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly OwnershipData ownershipData;

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<CloudScriptInvocationRequest> pendingRequestsThatWillGiveMissionStatusUpdate;

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initialized;

		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CloudScriptInvocationRequest pendingSetToolMasteryTrackingRequest;

		[Token(Token = "0x6000558")]
		[Address(RVA = "0x1126C9C", Offset = "0x1126C9C", VA = "0x1126C9C")]
		public PlayFabToolMasteryHandler(ToolMasteryData toolMasteryData, PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData, ITimeProvider timeProvider, OwnershipData ownershipData, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0x1126D54", Offset = "0x1126D54", VA = "0x1126D54", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0x1126E24", Offset = "0x1126E24", VA = "0x1126E24")]
		private void CheckInitialization()
		{
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0x1127324", Offset = "0x1127324", VA = "0x1127324")]
		private void SendGetMissionStatusRequest()
		{
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0x1127098", Offset = "0x1127098", VA = "0x1127098")]
		private void CheckPendingRequestsForStateUpdates()
		{
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0x11272F4", Offset = "0x11272F4", VA = "0x11272F4")]
		private void CheckPendingSetMasteryRequests()
		{
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0x1127918", Offset = "0x1127918", VA = "0x1127918")]
		public void SetupDebug(global::Ignis.DebugMenu instance)
		{
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x112791C", Offset = "0x112791C", VA = "0x112791C")]
		private void DebugCompleteAllMissions()
		{
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x1127F08", Offset = "0x1127F08", VA = "0x1127F08")]
		private void DebugProgressOnActiveMission(int deltaValue)
		{
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0x1128118", Offset = "0x1128118", VA = "0x1128118")]
		private void DebugResetToolMastery()
		{
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x11281D8", Offset = "0x11281D8", VA = "0x11281D8")]
		private void DebugTrackTool(ToolName toolName, ToolConfigurationType toolAttachment)
		{
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0x1127458", Offset = "0x1127458", VA = "0x1127458")]
		private void ParseMissionsUpdate(string data)
		{
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0x1128278", Offset = "0x1128278", VA = "0x1128278")]
		private void ParseToolMasteryTracking(string data)
		{
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0x1126E3C", Offset = "0x1126E3C", VA = "0x1126E3C")]
		private void SendProgressRequestsToPlayFab()
		{
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0x11283BC", Offset = "0x11283BC", VA = "0x11283BC")]
		private void SendTelemetryOnMissionUpdate(ToolMasteryData.MasteryMissionUpdateReqeust request, ToolMasteryMissionProgress missionToBeUpdated, ToolName toolName, ToolConfigurationType toolAttachment, string missionId, string qualifier)
		{
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0x1127CBC", Offset = "0x1127CBC", VA = "0x1127CBC")]
		private void SendMissionProgressRequest(ToolName toolName, ToolConfigurationType toolAttachment, string qualifier, string missionId, bool isDeltaChange, int value, float setCurfewAfterSendingThisRequestTo = 0f)
		{
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x1126D94", Offset = "0x1126D94", VA = "0x1126D94")]
		private void SendMasteryToolToPlayFab()
		{
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0x1127B0C", Offset = "0x1127B0C", VA = "0x1127B0C")]
		private void SendSetToolMasteryRequest(ToolName toolName, ToolConfigurationType toolAttachment, float setCurfewAfterSendingThisRequestTo = 0f)
		{
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x1128388", Offset = "0x1128388", VA = "0x1128388")]
		private bool IsTrackingTool()
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20001A1")]
	public class ToolMasteryTracking
	{
		[Serializable]
		[Token(Token = "0x20001A2")]
		public class CurrentToolMasteryTracking
		{
			[Token(Token = "0x4000678")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string toolName;

			[Token(Token = "0x4000679")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string toolAttachment;

			[Token(Token = "0x600056F")]
			[Address(RVA = "0x11288EC", Offset = "0x11288EC", VA = "0x11288EC")]
			public CurrentToolMasteryTracking()
			{
			}
		}

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CurrentToolMasteryTracking toolMasteryTracking;

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string toolName;

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string toolAttachment;

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x11288E4", Offset = "0x11288E4", VA = "0x11288E4")]
		public ToolMasteryTracking()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A3")]
	public class MasteryMissionProgress
	{
		[Serializable]
		[Token(Token = "0x20001A4")]
		public class MasteryMissionProgressMission
		{
			[Token(Token = "0x400067E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string missionId;

			[Token(Token = "0x400067F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int progress;

			[Token(Token = "0x4000680")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int amountToComplete;

			[Token(Token = "0x4000681")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool active;

			[Token(Token = "0x4000682")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string toolName;

			[Token(Token = "0x4000683")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string toolAttachment;

			[Token(Token = "0x4000684")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string qualifier;

			[Token(Token = "0x4000685")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool complete;

			[Token(Token = "0x6000571")]
			[Address(RVA = "0x11288FC", Offset = "0x11288FC", VA = "0x11288FC")]
			public MasteryMissionProgressMission()
			{
			}
		}

		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<MasteryMissionProgressMission> missions;

		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool masteryUpdated;

		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool toolsWereUnlocked;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool attachmentsWereUnlocked;

		[Token(Token = "0x6000570")]
		[Address(RVA = "0x11288F4", Offset = "0x11288F4", VA = "0x11288F4")]
		public MasteryMissionProgress()
		{
		}
	}
	[Token(Token = "0x20001A5")]
	public enum TournamentState
	{
		[Token(Token = "0x4000687")]
		NotVisibleYet,
		[Token(Token = "0x4000688")]
		NotStarted,
		[Token(Token = "0x4000689")]
		Ongoing,
		[Token(Token = "0x400068A")]
		Finishing,
		[Token(Token = "0x400068B")]
		Finished,
		[Token(Token = "0x400068C")]
		Hidden
	}
	[Token(Token = "0x20001A6")]
	public class TournamentEventData
	{
		[Token(Token = "0x20001A7")]
		public enum State
		{
			[Token(Token = "0x4000695")]
			NotLoggedIn,
			[Token(Token = "0x4000696")]
			Requesting,
			[Token(Token = "0x4000697")]
			Idle,
			[Token(Token = "0x4000698")]
			Error
		}

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float lastDataUpdateTimestamp;

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ListOfTournaments tournaments;

		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool requestUpdate;

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public State state;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Queue<BuyEntryFeeRequest> buyEntryRequests;

		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool lockerRoomInitialized;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool userIsViewingAnActiveTournament;

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x1128904", Offset = "0x1128904", VA = "0x1128904")]
		public EventTournament GetCurrentTournament()
		{
			return null;
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x1128960", Offset = "0x1128960", VA = "0x1128960")]
		public TournamentState GetCurrentTournamentState(EventTournament t, ServerTimeSyncData serverTimeSyncData)
		{
			return default(TournamentState);
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x1128B30", Offset = "0x1128B30", VA = "0x1128B30")]
		public TournamentEventData()
		{
		}
	}
	[Token(Token = "0x20001A8")]
	public class BuyEntryFeeRequest
	{
		[Token(Token = "0x20001A9")]
		public enum State
		{
			[Token(Token = "0x400069E")]
			Created,
			[Token(Token = "0x400069F")]
			Sent,
			[Token(Token = "0x40006A0")]
			Error,
			[Token(Token = "0x40006A1")]
			Success,
			[Token(Token = "0x40006A2")]
			Timeout
		}

		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string tournamentId;

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float sentAtTimestamp;

		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public State state;

		[Token(Token = "0x400069C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<State> TerminalStates;

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x1128CF0", Offset = "0x1128CF0", VA = "0x1128CF0")]
		public BuyEntryFeeRequest(string tournamentId)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AA")]
	public class ListOfTournaments
	{
		[Token(Token = "0x40006A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<EventTournament> tournaments;

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x1128BD8", Offset = "0x1128BD8", VA = "0x1128BD8")]
		public ListOfTournaments()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AB")]
	public class EventTournament
	{
		[Token(Token = "0x40006A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EventTournamentSettings settings;

		[Token(Token = "0x40006A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<EventTournamentLeaderBoardRecord> leaderboard;

		[Token(Token = "0x40006A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EventTournamentPlayerInfo player;

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x1128EE4", Offset = "0x1128EE4", VA = "0x1128EE4")]
		public EventTournament()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AC")]
	public class EventTournamentLeaderBoardRecord
	{
		[Token(Token = "0x40006A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string displayName;

		[Token(Token = "0x40006A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string masterPlayerId;

		[Token(Token = "0x40006A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int position;

		[Token(Token = "0x40006AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int value;

		[Token(Token = "0x6000579")]
		[Address(RVA = "0x112905C", Offset = "0x112905C", VA = "0x112905C")]
		public EventTournamentLeaderBoardRecord()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AD")]
	public class EventTournamentSettings
	{
		[Token(Token = "0x40006AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string tournamentId;

		[Token(Token = "0x40006AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string visibleFromTime;

		[Token(Token = "0x40006AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string visibleToTime;

		[Token(Token = "0x40006AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string startTime;

		[Token(Token = "0x40006AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string endTime;

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string stopAcceptingReportsTime;

		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public DateTime visibleFromTimeDateTime;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public DateTime visibleToTimeDateTime;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public DateTime startTimeDateTime;

		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public DateTime endTimeDateTime;

		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public DateTime stopAcceptingReportsTimeDateTime;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int leagueTierLimit;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int lossLimit;

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string matchmakingQueue;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int entryFeeBlasts;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public int winMatchRewardBlasts;

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string gameplayRules;

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x1128FC8", Offset = "0x1128FC8", VA = "0x1128FC8")]
		public EventTournamentSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AE")]
	public class EventTournamentPlayerInfo
	{
		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int wins;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int losses;

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool inTournament;

		[Token(Token = "0x600057B")]
		[Address(RVA = "0x1129048", Offset = "0x1129048", VA = "0x1129048")]
		public EventTournamentPlayerInfo()
		{
		}
	}
	[Token(Token = "0x20001AF")]
	public class PlayFabTournamentEventHandler : ITickable
	{
		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly LoginData loginData;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly TournamentEventData tournamentEventData;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IPlayFabTournamentEventFacade playFabTournamentEventFacade;

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly OwnershipData ownershipData;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ErrorMessageData errorMessageData;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastRequest;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<BuyEntryFeeRequest> pendingBuyRequests;

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x1129064", Offset = "0x1129064", VA = "0x1129064")]
		public PlayFabTournamentEventHandler(LoginData loginData, TournamentEventData tournamentEventData, IPlayFabTournamentEventFacade playFabTournamentEventFacade, ITimeProvider timeProvider, PlayFabConnectionSettings playFabConnectionSettings, OwnershipData ownershipData, ErrorMessageData errorMessageData)
		{
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x1129130", Offset = "0x1129130", VA = "0x1129130")]
		public void SetupDebug(global::Ignis.DebugMenu debugMenu, TournamentCreationComponent tournamentCreationComponent)
		{
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x1129134", Offset = "0x1129134", VA = "0x1129134")]
		private void ReloadTournament()
		{
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x1129154", Offset = "0x1129154", VA = "0x1129154", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x1129A2C", Offset = "0x1129A2C", VA = "0x1129A2C")]
		private bool ThereIsAnActiveTournament()
		{
			return default(bool);
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x1129A48", Offset = "0x1129A48", VA = "0x1129A48")]
		private void ShowErrorDialog()
		{
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0x1129B4C", Offset = "0x1129B4C", VA = "0x1129B4C")]
		private void OnTournamentEntryFeePurchaseError(BuyEntryFeeRequest request)
		{
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0x1129B68", Offset = "0x1129B68", VA = "0x1129B68")]
		private void OnTournamentEntryFeePurchaseSuccessful(BuyEntryFeeRequest request)
		{
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0x1129868", Offset = "0x1129868", VA = "0x1129868")]
		private void RequestTournamentInfo()
		{
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0x1129BC8", Offset = "0x1129BC8", VA = "0x1129BC8")]
		private void OnGotTournamentInfo(string json)
		{
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0x1129E14", Offset = "0x1129E14", VA = "0x1129E14")]
		private void OnError()
		{
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0x11297A0", Offset = "0x11297A0", VA = "0x11297A0")]
		private void ChangeState(TournamentEventData.State newState)
		{
		}
	}
	[Token(Token = "0x20001B1")]
	public interface IPlayFabTournamentEventFacade
	{
		[Token(Token = "0x600058B")]
		void GetTournamentInfo(Action<string> onGotTournamentInfo, Action onError);

		[Token(Token = "0x600058C")]
		void BuyTournamentEntry(BuyEntryFeeRequest buyEntryFeeRequest, Action<BuyEntryFeeRequest> onTournamentEntryFeePurchaseSuccessful, Action<BuyEntryFeeRequest> onTournamentEntryFeePurchaseError);
	}
	[Token(Token = "0x20001B2")]
	public class PlayFabTournamentEventFacade : IPlayFabTournamentEventFacade
	{
		[Token(Token = "0x600058D")]
		[Address(RVA = "0x1129F0C", Offset = "0x1129F0C", VA = "0x1129F0C", Slot = "4")]
		public void GetTournamentInfo(Action<string> OnGotTournamentInfo, Action OnError)
		{
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0x112A094", Offset = "0x112A094", VA = "0x112A094", Slot = "5")]
		public void BuyTournamentEntry(BuyEntryFeeRequest buyEntryFeeRequest, Action<BuyEntryFeeRequest> onTournamentEntryFeePurchaseSuccessful, Action<BuyEntryFeeRequest> onTournamentEntryFeePurchaseError)
		{
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0x112A2B4", Offset = "0x112A2B4", VA = "0x112A2B4")]
		private static void ErrorBuyingEntry(BuyEntryFeeRequest buyEntryFeeRequest, Action<BuyEntryFeeRequest> onTournamentEntryFeePurchaseError)
		{
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0x112A2DC", Offset = "0x112A2DC", VA = "0x112A2DC")]
		public PlayFabTournamentEventFacade()
		{
		}
	}
	[Token(Token = "0x20001B5")]
	public class TournamentCreationComponent : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001B6")]
		private class SettingsToPost
		{
			[Token(Token = "0x40006CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string Key;

			[Token(Token = "0x40006D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string Value;

			[Token(Token = "0x600059C")]
			[Address(RVA = "0x112A79C", Offset = "0x112A79C", VA = "0x112A79C")]
			public SettingsToPost()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001B7")]
		private class TournamentSetting
		{
			[Token(Token = "0x40006D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SettingsToPostSettings ThreeLossYouAreOut;

			[Token(Token = "0x600059D")]
			[Address(RVA = "0x112A7A4", Offset = "0x112A7A4", VA = "0x112A7A4")]
			public TournamentSetting()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001B8")]
		internal class SettingsToPostSettings
		{
			[Token(Token = "0x40006D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string tournamentId;

			[Token(Token = "0x40006D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string startTime;

			[Token(Token = "0x40006D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string endTime;

			[Token(Token = "0x40006D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string stopAcceptingReportsTime;

			[Token(Token = "0x40006D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string visibleFromTime;

			[Token(Token = "0x40006D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string visibleToTime;

			[Token(Token = "0x40006D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int lossLimit;

			[Token(Token = "0x40006D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public int leagueTierLimit;

			[Token(Token = "0x40006DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public int entryFeeBlasts;

			[Token(Token = "0x40006DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public int winMatchRewardBlasts;

			[Token(Token = "0x600059E")]
			[Address(RVA = "0x112A7AC", Offset = "0x112A7AC", VA = "0x112A7AC")]
			public SettingsToPostSettings()
			{
			}
		}

		[Token(Token = "0x20001B9")]
		[CompilerGenerated]
		private sealed class <CreateTournament>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40006DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TournamentCreationComponent <>4__this;

			[Token(Token = "0x40006DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private string <titleId>5__2;

			[Token(Token = "0x17000053")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60005A2")]
				[Address(RVA = "0x112ABF4", Offset = "0x112ABF4", VA = "0x112ABF4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000054")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60005A4")]
				[Address(RVA = "0x112AC3C", Offset = "0x112AC3C", VA = "0x112AC3C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600059F")]
			[Address(RVA = "0x112A66C", Offset = "0x112A66C", VA = "0x112A66C")]
			[DebuggerHidden]
			public <CreateTournament>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x60005A0")]
			[Address(RVA = "0x112A7C0", Offset = "0x112A7C0", VA = "0x112A7C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60005A1")]
			[Address(RVA = "0x112A7C4", Offset = "0x112A7C4", VA = "0x112A7C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60005A3")]
			[Address(RVA = "0x112ABFC", Offset = "0x112ABFC", VA = "0x112ABFC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001BA")]
		[CompilerGenerated]
		private sealed class <DoWebPost>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40006E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string url;

			[Token(Token = "0x40006E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string json;

			[Token(Token = "0x40006E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x17000055")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60005A9")]
				[Address(RVA = "0x112B0CC", Offset = "0x112B0CC", VA = "0x112B0CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000056")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60005AB")]
				[Address(RVA = "0x112B114", Offset = "0x112B114", VA = "0x112B114", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60005A5")]
			[Address(RVA = "0x112A708", Offset = "0x112A708", VA = "0x112A708")]
			[DebuggerHidden]
			public <DoWebPost>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x60005A6")]
			[Address(RVA = "0x112AC44", Offset = "0x112AC44", VA = "0x112AC44", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60005A7")]
			[Address(RVA = "0x112AC60", Offset = "0x112AC60", VA = "0x112AC60", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60005A8")]
			[Address(RVA = "0x112B01C", Offset = "0x112B01C", VA = "0x112B01C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60005AA")]
			[Address(RVA = "0x112B0D4", Offset = "0x112B0D4", VA = "0x112B0D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0x112A5E4", Offset = "0x112A5E4", VA = "0x112A5E4")]
		public void CreateHalfHourTournament()
		{
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0x112A604", Offset = "0x112A604", VA = "0x112A604")]
		[IteratorStateMachine(typeof(<CreateTournament>d__1))]
		private IEnumerator CreateTournament()
		{
			return null;
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0x112A694", Offset = "0x112A694", VA = "0x112A694")]
		[IteratorStateMachine(typeof(<DoWebPost>d__2))]
		private IEnumerator DoWebPost(string url, string json)
		{
			return null;
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0x112A730", Offset = "0x112A730", VA = "0x112A730")]
		private static string FormatTime(DateTime startTime)
		{
			return null;
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0x112A794", Offset = "0x112A794", VA = "0x112A794")]
		public TournamentCreationComponent()
		{
		}
	}
	[Token(Token = "0x20001BB")]
	public class PlayFabUserDataStorageHandler : ITickable
	{
		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayFabUserData playFabUserData;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly LoginData loginData;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IPlayFabUserDataFacade userDataFacade;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ProfilerMarker checkResetMarker;

		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ProfilerMarker tickMarker;

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x112B11C", Offset = "0x112B11C", VA = "0x112B11C")]
		public PlayFabUserDataStorageHandler(PlayFabUserData playFabUserData, LoginData loginData, IPlayFabUserDataFacade userDataFacade, ITimeProvider timeProvider, PlayFabConnectionSettings playFabConnectionSettings)
		{
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x112B1EC", Offset = "0x112B1EC", VA = "0x112B1EC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x112BEBC", Offset = "0x112BEBC", VA = "0x112BEBC")]
		private void CheckReset()
		{
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x112BFB8", Offset = "0x112BFB8", VA = "0x112BFB8")]
		private void DataStoreError()
		{
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x112C074", Offset = "0x112C074", VA = "0x112C074")]
		private void DataStored()
		{
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x112C0D8", Offset = "0x112C0D8", VA = "0x112C0D8")]
		private void ErrorLoadingUserData()
		{
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x112BAD0", Offset = "0x112BAD0", VA = "0x112BAD0")]
		private void GotUserData(Dictionary<string, string> data)
		{
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x112BDF4", Offset = "0x112BDF4", VA = "0x112BDF4")]
		private void ChangeState(PlayFabUserDataState newState)
		{
		}
	}
	[Token(Token = "0x20001BC")]
	public interface IPlayFabUserDataFacade
	{
		[Token(Token = "0x60005B4")]
		void LoadUserData(Action<Dictionary<string, string>> success, Action error);

		[Token(Token = "0x60005B5")]
		void StoreUserData(Dictionary<string, string> data, List<string> keysToRemove, Action success, Action error);
	}
	[Token(Token = "0x20001BD")]
	public class PlayFabUserDataFacade : IPlayFabUserDataFacade
	{
		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayFabLoginData playFabLoginData;

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x112C194", Offset = "0x112C194", VA = "0x112C194")]
		public PlayFabUserDataFacade(PlayFabLoginData playFabLoginData)
		{
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x112C1BC", Offset = "0x112C1BC", VA = "0x112C1BC", Slot = "4")]
		public void LoadUserData(Action<Dictionary<string, string>> success, Action error)
		{
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x112C344", Offset = "0x112C344", VA = "0x112C344", Slot = "5")]
		public void StoreUserData(Dictionary<string, string> data, List<string> keysToRemove, Action success, Action error)
		{
		}
	}
	[Token(Token = "0x20001C0")]
	public class PlayFabUserData
	{
		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayFabUserDataState state;

		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<string, string> data;

		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HashSet<string> dataHasChangedLocally;

		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<string> keysInLatestServerResponse;

		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float timeOfLatestError;

		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool resetRequested;

		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Dictionary<string, string> dataFromLoginHandler;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float timeOfLatestSuccessfulLoad;

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string EXPERIMENTAL_UI_SETTINGS;

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x112C778", Offset = "0x112C778", VA = "0x112C778")]
		public PlayFabUserData()
		{
		}
	}
	[Token(Token = "0x20001C1")]
	public enum PlayFabUserDataState
	{
		[Token(Token = "0x40006FB")]
		NotInitiated,
		[Token(Token = "0x40006FC")]
		Loading,
		[Token(Token = "0x40006FD")]
		Loaded,
		[Token(Token = "0x40006FE")]
		Updating,
		[Token(Token = "0x40006FF")]
		ErrorLoadingData,
		[Token(Token = "0x4000700")]
		ErrorUpdatingData
	}
	[Token(Token = "0x20001C2")]
	public class PlayFabUserMessageHandler : ITickable
	{
		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ErrorMessageData errorMessageData;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float latestMessageCheckTimestamp;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CloudScriptInvocationRequest currentGetRequest;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UserMessage userMessageToShow;

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x112C898", Offset = "0x112C898", VA = "0x112C898")]
		public PlayFabUserMessageHandler(PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData, ErrorMessageData errorMessageData, PlayFabConnectionSettings playFabConnectionSettings, ITimeProvider timeProvider)
		{
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x112C8E0", Offset = "0x112C8E0", VA = "0x112C8E0", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C3")]
	public class UserMessageResponse
	{
		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<UserMessage> messages;

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x112CC88", Offset = "0x112CC88", VA = "0x112CC88")]
		public UserMessageResponse()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C4")]
	public class UserMessage
	{
		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string messageId;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string messageText;

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x112CC90", Offset = "0x112CC90", VA = "0x112CC90")]
		public UserMessage()
		{
		}
	}
	[Token(Token = "0x20001C5")]
	public class PlayFabUserSettingsData
	{
		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayFabUserSettingsDataState state;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayFabUserBowserSettings bowserSettings;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayFabUserGameLogUploadSettings gameLogUploadSettings;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlayFabNetworkDiagnosticsSettings networkDiagnosticsSettings;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PlayFabPingSettings pingSettings;

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PlayFabAdsSettings adsSettings;

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x112CC98", Offset = "0x112CC98", VA = "0x112CC98")]
		public PlayFabUserSettingsData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C6")]
	public class PlayFabNetworkDiagnosticsSettings
	{
		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int pingWarningThresholdMs;

		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int numberOfSecondsBeforeHighPingIsConsideredBad;

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x112CDE4", Offset = "0x112CDE4", VA = "0x112CDE4")]
		public PlayFabNetworkDiagnosticsSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C7")]
	public class PlayFabPingSettings
	{
		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<int> pingLimits;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int pingInterval;

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x112CDF8", Offset = "0x112CDF8", VA = "0x112CDF8")]
		public PlayFabPingSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C8")]
	public class PlayFabAdsSettings
	{
		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<PlatformAdsSettings> platformAdsSettings;

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x112D038", Offset = "0x112D038", VA = "0x112D038")]
		public bool AreAdsEnabledFor(string platform)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x112CFBC", Offset = "0x112CFBC", VA = "0x112CFBC")]
		public PlayFabAdsSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C9")]
	public class PlatformAdsSettings
	{
		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string platform;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool adsEnabled;

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x112D10C", Offset = "0x112D10C", VA = "0x112D10C")]
		public PlatformAdsSettings(string platform, bool adsEnabled)
		{
		}
	}
	[Token(Token = "0x20001CA")]
	public class PlayFabPlayerSettings
	{
		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayFabUserBowserSettings bowserSettings;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayFabUserGameLogUploadSettings gameLogUploadSettings;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayFabNetworkDiagnosticsSettings networkDiagnosticsSettings;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlayFabAdsSettings adsSettings;

		[Token(Token = "0x400071C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PlayFabPingSettings pingSettings;

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x112D13C", Offset = "0x112D13C", VA = "0x112D13C")]
		public PlayFabPlayerSettings()
		{
		}
	}
	[Token(Token = "0x20001CB")]
	public enum PlayFabUserSettingsDataState
	{
		[Token(Token = "0x400071E")]
		NotStarted,
		[Token(Token = "0x400071F")]
		Requesting,
		[Token(Token = "0x4000720")]
		GotSettings,
		[Token(Token = "0x4000721")]
		Error
	}
	[Serializable]
	[Token(Token = "0x20001CC")]
	public class PlayFabUserBowserSettings
	{
		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool allowedToEnterBar;

		[Token(Token = "0x4000723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool allowedToEnterAlley;

		[Token(Token = "0x4000724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool banned;

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x112CDCC", Offset = "0x112CDCC", VA = "0x112CDCC")]
		public PlayFabUserBowserSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001CD")]
	public class PlayFabUserGameLogUploadSettings
	{
		[Token(Token = "0x4000725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool upload;

		[Token(Token = "0x4000726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int batchSize;

		[Token(Token = "0x4000727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int secondsToRecordAfterEndOfMatch;

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x112CDD4", Offset = "0x112CDD4", VA = "0x112CDD4")]
		public PlayFabUserGameLogUploadSettings()
		{
		}
	}
	[Token(Token = "0x20001CE")]
	public class PlayFabUserSettingsHandler : ITickable
	{
		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly LoginData loginData;

		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabUserSettingsData playFabUserSettingsData;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x400072B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData;

		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float lastRequestTimestamp;

		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CloudScriptInvocationRequest pendingCloudScriptInvocationRequest;

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x112D270", Offset = "0x112D270", VA = "0x112D270")]
		public PlayFabUserSettingsHandler(LoginData loginData, PlayFabUserSettingsData playFabUserSettingsData, PlayFabConnectionSettings playFabConnectionSettings, ITimeProvider timeProvider, PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData)
		{
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x112D2C0", Offset = "0x112D2C0", VA = "0x112D2C0", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x112D72C", Offset = "0x112D72C", VA = "0x112D72C")]
		private void CheckPendingRequest()
		{
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x112D664", Offset = "0x112D664", VA = "0x112D664")]
		private void ChangeState(PlayFabUserSettingsDataState nextState)
		{
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x112D520", Offset = "0x112D520", VA = "0x112D520")]
		private void RequestSettings()
		{
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x112D784", Offset = "0x112D784", VA = "0x112D784")]
		private void GotSettings(string json)
		{
		}
	}
	[Token(Token = "0x20001CF")]
	public class RatingMatchmakerSettingsHandler : ITickable
	{
		[Token(Token = "0x20001D0")]
		private enum State
		{
			[Token(Token = "0x4000739")]
			NotLoggedIn,
			[Token(Token = "0x400073A")]
			Ready,
			[Token(Token = "0x400073B")]
			Requesting,
			[Token(Token = "0x400073C")]
			Idle,
			[Token(Token = "0x400073D")]
			Error
		}

		[Token(Token = "0x400072F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly LoginData loginData;

		[Token(Token = "0x4000730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly RatingMatchmakerSettingsData ratingMatchmakerSettingsData;

		[Token(Token = "0x4000731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly RatingMatchmakerSettingsData tournamentMatchmakerSettingsData;

		[Token(Token = "0x4000732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x4000733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IPlayFabMatchmakingSettingsFacade playFabMatchmakingSettingsFacade;

		[Token(Token = "0x4000734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x4000735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly string queueName;

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private State state;

		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float latestStateChangeTimestamp;

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x112D810", Offset = "0x112D810", VA = "0x112D810")]
		public RatingMatchmakerSettingsHandler(LoginData loginData, RatingMatchmakerSettingsData ratingMatchmakerSettingsData, RatingMatchmakerSettingsData tournamentMatchmakerSettingsData, ITimeProvider timeProvider, IPlayFabMatchmakingSettingsFacade playFabMatchmakingSettingsFacade, PlayFabConnectionSettings playFabConnectionSettings, string queueName)
		{
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x112D874", Offset = "0x112D874", VA = "0x112D874", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x112DEE0", Offset = "0x112DEE0", VA = "0x112DEE0")]
		private void OnError()
		{
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x112DEE8", Offset = "0x112DEE8", VA = "0x112DEE8")]
		private void OnSuccess(string json)
		{
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x112E0A4", Offset = "0x112E0A4", VA = "0x112E0A4")]
		private void OnSuccessfulSet(string json)
		{
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x112E0F8", Offset = "0x112E0F8", VA = "0x112E0F8")]
		private void OnErrorSet()
		{
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x112DDB0", Offset = "0x112DDB0", VA = "0x112DDB0")]
		private void ChangeState(State nextState)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D1")]
	public class QueueSettings
	{
		[Token(Token = "0x400073E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int timeToWaitUntilBot;

		[Token(Token = "0x400073F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int giveUpAfterSeconds;

		[Token(Token = "0x4000740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int createTicketTimeout;

		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int cancelTimeout;

		[Token(Token = "0x4000742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int rematchBlockTime;

		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int minimalTimeBetweenReentry;

		[Token(Token = "0x4000744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int trainingModeUnlockAtLeagueTier;

		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int botOnOffUnlockAtLeagueTier;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int botRewardsOnOffUnlockAtLeagueTier;

		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int acceptedRegionPing;

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x112E0FC", Offset = "0x112E0FC", VA = "0x112E0FC")]
		public QueueSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D2")]
	public class RatingMatchmakerSettingsData
	{
		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public QueueSettings queueSettings;

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RetentionBotSettings retentionBotSettings;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerMatchmakingSettings playerMatchmakingSettings;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ShootoutDuelSettings shootoutDuelSettings;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool playerSettingsHasBeenUpdatedLocally;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float lastSetTime;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float lastGetTime;

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x112E124", Offset = "0x112E124", VA = "0x112E124")]
		public RatingMatchmakerSettingsData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D3")]
	public class ShootoutDuelSettings
	{
		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool shootoutDuelsEnabled;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool winterClassicDuelsEnabled;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool scrapperShootoutDuelsEnabled;

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x112E27C", Offset = "0x112E27C", VA = "0x112E27C")]
		public ShootoutDuelSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D4")]
	public class PlayerMatchmakingSettings
	{
		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool botRewardsActive;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool skipBots;

		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool trainingMode;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int trainingDifficulty;

		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool alwaysQueue;

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x112E284", Offset = "0x112E284", VA = "0x112E284")]
		public bool ShouldGiveRewardsForBotMatches()
		{
			return default(bool);
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x112E2A4", Offset = "0x112E2A4", VA = "0x112E2A4")]
		public bool AlwaysQueueEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x112E2CC", Offset = "0x112E2CC", VA = "0x112E2CC")]
		public bool HasNonDefaultSettings()
		{
			return default(bool);
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x112E26C", Offset = "0x112E26C", VA = "0x112E26C")]
		public PlayerMatchmakingSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D5")]
	public class RetentionBotSettings
	{
		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float retentionBotProbabilitySlopeCoefficient;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int retentionBotLeaguePointReductionPercentage;

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x112E254", Offset = "0x112E254", VA = "0x112E254")]
		public RetentionBotSettings()
		{
		}
	}
	[Token(Token = "0x20001D6")]
	public class PlayFabMatchmakingSettingsFacade : IPlayFabMatchmakingSettingsFacade
	{
		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x112E2F4", Offset = "0x112E2F4", VA = "0x112E2F4", Slot = "4")]
		public void GetMatchmakingSettings(Action<string> OnSuccess, Action OnError, string queueName)
		{
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x112E478", Offset = "0x112E478", VA = "0x112E478", Slot = "5")]
		public void SetMatchmakingSettings(PlayerMatchmakingSettings playerMatchmakingSettings, Action<string> OnSuccess, Action OnError)
		{
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x112E688", Offset = "0x112E688", VA = "0x112E688")]
		private void GetSettings(Action<string> OnSuccess, Action OnError, [Optional] GetQueueStatisticsResult stats)
		{
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x112E8B8", Offset = "0x112E8B8", VA = "0x112E8B8")]
		public PlayFabMatchmakingSettingsFacade()
		{
		}
	}
	[Token(Token = "0x20001DA")]
	public interface IPlayFabMatchmakingSettingsFacade
	{
		[Token(Token = "0x60005F0")]
		void GetMatchmakingSettings(Action<string> OnSuccess, Action OnError, string queueName);

		[Token(Token = "0x60005F1")]
		void SetMatchmakingSettings(PlayerMatchmakingSettings playerMatchmakingSettings, Action<string> onSuccessfulSet, Action onErrorSet);
	}
	[Token(Token = "0x20001DB")]
	public class RatingMatchmakingHandler : ITickable
	{
		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string multiplayerProtocolVersion;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MatchmakingData matchmakingData;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly NetworkRegionProvider networkRegionProvider;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PlayFabLoginData playFabLoginData;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly NetworkRegionSelector networkRegionSelector;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly NetworkingRegion forceRegion;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly MatchReportingData matchReportingData;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly IPlayFabMatchmakingFacade matchmakingFacade;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly PlayerStatisticsData playerStatisticsData;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly RatingMatchmakerSettingsData ratingMatchmakerSettingsData;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly IBotSelector botSelector;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly CharacterData characterData;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly ErrorMessageData errorMessageData;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly GameMessageUploadHandlerData gameMessageUploadHandlerData;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly GameData gameData;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private string currentMatchMakingTicketId;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float[] WAIT_BETWEEN_REQUESTS;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int currentRequestRetryIndex;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private string MATCHMAKING_ROOM_PREFIX;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private INetworkConnectionHandler networkConnectionHandler;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly PlayFabPlayerIdentitiesData playFabPlayerIdentitiesData;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public readonly Dictionary<string, string> roomCodeMatchMap;

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x112ED1C", Offset = "0x112ED1C", VA = "0x112ED1C")]
		public RatingMatchmakingHandler(string multiplayerProtocolVersion, MatchmakingData matchmakingData, LockerRoomGameStateData lockerRoomGameStateData, NetworkRegionProvider networkRegionProvider, PlayFabLoginData playFabLoginData, NetworkRegionSelector networkRegionSelector, MatchReportingData matchReportingData, IPlayFabMatchmakingFacade matchmakingFacade, PlayerStatisticsData playerStatisticsData, PlayFabProgressionData playFabProgressionData, RatingMatchmakerSettingsData ratingMatchmakerSettingsData, ITimeProvider timeProvider, INetworkConnectionHandler networkConnectionHandler, IgnisNetworkConnectionData networkConnectionData, ArenaGameStateData arenaGameStateData, IBotSelector botSelector, CharacterData characterData, ErrorMessageData errorMessageData, PlayFabPlayerIdentitiesData playFabPlayerIdentitiesData, GameMessageUploadHandlerData gameMessageUploadHandlerData, GameData gameData, IgnisTelemetry ignisTelemetry, NetworkingRegion forceRegion = NetworkingRegion.None)
		{
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x112EF04", Offset = "0x112EF04", VA = "0x112EF04")]
		private void GetOpponentEntityId(string roomCode)
		{
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0x112F094", Offset = "0x112F094", VA = "0x112F094")]
		internal void GotParticipantsFromMatch(string matchId, string roomCode, string playerOneId, string playerTwoId, JsonObject playerOneAttributes, JsonObject playerTwoAttributes)
		{
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x112FD8C", Offset = "0x112FD8C", VA = "0x112FD8C")]
		private bool PlayerHasBlockedOtherPlayer(JsonObject playerOneAttributes, string playerTwoId)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x112FE3C", Offset = "0x112FE3C", VA = "0x112FE3C")]
		private void StoreOpponentInfo(string roomCode, string opponendPlayerId, string opponentDisplayName, int opponentCharacterId, int opponentLeaguePoints)
		{
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x11301CC", Offset = "0x11301CC", VA = "0x11301CC")]
		private void CreateMatchmakingTicket()
		{
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x1130938", Offset = "0x1130938", VA = "0x1130938")]
		private string[] GetRegionsWithGoodEnoughPing()
		{
			return null;
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x1130888", Offset = "0x1130888", VA = "0x1130888")]
		private int GetStatsByName(string key, int defaultValue)
		{
			return default(int);
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x1131000", Offset = "0x1131000", VA = "0x1131000")]
		private void OnCreateMathcMakingTicketError(PlayFabError obj)
		{
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x113108C", Offset = "0x113108C", VA = "0x113108C")]
		public void CancelAllMatchmakingTickets()
		{
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x1131868", Offset = "0x1131868", VA = "0x1131868")]
		public void CancelOngoinglMatchmakingTickets()
		{
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x11317E0", Offset = "0x11317E0", VA = "0x11317E0")]
		private bool IsMatchmaking()
		{
			return default(bool);
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x1131A00", Offset = "0x1131A00", VA = "0x1131A00")]
		private void CancelSingelMatchmakingTicket(CancelMatchmakingTicketResult cancelMatchmakingTicketResult)
		{
		}

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x1131A80", Offset = "0x1131A80", VA = "0x1131A80")]
		private void ErrorCancelledMatchMaking(PlayFabError obj)
		{
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0x1131AD0", Offset = "0x1131AD0", VA = "0x1131AD0")]
		private void CancelledAllMatchMaking(CancelAllMatchmakingTicketsForPlayerResult obj)
		{
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0x1131B50", Offset = "0x1131B50", VA = "0x1131B50")]
		private void OnGetMathcMakingTicketError(PlayFabError obj)
		{
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0x1131B70", Offset = "0x1131B70", VA = "0x1131B70")]
		private void PlayFabErrorWarn(PlayFabError obj)
		{
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0x1131030", Offset = "0x1131030", VA = "0x1131030")]
		private void PlayFabError(PlayFabError obj, bool logAsError)
		{
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0x1131BC0", Offset = "0x1131BC0", VA = "0x1131BC0")]
		private void OnMatchmakingTicketCreated(CreateMatchmakingTicketResult obj)
		{
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0x1131CB8", Offset = "0x1131CB8", VA = "0x1131CB8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0x1133774", Offset = "0x1133774", VA = "0x1133774")]
		private void ReportDuelSettingsTelemetryIfApplicable()
		{
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0x1131698", Offset = "0x1131698", VA = "0x1131698")]
		private void RequestShowMatchmakingError()
		{
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0x1133128", Offset = "0x1133128", VA = "0x1133128")]
		private void EnqueueStartBotMessage()
		{
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0x11336C4", Offset = "0x11336C4", VA = "0x11336C4")]
		private string CreateMultiplayerRewardRandomSeed()
		{
			return null;
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0x11330C0", Offset = "0x11330C0", VA = "0x11330C0")]
		private static string GenerateRewardRandomSeed()
		{
			return null;
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0x11335F8", Offset = "0x11335F8", VA = "0x11335F8")]
		private void CreateRoom()
		{
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0x1133720", Offset = "0x1133720", VA = "0x1133720")]
		private void CheckMatchmakingReset()
		{
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0x11330EC", Offset = "0x11330EC", VA = "0x11330EC")]
		private void ResetTransientFlags()
		{
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0x1133524", Offset = "0x1133524", VA = "0x1133524")]
		private void CheckForOpponentIdentity()
		{
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0x11332E4", Offset = "0x11332E4", VA = "0x11332E4")]
		private void CheckMatchmakingTicket()
		{
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0x1133AE0", Offset = "0x1133AE0", VA = "0x1133AE0")]
		private void CheckStatusOnMatchMakingTicketStartIfMatched(string ticketStatus, string matchId)
		{
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0x1133C8C", Offset = "0x1133C8C", VA = "0x1133C8C")]
		private void GotMatchResponseOnTicket(string matchId)
		{
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0x113120C", Offset = "0x113120C", VA = "0x113120C")]
		private void ChangeState(MatchmakingState newState)
		{
		}
	}
	[Token(Token = "0x20001DC")]
	public enum MatchmakingState
	{
		[Token(Token = "0x400077D")]
		INITIALIZED,
		[Token(Token = "0x400077E")]
		MATCHMAKING_REQUESTED,
		[Token(Token = "0x400077F")]
		CANCEL_REQUESTED,
		[Token(Token = "0x4000780")]
		CREATING_MATCHMAKING_TICKET,
		[Token(Token = "0x4000781")]
		CANCELLED,
		[Token(Token = "0x4000782")]
		ERROR,
		[Token(Token = "0x4000783")]
		WAITING_FOR_MATCH,
		[Token(Token = "0x4000784")]
		CHECKING_TICKET_FOR_MATCH,
		[Token(Token = "0x4000785")]
		TIMED_OUT,
		[Token(Token = "0x4000786")]
		OPPONENT_FOUND,
		[Token(Token = "0x4000787")]
		CANCELLING,
		[Token(Token = "0x4000788")]
		CREATING_ROOM,
		[Token(Token = "0x4000789")]
		JOINING_ROOM,
		[Token(Token = "0x400078A")]
		JOINED,
		[Token(Token = "0x400078B")]
		TRAINING_BOT_STARTED,
		[Token(Token = "0x400078C")]
		RETENTION_BOT_STARTED,
		[Token(Token = "0x400078D")]
		WAITING_FOR_ARENA_TO_TERMINATE,
		[Token(Token = "0x400078E")]
		REENTER_MATCHMAKING,
		[Token(Token = "0x400078F")]
		REMATCH_BLOCK_BOT_STARTED
	}
	[Token(Token = "0x20001DD")]
	public class GlobalMatchmakingStateData
	{
		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<MatchmakingData> matchmakingDatas;

		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HashSet<MatchmakingState> activeStates;

		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly HashSet<MatchmakingState> matchStates;

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly HashSet<MatchmakingState> cancellableStates;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly HashSet<MatchmakingState> opponentFoundStates;

		[Token(Token = "0x6000615")]
		[Address(RVA = "0x1133DBC", Offset = "0x1133DBC", VA = "0x1133DBC")]
		public GlobalMatchmakingStateData(List<MatchmakingData> matchmakingDatas)
		{
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0x1133DE4", Offset = "0x1133DE4", VA = "0x1133DE4")]
		public void RequestCancel()
		{
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0x1133F2C", Offset = "0x1133F2C", VA = "0x1133F2C")]
		public bool HasPlayedAgainstMatchmakingBot()
		{
			return default(bool);
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0x1134084", Offset = "0x1134084", VA = "0x1134084")]
		public bool IsInMatchmakingGame()
		{
			return default(bool);
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0x1134244", Offset = "0x1134244", VA = "0x1134244")]
		public bool IsMatchmaking()
		{
			return default(bool);
		}

		[Token(Token = "0x600061A")]
		[Address(RVA = "0x1134404", Offset = "0x1134404", VA = "0x1134404")]
		public bool HasFoundOpponent()
		{
			return default(bool);
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0x11345C4", Offset = "0x11345C4", VA = "0x11345C4")]
		public bool IsCancellable()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001DE")]
	public class MatchmakingData
	{
		[Token(Token = "0x4000795")]
		public const string DuellingMatchmakingQueue = "GlobalRatingPlay";

		[Token(Token = "0x4000796")]
		public const string TournEventMatchmakingQueue = "3LossYouAreOut";

		[Token(Token = "0x4000797")]
		public const string ShootoutDuelMatchmakingQueue = "Shootout";

		[Token(Token = "0x4000798")]
		public const string ScrapperShootoutDuelMatchMakingQueue = "ScrapperShootout";

		[Token(Token = "0x4000799")]
		public const string WinterClassicmatchmakingQueue = "WinterClassic";

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MatchmakingState state;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool matchmakingRequested;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool cancelRequested;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float lastTicketRequestTimestamp;

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float latestMatchmakingStartTimestamp;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float latestTicketCreationTimestamp;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool hasOpponentPlayerId;

		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string opponentPlayerId;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly Dictionary<MatchmakingState, string> matchmakingStateToString;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string currentRoomCode;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public NetworkingRegion currentRoomRegion;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool botStarted;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool hasPlayedAgainstMatchmakingBot;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int joinCreateRoomRetryCount;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool applicationIsPaused;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float applicationPauseStatusTimestamp;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int opponentCharacterId;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float cancelInitiatedTimestamp;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public RematchBlockList rematchBlockList;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool rematchBlockMatchFound;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool rematchBlockBot;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string queueName;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameplayRules gameplayRules;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string currentMatchId;

		[Token(Token = "0x600061D")]
		[Address(RVA = "0x1134970", Offset = "0x1134970", VA = "0x1134970")]
		public MatchmakingData(string queueName)
		{
		}
	}
	[Token(Token = "0x20001DF")]
	public class RematchBlockList
	{
		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<RematchBlockRecords> records;

		[Token(Token = "0x600061E")]
		[Address(RVA = "0x1134B24", Offset = "0x1134B24", VA = "0x1134B24")]
		public RematchBlockList()
		{
		}
	}
	[Token(Token = "0x20001E0")]
	public class RematchBlockRecords
	{
		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string playerId;

		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float timestamp;

		[Token(Token = "0x600061F")]
		[Address(RVA = "0x1130194", Offset = "0x1130194", VA = "0x1130194")]
		public RematchBlockRecords(string playerId, float timestamp)
		{
		}
	}
	[Token(Token = "0x20001E1")]
	public interface IPlayFabMatchmakingFacade
	{
		[Token(Token = "0x6000620")]
		void GetParticipantsFromMatch(string matchId, string roomCode, string queueName, Action<string, string, string, string, JsonObject, JsonObject> gotParticipantsFromMatch, Action<PlayFabError> playFabError);

		[Token(Token = "0x6000621")]
		void CreateMatchmakingTicket(string region, int myRating, string myDisplayName, int myCharacter, string queueName, string multiplayerProtocolVersion, Action<CreateMatchmakingTicketResult> onMatchmakingTicketCreated, Action<PlayFabError> onCreateMathcMakingTicketError, int myLeaguePoints, int myLeagueTier, string rematchBlockString, int queueSpecificTournamentWins, int queueSpecificTournamentLosses, string[] acceptedRegions);

		[Token(Token = "0x6000622")]
		void CancelAllMatchmakingTickets(string queueName, Action<CancelAllMatchmakingTicketsForPlayerResult> cancelledAllMatchMaking, Action<PlayFabError> errorCancelledMatchMaking);

		[Token(Token = "0x6000623")]
		void CancelMatchmakingTicket(string queueName, string currentMatchMakingTicketId, Action<CancelMatchmakingTicketResult> cancelSingelMatchmakingTicket, Action<PlayFabError> errorCancelledMatchMaking);

		[Token(Token = "0x6000624")]
		void GetMatchmakingTicket(string currentMatchMakingTicketId, string queueName, Action<string, string> checkStatusOnMatchMakingTicketStartIfMatched, Action<PlayFabError> onGetMathcMakingTicketError);
	}
	[Token(Token = "0x20001E2")]
	public class PlayFabMatchmakingFacade : IPlayFabMatchmakingFacade
	{
		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PlayFabLoginData playFabLoginData;

		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private NetworkRegionProvider networkRegionProvider;

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RatingMatchmakerSettingsData ratingMatchmakerSettingsData;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x6000625")]
		[Address(RVA = "0x1134BA0", Offset = "0x1134BA0", VA = "0x1134BA0")]
		public PlayFabMatchmakingFacade(PlayFabLoginData playFabLoginData, NetworkRegionProvider networkRegionProvider, RatingMatchmakerSettingsData ratingMatchmakerSettingsData, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0x1134BE0", Offset = "0x1134BE0", VA = "0x1134BE0", Slot = "4")]
		public void GetParticipantsFromMatch(string matchId, string roomCode, string queueName, Action<string, string, string, string, JsonObject, JsonObject> gotParticipantsFromMatch, Action<PlayFabError> playFabError)
		{
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0x1134EE0", Offset = "0x1134EE0", VA = "0x1134EE0", Slot = "5")]
		public void CreateMatchmakingTicket(string region, int myRating, string myDisplayName, int myCharacter, string queueName, string multiplayerProtocolVersion, Action<CreateMatchmakingTicketResult> onMatchmakingTicketCreated, Action<PlayFabError> onCreateMathcMakingTicketError, int myLeaguePoints, int myLeagueTier, string rematchBlockString, int queueSpecificTournamentWins, int queueSpecificTournamentLosses, string[] acceptedRegions)
		{
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0x1135798", Offset = "0x1135798", VA = "0x1135798", Slot = "6")]
		public void CancelAllMatchmakingTickets(string queueName, Action<CancelAllMatchmakingTicketsForPlayerResult> cancelledAllMatchMaking, Action<PlayFabError> errorCancelledMatchMaking)
		{
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0x1135890", Offset = "0x1135890", VA = "0x1135890", Slot = "7")]
		public void CancelMatchmakingTicket(string queueName, string currentMatchMakingTicketId, Action<CancelMatchmakingTicketResult> cancelSingelMatchmakingTicket, Action<PlayFabError> errorCancelledMatchMaking)
		{
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0x1135AA0", Offset = "0x1135AA0", VA = "0x1135AA0", Slot = "8")]
		public void GetMatchmakingTicket(string currentMatchMakingTicketId, string queueName, Action<string, string> checkStatusOnMatchMakingTicketStartIfMatched, Action<PlayFabError> onGetMathcMakingTicketError)
		{
		}
	}
	[Token(Token = "0x20001E5")]
	public class ItemOwnership
	{
		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isLocked;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool isAvailableForUnlocking;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool isPurchasable;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool isBeingPurchased;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool isOwned;

		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool isUsed;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public bool isVisible;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int requiredLevel;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int price;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isPremium;

		[Token(Token = "0x600062F")]
		[Address(RVA = "0x1135DF0", Offset = "0x1135DF0", VA = "0x1135DF0")]
		public ItemOwnership(bool isUsed, bool isOwned, bool isPurchasable, bool isBeingPurchased, bool isVisible, bool isLocked, int price, bool isPremium)
		{
		}
	}
	[Token(Token = "0x20001E6")]
	public class ShopData
	{
		[Token(Token = "0x20001E7")]
		public enum CatalogDownloadState
		{
			[Token(Token = "0x40007DE")]
			NotRequested,
			[Token(Token = "0x40007DF")]
			Requesting,
			[Token(Token = "0x40007E0")]
			Loaded,
			[Token(Token = "0x40007E1")]
			Error
		}

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int inGameCoins;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int premiumCoins;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly List<CoinItem> coinItems;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Dictionary<string, CoinItem> coinItemLookup;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly Queue<BuyItemRequest> buyItemRequest;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly List<BuyItemRequest> processingBuyItemRequest;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly List<BuyItemRequest> finishedBuyItemRequest;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly Queue<BuyToolRequest> buyToolRequest;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly List<BuyToolRequest> processingBuyToolRequest;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly List<BuyToolRequest> finishedBuyToolRequest;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public readonly Queue<BuyCoinItemRequest> buyCoinsRequest;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public BuyCoinItemRequest currentBuyCoinsRequest;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BuyItemRequest currentBuyItemRequest;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public CatalogDownloadState catalogDownloadState;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public CatalogDownloadState productDownloadState;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<CatalogItem> catalogItemsList;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public PurchaseProductState purchaseProductState;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public TransactionConfirmationState transactionConfirmationState;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float lastStoreTransactionCheck;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool coinItemsIsDirty;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		public bool isProcessingPurchase;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float lastCatalogUpdate;

		[Token(Token = "0x6000630")]
		[Address(RVA = "0x1135E6C", Offset = "0x1135E6C", VA = "0x1135E6C")]
		public ShopData()
		{
		}
	}
	[Token(Token = "0x20001E8")]
	public class BuyItemRequest
	{
		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string itemId;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int price;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Currency currency;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BuyRequestState state;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ErrorCode errorCode;

		[Token(Token = "0x6000631")]
		[Address(RVA = "0x1136128", Offset = "0x1136128", VA = "0x1136128")]
		public BuyItemRequest(string itemId, int price = 0, Currency currency = Currency.Freemium)
		{
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0x1136164", Offset = "0x1136164", VA = "0x1136164")]
		public void PopulateForSending(int price, Currency currency)
		{
		}
	}
	[Token(Token = "0x20001E9")]
	public class BuyToolRequest
	{
		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ToolName toolName;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int price;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Currency currency;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public BuyRequestState state;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ErrorCode errorCode;

		[Token(Token = "0x6000633")]
		[Address(RVA = "0x113616C", Offset = "0x113616C", VA = "0x113616C")]
		public BuyToolRequest(ToolName toolName)
		{
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0x1136194", Offset = "0x1136194", VA = "0x1136194")]
		public void PopulateForSending(int price, Currency currency)
		{
		}
	}
	[Token(Token = "0x20001EA")]
	public enum BuyRequestState
	{
		[Token(Token = "0x40007ED")]
		Requested,
		[Token(Token = "0x40007EE")]
		WaitingForExternalResponse,
		[Token(Token = "0x40007EF")]
		Success,
		[Token(Token = "0x40007F0")]
		Error,
		[Token(Token = "0x40007F1")]
		Canceled,
		[Token(Token = "0x40007F2")]
		Null
	}
	[Token(Token = "0x20001EB")]
	public class BuyCoinItemRequest : BuyItemRequest
	{
		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly CoinItem coinItem;

		[Token(Token = "0x6000635")]
		[Address(RVA = "0x113619C", Offset = "0x113619C", VA = "0x113619C")]
		public BuyCoinItemRequest(CoinItem coinItem, Currency currency = Currency.Premium)
		{
		}
	}
	[Token(Token = "0x20001EC")]
	public class ShopHandler : ITickable, ILateTickable
	{
		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ShopData shopData;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DeckData deckData;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Dictionary<ToolName, ToolSetting> toolSettings;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CoinItemSettings coinItemSettings;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly LoginData loginData;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ToolViewData toolViewData;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly IPlayFabShopFacade playFabShopFacade;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly PlayerInfoPanelData playerInfoPanelData;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly GameDesignTrackingData gameDesignTrackingData;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly PlayFabTitleData playFabTitleData;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly OwnershipData ownershipData;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private RequestAvailableProducts productRequest;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private RequestPurchaseOfProduct purchaseOfProductRequest;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RequestPurchasesMadeByUser transactionRequest;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private RequestConsumptionOfProduct consumptionRequest;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public readonly string[] iapProductIds;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool currencyShopInitialized;

		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float transactionTimeout;

		[Token(Token = "0x6000636")]
		[Address(RVA = "0x11361E8", Offset = "0x11361E8", VA = "0x11361E8")]
		public ShopHandler(ShopData shopData, DeckData deckData, CustomizationData customizationData, Dictionary<ToolName, ToolSetting> toolSettings, CoinItemSettings coinItemSettings, LoginData loginData, ToolViewData toolViewData, IPlayFabShopFacade playFabShopFacade, ITimeProvider timeProvider, PlayFabProgressionData playFabProgressionData, PlayerInfoPanelData playerInfoPanelData, PlayFabConnectionSettings playFabConnectionSettings, GameDesignTrackingData gameDesignTrackingData, PlayFabTitleData playFabTitleData, OwnershipData ownershipData, MenuStateData menuStateData)
		{
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0x1136658", Offset = "0x1136658", VA = "0x1136658", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x1136E98", Offset = "0x1136E98", VA = "0x1136E98")]
		private void InitializeCurrencyShop()
		{
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x1137EA4", Offset = "0x1137EA4", VA = "0x1137EA4")]
		private void OnPurchaseStatusCallback(OnStatus onStatus)
		{
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x1138074", Offset = "0x1138074", VA = "0x1138074")]
		public void SimulateBuyCoinsRequestFailure()
		{
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0x1138178", Offset = "0x1138178", VA = "0x1138178")]
		private void UpdateWallet(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0x113826C", Offset = "0x113826C", VA = "0x113826C", Slot = "5")]
		public void LateTick()
		{
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x113775C", Offset = "0x113775C", VA = "0x113775C")]
		private void BuyTool(BuyToolRequest request)
		{
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0x11370E4", Offset = "0x11370E4", VA = "0x11370E4")]
		private void BuyItem(BuyItemRequest request)
		{
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0x11372C4", Offset = "0x11372C4", VA = "0x11372C4")]
		private void BuyItemSuccess(BuyItemRequest request)
		{
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0x11375CC", Offset = "0x11375CC", VA = "0x11375CC")]
		private void ErrorByingItem(BuyItemRequest request)
		{
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0x1138288", Offset = "0x1138288", VA = "0x1138288")]
		private void MarkOwnerShipModified()
		{
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0x1137900", Offset = "0x1137900", VA = "0x1137900")]
		private void BuyToolSuccess(BuyToolRequest request)
		{
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0x1137CD8", Offset = "0x1137CD8", VA = "0x1137CD8")]
		private void ErrorByingTool(BuyToolRequest request)
		{
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0x1138338", Offset = "0x1138338", VA = "0x1138338")]
		public static void ProcessVirtualCurrencyResponse(Dictionary<string, int> userVirtualCurrency, ShopData shopData)
		{
		}
	}
}
namespace RG.Ignis.SinglePlayer.StoryEvent
{
	[Token(Token = "0x20001ED")]
	public class StoryMenuReference : MonoBehaviour
	{
		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas[] canvas;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CanvasGroup canvasGroup;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public StageIconPrefabReference progressionPortraitPrefab;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public StageIconPrefabReference progressionBossPortrait;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ObjectiveViewReference objectiveViewReference;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public StoryRewardReference storyRewardReference;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Left Section")]
		public Image heroArtImage;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public IgnisDropdown actListDropDown;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject actListDropContainer;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LocalizedText actDescriptionText;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Center Section")]
		public Transform centerGridHolder;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Button actionEventButton;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public LocalizedText actionEventButtonText;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public LocalizedText stageText;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform objectivesContainer;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject centerConnectorLine;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("Right Section")]
		public Transform rightGridHolder;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Image targeArtImage;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public ParticleSystem targetImageClaimEffect;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public LocalizedText defeatedText;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public LocalizedText targetNameText;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Transform rewardsGridHolder;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject rightConnectorLine;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform storyDisguiseTransform;

		[Token(Token = "0x6000645")]
		[Address(RVA = "0x1138520", Offset = "0x1138520", VA = "0x1138520")]
		public StoryMenuReference()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	[CreateAssetMenu(fileName = "AnnouncerSpawnSettings", menuName = "Settings/StoryEvent/AnnouncerSpawnSettings")]
	public class AnnouncerSpawnSettings : ScriptableObject
	{
		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool spawnAnnouncer;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string announcerSkinId;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject microphone;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool spawnHat;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string hatSkinId;

		[Token(Token = "0x6000646")]
		[Address(RVA = "0x1138528", Offset = "0x1138528", VA = "0x1138528")]
		public AnnouncerSpawnSettings()
		{
		}
	}
	[Token(Token = "0x20001EF")]
	public class StoryEventGameStateData
	{
		[Token(Token = "0x20001F0")]
		public enum GameState
		{
			[Token(Token = "0x400082D")]
			Enter,
			[Token(Token = "0x400082E")]
			LoadingScene,
			[Token(Token = "0x400082F")]
			SceneLoaded,
			[Token(Token = "0x4000830")]
			SpawningPlayer,
			[Token(Token = "0x4000831")]
			PlayersSpawned,
			[Token(Token = "0x4000832")]
			ReadyToSpawnAnnouncer,
			[Token(Token = "0x4000833")]
			AnnouncerSpawned,
			[Token(Token = "0x4000834")]
			ReadyToSpawnBot,
			[Token(Token = "0x4000835")]
			BotSpawned,
			[Token(Token = "0x4000836")]
			StartMatch,
			[Token(Token = "0x4000837")]
			Match,
			[Token(Token = "0x4000838")]
			MatchEnded,
			[Token(Token = "0x4000839")]
			CleanUp,
			[Token(Token = "0x400083A")]
			Exit,
			[Token(Token = "0x400083B")]
			StartingCutScene,
			[Token(Token = "0x400083C")]
			PlayingCutScene
		}

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public StartStoryEventRequest nextStoryEventRequest;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public StartStoryEventRequest currentStoryEventRequest;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameState state;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public StoryEventTriggerSettings currentActiveTriggerSettings;

		[Token(Token = "0x6000647")]
		[Address(RVA = "0x1138530", Offset = "0x1138530", VA = "0x1138530")]
		public StoryEventGameStateData()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	public class StoryEventGameState : global::Ignis.IGameState
	{
		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly StoryEventGameStateData storyEventGameStateData;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<ITickable> storyEventGameStatePreTickHandlers;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<ITickable> storyEventGameStatePostTickHandlers;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<IFixedTickable> storyEventGameStateFixedTickHandlers;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly List<ILateTickable> storyEventGameStateLateTickHandlers;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly GameData gameData;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly IMessageSender messageSender;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly CharacterData characterData;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly AiData aiData;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly IAIController aiController;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly PlatformData platformData;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly BannerData bannerData;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly IMatchHandler matchHandler;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly IDamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly IGameMechanicStateHelper gameMechanicStateHelper;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly ICageHandler cageHandler;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly ToolSpawnAlgorithmData toolSpawnAlgorithmData;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly CutsceneData cutsceneData;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly StoryData storyData;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly StoryEventProgressData storyEventProgressData;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly SceneHandlerData sceneHandlerData;

		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly BarEntranceData barEntranceData;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly LoginData loginData;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private readonly ImpactHandlerData impactHandlerData;

		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private readonly GameDesignTrackingData gameDesignTrackingData;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private MatchHandlerState lastSeenMatchHandlerState;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private string currentMatchId;

		[Token(Token = "0x6000648")]
		[Address(RVA = "0x1138538", Offset = "0x1138538", VA = "0x1138538")]
		public StoryEventGameState(StoryEventGameStateData storyEventGameStateData, List<ITickable> storyEventGameStatePreTickHandlers, List<ITickable> storyEventGameStatePostTickHandlers, List<IFixedTickable> storyEventGameStateFixedTickHandlers, List<ILateTickable> storyEventGameStateLateTickHandlers, GameData gameData, IgnisNetworkConnectionData networkConnectionData, IMessageSender messageSender, CharacterData characterData, GameMessageFactory gameMessageFactory, AiData aiData, IAIController aiController, PlatformData platformData, BannerData bannerData, IMatchHandler matchHandler, MatchHandlerData matchHandlerData, IDamageRecordKeeper damageRecordKeeper, IGameMechanicStateHelper gameMechanicStateHelper, ICageHandler cageHandler, ToolSpawnAlgorithmData toolSpawnAlgorithmData, IRoomTimeProvider roomTimeProvider, CutsceneData cutsceneData, StoryData storyData, StoryEventProgressData storyEventProgressData, SceneHandlerData sceneHandlerData, BarEntranceData barEntranceData, LoginData loginData, ImpactHandlerData impactHandlerData, ArenaGameStateData arenaGameStateData, GameDesignTrackingData gameDesignTrackingData)
		{
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0x1138664", Offset = "0x1138664", VA = "0x1138664", Slot = "4")]
		public void Initalize()
		{
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0x1138764", Offset = "0x1138764", VA = "0x1138764")]
		public void SetupDebug(global::Ignis.DebugMenu debugMenu, StoryEventsSettings storyEventsSettings, LockerRoomGameStateData lockerRoomGameStateData)
		{
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0x11387E8", Offset = "0x11387E8", VA = "0x11387E8")]
		private void StartDebugEvent(StoryEventSettings storyEventSettings, LockerRoomGameStateData lockerRoomGameStateData)
		{
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0x11388B8", Offset = "0x11388B8", VA = "0x11388B8", Slot = "6")]
		public EntryPoint.GameState Tick()
		{
			return default(EntryPoint.GameState);
		}

		[Token(Token = "0x600064D")]
		[Address(RVA = "0x11399D8", Offset = "0x11399D8", VA = "0x11399D8")]
		private void SetBotEventSpecifics(StoryEventSettings eventSettings)
		{
		}

		[Token(Token = "0x600064E")]
		[Address(RVA = "0x113A590", Offset = "0x113A590", VA = "0x113A590")]
		private static void SpawnAttachment(GameObject attachment, Transform parent)
		{
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0x113A2F4", Offset = "0x113A2F4", VA = "0x113A2F4")]
		private void CheckPostMatchAction()
		{
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0x113A408", Offset = "0x113A408", VA = "0x113A408")]
		private bool CheckCurrentStoryTriggers()
		{
			return default(bool);
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0x113A66C", Offset = "0x113A66C", VA = "0x113A66C")]
		private bool TriggerCutscene(StoryEventTriggerSettings storyEventTrigger)
		{
			return default(bool);
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0x113AB14", Offset = "0x113AB14", VA = "0x113AB14")]
		private List<TrackObject> GetAllCutsceneTrackedObjects()
		{
			return null;
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0x113A648", Offset = "0x113A648", VA = "0x113A648")]
		private bool CheckBeforeIntroTrigger()
		{
			return default(bool);
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0x113A838", Offset = "0x113A838", VA = "0x113A838")]
		private bool CheckRoundEndTrigger(bool playerShouldBeWinner)
		{
			return default(bool);
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0x113A8A4", Offset = "0x113A8A4", VA = "0x113A8A4")]
		private void TrackRoundEnd(bool isWinner)
		{
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0x1139B60", Offset = "0x1139B60", VA = "0x1139B60")]
		private void TrackEndMatch(bool isWinner, MatchEndReason endReason)
		{
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0x113AAD4", Offset = "0x113AAD4", VA = "0x113AAD4")]
		private bool CheckMatchEndTrigger(bool playerShouldBeWinner)
		{
			return default(bool);
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0x113A340", Offset = "0x113A340", VA = "0x113A340")]
		private void ChangeState(StoryEventGameStateData.GameState newState)
		{
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0x11391CC", Offset = "0x11391CC", VA = "0x11391CC")]
		private void ResetAndSpawnLocalPlayer()
		{
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0x1139814", Offset = "0x1139814", VA = "0x1139814")]
		private void SpawnBot(BotSettings ai)
		{
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0x11395C8", Offset = "0x11395C8", VA = "0x11395C8")]
		private bool SpawnAnnouncer(AnnouncerSpawnSettings announcer)
		{
			return default(bool);
		}

		[Token(Token = "0x600065C")]
		[Address(RVA = "0x11396D0", Offset = "0x11396D0", VA = "0x11396D0")]
		private void SpawnMicrophone(AnnouncerSpawnSettings announcerSpawnSettings)
		{
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0x113A218", Offset = "0x113A218", VA = "0x113A218")]
		private void CleanUpAnnouncer(AnnouncerSpawnSettings announcerSpawnSettings)
		{
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0x1139DB4", Offset = "0x1139DB4", VA = "0x1139DB4")]
		private void CleanUpMatch()
		{
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0x113ADE4", Offset = "0x113ADE4", VA = "0x113ADE4", Slot = "5")]
		public void PreTick()
		{
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0x113AEE0", Offset = "0x113AEE0", VA = "0x113AEE0", Slot = "7")]
		public void PostTick()
		{
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0x113AFDC", Offset = "0x113AFDC", VA = "0x113AFDC", Slot = "8")]
		public void LateTick()
		{
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0x113B0D8", Offset = "0x113B0D8", VA = "0x113B0D8", Slot = "9")]
		public void FixedTick()
		{
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0x113B1D4", Offset = "0x113B1D4", VA = "0x113B1D4", Slot = "11")]
		public void Terminate()
		{
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0x113B1D8", Offset = "0x113B1D8", VA = "0x113B1D8", Slot = "10")]
		public void OnApplicationPause(bool isPaused)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001F2")]
	public class BotEventSettings
	{
		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject leftCutsceneHandAttachment;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject rightCutsceneHandAttachment;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ImpactDamageMultiplier[] impactImmunities;

		[Token(Token = "0x6000665")]
		[Address(RVA = "0x113B1DC", Offset = "0x113B1DC", VA = "0x113B1DC")]
		public BotEventSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001F3")]
	public struct ImpactDamageMultiplier
	{
		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ImpactTypes impactTypes;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float multiplier;

		[Token(Token = "0x6000666")]
		[Address(RVA = "0x113B234", Offset = "0x113B234", VA = "0x113B234")]
		public ImpactDamageMultiplier(ImpactTypes impactTypes, float multiplier)
		{
		}
	}
	[Token(Token = "0x20001F4")]
	[CreateAssetMenu(menuName = "Settings/StoryEvent/EventSetting", fileName = "StoryEventSettings")]
	public class StoryEventSettings : ScriptableObject
	{
		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string storyEventObjectiveId;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnnouncerSpawnSettings announcerSpawnSettings;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BotSettings botSettings;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<StoryEventTriggerSettings> triggers;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int scene;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<ToolName> playerCustomLoadOut;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BotEventSettings botEventSettings;

		[Token(Token = "0x6000667")]
		[Address(RVA = "0x113B240", Offset = "0x113B240", VA = "0x113B240")]
		public StoryEventSettings(string storyEventObjectiveId, BotSettings botSettings, List<StoryEventTriggerSettings> triggers, int scene, AnnouncerSpawnSettings announcerSpawnSettings, List<ToolName> playerCustomLoadOut)
		{
		}

		[Token(Token = "0x6000668")]
		[Address(RVA = "0x1139450", Offset = "0x1139450", VA = "0x1139450")]
		public List<ToolSet> GenerateToolSets()
		{
			return null;
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0x113B334", Offset = "0x113B334", VA = "0x113B334")]
		private StoryEventSettings()
		{
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0x113B3E4", Offset = "0x113B3E4", VA = "0x113B3E4")]
		public static StoryEventSettings EmptyStory()
		{
			return null;
		}
	}
	[Token(Token = "0x20001F5")]
	[CreateAssetMenu(menuName = "Settings/StoryEvent/StoryEventsSettings", fileName = "StoryEventsSettings")]
	public class StoryEventsSettings : ScriptableObject
	{
		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Campaign List of Acts")]
		public List<Act> acts;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Story/Duels Events List")]
		public List<StoryEventSettings> events;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CampaignViewSettings campaignViewSettings;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public StoryGuidedTutorialSettings storyGuidedTutorialSettings;

		[Token(Token = "0x600066B")]
		[Address(RVA = "0x113B43C", Offset = "0x113B43C", VA = "0x113B43C")]
		public StoryEventsSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001F6")]
	public class StoryEventTriggerSettings
	{
		[Token(Token = "0x20001F7")]
		public enum Condition
		{
			[Token(Token = "0x4000872")]
			BeforeMatchStart,
			[Token(Token = "0x4000873")]
			PlayerWonRound,
			[Token(Token = "0x4000874")]
			PlayerLostRound,
			[Token(Token = "0x4000875")]
			PlayerWonMatch,
			[Token(Token = "0x4000876")]
			PlayerLostMatch
		}

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Condition condition;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string cutScene;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StoryEventGameStateData.GameState stateWhenDone;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool fadeInAfterCutscene;

		[Token(Token = "0x600066C")]
		[Address(RVA = "0x113B4B8", Offset = "0x113B4B8", VA = "0x113B4B8")]
		public StoryEventTriggerSettings(Condition condition, string cutScene, StoryEventGameStateData.GameState stateWhenDone)
		{
		}
	}
}
namespace RG.Ignis.Keyboard
{
	[Serializable]
	[Token(Token = "0x20001F8")]
	public class VrKeyboardSettings
	{
		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 keyboardOffset;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KeyboardSettings alphanumericSettings;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public KeyboardSettings alphanumericBayTekSettings;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public KeyboardSettings alphanumericIssueReportSettings;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public KeyboardSettings numericSettings;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public KeyboardSettings numericAutoSpectatorSettings;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public KeyboardSettings numericSelfSubmitSettings;

		[Token(Token = "0x600066D")]
		[Address(RVA = "0x113B4F8", Offset = "0x113B4F8", VA = "0x113B4F8")]
		public VrKeyboardSettings()
		{
		}
	}
	[Token(Token = "0x20001F9")]
	public struct KeyboardRequest
	{
		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string caption;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string initialText;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Action<string> onSubmit;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Action onCancel;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Action<string> onWordChanged;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly KeyboardType keyboardType;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly KeyboardControllerData keyboardControllerData;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly RenderMode renderMode;

		[Token(Token = "0x600066E")]
		[Address(RVA = "0x113B500", Offset = "0x113B500", VA = "0x113B500")]
		public KeyboardRequest(string caption, string initialText, Action<string> onSubmit, Action onCancel, KeyboardType keyboardType, [Optional] KeyboardControllerData keyboardControllerData, [Optional] Action<string> onWordChanged, RenderMode renderMode = RenderMode.WorldSpace)
		{
		}
	}
	[Token(Token = "0x20001FA")]
	public class KeyboardControllerData
	{
		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string errorText;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string infoText;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isInteractable;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool isDone;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int characterLimit;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool exitOnSubmit;

		[Token(Token = "0x600066F")]
		[Address(RVA = "0x113B520", Offset = "0x113B520", VA = "0x113B520")]
		public KeyboardControllerData()
		{
		}
	}
	[Token(Token = "0x20001FB")]
	public struct SelfSubmitKeyboardRequest
	{
		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string caption;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string initialText;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Action onCancel;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Action<string> onWordChanged;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly KeyboardType keyboardType;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly KeyboardControllerData keyboardController;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly RenderMode renderMode;

		[Token(Token = "0x6000670")]
		[Address(RVA = "0x113B528", Offset = "0x113B528", VA = "0x113B528")]
		public SelfSubmitKeyboardRequest(string caption, string initialText, Action onCancel, Action<string> onWordChanged, KeyboardType keyboardType, KeyboardControllerData keyboardController, RenderMode renderMode = RenderMode.WorldSpace)
		{
		}
	}
	[Token(Token = "0x20001FC")]
	public enum KeyboardType
	{
		[Token(Token = "0x4000894")]
		Alphanumeric,
		[Token(Token = "0x4000895")]
		AlphanumericIssueReport,
		[Token(Token = "0x4000896")]
		Numeric
	}
	[Token(Token = "0x20001FD")]
	public class VrKeyboardData
	{
		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool keyboardIsActive;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<KeyboardRequest> requests;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Queue<SelfSubmitKeyboardRequest> selfSubmitRequests;

		[Token(Token = "0x6000671")]
		[Address(RVA = "0x113B540", Offset = "0x113B540", VA = "0x113B540")]
		public VrKeyboardData()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	public class VrKeyboardHandler : ITickable
	{
		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly VrKeyboardData vrKeyboardData;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly VrKeyboardSettings vrKeyboardSettings;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly AnimationStateHandlerData animationStateHandlerData;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private KeyboardReference alphanumericKeyboardReference;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private KeyboardReference alphanumericBayTekKeyboardReference;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private KeyboardReference alphanumericIssueReportKeyboardReference;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private KeyboardReference numericKeyboardReference;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private KeyboardReference numericAutoSpectatorKeyboardReference;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private KeyboardReference numericSelfSubmitKeyboardReference;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Action<string> onSubmit;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Action onCancel;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Action<string> onWordChanged;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public KeyboardControllerData keyboardControllerData;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool activeRequest;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private KeyboardReference currentKeyboard;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private string currentInputText;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AnimatorStateData currentHideAnimation;

		[Token(Token = "0x40008AE")]
		private const string EmptyLetter = "";

		[Token(Token = "0x40008AF")]
		private const string VoidKey = "|";

		[Token(Token = "0x6000672")]
		[Address(RVA = "0x113B608", Offset = "0x113B608", VA = "0x113B608")]
		public VrKeyboardHandler(VrKeyboardData vrKeyboardData, VrKeyboardSettings vrKeyboardSettings, MenuStateData menuStateData, AnimationStateHandlerData animationStateHandlerData, BayTekData bayTekData, AutoSpectateData autoSpectateData)
		{
		}

		[Token(Token = "0x6000673")]
		[Address(RVA = "0x113B65C", Offset = "0x113B65C", VA = "0x113B65C")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6000674")]
		[Address(RVA = "0x113B660", Offset = "0x113B660", VA = "0x113B660")]
		public void Setup()
		{
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0x113C1D4", Offset = "0x113C1D4", VA = "0x113C1D4")]
		private void SetKeyboardActive(KeyboardReference keyboardReference, bool isActive)
		{
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0x113BCE4", Offset = "0x113BCE4", VA = "0x113BCE4")]
		private void SetupKeyboardEvents(KeyboardReference keyboardReference)
		{
		}

		[Token(Token = "0x6000677")]
		[Address(RVA = "0x113C234", Offset = "0x113C234", VA = "0x113C234", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0x113C764", Offset = "0x113C764", VA = "0x113C764")]
		private void ListenKeyboardEntry()
		{
		}

		[Token(Token = "0x6000679")]
		[Address(RVA = "0x113C48C", Offset = "0x113C48C", VA = "0x113C48C")]
		private void CheckAndActivateKeyboardRequest()
		{
		}

		[Token(Token = "0x600067A")]
		[Address(RVA = "0x113C600", Offset = "0x113C600", VA = "0x113C600")]
		private void CheckAndActivateSelfSubmitKeyboardRequest()
		{
		}

		[Token(Token = "0x600067B")]
		[Address(RVA = "0x113CF98", Offset = "0x113CF98", VA = "0x113CF98")]
		private void ShowKeyboard(KeyboardReference keyboard, string caption, string initialText, RenderMode renderMode)
		{
		}

		[Token(Token = "0x600067C")]
		[Address(RVA = "0x113CA58", Offset = "0x113CA58", VA = "0x113CA58")]
		private void SetInteractableStateOfKeys(bool isInteractable)
		{
		}

		[Token(Token = "0x600067D")]
		[Address(RVA = "0x113CF18", Offset = "0x113CF18", VA = "0x113CF18")]
		private void Submit()
		{
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0x113CF6C", Offset = "0x113CF6C", VA = "0x113CF6C")]
		private void Cancel()
		{
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0x113CD84", Offset = "0x113CD84", VA = "0x113CD84")]
		private void CloseCurrentKeyboardRequest()
		{
		}

		[Token(Token = "0x6000680")]
		[Address(RVA = "0x113D274", Offset = "0x113D274", VA = "0x113D274")]
		private void ClearText()
		{
		}

		[Token(Token = "0x6000681")]
		[Address(RVA = "0x113CEDC", Offset = "0x113CEDC", VA = "0x113CEDC")]
		private void DeleteLetter()
		{
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0x113D2C8", Offset = "0x113D2C8", VA = "0x113D2C8")]
		private void ShiftToggle()
		{
		}

		[Token(Token = "0x6000683")]
		[Address(RVA = "0x113D18C", Offset = "0x113D18C", VA = "0x113D18C")]
		private void AdjustCaseOnKeys()
		{
		}

		[Token(Token = "0x6000684")]
		[Address(RVA = "0x113D2EC", Offset = "0x113D2EC", VA = "0x113D2EC")]
		private void LetterPressed(int index)
		{
		}

		[Token(Token = "0x6000685")]
		[Address(RVA = "0x113CDD4", Offset = "0x113CDD4", VA = "0x113CDD4")]
		private void LetterPressed(string letterAsString)
		{
		}

		[Token(Token = "0x6000686")]
		[Address(RVA = "0x113B930", Offset = "0x113B930", VA = "0x113B930")]
		private KeyboardReference CreateKeyboard(string name, KeyboardReference template)
		{
			return null;
		}

		[Token(Token = "0x6000687")]
		[Address(RVA = "0x113BFF8", Offset = "0x113BFF8", VA = "0x113BFF8")]
		private void AssignLetters(KeyboardSettings keyboardSettings, KeyboardReference keyboardReference)
		{
		}
	}
}
namespace SLua
{
	[Token(Token = "0x2000200")]
	public class ByteArray
	{
		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private byte[] data_;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int pos_;

		[Token(Token = "0x17000057")]
		public int Length
		{
			[Token(Token = "0x6000691")]
			[Address(RVA = "0x1180390", Offset = "0x1180390", VA = "0x1180390")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000058")]
		public int Position
		{
			[Token(Token = "0x6000692")]
			[Address(RVA = "0x11803AC", Offset = "0x11803AC", VA = "0x11803AC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000693")]
			[Address(RVA = "0x11803B4", Offset = "0x11803B4", VA = "0x11803B4")]
			set
			{
			}
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0x1180258", Offset = "0x1180258", VA = "0x1180258")]
		private static void ReAlloc(ref byte[] ba, int pos, int size)
		{
		}

		[Token(Token = "0x600068C")]
		[Address(RVA = "0x11802E4", Offset = "0x11802E4", VA = "0x11802E4")]
		public ByteArray()
		{
		}

		[Token(Token = "0x600068D")]
		[Address(RVA = "0x1180344", Offset = "0x1180344", VA = "0x1180344")]
		public ByteArray(byte[] data)
		{
		}

		[Token(Token = "0x600068E")]
		[Address(RVA = "0x1180370", Offset = "0x1180370", VA = "0x1180370")]
		public void SetData(byte[] data)
		{
		}

		[Token(Token = "0x600068F")]
		[Address(RVA = "0x118037C", Offset = "0x118037C", VA = "0x118037C")]
		public void SetData(byte[] data, int len, int pos)
		{
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0x1180388", Offset = "0x1180388", VA = "0x1180388")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0x11803BC", Offset = "0x11803BC", VA = "0x11803BC")]
		public byte[] GetData()
		{
			return null;
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0x11803C4", Offset = "0x11803C4", VA = "0x11803C4")]
		public bool ReadBool()
		{
			return default(bool);
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0x118041C", Offset = "0x118041C", VA = "0x118041C")]
		public int ReadInt()
		{
			return default(int);
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0x1180488", Offset = "0x1180488", VA = "0x1180488")]
		public uint ReadUInt()
		{
			return default(uint);
		}

		[Token(Token = "0x6000698")]
		[Address(RVA = "0x11804F4", Offset = "0x11804F4", VA = "0x11804F4")]
		public sbyte ReadChar()
		{
			return default(sbyte);
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0x1180534", Offset = "0x1180534", VA = "0x1180534")]
		public byte ReadUChar()
		{
			return default(byte);
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0x11803E0", Offset = "0x11803E0", VA = "0x11803E0")]
		public byte ReadByte()
		{
			return default(byte);
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0x1180538", Offset = "0x1180538", VA = "0x1180538")]
		public void Read(ref byte[] arr)
		{
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0x11804F8", Offset = "0x11804F8", VA = "0x11804F8")]
		public sbyte ReadSByte()
		{
			return default(sbyte);
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0x11805A8", Offset = "0x11805A8", VA = "0x11805A8")]
		public short ReadShort()
		{
			return default(short);
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0x1180618", Offset = "0x1180618", VA = "0x1180618")]
		public ushort ReadUShort()
		{
			return default(ushort);
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0x11805AC", Offset = "0x11805AC", VA = "0x11805AC")]
		public short ReadInt16()
		{
			return default(short);
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x118061C", Offset = "0x118061C", VA = "0x118061C")]
		public ushort ReadUInt16()
		{
			return default(ushort);
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x1180688", Offset = "0x1180688", VA = "0x1180688")]
		public long ReadInt64()
		{
			return default(long);
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x11806F4", Offset = "0x11806F4", VA = "0x11806F4")]
		public float ReadFloat()
		{
			return default(float);
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x1180760", Offset = "0x1180760", VA = "0x1180760")]
		public double ReadDouble()
		{
			return default(double);
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x11807CC", Offset = "0x11807CC", VA = "0x11807CC")]
		public string ReadString()
		{
			return null;
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x1180890", Offset = "0x1180890", VA = "0x1180890")]
		public void WriteByteArray(ByteArray v)
		{
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x11808EC", Offset = "0x11808EC", VA = "0x11808EC")]
		public void WriteBool(bool v)
		{
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x1180960", Offset = "0x1180960", VA = "0x1180960")]
		public void WriteInt(int v)
		{
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x11809AC", Offset = "0x11809AC", VA = "0x11809AC")]
		public void Write(ByteArray v)
		{
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x11809B0", Offset = "0x11809B0", VA = "0x11809B0")]
		public void Write(bool v)
		{
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x11809C4", Offset = "0x11809C4", VA = "0x11809C4")]
		public void Write(int v)
		{
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x11809C8", Offset = "0x11809C8", VA = "0x11809C8")]
		public void Write(uint v)
		{
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x11809CC", Offset = "0x11809CC", VA = "0x11809CC")]
		public void WriteUInt(uint v)
		{
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x1180900", Offset = "0x1180900", VA = "0x1180900")]
		public void WriteByte(byte v)
		{
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x1180A18", Offset = "0x1180A18", VA = "0x1180A18")]
		public void Write(byte v)
		{
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x1180A1C", Offset = "0x1180A1C", VA = "0x1180A1C")]
		public void WriteChar(sbyte v)
		{
		}

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x1180A6C", Offset = "0x1180A6C", VA = "0x1180A6C")]
		public void Write(byte[] arr)
		{
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x1180B00", Offset = "0x1180B00", VA = "0x1180B00")]
		public void WriteUChar(byte v)
		{
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x1180B04", Offset = "0x1180B04", VA = "0x1180B04")]
		public void Write(sbyte v)
		{
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x1180A20", Offset = "0x1180A20", VA = "0x1180A20")]
		public void WriteSByte(sbyte v)
		{
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x1180B08", Offset = "0x1180B08", VA = "0x1180B08")]
		public void Write(short v)
		{
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x1180B58", Offset = "0x1180B58", VA = "0x1180B58")]
		public void Write(ushort v)
		{
		}

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x1180B5C", Offset = "0x1180B5C", VA = "0x1180B5C")]
		public void WriteUShort(ushort v)
		{
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x1180B0C", Offset = "0x1180B0C", VA = "0x1180B0C")]
		public void WriteShort(short v)
		{
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x1180BA8", Offset = "0x1180BA8", VA = "0x1180BA8")]
		public void Write(float v)
		{
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x1180BAC", Offset = "0x1180BAC", VA = "0x1180BAC")]
		public void WriteFloat(float v)
		{
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x1180BF8", Offset = "0x1180BF8", VA = "0x1180BF8")]
		public void Write(double v)
		{
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x1180BFC", Offset = "0x1180BFC", VA = "0x1180BFC")]
		public void WriteNum(double v)
		{
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x1180C48", Offset = "0x1180C48", VA = "0x1180C48")]
		public void Write(string v)
		{
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x1180C4C", Offset = "0x1180C4C", VA = "0x1180C4C")]
		public void WriteString(string v)
		{
		}

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x1180D18", Offset = "0x1180D18", VA = "0x1180D18")]
		public void Write(long v)
		{
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x1180D4C", Offset = "0x1180D4C", VA = "0x1180D4C")]
		public void WriteInt64(long v)
		{
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x1180820", Offset = "0x1180820", VA = "0x1180820")]
		public long ReadVarInt()
		{
			return default(long);
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x1180CD4", Offset = "0x1180CD4", VA = "0x1180CD4")]
		public void WriteVarInt(long v)
		{
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x1180D80", Offset = "0x1180D80", VA = "0x1180D80")]
		public long ReadInt48()
		{
			return default(long);
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x1180DB4", Offset = "0x1180DB4", VA = "0x1180DB4")]
		public long ReadInt48L()
		{
			return default(long);
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x1180DE8", Offset = "0x1180DE8", VA = "0x1180DE8")]
		public void WriteInt48(long v)
		{
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x1180E70", Offset = "0x1180E70", VA = "0x1180E70")]
		public ByteArray ReadByteArray()
		{
			return null;
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x1180F74", Offset = "0x1180F74", VA = "0x1180F74")]
		public ulong ReadUInt64()
		{
			return default(ulong);
		}

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x1180FE0", Offset = "0x1180FE0", VA = "0x1180FE0")]
		public byte[] ReadBytes()
		{
			return null;
		}

		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x11810A8", Offset = "0x11810A8", VA = "0x11810A8")]
		public void WriteBytes(byte[] v)
		{
		}
	}
	[Token(Token = "0x2000201")]
	public class LuaCoroutine : LuaObject
	{
		[Token(Token = "0x2000202")]
		[CompilerGenerated]
		private sealed class <yieldReturn>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public object y;

			[Token(Token = "0x40008B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LuaFunction f;

			[Token(Token = "0x17000059")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60006D0")]
				[Address(RVA = "0x1181E54", Offset = "0x1181E54", VA = "0x1181E54", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700005A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60006D2")]
				[Address(RVA = "0x1181E9C", Offset = "0x1181E9C", VA = "0x1181E9C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60006CD")]
			[Address(RVA = "0x1181C08", Offset = "0x1181C08", VA = "0x1181C08")]
			[DebuggerHidden]
			public <yieldReturn>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x60006CE")]
			[Address(RVA = "0x1181C90", Offset = "0x1181C90", VA = "0x1181C90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60006CF")]
			[Address(RVA = "0x1181C94", Offset = "0x1181C94", VA = "0x1181C94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60006D1")]
			[Address(RVA = "0x1181E5C", Offset = "0x1181E5C", VA = "0x1181E5C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static MonoBehaviour mb;

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x118130C", Offset = "0x118130C", VA = "0x118130C")]
		public static void reg(IntPtr l, MonoBehaviour m)
		{
		}

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x1181114", Offset = "0x1181114", VA = "0x1181114")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int Yieldk(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x1181AA0", Offset = "0x1181AA0", VA = "0x1181AA0")]
		[IteratorStateMachine(typeof(<yieldReturn>d__3))]
		public static IEnumerator yieldReturn(object y, LuaFunction f)
		{
			return null;
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x1181C30", Offset = "0x1181C30", VA = "0x1181C30")]
		public LuaCoroutine()
		{
		}
	}
	[Token(Token = "0x2000203")]
	public class Helper : LuaObject
	{
		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string classfunc;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static LuaOut luaOut;

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x1181EA4", Offset = "0x1181EA4", VA = "0x1181EA4")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int _iter(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x1182110", Offset = "0x1182110", VA = "0x1182110")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int iter(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x11822F8", Offset = "0x11822F8", VA = "0x11822F8")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int CreateAction(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x11824A4", Offset = "0x11824A4", VA = "0x11824A4")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int CreateClass(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x1182948", Offset = "0x1182948", VA = "0x1182948")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int GetClass(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x1182BB8", Offset = "0x1182BB8", VA = "0x1182BB8")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ToBytes(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x1182CE4", Offset = "0x1182CE4", VA = "0x1182CE4")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public new static int ToString(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x1182F08", Offset = "0x1182F08", VA = "0x1182F08")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int MakeArray(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x1183160", Offset = "0x1183160", VA = "0x1183160")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int As(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x1183324", Offset = "0x1183324", VA = "0x1183324")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int IsNull(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x1183604", Offset = "0x1183604", VA = "0x1183604")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int get_out(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x118369C", Offset = "0x118369C", VA = "0x118369C")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int get_version(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x1185504", Offset = "0x1185504", VA = "0x1185504")]
		public static void reg(IntPtr l)
		{
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x1185E40", Offset = "0x1185E40", VA = "0x1185E40")]
		public Helper()
		{
		}
	}
	[Token(Token = "0x2000205")]
	public class Logger
	{
		[Token(Token = "0x2000206")]
		public enum Level
		{
			[Token(Token = "0x40008BE")]
			Debug,
			[Token(Token = "0x40008BF")]
			Warning,
			[Token(Token = "0x40008C0")]
			Error
		}

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action<Level, string> LogAction;

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x1185F5C", Offset = "0x1185F5C", VA = "0x1185F5C")]
		public static void Log(string msg, bool hasStacktrace = false)
		{
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x1185FF8", Offset = "0x1185FF8", VA = "0x1185FF8")]
		public static void LogError(string msg, bool hasStacktrace = false)
		{
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x1186094", Offset = "0x1186094", VA = "0x1186094")]
		public static void LogWarning(string msg)
		{
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x1186130", Offset = "0x1186130", VA = "0x1186130")]
		public Logger()
		{
		}
	}
	[Token(Token = "0x2000207")]
	public static class Lua3rdDLL
	{
		[Token(Token = "0x2000208")]
		[AttributeUsage(AttributeTargets.Method)]
		public class LualibRegAttribute : Attribute
		{
			[Token(Token = "0x40008C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string luaName;

			[Token(Token = "0x60006EA")]
			[Address(RVA = "0x1186B6C", Offset = "0x1186B6C", VA = "0x1186B6C")]
			public LualibRegAttribute(string luaName)
			{
			}
		}

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, LuaCSFunction> DLLRegFuncs;

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x1186138", Offset = "0x1186138", VA = "0x1186138")]
		static Lua3rdDLL()
		{
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x11861C4", Offset = "0x11861C4", VA = "0x11861C4")]
		public static void open(IntPtr L)
		{
		}
	}
	[Token(Token = "0x2000209")]
	public class Lua3rdMeta : ScriptableObject
	{
		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> typesWithAttribtues;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Lua3rdMeta _instance;

		[Token(Token = "0x1700005B")]
		public static Lua3rdMeta Instance
		{
			[Token(Token = "0x60006EC")]
			[Address(RVA = "0x1186824", Offset = "0x1186824", VA = "0x1186824")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x1186B94", Offset = "0x1186B94", VA = "0x1186B94")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x1186BA0", Offset = "0x1186BA0", VA = "0x1186BA0")]
		public Lua3rdMeta()
		{
		}
	}
	[Token(Token = "0x200020A")]
	internal class LuaArray : LuaObject
	{
		[Token(Token = "0x200020B")]
		private delegate int ArrayPropFunction(IntPtr l, Array a);

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, ArrayPropFunction> propMethod;

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x1187374", Offset = "0x1187374", VA = "0x1187374")]
		private static int toTable(IntPtr l, Array o)
		{
			return default(int);
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x11875E0", Offset = "0x11875E0", VA = "0x11875E0")]
		private static int length(IntPtr l, Array a)
		{
			return default(int);
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x1186C1C", Offset = "0x1186C1C", VA = "0x1186C1C")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int len(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x1186CD8", Offset = "0x1186CD8", VA = "0x1186CD8")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int luaIndex(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x1187058", Offset = "0x1187058", VA = "0x1187058")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int luaNewIndex(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x118726C", Offset = "0x118726C", VA = "0x118726C")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int tostring(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x1187838", Offset = "0x1187838", VA = "0x1187838")]
		public new static void init(IntPtr l)
		{
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x1187D2C", Offset = "0x1187D2C", VA = "0x1187D2C")]
		public LuaArray()
		{
		}
	}
	[Token(Token = "0x200020C")]
	public class Lua_SLua_ByteArray : LuaObject
	{
		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x1187ED8", Offset = "0x1187ED8", VA = "0x1187ED8")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int constructor(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x1188134", Offset = "0x1188134", VA = "0x1188134")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int SetData(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x1188454", Offset = "0x1188454", VA = "0x1188454")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int Clear(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x11885B4", Offset = "0x11885B4", VA = "0x11885B4")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int GetData(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x118871C", Offset = "0x118871C", VA = "0x118871C")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadBool(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0x1188894", Offset = "0x1188894", VA = "0x1188894")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadInt(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0x1188A04", Offset = "0x1188A04", VA = "0x1188A04")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadUInt(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0x1188B74", Offset = "0x1188B74", VA = "0x1188B74")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadChar(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0x1188CE4", Offset = "0x1188CE4", VA = "0x1188CE4")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadUChar(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0x1188E54", Offset = "0x1188E54", VA = "0x1188E54")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadByte(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0x1188FC4", Offset = "0x1188FC4", VA = "0x1188FC4")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int Read(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x1189174", Offset = "0x1189174", VA = "0x1189174")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadSByte(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0x11892E4", Offset = "0x11892E4", VA = "0x11892E4")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadShort(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0x1189454", Offset = "0x1189454", VA = "0x1189454")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadUShort(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0x11895C4", Offset = "0x11895C4", VA = "0x11895C4")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadInt16(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0x1189734", Offset = "0x1189734", VA = "0x1189734")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadUInt16(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0x11898A4", Offset = "0x11898A4", VA = "0x11898A4")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadInt64(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0x1189A14", Offset = "0x1189A14", VA = "0x1189A14")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadFloat(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x1189B8C", Offset = "0x1189B8C", VA = "0x1189B8C")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadDouble(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0x1189D04", Offset = "0x1189D04", VA = "0x1189D04")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadString(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0x1189E74", Offset = "0x1189E74", VA = "0x1189E74")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int WriteByteArray(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0x118A020", Offset = "0x118A020", VA = "0x118A020")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int WriteBool(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x118A1B4", Offset = "0x118A1B4", VA = "0x118A1B4")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int WriteInt(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0x118A348", Offset = "0x118A348", VA = "0x118A348")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int WriteUInt(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0x118A4DC", Offset = "0x118A4DC", VA = "0x118A4DC")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int WriteChar(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0x118A670", Offset = "0x118A670", VA = "0x118A670")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int WriteByte(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0x118A804", Offset = "0x118A804", VA = "0x118A804")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int WriteUChar(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0x118A998", Offset = "0x118A998", VA = "0x118A998")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int WriteSByte(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0x118AB2C", Offset = "0x118AB2C", VA = "0x118AB2C")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int WriteUShort(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0x118ACC0", Offset = "0x118ACC0", VA = "0x118ACC0")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int WriteShort(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0x118AE54", Offset = "0x118AE54", VA = "0x118AE54")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int WriteFloat(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0x118AFE8", Offset = "0x118AFE8", VA = "0x118AFE8")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int WriteNum(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0x118B17C", Offset = "0x118B17C", VA = "0x118B17C")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int WriteString(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0x118B310", Offset = "0x118B310", VA = "0x118B310")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int WriteInt64(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0x118B4B8", Offset = "0x118B4B8", VA = "0x118B4B8")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadVarInt(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0x118B628", Offset = "0x118B628", VA = "0x118B628")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int WriteVarInt(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0x118B7BC", Offset = "0x118B7BC", VA = "0x118B7BC")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadInt48(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0x118B94C", Offset = "0x118B94C", VA = "0x118B94C")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadInt48L(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0x118BADC", Offset = "0x118BADC", VA = "0x118BADC")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int WriteInt48(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0x118BC70", Offset = "0x118BC70", VA = "0x118BC70")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadByteArray(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0x118BDE0", Offset = "0x118BDE0", VA = "0x118BDE0")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadUInt64(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0x118BF50", Offset = "0x118BF50", VA = "0x118BF50")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ReadBytes(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000725")]
		[Address(RVA = "0x118C0C0", Offset = "0x118C0C0", VA = "0x118C0C0")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int WriteBytes(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0x118C26C", Offset = "0x118C26C", VA = "0x118C26C")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int get_Length(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0x118C3EC", Offset = "0x118C3EC", VA = "0x118C3EC")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int get_Position(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0x118C560", Offset = "0x118C560", VA = "0x118C560")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int set_Position(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0x118CFCC", Offset = "0x118CFCC", VA = "0x118CFCC")]
		public static void reg(IntPtr l)
		{
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0x118DCC0", Offset = "0x118DCC0", VA = "0x118DCC0")]
		public Lua_SLua_ByteArray()
		{
		}
	}
	[Token(Token = "0x200020D")]
	public class MonoPInvokeCallbackAttribute : Attribute
	{
		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Type type;

		[Token(Token = "0x600072B")]
		[Address(RVA = "0x118DD18", Offset = "0x118DD18", VA = "0x118DD18")]
		public MonoPInvokeCallbackAttribute(Type t)
		{
		}
	}
	[Token(Token = "0x200020E")]
	public enum LuaTypes
	{
		[Token(Token = "0x40008C8")]
		LUA_TNONE = -1,
		[Token(Token = "0x40008C9")]
		LUA_TNIL,
		[Token(Token = "0x40008CA")]
		LUA_TBOOLEAN,
		[Token(Token = "0x40008CB")]
		LUA_TLIGHTUSERDATA,
		[Token(Token = "0x40008CC")]
		LUA_TNUMBER,
		[Token(Token = "0x40008CD")]
		LUA_TSTRING,
		[Token(Token = "0x40008CE")]
		LUA_TTABLE,
		[Token(Token = "0x40008CF")]
		LUA_TFUNCTION,
		[Token(Token = "0x40008D0")]
		LUA_TUSERDATA,
		[Token(Token = "0x40008D1")]
		LUA_TTHREAD
	}
	[Token(Token = "0x200020F")]
	public enum LuaGCOptions
	{
		[Token(Token = "0x40008D3")]
		LUA_GCSTOP,
		[Token(Token = "0x40008D4")]
		LUA_GCRESTART,
		[Token(Token = "0x40008D5")]
		LUA_GCCOLLECT,
		[Token(Token = "0x40008D6")]
		LUA_GCCOUNT,
		[Token(Token = "0x40008D7")]
		LUA_GCCOUNTB,
		[Token(Token = "0x40008D8")]
		LUA_GCSTEP,
		[Token(Token = "0x40008D9")]
		LUA_GCSETPAUSE,
		[Token(Token = "0x40008DA")]
		LUA_GCSETSTEPMUL
	}
	[Token(Token = "0x2000210")]
	public enum LuaThreadStatus
	{
		[Token(Token = "0x40008DC")]
		LUA_YIELD = 1,
		[Token(Token = "0x40008DD")]
		LUA_ERRRUN,
		[Token(Token = "0x40008DE")]
		LUA_ERRSYNTAX,
		[Token(Token = "0x40008DF")]
		LUA_ERRMEM,
		[Token(Token = "0x40008E0")]
		LUA_ERRERR
	}
	[Token(Token = "0x2000211")]
	public sealed class LuaIndexes
	{
		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int LUA_REGISTRYINDEX;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int LUA_GLOBALSINDEX;

		[Token(Token = "0x600072C")]
		[Address(RVA = "0x118DD40", Offset = "0x118DD40", VA = "0x118DD40")]
		public LuaIndexes()
		{
		}
	}
	[Token(Token = "0x2000212")]
	public struct ReaderInfo
	{
		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string chunkData;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool finished;
	}
	[Token(Token = "0x2000213")]
	public delegate int LuaCSFunction(IntPtr luaState);
	[Token(Token = "0x2000214")]
	public delegate string LuaChunkReader(IntPtr luaState, ref ReaderInfo data, ref uint size);
	[Token(Token = "0x2000215")]
	public delegate int LuaFunctionCallback(IntPtr luaState);
	[Token(Token = "0x2000216")]
	public class LuaDLL
	{
		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int LUA_MULTRET;

		[Token(Token = "0x40008E6")]
		private const string LUADLL = "slua";

		[PreserveSig]
		[Token(Token = "0x600073A")]
		[Address(RVA = "0x118E1C4", Offset = "0x118E1C4", VA = "0x118E1C4")]
		public static extern void luaS_openextlibs(IntPtr L);

		[PreserveSig]
		[Token(Token = "0x600073B")]
		[Address(RVA = "0x118E240", Offset = "0x118E240", VA = "0x118E240")]
		public static extern int lua_tothread(IntPtr L, int index);

		[PreserveSig]
		[Token(Token = "0x600073C")]
		[Address(RVA = "0x118E2C0", Offset = "0x118E2C0", VA = "0x118E2C0")]
		public static extern void lua_xmove(IntPtr from, IntPtr to, int n);

		[PreserveSig]
		[Token(Token = "0x600073D")]
		[Address(RVA = "0x118E354", Offset = "0x118E354", VA = "0x118E354")]
		public static extern IntPtr lua_newthread(IntPtr L);

		[PreserveSig]
		[Token(Token = "0x600073E")]
		[Address(RVA = "0x118E3D0", Offset = "0x118E3D0", VA = "0x118E3D0")]
		public static extern int lua_status(IntPtr L);

		[PreserveSig]
		[Token(Token = "0x600073F")]
		[Address(RVA = "0x1181810", Offset = "0x1181810", VA = "0x1181810")]
		public static extern int lua_pushthread(IntPtr L);

		[PreserveSig]
		[Token(Token = "0x6000740")]
		[Address(RVA = "0x118E44C", Offset = "0x118E44C", VA = "0x118E44C")]
		public static extern int lua_gc(IntPtr luaState, LuaGCOptions what, int data);

		[PreserveSig]
		[Token(Token = "0x6000741")]
		[Address(RVA = "0x118E4E0", Offset = "0x118E4E0", VA = "0x118E4E0")]
		public static extern IntPtr lua_typename(IntPtr luaState, int type);

		[Token(Token = "0x6000742")]
		[Address(RVA = "0x118E560", Offset = "0x118E560", VA = "0x118E560")]
		public static string lua_typenamestr(IntPtr luaState, LuaTypes type)
		{
			return null;
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0x118E5FC", Offset = "0x118E5FC", VA = "0x118E5FC")]
		public static string luaL_typename(IntPtr luaState, int stackPos)
		{
			return null;
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0x118E66C", Offset = "0x118E66C", VA = "0x118E66C")]
		public static bool lua_isfunction(IntPtr luaState, int stackPos)
		{
			return default(bool);
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0x118E6DC", Offset = "0x118E6DC", VA = "0x118E6DC")]
		public static bool lua_islightuserdata(IntPtr luaState, int stackPos)
		{
			return default(bool);
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0x118E74C", Offset = "0x118E74C", VA = "0x118E74C")]
		public static bool lua_istable(IntPtr luaState, int stackPos)
		{
			return default(bool);
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0x118E7BC", Offset = "0x118E7BC", VA = "0x118E7BC")]
		public static bool lua_isthread(IntPtr luaState, int stackPos)
		{
			return default(bool);
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0x118E82C", Offset = "0x118E82C", VA = "0x118E82C")]
		[Obsolete]
		public static void luaL_error(IntPtr luaState, string message)
		{
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0x118E830", Offset = "0x118E830", VA = "0x118E830")]
		[Obsolete]
		public static void luaL_error(IntPtr luaState, string fmt, params object[] args)
		{
		}

		[PreserveSig]
		[Token(Token = "0x600074A")]
		[Address(RVA = "0x118E834", Offset = "0x118E834", VA = "0x118E834")]
		public static extern string luaL_gsub(IntPtr luaState, string str, string pattern, string replacement);

		[PreserveSig]
		[Token(Token = "0x600074B")]
		[Address(RVA = "0x118E924", Offset = "0x118E924", VA = "0x118E924")]
		public static extern int lua_isuserdata(IntPtr luaState, int stackPos);

		[PreserveSig]
		[Token(Token = "0x600074C")]
		[Address(RVA = "0x118E9A8", Offset = "0x118E9A8", VA = "0x118E9A8")]
		public static extern int lua_rawequal(IntPtr luaState, int stackPos1, int stackPos2);

		[PreserveSig]
		[Token(Token = "0x600074D")]
		[Address(RVA = "0x1185D28", Offset = "0x1185D28", VA = "0x1185D28")]
		public static extern void lua_setfield(IntPtr luaState, int stackPos, string name);

		[PreserveSig]
		[Token(Token = "0x600074E")]
		[Address(RVA = "0x118EA3C", Offset = "0x118EA3C", VA = "0x118EA3C")]
		public static extern int luaL_callmeta(IntPtr luaState, int stackPos, string name);

		[PreserveSig]
		[Token(Token = "0x600074F")]
		[Address(RVA = "0x118EAEC", Offset = "0x118EAEC", VA = "0x118EAEC")]
		public static extern IntPtr luaL_newstate();

		[PreserveSig]
		[Token(Token = "0x6000750")]
		[Address(RVA = "0x118EB54", Offset = "0x118EB54", VA = "0x118EB54")]
		public static extern void lua_close(IntPtr luaState);

		[PreserveSig]
		[Token(Token = "0x6000751")]
		[Address(RVA = "0x118EBD0", Offset = "0x118EBD0", VA = "0x118EBD0")]
		public static extern void luaL_openlibs(IntPtr luaState);

		[PreserveSig]
		[Token(Token = "0x6000752")]
		[Address(RVA = "0x118EC4C", Offset = "0x118EC4C", VA = "0x118EC4C")]
		public static extern int luaL_loadstring(IntPtr luaState, string chunk);

		[Token(Token = "0x6000753")]
		[Address(RVA = "0x118ECEC", Offset = "0x118ECEC", VA = "0x118ECEC")]
		public static int luaL_dostring(IntPtr luaState, string chunk)
		{
			return default(int);
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0x118EE24", Offset = "0x118EE24", VA = "0x118EE24")]
		public static int lua_dostring(IntPtr luaState, string chunk)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000755")]
		[Address(RVA = "0x11874B8", Offset = "0x11874B8", VA = "0x11874B8")]
		public static extern void lua_createtable(IntPtr luaState, int narr, int nrec);

		[Token(Token = "0x6000756")]
		[Address(RVA = "0x118EE88", Offset = "0x118EE88", VA = "0x118EE88")]
		public static void lua_newtable(IntPtr luaState)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000757")]
		[Address(RVA = "0x118EEE4", Offset = "0x118EEE4", VA = "0x118EEE4")]
		public static extern int lua_resume(IntPtr L, int narg);

		[PreserveSig]
		[Token(Token = "0x6000758")]
		[Address(RVA = "0x118EF68", Offset = "0x118EF68", VA = "0x118EF68")]
		public static extern int lua_lessthan(IntPtr luaState, int stackPos1, int stackPos2);

		[PreserveSig]
		[Token(Token = "0x6000759")]
		[Address(RVA = "0x118EFFC", Offset = "0x118EFFC", VA = "0x118EFFC")]
		public static extern void lua_getfenv(IntPtr luaState, int stackPos);

		[Token(Token = "0x600075A")]
		[Address(RVA = "0x11868F0", Offset = "0x11868F0", VA = "0x11868F0")]
		public static void lua_getglobal(IntPtr luaState, string name)
		{
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0x118F100", Offset = "0x118F100", VA = "0x118F100")]
		public static void lua_setglobal(IntPtr luaState, string name)
		{
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0x118F2AC", Offset = "0x118F2AC", VA = "0x118F2AC")]
		public static void lua_pushglobaltable(IntPtr l)
		{
		}

		[PreserveSig]
		[Token(Token = "0x600075D")]
		[Address(RVA = "0x118F1A8", Offset = "0x118F1A8", VA = "0x118F1A8")]
		public static extern void lua_insert(IntPtr luaState, int newTop);

		[Token(Token = "0x600075E")]
		[Address(RVA = "0x1184E44", Offset = "0x1184E44", VA = "0x1184E44")]
		public static int lua_rawlen(IntPtr luaState, int stackPos)
		{
			return default(int);
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0x118F3BC", Offset = "0x118F3BC", VA = "0x118F3BC")]
		public static int lua_strlen(IntPtr luaState, int stackPos)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000760")]
		[Address(RVA = "0x118F420", Offset = "0x118F420", VA = "0x118F420")]
		public static extern void lua_call(IntPtr luaState, int nArgs, int nResults);

		[PreserveSig]
		[Token(Token = "0x6000761")]
		[Address(RVA = "0x118ED88", Offset = "0x118ED88", VA = "0x118ED88")]
		public static extern int lua_pcall(IntPtr luaState, int nArgs, int nResults, int errfunc);

		[PreserveSig]
		[Token(Token = "0x6000762")]
		[Address(RVA = "0x118F4B4", Offset = "0x118F4B4", VA = "0x118F4B4")]
		public static extern double lua_tonumber(IntPtr luaState, int index);

		[PreserveSig]
		[Token(Token = "0x6000763")]
		[Address(RVA = "0x118F534", Offset = "0x118F534", VA = "0x118F534")]
		public static extern int lua_tointeger(IntPtr luaState, int index);

		[Token(Token = "0x6000764")]
		[Address(RVA = "0x118F5B8", Offset = "0x118F5B8", VA = "0x118F5B8")]
		public static int luaL_loadbuffer(IntPtr luaState, byte[] buff, int size, string name)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000765")]
		[Address(RVA = "0x118F680", Offset = "0x118F680", VA = "0x118F680")]
		public static extern void lua_remove(IntPtr luaState, int index);

		[PreserveSig]
		[Token(Token = "0x6000766")]
		[Address(RVA = "0x1184E48", Offset = "0x1184E48", VA = "0x1184E48")]
		public static extern void lua_rawgeti(IntPtr luaState, int tableIndex, int index);

		[PreserveSig]
		[Token(Token = "0x6000767")]
		[Address(RVA = "0x118754C", Offset = "0x118754C", VA = "0x118754C")]
		public static extern void lua_rawseti(IntPtr luaState, int tableIndex, int index);

		[PreserveSig]
		[Token(Token = "0x6000768")]
		[Address(RVA = "0x118F704", Offset = "0x118F704", VA = "0x118F704")]
		public static extern void lua_pushinteger(IntPtr luaState, IntPtr i);

		[Token(Token = "0x6000769")]
		[Address(RVA = "0x118F788", Offset = "0x118F788", VA = "0x118F788")]
		public static void lua_pushinteger(IntPtr luaState, int i)
		{
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0x118F800", Offset = "0x118F800", VA = "0x118F800")]
		public static int luaL_checkinteger(IntPtr luaState, int stackPos)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600076B")]
		[Address(RVA = "0x118F874", Offset = "0x118F874", VA = "0x118F874")]
		public static extern void lua_replace(IntPtr luaState, int index);

		[PreserveSig]
		[Token(Token = "0x600076C")]
		[Address(RVA = "0x118F8F8", Offset = "0x118F8F8", VA = "0x118F8F8")]
		public static extern int lua_setfenv(IntPtr luaState, int stackPos);

		[PreserveSig]
		[Token(Token = "0x600076D")]
		[Address(RVA = "0x118F97C", Offset = "0x118F97C", VA = "0x118F97C")]
		public static extern int lua_equal(IntPtr luaState, int index1, int index2);

		[PreserveSig]
		[Token(Token = "0x600076E")]
		[Address(RVA = "0x118FA10", Offset = "0x118FA10", VA = "0x118FA10")]
		public static extern int luaL_loadfile(IntPtr luaState, string filename);

		[PreserveSig]
		[Token(Token = "0x600076F")]
		[Address(RVA = "0x1186AE8", Offset = "0x1186AE8", VA = "0x1186AE8")]
		public static extern void lua_settop(IntPtr luaState, int newTop);

		[Token(Token = "0x6000770")]
		[Address(RVA = "0x1184EDC", Offset = "0x1184EDC", VA = "0x1184EDC")]
		public static void lua_pop(IntPtr luaState, int amount)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000771")]
		[Address(RVA = "0x118F080", Offset = "0x118F080", VA = "0x118F080")]
		public static extern void lua_gettable(IntPtr luaState, int index);

		[PreserveSig]
		[Token(Token = "0x6000772")]
		[Address(RVA = "0x118FAB0", Offset = "0x118FAB0", VA = "0x118FAB0")]
		public static extern void lua_rawget(IntPtr luaState, int index);

		[PreserveSig]
		[Token(Token = "0x6000773")]
		[Address(RVA = "0x118F22C", Offset = "0x118F22C", VA = "0x118F22C")]
		public static extern void lua_settable(IntPtr luaState, int index);

		[PreserveSig]
		[Token(Token = "0x6000774")]
		[Address(RVA = "0x118FB34", Offset = "0x118FB34", VA = "0x118FB34")]
		public static extern void lua_rawset(IntPtr luaState, int index);

		[PreserveSig]
		[Token(Token = "0x6000775")]
		[Address(RVA = "0x11852A0", Offset = "0x11852A0", VA = "0x11852A0")]
		public static extern int lua_setmetatable(IntPtr luaState, int objIndex);

		[PreserveSig]
		[Token(Token = "0x6000776")]
		[Address(RVA = "0x118FBB8", Offset = "0x118FBB8", VA = "0x118FBB8")]
		public static extern int lua_getmetatable(IntPtr luaState, int objIndex);

		[PreserveSig]
		[Token(Token = "0x6000777")]
		[Address(RVA = "0x1185324", Offset = "0x1185324", VA = "0x1185324")]
		public static extern void lua_pushvalue(IntPtr luaState, int index);

		[PreserveSig]
		[Token(Token = "0x6000778")]
		[Address(RVA = "0x1183D18", Offset = "0x1183D18", VA = "0x1183D18")]
		public static extern int lua_gettop(IntPtr luaState);

		[PreserveSig]
		[Token(Token = "0x6000779")]
		[Address(RVA = "0x11853A8", Offset = "0x11853A8", VA = "0x11853A8")]
		public static extern LuaTypes lua_type(IntPtr luaState, int index);

		[Token(Token = "0x600077A")]
		[Address(RVA = "0x118FC3C", Offset = "0x118FC3C", VA = "0x118FC3C")]
		public static bool lua_isnil(IntPtr luaState, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0x118FCAC", Offset = "0x118FCAC", VA = "0x118FCAC")]
		public static bool lua_isnumber(IntPtr luaState, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0x118FD44", Offset = "0x118FD44", VA = "0x118FD44")]
		public static bool lua_isboolean(IntPtr luaState, int index)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x600077D")]
		[Address(RVA = "0x118FDB4", Offset = "0x118FDB4", VA = "0x118FDB4")]
		public static extern int luaL_ref(IntPtr luaState, int registryIndex);

		[Token(Token = "0x600077E")]
		[Address(RVA = "0x118FE38", Offset = "0x118FE38", VA = "0x118FE38")]
		public static void lua_getref(IntPtr luaState, int reference)
		{
		}

		[PreserveSig]
		[Token(Token = "0x600077F")]
		[Address(RVA = "0x118FED4", Offset = "0x118FED4", VA = "0x118FED4")]
		public static extern void luaL_unref(IntPtr luaState, int registryIndex, int reference);

		[Token(Token = "0x6000780")]
		[Address(RVA = "0x118FF68", Offset = "0x118FF68", VA = "0x118FF68")]
		public static void lua_unref(IntPtr luaState, int reference)
		{
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0x1190004", Offset = "0x1190004", VA = "0x1190004")]
		public static bool lua_isstring(IntPtr luaState, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0x119009C", Offset = "0x119009C", VA = "0x119009C")]
		public static bool lua_iscfunction(IntPtr luaState, int index)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000783")]
		[Address(RVA = "0x1184754", Offset = "0x1184754", VA = "0x1184754")]
		public static extern void lua_pushnil(IntPtr luaState);

		[Token(Token = "0x6000784")]
		[Address(RVA = "0x1184D10", Offset = "0x1184D10", VA = "0x1184D10")]
		public static void luaL_checktype(IntPtr luaState, int p, LuaTypes t)
		{
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0x1186A34", Offset = "0x1186A34", VA = "0x1186A34")]
		public static void lua_pushcfunction(IntPtr luaState, LuaCSFunction function)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000786")]
		[Address(RVA = "0x11901CC", Offset = "0x11901CC", VA = "0x11901CC")]
		public static extern IntPtr lua_tocfunction(IntPtr luaState, int index);

		[Token(Token = "0x6000787")]
		[Address(RVA = "0x1190250", Offset = "0x1190250", VA = "0x1190250")]
		public static bool lua_toboolean(IntPtr luaState, int index)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000788")]
		[Address(RVA = "0x11902EC", Offset = "0x11902EC", VA = "0x11902EC")]
		public static extern IntPtr luaS_tolstring32(IntPtr luaState, int index, out int strLen);

		[Token(Token = "0x6000789")]
		[Address(RVA = "0x1185088", Offset = "0x1185088", VA = "0x1185088")]
		public static string lua_tostring(IntPtr luaState, int index)
		{
			return null;
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0x1190380", Offset = "0x1190380", VA = "0x1190380")]
		public static byte[] lua_tobytes(IntPtr luaState, int index)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600078B")]
		[Address(RVA = "0x1190490", Offset = "0x1190490", VA = "0x1190490")]
		public static extern IntPtr lua_atpanic(IntPtr luaState, LuaCSFunction panicf);

		[PreserveSig]
		[Token(Token = "0x600078C")]
		[Address(RVA = "0x119051C", Offset = "0x119051C", VA = "0x119051C")]
		public static extern void lua_pushnumber(IntPtr luaState, double number);

		[Token(Token = "0x600078D")]
		[Address(RVA = "0x11905A8", Offset = "0x11905A8", VA = "0x11905A8")]
		public static void lua_pushboolean(IntPtr luaState, bool value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x600078E")]
		[Address(RVA = "0x118C754", Offset = "0x118C754", VA = "0x118C754")]
		public static extern void lua_pushstring(IntPtr luaState, string str);

		[Token(Token = "0x600078F")]
		[Address(RVA = "0x11847D0", Offset = "0x11847D0", VA = "0x11847D0")]
		public static void lua_pushlstring(IntPtr luaState, byte[] str, int size)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000790")]
		[Address(RVA = "0x11906D0", Offset = "0x11906D0", VA = "0x11906D0")]
		public static extern int luaL_newmetatable(IntPtr luaState, string meta);

		[PreserveSig]
		[Token(Token = "0x6000791")]
		[Address(RVA = "0x118698C", Offset = "0x118698C", VA = "0x118698C")]
		public static extern void lua_getfield(IntPtr luaState, int stackPos, string meta);

		[Token(Token = "0x6000792")]
		[Address(RVA = "0x1185204", Offset = "0x1185204", VA = "0x1185204")]
		public static void luaL_getmetatable(IntPtr luaState, string meta)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000793")]
		[Address(RVA = "0x1190770", Offset = "0x1190770", VA = "0x1190770")]
		public static extern IntPtr luaL_checkudata(IntPtr luaState, int stackPos, string meta);

		[Token(Token = "0x6000794")]
		[Address(RVA = "0x1190820", Offset = "0x1190820", VA = "0x1190820")]
		public static bool luaL_getmetafield(IntPtr luaState, int stackPos, string field)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000795")]
		[Address(RVA = "0x11908E8", Offset = "0x11908E8", VA = "0x11908E8")]
		public static extern int lua_load(IntPtr luaState, LuaChunkReader chunkReader, ref ReaderInfo data, string chunkName);

		[PreserveSig]
		[Token(Token = "0x6000796")]
		[Address(RVA = "0x1190A0C", Offset = "0x1190A0C", VA = "0x1190A0C")]
		public static extern int lua_error(IntPtr luaState);

		[Token(Token = "0x6000797")]
		[Address(RVA = "0x1190A88", Offset = "0x1190A88", VA = "0x1190A88")]
		public static bool lua_checkstack(IntPtr luaState, int extra)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000798")]
		[Address(RVA = "0x1190B24", Offset = "0x1190B24", VA = "0x1190B24")]
		public static extern int lua_next(IntPtr luaState, int index);

		[PreserveSig]
		[Token(Token = "0x6000799")]
		[Address(RVA = "0x1190BA8", Offset = "0x1190BA8", VA = "0x1190BA8")]
		public static extern void lua_pushlightuserdata(IntPtr luaState, IntPtr udata);

		[PreserveSig]
		[Token(Token = "0x600079A")]
		[Address(RVA = "0x1190C2C", Offset = "0x1190C2C", VA = "0x1190C2C")]
		public static extern void luaL_where(IntPtr luaState, int level);

		[Token(Token = "0x600079B")]
		[Address(RVA = "0x1190CB0", Offset = "0x1190CB0", VA = "0x1190CB0")]
		public static double luaL_checknumber(IntPtr luaState, int stackPos)
		{
			return default(double);
		}

		[PreserveSig]
		[Token(Token = "0x600079C")]
		[Address(RVA = "0x1190D24", Offset = "0x1190D24", VA = "0x1190D24")]
		public static extern void lua_concat(IntPtr luaState, int n);

		[PreserveSig]
		[Token(Token = "0x600079D")]
		[Address(RVA = "0x1190DA8", Offset = "0x1190DA8", VA = "0x1190DA8")]
		public static extern void luaS_newuserdata(IntPtr luaState, int val);

		[PreserveSig]
		[Token(Token = "0x600079E")]
		[Address(RVA = "0x1190E2C", Offset = "0x1190E2C", VA = "0x1190E2C")]
		public static extern int luaS_rawnetobj(IntPtr luaState, int obj);

		[PreserveSig]
		[Token(Token = "0x600079F")]
		[Address(RVA = "0x1190EB0", Offset = "0x1190EB0", VA = "0x1190EB0")]
		public static extern IntPtr lua_touserdata(IntPtr luaState, int index);

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x1190F34", Offset = "0x1190F34", VA = "0x1190F34")]
		public static int lua_absindex(IntPtr luaState, int index)
		{
			return default(int);
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x1183708", Offset = "0x1183708", VA = "0x1183708")]
		public static int lua_upvalueindex(int i)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x1190138", Offset = "0x1190138", VA = "0x1190138")]
		public static extern void lua_pushcclosure(IntPtr l, IntPtr f, int nup);

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x11839EC", Offset = "0x11839EC", VA = "0x11839EC")]
		public static void lua_pushcclosure(IntPtr l, LuaCSFunction f, int nup)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x1190FA4", Offset = "0x1190FA4", VA = "0x1190FA4")]
		public static extern int luaS_checkVector2(IntPtr l, int p, out float x, out float y);

		[PreserveSig]
		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x1191040", Offset = "0x1191040", VA = "0x1191040")]
		public static extern int luaS_checkVector3(IntPtr l, int p, out float x, out float y, out float z);

		[PreserveSig]
		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x11910EC", Offset = "0x11910EC", VA = "0x11910EC")]
		public static extern int luaS_checkVector4(IntPtr l, int p, out float x, out float y, out float z, out float w);

		[PreserveSig]
		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x11911A0", Offset = "0x11911A0", VA = "0x11911A0")]
		public static extern int luaS_checkQuaternion(IntPtr l, int p, out float x, out float y, out float z, out float w);

		[PreserveSig]
		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x1191254", Offset = "0x1191254", VA = "0x1191254")]
		public static extern int luaS_checkColor(IntPtr l, int p, out float x, out float y, out float z, out float w);

		[PreserveSig]
		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x1191308", Offset = "0x1191308", VA = "0x1191308")]
		public static extern void luaS_pushVector2(IntPtr l, float x, float y);

		[PreserveSig]
		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x1191398", Offset = "0x1191398", VA = "0x1191398")]
		public static extern void luaS_pushVector3(IntPtr l, float x, float y, float z);

		[PreserveSig]
		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x119143C", Offset = "0x119143C", VA = "0x119143C")]
		public static extern void luaS_pushVector4(IntPtr l, float x, float y, float z, float w);

		[PreserveSig]
		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x11914E8", Offset = "0x11914E8", VA = "0x11914E8")]
		public static extern void luaS_pushQuaternion(IntPtr l, float x, float y, float z, float w);

		[PreserveSig]
		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x1191594", Offset = "0x1191594", VA = "0x1191594")]
		public static extern void luaS_pushColor(IntPtr l, float x, float y, float z, float w);

		[PreserveSig]
		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x1191640", Offset = "0x1191640", VA = "0x1191640")]
		public static extern void luaS_setDataVec(IntPtr l, int p, float x, float y, float z, float w);

		[PreserveSig]
		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x11916F4", Offset = "0x11916F4", VA = "0x11916F4")]
		public static extern int luaS_checkluatype(IntPtr l, int p, string t);

		[PreserveSig]
		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x11917A4", Offset = "0x11917A4", VA = "0x11917A4")]
		public static extern int luaS_pushobject(IntPtr l, int index, string t, bool gco, int cref);

		[PreserveSig]
		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x119186C", Offset = "0x119186C", VA = "0x119186C")]
		public static extern int luaS_getcacheud(IntPtr l, int index, int cref);

		[PreserveSig]
		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x1191900", Offset = "0x1191900", VA = "0x1191900")]
		public static extern int luaS_subclassof(IntPtr l, int index, string t);

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x11919B0", Offset = "0x11919B0", VA = "0x11919B0")]
		public LuaDLL()
		{
		}
	}
	[Token(Token = "0x2000217")]
	public class LuaDLLWrapper
	{
		[Token(Token = "0x40008E7")]
		private const string LUADLL = "slua";

		[PreserveSig]
		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x118F338", Offset = "0x118F338", VA = "0x118F338")]
		public static extern int luaS_objlen(IntPtr luaState, int stackPos);

		[PreserveSig]
		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x118FCC4", Offset = "0x118FCC4", VA = "0x118FCC4")]
		public static extern int lua_isnumber(IntPtr luaState, int index);

		[PreserveSig]
		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x119001C", Offset = "0x119001C", VA = "0x119001C")]
		public static extern int lua_isstring(IntPtr luaState, int index);

		[PreserveSig]
		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x11900B4", Offset = "0x11900B4", VA = "0x11900B4")]
		public static extern int lua_iscfunction(IntPtr luaState, int index);

		[PreserveSig]
		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x1190268", Offset = "0x1190268", VA = "0x1190268")]
		public static extern int lua_toboolean(IntPtr luaState, int index);

		[PreserveSig]
		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x11905B0", Offset = "0x11905B0", VA = "0x11905B0")]
		public static extern void lua_pushboolean(IntPtr luaState, int value);

		[PreserveSig]
		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x1190634", Offset = "0x1190634", VA = "0x1190634")]
		public static extern void luaS_pushlstring(IntPtr luaState, byte[] str, int size);

		[PreserveSig]
		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x1190838", Offset = "0x1190838", VA = "0x1190838")]
		public static extern int luaL_getmetafield(IntPtr luaState, int stackPos, string field);

		[PreserveSig]
		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x118F5BC", Offset = "0x118F5BC", VA = "0x118F5BC")]
		public static extern int luaLS_loadbuffer(IntPtr luaState, byte[] buff, int size, string name);

		[PreserveSig]
		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x1190AA0", Offset = "0x1190AA0", VA = "0x1190AA0")]
		public static extern int lua_checkstack(IntPtr luaState, int extra);

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x1191A04", Offset = "0x1191A04", VA = "0x1191A04")]
		public LuaDLLWrapper()
		{
		}
	}
	[Token(Token = "0x2000218")]
	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate)]
	public class CustomLuaClassAttribute : Attribute
	{
		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x1191A0C", Offset = "0x1191A0C", VA = "0x1191A0C")]
		public CustomLuaClassAttribute()
		{
		}
	}
	[Token(Token = "0x2000219")]
	public class DoNotToLuaAttribute : Attribute
	{
		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x1191A14", Offset = "0x1191A14", VA = "0x1191A14")]
		public DoNotToLuaAttribute()
		{
		}
	}
	[Token(Token = "0x200021A")]
	public class LuaBinderAttribute : Attribute
	{
		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int order;

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x1191A1C", Offset = "0x1191A1C", VA = "0x1191A1C")]
		public LuaBinderAttribute(int order)
		{
		}
	}
	[Token(Token = "0x200021B")]
	[AttributeUsage(AttributeTargets.Method)]
	public class StaticExportAttribute : Attribute
	{
		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x1191A44", Offset = "0x1191A44", VA = "0x1191A44")]
		public StaticExportAttribute()
		{
		}
	}
	[Token(Token = "0x200021C")]
	[AttributeUsage(AttributeTargets.Method)]
	public class LuaOverrideAttribute : Attribute
	{
		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string fn;

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x1191A4C", Offset = "0x1191A4C", VA = "0x1191A4C")]
		public LuaOverrideAttribute(string fn)
		{
		}
	}
	[Token(Token = "0x200021D")]
	public class OverloadLuaClassAttribute : Attribute
	{
		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type targetType;

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x1191A74", Offset = "0x1191A74", VA = "0x1191A74")]
		public OverloadLuaClassAttribute(Type target)
		{
		}
	}
	[Token(Token = "0x200021E")]
	public class LuaOut
	{
		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x1185F3C", Offset = "0x1185F3C", VA = "0x1185F3C")]
		public LuaOut()
		{
		}
	}
	[Token(Token = "0x200021F")]
	public class LuaObject
	{
		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static LuaCSFunction lua_gc;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected static LuaCSFunction lua_add;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected static LuaCSFunction lua_sub;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected static LuaCSFunction lua_mul;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected static LuaCSFunction lua_div;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected static LuaCSFunction lua_unm;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected static LuaCSFunction lua_eq;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected static LuaCSFunction lua_lt;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected static LuaCSFunction lua_le;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected static LuaCSFunction lua_tostring;

		[Token(Token = "0x40008F5")]
		private const string DelgateTable = "__LuaDelegate";

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected static Dictionary<MethodBase, string> methodDict;

		[Token(Token = "0x40008F7")]
		internal const int VersionNumber = 5376;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static Type MonoType;

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x1192BD8", Offset = "0x1192BD8", VA = "0x1192BD8")]
		public static void init(IntPtr l)
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x1191A9C", Offset = "0x1191A9C", VA = "0x1191A9C")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int ToString(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x1191BD8", Offset = "0x1191BD8", VA = "0x1191BD8")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int GetHashCode(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x1191D14", Offset = "0x1191D14", VA = "0x1191D14")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int Equals(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x1191E68", Offset = "0x1191E68", VA = "0x1191E68")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int GetType(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x1191FA0", Offset = "0x1191FA0", VA = "0x1191FA0")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int Unlink(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x1192DF4", Offset = "0x1192DF4", VA = "0x1192DF4")]
		private static int getOpFunction(IntPtr l, string f, string tip)
		{
			return default(int);
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x119315C", Offset = "0x119315C", VA = "0x119315C")]
		private static int luaOp(IntPtr l, string f, string tip)
		{
			return default(int);
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x119328C", Offset = "0x119328C", VA = "0x119328C")]
		private static int luaUnaryOp(IntPtr l, string f, string tip)
		{
			return default(int);
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x11920F4", Offset = "0x11920F4", VA = "0x11920F4")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int luaAdd(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x119221C", Offset = "0x119221C", VA = "0x119221C")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int luaSub(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x1192344", Offset = "0x1192344", VA = "0x1192344")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int luaMul(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x119246C", Offset = "0x119246C", VA = "0x119246C")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int luaDiv(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x1192594", Offset = "0x1192594", VA = "0x1192594")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int luaUnm(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x11926BC", Offset = "0x11926BC", VA = "0x11926BC")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int luaEq(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x11927E4", Offset = "0x11927E4", VA = "0x11927E4")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int luaLt(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x119290C", Offset = "0x119290C", VA = "0x119290C")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int luaLe(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x11933B0", Offset = "0x11933B0", VA = "0x11933B0")]
		public static void getEnumTable(IntPtr l, string t)
		{
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x11859E4", Offset = "0x11859E4", VA = "0x11859E4")]
		public static void getTypeTable(IntPtr l, string t)
		{
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x1193414", Offset = "0x1193414", VA = "0x1193414")]
		public static void newTypeTable(IntPtr l, string name)
		{
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x1193584", Offset = "0x1193584", VA = "0x1193584")]
		public static void createTypeMetatable(IntPtr l, Type self)
		{
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x1185DD0", Offset = "0x1185DD0", VA = "0x1185DD0")]
		public static void createTypeMetatable(IntPtr l, LuaCSFunction con, Type self)
		{
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x11938EC", Offset = "0x11938EC", VA = "0x11938EC")]
		private static void checkMethodValid(LuaCSFunction f)
		{
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x11935F0", Offset = "0x11935F0", VA = "0x11935F0")]
		public static void createTypeMetatable(IntPtr l, LuaCSFunction con, Type self, Type parent)
		{
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x1193DBC", Offset = "0x1193DBC", VA = "0x1193DBC")]
		private static void completeTypeMeta(IntPtr l, LuaCSFunction con, Type self)
		{
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x11938F0", Offset = "0x11938F0", VA = "0x11938F0")]
		private static void completeInstanceMeta(IntPtr l, Type self)
		{
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x11940A8", Offset = "0x11940A8", VA = "0x11940A8")]
		public static bool isImplByLua(Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x118150C", Offset = "0x118150C", VA = "0x118150C")]
		public static void reg(IntPtr l, LuaCSFunction func, string ns)
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x118DBA0", Offset = "0x118DBA0", VA = "0x118DBA0")]
		protected static void addMember(IntPtr l, LuaCSFunction func)
		{
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x1185A7C", Offset = "0x1185A7C", VA = "0x1185A7C")]
		protected static void addMember(IntPtr l, LuaCSFunction func, bool instance)
		{
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x1185B4C", Offset = "0x1185B4C", VA = "0x1185B4C")]
		protected static void addMember(IntPtr l, string name, LuaCSFunction get, LuaCSFunction set, bool instance)
		{
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x1194264", Offset = "0x1194264", VA = "0x1194264")]
		protected static void addMember(IntPtr l, int v, string name)
		{
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x1192A34", Offset = "0x1192A34", VA = "0x1192A34")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int luaGC(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x11942DC", Offset = "0x11942DC", VA = "0x11942DC")]
		internal static void gc(IntPtr l, int p, UnityEngine.Object o)
		{
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x119307C", Offset = "0x119307C", VA = "0x119307C")]
		public static void checkLuaObject(IntPtr l, int p)
		{
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x11845B4", Offset = "0x11845B4", VA = "0x11845B4")]
		public static void pushObject(IntPtr l, object o)
		{
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x11846D8", Offset = "0x11846D8", VA = "0x11846D8")]
		public static void pushObject(IntPtr l, Array o)
		{
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x118396C", Offset = "0x118396C", VA = "0x118396C")]
		public static void pushLightObject(IntPtr l, object t)
		{
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x1192FD8", Offset = "0x1192FD8", VA = "0x1192FD8")]
		public static int pushTry(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x11944E4", Offset = "0x11944E4", VA = "0x11944E4")]
		public static bool matchType(IntPtr l, int p, LuaTypes lt, Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x1184FA4", Offset = "0x1184FA4", VA = "0x1184FA4")]
		public static bool isTypeTable(IntPtr l, int p)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x118542C", Offset = "0x118542C", VA = "0x118542C")]
		public static bool isLuaClass(IntPtr l, int p)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x1194A70", Offset = "0x1194A70", VA = "0x1194A70")]
		private static bool isLuaValueType(IntPtr l, int p)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x1194AE4", Offset = "0x1194AE4", VA = "0x1194AE4")]
		public static bool matchType(IntPtr l, int p, Type t1)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x1194B8C", Offset = "0x1194B8C", VA = "0x1194B8C")]
		public static bool matchType(IntPtr l, int total, int from, Type t1)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x1194C18", Offset = "0x1194C18", VA = "0x1194C18")]
		public static bool matchType(IntPtr l, int total, int from, Type t1, Type t2)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x1194CDC", Offset = "0x1194CDC", VA = "0x1194CDC")]
		public static bool matchType(IntPtr l, int total, int from, Type t1, Type t2, Type t3)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x1194DC8", Offset = "0x1194DC8", VA = "0x1194DC8")]
		public static bool matchType(IntPtr l, int total, int from, Type t1, Type t2, Type t3, Type t4)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x1194EE8", Offset = "0x1194EE8", VA = "0x1194EE8")]
		public static bool matchType(IntPtr l, int total, int from, Type t1, Type t2, Type t3, Type t4, Type t5)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x1195030", Offset = "0x1195030", VA = "0x1195030")]
		public static bool matchType(IntPtr l, int total, int from, Type t1, Type t2, Type t3, Type t4, Type t5, Type t6)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x11951AC", Offset = "0x11951AC", VA = "0x11951AC")]
		public static bool matchType(IntPtr l, int total, int from, Type t1, Type t2, Type t3, Type t4, Type t5, Type t6, Type t7)
		{
			return default(bool);
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x119534C", Offset = "0x119534C", VA = "0x119534C")]
		public static bool matchType(IntPtr l, int total, int from, Type t1, Type t2, Type t3, Type t4, Type t5, Type t6, Type t7, Type t8)
		{
			return default(bool);
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x1195524", Offset = "0x1195524", VA = "0x1195524")]
		public static bool matchType(IntPtr l, int total, int from, Type t1, Type t2, Type t3, Type t4, Type t5, Type t6, Type t7, Type t8, Type t9)
		{
			return default(bool);
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x1195728", Offset = "0x1195728", VA = "0x1195728")]
		public static bool matchType(IntPtr l, int total, int from, Type t1, Type t2, Type t3, Type t4, Type t5, Type t6, Type t7, Type t8, Type t9, Type t10)
		{
			return default(bool);
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x1195958", Offset = "0x1195958", VA = "0x1195958")]
		public static bool matchType(IntPtr l, int total, int from, params Type[] t)
		{
			return default(bool);
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x1183D94", Offset = "0x1183D94", VA = "0x1183D94")]
		public static bool matchType(IntPtr l, int total, int from, ParameterInfo[] pars)
		{
			return default(bool);
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x11949F8", Offset = "0x11949F8", VA = "0x11949F8")]
		public static bool luaTypeCheck(IntPtr l, int p, string t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0x1195A34", Offset = "0x1195A34", VA = "0x1195A34")]
		private static LuaDelegate newDelegate(IntPtr l, int p)
		{
			return null;
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0x1195BA0", Offset = "0x1195BA0", VA = "0x1195BA0")]
		public static void removeDelgate(IntPtr l, int r)
		{
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0x1181904", Offset = "0x1181904", VA = "0x1181904")]
		public static object checkObj(IntPtr l, int p)
		{
			return null;
		}

		[Token(Token = "0x6000803")]
		public static bool checkArray<T>(IntPtr l, int p, out T[] ta)
		{
			return default(bool);
		}

		[Token(Token = "0x6000804")]
		public static bool checkParams<T>(IntPtr l, int p, out T[] pars) where T : class
		{
			return default(bool);
		}

		[Token(Token = "0x6000805")]
		public static bool checkValueParams<T>(IntPtr l, int p, out T[] pars) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0x1195CA0", Offset = "0x1195CA0", VA = "0x1195CA0")]
		public static bool checkParams(IntPtr l, int p, out float[] pars)
		{
			return default(bool);
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0x1195DD4", Offset = "0x1195DD4", VA = "0x1195DD4")]
		public static bool checkParams(IntPtr l, int p, out int[] pars)
		{
			return default(bool);
		}

		[Token(Token = "0x6000808")]
		[Address(RVA = "0x1195F08", Offset = "0x1195F08", VA = "0x1195F08")]
		public static bool checkParams(IntPtr l, int p, out string[] pars)
		{
			return default(bool);
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0x119603C", Offset = "0x119603C", VA = "0x119603C")]
		public static bool checkParams(IntPtr l, int p, out char[] pars)
		{
			return default(bool);
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0x119610C", Offset = "0x119610C", VA = "0x119610C")]
		public static object checkVar(IntPtr l, int p, Type t)
		{
			return null;
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0x1183ED8", Offset = "0x1183ED8", VA = "0x1183ED8")]
		public static object checkVar(IntPtr l, int p)
		{
			return null;
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0x118C6F0", Offset = "0x118C6F0", VA = "0x118C6F0")]
		public static void pushValue(IntPtr l, object o)
		{
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0x1184F40", Offset = "0x1184F40", VA = "0x1184F40")]
		public static void pushValue(IntPtr l, Array a)
		{
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0x1183768", Offset = "0x1183768", VA = "0x1183768")]
		public static void pushVar(IntPtr l, object o)
		{
		}

		[Token(Token = "0x600080F")]
		public static T checkSelf<T>(IntPtr l)
		{
			return (T)null;
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0x1187660", Offset = "0x1187660", VA = "0x1187660")]
		public static object checkSelf(IntPtr l)
		{
			return null;
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0x1196E64", Offset = "0x1196E64", VA = "0x1196E64")]
		public static void setBack(IntPtr l, object o)
		{
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0x1196EE4", Offset = "0x1196EE4", VA = "0x1196EE4")]
		public static void setBack(IntPtr l, Vector3 v)
		{
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0x1196F6C", Offset = "0x1196F6C", VA = "0x1196F6C")]
		public static void setBack(IntPtr l, Vector2 v)
		{
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0x1196FE8", Offset = "0x1196FE8", VA = "0x1196FE8")]
		public static void setBack(IntPtr l, Vector4 v)
		{
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0x1197070", Offset = "0x1197070", VA = "0x1197070")]
		public static void setBack(IntPtr l, Quaternion v)
		{
		}

		[Token(Token = "0x6000816")]
		[Address(RVA = "0x11970F8", Offset = "0x11970F8", VA = "0x11970F8")]
		public static void setBack(IntPtr l, Color v)
		{
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0x1197180", Offset = "0x1197180", VA = "0x1197180")]
		public static int extractFunction(IntPtr l, int p)
		{
			return default(int);
		}

		[Token(Token = "0x6000818")]
		public static int checkDelegate<T>(IntPtr l, int p, out T ua) where T : class
		{
			return default(int);
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0x1197310", Offset = "0x1197310", VA = "0x1197310")]
		internal static Delegate delegateCast(LuaFunction f, Type t)
		{
			return null;
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0x1192AE4", Offset = "0x1192AE4", VA = "0x1192AE4")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int noConstructor(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0x1192B58", Offset = "0x1192B58", VA = "0x1192B58")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int typeToString(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0x11973EC", Offset = "0x11973EC", VA = "0x11973EC")]
		protected static string GetMethodName(MethodBase method)
		{
			return null;
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0x1181B78", Offset = "0x1181B78", VA = "0x1181B78")]
		public static int error(IntPtr l, Exception e)
		{
			return default(int);
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0x118188C", Offset = "0x118188C", VA = "0x118188C")]
		public static int error(IntPtr l, string err)
		{
			return default(int);
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0x1184520", Offset = "0x1184520", VA = "0x1184520")]
		public static int error(IntPtr l, string err, params object[] args)
		{
			return default(int);
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0x11877D8", Offset = "0x11877D8", VA = "0x11877D8")]
		public static int ok(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0x1197550", Offset = "0x1197550", VA = "0x1197550")]
		public static int ok(IntPtr l, int retCount)
		{
			return default(int);
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0x1187784", Offset = "0x1187784", VA = "0x1187784")]
		public static void assert(bool cond, string err)
		{
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0x118439C", Offset = "0x118439C", VA = "0x118439C")]
		public static object changeType(object obj, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000824")]
		public static bool checkEnum<T>(IntPtr l, int p, out T o) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0x1196E00", Offset = "0x1196E00", VA = "0x1196E00")]
		public static void pushEnum(IntPtr l, int e)
		{
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0x118CC10", Offset = "0x118CC10", VA = "0x118CC10")]
		public static bool checkType(IntPtr l, int p, out sbyte v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0x118C850", Offset = "0x118C850", VA = "0x118C850")]
		public static void pushValue(IntPtr l, sbyte v)
		{
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0x118CC88", Offset = "0x118CC88", VA = "0x118CC88")]
		public static bool checkType(IntPtr l, int p, out byte v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0x118C8B4", Offset = "0x118C8B4", VA = "0x118C8B4")]
		public static void pushValue(IntPtr l, byte i)
		{
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0x11975CC", Offset = "0x11975CC", VA = "0x11975CC")]
		public static bool checkType(IntPtr l, int p, out char c)
		{
			return default(bool);
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0x1197644", Offset = "0x1197644", VA = "0x1197644")]
		public static void pushValue(IntPtr l, char v)
		{
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0x11976A8", Offset = "0x11976A8", VA = "0x11976A8")]
		public static bool checkArray(IntPtr l, int p, out char[] pars)
		{
			return default(bool);
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0x118CD78", Offset = "0x118CD78", VA = "0x118CD78")]
		public static bool checkType(IntPtr l, int p, out short v)
		{
			return default(bool);
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0x118C918", Offset = "0x118C918", VA = "0x118C918")]
		public static void pushValue(IntPtr l, short i)
		{
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0x118CD00", Offset = "0x118CD00", VA = "0x118CD00")]
		public static bool checkType(IntPtr l, int p, out ushort v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0x118C97C", Offset = "0x118C97C", VA = "0x118C97C")]
		public static void pushValue(IntPtr l, ushort v)
		{
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0x1197778", Offset = "0x1197778", VA = "0x1197778")]
		public static void pushInterface(IntPtr l, object i, Type t)
		{
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0x118770C", Offset = "0x118770C", VA = "0x118770C")]
		public static bool checkType(IntPtr l, int p, out int v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0x11854A0", Offset = "0x11854A0", VA = "0x11854A0")]
		public static void pushValue(IntPtr l, int i)
		{
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0x118CB98", Offset = "0x118CB98", VA = "0x118CB98")]
		public static bool checkType(IntPtr l, int p, out uint v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0x118C7EC", Offset = "0x118C7EC", VA = "0x118C7EC")]
		public static void pushValue(IntPtr l, uint o)
		{
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x118CEDC", Offset = "0x118CEDC", VA = "0x118CEDC")]
		public static bool checkType(IntPtr l, int p, out long v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0x118C9E0", Offset = "0x118C9E0", VA = "0x118C9E0")]
		public static void pushValue(IntPtr l, long i)
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x11977FC", Offset = "0x11977FC", VA = "0x11977FC")]
		public static bool checkType(IntPtr l, int p, out ulong v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0x118CF68", Offset = "0x118CF68", VA = "0x118CF68")]
		public static void pushValue(IntPtr l, ulong o)
		{
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0x118CDF0", Offset = "0x118CDF0", VA = "0x118CDF0")]
		public static bool checkType(IntPtr l, int p, out float v)
		{
			return default(bool);
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0x118CA44", Offset = "0x118CA44", VA = "0x118CA44")]
		public static void pushValue(IntPtr l, float o)
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0x118CE68", Offset = "0x118CE68", VA = "0x118CE68")]
		public static bool checkType(IntPtr l, int p, out double v)
		{
			return default(bool);
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0x118CAA8", Offset = "0x118CAA8", VA = "0x118CAA8")]
		public static void pushValue(IntPtr l, double d)
		{
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0x118CB0C", Offset = "0x118CB0C", VA = "0x118CB0C")]
		public static bool checkType(IntPtr l, int p, out bool v)
		{
			return default(bool);
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0x1181B14", Offset = "0x1181B14", VA = "0x1181B14")]
		public static void pushValue(IntPtr l, bool b)
		{
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0x1183AAC", Offset = "0x1183AAC", VA = "0x1183AAC")]
		public static bool checkType(IntPtr l, int p, out string v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x1184630", Offset = "0x1184630", VA = "0x1184630")]
		public static bool checkBinaryString(IntPtr l, int p, out byte[] bytes)
		{
			return default(bool);
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x11847D4", Offset = "0x11847D4", VA = "0x11847D4")]
		public static void pushValue(IntPtr l, string s)
		{
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x1197880", Offset = "0x1197880", VA = "0x1197880")]
		public static bool checkType(IntPtr l, int p, out IntPtr v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0x11978F8", Offset = "0x11978F8", VA = "0x11978F8")]
		public static bool checkType(IntPtr l, int p, out LuaDelegate f)
		{
			return default(bool);
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0x1196C78", Offset = "0x1196C78", VA = "0x1196C78")]
		public static bool checkType(IntPtr l, int p, out LuaThread lt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0x1181980", Offset = "0x1181980", VA = "0x1181980")]
		public static bool checkType(IntPtr l, int p, out LuaFunction f)
		{
			return default(bool);
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0x1196B58", Offset = "0x1196B58", VA = "0x1196B58")]
		public static bool checkType(IntPtr l, int p, out LuaTable t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x1187CC8", Offset = "0x1187CC8", VA = "0x1187CC8")]
		public static void pushValue(IntPtr l, LuaCSFunction f)
		{
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x1197BC4", Offset = "0x1197BC4", VA = "0x1197BC4")]
		public static void pushValue(IntPtr l, LuaTable t)
		{
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0x1183BD4", Offset = "0x1183BD4", VA = "0x1183BD4")]
		public static Type FindType(string qualifiedTypeName)
		{
			return null;
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0x1184838", Offset = "0x1184838", VA = "0x1184838")]
		public static bool checkType(IntPtr l, int p, out Type t)
		{
			return default(bool);
		}

		[Token(Token = "0x600084C")]
		public static bool checkValueType<T>(IntPtr l, int p, out T v) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x600084D")]
		public static bool checkNullable<T>(IntPtr l, int p, out T? v) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x600084E")]
		public static bool checkType<T>(IntPtr l, int p, out T o) where T : class
		{
			return default(bool);
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0x1196728", Offset = "0x1196728", VA = "0x1196728")]
		public static bool checkType(IntPtr l, int p, out Vector4 v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0x1196610", Offset = "0x1196610", VA = "0x1196610")]
		public static bool checkType(IntPtr l, int p, out Vector3 v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0x1196508", Offset = "0x1196508", VA = "0x1196508")]
		public static bool checkType(IntPtr l, int p, out Vector2 v)
		{
			return default(bool);
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x1196844", Offset = "0x1196844", VA = "0x1196844")]
		public static bool checkType(IntPtr l, int p, out Quaternion q)
		{
			return default(bool);
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0x1196960", Offset = "0x1196960", VA = "0x1196960")]
		public static bool checkType(IntPtr l, int p, out Color c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0x1197C34", Offset = "0x1197C34", VA = "0x1197C34")]
		public static bool checkType(IntPtr l, int p, out LayerMask lm)
		{
			return default(bool);
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0x1197CC8", Offset = "0x1197CC8", VA = "0x1197CC8")]
		public static bool checkParams(IntPtr l, int p, out Vector2[] pars)
		{
			return default(bool);
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0x1197DFC", Offset = "0x1197DFC", VA = "0x1197DFC")]
		public static void pushValue(IntPtr l, RaycastHit2D r)
		{
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0x1197EA4", Offset = "0x1197EA4", VA = "0x1197EA4")]
		public static void pushValue(IntPtr l, RaycastHit r)
		{
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0x1197F4C", Offset = "0x1197F4C", VA = "0x1197F4C")]
		public static void pushValue(IntPtr l, AnimationState o)
		{
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0x1197FF0", Offset = "0x1197FF0", VA = "0x1197FF0")]
		public static void pushValue(IntPtr l, UnityEngine.Object o)
		{
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0x11980C4", Offset = "0x11980C4", VA = "0x11980C4")]
		public static void pushValue(IntPtr l, Quaternion o)
		{
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0x1198148", Offset = "0x1198148", VA = "0x1198148")]
		public static void pushValue(IntPtr l, Vector2 o)
		{
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0x11981B4", Offset = "0x11981B4", VA = "0x11981B4")]
		public static void pushValue(IntPtr l, Vector3 o)
		{
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0x1198230", Offset = "0x1198230", VA = "0x1198230")]
		public static void pushValue(IntPtr l, Vector4 o)
		{
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0x11982B4", Offset = "0x11982B4", VA = "0x11982B4")]
		public static void pushValue(IntPtr l, Color o)
		{
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0x1198338", Offset = "0x1198338", VA = "0x1198338")]
		public static void pushValue(IntPtr l, Color32 c32)
		{
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0x1181C88", Offset = "0x1181C88", VA = "0x1181C88")]
		public LuaObject()
		{
		}
	}
	[Token(Token = "0x2000220")]
	public class LuaSocketMini : LuaObject
	{
		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string script;

		[Token(Token = "0x6000862")]
		[Address(RVA = "0x1198734", Offset = "0x1198734", VA = "0x1198734")]
		public static void reg(IntPtr l)
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0x1198858", Offset = "0x1198858", VA = "0x1198858")]
		public LuaSocketMini()
		{
		}
	}
	[Token(Token = "0x2000221")]
	public abstract class LuaVar : IDisposable
	{
		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected LuaState state;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected int valueref;

		[Token(Token = "0x1700005C")]
		public IntPtr L
		{
			[Token(Token = "0x6000865")]
			[Address(RVA = "0x11973D4", Offset = "0x11973D4", VA = "0x11973D4")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x1700005D")]
		public int Ref
		{
			[Token(Token = "0x6000866")]
			[Address(RVA = "0x11989E8", Offset = "0x11989E8", VA = "0x11989E8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000867")]
		[Address(RVA = "0x11989F0", Offset = "0x11989F0", VA = "0x11989F0")]
		public LuaVar()
		{
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0x1198A0C", Offset = "0x1198A0C", VA = "0x1198A0C")]
		public LuaVar(LuaState l, int r)
		{
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0x1198A3C", Offset = "0x1198A3C", VA = "0x1198A3C")]
		public LuaVar(IntPtr l, int r)
		{
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0x1198AB8", Offset = "0x1198AB8", VA = "0x1198AB8", Slot = "1")]
		~LuaVar()
		{
		}

		[Token(Token = "0x600086B")]
		[Address(RVA = "0x1198B58", Offset = "0x1198B58", VA = "0x1198B58", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x600086C")]
		[Address(RVA = "0x1198BC4", Offset = "0x1198BC4", VA = "0x1198BC4")]
		private static void unref(IntPtr l, int r)
		{
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0x1198C28", Offset = "0x1198C28", VA = "0x1198C28", Slot = "5")]
		public virtual void Dispose(bool disposeManagedResources)
		{
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0x1185CC0", Offset = "0x1185CC0", VA = "0x1185CC0")]
		public void push(IntPtr l)
		{
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0x1198E88", Offset = "0x1198E88", VA = "0x1198E88", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0x1198E90", Offset = "0x1198E90", VA = "0x1198E90", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0x1197ACC", Offset = "0x1197ACC", VA = "0x1197ACC")]
		public static bool operator ==(LuaVar x, LuaVar y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0x1198FFC", Offset = "0x1198FFC", VA = "0x1198FFC")]
		public static bool operator !=(LuaVar x, LuaVar y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0x1198F28", Offset = "0x1198F28", VA = "0x1198F28")]
		private static int Equals(LuaVar x, LuaVar y)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000222")]
	public class LuaThread : LuaVar
	{
		[Token(Token = "0x6000874")]
		[Address(RVA = "0x1197AF8", Offset = "0x1197AF8", VA = "0x1197AF8")]
		public LuaThread(IntPtr l, int r)
		{
		}
	}
	[Token(Token = "0x2000223")]
	public class LuaDelegate : LuaFunction
	{
		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public object d;

		[Token(Token = "0x6000875")]
		[Address(RVA = "0x1195B9C", Offset = "0x1195B9C", VA = "0x1195B9C")]
		public LuaDelegate(IntPtr l, int r)
		{
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0x1199028", Offset = "0x1199028", VA = "0x1199028")]
		private static void unref(IntPtr l, int r)
		{
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0x11990BC", Offset = "0x11990BC", VA = "0x11990BC", Slot = "5")]
		public override void Dispose(bool disposeManagedResources)
		{
		}
	}
	[Token(Token = "0x2000224")]
	public class LuaFunction : LuaVar
	{
		[Token(Token = "0x6000878")]
		[Address(RVA = "0x1199154", Offset = "0x1199154", VA = "0x1199154")]
		public LuaFunction(LuaState l, int r)
		{
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0x1197AFC", Offset = "0x1197AFC", VA = "0x1197AFC")]
		public LuaFunction(IntPtr l, int r)
		{
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0x1199184", Offset = "0x1199184", VA = "0x1199184")]
		public bool pcall(int nArgs, int errfunc)
		{
			return default(bool);
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0x1199358", Offset = "0x1199358", VA = "0x1199358")]
		private bool innerCall(int nArgs, int errfunc)
		{
			return default(bool);
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0x1181DB0", Offset = "0x1181DB0", VA = "0x1181DB0")]
		public object call()
		{
			return null;
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0x11995E8", Offset = "0x11995E8", VA = "0x11995E8")]
		public object call(params object[] args)
		{
			return null;
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0x1199720", Offset = "0x1199720", VA = "0x1199720")]
		public object call(LuaTable self, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x600087F")]
		public T cast<T>() where T : class
		{
			return null;
		}
	}
	[Token(Token = "0x2000225")]
	public class LuaTable : LuaVar, IEnumerable<LuaTable.TablePair>, IEnumerable
	{
		[Token(Token = "0x2000226")]
		public struct TablePair
		{
			[Token(Token = "0x40008FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public object key;

			[Token(Token = "0x40008FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public object value;
		}

		[Token(Token = "0x2000227")]
		public class Enumerator : IEnumerator<TablePair>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private LuaTable t;

			[Token(Token = "0x4000900")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int indext;

			[Token(Token = "0x4000901")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private TablePair current;

			[Token(Token = "0x4000902")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int iterPhase;

			[Token(Token = "0x17000061")]
			public TablePair Current
			{
				[Token(Token = "0x6000892")]
				[Address(RVA = "0x119A82C", Offset = "0x119A82C", VA = "0x119A82C", Slot = "4")]
				get
				{
					return default(TablePair);
				}
			}

			[Token(Token = "0x17000062")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000893")]
				[Address(RVA = "0x119A8D8", Offset = "0x119A8D8", VA = "0x119A8D8", Slot = "7")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600088E")]
			[Address(RVA = "0x119A588", Offset = "0x119A588", VA = "0x119A588")]
			public Enumerator(LuaTable table)
			{
			}

			[Token(Token = "0x600088F")]
			[Address(RVA = "0x119A660", Offset = "0x119A660", VA = "0x119A660", Slot = "6")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000890")]
			[Address(RVA = "0x119A5C0", Offset = "0x119A5C0", VA = "0x119A5C0", Slot = "8")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000891")]
			[Address(RVA = "0x119A76C", Offset = "0x119A76C", VA = "0x119A76C", Slot = "5")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x1700005E")]
		public object this[string key]
		{
			[Token(Token = "0x6000885")]
			[Address(RVA = "0x1199D28", Offset = "0x1199D28", VA = "0x1199D28")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000886")]
			[Address(RVA = "0x1199D54", Offset = "0x1199D54", VA = "0x1199D54")]
			set
			{
			}
		}

		[Token(Token = "0x1700005F")]
		public object this[int index]
		{
			[Token(Token = "0x6000887")]
			[Address(RVA = "0x1199D84", Offset = "0x1199D84", VA = "0x1199D84")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000888")]
			[Address(RVA = "0x1199F1C", Offset = "0x1199F1C", VA = "0x1199F1C")]
			set
			{
			}
		}

		[Token(Token = "0x17000060")]
		public bool IsEmpty
		{
			[Token(Token = "0x600088B")]
			[Address(RVA = "0x119A440", Offset = "0x119A440", VA = "0x119A440")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0x1197B00", Offset = "0x1197B00", VA = "0x1197B00")]
		public LuaTable(IntPtr l, int r)
		{
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0x1199878", Offset = "0x1199878", VA = "0x1199878")]
		public LuaTable(LuaState l, int r)
		{
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0x11998A8", Offset = "0x11998A8", VA = "0x11998A8")]
		public LuaTable(LuaState state)
		{
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0x1199980", Offset = "0x1199980", VA = "0x1199980")]
		public object get(string key, bool wholekey = false, bool rawget = false)
		{
			return null;
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0x1199B50", Offset = "0x1199B50", VA = "0x1199B50")]
		public void set(string key, object v, bool wholekey = false, bool rawset = false)
		{
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0x119A144", Offset = "0x119A144", VA = "0x119A144")]
		public object invoke(string func, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0x119A37C", Offset = "0x119A37C", VA = "0x119A37C")]
		public int length()
		{
			return default(int);
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0x119A514", Offset = "0x119A514", VA = "0x119A514", Slot = "6")]
		public IEnumerator<TablePair> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0x119A5BC", Offset = "0x119A5BC", VA = "0x119A5BC", Slot = "7")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x2000228")]
	public class LuaState : IDisposable
	{
		[Token(Token = "0x2000229")]
		public delegate byte[] LoaderDelegate(string fn, ref string absoluteFn);

		[Token(Token = "0x200022A")]
		public delegate void OutputDelegate(string msg);

		[Token(Token = "0x200022B")]
		public delegate void PushVarDelegate(IntPtr l, object o);

		[Token(Token = "0x200022C")]
		public delegate void UnRefAction(IntPtr l, int r);

		[Token(Token = "0x200022D")]
		private struct UnrefPair
		{
			[Token(Token = "0x400091B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UnRefAction act;

			[Token(Token = "0x400091C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int r;
		}

		[Token(Token = "0x200022E")]
		[CompilerGenerated]
		private sealed class <bindUnity>d__40 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400091D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400091E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400091F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LuaState <>4__this;

			[Token(Token = "0x4000920")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action<int> _tick;

			[Token(Token = "0x4000921")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action complete;

			[Token(Token = "0x1700006A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008E7")]
				[Address(RVA = "0x119FEA4", Offset = "0x119FEA4", VA = "0x119FEA4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700006B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008E9")]
				[Address(RVA = "0x119FEEC", Offset = "0x119FEEC", VA = "0x119FEEC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008E4")]
			[Address(RVA = "0x119C5D8", Offset = "0x119C5D8", VA = "0x119C5D8")]
			[DebuggerHidden]
			public <bindUnity>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x60008E5")]
			[Address(RVA = "0x119FD58", Offset = "0x119FD58", VA = "0x119FD58", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008E6")]
			[Address(RVA = "0x119FD5C", Offset = "0x119FD5C", VA = "0x119FD5C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008E8")]
			[Address(RVA = "0x119FEAC", Offset = "0x119FEAC", VA = "0x119FEAC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr l_;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int mainThread;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal WeakDictionary<int, LuaDelegate> delgateMap;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LoaderDelegate loaderDelegate;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public OutputDelegate logDelegate;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public OutputDelegate errorDelegate;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public OutputDelegate warnDelegate;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Queue<UnrefPair> refQueue;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int PCallCSFunctionRef;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Type, PushVarDelegate> typePushMap;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<IntPtr, LuaState> statemap;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IntPtr oldptr;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static LuaState oldstate;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static LuaCSFunction errorFunc;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int errorRef;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal LuaFunction newindex_func;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal LuaFunction index_func;

		[Token(Token = "0x4000914")]
		private const string DelgateTable = "__LuaDelegate";

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool openedSluaLib;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private LuaFunction dumpstack;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal LuaSvrGameObject lgo;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static bool printTrace;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static StringBuilder s;

		[Token(Token = "0x17000063")]
		public int cachedDelegateCount
		{
			[Token(Token = "0x6000894")]
			[Address(RVA = "0x119BD48", Offset = "0x119BD48", VA = "0x119BD48")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000064")]
		public IntPtr L
		{
			[Token(Token = "0x6000895")]
			[Address(RVA = "0x1198910", Offset = "0x1198910", VA = "0x1198910")]
			get
			{
				return default(IntPtr);
			}
			[Token(Token = "0x6000896")]
			[Address(RVA = "0x119BD98", Offset = "0x119BD98", VA = "0x119BD98")]
			set
			{
			}
		}

		[Token(Token = "0x17000065")]
		public IntPtr handle
		{
			[Token(Token = "0x6000897")]
			[Address(RVA = "0x119BDA0", Offset = "0x119BDA0", VA = "0x119BDA0")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x17000066")]
		public int Top
		{
			[Token(Token = "0x6000898")]
			[Address(RVA = "0x119BDA4", Offset = "0x119BDA4", VA = "0x119BDA4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000067")]
		public static LuaState main
		{
			[Token(Token = "0x600089F")]
			[Address(RVA = "0x119C600", Offset = "0x119C600", VA = "0x119C600")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000068")]
		public string Name
		{
			[Token(Token = "0x60008A0")]
			[Address(RVA = "0x119C648", Offset = "0x119C648", VA = "0x119C648")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60008A1")]
			[Address(RVA = "0x119C650", Offset = "0x119C650", VA = "0x119C650")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000069")]
		public object this[string path]
		{
			[Token(Token = "0x60008CA")]
			[Address(RVA = "0x119F4F0", Offset = "0x119F4F0", VA = "0x119F4F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60008CB")]
			[Address(RVA = "0x119F588", Offset = "0x119F588", VA = "0x119F588")]
			set
			{
			}
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x1194390", Offset = "0x1194390", VA = "0x1194390")]
		public bool isMainThread()
		{
			return default(bool);
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0x11815EC", Offset = "0x11815EC", VA = "0x11815EC")]
		public static LuaState get(IntPtr l)
		{
			return null;
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x119BE08", Offset = "0x119BE08", VA = "0x119BE08")]
		public void openSluaLib()
		{
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0x119C2DC", Offset = "0x119C2DC", VA = "0x119C2DC")]
		public void openExtLib()
		{
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x119C37C", Offset = "0x119C37C", VA = "0x119C37C")]
		public void bindUnity()
		{
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0x119C55C", Offset = "0x119C55C", VA = "0x119C55C")]
		[IteratorStateMachine(typeof(<bindUnity>d__40))]
		public IEnumerator bindUnity(Action<int> _tick, Action complete)
		{
			return null;
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x119C658", Offset = "0x119C658", VA = "0x119C658")]
		public LuaState()
		{
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x119DBC8", Offset = "0x119DBC8", VA = "0x119DBC8")]
		private void createGameObject()
		{
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x119DD10", Offset = "0x119DD10", VA = "0x119DD10")]
		private void destroyGameObject()
		{
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x119DDC8", Offset = "0x119DDC8", VA = "0x119DDC8", Slot = "5")]
		protected virtual void tick()
		{
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x119A93C", Offset = "0x119A93C", VA = "0x119A93C")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		private static int init(IntPtr L)
		{
			return default(int);
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x119DFF0", Offset = "0x119DFF0", VA = "0x119DFF0")]
		private void Close()
		{
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x119E1C4", Offset = "0x119E1C4", VA = "0x119E1C4", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x119E234", Offset = "0x119E234", VA = "0x119E234", Slot = "6")]
		public virtual void Dispose(bool dispose)
		{
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x119AE04", Offset = "0x119AE04", VA = "0x119AE04")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int errorReport(IntPtr L)
		{
			return default(int);
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x119B030", Offset = "0x119B030", VA = "0x119B030")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		internal static int import(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x119DAE0", Offset = "0x119DAE0", VA = "0x119DAE0")]
		internal static void pcall(IntPtr l, LuaCSFunction f)
		{
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x119E240", Offset = "0x119E240", VA = "0x119E240")]
		private static string stackString(IntPtr L, int n)
		{
			return null;
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x119B43C", Offset = "0x119B43C", VA = "0x119B43C")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		internal static int print(IntPtr L)
		{
			return default(int);
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x119B558", Offset = "0x119B558", VA = "0x119B558")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		internal static int printerror(IntPtr L)
		{
			return default(int);
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x119B674", Offset = "0x119B674", VA = "0x119B674")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		internal static int warn(IntPtr L)
		{
			return default(int);
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x119B78C", Offset = "0x119B78C", VA = "0x119B78C")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		internal static int loadfile(IntPtr L)
		{
			return default(int);
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x119B8E8", Offset = "0x119B8E8", VA = "0x119B8E8")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		internal static int dofile(IntPtr L)
		{
			return default(int);
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x119BABC", Offset = "0x119BABC", VA = "0x119BABC")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int panicCallback(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x1197B04", Offset = "0x1197B04", VA = "0x1197B04")]
		public static void pushcsfunction(IntPtr L, LuaCSFunction function)
		{
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x11817B8", Offset = "0x11817B8", VA = "0x11817B8")]
		public object doString(string str)
		{
			return null;
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x11987E8", Offset = "0x11987E8", VA = "0x11987E8")]
		public object doString(string str, string chunkname)
		{
			return null;
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x119BB44", Offset = "0x119BB44", VA = "0x119BB44")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		internal static int loader(IntPtr L)
		{
			return default(int);
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x119E950", Offset = "0x119E950", VA = "0x119E950")]
		public object doFile(string fn)
		{
			return null;
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x119EA40", Offset = "0x119EA40", VA = "0x119EA40")]
		public static byte[] CleanUTF8Bom(byte[] bytes)
		{
			return null;
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x119E500", Offset = "0x119E500", VA = "0x119E500")]
		public bool doBuffer(byte[] bytes, string fn, out object ret)
		{
			return default(bool);
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x119E718", Offset = "0x119E718", VA = "0x119E718")]
		internal byte[] loadFile(string fn, ref string absoluteFn)
		{
			return null;
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x119EAF0", Offset = "0x119EAF0", VA = "0x119EAF0")]
		internal object getObject(string key, bool wholekey = false, bool rawget = false)
		{
			return null;
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x119EDC8", Offset = "0x119EDC8", VA = "0x119EDC8")]
		internal void setObject(string key, object v, bool wholekey = false, bool rawset = false)
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x119EC74", Offset = "0x119EC74", VA = "0x119EC74")]
		internal object getObject(string[] remainingPath, bool rawget = false)
		{
			return null;
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x11999B4", Offset = "0x11999B4", VA = "0x11999B4")]
		internal object getObject(int reference, string field, bool wholekey = false, bool rawget = false)
		{
			return null;
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x1199DAC", Offset = "0x1199DAC", VA = "0x1199DAC")]
		internal object getObject(int reference, int index, bool rawget = false)
		{
			return null;
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x119F208", Offset = "0x119F208", VA = "0x119F208")]
		internal object getObject(int reference, object field, bool rawget = false)
		{
			return null;
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x119EF48", Offset = "0x119EF48", VA = "0x119EF48")]
		internal void setObject(string[] remainingPath, object o, bool rawset = false)
		{
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x1199B88", Offset = "0x1199B88", VA = "0x1199B88")]
		internal void setObject(int reference, string field, object o, bool wholekey = false, bool rawset = false)
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x1199F48", Offset = "0x1199F48", VA = "0x1199F48")]
		internal void setObject(int reference, int index, object o, bool rawset = false)
		{
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x119F360", Offset = "0x119F360", VA = "0x119F360")]
		internal void setObject(int reference, object field, object o, bool rawset)
		{
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x11993F8", Offset = "0x11993F8", VA = "0x11993F8")]
		internal object topObjects(int from)
		{
			return null;
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x119F16C", Offset = "0x119F16C", VA = "0x119F16C")]
		private object getObject(IntPtr l, int p)
		{
			return null;
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x119F464", Offset = "0x119F464", VA = "0x119F464")]
		public LuaFunction getFunction(string key)
		{
			return null;
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x119F4FC", Offset = "0x119F4FC", VA = "0x119F4FC")]
		public LuaTable getTable(string key)
		{
			return null;
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x1198D84", Offset = "0x1198D84", VA = "0x1198D84")]
		public void gcRef(UnRefAction act, int r)
		{
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x119DDCC", Offset = "0x119DDCC", VA = "0x119DDCC")]
		public void checkRef()
		{
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x119F594", Offset = "0x119F594", VA = "0x119F594")]
		public void regPushVar(Type t, PushVarDelegate d)
		{
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x1196D98", Offset = "0x1196D98", VA = "0x1196D98")]
		public bool tryGetTypePusher(Type t, out PushVarDelegate d)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x119CAB0", Offset = "0x119CAB0", VA = "0x119CAB0")]
		private void setupPushVar()
		{
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x11943C4", Offset = "0x11943C4", VA = "0x11943C4")]
		public int pushTry(IntPtr L)
		{
			return default(int);
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x119F6C0", Offset = "0x119F6C0", VA = "0x119F6C0")]
		public object run(string entry)
		{
			return null;
		}
	}
	[Token(Token = "0x2000230")]
	public enum LuaSvrFlag
	{
		[Token(Token = "0x4000936")]
		LSF_BASIC,
		[Token(Token = "0x4000937")]
		LSF_EXTLIB,
		[Token(Token = "0x4000938")]
		LSF_3RDDLL
	}
	[Token(Token = "0x2000231")]
	public class LuaSvr
	{
		[Token(Token = "0x2000232")]
		public class MainState : LuaState
		{
			[Token(Token = "0x400093A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private int errorReported;

			[Token(Token = "0x6000906")]
			[Address(RVA = "0x11A14A0", Offset = "0x11A14A0", VA = "0x11A14A0", Slot = "5")]
			protected override void tick()
			{
			}

			[Token(Token = "0x6000907")]
			[Address(RVA = "0x11A151C", Offset = "0x11A151C", VA = "0x11A151C")]
			internal void checkTop()
			{
			}

			[Token(Token = "0x6000908")]
			[Address(RVA = "0x11A0B74", Offset = "0x11A0B74", VA = "0x11A0B74")]
			public MainState()
			{
			}
		}

		[Token(Token = "0x2000234")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x400093D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Action<int> _tick;

			[Token(Token = "0x600090C")]
			[Address(RVA = "0x11A17C0", Offset = "0x11A17C0", VA = "0x11A17C0")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x600090D")]
			[Address(RVA = "0x11A17C8", Offset = "0x11A17C8", VA = "0x11A17C8")]
			internal void <doBind>b__0(int p)
			{
			}
		}

		[Token(Token = "0x2000235")]
		[CompilerGenerated]
		private sealed class <doBind>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400093E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400093F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000940")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Action<int> _tick;

			[Token(Token = "0x4000941")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IntPtr L;

			[Token(Token = "0x4000942")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private <>c__DisplayClass5_0 <>8__1;

			[Token(Token = "0x4000943")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Action complete;

			[Token(Token = "0x4000944")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Action<int> <tick>5__2;

			[Token(Token = "0x4000945")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private List<Action<IntPtr>> <list>5__3;

			[Token(Token = "0x4000946")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private int <lastProgress>5__4;

			[Token(Token = "0x4000947")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private int <n>5__5;

			[Token(Token = "0x1700006C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000911")]
				[Address(RVA = "0x11A1A60", Offset = "0x11A1A60", VA = "0x11A1A60", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700006D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000913")]
				[Address(RVA = "0x11A1AA8", Offset = "0x11A1AA8", VA = "0x11A1AA8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600090E")]
			[Address(RVA = "0x11A1044", Offset = "0x11A1044", VA = "0x11A1044")]
			[DebuggerHidden]
			public <doBind>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x600090F")]
			[Address(RVA = "0x11A17E4", Offset = "0x11A17E4", VA = "0x11A17E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000910")]
			[Address(RVA = "0x11A17E8", Offset = "0x11A17E8", VA = "0x11A17E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000912")]
			[Address(RVA = "0x11A1A68", Offset = "0x11A1A68", VA = "0x11A1A68", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static MainState mainState;

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x11A0AC4", Offset = "0x11A0AC4", VA = "0x11A0AC4")]
		public LuaSvr()
		{
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x11A0BC8", Offset = "0x11A0BC8", VA = "0x11A0BC8")]
		private static List<Action<IntPtr>> collectBindInfo()
		{
			return null;
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0x119C3FC", Offset = "0x119C3FC", VA = "0x119C3FC")]
		internal static void doBind(IntPtr L)
		{
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0x119FE28", Offset = "0x119FE28", VA = "0x119FE28")]
		[IteratorStateMachine(typeof(<doBind>d__5))]
		internal static IEnumerator doBind(IntPtr L, Action<int> _tick, Action complete)
		{
			return null;
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0x11A106C", Offset = "0x11A106C", VA = "0x11A106C")]
		private Action<IntPtr>[] getBindList(Assembly assembly, string ns)
		{
			return null;
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0x11A11D4", Offset = "0x11A11D4", VA = "0x11A11D4")]
		protected void doinit(LuaState L, LuaSvrFlag flag)
		{
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0x11A12A4", Offset = "0x11A12A4", VA = "0x11A12A4")]
		public void init(Action<int> tick, Action complete, LuaSvrFlag flag = LuaSvrFlag.LSF_EXTLIB)
		{
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0x11A1408", Offset = "0x11A1408", VA = "0x11A1408")]
		public object start(string main)
		{
			return null;
		}
	}
	[Token(Token = "0x2000237")]
	public class LuaSvrGameObject : MonoBehaviour
	{
		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LuaState state;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action onUpdate;

		[Token(Token = "0x6000916")]
		[Address(RVA = "0x11A1B38", Offset = "0x11A1B38", VA = "0x11A1B38")]
		private void Update()
		{
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0x11A1B54", Offset = "0x11A1B54", VA = "0x11A1B54")]
		public LuaSvrGameObject()
		{
		}
	}
	[Token(Token = "0x2000238")]
	internal class LuaValueType : LuaObject
	{
		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string script;

		[Token(Token = "0x6000918")]
		[Address(RVA = "0x119C4A8", Offset = "0x119C4A8", VA = "0x119C4A8")]
		public static void reg(IntPtr l)
		{
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0x11A1B5C", Offset = "0x11A1B5C", VA = "0x11A1B5C")]
		public LuaValueType()
		{
		}
	}
	[Token(Token = "0x2000239")]
	internal class LuaVarObject : LuaObject
	{
		[Token(Token = "0x200023A")]
		private class MethodWrapper
		{
			[Token(Token = "0x400094F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private object self;

			[Token(Token = "0x4000950")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private IList<MemberInfo> mis;

			[Token(Token = "0x600092A")]
			[Address(RVA = "0x11A4D20", Offset = "0x11A4D20", VA = "0x11A4D20")]
			public MethodWrapper(object self, IList<MemberInfo> mi)
			{
			}

			[Token(Token = "0x600092B")]
			[Address(RVA = "0x11A4D4C", Offset = "0x11A4D4C", VA = "0x11A4D4C")]
			private bool matchType(IntPtr l, int p, LuaTypes lt, Type t)
			{
				return default(bool);
			}

			[Token(Token = "0x600092C")]
			[Address(RVA = "0x11A5044", Offset = "0x11A5044", VA = "0x11A5044")]
			private object checkVar(IntPtr l, int p, Type t)
			{
				return null;
			}

			[Token(Token = "0x600092D")]
			[Address(RVA = "0x11A578C", Offset = "0x11A578C", VA = "0x11A578C")]
			internal bool matchType(IntPtr l, int from, ParameterInfo[] pis, bool isstatic)
			{
				return default(bool);
			}

			[Token(Token = "0x600092E")]
			[Address(RVA = "0x11A58C8", Offset = "0x11A58C8", VA = "0x11A58C8")]
			public int invoke(IntPtr l)
			{
				return default(int);
			}

			[Token(Token = "0x600092F")]
			[Address(RVA = "0x11A5B40", Offset = "0x11A5B40", VA = "0x11A5B40")]
			private int forceInvoke(IntPtr l, MethodInfo m)
			{
				return default(int);
			}

			[Token(Token = "0x6000930")]
			[Address(RVA = "0x11A5D10", Offset = "0x11A5D10", VA = "0x11A5D10")]
			public void checkArgs(IntPtr l, int from, MethodInfo m, out object[] args)
			{
			}
		}

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Type, Dictionary<string, List<MemberInfo>>> cachedMemberInfos;

		[Token(Token = "0x600091B")]
		[Address(RVA = "0x11A1C14", Offset = "0x11A1C14", VA = "0x11A1C14")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int luaIndex(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x600091C")]
		[Address(RVA = "0x11A2B68", Offset = "0x11A2B68", VA = "0x11A2B68")]
		private static int indexObject(IntPtr l, object self, object key)
		{
			return default(int);
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0x11A2C94", Offset = "0x11A2C94", VA = "0x11A2C94")]
		private static Type getType(object o)
		{
			return null;
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0x11A22A4", Offset = "0x11A22A4", VA = "0x11A22A4")]
		private static int indexString(IntPtr l, object self, string key)
		{
			return default(int);
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0x11A2E7C", Offset = "0x11A2E7C", VA = "0x11A2E7C")]
		private static void CollectTypeMembers(Type type, ref Dictionary<string, List<MemberInfo>> membersMap)
		{
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0x11A2D20", Offset = "0x11A2D20", VA = "0x11A2D20")]
		private static IList<MemberInfo> GetCacheMembers(Type type, string key)
		{
			return null;
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0x11A312C", Offset = "0x11A312C", VA = "0x11A312C")]
		private static int newindexString(IntPtr l, object self, string key)
		{
			return default(int);
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0x11A27E8", Offset = "0x11A27E8", VA = "0x11A27E8")]
		private static int indexInt(IntPtr l, object self, int index)
		{
			return default(int);
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0x11A3650", Offset = "0x11A3650", VA = "0x11A3650")]
		private static int newindexInt(IntPtr l, object self, int index)
		{
			return default(int);
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0x11A3A98", Offset = "0x11A3A98", VA = "0x11A3A98")]
		private static int newindexObject(IntPtr l, object self, object k, object v)
		{
			return default(int);
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0x11A1E98", Offset = "0x11A1E98", VA = "0x11A1E98")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int luaNewIndex(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0x11A2138", Offset = "0x11A2138", VA = "0x11A2138")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int methodWrapper(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0x119BFB4", Offset = "0x119BFB4", VA = "0x119BFB4")]
		public new static void init(IntPtr l)
		{
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x11A3C3C", Offset = "0x11A3C3C", VA = "0x11A3C3C")]
		public LuaVarObject()
		{
		}
	}
	[Token(Token = "0x200023B")]
	internal class LuaClassObject
	{
		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Type cls;

		[Token(Token = "0x6000931")]
		[Address(RVA = "0x11A5F2C", Offset = "0x11A5F2C", VA = "0x11A5F2C")]
		public LuaClassObject(Type t)
		{
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0x11A5F54", Offset = "0x11A5F54", VA = "0x11A5F54")]
		public Type GetClsType()
		{
			return null;
		}
	}
	[Token(Token = "0x200023C")]
	public class ObjectCache
	{
		[Token(Token = "0x200023D")]
		private class FreeList : Dictionary<int, object>
		{
			[Token(Token = "0x400095B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private int id;

			[Token(Token = "0x600094D")]
			[Address(RVA = "0x11A68D8", Offset = "0x11A68D8", VA = "0x11A68D8")]
			public int add(object o)
			{
				return default(int);
			}

			[Token(Token = "0x600094E")]
			[Address(RVA = "0x11A6754", Offset = "0x11A6754", VA = "0x11A6754")]
			public void del(int i)
			{
			}

			[Token(Token = "0x600094F")]
			[Address(RVA = "0x11A66C0", Offset = "0x11A66C0", VA = "0x11A66C0")]
			public bool get(int i, out object o)
			{
				return default(bool);
			}

			[Token(Token = "0x6000950")]
			[Address(RVA = "0x11A7924", Offset = "0x11A7924", VA = "0x11A7924")]
			public object get(int i)
			{
				return null;
			}

			[Token(Token = "0x6000951")]
			[Address(RVA = "0x11A6B18", Offset = "0x11A6B18", VA = "0x11A6B18")]
			public void set(int i, object o)
			{
			}

			[Token(Token = "0x6000952")]
			[Address(RVA = "0x11A6398", Offset = "0x11A6398", VA = "0x11A6398")]
			public FreeList()
			{
			}
		}

		[Token(Token = "0x200023E")]
		public class ObjEqualityComparer : IEqualityComparer<object>
		{
			[Token(Token = "0x6000953")]
			[Address(RVA = "0x11A7994", Offset = "0x11A7994", VA = "0x11A7994", Slot = "4")]
			public new bool Equals(object x, object y)
			{
				return default(bool);
			}

			[Token(Token = "0x6000954")]
			[Address(RVA = "0x11A79A0", Offset = "0x11A79A0", VA = "0x11A79A0", Slot = "5")]
			public int GetHashCode(object obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000955")]
			[Address(RVA = "0x11A63E8", Offset = "0x11A63E8", VA = "0x11A63E8")]
			public ObjEqualityComparer()
			{
			}
		}

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<IntPtr, ObjectCache> multiState;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IntPtr oldl;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal static ObjectCache oldoc;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private FreeList cache;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<object, int> objMap;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int udCacheRef;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Dictionary<Type, string> aqnameMap;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Type typeofLD;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private WeakDictionary<Type, MethodInfo> methodCache;

		[Token(Token = "0x1700006E")]
		public Dictionary<object, int>.KeyCollection Objs
		{
			[Token(Token = "0x6000934")]
			[Address(RVA = "0x11A613C", Offset = "0x11A613C", VA = "0x11A613C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0x11A5F5C", Offset = "0x11A5F5C", VA = "0x11A5F5C")]
		public static ObjectCache get(IntPtr l)
		{
			return null;
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0x11A618C", Offset = "0x11A618C", VA = "0x11A618C")]
		public ObjectCache(IntPtr l)
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0x11A63F0", Offset = "0x11A63F0", VA = "0x11A63F0")]
		public static void clear()
		{
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0x11A6468", Offset = "0x11A6468", VA = "0x11A6468")]
		internal static void del(IntPtr l)
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0x11A64E8", Offset = "0x11A64E8", VA = "0x11A64E8")]
		internal static void make(IntPtr l)
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0x11A6594", Offset = "0x11A6594", VA = "0x11A6594")]
		public int size()
		{
			return default(int);
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0x11A65E4", Offset = "0x11A65E4", VA = "0x11A65E4")]
		internal void gc(int index)
		{
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0x11A67AC", Offset = "0x11A67AC", VA = "0x11A67AC")]
		internal void gc(UnityEngine.Object o)
		{
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x11A6854", Offset = "0x11A6854", VA = "0x11A6854")]
		internal int add(object o)
		{
			return default(int);
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x11A6944", Offset = "0x11A6944", VA = "0x11A6944")]
		internal void destoryObject(IntPtr l, int p)
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x11A69BC", Offset = "0x11A69BC", VA = "0x11A69BC")]
		internal object get(IntPtr l, int p)
		{
			return null;
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0x11A6A6C", Offset = "0x11A6A6C", VA = "0x11A6A6C")]
		internal void setBack(IntPtr l, int p, object o)
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0x11A6B78", Offset = "0x11A6B78", VA = "0x11A6B78")]
		internal void push(IntPtr l, object o)
		{
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0x11A6C74", Offset = "0x11A6C74", VA = "0x11A6C74")]
		internal void push(IntPtr l, Array o)
		{
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0x11A6D2C", Offset = "0x11A6D2C", VA = "0x11A6D2C")]
		internal int allocID(IntPtr l, object o)
		{
			return default(int);
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0x11A6E38", Offset = "0x11A6E38", VA = "0x11A6E38")]
		internal void pushInterface(IntPtr l, object o, Type t)
		{
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0x11A6B80", Offset = "0x11A6B80", VA = "0x11A6B80")]
		internal void push(IntPtr l, object o, bool checkReflect)
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x11A7014", Offset = "0x11A7014", VA = "0x11A7014")]
		private static string getAQName(object o)
		{
			return null;
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0x11A6F14", Offset = "0x11A6F14", VA = "0x11A6F14")]
		internal static string getAQName(Type t)
		{
			return null;
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0x11A6720", Offset = "0x11A6720", VA = "0x11A6720")]
		private bool isGcObject(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0x11A7084", Offset = "0x11A7084", VA = "0x11A7084")]
		public bool isObjInLua(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0x11A70DC", Offset = "0x11A70DC", VA = "0x11A70DC")]
		private static Type getTypeInGlobal(string name)
		{
			return null;
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0x11A7310", Offset = "0x11A7310", VA = "0x11A7310")]
		internal MethodInfo getDelegateMethod(Type t)
		{
			return null;
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0x11A7554", Offset = "0x11A7554", VA = "0x11A7554")]
		private static bool isMethodCompatibleWithDelegate(MethodInfo target, Type dt)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000240")]
	public enum EOL
	{
		[Token(Token = "0x4000960")]
		Native,
		[Token(Token = "0x4000961")]
		CRLF,
		[Token(Token = "0x4000962")]
		CR,
		[Token(Token = "0x4000963")]
		LF
	}
	[Token(Token = "0x2000241")]
	public enum JITBUILDTYPE
	{
		[Token(Token = "0x4000965")]
		none,
		[Token(Token = "0x4000966")]
		X86,
		[Token(Token = "0x4000967")]
		X64,
		[Token(Token = "0x4000968")]
		GC64
	}
	[Token(Token = "0x2000242")]
	public class SLuaSetting : ScriptableObject
	{
		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EOL eol;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool exportExtensionMethod;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string UnityEngineGeneratePath;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool PrintTrace;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public JITBUILDTYPE jitType;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SLuaSetting _instance;

		[Token(Token = "0x1700006F")]
		public static SLuaSetting Instance
		{
			[Token(Token = "0x600095A")]
			[Address(RVA = "0x11A7A58", Offset = "0x11A7A58", VA = "0x11A7A58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0x11A7B24", Offset = "0x11A7B24", VA = "0x11A7B24")]
		public SLuaSetting()
		{
		}
	}
	[Token(Token = "0x2000243")]
	public class LuaTimer : LuaObject
	{
		[Token(Token = "0x2000244")]
		private class Timer
		{
			[Token(Token = "0x4000979")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int sn;

			[Token(Token = "0x400097A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int cycle;

			[Token(Token = "0x400097B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int deadline;

			[Token(Token = "0x400097C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Func<int, bool> handler;

			[Token(Token = "0x400097D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool delete;

			[Token(Token = "0x400097E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal IntPtr L;

			[Token(Token = "0x400097F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal List<Timer> container;

			[Token(Token = "0x600096D")]
			[Address(RVA = "0x11A97D0", Offset = "0x11A97D0", VA = "0x11A97D0")]
			public Timer()
			{
			}
		}

		[Token(Token = "0x2000245")]
		private class Wheel
		{
			[Token(Token = "0x4000980")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static int dial_scale;

			[Token(Token = "0x4000981")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int head;

			[Token(Token = "0x4000982")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal List<Timer>[] vecDial;

			[Token(Token = "0x4000983")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int dialSize;

			[Token(Token = "0x4000984")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int timeRange;

			[Token(Token = "0x4000985")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Wheel nextWheel;

			[Token(Token = "0x600096E")]
			[Address(RVA = "0x11A9424", Offset = "0x11A9424", VA = "0x11A9424")]
			internal Wheel(int dialSize)
			{
			}

			[Token(Token = "0x600096F")]
			[Address(RVA = "0x11A9138", Offset = "0x11A9138", VA = "0x11A9138")]
			internal List<Timer> nextDial()
			{
				return null;
			}

			[Token(Token = "0x6000970")]
			[Address(RVA = "0x11A895C", Offset = "0x11A895C", VA = "0x11A895C")]
			internal void add(int delay, Timer tm)
			{
			}
		}

		[Token(Token = "0x400096F")]
		private const int TimerMaxInit = 16;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int nextSn;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int jiffies_msec;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static float jiffies_sec;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Wheel[] wheels;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static float pileSecs;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static float nowTime;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Dictionary<int, Timer> mapSnTimer;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static List<Timer> executeTimers;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static bool inited;

		[Token(Token = "0x600095C")]
		[Address(RVA = "0x11A8754", Offset = "0x11A8754", VA = "0x11A8754")]
		private static int intpow(int n, int m)
		{
			return default(int);
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0x11A877C", Offset = "0x11A877C", VA = "0x11A877C")]
		private static void innerAdd(int deadline, Timer tm)
		{
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0x11A8AD8", Offset = "0x11A8AD8", VA = "0x11A8AD8")]
		private static void innerDel(Timer tm)
		{
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0x11A8B30", Offset = "0x11A8B30", VA = "0x11A8B30")]
		private static void innerDel(Timer tm, bool removeFromMap)
		{
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x11A88E0", Offset = "0x11A88E0", VA = "0x11A88E0")]
		private static int now()
		{
			return default(int);
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x11A8BFC", Offset = "0x11A8BFC", VA = "0x11A8BFC")]
		internal static void tick(float deltaTime)
		{
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0x11A9174", Offset = "0x11A9174", VA = "0x11A9174")]
		private static void init()
		{
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x11A9588", Offset = "0x11A9588", VA = "0x11A9588")]
		private static int fetchSn()
		{
			return default(int);
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0x11A95E8", Offset = "0x11A95E8", VA = "0x11A95E8")]
		internal static int add(IntPtr L, int delay, Action<int> handler)
		{
			return default(int);
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0x11A96DC", Offset = "0x11A96DC", VA = "0x11A96DC")]
		internal static int add(IntPtr L, int delay, int cycle, Func<int, bool> handler)
		{
			return default(int);
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0x11A97D8", Offset = "0x11A97D8", VA = "0x11A97D8")]
		internal static void del(int sn)
		{
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x11A7B80", Offset = "0x11A7B80", VA = "0x11A7B80")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int Delete(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x11A7CD4", Offset = "0x11A7CD4", VA = "0x11A7CD4")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int Add(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0x11A8234", Offset = "0x11A8234", VA = "0x11A8234")]
		[MonoPInvokeCallback(typeof(LuaCSFunction))]
		public static int DeleteAll(IntPtr l)
		{
			return default(int);
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x11A989C", Offset = "0x11A989C", VA = "0x11A989C")]
		public static void reg(IntPtr l)
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x11A9A84", Offset = "0x11A9A84", VA = "0x11A9A84")]
		public LuaTimer()
		{
		}
	}
	[Token(Token = "0x2000249")]
	public class WeakDictionary<K, V>
	{
		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<K, WeakReference> _dict;

		[Token(Token = "0x17000070")]
		public V this[K key]
		{
			[Token(Token = "0x6000978")]
			get
			{
				return (V)null;
			}
			[Token(Token = "0x6000979")]
			set
			{
			}
		}

		[Token(Token = "0x17000071")]
		public int AliveCount
		{
			[Token(Token = "0x600097A")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000072")]
		public ICollection<K> Keys
		{
			[Token(Token = "0x600097B")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000073")]
		public ICollection<V> Values
		{
			[Token(Token = "0x600097C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600097D")]
		public void Add(K key, V value)
		{
		}

		[Token(Token = "0x600097E")]
		public bool ContainsKey(K key)
		{
			return default(bool);
		}

		[Token(Token = "0x600097F")]
		public bool Remove(K key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000980")]
		public bool TryGetValue(K key, out V value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000981")]
		public WeakDictionary()
		{
		}
	}
	[Token(Token = "0x200024A")]
	public class LuaThreadWrapper : LuaVar
	{
		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IntPtr _thread;

		[Token(Token = "0x6000982")]
		[Address(RVA = "0x11A9D78", Offset = "0x11A9D78", VA = "0x11A9D78")]
		public LuaThreadWrapper(LuaFunction func)
		{
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0x11A9EDC", Offset = "0x11A9EDC", VA = "0x11A9EDC", Slot = "1")]
		~LuaThreadWrapper()
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0x11A9F7C", Offset = "0x11A9F7C", VA = "0x11A9F7C", Slot = "5")]
		public override void Dispose(bool disposeManagedResources)
		{
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0x11A9FE8", Offset = "0x11A9FE8", VA = "0x11A9FE8")]
		public bool EqualsTo(IntPtr L)
		{
			return default(bool);
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0x11A9FF4", Offset = "0x11A9FF4", VA = "0x11A9FF4")]
		private object TopObjects(int nArgs)
		{
			return null;
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x11AA140", Offset = "0x11AA140", VA = "0x11AA140")]
		public bool Resume(out object retVal, object[] args)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200024B")]
	public static class UnityExtension
	{
		[Token(Token = "0x200024C")]
		internal class YieldBreak
		{
			[Token(Token = "0x400098D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public object[] values;

			[Token(Token = "0x600098A")]
			[Address(RVA = "0x11AA480", Offset = "0x11AA480", VA = "0x11AA480")]
			public YieldBreak(params object[] values)
			{
			}
		}

		[Token(Token = "0x200024D")]
		[CompilerGenerated]
		private sealed class <LuaCoroutine>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400098E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400098F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000990")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LuaFunction func;

			[Token(Token = "0x4000991")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private LuaThreadWrapper <thread>5__2;

			[Token(Token = "0x4000992")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private object[] <return_values>5__3;

			[Token(Token = "0x4000993")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IEnumerator <enumerator>5__4;

			[Token(Token = "0x17000074")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600098E")]
				[Address(RVA = "0x11AA704", Offset = "0x11AA704", VA = "0x11AA704", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000075")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000990")]
				[Address(RVA = "0x11AA74C", Offset = "0x11AA74C", VA = "0x11AA74C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600098B")]
			[Address(RVA = "0x11AA458", Offset = "0x11AA458", VA = "0x11AA458")]
			[DebuggerHidden]
			public <LuaCoroutine>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x600098C")]
			[Address(RVA = "0x11AA4A8", Offset = "0x11AA4A8", VA = "0x11AA4A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600098D")]
			[Address(RVA = "0x11AA4AC", Offset = "0x11AA4AC", VA = "0x11AA4AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600098F")]
			[Address(RVA = "0x11AA70C", Offset = "0x11AA70C", VA = "0x11AA70C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0x11AA3C4", Offset = "0x11AA3C4", VA = "0x11AA3C4")]
		public static Coroutine StartCoroutine(this MonoBehaviour mb, LuaFunction func)
		{
			return null;
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0x11AA3F0", Offset = "0x11AA3F0", VA = "0x11AA3F0")]
		[IteratorStateMachine(typeof(<LuaCoroutine>d__2))]
		internal static IEnumerator LuaCoroutine(LuaFunction func)
		{
			return null;
		}
	}
	[Token(Token = "0x200024E")]
	[LuaBinder(3)]
	public class BindCustom
	{
		[Token(Token = "0x6000991")]
		[Address(RVA = "0x11AA754", Offset = "0x11AA754", VA = "0x11AA754")]
		public static Action<IntPtr>[] GetBindList()
		{
			return null;
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0x11AA8D8", Offset = "0x11AA8D8", VA = "0x11AA8D8")]
		public BindCustom()
		{
		}
	}
	[Token(Token = "0x200024F")]
	public class LuaDelegation : LuaObject
	{
		[Token(Token = "0x6000993")]
		[Address(RVA = "0x11AA8E0", Offset = "0x11AA8E0", VA = "0x11AA8E0")]
		internal static void Lua_System_Action_1_int(LuaFunction ld, int a1)
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x11AA9BC", Offset = "0x11AA9BC", VA = "0x11AA9BC")]
		internal static void Lua_System_Action_2_int_Dictionary_System_Int32_object_(LuaFunction ld, int a1, Dictionary<int, object> a2)
		{
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0x11AAAB4", Offset = "0x11AAAB4", VA = "0x11AAAB4")]
		internal static void Lua_System_Action_2_int_string(LuaFunction ld, int a1, string a2)
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0x11AABAC", Offset = "0x11AABAC", VA = "0x11AABAC")]
		internal static int Lua_System_Comparison_1_int(LuaFunction ld, int a1, int a2)
		{
			return default(int);
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0x11AACC4", Offset = "0x11AACC4", VA = "0x11AACC4")]
		internal static int Lua_System_Func_1_int(LuaFunction ld)
		{
			return default(int);
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0x11AADAC", Offset = "0x11AADAC", VA = "0x11AADAC")]
		internal static bool Lua_System_Predicate_1_int(LuaFunction ld, int a1)
		{
			return default(bool);
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0x11AAEB0", Offset = "0x11AAEB0", VA = "0x11AAEB0")]
		public LuaDelegation()
		{
		}
	}
}
namespace MersenneTwister
{
	[Token(Token = "0x2000250")]
	public class RandomMT
	{
		[Token(Token = "0x4000994")]
		private const int N = 624;

		[Token(Token = "0x4000995")]
		private const int M = 397;

		[Token(Token = "0x4000996")]
		private const uint K = 2567483615u;

		[Token(Token = "0x4000997")]
		private const uint DEFAULT_SEED = 4357u;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ulong[] state;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int next;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ulong seedValue;

		[Token(Token = "0x600099A")]
		[Address(RVA = "0x11AAF08", Offset = "0x11AAF08", VA = "0x11AAF08")]
		public RandomMT()
		{
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0x11AAFC8", Offset = "0x11AAFC8", VA = "0x11AAFC8")]
		public RandomMT(ulong _seed)
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0x11AB03C", Offset = "0x11AB03C", VA = "0x11AB03C")]
		public ulong RandomInt()
		{
			return default(ulong);
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0x11AB2A0", Offset = "0x11AB2A0", VA = "0x11AB2A0")]
		public float RandomFloat()
		{
			return default(float);
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0x11AAF6C", Offset = "0x11AAF6C", VA = "0x11AAF6C")]
		private void SeedMT(ulong _seed)
		{
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0x11AB0B4", Offset = "0x11AB0B4", VA = "0x11AB0B4")]
		private ulong ReloadMT()
		{
			return default(ulong);
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x11AB2D8", Offset = "0x11AB2D8", VA = "0x11AB2D8")]
		private ulong hiBit(ulong _u)
		{
			return default(ulong);
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0x11AB2D0", Offset = "0x11AB2D0", VA = "0x11AB2D0")]
		private ulong loBit(ulong _u)
		{
			return default(ulong);
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0x11AB2E0", Offset = "0x11AB2E0", VA = "0x11AB2E0")]
		private ulong loBits(ulong _u)
		{
			return default(ulong);
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x11AB2C4", Offset = "0x11AB2C4", VA = "0x11AB2C4")]
		private ulong mixBits(ulong _u, ulong _v)
		{
			return default(ulong);
		}
	}
}
namespace RestSharp.Contrib
{
	[Token(Token = "0x2000251")]
	internal class Helpers
	{
		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly CultureInfo InvariantCulture;

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x11AB2E8", Offset = "0x11AB2E8", VA = "0x11AB2E8")]
		public Helpers()
		{
		}
	}
	[Token(Token = "0x2000252")]
	internal class HttpEncoder
	{
		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static char[] hexChars;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static object entitiesLock;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static SortedDictionary<string, char> entities;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static HttpEncoder defaultEncoder;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static HttpEncoder currentEncoder;

		[Token(Token = "0x17000076")]
		private static IDictionary<string, char> Entities
		{
			[Token(Token = "0x60009A6")]
			[Address(RVA = "0x11AB364", Offset = "0x11AB364", VA = "0x11AB364")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000077")]
		public static HttpEncoder Current
		{
			[Token(Token = "0x60009A7")]
			[Address(RVA = "0x11AE8F8", Offset = "0x11AE8F8", VA = "0x11AE8F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000078")]
		public static HttpEncoder Default
		{
			[Token(Token = "0x60009A8")]
			[Address(RVA = "0x11AE950", Offset = "0x11AE950", VA = "0x11AE950")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x11AE9A8", Offset = "0x11AE9A8", VA = "0x11AE9A8")]
		static HttpEncoder()
		{
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0x11AEA70", Offset = "0x11AEA70", VA = "0x11AEA70")]
		public HttpEncoder()
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x11AEA78", Offset = "0x11AEA78", VA = "0x11AEA78")]
		internal static void HeaderNameValueEncode(string headerName, string headerValue, out string encodedHeaderName, out string encodedHeaderValue)
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0x11AEC70", Offset = "0x11AEC70", VA = "0x11AEC70")]
		private static void StringBuilderAppend(string s, ref StringBuilder sb)
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0x11AEB2C", Offset = "0x11AEB2C", VA = "0x11AEB2C")]
		private static string EncodeHeaderString(string input)
		{
			return null;
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x11AECF4", Offset = "0x11AECF4", VA = "0x11AECF4")]
		internal static string UrlPathEncode(string value)
		{
			return null;
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x11AEFE8", Offset = "0x11AEFE8", VA = "0x11AEFE8")]
		internal static byte[] UrlEncodeToBytes(byte[] bytes, int offset, int count)
		{
			return null;
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x11AF4C8", Offset = "0x11AF4C8", VA = "0x11AF4C8")]
		internal static string HtmlEncode(string s)
		{
			return null;
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0x11AF7D8", Offset = "0x11AF7D8", VA = "0x11AF7D8")]
		internal static string HtmlAttributeEncode(string s)
		{
			return null;
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0x11AF9C0", Offset = "0x11AF9C0", VA = "0x11AF9C0")]
		internal static string HtmlDecode(string s)
		{
			return null;
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x11B00B0", Offset = "0x11B00B0", VA = "0x11B00B0")]
		internal static bool NotEncoded(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x11AF1E0", Offset = "0x11AF1E0", VA = "0x11AF1E0")]
		internal static void UrlEncodeChar(char c, Stream result, bool isUnicode)
		{
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x11AEE28", Offset = "0x11AEE28", VA = "0x11AEE28")]
		internal static void UrlPathEncodeChar(char c, Stream result)
		{
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x11AB4BC", Offset = "0x11AB4BC", VA = "0x11AB4BC")]
		private static void InitEntities()
		{
		}
	}
	[Token(Token = "0x2000253")]
	public sealed class HttpUtility
	{
		[Token(Token = "0x2000254")]
		private sealed class HttpQSCollection : NameValueCollection
		{
			[Token(Token = "0x60009D9")]
			[Address(RVA = "0x11B1B40", Offset = "0x11B1B40", VA = "0x11B1B40", Slot = "3")]
			public override string ToString()
			{
				return null;
			}

			[Token(Token = "0x60009DA")]
			[Address(RVA = "0x11B19B8", Offset = "0x11B19B8", VA = "0x11B19B8")]
			public HttpQSCollection()
			{
			}
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0x11B00F4", Offset = "0x11B00F4", VA = "0x11B00F4")]
		public HttpUtility()
		{
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x11B00FC", Offset = "0x11B00FC", VA = "0x11B00FC")]
		public static void HtmlAttributeEncode(string s, TextWriter output)
		{
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x11B01BC", Offset = "0x11B01BC", VA = "0x11B01BC")]
		public static string HtmlAttributeEncode(string s)
		{
			return null;
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x11B0210", Offset = "0x11B0210", VA = "0x11B0210")]
		public static string UrlDecode(string str)
		{
			return null;
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0x11B0454", Offset = "0x11B0454", VA = "0x11B0454")]
		private static char[] GetChars(MemoryStream b, Encoding e)
		{
			return null;
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0x11B04BC", Offset = "0x11B04BC", VA = "0x11B04BC")]
		private static void WriteCharBytes(IList buf, char ch, Encoding e)
		{
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0x11B0230", Offset = "0x11B0230", VA = "0x11B0230")]
		public static string UrlDecode(string s, Encoding e)
		{
			return null;
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x11B0788", Offset = "0x11B0788", VA = "0x11B0788")]
		public static string UrlDecode(byte[] bytes, Encoding e)
		{
			return null;
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x11B0B04", Offset = "0x11B0B04", VA = "0x11B0B04")]
		private static int GetInt(byte b)
		{
			return default(int);
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x11B0B54", Offset = "0x11B0B54", VA = "0x11B0B54")]
		private static int GetChar(byte[] bytes, int offset, int length)
		{
			return default(int);
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0x11B06B8", Offset = "0x11B06B8", VA = "0x11B06B8")]
		private static int GetChar(string str, int offset, int length)
		{
			return default(int);
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0x11B07A0", Offset = "0x11B07A0", VA = "0x11B07A0")]
		public static string UrlDecode(byte[] bytes, int offset, int count, Encoding e)
		{
			return null;
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x11B0BFC", Offset = "0x11B0BFC", VA = "0x11B0BFC")]
		public static byte[] UrlDecodeToBytes(byte[] bytes)
		{
			return null;
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x11B0DF4", Offset = "0x11B0DF4", VA = "0x11B0DF4")]
		public static byte[] UrlDecodeToBytes(string str)
		{
			return null;
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x11B0E14", Offset = "0x11B0E14", VA = "0x11B0E14")]
		public static byte[] UrlDecodeToBytes(string str, Encoding e)
		{
			return null;
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x11B0C10", Offset = "0x11B0C10", VA = "0x11B0C10")]
		public static byte[] UrlDecodeToBytes(byte[] bytes, int offset, int count)
		{
			return null;
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x11B0EA8", Offset = "0x11B0EA8", VA = "0x11B0EA8")]
		public static string UrlEncode(string str)
		{
			return null;
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x11B0EC8", Offset = "0x11B0EC8", VA = "0x11B0EC8")]
		public static string UrlEncode(string s, Encoding Enc)
		{
			return null;
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x11B1150", Offset = "0x11B1150", VA = "0x11B1150")]
		public static string UrlEncode(byte[] bytes)
		{
			return null;
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x11B11F4", Offset = "0x11B11F4", VA = "0x11B11F4")]
		public static string UrlEncode(byte[] bytes, int offset, int count)
		{
			return null;
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x11B12AC", Offset = "0x11B12AC", VA = "0x11B12AC")]
		public static byte[] UrlEncodeToBytes(string str)
		{
			return null;
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x11B12CC", Offset = "0x11B12CC", VA = "0x11B12CC")]
		public static byte[] UrlEncodeToBytes(string str, Encoding e)
		{
			return null;
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x11B136C", Offset = "0x11B136C", VA = "0x11B136C")]
		public static byte[] UrlEncodeToBytes(byte[] bytes)
		{
			return null;
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x11B10CC", Offset = "0x11B10CC", VA = "0x11B10CC")]
		public static byte[] UrlEncodeToBytes(byte[] bytes, int offset, int count)
		{
			return null;
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x11B13E4", Offset = "0x11B13E4", VA = "0x11B13E4")]
		public static string UrlEncodeUnicode(string str)
		{
			return null;
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x11B143C", Offset = "0x11B143C", VA = "0x11B143C")]
		public static byte[] UrlEncodeUnicodeToBytes(string str)
		{
			return null;
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x11B156C", Offset = "0x11B156C", VA = "0x11B156C")]
		public static string HtmlDecode(string s)
		{
			return null;
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x11B15C0", Offset = "0x11B15C0", VA = "0x11B15C0")]
		public static void HtmlDecode(string s, TextWriter output)
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x11B169C", Offset = "0x11B169C", VA = "0x11B169C")]
		public static string HtmlEncode(string s)
		{
			return null;
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x11B16F0", Offset = "0x11B16F0", VA = "0x11B16F0")]
		public static void HtmlEncode(string s, TextWriter output)
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x11B17CC", Offset = "0x11B17CC", VA = "0x11B17CC")]
		public static string UrlPathEncode(string s)
		{
			return null;
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x11B1820", Offset = "0x11B1820", VA = "0x11B1820")]
		public static NameValueCollection ParseQueryString(string query)
		{
			return null;
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x11B1840", Offset = "0x11B1840", VA = "0x11B1840")]
		public static NameValueCollection ParseQueryString(string query, Encoding encoding)
		{
			return null;
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x11B19C0", Offset = "0x11B19C0", VA = "0x11B19C0")]
		internal static void ParseQueryString(string query, Encoding encoding, NameValueCollection result)
		{
		}
	}
}
namespace Bowser
{
	[Token(Token = "0x2000255")]
	public class BowserTriggerHandler : MonoBehaviour
	{
		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x11B1CC8", Offset = "0x11B1CC8", VA = "0x11B1CC8")]
		public static void Grab(Transform transform)
		{
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x11B1D64", Offset = "0x11B1D64", VA = "0x11B1D64")]
		public static void StartBackAlleyAmbience(Transform transform)
		{
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x11B1DD8", Offset = "0x11B1DD8", VA = "0x11B1DD8")]
		public static void StartElevatorAmbience(Transform transform)
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x11B1E4C", Offset = "0x11B1E4C", VA = "0x11B1E4C")]
		public static void StartScrapperStreetAmbience(Transform transform)
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0x11B1EC0", Offset = "0x11B1EC0", VA = "0x11B1EC0")]
		public static void StartBarAmbience(int floor, Transform transform)
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0x11B1F44", Offset = "0x11B1F44", VA = "0x11B1F44")]
		public static void OnPlayerColorChanged(Vector3 position)
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0x11B1FEC", Offset = "0x11B1FEC", VA = "0x11B1FEC")]
		public static void PutDownGlass(Transform transform)
		{
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0x11B2088", Offset = "0x11B2088", VA = "0x11B2088")]
		public static void OnGlassBreak(Vector3 position)
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0x11B2130", Offset = "0x11B2130", VA = "0x11B2130")]
		public static void PositiveConsoleMessage(Vector3 position)
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0x11B21D8", Offset = "0x11B21D8", VA = "0x11B21D8")]
		public static void OnPlayerEnteredElevator(Vector3 position)
		{
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0x11B2280", Offset = "0x11B2280", VA = "0x11B2280")]
		public static void OnPlayerEnteredBar(Vector3 position)
		{
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x11B2328", Offset = "0x11B2328", VA = "0x11B2328")]
		public static void OnPlayerLeftBar(Vector3 position)
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x11B23D0", Offset = "0x11B23D0", VA = "0x11B23D0")]
		public static void OnPlayerEnteredBackAlley(Vector3 position)
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x11B2478", Offset = "0x11B2478", VA = "0x11B2478")]
		public static void OnPlayerLeftScrapper(Vector3 position)
		{
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x11B2520", Offset = "0x11B2520", VA = "0x11B2520")]
		public static void OnPlayerEnteredScrapper(Vector3 position)
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x11B25C8", Offset = "0x11B25C8", VA = "0x11B25C8")]
		internal static void OnItemDropped(Transform transform, GrabbableData.DropSound dropSound)
		{
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x11B26B8", Offset = "0x11B26B8", VA = "0x11B26B8")]
		internal static void OnFriendMatchFistBumpParticles(Vector3 spawnPoint)
		{
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x11B2760", Offset = "0x11B2760", VA = "0x11B2760")]
		internal static void OnFriendMatchAppear(Transform transform)
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x11B27FC", Offset = "0x11B27FC", VA = "0x11B27FC")]
		internal static void OnThumbsUpStarted(Transform transform)
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0x11B2898", Offset = "0x11B2898", VA = "0x11B2898")]
		internal static void OnThumbsUpStopped(Transform transform)
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0x11B2908", Offset = "0x11B2908", VA = "0x11B2908")]
		internal static void OnThumbsDownStarted(Transform transform)
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0x11B29A4", Offset = "0x11B29A4", VA = "0x11B29A4")]
		internal static void OnThumbsDownStopped(Transform transform)
		{
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0x11B2A14", Offset = "0x11B2A14", VA = "0x11B2A14")]
		internal static void OnThumbsUpConfirmed(Transform transform)
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x11B2AB0", Offset = "0x11B2AB0", VA = "0x11B2AB0")]
		internal static void OnThumbsDownConfirmed(Transform transform)
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x11B2B4C", Offset = "0x11B2B4C", VA = "0x11B2B4C")]
		internal static void OnFriendMatchPageSwitched(Transform transform)
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x11B2B50", Offset = "0x11B2B50", VA = "0x11B2B50")]
		internal static void OnFriendMatchDeclined(Transform transform)
		{
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x11B2BEC", Offset = "0x11B2BEC", VA = "0x11B2BEC")]
		internal static void OnFriendMatchAnimateOut(Transform transform)
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0x11B2C88", Offset = "0x11B2C88", VA = "0x11B2C88")]
		internal static void OnFriendMatchStarting(Transform transform)
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0x11B2D24", Offset = "0x11B2D24", VA = "0x11B2D24")]
		internal static void OnSpectateFriendMatchSpawning(Transform transform)
		{
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x11B2DC0", Offset = "0x11B2DC0", VA = "0x11B2DC0")]
		internal static void OnSpectateFriendMatchActive(Transform transform)
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x11B2E5C", Offset = "0x11B2E5C", VA = "0x11B2E5C")]
		internal static void OnSpectateFriendMatchGrabbed(Transform transform)
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x11B2EF8", Offset = "0x11B2EF8", VA = "0x11B2EF8")]
		internal static void OnSpectateFriendMatchDespawn(Transform transform)
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x11B2F94", Offset = "0x11B2F94", VA = "0x11B2F94")]
		internal static void OnDartGrabbed(Transform transform)
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x11B3030", Offset = "0x11B3030", VA = "0x11B3030")]
		internal static void OnDartThrown(Transform transform)
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x11B30CC", Offset = "0x11B30CC", VA = "0x11B30CC")]
		internal static void OnDartHitBoardLow(Vector3 position)
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x11B3174", Offset = "0x11B3174", VA = "0x11B3174")]
		internal static void OnDartHitBoardMid(Vector3 position)
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x11B321C", Offset = "0x11B321C", VA = "0x11B321C")]
		internal static void OnDartHitBoardHard(Vector3 position)
		{
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0x11B32C4", Offset = "0x11B32C4", VA = "0x11B32C4")]
		internal static void OnDartHitOutsideBoard(Vector3 position)
		{
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x11B336C", Offset = "0x11B336C", VA = "0x11B336C")]
		internal static void OnLowDartScore(Vector3 position)
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x11B3414", Offset = "0x11B3414", VA = "0x11B3414")]
		internal static void OnMediumDartScore(Vector3 position)
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x11B34BC", Offset = "0x11B34BC", VA = "0x11B34BC")]
		internal static void OnHighDartScore(Vector3 position)
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x11B3564", Offset = "0x11B3564", VA = "0x11B3564")]
		internal static void OnDartBoardScoreReset(Vector3 position)
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x11B360C", Offset = "0x11B360C", VA = "0x11B360C")]
		internal static void OnElevatorStartMovement(Transform transform)
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x11B36A8", Offset = "0x11B36A8", VA = "0x11B36A8")]
		internal static void OnElevatorStopMovement(Transform transform)
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x11B3774", Offset = "0x11B3774", VA = "0x11B3774")]
		internal static void OnElevatorReachedTargetFloor(Transform transform)
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x11B3810", Offset = "0x11B3810", VA = "0x11B3810")]
		internal static void OnCameraTakePhoto(Transform cameraTransform)
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x11B3898", Offset = "0x11B3898", VA = "0x11B3898")]
		internal static void OnButtonClicked(Vector3 position)
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x11B3940", Offset = "0x11B3940", VA = "0x11B3940")]
		internal static void OnElevatorUINegative(Vector3 position)
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x11B39E8", Offset = "0x11B39E8", VA = "0x11B39E8")]
		internal static void OnElevatorUIPositive(Vector3 position)
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x11B3A90", Offset = "0x11B3A90", VA = "0x11B3A90")]
		internal static void OnPlayerMenuAppear(Transform transform)
		{
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x11B3B2C", Offset = "0x11B3B2C", VA = "0x11B3B2C")]
		internal static void OnPlayerMenuHidden(Transform transform)
		{
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x11B3BC8", Offset = "0x11B3BC8", VA = "0x11B3BC8")]
		internal static void OnPlayerMenuPageSwitched(Transform transform)
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x11B3C88", Offset = "0x11B3C88", VA = "0x11B3C88")]
		public static void NegativeDoorToScrapperMarket(Vector3 position)
		{
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x11B3D30", Offset = "0x11B3D30", VA = "0x11B3D30")]
		public static void OpeningDoorToScrapperMarket(Vector3 position)
		{
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x11B3DD8", Offset = "0x11B3DD8", VA = "0x11B3DD8")]
		internal static void OnTokenInserted(Transform transform)
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x11B3E74", Offset = "0x11B3E74", VA = "0x11B3E74")]
		internal static void OnLackingToken(Vector3 position)
		{
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0x11B3F1C", Offset = "0x11B3F1C", VA = "0x11B3F1C")]
		public static void ScanPlayer(Transform transform)
		{
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0x11B3FB8", Offset = "0x11B3FB8", VA = "0x11B3FB8")]
		internal static void OnGroundBotDoorOpening(Transform transform)
		{
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0x11B4054", Offset = "0x11B4054", VA = "0x11B4054")]
		internal static void OnGroundBotDoorClosing(Transform transform)
		{
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x11B40F0", Offset = "0x11B40F0", VA = "0x11B40F0")]
		internal static void GroundBotStartPassiveSound(Transform transform)
		{
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0x11B40F4", Offset = "0x11B40F4", VA = "0x11B40F4")]
		internal static void GroundBotStopPassiveSound(Transform transform)
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x11B40F8", Offset = "0x11B40F8", VA = "0x11B40F8")]
		internal static void OnTutorialBoardAppear(Vector3 position)
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0x11B41A0", Offset = "0x11B41A0", VA = "0x11B41A0")]
		internal static void OnTutorialBoardDisappear(Vector3 position)
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x11B4248", Offset = "0x11B4248", VA = "0x11B4248")]
		internal static void StartLenaAmbience(Transform lenaAmbienceSource)
		{
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x11B42E4", Offset = "0x11B42E4", VA = "0x11B42E4")]
		internal static void OnTokenAddedToWrist(Vector3 position)
		{
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0x11B438C", Offset = "0x11B438C", VA = "0x11B438C")]
		internal static void OnJukeboxButtonClicked(Vector3 position)
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0x11B4434", Offset = "0x11B4434", VA = "0x11B4434")]
		internal static void OnTournamentConfetti(Transform transform)
		{
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0x11B44D0", Offset = "0x11B44D0", VA = "0x11B44D0")]
		internal static void OnTournamentTrophyBackgroundEffect(Transform transform)
		{
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0x11B44D4", Offset = "0x11B44D4", VA = "0x11B44D4")]
		internal static void OnTournamentTrophyDissolvingInEffect(Transform transform)
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0x11B4570", Offset = "0x11B4570", VA = "0x11B4570")]
		public BowserTriggerHandler()
		{
		}
	}
	[Token(Token = "0x2000256")]
	public class Alert
	{
		[Token(Token = "0x2000257")]
		[CompilerGenerated]
		private sealed class <AlertFromToRoutine>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Alert <>4__this;

			[Token(Token = "0x40009B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action onStart;

			[Token(Token = "0x40009B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float from;

			[Token(Token = "0x40009B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float to;

			[Token(Token = "0x40009B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float time;

			[Token(Token = "0x40009B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public bool deactivateAtEnd;

			[Token(Token = "0x40009B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Action onComplete;

			[Token(Token = "0x40009B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <timePassed>5__2;

			[Token(Token = "0x1700007A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A30")]
				[Address(RVA = "0x11B4ED0", Offset = "0x11B4ED0", VA = "0x11B4ED0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700007B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A32")]
				[Address(RVA = "0x11B4F18", Offset = "0x11B4F18", VA = "0x11B4F18", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A2D")]
			[Address(RVA = "0x11B48B8", Offset = "0x11B48B8", VA = "0x11B48B8")]
			[DebuggerHidden]
			public <AlertFromToRoutine>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6000A2E")]
			[Address(RVA = "0x11B4D5C", Offset = "0x11B4D5C", VA = "0x11B4D5C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A2F")]
			[Address(RVA = "0x11B4D60", Offset = "0x11B4D60", VA = "0x11B4D60", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A31")]
			[Address(RVA = "0x11B4ED8", Offset = "0x11B4ED8", VA = "0x11B4ED8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Fade fade;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AlertData alertData;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject alertMessage;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LocalizedText messageLocalizedText;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TMP_Text messageText;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool showingDialogue;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool alertsEnabled;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine alertCoroutine;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform targetTransform;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform dialogueReference;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 velocity;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private WaitForSeconds showAlertDelay;

		[Token(Token = "0x17000079")]
		private Vector3 targetPosition
		{
			[Token(Token = "0x6000A21")]
			[Address(RVA = "0x11B4578", Offset = "0x11B4578", VA = "0x11B4578")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0x11B45A8", Offset = "0x11B45A8", VA = "0x11B45A8")]
		public Alert(AlertData alertData, Fade fade)
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x11B4760", Offset = "0x11B4760", VA = "0x11B4760")]
		private void StopOngoingAnim()
		{
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x11B4790", Offset = "0x11B4790", VA = "0x11B4790")]
		private void OnShowAnimStarted()
		{
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x11B4804", Offset = "0x11B4804", VA = "0x11B4804")]
		[IteratorStateMachine(typeof(<AlertFromToRoutine>d__17))]
		private IEnumerator AlertFromToRoutine(float from, float to, float time, [Optional] Action onStart, [Optional] Action onComplete, bool deactivateAtEnd = false)
		{
			return null;
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x11B48E0", Offset = "0x11B48E0", VA = "0x11B48E0")]
		private void SetAlertMessageBlackAlpha(float alpha)
		{
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x11B48FC", Offset = "0x11B48FC", VA = "0x11B48FC")]
		private void UpdatePosition(Vector3 newPosition)
		{
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x11B47EC", Offset = "0x11B47EC", VA = "0x11B47EC")]
		private void RefreshPosition()
		{
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x11B4A64", Offset = "0x11B4A64", VA = "0x11B4A64")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0x11B4B50", Offset = "0x11B4B50", VA = "0x11B4B50")]
		public void SetAlertEnabled(bool enabled, bool onDisableDoFadeIn = false)
		{
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0x11B4B68", Offset = "0x11B4B68", VA = "0x11B4B68")]
		public void HideAlertMessage(bool doFadeIn = true)
		{
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x11B4C20", Offset = "0x11B4C20", VA = "0x11B4C20")]
		public void ShowAlertMessage(string messageID)
		{
		}
	}
	[Token(Token = "0x2000258")]
	public class AvatarData : MonoBehaviour, IBowserPhotonPrefabPoolListener
	{
		[Serializable]
		[Token(Token = "0x2000259")]
		public class HandAnimationParameters
		{
			[Token(Token = "0x40009D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float index;

			[Token(Token = "0x40009D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float middle;

			[Token(Token = "0x40009D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float ring;

			[Token(Token = "0x40009D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float pinky;

			[Token(Token = "0x40009D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float thumb;

			[Token(Token = "0x40009D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int grabPose;

			[Token(Token = "0x6000A3D")]
			[Address(RVA = "0x11B50A4", Offset = "0x11B50A4", VA = "0x11B50A4")]
			public HandAnimationParameters()
			{
			}
		}

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PhotonView photonView;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhotonObservableProxy photonObservableProxy;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform head;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject body;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform leftHand;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GrabberData leftHandGrabber;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform rightHand;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GrabberData rightHandGrabber;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BowserAvatarVisuals bowserAvatarVisuals;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public VRIK bodyIK;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Recorder recorder;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AudioSource speakerAudioSource;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public WristMenuData tokensWristMenuData;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public WristMenuData settingsWristMenuData;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public ColliderProxy headCollider;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform rightIndexTipCollider;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Transform leftIndexTipCollider;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Throwing")]
		public float throwStrength;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Transform rightThrowAnchor;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Transform leftThrowAnchor;

		[NonSerialized]
		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public HandAnimationParameters leftHandParameters;

		[NonSerialized]
		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public HandAnimationParameters rightHandParameters;

		[NonSerialized]
		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool isNetworked;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Action<AvatarData> OnInstantiate;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Action<AvatarData> OnDestroy;

		[Token(Token = "0x1700007C")]
		public Animator LeftHandAnimator
		{
			[Token(Token = "0x6000A33")]
			[Address(RVA = "0x11B4F20", Offset = "0x11B4F20", VA = "0x11B4F20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007D")]
		public Animator RightHandAnimator
		{
			[Token(Token = "0x6000A34")]
			[Address(RVA = "0x11B4F3C", Offset = "0x11B4F3C", VA = "0x11B4F3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007E")]
		public Color AvatarColor
		{
			[Token(Token = "0x6000A35")]
			[Address(RVA = "0x11B4F58", Offset = "0x11B4F58", VA = "0x11B4F58")]
			[CompilerGenerated]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000A36")]
			[Address(RVA = "0x11B4F64", Offset = "0x11B4F64", VA = "0x11B4F64")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700007F")]
		public Transform LeftHandAttachPoint
		{
			[Token(Token = "0x6000A37")]
			[Address(RVA = "0x11B4F70", Offset = "0x11B4F70", VA = "0x11B4F70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000080")]
		public Transform RightHandAttachPoint
		{
			[Token(Token = "0x6000A38")]
			[Address(RVA = "0x11B4F8C", Offset = "0x11B4F8C", VA = "0x11B4F8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0x11B4FA8", Offset = "0x11B4FA8", VA = "0x11B4FA8")]
		public void SetAvatarColor(Color color)
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0x11B4FD0", Offset = "0x11B4FD0", VA = "0x11B4FD0", Slot = "4")]
		public void OnPoolInstantiate()
		{
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0x11B4FF0", Offset = "0x11B4FF0", VA = "0x11B4FF0", Slot = "5")]
		public void OnPoolDestroy()
		{
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0x11B5010", Offset = "0x11B5010", VA = "0x11B5010")]
		public AvatarData()
		{
		}
	}
	[Token(Token = "0x200025A")]
	public class BarPerformanceTest : MonoBehaviour
	{
		[Token(Token = "0x200025B")]
		private struct OrkarInt
		{
			[Token(Token = "0x40009E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public RGXR_Device device;

			[Token(Token = "0x40009E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public RGXR_Bool identifier;
		}

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject barRoot;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject playerAvatar;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject bartenderRoot;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject[] otherAvatars;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static OrkarInt oiLeftHandPrimaryButton;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static OrkarInt oiLeftHandSecondaryButton;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static OrkarInt oiRightHandPrimaryButton;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static OrkarInt oiRightHandSecondaryButton;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OrkarInt[] latchButtons;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Dictionary<OrkarInt, bool> currentButtonStatus;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<OrkarInt, bool> previousButtonStatus;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int numActiveAvatars;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private XRPluginManager xrPluginManager;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BowserXR bowserXR;

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x11B50AC", Offset = "0x11B50AC", VA = "0x11B50AC")]
		private static OrkarInt Oioi(RGXR_Device d, RGXR_Bool id)
		{
			return default(OrkarInt);
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x11B50B8", Offset = "0x11B50B8", VA = "0x11B50B8")]
		private Dictionary<OrkarInt, bool> SetupLatchDictionary()
		{
			return null;
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x11B5198", Offset = "0x11B5198", VA = "0x11B5198")]
		private bool ButtonPressed(OrkarInt id)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0x11B521C", Offset = "0x11B521C", VA = "0x11B521C")]
		private bool ButtonReleased(OrkarInt id)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0x11B529C", Offset = "0x11B529C", VA = "0x11B529C")]
		private bool ButtonDown(OrkarInt id)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0x11B52F4", Offset = "0x11B52F4", VA = "0x11B52F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x11B5474", Offset = "0x11B5474", VA = "0x11B5474")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x11B573C", Offset = "0x11B573C", VA = "0x11B573C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0x11B5740", Offset = "0x11B5740", VA = "0x11B5740")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0x11B5744", Offset = "0x11B5744", VA = "0x11B5744")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x11B5408", Offset = "0x11B5408", VA = "0x11B5408")]
		private void RefreshVisualAvatars()
		{
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0x11B5760", Offset = "0x11B5760", VA = "0x11B5760")]
		public BarPerformanceTest()
		{
		}
	}
	[Token(Token = "0x200025C")]
	public class Bartender : IPunObservable
	{
		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int nextGlassViewID;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int idleChoice;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PhotonView nextGlass;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PhotonView nextNextGlass;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int latestPlacedGlassViewID;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool performFirstTimeSync;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float checkCounterTimer;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Collider[] colliders;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BartenderData data;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BowserTracking tracking;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BowserPhotonPrefabPool prefabPool;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int canPlaceGlassHash;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int fillGlassHash;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int idleChoiceHash;

		[Token(Token = "0x40009F5")]
		private const string glassPrefabName = "glass_drink_networked";

		[Token(Token = "0x40009F6")]
		private const int NO_GLASS = -1;

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x11B58C8", Offset = "0x11B58C8", VA = "0x11B58C8")]
		public Bartender(BartenderData bartenderData, BowserTracking tracking, BowserPhotonPrefabPool prefabPool)
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0x11B5B34", Offset = "0x11B5B34", VA = "0x11B5B34")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x11B5B58", Offset = "0x11B5B58", VA = "0x11B5B58")]
		private void OnGlassPlaced()
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0x11B5D68", Offset = "0x11B5D68", VA = "0x11B5D68")]
		private void OnIdleEnter()
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0x11B5EC0", Offset = "0x11B5EC0", VA = "0x11B5EC0")]
		public void GreetNewPlayer()
		{
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0x11B5F44", Offset = "0x11B5F44", VA = "0x11B5F44")]
		private void OnGrabNewGlass()
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0x11B5F90", Offset = "0x11B5F90", VA = "0x11B5F90")]
		private void OnGlassFill()
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x11B5FC0", Offset = "0x11B5FC0", VA = "0x11B5FC0")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x11B63C4", Offset = "0x11B63C4", VA = "0x11B63C4")]
		private bool IsCounterFreeFromGlasses()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x11B65DC", Offset = "0x11B65DC", VA = "0x11B65DC", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}
	}
	[Token(Token = "0x200025D")]
	public class BartenderData : MonoBehaviour
	{
		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 glassSpawnPosition;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Animator animator;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject heldGlass;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Animator glassAnimator;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject glassPrefab;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve idleProbability;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Counter check settings")]
		public float checkCounterTime;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float counterCheckRadius;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Action onGlassPlaced;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Action onGrabNewGlass;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Action onGlassFill;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Action onIdleEnter;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public PhotonObservableProxy photonProxy;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public PhotonView photonView;

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x11B6980", Offset = "0x11B6980", VA = "0x11B6980")]
		public void AnimationEventOnGlassPlaced()
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x11B699C", Offset = "0x11B699C", VA = "0x11B699C")]
		public void AnimationEventGrabNewGlass()
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0x11B69B8", Offset = "0x11B69B8", VA = "0x11B69B8")]
		public void AnimationEventFillGlass()
		{
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x11B69D4", Offset = "0x11B69D4", VA = "0x11B69D4")]
		public void OnIdleEnter()
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x11B69F0", Offset = "0x11B69F0", VA = "0x11B69F0")]
		public BartenderData()
		{
		}
	}
	[Token(Token = "0x200025E")]
	public class IdlePicker : StateMachineBehaviour
	{
		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BartenderData bartenderData;

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x11B6A1C", Offset = "0x11B6A1C", VA = "0x11B6A1C", Slot = "4")]
		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0x11B6B10", Offset = "0x11B6B10", VA = "0x11B6B10")]
		public IdlePicker()
		{
		}
	}
	[Token(Token = "0x200025F")]
	public class BowserApplication
	{
		[Token(Token = "0x4000A06")]
		public const string APPVERSIONPREFIX = "Bowser_v";

		[Token(Token = "0x4000A07")]
		public const string FIXEDPHOTONREGION = "usw";

		[Token(Token = "0x4000A08")]
		public const string ROOM_PROP_CODE = "code";

		[Token(Token = "0x4000A09")]
		public const string TOURNAMENT_PROP_CODE = "tour";

		[Token(Token = "0x4000A0A")]
		public const string PLAYERIDKEY = "player_id";

		[Token(Token = "0x4000A0B")]
		public const string PLAYERNAMEKEY = "player_name";

		[Token(Token = "0x4000A0C")]
		public const string PLAYERAVATARKEY = "player_avatar";

		[Token(Token = "0x4000A0D")]
		public const string PLAYERRANKKEY = "player_rank";

		[Token(Token = "0x4000A0E")]
		public const string PREFAVATARCOLORKEYPREFIX = "avatarcolor_";

		[Token(Token = "0x4000A0F")]
		public const string PREFSOCIALCONTRACTKEYPREFIX = "ozosocialcontract_";

		[Token(Token = "0x4000A10")]
		public const int NUM_FLOORS = 3;

		[Token(Token = "0x4000A11")]
		public const int MAX_PUBLIC_ROOM_INSTANCES_PER_FLOOR = 100;

		[Token(Token = "0x4000A12")]
		public const int PRIVATE_ROOM_CODE_LENGTH = 4;

		[Token(Token = "0x4000A13")]
		public const int TOURNAMENT_CODE_LENGTH = 6;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly byte[] MAX_PLAYER_COUNT_AT_FLOOR;

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0x11B6B18", Offset = "0x11B6B18", VA = "0x11B6B18")]
		public static string GetAppVersion()
		{
			return null;
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0x11B6CD4", Offset = "0x11B6CD4", VA = "0x11B6CD4")]
		public static bool IsValidPublicRoomNumber(int number)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0x11B6CE4", Offset = "0x11B6CE4", VA = "0x11B6CE4")]
		public static int ExtractFloorFromPublicRoomNumber(int roomNumber)
		{
			return default(int);
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0x11B6D00", Offset = "0x11B6D00", VA = "0x11B6D00")]
		public static bool IsValidPrivateRoomCode(string code)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x11B6D4C", Offset = "0x11B6D4C", VA = "0x11B6D4C")]
		public static bool IsValidTournamentCode(string code)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0x11B6D98", Offset = "0x11B6D98", VA = "0x11B6D98")]
		public static byte GetMaxPlayerCountAtFloor(int roomFloor)
		{
			return default(byte);
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0x11B6E14", Offset = "0x11B6E14", VA = "0x11B6E14")]
		public static byte GetMaxPlayerCount()
		{
			return default(byte);
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x11B6F08", Offset = "0x11B6F08", VA = "0x11B6F08")]
		public BowserApplication()
		{
		}
	}
	[Token(Token = "0x2000260")]
	public class BowserRoomInfo
	{
		[Token(Token = "0x2000261")]
		public enum Type
		{
			[Token(Token = "0x4000A1B")]
			PublicRoom,
			[Token(Token = "0x4000A1C")]
			PrivateRoom,
			[Token(Token = "0x4000A1D")]
			TournamentRoom
		}

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string photonRoomName;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string publicRoomNumber;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string privateRoomCode;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string tournamentCode;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int? floor;

		[Token(Token = "0x17000081")]
		public Type RoomType
		{
			[Token(Token = "0x6000A67")]
			[Address(RVA = "0x11B70C8", Offset = "0x11B70C8", VA = "0x11B70C8")]
			get
			{
				return default(Type);
			}
		}

		[Token(Token = "0x17000082")]
		public bool IsTournamentRoom
		{
			[Token(Token = "0x6000A68")]
			[Address(RVA = "0x11B7108", Offset = "0x11B7108", VA = "0x11B7108")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000083")]
		public bool IsPrivateRoom
		{
			[Token(Token = "0x6000A69")]
			[Address(RVA = "0x11B7128", Offset = "0x11B7128", VA = "0x11B7128")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000084")]
		public string DisplayName
		{
			[Token(Token = "0x6000A6A")]
			[Address(RVA = "0x11B7148", Offset = "0x11B7148", VA = "0x11B7148")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0x11B6FA4", Offset = "0x11B6FA4", VA = "0x11B6FA4")]
		public BowserRoomInfo()
		{
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x11B6FAC", Offset = "0x11B6FAC", VA = "0x11B6FAC")]
		public BowserRoomInfo(BowserIntegration.ReturnAfterMatchData returnAfterMatchData)
		{
		}
	}
	[Token(Token = "0x2000262")]
	public static class BowserIntegration
	{
		[Serializable]
		[Token(Token = "0x2000263")]
		public class ReturnAfterMatchData
		{
			[Token(Token = "0x4000A2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int floor;

			[Token(Token = "0x4000A2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string roomName;

			[Token(Token = "0x4000A2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string privateRoomCode;

			[Token(Token = "0x4000A2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string tournamentCode;

			[Token(Token = "0x6000A78")]
			[Address(RVA = "0x11B7F90", Offset = "0x11B7F90", VA = "0x11B7F90")]
			public ReturnAfterMatchData(int floor, string roomName, string privateRoomCode, string tournamentCode)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000264")]
		public class DeepLinkData
		{
			[Token(Token = "0x4000A30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string destination;

			[Token(Token = "0x4000A31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string lobbyId;

			[Token(Token = "0x4000A32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string matchId;

			[Token(Token = "0x6000A79")]
			[Address(RVA = "0x11B7FD4", Offset = "0x11B7FD4", VA = "0x11B7FD4")]
			public DeepLinkData(string destination, string lobbyId, string matchId)
			{
			}
		}

		[Token(Token = "0x4000A1E")]
		public const string PlayerNameKey = "PlayerName";

		[Token(Token = "0x4000A1F")]
		public const string PlayerIdKey = "PlayerId";

		[Token(Token = "0x4000A20")]
		public const string AvatarKey = "Avatar";

		[Token(Token = "0x4000A21")]
		public const string RankKey = "Rank";

		[Token(Token = "0x4000A22")]
		public const string AllowedToEnterKey = "AllowedToEnterKey";

		[Token(Token = "0x4000A23")]
		public const string NetworkingRegionKey = "NetworkingRegion";

		[Token(Token = "0x4000A24")]
		public const string MultiplayerProtocolVersionKey = "MultiplayerProtocolVersion";

		[Token(Token = "0x4000A25")]
		public const string LaunchParametersKey = "LaunchParameters";

		[Token(Token = "0x4000A26")]
		public const string IsProductionKey = "IsProductionKey";

		[Token(Token = "0x4000A27")]
		public const string PlatformLoginDataKey = "PlatformLoginData";

		[Token(Token = "0x4000A28")]
		public const string deepLinkKey = "DeepLinkData";

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<string, object> gameProperties;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string returnScene;

		[Token(Token = "0x4000A2B")]
		private const string bowserEntryScene = "Bowser/Entrypoint";

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x11B72F4", Offset = "0x11B72F4", VA = "0x11B72F4")]
		public static void EnterBowser(string returnScene, [Optional] Dictionary<string, object> gameProperties)
		{
		}

		[Token(Token = "0x6000A6C")]
		private static void DestroyGameObjectsOfType<T>() where T : MonoBehaviour
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x11B7438", Offset = "0x11B7438", VA = "0x11B7438")]
		public static string GetLocalPlayerName()
		{
			return null;
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x11B7580", Offset = "0x11B7580", VA = "0x11B7580")]
		public static string GetLocalPlayerId()
		{
			return null;
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x11B76C8", Offset = "0x11B76C8", VA = "0x11B76C8")]
		public static int GetLocalPlayerNetworkRegion()
		{
			return default(int);
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x11B7804", Offset = "0x11B7804", VA = "0x11B7804")]
		public static int GetLocalPlayerRank()
		{
			return default(int);
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0x11B7940", Offset = "0x11B7940", VA = "0x11B7940")]
		public static int GetLocalPlayerAvatarID()
		{
			return default(int);
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x11B6B8C", Offset = "0x11B6B8C", VA = "0x11B6B8C")]
		public static string GetMultiplayerProtocolVersion()
		{
			return null;
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0x11B7A7C", Offset = "0x11B7A7C", VA = "0x11B7A7C")]
		public static DeepLinkData GetDeepLinkData()
		{
			return null;
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0x11B7BC0", Offset = "0x11B7BC0", VA = "0x11B7BC0")]
		public static bool IsProduction()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x11B7D04", Offset = "0x11B7D04", VA = "0x11B7D04")]
		public static PlatformLoginData GetPlayFabPlatformLoginData()
		{
			return null;
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x11B7E48", Offset = "0x11B7E48", VA = "0x11B7E48")]
		public static void ExitBowser()
		{
		}
	}
	[Token(Token = "0x2000265")]
	public class ColliderProxy : MonoBehaviour
	{
		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider myCollider;

		[Token(Token = "0x14000003")]
		public event Action<Collider, Collider> onTriggerEnter
		{
			[Token(Token = "0x6000A7A")]
			[Address(RVA = "0x11B8010", Offset = "0x11B8010", VA = "0x11B8010")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000A7B")]
			[Address(RVA = "0x11B80C0", Offset = "0x11B80C0", VA = "0x11B80C0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000004")]
		public event Action<Collider, Collider> onTriggerExit
		{
			[Token(Token = "0x6000A7C")]
			[Address(RVA = "0x11B8170", Offset = "0x11B8170", VA = "0x11B8170")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000A7D")]
			[Address(RVA = "0x11B8220", Offset = "0x11B8220", VA = "0x11B8220")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0x11B82D0", Offset = "0x11B82D0", VA = "0x11B82D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0x11B8320", Offset = "0x11B8320", VA = "0x11B8320")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0x11B8344", Offset = "0x11B8344", VA = "0x11B8344")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x11B8368", Offset = "0x11B8368", VA = "0x11B8368")]
		public ColliderProxy()
		{
		}
	}
	[Token(Token = "0x2000266")]
	public class BowserTracking
	{
		[Token(Token = "0x2000267")]
		public enum ExitReason
		{
			[Token(Token = "0x4000A3C")]
			None,
			[Token(Token = "0x4000A3D")]
			ExitDoor,
			[Token(Token = "0x4000A3E")]
			FriendMatch,
			[Token(Token = "0x4000A3F")]
			SpectateFriendMatch,
			[Token(Token = "0x4000A40")]
			ScrapperStreetExitDoor,
			[Token(Token = "0x4000A41")]
			TournamentMatch,
			[Token(Token = "0x4000A42")]
			ReplayTournamentMatch,
			[Token(Token = "0x4000A43")]
			SpectateTournamentMatch
		}

		[Token(Token = "0x2000268")]
		public class SessionData
		{
			[Token(Token = "0x4000A44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string sessionID;

			[Token(Token = "0x4000A45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float secondBowserStarted;

			[Token(Token = "0x4000A46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float secondPlayerJoinedBar;

			[Token(Token = "0x4000A47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool userAllowedInBar;

			[Token(Token = "0x4000A48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			public bool playerBeenInBar;

			[Token(Token = "0x6000AAD")]
			[Address(RVA = "0x11B841C", Offset = "0x11B841C", VA = "0x11B841C")]
			public SessionData()
			{
			}
		}

		[Token(Token = "0x4000A36")]
		private const string PPKEY_BOWSER_LAUNCHED = "bowser_tracking_launch";

		[Token(Token = "0x4000A37")]
		private const string PPKEY_BOWSER_LASTPING = "bowser_tracking_lastping";

		[Token(Token = "0x4000A38")]
		private const string PPKEY_BOWSER_BAR_JOINED = "bowser_tracking_bar_join";

		[Token(Token = "0x4000A39")]
		private const string PPKEY_BOWSER_BAR_LASTPING = "bowser_tracking_bar_lastping";

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SessionData session;

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x11B8370", Offset = "0x11B8370", VA = "0x11B8370")]
		public BowserTracking()
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0x11B8564", Offset = "0x11B8564", VA = "0x11B8564")]
		public SessionData GetSessionData()
		{
			return null;
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0x11B856C", Offset = "0x11B856C", VA = "0x11B856C")]
		public void PingBowser()
		{
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0x11B85C0", Offset = "0x11B85C0", VA = "0x11B85C0")]
		public void PingBowserAndBar()
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0x11B8644", Offset = "0x11B8644", VA = "0x11B8644")]
		public void TrackBowserLaunched()
		{
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0x11B8868", Offset = "0x11B8868", VA = "0x11B8868")]
		public void TrackBowserClosed(ExitReason exitReason)
		{
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x11B8CF4", Offset = "0x11B8CF4", VA = "0x11B8CF4")]
		public void TrackBarJoined(int floor, bool isPrivate)
		{
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0x11B91E8", Offset = "0x11B91E8", VA = "0x11B91E8")]
		public void TrackBarLeft()
		{
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0x11B9750", Offset = "0x11B9750", VA = "0x11B9750")]
		public void TrackPrivateBarCreated(int floor)
		{
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0x11B98A4", Offset = "0x11B98A4", VA = "0x11B98A4")]
		public void TrackAlienBlastGameOver(int shotsFired, int score)
		{
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0x11B6518", Offset = "0x11B6518", VA = "0x11B6518")]
		public void TrackGlassSpawned()
		{
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0x11B9A80", Offset = "0x11B9A80", VA = "0x11B9A80")]
		public void TrackLostConnection(DisconnectCause cause)
		{
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0x11B9C18", Offset = "0x11B9C18", VA = "0x11B9C18")]
		public void TrackJoinRoomFailed(int returnCode, string message)
		{
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0x11B9DF0", Offset = "0x11B9DF0", VA = "0x11B9DF0")]
		public void TrackCreateRoomFailed(int returnCode, string message)
		{
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x11B9FC8", Offset = "0x11B9FC8", VA = "0x11B9FC8")]
		public void TrackPing(int secondsInBar)
		{
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0x11BA11C", Offset = "0x11BA11C", VA = "0x11BA11C")]
		public void TrackColorChange(PlayerColorPickerData.ColorName colorName)
		{
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x11BA2AC", Offset = "0x11BA2AC", VA = "0x11BA2AC")]
		public void TrackFriendMatchFistBump(int playerOneLeagueTier, int playerTwoLeagueTier, string matchID, string networkRegion)
		{
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x11BA598", Offset = "0x11BA598", VA = "0x11BA598")]
		public void TrackingFriendMatchAccepted(int playerOneLeagueTier, int playerTwoLeagueTier, string matchID, string networkRegion)
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x11BA884", Offset = "0x11BA884", VA = "0x11BA884")]
		public void TrackDartSpawned()
		{
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0x11BA948", Offset = "0x11BA948", VA = "0x11BA948")]
		public void TrackDartBoardHit(int scoreEarned)
		{
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0x11BAA9C", Offset = "0x11BAA9C", VA = "0x11BAA9C")]
		public void TrackDartsReset()
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x11BAB60", Offset = "0x11BAB60", VA = "0x11BAB60")]
		public void TrackTakePhoto()
		{
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x11BAC24", Offset = "0x11BAC24", VA = "0x11BAC24")]
		public void TrackUploadPhoto(bool success)
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x11BAD78", Offset = "0x11BAD78", VA = "0x11BAD78")]
		public void TrackJukeboxPlayed(int track)
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x11BAECC", Offset = "0x11BAECC", VA = "0x11BAECC")]
		public void TrackJukeboxTokenSpent()
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x11BAF90", Offset = "0x11BAF90", VA = "0x11BAF90")]
		public void TrackBlockedPlayer(bool blocked)
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x11BB0E4", Offset = "0x11BB0E4", VA = "0x11BB0E4")]
		public void TrackMutedPlayer(bool muted)
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x11BB238", Offset = "0x11BB238", VA = "0x11BB238")]
		public void TrackRetroBox(string eventName, Dictionary<string, object> parameters)
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x11B8750", Offset = "0x11B8750", VA = "0x11B8750")]
		private Tracking.TrackingEvent Track(string eventName)
		{
			return null;
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x11BBA38", Offset = "0x11BBA38", VA = "0x11BBA38")]
		private void CheckRecoveredTime(string ppkeyStart, string ppkeyPing, string event_name, string parameter_name)
		{
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x11B8424", Offset = "0x11B8424", VA = "0x11B8424")]
		private void CheckRecoveredTimeInBowser()
		{
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0x11B84C4", Offset = "0x11B84C4", VA = "0x11B84C4")]
		private void CheckRecoveredTimeInBar()
		{
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x11BBCB8", Offset = "0x11BBCB8", VA = "0x11BBCB8")]
		public void TrackCrashReport(string crashMessage)
		{
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0x11BBE08", Offset = "0x11BBE08", VA = "0x11BBE08")]
		public void TrackTournamentCreated(string tournamentId)
		{
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0x11BBF58", Offset = "0x11BBF58", VA = "0x11BBF58")]
		public void TrackTournamentMatchAccepted(int playerOneLeagueTier, int playerTwoLeagueTier, string matchID, string networkRegion, string tournamentId, string tournamentCode)
		{
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0x11BC354", Offset = "0x11BC354", VA = "0x11BC354")]
		public void TrackTournamentForfeitRequest(string tournamentId, string tournamentCode)
		{
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x11BC528", Offset = "0x11BC528", VA = "0x11BC528")]
		public void TrackTournamentCancelRequest(string tournamentId, string tournamentCode)
		{
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x11BC6FC", Offset = "0x11BC6FC", VA = "0x11BC6FC")]
		public void TrackKickPlayerRequest(string tournamentId, string tournamentCode, string tournamentState)
		{
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x11BC95C", Offset = "0x11BC95C", VA = "0x11BC95C")]
		public void TrackTournamentStartRequest(string tournamentId, string tournamentCode, int participantCount)
		{
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x11BCBC0", Offset = "0x11BCBC0", VA = "0x11BCBC0")]
		public void TrackTournamentRestartRequest(string tournamentId, string tournamentCode)
		{
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x11BCD94", Offset = "0x11BCD94", VA = "0x11BCD94")]
		public void TrackTournamentRequestFailed(string tournamentId, string requestType)
		{
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x11BCF68", Offset = "0x11BCF68", VA = "0x11BCF68")]
		public void TrackJoinTournamentRoom(string roomName, string tournamentCode)
		{
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x11BD13C", Offset = "0x11BD13C", VA = "0x11BD13C")]
		public void TrackTournamentCelebrationStarted(string tournamentId, string tournamentCode, int playerCount)
		{
		}
	}
	[Token(Token = "0x2000269")]
	public class DebugMenu
	{
		[Token(Token = "0x200026A")]
		public enum DefaultValue
		{
			[Token(Token = "0x4000A59")]
			AlwaysStartWithDefault,
			[Token(Token = "0x4000A5A")]
			RememberPrevious
		}

		[Token(Token = "0x200026C")]
		[CompilerGenerated]
		private sealed class <ClickButtonFeedback>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DebugMenuButtonData buttonData;

			[Token(Token = "0x17000085")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AC0")]
				[Address(RVA = "0x11BF784", Offset = "0x11BF784", VA = "0x11BF784", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000086")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AC2")]
				[Address(RVA = "0x11BF7CC", Offset = "0x11BF7CC", VA = "0x11BF7CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000ABD")]
			[Address(RVA = "0x11BF6B4", Offset = "0x11BF6B4", VA = "0x11BF6B4")]
			[DebuggerHidden]
			public <ClickButtonFeedback>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x6000ABE")]
			[Address(RVA = "0x11BF6DC", Offset = "0x11BF6DC", VA = "0x11BF6DC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000ABF")]
			[Address(RVA = "0x11BF6E0", Offset = "0x11BF6E0", VA = "0x11BF6E0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AC1")]
			[Address(RVA = "0x11BF78C", Offset = "0x11BF78C", VA = "0x11BF78C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DebugMenuData menuInstance;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool previousDebugToggle;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject instance_ControllerLeft;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject instance_ControllerRight;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject instance_debugWand;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject instance_debugWandHitPoint;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool previousButtonToggle;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool offhandPreviousButtonToggle;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private LayerMask layerMask;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RGXR_Device mainController;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int buttonPage;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int buttonRow;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool showingDebugMenu;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<DebugMenuClickable> allClickables;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LogSender logSender;

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x11BD3A0", Offset = "0x11BD3A0", VA = "0x11BD3A0")]
		public DebugMenu(DebugMenuData debugMenuPrefab, Transform debugMenuParent, LogSender logSender)
		{
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x11BD75C", Offset = "0x11BD75C", VA = "0x11BD75C")]
		private void RotateRoot()
		{
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x11BD838", Offset = "0x11BD838", VA = "0x11BD838")]
		public bool IsShowing()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x11BD840", Offset = "0x11BD840", VA = "0x11BD840")]
		[Conditional("IGNIS_DEBUG")]
		public void AddButton(string creatorId, string label, Action onClick)
		{
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x11BDA9C", Offset = "0x11BDA9C", VA = "0x11BDA9C")]
		[IteratorStateMachine(typeof(<ClickButtonFeedback>d__20))]
		private IEnumerator ClickButtonFeedback(DebugMenuButtonData buttonData)
		{
			return null;
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x11BDB04", Offset = "0x11BDB04", VA = "0x11BDB04")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCheckbox(string creatorId, string label, bool defaultValue, Action<bool> onValueChange, DefaultValue memory = DefaultValue.RememberPrevious)
		{
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x11BD9A4", Offset = "0x11BD9A4", VA = "0x11BD9A4")]
		private void AddClickable(string creatorId, GameObject visualObject, Action onClick)
		{
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0x11BDD08", Offset = "0x11BDD08", VA = "0x11BDD08")]
		private void PlaceClickableAtNextAvailableSlot(GameObject visualObject)
		{
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x11BD5FC", Offset = "0x11BD5FC", VA = "0x11BD5FC")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x11BDE2C", Offset = "0x11BDE2C", VA = "0x11BDE2C")]
		public void RemoveClickablesByCreator(string creatorId)
		{
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x11BE060", Offset = "0x11BE060", VA = "0x11BE060")]
		[Conditional("IGNIS_DEBUG")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x11BE5CC", Offset = "0x11BE5CC", VA = "0x11BE5CC")]
		private bool CheckDebugToggleInput()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x11BE598", Offset = "0x11BE598", VA = "0x11BE598")]
		private bool CheckDebugToggle()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200026E")]
	public class DebugMenuButtonData : MonoBehaviour
	{
		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TMP_Text label;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Image buttonBackground;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color buttonDefault;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color buttonClicked;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public WaitForSeconds buttonFeedbackWait;

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x11BF860", Offset = "0x11BF860", VA = "0x11BF860")]
		public DebugMenuButtonData()
		{
		}
	}
	[Token(Token = "0x200026F")]
	public class DebugMenuCheckboxData : MonoBehaviour
	{
		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TMP_Text label;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject checkMark;

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0x11BF8D0", Offset = "0x11BF8D0", VA = "0x11BF8D0")]
		public DebugMenuCheckboxData()
		{
		}
	}
	[Token(Token = "0x2000270")]
	public class DebugMenuClickable : MonoBehaviour
	{
		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string creatorId;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action onClick;

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x11BF8D8", Offset = "0x11BF8D8", VA = "0x11BF8D8")]
		public DebugMenuClickable()
		{
		}
	}
	[Token(Token = "0x2000271")]
	public class DebugMenuData : MonoBehaviour
	{
		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DebugMenuButtonData prefab_button;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DebugMenuCheckboxData prefab_checkbox;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject prefab_ControllerLeft;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject prefab_ControllerRight;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject prefab_debugWand;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject prefab_debugWandHitPoint;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform[] instance_pages;

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x11BF8E0", Offset = "0x11BF8E0", VA = "0x11BF8E0")]
		public DebugMenuData()
		{
		}
	}
	[Token(Token = "0x2000272")]
	public class LogSender
	{
		[Token(Token = "0x2000273")]
		[CompilerGenerated]
		private sealed class <UploadApplicationLog>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LogSender <>4__this;

			[Token(Token = "0x4000A81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string forcedLogName;

			[Token(Token = "0x4000A82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x17000087")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AD8")]
				[Address(RVA = "0x11C0A38", Offset = "0x11C0A38", VA = "0x11C0A38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000088")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000ADA")]
				[Address(RVA = "0x11C0A80", Offset = "0x11C0A80", VA = "0x11C0A80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AD4")]
			[Address(RVA = "0x11C034C", Offset = "0x11C034C", VA = "0x11C034C")]
			[DebuggerHidden]
			public <UploadApplicationLog>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6000AD5")]
			[Address(RVA = "0x11C0514", Offset = "0x11C0514", VA = "0x11C0514", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AD6")]
			[Address(RVA = "0x11C0530", Offset = "0x11C0530", VA = "0x11C0530", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AD7")]
			[Address(RVA = "0x11C0988", Offset = "0x11C0988", VA = "0x11C0988")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000AD9")]
			[Address(RVA = "0x11C0A40", Offset = "0x11C0A40", VA = "0x11C0A40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A74")]
		public const string BOWSER_APPLICATION_QUIT_PROPERLY = "BOWSER_APPLICATION_QUIT_PROPERLY";

		[Token(Token = "0x4000A75")]
		public const string BOWSER_LAST_SEEN_ERROR = "BOWSER_LAST_SEEN_ERROR";

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BowserTracking tracking;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MonoBehaviour monoBehaviour;

		[Token(Token = "0x4000A78")]
		private const int StreamBufferSize = 6291456;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static byte[] buffer;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool seenErrorSinceLastReset;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<LogType, string> logTypeToName;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MemoryStream stream;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private StreamWriter writer;

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x11BF8E8", Offset = "0x11BF8E8", VA = "0x11BF8E8")]
		public LogSender(MonoBehaviour monoBehaviour, BowserTracking tracking)
		{
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x11BFAA4", Offset = "0x11BFAA4", VA = "0x11BFAA4")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x11BFC30", Offset = "0x11BFC30", VA = "0x11BFC30")]
		private void SetupStream()
		{
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0x11BFD7C", Offset = "0x11BFD7C", VA = "0x11BFD7C")]
		public byte[] GetByteBuffer()
		{
			return null;
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x11BFE88", Offset = "0x11BFE88", VA = "0x11BFE88")]
		public void OnLogMessage(string condition, string stacktrace, LogType type)
		{
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0x11C02AC", Offset = "0x11C02AC", VA = "0x11C02AC")]
		public void SendLogsToLogStorage([Optional] string logName)
		{
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x11C02D8", Offset = "0x11C02D8", VA = "0x11C02D8")]
		[IteratorStateMachine(typeof(<UploadApplicationLog>d__16))]
		private IEnumerator UploadApplicationLog([Optional] string forcedLogName)
		{
			return null;
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0x11C0374", Offset = "0x11C0374", VA = "0x11C0374")]
		public string GetLogfileName()
		{
			return null;
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x11BFD30", Offset = "0x11BFD30", VA = "0x11BFD30")]
		private void TrackLatestSeenErrorAsCrashReport(string crashMessage)
		{
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0x11C04A8", Offset = "0x11C04A8", VA = "0x11C04A8")]
		public void SendLogsToLogStorageIfErrorOccurred()
		{
		}
	}
	[Token(Token = "0x2000274")]
	public class SceneTester : MonoBehaviour
	{
		[Token(Token = "0x2000275")]
		[CompilerGenerated]
		private sealed class <Start>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SceneTester <>4__this;

			[Token(Token = "0x4000A8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private XRInputSubsystem <xRInputSubsystem>5__2;

			[Token(Token = "0x17000089")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AE2")]
				[Address(RVA = "0x11C101C", Offset = "0x11C101C", VA = "0x11C101C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700008A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AE4")]
				[Address(RVA = "0x11C1064", Offset = "0x11C1064", VA = "0x11C1064", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000ADF")]
			[Address(RVA = "0x11C0AF0", Offset = "0x11C0AF0", VA = "0x11C0AF0")]
			[DebuggerHidden]
			public <Start>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6000AE0")]
			[Address(RVA = "0x11C0B6C", Offset = "0x11C0B6C", VA = "0x11C0B6C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AE1")]
			[Address(RVA = "0x11C0B70", Offset = "0x11C0B70", VA = "0x11C0B70", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AE3")]
			[Address(RVA = "0x11C1024", Offset = "0x11C1024", VA = "0x11C1024", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TeleportData teleportData;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FadeData fadeData;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private XRPluginManager xrPluginManager;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BowserXR bowserXR;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Teleport teleport;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Fade fade;

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x11C0A88", Offset = "0x11C0A88", VA = "0x11C0A88")]
		[IteratorStateMachine(typeof(<Start>d__6))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x11C0B18", Offset = "0x11C0B18", VA = "0x11C0B18")]
		private void Update()
		{
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x11C0B48", Offset = "0x11C0B48", VA = "0x11C0B48")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x11C0B64", Offset = "0x11C0B64", VA = "0x11C0B64")]
		public SceneTester()
		{
		}
	}
	[Token(Token = "0x2000276")]
	public class DestroyIfDroppedData : MonoBehaviour, IBowserPhotonPrefabPoolListener
	{
		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float destroyBelowHeight;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float instantlyDestroyBelowHeight;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhotonView photonView;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action OnInstantiate;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("How many seconds before this grabbable is destroyed")]
		public float destroyTimeout;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public float destroyTimer;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public bool forceDestroy;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[HideInInspector]
		public bool takingOwnership;

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x11C106C", Offset = "0x11C106C", VA = "0x11C106C", Slot = "4")]
		public void OnPoolInstantiate()
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x11C1088", Offset = "0x11C1088", VA = "0x11C1088", Slot = "5")]
		public void OnPoolDestroy()
		{
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x11C108C", Offset = "0x11C108C", VA = "0x11C108C")]
		public DestroyIfDroppedData()
		{
		}
	}
	[Token(Token = "0x2000277")]
	public class Elevator
	{
		[Token(Token = "0x2000278")]
		public delegate void OnReachedNewFloorHandler();

		[Token(Token = "0x2000279")]
		[CompilerGenerated]
		private sealed class <MoveToFloorRoutine>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Elevator <>4__this;

			[Token(Token = "0x4000A9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int targetFloor;

			[Token(Token = "0x4000A9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <startfloor>5__2;

			[Token(Token = "0x4000A9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <timePassed>5__3;

			[Token(Token = "0x1700008D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AF7")]
				[Address(RVA = "0x11C16B8", Offset = "0x11C16B8", VA = "0x11C16B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700008E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AF9")]
				[Address(RVA = "0x11C1700", Offset = "0x11C1700", VA = "0x11C1700", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AF4")]
			[Address(RVA = "0x11C1334", Offset = "0x11C1334", VA = "0x11C1334")]
			[DebuggerHidden]
			public <MoveToFloorRoutine>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6000AF5")]
			[Address(RVA = "0x11C14B4", Offset = "0x11C14B4", VA = "0x11C14B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AF6")]
			[Address(RVA = "0x11C14B8", Offset = "0x11C14B8", VA = "0x11C14B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AF8")]
			[Address(RVA = "0x11C16C0", Offset = "0x11C16C0", VA = "0x11C16C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ElevatorData data;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine moveRoutine;

		[Token(Token = "0x1700008B")]
		public int CurrentFloor
		{
			[Token(Token = "0x6000AEA")]
			[Address(RVA = "0x11C11E0", Offset = "0x11C11E0", VA = "0x11C11E0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700008C")]
		public bool IsMoving
		{
			[Token(Token = "0x6000AEB")]
			[Address(RVA = "0x11C11FC", Offset = "0x11C11FC", VA = "0x11C11FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000005")]
		public event OnReachedNewFloorHandler onReachedNewFloor
		{
			[Token(Token = "0x6000AE8")]
			[Address(RVA = "0x11C10A8", Offset = "0x11C10A8", VA = "0x11C10A8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000AE9")]
			[Address(RVA = "0x11C1144", Offset = "0x11C1144", VA = "0x11C1144")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x11C1220", Offset = "0x11C1220", VA = "0x11C1220")]
		public Elevator(ElevatorData data, int currentFloor)
		{
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x11C1258", Offset = "0x11C1258", VA = "0x11C1258")]
		public void MoveToFloor(int targetFloor)
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x11C12BC", Offset = "0x11C12BC", VA = "0x11C12BC")]
		[IteratorStateMachine(typeof(<MoveToFloorRoutine>d__12))]
		private IEnumerator MoveToFloorRoutine(int targetFloor)
		{
			return null;
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x11C135C", Offset = "0x11C135C", VA = "0x11C135C")]
		public void StopAtCurrentFloor()
		{
		}
	}
	[Token(Token = "0x200027A")]
	public class ElevatorData : MonoBehaviour
	{
		[Token(Token = "0x200027B")]
		public enum ElevatorState
		{
			[Token(Token = "0x4000AA2")]
			Still,
			[Token(Token = "0x4000AA3")]
			Moving
		}

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float timeToMoveBetweenFloors;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public ElevatorState elevatorState;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public int currentFloor;

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x11C1708", Offset = "0x11C1708", VA = "0x11C1708")]
		public ElevatorData()
		{
		}
	}
	[Token(Token = "0x200027C")]
	public class ElevatorScreen
	{
		[Token(Token = "0x200027D")]
		public enum ElevatorScreenState
		{
			[Token(Token = "0x4000AC0")]
			None,
			[Token(Token = "0x4000AC1")]
			Connecting,
			[Token(Token = "0x4000AC2")]
			JoiningLobby,
			[Token(Token = "0x4000AC3")]
			Disconnected,
			[Token(Token = "0x4000AC4")]
			SelectFloor,
			[Token(Token = "0x4000AC5")]
			SelectRoom,
			[Token(Token = "0x4000AC6")]
			PickCodeType,
			[Token(Token = "0x4000AC7")]
			MovingToTargetFloor,
			[Token(Token = "0x4000AC8")]
			MovingToGroundFloor,
			[Token(Token = "0x4000AC9")]
			JoiningRoom,
			[Token(Token = "0x4000ACA")]
			FailedCreatingNewRoom,
			[Token(Token = "0x4000ACB")]
			FailedJoiningRoom,
			[Token(Token = "0x4000ACC")]
			FailedJoiningRoomMaxCapacity,
			[Token(Token = "0x4000ACD")]
			FailedEnteringTournament,
			[Token(Token = "0x4000ACE")]
			FailedToGetTournamentsData,
			[Token(Token = "0x4000ACF")]
			CreatePrivateRoomRequest,
			[Token(Token = "0x4000AD0")]
			EnterPrivateRoomCode,
			[Token(Token = "0x4000AD1")]
			JoinPrivateRoomRequest,
			[Token(Token = "0x4000AD2")]
			CreateOrJoinPrivateRoomRequest,
			[Token(Token = "0x4000AD3")]
			LoadingTournamentData,
			[Token(Token = "0x4000AD4")]
			LoadingActiveTournamentsData,
			[Token(Token = "0x4000AD5")]
			SelectTournamentAction,
			[Token(Token = "0x4000AD6")]
			SelectTournamentRoom,
			[Token(Token = "0x4000AD7")]
			EnterTournamentCode
		}

		[Token(Token = "0x200027E")]
		public enum OnConnectedRequest
		{
			[Token(Token = "0x4000AD9")]
			None,
			[Token(Token = "0x4000ADA")]
			JoinTargetFloor,
			[Token(Token = "0x4000ADB")]
			JoinTargetPublicRoom,
			[Token(Token = "0x4000ADC")]
			JoinPrivateRoom,
			[Token(Token = "0x4000ADD")]
			JoinOrCreatePrivateRoom,
			[Token(Token = "0x4000ADE")]
			JoinTournamentRoom
		}

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly float buttonDelay;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ElevatorScreenData data;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ElevatorScreenState latestRootMenu;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private ElevatorScreenState state;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OnConnectedRequest onConnectedRequest;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Elevator elevatorHandler;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private NetworkManager networkManager;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BowserButtonHandler buttonHandler;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PrivateRoomManager privateRoomManager;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ScrollBarHandler scrollBarHandler;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private KnockoutTournamentService tournamentManager;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BowserTracking tracking;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Locale locale;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int targetFloor;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private BowserRoomInfo targetRoom;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int pendingRequestFloor;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private BowserRoomInfo pendingRequestRoom;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string pendingRequestCustomId;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Action onReachedTargetFloor;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Action enterStreet;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Action<BowserRoomInfo> enterRoom;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private StringBuilder stringBuilder;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<int>[] activeRoomNumbersPerFloor;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Dictionary<int, RoomInfo> roomNumberToRoomInfo;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private List<ElevatorRoomButtonData> allRoomButtons;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<ElevatorTournamentButtonData> allTournamentRoomButtons;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<RoomInfo> roomsOnFloor;

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x11C1718", Offset = "0x11C1718", VA = "0x11C1718")]
		public ElevatorScreen(ElevatorScreenData data, Elevator elevatorHandler, NetworkManager networkManager, BowserButtonHandler buttonHandler, Action enterStreet, Action<BowserRoomInfo> enterRoom, PrivateRoomManager privateRoomManager, ScrollBarHandler scrollBarHandler, KnockoutTournamentService tournamentManager, BowserTracking tracking)
		{
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x11C33BC", Offset = "0x11C33BC", VA = "0x11C33BC")]
		private void EnterActiveTournamentList(PlayerAvatar avatar, RGXR_Device input)
		{
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x11C33C4", Offset = "0x11C33C4", VA = "0x11C33C4")]
		private void CreateMyTournament(PlayerAvatar avatar, RGXR_Device input)
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x11C34A4", Offset = "0x11C34A4", VA = "0x11C34A4")]
		private void EnterTournamentWithId(string tournamentId)
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x11C358C", Offset = "0x11C358C", VA = "0x11C358C")]
		private void JoinTournamentWithTournamentCode(string tournamentCode)
		{
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0x11C3674", Offset = "0x11C3674", VA = "0x11C3674")]
		private void GetTournamentsData(ElevatorScreenState nextState)
		{
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x11C3794", Offset = "0x11C3794", VA = "0x11C3794")]
		private void RefreshTournamentRoomsList()
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x11C38DC", Offset = "0x11C38DC", VA = "0x11C38DC")]
		private void OnTournamentRoomButtonPressed(ElevatorTournamentButtonData elevatorTournamentButtonData)
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x11C39D0", Offset = "0x11C39D0", VA = "0x11C39D0")]
		public void OnConnectedJoinFloor(int value)
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x11C39F0", Offset = "0x11C39F0", VA = "0x11C39F0")]
		public void OnConnectedJoinPublicRoom(int floor, string publicRoomNumber)
		{
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x11C3A78", Offset = "0x11C3A78", VA = "0x11C3A78")]
		public void OnConnectedJoinPrivateRoom(BowserRoomInfo privateRoom)
		{
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x11C3A8C", Offset = "0x11C3A8C", VA = "0x11C3A8C")]
		public void OnConnectedJoinTournamentRoom(BowserRoomInfo tournamentRoom)
		{
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x11C3AA0", Offset = "0x11C3AA0", VA = "0x11C3AA0")]
		public void OnConnectedCreateOrJoinPrivateRoom(string customId, int floor = 1)
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x11C39E4", Offset = "0x11C39E4", VA = "0x11C39E4")]
		private void ClearPendingRequestData()
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x11C2730", Offset = "0x11C2730", VA = "0x11C2730")]
		private void ClearContent(GameObject parent)
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x11C27F4", Offset = "0x11C27F4", VA = "0x11C27F4")]
		private void AddFloorButton(int floor)
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x11C2A88", Offset = "0x11C2A88", VA = "0x11C2A88")]
		private void CreateRoomButtons(int count)
		{
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0x11C3AC4", Offset = "0x11C3AC4", VA = "0x11C3AC4")]
		private void CreateTournamentRoomButtons(int count)
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x11C26A0", Offset = "0x11C26A0", VA = "0x11C26A0")]
		private void RefreshCurrentFloorText()
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x11C3CC4", Offset = "0x11C3CC4", VA = "0x11C3CC4")]
		private void OnBackButtonPressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x11C2C88", Offset = "0x11C2C88", VA = "0x11C2C88")]
		private void EnterState(ElevatorScreenState newState)
		{
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x11C3D68", Offset = "0x11C3D68", VA = "0x11C3D68")]
		private void RefreshSideBars(bool leftSideBar, bool scrollBar, bool backButton = false, bool joinPrivate = false, bool createPrivate = false, bool createPublic = false)
		{
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x11C4568", Offset = "0x11C4568", VA = "0x11C4568")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x11C4828", Offset = "0x11C4828", VA = "0x11C4828")]
		private void ConsumeOnConnectedRequest()
		{
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x11C4FE0", Offset = "0x11C4FE0", VA = "0x11C4FE0")]
		private bool GetFirstAvailablePublicRoomOnFloor(int targetFloor, out string roomName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0x11C5340", Offset = "0x11C5340", VA = "0x11C5340")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0x11C56A8", Offset = "0x11C56A8", VA = "0x11C56A8")]
		private void OnfloorButtonPressed(int floor, PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x11C4AB0", Offset = "0x11C4AB0", VA = "0x11C4AB0")]
		private void OnRoomListUpdate(List<RoomInfo> roomList)
		{
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x11C3EF0", Offset = "0x11C3EF0", VA = "0x11C3EF0")]
		private void RefreshRoomList(int targetFloor)
		{
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0x11C5714", Offset = "0x11C5714", VA = "0x11C5714")]
		private void OnRoomButtonPressed(ElevatorRoomButtonData button)
		{
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x11C38F8", Offset = "0x11C38F8", VA = "0x11C38F8")]
		private void JoinTournamentRoom(string roomName, string tournamentCode)
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0x11C5128", Offset = "0x11C5128", VA = "0x11C5128")]
		private void JoinPublicRoom(string publicRoomNumber)
		{
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x11C4DF0", Offset = "0x11C4DF0", VA = "0x11C4DF0")]
		private void MoveToTargetRoom()
		{
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x11C5740", Offset = "0x11C5740", VA = "0x11C5740")]
		private void EnterTargetRoom()
		{
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x11C57D8", Offset = "0x11C57D8", VA = "0x11C57D8")]
		private void OnCreatePublicPressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x11C5218", Offset = "0x11C5218", VA = "0x11C5218")]
		private bool GetNewPublicRoomName(int targetFloor, ref string result)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x11C5880", Offset = "0x11C5880", VA = "0x11C5880")]
		private void OnCreatePrivatePressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x11C5A50", Offset = "0x11C5A50", VA = "0x11C5A50")]
		private void OnJoinByCodePressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x11C5A58", Offset = "0x11C5A58", VA = "0x11C5A58")]
		private void OnNumPadPressed(int value)
		{
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x11C5B9C", Offset = "0x11C5B9C", VA = "0x11C5B9C")]
		private void OnNumpadBackspacePressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x11C5B74", Offset = "0x11C5B74", VA = "0x11C5B74")]
		private void SaveInputIndex(bool isTournamentInput, int inputIndex)
		{
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x11C5CB0", Offset = "0x11C5CB0", VA = "0x11C5CB0")]
		private void OnNumpadEnterPressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0x11C5DF8", Offset = "0x11C5DF8", VA = "0x11C5DF8")]
		private void RequestJoiningTournamentRoom(string tournamentCode)
		{
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0x11C519C", Offset = "0x11C519C", VA = "0x11C519C")]
		private void RequestJoiningPrivateRoom(string privateRoomCode)
		{
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0x11C51E8", Offset = "0x11C51E8", VA = "0x11C51E8")]
		private void RequestCreateOrJoinPrivateRoom(string customId)
		{
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x11C6128", Offset = "0x11C6128", VA = "0x11C6128")]
		public void ShowDisconnectCause(DisconnectCause value)
		{
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x11C6130", Offset = "0x11C6130", VA = "0x11C6130")]
		private void OnLostConnection(DisconnectCause cause)
		{
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x11C6290", Offset = "0x11C6290", VA = "0x11C6290")]
		private void OnFailedToJoinRoom(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x11C6298", Offset = "0x11C6298", VA = "0x11C6298")]
		private void DebugForceState(ElevatorScreenState state)
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x11C629C", Offset = "0x11C629C", VA = "0x11C629C")]
		public void DebugCreatePrivate(int floor)
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x11C62A4", Offset = "0x11C62A4", VA = "0x11C62A4")]
		public void DebugJoinPrivate(string roomCode)
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x11C62A8", Offset = "0x11C62A8", VA = "0x11C62A8")]
		public void DebugCreateOrJoin(int floor, string customId)
		{
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0x11C62B4", Offset = "0x11C62B4", VA = "0x11C62B4")]
		public void DebugCreateTournament(int tournamentCode)
		{
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x11C62B8", Offset = "0x11C62B8", VA = "0x11C62B8")]
		public void DebugJoinTournament(string tournamentCode)
		{
		}
	}
	[Token(Token = "0x2000286")]
	public class ElevatorScreenData : MonoBehaviour
	{
		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BowserButtonData[] backButtons;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject connectingParent;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject createPrivateRoomRequestParent;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject joinPrivateRoomRequestParent;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Left Side Bar")]
		public GameObject leftBarParent;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject leftBarBackButton;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BowserButtonData leftBarJoinByCodeButton;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshProUGUI leftBarFloorText;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BowserButtonData leftBarCreatePublicButton;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public BowserButtonData leftBarCreatePrivateButton;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Scroll Bar")]
		public GameObject scrollBarParent;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ScrollBarData scrollBar;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Select Floor")]
		public GameObject SelectFloorParent;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public ScrollRect floorListScroller;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public ElevatorFloorButtonData floorButtonPrefab;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject floorListParent;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("Select Room")]
		public int roomButtonPoolSize;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject SelectRoomParent;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public ScrollRect roomListScroller;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public ElevatorRoomButtonData roomButtonPrefab;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject roomListParent;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Header("Moving to Floor")]
		public GameObject movingToFloorParent;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public TextMeshProUGUI movingToHeader;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Image upArrow;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public TextMeshProUGUI movingToCurrentFloor;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Image downArrow;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public TextMeshProUGUI statusText;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Color colorActive;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Color colorInactive;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Header("Pick Code Type")]
		public GameObject pickCodeTypeParent;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public BowserButtonData enterTournamentCodeButton;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public BowserButtonData enterRoomCodeButton;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Header("Join Private Room")]
		public GameObject joinPrivateRoomParent;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public TextMeshProUGUI[] joinPrivateRoomInputTexts;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[Tooltip("Used by both join private room & visit tournament")]
		[Header("Numpad")]
		public GameObject numPadParent;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public BowserButtonData[] numPadButtons;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public BowserButtonData backspaceButton;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public BowserButtonData enterButton;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public GameObject enterButtonLocked;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[Header("Error Screens")]
		public GameObject disconnectedParent;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public GameObject failedToJoinRoomParent;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public GameObject failedToCreateRoom;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public GameObject failedTournamentRequest;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[Header("Select Tournament Action")]
		public GameObject tournamentLoadingParent;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public GameObject selectTournamentRoomParent;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public GameObject selectTournamentActionParent;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public BowserButtonData createTournamentButton;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public BowserButtonData activeTournamentsButton;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public BowserButtonData visitTournamentButton;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public GameObject noActiveTournament;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[Header("Select Tournament Room")]
		public ElevatorTournamentButtonData tournamentRoomButtonPrefab;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public GameObject tournamentRoomListParent;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public ScrollRect tournamentListScroller;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[Header("Visit Tournament")]
		public GameObject visitTournamentParent;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public TextMeshProUGUI[] joinPrivateTournamentInputTexts;

		[NonSerialized]
		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public Action<ElevatorScreen.ElevatorScreenState> debugForceState;

		[NonSerialized]
		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public int joinPrivateRoomInputIndex;

		[NonSerialized]
		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		public int joinTournamentInputIndex;

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x11C6BDC", Offset = "0x11C6BDC", VA = "0x11C6BDC")]
		public void DebugForceState(ElevatorScreen.ElevatorScreenState debugState)
		{
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x11C6C00", Offset = "0x11C6C00", VA = "0x11C6C00")]
		public ElevatorScreenData()
		{
		}
	}
	[Token(Token = "0x2000287")]
	public class PrivateRoomManager
	{
		[Token(Token = "0x2000288")]
		public enum PrivateRoomRequestState
		{
			[Token(Token = "0x4000B33")]
			Idle,
			[Token(Token = "0x4000B34")]
			InFlight,
			[Token(Token = "0x4000B35")]
			Success,
			[Token(Token = "0x4000B36")]
			Error
		}

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int requestResultFloor;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string requestResultRoomName;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string requestResultRoomCode;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PrivateRoomService privateRoomService;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BowserTracking tracking;

		[Token(Token = "0x1700008F")]
		public PrivateRoomRequestState RequestingNewPrivateRoomState
		{
			[Token(Token = "0x6000B50")]
			[Address(RVA = "0x11C6C24", Offset = "0x11C6C24", VA = "0x11C6C24")]
			[CompilerGenerated]
			get
			{
				return default(PrivateRoomRequestState);
			}
			[Token(Token = "0x6000B51")]
			[Address(RVA = "0x11C6C2C", Offset = "0x11C6C2C", VA = "0x11C6C2C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000090")]
		public PrivateRoomRequestState RequestingJoinPrivateRoomState
		{
			[Token(Token = "0x6000B52")]
			[Address(RVA = "0x11C6C34", Offset = "0x11C6C34", VA = "0x11C6C34")]
			[CompilerGenerated]
			get
			{
				return default(PrivateRoomRequestState);
			}
			[Token(Token = "0x6000B53")]
			[Address(RVA = "0x11C6C3C", Offset = "0x11C6C3C", VA = "0x11C6C3C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000091")]
		public PrivateRoomRequestState RequestingNewOrJoinPrivateRoomState
		{
			[Token(Token = "0x6000B54")]
			[Address(RVA = "0x11C6C44", Offset = "0x11C6C44", VA = "0x11C6C44")]
			[CompilerGenerated]
			get
			{
				return default(PrivateRoomRequestState);
			}
			[Token(Token = "0x6000B55")]
			[Address(RVA = "0x11C6C4C", Offset = "0x11C6C4C", VA = "0x11C6C4C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000092")]
		public bool IsIdle
		{
			[Token(Token = "0x6000B56")]
			[Address(RVA = "0x11C6C54", Offset = "0x11C6C54", VA = "0x11C6C54")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x11C6C7C", Offset = "0x11C6C7C", VA = "0x11C6C7C")]
		public PrivateRoomManager(MonoBehaviour coroutineSpinner, BowserTracking tracking)
		{
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x11C58AC", Offset = "0x11C58AC", VA = "0x11C58AC")]
		public void RequestNewPrivateRoom(int floor)
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x11C5DFC", Offset = "0x11C5DFC", VA = "0x11C5DFC")]
		public void RequestJoinPrivateRoom(string privateRoomCode)
		{
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x11C5F8C", Offset = "0x11C5F8C", VA = "0x11C5F8C")]
		public void RequestNewOrJoinPrivateRoom(int floor, string customId)
		{
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0x11C4D48", Offset = "0x11C4D48", VA = "0x11C4D48")]
		public void GetCreateRequestResult(ref string roomName, ref string roomCode)
		{
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x11C4E84", Offset = "0x11C4E84", VA = "0x11C4E84")]
		public void GetJoinRequestResult(ref string roomName, ref string roomCode, ref int floor)
		{
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x11C4F38", Offset = "0x11C4F38", VA = "0x11C4F38")]
		public void GetNewOrJoinRequestResult(ref string roomName, ref string roomCode)
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x11C73B8", Offset = "0x11C73B8", VA = "0x11C73B8")]
		public void DebugOnGUI()
		{
		}
	}
	[Token(Token = "0x200028C")]
	public class Fade
	{
		[Token(Token = "0x200028D")]
		public enum Priority
		{
			[Token(Token = "0x4000B46")]
			None,
			[Token(Token = "0x4000B47")]
			Startup,
			[Token(Token = "0x4000B48")]
			AlertMessage,
			[Token(Token = "0x4000B49")]
			Teleport,
			[Token(Token = "0x4000B4A")]
			ConnectionIssues,
			[Token(Token = "0x4000B4B")]
			ChangeScenes
		}

		[Token(Token = "0x200028E")]
		[CompilerGenerated]
		private sealed class <FadeFromToRoutine>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Fade <>4__this;

			[Token(Token = "0x4000B4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float from;

			[Token(Token = "0x4000B50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float to;

			[Token(Token = "0x4000B51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float time;

			[Token(Token = "0x4000B52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public bool deactivateAtEnd;

			[Token(Token = "0x4000B53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Action onComplete;

			[Token(Token = "0x4000B54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <timePassed>5__2;

			[Token(Token = "0x17000094")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B7D")]
				[Address(RVA = "0x11C81EC", Offset = "0x11C81EC", VA = "0x11C81EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000095")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B7F")]
				[Address(RVA = "0x11C8234", Offset = "0x11C8234", VA = "0x11C8234", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B7A")]
			[Address(RVA = "0x11C7FAC", Offset = "0x11C7FAC", VA = "0x11C7FAC")]
			[DebuggerHidden]
			public <FadeFromToRoutine>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6000B7B")]
			[Address(RVA = "0x11C80B4", Offset = "0x11C80B4", VA = "0x11C80B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B7C")]
			[Address(RVA = "0x11C80B8", Offset = "0x11C80B8", VA = "0x11C80B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B7E")]
			[Address(RVA = "0x11C81F4", Offset = "0x11C81F4", VA = "0x11C81F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200028F")]
		[CompilerGenerated]
		private sealed class <FadeInOut>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Fade <>4__this;

			[Token(Token = "0x4000B58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action OnComplete;

			[Token(Token = "0x4000B59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <currentFadeValue>5__2;

			[Token(Token = "0x4000B5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <fadeTime>5__3;

			[Token(Token = "0x17000096")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B83")]
				[Address(RVA = "0x11C83FC", Offset = "0x11C83FC", VA = "0x11C83FC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000097")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B85")]
				[Address(RVA = "0x11C8444", Offset = "0x11C8444", VA = "0x11C8444", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B80")]
			[Address(RVA = "0x11C7FD4", Offset = "0x11C7FD4", VA = "0x11C7FD4")]
			[DebuggerHidden]
			public <FadeInOut>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6000B81")]
			[Address(RVA = "0x11C823C", Offset = "0x11C823C", VA = "0x11C823C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B82")]
			[Address(RVA = "0x11C8240", Offset = "0x11C8240", VA = "0x11C8240", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B84")]
			[Address(RVA = "0x11C8404", Offset = "0x11C8404", VA = "0x11C8404", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float BaseAlphaValue;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FadeData fadeData;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject fadePlane;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Renderer fadePlaneRenderer;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Coroutine fadeCoroutine;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Action OnFadedIn;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MaterialPropertyBlock materialPropertyBlock;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Priority currentPriority;

		[Token(Token = "0x17000093")]
		public bool IsFading
		{
			[Token(Token = "0x6000B6B")]
			[Address(RVA = "0x11C7A3C", Offset = "0x11C7A3C", VA = "0x11C7A3C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0x11C0E64", Offset = "0x11C0E64", VA = "0x11C0E64")]
		public Fade(FadeData fadeData)
		{
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x11C7AD4", Offset = "0x11C7AD4", VA = "0x11C7AD4")]
		public void FadeInOut(Priority fadePriority, [Optional] Action OnFadedIn, [Optional] Action OnComplete)
		{
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x11C7CE8", Offset = "0x11C7CE8", VA = "0x11C7CE8")]
		public void FadeIn(Priority fadePriority, [Optional] Action OnFadedIn, float time = 2f)
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x11C7E64", Offset = "0x11C7E64", VA = "0x11C7E64")]
		public void FadeOut(Priority fadePriority, [Optional] Action OnFadedOut, float toFadeValue = 1f, float time = 1f)
		{
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x11C7EF0", Offset = "0x11C7EF0", VA = "0x11C7EF0")]
		public void FadeOutImmediately(Priority fadePriority)
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x11C7F58", Offset = "0x11C7F58", VA = "0x11C7F58")]
		public void FadeInImmediately(Priority fadePriority)
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x11C7B44", Offset = "0x11C7B44", VA = "0x11C7B44")]
		private bool NewFadeAllowed(Priority newPriority)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x11C7DBC", Offset = "0x11C7DBC", VA = "0x11C7DBC")]
		[IteratorStateMachine(typeof(<FadeFromToRoutine>d__18))]
		private IEnumerator FadeFromToRoutine(float from, float to, float time, Action onComplete, bool deactivateAtEnd)
		{
			return null;
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x11C7C74", Offset = "0x11C7C74", VA = "0x11C7C74")]
		[IteratorStateMachine(typeof(<FadeInOut>d__19))]
		private IEnumerator FadeInOut([Optional] Action OnComplete)
		{
			return null;
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x11C7C40", Offset = "0x11C7C40", VA = "0x11C7C40")]
		private void StopOngoingFade()
		{
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x11C7FFC", Offset = "0x11C7FFC", VA = "0x11C7FFC")]
		private void ClearCurrentFadeRoutine()
		{
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x11C7F44", Offset = "0x11C7F44", VA = "0x11C7F44")]
		private void SetFadePlaneBlackAlpha(float alpha)
		{
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x11C8008", Offset = "0x11C8008", VA = "0x11C8008")]
		private void SetFadePlaneColor(float r, float g, float b, float a)
		{
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x11C7D60", Offset = "0x11C7D60", VA = "0x11C7D60")]
		private float GetFadePlaneAlpha()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000290")]
	public class NpcData : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000291")]
		public class LookAtPlayerSettings
		{
			[Serializable]
			[Token(Token = "0x2000292")]
			public class LookAtStateCustomWeights
			{
				[Token(Token = "0x4000B7A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public string stateName;

				[Token(Token = "0x4000B7B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public float weightChangeSpeedHead;

				[Token(Token = "0x4000B7C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				public float weightChangeSpeedBody;

				[Token(Token = "0x4000B7D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				[Range(0f, 1f)]
				public float headWeightTarget;

				[Token(Token = "0x4000B7E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				[Range(0f, 1f)]
				public float bodyWeightTarget;

				[Token(Token = "0x4000B7F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				[HideInInspector]
				public int stateHash;

				[Token(Token = "0x6000B88")]
				[Address(RVA = "0x11C8480", Offset = "0x11C8480", VA = "0x11C8480")]
				public LookAtStateCustomWeights()
				{
				}
			}

			[Token(Token = "0x4000B65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform lookAtTarget;

			[Token(Token = "0x4000B66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform lookAtReference;

			[Token(Token = "0x4000B67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Header("Conditions")]
			public bool rotationRequireLineOfSight;

			[Token(Token = "0x4000B68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float lookAtWithinRange;

			[Token(Token = "0x4000B69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LookAtStateCustomWeights[] customStateWeights;

			[Token(Token = "0x4000B6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Header("Body")]
			public Transform bodyToRotate;

			[Token(Token = "0x4000B6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AnimationCurve bodyAngleToValueCurve;

			[Token(Token = "0x4000B6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float bodyMaxRotationAngle;

			[Token(Token = "0x4000B6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Header("Head")]
			public string headHorizontalParameter;

			[Token(Token = "0x4000B6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public string headVerticalParameter;

			[Token(Token = "0x4000B6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public AnimationCurve headAngleToValueCurve;

			[Token(Token = "0x4000B70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Header("Weights")]
			public float weightChangeSpeedHead;

			[Token(Token = "0x4000B71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public float weightChangeSpeedBody;

			[Token(Token = "0x4000B72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public float defaultHeadWeightTarget;

			[Token(Token = "0x4000B73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public float defaultBodyWeightTarget;

			[Token(Token = "0x4000B74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[HideInInspector]
			public float currentBodyWeight;

			[Token(Token = "0x4000B75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[HideInInspector]
			public float currentHeadWeight;

			[Token(Token = "0x4000B76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[HideInInspector]
			public HashSet<int> disableDuringStateHashes;

			[Token(Token = "0x4000B77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[HideInInspector]
			public int headHorizontalHash;

			[Token(Token = "0x4000B78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[HideInInspector]
			public int headVerticalHash;

			[Token(Token = "0x4000B79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[HideInInspector]
			public Dictionary<int, LookAtStateCustomWeights> customStateWeightLookup;

			[Token(Token = "0x6000B87")]
			[Address(RVA = "0x11C8454", Offset = "0x11C8454", VA = "0x11C8454")]
			public LookAtPlayerSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000293")]
		public class NPCAnimationInput
		{
			[Token(Token = "0x2000294")]
			public enum AnimationInputType
			{
				[Token(Token = "0x4000B8C")]
				TriggerOnce,
				[Token(Token = "0x4000B8D")]
				TriggerRepeatOnEntry,
				[Token(Token = "0x4000B8E")]
				BoolSetOnce,
				[Token(Token = "0x4000B8F")]
				FloatTimeInRange,
				[Token(Token = "0x4000B90")]
				FloatPlayerDistance
			}

			[Token(Token = "0x4000B80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Name of the animation parameter")]
			public string parameterName;

			[Token(Token = "0x4000B81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Which type of parameter and behaviour you want")]
			public AnimationInputType animationInputType;

			[Token(Token = "0x4000B82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("The minimum distance the player have to be relative to this NPC to be able to activate this parameter")]
			public float minDistance;

			[Token(Token = "0x4000B83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The maximum distance the player have to be relative to this NPC to be able to activate this parameter")]
			public float maxDistance;

			[Token(Token = "0x4000B84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public bool requireLineOfSight;

			[Token(Token = "0x4000B85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("If the animator is in these states, do not activate this parameter even if all other criteras are met")]
			public string[] ignoreDuringStates;

			[Token(Token = "0x4000B86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Max allowed angle between the players current look direction and if they had looked straight at the NPC to activate the parameter")]
			[Range(0f, 180f)]
			public float maxAllowedLookAtAngle;

			[Token(Token = "0x4000B87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Range(0f, 180f)]
			[Tooltip("Max allowed angle between the NPC's current look direction and if they had looked straight at the player to activate the parameter")]
			public float maxAllowedNpcLookAtAngle;

			[Token(Token = "0x4000B88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[HideInInspector]
			public bool consumed;

			[Token(Token = "0x4000B89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			[HideInInspector]
			public int parameterHash;

			[Token(Token = "0x4000B8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[HideInInspector]
			public HashSet<int> ignoreDuringStateHashes;

			[Token(Token = "0x6000B89")]
			[Address(RVA = "0x11C8494", Offset = "0x11C8494", VA = "0x11C8494")]
			public NPCAnimationInput()
			{
			}
		}

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Player Distance")]
		public Transform distanceOrigin;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Line of Sight")]
		public Transform sightOrigin;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Look At Player")]
		public LookAtPlayerSettings lookAtSettings;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Animation")]
		public Animator animator;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public NPCAnimationInput[] animationInput;

		[NonSerialized]
		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool inLineOfSight;

		[NonSerialized]
		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float playerLookAtAngle;

		[NonSerialized]
		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float npcLookAtAngle;

		[NonSerialized]
		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float localPlayerDistance;

		[NonSerialized]
		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 lineOfSightDirection;

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x11C844C", Offset = "0x11C844C", VA = "0x11C844C")]
		public NpcData()
		{
		}
	}
	[Token(Token = "0x2000295")]
	public class NpcHandler
	{
		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private NpcData[] npcs;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Ray ray;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RaycastHit[] raycastHits;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform playerHead;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly int layerMask;

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x11C84B0", Offset = "0x11C84B0", VA = "0x11C84B0")]
		public NpcHandler(NpcData[] data, PlayerAvatar localPlayer)
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x11C8784", Offset = "0x11C8784", VA = "0x11C8784")]
		private HashSet<int> GetStateHashes(string[] stateNames)
		{
			return null;
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0x11C8868", Offset = "0x11C8868", VA = "0x11C8868")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0x11C9530", Offset = "0x11C9530", VA = "0x11C9530")]
		private float CalculateLookAtParameter(NpcData npc, Vector3 axis, Vector3 headRefToPlayer)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000296")]
	public class BowserPointerHandler
	{
		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BowserPointerHandlerData data;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BowserButtonHandler buttonHandler;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PlayerAvatar playerAvatar;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BowserPointerHandlerData.PointerMode pointerMode;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RaycastHit[] raycastHit;

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0x11C97A8", Offset = "0x11C97A8", VA = "0x11C97A8")]
		public BowserPointerHandler(BowserPointerHandlerData data, BowserButtonHandler buttonHandler, PlayerAvatar playerAvatar)
		{
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0x11C9908", Offset = "0x11C9908", VA = "0x11C9908")]
		public void SetMode(BowserPointerHandlerData.PointerMode mode)
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0x11C9A78", Offset = "0x11C9A78", VA = "0x11C9A78")]
		public BowserPointerHandlerData.PointerMode GetMode()
		{
			return default(BowserPointerHandlerData.PointerMode);
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x11C9A80", Offset = "0x11C9A80", VA = "0x11C9A80")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x11C9D5C", Offset = "0x11C9D5C", VA = "0x11C9D5C")]
		private Collider UpdatePointerAndCastRay(RGXR_Device controller, int pointerIndex)
		{
			return null;
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x11CA154", Offset = "0x11CA154", VA = "0x11CA154")]
		private Collider CastRay(Transform pointer, LineRenderer lineRenderer, GameObject reticle)
		{
			return null;
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x11C9EAC", Offset = "0x11C9EAC", VA = "0x11C9EAC")]
		private BowserButtonData RefreshHover(Collider oldHit, BowserButtonData currentHover, Collider newHit, BowserButtonData otherHandHoverTarget, RGXR_Device device)
		{
			return null;
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x11CA09C", Offset = "0x11CA09C", VA = "0x11CA09C")]
		private void UpdateButtonPressed(RGXR_Device controller, BowserButtonData hoverTarget, bool pressedThisFrame)
		{
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x11C982C", Offset = "0x11C982C", VA = "0x11C982C")]
		private void Disable()
		{
		}
	}
	[Token(Token = "0x2000297")]
	public interface ITeleportTrigger
	{
		[Token(Token = "0x6000B97")]
		void AddHighlight();

		[Token(Token = "0x6000B98")]
		void RemoveHighlight();

		[Token(Token = "0x6000B99")]
		void TeleportedToTrigger(Vector3 newPosition);
	}
	[Token(Token = "0x2000298")]
	public interface IPlatformMultiplayerIntegration
	{
		[Token(Token = "0x6000B9A")]
		void Tick();

		[Token(Token = "0x6000B9B")]
		bool CanInvitePlayer();

		[Token(Token = "0x6000B9C")]
		void ShowPlatformInvitePanel();

		[Token(Token = "0x6000B9D")]
		void DeepLinkRequestFromHostGame(BowserIntegration.DeepLinkData deepLinkData);

		[Token(Token = "0x6000B9E")]
		void Stop();
	}
	[Token(Token = "0x2000299")]
	public class MultiplayerIntegrationData : MonoBehaviour
	{
		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BowserIntegration.DeepLinkData debugDeepLinkData;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<string, string> bowserDebugDeepLinkWithinBowser;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action bowserDebugExitSession;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action<BowserIntegration.DeepLinkData> bowserDebugDeepLink;

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x11CA48C", Offset = "0x11CA48C", VA = "0x11CA48C")]
		public void DebugDeepLink(BowserIntegration.DeepLinkData deepLinkData)
		{
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x11CA4A8", Offset = "0x11CA4A8", VA = "0x11CA4A8")]
		public void DebugDeepLinkWithinBowser(string lobbyId, string matchId)
		{
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x11CA4C4", Offset = "0x11CA4C4", VA = "0x11CA4C4")]
		public void DebugBowserExitSession()
		{
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x11CA4E0", Offset = "0x11CA4E0", VA = "0x11CA4E0")]
		public MultiplayerIntegrationData()
		{
		}
	}
	[Token(Token = "0x200029A")]
	public class MultiplayerIntegrationManager
	{
		[Token(Token = "0x200029B")]
		public class FallbackMultiplayerIntegration : IPlatformMultiplayerIntegration
		{
			[Token(Token = "0x6000BA9")]
			[Address(RVA = "0x11CAAF4", Offset = "0x11CAAF4", VA = "0x11CAAF4", Slot = "5")]
			public bool CanInvitePlayer()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BAA")]
			[Address(RVA = "0x11CAAFC", Offset = "0x11CAAFC", VA = "0x11CAAFC", Slot = "7")]
			public void DeepLinkRequestFromHostGame(BowserIntegration.DeepLinkData deepLinkData)
			{
			}

			[Token(Token = "0x6000BAB")]
			[Address(RVA = "0x11CAB00", Offset = "0x11CAB00", VA = "0x11CAB00", Slot = "6")]
			public void ShowPlatformInvitePanel()
			{
			}

			[Token(Token = "0x6000BAC")]
			[Address(RVA = "0x11CAB04", Offset = "0x11CAB04", VA = "0x11CAB04", Slot = "8")]
			public void Stop()
			{
			}

			[Token(Token = "0x6000BAD")]
			[Address(RVA = "0x11CAB08", Offset = "0x11CAB08", VA = "0x11CAB08", Slot = "4")]
			public void Tick()
			{
			}

			[Token(Token = "0x6000BAE")]
			[Address(RVA = "0x11CA7B4", Offset = "0x11CA7B4", VA = "0x11CA7B4")]
			public FallbackMultiplayerIntegration()
			{
			}
		}

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IPlatformMultiplayerIntegration multiplayerIntegration;

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x11CA4E8", Offset = "0x11CA4E8", VA = "0x11CA4E8")]
		public MultiplayerIntegrationManager(MultiplayerIntegrationData data, Entrypoint entrypoint)
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x11CA7BC", Offset = "0x11CA7BC", VA = "0x11CA7BC")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x11CA85C", Offset = "0x11CA85C", VA = "0x11CA85C")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x11CA900", Offset = "0x11CA900", VA = "0x11CA900")]
		public bool CanInvitePlayer()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x11CA9A4", Offset = "0x11CA9A4", VA = "0x11CA9A4")]
		public void ShowPlatformInvitePanel()
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x11CAA48", Offset = "0x11CAA48", VA = "0x11CAA48")]
		public void HostGameDeepLinkRequest(BowserIntegration.DeepLinkData deepLinkData)
		{
		}
	}
	[Token(Token = "0x200029C")]
	public class OculusMultiplayerIntegration : IPlatformMultiplayerIntegration
	{
		[Token(Token = "0x200029D")]
		private enum State
		{
			[Token(Token = "0x4000BAF")]
			Setup,
			[Token(Token = "0x4000BB0")]
			Ready
		}

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private State state;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Entrypoint entrypoint;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MultiplayerIntegrationData data;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool wasJoinable;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CallbackRunner callbackRunner;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstTimeSetup;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string latestRoomName;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GroupPresenceJoinIntent groupPresenceJoinIntent;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GroupPresenceLeaveIntent groupPresenceLeaveIntent;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string latestLobbySessionId;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private InviteOptions inviteOptions;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool invitePanelRequestInProgress;

		[Token(Token = "0x4000BAC")]
		public const string BOWSER_DESTINATION = "go_to_ozo";

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public readonly List<string> hostGameDestinations;

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x11CA58C", Offset = "0x11CA58C", VA = "0x11CA58C")]
		public OculusMultiplayerIntegration(MultiplayerIntegrationData data, Entrypoint entrypoint)
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x11CAB0C", Offset = "0x11CAB0C", VA = "0x11CAB0C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x11CB59C", Offset = "0x11CB59C", VA = "0x11CB59C", Slot = "8")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x11CB62C", Offset = "0x11CB62C", VA = "0x11CB62C", Slot = "5")]
		public bool CanInvitePlayer()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x11CB634", Offset = "0x11CB634", VA = "0x11CB634", Slot = "6")]
		public void ShowPlatformInvitePanel()
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x11CB708", Offset = "0x11CB708", VA = "0x11CB708", Slot = "7")]
		public void DeepLinkRequestFromHostGame(BowserIntegration.DeepLinkData deepLinkData)
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x11CBBE4", Offset = "0x11CBBE4", VA = "0x11CBBE4")]
		private void OnLeaveIntentReceived(Message<GroupPresenceLeaveIntent> message)
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x11CBD24", Offset = "0x11CBD24", VA = "0x11CBD24")]
		private void OnInvitiationsSent(Message<LaunchInvitePanelFlowResult> message)
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x11CBD8C", Offset = "0x11CBD8C", VA = "0x11CBD8C")]
		private void OnJoinIntentReceived(Message<GroupPresenceJoinIntent> message)
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x11CADE4", Offset = "0x11CADE4", VA = "0x11CADE4")]
		private void EvaluateDeepLink(string destinationApiName, string lobbyId, string matchId)
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x11CB1C4", Offset = "0x11CB1C4", VA = "0x11CB1C4")]
		private void UpdateRichPresence()
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x11CBF5C", Offset = "0x11CBF5C", VA = "0x11CBF5C")]
		private void OnShowInvitePanelComplete(Message<InvitePanelResultInfo> message)
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x11CB144", Offset = "0x11CB144", VA = "0x11CB144")]
		private void LeaveCurrentOnlineSession()
		{
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x11CB97C", Offset = "0x11CB97C", VA = "0x11CB97C")]
		private void EvaluateBowserDestination(string lobbySessionId, string matchId)
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x11CBECC", Offset = "0x11CBECC", VA = "0x11CBECC")]
		private void SendToHostGame(BowserIntegration.DeepLinkData deepLinkData)
		{
		}
	}
	[Token(Token = "0x200029E")]
	public class NetworkManager : IConnectionCallbacks, IInRoomCallbacks, IMatchmakingCallbacks, ILobbyCallbacks
	{
		[Token(Token = "0x200029F")]
		public delegate void OnConnectedHandler();

		[Token(Token = "0x20002A0")]
		public delegate void OnLeftRoomHandler();

		[Token(Token = "0x20002A1")]
		public delegate void OnDisconnectedHandler(DisconnectCause cause);

		[Token(Token = "0x20002A2")]
		public delegate void OnFailedToJoinRoomHandler(short returnCode, string message);

		[Token(Token = "0x20002A3")]
		public delegate void OnPlayerEnteredRoomHandler(Player newPlayer);

		[Token(Token = "0x20002A4")]
		public delegate void OnPlayerLeftRoomHandler(Player otherPlayer);

		[Token(Token = "0x20002A5")]
		public delegate void OnRoomListUpdateHandler(List<RoomInfo> roomList);

		[Token(Token = "0x20002A6")]
		public delegate void OnRoomPropertiesChangedHandler(ExitGames.Client.Photon.Hashtable propertiesThatChanged);

		[Token(Token = "0x20002A7")]
		private enum ConnectionState
		{
			[Token(Token = "0x4000BBF")]
			None,
			[Token(Token = "0x4000BC0")]
			RemoveOldConnection,
			[Token(Token = "0x4000BC1")]
			DisconnectingFromOld,
			[Token(Token = "0x4000BC2")]
			Disconnected,
			[Token(Token = "0x4000BC3")]
			Connecting,
			[Token(Token = "0x4000BC4")]
			Connected
		}

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool tryConnecting;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Action onCreatedOrJoinedRoomCallback;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<RoomInfo> latestRoomList;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ConnectionState connectionState;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private BowserTracking tracking;

		[Token(Token = "0x17000098")]
		public bool ReadyToJoinBar
		{
			[Token(Token = "0x6000BCE")]
			[Address(RVA = "0x11C47B4", Offset = "0x11C47B4", VA = "0x11C47B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000099")]
		public bool Disconnected
		{
			[Token(Token = "0x6000BCF")]
			[Address(RVA = "0x11CC638", Offset = "0x11CC638", VA = "0x11CC638")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000006")]
		public event OnConnectedHandler onConnected
		{
			[Token(Token = "0x6000BBE")]
			[Address(RVA = "0x11CC020", Offset = "0x11CC020", VA = "0x11CC020")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000BBF")]
			[Address(RVA = "0x11CC0BC", Offset = "0x11CC0BC", VA = "0x11CC0BC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000007")]
		public event OnLeftRoomHandler onLeftRoom
		{
			[Token(Token = "0x6000BC0")]
			[Address(RVA = "0x11CC158", Offset = "0x11CC158", VA = "0x11CC158")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000BC1")]
			[Address(RVA = "0x11CC1F4", Offset = "0x11CC1F4", VA = "0x11CC1F4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000008")]
		public event OnDisconnectedHandler onLostConnection
		{
			[Token(Token = "0x6000BC2")]
			[Address(RVA = "0x11C24A4", Offset = "0x11C24A4", VA = "0x11C24A4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000BC3")]
			[Address(RVA = "0x11C5570", Offset = "0x11C5570", VA = "0x11C5570")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000009")]
		public event OnFailedToJoinRoomHandler onFailedToJoinRoom
		{
			[Token(Token = "0x6000BC4")]
			[Address(RVA = "0x11C2604", Offset = "0x11C2604", VA = "0x11C2604")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000BC5")]
			[Address(RVA = "0x11C560C", Offset = "0x11C560C", VA = "0x11C560C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000A")]
		public event OnPlayerEnteredRoomHandler onPlayerEnteredRoom
		{
			[Token(Token = "0x6000BC6")]
			[Address(RVA = "0x11CC290", Offset = "0x11CC290", VA = "0x11CC290")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000BC7")]
			[Address(RVA = "0x11CC32C", Offset = "0x11CC32C", VA = "0x11CC32C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000B")]
		public event OnPlayerLeftRoomHandler onPlayerLeftRoom
		{
			[Token(Token = "0x6000BC8")]
			[Address(RVA = "0x11CC3C8", Offset = "0x11CC3C8", VA = "0x11CC3C8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000BC9")]
			[Address(RVA = "0x11CC464", Offset = "0x11CC464", VA = "0x11CC464")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000C")]
		public event OnRoomListUpdateHandler onRoomListUpdate
		{
			[Token(Token = "0x6000BCA")]
			[Address(RVA = "0x11C2344", Offset = "0x11C2344", VA = "0x11C2344")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000BCB")]
			[Address(RVA = "0x11C54D4", Offset = "0x11C54D4", VA = "0x11C54D4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000D")]
		public event OnRoomPropertiesChangedHandler onRoomPropertiesChanged
		{
			[Token(Token = "0x6000BCC")]
			[Address(RVA = "0x11CC500", Offset = "0x11CC500", VA = "0x11CC500")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000BCD")]
			[Address(RVA = "0x11CC59C", Offset = "0x11CC59C", VA = "0x11CC59C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x11CC648", Offset = "0x11CC648", VA = "0x11CC648")]
		public NetworkManager(BowserTracking tracking)
		{
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x11CC6D8", Offset = "0x11CC6D8", VA = "0x11CC6D8")]
		public void SetupConnection()
		{
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x11C3D4C", Offset = "0x11C3D4C", VA = "0x11C3D4C")]
		public void TryConnecting()
		{
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0x11C3E78", Offset = "0x11C3E78", VA = "0x11C3E78")]
		public void JoinLobby()
		{
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x11C4A60", Offset = "0x11C4A60", VA = "0x11C4A60")]
		public bool InLobby()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0x11CC758", Offset = "0x11CC758", VA = "0x11CC758")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0x11CC8D4", Offset = "0x11CC8D4", VA = "0x11CC8D4")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0x11CC964", Offset = "0x11CC964", VA = "0x11CC964")]
		public bool CreateOrJoinRoom(int floor, BowserRoomInfo roomInfo, Action onConnectedToRoom)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x11CCC0C", Offset = "0x11CCC0C", VA = "0x11CCC0C")]
		public void PauseNetworking()
		{
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x11CCC60", Offset = "0x11CCC60", VA = "0x11CCC60", Slot = "4")]
		public void OnConnected()
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0x11CCCC8", Offset = "0x11CCCC8", VA = "0x11CCCC8", Slot = "5")]
		public void OnConnectedToMaster()
		{
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0x11CCD30", Offset = "0x11CCD30", VA = "0x11CCD30", Slot = "9")]
		public void OnCustomAuthenticationFailed(string debugMessage)
		{
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0x11CCDBC", Offset = "0x11CCDBC", VA = "0x11CCDBC", Slot = "8")]
		public void OnCustomAuthenticationResponse(Dictionary<string, object> data)
		{
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0x11CCE24", Offset = "0x11CCE24", VA = "0x11CCE24", Slot = "6")]
		public void OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0x11CCF80", Offset = "0x11CCF80", VA = "0x11CCF80", Slot = "7")]
		public void OnRegionListReceived(RegionHandler regionHandler)
		{
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0x11CCFE8", Offset = "0x11CCFE8", VA = "0x11CCFE8", Slot = "10")]
		public void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0x11CD0A4", Offset = "0x11CD0A4", VA = "0x11CD0A4", Slot = "11")]
		public void OnPlayerLeftRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0x11CD160", Offset = "0x11CD160", VA = "0x11CD160", Slot = "12")]
		public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
		{
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x11CD204", Offset = "0x11CD204", VA = "0x11CD204", Slot = "13")]
		public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x11CD26C", Offset = "0x11CD26C", VA = "0x11CD26C", Slot = "14")]
		public void OnMasterClientSwitched(Player newMasterClient)
		{
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x11CD2D4", Offset = "0x11CD2D4", VA = "0x11CD2D4", Slot = "15")]
		public void OnFriendListUpdate(List<Photon.Realtime.FriendInfo> friendList)
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x11CD33C", Offset = "0x11CD33C", VA = "0x11CD33C", Slot = "16")]
		public void OnCreatedRoom()
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x11CD3C8", Offset = "0x11CD3C8", VA = "0x11CD3C8", Slot = "17")]
		public void OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x11CD460", Offset = "0x11CD460", VA = "0x11CD460", Slot = "18")]
		public void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x11CD4EC", Offset = "0x11CD4EC", VA = "0x11CD4EC", Slot = "19")]
		public void OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x11CD5FC", Offset = "0x11CD5FC", VA = "0x11CD5FC", Slot = "20")]
		public void OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0x11CD6C4", Offset = "0x11CD6C4", VA = "0x11CD6C4", Slot = "21")]
		public void OnLeftRoom()
		{
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0x11CD754", Offset = "0x11CD754", VA = "0x11CD754", Slot = "22")]
		public void OnJoinedLobby()
		{
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x11CD7FC", Offset = "0x11CD7FC", VA = "0x11CD7FC", Slot = "23")]
		public void OnLeftLobby()
		{
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0x11CD8A4", Offset = "0x11CD8A4", VA = "0x11CD8A4", Slot = "24")]
		public void OnRoomListUpdate(List<RoomInfo> roomList)
		{
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0x11CDAC0", Offset = "0x11CDAC0", VA = "0x11CDAC0")]
		public List<RoomInfo> GetLatestRoomList()
		{
			return null;
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x11CDAC8", Offset = "0x11CDAC8", VA = "0x11CDAC8", Slot = "25")]
		public void OnLobbyStatisticsUpdate(List<TypedLobbyInfo> lobbyStatistics)
		{
		}
	}
	[Token(Token = "0x20002A8")]
	public class APIException : Exception
	{
		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x11CE300", Offset = "0x11CE300", VA = "0x11CE300")]
		public APIException(string details)
		{
		}
	}
	[Token(Token = "0x20002A9")]
	public class ApiRequestHandler
	{
		[Token(Token = "0x20002AA")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4000BC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ApiRequestHandler <>4__this;

			[Token(Token = "0x4000BC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TaskCompletionSource<bool> r;

			[Token(Token = "0x4000BC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UnityWebRequest request;

			[Token(Token = "0x6000C14")]
			[Address(RVA = "0x11CE764", Offset = "0x11CE764", VA = "0x11CE764")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6000C15")]
			[Address(RVA = "0x11CE76C", Offset = "0x11CE76C", VA = "0x11CE76C")]
			internal void <RequestAsync>b__0(AsyncOperation op)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002AB")]
		[CompilerGenerated]
		private struct <RequestAsync>d__2 : IAsyncStateMachine
		{
			[Token(Token = "0x4000BC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<UnityWebRequest> <>t__builder;

			[Token(Token = "0x4000BCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ApiRequestHandler <>4__this;

			[Token(Token = "0x4000BCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string url;

			[Token(Token = "0x4000BCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Dictionary<string, string> queryParams;

			[Token(Token = "0x4000BCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string method;

			[Token(Token = "0x4000BCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public object body;

			[Token(Token = "0x4000BD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private <>c__DisplayClass2_0 <>8__1;

			[Token(Token = "0x4000BD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private TaskAwaiter<bool> <>u__1;

			[Token(Token = "0x6000C16")]
			[Address(RVA = "0x11CE89C", Offset = "0x11CE89C", VA = "0x11CE89C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000C17")]
			[Address(RVA = "0x11CEE94", Offset = "0x11CEE94", VA = "0x11CEE94", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly CancellationTokenSource cancellationTokenSource;

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x11CE368", Offset = "0x11CE368", VA = "0x11CE368")]
		public ApiRequestHandler(CancellationTokenSource cancellationTokenSource)
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x11CE390", Offset = "0x11CE390", VA = "0x11CE390")]
		[AsyncStateMachine(typeof(<RequestAsync>d__2))]
		public Task<UnityWebRequest> RequestAsync(string url, string method, [Optional] object body, [Optional] Dictionary<string, string> queryParams)
		{
			return null;
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x11CE4B0", Offset = "0x11CE4B0", VA = "0x11CE4B0")]
		private string FormatUrl(string url, Dictionary<string, string> queryParams)
		{
			return null;
		}
	}
	[Token(Token = "0x20002AC")]
	public class Future<T>
	{
		[Token(Token = "0x20002AD")]
		[CompilerGenerated]
		private sealed class <performResolve>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000BD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x4000BD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Future<T> <>4__this;

			[Token(Token = "0x4000BD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<T> onSuccess;

			[Token(Token = "0x4000BD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<APIError> onFailure;

			[Token(Token = "0x4000BDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<bool> _while;

			[Token(Token = "0x1700009A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C24")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700009B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C26")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C21")]
			[DebuggerHidden]
			public <performResolve>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6000C22")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C23")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C25")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T value;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private APIError error;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private MonoBehaviour monoBehaviour;

		[Token(Token = "0x6000C18")]
		public Future(MonoBehaviour monoBehaviour)
		{
		}

		[Token(Token = "0x6000C19")]
		public bool IsReady()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1A")]
		public bool Succeeded()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1B")]
		public T GetValue()
		{
			return (T)null;
		}

		[Token(Token = "0x6000C1C")]
		public void SetResult(T value)
		{
		}

		[Token(Token = "0x6000C1D")]
		public APIError GetError()
		{
			return null;
		}

		[Token(Token = "0x6000C1E")]
		public void SetError(APIError error)
		{
		}

		[Token(Token = "0x6000C1F")]
		public void Resolve(Action<T> onSuccess, Action<APIError> onFailure, Func<bool> _while)
		{
		}

		[Token(Token = "0x6000C20")]
		[IteratorStateMachine(typeof(Future<>.<performResolve>d__11))]
		private IEnumerator performResolve(Action<T> onSuccess, Action<APIError> onFailure, Func<bool> _while)
		{
			return null;
		}
	}
	[Token(Token = "0x20002AE")]
	public class APIError
	{
		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public long statusCode;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string detail;

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x11CEEEC", Offset = "0x11CEEEC", VA = "0x11CEEEC")]
		public APIError(long statusCode, string detail = "unknown network error")
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x11CEF18", Offset = "0x11CEF18", VA = "0x11CEF18")]
		public APIError()
		{
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0x11CEF20", Offset = "0x11CEF20", VA = "0x11CEF20", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002AF")]
	public class PrivateRoomService
	{
		[Token(Token = "0x20002B0")]
		public class BaseApiRequest
		{
			[Token(Token = "0x6000C30")]
			[Address(RVA = "0x11CF0E8", Offset = "0x11CF0E8", VA = "0x11CF0E8")]
			public byte[] ToJson()
			{
				return null;
			}

			[Token(Token = "0x6000C31")]
			[Address(RVA = "0x11CF130", Offset = "0x11CF130", VA = "0x11CF130")]
			public BaseApiRequest()
			{
			}
		}

		[Token(Token = "0x20002B1")]
		public class PrivateRoom : BaseApiRequest
		{
			[Token(Token = "0x4000BDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string floorId;

			[Token(Token = "0x4000BE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string photonRoomId;

			[Token(Token = "0x4000BE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string accessCode;

			[Token(Token = "0x4000BE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string customId;

			[Token(Token = "0x6000C32")]
			[Address(RVA = "0x11CF0C0", Offset = "0x11CF0C0", VA = "0x11CF0C0")]
			public PrivateRoom(string floorId)
			{
			}

			[Token(Token = "0x6000C33")]
			[Address(RVA = "0x11CF138", Offset = "0x11CF138", VA = "0x11CF138", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x20002B2")]
		[CompilerGenerated]
		private sealed class <PerformRequest>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UnityWebRequest request;

			[Token(Token = "0x4000BE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action<APIError> onFailure;

			[Token(Token = "0x4000BE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action<UnityWebRequest> onSuccess;

			[Token(Token = "0x1700009C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C37")]
				[Address(RVA = "0x11CF5DC", Offset = "0x11CF5DC", VA = "0x11CF5DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700009D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C39")]
				[Address(RVA = "0x11CF624", Offset = "0x11CF624", VA = "0x11CF624", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C34")]
			[Address(RVA = "0x11CF090", Offset = "0x11CF090", VA = "0x11CF090")]
			[DebuggerHidden]
			public <PerformRequest>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000C35")]
			[Address(RVA = "0x11CF2F0", Offset = "0x11CF2F0", VA = "0x11CF2F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C36")]
			[Address(RVA = "0x11CF2F4", Offset = "0x11CF2F4", VA = "0x11CF2F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C38")]
			[Address(RVA = "0x11CF5E4", Offset = "0x11CF5E4", VA = "0x11CF5E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MonoBehaviour monoBehaviour;

		[Token(Token = "0x4000BDE")]
		private const string baseUrl = "https://api.blaston.com/privateRooms";

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0x11C6CFC", Offset = "0x11C6CFC", VA = "0x11C6CFC")]
		public PrivateRoomService(MonoBehaviour monoBehaviour)
		{
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0x11CEFA8", Offset = "0x11CEFA8", VA = "0x11CEFA8")]
		private static void ConfigureRequest(UnityWebRequest request)
		{
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0x11CF014", Offset = "0x11CF014", VA = "0x11CF014")]
		[IteratorStateMachine(typeof(<PerformRequest>d__4))]
		private IEnumerator PerformRequest(UnityWebRequest request, Action<UnityWebRequest> onSuccess, Action<APIError> onFailure)
		{
			return null;
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0x11C6D2C", Offset = "0x11C6D2C", VA = "0x11C6D2C")]
		public Future<PrivateRoom> GenerateRoomCode(string floorId)
		{
			return null;
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x11C7140", Offset = "0x11C7140", VA = "0x11C7140")]
		public Future<PrivateRoom> JoinOrCreatePrivateRoom(int floorId, string customId)
		{
			return null;
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x11C6F88", Offset = "0x11C6F88", VA = "0x11C6F88")]
		public Future<PrivateRoom> GetRoomName(string accessCode)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B6")]
	public class TokenService
	{
		[Token(Token = "0x20002B7")]
		public class NoTokensAvailableException : APIException
		{
			[Token(Token = "0x6000C4A")]
			[Address(RVA = "0x11D0194", Offset = "0x11D0194", VA = "0x11D0194")]
			public NoTokensAvailableException()
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002B8")]
		[CompilerGenerated]
		private struct <GetTokens>d__10 : IAsyncStateMachine
		{
			[Token(Token = "0x4000BF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<float> <>t__builder;

			[Token(Token = "0x4000BF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TokenService <>4__this;

			[Token(Token = "0x4000BF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <remainingRetries>5__2;

			[Token(Token = "0x4000BF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TaskAwaiter<UnityWebRequest> <>u__1;

			[Token(Token = "0x6000C4B")]
			[Address(RVA = "0x11D01DC", Offset = "0x11D01DC", VA = "0x11D01DC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000C4C")]
			[Address(RVA = "0x11D0694", Offset = "0x11D0694", VA = "0x11D0694", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002B9")]
		[CompilerGenerated]
		private struct <ChangeAmountOfTokens>d__11 : IAsyncStateMachine
		{
			[Token(Token = "0x4000BF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<int> <>t__builder;

			[Token(Token = "0x4000BF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TokenService <>4__this;

			[Token(Token = "0x4000BFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int amount;

			[Token(Token = "0x4000BFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <remainingRetries>5__2;

			[Token(Token = "0x4000BFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TaskAwaiter<UnityWebRequest> <>u__1;

			[Token(Token = "0x6000C4D")]
			[Address(RVA = "0x11D06EC", Offset = "0x11D06EC", VA = "0x11D06EC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000C4E")]
			[Address(RVA = "0x11D0B70", Offset = "0x11D0B70", VA = "0x11D0B70", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002BA")]
		[CompilerGenerated]
		private struct <GetFreeTokens>d__12 : IAsyncStateMachine
		{
			[Token(Token = "0x4000BFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000BFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<int> <>t__builder;

			[Token(Token = "0x4000BFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TokenService <>4__this;

			[Token(Token = "0x4000C00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private TaskAwaiter<UnityWebRequest> <>u__1;

			[Token(Token = "0x6000C4F")]
			[Address(RVA = "0x11D0BC8", Offset = "0x11D0BC8", VA = "0x11D0BC8", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000C50")]
			[Address(RVA = "0x11D1000", Offset = "0x11D1000", VA = "0x11D1000", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002BB")]
		[CompilerGenerated]
		private struct <TakeFreeToken>d__13 : IAsyncStateMachine
		{
			[Token(Token = "0x4000C01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000C02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<int> <>t__builder;

			[Token(Token = "0x4000C03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TokenService <>4__this;

			[Token(Token = "0x4000C04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private TaskAwaiter<UnityWebRequest> <>u__1;

			[Token(Token = "0x6000C51")]
			[Address(RVA = "0x11D1058", Offset = "0x11D1058", VA = "0x11D1058", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000C52")]
			[Address(RVA = "0x11D14E8", Offset = "0x11D14E8", VA = "0x11D14E8", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4000BEC")]
		public const string PLAYFAB_DISCONNECTED_USERID = "DefaultId";

		[Token(Token = "0x4000BED")]
		private const int NUMBER_OF_RETRIES = 5;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private CancellationTokenSource cancellationTokenSource;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ApiRequestHandler apiRequestHandler;

		[Token(Token = "0x4000BF0")]
		private const string url = "https://api.blaston.com/tokens";

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string playFabUserId;

		[Token(Token = "0x1700009E")]
		public string PlayFabUserId
		{
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0x11CFC28", Offset = "0x11CFC28", VA = "0x11CFC28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0x11CFC30", Offset = "0x11CFC30", VA = "0x11CFC30")]
		public TokenService([Optional] string playFabUserId)
		{
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x11CFD24", Offset = "0x11CFD24", VA = "0x11CFD24")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x11CFDA4", Offset = "0x11CFDA4", VA = "0x11CFDA4")]
		[AsyncStateMachine(typeof(<GetTokens>d__10))]
		public Task<float> GetTokens()
		{
			return null;
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x11CFEA0", Offset = "0x11CFEA0", VA = "0x11CFEA0")]
		[AsyncStateMachine(typeof(<ChangeAmountOfTokens>d__11))]
		public Task<int> ChangeAmountOfTokens(int amount)
		{
			return null;
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x11CFFA4", Offset = "0x11CFFA4", VA = "0x11CFFA4")]
		[AsyncStateMachine(typeof(<GetFreeTokens>d__12))]
		public Task<int> GetFreeTokens()
		{
			return null;
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x11D009C", Offset = "0x11D009C", VA = "0x11D009C")]
		[AsyncStateMachine(typeof(<TakeFreeToken>d__13))]
		public Task<int> TakeFreeToken()
		{
			return null;
		}
	}
	[Token(Token = "0x20002BC")]
	public class UserBlockingService
	{
		[Token(Token = "0x20002BD")]
		private class BlockedUsersList
		{
			[Token(Token = "0x4000C08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<string> blockedUsers;

			[Token(Token = "0x6000C58")]
			[Address(RVA = "0x11D1988", Offset = "0x11D1988", VA = "0x11D1988")]
			public BlockedUsersList()
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002BE")]
		[CompilerGenerated]
		private struct <BlockUser>d__5 : IAsyncStateMachine
		{
			[Token(Token = "0x4000C09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000C0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000C0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UserBlockingService <>4__this;

			[Token(Token = "0x4000C0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string sourceUserId;

			[Token(Token = "0x4000C0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string targetUserId;

			[Token(Token = "0x4000C0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string blockType;

			[Token(Token = "0x4000C0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private TaskAwaiter<UnityWebRequest> <>u__1;

			[Token(Token = "0x6000C59")]
			[Address(RVA = "0x11D1990", Offset = "0x11D1990", VA = "0x11D1990", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000C5A")]
			[Address(RVA = "0x11D1D0C", Offset = "0x11D1D0C", VA = "0x11D1D0C", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002BF")]
		[CompilerGenerated]
		private struct <GetListOfBlockedUsers>d__6 : IAsyncStateMachine
		{
			[Token(Token = "0x4000C10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000C11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<List<string>> <>t__builder;

			[Token(Token = "0x4000C12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UserBlockingService <>4__this;

			[Token(Token = "0x4000C13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string sourceUserId;

			[Token(Token = "0x4000C14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TaskAwaiter<UnityWebRequest> <>u__1;

			[Token(Token = "0x6000C5B")]
			[Address(RVA = "0x11D1D18", Offset = "0x11D1D18", VA = "0x11D1D18", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000C5C")]
			[Address(RVA = "0x11D2120", Offset = "0x11D2120", VA = "0x11D2120", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002C0")]
		[CompilerGenerated]
		private struct <RemoveBlock>d__7 : IAsyncStateMachine
		{
			[Token(Token = "0x4000C15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000C16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4000C17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UserBlockingService <>4__this;

			[Token(Token = "0x4000C18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string sourceUserId;

			[Token(Token = "0x4000C19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string targetUserId;

			[Token(Token = "0x4000C1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string blockType;

			[Token(Token = "0x4000C1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private TaskAwaiter<UnityWebRequest> <>u__1;

			[Token(Token = "0x6000C5D")]
			[Address(RVA = "0x11D2178", Offset = "0x11D2178", VA = "0x11D2178", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000C5E")]
			[Address(RVA = "0x11D24F4", Offset = "0x11D24F4", VA = "0x11D24F4", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private CancellationTokenSource cancellationTokenSource;

		[Token(Token = "0x4000C06")]
		private const string URL = "https://api.blaston.com/userBlocks/";

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ApiRequestHandler requestAsync;

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x11D1540", Offset = "0x11D1540", VA = "0x11D1540")]
		public UserBlockingService()
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x11D162C", Offset = "0x11D162C", VA = "0x11D162C")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x11D16AC", Offset = "0x11D16AC", VA = "0x11D16AC")]
		[AsyncStateMachine(typeof(<BlockUser>d__5))]
		public Task BlockUser(string sourceUserId, string targetUserId, string blockType = "block")
		{
			return null;
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x11D179C", Offset = "0x11D179C", VA = "0x11D179C")]
		[AsyncStateMachine(typeof(<GetListOfBlockedUsers>d__6))]
		public Task<List<string>> GetListOfBlockedUsers(string sourceUserId)
		{
			return null;
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x11D1898", Offset = "0x11D1898", VA = "0x11D1898")]
		[AsyncStateMachine(typeof(<RemoveBlock>d__7))]
		public Task RemoveBlock(string sourceUserId, string targetUserId, string blockType = "block")
		{
			return null;
		}
	}
	[Token(Token = "0x20002C1")]
	public class OutOfBoundsHandler
	{
		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Alert alert;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ColliderProxy headCollider;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<int, bool> currentCollisions;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int environmentLayer;

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x11D2500", Offset = "0x11D2500", VA = "0x11D2500")]
		public OutOfBoundsHandler(Alert alert, ColliderProxy headCollider)
		{
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x11D2658", Offset = "0x11D2658", VA = "0x11D2658")]
		private void OnTriggerEnter(Collider trigger, Collider other)
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x11D279C", Offset = "0x11D279C", VA = "0x11D279C")]
		private void OnTriggerExit(Collider trigger, Collider other)
		{
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x11D28A8", Offset = "0x11D28A8", VA = "0x11D28A8")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x11D272C", Offset = "0x11D272C", VA = "0x11D272C")]
		private void OnOutOfBounds(bool isOutOfBounds)
		{
		}
	}
	[Token(Token = "0x20002C2")]
	public class PhotonObservableProxy : MonoBehaviour, IPunObservable
	{
		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<IPunObservable> targets;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<UnityEngine.Object, IBowserPunObservable> handlerTargets;

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x11D2988", Offset = "0x11D2988", VA = "0x11D2988")]
		public void AddTarget(IPunObservable target)
		{
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x11D2A30", Offset = "0x11D2A30", VA = "0x11D2A30")]
		public void RemoveTarget(IPunObservable target)
		{
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x11D2A88", Offset = "0x11D2A88", VA = "0x11D2A88")]
		public void AddHandlerTarget(IBowserPunObservable handler, UnityEngine.Object instance)
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x11D2AF0", Offset = "0x11D2AF0", VA = "0x11D2AF0")]
		public void RemoveHandlerTarget(IBowserPunObservable target, UnityEngine.Object instance)
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x11D2B48", Offset = "0x11D2B48", VA = "0x11D2B48", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x11D2E7C", Offset = "0x11D2E7C", VA = "0x11D2E7C")]
		public PhotonObservableProxy()
		{
		}
	}
	[Token(Token = "0x20002C3")]
	public class PlayerAvatar
	{
		[Token(Token = "0x20002C4")]
		public enum GrabState
		{
			[Token(Token = "0x4000C33")]
			IsNotGrabbing,
			[Token(Token = "0x4000C34")]
			GrabbedThisFrame,
			[Token(Token = "0x4000C35")]
			IsGrabbing,
			[Token(Token = "0x4000C36")]
			ReleaseThisFrame
		}

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GrabbableData grabbableLeftHand;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GrabbableData grabbableRightHand;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<RGXR_Device, bool> grippedLastFrame;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GrabState grabStateLeftHand;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private GrabState grabStateRightHand;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PlayerHandPhysics leftHandPhysics;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PlayerHandPhysics rightHandPhysics;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string localAvatarColorKey;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabbableHandler grabbableHandler;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private WristMenuHandler wristMenuHandler;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private OutOfBoundsHandler outOfBoundsHandler;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Teleport teleport;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool fakeAvatar;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int enableIKTimer;

		[Token(Token = "0x1700009F")]
		public PhotonView PhotonView
		{
			[Token(Token = "0x6000C6A")]
			[Address(RVA = "0x11D2F3C", Offset = "0x11D2F3C", VA = "0x11D2F3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A0")]
		public AvatarData AvatarData
		{
			[Token(Token = "0x6000C6B")]
			[Address(RVA = "0x11D2F58", Offset = "0x11D2F58", VA = "0x11D2F58")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C6C")]
			[Address(RVA = "0x11D2F60", Offset = "0x11D2F60", VA = "0x11D2F60")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000A1")]
		public GameObject LocalPlayerAvatar
		{
			[Token(Token = "0x6000C6D")]
			[Address(RVA = "0x11D2F68", Offset = "0x11D2F68", VA = "0x11D2F68")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C6E")]
			[Address(RVA = "0x11D2F70", Offset = "0x11D2F70", VA = "0x11D2F70")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000A2")]
		public Transform LeftHand
		{
			[Token(Token = "0x6000C6F")]
			[Address(RVA = "0x11D2F78", Offset = "0x11D2F78", VA = "0x11D2F78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A3")]
		public Transform RightHand
		{
			[Token(Token = "0x6000C70")]
			[Address(RVA = "0x11D2F94", Offset = "0x11D2F94", VA = "0x11D2F94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x11D2FB0", Offset = "0x11D2FB0", VA = "0x11D2FB0")]
		public PlayerAvatar(GameObject avatarPrefab, GrabbableHandler grabbableHandler, BowserButtonHandler bowserButtonHandler, PlayerMenu playerMenu, AvatarHandler avatarHandler, StoryManager storyManager, Alert alert, Teleport teleport, bool networked, Vector3 position, Quaternion rotation, bool fakeAvatar = false)
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x11D37AC", Offset = "0x11D37AC", VA = "0x11D37AC")]
		private void OnXRRigMoved(Vector3 newPosition, Quaternion newRotation)
		{
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x11D383C", Offset = "0x11D383C", VA = "0x11D383C")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x11D3710", Offset = "0x11D3710", VA = "0x11D3710")]
		public void SetAvatarColor(Color color)
		{
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x11D3930", Offset = "0x11D3930", VA = "0x11D3930")]
		private bool GetGrippedLastFrame(RGXR_Device device)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x11D39C4", Offset = "0x11D39C4", VA = "0x11D39C4")]
		private void SetGrippedLastFrame(RGXR_Device device, bool gripped)
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0x11D3A2C", Offset = "0x11D3A2C", VA = "0x11D3A2C")]
		private GrabState GrabStateThisFrame(RGXR_Device device)
		{
			return default(GrabState);
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x11D3B6C", Offset = "0x11D3B6C", VA = "0x11D3B6C")]
		private GrabbableData GrabHand(PlayerHandPhysics playerHandPhysics, GrabbableData currentGrabbable, GrabberData grabberData, GrabState grabStateHand, RGXR_Device device, Action onGrabDenied)
		{
			return null;
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x11D3C88", Offset = "0x11D3C88", VA = "0x11D3C88")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x11D3F08", Offset = "0x11D3F08", VA = "0x11D3F08")]
		public void SetLocalHandPose(int grabPoseParameter, int grabPoseHash, bool isLeft)
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x11D4028", Offset = "0x11D4028", VA = "0x11D4028")]
		public void LateTick()
		{
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0x11D42EC", Offset = "0x11D42EC", VA = "0x11D42EC")]
		public void CalculateThrowForce(ref Vector3 force, ref Vector3 angularForce, RGXR_Device playerInputDevice)
		{
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x11D4370", Offset = "0x11D4370", VA = "0x11D4370")]
		public void DropHeldGrabbable(GrabbableData grabbable)
		{
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x11D4430", Offset = "0x11D4430", VA = "0x11D4430")]
		private void HandConnected(Transform handTransform)
		{
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x11D445C", Offset = "0x11D445C", VA = "0x11D445C")]
		private void HandDisconnected(Transform handTransform)
		{
		}
	}
	[Token(Token = "0x20002C5")]
	public class BlockManager
	{
		[Token(Token = "0x20002C6")]
		public delegate void OnPlayerBlockedUpdateHandler(Player player, bool blocked);

		[StructLayout(3)]
		[Token(Token = "0x20002C7")]
		[CompilerGenerated]
		private struct <LoadBlockedPlayersAsync>d__24 : IAsyncStateMachine
		{
			[Token(Token = "0x4000C44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000C45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4000C46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public BlockManager <>4__this;

			[Token(Token = "0x4000C47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public CancellationToken cancellationToken;

			[Token(Token = "0x4000C48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool <downloadSuccessful>5__2;

			[Token(Token = "0x4000C49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<string> <savedBlockedPlayers>5__3;

			[Token(Token = "0x4000C4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private TaskAwaiter<List<string>> <>u__1;

			[Token(Token = "0x6000C9C")]
			[Address(RVA = "0x11D6AFC", Offset = "0x11D6AFC", VA = "0x11D6AFC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000C9D")]
			[Address(RVA = "0x11D71A0", Offset = "0x11D71A0", VA = "0x11D71A0", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20002C8")]
		[CompilerGenerated]
		private struct <SaveBlockToBackend>d__25 : IAsyncStateMachine
		{
			[Token(Token = "0x4000C4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000C4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4000C4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool blocked;

			[Token(Token = "0x4000C4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public BlockManager <>4__this;

			[Token(Token = "0x4000C4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string target;

			[Token(Token = "0x4000C50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private TaskAwaiter <>u__1;

			[Token(Token = "0x6000C9E")]
			[Address(RVA = "0x11D71AC", Offset = "0x11D71AC", VA = "0x11D71AC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000C9F")]
			[Address(RVA = "0x11D751C", Offset = "0x11D751C", VA = "0x11D751C", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BlockManagerData data;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AvatarHandler avatarHandler;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MuteManager muteManager;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BowserTracking tracking;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UserBlockingService blockingService;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<int, AvatarData> activeRemotePlayers;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<string> blockedPlayers;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<string> blockedBy;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int localActorNumber;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string localPlayerIdentifier;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private CancellationTokenSource cancellationTokenSource;

		[Token(Token = "0x170000A4")]
		public bool HasLoadedBlockedList
		{
			[Token(Token = "0x6000C88")]
			[Address(RVA = "0x11D575C", Offset = "0x11D575C", VA = "0x11D575C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C89")]
			[Address(RVA = "0x11D5764", Offset = "0x11D5764", VA = "0x11D5764")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1400000E")]
		public event OnPlayerBlockedUpdateHandler OnPlayerBlockedUpdate
		{
			[Token(Token = "0x6000C86")]
			[Address(RVA = "0x11D5624", Offset = "0x11D5624", VA = "0x11D5624")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C87")]
			[Address(RVA = "0x11D56C0", Offset = "0x11D56C0", VA = "0x11D56C0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x11D5770", Offset = "0x11D5770", VA = "0x11D5770")]
		public BlockManager(BlockManagerData data, AvatarHandler avatarHandler, MuteManager muteManager, BowserTracking tracking)
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x11D5CD8", Offset = "0x11D5CD8", VA = "0x11D5CD8")]
		private void OnAvatarRemoved(AvatarData avatar)
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x11D5DF8", Offset = "0x11D5DF8", VA = "0x11D5DF8")]
		private void OnAvatarReady(AvatarData avatar)
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x11D5BDC", Offset = "0x11D5BDC", VA = "0x11D5BDC")]
		private void AddRemoteAvatar(AvatarData avatar)
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x11D5FB8", Offset = "0x11D5FB8", VA = "0x11D5FB8")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x11D5B3C", Offset = "0x11D5B3C", VA = "0x11D5B3C")]
		[AsyncStateMachine(typeof(<LoadBlockedPlayersAsync>d__24))]
		private void LoadBlockedPlayersAsync(CancellationToken cancellationToken)
		{
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x11D60CC", Offset = "0x11D60CC", VA = "0x11D60CC")]
		[AsyncStateMachine(typeof(<SaveBlockToBackend>d__25))]
		private void SaveBlockToBackend(string target, bool blocked)
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x11D6174", Offset = "0x11D6174", VA = "0x11D6174")]
		public bool HasBlockedPlayer(Player player)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0x11D61D8", Offset = "0x11D61D8", VA = "0x11D61D8")]
		public void BlockPlayer(Player player)
		{
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x11D6350", Offset = "0x11D6350", VA = "0x11D6350")]
		public void UnblockPlayer(Player player)
		{
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x11D5DFC", Offset = "0x11D5DFC", VA = "0x11D5DFC")]
		private void EnforceBlock(AvatarData avatar, int creatorActorNumber)
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x11D6454", Offset = "0x11D6454", VA = "0x11D6454")]
		private void RevertBlock(AvatarData avatar, int creatorActorNumber)
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x11D66D4", Offset = "0x11D66D4", VA = "0x11D66D4")]
		private void OnBlockedPlayerRPC(PhotonMessageInfo info, int blockedPlayer, bool isBlocked)
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x11D5AB4", Offset = "0x11D5AB4", VA = "0x11D5AB4")]
		private string GetIdentifier(Player player)
		{
			return null;
		}
	}
	[Token(Token = "0x20002C9")]
	public class BlockManagerData : MonoBehaviour
	{
		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PhotonView photonView;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public Action<PhotonMessageInfo, int, bool> OnBlockedRPC;

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x11D7528", Offset = "0x11D7528", VA = "0x11D7528")]
		[PunRPC]
		public void BowserBlockedPlayerRPC(int blockedPlayer, bool blocked, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x11D757C", Offset = "0x11D757C", VA = "0x11D757C")]
		public BlockManagerData()
		{
		}
	}
	[Token(Token = "0x20002CA")]
	public class MuteManager
	{
		[Token(Token = "0x20002CB")]
		private class playerMuteData
		{
			[Token(Token = "0x4000C5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool muted;

			[Token(Token = "0x4000C5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool mutedDueToBlock;

			[Token(Token = "0x4000C5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public AvatarData avatar;

			[Token(Token = "0x6000CAC")]
			[Address(RVA = "0x11D790C", Offset = "0x11D790C", VA = "0x11D790C")]
			public playerMuteData()
			{
			}
		}

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool isMutedSelf;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<int, playerMuteData> muteLookup;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AvatarHandler avatarHandler;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BowserTracking tracking;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Recorder localRecorder;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string muteSelfKey;

		[Token(Token = "0x4000C59")]
		private const string MUTESELF_PREFERENCE_PREFIX = "ozoMuteSelfPreference";

		[Token(Token = "0x4000C5A")]
		private const int UNMUTED_VALUE = 0;

		[Token(Token = "0x4000C5B")]
		private const int MUTE_VALUE = 1;

		[Token(Token = "0x170000A5")]
		public bool IsMutedSelf
		{
			[Token(Token = "0x6000CA2")]
			[Address(RVA = "0x11D7584", Offset = "0x11D7584", VA = "0x11D7584")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CA3")]
			[Address(RVA = "0x11D758C", Offset = "0x11D758C", VA = "0x11D758C")]
			set
			{
			}
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0x11D7630", Offset = "0x11D7630", VA = "0x11D7630")]
		public MuteManager(AvatarHandler avatarHandler, BowserTracking tracking)
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0x11D7914", Offset = "0x11D7914", VA = "0x11D7914")]
		private void OnAvatarReady(AvatarData avatar)
		{
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0x11D7B00", Offset = "0x11D7B00", VA = "0x11D7B00")]
		private void OnAvatarRemoved(AvatarData avatar)
		{
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0x11D7A9C", Offset = "0x11D7A9C", VA = "0x11D7A9C")]
		public bool IsRemotePlayerMuted(int actorId)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0x11D7BAC", Offset = "0x11D7BAC", VA = "0x11D7BAC")]
		public void SetRemotePlayerMuted(int actorId, bool muted)
		{
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0x11D6654", Offset = "0x11D6654", VA = "0x11D6654")]
		public void SetRemotePlayerMutedDueToBlock(int actorId, bool muted)
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x11D7C60", Offset = "0x11D7C60", VA = "0x11D7C60")]
		private void UpdateSpeaker(int actorId, playerMuteData playerMuteData)
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0x11D7CCC", Offset = "0x11D7CCC", VA = "0x11D7CCC")]
		public void Stop()
		{
		}
	}
	[Token(Token = "0x20002CC")]
	public class PlayerListMenuPage
	{
		[Token(Token = "0x20002CD")]
		private enum State
		{
			[Token(Token = "0x4000C72")]
			Hidden,
			[Token(Token = "0x4000C73")]
			PlayerList,
			[Token(Token = "0x4000C74")]
			BlockDialog
		}

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private State state;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PlayerListMenuPageData data;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MuteManager muteManager;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MultiplayerIntegrationManager multiplayerIntegrationManager;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BlockManager blockManager;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AvatarHandler avatarHandler;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BowserButtonHandler buttonHandler;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Locale locale;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<Player, PlayerEntryData> activePlayerEntries;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<PlayerEntryData> freeEntries;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3[] slotPositions;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int currentPage;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int pagesCount;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int localPlayerActorNumber;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Player blockDialogTarget;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool dialogWillBlock;

		[Token(Token = "0x4000C6F")]
		private const int NAME_CUTOFF_LENGTH = 16;

		[Token(Token = "0x4000C70")]
		private const int MAX_SLOTS_PER_PAGE = 8;

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0x11D7DD8", Offset = "0x11D7DD8", VA = "0x11D7DD8")]
		public PlayerListMenuPage(PlayerListMenuPageData data, AvatarHandler avatarHandler, BowserButtonHandler bowserButtonHandler, MuteManager muteManager, [Optional] MultiplayerIntegrationManager multiplayerIntegrationManager, [Optional] BowserRoomInfo roomInfo)
		{
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x11D8B5C", Offset = "0x11D8B5C", VA = "0x11D8B5C")]
		public void AddBlockingFeature(BlockManager blockManager)
		{
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x11D8BEC", Offset = "0x11D8BEC", VA = "0x11D8BEC")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x11D8D48", Offset = "0x11D8D48", VA = "0x11D8D48")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x11D8DBC", Offset = "0x11D8DBC", VA = "0x11D8DBC")]
		public void ShowPage()
		{
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x11D8DC4", Offset = "0x11D8DC4", VA = "0x11D8DC4")]
		public void HidePage()
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x11D891C", Offset = "0x11D891C", VA = "0x11D891C")]
		private void EnterState(State newState)
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x11D8DCC", Offset = "0x11D8DCC", VA = "0x11D8DCC")]
		private void SetPlayerListButtonsEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x11D8F74", Offset = "0x11D8F74", VA = "0x11D8F74")]
		private void OnAvatarReady(AvatarData avatar)
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x11D9464", Offset = "0x11D9464", VA = "0x11D9464")]
		private void OnAvatarRemoved(AvatarData avatar)
		{
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x11D80C4", Offset = "0x11D80C4", VA = "0x11D80C4")]
		private void SetupPlayerList()
		{
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x11D9724", Offset = "0x11D9724", VA = "0x11D9724")]
		private void OnPageDownPressed(PlayerAvatar playeravatar, RGXR_Device inputdevice)
		{
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x11D9734", Offset = "0x11D9734", VA = "0x11D9734")]
		private void OnPageUpPressed(PlayerAvatar playeravatar, RGXR_Device inputdevice)
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x11D9744", Offset = "0x11D9744", VA = "0x11D9744")]
		private void UpdatePaginationButtons()
		{
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x11D9608", Offset = "0x11D9608", VA = "0x11D9608")]
		private PlayerEntryData AssignEntry(Player player)
		{
			return null;
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0x11D90F4", Offset = "0x11D90F4", VA = "0x11D90F4")]
		private void RefreshPlayerListOrder()
		{
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0x11D8FE8", Offset = "0x11D8FE8", VA = "0x11D8FE8")]
		private void AddRemotePlayer(Player player)
		{
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x11D94D0", Offset = "0x11D94D0", VA = "0x11D94D0")]
		private void RemoveRemotePlayer(Player otherPlayer)
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x11D997C", Offset = "0x11D997C", VA = "0x11D997C")]
		private void OnMuteButtonPressed(PlayerEntryData playerEntry, BowserButtonData button)
		{
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x11D99F0", Offset = "0x11D99F0", VA = "0x11D99F0")]
		private void OnBlockPlayerPressed(PlayerEntryData playerEntry, BowserButtonData button)
		{
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x11D9A10", Offset = "0x11D9A10", VA = "0x11D9A10")]
		private void OnBlockDialogConfirmPressed(PlayerAvatar pressedBy, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x11D9A4C", Offset = "0x11D9A4C", VA = "0x11D9A4C")]
		private void OnBlockDialogCancelPressed(PlayerAvatar pressedBy, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x11D9A54", Offset = "0x11D9A54", VA = "0x11D9A54")]
		private void OnPlayerBlockedUpdate(Player player, bool blocked)
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x11D9AD0", Offset = "0x11D9AD0", VA = "0x11D9AD0")]
		private void OnMuteSelfPressed(BowserButtonData muteSelfButton)
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x11D96E8", Offset = "0x11D96E8", VA = "0x11D96E8")]
		private void RefreshMuteButton(PlayerEntryData playerEntry, bool muted)
		{
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x11D9908", Offset = "0x11D9908", VA = "0x11D9908")]
		private void RefreshBlockButton(PlayerEntryData playerEntry)
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x11D9B80", Offset = "0x11D9B80", VA = "0x11D9B80")]
		private void OnInviteButtonPressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}
	}
	[Token(Token = "0x20002D0")]
	public class PlayerListMenuPageData : MonoBehaviour
	{
		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Player List")]
		public TextMeshPro roomText;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerEntryData[] playerEntries;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject pageRoot;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BowserButtonData pageUp;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BowserButtonData pageDown;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshPro paginationText;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject paginationButtonsRoot;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Block Dialog")]
		public GameObject blockDialogParent;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TextMeshPro blockText;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TextMeshPro blockPlayerName;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BowserButtonData blockDialogConfirm;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public BowserButtonData blockDialogCancel;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Loading block list")]
		public GameObject loadingBlockListParent;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform loadingSymbol;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Invite Entry")]
		public GameObject inviteEntry;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public BowserButtonData inviteButton;

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x11D9C14", Offset = "0x11D9C14", VA = "0x11D9C14")]
		public PlayerListMenuPageData()
		{
		}
	}
	[Token(Token = "0x20002D1")]
	public class PlayerMenu
	{
		[Token(Token = "0x20002D2")]
		public delegate void OnMenuHiddenHandler();

		[Token(Token = "0x20002D3")]
		public delegate void OnMenuAppearHandler();

		[Token(Token = "0x20002D4")]
		private enum State
		{
			[Token(Token = "0x4000C97")]
			Hidden,
			[Token(Token = "0x4000C98")]
			PlayerList,
			[Token(Token = "0x4000C99")]
			StoryTracker
		}

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private State state;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PlayerMenuData data;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Teleport teleport;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BowserButtonHandler buttonHandler;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PlayerListMenuPage playerListMenuPage;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private StoryTrackerMenuPage storyTrackerMenuPage;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform wristAttachPoint;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private State latestPageDisplayed;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private readonly int ANIM_SHOWMENU;

		[Token(Token = "0x170000A6")]
		public bool IsVisible
		{
			[Token(Token = "0x6000CD2")]
			[Address(RVA = "0x11D9E8C", Offset = "0x11D9E8C", VA = "0x11D9E8C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1400000F")]
		public event OnMenuHiddenHandler OnMenuHidden
		{
			[Token(Token = "0x6000CCE")]
			[Address(RVA = "0x11D9C1C", Offset = "0x11D9C1C", VA = "0x11D9C1C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000CCF")]
			[Address(RVA = "0x11D9CB8", Offset = "0x11D9CB8", VA = "0x11D9CB8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000010")]
		public event OnMenuAppearHandler OnMenuAppear
		{
			[Token(Token = "0x6000CD0")]
			[Address(RVA = "0x11D9D54", Offset = "0x11D9D54", VA = "0x11D9D54")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000CD1")]
			[Address(RVA = "0x11D9DF0", Offset = "0x11D9DF0", VA = "0x11D9DF0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x11D9E9C", Offset = "0x11D9E9C", VA = "0x11D9E9C")]
		public PlayerMenu(PlayerMenuData menuPrefab, AvatarHandler avatarHandler, Teleport teleport, BowserButtonHandler bowserButtonHandler, MuteManager muteManager, StoryManager storyManager, [Optional] MultiplayerIntegrationManager multiplayerIntegrationManager, [Optional] BowserRoomInfo roomInfo)
		{
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x11DA638", Offset = "0x11DA638", VA = "0x11DA638")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x11DA698", Offset = "0x11DA698", VA = "0x11DA698")]
		public void AddBlockingFeature(BlockManager blockManager)
		{
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0x11DA6B0", Offset = "0x11DA6B0", VA = "0x11DA6B0")]
		public void SetupWristAttachment(Transform attachPoint)
		{
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0x11DA6B8", Offset = "0x11DA6B8", VA = "0x11DA6B8")]
		private void OnPlayerTeleported(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0x11DA6CC", Offset = "0x11DA6CC", VA = "0x11DA6CC")]
		public void ShowOnWrist()
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0x11DA7D4", Offset = "0x11DA7D4", VA = "0x11DA7D4")]
		public void Hide()
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x11DA810", Offset = "0x11DA810", VA = "0x11DA810")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x11DA904", Offset = "0x11DA904", VA = "0x11DA904")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x11DA430", Offset = "0x11DA430", VA = "0x11DA430")]
		private void EnterState(State newState)
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x11DAB68", Offset = "0x11DAB68", VA = "0x11DAB68")]
		private void OnPinButtonPressed()
		{
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0x11DAA38", Offset = "0x11DAA38", VA = "0x11DAA38")]
		private void TogglePinCloseButton(bool pin)
		{
		}
	}
	[Token(Token = "0x20002D5")]
	public class PlayerMenuData : MonoBehaviour
	{
		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Pages")]
		public PlayerListMenuPageData playerListData;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public StoryTrackerMenuPageData storyTrackerData;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Page Buttons")]
		public BowserButtonData playerListButton;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BowserButtonData storyTrackerButton;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Pin Button")]
		public BowserButtonData pinButton;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject pinIcon;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject pinDefault;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject pinPressed;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject closeIcon;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject closeDefault;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject closePressed;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Action onEnable;

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x11DAE3C", Offset = "0x11DAE3C", VA = "0x11DAE3C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x11DAE58", Offset = "0x11DAE58", VA = "0x11DAE58")]
		public PlayerMenuData()
		{
		}
	}
	[Token(Token = "0x20002D6")]
	public class StoryTrackerMenuPage
	{
		[Token(Token = "0x20002D7")]
		private enum State
		{
			[Token(Token = "0x4000CAE")]
			Hidden,
			[Token(Token = "0x4000CAF")]
			Loading,
			[Token(Token = "0x4000CB0")]
			TaskList
		}

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private State state;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private StoryTrackerMenuPageData data;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private StoryManager storyManager;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Locale locale;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private StringBuilder stringBuilder;

		[Token(Token = "0x4000CAC")]
		private const float LOADING_SYMBOL_ROTATION_SPEED = -250f;

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x11DA228", Offset = "0x11DA228", VA = "0x11DA228")]
		public StoryTrackerMenuPage(StoryTrackerMenuPageData data, StoryManager storyManager)
		{
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x11DAB34", Offset = "0x11DAB34", VA = "0x11DAB34")]
		public void ShowPage()
		{
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x11DAA30", Offset = "0x11DAA30", VA = "0x11DAA30")]
		public void HidePage()
		{
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x11DA854", Offset = "0x11DA854", VA = "0x11DA854")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x11DAE60", Offset = "0x11DAE60", VA = "0x11DAE60")]
		private void EnterState(State newState)
		{
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x11DAF70", Offset = "0x11DAF70", VA = "0x11DAF70")]
		private string GetCurrentTaskListText()
		{
			return null;
		}
	}
	[Token(Token = "0x20002D8")]
	public class StoryTrackerMenuPageData : MonoBehaviour
	{
		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject pageRoot;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshPro stageText;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshPro taskListText;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject loadingParent;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform loadingIcon;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color completedTaskColor;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color completeTagColor;

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x11DB344", Offset = "0x11DB344", VA = "0x11DB344")]
		public StoryTrackerMenuPageData()
		{
		}
	}
	[Token(Token = "0x20002D9")]
	public class ReturnOnReleaseData : MonoBehaviour
	{
		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 respawnPosition;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 respawnRotation;

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x11DB360", Offset = "0x11DB360", VA = "0x11DB360")]
		public ReturnOnReleaseData()
		{
		}
	}
	[Token(Token = "0x20002DA")]
	public class ReturnOnReleaseLogic
	{
		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ReturnOnReleaseData data;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rigidbody physicsBody;

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x11DB368", Offset = "0x11DB368", VA = "0x11DB368")]
		public ReturnOnReleaseLogic(ReturnOnReleaseData data, GrabbableData grabbable)
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x11DB548", Offset = "0x11DB548", VA = "0x11DB548")]
		private void OnRemoteGrabEnd()
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x11DB54C", Offset = "0x11DB54C", VA = "0x11DB54C")]
		private void OnGrabEnd(Vector3 throwForce)
		{
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x11DB4A8", Offset = "0x11DB4A8", VA = "0x11DB4A8")]
		private void Respawn()
		{
		}
	}
	[Token(Token = "0x20002DB")]
	public class RoomSign
	{
		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x11DB550", Offset = "0x11DB550", VA = "0x11DB550")]
		public RoomSign(RoomSignData data, int floor, BowserRoomInfo roomInfo)
		{
		}
	}
	[Token(Token = "0x20002DC")]
	public class SimpleTeleportTrigger
	{
		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SimpleTeleportTriggerData data;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Action Ontrigger;

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x11DB7D0", Offset = "0x11DB7D0", VA = "0x11DB7D0")]
		public SimpleTeleportTrigger(SimpleTeleportTriggerData data, Action Ontrigger)
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x11DB910", Offset = "0x11DB910", VA = "0x11DB910")]
		private void OnTeleportedToTrigger()
		{
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x11DB8E8", Offset = "0x11DB8E8", VA = "0x11DB8E8")]
		private void RemoveHighlight()
		{
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0x11DB958", Offset = "0x11DB958", VA = "0x11DB958")]
		private void AddHighlight()
		{
		}
	}
	[Token(Token = "0x20002DD")]
	public class SimpleTeleportTriggerData : MonoBehaviour, ITeleportTrigger
	{
		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action OnAddHighlight;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action OnRemoveHighlight;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action OnTeleportedToTrigger;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject highlightGameObject;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool remainHighlightedAfterTrigger;

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x11DB980", Offset = "0x11DB980", VA = "0x11DB980", Slot = "4")]
		public void AddHighlight()
		{
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x11DB99C", Offset = "0x11DB99C", VA = "0x11DB99C", Slot = "6")]
		public void TeleportedToTrigger(Vector3 newPosition)
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x11DB9B8", Offset = "0x11DB9B8", VA = "0x11DB9B8", Slot = "5")]
		public void RemoveHighlight()
		{
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x11DB9D4", Offset = "0x11DB9D4", VA = "0x11DB9D4")]
		public SimpleTeleportTriggerData()
		{
		}
	}
	[Token(Token = "0x20002DE")]
	public class PoliceCarController
	{
		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PoliceCarData data;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float repeatedTriggerTimeout;

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x11DB9DC", Offset = "0x11DB9DC", VA = "0x11DB9DC")]
		public PoliceCarController(PoliceCarData data)
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x11DBB84", Offset = "0x11DBB84", VA = "0x11DBB84")]
		public void Destroy()
		{
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x11DBC18", Offset = "0x11DBC18", VA = "0x11DBC18")]
		private void OnCheckoutTriggerEnter(Collider trigger, Collider other)
		{
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x11DBAE0", Offset = "0x11DBAE0", VA = "0x11DBAE0")]
		private void InitTrigger(PoliceCarData.PlayerPrefsTrigger trigger)
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x11DBB68", Offset = "0x11DBB68", VA = "0x11DBB68")]
		private void InitTrigger(PoliceCarData.RepeatedTrigger trigger)
		{
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0x11DBC9C", Offset = "0x11DBC9C", VA = "0x11DBC9C")]
		private void EvaluateTrigger(PoliceCarData.PlayerPrefsTrigger trigger)
		{
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0x11DBD38", Offset = "0x11DBD38", VA = "0x11DBD38")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x11DBB24", Offset = "0x11DBB24", VA = "0x11DBB24")]
		private void ResetRepeatedTrigger()
		{
		}
	}
	[Token(Token = "0x20002DF")]
	public class PoliceCarData : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002E0")]
		public class PlayerPrefsTrigger
		{
			[Token(Token = "0x4000CCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string playerPrefsKey;

			[Token(Token = "0x4000CCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string animationTriggerName;

			[Token(Token = "0x4000CCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AnimationCurve chance;

			[Token(Token = "0x4000CCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int defaultStartCount;

			[Token(Token = "0x4000CCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[HideInInspector]
			public int numStartsSinceLast;

			[Token(Token = "0x6000D0A")]
			[Address(RVA = "0x11DBF6C", Offset = "0x11DBF6C", VA = "0x11DBF6C")]
			public PlayerPrefsTrigger()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002E1")]
		public class RepeatedTrigger
		{
			[Token(Token = "0x4000CCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string animationTriggerName;

			[Token(Token = "0x4000CD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float weight;

			[Token(Token = "0x4000CD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[HideInInspector]
			public float currentWeight;

			[Token(Token = "0x6000D0B")]
			[Address(RVA = "0x11DBFD8", Offset = "0x11DBFD8", VA = "0x11DBFD8")]
			public RepeatedTrigger()
			{
			}
		}

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Stuff")]
		public Animator myAnimationController;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Check out")]
		public PlayerPrefsTrigger checkout;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ColliderProxy checkoutCollider;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Repeated animations")]
		public AnimationCurve repeatedTriggersDelay;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public RepeatedTrigger[] repeatedTriggers;

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0x11DBF38", Offset = "0x11DBF38", VA = "0x11DBF38")]
		public PoliceCarData()
		{
		}
	}
	[Token(Token = "0x20002E2")]
	public class SocialContractData : MonoBehaviour
	{
		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BowserPointerHandlerData pointerData;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject socialContractRoot;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BowserButtonData confirmButton;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BowserButtonData denyButton;

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x11DC030", Offset = "0x11DC030", VA = "0x11DC030")]
		public SocialContractData()
		{
		}
	}
	[Token(Token = "0x20002E3")]
	public class SocialContractManager
	{
		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SocialContractData data;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Teleport teleport;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Action exitBowser;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool canShow;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BowserPointerHandler laserPointer;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string socialContractAcceptedKey;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool isShowing;

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0x11DC038", Offset = "0x11DC038", VA = "0x11DC038")]
		public SocialContractManager(SocialContractData data, BowserButtonHandler buttonHandler, PlayerAvatar playerAvatar, Teleport teleport, Action exitBowser, bool canShow)
		{
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0x11DC284", Offset = "0x11DC284", VA = "0x11DC284")]
		public void Start()
		{
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x11DC3C0", Offset = "0x11DC3C0", VA = "0x11DC3C0")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0x11DC35C", Offset = "0x11DC35C", VA = "0x11DC35C")]
		private void ShowContract()
		{
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0x11DC230", Offset = "0x11DC230", VA = "0x11DC230")]
		private void HideContract()
		{
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0x11DC430", Offset = "0x11DC430", VA = "0x11DC430")]
		private void OnDenyButtonPressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0x11DC46C", Offset = "0x11DC46C", VA = "0x11DC46C")]
		private void OnConfirmButtonPressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0x11DC4C0", Offset = "0x11DC4C0", VA = "0x11DC4C0")]
		public void ClearSocialCodeAccepted()
		{
		}
	}
	[Token(Token = "0x20002E4")]
	public class Teleport
	{
		[Token(Token = "0x20002E5")]
		public delegate void OnPlayerTeleportedHandler(Vector3 targetPosition);

		[Token(Token = "0x20002E6")]
		public delegate void OnXRRigMovedHandler(Vector3 newPosition, Quaternion newRotation);

		[Token(Token = "0x20002E8")]
		[CompilerGenerated]
		private sealed class <InterpolateTo>d__38 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject obj;

			[Token(Token = "0x4000CF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 target;

			[Token(Token = "0x4000CF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Quaternion rotation;

			[Token(Token = "0x4000CF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Teleport <>4__this;

			[Token(Token = "0x4000CFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public bool allowTriggerTeleportation;

			[Token(Token = "0x4000CFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 <startPosition>5__2;

			[Token(Token = "0x4000CFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Quaternion <startRotation>5__3;

			[Token(Token = "0x4000CFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private float <totalTime>5__4;

			[Token(Token = "0x4000CFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private float <t>5__5;

			[Token(Token = "0x170000A8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D34")]
				[Address(RVA = "0x11DE89C", Offset = "0x11DE89C", VA = "0x11DE89C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000A9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D36")]
				[Address(RVA = "0x11DE8E4", Offset = "0x11DE8E4", VA = "0x11DE8E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D31")]
			[Address(RVA = "0x11DE314", Offset = "0x11DE314", VA = "0x11DE314")]
			[DebuggerHidden]
			public <InterpolateTo>d__38(int <>1__state)
			{
			}

			[Token(Token = "0x6000D32")]
			[Address(RVA = "0x11DE6AC", Offset = "0x11DE6AC", VA = "0x11DE6AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D33")]
			[Address(RVA = "0x11DE6B0", Offset = "0x11DE6B0", VA = "0x11DE6B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D35")]
			[Address(RVA = "0x11DE8A4", Offset = "0x11DE8A4", VA = "0x11DE8A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject baseObject;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject[] arcObjects;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject xrRig;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject cam;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject arrow;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine shiftCoroutine;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Fade fade;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3? teleportTarget;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private TeleportData teleportData;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int activeControllerIndex;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool teleportationEnabled;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Collider[] hitColliders;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ITeleportTrigger highlightedTeleportTrigger;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private LayerMask beamLayerMask;

		[Token(Token = "0x4000CED")]
		private const int NO_CONTROLLER_ACTIVE = -1;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private RGXR_Device[] controllers;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool[] waitUntilAdjustCentered;

		[Token(Token = "0x170000A7")]
		public bool IsEnabled
		{
			[Token(Token = "0x6000D19")]
			[Address(RVA = "0x11DC628", Offset = "0x11DC628", VA = "0x11DC628")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000011")]
		public event OnPlayerTeleportedHandler OnPlayerTeleported
		{
			[Token(Token = "0x6000D15")]
			[Address(RVA = "0x11DA394", Offset = "0x11DA394", VA = "0x11DA394")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D16")]
			[Address(RVA = "0x11DA994", Offset = "0x11DA994", VA = "0x11DA994")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000012")]
		public event OnXRRigMovedHandler OnXRRigMoved
		{
			[Token(Token = "0x6000D17")]
			[Address(RVA = "0x11DC4F0", Offset = "0x11DC4F0", VA = "0x11DC4F0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D18")]
			[Address(RVA = "0x11DC58C", Offset = "0x11DC58C", VA = "0x11DC58C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x11DC630", Offset = "0x11DC630", VA = "0x11DC630")]
		public Teleport(TeleportData teleportData, Fade fade)
		{
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x11DC410", Offset = "0x11DC410", VA = "0x11DC410")]
		public void SetTeleportationEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0x11DCA34", Offset = "0x11DCA34", VA = "0x11DCA34")]
		private Quaternion GetHMDPlaneRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0x11DCB08", Offset = "0x11DCB08", VA = "0x11DCB08")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0x11DCC30", Offset = "0x11DCC30", VA = "0x11DCC30")]
		private void ProcessTeleport(int controllerIndex, Vector2 stick, Vector3 teleportArcOrigo, Quaternion teleportArcRotation)
		{
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0x11DDD20", Offset = "0x11DDD20", VA = "0x11DDD20")]
		private void HighlightTeleportationTriggers(Vector3 targetLocation)
		{
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0x11DDFA0", Offset = "0x11DDFA0", VA = "0x11DDFA0")]
		private void UpdateHighlightedTrigger(GameObject target)
		{
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x11DDAF4", Offset = "0x11DDAF4", VA = "0x11DDAF4")]
		public void TeleportCameraTo(Vector3 target, Quaternion rotation, bool allowTeleportTrigger = false, bool instant = false)
		{
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x11DD864", Offset = "0x11DD864", VA = "0x11DD864")]
		private void TeleportTo(Vector3 target, Quaternion rotation, bool allowTeleportTrigger = false, bool instant = false)
		{
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x11DE208", Offset = "0x11DE208", VA = "0x11DE208")]
		private void TriggerHighlightedTeleportTrigger(Vector3 target)
		{
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0x11DD774", Offset = "0x11DD774", VA = "0x11DD774")]
		public Vector3? AdjustPosition(Vector3 pos, float maxAdjustDistance)
		{
			return null;
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0x11DE138", Offset = "0x11DE138", VA = "0x11DE138")]
		[IteratorStateMachine(typeof(<InterpolateTo>d__38))]
		private IEnumerator InterpolateTo(GameObject obj, Vector3 target, Quaternion rotation, bool allowTriggerTeleportation = false)
		{
			return null;
		}
	}
	[Token(Token = "0x20002E9")]
	public class TeleportData : MonoBehaviour
	{
		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject xrRig;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject mainCamera;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject arrowPrefab;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material beamMaterial;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool shiftTelportation;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool restrictedToNavMesh;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("How much is the nav mesh position allowed to deviate from the hit point we got based on colliders?")]
		public float maxNavMeshAdjustment;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Teleport Trigger Settings")]
		public float teleportTriggerRadius;

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x11DE8EC", Offset = "0x11DE8EC", VA = "0x11DE8EC")]
		public TeleportData()
		{
		}
	}
	[Token(Token = "0x20002EA")]
	public class CalculateTokenSpawnPositions
	{
		[StructLayout(3)]
		[Token(Token = "0x20002EB")]
		[CompilerGenerated]
		private struct <GetPositionsInArea>d__10 : IAsyncStateMachine
		{
			[Token(Token = "0x4000D10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000D11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<List<int>> <>t__builder;

			[Token(Token = "0x4000D12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CalculateTokenSpawnPositions <>4__this;

			[Token(Token = "0x4000D13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool inBackAlley;

			[Token(Token = "0x4000D14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TaskAwaiter<int> <>u__1;

			[Token(Token = "0x6000D3D")]
			[Address(RVA = "0x11DEF5C", Offset = "0x11DEF5C", VA = "0x11DEF5C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000D3E")]
			[Address(RVA = "0x11DF838", Offset = "0x11DF838", VA = "0x11DF838", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TokenService tokenService;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int tokensAvailableToSpawn;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int prevTokensAvailable;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int tokensLeftToSpawn;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int rndSpawnPoint;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<int> backAlleySpawnPoints;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<int> scrapperSpawnPoints;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstAreaComplete;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool logEnabled;

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x11DE908", Offset = "0x11DE908", VA = "0x11DE908")]
		public CalculateTokenSpawnPositions(TokenService tokenService)
		{
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x11DE9C0", Offset = "0x11DE9C0", VA = "0x11DE9C0")]
		[AsyncStateMachine(typeof(<GetPositionsInArea>d__10))]
		public Task<List<int>> GetPositionsInArea(bool inBackAlley)
		{
			return null;
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0x11DEABC", Offset = "0x11DEABC", VA = "0x11DEABC")]
		private void SpawnTokens(System.Random rnd, bool inBackAlley)
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x11DED10", Offset = "0x11DED10", VA = "0x11DED10")]
		private void SetRandomSpawnPoint(System.Random rnd, int numberOfSpawnPoints, List<int> spawnPoints)
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x11DECA0", Offset = "0x11DECA0", VA = "0x11DECA0")]
		private void Log(string message)
		{
		}
	}
	[Token(Token = "0x20002EC")]
	public class TokenData : MonoBehaviour, IBowserPhotonPrefabPoolListener
	{
		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GrabbableData grabbableData;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DestroyIfDroppedData destroyIfDroppedData;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string onDestroyParticleName;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action<TokenData, Collider> onTriggerEnter;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action<TokenData> OnInstantiate;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action<TokenData> OnDestroy;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Action<TokenData, bool> OnNetworkDestroyTokenRequest;

		[NonSerialized]
		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool areaSpawnedToken;

		[NonSerialized]
		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool isTutorialToken;

		[NonSerialized]
		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 mySpawnPosition;

		[NonSerialized]
		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int mySpawnIndex;

		[NonSerialized]
		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public RGXR_Device localInputDevice;

		[Token(Token = "0x170000AA")]
		public float LifeTimePostRelease
		{
			[Token(Token = "0x6000D3F")]
			[Address(RVA = "0x11DF890", Offset = "0x11DF890", VA = "0x11DF890")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D40")]
			[Address(RVA = "0x11DF898", Offset = "0x11DF898", VA = "0x11DF898")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0x11DF8A0", Offset = "0x11DF8A0", VA = "0x11DF8A0")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0x11DF8C8", Offset = "0x11DF8C8", VA = "0x11DF8C8", Slot = "4")]
		public void OnPoolInstantiate()
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x11DF8E8", Offset = "0x11DF8E8", VA = "0x11DF8E8", Slot = "5")]
		public void OnPoolDestroy()
		{
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x11DF908", Offset = "0x11DF908", VA = "0x11DF908")]
		[PunRPC]
		private void BowserDestroyTokenRequestRPC(bool playDestroyEffect)
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x11DF930", Offset = "0x11DF930", VA = "0x11DF930")]
		public TokenData()
		{
		}
	}
	[Token(Token = "0x20002ED")]
	public class TokenHandler
	{
		[StructLayout(3)]
		[Token(Token = "0x20002EF")]
		[CompilerGenerated]
		private struct <SetupAreaTokens>d__16 : IAsyncStateMachine
		{
			[Token(Token = "0x4000D31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4000D32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4000D33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Entrypoint.Location location;

			[Token(Token = "0x4000D34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public TokenHandler <>4__this;

			[Token(Token = "0x4000D35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public TutorialHandler tutorialHandler;

			[Token(Token = "0x4000D36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private TaskAwaiter<List<int>> <>u__1;

			[Token(Token = "0x6000D59")]
			[Address(RVA = "0x11E0D7C", Offset = "0x11E0D7C", VA = "0x11E0D7C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000D5A")]
			[Address(RVA = "0x11E1238", Offset = "0x11E1238", VA = "0x11E1238", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TokenSpawner tokenSpawner;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ItemSpawnerData tokenSpawnerData;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<TokenData> spawnerPlayerGeneratedTokens;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TokenService tokenService;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WristMenuData tokenWristMenuData;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GrabbableHandler grabbableHandler;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BowserPhotonPrefabPool prefabPool;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CalculateTokenSpawnPositions calculateTokenSpawnPositions;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private TokenSlotHandler tokenSlotHandler;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> tokenSpawnPoints;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BowserParticlePool particlePool;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private TokenData[] tokensInArea;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool includeAreaTokens;

		[Token(Token = "0x4000D2F")]
		private const float DEPOSIT_TOKEN_RANGE = 0.075f;

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0x11DF938", Offset = "0x11DF938", VA = "0x11DF938")]
		public TokenHandler(TokenSpawner tokenSpawner, ItemSpawnerData tokenSpawnerData, TokenService tokenService, WristMenuData tokenWristMenuData, GrabbableHandler grabbableHandler, BowserPhotonPrefabPool prefabPool, BowserParticlePool particlePool)
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0x11DFDD4", Offset = "0x11DFDD4", VA = "0x11DFDD4")]
		public void SetupTokensSpawnedInArea(Entrypoint.Location location, CalculateTokenSpawnPositions calculateTokenSpawnPositions, TokenData[] tokensInArea, [Optional] TutorialHandler tutorialHandler)
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0x11DFDEC", Offset = "0x11DFDEC", VA = "0x11DFDEC")]
		[AsyncStateMachine(typeof(<SetupAreaTokens>d__16))]
		private void SetupAreaTokens(Entrypoint.Location location, [Optional] TutorialHandler tutorialHandler)
		{
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0x11DFE94", Offset = "0x11DFE94", VA = "0x11DFE94")]
		private void RegisterTokensInArea(TokenData[] tokensInArea)
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0x11E00C4", Offset = "0x11E00C4", VA = "0x11E00C4")]
		public void RegisterTokenSlotHandler(TokenSlotHandler tokenSlotHandler)
		{
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0x11E00CC", Offset = "0x11E00CC", VA = "0x11E00CC")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0x11E00E8", Offset = "0x11E00E8", VA = "0x11E00E8")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0x11E01B8", Offset = "0x11E01B8", VA = "0x11E01B8")]
		private void IsTokenReleased(TokenData token)
		{
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0x11DFB38", Offset = "0x11DFB38", VA = "0x11DFB38")]
		private void RegisterTokenInstance(TokenData token)
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0x11E0240", Offset = "0x11E0240", VA = "0x11E0240")]
		private void OnTokenInstantiated(TokenData token)
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0x11E0268", Offset = "0x11E0268", VA = "0x11E0268")]
		private void OnGrabBegin(TokenData token, PlayerAvatar owner, RGXR_Device playerInputDevice)
		{
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0x11E0280", Offset = "0x11E0280", VA = "0x11E0280")]
		private void OnRemoteGrabBegin(TokenData token)
		{
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0x11E0298", Offset = "0x11E0298", VA = "0x11E0298")]
		private void OnGrabEnd(TokenData token)
		{
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0x11E03C8", Offset = "0x11E03C8", VA = "0x11E03C8")]
		private void AddTokenToWrist(TokenData token)
		{
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0x11E08F0", Offset = "0x11E08F0", VA = "0x11E08F0")]
		private void OnTriggerEnter(TokenData token, Collider collider)
		{
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0x11E0610", Offset = "0x11E0610", VA = "0x11E0610")]
		private void DestroyToken(TokenData token, bool playDestroyEffect = false)
		{
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0x11E0A78", Offset = "0x11E0A78", VA = "0x11E0A78")]
		private void OnNetworkDestroyTokenRequest(TokenData token, bool playDestroyEffect)
		{
		}
	}
	[Token(Token = "0x20002F2")]
	public class TokenSpawner
	{
		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Action<TokenData> OnTokenInstanceAddedToPool;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ItemSpawnerData tokenSpawnerData;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BowserPhotonPrefabPool prefabPool;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WristMenuData tokensWristMenuData;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BowserParticlePool particlePool;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TokenService tokenService;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string tokenPrefabName;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<TokenData> sortedByLifeTime;

		[Token(Token = "0x170000AB")]
		public List<TokenData> PlayerGeneratedTokens
		{
			[Token(Token = "0x6000D62")]
			[Address(RVA = "0x11E14F4", Offset = "0x11E14F4", VA = "0x11E14F4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D63")]
			[Address(RVA = "0x11E14FC", Offset = "0x11E14FC", VA = "0x11E14FC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0x11E1504", Offset = "0x11E1504", VA = "0x11E1504")]
		public TokenSpawner(ItemSpawnerData tokenSpawnerData, BowserPhotonPrefabPool prefabPool, WristMenuData tokensWristMenuData, HighlightHandler highlightHandler, TokenService tokenService, BowserParticlePool particlePool)
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x11E16F4", Offset = "0x11E16F4", VA = "0x11E16F4")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x11E1718", Offset = "0x11E1718", VA = "0x11E1718")]
		private void OnNewTokenInstanceInPool(BowserPhotonPrefabPoolEntry instance)
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x11E1834", Offset = "0x11E1834", VA = "0x11E1834")]
		public GrabbableData GrabToken(PlayerAvatar playerAvatar)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F4")]
	public class CollisionExtractor : MonoBehaviour
	{
		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject root;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject targetPrefab;

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0x11E21C8", Offset = "0x11E21C8", VA = "0x11E21C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0x11E2238", Offset = "0x11E2238", VA = "0x11E2238")]
		public CollisionExtractor()
		{
		}
	}
	[Token(Token = "0x20002F5")]
	public class DartBoard : IPunObservable
	{
		[Token(Token = "0x20002F6")]
		public delegate void OnDartScoreHandler(int score);

		[Token(Token = "0x20002F7")]
		public class playerDartScore
		{
			[Token(Token = "0x4000D55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string playerName;

			[Token(Token = "0x4000D56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int dartCount;

			[Token(Token = "0x4000D57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int Score;

			[Token(Token = "0x6000D7D")]
			[Address(RVA = "0x11E3000", Offset = "0x11E3000", VA = "0x11E3000")]
			public playerDartScore()
			{
			}
		}

		[Token(Token = "0x20002F9")]
		[CompilerGenerated]
		private sealed class <HidePopupDelayed>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DartBoard <>4__this;

			[Token(Token = "0x170000AC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D83")]
				[Address(RVA = "0x11E3C4C", Offset = "0x11E3C4C", VA = "0x11E3C4C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000AD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D85")]
				[Address(RVA = "0x11E3C94", Offset = "0x11E3C94", VA = "0x11E3C94", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D80")]
			[Address(RVA = "0x11E3360", Offset = "0x11E3360", VA = "0x11E3360")]
			[DebuggerHidden]
			public <HidePopupDelayed>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000D81")]
			[Address(RVA = "0x11E3BC8", Offset = "0x11E3BC8", VA = "0x11E3BC8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D82")]
			[Address(RVA = "0x11E3BCC", Offset = "0x11E3BCC", VA = "0x11E3BCC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D84")]
			[Address(RVA = "0x11E3C54", Offset = "0x11E3C54", VA = "0x11E3C54", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DartBoardData data;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BowserTracking tracking;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DartHandler dartHandler;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BowserParticlePool particlePool;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private StringBuilder playerListBuilder;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private StringBuilder dartCountBuilder;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private StringBuilder scoreCountBuilder;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string localPlayerName;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private WaitForSeconds popupHideDelay;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Coroutine popupRoutine;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MaterialPropertyBlock materialPropertyBlock;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<playerDartScore> playerScores;

		[Token(Token = "0x14000013")]
		public event OnDartScoreHandler onDartScore
		{
			[Token(Token = "0x6000D6E")]
			[Address(RVA = "0x11E2240", Offset = "0x11E2240", VA = "0x11E2240")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D6F")]
			[Address(RVA = "0x11E22DC", Offset = "0x11E22DC", VA = "0x11E22DC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x11E2378", Offset = "0x11E2378", VA = "0x11E2378")]
		public DartBoard(DartBoardData data, BowserTracking tracking, DartHandler dartHandler, BowserButtonHandler buttonHandler, BowserParticlePool particlePool)
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x11E2A98", Offset = "0x11E2A98", VA = "0x11E2A98")]
		public void OnDartHit(Vector3 hitPosition)
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x11E2D38", Offset = "0x11E2D38", VA = "0x11E2D38")]
		private void OnDartHitRPC(Vector3 hitPosition, string playerName, int scoreRingIndex)
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x11E3008", Offset = "0x11E3008", VA = "0x11E3008")]
		private void ShowScorePopup(Vector3 hitPosition, int scoreRingIndex)
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x11E32F8", Offset = "0x11E32F8", VA = "0x11E32F8")]
		[IteratorStateMachine(typeof(<HidePopupDelayed>d__21))]
		private IEnumerator HidePopupDelayed()
		{
			return null;
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0x11E2770", Offset = "0x11E2770", VA = "0x11E2770")]
		private void RefreshScoreBoard()
		{
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0x11E3388", Offset = "0x11E3388", VA = "0x11E3388")]
		private void OnResetButtonPressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0x11E3484", Offset = "0x11E3484", VA = "0x11E3484")]
		private void OnResetDartsRPC()
		{
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0x11E364C", Offset = "0x11E364C", VA = "0x11E364C", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}
	}
	[Token(Token = "0x20002FB")]
	public class DartBoardData : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002FC")]
		public struct ScoreRing
		{
			[Token(Token = "0x4000D6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float radius;

			[Token(Token = "0x4000D70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int scoreValue;

			[Token(Token = "0x4000D71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Texture scorePopupTexture;

			[Token(Token = "0x4000D72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Color color;

			[Token(Token = "0x4000D73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float scale;

			[Token(Token = "0x4000D74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public HitSoundEffect hitSound;
		}

		[Token(Token = "0x20002FD")]
		public enum HitSoundEffect
		{
			[Token(Token = "0x4000D76")]
			Low,
			[Token(Token = "0x4000D77")]
			Medium,
			[Token(Token = "0x4000D78")]
			High
		}

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BowserButtonData resetButtonData;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform scoreCenterPoint;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PhotonView photonView;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PhotonObservableProxy photonObservableProxy;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Score Popup")]
		public GameObject scorePopupParent;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float popupDisableDelay;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ParticleSystemRenderer particleSystemRenderer;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Score Board")]
		public int maxPlayersToDisplay;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TextMeshPro playerList;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TextMeshPro dartCountList;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TextMeshPro scoreList;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Score Rings should be ordered from the inner circle to the outer one")]
		[Header("Score Settings")]
		public ScoreRing[] scoreRings;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public DartBoard dartBoard;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Action<Vector3, string, int> dartHitRPC;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Action resetDartsRPC;

		[NonSerialized]
		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string dartHitEffectName;

		[NonSerialized]
		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Vector3 dartHitEffectOffset;

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x11E3D2C", Offset = "0x11E3D2C", VA = "0x11E3D2C")]
		[PunRPC]
		public void BowserDartHitBoardRPC(Vector3 hitPosition, string playerName, int scoreRingIndex)
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x11E3D48", Offset = "0x11E3D48", VA = "0x11E3D48")]
		[PunRPC]
		public void BowserResetDartsRPC()
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x11E3D64", Offset = "0x11E3D64", VA = "0x11E3D64")]
		public DartBoardData()
		{
		}
	}
	[Token(Token = "0x20002FE")]
	public class DartData : MonoBehaviour, IBowserPhotonPrefabPoolListener
	{
		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public GrabbableData grabbableData;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DestroyIfDroppedData destroyIfDroppedData;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform tip;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform centerOfMass;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MeshRenderer dartRenderer;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PhotonObservableProxy photonObservableProxy;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TrailRenderer trailRenderer;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("VFX Settings")]
		public float throwTrailDuration;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string onDestroyParticleName;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Collision Settings")]
		public float rayCastLength;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float maxTipContactPointAngle;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Audio Settings")]
		public float weakDartBoardHit;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float mediumDartBoardHit;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float hardDartBoardHit;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float throwAudioMinMagnitude;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool stuck;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Coroutine trailRoutine;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Header("Debug")]
		public bool debugCollision;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Action<DartData, Collision> onCollisionEnter;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Action<DartData> OnBowserDartThrownEffect;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Action<DartData> OnBowserDestroyDartRequest;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Action<DartData> OnInstantiate;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Action<DartData> OnDestroy;

		[Token(Token = "0x170000AE")]
		public float LifeTimePostThrow
		{
			[Token(Token = "0x6000D8C")]
			[Address(RVA = "0x11E3DD0", Offset = "0x11E3DD0", VA = "0x11E3DD0")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D8D")]
			[Address(RVA = "0x11E3DD8", Offset = "0x11E3DD8", VA = "0x11E3DD8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000AF")]
		public Color Color
		{
			[Token(Token = "0x6000D8E")]
			[Address(RVA = "0x11E3DE0", Offset = "0x11E3DE0", VA = "0x11E3DE0")]
			[CompilerGenerated]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000D8F")]
			[Address(RVA = "0x11E3DEC", Offset = "0x11E3DEC", VA = "0x11E3DEC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0x11E3DF8", Offset = "0x11E3DF8", VA = "0x11E3DF8")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x11E3E20", Offset = "0x11E3E20", VA = "0x11E3E20")]
		[PunRPC]
		private void BowserDartThrownEffectRPC(PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0x11E3E40", Offset = "0x11E3E40", VA = "0x11E3E40")]
		[PunRPC]
		private void BowserDestroyDartRequestRPC()
		{
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0x11E3E60", Offset = "0x11E3E60", VA = "0x11E3E60", Slot = "4")]
		public void OnPoolInstantiate()
		{
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0x11E3E80", Offset = "0x11E3E80", VA = "0x11E3E80", Slot = "5")]
		public void OnPoolDestroy()
		{
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0x11E3EA0", Offset = "0x11E3EA0", VA = "0x11E3EA0")]
		public DartData()
		{
		}
	}
	[Token(Token = "0x20002FF")]
	public class DartHandler : IBowserPunObservable
	{
		[Token(Token = "0x2000301")]
		[CompilerGenerated]
		private sealed class <ShowThrowTrailRoutine>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DartData dart;

			[Token(Token = "0x4000DA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public DartHandler <>4__this;

			[Token(Token = "0x170000B0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DB2")]
				[Address(RVA = "0x11E5AE0", Offset = "0x11E5AE0", VA = "0x11E5AE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DB4")]
				[Address(RVA = "0x11E5B28", Offset = "0x11E5B28", VA = "0x11E5B28", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DAF")]
			[Address(RVA = "0x11E553C", Offset = "0x11E553C", VA = "0x11E553C")]
			[DebuggerHidden]
			public <ShowThrowTrailRoutine>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x6000DB0")]
			[Address(RVA = "0x11E5A48", Offset = "0x11E5A48", VA = "0x11E5A48", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DB1")]
			[Address(RVA = "0x11E5A4C", Offset = "0x11E5A4C", VA = "0x11E5A4C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DB3")]
			[Address(RVA = "0x11E5AE8", Offset = "0x11E5AE8", VA = "0x11E5AE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DartSpawner dartSpawner;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<DartData> allDartInstances;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RaycastHit[] raycastHits;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BowserParticlePool particlePool;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AvatarHandler avatarHandler;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GrabbableHandler grabbableHandler;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private WaitForSeconds trailDuration;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MaterialPropertyBlock materialPropertyBlock;

		[Token(Token = "0x4000D9A")]
		private const string DART_BOARD_COLLIDER_NAME = "DartBoardCollider";

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly int stuckColliderLayer;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private readonly int defaultColliderLayer;

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0x11E3F10", Offset = "0x11E3F10", VA = "0x11E3F10")]
		public DartHandler(DartSpawner dartSpawner, BowserParticlePool particlePool, AvatarHandler avatarHandler, GrabbableHandler grabbableHandler)
		{
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0x11E446C", Offset = "0x11E446C", VA = "0x11E446C")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x11E4108", Offset = "0x11E4108", VA = "0x11E4108")]
		private void RegisterDartInstance(DartData dart)
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x11E4490", Offset = "0x11E4490", VA = "0x11E4490")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x11E457C", Offset = "0x11E457C", VA = "0x11E457C")]
		private void OnGrabBegin(DartData dart, PlayerAvatar owner, RGXR_Device playerInputDevice)
		{
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x11E4718", Offset = "0x11E4718", VA = "0x11E4718")]
		private void OnGrabEnd(DartData dart, Vector3 throwForce)
		{
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x11E487C", Offset = "0x11E487C", VA = "0x11E487C")]
		private void OnRemoteGrabBegin(DartData dart)
		{
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x11E48BC", Offset = "0x11E48BC", VA = "0x11E48BC")]
		private void OnRemoteGrabEnd(DartData dart)
		{
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x11E48E8", Offset = "0x11E48E8", VA = "0x11E48E8")]
		private void OnCollisionEnter(DartData dart, Collision collision)
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x11E5318", Offset = "0x11E5318", VA = "0x11E5318")]
		private void OnHitDartBoard(DartData data, DartBoardData dartBoardData, float relativeForceMagnitude, Vector3 hitPoint, Vector3 tipPosition)
		{
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x11E5430", Offset = "0x11E5430", VA = "0x11E5430")]
		private void OnBowserDartThrownEffect(DartData dart)
		{
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x11E5470", Offset = "0x11E5470", VA = "0x11E5470")]
		private void ShowThrowTrail(DartData dart)
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0x11E54C8", Offset = "0x11E54C8", VA = "0x11E54C8")]
		[IteratorStateMachine(typeof(<ShowThrowTrailRoutine>d__23))]
		private IEnumerator ShowThrowTrailRoutine(DartData dart)
		{
			return null;
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x11E465C", Offset = "0x11E465C", VA = "0x11E465C")]
		private void RefreshDartColor(DartData dart)
		{
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0x11E5564", Offset = "0x11E5564", VA = "0x11E5564")]
		private void OnPoolDestroy(DartData dart)
		{
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0x11E5618", Offset = "0x11E5618", VA = "0x11E5618", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info, UnityEngine.Object instance)
		{
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0x11E3560", Offset = "0x11E3560", VA = "0x11E3560")]
		public void ClearActiveDarts()
		{
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x11E58AC", Offset = "0x11E58AC", VA = "0x11E58AC")]
		private void DestroyActiveDart(DartData dart)
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x11E4620", Offset = "0x11E4620", VA = "0x11E4620")]
		private void SetDartLayer(DartData dart, int layer)
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x11E5934", Offset = "0x11E5934", VA = "0x11E5934")]
		private void SetDartLayerRecursive(Transform target, int layer)
		{
		}
	}
	[Token(Token = "0x2000302")]
	public class DartSpawner
	{
		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Action<DartData> OnDartInstanceAddedToPool;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ItemSpawnerData data;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BowserTracking tracking;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BowserPhotonPrefabPool prefabPool;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string dartPrefabName;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<DartData> sortedByLifeTime;

		[Token(Token = "0x170000B2")]
		public List<DartData> AllDartInstances
		{
			[Token(Token = "0x6000DB5")]
			[Address(RVA = "0x11E5B30", Offset = "0x11E5B30", VA = "0x11E5B30")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DB6")]
			[Address(RVA = "0x11E5B38", Offset = "0x11E5B38", VA = "0x11E5B38")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x11E5B40", Offset = "0x11E5B40", VA = "0x11E5B40")]
		public DartSpawner(ItemSpawnerData data, BowserTracking tracking, BowserPhotonPrefabPool prefabPool, HighlightHandler highlightHandler)
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x11E5E20", Offset = "0x11E5E20", VA = "0x11E5E20")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x11E5E44", Offset = "0x11E5E44", VA = "0x11E5E44")]
		private void OnNewDartInstanceInPool(BowserPhotonPrefabPoolEntry instance)
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x11E5F60", Offset = "0x11E5F60", VA = "0x11E5F60")]
		public GrabbableData GrabDart(PlayerAvatar playerAvatar)
		{
			return null;
		}
	}
	[Token(Token = "0x2000304")]
	public class ItemSpawnerData : MonoBehaviour
	{
		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GrabTriggerData grabTriggerData;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BowserPhotonPrefabPoolEntry itemPrefab;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool localSpawn;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Header("Pool Settings")]
		public int poolSize;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int poolGrowthCount;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("When there is no instances left in the pool and the local user is trying to grab a new item, should we try to reuse an active non grabbed item?")]
		public bool reuseActiveItemOnZeroPoolCount;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[Tooltip("When the instance count is low in the pool, should we try to destroy old non grabbed items?")]
		public bool forceDestroyOnLowPoolCount;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int forceDestroyLimit;

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0x11E65B4", Offset = "0x11E65B4", VA = "0x11E65B4")]
		public ItemSpawnerData()
		{
		}
	}
	[Token(Token = "0x2000305")]
	public class JukeboxData : MonoBehaviour
	{
		[Token(Token = "0x2000306")]
		public struct JukeboxSongData
		{
			[Token(Token = "0x170000B3")]
			public readonly string Title
			{
				[Token(Token = "0x6000DC4")]
				[Address(RVA = "0x11E6908", Offset = "0x11E6908", VA = "0x11E6908")]
				[CompilerGenerated]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B4")]
			public readonly string Artist
			{
				[Token(Token = "0x6000DC5")]
				[Address(RVA = "0x11E6910", Offset = "0x11E6910", VA = "0x11E6910")]
				[CompilerGenerated]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DC3")]
			[Address(RVA = "0x11E6900", Offset = "0x11E6900", VA = "0x11E6900")]
			public JukeboxSongData(string title, string artist)
			{
			}
		}

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlaylistController playlistController;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public JukeboxButtonData playButton;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public JukeboxButtonData[] buttons;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PhotonView photonView;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TokenSlotData tokenSlot;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Credit")]
		public TextMeshPro creditText;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float creditWiggleDegree;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float creditWiggleSpeed;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float creditWiggleTime;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("SelectedState")]
		public GameObject SelectedState;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TextMeshPro selectedNumberAbove;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("SelectedSong")]
		public GameObject SelectedSong;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TextMeshPro selectedTitle;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public TextMeshPro selectedNumber;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TextMeshPro selectedArtist;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("DefaultState")]
		public GameObject DefaultState;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("LoadingState")]
		public GameObject LoadingState;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("PlayingState")]
		public GameObject PlayingState;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public TextMeshPro playingElapsed;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public TextMeshPro playingDuration;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Transform songProgress;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Action debugSelectSong;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Action debugPlaySong;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Action debugSyncPlaySong;

		[NonSerialized]
		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public int trackId;

		[NonSerialized]
		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public string currentSongAlias;

		[NonSerialized]
		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Action<int, int, PhotonMessageInfo> onJukeboxButtonPressedRPC;

		[NonSerialized]
		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Action<int, int, int> onJukeboxCatchupRPC;

		[NonSerialized]
		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float syncedPlaybackTime;

		[NonSerialized]
		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public int startSongAt;

		[NonSerialized]
		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public float progressFullSize;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public readonly JukeboxSongData[] songData;

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0x11E65D8", Offset = "0x11E65D8", VA = "0x11E65D8")]
		[PunRPC]
		public void BowserOnJukeboxButtonPressedRPC(int buttonType, int track, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0x11E6620", Offset = "0x11E6620", VA = "0x11E6620")]
		[PunRPC]
		public void BowserJukeboxCatchupRPC(int jukeboxState, int currentTrackIndex, int timeSamples)
		{
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0x11E663C", Offset = "0x11E663C", VA = "0x11E663C")]
		public JukeboxData()
		{
		}
	}
	[Token(Token = "0x2000307")]
	public class JukeboxHandler
	{
		[Token(Token = "0x2000308")]
		private enum JukeboxState
		{
			[Token(Token = "0x4000DE3")]
			Idle,
			[Token(Token = "0x4000DE4")]
			TrackSelected,
			[Token(Token = "0x4000DE5")]
			LoadingSongToPlay,
			[Token(Token = "0x4000DE6")]
			Playing
		}

		[Token(Token = "0x200030B")]
		[CompilerGenerated]
		private sealed class <WiggleCreditText>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public JukeboxHandler <>4__this;

			[Token(Token = "0x4000DEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <timer>5__2;

			[Token(Token = "0x4000DEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <progress>5__3;

			[Token(Token = "0x4000DF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Transform <textTransform>5__4;

			[Token(Token = "0x170000B5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DDF")]
				[Address(RVA = "0x11E95D4", Offset = "0x11E95D4", VA = "0x11E95D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DE1")]
				[Address(RVA = "0x11E961C", Offset = "0x11E961C", VA = "0x11E961C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DDC")]
			[Address(RVA = "0x11E93E0", Offset = "0x11E93E0", VA = "0x11E93E0")]
			[DebuggerHidden]
			public <WiggleCreditText>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6000DDD")]
			[Address(RVA = "0x11E9408", Offset = "0x11E9408", VA = "0x11E9408", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DDE")]
			[Address(RVA = "0x11E940C", Offset = "0x11E940C", VA = "0x11E940C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DE0")]
			[Address(RVA = "0x11E95DC", Offset = "0x11E95DC", VA = "0x11E95DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BowserButtonHandler buttonHandler;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private JukeboxData jukeboxData;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private JukeboxState jukeboxState;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TokenSlotHandler tokenSlotHandler;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private NetworkManager networkManager;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int currentCreditValue;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine wiggleCreditTextRoutine;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Locale locale;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MasterAudio.Playlist defaultPlaylist;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MasterAudio.Playlist jukeboxPlaylist;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BowserTracking tracking;

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0x11E6918", Offset = "0x11E6918", VA = "0x11E6918")]
		public JukeboxHandler(BowserButtonHandler buttonHandler, JukeboxData jukeboxData, TokenSlotHandler tokenSlotHandler, NetworkManager networkManager, BowserTracking tracking)
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x11E7134", Offset = "0x11E7134", VA = "0x11E7134")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x11E71C0", Offset = "0x11E71C0", VA = "0x11E71C0")]
		private void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x11E73F8", Offset = "0x11E73F8", VA = "0x11E73F8")]
		private void OnJukeboxCatchupRPC(int jukeboxState, int trackId, int timeSamples)
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x11E7854", Offset = "0x11E7854", VA = "0x11E7854")]
		private void OnJukeboxButtonPressed(JukeboxButtonData button, PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x11E7B90", Offset = "0x11E7B90", VA = "0x11E7B90")]
		private void BowserOnJukeboxButtonPressedRPC(int buttonType, int track, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0x11E7550", Offset = "0x11E7550", VA = "0x11E7550")]
		private void SelectTrack(int trackId, bool forceTransition = false)
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x11E7D3C", Offset = "0x11E7D3C", VA = "0x11E7D3C")]
		private void Play()
		{
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x11E7DBC", Offset = "0x11E7DBC", VA = "0x11E7DBC")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x11E706C", Offset = "0x11E706C", VA = "0x11E706C")]
		private void RefreshCreditText()
		{
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0x11E6DF4", Offset = "0x11E6DF4", VA = "0x11E6DF4")]
		private void EnterState(JukeboxState newState)
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x11E7718", Offset = "0x11E7718", VA = "0x11E7718")]
		private void PlaySelectedTrack(int startAt = 0)
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x11E8070", Offset = "0x11E8070", VA = "0x11E8070")]
		private void StopPlaying()
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x11E80B8", Offset = "0x11E80B8", VA = "0x11E80B8")]
		private string FormatTrackDuration(float duration)
		{
			return null;
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x11E7D54", Offset = "0x11E7D54", VA = "0x11E7D54")]
		[IteratorStateMachine(typeof(<WiggleCreditText>d__26))]
		private IEnumerator WiggleCreditText()
		{
			return null;
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x11E81CC", Offset = "0x11E81CC", VA = "0x11E81CC")]
		private void DebugSelectedSong()
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x11E81D8", Offset = "0x11E81D8", VA = "0x11E81D8")]
		private void DebugPlaySong()
		{
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x11E8210", Offset = "0x11E8210", VA = "0x11E8210")]
		private void DebugSyncPlaySong()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200030C")]
	public class Track
	{
		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string url;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string type;

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x11E9624", Offset = "0x11E9624", VA = "0x11E9624")]
		public Track()
		{
		}
	}
	[Token(Token = "0x200030D")]
	public class TrackList
	{
		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Track[] tracks;

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x11E962C", Offset = "0x11E962C", VA = "0x11E962C")]
		public TrackList()
		{
		}
	}
	[Token(Token = "0x200030E")]
	public class PhotoCameraData : MonoBehaviour
	{
		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GrabbableData grabbable;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera targetCamera;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform cameraModelTransform;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Animator buttonAnimator;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UploadPictureUIData uploadUI;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PhotonView photonView;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Renderer localPictureRenderer;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Renderer remotePictureRenderer;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Rigidbody myRigidbody;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public Vector3 originalPosition;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[HideInInspector]
		public Quaternion originalRotation;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[HideInInspector]
		public bool atSpawnPosition;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public Action resetCameraUIRPC;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public Action moveCameraRPC;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public string respawnCameraEffect;

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x11E9634", Offset = "0x11E9634", VA = "0x11E9634")]
		[PunRPC]
		public void BowserResetCameraUIRPC()
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x11E9650", Offset = "0x11E9650", VA = "0x11E9650")]
		[PunRPC]
		public void BowserMoveCameraRPC()
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x11E966C", Offset = "0x11E966C", VA = "0x11E966C")]
		public PhotoCameraData()
		{
		}
	}
	[Token(Token = "0x200030F")]
	public class PhotoCameraHandler
	{
		[Token(Token = "0x2000310")]
		private enum CameraUIState
		{
			[Token(Token = "0x4000E1D")]
			Hidden,
			[Token(Token = "0x4000E1E")]
			RemotePreview,
			[Token(Token = "0x4000E1F")]
			WaitForInput,
			[Token(Token = "0x4000E20")]
			Uploading
		}

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int indexHash;

		[Token(Token = "0x4000E05")]
		private const int PICTURE_WIDTH = 1920;

		[Token(Token = "0x4000E06")]
		private const int PICTURE_HEIGHT = 1080;

		[Token(Token = "0x4000E07")]
		private const float RESPAWN_TIMER = 60f;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PhotoCameraData camera;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BowserTracking tracking;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BowserDiscord discordHandler;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly UploadPictureUIData uploadPictureUI;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Locale locale;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly BowserParticlePool particlePool;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly AvatarHandler avatarHandler;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CameraUIState cameraUIState;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private CameraUIState prevCameraUIState;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 leftScale;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 rightScale;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTexture renderTexture;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Texture2D picture;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private MaterialPropertyBlock materialPropertyBlock;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AvatarData heldBy;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool isLeft;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool buttonWasPressed;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		private bool success;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string playerName;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float timer;

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x11E96C4", Offset = "0x11E96C4", VA = "0x11E96C4")]
		public PhotoCameraHandler(PhotoCameraData camera, BowserTracking tracking, BowserDiscord discordHandler, BowserButtonHandler buttonHandler, BowserParticlePool particlePool, AvatarHandler avatarHandler)
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x11E9D54", Offset = "0x11E9D54", VA = "0x11E9D54")]
		private void OnCameraUIButtonPress(CameraUIButtonData button, PlayerAvatar playerAvatar)
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x11EA148", Offset = "0x11EA148", VA = "0x11EA148")]
		private void OnGrabBegin(PlayerAvatar owner, RGXR_Device playerInputDevice)
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x11EA238", Offset = "0x11EA238", VA = "0x11EA238")]
		private void GrabEnd(Vector3 throwForce)
		{
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x11EA26C", Offset = "0x11EA26C", VA = "0x11EA26C")]
		private void OnRemoteGrabBegin(AvatarData avatar, RGXR_Device playerInputDevice)
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x11EA270", Offset = "0x11EA270", VA = "0x11EA270")]
		private void OnRemoteGrabEnd()
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0x11EA1CC", Offset = "0x11EA1CC", VA = "0x11EA1CC")]
		private void OnGrabbed(AvatarData heldBy, RGXR_Device playerInputDevice)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x11EA2A4", Offset = "0x11EA2A4", VA = "0x11EA2A4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x11EA778", Offset = "0x11EA778", VA = "0x11EA778")]
		private void MoveCamera()
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x11EA604", Offset = "0x11EA604", VA = "0x11EA604")]
		private void TakePicture()
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x11EA930", Offset = "0x11EA930", VA = "0x11EA930")]
		private void SetTexture(Texture2D texture, Renderer pictureRenderer)
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x11E9E6C", Offset = "0x11E9E6C", VA = "0x11E9E6C")]
		private void SetCameraUIState(CameraUIState state, GameObject nextUI)
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x11E9D34", Offset = "0x11E9D34", VA = "0x11E9D34")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x11EA9BC", Offset = "0x11EA9BC", VA = "0x11EA9BC")]
		public void Stop()
		{
		}
	}
	[Token(Token = "0x2000313")]
	public class UploadPictureUIData : MonoBehaviour
	{
		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject localPictureRoot;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject remotePictureRoot;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject previewUI;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject uploadText;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject uploadFailedText;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject loadingUI;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SpriteRenderer spinningWheel;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float spinningWheelSpeed;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string channelName;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject uploadedUI;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public CameraUIButtonData[] buttons;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public CameraUIRootsData[] cameraUIRoots;

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x11EAAD0", Offset = "0x11EAAD0", VA = "0x11EAAD0")]
		public UploadPictureUIData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000314")]
	public class CameraUIButtonData
	{
		[Token(Token = "0x2000315")]
		public enum ButtonType
		{
			[Token(Token = "0x4000E34")]
			Yes,
			[Token(Token = "0x4000E35")]
			No,
			[Token(Token = "0x4000E36")]
			Return
		}

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ButtonType buttonType;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BowserButtonData buttonData;

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x11EAAD8", Offset = "0x11EAAD8", VA = "0x11EAAD8")]
		public CameraUIButtonData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000316")]
	public class CameraUIRootsData
	{
		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject ui;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool showPicture;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Header("Include Discord Channel name?")]
		public bool includeChannel;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshPro textToChange;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string stringID;

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0x11EAAE0", Offset = "0x11EAAE0", VA = "0x11EAAE0")]
		public CameraUIRootsData()
		{
		}
	}
	[Token(Token = "0x2000317")]
	public class PlayerColorPicker
	{
		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PlayerColorPickerData data;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BowserTracking tracking;

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0x11EAAE8", Offset = "0x11EAAE8", VA = "0x11EAAE8")]
		public PlayerColorPicker(PlayerColorPickerData data, BowserTracking tracking, BowserButtonHandler buttonHandler)
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x11EAC8C", Offset = "0x11EAC8C", VA = "0x11EAC8C")]
		private void OnPickColorButtonPressed(PlayerAvatar playerAvatar, PlayerColorPickerData.ColorPickButtonData pickColorData, RGXR_Device inputDevice)
		{
		}
	}
	[Token(Token = "0x200031A")]
	public class PlayerColorPickerData : MonoBehaviour
	{
		[Token(Token = "0x200031B")]
		public enum ColorName
		{
			[Token(Token = "0x4000E44")]
			Yellow,
			[Token(Token = "0x4000E45")]
			Orange,
			[Token(Token = "0x4000E46")]
			Red,
			[Token(Token = "0x4000E47")]
			Pink,
			[Token(Token = "0x4000E48")]
			Blue,
			[Token(Token = "0x4000E49")]
			Cyan,
			[Token(Token = "0x4000E4A")]
			Green
		}

		[Serializable]
		[Token(Token = "0x200031C")]
		public class ColorPickButtonData
		{
			[Token(Token = "0x4000E4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ColorName colorName;

			[Token(Token = "0x4000E4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Color color;

			[Token(Token = "0x4000E4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public BowserButtonData buttonData;

			[Token(Token = "0x6000E02")]
			[Address(RVA = "0x11EAECC", Offset = "0x11EAECC", VA = "0x11EAECC")]
			public ColorPickButtonData()
			{
			}
		}

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColorPickButtonData[] buttons;

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0x11EAEC4", Offset = "0x11EAEC4", VA = "0x11EAEC4")]
		public PlayerColorPickerData()
		{
		}
	}
	[Token(Token = "0x200031D")]
	public class BowserTrailerManager
	{
		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BowserTrailerManagerData data;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Camera mainCamera;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<RGXR_Device, Vector3> previousPositions;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<RGXR_Device, Vector3> smoothMovement;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<RGXR_Device, Quaternion> previousRotations;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<RGXR_Device, Quaternion> smoothRotation;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Camera trailerCamera;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool mouseEnabled;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 currentRotation;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 trailerCameraVelocity;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion trailerCameraRotationDeriv;

		[Token(Token = "0x170000B7")]
		public bool TrailerMode
		{
			[Token(Token = "0x6000E03")]
			[Address(RVA = "0x11EAED4", Offset = "0x11EAED4", VA = "0x11EAED4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0x11EAEF0", Offset = "0x11EAEF0", VA = "0x11EAEF0")]
		public BowserTrailerManager(BowserTrailerManagerData data, Camera mainCamera)
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0x11EB008", Offset = "0x11EB008", VA = "0x11EB008")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0x11EBCF4", Offset = "0x11EBCF4", VA = "0x11EBCF4")]
		public Vector3 GetDeviceVector3(RGXR_Device device, Vector3 newPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0x11EBF18", Offset = "0x11EBF18", VA = "0x11EBF18")]
		public Quaternion GetDeviceQuaternion(RGXR_Device device, Quaternion newRotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0x11EBA80", Offset = "0x11EBA80", VA = "0x11EBA80")]
		private static Quaternion SmoothDamp(Quaternion rot, Quaternion target, ref Quaternion deriv, float time)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0x11EB658", Offset = "0x11EB658", VA = "0x11EB658")]
		private void CalculateAndSetMouseRotation()
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0x11EB60C", Offset = "0x11EB60C", VA = "0x11EB60C")]
		private void UpdateMouseInput()
		{
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0x11EB7C4", Offset = "0x11EB7C4", VA = "0x11EB7C4")]
		private Vector3 CalculateHeadPosition()
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200031E")]
	public class BowserTrailerManagerData : MonoBehaviour
	{
		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera trailerCameraPrefab;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<RGXR_Device> devicesToSmooth;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool trailerMode;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float smoothTime;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public KeyCode freeMode;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool freeModeCamera;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float mouseSpeed;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float controllerRotationSpeed;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float movementSpeed;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float movementSpeedMultiplier;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float movementSpeedLowerMultiplier;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public KeyCode increaseFov;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public KeyCode decreaseFov;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float tweakSpeedFov;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public KeyCode increaseBaseSpeed;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public KeyCode decreaseBaseSpeed;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float tweakBaseSpeed;

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x11EC114", Offset = "0x11EC114", VA = "0x11EC114")]
		public BowserTrailerManagerData()
		{
		}
	}
	[Token(Token = "0x200031F")]
	public class TutorialHandler
	{
		[Token(Token = "0x2000320")]
		private enum State
		{
			[Token(Token = "0x4000E74")]
			Appearing,
			[Token(Token = "0x4000E75")]
			Active,
			[Token(Token = "0x4000E76")]
			Disappering,
			[Token(Token = "0x4000E77")]
			Hidden
		}

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TutorialPromptData[] tutorialPrompts;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BowserButtonData tutorialButton;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string keyPlayerPrefs;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float currentScale;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PlayerAvatar localPlayer;

		[Token(Token = "0x4000E70")]
		private const float SCALING_SPEED = 2f;

		[Token(Token = "0x4000E71")]
		private const string TUTORIAL_PPREFS_KEY_POSTFIX = "BowserTutorialComplete";

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private State state;

		[Token(Token = "0x170000B8")]
		public bool HasSeenTutorial
		{
			[Token(Token = "0x6000E0D")]
			[Address(RVA = "0x11EC148", Offset = "0x11EC148", VA = "0x11EC148")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0x11EC150", Offset = "0x11EC150", VA = "0x11EC150")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0x11EC15C", Offset = "0x11EC15C", VA = "0x11EC15C")]
		public TutorialHandler(string playerID, TutorialPromptData[] tutorialPrompts, BowserButtonData tutorialButton, PlayerAvatar localPlayer, BowserButtonHandler buttonHandler)
		{
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0x11EC2EC", Offset = "0x11EC2EC", VA = "0x11EC2EC")]
		private void EnterState(State newState)
		{
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0x11EC3D4", Offset = "0x11EC3D4", VA = "0x11EC3D4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0x11EC868", Offset = "0x11EC868", VA = "0x11EC868")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0x11EC8FC", Offset = "0x11EC8FC", VA = "0x11EC8FC")]
		private void OnTutorialButtonPressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}
	}
	[Token(Token = "0x2000321")]
	public class TutorialPromptData : MonoBehaviour
	{
		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float moveSpeed;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxHeightOffset;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 359f)]
		public float startOffsetAngle;

		[NonSerialized]
		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 defaultPosition;

		[NonSerialized]
		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float heightOffsetAngle;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Animator pico4Animator;

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0x11EC960", Offset = "0x11EC960", VA = "0x11EC960")]
		public TutorialPromptData()
		{
		}
	}
	[Token(Token = "0x2000322")]
	public class WristMenuData : MonoBehaviour
	{
		[Token(Token = "0x2000323")]
		public enum WristMenuType
		{
			[Token(Token = "0x4000EA3")]
			None,
			[Token(Token = "0x4000EA4")]
			Token,
			[Token(Token = "0x4000EA5")]
			Settings
		}

		[Token(Token = "0x4000E7F")]
		public const int LOADING_TOKEN_COUNT = -1;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("General Settings")]
		public Transform playerHeadTransform;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject tokenWristMenuRoot;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject settingsWristMenuRoot;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WristMenuType wristMenuType;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float activationValue;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float minAlpha;

		[NonSerialized]
		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool inPlayerFocus;

		[NonSerialized]
		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		public bool isActive;

		[NonSerialized]
		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 headDirection;

		[NonSerialized]
		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 wristMenuDirection;

		[NonSerialized]
		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color color;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Wrist Menu: Token")]
		public GrabTriggerData tokenTrigger;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TextMeshPro nbrOfTokensText;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public MeshRenderer tokenRenderer;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public MeshRenderer tokenPlateRenderer;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public MeshRenderer emptyTokenPlateRenderer;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Material opaqueTokenMaterial;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Material transparentTokenMaterial;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject loadingIcon;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject tokenInformationParent;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public ParticleSystem addTokenEffect;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Color tokensTextColor;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Color noTokensTextColor;

		[NonSerialized]
		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float tokenOffSet;

		[NonSerialized]
		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public int nbrOfTokens;

		[NonSerialized]
		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public MeshRenderer currentActiveTokenPlate;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Header("Wrist Menu: Settings")]
		public BowserButtonData settingsButton;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Transform playerMenuParent;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public MeshRenderer buttonRenderer;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public MeshRenderer buttonRootRenderer;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Material settingsMaterial;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Material closeMaterial;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public GameObject storyNotification;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public TextMeshPro storyNotificationText;

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0x11EC974", Offset = "0x11EC974", VA = "0x11EC974")]
		public WristMenuData()
		{
		}
	}
	[Token(Token = "0x2000324")]
	public class WristMenuHandler
	{
		[Token(Token = "0x4000EA6")]
		private const int NO_TOKENS_FETCHED = -1;

		[Token(Token = "0x4000EA7")]
		private const float ACTIVE_EMISSION_VALUE = 1.3f;

		[Token(Token = "0x4000EA8")]
		private const float INACTIVE_EMISSION_VALUE = 0.8f;

		[Token(Token = "0x4000EA9")]
		private const float LOADICON_SPEED = 250f;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private WristMenuData settingsWristMenu;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private WristMenuData tokensWristMenu;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BowserButtonHandler buttonHandler;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PlayerMenu playerMenu;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private StoryManager storyManager;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool tokenInformationIsActive;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool refreshTokenInformation;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MaterialPropertyBlock materialPropertyBlock;

		[Token(Token = "0x170000B9")]
		private bool MenuOpen
		{
			[Token(Token = "0x6000E16")]
			[Address(RVA = "0x11EC98C", Offset = "0x11EC98C", VA = "0x11EC98C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0x11EC9A8", Offset = "0x11EC9A8", VA = "0x11EC9A8")]
		public WristMenuHandler(WristMenuData settingsWristMenu, WristMenuData tokensWristMenu, BowserButtonHandler buttonHandler, PlayerMenu playerMenu, StoryManager storyManager)
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x11ECBE8", Offset = "0x11ECBE8", VA = "0x11ECBE8")]
		private void OnPlayerMenuHidden()
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0x11ECC4C", Offset = "0x11ECC4C", VA = "0x11ECC4C")]
		private void OnMenuButtonPressed()
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0x11ECBEC", Offset = "0x11ECBEC", VA = "0x11ECBEC")]
		private void RefreshMenuButton()
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x11ECD88", Offset = "0x11ECD88", VA = "0x11ECD88")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0x11ECCBC", Offset = "0x11ECCBC", VA = "0x11ECCBC")]
		private void RefreshStoryNotification()
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x11ED5EC", Offset = "0x11ED5EC", VA = "0x11ED5EC")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x11ED4BC", Offset = "0x11ED4BC", VA = "0x11ED4BC")]
		private void SetWristMenuAlphaValue(WristMenuData wristMenu, MeshRenderer menu, MeshRenderer root, float lookAtDistance)
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x11ED564", Offset = "0x11ED564", VA = "0x11ED564")]
		private void SetWristMenuMaterialValues(string name, MeshRenderer renderer, Color color)
		{
		}
	}
	[Token(Token = "0x2000325")]
	public class BowserUnityXR : IBowserPlatformXR
	{
		[Token(Token = "0x2000326")]
		public enum UsageSpace
		{
			[Token(Token = "0x4000ECC")]
			World,
			[Token(Token = "0x4000ECD")]
			Camera
		}

		[Token(Token = "0x2000327")]
		public class UsageAndSpace<T>
		{
			[Token(Token = "0x4000ECE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public InputFeatureUsage<T> usage;

			[Token(Token = "0x4000ECF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UsageSpace space;

			[Token(Token = "0x6000E3A")]
			public UsageAndSpace()
			{
			}
		}

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Dictionary<RGXR_Vector2, InputFeatureUsage<Vector2>> thisToThat_InputIdentifier_Vector2;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Dictionary<RGXR_Vector3, UsageAndSpace<Vector3>> thisToThat_InputIdentifier_Vector3;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Dictionary<RGXR_Quaternion, UsageAndSpace<Quaternion>> thisToThat_InputIdentifier_Quaternion;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Dictionary<RGXR_Float, InputFeatureUsage<float>> thisToThat_InputIdentifier_Float;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Dictionary<RGXR_Bool, InputFeatureUsage<bool>> thisToThat_InputIdentifier_Bool;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform cameraOffset;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private InputDevice hmd;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private InputDevice controllerLeft;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private InputDevice controllerRight;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private FingerData fingerDataLeft;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private FingerData fingerDataRight;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Dictionary<RGXR_Vector3, Dictionary<RGXR_Device, Vector3>> lastValidDeviceVector3;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Dictionary<RGXR_Vector2, Dictionary<RGXR_Device, Vector2>> lastValidDeviceVector2;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Dictionary<RGXR_Quaternion, Dictionary<RGXR_Device, Quaternion>> lastValidDeviceQuaternion;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Dictionary<RGXR_Float, Dictionary<RGXR_Device, float>> lastValidDeviceFloat;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Dictionary<RGXR_Bool, Dictionary<RGXR_Device, bool>> lastValidDeviceBool;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Dictionary<RGXR_Bool, Dictionary<RGXR_Device, bool>> pressedThisFrame;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Dictionary<RGXR_Bool, Dictionary<RGXR_Device, bool>> releasedThisFrame;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly float indexTouchOffset;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private readonly float middleFingerOffset;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly float ringFingerOffset;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private readonly float pinkyFingerOffset;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Dictionary<RGXR_Device, Action> onDeviceConnected;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Dictionary<RGXR_Device, Action> onDeviceDisconnected;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool hasPostedHapticsWarning;

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x11ED69C", Offset = "0x11ED69C", VA = "0x11ED69C")]
		public BowserUnityXR(Transform cameraOffset, GameObject mainCamera)
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x11EDEF8", Offset = "0x11EDEF8", VA = "0x11EDEF8", Slot = "11")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0x11EDF18", Offset = "0x11EDF18", VA = "0x11EDF18")]
		private void UpdateFingerTracking(Handedness handedness)
		{
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0x11EE1BC", Offset = "0x11EE1BC", VA = "0x11EE1BC", Slot = "9")]
		public FingerData GetFingers(Handedness handedness)
		{
			return null;
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x11EDE28", Offset = "0x11EDE28", VA = "0x11EDE28")]
		private InputDevice GetDeviceAtNode(XRNode node)
		{
			return default(InputDevice);
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0x11EE170", Offset = "0x11EE170", VA = "0x11EE170")]
		private InputDevice GetInputDevice(RGXR_Device deviceName)
		{
			return default(InputDevice);
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0x11EE1D4", Offset = "0x11EE1D4", VA = "0x11EE1D4")]
		private RGXR_Device GetInputDevice(InputDevice device)
		{
			return default(RGXR_Device);
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0x11EE240", Offset = "0x11EE240", VA = "0x11EE240")]
		private bool OverrideLeftHand()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0x11EE270", Offset = "0x11EE270", VA = "0x11EE270")]
		private bool OverrideRightHand()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0x11EE2A0", Offset = "0x11EE2A0", VA = "0x11EE2A0")]
		private bool GetLastValidBool(RGXR_Device deviceName, RGXR_Bool inputIdentifier)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0x11EE43C", Offset = "0x11EE43C", VA = "0x11EE43C", Slot = "8")]
		public bool GetBool(RGXR_Device deviceName, RGXR_Bool inputIdentifier)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x11EE714", Offset = "0x11EE714", VA = "0x11EE714")]
		private float GetLastValidFloat(RGXR_Device deviceName, RGXR_Float inputIdentifier)
		{
			return default(float);
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x11EE8B0", Offset = "0x11EE8B0", VA = "0x11EE8B0", Slot = "7")]
		public float GetFloat(RGXR_Device deviceName, RGXR_Float inputIdentifier)
		{
			return default(float);
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x11EEA7C", Offset = "0x11EEA7C", VA = "0x11EEA7C")]
		private Quaternion GetLastValidQuaternion(RGXR_Device deviceName, RGXR_Quaternion inputIdentifier)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x11EEC5C", Offset = "0x11EEC5C", VA = "0x11EEC5C", Slot = "6")]
		public Quaternion GetQuaternion(RGXR_Device deviceName, RGXR_Quaternion inputIdentifier)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x11EF080", Offset = "0x11EF080", VA = "0x11EF080")]
		private Vector2 GetLastValidVector2(RGXR_Device deviceName, RGXR_Vector2 inputIdentifier)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x11EF25C", Offset = "0x11EF25C", VA = "0x11EF25C", Slot = "4")]
		public Vector2 GetVector2(RGXR_Device deviceName, RGXR_Vector2 inputIdentifier)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x11EF374", Offset = "0x11EF374", VA = "0x11EF374")]
		private Vector3 GetLastValidVector3(RGXR_Device deviceName, RGXR_Vector3 inputIdentifier)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x11EF554", Offset = "0x11EF554", VA = "0x11EF554", Slot = "5")]
		public Vector3 GetVector3(RGXR_Device deviceName, RGXR_Vector3 inputIdentifier)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x11EE234", Offset = "0x11EE234", VA = "0x11EE234")]
		private bool CharacteristicsMatch(InputDeviceCharacteristics value, InputDeviceCharacteristics mask)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x11EF8AC", Offset = "0x11EF8AC", VA = "0x11EF8AC", Slot = "10")]
		public void SetConnectionCallbacks(RGXR_Device deviceName, Action onConnected, Action onDisconnected)
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x11EF9F4", Offset = "0x11EF9F4", VA = "0x11EF9F4", Slot = "12")]
		public void PlayHaptics(RGXR_Device device, float amplitude, float duration)
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x11EFC4C", Offset = "0x11EFC4C", VA = "0x11EFC4C")]
		private void OnDeviceConnected(InputDevice device)
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x11EFD50", Offset = "0x11EFD50", VA = "0x11EFD50")]
		private void OnDeviceDisconnected(InputDevice device)
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x11EFE40", Offset = "0x11EFE40", VA = "0x11EFE40", Slot = "13")]
		public void Stop()
		{
		}
	}
	[Token(Token = "0x2000328")]
	public enum RGXR_Device
	{
		[Token(Token = "0x4000ED1")]
		None = -1,
		[Token(Token = "0x4000ED2")]
		ControllerLeft,
		[Token(Token = "0x4000ED3")]
		ControllerRight,
		[Token(Token = "0x4000ED4")]
		HMD
	}
	[Token(Token = "0x2000329")]
	public enum RGXR_Vector2
	{
		[Token(Token = "0x4000ED6")]
		primary2DAxis
	}
	[Token(Token = "0x200032A")]
	public enum RGXR_Vector3
	{
		[Token(Token = "0x4000ED8")]
		devicePosition
	}
	[Token(Token = "0x200032B")]
	public enum RGXR_Quaternion
	{
		[Token(Token = "0x4000EDA")]
		deviceRotation
	}
	[Token(Token = "0x200032C")]
	public enum RGXR_Float
	{
		[Token(Token = "0x4000EDC")]
		trigger,
		[Token(Token = "0x4000EDD")]
		grip
	}
	[Token(Token = "0x200032D")]
	public enum RGXR_Bool
	{
		[Token(Token = "0x4000EDF")]
		primaryButton,
		[Token(Token = "0x4000EE0")]
		secondaryButton,
		[Token(Token = "0x4000EE1")]
		primary2DAxisClick,
		[Token(Token = "0x4000EE2")]
		secondary2DAxisClick,
		[Token(Token = "0x4000EE3")]
		gripButton,
		[Token(Token = "0x4000EE4")]
		triggerButton,
		[Token(Token = "0x4000EE5")]
		isValid,
		[Token(Token = "0x4000EE6")]
		thumbTouch,
		[Token(Token = "0x4000EE7")]
		indexTouch
	}
	[Token(Token = "0x200032E")]
	public enum Handedness
	{
		[Token(Token = "0x4000EE9")]
		Right,
		[Token(Token = "0x4000EEA")]
		Left
	}
	[Token(Token = "0x200032F")]
	public class FingerData
	{
		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float index;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float middle;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float ring;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float pinky;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float thumb;

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x11EDEF0", Offset = "0x11EDEF0", VA = "0x11EDEF0")]
		public FingerData()
		{
		}
	}
	[Token(Token = "0x2000330")]
	public class BowserXR
	{
		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static IBowserPlatformXR platformXR;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static BowserTrailerManager trailerManager;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Quaternion controllerRotationOffset;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform cameraOffset;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector2 mouseAbsolute;

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x11EFF00", Offset = "0x11EFF00", VA = "0x11EFF00")]
		public BowserXR(Transform cameraOffset, GameObject mainCamera, [Optional] BowserTrailerManager bowserTrailerManager)
		{
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x11F0094", Offset = "0x11F0094", VA = "0x11F0094")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0x11F0660", Offset = "0x11F0660", VA = "0x11F0660")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x11F072C", Offset = "0x11F072C", VA = "0x11F072C")]
		public static Vector2 GetDeviceVector2(RGXR_Device device, RGXR_Vector2 inputIdentifier)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0x11F080C", Offset = "0x11F080C", VA = "0x11F080C")]
		public static Vector3 GetDeviceVector3(RGXR_Device device, RGXR_Vector3 inputIdentifier)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x11F09A8", Offset = "0x11F09A8", VA = "0x11F09A8")]
		public static Quaternion GetDeviceQuaternion(RGXR_Device device, RGXR_Quaternion inputIdentifier)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0x11F0D1C", Offset = "0x11F0D1C", VA = "0x11F0D1C")]
		public static float GetDeviceFloat(RGXR_Device device, RGXR_Float inputIdentifier)
		{
			return default(float);
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0x11F0E00", Offset = "0x11F0E00", VA = "0x11F0E00")]
		public static bool GetDeviceBool(RGXR_Device device, RGXR_Bool inputIdentifier)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x11F0EE4", Offset = "0x11F0EE4", VA = "0x11F0EE4")]
		public static FingerData GetFingers(Handedness handedness)
		{
			return null;
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x11F0FB8", Offset = "0x11F0FB8", VA = "0x11F0FB8")]
		public static void SetConnectionCallbacks(RGXR_Device deviceName, Action onConnected, Action onDisconnected)
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x11EAD88", Offset = "0x11EAD88", VA = "0x11EAD88")]
		public static void PlayHaptics(RGXR_Device device, float amplitude, float duration)
		{
		}
	}
	[Token(Token = "0x2000331")]
	public interface IBowserPlatformXR
	{
		[Token(Token = "0x6000E48")]
		Vector2 GetVector2(RGXR_Device device, RGXR_Vector2 inputIdentifier);

		[Token(Token = "0x6000E49")]
		Vector3 GetVector3(RGXR_Device device, RGXR_Vector3 inputIdentifier);

		[Token(Token = "0x6000E4A")]
		Quaternion GetQuaternion(RGXR_Device device, RGXR_Quaternion inputIdentifier);

		[Token(Token = "0x6000E4B")]
		float GetFloat(RGXR_Device device, RGXR_Float inputIdentifier);

		[Token(Token = "0x6000E4C")]
		bool GetBool(RGXR_Device device, RGXR_Bool inputIdentifier);

		[Token(Token = "0x6000E4D")]
		FingerData GetFingers(Handedness handedness);

		[Token(Token = "0x6000E4E")]
		void SetConnectionCallbacks(RGXR_Device device, Action onConnected, Action onDisconnected);

		[Token(Token = "0x6000E4F")]
		void Tick();

		[Token(Token = "0x6000E50")]
		void PlayHaptics(RGXR_Device device, float amplitude, float duration);

		[Token(Token = "0x6000E51")]
		void Stop();
	}
	[Token(Token = "0x2000332")]
	public class XRPluginManager
	{
		[Token(Token = "0x170000BA")]
		public XRManagerSettings XRManager
		{
			[Token(Token = "0x6000E52")]
			[Address(RVA = "0x11F1120", Offset = "0x11F1120", VA = "0x11F1120")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E53")]
			[Address(RVA = "0x11F1128", Offset = "0x11F1128", VA = "0x11F1128")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x11F1130", Offset = "0x11F1130", VA = "0x11F1130")]
		public void InitializeXRSynchronously()
		{
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0x11F12B8", Offset = "0x11F12B8", VA = "0x11F12B8")]
		public void SetDisplayFrequency()
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0x11F145C", Offset = "0x11F145C", VA = "0x11F145C")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x11F1534", Offset = "0x11F1534", VA = "0x11F1534")]
		public XRPluginManager()
		{
		}
	}
}
namespace Bowser.GameIntegration
{
	[Token(Token = "0x2000333")]
	public class BowserAvatarVisuals : MonoBehaviour, IBowserPhotonPrefabPoolListener
	{
		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Target Tranforms (for the visuals to follow)")]
		public Transform leftHandVisualsTarget;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rightHandVisualsTarget;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Needs to match with the transforms to sync in the character reference")]
		public Transform[] bodyTargetTransformsToSync;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Header("Asset references")]
		private CharacterSettings characterSettings;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private RuntimeAnimatorController rightHandController;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private RuntimeAnimatorController leftHandController;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[Header("In-prefab references")]
		private PhotonView photonView;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private VRIK vrIK;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private TextMeshPro nameTagText;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private FaceLocalPlayer nameTagToRotate;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private TextMeshPro cameraNameTag;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private SpriteRenderer mutedIcon;

		[NonSerialized]
		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Animator leftHandAnimator;

		[NonSerialized]
		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Animator rightHandAnimator;

		[NonSerialized]
		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Transform visualsHead;

		[NonSerialized]
		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Transform visualsLeftHand;

		[NonSerialized]
		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform visualsRightHand;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private CharacterReference visualsInstance;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private MaterialPropertyBlock materialPropertyBlock;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<Renderer> emissionRenderers;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<Renderer> holoRenderers;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private List<Renderer> allBodyRenderers;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private SkinnedMeshRenderer headRenderer;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Color latestColor;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool fakeAvatar;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
		private bool setupComplete;

		[Token(Token = "0x170000BB")]
		public Transform[] VisualTransformsToSync
		{
			[Token(Token = "0x6000E58")]
			[Address(RVA = "0x11F153C", Offset = "0x11F153C", VA = "0x11F153C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BC")]
		public Transform LeftIndexVisualsTip
		{
			[Token(Token = "0x6000E59")]
			[Address(RVA = "0x11F1558", Offset = "0x11F1558", VA = "0x11F1558")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E5A")]
			[Address(RVA = "0x11F1560", Offset = "0x11F1560", VA = "0x11F1560")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000BD")]
		public Transform RightIndexVisualsTip
		{
			[Token(Token = "0x6000E5B")]
			[Address(RVA = "0x11F1568", Offset = "0x11F1568", VA = "0x11F1568")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E5C")]
			[Address(RVA = "0x11F1570", Offset = "0x11F1570", VA = "0x11F1570")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000BE")]
		public Transform LeftHandVisualsAttachPoint
		{
			[Token(Token = "0x6000E5D")]
			[Address(RVA = "0x11F1578", Offset = "0x11F1578", VA = "0x11F1578")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E5E")]
			[Address(RVA = "0x11F1580", Offset = "0x11F1580", VA = "0x11F1580")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000BF")]
		public Transform RightHandVisualsAttachPoint
		{
			[Token(Token = "0x6000E5F")]
			[Address(RVA = "0x11F1588", Offset = "0x11F1588", VA = "0x11F1588")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E60")]
			[Address(RVA = "0x11F1590", Offset = "0x11F1590", VA = "0x11F1590")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000C0")]
		public int PlayerAvatarID
		{
			[Token(Token = "0x6000E61")]
			[Address(RVA = "0x11F1598", Offset = "0x11F1598", VA = "0x11F1598")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E62")]
			[Address(RVA = "0x11F15A0", Offset = "0x11F15A0", VA = "0x11F15A0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0x11F15A8", Offset = "0x11F15A8", VA = "0x11F15A8")]
		private bool GetIsLocalPlayer()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0x11F1630", Offset = "0x11F1630", VA = "0x11F1630")]
		private void Setup()
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x11F16A0", Offset = "0x11F16A0", VA = "0x11F16A0")]
		public void RefreshVisuals(bool fakeAvatar = false)
		{
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0x11F1E00", Offset = "0x11F1E00", VA = "0x11F1E00")]
		private void DestroyVisuals()
		{
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x11F20E0", Offset = "0x11F20E0", VA = "0x11F20E0", Slot = "4")]
		public void OnPoolInstantiate()
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x11F2110", Offset = "0x11F2110", VA = "0x11F2110")]
		public void ResetBodyIK()
		{
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x11F1F3C", Offset = "0x11F1F3C", VA = "0x11F1F3C")]
		public void ChangeColor(Color color)
		{
		}

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x11F2154", Offset = "0x11F2154", VA = "0x11F2154", Slot = "5")]
		public void OnPoolDestroy()
		{
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x11F2158", Offset = "0x11F2158", VA = "0x11F2158")]
		public FaceLocalPlayer GetNameTagToRotate()
		{
			return null;
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x11F2160", Offset = "0x11F2160", VA = "0x11F2160")]
		public void SetRenderingEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x11F225C", Offset = "0x11F225C", VA = "0x11F225C")]
		public void SetMutedIconActive(bool muted)
		{
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0x11F227C", Offset = "0x11F227C", VA = "0x11F227C")]
		public BowserAvatarVisuals()
		{
		}
	}
	[Token(Token = "0x2000334")]
	public class FriendMatchManager
	{
		[Token(Token = "0x2000335")]
		private enum ThumbPose
		{
			[Token(Token = "0x4000F37")]
			None,
			[Token(Token = "0x4000F38")]
			ThumbsUp,
			[Token(Token = "0x4000F39")]
			ThumbsDown
		}

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private FriendMatchManagerData data;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject localLeftHandGameObject;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject localRightHandGameObject;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FriendMatchUIData currentFriendMatchRequest;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator currentThumbsUpHand;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AvatarData localAvatarData;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BowserParticlePool particlePool;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Action<BowserTracking.ExitReason> leaveBowser;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MaterialPropertyBlock materialPropertyBlock;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private NetworkManager networkManager;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BowserTracking tracking;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private KnockoutTournamentManager tournamentManager;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private string returnAfterMatchData;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool isPlayerOne;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string myPlayerName;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private string otherPlayerName;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int otherPlayerRank;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private AvatarData otherPlayerAvatarData;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float requestLifeTimer;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float tutorialDelayTimer;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float thumbPoseTimer;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float showChoiceConfirmedTimer;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float showDeclinedTimer;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float showStartingDuelTimer;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float cancelTimer;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool startingMatch;

		[Token(Token = "0x4000F2F")]
		private const string leftHandName = "LeftHand";

		[Token(Token = "0x4000F30")]
		private const string rightHandName = "RightHand";

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly int openHash;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private readonly int choiceHash;

		[Token(Token = "0x4000F33")]
		private const float thumbOpenMargin = 0.4f;

		[Token(Token = "0x4000F34")]
		private const float fingerClosedMargin = 0.7f;

		[Token(Token = "0x4000F35")]
		private const float thumbAngleMargin = 60f;

		[Token(Token = "0x170000C1")]
		private Animator leftHandAnimator
		{
			[Token(Token = "0x6000E6F")]
			[Address(RVA = "0x11F2344", Offset = "0x11F2344", VA = "0x11F2344")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C2")]
		private Animator rightHandAnimator
		{
			[Token(Token = "0x6000E70")]
			[Address(RVA = "0x11F2360", Offset = "0x11F2360", VA = "0x11F2360")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0x11F237C", Offset = "0x11F237C", VA = "0x11F237C")]
		public FriendMatchManager(FriendMatchManagerData data, BowserPhotonPrefabPool pool, AvatarData localAvatarData, BowserParticlePool particlePool, NetworkManager networkManager, BowserTracking tracking, Action<BowserTracking.ExitReason> leaveBowser, string returnAfterMatchData, KnockoutTournamentManager tournamentManager)
		{
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0x11F2794", Offset = "0x11F2794", VA = "0x11F2794")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0x11F2834", Offset = "0x11F2834", VA = "0x11F2834")]
		private void OnNewFriendMatchUIInstanceInPool(BowserPhotonPrefabPoolEntry instance)
		{
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0x11F294C", Offset = "0x11F294C", VA = "0x11F294C")]
		private void OnLeftHandTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x11F2FB0", Offset = "0x11F2FB0", VA = "0x11F2FB0")]
		private void OnRightHandTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0x11F298C", Offset = "0x11F298C", VA = "0x11F298C")]
		private void OnHandTriggerEnter(Animator localHandAnimator, Collider other, bool isLocalLeft)
		{
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0x11F358C", Offset = "0x11F358C", VA = "0x11F358C")]
		private void OnFistBumpFeedbackRPC(Vector3 spawnPosition, int firstPlayer, int secondPlayer, bool isFirstPlayerLeftHand, bool isSecondPlayerLeftHand)
		{
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0x11F3278", Offset = "0x11F3278", VA = "0x11F3278")]
		private void SpawnMatchUI(Vector3 position, string matchId, int playerOneAvatarViewId, int playerTwoAvatarViewId, int remotePlayerActorNumber)
		{
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0x11F3884", Offset = "0x11F3884", VA = "0x11F3884")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0x11F5260", Offset = "0x11F5260", VA = "0x11F5260")]
		private void StartFriendMatch()
		{
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0x11F522C", Offset = "0x11F522C", VA = "0x11F522C")]
		private void AcceptRequest()
		{
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0x11F54A4", Offset = "0x11F54A4", VA = "0x11F54A4")]
		private void TrySpawningSpectateJoiner()
		{
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0x11F5BF0", Offset = "0x11F5BF0", VA = "0x11F5BF0")]
		private void OnSpawnSpectateJoinerRPC(FriendMatchManagerData.SpawnSpectateData spawnData)
		{
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0x11F5858", Offset = "0x11F5858", VA = "0x11F5858")]
		private void InstantiateSpectateJoiner(FriendMatchManagerData.SpawnSpectateData spawnData)
		{
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0x11F2FF0", Offset = "0x11F2FF0", VA = "0x11F2FF0")]
		private bool IsHandClosed(Animator animator)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0x11F4DBC", Offset = "0x11F4DBC", VA = "0x11F4DBC")]
		private ThumbPose GetThumbPose(Animator animator)
		{
			return default(ThumbPose);
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0x11F5C84", Offset = "0x11F5C84", VA = "0x11F5C84")]
		private AvatarData[] GetAvatarDataComponents(PhotonView photonView, FriendMatchUIData instance)
		{
			return null;
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x11F5EAC", Offset = "0x11F5EAC", VA = "0x11F5EAC")]
		private void OnFriendMatchUISpawned(FriendMatchUIData instance)
		{
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x11F63A4", Offset = "0x11F63A4", VA = "0x11F63A4")]
		private void HideRequest(FriendMatchUIData instance)
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x11F6514", Offset = "0x11F6514", VA = "0x11F6514")]
		private void OnFriendMatchUIDestroyed(FriendMatchUIData instance)
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x11F65E4", Offset = "0x11F65E4", VA = "0x11F65E4")]
		private void OnPlayerLeft(Player otherPlayer)
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x11F3FE8", Offset = "0x11F3FE8", VA = "0x11F3FE8")]
		private void SetUIState(FriendMatchUIData.State newState, FriendMatchUIData instance)
		{
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x11F50F0", Offset = "0x11F50F0", VA = "0x11F50F0")]
		private void SetThumbPoseProgress(SpriteRenderer progressRenderer, float progress)
		{
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x11F53B8", Offset = "0x11F53B8", VA = "0x11F53B8")]
		private void CancelCurrentRequest()
		{
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x11F66D0", Offset = "0x11F66D0", VA = "0x11F66D0")]
		private void OnRequestDeniedRPC(int requestViewID)
		{
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x11F678C", Offset = "0x11F678C", VA = "0x11F678C")]
		private void OnRequestAcceptedRPC(int requestViewID, int sentByPlayer)
		{
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x11F63B0", Offset = "0x11F63B0", VA = "0x11F63B0")]
		private string GetPlayerName(int playerActorNumber)
		{
			return null;
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0x11F3114", Offset = "0x11F3114", VA = "0x11F3114")]
		private string GetPlayerId(int playerActorNumber)
		{
			return null;
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0x11F3724", Offset = "0x11F3724", VA = "0x11F3724")]
		private int GetPlayerRank(int playerActorNumber)
		{
			return default(int);
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x11F6990", Offset = "0x11F6990", VA = "0x11F6990")]
		public void DebugSpawnMatchRequest(AvatarData fakeAvatarData, string matchId)
		{
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x11F6CA0", Offset = "0x11F6CA0", VA = "0x11F6CA0")]
		public void DebugForceAccepted()
		{
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0x11F6CC8", Offset = "0x11F6CC8", VA = "0x11F6CC8")]
		public void DebugAcceptRequest()
		{
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x11F6CF4", Offset = "0x11F6CF4", VA = "0x11F6CF4")]
		public void DebugDenyRequest()
		{
		}
	}
	[Token(Token = "0x2000336")]
	public class FriendMatchManagerData : MonoBehaviour
	{
		[Token(Token = "0x2000337")]
		public struct SpawnSpectateData
		{
			[Token(Token = "0x4000F48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 spawnPosition;

			[Token(Token = "0x4000F49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string matchID;

			[Token(Token = "0x4000F4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int region;

			[Token(Token = "0x4000F4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string playerOneName;

			[Token(Token = "0x4000F4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string playerTwoName;

			[Token(Token = "0x4000F4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int playerOneActorNumber;

			[Token(Token = "0x4000F4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int playerTwoActorNumber;

			[Token(Token = "0x6000E97")]
			[Address(RVA = "0x11F583C", Offset = "0x11F583C", VA = "0x11F583C")]
			public SpawnSpectateData(Vector3 spawnPosition, string matchID, int region, string playerOneName, string playerTwoName, int playerOneActorNumber, int playerTwoActorNumber)
			{
			}
		}

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BowserPhotonPrefabPoolEntry friendMatchUIPrefab;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhotonView photonView;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<int> OnRequestDeniedRPC;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action<int, int> OnRequestAcceptedRPC;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action<SpawnSpectateData> OnSpawnSpectateJoinerRPC;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action<Vector3, int, int, bool, bool> OnFistBumpFeedbackRPC;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float requestLifeTime;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float tutorialDelay;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float thumbPoseConfirmTime;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float showChoiceConfirmedTime;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float displayedDeclinedTime;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float startingDuelTime;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float cancelingTime;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector3 positionOffsetToHead;

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0x11F6D18", Offset = "0x11F6D18", VA = "0x11F6D18")]
		[PunRPC]
		public void BowserDenyFriendMatchRequestRPC(int requestViewID)
		{
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0x11F6D34", Offset = "0x11F6D34", VA = "0x11F6D34")]
		[PunRPC]
		public void BowserAcceptFriendMatchRequestRPC(int requestViewID, int playerActorNumber)
		{
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x11F6D50", Offset = "0x11F6D50", VA = "0x11F6D50")]
		[PunRPC]
		private void BowserSpawnSpectateJoinerRPC(Vector3 spawnPosition, string matchID, int region, string playerOneName, string playerTwoName, int playerOneActorNumber, int playerTwoActorNumber)
		{
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x11F6D9C", Offset = "0x11F6D9C", VA = "0x11F6D9C")]
		[PunRPC]
		private void BowserFistBumpFeedbackRPC(Vector3 spawnPosition, int firstPlayer, int secondPlayer, bool firstPlayerIsLeftHand, bool secondPlayerIsLeftHand)
		{
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x11F6DC0", Offset = "0x11F6DC0", VA = "0x11F6DC0")]
		public FriendMatchManagerData()
		{
		}
	}
	[Token(Token = "0x2000338")]
	public class FriendMatchUIData : MonoBehaviour, IBowserPhotonPrefabPoolListener
	{
		[Token(Token = "0x2000339")]
		public enum State
		{
			[Token(Token = "0x4000F72")]
			Hidden,
			[Token(Token = "0x4000F73")]
			DuelRequest,
			[Token(Token = "0x4000F74")]
			DoingThumbsUp,
			[Token(Token = "0x4000F75")]
			DoingThumbsDown,
			[Token(Token = "0x4000F76")]
			ThumbsUpConfirmed,
			[Token(Token = "0x4000F77")]
			ThumbsDownConfirmed,
			[Token(Token = "0x4000F78")]
			AcceptedWaitingForOpponent,
			[Token(Token = "0x4000F79")]
			StartingDuel,
			[Token(Token = "0x4000F7A")]
			Declined,
			[Token(Token = "0x4000F7B")]
			canceling
		}

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public State state;

		[NonSerialized]
		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KnockoutTournamentMatchInfo tournamentMatchInfo;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string matchID;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int region;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool bothPlayersAccepted;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool declined;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int playerOneActorNumber;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int playerTwoActorNumber;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool playerOneAccepted;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool playerTwoAccepted;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("General")]
		public PhotonView photonView;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject rootUI;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Animator animator;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Color highlightColor;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEngine.Sprite[] rankSprites;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Request Duel")]
		public GameObject requestDuelParent;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject tutorialPopup;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TextMeshPro header;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TextMeshPro statusText;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public TextMeshPro acceptTimeLeftText;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject thumbsUp;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject thumbsDown;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject thumbsUpText;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject thumbsDownText;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public GameObject thumbsUpConfirmed;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject thumbsDownConfirmed;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public SpriteRenderer thumbsUpProgressRenderer;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public SpriteRenderer thumbsDownProgressRenderer;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public SpriteRenderer otherPlayerRank;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Header("Starting Duel")]
		public GameObject startingDuelParent;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public TextMeshPro startingTimeLeftText;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Header("Duel Declined")]
		public GameObject duelDeclinedParent;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Action<FriendMatchUIData> onInstantiate;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Action<FriendMatchUIData> onDestroy;

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x11F6DF4", Offset = "0x11F6DF4", VA = "0x11F6DF4", Slot = "4")]
		public void OnPoolInstantiate()
		{
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x11F6E14", Offset = "0x11F6E14", VA = "0x11F6E14", Slot = "5")]
		public void OnPoolDestroy()
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x11F6E34", Offset = "0x11F6E34", VA = "0x11F6E34")]
		public FriendMatchUIData()
		{
		}
	}
	[Token(Token = "0x200033A")]
	public class GameStateBackAlley : Bowser.Core.IGameState
	{
		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Entrypoint entrypoint;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameStateBackAlleyData data;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BowserTracking tracking;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private StoryManager storyManager;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Teleport teleport;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Alert alert;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private DebugMenu debugMenu;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Action exitBowser;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Action enterElevator;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Action enterScrapperStreet;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PlayerAvatar playerAvatar;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AvatarHandler avatarHandler;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MuteManager muteManager;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayerMenu playerMenu;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PoliceCarController policeCarController;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private SimpleTeleportTrigger elevatorEntrance;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private HighlightHandler highlightHandler;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GrabbableHandler grabbableHandler;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BowserButtonHandler buttonHandler;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private TutorialHandler tutorialHandler;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private NpcHandler npcHandler;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private TokenService tokenService;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private TokenSpawner tokenSpawner;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private TokenHandler tokenHandler;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private CalculateTokenSpawnPositions calculateTokenSpawn;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private BowserPhotonPrefabPool tokenPrefabPool;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private BowserParticlePool particlePool;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private SocialContractManager socialContractManager;

		[Token(Token = "0x4000F98")]
		private const float TRACKINGPING_DURATION = 2f;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float trackingPingTimer;

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x11F6E3C", Offset = "0x11F6E3C", VA = "0x11F6E3C")]
		public GameStateBackAlley(Entrypoint entrypoint, Teleport teleport, Alert alert, DebugMenu debugMenu, Action exitBowser, Action enterElevator, Action enterScrapperStreet, BowserTracking tracking, StoryManager storyManager, TokenService tokenService, CalculateTokenSpawnPositions calculateTokenSpawn)
		{
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x11F6EC8", Offset = "0x11F6EC8", VA = "0x11F6EC8", Slot = "4")]
		public string GetSceneName()
		{
			return null;
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x11F6F08", Offset = "0x11F6F08", VA = "0x11F6F08")]
		public void Start(Entrypoint.Location enteredFrom, GameStateBackAlleyData data)
		{
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x11F79D8", Offset = "0x11F79D8", VA = "0x11F79D8", Slot = "5")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x11F7AB8", Offset = "0x11F7AB8", VA = "0x11F7AB8", Slot = "6")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x11F7BCC", Offset = "0x11F7BCC", VA = "0x11F7BCC", Slot = "7")]
		public void LateTick()
		{
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x11F7BFC", Offset = "0x11F7BFC", VA = "0x11F7BFC")]
		private void SetupRuntimeObject(Component component)
		{
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x11F7D24", Offset = "0x11F7D24", VA = "0x11F7D24", Slot = "8")]
		public void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0x11F7D28", Offset = "0x11F7D28", VA = "0x11F7D28")]
		private void EnterElevator()
		{
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0x11F7D7C", Offset = "0x11F7D7C", VA = "0x11F7D7C")]
		private void EnterScrapperStreet()
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x11F7DD0", Offset = "0x11F7DD0", VA = "0x11F7DD0", Slot = "9")]
		public void ExitByDeepLink()
		{
		}
	}
	[Token(Token = "0x200033B")]
	public class GameStateBackAlleyData : GameStateData
	{
		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool showDebugMenu;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform blastonExitPosition;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform elevatorExitPosition;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform scrapperExitPosition;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject avatarPrefab;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SimpleTeleportTriggerData returnToBlastonTrigger;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SimpleTeleportTriggerData enterScrapperStreetTrigger;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public PoliceCarData policeCarData;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SimpleTeleportTriggerData elevatorEntranceData;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public PlayerMenuData playerMenuPrefab;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TutorialPromptData[] tutorialPrompts;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public BowserButtonData tutorialButton;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public ItemSpawnerData tokenSpawnerData;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public BowserPhotonPrefabPoolData prefabPoolData;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform lenaAmbienceSource;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TokenData[] tokensInArea;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public BowserParticlePoolData particlePoolData;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public SocialContractData socialContractData;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Header("Optional")]
		public NpcData[] NpcData;

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x11F7DF0", Offset = "0x11F7DF0", VA = "0x11F7DF0")]
		public GameStateBackAlleyData()
		{
		}
	}
	[Token(Token = "0x200033C")]
	public class GameStateBar : Bowser.Core.IGameState
	{
		[Token(Token = "0x200033D")]
		private enum BarState
		{
			[Token(Token = "0x4000FE4")]
			Active,
			[Token(Token = "0x4000FE5")]
			LeavingBar,
			[Token(Token = "0x4000FE6")]
			LeavingBowser,
			[Token(Token = "0x4000FE7")]
			Disconnected,
			[Token(Token = "0x4000FE8")]
			LeavingByDeepLink
		}

		[Token(Token = "0x200033E")]
		[CompilerGenerated]
		private sealed class <OnOtherPlayerEnteredDelayed>d__66 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameStateBar <>4__this;

			[Token(Token = "0x170000C3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EC7")]
				[Address(RVA = "0x11FB364", Offset = "0x11FB364", VA = "0x11FB364", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EC9")]
				[Address(RVA = "0x11FB3AC", Offset = "0x11FB3AC", VA = "0x11FB3AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EC4")]
			[Address(RVA = "0x11FB2A4", Offset = "0x11FB2A4", VA = "0x11FB2A4")]
			[DebuggerHidden]
			public <OnOtherPlayerEnteredDelayed>d__66(int <>1__state)
			{
			}

			[Token(Token = "0x6000EC5")]
			[Address(RVA = "0x11FB2CC", Offset = "0x11FB2CC", VA = "0x11FB2CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EC6")]
			[Address(RVA = "0x11FB2D0", Offset = "0x11FB2D0", VA = "0x11FB2D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EC8")]
			[Address(RVA = "0x11FB36C", Offset = "0x11FB36C", VA = "0x11FB36C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000340")]
		[CompilerGenerated]
		private sealed class <DebugSpamDarts>d__76 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float interval;

			[Token(Token = "0x4000FF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameStateBar <>4__this;

			[Token(Token = "0x4000FF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private WaitForSeconds <delay>5__2;

			[Token(Token = "0x170000C5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000ED0")]
				[Address(RVA = "0x11FB58C", Offset = "0x11FB58C", VA = "0x11FB58C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000ED2")]
				[Address(RVA = "0x11FB5D4", Offset = "0x11FB5D4", VA = "0x11FB5D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000ECD")]
			[Address(RVA = "0x11FB49C", Offset = "0x11FB49C", VA = "0x11FB49C")]
			[DebuggerHidden]
			public <DebugSpamDarts>d__76(int <>1__state)
			{
			}

			[Token(Token = "0x6000ECE")]
			[Address(RVA = "0x11FB4C4", Offset = "0x11FB4C4", VA = "0x11FB4C4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000ECF")]
			[Address(RVA = "0x11FB4C8", Offset = "0x11FB4C8", VA = "0x11FB4C8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000ED1")]
			[Address(RVA = "0x11FB594", Offset = "0x11FB594", VA = "0x11FB594", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000FAD")]
		public const int FLOOR_BAR = 1;

		[Token(Token = "0x4000FAE")]
		public const int FLOOR_DANCEFLOOR = 2;

		[Token(Token = "0x4000FAF")]
		public const int FLOOR_TOURNAMENTLOUNGE = 3;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameStateBarData data;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Entrypoint entrypoint;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int floor;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DebugMenu debugMenu;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Fade fade;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Teleport teleport;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Alert alert;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MonoBehaviour coroutineSpinner;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform xrRigTransformDebug;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private NetworkManager networkManager;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BowserTracking tracking;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PerformanceManager performanceManager;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private StoryManager storyManager;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private TokenService tokenService;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private MultiplayerIntegrationManager multiplayerIntegration;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private KnockoutTournamentService knockoutTournamentService;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PlayerAvatar playerAvatar;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BarDebug barDebug;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BowserPhotonPrefabPool photonPrefabPool;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AvatarHandler avatarHandler;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private HighlightHandler highlightHandler;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private GrabbableHandler grabbableHandler;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private BowserButtonHandler buttonHandler;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private FriendMatchManager friendMatchManager;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private BowserParticlePool particlePool;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private PhotonVoiceNetwork photonVoiceNetwork;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private MuteManager muteManager;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private BlockManager blockManager;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private PlayerMenu playerMenu;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private List<IBowserTickable> tickables;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private string returnDataSerialized;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private TokenSpawner tokenSpawner;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private TokenHandler tokenHandler;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private BowserRoomInfo roomInfo;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Bartender bartender;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private DartSpawner dartSpawner;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private DartHandler dartHandler;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private DartBoard dartBoard;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private BowserDiscord discord;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private JukeboxHandler jukeboxHandler;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private PhotoCameraHandler photoCameraHandler;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private RetroBoxHandler retroBoxHandler;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private TokenSlotHandler tokenSlotHandler;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private KnockoutTournamentManager knockoutTournamentManager;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private BarState barState;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private bool applicationIsQuiting;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private WaitForSeconds delayOnNewPlayer;

		[Token(Token = "0x4000FDF")]
		private const float TRACKINGPING_DURATION = 2f;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private float trackingPingTimer;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private List<PlayerAvatar> fakeAvatars;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Coroutine debugSpamDartRoutine;

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x11F7DF8", Offset = "0x11F7DF8", VA = "0x11F7DF8")]
		public GameStateBar(Entrypoint entrypoint, int floor, NetworkManager networkManager, Alert alert, DebugMenu debugMenu, Fade fade, Teleport teleport, Transform xrRigTransformDebug, BowserTracking tracking, PerformanceManager performanceManager, StoryManager storyManager, TokenService tokenService, MultiplayerIntegrationManager multiplayerIntegration, KnockoutTournamentService knockoutTournamentService)
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x11F7F8C", Offset = "0x11F7F8C", VA = "0x11F7F8C", Slot = "4")]
		public string GetSceneName()
		{
			return null;
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x11F8014", Offset = "0x11F8014", VA = "0x11F8014")]
		public void Start(GameStateData baseData)
		{
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x11F99B0", Offset = "0x11F99B0", VA = "0x11F99B0", Slot = "5")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x11F9E98", Offset = "0x11F9E98", VA = "0x11F9E98", Slot = "6")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x11FA124", Offset = "0x11FA124", VA = "0x11FA124", Slot = "7")]
		public void LateTick()
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x11FA2A0", Offset = "0x11FA2A0", VA = "0x11FA2A0", Slot = "8")]
		public void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x11F94A4", Offset = "0x11F94A4", VA = "0x11F94A4")]
		private void SetupRuntimeObject(Component primaryComponent)
		{
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0x11FA2AC", Offset = "0x11FA2AC", VA = "0x11FA2AC")]
		private void OnLeftRoom()
		{
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x11FA314", Offset = "0x11FA314", VA = "0x11FA314")]
		private void OnDisconnected(DisconnectCause disconnectCause)
		{
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0x11FA3BC", Offset = "0x11FA3BC", VA = "0x11FA3BC")]
		private void OnPlayerEnteredBar(Player newPlayer)
		{
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0x11FA3E4", Offset = "0x11FA3E4", VA = "0x11FA3E4")]
		[IteratorStateMachine(typeof(<OnOtherPlayerEnteredDelayed>d__66))]
		private IEnumerator OnOtherPlayerEnteredDelayed()
		{
			return null;
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0x11FA44C", Offset = "0x11FA44C", VA = "0x11FA44C")]
		private void OnOtherPlayerLeftBar(Player otherPlayer)
		{
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0x11FA484", Offset = "0x11FA484", VA = "0x11FA484", Slot = "9")]
		public void ExitByDeepLink()
		{
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0x11FA540", Offset = "0x11FA540", VA = "0x11FA540")]
		public void ExitBar()
		{
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0x11FA48C", Offset = "0x11FA48C", VA = "0x11FA48C")]
		private void LeaveBar(BarState leavingState)
		{
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0x11FA554", Offset = "0x11FA554", VA = "0x11FA554")]
		public void ExitBowser(BowserTracking.ExitReason exitReason)
		{
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0x11FA6BC", Offset = "0x11FA6BC", VA = "0x11FA6BC")]
		private void DebugSpawnFriendMatchRequest()
		{
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0x11FAA14", Offset = "0x11FAA14", VA = "0x11FAA14")]
		private void DebugSpawnMyNextTournamentMatchRequest()
		{
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0x11FA77C", Offset = "0x11FA77C", VA = "0x11FA77C")]
		private void SpawnFakeAvatar()
		{
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0x11FAB0C", Offset = "0x11FAB0C", VA = "0x11FAB0C")]
		private void RemoveFakeAvatar()
		{
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0x11FABFC", Offset = "0x11FABFC", VA = "0x11FABFC")]
		[IteratorStateMachine(typeof(<DebugSpamDarts>d__76))]
		private IEnumerator DebugSpamDarts(float interval)
		{
			return null;
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0x11FAC74", Offset = "0x11FAC74", VA = "0x11FAC74")]
		private void DebugSpawnDart()
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x11FADB4", Offset = "0x11FADB4", VA = "0x11FADB4")]
		private void DebugSpawnSpectateJoiner()
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0x11FB16C", Offset = "0x11FB16C", VA = "0x11FB16C")]
		private void DebugSpawnTournamentCelebration()
		{
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x11FB188", Offset = "0x11FB188", VA = "0x11FB188")]
		private void DebugWinnerEnteredTournamentRoom()
		{
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x11FB1A4", Offset = "0x11FB1A4", VA = "0x11FB1A4")]
		private void DebugJoinCurrentTournament()
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x11FB280", Offset = "0x11FB280", VA = "0x11FB280")]
		private void DebugOnRequestCompleted(bool success)
		{
		}
	}
	[Token(Token = "0x2000341")]
	public class GameStateBarData : GameStateData
	{
		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BowserPhotonPrefabPoolEntry[] runtimeSceneObjects;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform spawnPoint;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Data References")]
		public GameObject avatarPrefab;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BowserPhotonPrefabPoolData prefabPoolData;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SimpleTeleportTriggerData barExitData;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public FriendMatchManagerData friendMatchManagerData;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BowserParticlePoolData particlePoolData;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public RoomSignData roomSignData;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public PlayerMenuData playerMenuPrefab;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public BlockManagerData blockManagerData;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public ItemSpawnerData tokenSpawnerData;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Optional Data")]
		public PerformanceManagerData performanceData;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Toys (Optional)")]
		public PlayerColorPickerData colorPickerData;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public ItemSpawnerData dartSpawnerData;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public DartBoardData dartBoardData;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public JukeboxData jukeboxData;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public BowserDiscordData discordData;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public BartenderData bartenderData;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public PhotoCameraData photoCameraData;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public RetroBoxData[] retroBoxes;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public TokenSlotData[] tokenSlots;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public KnockoutTournamentManagerData knockoutTournamentData;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Debug")]
		public BarDebugData barDebugData;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		public Action onApplicationQuit;

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0x11FB5DC", Offset = "0x11FB5DC", VA = "0x11FB5DC")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x11FB5F8", Offset = "0x11FB5F8", VA = "0x11FB5F8")]
		public GameStateBarData()
		{
		}
	}
	[Token(Token = "0x2000342")]
	public class GameStateElevator : Bowser.Core.IGameState
	{
		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Entrypoint entrypoint;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameStateElevatorData data;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private NetworkManager networkManager;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Teleport teleport;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Fade fade;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private DebugMenu debugMenu;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Alert alert;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MonoBehaviour coroutineSpinner;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Action<BowserRoomInfo> goToBar;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Action goToBackAlley;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BowserTracking tracking;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private StoryManager storyManager;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private KnockoutTournamentService tournamentManager;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private AvatarHandler avatarHandler;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private HighlightHandler highlightHandler;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GrabbableHandler grabbableHandler;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private BowserButtonHandler buttonHandler;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private PlayerAvatar playerAvatar;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private MuteManager muteManager;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private PlayerMenu playerMenu;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private SimpleTeleportTrigger elevatorExitTrigger;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Elevator elevatorHandler;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private ElevatorScreen elevatorScreenHandler;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private ScrollBarHandler scrollBarHandler;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private TokenService tokenService;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private TokenSpawner tokenSpawner;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private TokenHandler tokenHandler;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private BowserPhotonPrefabPool tokenPrefabPool;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private BowserParticlePool particlePool;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private PrivateRoomManager privateRoomManager;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private PlayFabManager playFabManager;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float trackingPingTimer;

		[Token(Token = "0x400102B")]
		private const float trackingPingDuration = 2f;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool leavingElevator;

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0x11FB600", Offset = "0x11FB600", VA = "0x11FB600", Slot = "4")]
		public string GetSceneName()
		{
			return null;
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0x11FB640", Offset = "0x11FB640", VA = "0x11FB640")]
		public GameStateElevator(Entrypoint entrypoint, NetworkManager networkManager, Teleport teleport, Fade fade, Alert alert, DebugMenu debugMenu, Action<BowserRoomInfo> goToBar, Action enterBackAlley, BowserTracking tracking, StoryManager storyManager, TokenService tokenService, KnockoutTournamentService tournamentManager, PlayFabManager playFabManager)
		{
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x11FB6E0", Offset = "0x11FB6E0", VA = "0x11FB6E0")]
		public void Start(GameStateData baseData, int currentFloor, [Optional] int? JoinTargetFloor, [Optional] BowserRoomInfo joinTargetRoom, [Optional] string joinCustomId, [Optional] DisconnectCause? disconnectCause)
		{
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x11FC5D8", Offset = "0x11FC5D8", VA = "0x11FC5D8")]
		private void OnElevatorExitTrigger()
		{
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x11FC5FC", Offset = "0x11FC5FC", VA = "0x11FC5FC", Slot = "5")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x11FC7BC", Offset = "0x11FC7BC", VA = "0x11FC7BC", Slot = "6")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x11FC998", Offset = "0x11FC998", VA = "0x11FC998", Slot = "7")]
		public void LateTick()
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0x11FC9C8", Offset = "0x11FC9C8", VA = "0x11FC9C8")]
		private void SetupRuntimeObject(Component component)
		{
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0x11FCAF0", Offset = "0x11FCAF0", VA = "0x11FCAF0", Slot = "8")]
		public void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0x11FCAF4", Offset = "0x11FCAF4", VA = "0x11FCAF4")]
		private void EnterBar(BowserRoomInfo roomInfo)
		{
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0x11FCB20", Offset = "0x11FCB20", VA = "0x11FCB20")]
		private void EnterBackAlley()
		{
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0x11FCB4C", Offset = "0x11FCB4C", VA = "0x11FCB4C")]
		private void OnLostConnection(DisconnectCause cause)
		{
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0x11FCBA0", Offset = "0x11FCBA0", VA = "0x11FCBA0")]
		private void OnFailedToJoinRoom(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0x11FCBE0", Offset = "0x11FCBE0", VA = "0x11FCBE0", Slot = "9")]
		public void ExitByDeepLink()
		{
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0x11FC420", Offset = "0x11FC420", VA = "0x11FC420")]
		public void RequestJoiningFloor(int floor)
		{
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x11FC45C", Offset = "0x11FC45C", VA = "0x11FC45C")]
		public void RequestJoiningRoom(BowserRoomInfo joinTargetRoom)
		{
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0x11FC43C", Offset = "0x11FC43C", VA = "0x11FC43C")]
		public void RequestCreatingOrJoiningPrivateRoom(string customId)
		{
		}
	}
	[Token(Token = "0x2000343")]
	public class GameStateElevatorData : GameStateData
	{
		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public BowserPhotonPrefabPoolEntry[] runtimeSceneObjects;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform spawnPoint;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject avatarPrefab;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PlayerMenuData playerMenuPrefab;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BowserPhotonPrefabPoolData prefabPoolData;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ElevatorData elevatorData;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ElevatorScreenData elevatorScreenData;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SimpleTeleportTriggerData elevatorExitTrigger;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ItemSpawnerData tokenSpawnerData;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public BowserParticlePoolData particlePoolData;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Debug Settings")]
		public bool showDebugMenu;

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0x11FD300", Offset = "0x11FD300", VA = "0x11FD300")]
		public GameStateElevatorData()
		{
		}
	}
	[Token(Token = "0x2000344")]
	public class GameStateScrapper : Bowser.Core.IGameState
	{
		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Entrypoint entrypoint;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameStateScrapperData data;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BowserTracking tracking;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private StoryManager storyManager;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Teleport teleport;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Alert alert;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private DebugMenu debugMenu;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Fade fade;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Action enterBackAlley;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PlayerAvatar playerAvatar;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AvatarHandler avatarHandler;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HighlightHandler highlightHandler;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MuteManager muteManager;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayerMenu playerMenu;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GrabbableHandler grabbableHandler;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private BowserButtonHandler buttonHandler;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private TokenService tokenService;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private TokenSpawner tokenSpawner;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private TokenHandler tokenHandler;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private CalculateTokenSpawnPositions calculateTokenSpawn;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private PerformanceManager performanceManager;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private BowserPhotonPrefabPool tokenPrefabPool;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private ScrapperMarketDoor scrapperMarketDoor;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private GroundBotHandler groundBotHandler;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private NpcHandler npcHandler;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private SimpleTeleportTrigger enterBackAlleyEntrance;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private BowserParticlePool particlePool;

		[Token(Token = "0x4001053")]
		private const float TRACKINGPING_DURATION = 2f;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float trackingPingTimer;

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0x11FD308", Offset = "0x11FD308", VA = "0x11FD308")]
		public GameStateScrapper(Entrypoint entrypoint, Teleport teleport, Alert alert, DebugMenu debugMenu, Action enterBackAlley, BowserTracking tracking, StoryManager storyManager, Fade fade, TokenService tokenService, CalculateTokenSpawnPositions calculateTokenSpawn, PerformanceManager performanceManager)
		{
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x11FD394", Offset = "0x11FD394", VA = "0x11FD394", Slot = "4")]
		public string GetSceneName()
		{
			return null;
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x11FD3D4", Offset = "0x11FD3D4", VA = "0x11FD3D4")]
		public void Start(Entrypoint.Location enteredFrom, GameStateScrapperData data)
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x11FDCB0", Offset = "0x11FDCB0", VA = "0x11FDCB0", Slot = "5")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x11FDD9C", Offset = "0x11FDD9C", VA = "0x11FDD9C", Slot = "6")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0x11FE2CC", Offset = "0x11FE2CC", VA = "0x11FE2CC", Slot = "7")]
		public void LateTick()
		{
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0x11FE2FC", Offset = "0x11FE2FC", VA = "0x11FE2FC")]
		private void SetupRuntimeObject(Component component)
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0x11FE424", Offset = "0x11FE424", VA = "0x11FE424", Slot = "8")]
		public void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0x11FE428", Offset = "0x11FE428", VA = "0x11FE428")]
		public void ExitBowser()
		{
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0x11FE548", Offset = "0x11FE548", VA = "0x11FE548")]
		private void LeaveScrapper()
		{
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0x11FE59C", Offset = "0x11FE59C", VA = "0x11FE59C", Slot = "9")]
		public void ExitByDeepLink()
		{
		}
	}
	[Token(Token = "0x2000346")]
	public class GameStateScrapperData : GameStateData
	{
		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool showDebugMenu;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform backalleyExitPosition;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform scrapperMarketExitPosition;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SimpleTeleportTriggerData returnToBackalleyTriggerData;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ScrapperMarketDoorData scrapperMarketDoorData;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GroundBotData[] groundBots;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public NpcData[] npcs;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject avatarPrefab;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public PlayerMenuData playerMenuPrefab;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ItemSpawnerData tokenSpawnerData;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BowserPhotonPrefabPoolData prefabPoolData;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TokenData[] tokensInArea;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public BowserParticlePoolData particlePoolData;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public PerformanceManagerData performanceManagerData;

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0x11FE674", Offset = "0x11FE674", VA = "0x11FE674")]
		public GameStateScrapperData()
		{
		}
	}
	[Token(Token = "0x2000347")]
	public class KnockoutTournamentCelebration
	{
		[Token(Token = "0x2000348")]
		private enum CelebrationState
		{
			[Token(Token = "0x4001075")]
			None,
			[Token(Token = "0x4001076")]
			WaitingForWinner,
			[Token(Token = "0x4001077")]
			CelebrationBeingPlayed,
			[Token(Token = "0x4001078")]
			CelebrationShowTrophyOnly,
			[Token(Token = "0x4001079")]
			CelebrationIsOver
		}

		[Token(Token = "0x2000349")]
		private enum TrophyState
		{
			[Token(Token = "0x400107B")]
			OnlyWinnerCanGrab,
			[Token(Token = "0x400107C")]
			EveryoneCanGrab
		}

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int Dissolve;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MaterialPropertyBlock materialPropertyBlock;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private KnockoutTournamentCelebrationData data;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private KnockoutTournamentService tournamentService;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private NetworkManager networkManager;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BowserTracking tracking;

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TrophyState trophyState;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private CelebrationState celebrationState;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string winnerId;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float celebrationTime;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool confettiAnimationIsOver;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		private bool trophyEffectAnimationIsOver;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		private bool trophyDissolveAnimationIsOver;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 initialTrophyPosition;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private string localPlayerId;

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0x11FE67C", Offset = "0x11FE67C", VA = "0x11FE67C")]
		public KnockoutTournamentCelebration(KnockoutTournamentCelebrationData data, GrabbableHandler grabbableHandler, KnockoutTournamentService tournamentService, NetworkManager networkManager, BowserTracking tracking)
		{
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x11FECE0", Offset = "0x11FECE0", VA = "0x11FECE0")]
		private void BowserCelebrationCatchupRPC(int celebrationState, int trophyState, float celebrationTime)
		{
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x11FF204", Offset = "0x11FF204", VA = "0x11FF204")]
		private void TriggerStartCelebrationRPC()
		{
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x11FF274", Offset = "0x11FF274", VA = "0x11FF274")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x11FF698", Offset = "0x11FF698", VA = "0x11FF698")]
		private void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x11FF864", Offset = "0x11FF864", VA = "0x11FF864")]
		private void UpdateTournament(KnockoutTournamentService.KnockoutTournamentData tournamentData)
		{
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x11FEB24", Offset = "0x11FEB24", VA = "0x11FEB24")]
		private void HideAndResetCelebration()
		{
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x11FFB24", Offset = "0x11FFB24", VA = "0x11FFB24")]
		private void OnTrophyRemoteGrabEnd()
		{
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0x11FFB30", Offset = "0x11FFB30", VA = "0x11FFB30")]
		private void OnTrophyLocalGrabEnd(Vector3 throwForce)
		{
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x11FF240", Offset = "0x11FF240", VA = "0x11FF240")]
		private void ActivateCelebration()
		{
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x11FF5E0", Offset = "0x11FF5E0", VA = "0x11FF5E0")]
		private void ActivateTrophyOnly()
		{
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x11FED14", Offset = "0x11FED14", VA = "0x11FED14")]
		private void TickCelebrationAnimation(bool sync = false)
		{
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x11FFA4C", Offset = "0x11FFA4C", VA = "0x11FFA4C")]
		private void SetTrophyDissolve(float dissolveValue)
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0x11FFB5C", Offset = "0x11FFB5C", VA = "0x11FFB5C")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x11FFE3C", Offset = "0x11FFE3C", VA = "0x11FFE3C")]
		public void DebugSpawnCelebrationCatchup()
		{
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x11FFE68", Offset = "0x11FFE68", VA = "0x11FFE68")]
		public void DebugWinnerJoinedRoom()
		{
		}
	}
	[Token(Token = "0x200034A")]
	public class KnockoutTournamentCelebrationData : MonoBehaviour
	{
		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GrabbableData trophyGrabbable;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Renderer trophy;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSystem trophyEffect;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI trophyName;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ParticleSystem[] confetti;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PhotonView photonView;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Action OnTriggerStartCelebrationRPC;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action<int, int, float> OnBowserCelebrationCatchupRPC;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Animation constants")]
		public float trophyDissolveStartTime;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float trophyEffectStartTime;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float confettiStartTime;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float trophyNameFadeStartTime;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float trophyDissolveDuration;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float confettiDuration;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float trophyEffectDuration;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float trophyNameFadeDuration;

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0x11FFED4", Offset = "0x11FFED4", VA = "0x11FFED4")]
		[PunRPC]
		private void BowserTriggerStartCelebrationRPC()
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0x11FFEF0", Offset = "0x11FFEF0", VA = "0x11FFEF0")]
		[PunRPC]
		private void BowserCelebrationCatchupRPC(int celebrationState, int trophyState, float celebrationTime)
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0x11FFF0C", Offset = "0x11FFF0C", VA = "0x11FFF0C")]
		public void DebugPlayAnimation(float time)
		{
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x11FFF30", Offset = "0x11FFF30", VA = "0x11FFF30")]
		public KnockoutTournamentCelebrationData()
		{
		}
	}
	[Token(Token = "0x200034B")]
	public class KnockoutTournamentManager
	{
		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private KnockoutTournamentManagerData data;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BowserPointerHandler laserPointer;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private KnockoutTournamentService tournamentService;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private KnockoutTournamentScreen tournamentScreen;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private KnockoutTournamentCelebration tournamentCelebration;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private NetworkManager networkManager;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PlayerMenu handMenu;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BowserPointerHandlerData.PointerMode lastPointerMode;

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0x11FFF44", Offset = "0x11FFF44", VA = "0x11FFF44")]
		public KnockoutTournamentManager(KnockoutTournamentManagerData data, BowserButtonHandler buttonHandler, GrabbableHandler grabbableHandler, NetworkManager networkManager, PlayerAvatar playerAvatar, PlayerMenu handMenu, KnockoutTournamentService knockoutTournamentService, Action<BowserTracking.ExitReason> exitBowser, string returnAfterMatchData, string tournamentCode, BowserTracking tracking)
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x1200EC4", Offset = "0x1200EC4", VA = "0x1200EC4")]
		private void SendSyncTournamentDataRequest(float delay = 1f)
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0x1200FC0", Offset = "0x1200FC0", VA = "0x1200FC0")]
		private void OnSyncTournamentDataRequested(float delay)
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0x1200FE8", Offset = "0x1200FE8", VA = "0x1200FE8")]
		private void OnPlayerEnteredRoom(Player _)
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0x1201010", Offset = "0x1201010", VA = "0x1201010")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0x12012FC", Offset = "0x12012FC", VA = "0x12012FC")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0x12015E8", Offset = "0x12015E8", VA = "0x12015E8")]
		public void OnTournamentMatchStarting()
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0x12015F0", Offset = "0x12015F0", VA = "0x12015F0")]
		private void OnHandMenuAppear()
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0x120161C", Offset = "0x120161C", VA = "0x120161C")]
		private void OnHandMenuHidden()
		{
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0x1201640", Offset = "0x1201640", VA = "0x1201640")]
		public KnockoutTournamentMatchInfo GetMatch(string matchID)
		{
			return null;
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0x12017F0", Offset = "0x12017F0", VA = "0x12017F0")]
		public KnockoutTournamentMatchInfo GetMyNextTournamentMatch()
		{
			return null;
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0x1201824", Offset = "0x1201824", VA = "0x1201824")]
		public KnockoutTournamentMatchInfo GetMyNextTournamentMatchWith(string playerOne, string playerTwo)
		{
			return null;
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0x12016F4", Offset = "0x12016F4", VA = "0x12016F4")]
		private KnockoutTournamentMatchInfo GetMatchInfo(KnockoutTournamentService.KnockoutTournamentData.KnockoutMatch match)
		{
			return null;
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0x1201A58", Offset = "0x1201A58", VA = "0x1201A58")]
		public void DebugSpawnCelebrationCatchup()
		{
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0x1201A90", Offset = "0x1201A90", VA = "0x1201A90")]
		public void DebugWinnerJoinedRoom()
		{
		}
	}
	[Token(Token = "0x200034C")]
	public class KnockoutTournamentManagerData : MonoBehaviour
	{
		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BowserPointerHandlerData pointerData;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KnockoutTournamentScreenData screenData;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public KnockoutTournamentCelebrationData celebrationData;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PhotonView photonView;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action<float> OnSyncTournamentDataRequested;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action<string> debugServiceEnterPlayer;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Action debugServiceStartTournament;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action<KnockoutTournamentBracketType, int, bool> debugFinishMatch;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Action<KnockoutTournamentBracketType, int> debugStartMatch;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Action<bool> debugForceNextRequestToFail;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Action<string> debugJson;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Action debugStopPooling;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Action<string> debugSetSubscriptionId;

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x1201AA8", Offset = "0x1201AA8", VA = "0x1201AA8")]
		[PunRPC]
		private void BowserRequestSyncTournamentDataRPC(float delay)
		{
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x1201AC4", Offset = "0x1201AC4", VA = "0x1201AC4")]
		public void DebugServiceEnterPlayer(string playerId)
		{
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0x1201AE0", Offset = "0x1201AE0", VA = "0x1201AE0")]
		public void DebugServiceStartTournament()
		{
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x1201AFC", Offset = "0x1201AFC", VA = "0x1201AFC")]
		public void DebugStartMatch(KnockoutTournamentBracketType bracket, int matchIndex)
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x1201B18", Offset = "0x1201B18", VA = "0x1201B18")]
		public void DebugFinishMatch(KnockoutTournamentBracketType matchBracket, int matchIndex, bool firstPlayerWinner)
		{
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x1201B38", Offset = "0x1201B38", VA = "0x1201B38")]
		public void DebugForceNextRequestToFail(bool onlyNonGetRequests)
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x1201B58", Offset = "0x1201B58", VA = "0x1201B58")]
		public void DebugJson(string json)
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x1201B74", Offset = "0x1201B74", VA = "0x1201B74")]
		public void DebugStopPooling()
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x1201B90", Offset = "0x1201B90", VA = "0x1201B90")]
		public void DebugSetSubscriptionId(string subscriptionId)
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x1201BAC", Offset = "0x1201BAC", VA = "0x1201BAC")]
		public KnockoutTournamentManagerData()
		{
		}
	}
	[Token(Token = "0x200034D")]
	public class KnockoutTournamentPlayerEntryData : MonoBehaviour
	{
		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI playerIndex;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI playerName;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image numberBackground;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BowserButtonData kickButton;

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x1201BB4", Offset = "0x1201BB4", VA = "0x1201BB4")]
		public KnockoutTournamentPlayerEntryData()
		{
		}
	}
	[Token(Token = "0x200034E")]
	public class KnockoutTournamentScreen
	{
		[Token(Token = "0x200034F")]
		private enum Popup
		{
			[Token(Token = "0x40010B5")]
			None,
			[Token(Token = "0x40010B6")]
			KickPopup,
			[Token(Token = "0x40010B7")]
			ForfeitPopup,
			[Token(Token = "0x40010B8")]
			WaitingForServerPopup,
			[Token(Token = "0x40010B9")]
			PlayerListPopup,
			[Token(Token = "0x40010BA")]
			StartTournamentPopup,
			[Token(Token = "0x40010BB")]
			ForfeitConfirmedPopup,
			[Token(Token = "0x40010BC")]
			CancelTournamentPopup,
			[Token(Token = "0x40010BD")]
			StartNewTournamentPopup,
			[Token(Token = "0x40010BE")]
			ErrorPopup,
			[Token(Token = "0x40010BF")]
			RejoinMatchPopup
		}

		[Token(Token = "0x40010A6")]
		private const int MIN_PARTICIPANTS = 2;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private KnockoutTournamentScreenData data;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private KnockoutTournamentService knockoutService;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BowserButtonHandler buttonHandler;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<BowserButtonData> pageButtons;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float tournamentTimeRemaining;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string pendingKickTarget;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Popup displayedPopup;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Action<BowserTracking.ExitReason> exitBowser;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string returnAfterMatchData;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BowserTracking tracking;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<KnockoutTournamentService.KnockoutTournamentData.KnockoutMatch> allMatchesCache;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private KnockoutTournamentMatchInfo rejoinMatchInfo;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private NetworkingRegion rejoinMatchRegion;

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x1200298", Offset = "0x1200298", VA = "0x1200298")]
		public KnockoutTournamentScreen(KnockoutTournamentScreenData data, BowserButtonHandler buttonHandler, KnockoutTournamentService knockoutService, Action<BowserTracking.ExitReason> exitBowser, string returnAfterMatchData, string tournamentCode, BowserTracking tracking)
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x1202090", Offset = "0x1202090", VA = "0x1202090")]
		private void OnTournamentUpdateFail()
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x1201BC4", Offset = "0x1201BC4", VA = "0x1201BC4")]
		private void SetupPlayerEntries(KnockoutTournamentPlayerEntryData[] playerEntries, bool isPopup)
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x1201DF0", Offset = "0x1201DF0", VA = "0x1201DF0")]
		private void SetupMatchButtonsForBracket(KnockoutTournamentScreenMatch[] matches, KnockoutTournamentBracketType bracket)
		{
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0x120150C", Offset = "0x120150C", VA = "0x120150C")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0x1201074", Offset = "0x1201074", VA = "0x1201074")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0x12020D0", Offset = "0x12020D0", VA = "0x12020D0")]
		private void OnKickButtonPressed(int playerIndex)
		{
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0x1202730", Offset = "0x1202730", VA = "0x1202730")]
		private void OnEnterButtonPressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0x1202830", Offset = "0x1202830", VA = "0x1202830")]
		private void OnLeaveButtonPressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0x120294C", Offset = "0x120294C", VA = "0x120294C")]
		private void OnStartButtonPressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x1202998", Offset = "0x1202998", VA = "0x1202998")]
		private void OnCanceledPressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0x1202734", Offset = "0x1202734", VA = "0x1202734")]
		private void RunAddPlayerRequest()
		{
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x1202890", Offset = "0x1202890", VA = "0x1202890")]
		private void RunRemovePlayerFromTournamentRequest(string playerId)
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x1202D8C", Offset = "0x1202D8C", VA = "0x1202D8C")]
		private void RunForfeitFromTournamentRequest(string playerId)
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x1202E48", Offset = "0x1202E48", VA = "0x1202E48")]
		private void OnReplayMatchButtonPressed(KnockoutTournamentBracketType bracket, int matchIndex)
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x12030B4", Offset = "0x12030B4", VA = "0x12030B4")]
		private void OnWatchMatchButtonPressed(KnockoutTournamentBracketType bracket, int matchIndex)
		{
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0x12031E4", Offset = "0x12031E4", VA = "0x12031E4")]
		private void OnCancelTournamentPressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0x1203230", Offset = "0x1203230", VA = "0x1203230")]
		private void OnPlayersButtonPressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0x120327C", Offset = "0x120327C", VA = "0x120327C")]
		private void OnForfeitPressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0x12032C8", Offset = "0x12032C8", VA = "0x12032C8")]
		private void OnConfirmActionPressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0x120397C", Offset = "0x120397C", VA = "0x120397C")]
		private void OnStartNewTournamentButtonPressed(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0x12021E0", Offset = "0x12021E0", VA = "0x12021E0")]
		private void ShowPopup(Popup newPopup, string popupData = "")
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0x12039C8", Offset = "0x12039C8", VA = "0x12039C8")]
		private void SetPageButtonsEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0x1203AFC", Offset = "0x1203AFC", VA = "0x1203AFC")]
		private void OnTournamentUpdate(KnockoutTournamentService.KnockoutTournamentData tournament)
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0x1203AAC", Offset = "0x1203AAC", VA = "0x1203AAC")]
		private void RefreshStartButton(int participantCount)
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0x1204DF0", Offset = "0x1204DF0", VA = "0x1204DF0")]
		private void ToggleRejoinPopup(KnockoutTournamentService.KnockoutTournamentData tournament)
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0x1204428", Offset = "0x1204428", VA = "0x1204428")]
		private void UpdatePlayerEntries(KnockoutTournamentService.KnockoutTournamentData tournament, KnockoutTournamentPlayerEntryData[] playerEntries, string localPlayerId, bool isOrganizer)
		{
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0x12046E0", Offset = "0x12046E0", VA = "0x12046E0")]
		private void UpdateMatchBracket(List<KnockoutTournamentService.KnockoutTournamentData.KnockoutMatch> matches, KnockoutTournamentScreenMatch[] matchDisplays, bool tournamentFinished = false)
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0x1205078", Offset = "0x1205078", VA = "0x1205078")]
		private void OnRequestCompleted(bool success)
		{
		}
	}
	[Token(Token = "0x2000354")]
	public class KnockoutTournamentScreenData : MonoBehaviour
	{
		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Syncing")]
		public GameObject syncingParent;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject failedGettingLatestWarning;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Player List")]
		public Color localPlayerColor;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color defaultPlayerColor;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Sign Up")]
		public GameObject signUpParent;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform organizerEnterButtonPosition;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BowserButtonData enterButton;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public BowserButtonData leaveButton;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BowserButtonData startButton;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject organizerNameContainer;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public TextMeshProUGUI organizerText;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TextMeshProUGUI shareRoomCode;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color shareRoomCodeColor;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public KnockoutTournamentPlayerEntryData[] playerEntries;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Running")]
		public TextMeshProUGUI runningTournamentOrganizerText;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public TextMeshProUGUI timerText;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Transform timerContainer;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public BowserButtonData playersButton;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public BowserButtonData forfeitButton;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public BowserButtonData cancelTournamentButton;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Color defaultPlayerBoxColor;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Color loserBoxColor;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Color defaultNameTextColor;

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Color loserNameColor;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Color forfeitedNameColor;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Color forfeitedBoxColor;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public Color localPlayerBracketColor;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public GameObject runningTournamentParent;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public GameObject tournamentHeader;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public KnockoutTournamentScreenMatch[] quarterFinals;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public KnockoutTournamentScreenMatch[] SemiFinals;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public KnockoutTournamentScreenMatch[] finals;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[Header("Finished")]
		public TextMeshProUGUI finishedTournamentOrganizerText;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public BowserButtonData startNewTournamentButton;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public Transform finishedTextContainer;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public GameObject tournamentWinner;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public TextMeshProUGUI tournamentWinnerName;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[Header("Popup References")]
		public GameObject popupFadePlane;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[Header("Waiting for Request Popup")]
		public GameObject WaitingForRequestPopup;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public float loadingSymbolSpeed;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public Transform loadingSymbol;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[Header("Kick Player Popup")]
		public Color kickPopupPlayerNameColor;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[Header("Generic Confirmation Popup")]
		public GameObject confirmationPopup;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public TextMeshProUGUI confirmationPopupTitle;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public TextMeshProUGUI confirmationPopupMessage;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public BowserButtonData confirmActionButton;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public BowserButtonData cancelActionButton;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[Header("Forfeit Confirmed Popup")]
		public GameObject forfeitConfirmedPopup;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public BowserButtonData closeForfeitConfirmedButton;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[Header("Player list Popup")]
		public GameObject playerListPopup;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public BowserButtonData closePlayerListPopupButton;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public KnockoutTournamentPlayerEntryData[] playerEntriesPopup;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		[Header("Error Popup")]
		public GameObject errorPopup;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public BowserButtonData closeErrorPopupButton;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public TextMeshProUGUI tournamentCodeForErrorPopup;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		[Header("Rejoin Popup")]
		public GameObject rejoinPopup;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public BowserButtonData rejoinButton;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public BowserButtonData rejoinForfeitButton;

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0x1205350", Offset = "0x1205350", VA = "0x1205350")]
		public KnockoutTournamentScreenData()
		{
		}
	}
	[Token(Token = "0x2000355")]
	public class KnockoutTournamentScreenMatch : MonoBehaviour
	{
		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject vsText;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject fistBumpPrompt;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BowserButtonData watchButton;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BowserButtonData replayButton;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Combatant 1")]
		public TextMeshProUGUI combatant1Name;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI combatant1ScoreText;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Image combatant1Box;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject combatant1WinnerGlow;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Combatant 2")]
		public TextMeshProUGUI combatant2Name;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TextMeshProUGUI combatant2ScoreText;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Image combatant2Box;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject combatant2WinnerGlow;

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0x120539C", Offset = "0x120539C", VA = "0x120539C")]
		public KnockoutTournamentScreenMatch()
		{
		}
	}
	[Token(Token = "0x2000356")]
	public enum KnockoutTournamentBracketType
	{
		[Token(Token = "0x4001110")]
		Quarter,
		[Token(Token = "0x4001111")]
		Semi,
		[Token(Token = "0x4001112")]
		Final
	}
	[Token(Token = "0x2000357")]
	public class KnockoutTournamentService
	{
		[Serializable]
		[Token(Token = "0x2000358")]
		public class KnockoutTournamentData
		{
			[Token(Token = "0x2000359")]
			public enum State
			{
				[Token(Token = "0x400112F")]
				SignUp,
				[Token(Token = "0x4001130")]
				Running,
				[Token(Token = "0x4001131")]
				Finished,
				[Token(Token = "0x4001132")]
				Celebrated
			}

			[Serializable]
			[Token(Token = "0x200035A")]
			public class KnockoutMatch
			{
				[Token(Token = "0x200035B")]
				public enum State
				{
					[Token(Token = "0x4001141")]
					WaitingForCombatants,
					[Token(Token = "0x4001142")]
					CombatantsSelected,
					[Token(Token = "0x4001143")]
					Playing,
					[Token(Token = "0x4001144")]
					Finished,
					[Token(Token = "0x4001145")]
					FinishedDueToBye
				}

				[Token(Token = "0x4001133")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public State state;

				[Token(Token = "0x4001134")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public string combatant1;

				[Token(Token = "0x4001135")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public string combatant2;

				[Token(Token = "0x4001136")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				public string combatant1Name;

				[Token(Token = "0x4001137")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
				public string combatant2Name;

				[Token(Token = "0x4001138")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
				public string winner;

				[Token(Token = "0x4001139")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
				public string matchId;

				[Token(Token = "0x400113A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
				public string replayUri;

				[Token(Token = "0x400113B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
				public int combatant1Score;

				[Token(Token = "0x400113C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
				public int combatant2Score;

				[Token(Token = "0x400113D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
				public NetworkingRegion region;

				[Token(Token = "0x400113E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
				public bool isForfeitedOrKicked;

				[Token(Token = "0x400113F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
				public bool winDueToBye;

				[Token(Token = "0x6000F7D")]
				[Address(RVA = "0x1206354", Offset = "0x1206354", VA = "0x1206354")]
				public KnockoutMatch()
				{
				}
			}

			[Token(Token = "0x400111E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string roomName;

			[Token(Token = "0x400111F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string tournamentCode;

			[Token(Token = "0x4001120")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string organizer;

			[Token(Token = "0x4001121")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string organizerName;

			[Token(Token = "0x4001122")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string gameplayRules;

			[Token(Token = "0x4001123")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string winnerId;

			[Token(Token = "0x4001124")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public State state;

			[Token(Token = "0x4001125")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public int size;

			[Token(Token = "0x4001126")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public List<string> participants;

			[Token(Token = "0x4001127")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public List<string> participantNames;

			[Token(Token = "0x4001128")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Dictionary<string, KnockoutMatch> matchesById;

			[Token(Token = "0x4001129")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public List<KnockoutMatch> quarterFinals;

			[Token(Token = "0x400112A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public List<KnockoutMatch> semiFinals;

			[Token(Token = "0x400112B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public List<KnockoutMatch> finals;

			[Token(Token = "0x400112C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public KnockoutMatch myNextMatch;

			[Token(Token = "0x400112D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public float tournamentTimeRemaining;

			[Token(Token = "0x6000F7C")]
			[Address(RVA = "0x1205C1C", Offset = "0x1205C1C", VA = "0x1205C1C")]
			public KnockoutTournamentData()
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000364")]
		[CompilerGenerated]
		private struct <ExecuteTask>d__57<TResult> : IAsyncStateMachine
		{
			[Token(Token = "0x400115A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400115B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x400115C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Task<TResult> task;

			[Token(Token = "0x400115D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<TResult> onSuccess;

			[Token(Token = "0x400115E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool makesCacheDirty;

			[Token(Token = "0x400115F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public KnockoutTournamentService <>4__this;

			[Token(Token = "0x4001160")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action onFailed;

			[Token(Token = "0x4001161")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<bool> onComplete;

			[Token(Token = "0x4001162")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TaskAwaiter<TResult> <>u__1;

			[Token(Token = "0x6000F94")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000F95")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4001113")]
		private const int UpdateTournamentPeriod = 60;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<string, bool> tournamentAlreadyAddedToList;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<KnockoutTournamentData> myTournaments;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Action<KnockoutTournamentData> onTournamentUpdated;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Action onTournamentUpdateFailed;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private IKnockoutTournamentClient tournamentClient;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private KnockoutTournamentData latestTournamentData;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BowserTracking tracking;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string subscriptionTournamentId;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float updateTimer;

		[Token(Token = "0x170000C7")]
		public string CurrentTournamentId
		{
			[Token(Token = "0x6000F4D")]
			[Address(RVA = "0x12053A4", Offset = "0x12053A4", VA = "0x12053A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C8")]
		public string CurrentTournamentCode
		{
			[Token(Token = "0x6000F4E")]
			[Address(RVA = "0x11FF5C4", Offset = "0x11FF5C4", VA = "0x11FF5C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C9")]
		public KnockoutTournamentData LatestTournamentData
		{
			[Token(Token = "0x6000F4F")]
			[Address(RVA = "0x12053AC", Offset = "0x12053AC", VA = "0x12053AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CA")]
		public bool IsTournamentDataDirty
		{
			[Token(Token = "0x6000F50")]
			[Address(RVA = "0x12053B4", Offset = "0x12053B4", VA = "0x12053B4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F51")]
			[Address(RVA = "0x12053BC", Offset = "0x12053BC", VA = "0x12053BC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0x12053C8", Offset = "0x12053C8", VA = "0x12053C8")]
		public KnockoutTournamentService(IKnockoutTournamentClient tournamentClient, BowserTracking tracking)
		{
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x1200E30", Offset = "0x1200E30", VA = "0x1200E30")]
		public void FetchTournamentIdAndStartUpdates(string tournamentCode)
		{
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0x11FEA00", Offset = "0x11FEA00", VA = "0x11FEA00")]
		public void SubscribeToTournamentUpdates(Action<KnockoutTournamentData> onTournamentUpdate, [Optional] Action onTournamentUpdateFail)
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0x11FFD30", Offset = "0x11FFD30", VA = "0x11FFD30")]
		public void UnsubscribeToTournamentUpdates(Action<KnockoutTournamentData> onTournamentUpdate, [Optional] Action onTournamentUpdateFail)
		{
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0x11FF260", Offset = "0x11FF260", VA = "0x11FF260")]
		public void ScheduleUpdateTournament(float delay = 1f)
		{
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0x12055B8", Offset = "0x12055B8", VA = "0x12055B8")]
		private void UpdateTournament()
		{
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0x1201674", Offset = "0x1201674", VA = "0x1201674")]
		public KnockoutTournamentData.KnockoutMatch GetMatch(string matchID)
		{
			return null;
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0x1205598", Offset = "0x1205598", VA = "0x1205598")]
		private void SendUpdate()
		{
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0x12057DC", Offset = "0x12057DC", VA = "0x12057DC")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0x1205830", Offset = "0x1205830", VA = "0x1205830")]
		private KnockoutTournamentData ParseTournamentResponse(KnockoutTournamentClient.GetTournamentResponse response)
		{
			return null;
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0x1205E38", Offset = "0x1205E38", VA = "0x1205E38")]
		private void ParseMatches(ref List<KnockoutTournamentData.KnockoutMatch> matches, List<KnockoutTournamentClient.TournamentRound> responseRounds, int roundIndex, KnockoutTournamentData tournamentData)
		{
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0x1205D7C", Offset = "0x1205D7C", VA = "0x1205D7C")]
		private KnockoutTournamentData.State ParseTournamentState(string responseState)
		{
			return default(KnockoutTournamentData.State);
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0x120510C", Offset = "0x120510C", VA = "0x120510C")]
		public void ResyncTournamentData()
		{
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0x1202120", Offset = "0x1202120", VA = "0x1202120")]
		public string GetParticipantId(int playerIndex)
		{
			return null;
		}

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0x1202180", Offset = "0x1202180", VA = "0x1202180")]
		public string GetParticipantName(int playerIndex)
		{
			return null;
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0x11FF940", Offset = "0x11FF940", VA = "0x11FF940")]
		public string GetWinnerName()
		{
			return null;
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0x12063AC", Offset = "0x12063AC", VA = "0x12063AC")]
		private void AddPlayer(string playerId, string playerName)
		{
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0x1206540", Offset = "0x1206540", VA = "0x1206540")]
		private void RemovePlayer(string playerId)
		{
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0x1202F80", Offset = "0x1202F80", VA = "0x1202F80")]
		public KnockoutTournamentData.KnockoutMatch GetTournamentMatch(KnockoutTournamentBracketType bracket, int matchIndex)
		{
			return null;
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0x1203098", Offset = "0x1203098", VA = "0x1203098")]
		public string GetTournamentGameplayRules()
		{
			return null;
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0x120183C", Offset = "0x120183C", VA = "0x120183C")]
		public KnockoutTournamentMatchInfo GetMyNextTournamentMatch(string playerOne, string playerTwo)
		{
			return null;
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0x1206650", Offset = "0x1206650", VA = "0x1206650")]
		public void DebugFinishMatch(KnockoutTournamentBracketType bracket, int matchIndex, bool firstPlayerWinner)
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0x1206834", Offset = "0x1206834", VA = "0x1206834")]
		public void DebugJson(string json)
		{
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0x12068C4", Offset = "0x12068C4", VA = "0x12068C4")]
		public void CreateTournament(Action<KnockoutTournamentClient.CreateTournamentResponse> onSuccess, Action onFailed)
		{
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0x1206AB0", Offset = "0x1206AB0", VA = "0x1206AB0")]
		public void GetActiveTournaments(Action<List<KnockoutTournamentData>> onSuccess, Action onFailed)
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0x12056E8", Offset = "0x12056E8", VA = "0x12056E8")]
		public void GetTournamentById(string resultTournamentId, Action<KnockoutTournamentClient.GetTournamentResponse> onSuccess, Action onFailed)
		{
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0x12054A4", Offset = "0x12054A4", VA = "0x12054A4")]
		public void GetTournamentByAccessCode(string code, Action<KnockoutTournamentClient.GetTournamentResponse> onSuccess, Action onFailed)
		{
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0x12029F8", Offset = "0x12029F8", VA = "0x12029F8")]
		public void AddPlayerRequest(string playerId, string playerName, Action<bool> onComplete)
		{
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0x1202BCC", Offset = "0x1202BCC", VA = "0x1202BCC")]
		public void RemovePlayerRequest(string playerId, Action<bool> onComplete)
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0x12035DC", Offset = "0x12035DC", VA = "0x12035DC")]
		public void StartTournamentAndGetResultRequest(Action<bool> onComplete)
		{
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0x11FF4CC", Offset = "0x11FF4CC", VA = "0x11FF4CC")]
		public void ReportCelebrationPlayed()
		{
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0x1203794", Offset = "0x1203794", VA = "0x1203794")]
		public void ReCreateTournament(Action<bool> onComplete)
		{
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0x1206CD4", Offset = "0x1206CD4", VA = "0x1206CD4")]
		public void StartTournamentMatch(string matchID, int region)
		{
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0x1206E70", Offset = "0x1206E70", VA = "0x1206E70")]
		private void UpdateTournamentRequest(Action<bool> onComplete)
		{
		}

		[Token(Token = "0x6000F74")]
		private void ExecuteMutatingTask<TResult>(Task<TResult> task, Action<TResult> onSuccess, Action onFailed, [Optional] Action<bool> onComplete)
		{
		}

		[Token(Token = "0x6000F75")]
		private void ExecuteGetTask<TResult>(Task<TResult> task, Action<TResult> onSuccess, Action onFailed, [Optional] Action<bool> onComplete)
		{
		}

		[Token(Token = "0x6000F76")]
		[AsyncStateMachine(typeof(<ExecuteTask>d__57<>))]
		private void ExecuteTask<TResult>(Task<TResult> task, bool makesCacheDirty, Action<TResult> onSuccess, Action onFailed, [Optional] Action<bool> onComplete)
		{
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0x1206FE8", Offset = "0x1206FE8", VA = "0x1206FE8")]
		public void DebugStopPoolingForUpdates()
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0x1206FF0", Offset = "0x1206FF0", VA = "0x1206FF0")]
		public void DebugSetSubscriptionId(string subscriptionId)
		{
		}
	}
	[Token(Token = "0x2000365")]
	public class PlayFabManager
	{
		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PlayFabLoginData playfabLoginData;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PlayFabLoginHandler loginHandler;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IPlayFabLoginFacade playFabLoginFacade;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PlayFabCloudScriptInvocationHandler playFabCloudScriptInvocationHandler;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private StoryData storyEventData;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PlayFabStoryHandler playFabStoryEventHandler;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BlastonApiTokenData blastonApiTokenData;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BlastonApiTokenHandler blastonApiTokenHandler;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PlatformLoginData platformLoginData;

		[Token(Token = "0x170000CB")]
		public bool IsLoggedIn
		{
			[Token(Token = "0x6000F96")]
			[Address(RVA = "0x1207BB8", Offset = "0x1207BB8", VA = "0x1207BB8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CC")]
		public bool StoryDataReady
		{
			[Token(Token = "0x6000F97")]
			[Address(RVA = "0x1207BDC", Offset = "0x1207BDC", VA = "0x1207BDC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0x1207C00", Offset = "0x1207C00", VA = "0x1207C00")]
		public PlayFabManager(PlayFabManagerData data)
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0x12080E8", Offset = "0x12080E8", VA = "0x12080E8")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0x1208138", Offset = "0x1208138", VA = "0x1208138")]
		public StoryData GetStoryData()
		{
			return null;
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0x1208140", Offset = "0x1208140", VA = "0x1208140")]
		public BlastonApiTokenData GetBlastonApiTokenData()
		{
			return null;
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0x1208148", Offset = "0x1208148", VA = "0x1208148")]
		public PlatformLoginData GetPlatformLoginData()
		{
			return null;
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0x1208150", Offset = "0x1208150", VA = "0x1208150")]
		public string GetPlayFabPlayerID()
		{
			return null;
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0x12081B0", Offset = "0x12081B0", VA = "0x12081B0")]
		public void SendStoryTaskUpdate(string storyTaskId, int progressValue, bool isDelta)
		{
		}
	}
	[Token(Token = "0x2000366")]
	public class PlayFabManagerData : MonoBehaviour
	{
		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0x1208240", Offset = "0x1208240", VA = "0x1208240")]
		public PlayFabManagerData()
		{
		}
	}
	[Token(Token = "0x2000367")]
	public class ScrapperMarketDoor
	{
		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ScrapperMarketDoorData data;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Action exitBowser;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private StoryManager storyManager;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PlayerAvatar localPlayer;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Locale locale;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform screen;

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0x11FDAD4", Offset = "0x11FDAD4", VA = "0x11FDAD4")]
		public ScrapperMarketDoor(ScrapperMarketDoorData data, Action exitBowser, StoryManager storyManager, PlayerAvatar playerAvatar)
		{
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0x12084CC", Offset = "0x12084CC", VA = "0x12084CC")]
		private void OnTeleportedToDoor()
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0x1208248", Offset = "0x1208248", VA = "0x1208248")]
		private void EnterState(ScrapperMarketDoorData.State newState)
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0x11FE258", Offset = "0x11FE258", VA = "0x11FE258")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0x1208504", Offset = "0x1208504", VA = "0x1208504")]
		private void OnScanComplete()
		{
		}
	}
	[Token(Token = "0x2000369")]
	public class ScrapperMarketDoorData : MonoBehaviour, ITeleportTrigger
	{
		[Token(Token = "0x200036A")]
		public enum State
		{
			[Token(Token = "0x4001184")]
			Idle,
			[Token(Token = "0x4001185")]
			Scanning,
			[Token(Token = "0x4001186")]
			EntryDenied,
			[Token(Token = "0x4001187")]
			EntryDeniedWrongAvatar,
			[Token(Token = "0x4001188")]
			EntryApproved
		}

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action OnAddHighlight;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action OnRemoveHighlight;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action OnTeleportedToTrigger;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject highlightGameObject;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshPro screenText;

		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject lockedSymbol;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject unlockedSymbol;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ParticleSystem scanEffect;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float scanTime;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool debugAlwaysAllow;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Requirements to pass")]
		public string objectiveIdToPass;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int[] avatarIdsToPass;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string partOfAct;

		[NonSerialized]
		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public State state;

		[NonSerialized]
		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float scanTimer;

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0x120898C", Offset = "0x120898C", VA = "0x120898C", Slot = "4")]
		public void AddHighlight()
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0x12089AC", Offset = "0x12089AC", VA = "0x12089AC", Slot = "5")]
		public void RemoveHighlight()
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0x12089CC", Offset = "0x12089CC", VA = "0x12089CC", Slot = "6")]
		public void TeleportedToTrigger(Vector3 newPosition)
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0x12089F0", Offset = "0x12089F0", VA = "0x12089F0")]
		public ScrapperMarketDoorData()
		{
		}
	}
	[Token(Token = "0x200036B")]
	public class SpectateFriendMatch : IBowserTickable
	{
		[Token(Token = "0x200036C")]
		private enum State
		{
			[Token(Token = "0x4001199")]
			StartupDelay,
			[Token(Token = "0x400119A")]
			Active,
			[Token(Token = "0x400119B")]
			Grabbed,
			[Token(Token = "0x400119C")]
			Hiding,
			[Token(Token = "0x400119D")]
			Hidden
		}

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SpectateFriendMatchData data;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string matchID;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int networkRegion;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string playerOneName;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string playerTwoName;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double spawnTimestamp;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int playerOneActorNumber;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int playerTwoActorNumber;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string returnAfterMatchData;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Action<BowserTracking.ExitReason> exitBowser;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float activeTimerTarget;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float hidingTimerTarget;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool pendingOwnerRequest;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private State state;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly int openHash;

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0x1208A6C", Offset = "0x1208A6C", VA = "0x1208A6C")]
		public SpectateFriendMatch(SpectateFriendMatchData data, Action<BowserTracking.ExitReason> exitBowser)
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0x1208B9C", Offset = "0x1208B9C", VA = "0x1208B9C")]
		private void OnInstantiate()
		{
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x12093B0", Offset = "0x12093B0", VA = "0x12093B0")]
		private void OnGrabBegin(PlayerAvatar owner, RGXR_Device playerInputDevice)
		{
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0x12093C8", Offset = "0x12093C8", VA = "0x12093C8", Slot = "4")]
		public bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0x12093F0", Offset = "0x12093F0", VA = "0x12093F0", Slot = "5")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0x1208F38", Offset = "0x1208F38", VA = "0x1208F38")]
		private void EnterState(State newState)
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0x12098AC", Offset = "0x12098AC", VA = "0x12098AC", Slot = "6")]
		public void LateTick()
		{
		}
	}
	[Token(Token = "0x200036D")]
	public class SpectateFriendMatchData : MonoBehaviour, IBowserPhotonPrefabPoolListener
	{
		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public GameObject GrabTarget;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject windowRoot;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PhotonView photonView;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabbableData grabbableData;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshPro howToJoinText;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Collider grabCollider;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshPro playerOneNameText;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshPro playerTwoNameText;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Animator animator;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Settings")]
		public float spawnInDelay;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float lifeTime;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float hideTime;

		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Action onPoolInstantiate;

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0x12098B0", Offset = "0x12098B0", VA = "0x12098B0", Slot = "4")]
		public void OnPoolInstantiate()
		{
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0x12098CC", Offset = "0x12098CC", VA = "0x12098CC", Slot = "5")]
		public void OnPoolDestroy()
		{
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0x12098D0", Offset = "0x12098D0", VA = "0x12098D0")]
		public SpectateFriendMatchData()
		{
		}
	}
	[Token(Token = "0x200036E")]
	public class StoryManager
	{
		[Token(Token = "0x200036F")]
		private enum State
		{
			[Token(Token = "0x40011BD")]
			NotSetup,
			[Token(Token = "0x40011BE")]
			WaitingForPlayFabConnection,
			[Token(Token = "0x40011BF")]
			FetchingInitialPlayerStoryData,
			[Token(Token = "0x40011C0")]
			Ready,
			[Token(Token = "0x40011C1")]
			WaitingForUpdate
		}

		[Token(Token = "0x2000370")]
		private class BarSession
		{
			[Token(Token = "0x40011C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GrabbableHandler grabbableHandler;

			[Token(Token = "0x40011C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public RetroBoxHandler retroBox;

			[Token(Token = "0x40011C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DartBoard dartBoard;

			[Token(Token = "0x6000FCC")]
			[Address(RVA = "0x120A104", Offset = "0x120A104", VA = "0x120A104")]
			public BarSession()
			{
			}
		}

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private State state;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ObjectiveWithProgress currentObjective;

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private StoryManagerData data;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PlayFabManager playFabManager;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Locale locale;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private StoryData latestStoryData;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string currentObjectiveId;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BarSession barSession;

		[Token(Token = "0x40011B6")]
		private const string GRAB_GLASS_STORYTASK = "grabbed_glass_in_bar";

		[Token(Token = "0x40011B7")]
		private const string ALIEN_BLAST_STORYTASK = "alien_blast_score";

		[Token(Token = "0x40011B8")]
		private const string ZOMBIES_ON_THE_DANCE_FLOOR_STORYTASK = "zombies_on_the_dance_floor_score";

		[Token(Token = "0x40011B9")]
		private const string DART_SCORE_STORYTASK = "dart_score";

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HashSet<string> bowserStoryTaskIds;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private HashSet<string> storyTasksWithScores;

		[Token(Token = "0x170000CD")]
		public bool IsLoading
		{
			[Token(Token = "0x6000FB5")]
			[Address(RVA = "0x12098F0", Offset = "0x12098F0", VA = "0x12098F0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CE")]
		public string CurrentObjectiveId
		{
			[Token(Token = "0x6000FB6")]
			[Address(RVA = "0x120895C", Offset = "0x120895C", VA = "0x120895C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CF")]
		public string CurrentTaskText
		{
			[Token(Token = "0x6000FB7")]
			[Address(RVA = "0x1209900", Offset = "0x1209900", VA = "0x1209900")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FB8")]
			[Address(RVA = "0x1209908", Offset = "0x1209908", VA = "0x1209908")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000D0")]
		public string PreviousCompletedTaskText
		{
			[Token(Token = "0x6000FB9")]
			[Address(RVA = "0x1209910", Offset = "0x1209910", VA = "0x1209910")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FBA")]
			[Address(RVA = "0x1209918", Offset = "0x1209918", VA = "0x1209918")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000D1")]
		public string CurrentTaskNotificationText
		{
			[Token(Token = "0x6000FBB")]
			[Address(RVA = "0x1209920", Offset = "0x1209920", VA = "0x1209920")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FBC")]
			[Address(RVA = "0x1209928", Offset = "0x1209928", VA = "0x1209928")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x1209930", Offset = "0x1209930", VA = "0x1209930")]
		public StoryManager(StoryManagerData data, PlayFabManager playFabManager)
		{
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0x1209BD4", Offset = "0x1209BD4", VA = "0x1209BD4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0x1209BC0", Offset = "0x1209BC0", VA = "0x1209BC0")]
		private void EnterState(State newState)
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0x1209F48", Offset = "0x1209F48", VA = "0x1209F48")]
		public void OnEnteredBar(GrabbableHandler grabbableHandler, RetroBoxHandler retroBoxHandler, DartBoard dartBoard)
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0x120A10C", Offset = "0x120A10C", VA = "0x120A10C")]
		public void OnExitBar()
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0x120A278", Offset = "0x120A278", VA = "0x120A278")]
		private void OnPlayerGrabbed(GrabbableData grabbable)
		{
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0x120A464", Offset = "0x120A464", VA = "0x120A464")]
		private void OnRetroBoxGameEvent(string eventName, Dictionary<string, object> parameters)
		{
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0x120A58C", Offset = "0x120A58C", VA = "0x120A58C")]
		private int GetRetroBoxGameScore(object scoreRaw, string eventId)
		{
			return default(int);
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0x120A820", Offset = "0x120A820", VA = "0x120A820")]
		private void OnDartBoardScore(int score)
		{
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0x1209C58", Offset = "0x1209C58", VA = "0x1209C58")]
		private void RefreshCurrentStoryTask()
		{
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0x120A8F8", Offset = "0x120A8F8", VA = "0x120A8F8")]
		private void RefreshCurrentActiveObjectiveText()
		{
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0x120A364", Offset = "0x120A364", VA = "0x120A364")]
		private void SendStoryTaskUpdate(string storyTaskId, int progress, bool isDelta)
		{
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x120A87C", Offset = "0x120A87C", VA = "0x120A87C")]
		private void PrintDebug(string text)
		{
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x120AB3C", Offset = "0x120AB3C", VA = "0x120AB3C")]
		public string GetCurrentStageText()
		{
			return null;
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0x12087C4", Offset = "0x12087C4", VA = "0x12087C4")]
		public bool HasFinishedObjectiveInAct(string objectiveId, string actId)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000372")]
	public class StoryManagerData : MonoBehaviour
	{
		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool debugToConsole;

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x120AC1C", Offset = "0x120AC1C", VA = "0x120AC1C")]
		public StoryManagerData()
		{
		}
	}
	[Token(Token = "0x2000373")]
	public class GroundBotData : MonoBehaviour
	{
		[Token(Token = "0x2000374")]
		public enum State
		{
			[Token(Token = "0x40011DC")]
			Idle,
			[Token(Token = "0x40011DD")]
			Moving,
			[Token(Token = "0x40011DE")]
			OpeningDoor,
			[Token(Token = "0x40011DF")]
			EnteringDoor,
			[Token(Token = "0x40011E0")]
			ClosingDoor,
			[Token(Token = "0x40011E1")]
			MovingOnOffMeshLink,
			[Token(Token = "0x40011E2")]
			PlayerBlockingPath
		}

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Navigation")]
		public NavMeshAgent navMeshAgent;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform[] patrolRoute;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If the bot is within this distance or less to the target, start moving to the next one")]
		public float reachedTargetDistance;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float offLinkSpeed;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Player interaction")]
		public NpcData npcData;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform cam;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float playerBlockingPathMaxDistance;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float playerBlockingPathMaxAngle;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float lookAtSpeed;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float lookAtMaxDistance;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float lookAtMaxAngle;

		[NonSerialized]
		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float timeInState;

		[NonSerialized]
		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int currentDestinationIndex;

		[NonSerialized]
		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public State currentState;

		[NonSerialized]
		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float defaultSpeed;

		[NonSerialized]
		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BotDoorData currentDoor;

		[NonSerialized]
		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Quaternion lookAtDoorRotation;

		[NonSerialized]
		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Quaternion startRotation;

		[NonSerialized]
		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float idleTimer;

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0x120AC24", Offset = "0x120AC24", VA = "0x120AC24")]
		public GroundBotData()
		{
		}
	}
	[Token(Token = "0x2000375")]
	public class GroundBotHandler
	{
		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GroundBotData[] bots;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly int animatorStateHash;

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x11FDBC4", Offset = "0x11FDBC4", VA = "0x11FDBC4")]
		public GroundBotHandler(GroundBotData[] bots)
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x11FDE98", Offset = "0x11FDE98", VA = "0x11FDE98")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x120AF44", Offset = "0x120AF44", VA = "0x120AF44")]
		private void UpdateLookAt(GroundBotData bot)
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0x120AEA8", Offset = "0x120AEA8", VA = "0x120AEA8")]
		private void MoveDoor(GroundBotData bot, bool opening)
		{
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0x120AE24", Offset = "0x120AE24", VA = "0x120AE24")]
		private void GoToNextDestination(GroundBotData bot)
		{
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0x120AC4C", Offset = "0x120AC4C", VA = "0x120AC4C")]
		private void EnterState(GroundBotData bot, GroundBotData.State newState)
		{
		}
	}
}
namespace Bowser.Core
{
	[Token(Token = "0x2000376")]
	public class BowserParticlePool
	{
		[Token(Token = "0x2000377")]
		private class PooledParticle
		{
			[Token(Token = "0x40011E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject instance;

			[Token(Token = "0x40011EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float timeToLive;

			[Token(Token = "0x40011EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BowserParticlePoolData.ParticlePoolEntry particleData;

			[Token(Token = "0x6000FDB")]
			[Address(RVA = "0x120B228", Offset = "0x120B228", VA = "0x120B228")]
			public PooledParticle(GameObject instance, BowserParticlePoolData.ParticlePoolEntry particleData)
			{
			}
		}

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BowserParticlePoolData data;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<string, Queue<PooledParticle>> particlePools;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform poolInactiveParent;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<PooledParticle> activeParticles;

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0x11FC0A8", Offset = "0x11FC0A8", VA = "0x11FC0A8")]
		public BowserParticlePool(BowserParticlePoolData data)
		{
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0x11FC8B0", Offset = "0x11FC8B0", VA = "0x11FC8B0")]
		public void Tick()
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x120B270", Offset = "0x120B270", VA = "0x120B270")]
		private void ReturnToPool(PooledParticle activeParticle)
		{
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x120B330", Offset = "0x120B330", VA = "0x120B330")]
		public void PlayEffectAt(string particleName, Vector3 position, Quaternion rotation, bool warnOnOutInstances = true)
		{
		}
	}
	[Token(Token = "0x2000378")]
	public interface IBowserPhotonPrefabPoolListener
	{
		[Token(Token = "0x6000FDC")]
		void OnPoolInstantiate();

		[Token(Token = "0x6000FDD")]
		void OnPoolDestroy();
	}
	[Token(Token = "0x2000379")]
	public class BowserPhotonPrefabPoolEntry : MonoBehaviour, IPunInstantiateMagicCallback
	{
		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Code Setup")]
		public Component primaryComponent;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Pool Events")]
		public Component[] listeners;

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0x120B5EC", Offset = "0x120B5EC", VA = "0x120B5EC")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0x120B77C", Offset = "0x120B77C", VA = "0x120B77C")]
		public void OnPoolDestroy()
		{
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0x120B8AC", Offset = "0x120B8AC", VA = "0x120B8AC", Slot = "4")]
		public void OnPhotonInstantiate(PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0x120B9D8", Offset = "0x120B9D8", VA = "0x120B9D8")]
		public BowserPhotonPrefabPoolEntry()
		{
		}
	}
	[Token(Token = "0x200037A")]
	[HelpURL("https://doc.photonengine.com/en-us/pun/v2/gameplay/synchronization-and-state")]
	public class BowserPhotonTransformView : MonoBehaviour, IPunObservable
	{
		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_Distance;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_Angle;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private PhotonView m_PhotonView;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 m_Direction;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 m_NetworkPosition;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 m_StoredPosition;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion m_NetworkRotation;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool m_SynchronizePosition;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool m_SynchronizeRotation;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		public bool m_SynchronizeScale;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
		[Header("Teleport")]
		public bool teleportEnabled;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float teleportIfDistanceGreaterThan;

		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("Debug")]
		public bool debugSerialization;

		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool m_firstTake;

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0x120B9E0", Offset = "0x120B9E0", VA = "0x120B9E0")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0x120BA90", Offset = "0x120BA90", VA = "0x120BA90")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0x120BA9C", Offset = "0x120BA9C", VA = "0x120BA9C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0x120BE88", Offset = "0x120BE88", VA = "0x120BE88", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0x120C618", Offset = "0x120C618", VA = "0x120C618")]
		public BowserPhotonTransformView()
		{
		}
	}
	[Token(Token = "0x200037B")]
	public class Entrypoint : MonoBehaviour
	{
		[Token(Token = "0x200037C")]
		public enum Location
		{
			[Token(Token = "0x4001221")]
			BlastonArena1,
			[Token(Token = "0x4001222")]
			BackAlley,
			[Token(Token = "0x4001223")]
			Elevator,
			[Token(Token = "0x4001224")]
			ScrapperStreet,
			[Token(Token = "0x4001225")]
			ScrapperMarketArena
		}

		[Token(Token = "0x200037D")]
		private enum DeepLinkState
		{
			[Token(Token = "0x4001227")]
			None,
			[Token(Token = "0x4001228")]
			Pending,
			[Token(Token = "0x4001229")]
			Executing
		}

		[Token(Token = "0x200037E")]
		private class PendingDeepLinkTarget
		{
			[Token(Token = "0x400122A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int? targetFloor;

			[Token(Token = "0x400122B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public BowserRoomInfo targetRoom;

			[Token(Token = "0x400122C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string customId;

			[Token(Token = "0x400122D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public BowserIntegration.DeepLinkData hostGameDeepLinkData;

			[Token(Token = "0x6001005")]
			[Address(RVA = "0xF7E844", Offset = "0xF7E844", VA = "0xF7E844")]
			public PendingDeepLinkTarget()
			{
			}
		}

		[Token(Token = "0x2000384")]
		[CompilerGenerated]
		private sealed class <StopCurrentStateCoroutine>d__61 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001240")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001241")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001242")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entrypoint <>4__this;

			[Token(Token = "0x4001243")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action onDone;

			[Token(Token = "0x4001244")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private IGameState <unloadGameState>5__2;

			[Token(Token = "0x170000D2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001018")]
				[Address(RVA = "0xF7EB0C", Offset = "0xF7EB0C", VA = "0xF7EB0C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600101A")]
				[Address(RVA = "0xF7EB54", Offset = "0xF7EB54", VA = "0xF7EB54", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001015")]
			[Address(RVA = "0xF7E998", Offset = "0xF7E998", VA = "0xF7E998")]
			[DebuggerHidden]
			public <StopCurrentStateCoroutine>d__61(int <>1__state)
			{
			}

			[Token(Token = "0x6001016")]
			[Address(RVA = "0xF7E9C0", Offset = "0xF7E9C0", VA = "0xF7E9C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001017")]
			[Address(RVA = "0xF7E9C4", Offset = "0xF7E9C4", VA = "0xF7E9C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001019")]
			[Address(RVA = "0xF7EB14", Offset = "0xF7EB14", VA = "0xF7EB14", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000385")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass62_0
		{
			[Token(Token = "0x4001245")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool isFading;

			[Token(Token = "0x600101B")]
			[Address(RVA = "0xF7EB5C", Offset = "0xF7EB5C", VA = "0xF7EB5C")]
			public <>c__DisplayClass62_0()
			{
			}

			[Token(Token = "0x600101C")]
			[Address(RVA = "0xF7EB64", Offset = "0xF7EB64", VA = "0xF7EB64")]
			internal void <UnloadScene>b__0()
			{
			}
		}

		[Token(Token = "0x2000386")]
		[CompilerGenerated]
		private sealed class <UnloadScene>d__62 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001246")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001247")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001248")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entrypoint <>4__this;

			[Token(Token = "0x4001249")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IGameState gameState;

			[Token(Token = "0x400124A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private <>c__DisplayClass62_0 <>8__1;

			[Token(Token = "0x400124B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private SceneInstance <gameStateScene>5__2;

			[Token(Token = "0x170000D4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001020")]
				[Address(RVA = "0xF7EFE8", Offset = "0xF7EFE8", VA = "0xF7EFE8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001022")]
				[Address(RVA = "0xF7F030", Offset = "0xF7F030", VA = "0xF7F030", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600101D")]
			[Address(RVA = "0xF7EB6C", Offset = "0xF7EB6C", VA = "0xF7EB6C")]
			[DebuggerHidden]
			public <UnloadScene>d__62(int <>1__state)
			{
			}

			[Token(Token = "0x600101E")]
			[Address(RVA = "0xF7EB94", Offset = "0xF7EB94", VA = "0xF7EB94", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600101F")]
			[Address(RVA = "0xF7EB98", Offset = "0xF7EB98", VA = "0xF7EB98", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001021")]
			[Address(RVA = "0xF7EFF0", Offset = "0xF7EFF0", VA = "0xF7EFF0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000387")]
		[CompilerGenerated]
		private sealed class <LoadSceneCoroutine>d__65<T> : IEnumerator<object>, IEnumerator, IDisposable where T : GameStateData
		{
			[Token(Token = "0x400124C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x400124D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x400124E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IGameState gameState;

			[Token(Token = "0x400124F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool activateOnLoad;

			[Token(Token = "0x4001250")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Entrypoint <>4__this;

			[Token(Token = "0x4001251")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool setActiveScene;

			[Token(Token = "0x4001252")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<T> onLoadBeforeFade;

			[Token(Token = "0x4001253")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private string <sceneName>5__2;

			[Token(Token = "0x4001254")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private AsyncOperationHandle<SceneInstance> <asyncop>5__3;

			[Token(Token = "0x4001255")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <dataHolder>5__4;

			[Token(Token = "0x170000D6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001026")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001028")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001023")]
			[DebuggerHidden]
			public <LoadSceneCoroutine>d__65(int <>1__state)
			{
			}

			[Token(Token = "0x6001024")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001025")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001027")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FadeData fadeData;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AlertData alertData;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TeleportData teleportData;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ShaderWarmupData shaderWarmupData;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PlayFabManagerData playfabManagerData;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public StoryManagerData storyManagerData;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public DebugMenuData debugMenuPrefab;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MultiplayerIntegrationData multiplayerIntegrationData;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BowserTrailerManagerData bowserTrailerManagerData;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Debug Options")]
		[Tooltip("Fill in data to mimic deep link from host, leave empty if not used")]
		public BowserIntegration.DeepLinkData DebugStartupDeepLinkData;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private NetworkManager networkManager;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private XRPluginManager xrPluginManager;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ShaderWarmup shaderWarmup;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayFabManager playfabManager;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private StoryManager storyManager;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Fade fade;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Alert alert;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Teleport teleport;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private BowserXR bowserXR;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private BowserTracking tracking;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private DebugMenu debugMenu;

		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private PerformanceManager performanceManager;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private TokenService tokenService;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private CalculateTokenSpawnPositions calculateTokenSpawn;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private MultiplayerIntegrationManager multiplayerIntegrationManager;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private BowserTrailerManager trailerManager;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private KnockoutTournamentService knockoutTournamentService;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool isSwitchingGameState;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private LogSender logSender;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private DeepLinkState deepLinkState;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private PendingDeepLinkTarget pendingDeepLinkTarget;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private int latestFloor;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private bool leavingBowser;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private IGameState currentGameState;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Dictionary<IGameState, SceneInstance> gameStateScenes;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private bool waitingForNetworkedRoom;

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0x120C630", Offset = "0x120C630", VA = "0x120C630")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0x120D68C", Offset = "0x120D68C", VA = "0x120D68C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0x120D958", Offset = "0x120D958", VA = "0x120D958")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0x120D9A8", Offset = "0x120D9A8", VA = "0x120D9A8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0x120DA54", Offset = "0x120DA54", VA = "0x120DA54")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0x120DB38", Offset = "0x120DB38", VA = "0x120DB38")]
		private void ExitBowser()
		{
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0x120DC18", Offset = "0x120DC18", VA = "0x120DC18")]
		private void ConnectToBar(BowserRoomInfo roomInfo)
		{
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0x120DD20", Offset = "0x120DD20", VA = "0x120DD20")]
		private void OnConnectedToRoom()
		{
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0x120DF44", Offset = "0x120DF44", VA = "0x120DF44")]
		private void OnFailedToJoinRoom(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0x120D478", Offset = "0x120D478", VA = "0x120D478")]
		public void GoToBackAlley(Location enteredFrom)
		{
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0x120DDA8", Offset = "0x120DDA8", VA = "0x120DDA8")]
		private void GoToBar(int floor)
		{
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0x120D088", Offset = "0x120D088", VA = "0x120D088")]
		public void GoToElevator(int floor, [Optional] int? joinTargetFloor, [Optional] BowserRoomInfo joinTargetRoom, [Optional] string JoinTargetCustomId, [Optional] DisconnectCause? disconnectCause)
		{
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0x120D2C0", Offset = "0x120D2C0", VA = "0x120D2C0")]
		public void GoToScrapperStreet(Location enteredFrom)
		{
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0x120DF4C", Offset = "0x120DF4C", VA = "0x120DF4C")]
		public void ExitBar()
		{
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0x120E010", Offset = "0x120E010", VA = "0x120E010")]
		public void RequestDeepLinkToFloor(int targetFloor)
		{
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0x120E184", Offset = "0x120E184", VA = "0x120E184")]
		public void RequestDeepLinkToRoom(BowserRoomInfo targetRoom)
		{
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0x120E298", Offset = "0x120E298", VA = "0x120E298")]
		public void RequestDeepLinkWithCustomGroup(string customId)
		{
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0x120E3B0", Offset = "0x120E3B0", VA = "0x120E3B0")]
		public void RequestDeepLinkToHostGame(BowserIntegration.DeepLinkData deepLinkData)
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0x11FCC08", Offset = "0x11FCC08", VA = "0x11FCC08")]
		public void ReadyToDeepLink(bool alreadyInElevator = false)
		{
		}

		[Token(Token = "0x6000FFA")]
		private void SwitchState<T>(IGameState newState, Action<T> onStart) where T : GameStateData
		{
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0x120E59C", Offset = "0x120E59C", VA = "0x120E59C")]
		private void StopCurrentState(Action onDone)
		{
		}

		[Token(Token = "0x6000FFC")]
		private void LoadScene<T>(IGameState gameState, Action<T> onLoadBeforeFade, bool activateOnLoad = true, bool setActiveScene = true) where T : GameStateData
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x120E5BC", Offset = "0x120E5BC", VA = "0x120E5BC")]
		[IteratorStateMachine(typeof(<StopCurrentStateCoroutine>d__61))]
		private IEnumerator StopCurrentStateCoroutine(Action onDone)
		{
			return null;
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0x120E630", Offset = "0x120E630", VA = "0x120E630")]
		[IteratorStateMachine(typeof(<UnloadScene>d__62))]
		private IEnumerator UnloadScene(IGameState gameState)
		{
			return null;
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0x120E6A4", Offset = "0x120E6A4", VA = "0x120E6A4")]
		private void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0x120E758", Offset = "0x120E758", VA = "0x120E758")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001001")]
		[IteratorStateMachine(typeof(<LoadSceneCoroutine>d__65<>))]
		private IEnumerator LoadSceneCoroutine<T>(IGameState gameState, Action<T> onLoadBeforeFade, bool activateOnLoad, bool setActiveScene) where T : GameStateData
		{
			return null;
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0x120E76C", Offset = "0x120E76C", VA = "0x120E76C")]
		private void SendLog()
		{
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0x120E794", Offset = "0x120E794", VA = "0x120E794")]
		public Entrypoint()
		{
		}
	}
	[Token(Token = "0x2000388")]
	public class GameStateData : MonoBehaviour
	{
		[Token(Token = "0x6001029")]
		[Address(RVA = "0xF7F038", Offset = "0xF7F038", VA = "0xF7F038")]
		public GameStateData()
		{
		}
	}
	[Token(Token = "0x2000389")]
	public class GrabbableData : MonoBehaviour, IOnPhotonViewControllerChange, IPhotonViewCallback, IBowserPhotonPrefabPoolListener
	{
		[Token(Token = "0x200038A")]
		public delegate void OnGrabBeginHandler(PlayerAvatar owner, RGXR_Device playerInputDevice);

		[Token(Token = "0x200038B")]
		public delegate void OnGrabEndHandler(Vector3 throwForce);

		[Token(Token = "0x200038C")]
		public delegate void OnRemoteGrabBeginHandler(AvatarData avatar, RGXR_Device playerInputDevice);

		[Token(Token = "0x200038D")]
		public delegate void OnRemoteGrabEndHandler();

		[Token(Token = "0x200038E")]
		public enum DropSound
		{
			[Token(Token = "0x400127F")]
			None,
			[Token(Token = "0x4001280")]
			Glass,
			[Token(Token = "0x4001281")]
			Token,
			[Token(Token = "0x4001282")]
			Generic
		}

		[Token(Token = "0x200038F")]
		public enum GrabHaptics
		{
			[Token(Token = "0x4001284")]
			None,
			[Token(Token = "0x4001285")]
			SmallPulse,
			[Token(Token = "0x4001286")]
			MediumPulse
		}

		[Token(Token = "0x2000390")]
		public struct HapticSettings
		{
			[Token(Token = "0x4001287")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float amplitude;

			[Token(Token = "0x4001288")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float duration;

			[Token(Token = "0x6001053")]
			[Address(RVA = "0xF7F894", Offset = "0xF7F894", VA = "0xF7F894")]
			public HapticSettings(float amplitude, float duration)
			{
			}
		}

		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<GrabHaptics, HapticSettings> hapticLookup;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Settings")]
		public bool togglePhysics;

		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool forceKinematic;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool localOnlyGrabbable;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string grabPoseName;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int grabPose;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float angularVelocityConstant;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float throwForceMultiplier;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public DropSound dropSound;

		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GrabHaptics grabHaptics;

		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool localGrabbingEnabled;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		public bool resetGrabStateOnPoolEntry;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		public bool debugLogic;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("References")]
		public PhotonView photonView;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Rigidbody rigidBody;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public PhotonObservableProxy observableProxy;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public HighlightData highlightData;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Optional")]
		public DestroyIfDroppedData destroyIfDropped;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public BowserPhotonPrefabPoolEntry prefabPoolEntry;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public int grabPoseHash;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[HideInInspector]
		public int remoteHeldBy;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public bool dropBeforeGrabConfirmed;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public PlayerAvatar locallyGrabbedBy;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public bool isDropped;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[HideInInspector]
		public int ownershipRequestInFlight;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public RGXR_Device localInputDevice;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[HideInInspector]
		public RGXR_Device remoteInputDevice;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		public Transform ownerTransform;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		public Action pendingOnGrabDenied;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		public Action<GrabbableData> onPoolDestroy;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Action<GrabbableData, PhotonMessageInfo> OnBowserRequestOwnershipOfGrabbable;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Action<GrabbableData, PhotonMessageInfo> OnBowserRequestOwnershipOfGrabbableDenied;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Action<GrabbableData> OnEnabled;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Action<GrabbableData> OnDisabled;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Action<GrabbableData, Collision> onCollisionEnter;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Action<GrabbableData, Player, Player> onControllerChanged;

		[Token(Token = "0x170000D8")]
		public bool IsLocallyGrabbed
		{
			[Token(Token = "0x6001032")]
			[Address(RVA = "0xF7F520", Offset = "0xF7F520", VA = "0xF7F520")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D9")]
		public bool IsRemoteGrabbed
		{
			[Token(Token = "0x6001033")]
			[Address(RVA = "0xF7F530", Offset = "0xF7F530", VA = "0xF7F530")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000014")]
		public event OnGrabBeginHandler OnGrabBegin
		{
			[Token(Token = "0x600102A")]
			[Address(RVA = "0xF7F040", Offset = "0xF7F040", VA = "0xF7F040")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600102B")]
			[Address(RVA = "0xF7F0DC", Offset = "0xF7F0DC", VA = "0xF7F0DC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000015")]
		public event OnGrabEndHandler OnGrabEnd
		{
			[Token(Token = "0x600102C")]
			[Address(RVA = "0xF7F178", Offset = "0xF7F178", VA = "0xF7F178")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600102D")]
			[Address(RVA = "0xF7F214", Offset = "0xF7F214", VA = "0xF7F214")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000016")]
		public event OnRemoteGrabBeginHandler OnRemoteGrabBegin
		{
			[Token(Token = "0x600102E")]
			[Address(RVA = "0xF7F2B0", Offset = "0xF7F2B0", VA = "0xF7F2B0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600102F")]
			[Address(RVA = "0xF7F34C", Offset = "0xF7F34C", VA = "0xF7F34C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000017")]
		public event OnRemoteGrabEndHandler OnRemoteGrabEnd
		{
			[Token(Token = "0x6001030")]
			[Address(RVA = "0xF7F3E8", Offset = "0xF7F3E8", VA = "0xF7F3E8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001031")]
			[Address(RVA = "0xF7F484", Offset = "0xF7F484", VA = "0xF7F484")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0xF7F540", Offset = "0xF7F540", VA = "0xF7F540")]
		public HapticSettings GetGrabHapticSettings(GrabHaptics hapticsType)
		{
			return default(HapticSettings);
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0xF7F598", Offset = "0xF7F598", VA = "0xF7F598")]
		public void SetCallbacks(Action<GrabbableData> OnEnabled, Action<GrabbableData> OnDisabled, Action<GrabbableData, PhotonMessageInfo> OnRequestOwnership, Action<GrabbableData, PhotonMessageInfo> OnRequestDenied, Action<GrabbableData, Collision> onCollisionEnter, Action<GrabbableData, Player, Player> onControllerChanged)
		{
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0xF7F5A8", Offset = "0xF7F5A8", VA = "0xF7F5A8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xF7F5C8", Offset = "0xF7F5C8", VA = "0xF7F5C8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xF7F5E8", Offset = "0xF7F5E8", VA = "0xF7F5E8")]
		public void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xF7F610", Offset = "0xF7F610", VA = "0xF7F610")]
		public void TriggerOnGrabBegin()
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xF7F634", Offset = "0xF7F634", VA = "0xF7F634")]
		public void TriggerOnGrabEnd(Vector3 throwForce)
		{
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0xF7F650", Offset = "0xF7F650", VA = "0xF7F650")]
		public void TriggerOnRemoteGrabBegin(AvatarData avatarData, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xF7F66C", Offset = "0xF7F66C", VA = "0xF7F66C")]
		public void TriggerOnRemoteGrabEnd()
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0xF7F688", Offset = "0xF7F688", VA = "0xF7F688")]
		[PunRPC]
		private void BowserRequestOwnershipOfGrabbable(PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0xF7F6D8", Offset = "0xF7F6D8", VA = "0xF7F6D8")]
		[PunRPC]
		private void BowserRequestOwnershipOfGrabbableDenied(PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0xF7F728", Offset = "0xF7F728", VA = "0xF7F728", Slot = "4")]
		public void OnControllerChange(Player newController, Player previousController)
		{
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0xF7F754", Offset = "0xF7F754", VA = "0xF7F754", Slot = "5")]
		public void OnPoolInstantiate()
		{
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0xF7F758", Offset = "0xF7F758", VA = "0xF7F758", Slot = "6")]
		public void OnPoolDestroy()
		{
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0xF7F778", Offset = "0xF7F778", VA = "0xF7F778")]
		public GrabbableData()
		{
		}
	}
	[Token(Token = "0x2000391")]
	public class GrabbableHandler : IBowserPunObservable, IPunOwnershipCallbacks
	{
		[Token(Token = "0x2000392")]
		public delegate void OnLocalPlayerGrabbedHandler(GrabbableData grabbable);

		[Token(Token = "0x400128A")]
		public const int NO_HOLDER = -1;

		[Token(Token = "0x400128B")]
		private const int NO_REQUEST_IN_FLIGHT = -1;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AvatarHandler avatarHandler;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HighlightHandler highlightHandler;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DestroyIfDroppedHandler destroyIfDroppedHandler;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<GrabbableData> allGrabbableInstances;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<PhotonView, GrabbableData> viewToInstance;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<GrabbableData> activeGrabbables;

		[Token(Token = "0x14000018")]
		public event OnLocalPlayerGrabbedHandler OnLocalPlayerGrabbed
		{
			[Token(Token = "0x6001054")]
			[Address(RVA = "0xF7FECC", Offset = "0xF7FECC", VA = "0xF7FECC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001055")]
			[Address(RVA = "0xF7FF68", Offset = "0xF7FF68", VA = "0xF7FF68")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0xF80004", Offset = "0xF80004", VA = "0xF80004")]
		public GrabbableHandler(AvatarHandler avatarHandler, HighlightHandler highlightHandler)
		{
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0xF8015C", Offset = "0xF8015C", VA = "0xF8015C")]
		public void RegisterGrabbableInstance(GrabbableData grabbable)
		{
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0xF80678", Offset = "0xF80678", VA = "0xF80678")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0xF80710", Offset = "0xF80710", VA = "0xF80710")]
		private void OnGrabbableEnabled(GrabbableData grabbable)
		{
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0xF807B8", Offset = "0xF807B8", VA = "0xF807B8")]
		private void OnGrabbableDisabled(GrabbableData grabbable)
		{
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0xF80810", Offset = "0xF80810", VA = "0xF80810")]
		public void Tick()
		{
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0xF808F8", Offset = "0xF808F8", VA = "0xF808F8")]
		public void LateTick()
		{
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0xF80A50", Offset = "0xF80A50", VA = "0xF80A50")]
		public bool Grab(GrabbableData grabbable, PlayerAvatar owner, Transform followTransform, RGXR_Device playerInputDevice, Action onGrabDenied)
		{
			return default(bool);
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0xF810B0", Offset = "0xF810B0", VA = "0xF810B0")]
		public void Drop(GrabbableData grabbable)
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0xF81758", Offset = "0xF81758", VA = "0xF81758")]
		internal void ForceDestroy(GrabbableData grabbable, float delay)
		{
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xF81774", Offset = "0xF81774", VA = "0xF81774")]
		private void OnCollisionEnter(GrabbableData grabbable, Collision collision)
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xF80C30", Offset = "0xF80C30", VA = "0xF80C30")]
		private void PerformOwnershipRequest(GrabbableData grabbable, PlayerAvatar owner, Transform parentTransform, RGXR_Device playerInputDevice, Action onGrabDenied)
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0xF817E8", Offset = "0xF817E8", VA = "0xF817E8")]
		private void AssumeGetOwnership(GrabbableData grabbable, PlayerAvatar grabbedBy, Transform parentTransform, RGXR_Device playerInputDevice, Action onGrabDenied)
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0xF819A4", Offset = "0xF819A4", VA = "0xF819A4")]
		private void ConfirmHaveOwnership(GrabbableData grabbable)
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0xF81B44", Offset = "0xF81B44", VA = "0xF81B44")]
		private void DeniedOwnership(GrabbableData grabbable)
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0xF81CD4", Offset = "0xF81CD4", VA = "0xF81CD4", Slot = "6")]
		public void OnOwnershipTransfered(PhotonView targetView, Player previousOwner)
		{
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0xF81320", Offset = "0xF81320", VA = "0xF81320")]
		public void ToggleSyncing(GrabbableData grabbable, [Optional] Transform attachPoint)
		{
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0xF82054", Offset = "0xF82054", VA = "0xF82054")]
		public void OnControllerChanged(GrabbableData grabbable, Player newController, Player previousController)
		{
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0xF82270", Offset = "0xF82270", VA = "0xF82270")]
		private void BowserRequestOwnershipOfGrabbable(GrabbableData grabbable, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0xF8255C", Offset = "0xF8255C", VA = "0xF8255C")]
		private void BowserRequestOwnershipOfGrabbableDenied(GrabbableData grabbable, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0xF81628", Offset = "0xF81628", VA = "0xF81628")]
		private void UpdatePhysicsSettings(GrabbableData grabbable)
		{
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0xF82584", Offset = "0xF82584", VA = "0xF82584")]
		private void SetPhysicsEnabled(GrabbableData grabbable, bool physicsEnabled)
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0xF82608", Offset = "0xF82608", VA = "0xF82608", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info, UnityEngine.Object instance)
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xF8292C", Offset = "0xF8292C", VA = "0xF8292C", Slot = "5")]
		public void OnOwnershipRequest(PhotonView targetView, Player requestingPlayer)
		{
		}
	}
	[Token(Token = "0x2000394")]
	public class GrabberData : MonoBehaviour
	{
		[Token(Token = "0x2000395")]
		public delegate void OnTriggerEnterHandler(Collider other);

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform attachPoint;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float grabRadius;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ColliderProxy indexTipCollider;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform grabRoot;

		[Token(Token = "0x14000019")]
		public event OnTriggerEnterHandler OnGrabberTriggerEnter
		{
			[Token(Token = "0x6001075")]
			[Address(RVA = "0xF82B38", Offset = "0xF82B38", VA = "0xF82B38")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001076")]
			[Address(RVA = "0xF82BD4", Offset = "0xF82BD4", VA = "0xF82BD4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xF82C70", Offset = "0xF82C70", VA = "0xF82C70")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xF82C8C", Offset = "0xF82C8C", VA = "0xF82C8C")]
		public GrabberData()
		{
		}
	}
	[Token(Token = "0x2000396")]
	public class GrabTriggerData : MonoBehaviour
	{
		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Func<PlayerAvatar, GrabbableData> onGrab;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HighlightData HighlightData;

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xF82E0C", Offset = "0xF82E0C", VA = "0xF82E0C")]
		public GrabbableData OnGrab(PlayerAvatar playerAvatar)
		{
			return null;
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xF82E2C", Offset = "0xF82E2C", VA = "0xF82E2C")]
		public GrabTriggerData()
		{
		}
	}
	[Token(Token = "0x2000397")]
	public class HighlightData : MonoBehaviour
	{
		[Token(Token = "0x2000398")]
		public enum HighlightSource
		{
			[Token(Token = "0x40012A4")]
			None,
			[Token(Token = "0x40012A5")]
			LeftHand,
			[Token(Token = "0x40012A6")]
			RightHand
		}

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer[] renderers;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[Header("Default (Fresnel opacity toggle, no color change)")]
		public float highlightedOpacity;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Color Change Only")]
		[Tooltip("Some Objects already have a fresnel effect and then the opacity does not need to change, only the color")]
		public bool onlyChangeColor;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color highlightedColor;

		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color defaultColor;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SortedSet<HighlightSource> highlightRequests;

		[Token(Token = "0x170000DA")]
		public bool IsHighlighted
		{
			[Token(Token = "0x600107F")]
			[Address(RVA = "0xF82E34", Offset = "0xF82E34", VA = "0xF82E34")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DB")]
		public int ActiveHighlightRequests
		{
			[Token(Token = "0x6001080")]
			[Address(RVA = "0xF82E44", Offset = "0xF82E44", VA = "0xF82E44")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001081")]
			[Address(RVA = "0xF82E4C", Offset = "0xF82E4C", VA = "0xF82E4C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000DC")]
		public HighlightSource currentSource
		{
			[Token(Token = "0x6001082")]
			[Address(RVA = "0xF82E54", Offset = "0xF82E54", VA = "0xF82E54")]
			[CompilerGenerated]
			get
			{
				return default(HighlightSource);
			}
			[Token(Token = "0x6001083")]
			[Address(RVA = "0xF82E5C", Offset = "0xF82E5C", VA = "0xF82E5C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0xF82E64", Offset = "0xF82E64", VA = "0xF82E64")]
		public void AddHighlightBy(HighlightSource source)
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0xF82EEC", Offset = "0xF82EEC", VA = "0xF82EEC")]
		public void RemoveHighlightBy(HighlightSource source)
		{
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0xF82F74", Offset = "0xF82F74", VA = "0xF82F74")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0xF82FA4", Offset = "0xF82FA4", VA = "0xF82FA4")]
		public HighlightData()
		{
		}
	}
	[Token(Token = "0x2000399")]
	public class HighlightHandler
	{
		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<HighlightData> instances;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MaterialPropertyBlock materialPropertyBlock;

		[Token(Token = "0x40012A9")]
		private const string fresnelOpacityParameter = "_FresnelOpacity";

		[Token(Token = "0x40012AA")]
		private const string fresnelColorParamater = "_FresnelColor";

		[Token(Token = "0x6001088")]
		[Address(RVA = "0xF83040", Offset = "0xF83040", VA = "0xF83040")]
		public HighlightHandler()
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xF805D0", Offset = "0xF805D0", VA = "0xF805D0")]
		public void RegisterHighlightable(HighlightData instance)
		{
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xF830F0", Offset = "0xF830F0", VA = "0xF830F0")]
		public void Tick()
		{
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0xF83374", Offset = "0xF83374", VA = "0xF83374")]
		private void DisableHightlight(HighlightData instance)
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0xF83258", Offset = "0xF83258", VA = "0xF83258")]
		private void EnableHighlight(HighlightData instance, HighlightData.HighlightSource source)
		{
		}
	}
	[Token(Token = "0x200039A")]
	public interface IBowserTickable
	{
		[Token(Token = "0x600108D")]
		bool IsActive();

		[Token(Token = "0x600108E")]
		void Tick();

		[Token(Token = "0x600108F")]
		void LateTick();
	}
	[Token(Token = "0x200039B")]
	public interface IGameState
	{
		[Token(Token = "0x6001090")]
		string GetSceneName();

		[Token(Token = "0x6001091")]
		void Stop();

		[Token(Token = "0x6001092")]
		void Tick();

		[Token(Token = "0x6001093")]
		void LateTick();

		[Token(Token = "0x6001094")]
		void OnApplicationQuit();

		[Token(Token = "0x6001095")]
		void ExitByDeepLink();
	}
	[Token(Token = "0x200039C")]
	public enum PerformanceLevel
	{
		[Token(Token = "0x40012AC")]
		Level0,
		[Token(Token = "0x40012AD")]
		Level1
	}
	[Serializable]
	[Token(Token = "0x200039D")]
	public class PerformanceSetting
	{
		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PerformanceLevel minimumRequiredLevel;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject gameObject;

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xF83484", Offset = "0xF83484", VA = "0xF83484")]
		public PerformanceSetting()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200039E")]
	public class PerformanceManagerData
	{
		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PerformanceSetting[] objects;

		[Token(Token = "0x6001097")]
		[Address(RVA = "0xF8348C", Offset = "0xF8348C", VA = "0xF8348C")]
		public PerformanceManagerData()
		{
		}
	}
	[Token(Token = "0x200039F")]
	public class PerformanceManager
	{
		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PerformanceLevel currentPerformanceLevel;

		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PerformanceManagerData debugData;

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xF83494", Offset = "0xF83494", VA = "0xF83494")]
		public PerformanceManager()
		{
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xF835AC", Offset = "0xF835AC", VA = "0xF835AC")]
		public void SetupScene(PerformanceManagerData data, [Optional] DebugMenu debugMenu)
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xF83730", Offset = "0xF83730", VA = "0xF83730")]
		private void RefreshSceneObjects(PerformanceManagerData data)
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0xF837AC", Offset = "0xF837AC", VA = "0xF837AC")]
		public void StopScene(PerformanceManagerData data, [Optional] DebugMenu debugMenu)
		{
		}
	}
	[Token(Token = "0x20003A0")]
	public class BowserParticlePoolData : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003A1")]
		public struct ParticlePoolEntry
		{
			[Token(Token = "0x40012B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject prefab;

			[Token(Token = "0x40012B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int poolSize;

			[Token(Token = "0x40012B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float lifeTime;
		}

		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParticlePoolEntry[] particlesToPool;

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xF83A40", Offset = "0xF83A40", VA = "0xF83A40")]
		public BowserParticlePoolData()
		{
		}
	}
	[Token(Token = "0x20003A2")]
	public class BowserButtonData : MonoBehaviour
	{
		[Token(Token = "0x20003A3")]
		public delegate void OnButtonPressedHandler(PlayerAvatar playerAvatar, RGXR_Device inputDevice);

		[Token(Token = "0x20003A4")]
		public enum State
		{
			[Token(Token = "0x40012E1")]
			Idle,
			[Token(Token = "0x40012E2")]
			ShowingHovered,
			[Token(Token = "0x40012E3")]
			BeingPressed,
			[Token(Token = "0x40012E4")]
			ReturningToIdle,
			[Token(Token = "0x40012E5")]
			PressDisabled,
			[Token(Token = "0x40012E6")]
			PressDisabledTemporary
		}

		[Token(Token = "0x20003A5")]
		public enum PressEffect
		{
			[Token(Token = "0x40012E8")]
			None,
			[Token(Token = "0x40012E9")]
			Translate,
			[Token(Token = "0x40012EA")]
			ColorChange,
			[Token(Token = "0x40012EB")]
			ImageSwap,
			[Token(Token = "0x40012EC")]
			GameObjectSwap,
			[Token(Token = "0x40012ED")]
			GameObjectSwapToggle,
			[Token(Token = "0x40012EE")]
			MeshSwapToggle,
			[Token(Token = "0x40012EF")]
			HoverSizeAndColor,
			[Token(Token = "0x40012F0")]
			HoverSize,
			[Token(Token = "0x40012F1")]
			HoverMatAndGradientSwap,
			[Token(Token = "0x40012F2")]
			HoverImageSwap
		}

		[Token(Token = "0x20003A6")]
		public enum SoundEffect
		{
			[Token(Token = "0x40012F4")]
			None,
			[Token(Token = "0x40012F5")]
			Generic2d,
			[Token(Token = "0x40012F6")]
			JukeBoxButton
		}

		[Token(Token = "0x20003A7")]
		public enum HapticEffect
		{
			[Token(Token = "0x40012F8")]
			None,
			[Token(Token = "0x40012F9")]
			Mini,
			[Token(Token = "0x40012FA")]
			Tiny
		}

		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<PressEffect> hoverEnabledEffects;

		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float pressTime;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float returnTime;

		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SoundEffect pressSound;

		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public HapticEffect pressHaptic;

		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If this button can only be activated with the index finger, default is both with the full hand and the index finger")]
		public bool indexFingerOnly;

		[Token(Token = "0x40012BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Effect Settings")]
		public PressEffect pressEffect;

		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 pressedPosition;

		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject buttonVisuals;

		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Image image;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Color pressedColor;

		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEngine.Sprite pressedImage;

		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEngine.Sprite hoverImage;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEngine.Sprite disabledImage;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject pressedButtonVisuals;

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public MeshFilter meshFilter;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Mesh pressedMesh;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color hoverColor;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float hoverScaleFactor;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public HapticEffect hoverHaptics;

		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public TextMeshProUGUI buttonText;

		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Renderer buttonRenderer;

		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Material hoverMat;

		[NonSerialized]
		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float temporaryDisablePressingTimer;

		[NonSerialized]
		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public State state;

		[NonSerialized]
		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float stateTimer;

		[NonSerialized]
		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public PlayerAvatar latestAvatar;

		[NonSerialized]
		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public RGXR_Device latestInputDevice;

		[NonSerialized]
		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public bool isLocalPress;

		[NonSerialized]
		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
		public bool isHovered;

		[NonSerialized]
		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public RGXR_Device latestHoveringDevice;

		[NonSerialized]
		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public Vector3 visualsIdlePosition;

		[NonSerialized]
		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Color defaultColor;

		[NonSerialized]
		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public UnityEngine.Sprite defaultImage;

		[NonSerialized]
		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Mesh defaultMesh;

		[NonSerialized]
		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Vector3 defaultScale;

		[NonSerialized]
		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public Material defaultMaterial;

		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Action<BowserButtonData> OnEnabled;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Action<BowserButtonData> OnDisabled;

		[Token(Token = "0x40012DF")]
		public const float NO_DELAY = -1f;

		[Token(Token = "0x170000DD")]
		public bool CanPress
		{
			[Token(Token = "0x600109F")]
			[Address(RVA = "0xF83B80", Offset = "0xF83B80", VA = "0xF83B80")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DE")]
		public bool HasHoverEffect
		{
			[Token(Token = "0x60010A0")]
			[Address(RVA = "0xF83B94", Offset = "0xF83B94", VA = "0xF83B94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1400001A")]
		public event OnButtonPressedHandler OnButtonPressed
		{
			[Token(Token = "0x600109D")]
			[Address(RVA = "0xF83A48", Offset = "0xF83A48", VA = "0xF83A48")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600109E")]
			[Address(RVA = "0xF83AE4", Offset = "0xF83AE4", VA = "0xF83AE4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xF83BE8", Offset = "0xF83BE8", VA = "0xF83BE8")]
		public void SetCallbacks(Action<BowserButtonData> onEnabled, Action<BowserButtonData> onDisabled)
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xF83BF0", Offset = "0xF83BF0", VA = "0xF83BF0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xF83C10", Offset = "0xF83C10", VA = "0xF83C10")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xF83C30", Offset = "0xF83C30", VA = "0xF83C30")]
		public void SendPressedEvent(PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xF83C4C", Offset = "0xF83C4C", VA = "0xF83C4C")]
		public BowserButtonData()
		{
		}
	}
	[Token(Token = "0x20003A8")]
	public class BowserButtonHandler
	{
		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<BowserButtonData> allButtonInstances;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<BowserButtonData> activeButtons;

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xF83F40", Offset = "0xF83F40", VA = "0xF83F40")]
		public BowserButtonHandler()
		{
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0xF83FE4", Offset = "0xF83FE4", VA = "0xF83FE4")]
		public void RegisterBowserButton(BowserButtonData button)
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0xF842CC", Offset = "0xF842CC", VA = "0xF842CC")]
		private void OnButtonGameObjectEnabled(BowserButtonData button)
		{
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0xF84374", Offset = "0xF84374", VA = "0xF84374")]
		private void OnButtonGameObjectDisabled(BowserButtonData button)
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0xF843CC", Offset = "0xF843CC", VA = "0xF843CC")]
		public void Tick()
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0xF84610", Offset = "0xF84610", VA = "0xF84610")]
		private void EnterState(BowserButtonData button, BowserButtonData.State newState)
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0xF849DC", Offset = "0xF849DC", VA = "0xF849DC")]
		private void PlayHaptics(RGXR_Device device, BowserButtonData.HapticEffect hapticEffect)
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0xF84BD8", Offset = "0xF84BD8", VA = "0xF84BD8")]
		public void AddHover(BowserButtonData button, RGXR_Device device)
		{
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0xF84A84", Offset = "0xF84A84", VA = "0xF84A84")]
		private void ApplyHoverEffect(BowserButtonData button)
		{
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0xF84C0C", Offset = "0xF84C0C", VA = "0xF84C0C")]
		public void RemoveHover(BowserButtonData button)
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0xF848B0", Offset = "0xF848B0", VA = "0xF848B0")]
		private void RemoveHoverEffect(BowserButtonData button)
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0xF84C3C", Offset = "0xF84C3C", VA = "0xF84C3C")]
		public void TryToPress(BowserButtonData button, PlayerAvatar playerAvatar, RGXR_Device inputDevice, bool isPhysicalPress)
		{
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xF84CDC", Offset = "0xF84CDC", VA = "0xF84CDC")]
		public void TryToPressFromRemote(BowserButtonData button)
		{
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xF84D24", Offset = "0xF84D24", VA = "0xF84D24")]
		public void Toggle(BowserButtonData button, bool toggled)
		{
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0xF84E9C", Offset = "0xF84E9C", VA = "0xF84E9C")]
		public void TemporaryDisablePressing(BowserButtonData button, float delay)
		{
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0xF84EB8", Offset = "0xF84EB8", VA = "0xF84EB8")]
		public void SetButtonCanBePressed(BowserButtonData button, bool canBePressed)
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0xF84F20", Offset = "0xF84F20", VA = "0xF84F20")]
		public bool CheckIfButton(GameObject target)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003A9")]
	public class PlayerHandPhysics
	{
		[Token(Token = "0x20003AA")]
		private struct GrabTarget
		{
			[Token(Token = "0x4001310")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4001311")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GrabbableData grabbableData;

			[Token(Token = "0x4001312")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GrabTriggerData grabTrigger;

			[Token(Token = "0x4001313")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HighlightData highlightData;
		}

		[Token(Token = "0x40012FD")]
		private const float DISTANT_GRAB_RANGE = 1f;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform throwAnchor;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3[] trackedMoves;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 previousPosition;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3[] trackedRotations;

		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion previousRotation;

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int numMovesTracked;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int currentTrackedMove;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabberData grabberData;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PlayerAvatar playerAvatar;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RGXR_Device inputDevice;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GrabbableHandler grabbableHandler;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private BowserButtonHandler buttonHandler;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private RaycastHit[] raycastHits;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<GrabTarget> validCollidersHit;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int grabbingLayerMask;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GrabTarget? closestGrabTarget;

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool isLeftHand;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private HighlightData.HighlightSource highlightSource;

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0xF84F90", Offset = "0xF84F90", VA = "0xF84F90")]
		public PlayerHandPhysics(GrabbableHandler grabbableHandler, BowserButtonHandler buttonHandler, Transform throwAnchor, GrabberData grabberData, PlayerAvatar playerAvatar, RGXR_Device inputDevice)
		{
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0xF8528C", Offset = "0xF8528C", VA = "0xF8528C")]
		private void OnIndexTipTriggerEnter(Collider myCollider, Collider other)
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xF853AC", Offset = "0xF853AC", VA = "0xF853AC")]
		private void OnHandTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xF85298", Offset = "0xF85298", VA = "0xF85298")]
		private bool CheckForButtonCollision(Collider other, bool collidingWithIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0xF853B4", Offset = "0xF853B4", VA = "0xF853B4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0xF855FC", Offset = "0xF855FC", VA = "0xF855FC")]
		public void CheckForGrabbablesInRange(GrabberData grabberData)
		{
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0xF85CEC", Offset = "0xF85CEC", VA = "0xF85CEC")]
		private void RemoveHighlightOnClosestGrabTarget()
		{
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0xF85B9C", Offset = "0xF85B9C", VA = "0xF85B9C")]
		private void UpdateGrabHighlight(GrabTarget? oldTarget, GrabTarget? grabTarget, bool isLeftHand)
		{
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xF85DC4", Offset = "0xF85DC4", VA = "0xF85DC4")]
		public GrabbableData TryGrab(Action onGrabDenied)
		{
			return null;
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0xF8559C", Offset = "0xF8559C", VA = "0xF8559C")]
		private Vector3 ToAngularVelocity(Quaternion quaternion)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0xF85F6C", Offset = "0xF85F6C", VA = "0xF85F6C")]
		public Vector3 GetHandMovementSpeed()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xF86074", Offset = "0xF86074", VA = "0xF86074")]
		public Vector3 GetHandAngularSpeed()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xF85FC0", Offset = "0xF85FC0", VA = "0xF85FC0")]
		private Vector3 MeanValue(Vector3[] values)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20003AC")]
	public class JukeboxButtonData : MonoBehaviour
	{
		[Token(Token = "0x20003AD")]
		public enum ButtonType
		{
			[Token(Token = "0x4001318")]
			Play,
			[Token(Token = "0x4001319")]
			Track,
			[Token(Token = "0x400131A")]
			FailedPlay
		}

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ButtonType buttonType;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BowserButtonData bowserButtonData;

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xF860F0", Offset = "0xF860F0", VA = "0xF860F0")]
		public JukeboxButtonData()
		{
		}
	}
}
namespace Bowser.RetroBox
{
	[Token(Token = "0x20003AE")]
	public class RetroBoxCartridgeAlienBlast : RetroBoxCartridge
	{
		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xF860F8", Offset = "0xF860F8", VA = "0xF860F8", Slot = "4")]
		public override Code Create(Hardware hardware)
		{
			return null;
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xF86288", Offset = "0xF86288", VA = "0xF86288")]
		public RetroBoxCartridgeAlienBlast()
		{
		}
	}
	[Token(Token = "0x20003AF")]
	public class AlienBlast : Code
	{
		[Token(Token = "0x20003B0")]
		private enum EState
		{
			[Token(Token = "0x4001331")]
			Boot,
			[Token(Token = "0x4001332")]
			Title,
			[Token(Token = "0x4001333")]
			Attract,
			[Token(Token = "0x4001334")]
			ExplodeTitle,
			[Token(Token = "0x4001335")]
			Instructions,
			[Token(Token = "0x4001336")]
			PresentLevel,
			[Token(Token = "0x4001337")]
			LevelOutro,
			[Token(Token = "0x4001338")]
			Ingame,
			[Token(Token = "0x4001339")]
			GameOver
		}

		[Token(Token = "0x20003B1")]
		private enum ESubState
		{
			[Token(Token = "0x400133B")]
			None
		}

		[Token(Token = "0x20003B2")]
		private struct CDude
		{
			[Token(Token = "0x400133C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float x;

			[Token(Token = "0x400133D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float y;
		}

		[Token(Token = "0x20003B3")]
		private struct CGame
		{
			[Token(Token = "0x400133E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public EState state;

			[Token(Token = "0x400133F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public ESubState substate;

			[Token(Token = "0x4001340")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int level_seconds;

			[Token(Token = "0x4001341")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int total_seconds;

			[Token(Token = "0x4001342")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int total_seconds_high;
		}

		[Token(Token = "0x20003B4")]
		private struct CStar
		{
			[Token(Token = "0x4001343")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float x;

			[Token(Token = "0x4001344")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float y;

			[Token(Token = "0x4001345")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float speed;

			[Token(Token = "0x4001346")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int color;
		}

		[Token(Token = "0x20003B5")]
		private class CEnemy
		{
			[Token(Token = "0x20003B6")]
			public enum EState
			{
				[Token(Token = "0x400134D")]
				Alive,
				[Token(Token = "0x400134E")]
				Exploding,
				[Token(Token = "0x400134F")]
				Dead
			}

			[Token(Token = "0x4001347")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public EState currentState;

			[Token(Token = "0x4001348")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float x;

			[Token(Token = "0x4001349")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float y;

			[Token(Token = "0x400134A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float speed;

			[Token(Token = "0x400134B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float time;

			[Token(Token = "0x60010ED")]
			[Address(RVA = "0xF87664", Offset = "0xF87664", VA = "0xF87664")]
			public bool Touch(Hardware hw, int x, int y)
			{
				return default(bool);
			}

			[Token(Token = "0x60010EE")]
			[Address(RVA = "0xF8630C", Offset = "0xF8630C", VA = "0xF8630C")]
			public CEnemy()
			{
			}
		}

		[Token(Token = "0x400131B")]
		private const int NUM_STARS = 30;

		[Token(Token = "0x400131C")]
		private const int NUM_ENEMIES = 10;

		[Token(Token = "0x400131D")]
		private const int STATE_DURATION_BOOT = 120;

		[Token(Token = "0x400131E")]
		private const int STATE_DURATION_TITLE = 240;

		[Token(Token = "0x400131F")]
		private const int STATE_DURATION_EXPLODETITLE = 60;

		[Token(Token = "0x4001320")]
		private const int STATE_DURATION_INGAME = 600;

		[Token(Token = "0x4001321")]
		private const int STATE_DURATION_GAMEOVER = 300;

		[Token(Token = "0x4001322")]
		private const int STATE_DURATION_GAMEOVER_ALLOWSKIP = 30;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CDude dude;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CGame game;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int state_time;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CStar[] stars;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CEnemy[] enemies;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int score;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int shotsFired;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool hasStartedSong;

		[Token(Token = "0x400132B")]
		private const int NUM_ENEMY_FRAMES = 2;

		[Token(Token = "0x400132C")]
		private const int NUM_ENEMY_FRAMES_EXPLODE = 3;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] star_color;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] enemy_frames;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int[] enemy_frames_explode;

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xF86158", Offset = "0xF86158", VA = "0xF86158")]
		public AlienBlast(Hardware hardware)
		{
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xF86314", Offset = "0xF86314", VA = "0xF86314", Slot = "4")]
		public override void Boot()
		{
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0xF864F0", Offset = "0xF864F0", VA = "0xF864F0", Slot = "5")]
		public override void Update()
		{
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xF867CC", Offset = "0xF867CC", VA = "0xF867CC", Slot = "6")]
		public override void Draw()
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xF86C1C", Offset = "0xF86C1C", VA = "0xF86C1C", Slot = "7")]
		public override void OnStartGame()
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xF86DA4", Offset = "0xF86DA4", VA = "0xF86DA4", Slot = "8")]
		public override void OnStopGame()
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xF86530", Offset = "0xF86530", VA = "0xF86530")]
		private void update_boot()
		{
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xF8680C", Offset = "0xF8680C", VA = "0xF8680C")]
		private void draw_boot()
		{
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xF86588", Offset = "0xF86588", VA = "0xF86588")]
		private void update_title()
		{
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0xF8685C", Offset = "0xF8685C", VA = "0xF8685C")]
		private void draw_title()
		{
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0xF865F0", Offset = "0xF865F0", VA = "0xF865F0")]
		private void update_explodelogo()
		{
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0xF868AC", Offset = "0xF868AC", VA = "0xF868AC")]
		private void draw_explode()
		{
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0xF86630", Offset = "0xF86630", VA = "0xF86630")]
		private void update_attract()
		{
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0xF8690C", Offset = "0xF8690C", VA = "0xF8690C")]
		private void draw_attract()
		{
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0xF86694", Offset = "0xF86694", VA = "0xF86694")]
		private void update_ingame()
		{
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0xF86974", Offset = "0xF86974", VA = "0xF86974")]
		private void draw_ingame()
		{
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0xF8675C", Offset = "0xF8675C", VA = "0xF8675C")]
		private void update_gameover()
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0xF86AD4", Offset = "0xF86AD4", VA = "0xF86AD4")]
		private void draw_gameover()
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0xF86324", Offset = "0xF86324", VA = "0xF86324")]
		private void stars_generate()
		{
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0xF86F30", Offset = "0xF86F30", VA = "0xF86F30")]
		private void stars_update()
		{
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0xF86F98", Offset = "0xF86F98", VA = "0xF86F98")]
		private void stars_draw()
		{
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0xF86C34", Offset = "0xF86C34", VA = "0xF86C34")]
		private void enemies_generate()
		{
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0xF87000", Offset = "0xF87000", VA = "0xF87000")]
		private void enemies_update()
		{
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0xF87070", Offset = "0xF87070", VA = "0xF87070")]
		private void enemies_draw()
		{
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0xF87370", Offset = "0xF87370", VA = "0xF87370")]
		private void enemy_draw_alive(CEnemy e)
		{
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0xF8727C", Offset = "0xF8727C", VA = "0xF8727C")]
		private void enemy_update_alive(CEnemy e)
		{
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0xF87474", Offset = "0xF87474", VA = "0xF87474")]
		private void enemy_draw_exploding(CEnemy e)
		{
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0xF872DC", Offset = "0xF872DC", VA = "0xF872DC")]
		private void enemy_update_exploding(CEnemy e)
		{
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0xF87158", Offset = "0xF87158", VA = "0xF87158")]
		private int enemy_kill(float x, float y)
		{
			return default(int);
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0xF870E4", Offset = "0xF870E4", VA = "0xF870E4")]
		private void update_dude()
		{
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0xF87240", Offset = "0xF87240", VA = "0xF87240")]
		private void draw_dude()
		{
		}
	}
	[Token(Token = "0x20003B7")]
	public class RetroBoxCartridgeAlienBlastAttractMode : RetroBoxCartridge
	{
		[Token(Token = "0x60010EF")]
		[Address(RVA = "0xF8780C", Offset = "0xF8780C", VA = "0xF8780C", Slot = "4")]
		public override Code Create(Hardware hardware)
		{
			return null;
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0xF878FC", Offset = "0xF878FC", VA = "0xF878FC")]
		public RetroBoxCartridgeAlienBlastAttractMode()
		{
		}
	}
	[Token(Token = "0x20003B8")]
	public class AlienBlastAttractMode : Code
	{
		[Token(Token = "0x20003B9")]
		private enum EState
		{
			[Token(Token = "0x400135A")]
			Boot,
			[Token(Token = "0x400135B")]
			Logo,
			[Token(Token = "0x400135C")]
			ExplodeLogo,
			[Token(Token = "0x400135D")]
			Title,
			[Token(Token = "0x400135E")]
			Instructions,
			[Token(Token = "0x400135F")]
			PresentLevel,
			[Token(Token = "0x4001360")]
			LevelOutro,
			[Token(Token = "0x4001361")]
			Game,
			[Token(Token = "0x4001362")]
			GameOver
		}

		[Token(Token = "0x20003BA")]
		private enum ESubState
		{
			[Token(Token = "0x4001364")]
			None
		}

		[Token(Token = "0x20003BB")]
		private struct CDude
		{
			[Token(Token = "0x4001365")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float x;

			[Token(Token = "0x4001366")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float y;
		}

		[Token(Token = "0x20003BC")]
		private struct CGame
		{
			[Token(Token = "0x4001367")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public EState state;

			[Token(Token = "0x4001368")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public ESubState substate;

			[Token(Token = "0x4001369")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int level_seconds;

			[Token(Token = "0x400136A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int total_seconds;

			[Token(Token = "0x400136B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int total_seconds_high;
		}

		[Token(Token = "0x20003BD")]
		private struct CStar
		{
			[Token(Token = "0x400136C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float x;

			[Token(Token = "0x400136D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float y;

			[Token(Token = "0x400136E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float speed;

			[Token(Token = "0x400136F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int color;
		}

		[Token(Token = "0x20003BE")]
		private struct CEnemy
		{
			[Token(Token = "0x4001370")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float x;

			[Token(Token = "0x4001371")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float y;

			[Token(Token = "0x4001372")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float speed;

			[Token(Token = "0x4001373")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float time;
		}

		[Token(Token = "0x4001350")]
		private const int NUM_STARS = 30;

		[Token(Token = "0x4001351")]
		private const int NUM_ENEMIES = 10;

		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CDude dude;

		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CGame game;

		[Token(Token = "0x4001354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int state_time;

		[Token(Token = "0x4001355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CStar[] stars;

		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CEnemy[] enemies;

		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] star_color;

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] enemy_frames;

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0xF8786C", Offset = "0xF8786C", VA = "0xF8786C")]
		public AlienBlastAttractMode(Hardware hardware)
		{
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0xF87900", Offset = "0xF87900", VA = "0xF87900", Slot = "4")]
		public override void Boot()
		{
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xF87AE0", Offset = "0xF87AE0", VA = "0xF87AE0", Slot = "5")]
		public override void Update()
		{
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0xF87D08", Offset = "0xF87D08", VA = "0xF87D08", Slot = "6")]
		public override void Draw()
		{
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0xF87EC0", Offset = "0xF87EC0", VA = "0xF87EC0", Slot = "7")]
		public override void OnStartGame()
		{
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0xF87EC4", Offset = "0xF87EC4", VA = "0xF87EC4", Slot = "8")]
		public override void OnStopGame()
		{
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0xF87BD8", Offset = "0xF87BD8", VA = "0xF87BD8")]
		private void update_boot()
		{
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0xF87D40", Offset = "0xF87D40", VA = "0xF87D40")]
		private void draw_boot()
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0xF87C2C", Offset = "0xF87C2C", VA = "0xF87C2C")]
		private void update_logo()
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0xF87DF8", Offset = "0xF87DF8", VA = "0xF87DF8")]
		private void draw_logo()
		{
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0xF87C5C", Offset = "0xF87C5C", VA = "0xF87C5C")]
		private void update_explodelogo()
		{
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0xF87E24", Offset = "0xF87E24", VA = "0xF87E24")]
		private void draw_explode()
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0xF87CB4", Offset = "0xF87CB4", VA = "0xF87CB4")]
		private void update_game()
		{
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0xF87E50", Offset = "0xF87E50", VA = "0xF87E50")]
		private void draw_game()
		{
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0xF87910", Offset = "0xF87910", VA = "0xF87910")]
		private void stars_generate()
		{
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0xF87EC8", Offset = "0xF87EC8", VA = "0xF87EC8")]
		private void stars_update()
		{
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0xF87F30", Offset = "0xF87F30", VA = "0xF87F30")]
		private void stars_draw()
		{
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0xF87F98", Offset = "0xF87F98", VA = "0xF87F98")]
		private void enemies_generate()
		{
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0xF880C8", Offset = "0xF880C8", VA = "0xF880C8")]
		private void enemies_update()
		{
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0xF881F0", Offset = "0xF881F0", VA = "0xF881F0")]
		private void enemies_draw()
		{
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0xF881A4", Offset = "0xF881A4", VA = "0xF881A4")]
		private void update_dude()
		{
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0xF883EC", Offset = "0xF883EC", VA = "0xF883EC")]
		private void draw_dude()
		{
		}
	}
	[Token(Token = "0x20003BF")]
	public class RetroBoxCartridgeSuperAlienBlast : RetroBoxCartridge
	{
		[Token(Token = "0x6001108")]
		[Address(RVA = "0xF88500", Offset = "0xF88500", VA = "0xF88500", Slot = "4")]
		public override Code Create(Hardware hardware)
		{
			return null;
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0xF88740", Offset = "0xF88740", VA = "0xF88740")]
		public RetroBoxCartridgeSuperAlienBlast()
		{
		}
	}
	[Token(Token = "0x20003C0")]
	public class SuperAlienBlast : Code
	{
		[Token(Token = "0x20003C1")]
		private enum EState
		{
			[Token(Token = "0x4001389")]
			Boot,
			[Token(Token = "0x400138A")]
			Title,
			[Token(Token = "0x400138B")]
			Attract,
			[Token(Token = "0x400138C")]
			ExplodeTitle,
			[Token(Token = "0x400138D")]
			Instructions,
			[Token(Token = "0x400138E")]
			PresentLevel,
			[Token(Token = "0x400138F")]
			LevelOutro,
			[Token(Token = "0x4001390")]
			Ingame,
			[Token(Token = "0x4001391")]
			GameOver
		}

		[Token(Token = "0x20003C2")]
		private enum ESubState
		{
			[Token(Token = "0x4001393")]
			None
		}

		[Token(Token = "0x20003C3")]
		private struct CDude
		{
			[Token(Token = "0x4001394")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float x;

			[Token(Token = "0x4001395")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float y;
		}

		[Token(Token = "0x20003C4")]
		private struct CGame
		{
			[Token(Token = "0x4001396")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public EState state;

			[Token(Token = "0x4001397")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public ESubState substate;

			[Token(Token = "0x4001398")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int level_seconds;

			[Token(Token = "0x4001399")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int total_seconds;

			[Token(Token = "0x400139A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int total_seconds_high;
		}

		[Token(Token = "0x20003C5")]
		private struct CStar
		{
			[Token(Token = "0x400139B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float x;

			[Token(Token = "0x400139C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float y;

			[Token(Token = "0x400139D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float speed;

			[Token(Token = "0x400139E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int color;
		}

		[Token(Token = "0x20003C6")]
		private class CEnemy
		{
			[Token(Token = "0x20003C7")]
			public enum EState
			{
				[Token(Token = "0x40013A5")]
				Alive,
				[Token(Token = "0x40013A6")]
				Exploding,
				[Token(Token = "0x40013A7")]
				Dead
			}

			[Token(Token = "0x400139F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public EState currentState;

			[Token(Token = "0x40013A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float x;

			[Token(Token = "0x40013A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float y;

			[Token(Token = "0x40013A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float speed;

			[Token(Token = "0x40013A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float time;

			[Token(Token = "0x6001129")]
			[Address(RVA = "0xF89828", Offset = "0xF89828", VA = "0xF89828")]
			public bool Touch(Hardware hw, int x, int y)
			{
				return default(bool);
			}

			[Token(Token = "0x600112A")]
			[Address(RVA = "0xF88744", Offset = "0xF88744", VA = "0xF88744")]
			public CEnemy()
			{
			}
		}

		[Token(Token = "0x4001374")]
		private const int NUM_STARS = 30;

		[Token(Token = "0x4001375")]
		private const int NUM_ENEMIES = 10;

		[Token(Token = "0x4001376")]
		private const int STATE_DURATION_BOOT = 120;

		[Token(Token = "0x4001377")]
		private const int STATE_DURATION_TITLE = 240;

		[Token(Token = "0x4001378")]
		private const int STATE_DURATION_EXPLODETITLE = 60;

		[Token(Token = "0x4001379")]
		private const int STATE_DURATION_INGAME = 600;

		[Token(Token = "0x400137A")]
		private const int STATE_DURATION_GAMEOVER = 300;

		[Token(Token = "0x400137B")]
		private const int STATE_DURATION_GAMEOVER_ALLOWSKIP = 30;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CDude dude;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CGame game;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int state_time;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CStar[] stars;

		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CEnemy[] enemies;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int score;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int shotsFired;

		[Token(Token = "0x4001383")]
		private const int NUM_ENEMY_FRAMES = 2;

		[Token(Token = "0x4001384")]
		private const int NUM_ENEMY_FRAMES_EXPLODE = 3;

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int[] star_color;

		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int[] enemy_frames;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int[] enemy_frames_explode;

		[Token(Token = "0x600110A")]
		[Address(RVA = "0xF88560", Offset = "0xF88560", VA = "0xF88560")]
		public SuperAlienBlast(Hardware hardware)
		{
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0xF8874C", Offset = "0xF8874C", VA = "0xF8874C", Slot = "4")]
		public override void Boot()
		{
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0xF888EC", Offset = "0xF888EC", VA = "0xF888EC", Slot = "5")]
		public override void Update()
		{
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0xF88BE0", Offset = "0xF88BE0", VA = "0xF88BE0", Slot = "6")]
		public override void Draw()
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0xF89028", Offset = "0xF89028", VA = "0xF89028", Slot = "7")]
		public override void OnStartGame()
		{
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0xF8902C", Offset = "0xF8902C", VA = "0xF8902C", Slot = "8")]
		public override void OnStopGame()
		{
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0xF8892C", Offset = "0xF8892C", VA = "0xF8892C")]
		private void update_boot()
		{
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0xF88C20", Offset = "0xF88C20", VA = "0xF88C20")]
		private void draw_boot()
		{
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0xF88984", Offset = "0xF88984", VA = "0xF88984")]
		private void update_title()
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0xF88C70", Offset = "0xF88C70", VA = "0xF88C70")]
		private void draw_title()
		{
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0xF889EC", Offset = "0xF889EC", VA = "0xF889EC")]
		private void update_explodelogo()
		{
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0xF88CB8", Offset = "0xF88CB8", VA = "0xF88CB8")]
		private void draw_explode()
		{
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0xF88A48", Offset = "0xF88A48", VA = "0xF88A48")]
		private void update_attract()
		{
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0xF88D18", Offset = "0xF88D18", VA = "0xF88D18")]
		private void draw_attract()
		{
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0xF88AAC", Offset = "0xF88AAC", VA = "0xF88AAC")]
		private void update_ingame()
		{
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0xF88D80", Offset = "0xF88D80", VA = "0xF88D80")]
		private void draw_ingame()
		{
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0xF88B70", Offset = "0xF88B70", VA = "0xF88B70")]
		private void update_gameover()
		{
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0xF88EE0", Offset = "0xF88EE0", VA = "0xF88EE0")]
		private void draw_gameover()
		{
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0xF8875C", Offset = "0xF8875C", VA = "0xF8875C")]
		private void stars_generate()
		{
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0xF89030", Offset = "0xF89030", VA = "0xF89030")]
		private void stars_update()
		{
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0xF89098", Offset = "0xF89098", VA = "0xF89098")]
		private void stars_draw()
		{
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0xF89100", Offset = "0xF89100", VA = "0xF89100")]
		private void enemies_generate()
		{
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0xF8925C", Offset = "0xF8925C", VA = "0xF8925C")]
		private void enemies_update()
		{
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0xF892CC", Offset = "0xF892CC", VA = "0xF892CC")]
		private void enemies_draw()
		{
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0xF895C8", Offset = "0xF895C8", VA = "0xF895C8")]
		private void enemy_draw_alive(CEnemy e)
		{
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0xF894D8", Offset = "0xF894D8", VA = "0xF894D8")]
		private void enemy_update_alive(CEnemy e)
		{
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0xF89684", Offset = "0xF89684", VA = "0xF89684")]
		private void enemy_draw_exploding(CEnemy e)
		{
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0xF89538", Offset = "0xF89538", VA = "0xF89538")]
		private void enemy_update_exploding(CEnemy e)
		{
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0xF893B4", Offset = "0xF893B4", VA = "0xF893B4")]
		private int enemy_kill(float x, float y)
		{
			return default(int);
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0xF89340", Offset = "0xF89340", VA = "0xF89340")]
		private void update_dude()
		{
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0xF8949C", Offset = "0xF8949C", VA = "0xF8949C")]
		private void draw_dude()
		{
		}
	}
	[Token(Token = "0x20003C8")]
	public class RetroBoxBIOS
	{
		[Token(Token = "0x40013A8")]
		public const byte NETWORKMESSAGEID_GAMEFRAME = 0;

		[Token(Token = "0x40013A9")]
		public const byte NETWORKMESSAGEID_STARTGAME = 1;

		[Token(Token = "0x40013AA")]
		public const int BUFFERSIZE_PLAYBACK = 15;

		[Token(Token = "0x40013AB")]
		public const int BUFFERSIZE_CATCHUP = 25;

		[Token(Token = "0x40013AC")]
		public const int CATCHUP_NETWORKFRAMESPERRPC = 64;

		[Token(Token = "0x40013AD")]
		public const int CATCHUP_FRAMESPERUPDATE = 20;

		[Token(Token = "0x40013AE")]
		public const float CATCHUP_TIMEOUT_FIRST = 5f;

		[Token(Token = "0x40013AF")]
		public const float CATCHUP_TIMEOUT_INTERVAL = 1f;

		[Token(Token = "0x40013B0")]
		public const float INITIALIZE_DURATION = 2f;

		[Token(Token = "0x40013B1")]
		public const float HARDWARE_INTERVAL = 1f / 30f;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static byte[] HardwareBootSplash_64x64;

		[Token(Token = "0x40013B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static byte[] HardwareBootSplash_128x128;

		[Token(Token = "0x600112B")]
		[Address(RVA = "0xF898BC", Offset = "0xF898BC", VA = "0xF898BC")]
		public RetroBoxBIOS()
		{
		}
	}
	[Token(Token = "0x20003C9")]
	public class RetroBoxCartridge : MonoBehaviour
	{
		[Token(Token = "0x20003CA")]
		public enum CodeType
		{
			[Token(Token = "0x40013C1")]
			CSharp,
			[Token(Token = "0x40013C2")]
			Lua
		}

		[Token(Token = "0x20003CB")]
		public enum ScreenMode
		{
			[Token(Token = "0x40013C4")]
			Hires_64x64,
			[Token(Token = "0x40013C5")]
			SuperHires_128x128
		}

		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CodeType codeType;

		[Token(Token = "0x40013B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ScreenMode screenMode;

		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RetroBoxPalette palette;

		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextAsset spritesData;

		[NonSerialized]
		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public string cartridgeContent;

		[Token(Token = "0x40013B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip[] songs;

		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int[] songsRemap;

		[Token(Token = "0x40013BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip[] sfxs;

		[Token(Token = "0x40013BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int[] sfxsRemap;

		[Token(Token = "0x40013BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string startGameEvent;

		[NonSerialized]
		[Token(Token = "0x40013BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public Dictionary<int, int> songsRemapDictionary;

		[NonSerialized]
		[Token(Token = "0x40013BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public Dictionary<int, int> sfxsRemapDictionary;

		[Token(Token = "0x600112D")]
		[Address(RVA = "0xF89994", Offset = "0xF89994", VA = "0xF89994")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0xF89AD8", Offset = "0xF89AD8", VA = "0xF89AD8", Slot = "4")]
		public virtual Code Create(Hardware hardware)
		{
			return null;
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0xF8628C", Offset = "0xF8628C", VA = "0xF8628C")]
		public RetroBoxCartridge()
		{
		}
	}
	[Token(Token = "0x20003CC")]
	public abstract class Code
	{
		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly Hardware hw;

		[Token(Token = "0x6001130")]
		[Address(RVA = "0xF862E4", Offset = "0xF862E4", VA = "0xF862E4")]
		public Code(Hardware hw)
		{
		}

		[Token(Token = "0x6001131")]
		public abstract void Boot();

		[Token(Token = "0x6001132")]
		public abstract void Update();

		[Token(Token = "0x6001133")]
		public abstract void Draw();

		[Token(Token = "0x6001134")]
		public abstract void OnStartGame();

		[Token(Token = "0x6001135")]
		public abstract void OnStopGame();
	}
	[Token(Token = "0x20003CD")]
	public class RetroBoxData : MonoBehaviour, IPunObservable, IPunOwnershipCallbacks
	{
		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material targetMaterial;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RetroBoxCartridge cartridge;

		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PhotonView photonView;

		[Token(Token = "0x40013CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioSource songSource;

		[Token(Token = "0x40013CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioSource sfxSource;

		[Token(Token = "0x40013CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public RetroBoxZapperData zapper;

		[Token(Token = "0x40013CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextAsset retroBoxLuaPrefix;

		[Token(Token = "0x40013CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextAsset retroBoxLuaSuffix;

		[Token(Token = "0x40013CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TokenSlotData tokenSlot;

		[Token(Token = "0x40013D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool tokenAdded;

		[Token(Token = "0x40013D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Header("Debug")]
		public bool forceMouseInput;

		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public bool useDevCartridge;

		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public RetroBoxCartridge devCartridge;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool logEnabled;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool spamEnabled;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public CachedLog log;

		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public CachedLog spam;

		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public byte[] screenWhileBuffering;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public byte[] screenWhileUndecided;

		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Texture2D screenTexture;

		[Token(Token = "0x40013DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public Color[] screenColors;

		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public Hardware hardware;

		[Token(Token = "0x40013DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public RetroBoxPalette palette;

		[Token(Token = "0x40013DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public float initializeTimer;

		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		public Queue<NetworkMessage> sendMessages;

		[Token(Token = "0x40013E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		public Queue<NetworkMessage> receiveMessages;

		[Token(Token = "0x40013E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		public List<NetworkMessage> currentGameMessages;

		[Token(Token = "0x40013E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		public float receiveCatchUpDataTimeout;

		[Token(Token = "0x40013E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[HideInInspector]
		public NetworkMessage[] aggregatedCatchupData;

		[Token(Token = "0x40013E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[HideInInspector]
		public Player sessionOwner;

		[Token(Token = "0x40013E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[HideInInspector]
		public Coroutine transmitCatchUpDataCoroutine;

		[Token(Token = "0x40013E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[HideInInspector]
		public Coroutine catchupCoroutine;

		[Token(Token = "0x40013E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[HideInInspector]
		public float accumulatedUpdateTime;

		[Token(Token = "0x40013E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private int internalSyncedSendFrameCount;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int internalSynchedPlayFrameCount;

		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private NetworkMode internalNetworkMode;

		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Action<RetroBoxData, PhotonView, Player> onOwnershipTransferred;

		[Token(Token = "0x40013EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Action<RetroBoxData, PhotonStream, PhotonMessageInfo> onSerializeView;

		[Token(Token = "0x40013ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Action<RetroBoxData, PhotonMessageInfo> onRequestCatchUpData;

		[Token(Token = "0x40013EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Action<RetroBoxData, short, short, NetworkMessage[], PhotonMessageInfo> onReceiveCatchUpData;

		[Token(Token = "0x40013EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Action<RetroBoxData> onLogSettingChanged;

		[Token(Token = "0x40013F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private bool? spamEnabledPrevious;

		[Token(Token = "0x40013F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13A")]
		private bool? logEnabledPrevious;

		[Token(Token = "0x170000DF")]
		public int syncedSendFrameCount
		{
			[Token(Token = "0x6001136")]
			[Address(RVA = "0xF89B48", Offset = "0xF89B48", VA = "0xF89B48")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001137")]
			[Address(RVA = "0xF89B50", Offset = "0xF89B50", VA = "0xF89B50")]
			set
			{
			}
		}

		[Token(Token = "0x170000E0")]
		public int syncedPlayFrameCount
		{
			[Token(Token = "0x6001138")]
			[Address(RVA = "0xF89BE0", Offset = "0xF89BE0", VA = "0xF89BE0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001139")]
			[Address(RVA = "0xF89BE8", Offset = "0xF89BE8", VA = "0xF89BE8")]
			set
			{
			}
		}

		[Token(Token = "0x170000E1")]
		public NetworkMode CurrentNetworkMode
		{
			[Token(Token = "0x600113A")]
			[Address(RVA = "0xF89C78", Offset = "0xF89C78", VA = "0xF89C78")]
			get
			{
				return default(NetworkMode);
			}
			[Token(Token = "0x600113B")]
			[Address(RVA = "0xF89C80", Offset = "0xF89C80", VA = "0xF89C80")]
			set
			{
			}
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0xF89D44", Offset = "0xF89D44", VA = "0xF89D44")]
		public void SetCallbacks(Action<RetroBoxData, PhotonView, Player> onOwnershipTransferred, Action<RetroBoxData, PhotonStream, PhotonMessageInfo> onSerializeView, Action<RetroBoxData, PhotonMessageInfo> onRequestCatchUpData, Action<RetroBoxData, short, short, NetworkMessage[], PhotonMessageInfo> onReceiveCatchUpData, Action<RetroBoxData> onLogSettingChanged)
		{
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0xF89D54", Offset = "0xF89D54", VA = "0xF89D54", Slot = "5")]
		public void OnOwnershipRequest(PhotonView targetView, Player requestingPlayer)
		{
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0xF89E40", Offset = "0xF89E40", VA = "0xF89E40", Slot = "6")]
		public void OnOwnershipTransfered(PhotonView targetView, Player previousOwner)
		{
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0xF89E6C", Offset = "0xF89E6C", VA = "0xF89E6C", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0xF89EC4", Offset = "0xF89EC4", VA = "0xF89EC4")]
		[PunRPC]
		private void BowserRequestCatchUpData(PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0xF89F14", Offset = "0xF89F14", VA = "0xF89F14")]
		[PunRPC]
		private void BowserReceiveCatchUpData(short firstFrame, short totalFrames, NetworkMessage[] catchUpData, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0xF89F74", Offset = "0xF89F74", VA = "0xF89F74")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0xF8A0C8", Offset = "0xF8A0C8", VA = "0xF8A0C8")]
		public RetroBoxData()
		{
		}
	}
	[Token(Token = "0x20003CE")]
	public enum NetworkMode
	{
		[Token(Token = "0x40013F3")]
		Initializing,
		[Token(Token = "0x40013F4")]
		NotSynced,
		[Token(Token = "0x40013F5")]
		Broadcasting,
		[Token(Token = "0x40013F6")]
		Flushing,
		[Token(Token = "0x40013F7")]
		Buffering,
		[Token(Token = "0x40013F8")]
		CatchUp,
		[Token(Token = "0x40013F9")]
		Playback
	}
	[Token(Token = "0x20003CF")]
	public class RetroBoxHandler
	{
		[Token(Token = "0x20003D0")]
		public delegate void OnRetroBoxGameEventHandler(string eventName, Dictionary<string, object> parameters);

		[Token(Token = "0x20003D3")]
		[CompilerGenerated]
		private sealed class <TransmitCatchUpData>d__42 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001404")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001405")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001406")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RetroBoxData instance;

			[Token(Token = "0x4001407")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public RetroBoxHandler <>4__this;

			[Token(Token = "0x4001408")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public PhotonMessageInfo info;

			[Token(Token = "0x4001409")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <upToFrame>5__2;

			[Token(Token = "0x400140A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private int <numRPCs>5__3;

			[Token(Token = "0x400140B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private List<NetworkMessage> <sendFrames>5__4;

			[Token(Token = "0x400140C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private short <sendIndex>5__5;

			[Token(Token = "0x400140D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			private int <i>5__6;

			[Token(Token = "0x170000E2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600117B")]
				[Address(RVA = "0xF8F10C", Offset = "0xF8F10C", VA = "0xF8F10C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600117D")]
				[Address(RVA = "0xF8F154", Offset = "0xF8F154", VA = "0xF8F154", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001178")]
			[Address(RVA = "0xF8E0E0", Offset = "0xF8E0E0", VA = "0xF8E0E0")]
			[DebuggerHidden]
			public <TransmitCatchUpData>d__42(int <>1__state)
			{
			}

			[Token(Token = "0x6001179")]
			[Address(RVA = "0xF8E8B0", Offset = "0xF8E8B0", VA = "0xF8E8B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600117A")]
			[Address(RVA = "0xF8E8B4", Offset = "0xF8E8B4", VA = "0xF8E8B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600117C")]
			[Address(RVA = "0xF8F114", Offset = "0xF8F114", VA = "0xF8F114", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003D4")]
		[CompilerGenerated]
		private sealed class <DoCatchUp>d__44 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400140E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400140F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001410")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RetroBoxHandler <>4__this;

			[Token(Token = "0x4001411")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public RetroBoxData instance;

			[Token(Token = "0x4001412")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public NetworkMessage[] catchUpData;

			[Token(Token = "0x4001413")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <breakTimeBuddy>5__2;

			[Token(Token = "0x4001414")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <i>5__3;

			[Token(Token = "0x170000E4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001181")]
				[Address(RVA = "0xF8F644", Offset = "0xF8F644", VA = "0xF8F644", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001183")]
				[Address(RVA = "0xF8F68C", Offset = "0xF8F68C", VA = "0xF8F68C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600117E")]
			[Address(RVA = "0xF8E2F4", Offset = "0xF8E2F4", VA = "0xF8E2F4")]
			[DebuggerHidden]
			public <DoCatchUp>d__44(int <>1__state)
			{
			}

			[Token(Token = "0x600117F")]
			[Address(RVA = "0xF8F15C", Offset = "0xF8F15C", VA = "0xF8F15C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001180")]
			[Address(RVA = "0xF8F160", Offset = "0xF8F160", VA = "0xF8F160", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001182")]
			[Address(RVA = "0xF8F64C", Offset = "0xF8F64C", VA = "0xF8F64C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RetroBoxData[] allRetroBoxInstances;

		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool isLeavingRoom;

		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private NetworkManager networkManager;

		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BowserTracking tracking;

		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TokenSlotHandler tokenSlotHandler;

		[Token(Token = "0x1400001B")]
		public event OnRetroBoxGameEventHandler onRetroBoxGameEvent
		{
			[Token(Token = "0x6001144")]
			[Address(RVA = "0xF8A0D0", Offset = "0xF8A0D0", VA = "0xF8A0D0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001145")]
			[Address(RVA = "0xF8A16C", Offset = "0xF8A16C", VA = "0xF8A16C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0xF8A208", Offset = "0xF8A208", VA = "0xF8A208")]
		public RetroBoxHandler(RetroBoxData[] allRetroBoxInstances, NetworkManager networkManager, BowserTracking tracking, TokenSlotHandler tokenSlotHandler)
		{
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0xF8B46C", Offset = "0xF8B46C", VA = "0xF8B46C")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0xF8B5EC", Offset = "0xF8B5EC", VA = "0xF8B5EC")]
		private bool CanAcceptToken(RetroBoxData instance)
		{
			return default(bool);
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0xF8B60C", Offset = "0xF8B60C", VA = "0xF8B60C")]
		private bool ControlledLocally(RetroBoxData instance)
		{
			return default(bool);
		}

		[Token(Token = "0x600114A")]
		[Address(RVA = "0xF8B630", Offset = "0xF8B630", VA = "0xF8B630")]
		private bool IsAlone()
		{
			return default(bool);
		}

		[Token(Token = "0x600114B")]
		[Address(RVA = "0xF8A9E8", Offset = "0xF8A9E8", VA = "0xF8A9E8")]
		private void LogReset(RetroBoxData instance)
		{
		}

		[Token(Token = "0x600114C")]
		[Address(RVA = "0xF8B6C4", Offset = "0xF8B6C4", VA = "0xF8B6C4")]
		private string FormatMessage(string message)
		{
			return null;
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0xF8B780", Offset = "0xF8B780", VA = "0xF8B780")]
		private void Log(RetroBoxData instance, string message)
		{
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0xF8B7B8", Offset = "0xF8B7B8", VA = "0xF8B7B8")]
		private void LogError(RetroBoxData instance, string message)
		{
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xF8B844", Offset = "0xF8B844", VA = "0xF8B844")]
		private void LogFlush(RetroBoxData instance)
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0xF8B880", Offset = "0xF8B880", VA = "0xF8B880")]
		private void Spam(RetroBoxData instance, string message)
		{
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0xF8B8B8", Offset = "0xF8B8B8", VA = "0xF8B8B8")]
		private void OnLeftRoom()
		{
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0xF8B99C", Offset = "0xF8B99C", VA = "0xF8B99C")]
		private void OnPlayerLeftRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x6001153")]
		[Address(RVA = "0xF8BAA4", Offset = "0xF8BAA4", VA = "0xF8BAA4")]
		private void SessionOwnerLeft(RetroBoxData instance)
		{
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0xF8B230", Offset = "0xF8B230", VA = "0xF8B230")]
		private void RebootArcadeMachine(RetroBoxData instance)
		{
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0xF8AB98", Offset = "0xF8AB98", VA = "0xF8AB98")]
		private void SetupDevCartridge(RetroBoxData instance)
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0xF8AFEC", Offset = "0xF8AFEC", VA = "0xF8AFEC")]
		private void SetupRendering(RetroBoxData instance)
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0xF8B11C", Offset = "0xF8B11C", VA = "0xF8B11C")]
		private void SetupScreenNoiseBuffers(RetroBoxData instance)
		{
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0xF8ACA4", Offset = "0xF8ACA4", VA = "0xF8ACA4")]
		private void SetupHardware(RetroBoxData instance)
		{
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0xF8BAD8", Offset = "0xF8BAD8", VA = "0xF8BAD8")]
		private void SetupNetworkMode(RetroBoxData instance)
		{
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0xF8BD0C", Offset = "0xF8BD0C", VA = "0xF8BD0C")]
		private void OnOwnershipTransferred(RetroBoxData instance, PhotonView targetView, Player previousOwner)
		{
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0xF8C104", Offset = "0xF8C104", VA = "0xF8C104")]
		private void OnSerializeView(RetroBoxData instance, PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0xF8C62C", Offset = "0xF8C62C", VA = "0xF8C62C")]
		private void EnqueueNetworkMessage(RetroBoxData instance, NetworkMessage message, bool broadcast = true)
		{
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0xF8C754", Offset = "0xF8C754", VA = "0xF8C754")]
		private void OnHardwareStartGame(RetroBoxData instance, int randomSeed)
		{
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0xF8C8F0", Offset = "0xF8C8F0", VA = "0xF8C8F0")]
		private void OnHardwareStopGame(RetroBoxData instance)
		{
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0xF8C9BC", Offset = "0xF8C9BC", VA = "0xF8C9BC")]
		private void RefreshTokenBalance(RetroBoxData instance)
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0xF8C9F0", Offset = "0xF8C9F0", VA = "0xF8C9F0")]
		private void OnZapperMoveFire(RetroBoxData instance, Vector2 position, bool fire)
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0xF8CC34", Offset = "0xF8CC34", VA = "0xF8CC34")]
		private void OnZapperGrabBegin(RetroBoxData instance)
		{
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0xF8B3A0", Offset = "0xF8B3A0", VA = "0xF8B3A0")]
		private void ShowScreen(RetroBoxData instance, byte[] screenData)
		{
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0xF8CC54", Offset = "0xF8CC54", VA = "0xF8CC54")]
		private void UpdateArcadeMachine(RetroBoxData instance)
		{
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0xF8DB10", Offset = "0xF8DB10", VA = "0xF8DB10")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0xF8DC20", Offset = "0xF8DC20", VA = "0xF8DC20")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0xF8DE5C", Offset = "0xF8DE5C", VA = "0xF8DE5C")]
		private void OnRequestCatchUpData(RetroBoxData instance, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0xF8E058", Offset = "0xF8E058", VA = "0xF8E058")]
		[IteratorStateMachine(typeof(<TransmitCatchUpData>d__42))]
		private IEnumerator TransmitCatchUpData(RetroBoxData instance, PhotonMessageInfo info)
		{
			return null;
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0xF8E108", Offset = "0xF8E108", VA = "0xF8E108")]
		private bool CatchUpPlayFrame(RetroBoxData instance, NetworkMessageGameFrame f, ref int breakTimeBuddy)
		{
			return default(bool);
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0xF8E278", Offset = "0xF8E278", VA = "0xF8E278")]
		[IteratorStateMachine(typeof(<DoCatchUp>d__44))]
		private IEnumerator DoCatchUp(RetroBoxData instance, NetworkMessage[] catchUpData)
		{
			return null;
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0xF8E31C", Offset = "0xF8E31C", VA = "0xF8E31C")]
		private void OnReceiveCatchUpData(RetroBoxData instance, short firstFrame, short totalFrames, NetworkMessage[] catchUpData, PhotonMessageInfo info)
		{
		}
	}
	[Token(Token = "0x20003D5")]
	public class Hardware
	{
		[Token(Token = "0x20003D6")]
		public enum GameState
		{
			[Token(Token = "0x4001441")]
			Attract,
			[Token(Token = "0x4001442")]
			Game
		}

		[Token(Token = "0x4001415")]
		private const byte AUDIOCOMMAND_NONE = byte.MaxValue;

		[Token(Token = "0x4001416")]
		private const byte AUDIOCOMMAND_STOP = 254;

		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int screenWidth;

		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int screenHeight;

		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] screenBufferA;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] screenBufferB;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[][] screenBuffers;

		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int currentScreenBuffer;

		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public byte[] screen;

		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public byte[] palette;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public byte sfxThisFrame;

		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public byte songThisFrame;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BowserTracking tracking;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Action<string, Dictionary<string, object>> onGameEvent;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly ROM rom;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RetroBoxCartridge cart;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Code code;

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private LuaState codeLua;

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private LuaFunction codeLuaInit;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private LuaFunction codeLuaUpdate;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private LuaFunction codeLuaDraw;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private LuaFunction codeLuaOnStartGame;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private LuaFunction codeLuaOnStopGame;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AudioSource songSource;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private AudioSource sfxSource;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private RandomMT rng;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int debugRandomNumbersGenerated;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public GameState gameState;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Action<int> onStartGame;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Action onStopGame;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Func<bool> shouldSubmitTracking;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int _syncedFrameCount;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float mouseX;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float mouseY;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public bool fire;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
		private bool firePrev;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEE")]
		public bool fireDown;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEF")]
		public bool fireUp;

		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool tryConsumeTokenResult;

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private CachedLog rngLog;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private CachedLog networkLog;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] font_offset;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] font_stride;

		[Token(Token = "0x170000E6")]
		public int syncedFrameCount
		{
			[Token(Token = "0x6001184")]
			[Address(RVA = "0xF90694", Offset = "0xF90694", VA = "0xF90694")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001185")]
			[Address(RVA = "0xF9069C", Offset = "0xF9069C", VA = "0xF9069C")]
			set
			{
			}
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0xF906A4", Offset = "0xF906A4", VA = "0xF906A4")]
		public Hardware(BowserTracking tracking, RetroBoxCartridge cart, AudioSource songSource, AudioSource sfxSource, string luaPrefix, string luaSuffix, Action<int> onStartGame, Action onStopGame, Func<bool> shouldSubmitTracking, Action<string, Dictionary<string, object>> onGameEvent)
		{
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0xF90B40", Offset = "0xF90B40", VA = "0xF90B40")]
		private void LoadLuaPartOfCartridge(string cartridgeContent, string luaPrefix, string luaSuffix)
		{
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0xF90E34", Offset = "0xF90E34", VA = "0xF90E34")]
		[Conditional("RNG_LOG_ENABLED")]
		private void ResetRNGLog(int randomSeed)
		{
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0xF90F20", Offset = "0xF90F20", VA = "0xF90F20")]
		[Conditional("RNG_LOG_ENABLED")]
		private void LogRNG(string message)
		{
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0xF90F50", Offset = "0xF90F50", VA = "0xF90F50")]
		[Conditional("RNG_LOG_ENABLED")]
		private void FlushLog()
		{
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0xF90F6C", Offset = "0xF90F6C", VA = "0xF90F6C")]
		[Conditional("NETWORK_LOG_ENABLED")]
		private void NetworkLogReset(int randomSeed)
		{
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0xF91058", Offset = "0xF91058", VA = "0xF91058")]
		[Conditional("NETWORK_LOG_ENABLED")]
		private void NetworkLog(string message)
		{
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0xF91074", Offset = "0xF91074", VA = "0xF91074")]
		[Conditional("NETWORK_LOG_ENABLED")]
		private void NetworkLogError(string message)
		{
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0xF91090", Offset = "0xF91090", VA = "0xF91090")]
		[Conditional("NETWORK_LOG_ENABLED")]
		private void NetworkLogFlush()
		{
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0xF910AC", Offset = "0xF910AC", VA = "0xF910AC")]
		public int Round(float v)
		{
			return default(int);
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0xF91188", Offset = "0xF91188", VA = "0xF91188")]
		public float Floor(float v)
		{
			return default(float);
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0xF91190", Offset = "0xF91190", VA = "0xF91190")]
		public int BitwiseAnd(int a, int b)
		{
			return default(int);
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0xF91198", Offset = "0xF91198", VA = "0xF91198")]
		public bool TryConsumeToken()
		{
			return default(bool);
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0xF911A0", Offset = "0xF911A0", VA = "0xF911A0")]
		public float Mid(float a, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0xF911A8", Offset = "0xF911A8", VA = "0xF911A8")]
		public void LuaPrepareFrame()
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0xF90A80", Offset = "0xF90A80", VA = "0xF90A80")]
		private void ResetRNG(int seed = -1)
		{
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0xF91460", Offset = "0xF91460", VA = "0xF91460")]
		public void StartGame()
		{
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0xF914A0", Offset = "0xF914A0", VA = "0xF914A0")]
		public void OnStartGame(int randomSeed)
		{
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0xF91594", Offset = "0xF91594", VA = "0xF91594")]
		public void StopGame()
		{
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0xF91608", Offset = "0xF91608", VA = "0xF91608")]
		public void Reboot()
		{
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0xF91698", Offset = "0xF91698", VA = "0xF91698")]
		public void ResetFrame()
		{
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0xF916A4", Offset = "0xF916A4", VA = "0xF916A4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0xF91AB0", Offset = "0xF91AB0", VA = "0xF91AB0")]
		public void Draw()
		{
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0xF91B04", Offset = "0xF91B04", VA = "0xF91B04")]
		public void SetPixel(int c, float x, float y)
		{
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0xF91BA8", Offset = "0xF91BA8", VA = "0xF91BA8")]
		public float RandomValue(float max)
		{
			return default(float);
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0xF91BE8", Offset = "0xF91BE8", VA = "0xF91BE8")]
		public int Stat(int address)
		{
			return default(int);
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0xF91C24", Offset = "0xF91C24", VA = "0xF91C24")]
		public int GetPixelSprite(float x, float y)
		{
			return default(int);
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0xF91CA4", Offset = "0xF91CA4", VA = "0xF91CA4")]
		private void SetPaletteEntry(int entry, int newValue)
		{
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0xF90B08", Offset = "0xF90B08", VA = "0xF90B08")]
		public void ResetPalette()
		{
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0xF91CD8", Offset = "0xF91CD8", VA = "0xF91CD8")]
		public void SetPalette(int c0, int c1, int mode = 0)
		{
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0xF91CDC", Offset = "0xF91CDC", VA = "0xF91CDC")]
		public void SetPalette(Dictionary<int, int> fullpal)
		{
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0xF91E38", Offset = "0xF91E38", VA = "0xF91E38")]
		public int GetPixel(float x, float y)
		{
			return default(int);
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0xF91EB8", Offset = "0xF91EB8", VA = "0xF91EB8")]
		public int GetPixel(int i)
		{
			return default(int);
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0xF91EE8", Offset = "0xF91EE8", VA = "0xF91EE8")]
		public void ClearScreen(int c = 0)
		{
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0xF91F64", Offset = "0xF91F64", VA = "0xF91F64")]
		public void DrawSprite(int sprite_id, float draw_x, float draw_y, bool flipx = false, bool flipy = false)
		{
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0xF920DC", Offset = "0xF920DC", VA = "0xF920DC")]
		public void DrawSpriteWH(int sprite_id, float draw_x, float draw_y, int sprites_w, int sprites_h)
		{
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0xF9219C", Offset = "0xF9219C", VA = "0xF9219C")]
		public void DrawSpriteStretched(int spriteSheetX, int spriteSheetY, int spriteSheetW, int spriteSheetH, float drawX, float drawY, float drawWidth = -1f, float drawHeight = -1f, bool flipX = false, bool flipY = false)
		{
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0xF923FC", Offset = "0xF923FC", VA = "0xF923FC")]
		public void DrawLine(float x0, float y0, float x1, float y1, int color)
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0xF92554", Offset = "0xF92554", VA = "0xF92554")]
		public void DrawMap(int celx, int cely, float screenx, float screeny, int celw, int celh, int layer = -1)
		{
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0xF92658", Offset = "0xF92658", VA = "0xF92658")]
		public void PrintXYCustomFont(string str, int draw_x, int draw_y, int col, int font = 0)
		{
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0xF92778", Offset = "0xF92778", VA = "0xF92778")]
		public void PlaySFX(int sfx_id = 254)
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0xF92780", Offset = "0xF92780", VA = "0xF92780")]
		public void PlaySong(int song_id = 254)
		{
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0xF92788", Offset = "0xF92788", VA = "0xF92788")]
		public void Flip()
		{
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0xF927DC", Offset = "0xF927DC", VA = "0xF927DC")]
		public void TickAudio()
		{
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0xF92978", Offset = "0xF92978", VA = "0xF92978")]
		public void DrawSpriteReplace(float drawX, float drawY, float sourceX, float sourceY, float width, float height, int[] replaceTable, bool flipX = false, bool flipY = false)
		{
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xF91514", Offset = "0xF91514", VA = "0xF91514")]
		public void Track(string eventName, Dictionary<string, object> parameters)
		{
		}
	}
	[Token(Token = "0x20003D8")]
	[CustomLuaClass]
	public static class RetroBoxLua
	{
		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Hardware hardware;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static CachedLog log;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Dictionary<int, int> palDictionary;

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0xF92DA0", Offset = "0xF92DA0", VA = "0xF92DA0")]
		public static void LogInit()
		{
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0xF92DA4", Offset = "0xF92DA4", VA = "0xF92DA4")]
		public static void LogFlush()
		{
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0xF92DA8", Offset = "0xF92DA8", VA = "0xF92DA8")]
		public static void Spr(int spriteID, float x, float y)
		{
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0xF92E30", Offset = "0xF92E30", VA = "0xF92E30")]
		public static void Spr(int spriteID, float x, float y, bool flipX)
		{
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0xF92EC4", Offset = "0xF92EC4", VA = "0xF92EC4")]
		public static void Spr(int spriteID, float x, float y, bool flipX, bool flipY)
		{
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xF92F5C", Offset = "0xF92F5C", VA = "0xF92F5C")]
		public static void SSpr(int spriteSheetX, int spriteSheetY, int spriteSheetW, int spriteSheetH, int drawX, int drawY)
		{
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0xF93108", Offset = "0xF93108", VA = "0xF93108")]
		public static void SSpr(int spriteSheetX, int spriteSheetY, int spriteSheetW, int spriteSheetH, int drawX, int drawY, int drawWidth)
		{
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xF931BC", Offset = "0xF931BC", VA = "0xF931BC")]
		public static void SSpr(int spriteSheetX, int spriteSheetY, int spriteSheetW, int spriteSheetH, int drawX, int drawY, int drawWidth, int drawHeight)
		{
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0xF9327C", Offset = "0xF9327C", VA = "0xF9327C")]
		public static void SSpr(int spriteSheetX, int spriteSheetY, int spriteSheetW, int spriteSheetH, int drawX, int drawY, int drawWidth, int drawHeight, bool flipX)
		{
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0xF9300C", Offset = "0xF9300C", VA = "0xF9300C")]
		public static void SSpr(int spriteSheetX, int spriteSheetY, int spriteSheetW, int spriteSheetH, int drawX, int drawY, int drawWidth, int drawHeight, bool flipX, bool flipY)
		{
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0xF93344", Offset = "0xF93344", VA = "0xF93344")]
		public static void Map(int celx, int cely, float screenx, float screeny, int celw, int celh)
		{
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0xF933EC", Offset = "0xF933EC", VA = "0xF933EC")]
		public static void Map(int celx, int cely, float screenx, float screeny, int celw, int celh, int layer)
		{
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0xF93494", Offset = "0xF93494", VA = "0xF93494")]
		public static void PSet(float x, float y)
		{
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0xF93510", Offset = "0xF93510", VA = "0xF93510")]
		public static void PSet(float x, float y, int c)
		{
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0xF93590", Offset = "0xF93590", VA = "0xF93590")]
		public static int PGet(float x, float y)
		{
			return default(int);
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0xF93608", Offset = "0xF93608", VA = "0xF93608")]
		public static void Cls()
		{
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0xF9366C", Offset = "0xF9366C", VA = "0xF9366C")]
		public static void Cls(int c)
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xF936D4", Offset = "0xF936D4", VA = "0xF936D4")]
		public static void Print(string message)
		{
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0xF9372C", Offset = "0xF9372C", VA = "0xF9372C")]
		public static void Print(string message, float x, float y)
		{
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0xF93784", Offset = "0xF93784", VA = "0xF93784")]
		public static void PrintH(string message)
		{
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xF93788", Offset = "0xF93788", VA = "0xF93788")]
		public static float Mid(float a, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xF937F8", Offset = "0xF937F8", VA = "0xF937F8")]
		public static float Rnd()
		{
			return default(float);
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xF93848", Offset = "0xF93848", VA = "0xF93848")]
		public static float Rnd(float max)
		{
			return default(float);
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0xF938B8", Offset = "0xF938B8", VA = "0xF938B8")]
		public static void Add(LuaTable table, LuaObject value)
		{
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xF938BC", Offset = "0xF938BC", VA = "0xF938BC")]
		public static void Add(LuaTable table, LuaObject value, int i)
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xF938C0", Offset = "0xF938C0", VA = "0xF938C0")]
		public static float Flr(float v)
		{
			return default(float);
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xF93930", Offset = "0xF93930", VA = "0xF93930")]
		public static int BAnd(int a, int b)
		{
			return default(int);
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xF939A4", Offset = "0xF939A4", VA = "0xF939A4")]
		public static bool TryConsumeToken()
		{
			return default(bool);
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xF93A08", Offset = "0xF93A08", VA = "0xF93A08")]
		public static int Ord(string s)
		{
			return default(int);
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0xF93A2C", Offset = "0xF93A2C", VA = "0xF93A2C")]
		public static string Sub(string s, int start)
		{
			return null;
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0xF93A44", Offset = "0xF93A44", VA = "0xF93A44")]
		public static string Sub(string s, int start, int end)
		{
			return null;
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0xF93A68", Offset = "0xF93A68", VA = "0xF93A68")]
		public static int Ord(string s, int index)
		{
			return default(int);
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0xF93A88", Offset = "0xF93A88", VA = "0xF93A88")]
		public static int Peek(int address)
		{
			return default(int);
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0xF93A90", Offset = "0xF93A90", VA = "0xF93A90")]
		public static void Poke(int address, int value)
		{
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0xF93A94", Offset = "0xF93A94", VA = "0xF93A94")]
		public static void Cartdata(string cartID)
		{
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0xF93A98", Offset = "0xF93A98", VA = "0xF93A98")]
		public static int DGet(int address)
		{
			return default(int);
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0xF93AA0", Offset = "0xF93AA0", VA = "0xF93AA0")]
		public static void DSet(int address, int value)
		{
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xF93AA4", Offset = "0xF93AA4", VA = "0xF93AA4")]
		public static int SGet(float x, float y)
		{
			return default(int);
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xF93B1C", Offset = "0xF93B1C", VA = "0xF93B1C")]
		public static void Sfx(int id)
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xF93B84", Offset = "0xF93B84", VA = "0xF93B84")]
		public static void Sfx(int id, int channel)
		{
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0xF93BEC", Offset = "0xF93BEC", VA = "0xF93BEC")]
		public static void Sfx(int id, int channel, int offset)
		{
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xF93C54", Offset = "0xF93C54", VA = "0xF93C54")]
		public static void Sfx(int id, int channel, int offset, int length)
		{
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xF93CBC", Offset = "0xF93CBC", VA = "0xF93CBC")]
		public static void Music(int id)
		{
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0xF93D24", Offset = "0xF93D24", VA = "0xF93D24")]
		public static void Music(int id, int fadeMS)
		{
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xF93D8C", Offset = "0xF93D8C", VA = "0xF93D8C")]
		public static void Music(int id, int fadeMS, int channelMask)
		{
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xF93DF4", Offset = "0xF93DF4", VA = "0xF93DF4")]
		public static void Pal()
		{
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0xF93E74", Offset = "0xF93E74", VA = "0xF93E74")]
		public static void Pal(int c0, int c1)
		{
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xF93EEC", Offset = "0xF93EEC", VA = "0xF93EEC")]
		public static void Pal(int c0, int c1, int mode)
		{
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0xF93F64", Offset = "0xF93F64", VA = "0xF93F64")]
		public static void Pal(LuaTable table)
		{
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0xF9435C", Offset = "0xF9435C", VA = "0xF9435C")]
		public static bool BtnP(int button)
		{
			return default(bool);
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0xF943C0", Offset = "0xF943C0", VA = "0xF943C0")]
		public static int Stat(int address)
		{
			return default(int);
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xF94428", Offset = "0xF94428", VA = "0xF94428")]
		public static void Line()
		{
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xF9442C", Offset = "0xF9442C", VA = "0xF9442C")]
		public static void Line(float x0)
		{
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0xF94430", Offset = "0xF94430", VA = "0xF94430")]
		public static void Line(float x0, float y0)
		{
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0xF94434", Offset = "0xF94434", VA = "0xF94434")]
		public static void Line(float x0, float y0, float x1)
		{
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0xF94438", Offset = "0xF94438", VA = "0xF94438")]
		public static void Line(float x0, float y0, float x1, float y1)
		{
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0xF9443C", Offset = "0xF9443C", VA = "0xF9443C")]
		public static void Line(float x0, float y0, float x1, float y1, int color)
		{
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0xF944D4", Offset = "0xF944D4", VA = "0xF944D4")]
		public static void SprR(float dx, float dy, float sx, float sy, float w, float h, int[] replacetable)
		{
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0xF9458C", Offset = "0xF9458C", VA = "0xF9458C")]
		public static void Track(string eventName, LuaTable parameterTable)
		{
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0xF948DC", Offset = "0xF948DC", VA = "0xF948DC")]
		public static void StartGame()
		{
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0xF9493C", Offset = "0xF9493C", VA = "0xF9493C")]
		public static void StopGame()
		{
		}
	}
	[Token(Token = "0x20003D9")]
	public abstract class NetworkMessage
	{
		[Token(Token = "0x60011F7")]
		public abstract byte GetMessageID();

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xF94A2C", Offset = "0xF94A2C", VA = "0xF94A2C")]
		public static short Serialize(StreamBuffer outStream, object o)
		{
			return default(short);
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0xF94FA8", Offset = "0xF94FA8", VA = "0xF94FA8")]
		public static object Deserialize(StreamBuffer inStream, short length)
		{
			return null;
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xF954C4", Offset = "0xF954C4", VA = "0xF954C4")]
		protected NetworkMessage()
		{
		}
	}
	[Token(Token = "0x20003DA")]
	public class NetworkMessageGameFrame : NetworkMessage
	{
		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public short updateFrame;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float inputX;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float inputY;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool fire;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool remote;

		[Token(Token = "0x400144E")]
		private const int MESSAGE_SIZE = 12;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly byte[] mem;

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0xF954CC", Offset = "0xF954CC", VA = "0xF954CC", Slot = "4")]
		public override byte GetMessageID()
		{
			return default(byte);
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xF94B7C", Offset = "0xF94B7C", VA = "0xF94B7C")]
		public new static short Serialize(StreamBuffer outStream, object o)
		{
			return default(short);
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0xF95064", Offset = "0xF95064", VA = "0xF95064")]
		public new static object Deserialize(StreamBuffer inStream, short length)
		{
			return null;
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0xF954D4", Offset = "0xF954D4", VA = "0xF954D4")]
		public NetworkMessageGameFrame()
		{
		}
	}
	[Token(Token = "0x20003DB")]
	public class NetworkMessageStartGame : NetworkMessage
	{
		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int randomSeed;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Player sessionOwner;

		[Token(Token = "0x4001452")]
		private const int MESSAGE_SIZE = 8;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly byte[] mem;

		[Token(Token = "0x6001200")]
		[Address(RVA = "0xF95544", Offset = "0xF95544", VA = "0xF95544", Slot = "4")]
		public override byte GetMessageID()
		{
			return default(byte);
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0xF94DAC", Offset = "0xF94DAC", VA = "0xF94DAC")]
		public new static short Serialize(StreamBuffer outStream, object o)
		{
			return default(short);
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0xF95294", Offset = "0xF95294", VA = "0xF95294")]
		public new static object Deserialize(StreamBuffer inStream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0xF9554C", Offset = "0xF9554C", VA = "0xF9554C")]
		public NetworkMessageStartGame()
		{
		}
	}
	[Token(Token = "0x20003DC")]
	public class RetroBoxPalette : MonoBehaviour
	{
		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color[] palette;

		[Token(Token = "0x6001205")]
		[Address(RVA = "0xF955BC", Offset = "0xF955BC", VA = "0xF955BC")]
		public RetroBoxPalette()
		{
		}
	}
	[Token(Token = "0x20003DD")]
	public class ROM
	{
		[Token(Token = "0x4001455")]
		private const int PIXELS_PER_TILE = 64;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[] spritesData;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] mapData;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sprite[] sprites;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip[] songs;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip[] sfxs;

		[Token(Token = "0x6001206")]
		[Address(RVA = "0xF90A2C", Offset = "0xF90A2C", VA = "0xF90A2C")]
		public ROM(RetroBoxCartridge cartridge)
		{
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0xF95B58", Offset = "0xF95B58", VA = "0xF95B58")]
		private List<string> GetCartridgeSection(string cartridgeContent, string sectionName, string sectionEnd = "__")
		{
			return null;
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0xF955C4", Offset = "0xF955C4", VA = "0xF955C4")]
		private void ReadSprites(string cartridgeContent)
		{
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0xF95910", Offset = "0xF95910", VA = "0xF95910")]
		private void ReadMap(string cartridgeContent)
		{
		}
	}
	[Token(Token = "0x20003DE")]
	public class Sprite
	{
		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int w;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int h;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public byte[] pixels;

		[Token(Token = "0x600120A")]
		[Address(RVA = "0xF95D78", Offset = "0xF95D78", VA = "0xF95D78")]
		public Sprite()
		{
		}
	}
	[Token(Token = "0x20003DF")]
	public class RetroBoxZapperData : MonoBehaviour
	{
		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GrabbableData grabbableData;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ReturnOnReleaseData returnOnReleaseData;

		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool fire;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rayTransform;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action<Vector2, bool> onMoveFire;

		[Token(Token = "0x4001463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action onGrabBegin;

		[Token(Token = "0x600120B")]
		[Address(RVA = "0xF95D80", Offset = "0xF95D80", VA = "0xF95D80")]
		public void SetListeners(Action<Vector2, bool> onMoveFire, Action onGrabBegin)
		{
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0xF95D88", Offset = "0xF95D88", VA = "0xF95D88")]
		public RetroBoxZapperData()
		{
		}
	}
	[Token(Token = "0x20003E0")]
	public class RetroBoxZapperLogic : IBowserTickable
	{
		[Token(Token = "0x4001464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private RetroBoxZapperData data;

		[Token(Token = "0x4001465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RGXR_Device playerInputDevice;

		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool fireLastFrame;

		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector2 hitPosition;

		[Token(Token = "0x600120D")]
		[Address(RVA = "0xF95D90", Offset = "0xF95D90", VA = "0xF95D90")]
		public RetroBoxZapperLogic(RetroBoxZapperData data, GrabbableData grabbable)
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0xF95ED4", Offset = "0xF95ED4", VA = "0xF95ED4")]
		private void OnGrabBegin(PlayerAvatar owner, RGXR_Device playerInputDevice)
		{
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0xF95F0C", Offset = "0xF95F0C", VA = "0xF95F0C")]
		private void OnGrabEnd(Vector3 throwForce)
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xF95F18", Offset = "0xF95F18", VA = "0xF95F18", Slot = "4")]
		public bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0xF95F40", Offset = "0xF95F40", VA = "0xF95F40", Slot = "5")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0xF96110", Offset = "0xF96110", VA = "0xF96110")]
		private bool Trigger()
		{
			return default(bool);
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0xF96190", Offset = "0xF96190", VA = "0xF96190", Slot = "6")]
		public void LateTick()
		{
		}
	}
}
namespace Bowser.Discord
{
	[Token(Token = "0x20003E1")]
	public enum UploadStatus
	{
		[Token(Token = "0x4001469")]
		InProgress,
		[Token(Token = "0x400146A")]
		Success,
		[Token(Token = "0x400146B")]
		FailUnknown
	}
	[Token(Token = "0x20003E2")]
	public class BowserDiscord
	{
		[Token(Token = "0x20003E3")]
		public class CustomDiscordMessage
		{
			[Token(Token = "0x4001477")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string id;

			[Token(Token = "0x4001478")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string htmlContent;

			[Token(Token = "0x4001479")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string htmlHeader;

			[Token(Token = "0x400147A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string timestamp;

			[Token(Token = "0x400147B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string avatarUrl;

			[Token(Token = "0x400147C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string updatedAt;

			[Token(Token = "0x600122B")]
			[Address(RVA = "0xF9724C", Offset = "0xF9724C", VA = "0xF9724C", Slot = "3")]
			public override string ToString()
			{
				return null;
			}

			[Token(Token = "0x600122C")]
			[Address(RVA = "0xF97588", Offset = "0xF97588", VA = "0xF97588")]
			public CustomDiscordMessage()
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003E4")]
		[CompilerGenerated]
		private struct <SetupWebSocket>d__14 : IAsyncStateMachine
		{
			[Token(Token = "0x400147D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400147E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x400147F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public BowserDiscord <>4__this;

			[Token(Token = "0x4001480")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private object <>7__wrap1;

			[Token(Token = "0x4001481")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <>7__wrap2;

			[Token(Token = "0x4001482")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private TaskAwaiter <>u__1;

			[Token(Token = "0x600122D")]
			[Address(RVA = "0xF97590", Offset = "0xF97590", VA = "0xF97590", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600122E")]
			[Address(RVA = "0xF97A50", Offset = "0xF97A50", VA = "0xF97A50", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003E5")]
		[CompilerGenerated]
		private struct <_SetupWebSocket>d__15 : IAsyncStateMachine
		{
			[Token(Token = "0x4001483")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001484")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001485")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BowserDiscord <>4__this;

			[Token(Token = "0x4001486")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private TaskAwaiter <>u__1;

			[Token(Token = "0x4001487")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TaskAwaiter<CustomDiscordMessage> <>u__2;

			[Token(Token = "0x600122F")]
			[Address(RVA = "0xF97A5C", Offset = "0xF97A5C", VA = "0xF97A5C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001230")]
			[Address(RVA = "0xF97F18", Offset = "0xF97F18", VA = "0xF97F18", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003E6")]
		[CompilerGenerated]
		private struct <SendAsync>d__16 : IAsyncStateMachine
		{
			[Token(Token = "0x4001488")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001489")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x400148A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string message;

			[Token(Token = "0x400148B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public BowserDiscord <>4__this;

			[Token(Token = "0x400148C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TaskAwaiter <>u__1;

			[Token(Token = "0x6001231")]
			[Address(RVA = "0xF97F24", Offset = "0xF97F24", VA = "0xF97F24", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001232")]
			[Address(RVA = "0xF980D4", Offset = "0xF980D4", VA = "0xF980D4", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003E7")]
		[CompilerGenerated]
		private struct <SendAsync>d__17 : IAsyncStateMachine
		{
			[Token(Token = "0x400148D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400148E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x400148F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BowserDiscord <>4__this;

			[Token(Token = "0x4001490")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public byte[] message;

			[Token(Token = "0x4001491")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TaskAwaiter <>u__1;

			[Token(Token = "0x6001233")]
			[Address(RVA = "0xF980E0", Offset = "0xF980E0", VA = "0xF980E0", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001234")]
			[Address(RVA = "0xF982D4", Offset = "0xF982D4", VA = "0xF982D4", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20003E8")]
		[CompilerGenerated]
		private struct <ReceiveAsync>d__18 : IAsyncStateMachine
		{
			[Token(Token = "0x4001492")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001493")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder<CustomDiscordMessage> <>t__builder;

			[Token(Token = "0x4001494")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BowserDiscord <>4__this;

			[Token(Token = "0x4001495")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private MemoryStream <memoryStream>5__2;

			[Token(Token = "0x4001496")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private MemoryStream <>7__wrap2;

			[Token(Token = "0x4001497")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private ArraySegment<byte> <buffer>5__4;

			[Token(Token = "0x4001498")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private TaskAwaiter<WebSocketReceiveResult> <>u__1;

			[Token(Token = "0x6001235")]
			[Address(RVA = "0xF982E0", Offset = "0xF982E0", VA = "0xF982E0", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001236")]
			[Address(RVA = "0xF989AC", Offset = "0xF989AC", VA = "0xF989AC", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x20003E9")]
		[CompilerGenerated]
		private sealed class <UploadPictureCoroutine>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001499")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400149A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400149B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BowserDiscord <>4__this;

			[Token(Token = "0x400149C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string userName;

			[Token(Token = "0x400149D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Texture2D picture;

			[Token(Token = "0x400149E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UnityWebRequest <www>5__2;

			[Token(Token = "0x170000E7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600123A")]
				[Address(RVA = "0xF98F38", Offset = "0xF98F38", VA = "0xF98F38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600123C")]
				[Address(RVA = "0xF98F80", Offset = "0xF98F80", VA = "0xF98F80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001237")]
			[Address(RVA = "0xF968F8", Offset = "0xF968F8", VA = "0xF968F8")]
			[DebuggerHidden]
			public <UploadPictureCoroutine>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6001238")]
			[Address(RVA = "0xF98A04", Offset = "0xF98A04", VA = "0xF98A04", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001239")]
			[Address(RVA = "0xF98A08", Offset = "0xF98A08", VA = "0xF98A08", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600123B")]
			[Address(RVA = "0xF98F40", Offset = "0xF98F40", VA = "0xF98F40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400146C")]
		private const int MAX_MESSAGES = 20;

		[Token(Token = "0x400146D")]
		private const string URL = "wss://api.blaston.com/discord/messages/ws";

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BowserDiscordData data;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BowserDiscordContentCache contentCache;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, BowserDiscordViewMessage> viewMessages;

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MonoBehaviour coroutineSpinner;

		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UploadStatus uploadStatus;

		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ClientWebSocket webSocket;

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CancellationTokenSource cancellationTokenSource;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int floorNumber;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string latestSeenMessage;

		[Token(Token = "0x6001214")]
		[Address(RVA = "0xF96194", Offset = "0xF96194", VA = "0xF96194")]
		public BowserDiscord(BowserDiscordData data, MonoBehaviour coroutineSpinner, int floorNumber)
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xF9640C", Offset = "0xF9640C", VA = "0xF9640C")]
		[Conditional("LOG_ENABLED")]
		private void Log(string message)
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xF96378", Offset = "0xF96378", VA = "0xF96378")]
		[AsyncStateMachine(typeof(<SetupWebSocket>d__14))]
		private void SetupWebSocket()
		{
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0xF96498", Offset = "0xF96498", VA = "0xF96498")]
		[AsyncStateMachine(typeof(<_SetupWebSocket>d__15))]
		private Task _SetupWebSocket()
		{
			return null;
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0xF96564", Offset = "0xF96564", VA = "0xF96564")]
		[AsyncStateMachine(typeof(<SendAsync>d__16))]
		private Task SendAsync(string message)
		{
			return null;
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0xF96640", Offset = "0xF96640", VA = "0xF96640")]
		[AsyncStateMachine(typeof(<SendAsync>d__17))]
		private Task SendAsync(byte[] message)
		{
			return null;
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0xF9671C", Offset = "0xF9671C", VA = "0xF9671C")]
		[AsyncStateMachine(typeof(<ReceiveAsync>d__18))]
		private Task<CustomDiscordMessage> ReceiveAsync()
		{
			return null;
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0xF96810", Offset = "0xF96810", VA = "0xF96810")]
		public void Stop()
		{
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0xF9684C", Offset = "0xF9684C", VA = "0xF9684C")]
		public void UploadPicture(Texture2D picture, string userName)
		{
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xF968F0", Offset = "0xF968F0", VA = "0xF968F0")]
		public UploadStatus GetUploadStatus()
		{
			return default(UploadStatus);
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xF96874", Offset = "0xF96874", VA = "0xF96874")]
		[IteratorStateMachine(typeof(<UploadPictureCoroutine>d__22))]
		private IEnumerator UploadPictureCoroutine(Texture2D picture, string userName)
		{
			return null;
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xF96920", Offset = "0xF96920", VA = "0xF96920")]
		private void OnDiscordMessageArrived(CustomDiscordMessage message)
		{
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xF969C4", Offset = "0xF969C4", VA = "0xF969C4")]
		private void OnMessageCreated(CustomDiscordMessage message)
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xF96A28", Offset = "0xF96A28", VA = "0xF96A28")]
		private void OnMessageUpdated(CustomDiscordMessage message)
		{
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0xF969F4", Offset = "0xF969F4", VA = "0xF969F4")]
		private void OnMessageDeleted(CustomDiscordMessage message)
		{
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0xF96AD8", Offset = "0xF96AD8", VA = "0xF96AD8")]
		private void AddMessage(CustomDiscordMessage message)
		{
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0xF96EFC", Offset = "0xF96EFC", VA = "0xF96EFC")]
		private void RemoveMessage(string messageId)
		{
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0xF96C6C", Offset = "0xF96C6C", VA = "0xF96C6C")]
		private void Remerge()
		{
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0xF96E80", Offset = "0xF96E80", VA = "0xF96E80")]
		private void ScrollToBottom()
		{
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0xF970EC", Offset = "0xF970EC", VA = "0xF970EC")]
		private void DisableMaskedMessages()
		{
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xF96D88", Offset = "0xF96D88", VA = "0xF96D88")]
		private void ResizeMessagesRoot()
		{
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0xF96BAC", Offset = "0xF96BAC", VA = "0xF96BAC")]
		private void TrimNumberOfMessages()
		{
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xF97248", Offset = "0xF97248", VA = "0xF97248")]
		public void DebugSetupWebSocket()
		{
		}
	}
	[Token(Token = "0x20003EA")]
	public class BowserDiscordContentCache
	{
		[Token(Token = "0x20003EB")]
		public delegate void OnPictureDownloaded(Texture2D picture);

		[Token(Token = "0x20003EC")]
		[CompilerGenerated]
		private sealed class <StartDownload>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40014A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40014A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40014A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string downloadURL;

			[Token(Token = "0x40014A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public BowserDiscordContentCache <>4__this;

			[Token(Token = "0x40014A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string userId;

			[Token(Token = "0x40014A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UnityWebRequest <www>5__2;

			[Token(Token = "0x170000E9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001247")]
				[Address(RVA = "0xF9953C", Offset = "0xF9953C", VA = "0xF9953C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000EA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001249")]
				[Address(RVA = "0xF99584", Offset = "0xF99584", VA = "0xF99584", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001244")]
			[Address(RVA = "0xF991E8", Offset = "0xF991E8", VA = "0xF991E8")]
			[DebuggerHidden]
			public <StartDownload>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001245")]
			[Address(RVA = "0xF99324", Offset = "0xF99324", VA = "0xF99324", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001246")]
			[Address(RVA = "0xF99328", Offset = "0xF99328", VA = "0xF99328", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001248")]
			[Address(RVA = "0xF99544", Offset = "0xF99544", VA = "0xF99544", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, Texture2D> cache;

		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<string, OnPictureDownloaded> inFlightRequests;

		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MonoBehaviour coroutineSpinner;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Texture2D anonymousUserPicture;

		[Token(Token = "0x600123D")]
		[Address(RVA = "0xF962A0", Offset = "0xF962A0", VA = "0xF962A0")]
		public BowserDiscordContentCache(MonoBehaviour coroutineSpinner, Texture2D anonymousUserPicture)
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0xF98F88", Offset = "0xF98F88", VA = "0xF98F88")]
		public void GetAvatarPicture(string userId, string url, OnPictureDownloaded onDone)
		{
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0xF9916C", Offset = "0xF9916C", VA = "0xF9916C")]
		[IteratorStateMachine(typeof(<StartDownload>d__7))]
		private IEnumerator StartDownload(string userId, string downloadURL)
		{
			return null;
		}
	}
	[Token(Token = "0x20003ED")]
	public class BowserDiscordData : MonoBehaviour
	{
		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public BowserDiscordViewMessage messagePrefab;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RectTransform messagesRoot;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RectTransform destroyRoot;

		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ScrollRect rootScroller;

		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture2D anonymousUserPicture;

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float renderCutoffHeight;

		[Token(Token = "0x600124A")]
		[Address(RVA = "0xF9958C", Offset = "0xF9958C", VA = "0xF9958C")]
		public BowserDiscordData()
		{
		}
	}
	[Token(Token = "0x20003EE")]
	public class BowserDiscordViewMessage : MonoBehaviour
	{
		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TMP_Text label;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TMP_Text usernameAndTimeStamp;

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private RectTransform contentTransform;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public RectTransform rootTransform;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private RawImage avatarPicture;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GameObject avatarPictureRoot;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject contentRoot;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BowserDiscordContentCache contentCache;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BowserDiscord.CustomDiscordMessage message;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private string formattedContent;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool mergedWithPrevious;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Texture2D avatarProfilePicture;

		[Token(Token = "0x600124B")]
		[Address(RVA = "0xF97038", Offset = "0xF97038", VA = "0xF97038")]
		public void Setup(BowserDiscordContentCache contentCache, BowserDiscord.CustomDiscordMessage message)
		{
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0xF96ED0", Offset = "0xF96ED0", VA = "0xF96ED0")]
		public void RefreshContent([Optional] BowserDiscord.CustomDiscordMessage newMessage)
		{
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0xF99640", Offset = "0xF99640", VA = "0xF99640")]
		private void ApplyFormattedContent()
		{
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0xF997DC", Offset = "0xF997DC", VA = "0xF997DC")]
		public BowserDiscord.CustomDiscordMessage GetDiscordMessage()
		{
			return null;
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0xF99770", Offset = "0xF99770", VA = "0xF99770")]
		private void RecalculateLayout()
		{
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0xF97064", Offset = "0xF97064", VA = "0xF97064")]
		public void MergeWithPrevious(BowserDiscord.CustomDiscordMessage previousMessage)
		{
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0xF9959C", Offset = "0xF9959C", VA = "0xF9959C")]
		private void FetchAvatarPicture()
		{
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0xF971EC", Offset = "0xF971EC", VA = "0xF971EC")]
		public void SetMessageRenderingEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0xF997E4", Offset = "0xF997E4", VA = "0xF997E4")]
		public BowserDiscordViewMessage()
		{
		}
	}
}
namespace Ignis
{
	[Token(Token = "0x20003EF")]
	[CreateAssetMenu(fileName = "CustomSoundTriggersList", menuName = "Sound/Sound Triggers List", order = 1)]
	public class SoundTriggersList : ScriptableObject
	{
		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Story/Campaign Menu Events")]
		[MasterCustomEvent]
		public string[] storyModeClaimedTrigger;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[MasterCustomEvent]
		[Header("Mission Menu Events")]
		public string[] startMainClaimTrigger;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[MasterCustomEvent]
		public string[] particleMainClaimTrigger;

		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[MasterCustomEvent]
		public string[] fadeIconClaimTrigger;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[MasterCustomEvent]
		public string[] claimEndTrigger;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[MasterCustomEvent]
		public string[] onClickClaimTrigger;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[MasterCustomEvent]
		public string[] upgradeRewardTrigger;

		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[Header("Custom Events")]
		private CustomEvents genericCustomEvents;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[Header("Scene/Arena Specific")]
		private ArenaSpecificSoundEvents[] arenaSoundEvents;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[Header("Gameplay Rules Specific")]
		private GameplayRulesSoundEvents[] rulesBasedSoundEvents;

		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Onboarding Voice Lines")]
		[SerializeField]
		private OnboardingVoiceLineEvents[] onboardingVoiceLineEvents;

		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[Header("BayTek-specific Voice Lines")]
		private BayTekVoiceLineEvents bayTekVoiceLineEvents;

		[Token(Token = "0x170000EB")]
		public CustomEvents GenericCustomEvents
		{
			[Token(Token = "0x6001255")]
			[Address(RVA = "0xF99888", Offset = "0xF99888", VA = "0xF99888")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0xF99890", Offset = "0xF99890", VA = "0xF99890")]
		public GameplayRulesSoundEvents GetGameplayRulesSoundEvents(GameplayRules gameplayRules)
		{
			return null;
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0xF99970", Offset = "0xF99970", VA = "0xF99970")]
		public ArenaSpecificSoundEvents GetArenaSoundEvents(string sceneId)
		{
			return null;
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0xF99A50", Offset = "0xF99A50", VA = "0xF99A50")]
		public OnboardingVoiceLineEvents GetOnboardingVoiceLineEvents(bool isBayTek)
		{
			return null;
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0xF99B34", Offset = "0xF99B34", VA = "0xF99B34")]
		public BayTekVoiceLineEvents GetBayTekVoiceLineEvents()
		{
			return null;
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0xF99B3C", Offset = "0xF99B3C", VA = "0xF99B3C")]
		public ArenaSpecificSoundEvents GetArenaSoundEvents(int sceneIndex)
		{
			return null;
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0xF99B6C", Offset = "0xF99B6C", VA = "0xF99B6C")]
		public string[] GetMatchTimeReminder(GameplayRules gameplayRules, int index)
		{
			return null;
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0xF99BB0", Offset = "0xF99BB0", VA = "0xF99BB0")]
		public void SetMatchTimeReminder(GameplayRules gameplayRules, GameplayRulesSoundEvents gameplayRulesSoundEvents)
		{
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0xF99C6C", Offset = "0xF99C6C", VA = "0xF99C6C")]
		public SoundTriggersList()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F3")]
	public class CustomEvents
	{
		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[MasterCustomEvent]
		public string startPlaylists;

		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[MasterCustomEvent]
		public string stopPlaylists;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[MasterCustomEvent]
		public string crowd_EOM;

		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[MasterCustomEvent]
		public string crowd_Low;

		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[MasterCustomEvent]
		public string startShepardsTone;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[MasterCustomEvent]
		public string tutorialEnter;

		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[MasterCustomEvent]
		public string menuDuelStart;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[MasterCustomEvent]
		public string alwaysQueueOpponentFound;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[MasterCustomEvent]
		public string stopAllWeaponSounds;

		[Token(Token = "0x6001264")]
		[Address(RVA = "0xF99CE8", Offset = "0xF99CE8", VA = "0xF99CE8")]
		public CustomEvents()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F4")]
	public class ArenaSpecificSoundEvents
	{
		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SceneId sceneId;

		[Token(Token = "0x40014D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[MasterCustomEvent]
		public string enterArena;

		[Token(Token = "0x40014D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[MasterCustomEvent]
		public string exitArena;

		[Token(Token = "0x6001265")]
		[Address(RVA = "0xF99E38", Offset = "0xF99E38", VA = "0xF99E38")]
		public ArenaSpecificSoundEvents()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F5")]
	public class GameplayRulesSoundEvents
	{
		[Token(Token = "0x40014D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string genericName;

		[Token(Token = "0x40014D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameplayRules gameplayRules;

		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Space(10f)]
		public MatchTimerSounds[] matchTimerTriggers;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SoundGroup]
		[Space(15f)]
		[Space(15f)]
		[Header("Sound Groups")]
		public string[] countDownTickSound;

		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SoundGroup]
		public string[] roundBeginSound;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SoundGroup]
		public string[] matchEndScreenWinZero;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SoundGroup]
		public string[] matchEndScreenWinOne;

		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SoundGroup]
		public string[] matchEndScreenWinTwo;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SoundGroup]
		public string[] matchIntroSound;

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SoundGroup]
		public string[] rematchIntroSound;

		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SoundGroup]
		public string[] matchEndingSoundPink;

		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SoundGroup]
		public string[] matchEndingSoundBlue;

		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SoundGroup]
		public string[] roundEndingSound;

		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Space(15f)]
		[MasterCustomEvent]
		[Header("Custom events")]
		[Space(15f)]
		public string[] eventCountDownTickSound;

		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[MasterCustomEvent]
		public string[] eventRoundBeginSound;

		[Token(Token = "0x40014E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[MasterCustomEvent]
		public string[] eventMatchEndScreenWinZero;

		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[MasterCustomEvent]
		public string[] eventMatchEndScreenWinOne;

		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[MasterCustomEvent]
		public string[] eventMatchEndScreenWinTwo;

		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[MasterCustomEvent]
		public string[] eventMatchIntroSound;

		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[MasterCustomEvent]
		public string[] eventRematchIntroSound;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[MasterCustomEvent]
		public string[] eventMatchEndingSoundPink;

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[MasterCustomEvent]
		public string[] eventMatchEndingSoundBlue;

		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[MasterCustomEvent]
		public string[] eventRoundEndingSound;

		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Randomly triggered")]
		[MasterCustomEvent]
		public string startSong01;

		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[MasterCustomEvent]
		public string startSong02;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[MasterCustomEvent]
		public string startSong03;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[MasterCustomEvent]
		public string startSong04;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Header("Specific Sounds")]
		public SpecificSounds specificSounds;

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Header("Countdown Music")]
		[SoundGroup]
		public string startCountdownStinger;

		[Token(Token = "0x6001266")]
		[Address(RVA = "0xF99E40", Offset = "0xF99E40", VA = "0xF99E40")]
		public GameplayRulesSoundEvents()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F6")]
	public class OnboardingVoiceLineEvents
	{
		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isBayTek;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SoundGroup]
		public string welcomeToBlaston;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SoundGroup]
		public string squeezeTriggerRightHand;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SoundGroup]
		public string squeezeTriggerLeftHand;

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SoundGroup]
		public string weaponsSpawnGrabGun;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SoundGroup]
		public string squeezeTriggerToGrab;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SoundGroup]
		public string greatJob;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SoundGroup]
		public string pullTriggerToFire;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SoundGroup]
		public string numberBulletsLeft;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SoundGroup]
		public string neverStayStill;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SoundGroup]
		public string dodgeDontStepOff;

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SoundGroup]
		public string lookOut;

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SoundGroup]
		public string hitMoveToAvoid;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SoundGroup]
		public string hitDoBetter;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SoundGroup]
		public string greatWork;

		[Token(Token = "0x6001267")]
		[Address(RVA = "0xF9A428", Offset = "0xF9A428", VA = "0xF9A428")]
		public OnboardingVoiceLineEvents()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F7")]
	public class BayTekVoiceLineEvents
	{
		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SoundGroup]
		public string selectDifficulty;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SoundGroup]
		public string selectLoadout;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SoundGroup]
		public string morePlayMoreGetUsed;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SoundGroup]
		public string chooseCharacter;

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SoundGroup]
		public string readyBegin;

		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SoundGroup]
		public string playAgain;

		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SoundGroup]
		public string brutalTryEasy;

		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SoundGroup]
		public string niceTryHard;

		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SoundGroup]
		public string selectContinueLeaderboard;

		[Token(Token = "0x6001268")]
		[Address(RVA = "0xF9A62C", Offset = "0xF9A62C", VA = "0xF9A62C")]
		public BayTekVoiceLineEvents()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F8")]
	public class SpecificSounds
	{
		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SoundGroup]
		public string endRoundStinger;

		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SoundGroup]
		public string endMatchStinger;

		[Token(Token = "0x6001269")]
		[Address(RVA = "0xF9A77C", Offset = "0xF9A77C", VA = "0xF9A77C")]
		public SpecificSounds()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003F9")]
	public class MatchTimerSounds
	{
		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SoundGroup]
		public string[] matchTimerReminder;

		[Token(Token = "0x600126A")]
		[Address(RVA = "0xF9A7F0", Offset = "0xF9A7F0", VA = "0xF9A7F0")]
		public MatchTimerSounds()
		{
		}
	}
	[Token(Token = "0x20003FA")]
	public class ArcadeCampaignDifficultyChoiceReference : MonoBehaviour
	{
		[Token(Token = "0x400150E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x400150F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button easyDifficulty;

		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button mediumDifficulty;

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button hardDifficulty;

		[Token(Token = "0x600126B")]
		[Address(RVA = "0xF9A7F8", Offset = "0xF9A7F8", VA = "0xF9A7F8")]
		public ArcadeCampaignDifficultyChoiceReference()
		{
		}
	}
	[Token(Token = "0x20003FB")]
	public class ArcadeCampaignDifficultyChoiceViewHandler : ITickable
	{
		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ArcadeCampaignDifficultyChoiceReference difficultyChoiceReference;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ArcadeSettings arcadeSettings;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool showingDifficultyChoiceView;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ProfilerMarker arcadeCampaignDifficultyChoiceViewProfileMarker;

		[Token(Token = "0x600126C")]
		[Address(RVA = "0xF9A800", Offset = "0xF9A800", VA = "0xF9A800")]
		public ArcadeCampaignDifficultyChoiceViewHandler(ArcadeSettings arcadeSettings, ArcadeData arcadeData, MenuStateData menuStateData)
		{
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0xF9A88C", Offset = "0xF9A88C", VA = "0xF9A88C")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0xF9AAB0", Offset = "0xF9AAB0", VA = "0xF9AAB0", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0xF9AB14", Offset = "0xF9AB14", VA = "0xF9AB14")]
		private void SelectDifficulty(ArcadeCampaignDifficulty difficulty)
		{
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xF9AA4C", Offset = "0xF9AA4C", VA = "0xF9AA4C")]
		private void SetActive(bool active)
		{
		}
	}
	[Token(Token = "0x20003FC")]
	public class ArcadeCampaignHandler : ITickable
	{
		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ArcadeLeaderboardData arcadeLeaderboardData;

		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArcadeLobbyData arcadeLobbyData;

		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x400151D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly GameData gameData;

		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly AiData aiData;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly LoginData loginData;

		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly OnboardingGameStateData onboardingGameStateData;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4001524")]
		private const int PLAYER_START_HEALTH = 100;

		[Token(Token = "0x4001525")]
		private const int ROUND_DURATION = 120;

		[Token(Token = "0x4001526")]
		private const int STAGE_MULTIPLIER = 150;

		[Token(Token = "0x4001527")]
		private const int TIME_DIVISOR = 5;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool campaignDataUpdated;

		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly ProfilerMarker arcadeCampaignProfileMarker;

		[Token(Token = "0x6001274")]
		[Address(RVA = "0xF9AC88", Offset = "0xF9AC88", VA = "0xF9AC88")]
		public ArcadeCampaignHandler(ArcadeData arcadeData, ArcadeLeaderboardData arcadeLeaderboardData, ArcadeLobbyData arcadeLobbyData, LockerRoomGameStateData lockerRoomGameStateData, ArenaGameStateData arenaGameStateData, FindFriendData findFriendData, GameData gameData, AiData aiData, MatchHandlerData matchHandlerData, LoginData loginData, OnboardingGameStateData onboardingGameStateData, DamageRecordKeeper damageRecordKeeper, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0xF9AD6C", Offset = "0xF9AD6C", VA = "0xF9AD6C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0xF9BCB8", Offset = "0xF9BCB8", VA = "0xF9BCB8")]
		public void OnRoundEnd(EndArenaRoundMessage m)
		{
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0xF9B874", Offset = "0xF9B874", VA = "0xF9B874")]
		private void StartCampaignDuel()
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0xF9B7DC", Offset = "0xF9B7DC", VA = "0xF9B7DC")]
		private void RegisterCampaignOver(ArcadeCampaignStatus newStatus)
		{
		}
	}
	[Token(Token = "0x20003FD")]
	public enum ArcadeCampaignStatus
	{
		[Token(Token = "0x400152B")]
		Inactive,
		[Token(Token = "0x400152C")]
		Ongoing,
		[Token(Token = "0x400152D")]
		Defeated,
		[Token(Token = "0x400152E")]
		Completed
	}
	[Token(Token = "0x20003FE")]
	public enum CampaignEventType
	{
		[Token(Token = "0x4001530")]
		start_challenge,
		[Token(Token = "0x4001531")]
		continue_challenge,
		[Token(Token = "0x4001532")]
		resign_challenge,
		[Token(Token = "0x4001533")]
		lose_challenge,
		[Token(Token = "0x4001534")]
		win_challenge
	}
	[Token(Token = "0x20003FF")]
	public class ArcadeCampaignOverReference : MonoBehaviour
	{
		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button acceptCampaignOverButton;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI header;

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI description;

		[Token(Token = "0x6001279")]
		[Address(RVA = "0xF9BF20", Offset = "0xF9BF20", VA = "0xF9BF20")]
		public ArcadeCampaignOverReference()
		{
		}
	}
	[Token(Token = "0x2000400")]
	public class ArcadeCampaignOverViewHandler : ITickable
	{
		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ArcadeCampaignOverReference campaignOverReference;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ArcadeSettings arcadeSettings;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ArcadeData arcadeData;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MenuStateData menuStateData;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool showingCampaignOverView;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ProfilerMarker arcadeCampaignOverViewProfileMarker;

		[Token(Token = "0x600127A")]
		[Address(RVA = "0xF9BF28", Offset = "0xF9BF28", VA = "0xF9BF28")]
		public ArcadeCampaignOverViewHandler(ArcadeSettings arcadeSettings, ArcadeData arcadeData, MenuStateData menuStateData)
		{
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0xF9BFB4", Offset = "0xF9BFB4", VA = "0xF9BFB4")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0xF9C130", Offset = "0xF9C130", VA = "0xF9C130", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0xF9C0CC", Offset = "0xF9C0CC", VA = "0xF9C0CC")]
		private void SetActive(bool active)
		{
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0xF9C2D0", Offset = "0xF9C2D0", VA = "0xF9C2D0")]
		private void DismissPopup()
		{
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0xF9C1C0", Offset = "0xF9C1C0", VA = "0xF9C1C0")]
		private void UpdatePopupText(ArcadeCampaignStatus campaignStatus)
		{
		}
	}
	[Token(Token = "0x2000401")]
	public class ArcadeCampaignProgressReference : MonoBehaviour
	{
		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI header;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI score;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI botName;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI currentDifficulty;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Image botImage;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Button continueCampaign;

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Button resignCampaign;

		[Token(Token = "0x6001281")]
		[Address(RVA = "0xF9C2F4", Offset = "0xF9C2F4", VA = "0xF9C2F4")]
		public ArcadeCampaignProgressReference()
		{
		}
	}
	[Token(Token = "0x2000402")]
	public class ArcadeCampaignProgressViewHandler : ITickable
	{
		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ArcadeCampaignProgressReference campaignProgressReference;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ArcadeCampaignResignConfirmationReference campaignResignConfirmationReference;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArcadeSettings arcadeSettings;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x400154C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly CharacterSettings characterSettings;

		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool showingCampaignProgressView;

		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ProfilerMarker arcadeCampaignProgressViewProfileMarker;

		[Token(Token = "0x6001282")]
		[Address(RVA = "0xF9C2FC", Offset = "0xF9C2FC", VA = "0xF9C2FC")]
		public ArcadeCampaignProgressViewHandler(ArcadeSettings arcadeSettings, ArcadeData arcadeData, MenuStateData menuStateData, CharacterSettings characterSettings, CustomizationData customizationData)
		{
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0xF9C39C", Offset = "0xF9C39C", VA = "0xF9C39C")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0xF9C6B8", Offset = "0xF9C6B8", VA = "0xF9C6B8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0xF9CBAC", Offset = "0xF9CBAC", VA = "0xF9CBAC")]
		private void ContinueCampaign()
		{
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0xF9CBCC", Offset = "0xF9CBCC", VA = "0xF9CBCC")]
		private void ResignCampaign()
		{
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0xF9CBEC", Offset = "0xF9CBEC", VA = "0xF9CBEC")]
		private void ConfirmCampaignResignation()
		{
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0xF9CC0C", Offset = "0xF9CC0C", VA = "0xF9CC0C")]
		private void CancelCampaignResignation()
		{
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0xF9C5F0", Offset = "0xF9C5F0", VA = "0xF9C5F0")]
		private void SetCampaignProgressActive(bool active)
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0xF9C654", Offset = "0xF9C654", VA = "0xF9C654")]
		private void SetResignConfirmationActive(bool active)
		{
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0xF9C750", Offset = "0xF9C750", VA = "0xF9C750")]
		private void UpdateWidget()
		{
		}
	}
	[Token(Token = "0x2000403")]
	public class ArcadeCampaignResignConfirmationReference : MonoBehaviour
	{
		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI header;

		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI description;

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button confirmResignCampaign;

		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button cancelResignCampaign;

		[Token(Token = "0x6001290")]
		[Address(RVA = "0xF9CCAC", Offset = "0xF9CCAC", VA = "0xF9CCAC")]
		public ArcadeCampaignResignConfirmationReference()
		{
		}
	}
	[Token(Token = "0x2000404")]
	public class ArcadeEntryPoint : MonoBehaviour
	{
		[Token(Token = "0x2000405")]
		[CompilerGenerated]
		private sealed class <Start>d__404 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40016E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40016EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40016EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ArcadeEntryPoint <>4__this;

			[Token(Token = "0x40016EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private CutsceneData <cutsceneData>5__2;

			[Token(Token = "0x40016ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private RoomTimeProviderProxy <proxyTimeProvider>5__3;

			[Token(Token = "0x40016EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private EmotePlaybackHandlerData <emotePlaybackHandlerData>5__4;

			[Token(Token = "0x40016EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private PersistantDataUtility <persistantDataHandler>5__5;

			[Token(Token = "0x40016F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private InputData <inputData>5__6;

			[Token(Token = "0x40016F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private CameraFadeData <cameraFadeData>5__7;

			[Token(Token = "0x40016F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private ErrorMessageData <errorMessageData>5__8;

			[Token(Token = "0x40016F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private VoipData <voipData>5__9;

			[Token(Token = "0x40016F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private TrailerData <trailerData>5__10;

			[Token(Token = "0x40016F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private SceneHandlerData <sceneHandlerData>5__11;

			[Token(Token = "0x40016F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private ScoreBoardData <scoreBoardData>5__12;

			[Token(Token = "0x40016F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private LocalPlayerData <localPlayerData>5__13;

			[Token(Token = "0x40016F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			private DialogueHandlerData <dialogueHandlerData>5__14;

			[Token(Token = "0x40016F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private SpectatorData <spectatorData>5__15;

			[Token(Token = "0x40016FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private SpectatorSettingsData <spectatorSettingsData>5__16;

			[Token(Token = "0x40016FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private CurrentMatchRequestData <currentMatchRequestData>5__17;

			[Token(Token = "0x40016FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private DebugData <debugData>5__18;

			[Token(Token = "0x40016FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private CustomizationData <customizationData>5__19;

			[Token(Token = "0x40016FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private ItemGridViewHandlerData <itemGridViewHandlerData>5__20;

			[Token(Token = "0x40016FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private DevicePlatform <platform>5__21;

			[Token(Token = "0x4001700")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private VisualQualityHandler <visualQualityHandler>5__22;

			[Token(Token = "0x4001701")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			private AssetRequest<bool> <trailerKeyExist>5__23;

			[Token(Token = "0x4001702")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private PersistentPlatformData <platformPersistentData>5__24;

			[Token(Token = "0x4001703")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private TetherToolHandlerData <tetherToolHandlerData>5__25;

			[Token(Token = "0x4001704")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private TimeHandlerData <timeHandlerData>5__26;

			[Token(Token = "0x4001705")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private ForceFieldData <forceFieldData>5__27;

			[Token(Token = "0x4001706")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private ToolSpawnData <toolSpawnData>5__28;

			[Token(Token = "0x4001707")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
			private ToolSpawnAlgorithmData <toolSpawnAlgorithmData>5__29;

			[Token(Token = "0x4001708")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			private BallisticAirHandlerData <projectileAirHandlerData>5__30;

			[Token(Token = "0x4001709")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			private AnimationStateHandlerData <animationStateHandlerData>5__31;

			[Token(Token = "0x400170A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private DeckData <deckData>5__32;

			[Token(Token = "0x400170B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
			private List<IToolSpawnAlgorithm> <toolSpawnAlgorithms>5__33;

			[Token(Token = "0x400170C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			private FaceAnimationData <faceAnimationData>5__34;

			[Token(Token = "0x400170D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
			private ParticleEffectData <particleEffectData>5__35;

			[Token(Token = "0x400170E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			private SettingsData <settingsData>5__36;

			[Token(Token = "0x400170F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
			private FactoryData <factoryData>5__37;

			[Token(Token = "0x4001710")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
			private ToolViewData <toolViewData>5__38;

			[Token(Token = "0x4001711")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
			private ShopData <shopData>5__39;

			[Token(Token = "0x4001712")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
			private CoinShopData <coinShopData>5__40;

			[Token(Token = "0x4001713")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
			private BannerData <bannerData>5__41;

			[Token(Token = "0x4001714")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
			private PlatformData <platformData>5__42;

			[Token(Token = "0x4001715")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
			private RecordData <recordData>5__43;

			[Token(Token = "0x4001716")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
			private PlayerInfoPanelData <playerInfoPanelData>5__44;

			[Token(Token = "0x4001717")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
			private LeagueTierProgressData <leagueTierProgressData>5__45;

			[Token(Token = "0x4001718")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
			private NetworkServicesDiagnosticsData <networkServicesDiagnosticsData>5__46;

			[Token(Token = "0x4001719")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
			private RecycleData <recycleData>5__47;

			[Token(Token = "0x400171A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
			private LocalPlayerExperienceData <localPlayerExperienceData>5__48;

			[Token(Token = "0x400171B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
			private LevelUpViewData <levelUpViewData>5__49;

			[Token(Token = "0x400171C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
			private EndSeasonRewardViewData <endSeasonRewardViewData>5__50;

			[Token(Token = "0x400171D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
			private HapticData <hapticData>5__51;

			[Token(Token = "0x400171E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
			private EnvironmentSceneData <environmentSceneData>5__52;

			[Token(Token = "0x400171F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
			private BarEntranceData <barEntranceData>5__53;

			[Token(Token = "0x4001720")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
			private FeaturePermissionData <featurePermissionData>5__54;

			[Token(Token = "0x4001721")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
			private PauseMenuData <pauseMenuData>5__55;

			[Token(Token = "0x4001722")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
			private SpectatorRequestViewData <spectatorRequestViewData>5__56;

			[Token(Token = "0x4001723")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
			private CharacterViewData <characterViewData>5__57;

			[Token(Token = "0x4001724")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
			private TextHintViewData <textHintViewData>5__58;

			[Token(Token = "0x4001725")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
			private AnimatedCanvasHandlerData <animatedCanvasData>5__59;

			[Token(Token = "0x4001726")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
			private StationaryProjectileHandlerData <stationaryProjectileHandlerData>5__60;

			[Token(Token = "0x4001727")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
			private ImpactHandlerData <impactHandlerData>5__61;

			[Token(Token = "0x4001728")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
			private CharacterSyncHandlerData <characterSyncData>5__62;

			[Token(Token = "0x4001729")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
			private IgnisSoundTriggerData <ignisSoundTriggerData>5__63;

			[Token(Token = "0x400172A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
			private RatingMatchmakerSettingsData <ratingMatchmakerSettingsData>5__64;

			[Token(Token = "0x400172B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
			private NetworkDebugMenu <networkDebug>5__65;

			[Token(Token = "0x400172C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
			private VoipHandler <voipHandler>5__66;

			[Token(Token = "0x400172D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
			private ToolChargeHandler <toolChargeHandler>5__67;

			[Token(Token = "0x400172E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
			private ToolBowPullbackHandler <toolBowPullbackHandler>5__68;

			[Token(Token = "0x400172F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
			private AutoSpectatorToolUseEffect <autoSpectatorToolUseEffect>5__69;

			[Token(Token = "0x4001730")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
			private GameObject <poolParent>5__70;

			[Token(Token = "0x4001731")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
			private PoolReferenceActivator <poolReferenceActivator>5__71;

			[Token(Token = "0x4001732")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
			private CharacterSyncHandler <characterSyncHandler>5__72;

			[Token(Token = "0x4001733")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
			private GameplayRulesHandler <gameplayRulesHandler>5__73;

			[Token(Token = "0x4001734")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
			private StationaryProjectileHandler <stationaryProjectileHandler>5__74;

			[Token(Token = "0x4001735")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
			private LockerRoomSceneHandler <lockerRoomSceneHandler>5__75;

			[Token(Token = "0x4001736")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
			private GesturesPlayerHandler <gesturePlayerHandler>5__76;

			[Token(Token = "0x4001737")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
			private AnimatedCanvasHandler <animatedCanvasHandler>5__77;

			[Token(Token = "0x4001738")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
			private EmotePlaybackHandler <emotePlaybackHandler>5__78;

			[Token(Token = "0x4001739")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
			private RichPresenceHandler <richPresenceHandler>5__79;

			[Token(Token = "0x400173A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
			private ContactGesturesHandler <contactGesturesHandler>5__80;

			[Token(Token = "0x400173B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
			private NonContactGesturesHandler <nonContactGesturesHandler>5__81;

			[Token(Token = "0x400173C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
			private TextHintViewHandler <textHintViewHandler>5__82;

			[Token(Token = "0x400173D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
			private ControllerOffsetViewHandler <controllerOffsetViewHandler>5__83;

			[Token(Token = "0x400173E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
			private OnboardingMenuViewHandler <onboardingMenuViewHandler>5__84;

			[Token(Token = "0x400173F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
			private CutsceneHandler <cutsceneHandler>5__85;

			[Token(Token = "0x4001740")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
			private DialogueHandler <dialogueHandler>5__86;

			[Token(Token = "0x4001741")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
			private EndSeasonRewardViewHandler <endSeasonRewardViewHandler>5__87;

			[Token(Token = "0x4001742")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
			private CharacterSkinViewHandler <characterSkinViewHandler>5__88;

			[Token(Token = "0x4001743")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
			private ErrorMessageViewHandler <errorMessageHandler>5__89;

			[Token(Token = "0x4001744")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
			private List<ITickable> <additionalPreTickHandler>5__90;

			[Token(Token = "0x4001745")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
			private List<ITickable> <additionalPostTickHandler>5__91;

			[Token(Token = "0x4001746")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
			private AsyncOperation <asyncUnloading>5__92;

			[Token(Token = "0x170000EC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012A9")]
				[Address(RVA = "0xFAFDA0", Offset = "0xFAFDA0", VA = "0xFAFDA0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000ED")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012AB")]
				[Address(RVA = "0xFAFDE8", Offset = "0xFAFDE8", VA = "0xFAFDE8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012A6")]
			[Address(RVA = "0xF9CD1C", Offset = "0xF9CD1C", VA = "0xF9CD1C")]
			[DebuggerHidden]
			public <Start>d__404(int <>1__state)
			{
			}

			[Token(Token = "0x60012A7")]
			[Address(RVA = "0xF9E204", Offset = "0xF9E204", VA = "0xF9E204", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012A8")]
			[Address(RVA = "0xF9E208", Offset = "0xF9E208", VA = "0xF9E208", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012AA")]
			[Address(RVA = "0xFAFDA8", Offset = "0xFAFDA8", VA = "0xFAFDA8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001555")]
		public const string PLATFORMPREF = "PLATFORM";

		[Token(Token = "0x4001556")]
		public const string REPLAYLEAVE = "REPLAYLEAVE";

		[Token(Token = "0x4001557")]
		public const string AUTOCONNECTPREF = "AUTOCONNECT";

		[Token(Token = "0x4001558")]
		public const string OFFLINEMODEPREF = "OFFLINE";

		[Token(Token = "0x4001559")]
		public const string ROOMCODEPREF = "ROOMCODE";

		[Token(Token = "0x400155A")]
		public const string SPECTATORPREF = "SPECTATOR";

		[Token(Token = "0x400155B")]
		public const string DISABLE_FOCUS_AWARE = "DISABLE_FOCUS_AWARE";

		[Token(Token = "0x400155C")]
		public const string AUTO_SPECTATE = "AUTO_SPECTATE";

		[Token(Token = "0x400155D")]
		public const string STORY_EVENT_PREF = "STORY_EVENT_PREF";

		[Token(Token = "0x400155E")]
		public const string STORY_EVENT_SKIP_CUTSCENE_PREF = "STORY_EVENT_SKIP_CUTSCENE_PREF";

		[Token(Token = "0x400155F")]
		private const string ARCADE_MAIN_SCENE = "arcademain";

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Scene References")]
		[SerializeField]
		[FormerlySerializedAs("ToolParent")]
		private Transform worldParent;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private PlayerSpawnPointReference playerSpawnPointReference;

		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform centerArenaTransform;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Settings")]
		[SerializeField]
		private PlayerSettings playerSettings;

		[Token(Token = "0x4001564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private PointerRaycastHandlerSettings pointerRaycastHandlerSettings;

		[Token(Token = "0x4001565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private DeckSpawnSettings spawnDeck;

		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private ToolDefinitionSettings toolDefinitionSettings;

		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private CageSettings cageSettings;

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private SpectatorSettings spectatorSettings;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private BayTekSettings bayTekSettings;

		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private BayTekTimeoutSettings bayTekTimeoutSettings;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private ArcadeSettings arcadeSettings;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private OwnershipSettings ownershipSettings;

		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private ParticleEffectSettings particleEffectSettings;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private ThrowSettings throwSettings;

		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private CrowdSettings crowdSettings;

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private CharacterSettings characterSettings;

		[Token(Token = "0x4001572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private InteractionSettings interactionSettings;

		[Token(Token = "0x4001573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private CustomizationSettings customizationSettings;

		[Token(Token = "0x4001574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private CharacterSkinViewSettings characterSkinViewSettings;

		[Token(Token = "0x4001575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private LockerRoomSettings lockerRoomSettings;

		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private CoinItemSettings coinItemSettings;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private LeagueTierSettings leagueTierSettings;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private CameraFadeSettings cameraFadeSettings;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private ToolMenuSettings toolMenuSettings;

		[Token(Token = "0x400157A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x400157B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private ReplaySettings replaySettings;

		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private GameTipsSettings gameTipsSettings;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private PhotonVoiceSettings photonVoiceSettings;

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private GestureSettings gestureSettings;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private PauseMenuSettings pauseMenuSettings;

		[Token(Token = "0x4001580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private TextHintSettings textHintSettings;

		[Token(Token = "0x4001581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private ToolCustomizationSettings toolCustomizationSettings;

		[Token(Token = "0x4001582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[FormerlySerializedAs("patternItemSettings")]
		[SerializeField]
		private PackItemSettings packItemSettings;

		[Token(Token = "0x4001583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		private ArenaItemSettings arenaItemSettings;

		[Token(Token = "0x4001584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private DialogueSettings dialogueSettings;

		[Token(Token = "0x4001585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		private CutsceneSettings cutsceneSettings;

		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		private BhapticsSettings bhapticsSettings;

		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		private ControllerOffsetSettings controllerOffsetSettings;

		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		private SoundTriggersList soundTriggersList;

		[Token(Token = "0x4001589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		private VisualQualitySettings visualQualitySettings;

		[Token(Token = "0x400158A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		private MissionSettings missionSettings;

		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[Header("Single Player")]
		[SerializeField]
		private SinglePlayerSettings singlePlayerSettings;

		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[Header("Game State Settings")]
		[SerializeField]
		private OnboardingGameStateSettings onboardingGameStateSettings;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		private MenuStateSettings menuStateSettings;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[SerializeField]
		private SplashGameStateSettings splashGameStateSettings;

		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[SerializeField]
		private ArenaGameStateSettings arenaGameStateSettings;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[SerializeField]
		[Header("Debug")]
		private DebugSettings debugSettings;

		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[SerializeField]
		private Transform debugAnchor;

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[SerializeField]
		private ArtDebugArenaReferences artDebugArenaReferences;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[SerializeField]
		private EmotePlaybackSettings emotePlaybackSettings;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[SerializeField]
		private Transform voipSourceTransform;

		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private IGameState currentGameState;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private Dictionary<EntryPoint.GameState, IGameState> gameStates;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private DebugController debugController;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private DebugStats debugStats;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private ArtDebugHandler artDebugHandler;

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private NetworkSimulation networkSimulation;

		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private DummyErrorMessageHandler dummyErrorMessageHandler;

		[Token(Token = "0x400159D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private GameData gameData;

		[Token(Token = "0x400159E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private MatchHandlerData matchHandlerData;

		[Token(Token = "0x400159F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private CameraReference cameraReference;

		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private IXrPluginHandler xrPluginHandler;

		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private IInputHandler inputHandler;

		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private PlayerMovementHandler playerMovementHandler;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private PlayerGrabHandler playerGrabHandler;

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private PlayerSpawnHandler playerSpawnHandler;

		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private PlayerTriggerHandler playerTriggerHandler;

		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private PlayerHUDHandler playerHUDHandler;

		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private VrKeyboardHandler vrKeyboardHandler;

		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private VrKeyboardData vrKeyboardData;

		[Token(Token = "0x40015A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private PlayerHealthHandler playerHealthHandler;

		[Token(Token = "0x40015AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private CharacterHandler characterHandler;

		[Token(Token = "0x40015AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private FaceAnimationsHandler faceAnimationsHandler;

		[Token(Token = "0x40015AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private DeckBuilderHandler deckBuildHandler;

		[Token(Token = "0x40015AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private CustomizationHandler customizationHandler;

		[Token(Token = "0x40015AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private ShopHandler shopHandler;

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private ProgressionHandler progressionHandler;

		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private PlatformHandler platformHandler;

		[Token(Token = "0x40015B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private BannerHandler bannerHandler;

		[Token(Token = "0x40015B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public CameraFadeHandler cameraFadeHandler;

		[Token(Token = "0x40015B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private MatchDeckInfoData matchDeckInfoData;

		[Token(Token = "0x40015B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private MatchDeckInfoHandler matchDeckInfoHandler;

		[Token(Token = "0x40015B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		private GrabData grabData;

		[Token(Token = "0x40015B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private ToolGrabHandler toolGrabHandler;

		[Token(Token = "0x40015B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private SplashGameState splashGameState;

		[Token(Token = "0x40015B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		private OnboardingGameState onboardingGameState;

		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private OnboardingGameStateData onboardingGameStateData;

		[Token(Token = "0x40015BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		private LockerRoomGameState lockerRoomGameState;

		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		private LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x40015BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		private ArenaGameState arenaGameState;

		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x40015BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private StoryEventGameState storyEventGameState;

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		private StoryEventGameStateData storyEventGameStateData;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private MainMenuHandler mainMenuHandler;

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private MainMenuViewHandler mainMenuViewHandler;

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		private MainMenuTabsViewHandler mainMenuTabsViewHandler;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		private LeaderBoardViewHandler leaderBoardViewHandler;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		private FindFriendMenuViewHandler findFriendMenuViewHandler;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private SettingsMenuViewHandler settingsMenuViewHandler;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		private ReportIssueViewHandler reportIssueViewHandler;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		private AccountManagementViewHandler accountManagementViewHandler;

		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		private PlayMenuViewHandler playMenViewHandler;

		[Token(Token = "0x40015C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		private DuelSettingsViewData duelSettingsViewData;

		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		private DuelSettingsMenuViewHandler duelSettingsMenuViewHandler;

		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		private StoryWidgetViewHandler storyWidgetViewHandler;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		private ArenaMenuViewHandler arenaMenuViewHandler;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		private PlayerStatsWidgetViewHandler playerStatsWidgetViewHandler;

		[Token(Token = "0x40015CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		private ToolViewHandler toolViewHandler;

		[Token(Token = "0x40015CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		private ToolSkinViewHandler toolSkinViewHandler;

		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		private ExperienceCounterViewHandler experienceCounterViewHandler;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		private CustomizationViewHandler customizationViewHandler;

		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		private PauseViewHandler pauseViewHandler;

		[Token(Token = "0x40015D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		private PauseMenuPlayerViewHandler pauseMenuPlayerViewHandler;

		[Token(Token = "0x40015D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		private MenuStateData menuStateData;

		[Token(Token = "0x40015D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		private NetworkServicesDiagnosticsViewHandler networkServicesDiagnosticsViewHandler;

		[Token(Token = "0x40015D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		private ToolInformationViewHandler toolInformationViewHandler;

		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
		private ToolSelectionViewHandler toolSelectionViewHandler;

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		private CharacterInformationViewHandler characterInformationViewHandler;

		[Token(Token = "0x40015D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
		private ItemGridViewHandler itemGridViewHandler;

		[Token(Token = "0x40015DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		private ItemInformationViewHandler itemInformationViewHandler;

		[Token(Token = "0x40015DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
		private PlayerInfoPanelViewHandler playerInfoPanelViewHandler;

		[Token(Token = "0x40015DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
		private CoinShopViewHandler coinShopViewHandler;

		[Token(Token = "0x40015DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
		private NewsWidgetViewHandler newsWidgetViewHandler;

		[Token(Token = "0x40015DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
		private NewsViewHandler newsViewHandler;

		[Token(Token = "0x40015DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		private LeagueTierProgressViewHandler leagueTierProgressViewHandler;

		[Token(Token = "0x40015E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
		private MatchViewHandler matchViewHandler;

		[Token(Token = "0x40015E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		private MatchCountdownHandler matchCountdownHandler;

		[Token(Token = "0x40015E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
		private LoginViewHandler loginViewHandler;

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
		private MatchmakingViewHandler matchmakingViewHandler;

		[Token(Token = "0x40015E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		private LevelUpPopupViewHandler levelUpPopupViewHandler;

		[Token(Token = "0x40015E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
		private FeaturePermissionHandler featurePermissionHandler;

		[Token(Token = "0x40015E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
		private QuitApplicationViewHandler quitApplicationViewHandler;

		[Token(Token = "0x40015E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
		private SpectatorViewHandler spectatorViewHandler;

		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
		private GameMessageData gameMessageData;

		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
		private GameMessageHandler gameMessageHandler;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
		private MessageSender messageSender;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
		private GameMessageInvoker gameMessageInvoker;

		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x478")]
		private GameMessageFactory gameMessageFactory;

		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x480")]
		private SyncHandler syncHandler;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x488")]
		private ReplayHandler replayHandler;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x490")]
		private IRoomTimeProvider replayRoomTimeProvider;

		[Token(Token = "0x40015F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x498")]
		private SingleMessageSerializer singleMessageSerializer;

		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A0")]
		private GameMessageSerializer gameMessageSerializer;

		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A8")]
		private ReplayData replayData;

		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B0")]
		private SpectatorRoomListMenuViewHandler spectatorRoomListMenuViewHandler;

		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B8")]
		private GameMessageUploadHandlerData gameMessageUploadHandlerData;

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C0")]
		private GameMessageUploadHandler gameMessageUploadHandler;

		[Token(Token = "0x40015F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C8")]
		private GameMessageDownloadHandlerData gameMessageDownloadHandlerData;

		[Token(Token = "0x40015F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D0")]
		private GameMessageDownloadHandler gameMessageDownloadHandler;

		[Token(Token = "0x40015F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D8")]
		private ReplayMenuViewHandler replayMenuViewHandler;

		[Token(Token = "0x40015F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E0")]
		private ExperimentalFeaturesData experimentalFeaturesData;

		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E8")]
		private PlayFabExperimentalFeaturesHandler playFabExperimentalFeaturesHandler;

		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F0")]
		private BotController aIController;

		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F8")]
		private AiData aiData;

		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x500")]
		private AIRecorder aiRecorder;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x508")]
		private BotEmoteRecordHandler botEmoteRecordHandler;

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x510")]
		private BotEmoteRecordData botEmoteRecordData;

		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x518")]
		private BotUtils botUtils;

		[Token(Token = "0x4001601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x520")]
		private StoryData storyData;

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x528")]
		private PlayFabStoryHandler playFabStoryHandler;

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x530")]
		private StoryMenuViewHandler storyMenuViewHandler;

		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x538")]
		private StoryEventProgressData storyEventProgressData;

		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x540")]
		private StoryProgressHandler storyProgressHandler;

		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x548")]
		private PlayFabCloudScriptInvocationHandler playFabCloudScriptInvocationHandler;

		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x550")]
		private PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData;

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x558")]
		private PointerData pointerData;

		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x560")]
		private PointerRaycastHandler pointerRaycastHandler;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x568")]
		private InteractionHandler interactionHandler;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x570")]
		private PointerHandler pointerHandler;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x578")]
		private IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x580")]
		private NetworkConnectionProxy networkConnectionProxy;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x588")]
		private PhotonNetworkConnectionCallbacks photonNetworkConnection;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x590")]
		private NetworkConnectionHandler networkConnectionHandler;

		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x598")]
		private PhotonNetworkMessageReciver networkMessageReciver;

		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A0")]
		private NetworkIdFactory networkIdFactory;

		[Token(Token = "0x4001612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A8")]
		private NetworkPlayerDataFactory networkPlayerDataFactory;

		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B0")]
		private NetworkIdAllocator networkIdAllocator;

		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B8")]
		private IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C0")]
		private IRoomTimeProvider gameRoomTimeProvider;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C8")]
		private PhotonRegionSelector photonRegionSelector;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D0")]
		private RoomTimeReSyncData roomTimeReSyncData;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D8")]
		private RoomTimeReSyncHandler roomTimeReSyncHandler;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E0")]
		private BadPingDetectionData badPingDetectionData;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E8")]
		private BadPingDetectionHandler badPingDetectionHandler;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F0")]
		private PingInformationHandler pingInformationHandler;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F8")]
		private PingInformationData pingInformationData;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x600")]
		private FactoryDirector factoryDirector;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x608")]
		private ToolSpawnHandler spawnHandler;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x610")]
		private ToolThrownHandler toolThrownHandler;

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x618")]
		private ToolThrownHandlerData toolThrownHandlerData;

		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x620")]
		private ToolRecycleHandler toolRecycleHandler;

		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x628")]
		private ShieldHandler shieldHandler;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x630")]
		private CooldownHandler cooldownHandler;

		[Token(Token = "0x4001624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x638")]
		private CooldownData cooldownData;

		[Token(Token = "0x4001625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x640")]
		private TimeHandler timeHandler;

		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x648")]
		private BarrierShieldToolHandler barrierShieldToolHandler;

		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x650")]
		private TetherToolHandler tetherToolHandler;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x658")]
		private BarrierSourceHandler barrierSourceHandler;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x660")]
		private ToolSpawnViewHandler toolSpawnViewHandler;

		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x668")]
		private DamageOverTimeData damageOverTimeData;

		[Token(Token = "0x400162B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x670")]
		private StraightProjectileHandler straightProjectileHandler;

		[Token(Token = "0x400162C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x678")]
		private StraightProjectileHandlerData straightProjectileHandlerData;

		[Token(Token = "0x400162D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x680")]
		private LaserHandlerData laserHandlerData;

		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x688")]
		private LaserHandler laserHandler;

		[Token(Token = "0x400162F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x690")]
		private ProjectileRecycleHandler projectileRecycleHandler;

		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x698")]
		private CurveProjectileHandler curveProjectileHandler;

		[Token(Token = "0x4001631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A0")]
		private CurveProjectileHandlerData curveProjectileHandlerData;

		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A8")]
		private ProjectileAirHandler projectileAirHandler;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B0")]
		private HelixProjectileHandler helixProjectileHandler;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B8")]
		private HelixProjectileHandlerData helixProjectileHandlerData;

		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C0")]
		private BounceProjectileHandler bounceProjectileHandler;

		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C8")]
		private BounceProjectileHandlerData bounceProjectileHandlerData;

		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D0")]
		private ToolAttachmentsHandler toolAttachmentsHandler;

		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D8")]
		private ToolAttachmentsData toolAttachmentsData;

		[Token(Token = "0x4001639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E0")]
		private PlayFabToolAttachmentHandler playFabToolAttachmentHandler;

		[Token(Token = "0x400163A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E8")]
		private ToolMasteryData toolMasteryData;

		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F0")]
		private PlayFabToolMasteryHandler playFabToolMasteryHandler;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F8")]
		private ImpactHandler impactHandler;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x700")]
		private OwnershipHelper ownershipHelper;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x708")]
		private IgnisSoundTriggerHandler ignisSoundTriggerHandler;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x710")]
		private IHapticHandler hapticsHandler;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x718")]
		private ParticleEffectHandler particleEffectHandler;

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x720")]
		private AnimationStateHandler animationStateHandler;

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x728")]
		private SpectatorHandler spectatorHandler;

		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x730")]
		private SpectatorPinger spectatorPinger;

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x738")]
		private SpectateRequestViewHandler spectateRequestViewHandler;

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x740")]
		private SpectatorCameraData spectatorCameraData;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x748")]
		private SpectatorCameraHandler spectatorCameraHandler;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x750")]
		private CageHandler cageHandler;

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x758")]
		private EnvironmentHandler environmentHandler;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x760")]
		private DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x768")]
		private ScoreBoardViewHandler scoreBoardViewHandler;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x770")]
		private CrowdHandler crowdHandler;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x778")]
		private SceneHandler sceneHandler;

		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x780")]
		private ParticleEffectReference[] particleEffectPool;

		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x788")]
		private ParticleEffectReference[] damageNumberParticleEffectPool;

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x790")]
		private IMultiplayerProtocolVersion multiplayerProtocolVersion;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x798")]
		private RatingMatchmakingHandler globalRatingMatchmakingHandler;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A0")]
		private RatingMatchmakerSettingsHandler ratingMatchmakerSettingsHandler;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A8")]
		private LeaderBoardData currentSeasonLeaderboard;

		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B0")]
		private PlayFabLeaguePointsSeasonData playFabLeaguePointsSeasonData;

		[Token(Token = "0x4001654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B8")]
		private PlayFabLeaguePointsSeasonHandler playFabLeaguePointsSeasonHandler;

		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C0")]
		private MatchmakingData ratingMatchmakerData;

		[Token(Token = "0x4001656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C8")]
		private GlobalMatchmakingStateData globalMatchmakingStateData;

		[Token(Token = "0x4001657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D0")]
		private MatchReportingData matchReportingData;

		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D8")]
		private PlayFabMatchReportingHandler matchReportingHandler;

		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E0")]
		private FindFriendData findFriendData;

		[Token(Token = "0x400165A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E8")]
		private FindFriendHandler findFriendHandler;

		[Token(Token = "0x400165B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7F0")]
		private PlayFabPlayerStatisticsHandler playerStatisticsHandler;

		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7F8")]
		private PlayerStatisticsData playerStatisticsData;

		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x800")]
		private MatchHandler matchHandler;

		[Token(Token = "0x400165E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x808")]
		private TournamentEventData tournamentEventData;

		[Token(Token = "0x400165F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x810")]
		private TournamentEventMenuViewHandler tournamentEventMenuViewHandler;

		[Token(Token = "0x4001660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x818")]
		private PlayFabTournamentEventHandler playFabTournamentEventHandler;

		[Token(Token = "0x4001661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x820")]
		private RatingMatchmakingHandler tournamentEventMatchmakingHandler;

		[Token(Token = "0x4001662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x828")]
		private RatingMatchmakingHandler shootoutDuelMatchmakingHandler;

		[Token(Token = "0x4001663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x830")]
		private RatingMatchmakingHandler scrapperShootoutDuelMatchmakingHandler;

		[Token(Token = "0x4001664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x838")]
		private MatchmakingData shootoutDuelMatchmakingData;

		[Token(Token = "0x4001665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x840")]
		private MatchmakingData scrapperShootoutDuelMatchmakingData;

		[Token(Token = "0x4001666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x848")]
		private RatingMatchmakingHandler winterClassicMatchmakingHandler;

		[Token(Token = "0x4001667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x850")]
		private MatchmakingData winterClassicDuelMatchmakingData;

		[Token(Token = "0x4001668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x858")]
		private ITickable platformLoginHandler;

		[Token(Token = "0x4001669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x860")]
		private PlatformLoginData platformLoginData;

		[Token(Token = "0x400166A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x868")]
		private ILoginHandler loginHandler;

		[Token(Token = "0x400166B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x870")]
		private PlayFabLoginResponseHandler playFabLoginResponseHandler;

		[Token(Token = "0x400166C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x878")]
		private LeagueTierProgressHandler leagueTierProgressHandler;

		[Token(Token = "0x400166D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x880")]
		private PlayFabProgressionHandler playFabProgressionHandler;

		[Token(Token = "0x400166E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x888")]
		private PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x400166F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x890")]
		private Ignis.DebugTools.LogSender logSender;

		[Token(Token = "0x4001670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x898")]
		private IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4001671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A0")]
		private ITimeSinceStartupTracking timeSinceStartupTracking;

		[Token(Token = "0x4001672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A8")]
		private GameDesignTrackingData gameDesignTrackingData;

		[Token(Token = "0x4001673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8B0")]
		private GameDesignTelemetryHandler gameDesignTelemetryHandler;

		[Token(Token = "0x4001674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8B8")]
		private IgnisMandatoryTelemetryHandler ignisMandatoryTelemetryHandler;

		[Token(Token = "0x4001675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C0")]
		private CertificateFingerprintTrackingHandler certificateFingerprintTrackingHandler;

		[Token(Token = "0x4001676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C8")]
		private PlayFabAbuseReportingHandler playFabAbuseReportingHandler;

		[Token(Token = "0x4001677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D0")]
		private AbuseReportingData abuseReportingData;

		[Token(Token = "0x4001678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static NetworkingRegion HARD_CODED_DEFAULT_REGION;

		[Token(Token = "0x4001679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D8")]
		private GameMechanicStateHelper gameMechanicStateHelper;

		[Token(Token = "0x400167A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8E0")]
		private bool allocateMemeoryIndefenetlyToSimulateMemoryLeak;

		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8E8")]
		private PlayFabPlayerIdentitiesHandler playFabPlayerIdentitiesHandler;

		[Token(Token = "0x400167C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8F0")]
		private PlayFabPlayerIdentitiesData playerIdentitiesData;

		[Token(Token = "0x400167D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8F8")]
		private PlayFabUserDataStorageHandler playFabUserDataStorageHandler;

		[Token(Token = "0x400167E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x900")]
		private PlayFabUserData playFabUserData;

		[Token(Token = "0x400167F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x908")]
		private PlayFabStorageSyncHandlerData playFabStorageSyncHandlerData;

		[Token(Token = "0x4001680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x910")]
		private PlayFabStorageSyncHandler playFabStorageSyncHandler;

		[Token(Token = "0x4001681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x918")]
		private PlayFabTitleData playFabTitleData;

		[Token(Token = "0x4001682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x920")]
		private PlayFabTitleDataHandler playFabTitleDataHandler;

		[Token(Token = "0x4001683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x928")]
		private PlayFabUserSettingsHandler playFabUserSettingsHandler;

		[Token(Token = "0x4001684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x930")]
		private PlayFabUserSettingsData playFabUserSettingsData;

		[Token(Token = "0x4001685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x938")]
		private ServerTimeSyncData serverTimeSyncData;

		[Token(Token = "0x4001686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x940")]
		private PlayFabServerTimeSyncHandler serverTimeSyncHandler;

		[Token(Token = "0x4001687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x948")]
		private PlayFabNewsHandler playFabNewsHandler;

		[Token(Token = "0x4001688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x950")]
		private NewsData newsData;

		[Token(Token = "0x4001689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x958")]
		private IPlatformFactory platformFactory;

		[Token(Token = "0x400168A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x960")]
		private SeasonMissionsData seasonMissionsData;

		[Token(Token = "0x400168B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x968")]
		private PlayFabSeasonMissionHandler playfabSeasonMissionHandler;

		[Token(Token = "0x400168C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x970")]
		private MissionViewHandler missionViewHandler;

		[Token(Token = "0x400168D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x978")]
		private MissionNotificationHandler missionNotificationHandler;

		[Token(Token = "0x400168E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x980")]
		private MissionProgressHandler missionProgressHandler;

		[Token(Token = "0x400168F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x988")]
		private KnockoutTournamentData knockoutTournamentData;

		[Token(Token = "0x4001690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x990")]
		private KnockoutTournamentHandler knockoutTournamentHandler;

		[Token(Token = "0x4001691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x998")]
		private bool initialized;

		[Token(Token = "0x4001692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A0")]
		private IBotSelector botSelector;

		[Token(Token = "0x4001693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A8")]
		private LocalPersistentData localPersistentData;

		[Token(Token = "0x4001694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9B0")]
		private PlayFabMatchRewardPredictionHandler matchRewardPredictionHandler;

		[Token(Token = "0x4001695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9B8")]
		private MatchRewardPredictionData matchRewardPredictionData;

		[Token(Token = "0x4001696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C0")]
		private ITimeProvider realTimeProvider;

		[Token(Token = "0x4001697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C8")]
		private PlayerReferences localPlayerReferences;

		[Token(Token = "0x4001698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D0")]
		private LogSenderComponent logSenderComponent;

		[Token(Token = "0x4001699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D8")]
		private TournamentCreationComponent tournamentCreationComponent;

		[Token(Token = "0x400169A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E0")]
		private LoginData loginData;

		[Token(Token = "0x400169B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E8")]
		private OpponentFoundViewHandler opponentFoundViewHandler;

		[Token(Token = "0x400169C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9F0")]
		private AutoPlayTestData autoPlayTestData;

		[Token(Token = "0x400169D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9F8")]
		private AutoSpectateData autoSpectateData;

		[Token(Token = "0x400169E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA00")]
		private AutoSpectateQueueData autoSpectateQueueData;

		[Token(Token = "0x400169F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA08")]
		private AutoSpectateHandler autoSpectateHandler;

		[Token(Token = "0x40016A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA10")]
		private AutoSpectateReplayHandler autoSpectateReplayHandler;

		[Token(Token = "0x40016A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA18")]
		private AutoSpectateQueueHandler autoSpectateAutoModeHandler;

		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA20")]
		private AutoSpectateQueueViewHandler autoSpectateMenuViewHandler;

		[Token(Token = "0x40016A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA28")]
		private AutoSpectateScoreboardViewHandler autoSpectateScoreboardViewHandler;

		[Token(Token = "0x40016A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA30")]
		private List<ITickable> autoSpectateHandlers;

		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA38")]
		private ArcadeData arcadeData;

		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA40")]
		private ArcadeLeaderboardData arcadeLeaderboardData;

		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA48")]
		private ArcadeOperatorSettingsData arcadeOperatorSettingsData;

		[Token(Token = "0x40016A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA50")]
		private ArcadeLobbyData arcadeLobbyData;

		[Token(Token = "0x40016A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA58")]
		private ArcadeHandler arcadeHandler;

		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA60")]
		private ArcadeOperatorSettingsHandler arcadeOperatorSettingsHandler;

		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA68")]
		private ArcadeLobbyHandler arcadeLobbyHandler;

		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA70")]
		private ArcadePhotonVoipHandler arcadePhotonVoipHandler;

		[Token(Token = "0x40016AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA78")]
		private ArcadeLeaderboardHandler arcadeLeaderboardHandler;

		[Token(Token = "0x40016AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA80")]
		private ArcadeKeyboardViewHandler arcadeKeyboardViewHandler;

		[Token(Token = "0x40016AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA88")]
		private ArcadeLoginResponseHandler arcadeLoginResponseHandler;

		[Token(Token = "0x40016B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA90")]
		private ArcadePlayerInfoPanelViewHandler arcadePlayerInfoPanelViewHandler;

		[Token(Token = "0x40016B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA98")]
		private ArcadeCampaignHandler arcadeCampaignHandler;

		[Token(Token = "0x40016B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAA0")]
		private ArcadeCampaignDifficultyChoiceViewHandler arcadeCampaignDifficultyChoiceViewHandler;

		[Token(Token = "0x40016B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAA8")]
		private ArcadeCampaignProgressViewHandler arcadeCampaignProgressViewHandler;

		[Token(Token = "0x40016B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAB0")]
		private ArcadeOnboardingMenuViewHandler arcadeOnboardingMenuViewHandler;

		[Token(Token = "0x40016B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAB8")]
		private ArcadeOperatorSettingsViewHandler arcadeOperatorSettingsViewHandler;

		[Token(Token = "0x40016B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC0")]
		private ArcadeLeaderboardViewHandler arcadeLeaderboardViewHandler;

		[Token(Token = "0x40016B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC8")]
		private ArcadeCampaignOverViewHandler arcadeCampaignOverViewHandler;

		[Token(Token = "0x40016B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD0")]
		private ArcadeMainMenuViewHandler arcadeSplashViewHandler;

		[Token(Token = "0x40016B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD8")]
		private ArcadeFriendlyDuelsViewHandler arcadeFriendlyDuelsViewHandler;

		[Token(Token = "0x40016BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE0")]
		private List<ITickable> arcadeHandlers;

		[Token(Token = "0x40016BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE8")]
		private BayTekData bayTekData;

		[Token(Token = "0x40016BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAF0")]
		private BayTekMatchLoopData bayTekMatchLoopData;

		[Token(Token = "0x40016BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAF8")]
		private BayTekHandler bayTekHandler;

		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB00")]
		private BayTekExternalClientHandler bayTekExternalClientHandler;

		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB08")]
		private BayTekExternalClientData bayTekExternalClientData;

		[Token(Token = "0x40016C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB10")]
		private BayTekBadWordFilterHandler bayTekBadWordFilterHandler;

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB18")]
		private BayTekBadWordFilterData bayTekBadWordFilterData;

		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB20")]
		private BayTekKeyboardViewHandler bayTekKeyboardViewHandler;

		[Token(Token = "0x40016C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB28")]
		private BayTekToolHandler bayTekToolHandler;

		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB30")]
		private BayTekTimeoutHandler bayTekTimeoutHandler;

		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB38")]
		private BayTekDifficultyChoiceViewHandler bayTekDifficultyChoiceViewHandler;

		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB40")]
		private BayTekMatchHandler bayTekMatchHandler;

		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB48")]
		private BayTekMatchLoopHandler bayTekMatchLoopHandler;

		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB50")]
		private BayTekLoadoutChoiceViewHandler bayTekLoadoutChoiceViewHandler;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB58")]
		private BayTekCharacterChoiceViewHandler bayTekCharacterChoiceViewHandler;

		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB60")]
		private BayTekOpponentAnnouncementViewHandler bayTekOpponentAnnouncementViewHandler;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB68")]
		private BayTekScoreSummaryViewHandler bayTekScoreSummaryViewHandler;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB70")]
		private BayTekLeaderboardViewHandler bayTekLeaderboardViewHandler;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB78")]
		private BayTekTimeoutViewHandler bayTekTimeoutViewHandler;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB80")]
		private List<ITickable> bayTekHandlers;

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB88")]
		private PlayFabApiTokenHandler playFabApiTokenHandler;

		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB90")]
		private ApiTokenData apiTokenData;

		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB98")]
		private TokenApisHttpComponent tokenApisHttpComponent;

		[Token(Token = "0x40016D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA0")]
		private MatchStartAnnouncementsHandler matchStartAnnouncementsHandler;

		[Token(Token = "0x40016D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA8")]
		private MatchStartAnnouncementsData matchStartAnnouncementsData;

		[Token(Token = "0x40016D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBB0")]
		private BhapticsHandler bhapticsHandler;

		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBB8")]
		private BhapticsData bhapticsData;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC0")]
		private BhapticsSettingsHandler bhapticsSettingsHandler;

		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC8")]
		private GamePlayRulesData gamePlayRulesData;

		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD0")]
		private int forceLogCount;

		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD8")]
		private List<IFixedTickable> IFixedTickable;

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBE0")]
		private List<ITickable> onboardingGameStatePreTickHandlers;

		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBE8")]
		private List<ITickable> onboardingGameStatePostTickHandlers;

		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBF0")]
		private List<ILateTickable> onboardingGameStateLateTickHandlers;

		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBF8")]
		private List<ITickable> lockerRoomGameStatePreTickHandlers;

		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC00")]
		private List<ITickable> lockerRoomGameStatePostTickHandlers;

		[Token(Token = "0x40016DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC08")]
		private List<ILateTickable> lockerRoomGameStateLateTickHandlers;

		[Token(Token = "0x40016E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC10")]
		private List<ITickable> arenaGameStatePreTickHandlers;

		[Token(Token = "0x40016E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC18")]
		private List<ITickable> arenaGameStatePostTickHandlers;

		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC20")]
		private List<ILateTickable> arenaGameStateLateTickHandlers;

		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC28")]
		private InitMessageHandler initMessageHandler;

		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC30")]
		private MatchmakingData tournamentEventMatchmakingData;

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC38")]
		private CharacterData characterData;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC40")]
		private OwnershipData ownershipData;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC48")]
		private OwnershipHandler ownershipHandler;

		[Token(Token = "0x40016E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC50")]
		private CageData cageData;

		[Token(Token = "0x6001291")]
		[Address(RVA = "0xF9CCB4", Offset = "0xF9CCB4", VA = "0xF9CCB4")]
		[IteratorStateMachine(typeof(<Start>d__404))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0xF9CD44", Offset = "0xF9CD44", VA = "0xF9CD44")]
		private string GetShortMatchId()
		{
			return null;
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0xF9CD84", Offset = "0xF9CD84", VA = "0xF9CD84")]
		private void SmoothHeadMovement()
		{
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0xF9CDB0", Offset = "0xF9CDB0", VA = "0xF9CDB0")]
		private void GoToGameState(IGameState newGameState)
		{
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0xF9CEC0", Offset = "0xF9CEC0", VA = "0xF9CEC0")]
		private void FixedTick()
		{
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0xF9CF78", Offset = "0xF9CF78", VA = "0xF9CF78")]
		private void Update()
		{
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0xF9D27C", Offset = "0xF9D27C", VA = "0xF9D27C")]
		private void UpdatedFixedTick()
		{
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0xF9D5D0", Offset = "0xF9D5D0", VA = "0xF9D5D0")]
		private void CheckAndHandleFullLog()
		{
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0xF9D8D8", Offset = "0xF9D8D8", VA = "0xF9D8D8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0xF9D990", Offset = "0xF9D990", VA = "0xF9D990")]
		private void DumpScore()
		{
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0xF9DA60", Offset = "0xF9DA60", VA = "0xF9DA60")]
		public GameMessageInvokationResult OnSendHello(LogMessage logMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0xF9DA84", Offset = "0xF9DA84", VA = "0xF9DA84")]
		private void ForceCrash()
		{
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0xF9DA90", Offset = "0xF9DA90", VA = "0xF9DA90")]
		private void AllocateMemoryIndefinitelyToSimulateMemoryLeak()
		{
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0xF9DA9C", Offset = "0xF9DA9C", VA = "0xF9DA9C")]
		private void FakePauseApplication(bool pause)
		{
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0xF9DAA4", Offset = "0xF9DAA4", VA = "0xF9DAA4")]
		private void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0xF9DD3C", Offset = "0xF9DD3C", VA = "0xF9DD3C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0xF9DC9C", Offset = "0xF9DC9C", VA = "0xF9DC9C")]
		private void SendLogsToLogStorageIfErrorOccurred()
		{
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0xF9D838", Offset = "0xF9D838", VA = "0xF9D838")]
		private string GetLogfileName()
		{
			return null;
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0xF9DE28", Offset = "0xF9DE28", VA = "0xF9DE28")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0xF9DE7C", Offset = "0xF9DE7C", VA = "0xF9DE7C")]
		public ArcadeEntryPoint()
		{
		}
	}
	[Token(Token = "0x2000406")]
	public class ArcadeFriendlyDuelsViewHandler : ITickable
	{
		[Token(Token = "0x4001747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ArcadeFriendlyDuelsViewReference arcadeFriendlyDuelsViewReference;

		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ArcadeMultiplayerNotConfiguredReference arcadeMultiplayerNotConfiguredReference;

		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArcadeSettings arcadeSettings;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ArcadeOperatorSettingsData operatorSettingsData;

		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ArcadeLobbyData arcadeLobbyData;

		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool showingArcadeFriendlyDuelsView;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool showingMultiplayerNotConfiguredView;

		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ProfilerMarker arcadeFriendlyDuelsViewProfileMarker;

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0xFAFDF0", Offset = "0xFAFDF0", VA = "0xFAFDF0")]
		public ArcadeFriendlyDuelsViewHandler(ArcadeSettings arcadeSettings, ArcadeOperatorSettingsData operatorSettingsData, ArcadeLobbyData arcadeLobbyData, MenuStateData menuStateData, FindFriendData findFriendData)
		{
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0xFAFE90", Offset = "0xFAFE90", VA = "0xFAFE90")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0xFB0310", Offset = "0xFB0310", VA = "0xFB0310", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0xFB012C", Offset = "0xFB012C", VA = "0xFB012C")]
		private void SetUpRoomButton(Button button, TextMeshProUGUI label, int roomNumber)
		{
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0xFB0480", Offset = "0xFB0480", VA = "0xFB0480")]
		private void OnButtonClick(int buttonIndex)
		{
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0xFB0414", Offset = "0xFB0414", VA = "0xFB0414")]
		private void SetFriendlyDuelsActive(bool active)
		{
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0xFB03B0", Offset = "0xFB03B0", VA = "0xFB03B0")]
		private void SetMultiplayerDisabledActive(bool active)
		{
		}
	}
	[Token(Token = "0x2000408")]
	public class ArcadeFriendlyDuelsViewReference : MonoBehaviour
	{
		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI header;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI description;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<Button> roomButtons;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<TextMeshProUGUI> buttonLabels;

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0xFB0598", Offset = "0xFB0598", VA = "0xFB0598")]
		public ArcadeFriendlyDuelsViewReference()
		{
		}
	}
	[Token(Token = "0x2000409")]
	public class ArcadeHandler : ITickable
	{
		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ArcadeSettings arcadeSettings;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArcadeLobbyData arcadeLobbyData;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ArcadeOperatorSettingsData arcadeOperatorSettingsData;

		[Token(Token = "0x400175C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ProfilerMarker arcadeProfileMarker;

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0xFB05A0", Offset = "0xFB05A0", VA = "0xFB05A0")]
		public ArcadeHandler(ArcadeSettings arcadeSettings, ArcadeData arcadeData, ArcadeLobbyData arcadeLobbyData, ArcadeOperatorSettingsData arcadeOperatorSettingsData, MenuStateData menuStateData)
		{
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0xFB0640", Offset = "0xFB0640", VA = "0xFB0640")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0xFB0824", Offset = "0xFB0824", VA = "0xFB0824")]
		public void SetupDebug(DebugMenu debugMenu)
		{
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0xFB0828", Offset = "0xFB0828", VA = "0xFB0828", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0xFB0884", Offset = "0xFB0884", VA = "0xFB0884")]
		private void ChangeState(ArcadeState newState)
		{
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0xFB094C", Offset = "0xFB094C", VA = "0xFB094C")]
		private void ShowOperatorSettings()
		{
		}
	}
	[Token(Token = "0x200040A")]
	public enum ArcadeState
	{
		[Token(Token = "0x400175F")]
		Dormant,
		[Token(Token = "0x4001760")]
		Started,
		[Token(Token = "0x4001761")]
		NameEntry,
		[Token(Token = "0x4001762")]
		Gameplay
	}
	[Token(Token = "0x200040B")]
	public enum ArcadeCampaignDifficulty
	{
		[Token(Token = "0x4001764")]
		Easy = 1,
		[Token(Token = "0x4001765")]
		Medium,
		[Token(Token = "0x4001766")]
		Hard
	}
	[Token(Token = "0x200040C")]
	public class ArcadeData
	{
		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool active;

		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ArcadeState state;

		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool hasSetName;

		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool hasStartedCampaign;

		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ArcadeCampaignDifficulty currentCampaignDifficulty;

		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<BotSettings> campaignBotProgression;

		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int campaignStartIndex;

		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int campaignProgressIndex;

		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int campaignScore;

		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public ArcadeCampaignStatus currentCampaignStatus;

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Dictionary<ArcadeCampaignDifficulty, int> campaignDifficultyIndex;

		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool requestedContinueCampaign;

		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool requestedResignCampaign;

		[Token(Token = "0x4001774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool lockerRoomPhotonInitialised;

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0xFB096C", Offset = "0xFB096C", VA = "0xFB096C")]
		public ArcadeData()
		{
		}
	}
	[Token(Token = "0x200040D")]
	public class ArcadeKeyboardViewHandler : ITickable
	{
		[Token(Token = "0x4001775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly LoginData loginData;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly VrKeyboardData vrKeyboardData;

		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ArcadeLeaderboardData arcadeLeaderboardData;

		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly KeyboardControllerData keyboardControllerData;

		[Token(Token = "0x400177A")]
		private const int MaxDisplayNameCount = 16;

		[Token(Token = "0x400177B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool showingKeyboard;

		[Token(Token = "0x400177C")]
		private const string defaultName = "BLASTON";

		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ProfilerMarker arcadeKeyboardViewProfileMarker;

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0xFB0A2C", Offset = "0xFB0A2C", VA = "0xFB0A2C")]
		public ArcadeKeyboardViewHandler(ArcadeData arcadeData, LoginData loginData, VrKeyboardData vrKeyboardData, ArcadeLeaderboardData arcadeLeaderboardData)
		{
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0xFB0AF0", Offset = "0xFB0AF0", VA = "0xFB0AF0", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0xFB0B38", Offset = "0xFB0B38", VA = "0xFB0B38")]
		private void ShowChangeDisplayName()
		{
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0xFB0D10", Offset = "0xFB0D10", VA = "0xFB0D10")]
		private void CancelChangeDisplayName()
		{
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0xFB0D14", Offset = "0xFB0D14", VA = "0xFB0D14")]
		private void ChangeDisplayName(string newDisplayName)
		{
		}
	}
	[Token(Token = "0x200040E")]
	public class ArcadeLeaderboardData
	{
		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<ArcadeLeaderboardEntryRequest> leaderboardEntryRequests;

		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<ArcadeLeaderboardClearRequest> leaderboardClearRequests;

		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool waitingToConfirmEligibility;

		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool isEligibleAddition;

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0xFB0DF0", Offset = "0xFB0DF0", VA = "0xFB0DF0")]
		public ArcadeLeaderboardData()
		{
		}
	}
	[Token(Token = "0x200040F")]
	public struct ArcadeLeaderboardEntryRequest
	{
		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string playerName;

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int playerScore;

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool checkEligibility;

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0xFB0EB8", Offset = "0xFB0EB8", VA = "0xFB0EB8")]
		public ArcadeLeaderboardEntryRequest(string name, int score, bool checkEligibility)
		{
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0xFB0ECC", Offset = "0xFB0ECC", VA = "0xFB0ECC")]
		public static ArcadeLeaderboardEntryRequest EligibilityRequest(int score)
		{
			return default(ArcadeLeaderboardEntryRequest);
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0xFB0EDC", Offset = "0xFB0EDC", VA = "0xFB0EDC")]
		public static ArcadeLeaderboardEntryRequest EntryRequest(string name, int score)
		{
			return default(ArcadeLeaderboardEntryRequest);
		}
	}
	[Token(Token = "0x2000410")]
	public struct ArcadeLeaderboardClearRequest
	{
	}
	[Token(Token = "0x2000411")]
	public class ArcadeLeaderboardHandler : ITickable
	{
		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly LeaderBoardData leaderBoardData;

		[Token(Token = "0x4001786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly LoginData loginData;

		[Token(Token = "0x4001787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArcadeLeaderboardData arcadeLeaderboardData;

		[Token(Token = "0x4001788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ArcadeOperatorSettingsData arcadeOperatorSettingsData;

		[Token(Token = "0x4001789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x400178A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly BayTekExternalClientData bayTekExternalClientData;

		[Token(Token = "0x400178B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ProfilerMarker arcadeLeaderboardProfileMarker;

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0xFB0EE4", Offset = "0xFB0EE4", VA = "0xFB0EE4")]
		public ArcadeLeaderboardHandler(ArcadeLeaderboardData arcadeLeaderboardData, ArcadeOperatorSettingsData arcadeOperatorSettingsData, LeaderBoardData leaderBoardData, LoginData loginData, BayTekData bayTekData, BayTekExternalClientData bayTekExternalClientData)
		{
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0xFB0F88", Offset = "0xFB0F88", VA = "0xFB0F88", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0xFB1774", Offset = "0xFB1774", VA = "0xFB1774")]
		public void ClearLeaderboard()
		{
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0xFB1074", Offset = "0xFB1074", VA = "0xFB1074")]
		public void CheckEligibilityForLeaderboard(ArcadeLeaderboardEntryRequest currentRequest)
		{
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0xFB1218", Offset = "0xFB1218", VA = "0xFB1218")]
		public void TryAddEntryToLeaderboard(ArcadeLeaderboardEntryRequest currentRequest)
		{
		}
	}
	[Token(Token = "0x2000412")]
	public class ArcadeLeaderboardViewHandler : ITickable, IInitialisable
	{
		[Token(Token = "0x400178C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private LeaderBoardViewReference leaderBoardViewReference;

		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly LeaderBoardData leaderBoardData;

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x400178F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x4001790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly InteractionSettings interactionSettings;

		[Token(Token = "0x4001791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly MenuStateSettings menuStateSettings;

		[Token(Token = "0x4001792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool showingLeaderBoard;

		[Token(Token = "0x4001793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int entryCount;

		[Token(Token = "0x4001794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ProfilerMarker arcadeLeaderboardViewProfileMarker;

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0xFB185C", Offset = "0xFB185C", VA = "0xFB185C")]
		public ArcadeLeaderboardViewHandler(ArcadeData arcadeData, LeaderBoardData leaderBoardData, MenuStateData menuStateData, InteractionSettings interactionSettings, MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0xFB18FC", Offset = "0xFB18FC", VA = "0xFB18FC", Slot = "5")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0xFB1ED0", Offset = "0xFB1ED0", VA = "0xFB1ED0", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0xFB1D4C", Offset = "0xFB1D4C", VA = "0xFB1D4C")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0xFB1ADC", Offset = "0xFB1ADC", VA = "0xFB1ADC")]
		private void UpdateNamesAndValuesOnLeaderboard(List<LeaderBoardRowReference> leaderBoardReference, List<LeaderBoardRecord> records)
		{
		}
	}
	[Token(Token = "0x2000413")]
	public enum ArcadeLobbyRequestType
	{
		[Token(Token = "0x4001796")]
		Campaign,
		[Token(Token = "0x4001797")]
		Friendly,
		[Token(Token = "0x4001798")]
		ReJoinLobby,
		[Token(Token = "0x4001799")]
		Tutorial
	}
	[Token(Token = "0x2000414")]
	public readonly struct ArcadeLobbyRequest
	{
		[Token(Token = "0x400179A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly ArcadeLobbyRequestType requestType;

		[Token(Token = "0x400179B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string roomCode;

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0xFB1F5C", Offset = "0xFB1F5C", VA = "0xFB1F5C")]
		private ArcadeLobbyRequest(ArcadeLobbyRequestType requestType, string roomCode)
		{
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0xFB056C", Offset = "0xFB056C", VA = "0xFB056C")]
		public static ArcadeLobbyRequest RequestFriendlyDuel(string roomCode)
		{
			return default(ArcadeLobbyRequest);
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0xFB1F68", Offset = "0xFB1F68", VA = "0xFB1F68")]
		public static ArcadeLobbyRequest RequestLobbyRoom(string roomCode)
		{
			return default(ArcadeLobbyRequest);
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0xFB1F74", Offset = "0xFB1F74", VA = "0xFB1F74")]
		public static ArcadeLobbyRequest RequestTutorial()
		{
			return default(ArcadeLobbyRequest);
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0xFB1FC0", Offset = "0xFB1FC0", VA = "0xFB1FC0")]
		public static ArcadeLobbyRequest RequestCampaign()
		{
			return default(ArcadeLobbyRequest);
		}
	}
	[Token(Token = "0x2000415")]
	public class ArcadeLobbyData
	{
		[Token(Token = "0x400179C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ArcadeLobbyState currentState;

		[Token(Token = "0x400179D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<ArcadeLobbyRequest> roomRequests;

		[Token(Token = "0x400179E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ArcadeLobbyRequest currentRoomRequest;

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0xFB200C", Offset = "0xFB200C", VA = "0xFB200C")]
		public ArcadeLobbyData()
		{
		}
	}
	[Token(Token = "0x2000416")]
	public enum ArcadeLobbyState
	{
		[Token(Token = "0x40017A0")]
		Inactive,
		[Token(Token = "0x40017A1")]
		WaitForConnection,
		[Token(Token = "0x40017A2")]
		CreatingToLobby,
		[Token(Token = "0x40017A3")]
		JoiningLobby,
		[Token(Token = "0x40017A4")]
		InLobby,
		[Token(Token = "0x40017A5")]
		WaitingToLeaveLobby,
		[Token(Token = "0x40017A6")]
		ConfirmFriendlyMatchHasStarted,
		[Token(Token = "0x40017A7")]
		ConfirmCampaignMatchHasStarted,
		[Token(Token = "0x40017A8")]
		UnexpectedBehaviour,
		[Token(Token = "0x40017A9")]
		ConfirmTutorialHasStarted
	}
	[Token(Token = "0x2000417")]
	public class ArcadeLobbyHandler : ITickable
	{
		[Token(Token = "0x40017AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x40017AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ArcadeLobbyData arcadeLobbyData;

		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArcadeOperatorSettingsData arcadeOperatorSettingsData;

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly INetworkConnectionHandler networkConnectionHandler;

		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameData gameData;

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x40017B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly ProfilerMarker arcadePhotonRoomProfileMarker;

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0xFB208C", Offset = "0xFB208C", VA = "0xFB208C")]
		public ArcadeLobbyHandler(ArcadeData arcadeData, ArcadeLobbyData acradeLobbyData, ArcadeOperatorSettingsData arcadeOperatorSettingsData, IgnisNetworkConnectionData networkConnectionData, INetworkConnectionHandler networkConnectionHandler, LockerRoomGameStateData lockerRoomGameStateData, EntryPoint.EntryPointData entryPointData, FindFriendData findFriendData, GameData gameData)
		{
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0xFB2154", Offset = "0xFB2154", VA = "0xFB2154", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0xFB22A8", Offset = "0xFB22A8", VA = "0xFB22A8")]
		private void HandleWaitForConnection()
		{
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0xFB265C", Offset = "0xFB265C", VA = "0xFB265C")]
		private void ConnectToLobby()
		{
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0xFB22F8", Offset = "0xFB22F8", VA = "0xFB22F8")]
		private void HandleCreatingLobby()
		{
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0xFB2418", Offset = "0xFB2418", VA = "0xFB2418")]
		private void HandleJoiningLobby()
		{
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0xFB273C", Offset = "0xFB273C", VA = "0xFB273C")]
		private void SetOnlineMode()
		{
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0xFB246C", Offset = "0xFB246C", VA = "0xFB246C")]
		private void HandleInLobby()
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0xFB2770", Offset = "0xFB2770", VA = "0xFB2770")]
		private void LeaveLobbyRoom(bool reconnectToLobby)
		{
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0xFB2568", Offset = "0xFB2568", VA = "0xFB2568")]
		private void HandlerWaitToLeaveLobby()
		{
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0xFB282C", Offset = "0xFB282C", VA = "0xFB282C")]
		private void CreateMatchRequest()
		{
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0xFB25A4", Offset = "0xFB25A4", VA = "0xFB25A4")]
		private void HandleWaitingToLeaveLockerRoom()
		{
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0xFB25AC", Offset = "0xFB25AC", VA = "0xFB25AC")]
		private void HandleConfirmFriendlyMatch()
		{
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0xFB25DC", Offset = "0xFB25DC", VA = "0xFB25DC")]
		private void CheckIfExitingLockerRoom(bool isExpected = true)
		{
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0xFB21E0", Offset = "0xFB21E0", VA = "0xFB21E0")]
		private void ChangeState(ArcadeLobbyState newState)
		{
		}
	}
	[Token(Token = "0x2000418")]
	public class ArcadeLoginHandler : ILoginHandler, ITickable, ILogin
	{
		[Token(Token = "0x40017B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayFabLoginData loginData;

		[Token(Token = "0x40017B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ITimeSinceStartupTracking timeSinceStartupTracking;

		[Token(Token = "0x40017B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool firstLoginAfterAppStartup;

		[Token(Token = "0x40017B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ProfilerMarker tickMarker;

		[Token(Token = "0x40017B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ProfilerMarker changeStateMarker;

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0xFB2A60", Offset = "0xFB2A60", VA = "0xFB2A60")]
		public ArcadeLoginHandler(PlayFabLoginData loginData, ITimeSinceStartupTracking timeSinceStartupTracking)
		{
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0xFB2B1C", Offset = "0xFB2B1C", VA = "0xFB2B1C", Slot = "8")]
		public void ClearCredentials()
		{
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0xFB2B5C", Offset = "0xFB2B5C", VA = "0xFB2B5C", Slot = "6")]
		public void CreateNewAccount(string email, string username, string password)
		{
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0xFB2B9C", Offset = "0xFB2B9C", VA = "0xFB2B9C", Slot = "5")]
		public void CreateUsernamePassword(string email, string username, string password)
		{
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0xFB2BDC", Offset = "0xFB2BDC", VA = "0xFB2BDC")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0xFB2BE0", Offset = "0xFB2BE0", VA = "0xFB2BE0", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0xFB2C34", Offset = "0xFB2C34", VA = "0xFB2C34", Slot = "7")]
		public void UpdateCredentials(string username, string password)
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0xFB2C24", Offset = "0xFB2C24", VA = "0xFB2C24")]
		private void NotLoggedIn()
		{
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0xFB2C2C", Offset = "0xFB2C2C", VA = "0xFB2C2C")]
		private void LoggingIn()
		{
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0xFB2C74", Offset = "0xFB2C74", VA = "0xFB2C74")]
		private void ChangeState(LoginData.LoginState newState)
		{
		}
	}
	[Token(Token = "0x2000419")]
	public class ArcadeLoginResponseHandler : ITickable
	{
		[Token(Token = "0x40017B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayFabLoginData loginData;

		[Token(Token = "0x40017BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x40017BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ShopData shopData;

		[Token(Token = "0x40017BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly DeckData deckData;

		[Token(Token = "0x40017BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ArcadeSettings arcadeSettings;

		[Token(Token = "0x40017BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x40017BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly BayTekSettings bayTekSettings;

		[Token(Token = "0x40017C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x40017C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool expectingNewData;

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0xFB2DE0", Offset = "0xFB2DE0", VA = "0xFB2DE0")]
		public ArcadeLoginResponseHandler(PlayFabLoginData loginData, CustomizationData customizationData, ShopData shopData, DeckData deckData, ArcadeSettings arcadeSettings, ArcadeData arcadeData, BayTekSettings bayTekSettings, BayTekData bayTekData)
		{
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0xFB2E50", Offset = "0xFB2E50", VA = "0xFB2E50", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0xFB2E98", Offset = "0xFB2E98", VA = "0xFB2E98")]
		private void OwnAllItems()
		{
		}
	}
	[Token(Token = "0x200041B")]
	public class ArcadeMainMenuViewHandler : ITickable
	{
		[Token(Token = "0x40017C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ArcadeSplashArtReference splashArtReference;

		[Token(Token = "0x40017C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ArcadeOperatorSettingsHiddenButtonReference operatorSettingsHiddenButtonReference;

		[Token(Token = "0x40017C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ArcadeSettings arcadeSettings;

		[Token(Token = "0x40017C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MenuStateData menuStateData;

		[Token(Token = "0x40017C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool showingArcadeMainMenuView;

		[Token(Token = "0x40017C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float clickStartTime;

		[Token(Token = "0x40017C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int currentHiddenButtonClickAmount;

		[Token(Token = "0x40017CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ProfilerMarker arcadeMainMenuViewProfileMarker;

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0xFB3ABC", Offset = "0xFB3ABC", VA = "0xFB3ABC")]
		public ArcadeMainMenuViewHandler(ArcadeSettings arcadeSettings, MenuStateData menuStateData)
		{
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0xFB3B38", Offset = "0xFB3B38", VA = "0xFB3B38")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0xFB3D14", Offset = "0xFB3D14", VA = "0xFB3D14", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0xFB3E04", Offset = "0xFB3E04", VA = "0xFB3E04")]
		private void ResetHiddenButtonClickState()
		{
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0xFB3E0C", Offset = "0xFB3E0C", VA = "0xFB3E0C")]
		private void RegisterHiddenButtonClick()
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0xFB3C90", Offset = "0xFB3C90", VA = "0xFB3C90")]
		private void SetActive(bool active)
		{
		}
	}
	[Token(Token = "0x200041C")]
	public class ArcadeMultiplayerNotConfiguredReference : MonoBehaviour
	{
		[Token(Token = "0x40017CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xFB3EE0", Offset = "0xFB3EE0", VA = "0xFB3EE0")]
		public ArcadeMultiplayerNotConfiguredReference()
		{
		}
	}
	[Token(Token = "0x200041D")]
	public class ArcadeOnboardingMenuViewHandler : ITickable
	{
		[Token(Token = "0x40017CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private OnboardingMenuViewReferences arcadeOnboardingMenuViewReference;

		[Token(Token = "0x40017CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ArcadeSettings arcadeSettings;

		[Token(Token = "0x40017CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x40017CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x40017D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IgnisSoundTriggerData soundTriggerData;

		[Token(Token = "0x40017D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ArcadeLobbyData roomData;

		[Token(Token = "0x40017D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool showingOnboardingView;

		[Token(Token = "0x40017D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ProfilerMarker arcadeOnboardingMenuViewProfileMarker;

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0xFB3EE8", Offset = "0xFB3EE8", VA = "0xFB3EE8")]
		public ArcadeOnboardingMenuViewHandler(ArcadeSettings arcadeSettings, LockerRoomGameStateData lockerRoomGameStateData, MenuStateData menuStateData, IgnisSoundTriggerData soundTriggerData, ArcadeLobbyData roomData)
		{
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0xFB3F88", Offset = "0xFB3F88", VA = "0xFB3F88")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0xFB4104", Offset = "0xFB4104", VA = "0xFB4104")]
		private void OnStartOnboarding()
		{
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0xFB41EC", Offset = "0xFB41EC", VA = "0xFB41EC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0xFB4090", Offset = "0xFB4090", VA = "0xFB4090")]
		private void SetActive(bool active)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200041E")]
	public class ArcadeOperatorSettingsData
	{
		[Token(Token = "0x40017D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<LeaderBoardRecord> leaderboardRecords;

		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string voipCode;

		[Token(Token = "0x40017D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NetworkingRegion roomRegion;

		[Token(Token = "0x40017D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool modifiedByOperator;

		[Token(Token = "0x40017D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<string> voipCodeVariants;

		[Token(Token = "0x40017D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Queue<ArcadeSaveOperatorSettingsRequest> saveOperatorSettingsRequests;

		[Token(Token = "0x6001302")]
		[Address(RVA = "0xFB4230", Offset = "0xFB4230", VA = "0xFB4230")]
		public ArcadeOperatorSettingsData()
		{
		}
	}
	[Token(Token = "0x200041F")]
	public struct ArcadeSaveOperatorSettingsRequest
	{
	}
	[Token(Token = "0x2000420")]
	public class ArcadeOperatorSettingsHandler : ITickable
	{
		[Token(Token = "0x40017DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ArcadeSettings arcadeSettings;

		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ArcadeData arcadeData;

		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ArcadeOperatorSettingsData arcadeOperatorSettingsData;

		[Token(Token = "0x40017DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LeaderBoardData leaderBoardData;

		[Token(Token = "0x40017DE")]
		private const string Settingsdirectory = "ArcadeSettings";

		[Token(Token = "0x40017DF")]
		private const string Settingsfile = "Settings.txt";

		[Token(Token = "0x40017E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string settingsDirectoryPath;

		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<NetworkingRegion> allowedNetworkingRegions;

		[Token(Token = "0x40017E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ProfilerMarker arcadeOperatorSettingsMarker;

		[Token(Token = "0x6001303")]
		[Address(RVA = "0xFB4338", Offset = "0xFB4338", VA = "0xFB4338")]
		public ArcadeOperatorSettingsHandler(ArcadeData arcadeData, ArcadeSettings arcadeSettings, ArcadeOperatorSettingsData operatorSettingsData, LeaderBoardData leaderBoardData)
		{
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0xFB43EC", Offset = "0xFB43EC", VA = "0xFB43EC")]
		public ArcadeOperatorSettingsData LoadSettingsData()
		{
			return null;
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0xFB4544", Offset = "0xFB4544", VA = "0xFB4544")]
		public void LoadFromFile()
		{
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0xFB46F0", Offset = "0xFB46F0", VA = "0xFB46F0")]
		private void GenerateEmptyFile()
		{
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0xFB4894", Offset = "0xFB4894", VA = "0xFB4894")]
		private void LoadFile(string filePath)
		{
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0xFB4A18", Offset = "0xFB4A18", VA = "0xFB4A18")]
		public void WriteToFile()
		{
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0xFB4AD4", Offset = "0xFB4AD4", VA = "0xFB4AD4", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0xFB440C", Offset = "0xFB440C", VA = "0xFB440C")]
		private void CreateSettingsDirectory()
		{
		}
	}
	[Token(Token = "0x2000421")]
	public class ArcadeOperatorSettingsHiddenButtonReference : MonoBehaviour
	{
		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button hiddenButton;

		[Token(Token = "0x600130B")]
		[Address(RVA = "0xFB4B58", Offset = "0xFB4B58", VA = "0xFB4B58")]
		public ArcadeOperatorSettingsHiddenButtonReference()
		{
		}
	}
	[Token(Token = "0x2000422")]
	public class ArcadeOperatorSettingsViewHandler : ITickable
	{
		[Token(Token = "0x40017E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ArcadeOperatorSettingsViewReference operatorSettingsReference;

		[Token(Token = "0x40017E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ArcadeSettings arcadeSettings;

		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x40017E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ArcadeOperatorSettingsData arcadeOperatorSettingsData;

		[Token(Token = "0x40017E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ArcadeLobbyData arcadeLobbyData;

		[Token(Token = "0x40017E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ArcadeLeaderboardData arcadeLeaderboardData;

		[Token(Token = "0x40017EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x40017EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly LeaderBoardData leaderBoardData;

		[Token(Token = "0x40017EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private KeyboardControllerData keyboardControllerData;

		[Token(Token = "0x40017ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly VrKeyboardData vrKeyboardData;

		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly NetworkRegionSelector networkRegionSelector;

		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool showingArcadeOperatorSettingsView;

		[Token(Token = "0x40017F0")]
		private const int MaxVoipCodeLength = 20;

		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dictionary<NetworkingRegion, int> photonRegionDictionary;

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly ProfilerMarker arcadeOperatorSettingsViewProfileMarker;

		[Token(Token = "0x600130C")]
		[Address(RVA = "0xFB4B60", Offset = "0xFB4B60", VA = "0xFB4B60")]
		public ArcadeOperatorSettingsViewHandler(ArcadeSettings arcadeSettings, ArcadeData arcadeData, ArcadeOperatorSettingsData operatorSettingsData, ArcadeLobbyData arcadeLobbyData, ArcadeLeaderboardData arcadeLeaderboardData, MenuStateData menuStateData, LeaderBoardData leaderBoardData, VrKeyboardData vrKeyboardData, NetworkRegionSelector networkRegionSelector)
		{
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0xFB4CA4", Offset = "0xFB4CA4", VA = "0xFB4CA4")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0xFB5240", Offset = "0xFB5240", VA = "0xFB5240", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0xFB52AC", Offset = "0xFB52AC", VA = "0xFB52AC")]
		private void UpdateReference()
		{
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0xFB51DC", Offset = "0xFB51DC", VA = "0xFB51DC")]
		private void SetActive(bool active)
		{
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0xFB53CC", Offset = "0xFB53CC", VA = "0xFB53CC")]
		private void ExitOperatorSettings()
		{
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0xFB53EC", Offset = "0xFB53EC", VA = "0xFB53EC")]
		private void ClearLeaderboards()
		{
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0xFB5480", Offset = "0xFB5480", VA = "0xFB5480")]
		private void CallVoipCodeKeyboard()
		{
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0xFB5660", Offset = "0xFB5660", VA = "0xFB5660")]
		private void CancelInput()
		{
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0xFB5680", Offset = "0xFB5680", VA = "0xFB5680")]
		private void ChangeVoipCode(string newVoipCode)
		{
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0xFB590C", Offset = "0xFB590C", VA = "0xFB590C")]
		private void OnPhotonRegionChanged(int newRegion)
		{
		}
	}
	[Token(Token = "0x2000423")]
	public class ArcadeOperatorSettingsViewReference : MonoBehaviour
	{
		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI voipCode;

		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IgnisDropdown regionSelector;

		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI leaderboardEntryCount;

		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button changeVoipCodeButton;

		[Token(Token = "0x40017F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Button clearLeaderboardsButton;

		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Button exitSettingsButton;

		[Token(Token = "0x6001317")]
		[Address(RVA = "0xFB5B34", Offset = "0xFB5B34", VA = "0xFB5B34")]
		public ArcadeOperatorSettingsViewReference()
		{
		}
	}
	[Token(Token = "0x2000424")]
	public class ArcadePhotonVoipHandler : ITickable
	{
		[Token(Token = "0x40017FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ArcadeLobbyData arcadeLobbyData;

		[Token(Token = "0x40017FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly VoipData voipData;

		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayerReferences localPlayerReference;

		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Transform voipSource;

		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ArcadeLobbyState lastSeenState;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ProfilerMarker arcadePhotonVoipProfileMarker;

		[Token(Token = "0x6001318")]
		[Address(RVA = "0xFB5B3C", Offset = "0xFB5B3C", VA = "0xFB5B3C")]
		public ArcadePhotonVoipHandler(ArcadeLobbyData arcadeLobbyData, VoipData voipData, IgnisNetworkConnectionData networkConnectionData, PlayerReferences localPlayerReference, Transform voipSource)
		{
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0xFB5BDC", Offset = "0xFB5BDC", VA = "0xFB5BDC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0xFB5E1C", Offset = "0xFB5E1C", VA = "0xFB5E1C")]
		private void OnPlayerEvent(PeerEvent peerEvent)
		{
		}
	}
	[Token(Token = "0x2000425")]
	public class ArcadePlatformFactory : IPlatformFactory
	{
		[Token(Token = "0x2000426")]
		[CompilerGenerated]
		private sealed class <Initialize>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001812")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001813")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001814")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ArcadePlatformFactory <>4__this;

			[Token(Token = "0x170000EE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600132F")]
				[Address(RVA = "0xFB68B8", Offset = "0xFB68B8", VA = "0xFB68B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000EF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001331")]
				[Address(RVA = "0xFB6900", Offset = "0xFB6900", VA = "0xFB6900", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600132C")]
			[Address(RVA = "0xFB6024", Offset = "0xFB6024", VA = "0xFB6024")]
			[DebuggerHidden]
			public <Initialize>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x600132D")]
			[Address(RVA = "0xFB681C", Offset = "0xFB681C", VA = "0xFB681C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600132E")]
			[Address(RVA = "0xFB6820", Offset = "0xFB6820", VA = "0xFB6820", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001330")]
			[Address(RVA = "0xFB68C0", Offset = "0xFB68C0", VA = "0xFB68C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000427")]
		[CompilerGenerated]
		private sealed class <LoadSettings>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001815")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001816")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001817")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ArcadePlatformFactory <>4__this;

			[Token(Token = "0x4001818")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AssetRequest<SteamVrPlatformSettings> <request>5__2;

			[Token(Token = "0x170000F0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001335")]
				[Address(RVA = "0xFB6B08", Offset = "0xFB6B08", VA = "0xFB6B08", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001337")]
				[Address(RVA = "0xFB6B50", Offset = "0xFB6B50", VA = "0xFB6B50", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001332")]
			[Address(RVA = "0xFB60B4", Offset = "0xFB60B4", VA = "0xFB60B4")]
			[DebuggerHidden]
			public <LoadSettings>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6001333")]
			[Address(RVA = "0xFB6908", Offset = "0xFB6908", VA = "0xFB6908", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001334")]
			[Address(RVA = "0xFB690C", Offset = "0xFB690C", VA = "0xFB690C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001336")]
			[Address(RVA = "0xFB6B10", Offset = "0xFB6B10", VA = "0xFB6B10", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IPlatformFactory platformFactory;

		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly InputData inputData;

		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly DevicePlatform platform;

		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ITimeSinceStartupTracking timeSinceStartupTracking;

		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly VisualQualityHandlerData visualQualityHandlerData;

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private XrPluginData xrPluginData;

		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private XrPluginHandler xrPluginHandler;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private HapticData hapticData;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private IHapticHandler steamHapticHandler;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SteamVrPlatformSettings steamVrPlatformSettings;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayFabLoginData playFabLoginData;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PersistentPlatformData platformPersistentData;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ArcadeLoginHandler arcadeLoginHandler;

		[Token(Token = "0x4001811")]
		public const string SYNTHESIS_SETTINGS_KEY = "SynthesisArcadeSettings";

		[Token(Token = "0x600131B")]
		[Address(RVA = "0xFB5F50", Offset = "0xFB5F50", VA = "0xFB5F50")]
		public ArcadePlatformFactory(IPlatformFactory platformFactory, LocalPersistentData localPersistentData, PersistantDataUtility persistantDataUtility, InputData inputData, ArcadeData arcadeData, DevicePlatform platform, ITimeSinceStartupTracking timeSinceStartupTracking, VisualQualityHandlerData visualQualityHandlerData)
		{
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0xFB5FBC", Offset = "0xFB5FBC", VA = "0xFB5FBC", Slot = "4")]
		[IteratorStateMachine(typeof(<Initialize>d__18))]
		public IEnumerator Initialize()
		{
			return null;
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0xFB604C", Offset = "0xFB604C", VA = "0xFB604C", Slot = "5")]
		[IteratorStateMachine(typeof(<LoadSettings>d__19))]
		public IEnumerator LoadSettings()
		{
			return null;
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0xFB60DC", Offset = "0xFB60DC", VA = "0xFB60DC", Slot = "6")]
		public CameraReference Camera()
		{
			return null;
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0xFB6158", Offset = "0xFB6158", VA = "0xFB6158", Slot = "10")]
		public (ILoginHandler, LoginData) PlayerDatabaseLoginHandler(PlayFabConnectionSettings playFabConnectionSettings, IMultiplayerProtocolVersion multiplayerProtocolVersion)
		{
			return default((ILoginHandler, LoginData));
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0xFB626C", Offset = "0xFB626C", VA = "0xFB626C", Slot = "8")]
		public IInputHandler InputHandler(Transform cameraTransform)
		{
			return null;
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0xFB62DC", Offset = "0xFB62DC", VA = "0xFB62DC", Slot = "11")]
		public (IHapticHandler, HapticData) HapticHandler()
		{
			return default((IHapticHandler, HapticData));
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0xFB63D8", Offset = "0xFB63D8", VA = "0xFB63D8", Slot = "12")]
		public PlayerReferences LocalPlayer(PlayerSettings playerSettings, Transform worldParent)
		{
			return null;
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0xFB63E8", Offset = "0xFB63E8", VA = "0xFB63E8", Slot = "13")]
		public (IXrPluginHandler, XrPluginData) XrPluginHandler()
		{
			return default((IXrPluginHandler, XrPluginData));
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0xFB64F0", Offset = "0xFB64F0", VA = "0xFB64F0", Slot = "14")]
		public ITickable PlatformLoginHandler()
		{
			return null;
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0xFB6594", Offset = "0xFB6594", VA = "0xFB6594", Slot = "15")]
		public List<ITickable> AdditionalPreTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0xFB6604", Offset = "0xFB6604", VA = "0xFB6604", Slot = "16")]
		public List<ITickable> AdditionalPostTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0xFB6674", Offset = "0xFB6674", VA = "0xFB6674", Slot = "17")]
		public PersistentPlatformData CreateLocalPersistentPlatformData()
		{
			return null;
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xFB6760", Offset = "0xFB6760", VA = "0xFB6760", Slot = "18")]
		public string GetTrackingPlatform()
		{
			return null;
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0xFB67B8", Offset = "0xFB67B8", VA = "0xFB67B8", Slot = "19")]
		public string GetTrackingFlavor()
		{
			return null;
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0xFB67F8", Offset = "0xFB67F8", VA = "0xFB67F8", Slot = "7")]
		public SceneHandlerSettings SceneSettings()
		{
			return null;
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0xFB6814", Offset = "0xFB6814", VA = "0xFB6814", Slot = "9")]
		public bool IsSystemVoipActive()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000428")]
	public class ArcadePlayerInfoPanelViewHandler : ITickable
	{
		[Token(Token = "0x4001819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x400181A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly LoginData loginData;

		[Token(Token = "0x400181B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArcadeOperatorSettingsData operatorSettingsData;

		[Token(Token = "0x400181C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ArcadeSettings arcadeSettings;

		[Token(Token = "0x400181D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ArcadePlayerInfoPanelReference arcadePlayerInfoPanelReference;

		[Token(Token = "0x400181E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool showingView;

		[Token(Token = "0x400181F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int lastSeenPlayerCount;

		[Token(Token = "0x4001820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ProfilerMarker arcadePlayerInfoPanelViewProfileMarker;

		[Token(Token = "0x6001338")]
		[Address(RVA = "0xFB6B58", Offset = "0xFB6B58", VA = "0xFB6B58")]
		public ArcadePlayerInfoPanelViewHandler(ArcadeSettings arcadeSettings, ArcadeOperatorSettingsData operatorSettingsData, MenuStateData menuStateData, LoginData loginData)
		{
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0xFB6BE8", Offset = "0xFB6BE8", VA = "0xFB6BE8")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0xFB6C8C", Offset = "0xFB6C8C", VA = "0xFB6C8C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0xFB6F04", Offset = "0xFB6F04", VA = "0xFB6F04")]
		private void SetActive(bool isActive)
		{
		}
	}
	[Token(Token = "0x2000429")]
	[CreateAssetMenu(menuName = "Settings/Arcade/ArcadeSettings")]
	public class ArcadeSettings : ScriptableObject
	{
		[Token(Token = "0x4001821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public MainMenuTabsReference arcadeMainMenuTabsReference;

		[Token(Token = "0x4001822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ArcadePlayerInfoPanelReference arcadePlayerInfoPanelReference;

		[Token(Token = "0x4001823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ArcadeCampaignDifficultyChoiceReference arcadeCampaignDifficultyChoiceReference;

		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ArcadeCampaignProgressReference arcadeCampaignProgressReference;

		[Token(Token = "0x4001825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public OnboardingMenuViewReferences arcadeOnboardingMenuViewReference;

		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ArcadeOperatorSettingsViewReference arcadeOperatorSettingsViewReference;

		[Token(Token = "0x4001827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ArcadeCampaignOverReference arcadeCampaignOverReference;

		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ArcadeCampaignResignConfirmationReference arcadeCampaignResignConfirmationReference;

		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ArcadeSplashArtReference arcadeSplashArtReference;

		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ArcadeOperatorSettingsHiddenButtonReference arcadeOperatorSettingsHiddenButtonReference;

		[Token(Token = "0x400182B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public ArcadeFriendlyDuelsViewReference arcadeFriendlyDuelsViewReference;

		[Token(Token = "0x400182C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ArcadeMultiplayerNotConfiguredReference arcadeMultiplayerNotConfiguredReference;

		[Token(Token = "0x400182D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Allow Lists")]
		public List<ToolSet> allowedWeapons;

		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<string> allowedCharacters;

		[Token(Token = "0x400182F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<string> allowedArenas;

		[Token(Token = "0x4001830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<string> allowedPlatforms;

		[Token(Token = "0x4001831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<string> allowedBanners;

		[Token(Token = "0x4001832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<string> allowedWeaponSkins;

		[Token(Token = "0x4001833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Header("Blocked Lists")]
		public List<NetworkingRegion> blockedPhotonRegions;

		[Token(Token = "0x4001834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Header("Campaign")]
		public List<BotSettings> easyBotSettings;

		[Token(Token = "0x4001835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public List<BotSettings> mediumBotSettings;

		[Token(Token = "0x4001836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public List<BotSettings> hardBotSettings;

		[Token(Token = "0x4001837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Operator Settings")]
		public int clicksNeededForHiddenMenu;

		[Token(Token = "0x4001838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float clicksTimeOut;

		[Token(Token = "0x600133C")]
		[Address(RVA = "0xFB6F58", Offset = "0xFB6F58", VA = "0xFB6F58")]
		public ArcadeSettings()
		{
		}
	}
	[Token(Token = "0x200042A")]
	public class ArcadeSplashArtReference : MonoBehaviour
	{
		[Token(Token = "0x4001839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x600133D")]
		[Address(RVA = "0xFB6F60", Offset = "0xFB6F60", VA = "0xFB6F60")]
		public ArcadeSplashArtReference()
		{
		}
	}
	[Token(Token = "0x200042B")]
	public class BayTekBadWordFilterData
	{
		[Token(Token = "0x400183A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<string> bayTekBadWords;

		[Token(Token = "0x600133E")]
		[Address(RVA = "0xFB6F68", Offset = "0xFB6F68", VA = "0xFB6F68")]
		public BayTekBadWordFilterData()
		{
		}
	}
	[Token(Token = "0x200042C")]
	public class BayTekBadWordFilterHandler : ITickable
	{
		[Token(Token = "0x400183B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BayTekBadWordFilterData bayTekBadWordFilterData;

		[Token(Token = "0x400183C")]
		private const string BadWordsDirectory = "BayTekSettings";

		[Token(Token = "0x400183D")]
		private const string BadWordsFile = "BadWords.txt";

		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string badWordsDirectoryPath;

		[Token(Token = "0x600133F")]
		[Address(RVA = "0xFB6FE4", Offset = "0xFB6FE4", VA = "0xFB6FE4")]
		public BayTekBadWordFilterHandler(BayTekBadWordFilterData bayTekBadWordFilterData)
		{
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0xFB7048", Offset = "0xFB7048", VA = "0xFB7048")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0xFB719C", Offset = "0xFB719C", VA = "0xFB719C")]
		private void LoadFromFile()
		{
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0xFB7348", Offset = "0xFB7348", VA = "0xFB7348")]
		public void WriteToFile()
		{
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0xFB7404", Offset = "0xFB7404", VA = "0xFB7404")]
		private void LoadFile(string filePath)
		{
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0xFB747C", Offset = "0xFB747C", VA = "0xFB747C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0xFB7060", Offset = "0xFB7060", VA = "0xFB7060")]
		private void CreateSettingsDirectory()
		{
		}
	}
	[Token(Token = "0x200042D")]
	[CreateAssetMenu(fileName = "BayTekBannerSettings", menuName = "Settings/BayTek/BayTekBannerSettings")]
	public class BayTekBannerSettings : ScriptableObject
	{
		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BayTekBannerItem[] bayTekBannerItems;

		[Token(Token = "0x6001346")]
		[Address(RVA = "0xFB74CC", Offset = "0xFB74CC", VA = "0xFB74CC")]
		public BayTekBannerSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200042E")]
	public class BayTekBannerItem
	{
		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string id;

		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Sprite bannerSprite;

		[Token(Token = "0x6001347")]
		[Address(RVA = "0xFB74D4", Offset = "0xFB74D4", VA = "0xFB74D4")]
		public BayTekBannerItem()
		{
		}
	}
	[Token(Token = "0x200042F")]
	public class BayTekCharacterChoiceViewHandler : ITickable
	{
		[Token(Token = "0x4001842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BayTekCharacterChoiceViewReference characterChoiceViewReference;

		[Token(Token = "0x4001843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BayTekSettings bayTekSettings;

		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CharacterViewData characterViewData;

		[Token(Token = "0x4001847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly CharacterSettings characterSettings;

		[Token(Token = "0x4001848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x4001849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ItemGridViewHandlerData itemGridViewHandlerData;

		[Token(Token = "0x400184A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly CharacterData characterData;

		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x400184C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x400184D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly Camera headCamera;

		[Token(Token = "0x400184E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool showingCharacterChoiceView;

		[Token(Token = "0x400184F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly List<Item> filteredCharacterList;

		[Token(Token = "0x4001850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly List<Item> charactersToShowInList;

		[Token(Token = "0x4001851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly List<ItemIconReference> availableIcons;

		[Token(Token = "0x4001852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly string[] itemLookup;

		[Token(Token = "0x4001853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly Dictionary<string, int> itemIdToIconId;

		[Token(Token = "0x4001854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly int[] numItemsInGroup;

		[Token(Token = "0x4001855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private ItemGridReference itemGridReference;

		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int selectedIndex;

		[Token(Token = "0x4001857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool isViewInCustomizationMode;

		[Token(Token = "0x4001858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly List<CharacterItem> characterItems;

		[Token(Token = "0x4001859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int defaultCharacterIndex;

		[Token(Token = "0x400185A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly List<int> skinIndexList;

		[Token(Token = "0x400185B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly List<int> filteredSkinIndexList;

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly ProfilerMarker bayTekCharacterChoiceViewProfileMarker;

		[Token(Token = "0x6001348")]
		[Address(RVA = "0xFB74DC", Offset = "0xFB74DC", VA = "0xFB74DC")]
		public BayTekCharacterChoiceViewHandler(BayTekSettings bayTekSettings, BayTekData bayTekData, CustomizationData customizationData, ItemGridViewHandlerData itemGridViewHandlerData, MenuStateData menuStateData, CharacterViewData characterViewData, CharacterSettings characterSettings, CharacterData characterData, IgnisSoundTriggerData ignisSoundTriggerData, IRoomTimeProvider roomTimeProvider, Camera headCamera)
		{
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0xFB7C28", Offset = "0xFB7C28", VA = "0xFB7C28")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0xFB819C", Offset = "0xFB819C", VA = "0xFB819C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0xFB8BC0", Offset = "0xFB8BC0", VA = "0xFB8BC0")]
		public void CustomizationViewMode(bool isCustomizationView)
		{
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0xFB7F90", Offset = "0xFB7F90", VA = "0xFB7F90")]
		private void SetActive(bool active)
		{
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0xFB7FF4", Offset = "0xFB7FF4", VA = "0xFB7FF4")]
		private void SetIcons(List<Item> selections, int offset)
		{
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0xFB8C5C", Offset = "0xFB8C5C", VA = "0xFB8C5C")]
		private void UpdateIconReference(ItemIconReference icon, Item item, ItemOwnership ownership)
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0xFB89BC", Offset = "0xFB89BC", VA = "0xFB89BC")]
		private void UpdateCharacterList()
		{
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0xFB8D24", Offset = "0xFB8D24", VA = "0xFB8D24")]
		private void SelectCharacter()
		{
		}
	}
	[Token(Token = "0x2000430")]
	public class BayTekCharacterChoiceViewReference : CustomizationViewReference
	{
		[Token(Token = "0x400185D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject selectedCharacter;

		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Image selectedCharacterImage;

		[Token(Token = "0x400185F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Button selectCharacter;

		[Token(Token = "0x4001860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TextMeshProUGUI characterName;

		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public TextMeshProUGUI characterDescription;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Image factionLogo;

		[Token(Token = "0x6001352")]
		[Address(RVA = "0xFB8E20", Offset = "0xFB8E20", VA = "0xFB8E20")]
		public BayTekCharacterChoiceViewReference()
		{
		}
	}
	[Token(Token = "0x2000431")]
	public class BayTekDifficultyChoiceViewHandler : ITickable
	{
		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BayTekDifficultyChoiceViewReference difficultyChoiceViewReference;

		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BayTekSettings bayTekSettings;

		[Token(Token = "0x4001865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x4001866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4001867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4001868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Camera headCamera;

		[Token(Token = "0x4001869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool showingDifficultyChoiceView;

		[Token(Token = "0x400186A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ProfilerMarker bayTekDifficultyChoiceViewProfileMarker;

		[Token(Token = "0x6001353")]
		[Address(RVA = "0xFB8E28", Offset = "0xFB8E28", VA = "0xFB8E28")]
		public BayTekDifficultyChoiceViewHandler(BayTekSettings bayTekSettings, BayTekData bayTekData, IgnisSoundTriggerData ignisSoundTriggerData, IRoomTimeProvider roomTimeProvider, Camera headCamera)
		{
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0xFB8EC8", Offset = "0xFB8EC8", VA = "0xFB8EC8")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0xFB90EC", Offset = "0xFB90EC", VA = "0xFB90EC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0xFB92C8", Offset = "0xFB92C8", VA = "0xFB92C8")]
		private void SelectDifficulty(BayTekDifficulty difficulty)
		{
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0xFB9088", Offset = "0xFB9088", VA = "0xFB9088")]
		private void SetActive(bool active)
		{
		}
	}
	[Token(Token = "0x2000432")]
	public class BayTekDifficultyChoiceViewReference : MonoBehaviour
	{
		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button easyDifficulty;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button mediumDifficulty;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button hardDifficulty;

		[Token(Token = "0x600135B")]
		[Address(RVA = "0xFB9398", Offset = "0xFB9398", VA = "0xFB9398")]
		public BayTekDifficultyChoiceViewReference()
		{
		}
	}
	[Token(Token = "0x2000433")]
	public class BayTekDuelScoreSummaryReference : MonoBehaviour
	{
		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI duelNumber;

		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image playerCharacterImage;

		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Image opponentCharacterImage;

		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI opponentCharacterNameText;

		[Token(Token = "0x4001874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Image playerRound1WinPip;

		[Token(Token = "0x4001875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Image playerRound1LossPip;

		[Token(Token = "0x4001876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Image playerRound2WinPip;

		[Token(Token = "0x4001877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Image playerRound2LossPip;

		[Token(Token = "0x4001878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Image opponentRound1WinPip;

		[Token(Token = "0x4001879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Image opponentRound1LossPip;

		[Token(Token = "0x400187A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Image opponentRound2WinPip;

		[Token(Token = "0x400187B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Image opponentRound2LossPip;

		[Token(Token = "0x400187C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<BayTekRoundScoreSummaryReference> roundScoringSummaries;

		[Token(Token = "0x400187D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TextMeshProUGUI chosenDifficulty;

		[Token(Token = "0x400187E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TextMeshProUGUI difficultyBonus;

		[Token(Token = "0x400187F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public TextMeshProUGUI duelScore;

		[Token(Token = "0x600135C")]
		[Address(RVA = "0xFB93A0", Offset = "0xFB93A0", VA = "0xFB93A0")]
		public BayTekDuelScoreSummaryReference()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000434")]
	public class BayTekExternalClientData
	{
		[Token(Token = "0x4001880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<LeaderBoardRecord> leaderboardRecords;

		[Token(Token = "0x4001881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string lastExited;

		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Queue<BayTekSaveExternalClientDataRequest> saveExternalClientDataRequests;

		[Token(Token = "0x600135D")]
		[Address(RVA = "0xFB93A8", Offset = "0xFB93A8", VA = "0xFB93A8")]
		public BayTekExternalClientData()
		{
		}
	}
	[Token(Token = "0x2000435")]
	public struct BayTekSaveExternalClientDataRequest
	{
	}
	[Token(Token = "0x2000436")]
	public class BayTekExternalClientHandler : ITickable
	{
		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BayTekSettings bayTekSettings;

		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BayTekExternalClientData bayTekExternalClientData;

		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly LeaderBoardData leaderBoardData;

		[Token(Token = "0x4001886")]
		private const string Settingsdirectory = "BayTekSettings";

		[Token(Token = "0x4001887")]
		private const string Settingsfile = "Settings.txt";

		[Token(Token = "0x4001888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string settingsDirectoryPath;

		[Token(Token = "0x4001889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ProfilerMarker bayTekExternalClientMarker;

		[Token(Token = "0x600135E")]
		[Address(RVA = "0xFB946C", Offset = "0xFB946C", VA = "0xFB946C")]
		public BayTekExternalClientHandler(BayTekSettings bayTekSettings, BayTekExternalClientData bayTekExternalClientData, LeaderBoardData leaderBoardData)
		{
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0xFB9514", Offset = "0xFB9514", VA = "0xFB9514")]
		public BayTekExternalClientData LoadExternalClientData()
		{
			return null;
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0xFB9670", Offset = "0xFB9670", VA = "0xFB9670")]
		private void LoadFromFile()
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0xFB981C", Offset = "0xFB981C", VA = "0xFB981C")]
		public void WriteToFile()
		{
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0xFB98D8", Offset = "0xFB98D8", VA = "0xFB98D8")]
		private void LoadFile(string filePath)
		{
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0xFB9AB8", Offset = "0xFB9AB8", VA = "0xFB9AB8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0xFB9534", Offset = "0xFB9534", VA = "0xFB9534")]
		private void CreateSettingsDirectory()
		{
		}
	}
	[Token(Token = "0x2000437")]
	public class BayTekHandler : ITickable
	{
		[Token(Token = "0x400188A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BayTekSettings bayTekSettings;

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x400188C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x400188D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ArcadeLeaderboardData arcadeLeaderboardData;

		[Token(Token = "0x400188E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly BayTekMatchLoopData bayTekMatchLoopData;

		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly LoginData loginData;

		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly DebugData debugData;

		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ArenaGameStateSettings arenaGameStateSettings;

		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly DeckSpawnSettings globalDeckSpawnSettings;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly SoundTriggersList soundTriggersList;

		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ArenaSpecificSettings savedArenaSpecifcSettings;

		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ToolSpawnSettings savedToolSpawnSettings;

		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameplayRulesSoundEvents savedGameplayRulesSoundEvents;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly ProfilerMarker bayTekProfileMarker;

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xFB9BA0", Offset = "0xFB9BA0", VA = "0xFB9BA0")]
		public BayTekHandler(BayTekSettings bayTekSettings, LoginData loginData, BayTekData bayTekData, BayTekMatchLoopData bayTekMatchLoopData, ArcadeData arcadeData, ArcadeLeaderboardData arcadeLeaderboardData, EntryPoint.EntryPointData entryPointData, DebugData debugData, ArenaGameStateSettings arenaGameStateSettings, DeckSpawnSettings globalDeckSpawnSettings, SoundTriggersList soundTriggersList)
		{
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0xFB9C7C", Offset = "0xFB9C7C", VA = "0xFB9C7C")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xFB9D40", Offset = "0xFB9D40", VA = "0xFB9D40")]
		public void SetupDebug(DebugMenu debugMenu)
		{
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0xFB9D44", Offset = "0xFB9D44", VA = "0xFB9D44", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0xFB9E88", Offset = "0xFB9E88", VA = "0xFB9E88")]
		private void ChangeState(BayTekState newState)
		{
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0xFB9F64", Offset = "0xFB9F64", VA = "0xFB9F64")]
		public void OnDestroy()
		{
		}
	}
	[Token(Token = "0x2000438")]
	public class BayTekData
	{
		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool active;

		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public BayTekState state;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float stateTimestamp;

		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool hasSetName;

		[Token(Token = "0x400189D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Queue<BayTekTimeoutRequest> timeoutRequests;

		[Token(Token = "0x400189E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float timeOutTimer;

		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool difficultyChosen;

		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BayTekDifficulty chosenDifficulty;

		[Token(Token = "0x40018A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool loadoutChosen;

		[Token(Token = "0x40018A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BayTekLoadoutType chosenLoadout;

		[Token(Token = "0x40018A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Dictionary<BayTekLoadoutType, BayTekLoadout> loadoutLookup;

		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CharacterItem chosenCharacterItem;

		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool opponentAnnouncementDone;

		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool requestMatch;

		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool characterChosen;

		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool doneWithScoreSummary;

		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool requestQuit;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BayTekVoiceLineEvents voiceLineEvents;

		[Token(Token = "0x600136B")]
		[Address(RVA = "0xFB9FB4", Offset = "0xFB9FB4", VA = "0xFB9FB4")]
		public BayTekData()
		{
		}
	}
	[Token(Token = "0x2000439")]
	public struct BayTekTimeoutRequest
	{
	}
	[Token(Token = "0x200043A")]
	public enum BayTekState
	{
		[Token(Token = "0x40018AC")]
		Dormant,
		[Token(Token = "0x40018AD")]
		Started,
		[Token(Token = "0x40018AE")]
		Tutorial,
		[Token(Token = "0x40018AF")]
		DifficultyChoice,
		[Token(Token = "0x40018B0")]
		LoadoutChoice,
		[Token(Token = "0x40018B1")]
		CharacterChoice,
		[Token(Token = "0x40018B2")]
		Gameplay,
		[Token(Token = "0x40018B3")]
		ScoreSummary,
		[Token(Token = "0x40018B4")]
		ConfirmingLeaderboardEligibility,
		[Token(Token = "0x40018B5")]
		NameEntry,
		[Token(Token = "0x40018B6")]
		Leaderboard,
		[Token(Token = "0x40018B7")]
		Quit
	}
	[Token(Token = "0x200043B")]
	public enum BayTekLoadoutType
	{
		[Token(Token = "0x40018B9")]
		NotSelected,
		[Token(Token = "0x40018BA")]
		Fierce,
		[Token(Token = "0x40018BB")]
		Skillshot,
		[Token(Token = "0x40018BC")]
		Tempo,
		[Token(Token = "0x40018BD")]
		Random
	}
	[Serializable]
	[Token(Token = "0x200043C")]
	public class BayTekLoadout
	{
		[Token(Token = "0x40018BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40018BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BayTekLoadoutType loadoutType;

		[Token(Token = "0x40018C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<ToolSet> loadout;

		[Token(Token = "0x40018C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int overallDamage;

		[Token(Token = "0x40018C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string descriptionLocaleTag;

		[Token(Token = "0x600136C")]
		[Address(RVA = "0xFBA07C", Offset = "0xFBA07C", VA = "0xFBA07C")]
		public BayTekLoadout()
		{
		}
	}
	[Token(Token = "0x200043D")]
	public enum BayTekDifficulty
	{
		[Token(Token = "0x40018C4")]
		Easy,
		[Token(Token = "0x40018C5")]
		Medium,
		[Token(Token = "0x40018C6")]
		Hard
	}
	[Serializable]
	[Token(Token = "0x200043E")]
	public class BayTekDifficultyTier
	{
		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40018C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<BotSettings> bots;

		[Token(Token = "0x600136D")]
		[Address(RVA = "0xFBA084", Offset = "0xFBA084", VA = "0xFBA084")]
		public BayTekDifficultyTier()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200043F")]
	public class BayTekDifficultySetting
	{
		[Token(Token = "0x40018C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40018CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BayTekDifficulty difficulty;

		[Token(Token = "0x40018CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BayTekDifficultyTier[] tiers;

		[Token(Token = "0x600136E")]
		[Address(RVA = "0xFBA104", Offset = "0xFBA104", VA = "0xFBA104")]
		public BayTekDifficultySetting()
		{
		}
	}
	[Token(Token = "0x2000440")]
	public class BayTekHandBuffer
	{
		[Token(Token = "0x40018CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VectorCircularBuffer handMovementBuffer;

		[Token(Token = "0x40018CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VectorCircularBuffer handAngularVelocityBuffer;

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xFBA10C", Offset = "0xFBA10C", VA = "0xFBA10C")]
		public BayTekHandBuffer()
		{
		}
	}
	[Token(Token = "0x2000441")]
	public class BayTekInputHandler : IInputHandler, ITickable
	{
		[Token(Token = "0x40018CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly InputData inputData;

		[Token(Token = "0x40018CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly SteamVrPlatformSettings settings;

		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BayTekHandBuffer leftHandBuffer;

		[Token(Token = "0x40018D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BayTekHandBuffer rightHandBuffer;

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xFBA114", Offset = "0xFBA114", VA = "0xFBA114")]
		public BayTekInputHandler(InputData inputData, SteamVrPlatformSettings settings)
		{
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0xFBA1B0", Offset = "0xFBA1B0", VA = "0xFBA1B0", Slot = "4")]
		public void Setup()
		{
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0xFBA65C", Offset = "0xFBA65C", VA = "0xFBA65C", Slot = "8")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0xFBA660", Offset = "0xFBA660", VA = "0xFBA660", Slot = "5")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0xFBA664", Offset = "0xFBA664", VA = "0xFBA664", Slot = "6")]
		public void AttachLocalPlayerToCamera(PlayerReferences localPlayerReferences, Camera headCamera)
		{
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0xFBA668", Offset = "0xFBA668", VA = "0xFBA668", Slot = "7")]
		public void DetachLocalPlayerFromCamera(PlayerReferences localPlayerReferences, Camera headCamera, Transform playerMenuOrigin)
		{
		}
	}
	[Token(Token = "0x2000442")]
	public class BayTekHapticFacade : IHapticFacade
	{
		[Token(Token = "0x6001376")]
		[Address(RVA = "0xFBA66C", Offset = "0xFBA66C", VA = "0xFBA66C", Slot = "4")]
		public void StartHaptic(HapticEffect effect)
		{
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0xFBA670", Offset = "0xFBA670", VA = "0xFBA670", Slot = "5")]
		public void StopHaptic(ControllerHand hand)
		{
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0xFBA674", Offset = "0xFBA674", VA = "0xFBA674")]
		public BayTekHapticFacade()
		{
		}
	}
	[Token(Token = "0x2000443")]
	public class BayTekKeyboardViewHandler : ITickable
	{
		[Token(Token = "0x40018D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x40018D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly LoginData loginData;

		[Token(Token = "0x40018D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly VrKeyboardData vrKeyboardData;

		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CameraFadeData cameraFadeData;

		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ArcadeLeaderboardData arcadeLeaderboardData;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly BayTekMatchLoopData bayTekMatchLoopData;

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly BayTekBadWordFilterData bayTekBadWordFilterData;

		[Token(Token = "0x40018DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly KeyboardControllerData keyboardControllerData;

		[Token(Token = "0x40018DB")]
		private const int MaxDisplayNameCount = 16;

		[Token(Token = "0x40018DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool showingKeyboard;

		[Token(Token = "0x40018DD")]
		private const string defaultName = "BLASTON";

		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly ProfilerMarker bayTekKeyboardViewProfileMarker;

		[Token(Token = "0x6001379")]
		[Address(RVA = "0xFBA67C", Offset = "0xFBA67C", VA = "0xFBA67C")]
		public BayTekKeyboardViewHandler(BayTekData bayTekData, LoginData loginData, VrKeyboardData vrKeyboardData, EntryPoint.EntryPointData entryPointData, CameraFadeData cameraFadeData, ArcadeLeaderboardData arcadeLeaderboardData, BayTekMatchLoopData bayTekMatchLoopData, BayTekBadWordFilterData bayTekBadWordFilterData)
		{
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0xFBA768", Offset = "0xFBA768", VA = "0xFBA768", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0xFBA86C", Offset = "0xFBA86C", VA = "0xFBA86C")]
		private void ShowEnterLeaderboardName()
		{
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0xFBABD4", Offset = "0xFBABD4", VA = "0xFBABD4")]
		private void CancelEnterLeaderboard()
		{
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0xFBAA10", Offset = "0xFBAA10", VA = "0xFBAA10")]
		private void ChangeDisplayName(string newDisplayName)
		{
		}
	}
	[Token(Token = "0x2000444")]
	public class BayTekLeaderboardViewHandler : ITickable
	{
		[Token(Token = "0x40018DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private LeaderBoardViewReference leaderBoardViewReference;

		[Token(Token = "0x40018E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly LeaderBoardData leaderBoardData;

		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x40018E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly InteractionSettings interactionSettings;

		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly BayTekSettings bayTekSettings;

		[Token(Token = "0x40018E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly Camera headCamera;

		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool showingLeaderBoard;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int entryCount;

		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly ProfilerMarker baytekLeaderboardViewProfileMarker;

		[Token(Token = "0x600137E")]
		[Address(RVA = "0xFBAC1C", Offset = "0xFBAC1C", VA = "0xFBAC1C")]
		public BayTekLeaderboardViewHandler(BayTekSettings bayTekSettings, BayTekData bayTekData, LeaderBoardData leaderBoardData, InteractionSettings interactionSettings, IgnisSoundTriggerData ignisSoundTriggerData, IRoomTimeProvider roomTimeProvider, Camera headCamera)
		{
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0xFBACD0", Offset = "0xFBACD0", VA = "0xFBACD0")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0xFBB224", Offset = "0xFBB224", VA = "0xFBB224", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0xFBB094", Offset = "0xFBB094", VA = "0xFBB094")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0xFBAE24", Offset = "0xFBAE24", VA = "0xFBAE24")]
		private void UpdateNamesAndValuesOnLeaderboard(List<LeaderBoardRowReference> leaderBoardReference, List<LeaderBoardRecord> records)
		{
		}
	}
	[Token(Token = "0x2000445")]
	public class BayTekLoadoutButtonReference : MonoBehaviour
	{
		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x40018EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button button;

		[Token(Token = "0x40018EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI loadoutName;

		[Token(Token = "0x6001383")]
		[Address(RVA = "0xFBB430", Offset = "0xFBB430", VA = "0xFBB430")]
		public BayTekLoadoutButtonReference()
		{
		}
	}
	[Token(Token = "0x2000446")]
	public class BayTekLoadoutChoiceViewHandler : ITickable
	{
		[Token(Token = "0x40018ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BayTekLoadoutChoiceViewReference loadoutChoiceViewReference;

		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BayTekSettings bayTekSettings;

		[Token(Token = "0x40018EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly DeckData deckData;

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ToolSkinViewData toolSkinViewData;

		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x40018F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x40018F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly Camera headCamera;

		[Token(Token = "0x40018F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool showingLoadoutChoiceView;

		[Token(Token = "0x40018F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool loadoutExceptions;

		[Token(Token = "0x40018F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly Dictionary<ToolName, ToolSetting> toolSettings;

		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly ToolIconSettings toolIconSettings;

		[Token(Token = "0x40018FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private BayTekLoadoutType selectedLoadout;

		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly ProfilerMarker bayTekLoadoutChoiceViewProfileMarker;

		[Token(Token = "0x6001384")]
		[Address(RVA = "0xFBB438", Offset = "0xFBB438", VA = "0xFBB438")]
		public BayTekLoadoutChoiceViewHandler(BayTekSettings bayTekSettings, BayTekData bayTekData, DeckData deckData, CustomizationData customizationData, ToolSkinViewData toolSkinViewData, Dictionary<ToolName, ToolSetting> toolSettings, ToolIconSettings toolIconSettings, IgnisSoundTriggerData ignisSoundTriggerData, IRoomTimeProvider roomTimeProvider, Camera headCamera)
		{
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0xFBB50C", Offset = "0xFBB50C", VA = "0xFBB50C")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0xFBBC8C", Offset = "0xFBBC8C", VA = "0xFBBC8C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0xFBC440", Offset = "0xFBC440", VA = "0xFBC440")]
		private void DisplayLoadout(BayTekLoadoutType loadoutType)
		{
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0xFBC95C", Offset = "0xFBC95C", VA = "0xFBC95C")]
		private void UpdateDeckViewIcons(BayTekLoadout chosenLoadout)
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0xFBBFE4", Offset = "0xFBBFE4", VA = "0xFBBFE4")]
		private void SelectLoadout(BayTekLoadoutType loadoutType)
		{
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0xFBBE78", Offset = "0xFBBE78", VA = "0xFBBE78")]
		private void SetActive(bool active)
		{
		}
	}
	[Token(Token = "0x2000448")]
	public class BayTekLoadoutChoiceViewReference : MonoBehaviour
	{
		[Token(Token = "0x40018FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BayTekLoadoutButtonReference[] loadoutButtons;

		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DeckViewReference selectedLoadoutViewReference;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI selectedLoadoutTitle;

		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI averageSpawnTime;

		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject averageSpawnTimeSeconds;

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshProUGUI overallDamage;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject centrePanel;

		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject rightPanel;

		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TextMeshProUGUI selectedLoadoutDescription;

		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Button selectLoadoutButton;

		[Token(Token = "0x600138E")]
		[Address(RVA = "0xFBCC2C", Offset = "0xFBCC2C", VA = "0xFBCC2C")]
		public BayTekLoadoutChoiceViewReference()
		{
		}
	}
	[Token(Token = "0x2000449")]
	public class BayTekMatchHandler : ITickable
	{
		[Token(Token = "0x4001909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BayTekSettings bayTekSettings;

		[Token(Token = "0x400190A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AiData aiData;

		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly GameData gameData;

		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly BayTekMatchLoopData bayTekMatchLoopData;

		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly CharacterSettings characterSettings;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly ArcadeLeaderboardData arcadeLeaderboardData;

		[Token(Token = "0x4001914")]
		private const int PLAYER_START_HEALTH = 100;

		[Token(Token = "0x4001915")]
		private const int ROUND_DURATION = 120;

		[Token(Token = "0x4001916")]
		private const int STAGE_MULTIPLIER = 150;

		[Token(Token = "0x4001917")]
		private const int TIME_DIVISOR = 5;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly ProfilerMarker bayTekBattleProfilerMarker;

		[Token(Token = "0x600138F")]
		[Address(RVA = "0xFBCC34", Offset = "0xFBCC34", VA = "0xFBCC34")]
		public BayTekMatchHandler(BayTekSettings bayTekSettings, AiData aiData, GameData gameData, LockerRoomGameStateData lockerRoomGameStateData, BayTekData bayTekData, BayTekMatchLoopData bayTekMatchLoopData, MatchHandlerData matchHandlerData, ArenaGameStateData arenaGameStateData, CharacterSettings characterSettings, DamageRecordKeeper damageRecordKeeper, ArcadeLeaderboardData arcadeLeaderboardData)
		{
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0xFBCD18", Offset = "0xFBCD18", VA = "0xFBCD18", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0xFBCF38", Offset = "0xFBCF38", VA = "0xFBCF38")]
		public void OnRoundEnd(EndArenaRoundMessage m)
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0xFBCD4C", Offset = "0xFBCD4C", VA = "0xFBCD4C")]
		private void StartDuel()
		{
		}
	}
	[Token(Token = "0x200044A")]
	public class BayTekMatchScoreData
	{
		[Token(Token = "0x4001919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int match;

		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BotSettings opponent;

		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int difficultyBonus;

		[Token(Token = "0x400191C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<BayTekRoundScoreData> rounds;

		[Token(Token = "0x6001393")]
		[Address(RVA = "0xFBD510", Offset = "0xFBD510", VA = "0xFBD510")]
		public BayTekMatchScoreData(int match, BotSettings opponent, int difficultyBonus)
		{
		}
	}
	[Token(Token = "0x200044B")]
	public class BayTekRoundScoreData
	{
		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int round;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool playerWon;

		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int roundScore;

		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float healthBonus;

		[Token(Token = "0x4001921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float timeBonus;

		[Token(Token = "0x6001394")]
		[Address(RVA = "0xFBD5B8", Offset = "0xFBD5B8", VA = "0xFBD5B8")]
		public BayTekRoundScoreData(int round, bool playerWon, int roundScore, float healthDifference, float timeRemaining)
		{
		}
	}
	[Token(Token = "0x200044C")]
	public class BayTekMatchLoopHandler : ITickable
	{
		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BayTekSettings bayTekSettings;

		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BayTekMatchLoopData bayTekMatchLoopData;

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4001927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ArcadeLeaderboardData arcadeLeaderboardData;

		[Token(Token = "0x4001928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool difficultyTiersSetUp;

		[Token(Token = "0x4001929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly Dictionary<int, BayTekDifficultyTier> difficultyTierLookup;

		[Token(Token = "0x400192A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly Dictionary<int, BayTekDifficultyTier> tierBotsAlreadyUsed;

		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly ProfilerMarker bayTekMatchLoopProfileMarker;

		[Token(Token = "0x6001395")]
		[Address(RVA = "0xFBD60C", Offset = "0xFBD60C", VA = "0xFBD60C")]
		public BayTekMatchLoopHandler(BayTekSettings bayTekSettings, BayTekData bayTekData, BayTekMatchLoopData bayTekMatchLoopData, MatchHandlerData matchHandlerData, ArenaGameStateData arenaGameStateData, ArcadeLeaderboardData arcadeLeaderboardData)
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0xFBD71C", Offset = "0xFBD71C", VA = "0xFBD71C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0xFBDEBC", Offset = "0xFBDEBC", VA = "0xFBDEBC")]
		private void ChangeState(BayTekMatchLoopState newState)
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0xFBD900", Offset = "0xFBD900", VA = "0xFBD900")]
		private void SetUpDifficulty()
		{
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xFBDC38", Offset = "0xFBDC38", VA = "0xFBDC38")]
		private BotSettings ChooseBot()
		{
			return null;
		}
	}
	[Token(Token = "0x200044D")]
	public class BayTekMatchLoopData
	{
		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BayTekMatchLoopState state;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float stateTimestamp;

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int amountOfWins;

		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int currentTier;

		[Token(Token = "0x4001930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int amountOfMatches;

		[Token(Token = "0x4001931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int sessionScore;

		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BotSettings nextOpponent;

		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<BayTekMatchScoreData> matchScores;

		[Token(Token = "0x600139A")]
		[Address(RVA = "0xFBDF98", Offset = "0xFBDF98", VA = "0xFBDF98")]
		public BayTekMatchLoopData()
		{
		}
	}
	[Token(Token = "0x200044E")]
	public enum BayTekMatchLoopState
	{
		[Token(Token = "0x4001935")]
		OpponentSelection,
		[Token(Token = "0x4001936")]
		OpponentAnnouncement,
		[Token(Token = "0x4001937")]
		Gameplay,
		[Token(Token = "0x4001938")]
		MatchEnded,
		[Token(Token = "0x4001939")]
		LeavingMatch,
		[Token(Token = "0x400193A")]
		Inactive
	}
	[Token(Token = "0x200044F")]
	public class BayTekOpponentAnnouncementViewHandler : ITickable
	{
		[Token(Token = "0x400193B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BayTekOpponentAnnouncementViewReference opponentAnnouncementViewReference;

		[Token(Token = "0x400193C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BayTekSettings bayTekSettings;

		[Token(Token = "0x400193D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x400193E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly BayTekMatchLoopData bayTekMatchLoopData;

		[Token(Token = "0x400193F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CharacterSettings characterSettings;

		[Token(Token = "0x4001940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x4001941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4001942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4001943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4001944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly Dictionary<ToolName, ToolSetting> toolSettings;

		[Token(Token = "0x4001945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly ToolIconSettings toolIconSettings;

		[Token(Token = "0x4001946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4001947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4001948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly Camera headCamera;

		[Token(Token = "0x4001949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool showingOpponentAnnouncementView;

		[Token(Token = "0x400194A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly ProfilerMarker bayTekOpponentAnnouncementViewProfileMarker;

		[Token(Token = "0x600139B")]
		[Address(RVA = "0xFBE01C", Offset = "0xFBE01C", VA = "0xFBE01C")]
		public BayTekOpponentAnnouncementViewHandler(BayTekSettings bayTekSettings, BayTekData bayTekData, BayTekMatchLoopData bayTekMatchLoopData, EntryPoint.EntryPointData entryPointData, ArenaGameStateData arenaGameStateData, CharacterSettings characterSettings, CustomizationData customizationData, Dictionary<ToolName, ToolSetting> toolSettings, ToolIconSettings toolIconSettings, IgnisSoundTriggerData ignisSoundTriggerData, IRoomTimeProvider roomTimeProvider, MenuStateData menuStateData, Camera headCamera)
		{
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0xFBE104", Offset = "0xFBE104", VA = "0xFBE104")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0xFBE270", Offset = "0xFBE270", VA = "0xFBE270", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0xFBE490", Offset = "0xFBE490", VA = "0xFBE490")]
		private void UpdateOpponentAnnouncementView()
		{
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0xFBE8A8", Offset = "0xFBE8A8", VA = "0xFBE8A8")]
		private void UpdateDeckViewIcons(List<ToolSet> chosenLoadout)
		{
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0xFBE884", Offset = "0xFBE884", VA = "0xFBE884")]
		private void OpponentAnnouncementDone()
		{
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0xFBE20C", Offset = "0xFBE20C", VA = "0xFBE20C")]
		private void SetActive(bool active)
		{
		}
	}
	[Token(Token = "0x2000450")]
	public class BayTekOpponentAnnouncementViewReference : MonoBehaviour
	{
		[Token(Token = "0x400194B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x400194C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI opponentDescription;

		[Token(Token = "0x400194D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image opponentImage;

		[Token(Token = "0x400194E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI opponentName;

		[Token(Token = "0x400194F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DeckViewReference opponentLoadoutReference;

		[Token(Token = "0x4001950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Button continueButton;

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0xFBEB28", Offset = "0xFBEB28", VA = "0xFBEB28")]
		public BayTekOpponentAnnouncementViewReference()
		{
		}
	}
	[Token(Token = "0x2000451")]
	public class BayTekRoundScoreSummaryReference : MonoBehaviour
	{
		[Token(Token = "0x4001951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI roundNumber;

		[Token(Token = "0x4001952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI timeBonus;

		[Token(Token = "0x4001953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI healthBonus;

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0xFBEB30", Offset = "0xFBEB30", VA = "0xFBEB30")]
		public BayTekRoundScoreSummaryReference()
		{
		}
	}
	[Token(Token = "0x2000452")]
	public class BayTekScoreSummaryViewHandler : ITickable
	{
		[Token(Token = "0x4001954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BayTekScoreSummaryViewReference scoreSummaryReference;

		[Token(Token = "0x4001955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BayTekSettings bayTekSettings;

		[Token(Token = "0x4001956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x4001957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly BayTekMatchLoopData bayTekMatchLoopData;

		[Token(Token = "0x4001958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CharacterSettings characterSettings;

		[Token(Token = "0x4001959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x400195A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x400195B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x400195C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x400195D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly Camera headCamera;

		[Token(Token = "0x400195E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool showingScoreSummaryView;

		[Token(Token = "0x400195F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly ProfilerMarker bayTekScoreSummaryViewProfileMarker;

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0xFBEB38", Offset = "0xFBEB38", VA = "0xFBEB38")]
		public BayTekScoreSummaryViewHandler(BayTekSettings bayTekSettings, BayTekData bayTekData, BayTekMatchLoopData bayTekMatchLoopData, CharacterSettings characterSettings, CustomizationData customizationData, MenuStateData menuStateData, IgnisSoundTriggerData ignisSoundTriggerData, IRoomTimeProvider roomTimeProvider, Camera headCamera)
		{
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0xFBEBFC", Offset = "0xFBEBFC", VA = "0xFBEBFC")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0xFBED68", Offset = "0xFBED68", VA = "0xFBED68", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0xFBF744", Offset = "0xFBF744", VA = "0xFBF744")]
		private void ScoreSummaryDone()
		{
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0xFBED04", Offset = "0xFBED04", VA = "0xFBED04")]
		private void SetActive(bool active)
		{
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0xFBF128", Offset = "0xFBF128", VA = "0xFBF128")]
		private void UpdateScoreSummaryReference()
		{
		}
	}
	[Token(Token = "0x2000453")]
	public class BayTekScoreSummaryViewReference : MonoBehaviour
	{
		[Token(Token = "0x4001960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4001961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<BayTekDuelScoreSummaryReference> duelScoreSummaryReferences;

		[Token(Token = "0x4001962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI finalScore;

		[Token(Token = "0x4001963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IgnisButton continueButton;

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xFBF768", Offset = "0xFBF768", VA = "0xFBF768")]
		public BayTekScoreSummaryViewReference()
		{
		}
	}
	[Token(Token = "0x2000454")]
	[CreateAssetMenu(menuName = "Settings/BayTek/BayTekSettings")]
	public class BayTekSettings : ScriptableObject
	{
		[Token(Token = "0x4001964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public BayTekDifficultyChoiceViewReference difficultyChoiceViewReference;

		[Token(Token = "0x4001965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BayTekLoadoutChoiceViewReference loadoutChoiceViewReference;

		[Token(Token = "0x4001966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ToolInformationReference bayTekToolInformationReference;

		[Token(Token = "0x4001967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BayTekCharacterChoiceViewReference characterChoiceViewReference;

		[Token(Token = "0x4001968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BayTekOpponentAnnouncementViewReference opponentAnnouncementViewReference;

		[Token(Token = "0x4001969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BayTekScoreSummaryViewReference scoringSummaryReference;

		[Token(Token = "0x400196A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LeaderBoardViewReference leaderBoardViewReference;

		[Token(Token = "0x400196B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Difficulty Choice")]
		public BayTekDifficulty defaultDifficulty;

		[Token(Token = "0x400196C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<BayTekDifficultySetting> difficultySettings;

		[Token(Token = "0x400196D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Allowed Lists")]
		public List<ToolSet> allowedWeapons;

		[Token(Token = "0x400196E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string[] allowedCharacters;

		[Token(Token = "0x400196F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Should be a character that is not allowed. Used to prevent characters from appearing with an equipped background")]
		public string equippedCharacter;

		[Token(Token = "0x4001970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Loadout Choice")]
		public List<BayTekLoadout> bayTekLoadouts;

		[Token(Token = "0x4001971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public BayTekLoadoutType defaultLoadoutType;

		[Token(Token = "0x4001972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Default character id")]
		[Header("Character Choice")]
		public string defaultCharacter;

		[Token(Token = "0x4001973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Matches")]
		public float totalMatchesToPlay;

		[Token(Token = "0x4001974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Header("Leaderboard")]
		[Tooltip("Time of the record in days")]
		public float recordLifeSpan;

		[Token(Token = "0x4001975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("Customization")]
		public CustomizationSettings customizationSettings;

		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Banner")]
		public BayTekBannerSettings bayTekBannerSettings;

		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Header("Gameplay Settings Override")]
		public ArenaSpecificSettings classicArenaSettings;

		[Token(Token = "0x4001978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public ToolSpawnSettings classicToolSpawnSettings;

		[Token(Token = "0x4001979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameplayRulesSoundEvents[] rulesBasedSoundEvents;

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xFBF770", Offset = "0xFBF770", VA = "0xFBF770")]
		public BayTekSettings()
		{
		}
	}
	[Token(Token = "0x2000455")]
	public class BayTekTimeoutHandler : ITickable
	{
		[Token(Token = "0x400197A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BayTekTimeoutSettings bayTekTimeoutSettings;

		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x400197C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BayTekMatchLoopData bayTekMatchLoopData;

		[Token(Token = "0x400197D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x400197E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ProfilerMarker bayTekTimeoutProfileMarker;

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xFBF780", Offset = "0xFBF780", VA = "0xFBF780")]
		public BayTekTimeoutHandler(BayTekTimeoutSettings bayTekTimeoutSettings, BayTekData bayTekData, BayTekMatchLoopData bayTekMatchLoopData, MatchHandlerData matchHandlerData)
		{
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0xFBF810", Offset = "0xFBF810", VA = "0xFBF810", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0xFBF8F0", Offset = "0xFBF8F0", VA = "0xFBF8F0")]
		private void CheckIfTimedOut(float choiceTimeoutTime)
		{
		}
	}
	[Token(Token = "0x2000456")]
	[CreateAssetMenu(menuName = "Settings/BayTek/BayTekTimeoutSettings")]
	public class BayTekTimeoutSettings : ScriptableObject
	{
		[Token(Token = "0x400197F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		public BayTekTimeoutViewReference timeoutViewReference;

		[Token(Token = "0x4001980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Timeout View")]
		[Tooltip("Show timeout warning when this time is left")]
		public float timeToShowWarning;

		[Token(Token = "0x4001981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Timeout Times (in seconds)")]
		public float tutorialTimeoutTime;

		[Token(Token = "0x4001982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float difficultyChoiceTimeoutTime;

		[Token(Token = "0x4001983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float loadoutChoiceTimeoutTime;

		[Token(Token = "0x4001984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float characterChoiceTimeoutTime;

		[Token(Token = "0x4001985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float opponentAnnouncementTimeoutTime;

		[Token(Token = "0x4001986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float matchEndedTimeoutTime;

		[Token(Token = "0x4001987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float nameEntryTimeoutTime;

		[Token(Token = "0x4001988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float scoreSummaryTimeoutTime;

		[Token(Token = "0x4001989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float leaderboardTimeoutTime;

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0xFBFA9C", Offset = "0xFBFA9C", VA = "0xFBFA9C")]
		public BayTekTimeoutSettings()
		{
		}
	}
	[Token(Token = "0x2000457")]
	public class BayTekTimeoutViewHandler : ITickable
	{
		[Token(Token = "0x400198A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BayTekTimeoutViewReference timeoutViewReference;

		[Token(Token = "0x400198B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BayTekTimeoutSettings bayTekTimeoutSettings;

		[Token(Token = "0x400198C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x400198D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly BayTekMatchLoopData bayTekMatchLoopData;

		[Token(Token = "0x400198E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timeLeft;

		[Token(Token = "0x400198F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool shouldShowView;

		[Token(Token = "0x4001990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool referenceActive;

		[Token(Token = "0x4001991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ProfilerMarker bayTekTimeoutViewProfileMarker;

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0xFBFAA4", Offset = "0xFBFAA4", VA = "0xFBFAA4")]
		public BayTekTimeoutViewHandler(BayTekTimeoutSettings bayTekTimeoutSettings, BayTekData bayTekData, BayTekMatchLoopData bayTekMatchLoopData)
		{
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0xFBFB30", Offset = "0xFBFB30", VA = "0xFBFB30")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0xFBFCE8", Offset = "0xFBFCE8", VA = "0xFBFCE8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0xFBFBCC", Offset = "0xFBFBCC", VA = "0xFBFBCC")]
		private void SetActive(bool active)
		{
		}
	}
	[Token(Token = "0x2000458")]
	public class BayTekTimeoutViewReference : MonoBehaviour
	{
		[Token(Token = "0x4001992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4001993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI timer;

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0xFBFF28", Offset = "0xFBFF28", VA = "0xFBFF28")]
		public BayTekTimeoutViewReference()
		{
		}
	}
	[Token(Token = "0x2000459")]
	public class BayTekToolHandler : ITickable
	{
		[Token(Token = "0x4001994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameData gameData;

		[Token(Token = "0x4001995")]
		private const float checkTime = 1f;

		[Token(Token = "0x4001996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float currentTimer;

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0xFBFF30", Offset = "0xFBFF30", VA = "0xFBFF30")]
		public BayTekToolHandler(GameData gameData)
		{
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0xFBFF58", Offset = "0xFBFF58", VA = "0xFBFF58")]
		private void CheckIfShouldDropWeapon(PlayerData playerData)
		{
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0xFBFFD0", Offset = "0xFBFFD0", VA = "0xFBFFD0")]
		private bool ShouldDropTool(int toolId)
		{
			return default(bool);
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0xFC00BC", Offset = "0xFC00BC", VA = "0xFC00BC", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x200045A")]
	[CreateAssetMenu(menuName = "Settings/SynthesisVR/SynthesisArcadeSettings")]
	public class SynthesisArcadeSettings : ScriptableObject
	{
		[Token(Token = "0x4001997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Synthesis")]
		public string objectName;

		[Token(Token = "0x4001998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string gameId;

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0xFC0178", Offset = "0xFC0178", VA = "0xFC0178")]
		public SynthesisArcadeSettings()
		{
		}
	}
	[Token(Token = "0x200045B")]
	public class ArenaReference : MonoBehaviour
	{
		[Token(Token = "0x4001999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private EnvironmentSceneData environmentSceneData;

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0xFC01EC", Offset = "0xFC01EC", VA = "0xFC01EC")]
		public void Awake()
		{
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0xFC026C", Offset = "0xFC026C", VA = "0xFC026C")]
		public ArenaReference()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200045C")]
	public struct MatchTimer
	{
		[Token(Token = "0x400199A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float secondRemainingToTrigger;

		[Token(Token = "0x400199B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Color timerColor;
	}
	[Token(Token = "0x200045D")]
	[CreateAssetMenu(fileName = "ArenaGameStateSettings", menuName = "Settings/Game State/ArenaGameStateSettings", order = 1)]
	public class ArenaGameStateSettings : ScriptableObject
	{
		[Token(Token = "0x400199C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ArenaCommonSettings arenaCommonSettings;

		[Token(Token = "0x400199D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Space(10f)]
		public ArenaSpecificSettings classicArenaSettings;

		[Token(Token = "0x400199E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Space(10f)]
		public ArenaSpecificSettings shootoutArenaSettings;

		[Token(Token = "0x400199F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Space(10f)]
		public ArenaSpecificSettings scrapperShootoutArenaSettings;

		[Token(Token = "0x40019A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space(10f)]
		public ArenaSpecificSettings winterClassicArenaSettings;

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0xFC02D4", Offset = "0xFC02D4", VA = "0xFC02D4")]
		public ArenaGameStateSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200045E")]
	public class ArenaSpecificSettings
	{
		[Token(Token = "0x40019A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float playerHealth;

		[Token(Token = "0x40019A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int bestOf;

		[Token(Token = "0x40019A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float timeToIdleBeforeFirstRound;

		[Token(Token = "0x40019A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float timeToIdleBeforeNextRound;

		[Token(Token = "0x40019A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int minCountDownTime;

		[Token(Token = "0x40019A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int maxCountDownTime;

		[Token(Token = "0x40019A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float matchTime;

		[Token(Token = "0x40019A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Space(10f)]
		public MatchTimer[] matchTimerTriggers;

		[Token(Token = "0x40019A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Space(10f)]
		public OpponentFoundReference opponentFoundReference;

		[Token(Token = "0x40019AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ScoreBoardReference scoreboardPlayerOne;

		[Token(Token = "0x40019AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ScoreBoardReference scoreboardPlayerTwo;

		[Token(Token = "0x40019AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MatchHandlerSetting matchHandlerSetting;

		[Token(Token = "0x40019AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Custom settings")]
		public bool shouldForcePlatformMesh;

		[Token(Token = "0x40019AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ConditionalHide("shouldForcePlatformMesh", true)]
		public string platformID;

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0xFC02DC", Offset = "0xFC02DC", VA = "0xFC02DC")]
		public ArenaSpecificSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200045F")]
	public class ArenaCommonSettings
	{
		[Token(Token = "0x40019AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ArenaUIReferences ArenaUIReferences;

		[Token(Token = "0x40019B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PauseMenuReference pauseMenuReference;

		[Token(Token = "0x40019B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float offsetGenericUiFromPlatform;

		[Token(Token = "0x40019B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float waitingForOpponentTimeOut;

		[Token(Token = "0x40019B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float timeToShowEndMatchScreenWhenHumanFoundWhenPlayingBot;

		[Token(Token = "0x40019B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float showTimeOutValueAfterSeconds;

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0xFC0308", Offset = "0xFC0308", VA = "0xFC0308")]
		public ArenaCommonSettings()
		{
		}
	}
	[Token(Token = "0x2000460")]
	public class ArenaMenuViewHandler : ITickable
	{
		[Token(Token = "0x40019B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ArenaGameStateSettings settings;

		[Token(Token = "0x40019B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ArenaGameState arenaGameState;

		[Token(Token = "0x40019B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x40019B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x40019B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GameData gameData;

		[Token(Token = "0x40019BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly TrailerData trailerData;

		[Token(Token = "0x40019BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly AnimationStateHandlerData animationStateHandlerData;

		[Token(Token = "0x40019BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x40019BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly SceneHandlerData sceneHandlerData;

		[Token(Token = "0x40019BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ArenaUIReferences arenaUiReferences;

		[Token(Token = "0x40019BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool showingLeaveArena;

		[Token(Token = "0x40019C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool showingLeaveMatch;

		[Token(Token = "0x40019C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool showingRematch;

		[Token(Token = "0x40019C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool showingViewHandler;

		[Token(Token = "0x40019C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool showingFriendlyGameMessage;

		[Token(Token = "0x40019C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool showingWaitingForOpponent;

		[Token(Token = "0x40019C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		private bool showingMatchWithBotWhileWaiting;

		[Token(Token = "0x40019C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform arenaUiTransform;

		[Token(Token = "0x40019C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private AnimatorStateData currentAnimation;

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0xFC031C", Offset = "0xFC031C", VA = "0xFC031C")]
		public ArenaMenuViewHandler(ArenaGameStateSettings settings, ArenaGameState arenaGameState, ArenaGameStateData arenaGameStateData, IgnisNetworkConnectionData networkConnectionData, GameData gameData, TrailerData trailerData, AnimationStateHandlerData animationStateHandlerData, FindFriendData findFriendData, SceneHandlerData sceneHandlerData)
		{
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xFC0390", Offset = "0xFC0390", VA = "0xFC0390")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0xFC0810", Offset = "0xFC0810", VA = "0xFC0810")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0xFC0514", Offset = "0xFC0514", VA = "0xFC0514")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0xFC0818", Offset = "0xFC0818", VA = "0xFC0818", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x2000461")]
	public class ArenaUIReferences : MonoBehaviour
	{
		[Token(Token = "0x40019C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject roomCodeContainer;

		[Token(Token = "0x40019C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject externalFriendlyContainer;

		[Token(Token = "0x40019CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject knockoutTournamentWaitScreenContainer;

		[Token(Token = "0x40019CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI roomCodeText;

		[Token(Token = "0x40019CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button[] leaveMatchButtons;

		[Token(Token = "0x40019CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Canvas canvas;

		[Token(Token = "0x40019CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BoxCollider boxCollider;

		[Token(Token = "0x40019CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Animator animator;

		[Token(Token = "0x40019D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimatorStateData showRoomCodeAnimation;

		[Token(Token = "0x40019D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimatorStateData hideRoomCodeAnimation;

		[Token(Token = "0x40019D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float distanceFromPlayer;

		[Token(Token = "0x40019D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float heightFromFloor;

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0xFC0A24", Offset = "0xFC0A24", VA = "0xFC0A24")]
		public ArenaUIReferences()
		{
		}
	}
	[Token(Token = "0x2000462")]
	internal struct DamageTimeStamp
	{
		[Token(Token = "0x40019D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly float damage;

		[Token(Token = "0x40019D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly float timeStamp;

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0xFC0A2C", Offset = "0xFC0A2C", VA = "0xFC0A2C")]
		public DamageTimeStamp(float damage, float timeStamp)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000463")]
	public struct CrowdCharacter
	{
		[Token(Token = "0x40019D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Mesh bodyMesh;

		[Token(Token = "0x40019D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Mesh headMesh;

		[Token(Token = "0x40019D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh leftHandMesh;

		[Token(Token = "0x40019D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mesh rightHandMesh;

		[Token(Token = "0x40019DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material crowdMaterial;
	}
	[Serializable]
	[Token(Token = "0x2000464")]
	public struct CrowdSeat
	{
		[Token(Token = "0x40019DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 seatPositions;

		[Token(Token = "0x40019DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion seatRotations;

		[Token(Token = "0x40019DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 seatScales;

		[Token(Token = "0x40019DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool showBody;

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0xFC0A34", Offset = "0xFC0A34", VA = "0xFC0A34")]
		public CrowdSeat(Vector3 seatPositions, Quaternion seatRotations, Vector3 seatScales, bool showBody)
		{
		}
	}
	[Token(Token = "0x2000465")]
	public class CrowdCharacterData
	{
		[Token(Token = "0x40019DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CrowdCharacter character;

		[Token(Token = "0x40019E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Matrix4x4[] headTransformMatrix;

		[Token(Token = "0x40019E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Matrix4x4[] bodyTransformMatrix;

		[Token(Token = "0x40019E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Matrix4x4[] leftHandTransformMatrix;

		[Token(Token = "0x40019E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Matrix4x4[] rightHandTransformMatrix;

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0xFC0A60", Offset = "0xFC0A60", VA = "0xFC0A60")]
		public CrowdCharacterData()
		{
		}
	}
	[Token(Token = "0x2000466")]
	public class CrowdHandler : ITickable
	{
		[Token(Token = "0x40019E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly EnvironmentSceneData environmentSceneData;

		[Token(Token = "0x40019E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly CrowdSettings settings;

		[Token(Token = "0x40019E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x40019E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x40019E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x40019E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x40019EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x40019EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly GameData gameData;

		[Token(Token = "0x40019EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly PassthroughData passthroughData;

		[Token(Token = "0x40019ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private CrowdReference crowdReference;

		[Token(Token = "0x40019EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CrowdState state;

		[Token(Token = "0x40019EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private CrowdState targetState;

		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CrowdSampleReference[] samplers;

		[Token(Token = "0x40019F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int numSamplers;

		[Token(Token = "0x40019F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int currentActor;

		[Token(Token = "0x40019F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float transition;

		[Token(Token = "0x40019F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float currentDamage;

		[Token(Token = "0x40019F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float damageAccumulation;

		[Token(Token = "0x40019F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float oldestDamageTimeStamp;

		[Token(Token = "0x40019F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<DamageTimeStamp> damageTimeStamps;

		[Token(Token = "0x40019F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool isSceneAvaiable;

		[Token(Token = "0x40019F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ProfilerMarker drawCrowdMarker;

		[Token(Token = "0x40019FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private ProfilerMarker graphicDrawCrowdMarker;

		[Token(Token = "0x40019FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private ProfilerMarker transformDrawCrowdMarker;

		[Token(Token = "0x40019FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private ProfilerMarker getDrawValuesCrowdMarker;

		[Token(Token = "0x40019FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly CrowdCharacterData characterOne;

		[Token(Token = "0x40019FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly CrowdCharacterData characterTwo;

		[Token(Token = "0x40019FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly CrowdCharacterData characterThree;

		[Token(Token = "0x4001A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly CrowdCharacterData characterFour;

		[Token(Token = "0x4001A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private MatchHandlerState lastSeenState;

		[Token(Token = "0x4001A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int Win;

		[Token(Token = "0x4001A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int Cheer;

		[Token(Token = "0x4001A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int Loose;

		[Token(Token = "0x4001A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int Idle;

		[Token(Token = "0x4001A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private bool isCrowdDrawingEnabled;

		[Token(Token = "0x4001A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly int[] animationHashLookup;

		[Token(Token = "0x170000F2")]
		private bool HasStateTransition
		{
			[Token(Token = "0x60013C8")]
			[Address(RVA = "0xFC0AE8", Offset = "0xFC0AE8", VA = "0xFC0AE8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60013C9")]
		[Address(RVA = "0xFC0B4C", Offset = "0xFC0B4C", VA = "0xFC0B4C")]
		public CrowdHandler(EnvironmentSceneData environmentSceneData, CrowdSettings settings, DamageRecordKeeper damageRecordKeeper, IRoomTimeProvider roomTimeProvider, GameData gameData, IgnisSoundTriggerData ignisSoundTriggerData, MatchHandlerData matchHandlerData, EntryPoint.EntryPointData entryPointData, PassthroughData passthroughData)
		{
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0xFC0E58", Offset = "0xFC0E58", VA = "0xFC0E58")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0xFC101C", Offset = "0xFC101C", VA = "0xFC101C")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0xFC0F94", Offset = "0xFC0F94", VA = "0xFC0F94")]
		private void SetSamplersActive(bool isActive)
		{
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0xFC1020", Offset = "0xFC1020", VA = "0xFC1020", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0xFC169C", Offset = "0xFC169C", VA = "0xFC169C")]
		private void HandleAnimationTransitions()
		{
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0xFC11E0", Offset = "0xFC11E0", VA = "0xFC11E0")]
		private void CheckAndTriggerCheerOnDamage()
		{
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0xFC15C4", Offset = "0xFC15C4", VA = "0xFC15C4")]
		private void OnMatchStateChanged(MatchHandlerState newState)
		{
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0xFC17B0", Offset = "0xFC17B0", VA = "0xFC17B0")]
		private void DrawCrowd(CrowdCharacterData data, CrowdSeat[] crowdSeats)
		{
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0xFC1B8C", Offset = "0xFC1B8C", VA = "0xFC1B8C")]
		private Matrix4x4 GetMatrixFromTransform(Transform sample, CrowdSeat crowdSeat)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0xFC119C", Offset = "0xFC119C", VA = "0xFC119C")]
		private void SetState(CrowdState newState)
		{
		}

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0xFC1CDC", Offset = "0xFC1CDC", VA = "0xFC1CDC")]
		private void SetSamplerState(CrowdState newState)
		{
		}

		[MethodImpl(256)]
		[Token(Token = "0x60013D5")]
		[Address(RVA = "0xFC1D7C", Offset = "0xFC1D7C", VA = "0xFC1D7C")]
		private void SetAnimatorState(Animator animator, CrowdState stateToSet)
		{
		}
	}
	[Token(Token = "0x2000467")]
	public class CrowdReference : MonoBehaviour
	{
		[Token(Token = "0x4001A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CrowdSampleReference[] seats;

		[Token(Token = "0x4001A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CrowdSeat[] spectatorSeatsOne;

		[Token(Token = "0x4001A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CrowdSeat[] spectatorSeatsTwo;

		[Token(Token = "0x4001A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CrowdSeat[] spectatorSeatsThree;

		[Token(Token = "0x4001A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public CrowdSeat[] spectatorSeatsFour;

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0xFC1EB4", Offset = "0xFC1EB4", VA = "0xFC1EB4")]
		public CrowdReference()
		{
		}
	}
	[Token(Token = "0x2000468")]
	public class CrowdSampleReference : MonoBehaviour
	{
		[Token(Token = "0x4001A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform rootTransform;

		[Token(Token = "0x4001A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform headTransform;

		[Token(Token = "0x4001A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bodyTransform;

		[Token(Token = "0x4001A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftHandTransform;

		[Token(Token = "0x4001A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rightHandTransform;

		[Token(Token = "0x4001A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Animator animationReference;

		[Token(Token = "0x4001A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool showBody;

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0xFC1EBC", Offset = "0xFC1EBC", VA = "0xFC1EBC")]
		public CrowdSampleReference()
		{
		}
	}
	[Token(Token = "0x2000469")]
	[CreateAssetMenu(fileName = "Crowd Settings", menuName = "Settings/Crowd")]
	public class CrowdSettings : ScriptableObject
	{
		[Token(Token = "0x4001A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float damageToReactTo;

		[Token(Token = "0x4001A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float timeToReactOver;

		[Token(Token = "0x4001A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minimumDamageToCheck;

		[Token(Token = "0x4001A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 5f)]
		[Header("Time Settings")]
		public float stateTransitionDuration;

		[Token(Token = "0x4001A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int numSamplers;

		[Token(Token = "0x4001A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CrowdSampleReference sampler;

		[Token(Token = "0x4001A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Sound")]
		public string[] damageCheering;

		[Token(Token = "0x4001A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Graphics")]
		public CrowdCharacter characterOne;

		[Token(Token = "0x4001A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public CrowdCharacter characterTwo;

		[Token(Token = "0x4001A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public CrowdCharacter characterThree;

		[Token(Token = "0x4001A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public CrowdCharacter characterFour;

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0xFC1EC4", Offset = "0xFC1EC4", VA = "0xFC1EC4")]
		public CrowdSettings()
		{
		}
	}
	[Token(Token = "0x200046A")]
	public enum CrowdState
	{
		[Token(Token = "0x4001A20")]
		None,
		[Token(Token = "0x4001A21")]
		Idle,
		[Token(Token = "0x4001A22")]
		Win,
		[Token(Token = "0x4001A23")]
		Lose,
		[Token(Token = "0x4001A24")]
		Cheer
	}
	[Token(Token = "0x200046B")]
	[CreateAssetMenu(menuName = "Settings/GameTipsSettings", fileName = "GameTipsSettings")]
	public class GameTipsSettings : ScriptableObject
	{
		[Token(Token = "0x4001A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[FormerlySerializedAs("gameTips")]
		[SerializeField]
		private GameTips classicTipLocalizationIds;

		[Token(Token = "0x4001A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[FormerlySerializedAs("gameTips")]
		[SerializeField]
		private GameTips shootOutTipLocalizationIds;

		[Token(Token = "0x4001A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameTips winterClassicTipLocalizationIds;

		[Token(Token = "0x4001A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameTips scrapperShootoutTipLocalizationIds;

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0xFC1F88", Offset = "0xFC1F88", VA = "0xFC1F88")]
		public GameTips GetCurentGameTips(GameplayRules gameplayRules)
		{
			return null;
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0xFC1FD0", Offset = "0xFC1FD0", VA = "0xFC1FD0")]
		public GameTipsSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200046C")]
	public class GameTips
	{
		[Token(Token = "0x4001A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string[] tipsLocalizationIds;

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xFC1FD8", Offset = "0xFC1FD8", VA = "0xFC1FD8")]
		public GameTips()
		{
		}
	}
	[Token(Token = "0x200046D")]
	public class CurrentMatchRequestData
	{
		[Token(Token = "0x4001A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isMatchRequested;

		[Token(Token = "0x4001A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GameplayRules currentGameRequestRules;

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0xFC1FE0", Offset = "0xFC1FE0", VA = "0xFC1FE0")]
		public CurrentMatchRequestData()
		{
		}
	}
	[Token(Token = "0x200046E")]
	public class MatchmakingViewHandler : ITickable
	{
		[Token(Token = "0x4001A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GlobalMatchmakingStateData globalMatchmakingStateData;

		[Token(Token = "0x4001A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4001A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArenaGameState arenaGameState;

		[Token(Token = "0x4001A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly TrailerData trailerData;

		[Token(Token = "0x4001A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GameData gameData;

		[Token(Token = "0x4001A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ArenaGameStateSettings arenaGameStateSettings;

		[Token(Token = "0x4001A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly AnimationStateHandlerData animationStateHandlerData;

		[Token(Token = "0x4001A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly GameTipsSettings gameTipsSettings;

		[Token(Token = "0x4001A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4001A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly RatingMatchmakerSettingsData ratingMatchmakerSettingsData;

		[Token(Token = "0x4001A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly CurrentMatchRequestData currentMatchRequestData;

		[Token(Token = "0x4001A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MatchmakingViewReference matchmakingViewReference;

		[Token(Token = "0x4001A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool showingView;

		[Token(Token = "0x4001A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool isCancelButtonActive;

		[Token(Token = "0x4001A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		private bool showingTimeOut;

		[Token(Token = "0x4001A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private AnimatorStateData currentAnimation;

		[Token(Token = "0x4001A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int previousTips;

		[Token(Token = "0x4001A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private GameplayRules gameplayRules;

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0xFC1FF0", Offset = "0xFC1FF0", VA = "0xFC1FF0")]
		public MatchmakingViewHandler(GlobalMatchmakingStateData globalMatchmakingStateData, ArenaGameStateData arenaGameStateData, ArenaGameState arenaGameState, TrailerData trailerData, GameData gameData, ArenaGameStateSettings arenaGameStateSettings, AnimationStateHandlerData animationStateHandlerData, GameTipsSettings gameTipsSettings, IgnisNetworkConnectionData networkConnectionData, RatingMatchmakerSettingsData ratingMatchmakerSettingsData, CurrentMatchRequestData currentMatchRequestData)
		{
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0xFC207C", Offset = "0xFC207C", VA = "0xFC207C")]
		public void Initialize(MenuStateSettings menuStateSettings, Transform worldParent)
		{
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0xFC2268", Offset = "0xFC2268", VA = "0xFC2268")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0xFC21A0", Offset = "0xFC21A0", VA = "0xFC21A0")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0xFC2270", Offset = "0xFC2270", VA = "0xFC2270", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0xFC2868", Offset = "0xFC2868", VA = "0xFC2868")]
		private void CancelOngoingMatchmaking()
		{
		}

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0xFC2634", Offset = "0xFC2634", VA = "0xFC2634")]
		private void UpdateGameTips()
		{
		}

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0xFC28D8", Offset = "0xFC28D8", VA = "0xFC28D8")]
		private string GetTips(int index)
		{
			return null;
		}
	}
	[Token(Token = "0x200046F")]
	public class MatchmakingViewReference : MonoBehaviour
	{
		[Token(Token = "0x4001A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button cancelMatchmakingButton;

		[Token(Token = "0x4001A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Canvas canvas;

		[Token(Token = "0x4001A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BoxCollider hitCollider;

		[Token(Token = "0x4001A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject timeOutParent;

		[Token(Token = "0x4001A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI timeOutText;

		[Token(Token = "0x4001A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI tips;

		[Token(Token = "0x4001A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Animator animator;

		[Token(Token = "0x4001A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Animation loadingAnimation;

		[Token(Token = "0x4001A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimatorStateData showMenuAnimation;

		[Token(Token = "0x4001A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimatorStateData hideMenuAnimation;

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0xFC29A8", Offset = "0xFC29A8", VA = "0xFC29A8")]
		public MatchmakingViewReference()
		{
		}
	}
	[Token(Token = "0x2000470")]
	public class MatchResultViewReferences : MonoBehaviour
	{
		[Token(Token = "0x4001A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] winMarkers;

		[Token(Token = "0x4001A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject statsContainer;

		[Token(Token = "0x4001A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI resultText;

		[Token(Token = "0x4001A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Image beam;

		[Token(Token = "0x4001A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Image[] brightImages;

		[Token(Token = "0x4001A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI buttonText;

		[Token(Token = "0x4001A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Texts, Signs and Symbols")]
		public TextMeshProUGUI leaguePointsText;

		[Token(Token = "0x4001A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshProUGUI leaguePointsSignText;

		[Token(Token = "0x4001A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Image leaguePointsSymbol;

		[Token(Token = "0x4001A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TextMeshProUGUI xpText;

		[Token(Token = "0x4001A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TextMeshProUGUI xpSignText;

		[Token(Token = "0x4001A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Image xpSymbol;

		[Token(Token = "0x4001A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public TextMeshProUGUI freemiumText;

		[Token(Token = "0x4001A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TextMeshProUGUI freemiumSignText;

		[Token(Token = "0x4001A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Image freemiumSymbol;

		[Token(Token = "0x4001A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TextMeshProUGUI premiumText;

		[Token(Token = "0x4001A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public TextMeshProUGUI premiumSignText;

		[Token(Token = "0x4001A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Image premiumSymbol;

		[Token(Token = "0x4001A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float rewardItemSpacing;

		[Token(Token = "0x4001A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject leaguePointsContainer;

		[Token(Token = "0x4001A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject expContainer;

		[Token(Token = "0x4001A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public GameObject freemiumContainer;

		[Token(Token = "0x4001A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject premiumContainer;

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0xFC29B0", Offset = "0xFC29B0", VA = "0xFC29B0")]
		public MatchResultViewReferences()
		{
		}
	}
	[Token(Token = "0x2000471")]
	public class OpponentFoundReference : MonoBehaviour
	{
		[Token(Token = "0x4001A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas opponentFoundBillboard;

		[Token(Token = "0x4001A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Image[] opponentImages;

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0xFC29C0", Offset = "0xFC29C0", VA = "0xFC29C0")]
		public OpponentFoundReference()
		{
		}
	}
	[Token(Token = "0x2000472")]
	public class OpponentFoundViewHandler : ITickable
	{
		[Token(Token = "0x4001A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GlobalMatchmakingStateData globalMatchmakingStateData;

		[Token(Token = "0x4001A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MatchmakingData ratingMatchmakingData;

		[Token(Token = "0x4001A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4001A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameData gameData;

		[Token(Token = "0x4001A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ArenaGameStateSettings arenaGameStateSettings;

		[Token(Token = "0x4001A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OpponentFoundReference opponentFoundReference;

		[Token(Token = "0x4001A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly CharacterSettings characterSettings;

		[Token(Token = "0x4001A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool showingBilboard;

		[Token(Token = "0x4001A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int opponentCharacterId;

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0xFC29C8", Offset = "0xFC29C8", VA = "0xFC29C8")]
		public OpponentFoundViewHandler(GlobalMatchmakingStateData globalMatchmakingStateData, MatchmakingData ratingMatchmakingData, ArenaGameStateData arenaGameStateData, GameData gameData, ArenaGameStateSettings arenaGameStateSettings, CharacterSettings characterSettings)
		{
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0xFC2A28", Offset = "0xFC2A28", VA = "0xFC2A28")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0xFC2AFC", Offset = "0xFC2AFC", VA = "0xFC2AFC")]
		public void LoadDone()
		{
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0xFC2ACC", Offset = "0xFC2ACC", VA = "0xFC2ACC")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0xFC2B04", Offset = "0xFC2B04", VA = "0xFC2B04", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0xFC2BF0", Offset = "0xFC2BF0", VA = "0xFC2BF0")]
		private void UpdateDisplayName()
		{
		}
	}
	[Token(Token = "0x2000473")]
	public class PauseMenuPlayerViewHandler : ITickable
	{
		[Token(Token = "0x4001A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PauseMenuData pauseMenuData;

		[Token(Token = "0x4001A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PauseMenuSettings pauseMenuSettings;

		[Token(Token = "0x4001A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4001A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameData gameData;

		[Token(Token = "0x4001A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ArenaGameState arenaGameState;

		[Token(Token = "0x4001A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly NetworkData networkData;

		[Token(Token = "0x4001A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x4001A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PauseMenuPlayerViewReference playerViewReference;

		[Token(Token = "0x4001A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool showingPauseMenu;

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0xFC2CD4", Offset = "0xFC2CD4", VA = "0xFC2CD4")]
		public PauseMenuPlayerViewHandler(PauseMenuData pauseMenuData, PauseMenuSettings pauseMenuSettings, ArenaGameStateData arenaGameStateData, GameData gameData, ArenaGameState arenaGameState, NetworkData networkData, FindFriendData findFriendData)
		{
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0xFC2D38", Offset = "0xFC2D38", VA = "0xFC2D38")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0xFC2E48", Offset = "0xFC2E48", VA = "0xFC2E48")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0xFC2E70", Offset = "0xFC2E70", VA = "0xFC2E70", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0xFC2EDC", Offset = "0xFC2EDC", VA = "0xFC2EDC")]
		private void UpdateMainPauseState()
		{
		}
	}
	[Token(Token = "0x2000474")]
	public class PauseMenuPlayerViewReference : MonoBehaviour
	{
		[Token(Token = "0x4001A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4001A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject allowedToLeaveText;

		[Token(Token = "0x4001A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject notAllowedToLeaveText;

		[Token(Token = "0x4001A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject roomCodeParent;

		[Token(Token = "0x4001A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button forefeitMatch;

		[Token(Token = "0x4001A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI buttonText;

		[Token(Token = "0x4001A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshProUGUI roomCodeText;

		[Token(Token = "0x4001A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshProUGUI closeTipText;

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0xFC3300", Offset = "0xFC3300", VA = "0xFC3300")]
		public PauseMenuPlayerViewReference()
		{
		}
	}
	[Token(Token = "0x2000475")]
	public class PauseMenuReference : MonoBehaviour
	{
		[Token(Token = "0x4001A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform animationRoot;

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0xFC3308", Offset = "0xFC3308", VA = "0xFC3308")]
		public PauseMenuReference()
		{
		}
	}
	[Token(Token = "0x2000476")]
	[CreateAssetMenu(fileName = "PauseMenuSettings", menuName = "Settings/Arena/PauseMenuSettings")]
	public class PauseMenuSettings : ScriptableObject
	{
		[Token(Token = "0x4001A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PauseMenuReference pauseMenuReference;

		[Token(Token = "0x4001A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 classicOffsetFromCamera;

		[Token(Token = "0x4001A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 shootoutOffsetFromCamera;

		[Token(Token = "0x4001A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 winterClassicOffsetFromCamera;

		[Token(Token = "0x4001A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public PauseMenuPlayerViewReference pauseMenuPlayerViewReference;

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0xFC3310", Offset = "0xFC3310", VA = "0xFC3310")]
		public Vector3 GetOffsetCamera(GameplayRules gameplayRules)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0xFC33B4", Offset = "0xFC33B4", VA = "0xFC33B4")]
		public PauseMenuSettings()
		{
		}
	}
	[Token(Token = "0x2000477")]
	public class PauseMenuData
	{
		[Token(Token = "0x4001A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform animRoot;

		[Token(Token = "0x4001A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool showingPauseMenu;

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0xFC33BC", Offset = "0xFC33BC", VA = "0xFC33BC")]
		public PauseMenuData()
		{
		}
	}
	[Token(Token = "0x2000478")]
	public class PauseViewHandler : ITickable
	{
		[Token(Token = "0x4001A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly InputData inputData;

		[Token(Token = "0x4001A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4001A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArenaGameState arenaGameState;

		[Token(Token = "0x4001A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4001A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4001A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4001A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly PauseMenuSettings pauseMenuSettings;

		[Token(Token = "0x4001A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly Transform pauseMenuAnchor;

		[Token(Token = "0x4001A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly PauseMenuData pauseMenuData;

		[Token(Token = "0x4001A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly GameData gameData;

		[Token(Token = "0x4001A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PauseMenuReference pauseMenuReference;

		[Token(Token = "0x4001A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool showingViewHandler;

		[Token(Token = "0x4001A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float showMenuTimeout;

		[Token(Token = "0x4001A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool requestShowingOfViewHandler;

		[Token(Token = "0x4001A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private MatchHandlerState lastSeenMatchState;

		[Token(Token = "0x4001A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private EntryPoint.GameState lastSeenEntryState;

		[Token(Token = "0x4001A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private GameMode lastSeenGameMode;

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0xFC33C4", Offset = "0xFC33C4", VA = "0xFC33C4")]
		public PauseViewHandler(InputData inputData, ArenaGameStateData arenaGameStateData, ArenaGameState arenaGameState, EntryPoint.EntryPointData entryPointData, MenuStateData menuStateData, MatchHandlerData matchHandlerData, PauseMenuSettings pauseMenuSettings, Transform pauseMenuAnchor, PauseMenuData pauseMenuData, GameData gameData)
		{
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0xFC3448", Offset = "0xFC3448", VA = "0xFC3448")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0xFC3510", Offset = "0xFC3510", VA = "0xFC3510")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0xFC353C", Offset = "0xFC353C", VA = "0xFC353C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0xFC370C", Offset = "0xFC370C", VA = "0xFC370C")]
		private void UpdatePosition()
		{
		}
	}
	[Token(Token = "0x2000479")]
	public class PlayerScoreScreenAnimationCallback : MonoBehaviour
	{
		[Token(Token = "0x4001A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent onRoundWinFlightVFX;

		[Token(Token = "0x4001A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent onMatchWinViewFlightVFX;

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0xFC38A4", Offset = "0xFC38A4", VA = "0xFC38A4")]
		public void RoundWinFlightVFX()
		{
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0xFC38C0", Offset = "0xFC38C0", VA = "0xFC38C0")]
		public void MatchWinViewFlightVFX()
		{
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0xFC38DC", Offset = "0xFC38DC", VA = "0xFC38DC")]
		public PlayerScoreScreenAnimationCallback()
		{
		}
	}
	[Token(Token = "0x200047A")]
	public enum ArenaState
	{
		[Token(Token = "0x4001A97")]
		Idle,
		[Token(Token = "0x4001A98")]
		Initialize,
		[Token(Token = "0x4001A99")]
		WaitingForPlayer,
		[Token(Token = "0x4001A9A")]
		MatchRunning,
		[Token(Token = "0x4001A9B")]
		CleanUpGameState
	}
	[Token(Token = "0x200047B")]
	public class ArenaGameStateData
	{
		[Token(Token = "0x4001A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ArenaState currentState;

		[Token(Token = "0x4001A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool initialized;

		[Token(Token = "0x4001A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double roomStartTime;

		[Token(Token = "0x4001A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string matchId;

		[Token(Token = "0x4001AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float initializeTimeStamp;

		[Token(Token = "0x4001AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool isMatchMakingGame;

		[Token(Token = "0x4001AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool eligibleForRematch;

		[Token(Token = "0x4001AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool abandonSinglePlayerForMultiplayerMatch;

		[Token(Token = "0x4001AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
		public bool isPlayingBotWhileWaitingForMatchmaking;

		[Token(Token = "0x4001AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int expectedScene;

		[Token(Token = "0x4001AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool exitArenaGameState;

		[Token(Token = "0x4001AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int sceneIndex;

		[Token(Token = "0x4001AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int savedShootoutSceneIndex;

		[Token(Token = "0x4001AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int savedClassicSceneIndex;

		[Token(Token = "0x4001AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int savedWinterClassicSceneIndex;

		[Token(Token = "0x4001AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string matchOrigin;

		[Token(Token = "0x4001AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int savedScrapperShootoutSceneIndex;

		[Token(Token = "0x6001402")]
		[Address(RVA = "0xFC38E4", Offset = "0xFC38E4", VA = "0xFC38E4")]
		public ArenaGameStateData()
		{
		}
	}
	[Token(Token = "0x200047C")]
	public class ArenaGameState : IGameState
	{
		[Token(Token = "0x4001AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameMessageHandler gameMessageHandler;

		[Token(Token = "0x4001AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4001AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly GameData gameData;

		[Token(Token = "0x4001AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayerSpawnHandler playerSpawnHandler;

		[Token(Token = "0x4001AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4001AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4001AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly NetworkConnectionHandler networkConnectionHandler;

		[Token(Token = "0x4001AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<ITickable> arenaGameStatePreTickHandlers;

		[Token(Token = "0x4001AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly List<ITickable> arenaGameStatePostTickHandlers;

		[Token(Token = "0x4001AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly List<IFixedTickable> arenaGameStateFixedTickHandlers;

		[Token(Token = "0x4001AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly List<ILateTickable> arenaGameStateLateTickHandlers;

		[Token(Token = "0x4001AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4001AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly ArenaGameStateSettings arenaGameStateSettings;

		[Token(Token = "0x4001ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x4001ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly ScoreBoardViewHandler scoreBoardViewHandler;

		[Token(Token = "0x4001ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly ToolSpawnAlgorithmData toolSpawnAlgorithm;

		[Token(Token = "0x4001ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly LaserHandler laserHandler;

		[Token(Token = "0x4001ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4001ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly CageHandler cageHandler;

		[Token(Token = "0x4001AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly BotController aIController;

		[Token(Token = "0x4001AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly SpectatorHandler spectatorHandler;

		[Token(Token = "0x4001AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly ToolGrabHandler toolGrabHandler;

		[Token(Token = "0x4001AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Action sendGameMessagesToLogStorage;

		[Token(Token = "0x4001AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x4001AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly LoginData loginData;

		[Token(Token = "0x4001AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly NetworkRegionProvider networkRegionProvider;

		[Token(Token = "0x4001AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly GameMechanicStateHelper gameMechanicStateHelper;

		[Token(Token = "0x4001AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private readonly CharacterData characterData;

		[Token(Token = "0x4001AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private readonly ReplayData replayData;

		[Token(Token = "0x4001ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private readonly PlayerHealthHandler playerHealthHandler;

		[Token(Token = "0x4001ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private readonly PlatformData platformData;

		[Token(Token = "0x4001ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private readonly BannerData bannerData;

		[Token(Token = "0x4001ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private readonly AiData aiData;

		[Token(Token = "0x4001ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private readonly MatchHandler matchHandler;

		[Token(Token = "0x4001ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4001AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x4001AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private readonly CameraFadeData cameraFadeData;

		[Token(Token = "0x4001AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private bool startingMatch;

		[Token(Token = "0x4001AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private EntryPoint.GameState nextGameState;

		[Token(Token = "0x4001AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private string typeOfMultiplayerGameRequest;

		[Token(Token = "0x4001AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private float timestampWhenMultiplayerGameWasRequested;

		[Token(Token = "0x4001AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x4001AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private readonly GameDesignTrackingData gameDesignTrackingData;

		[Token(Token = "0x4001AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private readonly SceneHandlerSettings sceneHandlerSettings;

		[Token(Token = "0x4001AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private readonly SceneHandlerData sceneHandlerData;

		[Token(Token = "0x4001ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private NetworkIdAllocator networkIdAllocator;

		[Token(Token = "0x4001ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private readonly GameMessageData gameMessageData;

		[Token(Token = "0x4001ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private readonly MatchStartAnnouncementsData matchStartAnnouncementsData;

		[Token(Token = "0x4001ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private readonly BarEntranceData barEntranceData;

		[Token(Token = "0x4001ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private readonly GameMessageUploadHandlerData gameMessageUploadHandlerData;

		[Token(Token = "0x4001AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private readonly MatchReportingData matchReportingData;

		[Token(Token = "0x4001AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private readonly VoipData voipData;

		[Token(Token = "0x4001AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private readonly GamePlayRulesData gamePlayRulesData;

		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private readonly KnockoutTournamentData knockoutTournamentData;

		[Token(Token = "0x4001AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private readonly CharacterSettings characterSettings;

		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private readonly PingInformationData pingInformationData;

		[Token(Token = "0x4001AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private PlayerReferences localPlayer;

		[Token(Token = "0x4001AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ProfilerMarker postTickMarker;

		[Token(Token = "0x4001AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ProfilerMarker tickMarker;

		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static ProfilerMarker tickCommonMarker;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static ProfilerMarker tickInitMarker;

		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static ProfilerMarker tickWaitingMarker;

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static ProfilerMarker tickMatchRunningMarker;

		[Token(Token = "0x6001403")]
		[Address(RVA = "0xFC3900", Offset = "0xFC3900", VA = "0xFC3900")]
		public ArenaGameState(List<ITickable> arenaGameStatePreTickHandlers, List<ITickable> arenaGameStatePostTickHandlers, List<IFixedTickable> arenaGameStateFixedTickHandlers, List<ILateTickable> arenaGameStateLateTickHandlers, ArenaGameStateData arenaGameStateData, ArenaGameStateSettings arenaGameStateSettings, IgnisNetworkConnectionData networkConnectionData, NetworkConnectionHandler networkConnectionHandler, GameMessageHandler gameMessageHandler, MessageSender messageSender, GameData gameData, PlayerSpawnHandler playerSpawnHandler, GameMessageFactory gameMessageFactory, DamageRecordKeeper damageRecordKeeper, ScoreBoardViewHandler scoreBoardViewHandler, ToolSpawnAlgorithmData toolSpawnAlgorithm, IRoomTimeProvider roomTimeProvider, CageHandler cageHandler, BotController aIController, Action sendGameMessagesToLogStorage, LockerRoomGameStateData lockerRoomGameStateData, LoginData loginData, NetworkRegionProvider networkRegionProvider, GameMechanicStateHelper gameMechanicStateHelper, CharacterData characterData, ReplayData replayData, PlayerHealthHandler playerHealthHandler, PlatformData platformData, BannerData bannerData, AiData aiData, MatchHandler matchHandler, MatchHandlerData matchHandlerData, PlayFabProgressionData playFabProgressionData, GameDesignTrackingData gameDesignTrackingData, SceneHandlerSettings sceneHandlerSettings, SceneHandlerData sceneHandlerData, NetworkIdAllocator networkIdAllocator, GameMessageData gameMessageData, MatchStartAnnouncementsData matchStartAnnouncementsData, AutoSpectateData autoSpectateData, BarEntranceData barEntranceData, GameMessageUploadHandlerData gameMessageUploadHandlerData, MatchReportingData matchReportingData, VoipData voipData, PlayerReferences localPlayer, ArcadeData arcadeData, CameraFadeData cameraFadeData, GamePlayRulesData gamePlayRulesData, KnockoutTournamentData knockoutTournamentData, IgnisTelemetry ignisTelemetry, CharacterSettings characterSettings, PingInformationData pingInformationData)
		{
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0xFC3B34", Offset = "0xFC3B34", VA = "0xFC3B34")]
		public void SetupDebug(DebugMenu debugMenu)
		{
		}

		[Token(Token = "0x6001405")]
		[Address(RVA = "0xFC3B38", Offset = "0xFC3B38", VA = "0xFC3B38")]
		private void FakeAbandoneForHumanMatch()
		{
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0xFC3B68", Offset = "0xFC3B68", VA = "0xFC3B68", Slot = "4")]
		public void Initalize()
		{
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0xFC28B8", Offset = "0xFC28B8", VA = "0xFC28B8")]
		public void ExitArena()
		{
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0xFC4190", Offset = "0xFC4190", VA = "0xFC4190", Slot = "6")]
		public EntryPoint.GameState Tick()
		{
			return default(EntryPoint.GameState);
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0xFC4E80", Offset = "0xFC4E80", VA = "0xFC4E80")]
		private void TryToTriggerExitOfGame()
		{
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0xFC43D4", Offset = "0xFC43D4", VA = "0xFC43D4")]
		private bool TryToInitializeGame()
		{
			return default(bool);
		}

		[Token(Token = "0x600140B")]
		[Address(RVA = "0xFC52B0", Offset = "0xFC52B0", VA = "0xFC52B0")]
		private void RequestSync()
		{
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0xFC48EC", Offset = "0xFC48EC", VA = "0xFC48EC")]
		private void TryToTriggerStartMatch()
		{
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0xFC47B0", Offset = "0xFC47B0", VA = "0xFC47B0")]
		private bool TryToStartMatch()
		{
			return default(bool);
		}

		[Token(Token = "0x600140E")]
		[Address(RVA = "0xFC5720", Offset = "0xFC5720", VA = "0xFC5720")]
		private void ReportStartMatchToGameDesignTracking()
		{
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0xFC5980", Offset = "0xFC5980", VA = "0xFC5980", Slot = "10")]
		public void OnApplicationPause(bool isPaused)
		{
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0xFC5470", Offset = "0xFC5470", VA = "0xFC5470")]
		private void TrackTimeToFindOpponent()
		{
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0xFC4710", Offset = "0xFC4710", VA = "0xFC4710")]
		private void TimeOutWaitingForOpponent()
		{
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0xFC59FC", Offset = "0xFC59FC", VA = "0xFC59FC")]
		private void TrackOpponentTimeout(bool wasTimeout)
		{
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0xFC5134", Offset = "0xFC5134", VA = "0xFC5134")]
		private void OnChangedConncetionState(NetworkConnectionState networkConnectionState)
		{
		}

		[Token(Token = "0x6001414")]
		[Address(RVA = "0xFC5F08", Offset = "0xFC5F08", VA = "0xFC5F08")]
		private void DisconnectLocalPlayerMatch()
		{
		}

		[Token(Token = "0x6001415")]
		[Address(RVA = "0xFC4F84", Offset = "0xFC4F84", VA = "0xFC4F84")]
		private void OnPlayerChanges(PeerEvent playerEvent)
		{
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0xFC5228", Offset = "0xFC5228", VA = "0xFC5228")]
		private void SetEndMatchAndReportTelemetry(MatchEndReason reason)
		{
		}

		[Token(Token = "0x6001417")]
		[Address(RVA = "0xFC5FFC", Offset = "0xFC5FFC", VA = "0xFC5FFC")]
		private Tracking.TrackingEvent CreateMatchStateTrackingEvent(string eventName)
		{
			return null;
		}

		[Token(Token = "0x6001418")]
		[Address(RVA = "0xFC3F74", Offset = "0xFC3F74", VA = "0xFC3F74")]
		private void ChangeArenaState(ArenaState gameState)
		{
		}

		[Token(Token = "0x6001419")]
		[Address(RVA = "0xFC6668", Offset = "0xFC6668", VA = "0xFC6668")]
		private void CleanUp()
		{
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0xFC6808", Offset = "0xFC6808", VA = "0xFC6808", Slot = "11")]
		public void Terminate()
		{
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0xFC31DC", Offset = "0xFC31DC", VA = "0xFC31DC")]
		public void ForfeitMatch()
		{
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0xFC6954", Offset = "0xFC6954", VA = "0xFC6954", Slot = "5")]
		public void PreTick()
		{
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0xFC6A50", Offset = "0xFC6A50", VA = "0xFC6A50", Slot = "7")]
		public void PostTick()
		{
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0xFC6B4C", Offset = "0xFC6B4C", VA = "0xFC6B4C", Slot = "8")]
		public void LateTick()
		{
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0xFC6C48", Offset = "0xFC6C48", VA = "0xFC6C48", Slot = "9")]
		public void FixedTick()
		{
		}
	}
	[Token(Token = "0x200047D")]
	public enum ButtonInteractionResponse
	{
		[Token(Token = "0x4001AEF")]
		WaitingForDelay,
		[Token(Token = "0x4001AF0")]
		TriedToInteract,
		[Token(Token = "0x4001AF1")]
		Success
	}
	[Token(Token = "0x200047E")]
	public class AutoPlayTestHandler : ITickable
	{
		[Token(Token = "0x4001AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AutoPlayTestData autoPlayTestData;

		[Token(Token = "0x4001AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameData gameData;

		[Token(Token = "0x4001AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4001AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4001AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4001AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly GlobalMatchmakingStateData globalMatchmakingStateData;

		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly MatchmakingData matchmakingData;

		[Token(Token = "0x4001AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly AiData aiData;

		[Token(Token = "0x4001AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly BotController botController;

		[Token(Token = "0x4001AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4001AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool allowedToDoDelayAction;

		[Token(Token = "0x4001AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float delayedActionTimer;

		[Token(Token = "0x4001AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float delayedActionDuration;

		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly string[] mainMenuActionsToTry;

		[Token(Token = "0x4001B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int mainMenuIndexInteraction;

		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ProfilerMarker autoTestProfileMarker;

		[Token(Token = "0x6001421")]
		[Address(RVA = "0xFC6EE8", Offset = "0xFC6EE8", VA = "0xFC6EE8")]
		public AutoPlayTestHandler(AutoPlayTestData autoPlayTestData, GameData gameData, ArenaGameStateData arenaGameStateData, MatchHandlerData matchHandlerData, EntryPoint.EntryPointData entryPointData, GlobalMatchmakingStateData globalMatchmakingStateData, MatchmakingData matchmakingData, AiData aiData, BotController botController, IgnisNetworkConnectionData networkConnectionData)
		{
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0xFC70FC", Offset = "0xFC70FC", VA = "0xFC70FC")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0xFC7100", Offset = "0xFC7100", VA = "0xFC7100")]
		private void FindObject()
		{
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0xFC71AC", Offset = "0xFC71AC", VA = "0xFC71AC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0xFC7614", Offset = "0xFC7614", VA = "0xFC7614")]
		private void MainMenuButtonInteraction()
		{
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0xFC76C4", Offset = "0xFC76C4", VA = "0xFC76C4")]
		private void TickDelayedAction()
		{
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0xFC75E8", Offset = "0xFC75E8", VA = "0xFC75E8")]
		private void StartDelayedAction(float delay)
		{
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0xFC7520", Offset = "0xFC7520", VA = "0xFC7520")]
		private void ChangeState(AutoPlayState newState)
		{
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0xFC767C", Offset = "0xFC767C", VA = "0xFC767C")]
		private void ClickLeaveArenaButtonIfAvailable()
		{
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0xFC76F0", Offset = "0xFC76F0", VA = "0xFC76F0")]
		private ButtonInteractionResponse ClickOnButton(string buttonName)
		{
			return default(ButtonInteractionResponse);
		}
	}
	[Token(Token = "0x200047F")]
	public class AutoPlayTestData
	{
		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool active;

		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AutoPlayState state;

		[Token(Token = "0x600142B")]
		[Address(RVA = "0xFC7848", Offset = "0xFC7848", VA = "0xFC7848")]
		public AutoPlayTestData()
		{
		}
	}
	[Token(Token = "0x2000480")]
	public enum AutoPlayState
	{
		[Token(Token = "0x4001B05")]
		Dormant,
		[Token(Token = "0x4001B06")]
		Started,
		[Token(Token = "0x4001B07")]
		LockerRoom,
		[Token(Token = "0x4001B08")]
		Matchmaking,
		[Token(Token = "0x4001B09")]
		ArenaWaitingForMatch,
		[Token(Token = "0x4001B0A")]
		ArenaWaitingPlaying,
		[Token(Token = "0x4001B0B")]
		PlayingMatch
	}
	[Token(Token = "0x2000481")]
	public class AutoSpectateArtCarousel : MonoBehaviour
	{
		[Token(Token = "0x4001B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VideoPlayer videoPlayer;

		[Token(Token = "0x600142C")]
		[Address(RVA = "0xFC7850", Offset = "0xFC7850", VA = "0xFC7850")]
		public AutoSpectateArtCarousel()
		{
		}
	}
	[Token(Token = "0x2000482")]
	public class AutoSpectateAudioSettingsViewHandler : ITickable
	{
		[Token(Token = "0x4001B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AutoSpectateAudioSettingsViewReference audioSettingsViewReference;

		[Token(Token = "0x4001B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly AnimatedCanvasHandlerData animatedCanvasHandlerData;

		[Token(Token = "0x4001B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4001B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AudioMixer audioMixer;

		[Token(Token = "0x4001B14")]
		private const float MuteMasterVolumeMultiplier = 0.0001f;

		[Token(Token = "0x4001B15")]
		private const float UnMuteMasterVolumeMultiplier = 1f;

		[Token(Token = "0x4001B16")]
		private const string MasterVolumeKey = "masterVolume";

		[Token(Token = "0x4001B17")]
		private const string MusicVolumeKey = "musicVolume";

		[Token(Token = "0x4001B18")]
		private const string SoundVolumeKey = "soundVolume";

		[Token(Token = "0x4001B19")]
		private const string VoiceVolumeKey = "voiceVolume";

		[Token(Token = "0x4001B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool showingAudioSettingsView;

		[Token(Token = "0x4001B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ProfilerMarker autoSpectateAudioSettingsViewProfileMarker;

		[Token(Token = "0x600142D")]
		[Address(RVA = "0xFC7858", Offset = "0xFC7858", VA = "0xFC7858")]
		public AutoSpectateAudioSettingsViewHandler(AutoSpectateSettings autoSpectateSettings, AutoSpectateData autoSpectateData, LocalPersistentData localPersistentData, AnimatedCanvasHandlerData animatedCanvasHandlerData, PersistantDataUtility persistantDataUtility)
		{
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0xFC78F8", Offset = "0xFC78F8", VA = "0xFC78F8")]
		public void Initialize(Transform worldParent, MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0xFC7FC8", Offset = "0xFC7FC8", VA = "0xFC7FC8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0xFC8118", Offset = "0xFC8118", VA = "0xFC8118")]
		private void OnMasterVolumeChanged(float value)
		{
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0xFC82F8", Offset = "0xFC82F8", VA = "0xFC82F8")]
		private void OnMusicVolumeChanged(float value)
		{
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0xFC8410", Offset = "0xFC8410", VA = "0xFC8410")]
		private void OnSFXVolumeChanged(float value)
		{
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0xFC8528", Offset = "0xFC8528", VA = "0xFC8528")]
		private void OnVoiceVolumeChanged(float value)
		{
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0xFC8640", Offset = "0xFC8640", VA = "0xFC8640")]
		private void OnToggleVoiceChat(bool useVoiceChat)
		{
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0xFC8250", Offset = "0xFC8250", VA = "0xFC8250")]
		private void SetVolume(string group, float volume)
		{
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0xFC828C", Offset = "0xFC828C", VA = "0xFC828C")]
		private void SaveSettings()
		{
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0xFC80FC", Offset = "0xFC80FC", VA = "0xFC80FC")]
		private void CloseAudioSettings()
		{
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0xFC807C", Offset = "0xFC807C", VA = "0xFC807C")]
		private void SetActive(bool active)
		{
		}
	}
	[Token(Token = "0x2000483")]
	public class AutoSpectateAudioSettingsViewReference : MonoBehaviour
	{
		[Token(Token = "0x4001B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimatedCanvas canvas;

		[Token(Token = "0x4001B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Master Volume")]
		public Slider masterVolumeSlider;

		[Token(Token = "0x4001B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI masterVolumeValue;

		[Token(Token = "0x4001B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("SFX Volume")]
		public Slider sfxVolumeSlider;

		[Token(Token = "0x4001B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI sfxVolumeValue;

		[Token(Token = "0x4001B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Music Volume")]
		public Slider musicVolumeSlider;

		[Token(Token = "0x4001B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshProUGUI musicVolumeValue;

		[Token(Token = "0x4001B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Voice Chat")]
		public GameObject voiceChatObject;

		[Token(Token = "0x4001B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Toggle voiceChatToggle;

		[Token(Token = "0x4001B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Slider voiceChatVolumeSlider;

		[Token(Token = "0x4001B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TextMeshProUGUI voiceChatVolumeValue;

		[Token(Token = "0x4001B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Button closeButton;

		[Token(Token = "0x6001439")]
		[Address(RVA = "0xFC8684", Offset = "0xFC8684", VA = "0xFC8684")]
		public AutoSpectateAudioSettingsViewReference()
		{
		}
	}
	[Token(Token = "0x2000484")]
	public class AutoSpectateConfigureSettingsViewHandler : ITickable
	{
		[Token(Token = "0x4001B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AutoSpectateConfigureSettingsViewReference settingsReference;

		[Token(Token = "0x4001B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool showingAutoSpectateConfigView;

		[Token(Token = "0x4001B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ProfilerMarker autoSpectateConfigProfileMarker;

		[Token(Token = "0x600143A")]
		[Address(RVA = "0xFC868C", Offset = "0xFC868C", VA = "0xFC868C")]
		public AutoSpectateConfigureSettingsViewHandler(AutoSpectateSettings autoSpectateSettings, AutoSpectateData autoSpectateData)
		{
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0xFC8708", Offset = "0xFC8708", VA = "0xFC8708")]
		public void Initialise(Transform worldParent)
		{
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0xFC8B08", Offset = "0xFC8B08", VA = "0xFC8B08", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0xFC8AB0", Offset = "0xFC8AB0", VA = "0xFC8AB0")]
		public void SetActive(bool active)
		{
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0xFC8818", Offset = "0xFC8818", VA = "0xFC8818")]
		private void LoadSettings()
		{
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0xFC8BF0", Offset = "0xFC8BF0", VA = "0xFC8BF0")]
		private void SaveChosenSettings()
		{
		}
	}
	[Token(Token = "0x2000485")]
	public class AutoSpectateConfigureSettingsViewReference : MonoBehaviour
	{
		[Token(Token = "0x4001B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4001B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button begin;

		[Token(Token = "0x4001B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("General Config")]
		public Toggle prioritiseHigherRankedPlayersCheckmark;

		[Token(Token = "0x4001B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Duel Matches")]
		public Toggle spectateDuelMatchesCheckmark;

		[Token(Token = "0x4001B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Toggle spectateShootoutDuelMatchesCheckmark;

		[Token(Token = "0x4001B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Toggle spectateWinterDuelMatchesCheckmark;

		[Token(Token = "0x4001B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Toggle spectateStreetBrawlMatchesCheckmark;

		[Token(Token = "0x4001B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TMP_InputField duelMatchFreshnessTime;

		[Token(Token = "0x4001B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Tournament Matches")]
		public Toggle spectateTournamentMatchesCheckmark;

		[Token(Token = "0x4001B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TMP_InputField tournamentMatchFreshnessTime;

		[Token(Token = "0x4001B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Toggle prioritiseOngoingTournaments;

		[Token(Token = "0x4001B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Toggle prioritiseTournamentLeaders;

		[Token(Token = "0x4001B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Friendly Matches")]
		public Toggle spectateFriendlyDuelMatchesCheckmark;

		[Token(Token = "0x4001B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Toggle spectateFriendlyShootoutMatchesCheckmark;

		[Token(Token = "0x4001B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Toggle spectateFriendlyWinterMatchesCheckmark;

		[Token(Token = "0x4001B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Toggle spectateFriendlyStreetBrawlMatchesCheckmark;

		[Token(Token = "0x4001B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public TMP_InputField friendlyMatchFreshnessTime;

		[Token(Token = "0x4001B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Camera Config")]
		public TMP_InputField switchSeatsTime;

		[Token(Token = "0x6001441")]
		[Address(RVA = "0xFC8DB4", Offset = "0xFC8DB4", VA = "0xFC8DB4")]
		public AutoSpectateConfigureSettingsViewReference()
		{
		}
	}
	[Token(Token = "0x2000486")]
	public class AutoSpectateControlsViewHandler : ITickable
	{
		[Token(Token = "0x4001B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AutoSpectateControlsViewReference controlsViewReference;

		[Token(Token = "0x4001B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly SpectatorCameraData spectatorCameraData;

		[Token(Token = "0x4001B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly AnimatedCanvasHandlerData animatedCanvasHandlerData;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly TrailerData trailerData;

		[Token(Token = "0x4001B45")]
		private const string currentModeLocString = "menu/autospectator/controls/cameramode/current";

		[Token(Token = "0x4001B46")]
		private const string activeLocString = "menu/autospectator/controls/togglematchui/active";

		[Token(Token = "0x4001B47")]
		private const string inactiveLocString = "menu/autospectator/controls/togglematchui/inactive";

		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SpectatorCameraModeType lastSeenCameraModeType;

		[Token(Token = "0x4001B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool shouldDisplayMatchUI;

		[Token(Token = "0x4001B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly Locale locale;

		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool showingControlsView;

		[Token(Token = "0x4001B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly ProfilerMarker autoSpectateControlsViewProfileMarker;

		[Token(Token = "0x6001442")]
		[Address(RVA = "0xFC8DBC", Offset = "0xFC8DBC", VA = "0xFC8DBC")]
		public AutoSpectateControlsViewHandler(AutoSpectateSettings autoSpectateSettings, AutoSpectateData autoSpectateData, SpectatorCameraData spectatorCameraData, AnimatedCanvasHandlerData animatedCanvasHandlerData, TrailerData trailerData)
		{
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0xFC8E7C", Offset = "0xFC8E7C", VA = "0xFC8E7C")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0xFC93AC", Offset = "0xFC93AC", VA = "0xFC93AC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0xFC91D4", Offset = "0xFC91D4", VA = "0xFC91D4")]
		private void UpdateMatchUiDisplayed()
		{
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0xFC9040", Offset = "0xFC9040", VA = "0xFC9040")]
		private void UpdateSelectedCameraModeType()
		{
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0xFC9324", Offset = "0xFC9324", VA = "0xFC9324")]
		private void SetMovementSpeed(float speed)
		{
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0xFC9548", Offset = "0xFC9548", VA = "0xFC9548")]
		private void CloseControls()
		{
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0xFC94C8", Offset = "0xFC94C8", VA = "0xFC94C8")]
		private void SetActive(bool active)
		{
		}
	}
	[Token(Token = "0x2000487")]
	public class AutoSpectateControlsViewReference : MonoBehaviour
	{
		[Token(Token = "0x4001B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimatedCanvas canvas;

		[Token(Token = "0x4001B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI cameraMode;

		[Token(Token = "0x4001B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI cameraModeDescription;

		[Token(Token = "0x4001B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Slider cameraSpeedSlider;

		[Token(Token = "0x4001B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI cameraSpeedValue;

		[Token(Token = "0x4001B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI matchUiStatus;

		[Token(Token = "0x4001B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Button closeButton;

		[Token(Token = "0x600144A")]
		[Address(RVA = "0xFC9564", Offset = "0xFC9564", VA = "0xFC9564")]
		public AutoSpectateControlsViewReference()
		{
		}
	}
	[Token(Token = "0x2000488")]
	public class AutoSpectateDisplaySettingsViewHandler : ITickable
	{
		[Token(Token = "0x4001B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AutoSpectateDisplaySettingsViewReference displaySettingsViewReference;

		[Token(Token = "0x4001B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly AnimatedCanvasHandlerData animatedCanvasHandlerData;

		[Token(Token = "0x4001B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4001B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4001B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool showingDisplaySettingsView;

		[Token(Token = "0x4001B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<string> displayModes;

		[Token(Token = "0x4001B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ProfilerMarker autoSpectateDisplaySettingsViewProfileMarker;

		[Token(Token = "0x4001B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool shouldApplyValues;

		[Token(Token = "0x4001B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool shouldUpdateValues;

		[Token(Token = "0x4001B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Resolution> scrollIndexToResIndex;

		[Token(Token = "0x4001B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Queue<int> changeResolutionRequest;

		[Token(Token = "0x4001B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Queue<int> changeFullScreenModeRequest;

		[Token(Token = "0x600144B")]
		[Address(RVA = "0xFC956C", Offset = "0xFC956C", VA = "0xFC956C")]
		public AutoSpectateDisplaySettingsViewHandler(AutoSpectateSettings autoSpectateSettings, AutoSpectateData autoSpectateData, AnimatedCanvasHandlerData animatedCanvasHandlerData, LocalPersistentData localPersistentData, PersistantDataUtility persistantDataUtility)
		{
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0xFC96F8", Offset = "0xFC96F8", VA = "0xFC96F8")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0xFCA24C", Offset = "0xFCA24C", VA = "0xFCA24C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0xFC9CEC", Offset = "0xFC9CEC", VA = "0xFC9CEC")]
		private void PopulateDisplayAndResolutionsDropDown()
		{
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0xFCA724", Offset = "0xFCA724", VA = "0xFCA724")]
		private void OnDisplaySelectionChanged(int dropdownIndex)
		{
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0xFCA77C", Offset = "0xFCA77C", VA = "0xFCA77C")]
		private void OnResolutionSelectionChanged(int dropdownIndex)
		{
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0xFCA708", Offset = "0xFCA708", VA = "0xFCA708")]
		private void CloseDisplaySettings()
		{
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0xFCA688", Offset = "0xFCA688", VA = "0xFCA688")]
		private void SetActive(bool active)
		{
		}
	}
	[Token(Token = "0x2000489")]
	public class AutoSpectateDisplaySettingsViewReference : MonoBehaviour
	{
		[Token(Token = "0x4001B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimatedCanvas canvas;

		[Token(Token = "0x4001B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Dropdowns")]
		public Dropdown displayDropdown;

		[Token(Token = "0x4001B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dropdown resolutionDropdown;

		[Token(Token = "0x4001B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button closeButton;

		[Token(Token = "0x6001453")]
		[Address(RVA = "0xFCA884", Offset = "0xFCA884", VA = "0xFCA884")]
		public AutoSpectateDisplaySettingsViewReference()
		{
		}
	}
	[Token(Token = "0x200048A")]
	public class AutoSpectateDuelSelectorViewHandler : ITickable
	{
		[Token(Token = "0x200048B")]
		private enum QueueType
		{
			[Token(Token = "0x4001B71")]
			RankedDuels,
			[Token(Token = "0x4001B72")]
			Friendlies,
			[Token(Token = "0x4001B73")]
			QuickDraw,
			[Token(Token = "0x4001B74")]
			ArcticBlast,
			[Token(Token = "0x4001B75")]
			StreetBrawl,
			[Token(Token = "0x4001B76")]
			Challenge
		}

		[Token(Token = "0x4001B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AutoSpectateDuelSelectorViewReference duelSelectorReference;

		[Token(Token = "0x4001B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MatchStartAnnouncementsData matchStartAnnouncementsData;

		[Token(Token = "0x4001B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x4001B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private QueueType currentQueueType;

		[Token(Token = "0x4001B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool showingDuelSelectorView;

		[Token(Token = "0x4001B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float lastAnnouncementListUpdateTime;

		[Token(Token = "0x4001B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private DateTime lastUpdated;

		[Token(Token = "0x4001B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ProfilerMarker autoSpectateDuelSelectorViewProfileMarker;

		[Token(Token = "0x6001454")]
		[Address(RVA = "0xFCA88C", Offset = "0xFCA88C", VA = "0xFCA88C")]
		public AutoSpectateDuelSelectorViewHandler(AutoSpectateSettings autoSpectateSettings, AutoSpectateData autoSpectateData, MatchStartAnnouncementsData matchStartAnnouncementsData, FindFriendData findFriendData)
		{
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0xFCA924", Offset = "0xFCA924", VA = "0xFCA924")]
		public void Initialise(Transform worldParent)
		{
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0xFCB05C", Offset = "0xFCB05C", VA = "0xFCB05C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0xFCB004", Offset = "0xFCB004", VA = "0xFCB004")]
		private void SetActive(bool active)
		{
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0xFCB28C", Offset = "0xFCB28C", VA = "0xFCB28C")]
		private void OnSpectateClick(int i)
		{
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0xFCB0CC", Offset = "0xFCB0CC", VA = "0xFCB0CC")]
		private void UpdateListOfRooms()
		{
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0xFCB3C8", Offset = "0xFCB3C8", VA = "0xFCB3C8")]
		private void UpdateRows(SpectatorRoomListViewReference listViewReference, List<MatchStartAnnouncementItem> matchStartAnnouncements)
		{
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0xFCB6EC", Offset = "0xFCB6EC", VA = "0xFCB6EC")]
		private void LeaveDuelSelector()
		{
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0xFCAD7C", Offset = "0xFCAD7C", VA = "0xFCAD7C")]
		private void SelectQueueToSpectate(QueueType queue)
		{
		}
	}
	[Token(Token = "0x200048D")]
	public class AutoSpectateDuelSelectorViewReference : MonoBehaviour
	{
		[Token(Token = "0x4001B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4001B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SpectatorRoomListViewReference roomList;

		[Token(Token = "0x4001B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI header;

		[Token(Token = "0x4001B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI lastUpdated;

		[Token(Token = "0x4001B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button leaveDuelSelector;

		[Token(Token = "0x4001B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Queue Buttons")]
		public Button rankedDuels;

		[Token(Token = "0x4001B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Button friendlies;

		[Token(Token = "0x4001B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Button quickDraw;

		[Token(Token = "0x4001B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Button arcticBlast;

		[Token(Token = "0x4001B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Button streetBrawl;

		[Token(Token = "0x4001B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Button challenge;

		[Token(Token = "0x6001465")]
		[Address(RVA = "0xFCB75C", Offset = "0xFCB75C", VA = "0xFCB75C")]
		public AutoSpectateDuelSelectorViewReference()
		{
		}
	}
	[Token(Token = "0x200048E")]
	public class AutoSpectateFooterReference : MonoBehaviour
	{
		[Token(Token = "0x4001B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4001B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI protocolVersion;

		[Token(Token = "0x4001B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button quit;

		[Token(Token = "0x6001466")]
		[Address(RVA = "0xFCB764", Offset = "0xFCB764", VA = "0xFCB764")]
		public AutoSpectateFooterReference()
		{
		}
	}
	[Token(Token = "0x200048F")]
	public class AutoSpectateGreyTransparencyViewHandler : ITickable
	{
		[Token(Token = "0x4001B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AutoSpectateGreyTransparencyViewReference greyTransparencyViewReference;

		[Token(Token = "0x4001B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool showingGreyTransparency;

		[Token(Token = "0x4001B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ProfilerMarker autoSpectateGreyTransparencyViewProfileMarker;

		[Token(Token = "0x6001467")]
		[Address(RVA = "0xFCB76C", Offset = "0xFCB76C", VA = "0xFCB76C")]
		public AutoSpectateGreyTransparencyViewHandler(AutoSpectateSettings autoSpectateSettings, AutoSpectateData autoSpectateData)
		{
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0xFCB7E8", Offset = "0xFCB7E8", VA = "0xFCB7E8")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0xFCB8DC", Offset = "0xFCB8DC", VA = "0xFCB8DC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0xFCB884", Offset = "0xFCB884", VA = "0xFCB884")]
		public void SetActive(bool active)
		{
		}
	}
	[Token(Token = "0x2000490")]
	public class AutoSpectateGreyTransparencyViewReference : MonoBehaviour
	{
		[Token(Token = "0x4001B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject greyTransparency;

		[Token(Token = "0x4001B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Canvas canvas;

		[Token(Token = "0x600146B")]
		[Address(RVA = "0xFCB928", Offset = "0xFCB928", VA = "0xFCB928")]
		public AutoSpectateGreyTransparencyViewReference()
		{
		}
	}
	[Token(Token = "0x2000491")]
	public class AutoSpectateHandler : ITickable
	{
		[Token(Token = "0x4001B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly SpectatorSettings spectatorSettings;

		[Token(Token = "0x4001B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly SpectatorSettingsData spectatorSettingsData;

		[Token(Token = "0x4001B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x4001B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4001B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4001B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly RoomTimeReSyncData roomTimeReSyncData;

		[Token(Token = "0x4001B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4001B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly SceneHandlerData sceneHandlerData;

		[Token(Token = "0x4001B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly GameData gameData;

		[Token(Token = "0x4001B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly SpectatorCameraData spectatorCameraData;

		[Token(Token = "0x4001B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly ErrorMessageData errorMessageData;

		[Token(Token = "0x4001B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4001B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly InputData inputData;

		[Token(Token = "0x4001B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly PlayerReferences playerReference;

		[Token(Token = "0x4001B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly Transform headCamera;

		[Token(Token = "0x4001B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float stateTimestamp;

		[Token(Token = "0x4001BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private readonly float timeOutTime;

		[Token(Token = "0x4001BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool allowedToDoDelayAction;

		[Token(Token = "0x4001BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float delayedActionTimer;

		[Token(Token = "0x4001BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float delayedActionDuration;

		[Token(Token = "0x4001BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool internetAvailable;

		[Token(Token = "0x4001BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly ProfilerMarker autoSpectateProfileMarker;

		[Token(Token = "0x600146C")]
		[Address(RVA = "0xFCB930", Offset = "0xFCB930", VA = "0xFCB930")]
		public AutoSpectateHandler(AutoSpectateSettings autoSpectateSettings, AutoSpectateData autoSpectateData, SpectatorSettings spectatorSettings, SpectatorSettingsData spectatorSettingsData, FindFriendData findFriendData, ArenaGameStateData arenaGameStateData, MatchHandlerData matchHandlerData, RoomTimeReSyncData roomTimeReSyncData, EntryPoint.EntryPointData entryPointData, SceneHandlerData sceneHandlerData, IgnisNetworkConnectionData networkConnectionData, ErrorMessageData errorMessageData, GameData gameData, LocalPlayerData localPlayerData, SpectatorCameraData spectatorCameraData, InputData inputData, Transform camera)
		{
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0xFCBA5C", Offset = "0xFCBA5C", VA = "0xFCBA5C")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0xFCBF70", Offset = "0xFCBF70", VA = "0xFCBF70", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0xFCCC44", Offset = "0xFCCC44", VA = "0xFCCC44")]
		private void ProcessInput(AutoSpectateState state)
		{
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0xFCCA3C", Offset = "0xFCCA3C", VA = "0xFCCA3C")]
		private void TryToConnectToFoundRoomToSpectate(MatchStartAnnouncementItem roomToSpectate)
		{
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0xFCC8E4", Offset = "0xFCC8E4", VA = "0xFCC8E4")]
		private void LeaveArena(bool forced = false)
		{
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0xFCCEB4", Offset = "0xFCCEB4", VA = "0xFCCEB4")]
		private ButtonInteractionResponse ClickButtonIfAvailable(Button button)
		{
			return default(ButtonInteractionResponse);
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0xFCCB2C", Offset = "0xFCCB2C", VA = "0xFCCB2C")]
		private void CheckIfStateTimedOut()
		{
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0xFCC83C", Offset = "0xFCC83C", VA = "0xFCC83C")]
		private void ResetSpectatorPlayer()
		{
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0xFCCA10", Offset = "0xFCCA10", VA = "0xFCCA10")]
		private void SetUpSpectatorPlayerReference()
		{
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0xFCC93C", Offset = "0xFCC93C", VA = "0xFCC93C")]
		private void ChangeState(AutoSpectateState newState)
		{
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0xFCCCF8", Offset = "0xFCCCF8", VA = "0xFCCCF8")]
		private void OnChangeMenuState(AutoSpectateMenuState nextState)
		{
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0xFCCDC0", Offset = "0xFCCDC0", VA = "0xFCCDC0")]
		private void OnChangeSettingsOverlayState(AutoSpectateSettingsOverlayState settingsOverlayState)
		{
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0xFCCE88", Offset = "0xFCCE88", VA = "0xFCCE88")]
		private void TickDelayedAction()
		{
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0xFCCC18", Offset = "0xFCCC18", VA = "0xFCCC18")]
		private void StartDelayedAction(float delay)
		{
		}
	}
	[Token(Token = "0x2000492")]
	public class AutoSpectateData
	{
		[Token(Token = "0x4001BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool active;

		[Token(Token = "0x4001BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool internalModeAllowed;

		[Token(Token = "0x4001BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AutoSpectateState state;

		[Token(Token = "0x4001BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AutoSpectateMenuState currentMenuState;

		[Token(Token = "0x4001BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AutoSpectateMenuState nextMenuState;

		[Token(Token = "0x4001BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AutoSpectateSettingsOverlayState currentSettingsOverlayState;

		[Token(Token = "0x4001BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public AutoSpectateSettingsOverlayState nextSettingsOverlayState;

		[Token(Token = "0x4001BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isInGameMenuActive;

		[Token(Token = "0x4001BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool shouldForceLeaveArena;

		[Token(Token = "0x4001BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string knockoutCode;

		[Token(Token = "0x4001BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool prioritiseHigherRankedPlayers;

		[Token(Token = "0x4001BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool prioritiseTournamentLeaders;

		[Token(Token = "0x4001BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public bool shouldDisplayMatchUI;

		[Token(Token = "0x4001BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		public bool configSettingsSaved;

		[Token(Token = "0x4001BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Queue<AutoSpectateRoomRequest> createRandomRoomRequests;

		[Token(Token = "0x4001BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MatchStartAnnouncementItem foundMatchToSpectate;

		[Token(Token = "0x4001BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MatchStartAnnouncementItem currentMatch;

		[Token(Token = "0x4001BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string currentMatchType;

		[Token(Token = "0x4001BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string previousMatchId;

		[Token(Token = "0x4001BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool canListenToPlayers;

		[Token(Token = "0x4001BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool playingReplay;

		[Token(Token = "0x600147B")]
		[Address(RVA = "0xFCCFD0", Offset = "0xFCCFD0", VA = "0xFCCFD0")]
		public AutoSpectateData()
		{
		}
	}
	[Token(Token = "0x2000493")]
	public enum AutoSpectateState
	{
		[Token(Token = "0x4001BBC")]
		Dormant,
		[Token(Token = "0x4001BBD")]
		Starting,
		[Token(Token = "0x4001BBE")]
		LockerRoom,
		[Token(Token = "0x4001BBF")]
		ArenaWaiting,
		[Token(Token = "0x4001BC0")]
		ArenaJoining,
		[Token(Token = "0x4001BC1")]
		ArenaLeaving,
		[Token(Token = "0x4001BC2")]
		SpectatingMatch
	}
	[Token(Token = "0x2000494")]
	public enum AutoSpectateSettingsOverlayState
	{
		[Token(Token = "0x4001BC4")]
		Inactive,
		[Token(Token = "0x4001BC5")]
		AudioSettings,
		[Token(Token = "0x4001BC6")]
		DisplaySettings,
		[Token(Token = "0x4001BC7")]
		LanguageSettings,
		[Token(Token = "0x4001BC8")]
		Controls,
		[Token(Token = "0x4001BC9")]
		QuitConfirmation,
		[Token(Token = "0x4001BCA")]
		MainMenuConfirmation,
		[Token(Token = "0x4001BCB")]
		FriendlyDuelKeyboardActive,
		[Token(Token = "0x4001BCC")]
		KnockoutCodeKeyboardActive
	}
	[Token(Token = "0x2000495")]
	public enum AutoSpectateMenuState
	{
		[Token(Token = "0x4001BCE")]
		PublicMenu,
		[Token(Token = "0x4001BCF")]
		InternalMenu,
		[Token(Token = "0x4001BD0")]
		DuelSelector,
		[Token(Token = "0x4001BD1")]
		QueueConfig,
		[Token(Token = "0x4001BD2")]
		Queue
	}
	[Token(Token = "0x2000496")]
	public struct AutoSpectateRoomRequest
	{
		[Token(Token = "0x4001BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool isCreatingRoom;

		[Token(Token = "0x4001BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string roomCode;

		[Token(Token = "0x600147C")]
		[Address(RVA = "0xFCD054", Offset = "0xFCD054", VA = "0xFCD054")]
		public AutoSpectateRoomRequest(bool isCreatingRoom, string roomCode)
		{
		}

		[Token(Token = "0x600147D")]
		[Address(RVA = "0xFCD064", Offset = "0xFCD064", VA = "0xFCD064")]
		public static AutoSpectateRoomRequest CreateRoomAsSpectator()
		{
			return default(AutoSpectateRoomRequest);
		}

		[Token(Token = "0x600147E")]
		[Address(RVA = "0xFCD070", Offset = "0xFCD070", VA = "0xFCD070")]
		public static AutoSpectateRoomRequest JoinRoomAsSpectator(string roomCode)
		{
			return default(AutoSpectateRoomRequest);
		}
	}
	[Token(Token = "0x2000497")]
	public class AutoSpectateInternalModeMenuReference : MonoBehaviour
	{
		[Token(Token = "0x4001BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4001BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform keyboardTransform;

		[Token(Token = "0x4001BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject internalOptions;

		[Token(Token = "0x4001BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button backToPublicButton;

		[Token(Token = "0x4001BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button duelSelectorButton;

		[Token(Token = "0x4001BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Button queueConfigButton;

		[Token(Token = "0x4001BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Button spectateQueueButton;

		[Token(Token = "0x600147F")]
		[Address(RVA = "0xFCD07C", Offset = "0xFCD07C", VA = "0xFCD07C")]
		public AutoSpectateInternalModeMenuReference()
		{
		}
	}
	[Token(Token = "0x2000498")]
	public class AutoSpectateInternalModeMenuViewHandler : ITickable
	{
		[Token(Token = "0x4001BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AutoSpectateInternalModeMenuReference menuReference;

		[Token(Token = "0x4001BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool showingAutoSpectateInternalMenuView;

		[Token(Token = "0x4001BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ProfilerMarker autoSpectateInternalMenuProfileMarker;

		[Token(Token = "0x6001480")]
		[Address(RVA = "0xFCD084", Offset = "0xFCD084", VA = "0xFCD084")]
		public AutoSpectateInternalModeMenuViewHandler(AutoSpectateSettings autoSpectateSettings, AutoSpectateData autoSpectateData)
		{
		}

		[Token(Token = "0x6001481")]
		[Address(RVA = "0xFCD100", Offset = "0xFCD100", VA = "0xFCD100")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0xFCD374", Offset = "0xFCD374", VA = "0xFCD374", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0xFCD31C", Offset = "0xFCD31C", VA = "0xFCD31C")]
		public void SetActive(bool active)
		{
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0xFCD3CC", Offset = "0xFCD3CC", VA = "0xFCD3CC")]
		private void VisitPublicMenu()
		{
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0xFCD3E8", Offset = "0xFCD3E8", VA = "0xFCD3E8")]
		private void VisitDuelSelectorMenu()
		{
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0xFCD408", Offset = "0xFCD408", VA = "0xFCD408")]
		private void VisitQueueConfigMenu()
		{
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0xFCD428", Offset = "0xFCD428", VA = "0xFCD428")]
		private void VisitQueue()
		{
		}
	}
	[Token(Token = "0x2000499")]
	public class AutoSpectateLanguageSettingsViewHandler : ITickable
	{
		[Token(Token = "0x4001BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AutoSpectateLanguageSettingsViewReference languageSettingsViewReference;

		[Token(Token = "0x4001BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly AnimatedCanvasHandlerData animatedCanvasHandlerData;

		[Token(Token = "0x4001BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4001BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4001BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool showingControlsView;

		[Token(Token = "0x4001BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<LocalizedText> localizedTextComponents;

		[Token(Token = "0x4001BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ProfilerMarker autoSpectateLanguageSettingsViewProfileMarker;

		[Token(Token = "0x600148C")]
		[Address(RVA = "0xFCD4C4", Offset = "0xFCD4C4", VA = "0xFCD4C4")]
		public AutoSpectateLanguageSettingsViewHandler(AutoSpectateSettings autoSpectateSettings, AutoSpectateData autoSpectateData, AnimatedCanvasHandlerData animatedCanvasHandlerData, LocalPersistentData localPersistentData, PersistantDataUtility persistantDataUtility)
		{
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0xFCD564", Offset = "0xFCD564", VA = "0xFCD564")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x600148E")]
		[Address(RVA = "0xFCDAF4", Offset = "0xFCDAF4", VA = "0xFCDAF4")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x600148F")]
		[Address(RVA = "0xFCDEFC", Offset = "0xFCDEFC", VA = "0xFCDEFC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001490")]
		[Address(RVA = "0xFCD708", Offset = "0xFCD708", VA = "0xFCD708")]
		private void SetUpLanguageLocales()
		{
		}

		[Token(Token = "0x6001491")]
		[Address(RVA = "0xFCE04C", Offset = "0xFCE04C", VA = "0xFCE04C")]
		private void OnLanguageSelectionChanged(int dropdownIndex)
		{
		}

		[Token(Token = "0x6001492")]
		[Address(RVA = "0xFCE030", Offset = "0xFCE030", VA = "0xFCE030")]
		private void CloseLanguageSettings()
		{
		}

		[Token(Token = "0x6001493")]
		[Address(RVA = "0xFCDFB0", Offset = "0xFCDFB0", VA = "0xFCDFB0")]
		private void SetActive(bool active)
		{
		}
	}
	[Token(Token = "0x200049A")]
	public class AutoSpectateLanguageSettingsViewReference : MonoBehaviour
	{
		[Token(Token = "0x4001BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimatedCanvas canvas;

		[Token(Token = "0x4001BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IgnisDropdown languageSelection;

		[Token(Token = "0x4001BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button closeButton;

		[Token(Token = "0x6001494")]
		[Address(RVA = "0xFCE218", Offset = "0xFCE218", VA = "0xFCE218")]
		public AutoSpectateLanguageSettingsViewReference()
		{
		}
	}
	[Token(Token = "0x200049B")]
	public class AutoSpectateMainMenuConfirmationViewReference : MonoBehaviour
	{
		[Token(Token = "0x4001BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button yesButton;

		[Token(Token = "0x4001BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button cancelButton;

		[Token(Token = "0x6001495")]
		[Address(RVA = "0xFCE220", Offset = "0xFCE220", VA = "0xFCE220")]
		public AutoSpectateMainMenuConfirmationViewReference()
		{
		}
	}
	[Token(Token = "0x200049C")]
	public class AutoSpectatePublicModeHandler : ITickable
	{
		[Token(Token = "0x4001BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x4001BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly SpectatorCameraData spectatorCameraData;

		[Token(Token = "0x4001BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly InputData inputData;

		[Token(Token = "0x4001BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool createdRandomRoom;

		[Token(Token = "0x4001BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ProfilerMarker autoSpectateManualModeProfileMarker;

		[Token(Token = "0x6001496")]
		[Address(RVA = "0xFCE228", Offset = "0xFCE228", VA = "0xFCE228")]
		public AutoSpectatePublicModeHandler(AutoSpectateSettings autoSpectateSettings, AutoSpectateData autoSpectateData, FindFriendData findFriendData, SpectatorCameraData spectatorCameraData, InputData inputData)
		{
		}

		[Token(Token = "0x6001497")]
		[Address(RVA = "0xFCE2C8", Offset = "0xFCE2C8", VA = "0xFCE2C8", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x200049D")]
	public class AutoSpectatePublicModeMenuReference : MonoBehaviour
	{
		[Token(Token = "0x4001BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4001BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform keyboardTransform;

		[Token(Token = "0x4001BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI versionNumber;

		[Token(Token = "0x4001BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Art Carousel")]
		public Transform carouselTransform;

		[Token(Token = "0x4001BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Spectate Buttons")]
		public Button spectateRoom;

		[Token(Token = "0x4001BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Button spectateKnockout;

		[Token(Token = "0x4001BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Settings Buttons")]
		public Button audioSettings;

		[Token(Token = "0x4001BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Button controlsSettings;

		[Token(Token = "0x4001BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Button languageSettings;

		[Token(Token = "0x4001BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Button displaySettings;

		[Token(Token = "0x4001C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Button mainMenuButton;

		[Token(Token = "0x4001C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Button faqButton;

		[Token(Token = "0x4001C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AutoSpectateMainMenuConfirmationViewReference mainMenuConfirmation;

		[Token(Token = "0x4001C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Quit")]
		public Button quitButton;

		[Token(Token = "0x4001C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("GridContainers")]
		public GameObject spectateContainer;

		[Token(Token = "0x4001C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject settingsContainer;

		[Token(Token = "0x4001C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject backgroundImage;

		[Token(Token = "0x6001498")]
		[Address(RVA = "0xFCE2E0", Offset = "0xFCE2E0", VA = "0xFCE2E0")]
		public AutoSpectatePublicModeMenuReference()
		{
		}
	}
	[Token(Token = "0x200049E")]
	public class AutoSpectatePublicModeMenuViewHandler : ITickable
	{
		[Token(Token = "0x200049F")]
		private enum AutoSpectateKeyboardType
		{
			[Token(Token = "0x4001C1B")]
			Inactive,
			[Token(Token = "0x4001C1C")]
			FriendlyDuel,
			[Token(Token = "0x4001C1D")]
			KnockoutRoom
		}

		[Token(Token = "0x4001C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly InteractionSettings interactionSettings;

		[Token(Token = "0x4001C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly VrKeyboardData vrKeyboardData;

		[Token(Token = "0x4001C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly KeyboardControllerData keyboardControllerData;

		[Token(Token = "0x4001C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x4001C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly CameraReference camera;

		[Token(Token = "0x4001C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4001C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AutoSpectatePublicModeMenuReference menuReference;

		[Token(Token = "0x4001C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool showingAutoSpectateManualMenuView;

		[Token(Token = "0x4001C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AsyncOperationHandle<GameObject> asyncOperationHandle;

		[Token(Token = "0x4001C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool shouldLoadVideo;

		[Token(Token = "0x4001C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private string keyboardHelpString;

		[Token(Token = "0x4001C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AutoSpectateKeyboardType activeKeyboard;

		[Token(Token = "0x4001C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private FindFriendError isShowingError;

		[Token(Token = "0x4001C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool showingTheInGameMenu;

		[Token(Token = "0x4001C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool canPlayVideo;

		[Token(Token = "0x4001C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly ProfilerMarker autoSpectateManualModeMenuViewProfileMarker;

		[Token(Token = "0x4001C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AutoSpectateArtCarousel artCarousel;

		[Token(Token = "0x6001499")]
		[Address(RVA = "0xFCE2E8", Offset = "0xFCE2E8", VA = "0xFCE2E8")]
		public AutoSpectatePublicModeMenuViewHandler(AutoSpectateData autoSpectateData, AutoSpectateSettings autoSpectateSettings, InteractionSettings interactionSettings, VrKeyboardData vrKeyboardData, FindFriendData findFriendData, CameraReference camera, EntryPoint.EntryPointData entryPointData)
		{
		}

		[Token(Token = "0x600149A")]
		[Address(RVA = "0xFCE3D0", Offset = "0xFCE3D0", VA = "0xFCE3D0")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x600149B")]
		[Address(RVA = "0xFCE974", Offset = "0xFCE974", VA = "0xFCE974", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600149C")]
		[Address(RVA = "0xFCF544", Offset = "0xFCF544", VA = "0xFCF544")]
		private void ShowSettings(AutoSpectateSettingsOverlayState chosenSettingsOverlayState)
		{
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0xFCF560", Offset = "0xFCF560", VA = "0xFCF560")]
		private void BackToMenu()
		{
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0xFCF594", Offset = "0xFCF594", VA = "0xFCF594")]
		private void OpenConfirmationToMainMenu()
		{
		}

		[Token(Token = "0x600149F")]
		[Address(RVA = "0xFCF5C8", Offset = "0xFCF5C8", VA = "0xFCF5C8")]
		private void GoToFAQ()
		{
		}

		[Token(Token = "0x60014A0")]
		[Address(RVA = "0xFCF5E8", Offset = "0xFCF5E8", VA = "0xFCF5E8")]
		private void ExitToMainMenu()
		{
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0xFCEFB4", Offset = "0xFCEFB4", VA = "0xFCEFB4")]
		private void SetActive(bool active)
		{
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0xFCF640", Offset = "0xFCF640", VA = "0xFCF640")]
		private void CreateRoomAsSpectator()
		{
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0xFCF0FC", Offset = "0xFCF0FC", VA = "0xFCF0FC")]
		private void InitialiseRoomCodeKeyboard(string errorText = "")
		{
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0xFCF320", Offset = "0xFCF320", VA = "0xFCF320")]
		private void InitialiseKnockoutKeyboard(string errorText = "")
		{
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0xFCF6A0", Offset = "0xFCF6A0", VA = "0xFCF6A0")]
		private void CancelInput()
		{
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0xFCF6CC", Offset = "0xFCF6CC", VA = "0xFCF6CC")]
		private void ChangeRoomCodeFriendly(string newRoomCode)
		{
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0xFCF750", Offset = "0xFCF750", VA = "0xFCF750")]
		private void ChangeRoomCodeKnockout(string newRoomCode)
		{
		}
	}
	[Token(Token = "0x20004A0")]
	public class AutoSpectateQueueData
	{
		[Token(Token = "0x4001C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AutoSpectateQueueState currentQueueState;

		[Token(Token = "0x4001C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AutoSpectateQueueState nextQueueState;

		[Token(Token = "0x4001C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool shouldStartAnimations;

		[Token(Token = "0x4001C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool hasPlayedAnimations;

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0xFCF8BC", Offset = "0xFCF8BC", VA = "0xFCF8BC")]
		public AutoSpectateQueueData()
		{
		}
	}
	[Token(Token = "0x20004A1")]
	public enum AutoSpectateQueueState
	{
		[Token(Token = "0x4001C23")]
		Inactive,
		[Token(Token = "0x4001C24")]
		LookingForGame,
		[Token(Token = "0x4001C25")]
		MatchFound,
		[Token(Token = "0x4001C26")]
		SpectatingMatch,
		[Token(Token = "0x4001C27")]
		Error,
		[Token(Token = "0x4001C28")]
		NetworkUnavailable
	}
	[Token(Token = "0x20004A2")]
	public class AutoSpectateQueueHandler : ITickable
	{
		[Token(Token = "0x4001C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AutoSpectateQueueData autoSpectateQueueData;

		[Token(Token = "0x4001C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Transform headCamera;

		[Token(Token = "0x4001C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GameData gameData;

		[Token(Token = "0x4001C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly MatchStartAnnouncementsData matchStartAnnouncementsData;

		[Token(Token = "0x4001C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ServerTimeSyncData serverTimeSyncData;

		[Token(Token = "0x4001C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4001C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ErrorMessageData errorMessageData;

		[Token(Token = "0x4001C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly ProfilerMarker autoSpectateAutoModeProfileMarker;

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0xFCF8C4", Offset = "0xFCF8C4", VA = "0xFCF8C4")]
		public AutoSpectateQueueHandler(AutoSpectateSettings autoSpectateSettings, AutoSpectateData autoSpectateData, AutoSpectateQueueData autoSpectateQueueData, Transform camera, MatchStartAnnouncementsData matchStartAnnouncementsData, GameData gameData, ServerTimeSyncData serverTimeSyncData, IgnisNetworkConnectionData networkConnectionData, ErrorMessageData errorMessageData)
		{
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0xFCF988", Offset = "0xFCF988", VA = "0xFCF988", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0xFCFB70", Offset = "0xFCFB70", VA = "0xFCFB70")]
		private void LookForMatch()
		{
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0xFCFBBC", Offset = "0xFCFBBC", VA = "0xFCFBBC")]
		private MatchStartAnnouncementItem SelectRoomToSpectate()
		{
			return null;
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0xFD0348", Offset = "0xFD0348", VA = "0xFD0348")]
		private string GetCurrentMatchType(GameplayRules gameplayRules)
		{
			return null;
		}
	}
	[Token(Token = "0x20004A3")]
	public class AutoSpectateQueueViewHandler : ITickable
	{
		[Token(Token = "0x4001C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AutoSpectateQueueData autoSpectateQueueData;

		[Token(Token = "0x4001C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly CharacterSettings characterSettings;

		[Token(Token = "0x4001C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GameData gameData;

		[Token(Token = "0x4001C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Camera headCamera;

		[Token(Token = "0x4001C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AutoSpectateQueueViewReference menuReference;

		[Token(Token = "0x4001C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool showingAutoSpectateMenuView;

		[Token(Token = "0x4001C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AutoSpectateQueueState lastSeenQueueState;

		[Token(Token = "0x4001C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly string networkIssuesText;

		[Token(Token = "0x4001C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly string lookingForMatchText;

		[Token(Token = "0x4001C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly string errorOccurredText;

		[Token(Token = "0x4001C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly string matchFoundText;

		[Token(Token = "0x4001C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int queueAnimDone;

		[Token(Token = "0x4001C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool startedAnimations;

		[Token(Token = "0x4001C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly ProfilerMarker autoSpectateQueueViewProfileMarker;

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0xFD0400", Offset = "0xFD0400", VA = "0xFD0400")]
		public AutoSpectateQueueViewHandler(AutoSpectateData autoSpectateData, AutoSpectateQueueData autoSpectateQueueData, AutoSpectateSettings autoSpectateSettings, GameData gameData, CharacterSettings characterSettings, Camera headCamera)
		{
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0xFD05A8", Offset = "0xFD05A8", VA = "0xFD05A8")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0xFD06B4", Offset = "0xFD06B4", VA = "0xFD06B4", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0xFD09D8", Offset = "0xFD09D8", VA = "0xFD09D8")]
		private void StartPlayerAnimations()
		{
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0xFD07D4", Offset = "0xFD07D4", VA = "0xFD07D4")]
		private void SetStatusText(AutoSpectateQueueState queueState)
		{
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0xFD065C", Offset = "0xFD065C", VA = "0xFD065C")]
		private void SetActive(bool active)
		{
		}
	}
	[Token(Token = "0x20004A4")]
	public class AutoSpectateQueueViewReference : MonoBehaviour
	{
		[Token(Token = "0x4001C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4001C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator animator;

		[Token(Token = "0x4001C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI lookingForGameText;

		[Token(Token = "0x4001C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI errorText;

		[Token(Token = "0x4001C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI matchFoundText;

		[Token(Token = "0x4001C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject bluePlayer;

		[Token(Token = "0x4001C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshProUGUI bluePlayerName;

		[Token(Token = "0x4001C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Image bluePlayerImage;

		[Token(Token = "0x4001C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject pinkPlayer;

		[Token(Token = "0x4001C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TextMeshProUGUI pinkPlayerName;

		[Token(Token = "0x4001C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Image pinkPlayerImage;

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0xFD0D00", Offset = "0xFD0D00", VA = "0xFD0D00")]
		public AutoSpectateQueueViewReference()
		{
		}
	}
	[Token(Token = "0x20004A5")]
	public class AutoSpectateQuitConfirmationViewHandler : ITickable
	{
		[Token(Token = "0x4001C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AutoSpectateQuitConfirmationViewReference quitConfirmationViewReference;

		[Token(Token = "0x4001C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly AnimatedCanvasHandlerData animatedCanvasHandlerData;

		[Token(Token = "0x4001C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool showingQuitConfirmationView;

		[Token(Token = "0x4001C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ProfilerMarker autoSpectateQuitConfirmationViewProfileMarker;

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0xFD0D08", Offset = "0xFD0D08", VA = "0xFD0D08")]
		public AutoSpectateQuitConfirmationViewHandler(AutoSpectateSettings autoSpectateSettings, AutoSpectateData autoSpectateData, AnimatedCanvasHandlerData animatedCanvasHandlerData)
		{
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0xFD0D94", Offset = "0xFD0D94", VA = "0xFD0D94")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0xFD0F08", Offset = "0xFD0F08", VA = "0xFD0F08", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0xFD0FF8", Offset = "0xFD0FF8", VA = "0xFD0FF8")]
		private void CloseQuitConfirmation()
		{
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0xFD1014", Offset = "0xFD1014", VA = "0xFD1014")]
		private void QuitAutoSpectator()
		{
		}

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0xFD0F78", Offset = "0xFD0F78", VA = "0xFD0F78")]
		private void SetActive(bool active)
		{
		}
	}
	[Token(Token = "0x20004A6")]
	public class AutoSpectateQuitConfirmationViewReference : MonoBehaviour
	{
		[Token(Token = "0x4001C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimatedCanvas canvas;

		[Token(Token = "0x4001C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button quitButton;

		[Token(Token = "0x4001C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button cancelButton;

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0xFD101C", Offset = "0xFD101C", VA = "0xFD101C")]
		public AutoSpectateQuitConfirmationViewReference()
		{
		}
	}
	[Token(Token = "0x20004A7")]
	public class AutoSpectateReplayHandler : ITickable
	{
		[Token(Token = "0x4001C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ReplayData replayData;

		[Token(Token = "0x4001C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameMessageDownloadHandlerData gameMessageDownloadHandlerData;

		[Token(Token = "0x4001C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ISingleMessageSerializer singleMessageSerializer;

		[Token(Token = "0x4001C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<string> availableReplays;

		[Token(Token = "0x4001C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int currentReplay;

		[Token(Token = "0x4001C5E")]
		private const string replayDirectory = "IgnisReplays";

		[Token(Token = "0x4001C5F")]
		private const string spectatedMatchDirectory = "AutoSpectateReplays";

		[Token(Token = "0x4001C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ProfilerMarker autoSpectateReplayProfileMarker;

		[Token(Token = "0x60014C3")]
		[Address(RVA = "0xFD1024", Offset = "0xFD1024", VA = "0xFD1024")]
		public AutoSpectateReplayHandler(AutoSpectateSettings autoSpectateSettings, AutoSpectateData autoSpectateData, ArenaGameStateData arenaGameStateData, ReplayData replayData, GameMessageDownloadHandlerData gameMessageDownloadHandlerData, ISingleMessageSerializer singleMessageSerializer)
		{
		}

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0xFD110C", Offset = "0xFD110C", VA = "0xFD110C")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0xFD12C8", Offset = "0xFD12C8", VA = "0xFD12C8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0xFD13C4", Offset = "0xFD13C4", VA = "0xFD13C4")]
		private string GetNextReplayPath()
		{
			return null;
		}

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0xFD1110", Offset = "0xFD1110", VA = "0xFD1110")]
		private void LoadAvailableReplays()
		{
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0xFD1464", Offset = "0xFD1464", VA = "0xFD1464")]
		public void WriteLatestLogToFile()
		{
		}
	}
	[Token(Token = "0x20004A8")]
	public class AutoSpectateScoreboardReference : MonoBehaviour
	{
		[Token(Token = "0x4001C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ScoreBoardReference scoreBoardReference;

		[Token(Token = "0x4001C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<AutoSpectateToolIconReference> player1ToolIcons;

		[Token(Token = "0x4001C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<AutoSpectateToolIconReference> player2ToolIcons;

		[Token(Token = "0x4001C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject[] fadedBorders;

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0xFD1928", Offset = "0xFD1928", VA = "0xFD1928")]
		public AutoSpectateScoreboardReference()
		{
		}
	}
	[Token(Token = "0x20004A9")]
	public class AutoSpectateScoreboardViewHandler : ITickable
	{
		[Token(Token = "0x4001C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ToolMenuSettings toolMenuSettings;

		[Token(Token = "0x4001C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ScoreBoardData scoreBoardData;

		[Token(Token = "0x4001C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4001C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly GameData gameData;

		[Token(Token = "0x4001C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x4001C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly AnimationStateHandlerData animationStateHandlerData;

		[Token(Token = "0x4001C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly PingInformationData pingInformationData;

		[Token(Token = "0x4001C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly PlayFabUserSettingsData playFabUserSettingsData;

		[Token(Token = "0x4001C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly MatchDeckInfoData matchDeckInfoData;

		[Token(Token = "0x4001C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly InputData inputData;

		[Token(Token = "0x4001C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly Camera camera;

		[Token(Token = "0x4001C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private AutoSpectateScoreboardReference autoSpectateScoreboardReference;

		[Token(Token = "0x4001C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ScoreBoardReference scoreBoardReference;

		[Token(Token = "0x4001C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool lastSeenScoreboardVisiblity;

		[Token(Token = "0x4001C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool showingScoreboard;

		[Token(Token = "0x4001C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		private bool updateScoreBoard;

		[Token(Token = "0x4001C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8B")]
		private bool showingLoadouts;

		[Token(Token = "0x4001C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<ToolName> player1ToolNames;

		[Token(Token = "0x4001C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<ToolName> player2ToolNames;

		[Token(Token = "0x4001C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private GameplayRules prevGamePlayRules;

		[Token(Token = "0x4001C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform worldParent;

		[Token(Token = "0x4001C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private AutoSpectateScoreboardReference classicScoreBoardRef;

		[Token(Token = "0x4001C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private AutoSpectateScoreboardReference shootoutScoreBoardRef;

		[Token(Token = "0x4001C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int[] currentlyShowingPingLevel;

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0xFD1930", Offset = "0xFD1930", VA = "0xFD1930")]
		public AutoSpectateScoreboardViewHandler(AutoSpectateSettings autoSpectateSettings, ToolMenuSettings toolMenuSettings, AutoSpectateData autoSpectateData, ScoreBoardData scoreBoardData, MatchHandlerData matchHandlerData, GameData gameData, CustomizationData customizationData, AnimationStateHandlerData animationStateHandlerData, Camera camera, PingInformationData pingInformationData, PlayFabUserSettingsData playFabUserSettingsData, MatchDeckInfoData matchDeckInfoData, InputData inputData)
		{
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0xFD1AAC", Offset = "0xFD1AAC", VA = "0xFD1AAC")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0xFD1CC0", Offset = "0xFD1CC0", VA = "0xFD1CC0")]
		private void InitGameplayRules(GameplayRules gameplayRules)
		{
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0xFD20AC", Offset = "0xFD20AC", VA = "0xFD20AC")]
		private AutoSpectateScoreboardReference SelectScoreBoard(GameplayRules gameplayRules)
		{
			return null;
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0xFD20EC", Offset = "0xFD20EC", VA = "0xFD20EC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0xFD2468", Offset = "0xFD2468", VA = "0xFD2468")]
		private void ToggleScoreboardVisibility(bool isVisible)
		{
		}

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0xFD2350", Offset = "0xFD2350", VA = "0xFD2350")]
		private void ShowOpponent()
		{
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0xFD2BC8", Offset = "0xFD2BC8", VA = "0xFD2BC8")]
		private void StartAppearAnimationForPlayer(PlayerData player)
		{
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0xFD2594", Offset = "0xFD2594", VA = "0xFD2594")]
		private void SetWinMarkers()
		{
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0xFD2BEC", Offset = "0xFD2BEC", VA = "0xFD2BEC")]
		private void SetRoundWonMarker(RoundWonReference roundWonReference, ScoreBoardViewHandler.WonMarkerState state)
		{
		}

		[Token(Token = "0x60014D4")]
		[Address(RVA = "0xFD24A4", Offset = "0xFD24A4", VA = "0xFD24A4")]
		private void ResetScoreboards()
		{
		}

		[Token(Token = "0x60014D5")]
		[Address(RVA = "0xFD2BA8", Offset = "0xFD2BA8", VA = "0xFD2BA8")]
		private void UpdatePingIndicators()
		{
		}

		[Token(Token = "0x60014D6")]
		[Address(RVA = "0xFD2D34", Offset = "0xFD2D34", VA = "0xFD2D34")]
		private void UpdatePingIndicator(int playerIndex)
		{
		}

		[Token(Token = "0x60014D7")]
		[Address(RVA = "0xFD2780", Offset = "0xFD2780", VA = "0xFD2780")]
		private void DisplayPlayerLoadouts()
		{
		}

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0xFD3060", Offset = "0xFD3060", VA = "0xFD3060")]
		public void OnToolSpawnMessage(ToolSpawnMessage toolSpawnMessage)
		{
		}

		[Token(Token = "0x60014D9")]
		[Address(RVA = "0xFD3368", Offset = "0xFD3368", VA = "0xFD3368")]
		public void OnToolUsed(Tool tool)
		{
		}

		[Token(Token = "0x60014DA")]
		[Address(RVA = "0xFD3000", Offset = "0xFD3000", VA = "0xFD3000")]
		private ToolAttachmentSet GetToolAttachmentSet(ToolName toolName)
		{
			return null;
		}
	}
	[Token(Token = "0x20004AA")]
	[CreateAssetMenu(menuName = "Settings/AutoSpectate/AutoSpectateSettings")]
	public class AutoSpectateSettings : ScriptableObject
	{
		[Token(Token = "0x4001C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Vector3")]
		public Vector3 positionOffset;

		[Token(Token = "0x4001C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Quaternion rotationOffset;

		[Token(Token = "0x4001C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 initialHeadCamPositionLocal;

		[Token(Token = "0x4001C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Quaternion initialHeadCamRotationLocal;

		[Token(Token = "0x4001C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 thirdPersonCameraOffset;

		[Token(Token = "0x4001C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float thirdPersonCameraHeightOffset;

		[Token(Token = "0x4001C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("References")]
		public AutoSpectateQueueViewReference queueViewReference;

		[Token(Token = "0x4001C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AutoSpectatePublicModeMenuReference publicMenuReference;

		[Token(Token = "0x4001C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AutoSpectateInternalModeMenuReference internalMenuReference;

		[Token(Token = "0x4001C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[FormerlySerializedAs("autoSpectateScoreboardReference")]
		public AutoSpectateScoreboardReference classicAutoSpectateScoreboardReference;

		[Token(Token = "0x4001C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AutoSpectateScoreboardReference shootoutAutoSpectateScoreboardReference;

		[Token(Token = "0x4001C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public AutoSpectateConfigureSettingsViewReference settingsViewReference;

		[Token(Token = "0x4001C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public AutoSpectateDuelSelectorViewReference duelSelectorViewReference;

		[Token(Token = "0x4001C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AutoSpectateControlsViewReference keyboardControlsViewReference;

		[Token(Token = "0x4001C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public AutoSpectateGreyTransparencyViewReference greyTransparencyViewReference;

		[Token(Token = "0x4001C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AutoSpectateControlsViewReference controlsReference;

		[Token(Token = "0x4001C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public AutoSpectateLanguageSettingsViewReference languageSettingsReference;

		[Token(Token = "0x4001C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public AutoSpectateDisplaySettingsViewReference displayReference;

		[Token(Token = "0x4001C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public AutoSpectateMainMenuConfirmationViewReference mainMenuConfirmationReference;

		[Token(Token = "0x4001C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public AutoSpectateQuitConfirmationViewReference quitConfirmationReference;

		[Token(Token = "0x4001C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public AutoSpectateAudioSettingsViewReference audioSettingsReference;

		[Token(Token = "0x4001C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public UnityEngine.AddressableAssets.AssetReference mainMenuArtCarousel;

		[Token(Token = "0x4001C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Header("General Matches Config")]
		[Tooltip("Do we want to prioritise spectating higher ranked players?")]
		public bool prioritiseHigherRankedPlayers;

		[Token(Token = "0x4001C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		[Tooltip("Do we want to be able to interrupt matches when a better one is found?")]
		public bool interruptMatches;

		[Token(Token = "0x4001C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE2")]
		[Header("Duel Matches Config")]
		[Tooltip("Do we want to spectate duel matches?")]
		public bool spectateDuelMatches;

		[Token(Token = "0x4001C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE3")]
		[Tooltip("Do we want to spectate shootout duel matches?")]
		public bool spectateShootoutDuelMatches;

		[Token(Token = "0x4001C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Tooltip("Do we want to spectate winter duel matches?")]
		public bool spectateWinterDuelMatches;

		[Token(Token = "0x4001C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE5")]
		[Tooltip("Do we want to spectate street brawl matches?")]
		public bool spectateStreetBrawlMatches;

		[Token(Token = "0x4001C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("How far into the game is the autospectate allowed to join for the duel match to still be considered fresh?")]
		public int duelMatchFreshnessTime;

		[Token(Token = "0x4001C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Tooltip("Do we want to spectate tournament matches?")]
		[Header("Tournament Matches Config")]
		public bool spectateTournamentMatches;

		[Token(Token = "0x4001C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("How far into the game is the autospectate allowed to join for the tournament match to still be considered fresh?")]
		public int tournamentMatchFreshnessTime;

		[Token(Token = "0x4001C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Tooltip("Do we want to prioritise spectating tournament matches if a tournament is ongoing?")]
		public bool prioritiseOngoingTournaments;

		[Token(Token = "0x4001C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		[Tooltip("Do we want to prioritise players with more tournament wins?")]
		public bool prioritiseTournamentLeaders;

		[Token(Token = "0x4001CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF6")]
		[Tooltip("Do we want to spectate friendly duel matches?")]
		[Header("Friendly Matches Config")]
		public bool spectateFriendlyDuelMatches;

		[Token(Token = "0x4001CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF7")]
		[Tooltip("Do we want to spectate friendly shootout matches?")]
		public bool spectateFriendlyShootoutMatches;

		[Token(Token = "0x4001CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("Do we want to spectate friendly winter matches?")]
		public bool spectateFriendlyWinterMatches;

		[Token(Token = "0x4001CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		[Tooltip("Do we want to spectate friendly street brawl matches?")]
		public bool spectateFriendlyStreetBrawlMatches;

		[Token(Token = "0x4001CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Tooltip("How far into the game is the autospectate allowed to join for the friendly match to still be considered fresh?")]
		public int friendlyMatchFreshnessTime;

		[Token(Token = "0x4001CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Header("Cameras")]
		public int cameraViewAmount;

		[Token(Token = "0x4001CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public bool autoSwitchSeats;

		[Token(Token = "0x4001CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public List<SpectatorCameraMode> cameraModes;

		[Token(Token = "0x4001CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("How long can we wait until we should switch seats?")]
		public float switchSeatsTime;

		[Token(Token = "0x4001CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float cameraMovementSpeed;

		[Token(Token = "0x4001CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Header("Replays")]
		public bool playReplay;

		[Token(Token = "0x4001CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[Header("Input Controls")]
		public float mouseSpeed;

		[Token(Token = "0x4001CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float movementSpeed;

		[Token(Token = "0x4001CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public float controllerRotationSpeed;

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0xFD3448", Offset = "0xFD3448", VA = "0xFD3448")]
		public bool GetAutospectateSettingsForMode(GameplayRules gameplayRules)
		{
			return default(bool);
		}

		[Token(Token = "0x60014DC")]
		[Address(RVA = "0xFD349C", Offset = "0xFD349C", VA = "0xFD349C")]
		public AutoSpectateSettings()
		{
		}
	}
	[Token(Token = "0x20004AB")]
	public class AutoSpectateSettingsOverlayViewReference : MonoBehaviour
	{
		[Token(Token = "0x4001CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4001CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Overlay")]
		public GameObject darkOverlay;

		[Token(Token = "0x4001CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Popup References")]
		public AutoSpectateControlsViewReference controlsReference;

		[Token(Token = "0x4001CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AutoSpectateDisplaySettingsViewReference displayReference;

		[Token(Token = "0x4001CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AutoSpectateMainMenuConfirmationViewReference mainMenuConfirmationReference;

		[Token(Token = "0x4001CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AutoSpectateQuitConfirmationViewReference quitConfirmationReference;

		[Token(Token = "0x4001CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AutoSpectateAudioSettingsViewReference audioSettingsReference;

		[Token(Token = "0x60014DD")]
		[Address(RVA = "0xFD34E4", Offset = "0xFD34E4", VA = "0xFD34E4")]
		public AutoSpectateSettingsOverlayViewReference()
		{
		}
	}
	[Token(Token = "0x20004AC")]
	public class AutoSpectateToolIconReference : MonoBehaviour
	{
		[Token(Token = "0x4001CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image image;

		[Token(Token = "0x4001CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI weaponName;

		[Token(Token = "0x4001CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject attachmentIconObject;

		[Token(Token = "0x4001CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Image attachmentImage;

		[Token(Token = "0x60014DE")]
		[Address(RVA = "0xFD34EC", Offset = "0xFD34EC", VA = "0xFD34EC")]
		public AutoSpectateToolIconReference()
		{
		}
	}
	[Token(Token = "0x20004AD")]
	public enum SpectatorSeatType
	{
		[Token(Token = "0x4001CBA")]
		Static,
		[Token(Token = "0x4001CBB")]
		ThirdPerson,
		[Token(Token = "0x4001CBC")]
		POV
	}
	[Token(Token = "0x20004AE")]
	public enum SpectatorCameraModeType
	{
		[Token(Token = "0x4001CBE")]
		Auto,
		[Token(Token = "0x4001CBF")]
		Manual,
		[Token(Token = "0x4001CC0")]
		Freecam
	}
	[Serializable]
	[Token(Token = "0x20004AF")]
	public struct SpectatorCameraMode
	{
		[Token(Token = "0x4001CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SpectatorCameraModeType cameraModeType;

		[Token(Token = "0x4001CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string cameraModeLocalizedString;

		[Token(Token = "0x4001CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string cameraModeDescriptionLocalizedString;
	}
	[Token(Token = "0x20004B0")]
	public class SpectatorCameraData
	{
		[Token(Token = "0x4001CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool active;

		[Token(Token = "0x4001CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int currentSeatPosition;

		[Token(Token = "0x4001CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SpectatorSeatType currentSeatType;

		[Token(Token = "0x4001CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool allowedToSwitchSpectatorCameraPosition;

		[Token(Token = "0x4001CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<SpectatorCameraModeType, SpectatorCameraMode> cameraModeLookup;

		[Token(Token = "0x4001CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SpectatorCameraModeType cameraModeType;

		[Token(Token = "0x4001CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SpectatorView[] spectatorViews;

		[Token(Token = "0x4001CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 overriddenPosition;

		[Token(Token = "0x4001CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Quaternion overriddenRotation;

		[Token(Token = "0x60014DF")]
		[Address(RVA = "0xFD34F4", Offset = "0xFD34F4", VA = "0xFD34F4")]
		public SpectatorCameraData()
		{
		}
	}
	[Token(Token = "0x20004B1")]
	public class SpectatorCameraHandler : ITickable
	{
		[Token(Token = "0x4001CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly SpectatorCameraData spectatorCameraData;

		[Token(Token = "0x4001CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly SpectatorData spectatorData;

		[Token(Token = "0x4001CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly TrailerData trailerData;

		[Token(Token = "0x4001CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4001CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameData gameData;

		[Token(Token = "0x4001CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly InputData inputData;

		[Token(Token = "0x4001CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly SceneHandlerData sceneHandlerData;

		[Token(Token = "0x4001CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly EnvironmentSceneData environmentSceneData;

		[Token(Token = "0x4001CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform cameraParent;

		[Token(Token = "0x4001CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool spectatorCameraActive;

		[Token(Token = "0x4001CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float spectatorCameraPosTimer;

		[Token(Token = "0x4001CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float spectatorCameraPosDuration;

		[Token(Token = "0x4001CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int previouslySeenSceneIndex;

		[Token(Token = "0x4001CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool inPOVSeat;

		[Token(Token = "0x4001CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool inThirdPersonSeat;

		[Token(Token = "0x4001CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayerData currentlyFollowedPlayer;

		[Token(Token = "0x4001CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int currentPlayerIndex;

		[Token(Token = "0x4001CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 playerForward;

		[Token(Token = "0x4001CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 arenaCentre;

		[Token(Token = "0x4001CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly ProfilerMarker spectatorCameraProfileMarker;

		[Token(Token = "0x60014E0")]
		[Address(RVA = "0xFD3578", Offset = "0xFD3578", VA = "0xFD3578")]
		public SpectatorCameraHandler(SpectatorCameraData spectatorCameraData, SpectatorData spectatorData, AutoSpectateData autoSpectateData, AutoSpectateSettings autoSpectateSettings, TrailerData trailerData, EntryPoint.EntryPointData entryPointData, GameData gameData, InputData inputData, SceneHandlerData sceneHandlerData, EnvironmentSceneData environmentSceneData, Transform cameraParent)
		{
		}

		[Token(Token = "0x60014E1")]
		[Address(RVA = "0xFD3658", Offset = "0xFD3658", VA = "0xFD3658", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60014E2")]
		[Address(RVA = "0xFD39DC", Offset = "0xFD39DC", VA = "0xFD39DC")]
		private void ChangeCameraMode()
		{
		}

		[Token(Token = "0x60014E3")]
		[Address(RVA = "0xFD3BCC", Offset = "0xFD3BCC", VA = "0xFD3BCC")]
		private void HandleManualCameraViewChange()
		{
		}

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0xFD3B44", Offset = "0xFD3B44", VA = "0xFD3B44")]
		private void StartSpectatorCameraPositionTimer(float timerLength)
		{
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0xFD3B7C", Offset = "0xFD3B7C", VA = "0xFD3B7C")]
		private void PickRandomSpectatorSeat()
		{
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0xFD4060", Offset = "0xFD4060", VA = "0xFD4060")]
		private void ChangeToThirdPerson(PlayerData player)
		{
		}

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0xFD4170", Offset = "0xFD4170", VA = "0xFD4170")]
		private void ChangeToPOV(PlayerData player)
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0xFD3F10", Offset = "0xFD3F10", VA = "0xFD3F10")]
		private void ChangeSpectatorSeat(int seat)
		{
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0xFD4408", Offset = "0xFD4408", VA = "0xFD4408")]
		private void ChangeSpectatorSeat(SpectatorView spectatorView)
		{
		}

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0xFD42C8", Offset = "0xFD42C8", VA = "0xFD42C8")]
		private void ResetSpecialSeatModifiers()
		{
		}

		[Token(Token = "0x60014EB")]
		[Address(RVA = "0xFD3970", Offset = "0xFD3970", VA = "0xFD3970")]
		private void SetTrailerDataActive(bool active)
		{
		}
	}
	[Token(Token = "0x20004B2")]
	public class BarEntranceData
	{
		[Token(Token = "0x4001CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool goToBar;

		[Token(Token = "0x4001CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string launchParameters;

		[Token(Token = "0x4001CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool requestGoToBar;

		[Token(Token = "0x4001CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GoToBarData deepLinkData;

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0xFD4498", Offset = "0xFD4498", VA = "0xFD4498")]
		public BarEntranceData()
		{
		}
	}
	[Token(Token = "0x20004B3")]
	public class BarEntranceHandler : ITickable
	{
		[Token(Token = "0x4001CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BarEntranceData barEntranceData;

		[Token(Token = "0x4001CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4001CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly CameraFadeData cameraFadeData;

		[Token(Token = "0x4001CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly LoginData loginData;

		[Token(Token = "0x4001CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CharacterData characterData;

		[Token(Token = "0x4001CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PlayFabUserSettingsData playFabUserSettingsData;

		[Token(Token = "0x4001CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly NetworkRegionProvider networkRegionProvider;

		[Token(Token = "0x4001CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x4001CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly IMultiplayerProtocolVersion multiplayerProtocolVersion;

		[Token(Token = "0x4001CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly EnvironmentSceneData environmentSceneData;

		[Token(Token = "0x4001CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly GameMessageDownloadHandler gameMessageDownloadHandler;

		[Token(Token = "0x4001CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly PlayFabLoginData playFabLoginData;

		[Token(Token = "0x4001CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly PlatformLoginData platformLoginData;

		[Token(Token = "0x4001CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4001CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4001CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4001CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly GlobalMatchmakingStateData globalMatchmakingStateData;

		[Token(Token = "0x4001CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BarEntranceReference barEntranceReference;

		[Token(Token = "0x4001CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool showingView;

		[Token(Token = "0x4001CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		private bool shouldGoToBar;

		[Token(Token = "0x4001CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		private bool waitingForfade;

		[Token(Token = "0x4001CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA3")]
		private bool isSceneAvailable;

		[Token(Token = "0x4001CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool isDoorAvailable;

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0xFD44A0", Offset = "0xFD44A0", VA = "0xFD44A0")]
		public BarEntranceHandler(BarEntranceData barEntranceData, EntryPoint.EntryPointData entryPointData, CameraFadeData cameraFadeData, LoginData loginData, CharacterData characterData, PlayFabUserSettingsData playFabUserSettingsData, NetworkRegionProvider networkRegionProvider, PlayFabProgressionData playFabProgressionData, IMultiplayerProtocolVersion multiplayerProtocolVersion, EnvironmentSceneData environmentSceneData, GameMessageDownloadHandler gameMessageDownloadHandler, PlayFabLoginData playFabLoginData, PlatformLoginData platformLoginData, IgnisSoundTriggerData ignisSoundTriggerData, MenuStateData menuStateData, IgnisTelemetry ignisTelemetry, GlobalMatchmakingStateData globalMatchmakingStateData)
		{
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0xFD455C", Offset = "0xFD455C", VA = "0xFD455C")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x60014EF")]
		[Address(RVA = "0xFD45F8", Offset = "0xFD45F8", VA = "0xFD45F8")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0xFD45FC", Offset = "0xFD45FC", VA = "0xFD45FC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0xFD4848", Offset = "0xFD4848", VA = "0xFD4848")]
		private void StartProcessToBar()
		{
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0xFD4854", Offset = "0xFD4854", VA = "0xFD4854")]
		private void GoToBar()
		{
		}
	}
	[Token(Token = "0x20004B4")]
	public class BarEntranceReference : MonoBehaviour
	{
		[Token(Token = "0x4001CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Collider boxCollider;

		[Token(Token = "0x4001CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Canvas canvas;

		[Token(Token = "0x4001D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button enterBarButton;

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0xFD4EAC", Offset = "0xFD4EAC", VA = "0xFD4EAC")]
		public BarEntranceReference()
		{
		}
	}
	[Token(Token = "0x20004B5")]
	public class Cage : IDamageOverTime
	{
		[Token(Token = "0x4001D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DamageOverTimeSettings settings;

		[Token(Token = "0x4001D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Transform playerPlatform;

		[Token(Token = "0x4001D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly CageReferences cageReferences;

		[Token(Token = "0x170000F3")]
		public Transform DOTSoundTransform
		{
			[Token(Token = "0x60014F6")]
			[Address(RVA = "0xFD4EF8", Offset = "0xFD4EF8", VA = "0xFD4EF8", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0xFD4EB4", Offset = "0xFD4EB4", VA = "0xFD4EB4")]
		public Cage(DamageOverTimeSettings settings, Transform playerPlatform, CageReferences cageReferences)
		{
		}

		[Token(Token = "0x60014F5")]
		[Address(RVA = "0xFD4EF0", Offset = "0xFD4EF0", VA = "0xFD4EF0", Slot = "4")]
		public DamageOverTimeSettings DamageOverTimeSettings()
		{
			return null;
		}

		[Token(Token = "0x60014F7")]
		[Address(RVA = "0xFD4F00", Offset = "0xFD4F00", VA = "0xFD4F00", Slot = "6")]
		public int NetworkId()
		{
			return default(int);
		}

		[Token(Token = "0x60014F8")]
		[Address(RVA = "0xFD4F08", Offset = "0xFD4F08", VA = "0xFD4F08", Slot = "7")]
		public float GetDamageProjectile()
		{
			return default(float);
		}

		[Token(Token = "0x60014F9")]
		[Address(RVA = "0xFD4F24", Offset = "0xFD4F24", VA = "0xFD4F24", Slot = "8")]
		public float GetDamagePlayer()
		{
			return default(float);
		}

		[Token(Token = "0x60014FA")]
		[Address(RVA = "0xFD4F40", Offset = "0xFD4F40", VA = "0xFD4F40", Slot = "9")]
		public float GetTotalPredictedPlayerDamage()
		{
			return default(float);
		}

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0xFD4F68", Offset = "0xFD4F68", VA = "0xFD4F68", Slot = "10")]
		public bool IsDestroyed()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004B6")]
	public class DamageOverTimeData
	{
		[Token(Token = "0x4001D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int numLocalActiveContinuesDamage;

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0xFD4F70", Offset = "0xFD4F70", VA = "0xFD4F70")]
		public DamageOverTimeData()
		{
		}
	}
	[Token(Token = "0x20004B7")]
	public interface ICageHandler
	{
		[Token(Token = "0x60014FD")]
		void ResetCage();
	}
	[Token(Token = "0x20004B8")]
	public class CageData
	{
		[Token(Token = "0x4001D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Cage cageOne;

		[Token(Token = "0x4001D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Cage cageTwo;

		[Token(Token = "0x60014FE")]
		[Address(RVA = "0xFD4F78", Offset = "0xFD4F78", VA = "0xFD4F78")]
		public CageData()
		{
		}
	}
	[Token(Token = "0x20004B9")]
	public class CageHandler : ICageHandler
	{
		[Token(Token = "0x4001D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private CageReferences cageReferences;

		[Token(Token = "0x4001D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly CageSettings settings;

		[Token(Token = "0x4001D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PlayerSpawnPointReference playerSpawnPointReference;

		[Token(Token = "0x4001D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameData gameData;

		[Token(Token = "0x4001D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x4001D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4001D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4001D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly IgnisSoundTriggerData soundTriggers;

		[Token(Token = "0x4001D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly DamageOverTimeData damageOverTimeData;

		[Token(Token = "0x4001D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly HapticData hapticData;

		[Token(Token = "0x4001D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly PlayerSettings playerSettings;

		[Token(Token = "0x4001D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly List<PlayerData> localPlayerData;

		[Token(Token = "0x4001D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4001D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly AutoPlayTestData autoPlayTestData;

		[Token(Token = "0x4001D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly BhapticsData bhapticsData;

		[Token(Token = "0x4001D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly CageData cageData;

		[Token(Token = "0x4001D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform soundSourcePlayerOne;

		[Token(Token = "0x4001D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Transform soundSourcePlayerTwo;

		[Token(Token = "0x4001D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int Color;

		[Token(Token = "0x4001D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int ClipValue;

		[Token(Token = "0x4001D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly bool[] cageActivations;

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0xFD4F80", Offset = "0xFD4F80", VA = "0xFD4F80")]
		public CageHandler(CageSettings settings, PlayerSpawnPointReference playerSpawnPointReference, GameData gameData, DamageRecordKeeper damageRecordKeeper, MessageSender messageSender, GameMessageFactory gameMessageFactory, IgnisSoundTriggerData soundTriggers, DamageOverTimeData damageOverTimeData, HapticData hapticData, PlayerSettings playerSettings, List<PlayerData> localPlayerData, IgnisNetworkConnectionData networkConnectionData, AutoPlayTestData autoPlayTestData, BhapticsData bhapticsData, CageData cageData)
		{
		}

		[Token(Token = "0x6001500")]
		[Address(RVA = "0xFD507C", Offset = "0xFD507C", VA = "0xFD507C")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x6001501")]
		[Address(RVA = "0xFD5448", Offset = "0xFD5448", VA = "0xFD5448")]
		public GameMessageInvokationResult OnCageActivation(DamageOverTimeCageStartMessage damageOverTimeCageStartMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0xFD57F0", Offset = "0xFD57F0", VA = "0xFD57F0")]
		public GameMessageInvokationResult OnCageDeactivation(DamageOverTimeCageEndMessage damageOverTimeCageEndMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0xFD5B44", Offset = "0xFD5B44", VA = "0xFD5B44")]
		public void OnSpawnPlayer(SpawnPlayerMessage spawnPlayerMessage)
		{
		}

		[Token(Token = "0x6001504")]
		[Address(RVA = "0xFD561C", Offset = "0xFD561C", VA = "0xFD561C")]
		private void OnContinuesDamage(int networkId)
		{
		}

		[Token(Token = "0x6001505")]
		[Address(RVA = "0xFD59C4", Offset = "0xFD59C4", VA = "0xFD59C4")]
		private void OnEndContinuesDamage(int networkId)
		{
		}

		[Token(Token = "0x6001506")]
		[Address(RVA = "0xFD5BC8", Offset = "0xFD5BC8", VA = "0xFD5BC8")]
		public void SetCagePosition()
		{
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0xFD5CC0", Offset = "0xFD5CC0", VA = "0xFD5CC0")]
		public void ActivateCage()
		{
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0xFD5CEC", Offset = "0xFD5CEC", VA = "0xFD5CEC", Slot = "4")]
		public void ResetCage()
		{
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0xFD5EA0", Offset = "0xFD5EA0", VA = "0xFD5EA0")]
		public void Tick()
		{
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0xFD61B0", Offset = "0xFD61B0", VA = "0xFD61B0")]
		private void CageVisuals(float distanceToCentreOfCage)
		{
		}

		[Token(Token = "0x600150B")]
		[Address(RVA = "0xFD63C8", Offset = "0xFD63C8", VA = "0xFD63C8")]
		private void UpdateSoundTransforms(Vector3 playerHeadPosition, Vector3 cageCenter, Transform soundTransform)
		{
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0xFD5338", Offset = "0xFD5338", VA = "0xFD5338")]
		private void SetCageStartValues()
		{
		}
	}
	[Token(Token = "0x20004BA")]
	public class CageReferences : MonoBehaviour
	{
		[Token(Token = "0x4001D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshRenderer wallMeshRenderer;

		[Token(Token = "0x4001D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshRenderer roofMeshRenderer;

		[Token(Token = "0x600150E")]
		[Address(RVA = "0xFD6598", Offset = "0xFD6598", VA = "0xFD6598")]
		public CageReferences()
		{
		}
	}
	[Token(Token = "0x20004BB")]
	[CreateAssetMenu(fileName = "CageSettings", menuName = "Settings/Arena/CageSettings", order = 1)]
	public class CageSettings : ScriptableObject
	{
		[Token(Token = "0x4001D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CageReferences cageReferences;

		[Token(Token = "0x4001D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float showCageThreshold;

		[Token(Token = "0x4001D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxCageThreshold;

		[Token(Token = "0x4001D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DamageOverTimeSettings damageOverTime;

		[Token(Token = "0x4001D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color idleColor;

		[Token(Token = "0x4001D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color damageColor;

		[Token(Token = "0x600150F")]
		[Address(RVA = "0xFD65A0", Offset = "0xFD65A0", VA = "0xFD65A0")]
		public CageSettings()
		{
		}
	}
	[Token(Token = "0x20004BC")]
	public struct ToolOnCooldown
	{
		[Token(Token = "0x4001D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IFireable fireable;

		[Token(Token = "0x4001D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float notReadyToFireTimeStamp;
	}
	[Token(Token = "0x20004BD")]
	public class CooldownData
	{
		[Token(Token = "0x4001D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<ToolOnCooldown> toolsOnCooldown;

		[Token(Token = "0x6001510")]
		[Address(RVA = "0xFD65B4", Offset = "0xFD65B4", VA = "0xFD65B4")]
		public void AddCoolDown(IFireable fireable, IgnisSoundTriggerData ignisSoundTriggerData, float timeStamp, float chargeAmount)
		{
		}

		[Token(Token = "0x6001511")]
		[Address(RVA = "0xFD6D38", Offset = "0xFD6D38", VA = "0xFD6D38")]
		public CooldownData()
		{
		}
	}
	[Token(Token = "0x20004BF")]
	public class CooldownHandler
	{
		[Token(Token = "0x4001D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float cooldownBarElapsedTime;

		[Token(Token = "0x4001D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Vector3 startScale;

		[Token(Token = "0x4001D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 activatedScale;

		[Token(Token = "0x4001D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 currentTargetScale;

		[Token(Token = "0x4001D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AnimationCurve cooldownAnimationCurve;

		[Token(Token = "0x4001D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RectTransform canvasRectTransform;

		[Token(Token = "0x4001D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly CooldownData data;

		[Token(Token = "0x4001D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4001D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly IgnisSoundTriggerData soundTriggers;

		[Token(Token = "0x4001D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly PlayerSettings playerSettings;

		[Token(Token = "0x4001D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly HapticData hapticData;

		[Token(Token = "0x4001D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly GameData gameData;

		[Token(Token = "0x4001D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly InputData inputData;

		[Token(Token = "0x4001D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly Predicate<ToolOnCooldown> removeCooldownObject;

		[Token(Token = "0x6001515")]
		[Address(RVA = "0xFD6DD8", Offset = "0xFD6DD8", VA = "0xFD6DD8")]
		public CooldownHandler(CooldownData data, IRoomTimeProvider roomTimeProvider, IgnisSoundTriggerData soundTriggers, PlayerSettings playerSettings, HapticData hapticData, GameData gameData, InputData inputData)
		{
		}

		[Token(Token = "0x6001516")]
		[Address(RVA = "0xFD6F2C", Offset = "0xFD6F2C", VA = "0xFD6F2C")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0xFD7F74", Offset = "0xFD7F74", VA = "0xFD7F74")]
		private bool RemoveCooldownObject(ToolOnCooldown tool)
		{
			return default(bool);
		}

		[Token(Token = "0x6001518")]
		[Address(RVA = "0xFD8110", Offset = "0xFD8110", VA = "0xFD8110")]
		public void CleanUp()
		{
		}
	}
	[Token(Token = "0x20004C0")]
	public enum VisorParticleEffectType
	{
		[Token(Token = "0x4001D37")]
		None,
		[Token(Token = "0x4001D38")]
		Freeze
	}
	[Serializable]
	[Token(Token = "0x20004C1")]
	public class VisorParticleEffect
	{
		[Token(Token = "0x4001D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string id;

		[Token(Token = "0x4001D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VisorParticleEffectType effectType;

		[Token(Token = "0x4001D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float timeActive;

		[Token(Token = "0x4001D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<VisorParticleEffectStep> particleEffectSteps;

		[Token(Token = "0x4001D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[MasterCustomEvent]
		public string despawnSoundTrigger;

		[Token(Token = "0x6001519")]
		[Address(RVA = "0xFD8368", Offset = "0xFD8368", VA = "0xFD8368")]
		public VisorParticleEffect()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004C2")]
	public class VisorParticleEffectStep
	{
		[Token(Token = "0x4001D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public int poolId;

		[Token(Token = "0x4001D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParticleEffectReference particleEffectReference;

		[Token(Token = "0x4001D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speed;

		[Token(Token = "0x4001D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[MasterCustomEvent]
		public string[] effectSoundTrigger;

		[Token(Token = "0x600151A")]
		[Address(RVA = "0xFD83E4", Offset = "0xFD83E4", VA = "0xFD83E4")]
		public VisorParticleEffectStep()
		{
		}
	}
	[Token(Token = "0x20004C3")]
	[CreateAssetMenu(menuName = "Settings/DamageIndicator/VisorParticleEffectSettings")]
	public class VisorParticleEffectSettings : ScriptableObject
	{
		[Token(Token = "0x4001D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<VisorParticleEffect> visorParticleEffects;

		[Token(Token = "0x600151B")]
		[Address(RVA = "0xFD83EC", Offset = "0xFD83EC", VA = "0xFD83EC")]
		public VisorParticleEffectSettings()
		{
		}
	}
	[Token(Token = "0x20004C4")]
	public class ArtDebugArenaReferences : MonoBehaviour
	{
		[Token(Token = "0x4001D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject osoCharacter;

		[Token(Token = "0x4001D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject testTool;

		[Token(Token = "0x600151C")]
		[Address(RVA = "0xFD8468", Offset = "0xFD8468", VA = "0xFD8468")]
		public ArtDebugArenaReferences()
		{
		}
	}
	[Token(Token = "0x20004C5")]
	public class ArtDebugHandler
	{
		[Token(Token = "0x4001D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ArtDebugArenaReferences artDebugArenaReferences;

		[Token(Token = "0x600151D")]
		[Address(RVA = "0xFD8470", Offset = "0xFD8470", VA = "0xFD8470")]
		public ArtDebugHandler(ArtDebugArenaReferences artDebugArenaReferences)
		{
		}

		[Token(Token = "0x600151E")]
		[Address(RVA = "0xFD8498", Offset = "0xFD8498", VA = "0xFD8498")]
		[Conditional("IGNIS_DEBUG")]
		public void Init()
		{
		}
	}
	[Token(Token = "0x20004C6")]
	public class DebugAiPlanning
	{
		[Token(Token = "0x600151F")]
		[Address(RVA = "0xFD849C", Offset = "0xFD849C", VA = "0xFD849C")]
		public DebugAiPlanning()
		{
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0xFD84A4", Offset = "0xFD84A4", VA = "0xFD84A4")]
		[Conditional("IGNIS_DEBUG")]
		public void Init()
		{
		}

		[Token(Token = "0x6001521")]
		[Address(RVA = "0xFD84A8", Offset = "0xFD84A8", VA = "0xFD84A8")]
		[Conditional("IGNIS_DEBUG")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x20004C7")]
	public class DebugController
	{
		[Token(Token = "0x20004C8")]
		public class DebugLog : IDebugLogInterface
		{
			[Token(Token = "0x6001528")]
			[Address(RVA = "0xFD9C04", Offset = "0xFD9C04", VA = "0xFD9C04", Slot = "4")]
			public void Error(string message)
			{
			}

			[Token(Token = "0x6001529")]
			[Address(RVA = "0xFD9C10", Offset = "0xFD9C10", VA = "0xFD9C10", Slot = "5")]
			public void Warn(string message)
			{
			}

			[Token(Token = "0x600152A")]
			[Address(RVA = "0xFD9C1C", Offset = "0xFD9C1C", VA = "0xFD9C1C", Slot = "6")]
			public void Info(string message)
			{
			}

			[Token(Token = "0x600152B")]
			[Address(RVA = "0xFD90E8", Offset = "0xFD90E8", VA = "0xFD90E8")]
			public DebugLog()
			{
			}
		}

		[Token(Token = "0x4001D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform canvas;

		[Token(Token = "0x4001D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DebugLogger logger;

		[Token(Token = "0x4001D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DebugMenu debugMenu;

		[Token(Token = "0x4001D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DebugConsole console;

		[Token(Token = "0x4001D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly DebugSettings debugSettings;

		[Token(Token = "0x4001D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly InteractionSettings interactionSettings;

		[Token(Token = "0x4001D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly DebugData debugData;

		[Token(Token = "0x4001D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4001D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4001D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly PlayerSpawnPointReference playerSpawnPointReference;

		[Token(Token = "0x4001D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly InputData inputData;

		[Token(Token = "0x4001D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4001D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool isPlayerOne;

		[Token(Token = "0x4001D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly GameData gameData;

		[Token(Token = "0x4001D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform anchor;

		[Token(Token = "0x4001D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly ReplayData replayData;

		[Token(Token = "0x4001D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly TrailerData trailerData;

		[Token(Token = "0x4001D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private DebugSettingsHandler debugSettingsHandler;

		[Token(Token = "0x4001D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<ConsoleMessage> debugMessages;

		[Token(Token = "0x4001D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float timeDebugMenuHeldDown;

		[Token(Token = "0x4001D5A")]
		private const float TimeToOpenDebugMenu = 2f;

		[Token(Token = "0x4001D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private GameplayRules previousGameplayRules;

		[Token(Token = "0x4001D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool debugMenuActive;

		[Token(Token = "0x6001522")]
		[Address(RVA = "0xFD84AC", Offset = "0xFD84AC", VA = "0xFD84AC")]
		public DebugController(DebugSettings debugSettings, InteractionSettings interactionSettings, DebugData debugData, MessageSender messageSender, InputData inputData, GameMessageFactory gameMessageFactory, PlayerSpawnPointReference playerSpawnPointReference, GameData gameData, Transform anchor, ReplayData replayData, TrailerData trailerData, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x6001523")]
		[Address(RVA = "0xFD85A4", Offset = "0xFD85A4", VA = "0xFD85A4")]
		[Conditional("IGNIS_DEBUG")]
		public void Initialize(VrKeyboardData vrKeyboardData)
		{
		}

		[Token(Token = "0x6001524")]
		[Address(RVA = "0xFD9364", Offset = "0xFD9364", VA = "0xFD9364")]
		[Conditional("IGNIS_DEBUG")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001525")]
		[Address(RVA = "0xFD97AC", Offset = "0xFD97AC", VA = "0xFD97AC")]
		private void ReSubmitConsoleMessages()
		{
		}

		[Token(Token = "0x6001526")]
		[Address(RVA = "0xFD9858", Offset = "0xFD9858", VA = "0xFD9858")]
		private void SendNetworkedConsoleMessage(string consoleMessage)
		{
		}

		[Token(Token = "0x6001527")]
		[Address(RVA = "0xFD9AE0", Offset = "0xFD9AE0", VA = "0xFD9AE0")]
		[Conditional("IGNIS_DEBUG")]
		public void OnDestroy()
		{
		}
	}
	[Token(Token = "0x20004C9")]
	public class DebugStats
	{
		[Token(Token = "0x4001D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool isOffline;

		[Token(Token = "0x4001D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private GameMode gameMode;

		[Token(Token = "0x4001D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private EntryPoint.GameState gameState;

		[Token(Token = "0x4001D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private ArenaState arenaState;

		[Token(Token = "0x4001D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int master;

		[Token(Token = "0x4001D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int currentPlayers;

		[Token(Token = "0x4001D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int maxPlayers;

		[Token(Token = "0x4001D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int currentObservers;

		[Token(Token = "0x4001D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int maxObservers;

		[Token(Token = "0x4001D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int currentPing;

		[Token(Token = "0x4001D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string roomCode;

		[Token(Token = "0x4001D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string matchId;

		[Token(Token = "0x4001D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string botStatusMessage;

		[Token(Token = "0x4001D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private DebugStatsReferences debugStatsReferences;

		[Token(Token = "0x4001D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly DebugSettings debugSettings;

		[Token(Token = "0x4001D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly IgnisNetworkConnectionData networkConnectionModel;

		[Token(Token = "0x4001D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly GameData gameData;

		[Token(Token = "0x4001D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x600152C")]
		[Address(RVA = "0xFD9C28", Offset = "0xFD9C28", VA = "0xFD9C28")]
		public DebugStats(DebugSettings debugSettings, IgnisNetworkConnectionData networkConnectionModel, GameData gameData, ArenaGameStateData arenaGameStateData)
		{
		}

		[Token(Token = "0x600152D")]
		[Address(RVA = "0xFD9C68", Offset = "0xFD9C68", VA = "0xFD9C68")]
		[Conditional("IGNIS_DEBUG")]
		public void Init()
		{
		}

		[Token(Token = "0x600152E")]
		[Address(RVA = "0xFDA068", Offset = "0xFDA068", VA = "0xFDA068")]
		[Conditional("IGNIS_DEBUG")]
		public void Tick()
		{
		}

		[Token(Token = "0x600152F")]
		[Address(RVA = "0xFDA550", Offset = "0xFDA550", VA = "0xFDA550")]
		[Conditional("IGNIS_DEBUG")]
		public void OnChangeState(EntryPoint.GameState gameState)
		{
		}
	}
	[Token(Token = "0x20004CA")]
	public class AdjustColliderToRectTransform : MonoBehaviour
	{
		[Token(Token = "0x4001D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private BoxCollider boxcollider;

		[Token(Token = "0x4001D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private RectTransform rectTransform;

		[Token(Token = "0x6001530")]
		[Address(RVA = "0xFDA5E4", Offset = "0xFDA5E4", VA = "0xFDA5E4")]
		private void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x6001531")]
		[Address(RVA = "0xFDA680", Offset = "0xFDA680", VA = "0xFDA680")]
		public AdjustColliderToRectTransform()
		{
		}
	}
	[Token(Token = "0x20004CB")]
	public struct CommandInfo
	{
		[Token(Token = "0x4001D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string command;

		[Token(Token = "0x4001D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string help;

		[Token(Token = "0x4001D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type[] argumentTypes;

		[Token(Token = "0x6001532")]
		[Address(RVA = "0xFDA688", Offset = "0xFDA688", VA = "0xFDA688")]
		public CommandInfo(string name, Type[] types, string help = "")
		{
		}
	}
	[Token(Token = "0x20004CC")]
	public abstract class CommandBase
	{
		[Token(Token = "0x6001533")]
		public abstract void Run(CommandArg[] args);

		[Token(Token = "0x6001534")]
		[Address(RVA = "0xFDA694", Offset = "0xFDA694", VA = "0xFDA694")]
		protected CommandBase()
		{
		}
	}
	[Token(Token = "0x20004CD")]
	public class CommandArgs : CommandBase
	{
		[Token(Token = "0x4001D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Action<CommandArg[]> command;

		[Token(Token = "0x6001535")]
		[Address(RVA = "0xFDA69C", Offset = "0xFDA69C", VA = "0xFDA69C", Slot = "4")]
		public override void Run(CommandArg[] args)
		{
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0xFDA6C0", Offset = "0xFDA6C0", VA = "0xFDA6C0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001537")]
		[Address(RVA = "0xFDA7B8", Offset = "0xFDA7B8", VA = "0xFDA7B8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001538")]
		[Address(RVA = "0xFDA824", Offset = "0xFDA824", VA = "0xFDA824")]
		public CommandArgs(Action<CommandArg[]> command)
		{
		}
	}
	[Token(Token = "0x20004CE")]
	public class Command : CommandBase
	{
		[Token(Token = "0x4001D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Action command;

		[Token(Token = "0x6001539")]
		[Address(RVA = "0xFDA84C", Offset = "0xFDA84C", VA = "0xFDA84C", Slot = "4")]
		public override void Run(CommandArg[] args)
		{
		}

		[Token(Token = "0x600153A")]
		[Address(RVA = "0xFDA870", Offset = "0xFDA870", VA = "0xFDA870", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0xFDA968", Offset = "0xFDA968", VA = "0xFDA968", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600153C")]
		[Address(RVA = "0xFDA9D4", Offset = "0xFDA9D4", VA = "0xFDA9D4")]
		public Command(Action command)
		{
		}
	}
	[Token(Token = "0x20004CF")]
	public class Command<T> : CommandBase
	{
		[Token(Token = "0x4001D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Action<T> command;

		[Token(Token = "0x600153D")]
		public override void Run(CommandArg[] args)
		{
		}

		[Token(Token = "0x600153E")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600153F")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001540")]
		public Command(Action<T> command)
		{
		}
	}
	[Token(Token = "0x20004D0")]
	public class Command<T1, T2> : CommandBase
	{
		[Token(Token = "0x4001D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Action<T1, T2> command;

		[Token(Token = "0x6001541")]
		public override void Run(CommandArg[] args)
		{
		}

		[Token(Token = "0x6001542")]
		public Command(Action<T1, T2> command)
		{
		}
	}
	[Token(Token = "0x20004D1")]
	public class Command<T1, T2, T3> : CommandBase
	{
		[Token(Token = "0x4001D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Action<T1, T2, T3> command;

		[Token(Token = "0x6001543")]
		public override void Run(CommandArg[] args)
		{
		}

		[Token(Token = "0x6001544")]
		public Command(Action<T1, T2, T3> command)
		{
		}
	}
	[Token(Token = "0x20004D2")]
	public class Command<T1, T2, T3, T4> : CommandBase
	{
		[Token(Token = "0x4001D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Action<T1, T2, T3, T4> command;

		[Token(Token = "0x6001545")]
		public override void Run(CommandArg[] args)
		{
		}

		[Token(Token = "0x6001546")]
		public Command(Action<T1, T2, T3, T4> command)
		{
		}
	}
	[Token(Token = "0x20004D3")]
	public class Command<T1, T2, T3, T4, T5> : CommandBase
	{
		[Token(Token = "0x4001D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Action<T1, T2, T3, T4, T5> command;

		[Token(Token = "0x6001547")]
		public override void Run(CommandArg[] args)
		{
		}

		[Token(Token = "0x6001548")]
		public Command(Action<T1, T2, T3, T4, T5> command)
		{
		}
	}
	[Token(Token = "0x20004D4")]
	public class Command<T1, T2, T3, T4, T5, T6> : CommandBase
	{
		[Token(Token = "0x4001D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Action<T1, T2, T3, T4, T5, T6> command;

		[Token(Token = "0x6001549")]
		public override void Run(CommandArg[] args)
		{
		}

		[Token(Token = "0x600154A")]
		public Command(Action<T1, T2, T3, T4, T5, T6> command)
		{
		}
	}
	[Token(Token = "0x20004D5")]
	public struct CommandArg
	{
		[Token(Token = "0x4001D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public object Object;

		[Token(Token = "0x4001D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string String;

		[Token(Token = "0x4001D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Int;

		[Token(Token = "0x4001D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool Bool;

		[Token(Token = "0x4001D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Float;
	}
	[Token(Token = "0x20004D6")]
	public class DebugConsole
	{
		[Token(Token = "0x20004D7")]
		private enum VisiblityState
		{
			[Token(Token = "0x4001D8C")]
			Hidden,
			[Token(Token = "0x4001D8D")]
			Console,
			[Token(Token = "0x4001D8E")]
			Full
		}

		[Token(Token = "0x20004DA")]
		[CompilerGenerated]
		private sealed class <UpdateVisibility>d__36 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DebugConsole <>4__this;

			[Token(Token = "0x170000F5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001573")]
				[Address(RVA = "0xFDCED8", Offset = "0xFDCED8", VA = "0xFDCED8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001575")]
				[Address(RVA = "0xFDCF20", Offset = "0xFDCF20", VA = "0xFDCF20", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001570")]
			[Address(RVA = "0xFDCB38", Offset = "0xFDCB38", VA = "0xFDCB38")]
			[DebuggerHidden]
			public <UpdateVisibility>d__36(int <>1__state)
			{
			}

			[Token(Token = "0x6001571")]
			[Address(RVA = "0xFDCE18", Offset = "0xFDCE18", VA = "0xFDCE18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001572")]
			[Address(RVA = "0xFDCE1C", Offset = "0xFDCE1C", VA = "0xFDCE1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001574")]
			[Address(RVA = "0xFDCEE0", Offset = "0xFDCEE0", VA = "0xFDCEE0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VisiblityState currentVisibilty;

		[Token(Token = "0x4001D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<string, CommandInfo> commandBlueprints;

		[Token(Token = "0x4001D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, List<CommandBase>> commands;

		[Token(Token = "0x4001D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DebugConsoleReferences debugConsoleReferences;

		[Token(Token = "0x4001D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly DebugConsoleSettings debugConsoleSettings;

		[Token(Token = "0x4001D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly InteractionSettings interactionSettings;

		[Token(Token = "0x4001D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Queue<TextMeshProUGUI> logQueue;

		[Token(Token = "0x4001D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<LogType, Color> logColor;

		[Token(Token = "0x4001D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<string> history;

		[Token(Token = "0x4001D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static DebugConsole instance;

		[Token(Token = "0x170000F4")]
		public static DebugConsole Instance
		{
			[Token(Token = "0x600154B")]
			[Address(RVA = "0xFDA9FC", Offset = "0xFDA9FC", VA = "0xFDA9FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600154C")]
		[Address(RVA = "0xFD8E90", Offset = "0xFD8E90", VA = "0xFD8E90")]
		public DebugConsole(DebugConsoleSettings debugConsoleSettings, InteractionSettings interactionSettings)
		{
		}

		[Token(Token = "0x600154D")]
		[Address(RVA = "0xFDAA44", Offset = "0xFDAA44", VA = "0xFDAA44")]
		[Conditional("IGNIS_DEBUG")]
		public void Initialize(Transform transform)
		{
		}

		[Token(Token = "0x600154E")]
		[Address(RVA = "0xFDAD70", Offset = "0xFDAD70", VA = "0xFDAD70")]
		[Conditional("IGNIS_DEBUG")]
		public void Tick()
		{
		}

		[Token(Token = "0x600154F")]
		[Address(RVA = "0xFDB1E4", Offset = "0xFDB1E4", VA = "0xFDB1E4")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCommand(string name, Action<CommandArg[]> action, Type[] types, string help = "")
		{
		}

		[Token(Token = "0x6001550")]
		[Address(RVA = "0xFDB4F0", Offset = "0xFDB4F0", VA = "0xFDB4F0")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCommand(string name, Action action, string help = "")
		{
		}

		[Token(Token = "0x6001551")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCommand<T>(string name, Action<T> action, string help = "")
		{
		}

		[Token(Token = "0x6001552")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCommand<T1, T2>(string name, Action<T1, T2> action, string help = "")
		{
		}

		[Token(Token = "0x6001553")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCommand<T1, T2, T3>(string name, Action<T1, T2, T3> action, string help = "")
		{
		}

		[Token(Token = "0x6001554")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCommand<T1, T2, T3, T4>(string name, Action<T1, T2, T3, T4> action, string help = "")
		{
		}

		[Token(Token = "0x6001555")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCommand<T1, T2, T3, T4, T5, T6>(string name, Action<T1, T2, T3, T4, T5, T6> action, string help = "")
		{
		}

		[Token(Token = "0x6001556")]
		[Address(RVA = "0xFDB684", Offset = "0xFDB684", VA = "0xFDB684")]
		[Conditional("IGNIS_DEBUG")]
		public void RemoveCommand(string name, Action<CommandArg[]> action)
		{
		}

		[Token(Token = "0x6001557")]
		[Address(RVA = "0xFDB688", Offset = "0xFDB688", VA = "0xFDB688")]
		[Conditional("IGNIS_DEBUG")]
		public void RemoveCommand(string name, Action action)
		{
		}

		[Token(Token = "0x6001558")]
		[Conditional("IGNIS_DEBUG")]
		public void RemoveCommand<T>(string name, Action<T> action)
		{
		}

		[Token(Token = "0x6001559")]
		[Conditional("IGNIS_DEBUG")]
		public void RemoveCommand<T1, T2>(string name, Action<T1, T2> action)
		{
		}

		[Token(Token = "0x600155A")]
		[Conditional("IGNIS_DEBUG")]
		public void RemoveCommand<T1, T2, T3>(string name, Action<T1, T2, T3> action)
		{
		}

		[Token(Token = "0x600155B")]
		[Conditional("IGNIS_DEBUG")]
		public void RemoveCommand<T1, T2, T3, T4>(string name, Action<T1, T2, T3, T4> action)
		{
		}

		[Token(Token = "0x600155C")]
		[Conditional("IGNIS_DEBUG")]
		public void RemoveCommand<T1, T2, T3, T4, T5>(string name, Action<T1, T2, T3, T4, T5> action)
		{
		}

		[Token(Token = "0x600155D")]
		[Conditional("IGNIS_DEBUG")]
		public void RemoveCommand<T1, T2, T3, T4, T5, T6>(string name, Action<T1, T2, T3, T4, T5, T6> action)
		{
		}

		[Token(Token = "0x600155E")]
		[Address(RVA = "0xFDB68C", Offset = "0xFDB68C", VA = "0xFDB68C")]
		[Conditional("IGNIS_DEBUG")]
		public void RemoveCommandObject(string name, object action)
		{
		}

		[Token(Token = "0x600155F")]
		[Address(RVA = "0xFDB8B8", Offset = "0xFDB8B8", VA = "0xFDB8B8")]
		[Conditional("IGNIS_DEBUG")]
		public void BumpVisibility()
		{
		}

		[Token(Token = "0x6001560")]
		[Address(RVA = "0xFDB8C8", Offset = "0xFDB8C8", VA = "0xFDB8C8")]
		[Conditional("IGNIS_DEBUG")]
		public void RunCommand(string commandString, bool saveCommandInHistory = false)
		{
		}

		[Token(Token = "0x6001561")]
		[Address(RVA = "0xFDCA14", Offset = "0xFDCA14", VA = "0xFDCA14")]
		public bool IsCommandAvaiable(string command)
		{
			return default(bool);
		}

		[Token(Token = "0x6001562")]
		[Address(RVA = "0xFDAC60", Offset = "0xFDAC60", VA = "0xFDAC60")]
		private void SetVisisbilityState(VisiblityState state)
		{
		}

		[Token(Token = "0x6001563")]
		[Address(RVA = "0xFDCAD0", Offset = "0xFDCAD0", VA = "0xFDCAD0")]
		[IteratorStateMachine(typeof(<UpdateVisibility>d__36))]
		private IEnumerator UpdateVisibility()
		{
			return null;
		}

		[Token(Token = "0x6001564")]
		[Address(RVA = "0xFDBB88", Offset = "0xFDBB88", VA = "0xFDBB88")]
		private bool CreateArguments(ref CommandInfo command, ref CommandArg[] args, string[] types)
		{
			return default(bool);
		}

		[Token(Token = "0x6001565")]
		[Address(RVA = "0xFDB338", Offset = "0xFDB338", VA = "0xFDB338")]
		private void SetupCommand(string command, Type[] types, string help)
		{
		}

		[Token(Token = "0x6001566")]
		[Address(RVA = "0xFDB64C", Offset = "0xFDB64C", VA = "0xFDB64C")]
		private void SetupCommand(string command, MethodBase method, string help)
		{
		}

		[Token(Token = "0x6001567")]
		[Address(RVA = "0xFDC718", Offset = "0xFDC718", VA = "0xFDC718")]
		private void LogInternal(string mesage, LogType type = LogType.Log)
		{
		}

		[Token(Token = "0x6001568")]
		[Address(RVA = "0xFDCC08", Offset = "0xFDCC08", VA = "0xFDCC08")]
		private Type[] GetCommandBlueprint(MethodBase method)
		{
			return null;
		}

		[Token(Token = "0x6001569")]
		[Address(RVA = "0xFDB820", Offset = "0xFDB820", VA = "0xFDB820")]
		private void CleanUpCommands(string command)
		{
		}

		[Token(Token = "0x600156A")]
		[Address(RVA = "0xFD9BBC", Offset = "0xFD9BBC", VA = "0xFD9BBC")]
		public void Destroy()
		{
		}
	}
	[Token(Token = "0x20004DB")]
	public static class ConsoleHistory
	{
		[Token(Token = "0x4001D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<string> history;

		[Token(Token = "0x4001D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentIndex;

		[Token(Token = "0x6001576")]
		[Address(RVA = "0xFDC8F4", Offset = "0xFDC8F4", VA = "0xFDC8F4")]
		public static void Push(string command)
		{
		}

		[Token(Token = "0x6001577")]
		[Address(RVA = "0xFDAEF0", Offset = "0xFDAEF0", VA = "0xFDAEF0")]
		public static string Next()
		{
			return null;
		}

		[Token(Token = "0x6001578")]
		[Address(RVA = "0xFDAFFC", Offset = "0xFDAFFC", VA = "0xFDAFFC")]
		public static string Previous()
		{
			return null;
		}

		[Token(Token = "0x6001579")]
		[Address(RVA = "0xFDCF28", Offset = "0xFDCF28", VA = "0xFDCF28")]
		public static void Clear()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004DC")]
	public class ConsoleAutoComplete
	{
		[Token(Token = "0x4001D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private RectTransform root;

		[Token(Token = "0x4001D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TextMeshProUGUI outputTemplate;

		[Token(Token = "0x4001D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private RectTransform targetPostion;

		[Token(Token = "0x4001D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<string> availableCommands;

		[Token(Token = "0x4001D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<TextMeshProUGUI> buffer;

		[Token(Token = "0x600157B")]
		[Address(RVA = "0xFDCB60", Offset = "0xFDCB60", VA = "0xFDCB60")]
		public void AddCommand(string command)
		{
		}

		[Token(Token = "0x600157C")]
		[Address(RVA = "0xFDCD28", Offset = "0xFDCD28", VA = "0xFDCD28")]
		public void RemoveCommand(string command)
		{
		}

		[Token(Token = "0x600157D")]
		[Address(RVA = "0xFDB150", Offset = "0xFDB150", VA = "0xFDB150")]
		public string AutoComplete(string currentString)
		{
			return null;
		}

		[Token(Token = "0x600157E")]
		[Address(RVA = "0xFDD05C", Offset = "0xFDD05C", VA = "0xFDD05C")]
		public void Clear()
		{
		}

		[Token(Token = "0x600157F")]
		[Address(RVA = "0xFDD214", Offset = "0xFDD214", VA = "0xFDD214")]
		public void FillBuffer(string currentString)
		{
		}

		[Token(Token = "0x6001580")]
		[Address(RVA = "0xFDCA6C", Offset = "0xFDCA6C", VA = "0xFDCA6C")]
		public void UpdatePostion()
		{
		}

		[Token(Token = "0x6001581")]
		[Address(RVA = "0xFDD564", Offset = "0xFDD564", VA = "0xFDD564")]
		public ConsoleAutoComplete()
		{
		}
	}
	[Token(Token = "0x20004DE")]
	public class DebugConsoleReferences : MonoBehaviour
	{
		[Token(Token = "0x4001D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TMP_InputField consoleInput;

		[Token(Token = "0x4001D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI outputTemplate;

		[Token(Token = "0x4001D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RectTransform outputRoot;

		[Token(Token = "0x4001DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ScrollRect outputScroll;

		[Token(Token = "0x4001DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ConsoleAutoComplete autoComplete;

		[Token(Token = "0x6001584")]
		[Address(RVA = "0xFDD648", Offset = "0xFDD648", VA = "0xFDD648")]
		public DebugConsoleReferences()
		{
		}
	}
	[Token(Token = "0x20004DF")]
	[CreateAssetMenu(menuName = "Debug/DebugConsoleSettings")]
	public class DebugConsoleSettings : ScriptableObject
	{
		[Token(Token = "0x4001DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DebugConsoleReferences debugConsoleReferences;

		[Token(Token = "0x6001585")]
		[Address(RVA = "0xFDD650", Offset = "0xFDD650", VA = "0xFDD650")]
		public DebugConsoleSettings()
		{
		}
	}
	[Token(Token = "0x20004E0")]
	public class DebugData
	{
		[Token(Token = "0x4001DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isActive;

		[Token(Token = "0x4001DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool allowLogging;

		[Token(Token = "0x4001DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool popUpOnError;

		[Token(Token = "0x4001DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool setDebugActive;

		[Token(Token = "0x4001DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool debugForceOn;

		[Token(Token = "0x6001586")]
		[Address(RVA = "0xFDD658", Offset = "0xFDD658", VA = "0xFDD658")]
		public DebugData()
		{
		}
	}
	[Token(Token = "0x20004E1")]
	[CreateAssetMenu(menuName = "Debug/IgnoreList")]
	public class DebugIgnoreSettings : ScriptableObject
	{
		[Token(Token = "0x4001DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<ScriptableObject> ignoreList;

		[Token(Token = "0x6001587")]
		[Address(RVA = "0xFDD668", Offset = "0xFDD668", VA = "0xFDD668")]
		public DebugIgnoreSettings()
		{
		}
	}
	[Token(Token = "0x20004E2")]
	public class DebugLogger
	{
		[Token(Token = "0x4001DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int logSize;

		[Token(Token = "0x4001DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<DebugButton> logData;

		[Token(Token = "0x4001DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<LogType, Color> logColor;

		[Token(Token = "0x4001DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DebugLoggerSettings debugLoggerSettings;

		[Token(Token = "0x4001DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly InteractionSettings interactionSettings;

		[Token(Token = "0x4001DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly DebugData debugData;

		[Token(Token = "0x4001DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DebugLoggerReferences debugLoggerReferences;

		[Token(Token = "0x4001DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool reportedError;

		[Token(Token = "0x4001DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float scrollOffset;

		[Token(Token = "0x6001588")]
		[Address(RVA = "0xFD8CAC", Offset = "0xFD8CAC", VA = "0xFD8CAC")]
		public DebugLogger(DebugLoggerSettings debugLoggerSettings, InteractionSettings interactionSettings, DebugData debugData)
		{
		}

		[Token(Token = "0x6001589")]
		[Address(RVA = "0xFDD670", Offset = "0xFDD670", VA = "0xFDD670")]
		[Conditional("IGNIS_DEBUG")]
		public void Initialize(Transform root)
		{
		}

		[Token(Token = "0x600158A")]
		[Address(RVA = "0xFDDA40", Offset = "0xFDDA40", VA = "0xFDDA40")]
		private void OnLogMessage(string logString, string stackTrace, LogType type)
		{
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0xFDDECC", Offset = "0xFDDECC", VA = "0xFDDECC")]
		[Conditional("IGNIS_DEBUG")]
		private void ShowStackTrace(string stackTrace)
		{
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0xFDDEF8", Offset = "0xFDDEF8", VA = "0xFDDEF8")]
		public void OnDestroy()
		{
		}
	}
	[Token(Token = "0x20004E4")]
	public class DebugLoggerReferences : MonoBehaviour
	{
		[Token(Token = "0x4001DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform content;

		[Token(Token = "0x4001DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI stackTraceText;

		[Token(Token = "0x4001DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DebugButton mesageTemplate;

		[Token(Token = "0x4001DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ScrollRect scrollRect;

		[Token(Token = "0x4001DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ScrollRect stackTraceScrollRect;

		[Token(Token = "0x4001DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action onDestoryed;

		[Token(Token = "0x6001591")]
		[Address(RVA = "0xFDE034", Offset = "0xFDE034", VA = "0xFDE034")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6001592")]
		[Address(RVA = "0xFDE050", Offset = "0xFDE050", VA = "0xFDE050")]
		public DebugLoggerReferences()
		{
		}
	}
	[Token(Token = "0x20004E5")]
	[CreateAssetMenu(menuName = "Debug/DebugLoggerSettings")]
	public class DebugLoggerSettings : ScriptableObject
	{
		[Token(Token = "0x4001DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DebugLoggerReferences debugLoggerReferences;

		[Token(Token = "0x6001593")]
		[Address(RVA = "0xFDE058", Offset = "0xFDE058", VA = "0xFDE058")]
		public DebugLoggerSettings()
		{
		}
	}
	[Token(Token = "0x20004E6")]
	public enum DebugCategory
	{
		[Token(Token = "0x4001DBC")]
		General,
		[Token(Token = "0x4001DBD")]
		LoadOut,
		[Token(Token = "0x4001DBE")]
		Match,
		[Token(Token = "0x4001DBF")]
		Menu,
		[Token(Token = "0x4001DC0")]
		Network,
		[Token(Token = "0x4001DC1")]
		Replay,
		[Token(Token = "0x4001DC2")]
		Account,
		[Token(Token = "0x4001DC3")]
		Settings,
		[Token(Token = "0x4001DC4")]
		AI,
		[Token(Token = "0x4001DC5")]
		BotEmoteRecord,
		[Token(Token = "0x4001DC6")]
		TournamentEvent,
		[Token(Token = "0x4001DC7")]
		Spectator,
		[Token(Token = "0x4001DC8")]
		Missions,
		[Token(Token = "0x4001DC9")]
		StoryEvent,
		[Token(Token = "0x4001DCA")]
		Platform,
		[Token(Token = "0x4001DCB")]
		Arcades,
		[Token(Token = "0x4001DCC")]
		BayTek,
		[Token(Token = "0x4001DCD")]
		Inventory,
		[Token(Token = "0x4001DCE")]
		KnockoutTournament
	}
	[Token(Token = "0x20004E7")]
	public interface IDebugLogInterface
	{
		[Token(Token = "0x6001594")]
		void Error(string message);

		[Token(Token = "0x6001595")]
		void Warn(string message);

		[Token(Token = "0x6001596")]
		void Info(string message);
	}
	[Token(Token = "0x20004E8")]
	public class CommandInterpeter
	{
		[Token(Token = "0x4001DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isNetworked;

		[Token(Token = "0x4001DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Func<string>[] args;

		[Token(Token = "0x4001DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string name;

		[Token(Token = "0x6001597")]
		[Address(RVA = "0xFDE060", Offset = "0xFDE060", VA = "0xFDE060")]
		public string GetCommand()
		{
			return null;
		}

		[Token(Token = "0x6001598")]
		[Address(RVA = "0xFDE1D0", Offset = "0xFDE1D0", VA = "0xFDE1D0")]
		public CommandInterpeter(string name, int size, bool isNetworked)
		{
		}
	}
	[Token(Token = "0x20004E9")]
	public class DebugMenuData
	{
		[Token(Token = "0x4001DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VrKeyboardData vrKeyboardData;

		[Token(Token = "0x6001599")]
		[Address(RVA = "0xFDE250", Offset = "0xFDE250", VA = "0xFDE250")]
		public DebugMenuData()
		{
		}
	}
	[Token(Token = "0x20004EA")]
	public class DebugMenu
	{
		[Token(Token = "0x20004EB")]
		private struct DebugTabData
		{
			[Token(Token = "0x4001DE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public DebugTab tab;

			[Token(Token = "0x4001DE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public ScrollRect[] scrollView;

			[Token(Token = "0x4001DE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public DebugButton tabButton;

			[Token(Token = "0x60015C4")]
			[Address(RVA = "0xFDE8C8", Offset = "0xFDE8C8", VA = "0xFDE8C8")]
			public DebugTabData(DebugTab tab, DebugButton tabButton, int numViews)
			{
			}
		}

		[Token(Token = "0x4001DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static DebugMenu instance;

		[Token(Token = "0x4001DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DebugMenuReferences debugMenuReferences;

		[Token(Token = "0x4001DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DebugMenuSettings settings;

		[Token(Token = "0x4001DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly InteractionSettings interactionSettings;

		[Token(Token = "0x4001DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Action<string> networkedConsoleMessage;

		[Token(Token = "0x4001DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<DebugCategory, DebugTabData> debugTabs;

		[Token(Token = "0x4001DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform currentMenu;

		[Token(Token = "0x4001DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject currentTab;

		[Token(Token = "0x4001DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<string, GameObject> currentElements;

		[Token(Token = "0x4001DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<string, CommandInterpeter> commands;

		[Token(Token = "0x4001DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<UIElement> elements;

		[Token(Token = "0x4001DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool initialized;

		[Token(Token = "0x4001DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly Dictionary<Type, UIElement> defaultLookUp;

		[Token(Token = "0x4001DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly Dictionary<DebugCategory, int> tabSetup;

		[Token(Token = "0x4001DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly IDebugLogInterface logInterface;

		[Token(Token = "0x4001DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4001DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private DebugMenuData debugMenuData;

		[Token(Token = "0x600159A")]
		[Address(RVA = "0xFD90F0", Offset = "0xFD90F0", VA = "0xFD90F0")]
		public DebugMenu(DebugMenuSettings settings, InteractionSettings interactionSettings, VrKeyboardData vrKeyboardData, Action<string> networkedConsoleMessage, Dictionary<Type, UIElement> defaultLookUp, Dictionary<DebugCategory, int> tabSetup, IDebugLogInterface logInterface, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0xFDE258", Offset = "0xFDE258", VA = "0xFDE258")]
		[Conditional("IGNIS_DEBUG")]
		public void Initialize(Transform transform)
		{
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0xFD970C", Offset = "0xFD970C", VA = "0xFD970C")]
		public void Tick()
		{
		}

		[Token(Token = "0x600159D")]
		[Address(RVA = "0xFDEA1C", Offset = "0xFDEA1C", VA = "0xFDEA1C")]
		[Conditional("IGNIS_DEBUG")]
		public void AddText(string name, DebugCategory tab = DebugCategory.General, int subTab = 0)
		{
		}

		[Token(Token = "0x600159E")]
		[Address(RVA = "0xFDEC54", Offset = "0xFDEC54", VA = "0xFDEC54")]
		[Conditional("IGNIS_DEBUG")]
		public void AddText(string name, TextElement element, DebugCategory tab = DebugCategory.General, int subTab = 0)
		{
		}

		[Token(Token = "0x600159F")]
		[Address(RVA = "0xFDEF90", Offset = "0xFDEF90", VA = "0xFDEF90")]
		[Conditional("IGNIS_DEBUG")]
		public void AddLayout(string id, RectTransform rectTransform, DebugCategory tab = DebugCategory.General, int subTab = 0)
		{
		}

		[Token(Token = "0x60015A0")]
		[Address(RVA = "0xFDF250", Offset = "0xFDF250", VA = "0xFDF250")]
		[Conditional("IGNIS_DEBUG")]
		public void AddLayout(string id, List<UIElement> elements, int elementsPerRow, DebugCategory tab = DebugCategory.General, int subTab = 0)
		{
		}

		[Token(Token = "0x60015A1")]
		[Address(RVA = "0xFDF2B8", Offset = "0xFDF2B8", VA = "0xFDF2B8")]
		[Conditional("IGNIS_DEBUG")]
		public void AddLayout(string id, List<UIElement> elements, int ElementsPerRow, RectTransform parent)
		{
		}

		[Token(Token = "0x60015A2")]
		[Address(RVA = "0xFDF77C", Offset = "0xFDF77C", VA = "0xFDF77C")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCommand(string name, Action action, DebugCategory tab = DebugCategory.General, int subTab = 0, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015A3")]
		[Address(RVA = "0xFDF7E4", Offset = "0xFDF7E4", VA = "0xFDF7E4")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCommand(string name, Action action, RectTransform parent, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015A4")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCommand<T>(string name, Action<T> action, [Optional] UIElement element, DebugCategory tab = DebugCategory.General, int subTab = 0, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015A5")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCommand<T>(string name, Action<T> action, RectTransform parent, [Optional] UIElement element, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015A6")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCommand<T1, T2>(string name, Action<T1, T2> action, [Optional] UIElement element1, [Optional] UIElement element2, DebugCategory tab = DebugCategory.General, int subTab = 0, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015A7")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCommand<T1, T2>(string name, Action<T1, T2> action, RectTransform parent, [Optional] UIElement element1, [Optional] UIElement element2, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015A8")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCommand<T1, T2, T3>(string name, Action<T1, T2, T3> action, [Optional] UIElement element1, [Optional] UIElement element2, [Optional] UIElement element3, int elementsPerRow = 3, DebugCategory tab = DebugCategory.General, int subTab = 0, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015A9")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCommand<T1, T2, T3>(string name, Action<T1, T2, T3> action, RectTransform parent, [Optional] UIElement element1, [Optional] UIElement element2, [Optional] UIElement element3, int elementsPerRow = 3, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015AA")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCommand<T1, T2, T3, T4>(string name, Action<T1, T2, T3, T4> action, [Optional] UIElement element1, [Optional] UIElement element2, [Optional] UIElement element3, [Optional] UIElement element4, int elementsPerRow = 3, DebugCategory tab = DebugCategory.General, int subTab = 0, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015AB")]
		[Conditional("IGNIS_DEBUG")]
		public void AddCommand<T1, T2, T3, T4>(string name, Action<T1, T2, T3, T4> action, RectTransform parent, [Optional] UIElement element1, [Optional] UIElement element2, [Optional] UIElement element3, [Optional] UIElement element4, int elementsPerRow = 3, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015AC")]
		[Conditional("IGNIS_DEBUG")]
		public void AddTriggeredCommand<T1>(string name, Action<T1> action, [Optional] UIElement element, int elementsPerRow = 3, DebugCategory tab = DebugCategory.General, int subTab = 0, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015AD")]
		[Conditional("IGNIS_DEBUG")]
		public void AddTriggeredCommand<T1>(string name, Action<T1> action, RectTransform parent, [Optional] UIElement element, int elementsPerRow = 3, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015AE")]
		[Conditional("IGNIS_DEBUG")]
		public void AddTriggeredCommand<T1, T2>(string name, Action<T1, T2> action, [Optional] UIElement element1, [Optional] UIElement element2, int elementsPerRow = 3, DebugCategory tab = DebugCategory.General, int subTab = 0, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015AF")]
		[Conditional("IGNIS_DEBUG")]
		public void AddTriggeredCommand<T1, T2>(string name, Action<T1, T2> action, RectTransform parent, [Optional] UIElement element1, [Optional] UIElement element2, int elementsPerRow = 3, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015B0")]
		[Conditional("IGNIS_DEBUG")]
		public void AddTriggeredCommand<T1, T2, T3>(string name, Action<T1, T2, T3> action, [Optional] UIElement element1, [Optional] UIElement element2, [Optional] UIElement element3, int elementsPerRow = 3, DebugCategory tab = DebugCategory.General, int subTab = 0, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015B1")]
		[Conditional("IGNIS_DEBUG")]
		public void AddTriggeredCommand<T1, T2, T3>(string name, Action<T1, T2, T3> action, RectTransform parent, [Optional] UIElement element1, [Optional] UIElement element2, [Optional] UIElement element3, int elementsPerRow = 3, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015B2")]
		[Conditional("IGNIS_DEBUG")]
		public void AddTriggeredCommand<T1, T2, T3, T4>(string name, Action<T1, T2, T3, T4> action, [Optional] UIElement element1, [Optional] UIElement element2, [Optional] UIElement element3, [Optional] UIElement element4, int elementsPerRow = 3, DebugCategory tab = DebugCategory.General, int subTab = 0, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015B3")]
		[Conditional("IGNIS_DEBUG")]
		public void AddTriggeredCommand<T1, T2, T3, T4>(string name, Action<T1, T2, T3, T4> action, RectTransform parent, [Optional] UIElement element1, [Optional] UIElement element2, [Optional] UIElement element3, [Optional] UIElement element4, int elementsPerRow = 3, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015B4")]
		[Conditional("IGNIS_DEBUG")]
		public void AddTriggeredCommand<T1, T2, T3, T4, T5, T6>(string name, Action<T1, T2, T3, T4, T5, T6> action, [Optional] UIElement element1, [Optional] UIElement element2, [Optional] UIElement element3, [Optional] UIElement element4, [Optional] UIElement element5, [Optional] UIElement element6, int elementsPerRow = 3, DebugCategory tab = DebugCategory.General, int subTab = 0, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015B5")]
		[Conditional("IGNIS_DEBUG")]
		public void AddTriggeredCommand<T1, T2, T3, T4, T5, T6>(string name, Action<T1, T2, T3, T4, T5, T6> action, RectTransform parent, [Optional] UIElement element1, [Optional] UIElement element2, [Optional] UIElement element3, [Optional] UIElement element4, [Optional] UIElement element5, [Optional] UIElement element6, int elementsPerRow = 3, bool isNetworked = false, string help = "")
		{
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0xFDFA58", Offset = "0xFDFA58", VA = "0xFDFA58")]
		[Conditional("IGNIS_DEBUG")]
		public void RemoveCommand(string name, Action action)
		{
		}

		[Token(Token = "0x60015B7")]
		[Conditional("IGNIS_DEBUG")]
		public void RemoveCommand<T>(string name, Action<T> action)
		{
		}

		[Token(Token = "0x60015B8")]
		[Conditional("IGNIS_DEBUG")]
		public void RemoveCommand<T1, T2>(string name, Action<T1, T2> action)
		{
		}

		[Token(Token = "0x60015B9")]
		[Conditional("IGNIS_DEBUG")]
		public void RemoveCommand<T1, T2, T3>(string name, Action<T1, T2, T3> action)
		{
		}

		[Token(Token = "0x60015BA")]
		[Conditional("IGNIS_DEBUG")]
		public void RemoveCommand<T1, T2, T3, T4>(string name, Action<T1, T2, T3, T4> action)
		{
		}

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0xFDFAB0", Offset = "0xFDFAB0", VA = "0xFDFAB0")]
		[Conditional("IGNIS_DEBUG")]
		public void RemoveLayout(string id)
		{
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0xFDE938", Offset = "0xFDE938", VA = "0xFDE938")]
		private void SetActiveTab(DebugCategory tab)
		{
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0xFDFBA4", Offset = "0xFDFBA4", VA = "0xFDFBA4")]
		private void RunConsoleCommand(CommandInterpeter command)
		{
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0xFDFDC0", Offset = "0xFDFDC0", VA = "0xFDFDC0")]
		private void CreateCommand(string name, List<UIElement> elements, bool isNetworked)
		{
		}

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0xFE0148", Offset = "0xFE0148", VA = "0xFE0148")]
		private void CreateTriggeredCommand(string name, List<UIElement> elements, bool isNetworked)
		{
		}

		[Token(Token = "0x60015C0")]
		[Address(RVA = "0xFE0494", Offset = "0xFE0494", VA = "0xFE0494")]
		private bool SetupElements(string name, MethodBase method, List<UIElement> elements)
		{
			return default(bool);
		}

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0xFE06EC", Offset = "0xFE06EC", VA = "0xFE06EC")]
		private bool CreateElementData(Type[] types, ref List<UIElement> data)
		{
			return default(bool);
		}

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0xFE05CC", Offset = "0xFE05CC", VA = "0xFE05CC")]
		private Type[] GetTypesFromMethod(MethodBase method)
		{
			return null;
		}

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0xFD9B74", Offset = "0xFD9B74", VA = "0xFD9B74")]
		public void Destroy()
		{
		}
	}
	[Token(Token = "0x20004F0")]
	public class DebugMenuReferences : MonoBehaviour
	{
		[Token(Token = "0x4001DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Content Roots")]
		public Transform tableContent;

		[Token(Token = "0x4001DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform tabContent;

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0xFE0B08", Offset = "0xFE0B08", VA = "0xFE0B08")]
		public DebugMenuReferences()
		{
		}
	}
	[Token(Token = "0x20004F1")]
	[CreateAssetMenu(menuName = "Debug/DebugMenuSettings")]
	public class DebugMenuSettings : ScriptableObject
	{
		[Token(Token = "0x4001DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DebugMenuReferences debugMenuReferences;

		[Token(Token = "0x4001DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Templates")]
		public DebugButton buttonTemplate;

		[Token(Token = "0x4001DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI titleTemplate;

		[Token(Token = "0x4001DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TMP_InputField inputTemplate;

		[Token(Token = "0x4001DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DebugSlider sliderTemplate;

		[Token(Token = "0x4001DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public DebugSliderInt sliderIntTemplate;

		[Token(Token = "0x4001DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TMP_Dropdown dropdownTemplate;

		[Token(Token = "0x4001DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Toggle toggleTemplate;

		[Token(Token = "0x4001DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public RectTransform seperator;

		[Token(Token = "0x4001DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public VRInputField vrInputField;

		[Token(Token = "0x4001DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("LayoutTemplates")]
		public ScrollRect scrollViewTemplate;

		[Token(Token = "0x4001DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public DebugTab tableRootTemplate;

		[Token(Token = "0x4001DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public DebugButton tabButtonTemplate;

		[Token(Token = "0x4001DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public RectTransform horisontalLayoutTemplate;

		[Token(Token = "0x4001E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public RectTransform verticalLayoutTemplate;

		[Token(Token = "0x60015CE")]
		[Address(RVA = "0xFE0B10", Offset = "0xFE0B10", VA = "0xFE0B10")]
		public DebugMenuSettings()
		{
		}
	}
	[Token(Token = "0x20004F2")]
	[CreateAssetMenu(menuName = "Debug/DebugSettings")]
	public class DebugSettings : ScriptableObject
	{
		[Token(Token = "0x4001E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject canvas;

		[Token(Token = "0x4001E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DebugLoggerSettings debugLoggerSettings;

		[Token(Token = "0x4001E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DebugConsoleSettings debugConsoleSettings;

		[Token(Token = "0x4001E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DebugMenuSettings debugMenuSettings;

		[Token(Token = "0x4001E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 classicPosition;

		[Token(Token = "0x4001E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 shotoutPosition;

		[Token(Token = "0x4001E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Stats")]
		public DebugStatsReferences debugStatsReferences;

		[Token(Token = "0x4001E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string settingsPath;

		[Token(Token = "0x4001E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string ignoreListPath;

		[Token(Token = "0x4001E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public DebugSettingsHandlerSettings debugSettingsHandlerSettings;

		[Token(Token = "0x60015CF")]
		[Address(RVA = "0xFE0B18", Offset = "0xFE0B18", VA = "0xFE0B18")]
		public DebugSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004F3")]
	public class DebugSettingsHandlerSettings
	{
		[Token(Token = "0x4001E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Indentation indentation;

		[Token(Token = "0x4001E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ScriptableObject[] scriptableObjects;

		[Token(Token = "0x60015D0")]
		[Address(RVA = "0xFE0B8C", Offset = "0xFE0B8C", VA = "0xFE0B8C")]
		public DebugSettingsHandlerSettings()
		{
		}
	}
	[Token(Token = "0x20004F4")]
	public class DebugSettingsHandler
	{
		[Token(Token = "0x4001E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DebugSettingsHandlerSettings settings;

		[Token(Token = "0x4001E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isEnabled;

		[Token(Token = "0x60015D1")]
		[Address(RVA = "0xFD933C", Offset = "0xFD933C", VA = "0xFD933C")]
		public DebugSettingsHandler(DebugSettingsHandlerSettings Settings)
		{
		}

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0xFE0B94", Offset = "0xFE0B94", VA = "0xFE0B94")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0xFE0B98", Offset = "0xFE0B98", VA = "0xFE0B98")]
		private void EnableScriptableUpdated()
		{
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xFE0D10", Offset = "0xFE0D10", VA = "0xFE0D10")]
		private bool SetupDebugForObject(object toSetup, RectTransform parent, int settingsIndex, string parentPath)
		{
			return default(bool);
		}

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0xFE16AC", Offset = "0xFE16AC", VA = "0xFE16AC")]
		private bool SetupArrayFiled(object toSetup, FieldInfo filed, RectTransform parent, int settingsIndex, string path)
		{
			return default(bool);
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0xFE1C44", Offset = "0xFE1C44", VA = "0xFE1C44")]
		private int GetMaxValue(float currentValue)
		{
			return default(int);
		}

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0xFE1C6C", Offset = "0xFE1C6C", VA = "0xFE1C6C")]
		private int GetMinValue(float currentValue)
		{
			return default(int);
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0xFE1CA4", Offset = "0xFE1CA4", VA = "0xFE1CA4")]
		private void SetSetting(int settingsIndex, string filedPath, float value)
		{
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0xFE1ECC", Offset = "0xFE1ECC", VA = "0xFE1ECC")]
		private void SetSettingArray(int settingsIndex, int arrayIndex, string filedPath, float value)
		{
		}

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0xFE213C", Offset = "0xFE213C", VA = "0xFE213C")]
		private void SetSetting(int settingsIndex, string filedPath, int value)
		{
		}

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0xFE235C", Offset = "0xFE235C", VA = "0xFE235C")]
		private void SetSettingArray(int settingsIndex, int arrayIndex, string filedPath, int value)
		{
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0xFE25CC", Offset = "0xFE25CC", VA = "0xFE25CC")]
		private void SetSetting(int settingsIndex, string filedPath, string value)
		{
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0xFE27A4", Offset = "0xFE27A4", VA = "0xFE27A4")]
		private void SetSettingArray(int settingsIndex, int arrayIndex, string filedPath, string value)
		{
		}

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0xFE2A28", Offset = "0xFE2A28", VA = "0xFE2A28")]
		private void SetSetting(int settingsIndex, string filedPath, bool value)
		{
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0xFE2C48", Offset = "0xFE2C48", VA = "0xFE2C48")]
		private void SetSettingArray(int settingsIndex, int arrayIndex, string filedPath, bool value)
		{
		}
	}
	[Token(Token = "0x20004F5")]
	public class DebugButton : MonoBehaviour
	{
		[Token(Token = "0x4001E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI text;

		[Token(Token = "0x4001E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button button;

		[Token(Token = "0x60015E0")]
		[Address(RVA = "0xFE2EB8", Offset = "0xFE2EB8", VA = "0xFE2EB8")]
		public DebugButton()
		{
		}
	}
	[Token(Token = "0x20004F6")]
	public class DebugSlider : MonoBehaviour
	{
		[Token(Token = "0x4001E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TMP_InputField inputFiled;

		[Token(Token = "0x4001E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Slider slider;

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0xFE2EC0", Offset = "0xFE2EC0", VA = "0xFE2EC0")]
		public void Init()
		{
		}

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0xFE2FE4", Offset = "0xFE2FE4", VA = "0xFE2FE4")]
		private void OnSliderValueChanged(float value)
		{
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0xFE3024", Offset = "0xFE3024", VA = "0xFE3024")]
		public void OnInputeValueChanged(string value)
		{
		}

		[Token(Token = "0x60015E4")]
		[Address(RVA = "0xFE3078", Offset = "0xFE3078", VA = "0xFE3078")]
		public DebugSlider()
		{
		}
	}
	[Token(Token = "0x20004F7")]
	public class DebugSliderInt : MonoBehaviour
	{
		[Token(Token = "0x4001E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TMP_InputField inputFiled;

		[Token(Token = "0x4001E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Slider slider;

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0xFE3080", Offset = "0xFE3080", VA = "0xFE3080")]
		public void Init()
		{
		}

		[Token(Token = "0x60015E6")]
		[Address(RVA = "0xFE31A4", Offset = "0xFE31A4", VA = "0xFE31A4")]
		private void OnSliderValueChanged(float value)
		{
		}

		[Token(Token = "0x60015E7")]
		[Address(RVA = "0xFE32B8", Offset = "0xFE32B8", VA = "0xFE32B8")]
		public void OnInputeValueChanged(string value)
		{
		}

		[Token(Token = "0x60015E8")]
		[Address(RVA = "0xFE3310", Offset = "0xFE3310", VA = "0xFE3310")]
		public DebugSliderInt()
		{
		}
	}
	[Token(Token = "0x20004F8")]
	public class DebugTab : MonoBehaviour
	{
		[Token(Token = "0x4001E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI titleText;

		[Token(Token = "0x4001E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RectTransform root;

		[Token(Token = "0x60015E9")]
		[Address(RVA = "0xFE3318", Offset = "0xFE3318", VA = "0xFE3318")]
		public DebugTab()
		{
		}
	}
	[Token(Token = "0x20004F9")]
	public class Indentation : MonoBehaviour
	{
		[Token(Token = "0x4001E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform root;

		[Token(Token = "0x4001E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DebugButton button;

		[Token(Token = "0x4001E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RectTransform rectTransform;

		[Token(Token = "0x4001E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI UiName;

		[Token(Token = "0x60015EA")]
		[Address(RVA = "0xFE3320", Offset = "0xFE3320", VA = "0xFE3320")]
		private void Awake()
		{
		}

		[Token(Token = "0x60015EB")]
		[Address(RVA = "0xFE33BC", Offset = "0xFE33BC", VA = "0xFE33BC")]
		public void ToggleRoot()
		{
		}

		[Token(Token = "0x60015EC")]
		[Address(RVA = "0xFE347C", Offset = "0xFE347C", VA = "0xFE347C")]
		public Indentation()
		{
		}
	}
	[Token(Token = "0x20004FA")]
	public abstract class UIElement
	{
		[Token(Token = "0x4001E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Action action;

		[Token(Token = "0x60015ED")]
		[Address(RVA = "0xFE3484", Offset = "0xFE3484", VA = "0xFE3484")]
		protected void RunCommand()
		{
		}

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0xFE34A0", Offset = "0xFE34A0", VA = "0xFE34A0", Slot = "4")]
		public virtual GameObject CreateElement(RectTransform root, DebugMenuSettings settings, DebugMenuData debugMenuData)
		{
			return null;
		}

		[Token(Token = "0x60015EF")]
		[Address(RVA = "0xFE34A8", Offset = "0xFE34A8", VA = "0xFE34A8", Slot = "5")]
		public virtual void Tick()
		{
		}

		[Token(Token = "0x60015F0")]
		public abstract bool ValidType(Type type);

		[Token(Token = "0x60015F1")]
		public abstract Func<string> ReturnValue();

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0xFE34AC", Offset = "0xFE34AC", VA = "0xFE34AC", Slot = "8")]
		public virtual bool Hidden()
		{
			return default(bool);
		}

		[Token(Token = "0x60015F3")]
		[Address(RVA = "0xFE34B4", Offset = "0xFE34B4", VA = "0xFE34B4")]
		protected UIElement()
		{
		}
	}
	[Token(Token = "0x20004FB")]
	public class DefaultIntElement : UIElement
	{
		[Token(Token = "0x4001E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int defaultValue;

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0xFE34BC", Offset = "0xFE34BC", VA = "0xFE34BC")]
		public DefaultIntElement(int defaultValue)
		{
		}

		[Token(Token = "0x60015F5")]
		[Address(RVA = "0xFE34E4", Offset = "0xFE34E4", VA = "0xFE34E4")]
		public DefaultIntElement()
		{
		}

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0xFE3500", Offset = "0xFE3500", VA = "0xFE3500", Slot = "7")]
		public override Func<string> ReturnValue()
		{
			return null;
		}

		[Token(Token = "0x60015F7")]
		[Address(RVA = "0xFE357C", Offset = "0xFE357C", VA = "0xFE357C", Slot = "6")]
		public override bool ValidType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x60015F8")]
		[Address(RVA = "0xFE3600", Offset = "0xFE3600", VA = "0xFE3600", Slot = "8")]
		public override bool Hidden()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004FC")]
	public class DefaultStringElement : UIElement
	{
		[Token(Token = "0x4001E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string defaultValue;

		[Token(Token = "0x60015FA")]
		[Address(RVA = "0xFE3614", Offset = "0xFE3614", VA = "0xFE3614")]
		public DefaultStringElement(string defaultValue)
		{
		}

		[Token(Token = "0x60015FB")]
		[Address(RVA = "0xFE363C", Offset = "0xFE363C", VA = "0xFE363C")]
		public DefaultStringElement()
		{
		}

		[Token(Token = "0x60015FC")]
		[Address(RVA = "0xFE3690", Offset = "0xFE3690", VA = "0xFE3690", Slot = "7")]
		public override Func<string> ReturnValue()
		{
			return null;
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0xFE370C", Offset = "0xFE370C", VA = "0xFE370C", Slot = "6")]
		public override bool ValidType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x60015FE")]
		[Address(RVA = "0xFE3790", Offset = "0xFE3790", VA = "0xFE3790", Slot = "8")]
		public override bool Hidden()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004FD")]
	public class TextElement : UIElement
	{
		[Token(Token = "0x4001E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string defaultValue;

		[Token(Token = "0x4001E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool updateFromDefault;

		[Token(Token = "0x4001E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Func<string> defaultValueAction;

		[Token(Token = "0x4001E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TextMeshProUGUI text;

		[Token(Token = "0x6001600")]
		[Address(RVA = "0xFDEC28", Offset = "0xFDEC28", VA = "0xFDEC28")]
		public TextElement(string defaultValue)
		{
		}

		[Token(Token = "0x6001601")]
		[Address(RVA = "0xFE37A0", Offset = "0xFE37A0", VA = "0xFE37A0")]
		public TextElement(Func<string> defaultValueAction)
		{
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0xFE37EC", Offset = "0xFE37EC", VA = "0xFE37EC")]
		public TextElement()
		{
		}

		[Token(Token = "0x6001603")]
		[Address(RVA = "0xFE3844", Offset = "0xFE3844", VA = "0xFE3844", Slot = "4")]
		public override GameObject CreateElement(RectTransform root, DebugMenuSettings settings, DebugMenuData debugMenuData)
		{
			return null;
		}

		[Token(Token = "0x6001604")]
		[Address(RVA = "0xFE38FC", Offset = "0xFE38FC", VA = "0xFE38FC", Slot = "5")]
		public override void Tick()
		{
		}

		[Token(Token = "0x6001605")]
		[Address(RVA = "0xFE397C", Offset = "0xFE397C", VA = "0xFE397C", Slot = "7")]
		public override Func<string> ReturnValue()
		{
			return null;
		}

		[Token(Token = "0x6001606")]
		[Address(RVA = "0xFE3A4C", Offset = "0xFE3A4C", VA = "0xFE3A4C", Slot = "6")]
		public override bool ValidType(Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004FF")]
	public class ButtonElement : UIElement
	{
		[Token(Token = "0x4001E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string name;

		[Token(Token = "0x4001E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DebugButton button;

		[Token(Token = "0x600160A")]
		[Address(RVA = "0xFFBF64", Offset = "0xFFBF64", VA = "0xFFBF64")]
		public ButtonElement(string name)
		{
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0xFFBF8C", Offset = "0xFFBF8C", VA = "0xFFBF8C")]
		public ButtonElement()
		{
		}

		[Token(Token = "0x600160C")]
		[Address(RVA = "0xFFBFE0", Offset = "0xFFBFE0", VA = "0xFFBFE0", Slot = "4")]
		public override GameObject CreateElement(RectTransform root, DebugMenuSettings settings, DebugMenuData debugMenuData)
		{
			return null;
		}

		[Token(Token = "0x600160D")]
		[Address(RVA = "0xFFC110", Offset = "0xFFC110", VA = "0xFFC110", Slot = "7")]
		public override Func<string> ReturnValue()
		{
			return null;
		}

		[Token(Token = "0x600160E")]
		[Address(RVA = "0xFFC1E0", Offset = "0xFFC1E0", VA = "0xFFC1E0", Slot = "6")]
		public override bool ValidType(Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000501")]
	public class EnumDropDown<T> : UIElement where T : struct, Enum
	{
		[Token(Token = "0x4001E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T defaultValue;

		[Token(Token = "0x4001E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public TMP_Dropdown dropdown;

		[Token(Token = "0x6001612")]
		public EnumDropDown(T defaultValue)
		{
		}

		[Token(Token = "0x6001613")]
		public override GameObject CreateElement(RectTransform root, DebugMenuSettings settings, DebugMenuData debugMenuData)
		{
			return null;
		}

		[Token(Token = "0x6001614")]
		public override Func<string> ReturnValue()
		{
			return null;
		}

		[Token(Token = "0x6001615")]
		public override bool ValidType(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001616")]
		private int GetDefualtValue()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000502")]
	public class EnumDropDown : UIElement
	{
		[Token(Token = "0x4001E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int defaultValue;

		[Token(Token = "0x4001E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Func<int> defaultValueAction;

		[Token(Token = "0x4001E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Type enumType;

		[Token(Token = "0x4001E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TMP_Dropdown dropdown;

		[Token(Token = "0x4001E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool updateFromDefualt;

		[Token(Token = "0x6001619")]
		[Address(RVA = "0xFFC310", Offset = "0xFFC310", VA = "0xFFC310")]
		public EnumDropDown(Type enumType, Func<int> defaultValueAction)
		{
		}

		[Token(Token = "0x600161A")]
		[Address(RVA = "0xFFC364", Offset = "0xFFC364", VA = "0xFFC364")]
		public EnumDropDown(Type enumType, int defaultValue = 0)
		{
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0xFFC394", Offset = "0xFFC394", VA = "0xFFC394", Slot = "4")]
		public override GameObject CreateElement(RectTransform root, DebugMenuSettings settings, DebugMenuData debugMenuData)
		{
			return null;
		}

		[Token(Token = "0x600161C")]
		[Address(RVA = "0xFFC564", Offset = "0xFFC564", VA = "0xFFC564", Slot = "5")]
		public override void Tick()
		{
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0xFFC5DC", Offset = "0xFFC5DC", VA = "0xFFC5DC", Slot = "7")]
		public override Func<string> ReturnValue()
		{
			return null;
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0xFFC658", Offset = "0xFFC658", VA = "0xFFC658", Slot = "6")]
		public override bool ValidType(Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000503")]
	public class EnumToIntDropDown : UIElement
	{
		[Token(Token = "0x4001E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Func<int> defaultValueAction;

		[Token(Token = "0x4001E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int defaultValue;

		[Token(Token = "0x4001E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Type enumType;

		[Token(Token = "0x4001E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TMP_Dropdown dropdown;

		[Token(Token = "0x6001621")]
		[Address(RVA = "0xFFC710", Offset = "0xFFC710", VA = "0xFFC710")]
		public EnumToIntDropDown(Type enumType, Func<int> defaultValue)
		{
		}

		[Token(Token = "0x6001622")]
		[Address(RVA = "0xFFC75C", Offset = "0xFFC75C", VA = "0xFFC75C", Slot = "4")]
		public override GameObject CreateElement(RectTransform root, DebugMenuSettings settings, DebugMenuData debugMenuData)
		{
			return null;
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0xFFC92C", Offset = "0xFFC92C", VA = "0xFFC92C", Slot = "5")]
		public override void Tick()
		{
		}

		[Token(Token = "0x6001624")]
		[Address(RVA = "0xFFC9A8", Offset = "0xFFC9A8", VA = "0xFFC9A8", Slot = "7")]
		public override Func<string> ReturnValue()
		{
			return null;
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0xFFCA24", Offset = "0xFFCA24", VA = "0xFFCA24", Slot = "6")]
		public override bool ValidType(Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000504")]
	public class stringToIntDropDown : UIElement
	{
		[Token(Token = "0x4001E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<string> values;

		[Token(Token = "0x4001E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int defaultValue;

		[Token(Token = "0x4001E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TMP_Dropdown dropdown;

		[Token(Token = "0x6001628")]
		[Address(RVA = "0xFFCAE4", Offset = "0xFFCAE4", VA = "0xFFCAE4")]
		public stringToIntDropDown(List<string> values, int defaultValue = 0)
		{
		}

		[Token(Token = "0x6001629")]
		[Address(RVA = "0xFFCB14", Offset = "0xFFCB14", VA = "0xFFCB14", Slot = "4")]
		public override GameObject CreateElement(RectTransform root, DebugMenuSettings settings, DebugMenuData debugMenuData)
		{
			return null;
		}

		[Token(Token = "0x600162A")]
		[Address(RVA = "0xFFCC64", Offset = "0xFFCC64", VA = "0xFFCC64", Slot = "7")]
		public override Func<string> ReturnValue()
		{
			return null;
		}

		[Token(Token = "0x600162B")]
		[Address(RVA = "0xFFCCE0", Offset = "0xFFCCE0", VA = "0xFFCCE0", Slot = "6")]
		public override bool ValidType(Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000505")]
	public class StringDropDown : UIElement
	{
		[Token(Token = "0x4001E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<string> values;

		[Token(Token = "0x4001E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int defaultValue;

		[Token(Token = "0x4001E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private readonly bool updateList;

		[Token(Token = "0x4001E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TMP_Dropdown dropdown;

		[Token(Token = "0x600162E")]
		[Address(RVA = "0xFFCD9C", Offset = "0xFFCD9C", VA = "0xFFCD9C")]
		public StringDropDown(List<string> values, int defaultValue = 0, bool updateList = false)
		{
		}

		[Token(Token = "0x600162F")]
		[Address(RVA = "0xFFCDDC", Offset = "0xFFCDDC", VA = "0xFFCDDC", Slot = "4")]
		public override GameObject CreateElement(RectTransform root, DebugMenuSettings settings, DebugMenuData debugMenuData)
		{
			return null;
		}

		[Token(Token = "0x6001630")]
		[Address(RVA = "0xFFCF2C", Offset = "0xFFCF2C", VA = "0xFFCF2C", Slot = "5")]
		public override void Tick()
		{
		}

		[Token(Token = "0x6001631")]
		[Address(RVA = "0xFFCFE8", Offset = "0xFFCFE8", VA = "0xFFCFE8", Slot = "7")]
		public override Func<string> ReturnValue()
		{
			return null;
		}

		[Token(Token = "0x6001632")]
		[Address(RVA = "0xFFD064", Offset = "0xFFD064", VA = "0xFFD064", Slot = "6")]
		public override bool ValidType(Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000506")]
	public class VrInputElement : UIElement
	{
		[Token(Token = "0x4001E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string defaultValue;

		[Token(Token = "0x4001E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string caption;

		[Token(Token = "0x4001E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRInputField inputField;

		[Token(Token = "0x4001E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private DebugMenuData debugMenuData;

		[Token(Token = "0x6001635")]
		[Address(RVA = "0xFFD14C", Offset = "0xFFD14C", VA = "0xFFD14C")]
		public VrInputElement(string caption, string defaultValue)
		{
		}

		[Token(Token = "0x6001636")]
		[Address(RVA = "0xFFD178", Offset = "0xFFD178", VA = "0xFFD178")]
		public VrInputElement()
		{
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0xFFD1F0", Offset = "0xFFD1F0", VA = "0xFFD1F0", Slot = "4")]
		public override GameObject CreateElement(RectTransform root, DebugMenuSettings settings, DebugMenuData debugMenuData)
		{
			return null;
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0xFFD350", Offset = "0xFFD350", VA = "0xFFD350")]
		public void OnActivateInput()
		{
		}

		[Token(Token = "0x6001639")]
		[Address(RVA = "0xFFD4E0", Offset = "0xFFD4E0", VA = "0xFFD4E0")]
		public void OnSubmit(string newValue)
		{
		}

		[Token(Token = "0x600163A")]
		[Address(RVA = "0xFFD51C", Offset = "0xFFD51C", VA = "0xFFD51C")]
		public void OnCancel()
		{
		}

		[Token(Token = "0x600163B")]
		[Address(RVA = "0xFFD520", Offset = "0xFFD520", VA = "0xFFD520", Slot = "7")]
		public override Func<string> ReturnValue()
		{
			return null;
		}

		[Token(Token = "0x600163C")]
		[Address(RVA = "0xFFD59C", Offset = "0xFFD59C", VA = "0xFFD59C", Slot = "6")]
		public override bool ValidType(Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000507")]
	public class VrInputIntElement : UIElement
	{
		[Token(Token = "0x4001E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int defaultValue;

		[Token(Token = "0x4001E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Func<int> defaultValueAction;

		[Token(Token = "0x4001E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRInputField inputField;

		[Token(Token = "0x4001E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private DebugMenuData debugMenuData;

		[Token(Token = "0x4001E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool updateFromDefualt;

		[Token(Token = "0x600163E")]
		[Address(RVA = "0xFFD64C", Offset = "0xFFD64C", VA = "0xFFD64C")]
		public VrInputIntElement(Func<int> defaultValueAction)
		{
		}

		[Token(Token = "0x600163F")]
		[Address(RVA = "0xFFD698", Offset = "0xFFD698", VA = "0xFFD698")]
		public VrInputIntElement(int defaultValue)
		{
		}

		[Token(Token = "0x6001640")]
		[Address(RVA = "0xFFD6C0", Offset = "0xFFD6C0", VA = "0xFFD6C0")]
		public VrInputIntElement()
		{
		}

		[Token(Token = "0x6001641")]
		[Address(RVA = "0xFFD6E0", Offset = "0xFFD6E0", VA = "0xFFD6E0", Slot = "4")]
		public override GameObject CreateElement(RectTransform root, DebugMenuSettings settings, DebugMenuData debugMenuData)
		{
			return null;
		}

		[Token(Token = "0x6001642")]
		[Address(RVA = "0xFFD850", Offset = "0xFFD850", VA = "0xFFD850", Slot = "5")]
		public override void Tick()
		{
		}

		[Token(Token = "0x6001643")]
		[Address(RVA = "0xFFD8F4", Offset = "0xFFD8F4", VA = "0xFFD8F4")]
		public void OnActivateInput()
		{
		}

		[Token(Token = "0x6001644")]
		[Address(RVA = "0xFFDA94", Offset = "0xFFDA94", VA = "0xFFDA94")]
		public void OnSubmit(string newValue)
		{
		}

		[Token(Token = "0x6001645")]
		[Address(RVA = "0xFFDB60", Offset = "0xFFDB60", VA = "0xFFDB60")]
		public void OnCancel()
		{
		}

		[Token(Token = "0x6001646")]
		[Address(RVA = "0xFFDB64", Offset = "0xFFDB64", VA = "0xFFDB64", Slot = "7")]
		public override Func<string> ReturnValue()
		{
			return null;
		}

		[Token(Token = "0x6001647")]
		[Address(RVA = "0xFFDBE0", Offset = "0xFFDBE0", VA = "0xFFDBE0", Slot = "6")]
		public override bool ValidType(Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000508")]
	public class VrInputFloatElement : UIElement
	{
		[Token(Token = "0x4001E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Func<float> defaultValueAction;

		[Token(Token = "0x4001E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private VRInputField inputField;

		[Token(Token = "0x4001E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DebugMenuData debugMenuData;

		[Token(Token = "0x4001E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float defaultValue;

		[Token(Token = "0x4001E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool updateFromDefault;

		[Token(Token = "0x6001649")]
		[Address(RVA = "0xFFDC90", Offset = "0xFFDC90", VA = "0xFFDC90")]
		public VrInputFloatElement(Func<float> defaultValueAction)
		{
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0xFFDCDC", Offset = "0xFFDCDC", VA = "0xFFDCDC")]
		public VrInputFloatElement(float defualtValue)
		{
		}

		[Token(Token = "0x600164B")]
		[Address(RVA = "0xFFDD04", Offset = "0xFFDD04", VA = "0xFFDD04")]
		public VrInputFloatElement()
		{
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0xFFDD24", Offset = "0xFFDD24", VA = "0xFFDD24", Slot = "4")]
		public override GameObject CreateElement(RectTransform root, DebugMenuSettings settings, DebugMenuData debugMenuData)
		{
			return null;
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0xFFDE94", Offset = "0xFFDE94", VA = "0xFFDE94", Slot = "5")]
		public override void Tick()
		{
		}

		[Token(Token = "0x600164E")]
		[Address(RVA = "0xFFDF44", Offset = "0xFFDF44", VA = "0xFFDF44")]
		public void OnActivateInput()
		{
		}

		[Token(Token = "0x600164F")]
		[Address(RVA = "0xFFE0E4", Offset = "0xFFE0E4", VA = "0xFFE0E4")]
		public void OnSubmit(string newValue)
		{
		}

		[Token(Token = "0x6001650")]
		[Address(RVA = "0xFFE1B0", Offset = "0xFFE1B0", VA = "0xFFE1B0")]
		public void OnCancel()
		{
		}

		[Token(Token = "0x6001651")]
		[Address(RVA = "0xFFE1B4", Offset = "0xFFE1B4", VA = "0xFFE1B4", Slot = "7")]
		public override Func<string> ReturnValue()
		{
			return null;
		}

		[Token(Token = "0x6001652")]
		[Address(RVA = "0xFFE230", Offset = "0xFFE230", VA = "0xFFE230", Slot = "6")]
		public override bool ValidType(Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000509")]
	public class SliderElement : UIElement
	{
		[Token(Token = "0x4001E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float defaultValue;

		[Token(Token = "0x4001E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly float minRange;

		[Token(Token = "0x4001E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly float maxRange;

		[Token(Token = "0x4001E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DebugSlider slider;

		[Token(Token = "0x4001E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly bool updateFromDefault;

		[Token(Token = "0x4001E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Func<float> defaultValueAction;

		[Token(Token = "0x6001654")]
		[Address(RVA = "0xFFE2E0", Offset = "0xFFE2E0", VA = "0xFFE2E0")]
		public SliderElement(Func<float> defaultValueAction, float minRange, float maxRange)
		{
		}

		[Token(Token = "0x6001655")]
		[Address(RVA = "0xFFE340", Offset = "0xFFE340", VA = "0xFFE340")]
		public SliderElement(float defaultValue, float minRange, float maxRange)
		{
		}

		[Token(Token = "0x6001656")]
		[Address(RVA = "0xFFE380", Offset = "0xFFE380", VA = "0xFFE380")]
		public SliderElement()
		{
		}

		[Token(Token = "0x6001657")]
		[Address(RVA = "0xFFE3A4", Offset = "0xFFE3A4", VA = "0xFFE3A4", Slot = "4")]
		public override GameObject CreateElement(RectTransform root, DebugMenuSettings settings, DebugMenuData debugMenuData)
		{
			return null;
		}

		[Token(Token = "0x6001658")]
		[Address(RVA = "0xFFE530", Offset = "0xFFE530", VA = "0xFFE530", Slot = "5")]
		public override void Tick()
		{
		}

		[Token(Token = "0x6001659")]
		[Address(RVA = "0xFFE640", Offset = "0xFFE640", VA = "0xFFE640", Slot = "7")]
		public override Func<string> ReturnValue()
		{
			return null;
		}

		[Token(Token = "0x600165A")]
		[Address(RVA = "0xFFE6BC", Offset = "0xFFE6BC", VA = "0xFFE6BC", Slot = "6")]
		public override bool ValidType(Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200050A")]
	public class SliderIntElement : UIElement
	{
		[Token(Token = "0x4001E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int defaultValue;

		[Token(Token = "0x4001E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int minRange;

		[Token(Token = "0x4001E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int maxRange;

		[Token(Token = "0x4001E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DebugSliderInt sliderInt;

		[Token(Token = "0x600165D")]
		[Address(RVA = "0xFFE790", Offset = "0xFFE790", VA = "0xFFE790")]
		public SliderIntElement(int defaultValue, int minRange, int maxRange)
		{
		}

		[Token(Token = "0x600165E")]
		[Address(RVA = "0xFFE7CC", Offset = "0xFFE7CC", VA = "0xFFE7CC")]
		public SliderIntElement()
		{
		}

		[Token(Token = "0x600165F")]
		[Address(RVA = "0xFFE7F0", Offset = "0xFFE7F0", VA = "0xFFE7F0", Slot = "4")]
		public override GameObject CreateElement(RectTransform root, DebugMenuSettings settings, DebugMenuData debugMenuData)
		{
			return null;
		}

		[Token(Token = "0x6001660")]
		[Address(RVA = "0xFFE988", Offset = "0xFFE988", VA = "0xFFE988", Slot = "7")]
		public override Func<string> ReturnValue()
		{
			return null;
		}

		[Token(Token = "0x6001661")]
		[Address(RVA = "0xFFEA04", Offset = "0xFFEA04", VA = "0xFFEA04", Slot = "6")]
		public override bool ValidType(Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200050B")]
	public class SliderIntToStringElement : UIElement
	{
		[Token(Token = "0x4001E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int defaultValue;

		[Token(Token = "0x4001E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int minRange;

		[Token(Token = "0x4001E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int maxRange;

		[Token(Token = "0x4001E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DebugSliderInt sliderInt;

		[Token(Token = "0x6001664")]
		[Address(RVA = "0xFFEBA8", Offset = "0xFFEBA8", VA = "0xFFEBA8")]
		public SliderIntToStringElement(int defaultValue, int minRange, int maxRange)
		{
		}

		[Token(Token = "0x6001665")]
		[Address(RVA = "0xFFEBE4", Offset = "0xFFEBE4", VA = "0xFFEBE4", Slot = "4")]
		public override GameObject CreateElement(RectTransform root, DebugMenuSettings settings, DebugMenuData debugMenuData)
		{
			return null;
		}

		[Token(Token = "0x6001666")]
		[Address(RVA = "0xFFED7C", Offset = "0xFFED7C", VA = "0xFFED7C", Slot = "7")]
		public override Func<string> ReturnValue()
		{
			return null;
		}

		[Token(Token = "0x6001667")]
		[Address(RVA = "0xFFEDF8", Offset = "0xFFEDF8", VA = "0xFFEDF8", Slot = "6")]
		public override bool ValidType(Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200050C")]
	public class ToggleElement : UIElement
	{
		[Token(Token = "0x4001E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Func<bool> defaultValueAction;

		[Token(Token = "0x4001E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool defaultValue;

		[Token(Token = "0x4001E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Toggle toggle;

		[Token(Token = "0x4001E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly bool updateFromDefault;

		[Token(Token = "0x600166A")]
		[Address(RVA = "0xFFEF9C", Offset = "0xFFEF9C", VA = "0xFFEF9C")]
		public ToggleElement(Func<bool> defaultValueAction)
		{
		}

		[Token(Token = "0x600166B")]
		[Address(RVA = "0xFFEFEC", Offset = "0xFFEFEC", VA = "0xFFEFEC")]
		public ToggleElement(bool defaultValue)
		{
		}

		[Token(Token = "0x600166C")]
		[Address(RVA = "0xFFF014", Offset = "0xFFF014", VA = "0xFFF014")]
		public ToggleElement()
		{
		}

		[Token(Token = "0x600166D")]
		[Address(RVA = "0xFFF030", Offset = "0xFFF030", VA = "0xFFF030", Slot = "4")]
		public override GameObject CreateElement(RectTransform root, DebugMenuSettings settings, DebugMenuData debugMenuData)
		{
			return null;
		}

		[Token(Token = "0x600166E")]
		[Address(RVA = "0xFFF15C", Offset = "0xFFF15C", VA = "0xFFF15C", Slot = "5")]
		public override void Tick()
		{
		}

		[Token(Token = "0x600166F")]
		[Address(RVA = "0xFFF1E4", Offset = "0xFFF1E4", VA = "0xFFF1E4", Slot = "7")]
		public override Func<string> ReturnValue()
		{
			return null;
		}

		[Token(Token = "0x6001670")]
		[Address(RVA = "0xFFF260", Offset = "0xFFF260", VA = "0xFFF260", Slot = "6")]
		public override bool ValidType(Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200050D")]
	public class VRInputField : MonoBehaviour
	{
		[Token(Token = "0x4001E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button button;

		[Token(Token = "0x4001E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI textField;

		[Token(Token = "0x4001E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI placeholderField;

		[Token(Token = "0x6001673")]
		[Address(RVA = "0xFFF360", Offset = "0xFFF360", VA = "0xFFF360")]
		public VRInputField()
		{
		}
	}
	[Token(Token = "0x200050E")]
	public class DummyErrorMessageHandler : ITickable
	{
		[Token(Token = "0x4001E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly InputData inputData;

		[Token(Token = "0x4001E5E")]
		private const float dummyHeldTime = 30f;

		[Token(Token = "0x4001E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isBeingHeld;

		[Token(Token = "0x4001E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float dummyHeldTimestamp;

		[Token(Token = "0x4001E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool errorSent;

		[Token(Token = "0x6001674")]
		[Address(RVA = "0xFFF368", Offset = "0xFFF368", VA = "0xFFF368")]
		public DummyErrorMessageHandler(InputData inputData)
		{
		}

		[Token(Token = "0x6001675")]
		[Address(RVA = "0xFFF390", Offset = "0xFFF390", VA = "0xFFF390", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x200050F")]
	public class NetworkSimulation
	{
		[Token(Token = "0x4001E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PhotonPeer peer;

		[Token(Token = "0x6001676")]
		[Address(RVA = "0xFFF470", Offset = "0xFFF470", VA = "0xFFF470")]
		public NetworkSimulation()
		{
		}

		[Token(Token = "0x6001677")]
		[Address(RVA = "0xFFF4E8", Offset = "0xFFF4E8", VA = "0xFFF4E8")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001678")]
		[Address(RVA = "0xFFF4EC", Offset = "0xFFF4EC", VA = "0xFFF4EC")]
		private void EnableNetworkSimulation(bool enabled)
		{
		}

		[Token(Token = "0x6001679")]
		[Address(RVA = "0xFFF510", Offset = "0xFFF510", VA = "0xFFF510")]
		private void SetIncomingLag(int lag)
		{
		}

		[Token(Token = "0x600167A")]
		[Address(RVA = "0xFFF540", Offset = "0xFFF540", VA = "0xFFF540")]
		private void SetOutgoingLag(int lag)
		{
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0xFFF570", Offset = "0xFFF570", VA = "0xFFF570")]
		private void SetIncomingJitter(int jitter)
		{
		}

		[Token(Token = "0x600167C")]
		[Address(RVA = "0xFFF5A0", Offset = "0xFFF5A0", VA = "0xFFF5A0")]
		private void SetOutgoingJitter(int jitter)
		{
		}

		[Token(Token = "0x600167D")]
		[Address(RVA = "0xFFF5D0", Offset = "0xFFF5D0", VA = "0xFFF5D0")]
		private void SetIncomingLagPercentag(int percentage)
		{
		}

		[Token(Token = "0x600167E")]
		[Address(RVA = "0xFFF600", Offset = "0xFFF600", VA = "0xFFF600")]
		private void SetOutgoingLossPercentag(int percentage)
		{
		}
	}
	[Token(Token = "0x2000510")]
	public class PerformanceEntrypoint : MonoBehaviour
	{
		[Token(Token = "0x2000511")]
		[CompilerGenerated]
		private sealed class <Start>d__27 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001E80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PerformanceEntrypoint <>4__this;

			[Token(Token = "0x4001E81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private DebugData <debugData>5__2;

			[Token(Token = "0x4001E82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private ReplayData <replayData>5__3;

			[Token(Token = "0x4001E83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IPlatformFactory <platformFactory>5__4;

			[Token(Token = "0x4001E84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private VrKeyboardData <vrKeyBoardData>5__5;

			[Token(Token = "0x4001E85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private DevicePlatform <platform>5__6;

			[Token(Token = "0x4001E86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private XrPluginData <xrPluginData>5__7;

			[Token(Token = "0x170000F7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001685")]
				[Address(RVA = "0x10014D4", Offset = "0x10014D4", VA = "0x10014D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001687")]
				[Address(RVA = "0x100151C", Offset = "0x100151C", VA = "0x100151C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001682")]
			[Address(RVA = "0xFFF698", Offset = "0xFFF698", VA = "0xFFF698")]
			[DebuggerHidden]
			public <Start>d__27(int <>1__state)
			{
			}

			[Token(Token = "0x6001683")]
			[Address(RVA = "0xFFFAF4", Offset = "0xFFFAF4", VA = "0xFFFAF4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001684")]
			[Address(RVA = "0xFFFAF8", Offset = "0xFFFAF8", VA = "0xFFFAF8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001686")]
			[Address(RVA = "0x10014DC", Offset = "0x10014DC", VA = "0x10014DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("Dependecies")]
		private DebugSettings debugSettings;

		[Token(Token = "0x4001E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private PlayerSpawnPointReference playerSpawnPointReference;

		[Token(Token = "0x4001E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform debugAnchor;

		[Token(Token = "0x4001E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private InteractionSettings interactionSettings;

		[Token(Token = "0x4001E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private VrKeyboardSettings vrKeyboardSettings;

		[Token(Token = "0x4001E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform rightHand;

		[Token(Token = "0x4001E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Transform leftHand;

		[Token(Token = "0x4001E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private CameraFadeSettings cameraFadeSettings;

		[Token(Token = "0x4001E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private InteractionHandler interactionHandler;

		[Token(Token = "0x4001E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private PointerRaycastHandlerSettings pointerRaycastHandlerSettings;

		[Token(Token = "0x4001E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[Header("Scene Settings")]
		private SceneHandlerSettings sceneHandlerSettings;

		[Token(Token = "0x4001E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private CrowdSettings crowdSettings;

		[Token(Token = "0x4001E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private PlayerSpawnPointReference playerSpawnPoint;

		[Token(Token = "0x4001E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private SceneHandler sceneHandler;

		[Token(Token = "0x4001E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private CrowdHandler crowdHandler;

		[Token(Token = "0x4001E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private DebugController debugController;

		[Token(Token = "0x4001E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private PointerHandler pointerHandler;

		[Token(Token = "0x4001E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private PointerRaycastHandler pointerRaycastHandler;

		[Token(Token = "0x4001E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private IInputHandler inputHandler;

		[Token(Token = "0x4001E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private VrKeyboardHandler vrKeyboardHandler;

		[Token(Token = "0x4001E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private AnimationStateHandler animationStateHandler;

		[Token(Token = "0x4001E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private CameraFadeHandler cameraFadeHandler;

		[Token(Token = "0x4001E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private IXrPluginHandler xrPluginHandler;

		[Token(Token = "0x4001E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InputData inputData;

		[Token(Token = "0x4001E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool isInitialized;

		[Token(Token = "0x4001E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private GameMessageUploadHandlerData gameMessageUploadHandlerData;

		[Token(Token = "0x4001E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x600167F")]
		[Address(RVA = "0xFFF630", Offset = "0xFFF630", VA = "0xFFF630")]
		[IteratorStateMachine(typeof(<Start>d__27))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001680")]
		[Address(RVA = "0xFFF6C0", Offset = "0xFFF6C0", VA = "0xFFF6C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001681")]
		[Address(RVA = "0xFFFAEC", Offset = "0xFFFAEC", VA = "0xFFFAEC")]
		public PerformanceEntrypoint()
		{
		}
	}
	[Token(Token = "0x2000512")]
	public enum DevicePlatform
	{
		[Token(Token = "0x4001E88")]
		XR,
		[Token(Token = "0x4001E89")]
		Desktop
	}
	[Token(Token = "0x2000513")]
	public enum RuntimeMode
	{
		[Token(Token = "0x4001E8B")]
		VrClient,
		[Token(Token = "0x4001E8C")]
		DesktopClient,
		[Token(Token = "0x4001E8D")]
		Spectator
	}
	[Token(Token = "0x2000514")]
	public class SpawnPointData
	{
		[Token(Token = "0x4001E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayerSpawnPointReference playerSpawnPointReference;

		[Token(Token = "0x6001688")]
		[Address(RVA = "0x1001524", Offset = "0x1001524", VA = "0x1001524")]
		public SpawnPointData()
		{
		}
	}
	[Token(Token = "0x2000515")]
	public static class CrossSceneData
	{
		[Token(Token = "0x4001E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static IPlatformFactory platformFactory;

		[Token(Token = "0x4001E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static DevicePlatform platform;

		[Token(Token = "0x4001E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Ignis.DebugTools.LogSender logSender;

		[Token(Token = "0x4001E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static RoomTimeProviderProxy roomTimeProvider;

		[Token(Token = "0x4001E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static IRoomTimeProvider gameRoomTimeProvider;

		[Token(Token = "0x4001E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4001E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static GameData gameData;

		[Token(Token = "0x4001E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static LocalPersistentData localPersistentData;

		[Token(Token = "0x4001E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static InputData inputData;

		[Token(Token = "0x4001E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static ReplayData replayData;

		[Token(Token = "0x4001E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4001E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static PlatformLoginData platformLoginData;

		[Token(Token = "0x4001E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static ErrorMessageData errorMessageData;

		[Token(Token = "0x4001E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static BayTekData bayTekData;

		[Token(Token = "0x4001E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static ArcadeData arcadeData;

		[Token(Token = "0x4001E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static AutoSpectateData autoSpectateData;

		[Token(Token = "0x4001E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static PlayFabUserSettingsData playFabUserSettingsData;

		[Token(Token = "0x4001EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static VisualQualityHandlerData visualQualityHandlerData;

		[Token(Token = "0x4001EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static TrailerData trailerData;

		[Token(Token = "0x4001EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static SceneHandlerData sceneHandlerData;

		[Token(Token = "0x4001EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static SpectatorCameraData spectatorCameraData;
	}
	[Token(Token = "0x2000516")]
	public class EntryPoint : MonoBehaviour
	{
		[Token(Token = "0x2000517")]
		public class EntryPointData
		{
			[Token(Token = "0x4002032")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameState currentGameState;

			[Token(Token = "0x4002033")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public RuntimeMode runtimeMode;

			[Token(Token = "0x4002034")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool isInitialized;

			[Token(Token = "0x60016A1")]
			[Address(RVA = "0x1000F70", Offset = "0x1000F70", VA = "0x1000F70")]
			public EntryPointData()
			{
			}
		}

		[Token(Token = "0x2000518")]
		public enum GameState
		{
			[Token(Token = "0x4002036")]
			Splash,
			[Token(Token = "0x4002037")]
			Onboarding,
			[Token(Token = "0x4002038")]
			LockerRoom,
			[Token(Token = "0x4002039")]
			Arena,
			[Token(Token = "0x400203A")]
			StoryEventGameState
		}

		[Token(Token = "0x200051A")]
		[CompilerGenerated]
		private sealed class <Start>d__402 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400203C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400203D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400203E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public EntryPoint <>4__this;

			[Token(Token = "0x400203F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private CutsceneData <cutsceneData>5__2;

			[Token(Token = "0x4002040")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private RoomTimeProviderProxy <proxyTimeProvider>5__3;

			[Token(Token = "0x4002041")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private EmotePlaybackHandlerData <emotePlaybackHandlerData>5__4;

			[Token(Token = "0x4002042")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private PersistantDataUtility <persistantDataHandler>5__5;

			[Token(Token = "0x4002043")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private InputData <inputData>5__6;

			[Token(Token = "0x4002044")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private CameraFadeData <cameraFadeData>5__7;

			[Token(Token = "0x4002045")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private ErrorMessageData <errorMessageData>5__8;

			[Token(Token = "0x4002046")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private VoipData <voipData>5__9;

			[Token(Token = "0x4002047")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private SceneHandlerData <sceneHandlerData>5__10;

			[Token(Token = "0x4002048")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private ScoreBoardData <scoreBoardData>5__11;

			[Token(Token = "0x4002049")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private LocalPlayerData <localPlayerData>5__12;

			[Token(Token = "0x400204A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private DialogueHandlerData <dialogueHandlerData>5__13;

			[Token(Token = "0x400204B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			private SideViewData <sideViewData>5__14;

			[Token(Token = "0x400204C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private SpectatorData <spectatorData>5__15;

			[Token(Token = "0x400204D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private SpectatorSettingsData <spectatorSettingsData>5__16;

			[Token(Token = "0x400204E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private CurrentMatchRequestData <currentMatchRequestData>5__17;

			[Token(Token = "0x400204F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private DebugData <debugData>5__18;

			[Token(Token = "0x4002050")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private DevicePlatform <platform>5__19;

			[Token(Token = "0x4002051")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private VisualQualityHandler <visualQualityHandler>5__20;

			[Token(Token = "0x4002052")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private bool <livIsEnabled>5__21;

			[Token(Token = "0x4002053")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private IgnisTelemetry <ignisTelemetry>5__22;

			[Token(Token = "0x4002054")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			private PlayFabLoginData <playFabLoginData>5__23;

			[Token(Token = "0x4002055")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private PersistentPlatformData <platformPersistentData>5__24;

			[Token(Token = "0x4002056")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private TetherToolHandlerData <tetherToolHandlerData>5__25;

			[Token(Token = "0x4002057")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private TimeHandlerData <timeHandlerData>5__26;

			[Token(Token = "0x4002058")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private ForceFieldData <forceFieldData>5__27;

			[Token(Token = "0x4002059")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private OnBoardingViewData <onboardingViewData>5__28;

			[Token(Token = "0x400205A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
			private ToolSpawnData <toolSpawnData>5__29;

			[Token(Token = "0x400205B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			private ToolSpawnAlgorithmData <toolSpawnAlgorithmData>5__30;

			[Token(Token = "0x400205C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			private BallisticAirHandlerData <projectileAirHandlerData>5__31;

			[Token(Token = "0x400205D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private AnimationStateHandlerData <animationStateHandlerData>5__32;

			[Token(Token = "0x400205E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
			private DeckData <deckData>5__33;

			[Token(Token = "0x400205F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			private List<IToolSpawnAlgorithm> <toolSpawnAlgorithms>5__34;

			[Token(Token = "0x4002060")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
			private FaceAnimationData <faceAnimationData>5__35;

			[Token(Token = "0x4002061")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			private ParticleEffectData <particleEffectData>5__36;

			[Token(Token = "0x4002062")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
			private VisorEffectsData <visorEffectsData>5__37;

			[Token(Token = "0x4002063")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
			private SettingsData <settingsData>5__38;

			[Token(Token = "0x4002064")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
			private MissionViewHandlerData <missionViewHandlerData>5__39;

			[Token(Token = "0x4002065")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
			private MissionNotificationHandlerData <missionNotificationHandlerData>5__40;

			[Token(Token = "0x4002066")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
			private FactoryData <factoryData>5__41;

			[Token(Token = "0x4002067")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
			private ToolViewData <toolViewData>5__42;

			[Token(Token = "0x4002068")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
			private ItemGridViewHandlerData <itemGridViewHandlerData>5__43;

			[Token(Token = "0x4002069")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
			private CustomizationData <customizationData>5__44;

			[Token(Token = "0x400206A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
			private ShopData <shopData>5__45;

			[Token(Token = "0x400206B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
			private CoinShopData <coinShopData>5__46;

			[Token(Token = "0x400206C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
			private BannerData <bannerData>5__47;

			[Token(Token = "0x400206D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
			private PlatformData <platformData>5__48;

			[Token(Token = "0x400206E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
			private RecordData <recordData>5__49;

			[Token(Token = "0x400206F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
			private PlayerInfoPanelData <playerInfoPanelData>5__50;

			[Token(Token = "0x4002070")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
			private LeagueTierProgressData <leagueTierProgressData>5__51;

			[Token(Token = "0x4002071")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
			private NetworkServicesDiagnosticsData <networkServicesDiagnosticsData>5__52;

			[Token(Token = "0x4002072")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
			private RecycleData <recycleData>5__53;

			[Token(Token = "0x4002073")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
			private LocalPlayerExperienceData <localPlayerExperienceData>5__54;

			[Token(Token = "0x4002074")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
			private LevelUpViewData <levelUpViewData>5__55;

			[Token(Token = "0x4002075")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
			private EndSeasonRewardViewData <endSeasonRewardViewData>5__56;

			[Token(Token = "0x4002076")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
			private HapticData <hapticData>5__57;

			[Token(Token = "0x4002077")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
			private EnvironmentSceneData <environmentSceneData>5__58;

			[Token(Token = "0x4002078")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
			private BarEntranceData <barEntranceData>5__59;

			[Token(Token = "0x4002079")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
			private FeaturePermissionData <featurePermissionData>5__60;

			[Token(Token = "0x400207A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
			private PauseMenuData <pauseMenuData>5__61;

			[Token(Token = "0x400207B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
			private SpectatorRequestViewData <spectatorRequestViewData>5__62;

			[Token(Token = "0x400207C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
			private CharacterViewData <characterViewData>5__63;

			[Token(Token = "0x400207D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
			private TextHintViewData <textHintViewData>5__64;

			[Token(Token = "0x400207E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
			private AnimatedCanvasHandlerData <animatedCanvasData>5__65;

			[Token(Token = "0x400207F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
			private StationaryProjectileHandlerData <stationaryProjectileHandlerData>5__66;

			[Token(Token = "0x4002080")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
			private BlastonApiTokenData <blastonApiTokenData>5__67;

			[Token(Token = "0x4002081")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
			private ImpactHandlerData <impactHandlerData>5__68;

			[Token(Token = "0x4002082")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
			private CharacterSyncHandlerData <characterSyncData>5__69;

			[Token(Token = "0x4002083")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
			private IgnisSoundTriggerData <ignisSoundTriggerData>5__70;

			[Token(Token = "0x4002084")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
			private RatingMatchmakerSettingsData <ratingMatchmakerSettingsData>5__71;

			[Token(Token = "0x4002085")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
			private NetworkDebugMenu <networkDebug>5__72;

			[Token(Token = "0x4002086")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
			private VoipHandler <voipHandler>5__73;

			[Token(Token = "0x4002087")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
			private ToolChargeHandler <toolChargeHandler>5__74;

			[Token(Token = "0x4002088")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
			private ToolBowPullbackHandler <toolBowPullbackHandler>5__75;

			[Token(Token = "0x4002089")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
			private GameObject <poolParent>5__76;

			[Token(Token = "0x400208A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
			private PoolReferenceActivator <poolReferenceActivator>5__77;

			[Token(Token = "0x400208B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
			private CharacterSyncHandler <characterSyncHandler>5__78;

			[Token(Token = "0x400208C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
			private GameplayRulesHandler <gameplayRulesHandler>5__79;

			[Token(Token = "0x400208D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
			private StationaryProjectileHandler <stationaryProjectileHandler>5__80;

			[Token(Token = "0x400208E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
			private LockerRoomSceneHandler <lockerRoomSceneHandler>5__81;

			[Token(Token = "0x400208F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
			private BarEntranceHandler <barEntranceHandler>5__82;

			[Token(Token = "0x4002090")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
			private GesturesPlayerHandler <gesturePlayerHandler>5__83;

			[Token(Token = "0x4002091")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
			private AnimatedCanvasHandler <animatedCanvasHandler>5__84;

			[Token(Token = "0x4002092")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
			private EmotePlaybackHandler <emotePlaybackHandler>5__85;

			[Token(Token = "0x4002093")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
			private RichPresenceHandler <richPresenceHandler>5__86;

			[Token(Token = "0x4002094")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
			private ContactGesturesHandler <contactGesturesHandler>5__87;

			[Token(Token = "0x4002095")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
			private NonContactGesturesHandler <nonContactGesturesHandler>5__88;

			[Token(Token = "0x4002096")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
			private TextHintViewHandler <textHintViewHandler>5__89;

			[Token(Token = "0x4002097")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
			private ControllerOffsetViewHandler <controllerOffsetViewHandler>5__90;

			[Token(Token = "0x4002098")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
			private OnboardingMenuViewHandler <onboardingMenuViewHandler>5__91;

			[Token(Token = "0x4002099")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
			private CutsceneHandler <cutsceneHandler>5__92;

			[Token(Token = "0x400209A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
			private DialogueHandler <dialogueHandler>5__93;

			[Token(Token = "0x400209B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
			private StoryCharacterIdleHandler <storyCharacterIdleHandler>5__94;

			[Token(Token = "0x400209C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
			private CutsceneSkippHandler <cutsceneSkippHandler>5__95;

			[Token(Token = "0x400209D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
			private EndSeasonRewardViewHandler <endSeasonRewardViewHandler>5__96;

			[Token(Token = "0x400209E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
			private CharacterSkinViewHandler <characterSkinViewHandler>5__97;

			[Token(Token = "0x400209F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
			private StoryGuidedTutorial <storyGuidedTutorial>5__98;

			[Token(Token = "0x40020A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
			private ErrorMessageViewHandler <errorMessageHandler>5__99;

			[Token(Token = "0x40020A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
			private SideViewHandler <sideViewHandler>5__100;

			[Token(Token = "0x40020A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
			private List<ITickable> <additionalPreTickHandler>5__101;

			[Token(Token = "0x40020A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
			private List<ITickable> <additionalPostTickHandler>5__102;

			[Token(Token = "0x40020A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
			private AsyncOperation <asyncUnloading>5__103;

			[Token(Token = "0x170000F9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016A7")]
				[Address(RVA = "0x1002C2C", Offset = "0x1002C2C", VA = "0x1002C2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016A9")]
				[Address(RVA = "0x1002C74", Offset = "0x1002C74", VA = "0x1002C74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016A4")]
			[Address(RVA = "0x1001640", Offset = "0x1001640", VA = "0x1001640")]
			[DebuggerHidden]
			public <Start>d__402(int <>1__state)
			{
			}

			[Token(Token = "0x60016A5")]
			[Address(RVA = "0x1002C28", Offset = "0x1002C28", VA = "0x1002C28", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016A6")]
			[Address(RVA = "0xFE3AD0", Offset = "0xFE3AD0", VA = "0xFE3AD0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016A8")]
			[Address(RVA = "0x1002C34", Offset = "0x1002C34", VA = "0x1002C34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001EA4")]
		public const string PLATFORMPREF = "PLATFORM";

		[Token(Token = "0x4001EA5")]
		public const string REPLAYLEAVE = "REPLAYLEAVE";

		[Token(Token = "0x4001EA6")]
		public const string AUTOCONNECTPREF = "AUTOCONNECT";

		[Token(Token = "0x4001EA7")]
		public const string OFFLINEMODEPREF = "OFFLINE";

		[Token(Token = "0x4001EA8")]
		public const string ROOMCODEPREF = "ROOMCODE";

		[Token(Token = "0x4001EA9")]
		public const string SPECTATORPREF = "SPECTATOR";

		[Token(Token = "0x4001EAA")]
		public const string AUTO_PLAY_TEST = "AUTO_PLAY_TEST";

		[Token(Token = "0x4001EAB")]
		public const string AUTO_SPECTATE = "AUTO_SPECTATE";

		[Token(Token = "0x4001EAC")]
		public const string STORY_EVENT_PREF = "STORY_EVENT_PREF";

		[Token(Token = "0x4001EAD")]
		public const string STORY_EVENT_SKIP_CUTSCENE_PREF = "STORY_EVENT_SKIP_CUTSCENE_PREF";

		[Token(Token = "0x4001EAE")]
		public const string STORY_EVENT_FROM_OZO_PREF = "OZO_AFTER_STORY_EVENT_PREF";

		[Token(Token = "0x4001EAF")]
		public const string LAUNCH_REPLAY_URI = "LAUNCH_RE_URI_PREF";

		[Token(Token = "0x4001EB0")]
		public const string LAUNCH_REPLAY_RULES = "LAUNCH_REPLAY_RULES_PREF";

		[Token(Token = "0x4001EB1")]
		public const string LAUNCH_REPLAY_RETURN_TO_OZO = "LAUNCH_REPLAY_RETURN_TO_OZO";

		[Token(Token = "0x4001EB2")]
		public const string SIMULATE_EXTERNAL_MATCH_START = "SIMULATE_EXTERNAL_MATCH_START";

		[Token(Token = "0x4001EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Scene References")]
		[FormerlySerializedAs("ToolParent")]
		[SerializeField]
		private Transform worldParent;

		[Token(Token = "0x4001EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform playerMenuOrigin;

		[Token(Token = "0x4001EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private PlayerSpawnPointReference playerSpawnPointReference;

		[Token(Token = "0x4001EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform centerArenaTransform;

		[Token(Token = "0x4001EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Header("Settings")]
		private PlayerSettings playerSettings;

		[Token(Token = "0x4001EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private PointerRaycastHandlerSettings pointerRaycastHandlerSettings;

		[Token(Token = "0x4001EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[FormerlySerializedAs("spawnDeck")]
		[SerializeField]
		private DeckSpawnSettings deckSpawnSettings;

		[Token(Token = "0x4001EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private ToolDefinitionSettings toolDefinitionSettings;

		[Token(Token = "0x4001EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private CageSettings cageSettings;

		[Token(Token = "0x4001EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private SpectatorSettings spectatorSettings;

		[Token(Token = "0x4001EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4001EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private OwnershipSettings ownershipSettings;

		[Token(Token = "0x4001EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private ParticleEffectSettings particleEffectSettings;

		[Token(Token = "0x4001EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private ThrowSettings throwSettings;

		[Token(Token = "0x4001EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private CrowdSettings crowdSettings;

		[Token(Token = "0x4001EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private CharacterSettings characterSettings;

		[Token(Token = "0x4001EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private InteractionSettings interactionSettings;

		[Token(Token = "0x4001EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private CustomizationSettings customizationSettings;

		[Token(Token = "0x4001EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private CoinShopSettings coinShopSettings;

		[Token(Token = "0x4001EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private CharacterSkinViewSettings characterSkinViewSettings;

		[Token(Token = "0x4001EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private CoinItemSettings coinItemSettings;

		[Token(Token = "0x4001EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private LeagueTierSettings leagueTierSettings;

		[Token(Token = "0x4001EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private CameraFadeSettings cameraFadeSettings;

		[Token(Token = "0x4001ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private ToolMenuSettings toolMenuSettings;

		[Token(Token = "0x4001ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x4001ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private ReplaySettings replaySettings;

		[Token(Token = "0x4001ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private GameTipsSettings gameTipsSettings;

		[Token(Token = "0x4001ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private PhotonVoiceSettings photonVoiceSettings;

		[Token(Token = "0x4001ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private GestureSettings gestureSettings;

		[Token(Token = "0x4001ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private PauseMenuSettings pauseMenuSettings;

		[Token(Token = "0x4001ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private TextHintSettings textHintSettings;

		[Token(Token = "0x4001ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private ToolCustomizationSettings toolCustomizationSettings;

		[Token(Token = "0x4001ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[FormerlySerializedAs("patternItemSettings")]
		private PackItemSettings packItemSettings;

		[Token(Token = "0x4001ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private ArenaItemSettings arenaItemSettings;

		[Token(Token = "0x4001ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private MissionSettings missionSettings;

		[Token(Token = "0x4001ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		private DialogueSettings dialogueSettings;

		[Token(Token = "0x4001ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private CutsceneSettings cutsceneSettings;

		[Token(Token = "0x4001ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		private BhapticsSettings bhapticsSettings;

		[Token(Token = "0x4001ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		private ControllerOffsetSettings controllerOffsetSettings;

		[Token(Token = "0x4001EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		private SoundTriggersList soundTriggersList;

		[Token(Token = "0x4001EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		private PassthroughSettings passthroughSettings;

		[Token(Token = "0x4001EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[Header("Single Player")]
		[SerializeField]
		private SinglePlayerSettings singlePlayerSettings;

		[Token(Token = "0x4001EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		private StoryEventsSettings storyEventsSettings;

		[Token(Token = "0x4001EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		private ShaderWarmupData shaderWarmupData;

		[Token(Token = "0x4001EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[Header("Game State Settings")]
		[SerializeField]
		private OnboardingGameStateSettings onboardingGameStateSettings;

		[Token(Token = "0x4001EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		private MenuStateSettings menuStateSettings;

		[Token(Token = "0x4001EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[SerializeField]
		private SplashGameStateSettings splashGameStateSettings;

		[Token(Token = "0x4001EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[SerializeField]
		private ArenaGameStateSettings arenaGameStateSettings;

		[Token(Token = "0x4001EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[SerializeField]
		private StoryCharacterIdleSettings storyCharacterIdleSettings;

		[Token(Token = "0x4001EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[SerializeField]
		[Header("Debug")]
		private DebugSettings debugSettings;

		[Token(Token = "0x4001EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[SerializeField]
		private Transform debugAnchor;

		[Token(Token = "0x4001EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[SerializeField]
		private ArtDebugArenaReferences artDebugArenaReferences;

		[Token(Token = "0x4001EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[SerializeField]
		private EmotePlaybackSettings emotePlaybackSettings;

		[Token(Token = "0x4001EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private IGameState currentGameState;

		[Token(Token = "0x4001EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private EntryPointData entryPointData;

		[Token(Token = "0x4001EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private Dictionary<GameState, IGameState> gameStates;

		[Token(Token = "0x4001EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private DebugController debugController;

		[Token(Token = "0x4001EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private DebugStats debugStats;

		[Token(Token = "0x4001EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private ArtDebugHandler artDebugHandler;

		[Token(Token = "0x4001EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private NetworkSimulation networkSimulation;

		[Token(Token = "0x4001EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private DummyErrorMessageHandler dummyErrorMessageHandler;

		[Token(Token = "0x4001EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private GameData gameData;

		[Token(Token = "0x4001EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private MatchHandlerData matchHandlerData;

		[Token(Token = "0x4001EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private ArcadeData arcadeData;

		[Token(Token = "0x4001EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private ArcadeOperatorSettingsData arcadeOperatorSettingsData;

		[Token(Token = "0x4001EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private BayTekData bayTekData;

		[Token(Token = "0x4001EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private BayTekMatchLoopData bayTekMatchLoopData;

		[Token(Token = "0x4001EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private CameraReference cameraReference;

		[Token(Token = "0x4001EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private IXrPluginHandler xrPluginHandler;

		[Token(Token = "0x4001EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private IInputHandler inputHandler;

		[Token(Token = "0x4001EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private PlayerMovementHandler playerMovementHandler;

		[Token(Token = "0x4001EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private PlayerGrabHandler playerGrabHandler;

		[Token(Token = "0x4001EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private PlayerSpawnHandler playerSpawnHandler;

		[Token(Token = "0x4001EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private PlayerTriggerHandler playerTriggerHandler;

		[Token(Token = "0x4001EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private PlayerHUDHandler playerHUDHandler;

		[Token(Token = "0x4001EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private VrKeyboardHandler vrKeyboardHandler;

		[Token(Token = "0x4001EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private VrKeyboardData vrKeyboardData;

		[Token(Token = "0x4001F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private PlayerHealthHandler playerHealthHandler;

		[Token(Token = "0x4001F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private CharacterHandler characterHandler;

		[Token(Token = "0x4001F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private FaceAnimationsHandler faceAnimationsHandler;

		[Token(Token = "0x4001F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private DeckBuilderHandler deckBuildHandler;

		[Token(Token = "0x4001F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private CustomizationHandler customizationHandler;

		[Token(Token = "0x4001F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private ShopHandler shopHandler;

		[Token(Token = "0x4001F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private ProgressionHandler progressionHandler;

		[Token(Token = "0x4001F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private PlatformHandler platformHandler;

		[Token(Token = "0x4001F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		private BannerHandler bannerHandler;

		[Token(Token = "0x4001F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public CameraFadeHandler cameraFadeHandler;

		[Token(Token = "0x4001F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private MatchDeckInfoData matchDeckInfoData;

		[Token(Token = "0x4001F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		private MatchDeckInfoHandler matchDeckInfoHandler;

		[Token(Token = "0x4001F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private GrabData grabData;

		[Token(Token = "0x4001F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		private ToolGrabHandler toolGrabHandler;

		[Token(Token = "0x4001F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		private SplashGameState splashGameState;

		[Token(Token = "0x4001F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		private OnboardingGameState onboardingGameState;

		[Token(Token = "0x4001F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private OnboardingGameStateData onboardingGameStateData;

		[Token(Token = "0x4001F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private LockerRoomGameState lockerRoomGameState;

		[Token(Token = "0x4001F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		private LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x4001F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private ArenaGameState arenaGameState;

		[Token(Token = "0x4001F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4001F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		private StoryEventGameState storyEventGameState;

		[Token(Token = "0x4001F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		private bool changeTostoryEventGameState;

		[Token(Token = "0x4001F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		private StoryEventGameStateData storyEventGameStateData;

		[Token(Token = "0x4001F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private MainMenuHandler mainMenuHandler;

		[Token(Token = "0x4001F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		private MainMenuViewHandler mainMenuViewHandler;

		[Token(Token = "0x4001F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		private MainMenuTabsViewHandler mainMenuTabsViewHandler;

		[Token(Token = "0x4001F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		private LeaderBoardViewHandler leaderBoardViewHandler;

		[Token(Token = "0x4001F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		private FindFriendMenuViewHandler findFriendMenuViewHandler;

		[Token(Token = "0x4001F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		private SettingsMenuViewHandler settingsMenuViewHandler;

		[Token(Token = "0x4001F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		private ReportIssueViewHandler reportIssueViewHandler;

		[Token(Token = "0x4001F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		private AccountManagementViewHandler accountManagementViewHandler;

		[Token(Token = "0x4001F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		private PlayMenuViewHandler playMenViewHandler;

		[Token(Token = "0x4001F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		private DuelSettingsViewData duelSettingsViewData;

		[Token(Token = "0x4001F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		private DuelSettingsMenuViewHandler duelSettingsMenuViewHandler;

		[Token(Token = "0x4001F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		private StoryWidgetViewHandler storyWidgetViewHandler;

		[Token(Token = "0x4001F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		private ArenaMenuViewHandler arenaMenuViewHandler;

		[Token(Token = "0x4001F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		private PlayerStatsWidgetViewHandler playerStatsWidgetViewHandler;

		[Token(Token = "0x4001F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		private ToolViewHandler toolViewHandler;

		[Token(Token = "0x4001F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		private ToolSkinViewHandler toolSkinViewHandler;

		[Token(Token = "0x4001F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		private ExperienceCounterViewHandler experienceCounterViewHandler;

		[Token(Token = "0x4001F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		private CustomizationViewHandler customizationViewHandler;

		[Token(Token = "0x4001F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
		private PauseViewHandler pauseViewHandler;

		[Token(Token = "0x4001F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		private PauseMenuPlayerViewHandler pauseMenuPlayerViewHandler;

		[Token(Token = "0x4001F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
		private MenuStateData menuStateData;

		[Token(Token = "0x4001F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		private NetworkServicesDiagnosticsViewHandler networkServicesDiagnosticsViewHandler;

		[Token(Token = "0x4001F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
		private ToolInformationViewHandler toolInformationViewHandler;

		[Token(Token = "0x4001F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
		private ToolSelectionViewHandler toolSelectionViewHandler;

		[Token(Token = "0x4001F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
		private CharacterInformationViewHandler characterInformationViewHandler;

		[Token(Token = "0x4001F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
		private ItemGridViewHandler itemGridViewHandler;

		[Token(Token = "0x4001F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		private ItemInformationViewHandler itemInformationViewHandler;

		[Token(Token = "0x4001F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
		private PlayerInfoPanelViewHandler playerInfoPanelViewHandler;

		[Token(Token = "0x4001F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		private CoinShopViewHandler coinShopViewHandler;

		[Token(Token = "0x4001F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
		private NewsWidgetViewHandler newsWidgetViewHandler;

		[Token(Token = "0x4001F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
		private NewsViewHandler newsViewHandler;

		[Token(Token = "0x4001F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		private LeagueTierProgressViewHandler leagueTierProgressViewHandler;

		[Token(Token = "0x4001F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
		private MatchViewHandler matchViewHandler;

		[Token(Token = "0x4001F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
		private MatchCountdownHandler matchCountdownHandler;

		[Token(Token = "0x4001F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
		private LoginViewHandler loginViewHandler;

		[Token(Token = "0x4001F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
		private MatchmakingViewHandler matchmakingViewHandler;

		[Token(Token = "0x4001F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
		private AlwaysQueueWidgetViewHandler alwaysQueueWidgetViewHandler;

		[Token(Token = "0x4001F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
		private LevelUpPopupViewHandler levelUpPopupViewHandler;

		[Token(Token = "0x4001F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
		private FeaturePermissionHandler featurePermissionHandler;

		[Token(Token = "0x4001F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x478")]
		private QuitApplicationViewHandler quitApplicationViewHandler;

		[Token(Token = "0x4001F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x480")]
		private SpectatorViewHandler spectatorViewHandler;

		[Token(Token = "0x4001F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x488")]
		private GameMessageData gameMessageData;

		[Token(Token = "0x4001F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x490")]
		private GameMessageHandler gameMessageHandler;

		[Token(Token = "0x4001F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x498")]
		private MessageSender messageSender;

		[Token(Token = "0x4001F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A0")]
		private GameMessageInvoker gameMessageInvoker;

		[Token(Token = "0x4001F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A8")]
		private GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4001F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B0")]
		private SyncHandler syncHandler;

		[Token(Token = "0x4001F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B8")]
		private ReplayHandler replayHandler;

		[Token(Token = "0x4001F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C0")]
		private IRoomTimeProvider replayRoomTimeProvider;

		[Token(Token = "0x4001F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C8")]
		private SingleMessageSerializer singleMessageSerializer;

		[Token(Token = "0x4001F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D0")]
		private GameMessageSerializer gameMessageSerializer;

		[Token(Token = "0x4001F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D8")]
		private ReplayData replayData;

		[Token(Token = "0x4001F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E0")]
		private SpectatorRoomListMenuViewHandler spectatorRoomListMenuViewHandler;

		[Token(Token = "0x4001F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E8")]
		private GameMessageUploadHandlerData gameMessageUploadHandlerData;

		[Token(Token = "0x4001F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F0")]
		private GameMessageUploadHandler gameMessageUploadHandler;

		[Token(Token = "0x4001F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F8")]
		private GameMessageDownloadHandlerData gameMessageDownloadHandlerData;

		[Token(Token = "0x4001F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x500")]
		private GameMessageDownloadHandler gameMessageDownloadHandler;

		[Token(Token = "0x4001F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x508")]
		private ReplayMenuViewHandler replayMenuViewHandler;

		[Token(Token = "0x4001F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x510")]
		private ExperimentalFeaturesData experimentalFeaturesData;

		[Token(Token = "0x4001F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x518")]
		private PlayFabExperimentalFeaturesHandler playFabExperimentalFeaturesHandler;

		[Token(Token = "0x4001F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x520")]
		private BotController aIController;

		[Token(Token = "0x4001F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x528")]
		private AiData aiData;

		[Token(Token = "0x4001F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x530")]
		private AIRecorder aiRecorder;

		[Token(Token = "0x4001F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x538")]
		private BotEmoteRecordHandler botEmoteRecordHandler;

		[Token(Token = "0x4001F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x540")]
		private BotEmoteRecordData botEmoteRecordData;

		[Token(Token = "0x4001F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x548")]
		private BotUtils botUtils;

		[Token(Token = "0x4001F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x550")]
		private StoryData storyData;

		[Token(Token = "0x4001F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x558")]
		private PlayFabStoryHandler playFabStoryHandler;

		[Token(Token = "0x4001F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x560")]
		private StoryMenuViewHandler storyMenuViewHandler;

		[Token(Token = "0x4001F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x568")]
		private StoryEventProgressData storyEventProgressData;

		[Token(Token = "0x4001F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x570")]
		private StoryProgressHandler storyProgressHandler;

		[Token(Token = "0x4001F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x578")]
		private PlayFabCloudScriptInvocationHandler playFabCloudScriptInvocationHandler;

		[Token(Token = "0x4001F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x580")]
		private PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData;

		[Token(Token = "0x4001F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x588")]
		private PointerData pointerData;

		[Token(Token = "0x4001F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x590")]
		private PointerRaycastHandler pointerRaycastHandler;

		[Token(Token = "0x4001F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x598")]
		private InteractionHandler interactionHandler;

		[Token(Token = "0x4001F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A0")]
		private PointerHandler pointerHandler;

		[Token(Token = "0x4001F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A8")]
		private IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4001F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B0")]
		private NetworkConnectionProxy networkConnectionProxy;

		[Token(Token = "0x4001F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B8")]
		private PhotonNetworkConnectionCallbacks photonNetworkConnection;

		[Token(Token = "0x4001F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C0")]
		private NetworkConnectionHandler networkConnectionHandler;

		[Token(Token = "0x4001F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C8")]
		private PhotonNetworkMessageReciver networkMessageReciver;

		[Token(Token = "0x4001F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D0")]
		private NetworkIdFactory networkIdFactory;

		[Token(Token = "0x4001F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D8")]
		private NetworkPlayerDataFactory networkPlayerDataFactory;

		[Token(Token = "0x4001F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E0")]
		private NetworkIdAllocator networkIdAllocator;

		[Token(Token = "0x4001F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E8")]
		private IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4001F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F0")]
		private IRoomTimeProvider gameRoomTimeProvider;

		[Token(Token = "0x4001F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F8")]
		private PhotonRegionSelector photonRegionSelector;

		[Token(Token = "0x4001F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x600")]
		private RoomTimeReSyncData roomTimeReSyncData;

		[Token(Token = "0x4001F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x608")]
		private RoomTimeReSyncHandler roomTimeReSyncHandler;

		[Token(Token = "0x4001F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x610")]
		private BadPingDetectionData badPingDetectionData;

		[Token(Token = "0x4001F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x618")]
		private BadPingDetectionHandler badPingDetectionHandler;

		[Token(Token = "0x4001F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x620")]
		private PingInformationHandler pingInformationHandler;

		[Token(Token = "0x4001F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x628")]
		private PingInformationData pingInformationData;

		[Token(Token = "0x4001F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x630")]
		private FactoryDirector factoryDirector;

		[Token(Token = "0x4001F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x638")]
		private ToolSpawnHandler spawnHandler;

		[Token(Token = "0x4001F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x640")]
		private ToolThrownHandler toolThrownHandler;

		[Token(Token = "0x4001F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x648")]
		private ToolThrownHandlerData toolThrownHandlerData;

		[Token(Token = "0x4001F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x650")]
		private ToolRecycleHandler toolRecycleHandler;

		[Token(Token = "0x4001F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x658")]
		private ShieldHandler shieldHandler;

		[Token(Token = "0x4001F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x660")]
		private CooldownHandler cooldownHandler;

		[Token(Token = "0x4001F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x668")]
		private CooldownData cooldownData;

		[Token(Token = "0x4001F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x670")]
		private TimeHandler timeHandler;

		[Token(Token = "0x4001F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x678")]
		private BarrierShieldToolHandler barrierShieldToolHandler;

		[Token(Token = "0x4001F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x680")]
		private TetherToolHandler tetherToolHandler;

		[Token(Token = "0x4001F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x688")]
		private BarrierSourceHandler barrierSourceHandler;

		[Token(Token = "0x4001F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x690")]
		private ToolSpawnViewHandler toolSpawnViewHandler;

		[Token(Token = "0x4001F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x698")]
		private DamageOverTimeData damageOverTimeData;

		[Token(Token = "0x4001F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A0")]
		private StraightProjectileHandler straightProjectileHandler;

		[Token(Token = "0x4001F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A8")]
		private StraightProjectileHandlerData straightProjectileHandlerData;

		[Token(Token = "0x4001F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B0")]
		private LaserHandlerData laserHandlerData;

		[Token(Token = "0x4001F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B8")]
		private LaserHandler laserHandler;

		[Token(Token = "0x4001F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C0")]
		private ProjectileRecycleHandler projectileRecycleHandler;

		[Token(Token = "0x4001F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C8")]
		private CurveProjectileHandler curveProjectileHandler;

		[Token(Token = "0x4001F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D0")]
		private CurveProjectileHandlerData curveProjectileHandlerData;

		[Token(Token = "0x4001F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D8")]
		private ProjectileAirHandler projectileAirHandler;

		[Token(Token = "0x4001F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E0")]
		private HelixProjectileHandler helixProjectileHandler;

		[Token(Token = "0x4001F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E8")]
		private HelixProjectileHandlerData helixProjectileHandlerData;

		[Token(Token = "0x4001F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F0")]
		private BounceProjectileHandler bounceProjectileHandler;

		[Token(Token = "0x4001F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F8")]
		private BounceProjectileHandlerData bounceProjectileHandlerData;

		[Token(Token = "0x4001F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x700")]
		private ToolAttachmentsHandler toolAttachmentsHandler;

		[Token(Token = "0x4001F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x708")]
		private ToolAttachmentsData toolAttachmentsData;

		[Token(Token = "0x4001F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x710")]
		private PlayFabToolAttachmentHandler playFabToolAttachmentHandler;

		[Token(Token = "0x4001F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x718")]
		private ToolMasteryData toolMasteryData;

		[Token(Token = "0x4001F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x720")]
		private PlayFabToolMasteryHandler playFabToolMasteryHandler;

		[Token(Token = "0x4001F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x728")]
		private ImpactHandler impactHandler;

		[Token(Token = "0x4001F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x730")]
		private OwnershipHelper ownershipHelper;

		[Token(Token = "0x4001F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x738")]
		private IgnisSoundTriggerHandler ignisSoundTriggerHandler;

		[Token(Token = "0x4001F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x740")]
		private IHapticHandler hapticsHandler;

		[Token(Token = "0x4001F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x748")]
		private ParticleEffectHandler particleEffectHandler;

		[Token(Token = "0x4001F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x750")]
		private AnimationStateHandler animationStateHandler;

		[Token(Token = "0x4001F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x758")]
		private SpectatorHandler spectatorHandler;

		[Token(Token = "0x4001F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x760")]
		private SpectatorPinger spectatorPinger;

		[Token(Token = "0x4001F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x768")]
		private SpectateRequestViewHandler spectateRequestViewHandler;

		[Token(Token = "0x4001F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x770")]
		private SpectatorCameraData spectatorCameraData;

		[Token(Token = "0x4001F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x778")]
		private SpectatorCameraHandler spectatorCameraHandler;

		[Token(Token = "0x4001FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x780")]
		private CageHandler cageHandler;

		[Token(Token = "0x4001FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x788")]
		private EnvironmentHandler environmentHandler;

		[Token(Token = "0x4001FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x790")]
		private DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x4001FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x798")]
		private ScoreBoardViewHandler scoreBoardViewHandler;

		[Token(Token = "0x4001FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A0")]
		private CrowdHandler crowdHandler;

		[Token(Token = "0x4001FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A8")]
		private SceneHandler sceneHandler;

		[Token(Token = "0x4001FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B0")]
		private ParticleEffectReference[] particleEffectPool;

		[Token(Token = "0x4001FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B8")]
		private ParticleEffectReference[] damageNumberParticleEffectPool;

		[Token(Token = "0x4001FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C0")]
		private IMultiplayerProtocolVersion multiplayerProtocolVersion;

		[Token(Token = "0x4001FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C8")]
		private RatingMatchmakingHandler globalRatingMatchmakingHandler;

		[Token(Token = "0x4001FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D0")]
		private RatingMatchmakerSettingsHandler ratingMatchmakerSettingsHandler;

		[Token(Token = "0x4001FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D8")]
		private PlayFabLeaguePointsSeasonData playFabLeaguePointsSeasonData;

		[Token(Token = "0x4001FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E0")]
		private PlayFabLeaguePointsSeasonHandler playFabLeaguePointsSeasonHandler;

		[Token(Token = "0x4001FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E8")]
		private MatchmakingData ratingMatchmakerData;

		[Token(Token = "0x4001FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7F0")]
		private GlobalMatchmakingStateData globalMatchmakingStateData;

		[Token(Token = "0x4001FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7F8")]
		private MatchReportingData matchReportingData;

		[Token(Token = "0x4001FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x800")]
		private PlayFabMatchReportingHandler matchReportingHandler;

		[Token(Token = "0x4001FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x808")]
		private FindFriendData findFriendData;

		[Token(Token = "0x4001FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x810")]
		private FindFriendHandler findFriendHandler;

		[Token(Token = "0x4001FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x818")]
		private PlayFabPlayerStatisticsHandler playerStatisticsHandler;

		[Token(Token = "0x4001FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x820")]
		private PlayerStatisticsData playerStatisticsData;

		[Token(Token = "0x4001FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x828")]
		private MatchHandler matchHandler;

		[Token(Token = "0x4001FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x830")]
		private TournamentEventData tournamentEventData;

		[Token(Token = "0x4001FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x838")]
		private TournamentEventWidgetViewHandler tournamentEventWidgetViewHandler;

		[Token(Token = "0x4001FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x840")]
		private TournamentEventMenuViewHandler tournamentEventMenuViewHandler;

		[Token(Token = "0x4001FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x848")]
		private PlayFabTournamentEventHandler playFabTournamentEventHandler;

		[Token(Token = "0x4001FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x850")]
		private RatingMatchmakingHandler tournamentEventMatchmakingHandler;

		[Token(Token = "0x4001FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x858")]
		private MatchmakingData tournamentEventMatchmakingData;

		[Token(Token = "0x4001FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x860")]
		private RatingMatchmakingHandler shootoutDuelMatchmakingHandler;

		[Token(Token = "0x4001FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x868")]
		private RatingMatchmakingHandler scrapperShootoutDuelMatchmakingHandler;

		[Token(Token = "0x4001FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x870")]
		private MatchmakingData shootoutDuelMatchmakingData;

		[Token(Token = "0x4001FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x878")]
		private MatchmakingData scrapperShootoutDuelMatchmakingData;

		[Token(Token = "0x4001FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x880")]
		private RatingMatchmakingHandler winterClassicMatchmakingHandler;

		[Token(Token = "0x4001FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x888")]
		private MatchmakingData winterClassicDuelMatchmakingData;

		[Token(Token = "0x4001FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x890")]
		private ITickable platformLoginHandler;

		[Token(Token = "0x4001FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x898")]
		private PlatformLoginData platformLoginData;

		[Token(Token = "0x4001FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A0")]
		private ILoginHandler loginHandler;

		[Token(Token = "0x4001FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A8")]
		private PlayFabLoginResponseHandler playFabLoginResponseHandler;

		[Token(Token = "0x4001FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8B0")]
		private PushNotificationInfoData pushNotificationInfoData;

		[Token(Token = "0x4001FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8B8")]
		private PlayFabPushNotificationInfoHandler playFabPushNotificationInfoHandler;

		[Token(Token = "0x4001FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C0")]
		private PlayFabUserMessageHandler playFabUserMessageHandler;

		[Token(Token = "0x4001FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C8")]
		private LeagueTierProgressHandler leagueTierProgressHandler;

		[Token(Token = "0x4001FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D0")]
		private PlayFabProgressionHandler playFabProgressionHandler;

		[Token(Token = "0x4001FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D8")]
		private PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x4001FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8E0")]
		private Ignis.DebugTools.LogSender logSender;

		[Token(Token = "0x4001FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8E8")]
		private TimeSinceStartupTrackingHandler timeSinceStartupTrackingHandler;

		[Token(Token = "0x4001FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8F0")]
		private GameDesignTrackingData gameDesignTrackingData;

		[Token(Token = "0x4001FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8F8")]
		private GameDesignTelemetryHandler gameDesignTelemetryHandler;

		[Token(Token = "0x4001FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x900")]
		private CertificateFingerprintTrackingHandler certificateFingerprintTrackingHandler;

		[Token(Token = "0x4001FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x908")]
		private IgnisMandatoryTelemetryHandler ignisMandatoryTelemetryHandler;

		[Token(Token = "0x4001FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x910")]
		private PlayFabAbuseReportingHandler playFabAbuseReportingHandler;

		[Token(Token = "0x4001FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x918")]
		private AbuseReportingData abuseReportingData;

		[Token(Token = "0x4001FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static NetworkingRegion HARD_CODED_DEFAULT_REGION;

		[Token(Token = "0x4001FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x920")]
		private GameMechanicStateHelper gameMechanicStateHelper;

		[Token(Token = "0x4001FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x928")]
		private bool allocateMemeoryIndefenetlyToSimulateMemoryLeak;

		[Token(Token = "0x4001FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x930")]
		private PlayFabPlayerIdentitiesHandler playFabPlayerIdentitiesHandler;

		[Token(Token = "0x4001FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x938")]
		private PlayFabPlayerIdentitiesData playerIdentitiesData;

		[Token(Token = "0x4001FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x940")]
		private PlayFabUserDataStorageHandler playFabUserDataStorageHandler;

		[Token(Token = "0x4001FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x948")]
		private PlayFabUserData playFabUserData;

		[Token(Token = "0x4001FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x950")]
		private PlayFabStorageSyncHandlerData playFabStorageSyncHandlerData;

		[Token(Token = "0x4001FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x958")]
		private PlayFabStorageSyncHandler playFabStorageSyncHandler;

		[Token(Token = "0x4001FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x960")]
		private PlayFabDeckHandler playFabDeckHandler;

		[Token(Token = "0x4001FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x968")]
		private PlayFabTitleData playFabTitleData;

		[Token(Token = "0x4001FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x970")]
		private PlayFabTitleDataHandler playFabTitleDataHandler;

		[Token(Token = "0x4001FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x978")]
		private PlayFabUserSettingsHandler playFabUserSettingsHandler;

		[Token(Token = "0x4001FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x980")]
		private PlayFabUserSettingsData playFabUserSettingsData;

		[Token(Token = "0x4001FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x988")]
		private ServerTimeSyncData serverTimeSyncData;

		[Token(Token = "0x4001FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x990")]
		private PlayFabServerTimeSyncHandler serverTimeSyncHandler;

		[Token(Token = "0x4001FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x998")]
		private PlayFabNewsHandler playFabNewsHandler;

		[Token(Token = "0x4001FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A0")]
		private NewsData newsData;

		[Token(Token = "0x4001FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A8")]
		private IPlatformFactory platformFactory;

		[Token(Token = "0x4001FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9B0")]
		private SeasonMissionsData seasonMissionsData;

		[Token(Token = "0x4001FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9B8")]
		private PlayFabSeasonMissionHandler playfabSeasonMissionHandler;

		[Token(Token = "0x4001FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C0")]
		private MissionViewHandler missionViewHandler;

		[Token(Token = "0x4001FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C8")]
		private MissionNotificationHandler missionNotificationHandler;

		[Token(Token = "0x4001FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D0")]
		private MissionProgressHandler missionProgressHandler;

		[Token(Token = "0x4001FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D8")]
		private BlastonApiTokenData blastonApiTokenData;

		[Token(Token = "0x4001FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E0")]
		private BlastonApiTokenHandler blastonApiTokenHandler;

		[Token(Token = "0x4001FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E8")]
		private KnockoutTournamentData knockoutTournamentData;

		[Token(Token = "0x4001FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9F0")]
		private KnockoutTournamentHandler knockoutTournamentHandler;

		[Token(Token = "0x4001FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9F8")]
		private bool initialized;

		[Token(Token = "0x4001FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA00")]
		private IBotSelector botSelector;

		[Token(Token = "0x4001FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA08")]
		private LocalPersistentData localPersistentData;

		[Token(Token = "0x4001FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA10")]
		private PlayFabMatchRewardPredictionHandler matchRewardPredictionHandler;

		[Token(Token = "0x4001FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA18")]
		private MatchRewardPredictionData matchRewardPredictionData;

		[Token(Token = "0x4001FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA20")]
		private ITimeProvider realTimeProvider;

		[Token(Token = "0x4001FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA28")]
		private PlayerReferences localPlayerReferences;

		[Token(Token = "0x4001FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA30")]
		private LogSenderComponent logSenderComponent;

		[Token(Token = "0x4001FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA38")]
		private TournamentCreationComponent tournamentCreationComponent;

		[Token(Token = "0x4001FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA40")]
		private LoginData loginData;

		[Token(Token = "0x4001FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA48")]
		private OpponentFoundViewHandler opponentFoundViewHandler;

		[Token(Token = "0x4001FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA50")]
		private AutoPlayTestHandler autoPlayTestHandler;

		[Token(Token = "0x4001FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA58")]
		private AutoPlayTestData autoPlayTestData;

		[Token(Token = "0x4001FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA60")]
		private BotController autoPlayBotController;

		[Token(Token = "0x4001FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA68")]
		private AiData autoPlayAiData;

		[Token(Token = "0x4001FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA70")]
		private AutoSpectateData autoSpectateData;

		[Token(Token = "0x4002000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA78")]
		private AutoSpectateQueueData autoSpectateQueueData;

		[Token(Token = "0x4002001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA80")]
		private AutoSpectateHandler autoSpectateHandler;

		[Token(Token = "0x4002002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA88")]
		private AutoSpectateReplayHandler autoSpectateReplayHandler;

		[Token(Token = "0x4002003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA90")]
		private AutoSpectateQueueHandler autoSpectateAutoModeHandler;

		[Token(Token = "0x4002004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA98")]
		private AutoSpectateQueueViewHandler autoSpectateAutoMenuViewHandler;

		[Token(Token = "0x4002005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAA0")]
		private AutoSpectatePublicModeHandler autoSpectatePublicModeHandler;

		[Token(Token = "0x4002006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAA8")]
		private AutoSpectatePublicModeMenuViewHandler autoSpectatePublicModeMenuViewHandler;

		[Token(Token = "0x4002007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAB0")]
		private AutoSpectateInternalModeMenuViewHandler autoSpectateInternalModeMenuViewHandler;

		[Token(Token = "0x4002008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAB8")]
		private AutoSpectateScoreboardViewHandler autoSpectateScoreboardViewHandler;

		[Token(Token = "0x4002009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC0")]
		private AutoSpectateConfigureSettingsViewHandler autoSpectateConfigureSettingsViewHandler;

		[Token(Token = "0x400200A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC8")]
		private AutoSpectateDuelSelectorViewHandler autoSpectateDuelSelectorViewHandler;

		[Token(Token = "0x400200B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD0")]
		private AutoSpectateGreyTransparencyViewHandler autoSpectateGreyTransparencyViewHandler;

		[Token(Token = "0x400200C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD8")]
		private AutoSpectateAudioSettingsViewHandler autoSpectateAudioSettingsViewHandler;

		[Token(Token = "0x400200D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE0")]
		private AutoSpectateControlsViewHandler autoSpectateControlsViewHandler;

		[Token(Token = "0x400200E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE8")]
		private AutoSpectateLanguageSettingsViewHandler autoSpectateLanguageSettingsViewHandler;

		[Token(Token = "0x400200F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAF0")]
		private AutoSpectateQuitConfirmationViewHandler autoSpectateQuitConfirmationViewHandler;

		[Token(Token = "0x4002010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAF8")]
		private AutoSpectateDisplaySettingsViewHandler autoSpectateDisplaySettingsViewHandler;

		[Token(Token = "0x4002011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB00")]
		private List<ITickable> autoSpectateHandlers;

		[Token(Token = "0x4002012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB08")]
		private PlayFabApiTokenHandler playFabApiTokenHandler;

		[Token(Token = "0x4002013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB10")]
		private ApiTokenData apiTokenData;

		[Token(Token = "0x4002014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB18")]
		private TokenApisHttpComponent tokenApisHttpComponent;

		[Token(Token = "0x4002015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB20")]
		private MatchStartAnnouncementsHandler matchStartAnnouncementsHandler;

		[Token(Token = "0x4002016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB28")]
		private MatchStartAnnouncementsData matchStartAnnouncementsData;

		[Token(Token = "0x4002017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB30")]
		private BhapticsHandler bhapticsHandler;

		[Token(Token = "0x4002018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB38")]
		private BhapticsData bhapticsData;

		[Token(Token = "0x4002019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB40")]
		private BhapticsSettingsHandler bhapticsSettingsHandler;

		[Token(Token = "0x400201A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB48")]
		private GamePlayRulesData gamePlayRulesData;

		[Token(Token = "0x400201B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB50")]
		private int forceLogCount;

		[Token(Token = "0x400201C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB58")]
		private List<IFixedTickable> IFixedTickable;

		[Token(Token = "0x400201D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB60")]
		private List<ITickable> onboardingGameStatePreTickHandlers;

		[Token(Token = "0x400201E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB68")]
		private List<ITickable> onboardingGameStatePostTickHandlers;

		[Token(Token = "0x400201F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB70")]
		private List<ILateTickable> onboardingGameStateLateTickHandlers;

		[Token(Token = "0x4002020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB78")]
		private List<ITickable> lockerRoomGameStatePreTickHandlers;

		[Token(Token = "0x4002021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB80")]
		private List<ITickable> lockerRoomGameStatePostTickHandlers;

		[Token(Token = "0x4002022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB88")]
		private List<ILateTickable> lockerRoomGameStateLateTickHandlers;

		[Token(Token = "0x4002023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB90")]
		private List<ITickable> storyEventGameStatePreTickHandlers;

		[Token(Token = "0x4002024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB98")]
		private List<ITickable> storyEventGameStatePostTickHandlers;

		[Token(Token = "0x4002025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA0")]
		private List<ILateTickable> storyEventGameStateLateTickHandlers;

		[Token(Token = "0x4002026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA8")]
		private List<ITickable> arenaGameStatePreTickHandlers;

		[Token(Token = "0x4002027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBB0")]
		private List<ITickable> arenaGameStatePostTickHandlers;

		[Token(Token = "0x4002028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBB8")]
		private List<ILateTickable> arenaGameStateLateTickHandlers;

		[Token(Token = "0x4002029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC0")]
		private InitMessageHandler initMessageHandler;

		[Token(Token = "0x400202A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC8")]
		private CharacterData characterData;

		[Token(Token = "0x400202B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD0")]
		private OwnershipData ownershipData;

		[Token(Token = "0x400202C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD8")]
		private OwnershipHandler ownershipHandler;

		[Token(Token = "0x400202D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBE0")]
		private OnBoardingPopupHandler onboardingPopup;

		[Token(Token = "0x400202E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBE8")]
		private CageData cageData;

		[Token(Token = "0x400202F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBF0")]
		private PassthroughHandler passthroughHandler;

		[Token(Token = "0x4002030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBF8")]
		private PassthroughData passthroughData;

		[Token(Token = "0x4002031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC00")]
		private PassthroughSettingsViewHandler passthroughSettingsViewHandler;

		[Token(Token = "0x6001689")]
		[Address(RVA = "0x100152C", Offset = "0x100152C", VA = "0x100152C")]
		public static void SetPlayerPrefsKey(string keyName, string keyValue)
		{
		}

		[Token(Token = "0x600168A")]
		[Address(RVA = "0x1001544", Offset = "0x1001544", VA = "0x1001544")]
		public static string GetPlayerPrefsKey(string keyName, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x600168B")]
		[Address(RVA = "0x10015D8", Offset = "0x10015D8", VA = "0x10015D8")]
		[IteratorStateMachine(typeof(<Start>d__402))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x600168C")]
		[Address(RVA = "0x1001668", Offset = "0x1001668", VA = "0x1001668")]
		private string GetShortMatchId()
		{
			return null;
		}

		[Token(Token = "0x600168D")]
		[Address(RVA = "0x10016A8", Offset = "0x10016A8", VA = "0x10016A8")]
		private void SmoothHeadMovement()
		{
		}

		[Token(Token = "0x600168E")]
		[Address(RVA = "0x10016D4", Offset = "0x10016D4", VA = "0x10016D4")]
		private void GoToGameState(IGameState newGameState)
		{
		}

		[Token(Token = "0x600168F")]
		[Address(RVA = "0x10017E4", Offset = "0x10017E4", VA = "0x10017E4")]
		private void FixedTick()
		{
		}

		[Token(Token = "0x6001690")]
		[Address(RVA = "0x100189C", Offset = "0x100189C", VA = "0x100189C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001691")]
		[Address(RVA = "0x1001C18", Offset = "0x1001C18", VA = "0x1001C18")]
		private void UpdatedFixedTick()
		{
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0x1001F6C", Offset = "0x1001F6C", VA = "0x1001F6C")]
		private void CheckAndHandleFullLog()
		{
		}

		[Token(Token = "0x6001693")]
		[Address(RVA = "0x1002270", Offset = "0x1002270", VA = "0x1002270")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0x1002328", Offset = "0x1002328", VA = "0x1002328")]
		private void DumpScore()
		{
		}

		[Token(Token = "0x6001695")]
		[Address(RVA = "0x10023F8", Offset = "0x10023F8", VA = "0x10023F8")]
		public GameMessageInvokationResult OnSendHello(LogMessage logMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0x100241C", Offset = "0x100241C", VA = "0x100241C")]
		private void ForceCrash()
		{
		}

		[Token(Token = "0x6001697")]
		[Address(RVA = "0x1002428", Offset = "0x1002428", VA = "0x1002428")]
		private void AllocateMemoryIndefinitelyToSimulateMemoryLeak()
		{
		}

		[Token(Token = "0x6001698")]
		[Address(RVA = "0x1002434", Offset = "0x1002434", VA = "0x1002434")]
		private void FakePauseApplication(bool pause)
		{
		}

		[Token(Token = "0x6001699")]
		[Address(RVA = "0x100243C", Offset = "0x100243C", VA = "0x100243C")]
		private void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x600169A")]
		[Address(RVA = "0x10026E4", Offset = "0x10026E4", VA = "0x10026E4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600169B")]
		[Address(RVA = "0x100278C", Offset = "0x100278C", VA = "0x100278C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600169C")]
		[Address(RVA = "0x1002634", Offset = "0x1002634", VA = "0x1002634")]
		private void SendLogsToLogStorageIfErrorOccurred()
		{
		}

		[Token(Token = "0x600169D")]
		[Address(RVA = "0x10021D0", Offset = "0x10021D0", VA = "0x10021D0")]
		private string GetLogfileName()
		{
			return null;
		}

		[Token(Token = "0x600169E")]
		[Address(RVA = "0x1002804", Offset = "0x1002804", VA = "0x1002804")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600169F")]
		[Address(RVA = "0x1002848", Offset = "0x1002848", VA = "0x1002848")]
		public EntryPoint()
		{
		}
	}
	[Token(Token = "0x200051B")]
	public enum GameMode
	{
		[Token(Token = "0x40020A6")]
		Multiplayer,
		[Token(Token = "0x40020A7")]
		SinglePlayer,
		[Token(Token = "0x40020A8")]
		Spectator
	}
	[Token(Token = "0x200051C")]
	public enum GameplayRules
	{
		[Token(Token = "0x40020AA")]
		Classic = 0,
		[Token(Token = "0x40020AB")]
		Shootout = 1,
		[Token(Token = "0x40020AC")]
		WinterClassic = 2,
		[Token(Token = "0x40020AD")]
		ScrapperShootout = 3,
		[Token(Token = "0x40020AE")]
		None = 100
	}
	[Token(Token = "0x200051D")]
	public class GameData
	{
		[Token(Token = "0x40020AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly SoundTriggersList soundTriggersList;

		[Token(Token = "0x40020B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int localPlayerNetworkId;

		[Token(Token = "0x40020B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int opponentPlayerNetworkId;

		[Token(Token = "0x40020B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int playerOneNetworkId;

		[Token(Token = "0x40020B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int playerTwoNetworkId;

		[Token(Token = "0x40020B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isLocalPlayerOne;

		[Token(Token = "0x40020B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<int> locallyControlledIds;

		[Token(Token = "0x40020B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<PlayerData> locallyControlled;

		[Token(Token = "0x40020B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Dictionary<int, int> playerdIdToLocalControlledIndex;

		[Token(Token = "0x40020B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Dictionary<int, PlayerData> playerDataLookUp;

		[Token(Token = "0x40020B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Dictionary<int, CharacterReference> characterLookup;

		[Token(Token = "0x40020BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<PlayerData> players;

		[Token(Token = "0x40020BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Dictionary<int, Tool> toolsLookUp;

		[Token(Token = "0x40020BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<Tool> tools;

		[Token(Token = "0x40020BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Dictionary<int, Projectile> projectilesLookUp;

		[Token(Token = "0x40020BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<Projectile> projectiles;

		[Token(Token = "0x40020BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Dictionary<int, Cage> cages;

		[Token(Token = "0x40020C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ArenaSpecificSettings arenaSettings;

		[Token(Token = "0x40020C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameplayRules gameplayRules;

		[Token(Token = "0x40020C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private GameMode gameMode;

		[Token(Token = "0x40020C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private SpawnPoints spawnPoints;

		[Token(Token = "0x40020C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private GameplayRulesSoundEvents soundEvents;

		[Token(Token = "0x170000FB")]
		public GameMode GameMode
		{
			[Token(Token = "0x60016AB")]
			[Address(RVA = "0x1002C7C", Offset = "0x1002C7C", VA = "0x1002C7C")]
			get
			{
				return default(GameMode);
			}
		}

		[Token(Token = "0x170000FC")]
		public GameplayRules GameplayRules
		{
			[Token(Token = "0x60016AC")]
			[Address(RVA = "0x1002C84", Offset = "0x1002C84", VA = "0x1002C84")]
			get
			{
				return default(GameplayRules);
			}
		}

		[Token(Token = "0x170000FD")]
		public ArenaSpecificSettings ArenaSettings
		{
			[Token(Token = "0x60016AD")]
			[Address(RVA = "0x1002C8C", Offset = "0x1002C8C", VA = "0x1002C8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FE")]
		public SpawnPoints SpawnPoints
		{
			[Token(Token = "0x60016AE")]
			[Address(RVA = "0x1002C94", Offset = "0x1002C94", VA = "0x1002C94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FF")]
		public GameplayRulesSoundEvents SoundEvents
		{
			[Token(Token = "0x60016AF")]
			[Address(RVA = "0x1002C9C", Offset = "0x1002C9C", VA = "0x1002C9C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016AA")]
		[Address(RVA = "0x1000F78", Offset = "0x1000F78", VA = "0x1000F78")]
		public GameData([Optional] SoundTriggersList soundTriggersList)
		{
		}

		[Token(Token = "0x60016B0")]
		[Address(RVA = "0x1002CA4", Offset = "0x1002CA4", VA = "0x1002CA4")]
		public void ChangeGameMode(GameMode newGameMode)
		{
		}

		[Token(Token = "0x60016B1")]
		[Address(RVA = "0x1002D58", Offset = "0x1002D58", VA = "0x1002D58")]
		public void ChangeGameplayRules(GameplayRules newGameplayRules)
		{
		}

		[Token(Token = "0x60016B2")]
		[Address(RVA = "0x1002E6C", Offset = "0x1002E6C", VA = "0x1002E6C")]
		public void ChangeCurrentArenaSettings(ArenaSpecificSettings newArenaSettings)
		{
		}

		[Token(Token = "0x60016B3")]
		[Address(RVA = "0x1002F08", Offset = "0x1002F08", VA = "0x1002F08")]
		public void ChangeSpawnPoints(SpawnPoints newSpawnPoints)
		{
		}
	}
	[Token(Token = "0x200051E")]
	public class GameMessageFactory
	{
		[Token(Token = "0x40020C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x40020C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x40020C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x40020C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private uint sequenceNumber;

		[Token(Token = "0x60016B4")]
		[Address(RVA = "0x10013AC", Offset = "0x10013AC", VA = "0x10013AC")]
		public GameMessageFactory(IRoomTimeProvider roomTimeProvider, IgnisNetworkConnectionData networkConnectionData, MatchHandlerData matchHandlerData)
		{
		}

		[Token(Token = "0x60016B5")]
		[Address(RVA = "0x1002FA4", Offset = "0x1002FA4", VA = "0x1002FA4")]
		public void ResetSequenceNumber()
		{
		}

		[Token(Token = "0x60016B6")]
		[Address(RVA = "0x1002FAC", Offset = "0x1002FAC", VA = "0x1002FAC")]
		private float GetTimestamp()
		{
			return default(float);
		}

		[Token(Token = "0x60016B7")]
		[Address(RVA = "0x100304C", Offset = "0x100304C", VA = "0x100304C")]
		private int GetSenderNetworkId()
		{
			return default(int);
		}

		[Token(Token = "0x60016B8")]
		[Address(RVA = "0x1003068", Offset = "0x1003068", VA = "0x1003068")]
		private uint GetSequenceNumber()
		{
			return default(uint);
		}

		[Token(Token = "0x60016B9")]
		[Address(RVA = "0x100307C", Offset = "0x100307C", VA = "0x100307C")]
		private int GetTotalRoundCount()
		{
			return default(int);
		}

		[Token(Token = "0x60016BA")]
		[Address(RVA = "0x1003098", Offset = "0x1003098", VA = "0x1003098")]
		private int GetCurrentFixedTime()
		{
			return default(int);
		}

		[Token(Token = "0x60016BB")]
		[Address(RVA = "0x10030E0", Offset = "0x10030E0", VA = "0x10030E0")]
		public LogMessage CreateLogMessage(string msg)
		{
			return null;
		}

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0x1003260", Offset = "0x1003260", VA = "0x1003260")]
		public ConsoleMessage CreateConsoleMessage(string command)
		{
			return null;
		}

		[Token(Token = "0x60016BD")]
		[Address(RVA = "0x10033E0", Offset = "0x10033E0", VA = "0x10033E0")]
		public RequestSyncMessage CreateRequestSyncMessage(float firstSeenMessageRoomTime)
		{
			return null;
		}

		[Token(Token = "0x60016BE")]
		[Address(RVA = "0x1003550", Offset = "0x1003550", VA = "0x1003550")]
		public InitGameMessage CreateInitGameMessage(double startRoomTime, string matchId, int sceneIndex)
		{
			return null;
		}

		[Token(Token = "0x60016BF")]
		[Address(RVA = "0x10036F0", Offset = "0x10036F0", VA = "0x10036F0")]
		public RequestInitGameMessage CreateRequestInitGameMessage()
		{
			return null;
		}

		[Token(Token = "0x60016C0")]
		[Address(RVA = "0x1003850", Offset = "0x1003850", VA = "0x1003850")]
		public GrabMessage CreateGrabMessage(int hand, int grabbedObject)
		{
			return null;
		}

		[Token(Token = "0x60016C1")]
		[Address(RVA = "0x10039D0", Offset = "0x10039D0", VA = "0x10039D0")]
		public GrabSecondaryMessage CreateGrabSecondaryMessage(int hand, int grabbedObject)
		{
			return null;
		}

		[Token(Token = "0x60016C2")]
		[Address(RVA = "0x1003B50", Offset = "0x1003B50", VA = "0x1003B50")]
		public DropMessage CreateDropMessage(int hand, int grabbedObject, Vector3 startPosition, Vector3 direction, float speed, Vector3 angularVelocity)
		{
			return null;
		}

		[Token(Token = "0x60016C3")]
		[Address(RVA = "0x1003D90", Offset = "0x1003D90", VA = "0x1003D90")]
		public DropSecondaryMessage CreateDropSecondaryMessage(int hand, int grabbedObject)
		{
			return null;
		}

		[Token(Token = "0x60016C4")]
		[Address(RVA = "0x1003F10", Offset = "0x1003F10", VA = "0x1003F10")]
		public DeactivateTetherMessage CreateDeactivateTetherMessage(int hand, int grabbedObject, bool giveDamageToPlayer)
		{
			return null;
		}

		[Token(Token = "0x60016C5")]
		[Address(RVA = "0x10040B4", Offset = "0x10040B4", VA = "0x10040B4")]
		public SpawnPlayerMessage CreateSpawnPlayerMessage(int playerSpawnId, int character, bool playerOne, string displayName, int platform, int banner, int leaguePoints, int voiceNetworkId = 0, bool useOriginalColor = false, int winterDeckIndex = 0)
		{
			return null;
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0x1004328", Offset = "0x1004328", VA = "0x1004328")]
		public ReqSpawnPlayerMessage CreateReqSpawnPlayerMessage(int playerId, string displayName, int character, int platform, int banner, int leaguePoints)
		{
			return null;
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0x1004508", Offset = "0x1004508", VA = "0x1004508")]
		public FailedSpawnPlayerMessage CreateFailedSpawnPlayerMessage(int playerId)
		{
			return null;
		}

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0x1004688", Offset = "0x1004688", VA = "0x1004688")]
		public StartIntro CreateStartIntro(ushort seed)
		{
			return null;
		}

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0x1004808", Offset = "0x1004808", VA = "0x1004808")]
		public StartArenaRoundMessage CreateStartArenaRoundMessage(ushort seed, float startArenaRoundTimeStamp, int roundCount, int scorePlayerOne, int scorePlayerTwo)
		{
			return null;
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0x10049D0", Offset = "0x10049D0", VA = "0x10049D0")]
		public RestartArenaRoundMessage CreateRestartArenaRoundMessage(float startArenaRoundTimeStamp)
		{
			return null;
		}

		[Token(Token = "0x60016CB")]
		[Address(RVA = "0x1004B40", Offset = "0x1004B40", VA = "0x1004B40")]
		public RematchResponseMessage CreateRematchResponseMessage(bool rematchResponse)
		{
			return null;
		}

		[Token(Token = "0x60016CC")]
		[Address(RVA = "0x1004CC4", Offset = "0x1004CC4", VA = "0x1004CC4")]
		public EndArenaRoundMessage CreateEndArenaRoundMessage(int winnerPlayerId, int playerOneScore, int playerTwoScore, float roundDamagePlayerOne, float roundDamagePlayerTwo)
		{
			return null;
		}

		[Token(Token = "0x60016CD")]
		[Address(RVA = "0x1004E94", Offset = "0x1004E94", VA = "0x1004E94")]
		public ForfeitMatchMessage CreateForfeitMatchMessage(int forfeitId)
		{
			return null;
		}

		[Token(Token = "0x60016CE")]
		[Address(RVA = "0x1005014", Offset = "0x1005014", VA = "0x1005014")]
		public ForfeitRoundMessage CreateForfeitRoundMessage(int forfeitId)
		{
			return null;
		}

		[Token(Token = "0x60016CF")]
		[Address(RVA = "0x1005194", Offset = "0x1005194", VA = "0x1005194")]
		public ToolSpawnMessage CreateToolSpawnMessage(ToolName toolName, int attachmentIndex, bool playerOne, int spawnPoint, int toolNetworkId, int toolSkinId)
		{
			return null;
		}

		[Token(Token = "0x60016D0")]
		[Address(RVA = "0x1005370", Offset = "0x1005370", VA = "0x1005370")]
		public StraightProjectileToolTriggerMessage CreateStraightProjectileToolTriggerMessage(int toolNetworkId, Vector3 position, Quaternion rotation, ProjectileMessageData projectileMessageData)
		{
			return null;
		}

		[Token(Token = "0x60016D1")]
		[Address(RVA = "0x1005598", Offset = "0x1005598", VA = "0x1005598")]
		public HelixProjectileToolTriggerMessage CreateHelixProjectileToolTriggerMessage(int toolNetworkId, Vector3 position, Quaternion rotation, ProjectileMessageData projectileMessageData)
		{
			return null;
		}

		[Token(Token = "0x60016D2")]
		[Address(RVA = "0x10057C0", Offset = "0x10057C0", VA = "0x10057C0")]
		public BounceProjectileToolTriggerMessage CreateBounceProjectileToolTriggerMessage(int toolNetworkId, Vector3 position, Quaternion rotation, ProjectileMessageData projectileMessageData)
		{
			return null;
		}

		[Token(Token = "0x60016D3")]
		[Address(RVA = "0x10059E8", Offset = "0x10059E8", VA = "0x10059E8")]
		public CurveProjectileToolTriggerMessage CreateCurveProjectileToolTriggerMessage(int toolNetworkId, Vector3 position, Quaternion rotation, Vector3 gravityDirection, float gravityForce, ProjectileMessageData projectileMessageData)
		{
			return null;
		}

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0x1005C4C", Offset = "0x1005C4C", VA = "0x1005C4C")]
		public ProjectileImpactMessage CreateProjectileImpactMessage(int projectileId, int otherId, ImpactTypes type, Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0x1005E24", Offset = "0x1005E24", VA = "0x1005E24")]
		public ToolImpactMessage CreateToolImpactMessage(int toolId, int otherId, ImpactTypes type, Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0x1005FFC", Offset = "0x1005FFC", VA = "0x1005FFC")]
		public ForceFieldImpactMessage CreateForceFieldImpactMessage(int toolId, int otherId, ImpactTypes type, Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x60016D7")]
		[Address(RVA = "0x10061D4", Offset = "0x10061D4", VA = "0x10061D4")]
		public WaterImpactMessage CreateWaterImpactMessage(int playerId, int otherId, ImpactTypes type)
		{
			return null;
		}

		[Token(Token = "0x60016D8")]
		[Address(RVA = "0x1006354", Offset = "0x1006354", VA = "0x1006354")]
		public EnvironmentImpactMessage CreateEnvironmentImpactMessage(int playerId, int otherId, ImpactTypes type)
		{
			return null;
		}

		[Token(Token = "0x60016D9")]
		[Address(RVA = "0x10064D4", Offset = "0x10064D4", VA = "0x10064D4")]
		public EnvironmentExitMessage CreateEnvironmentExitMessage(int playerId, int otherId, ImpactTypes type)
		{
			return null;
		}

		[Token(Token = "0x60016DA")]
		[Address(RVA = "0x1006654", Offset = "0x1006654", VA = "0x1006654")]
		public DeployBarrierMessage CreateDeployBarrierMessage(int toolNetworkId, int barrierSlotIndex, int deploymentNetworkId, Vector3 position, float chargeAmount)
		{
			return null;
		}

		[Token(Token = "0x60016DB")]
		[Address(RVA = "0x1006844", Offset = "0x1006844", VA = "0x1006844")]
		public ShieldActivationMessage CreateShieldActivationMessage(int toolNetworkId, float chargeAmount)
		{
			return null;
		}

		[Token(Token = "0x60016DC")]
		[Address(RVA = "0x10069CC", Offset = "0x10069CC", VA = "0x10069CC")]
		public ShieldDeactivationMessage CreateShieldDeactivationMessage(int toolNetworkId)
		{
			return null;
		}

		[Token(Token = "0x60016DD")]
		[Address(RVA = "0x1006B44", Offset = "0x1006B44", VA = "0x1006B44")]
		public TimerActivationMessage CreateTimerActivationMessage(int toolNetworkId, int tetherNetworkId = 0, float chargeAmount = 0f)
		{
			return null;
		}

		[Token(Token = "0x60016DE")]
		[Address(RVA = "0x1006CD4", Offset = "0x1006CD4", VA = "0x1006CD4")]
		public DamageOverTimeImpactStartMessage CreateDamageOverTimeImpactStartMessage(ImpactTypes targetImpactType, int targetNetworkId, int projectileNetworkId, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0x1006EFC", Offset = "0x1006EFC", VA = "0x1006EFC")]
		public DamageOverTimeImpactEndMessage CreateDamageOverTimeImpactEndMessage(ImpactTypes targetImpactType, int targetNetworkId, int projectileNetworkId)
		{
			return null;
		}

		[Token(Token = "0x60016E0")]
		[Address(RVA = "0x100709C", Offset = "0x100709C", VA = "0x100709C")]
		public DamageOverTimeCageStartMessage CreateDamageOverTimeCageStartMessage(int targetNetworkId)
		{
			return null;
		}

		[Token(Token = "0x60016E1")]
		[Address(RVA = "0x1007214", Offset = "0x1007214", VA = "0x1007214")]
		public DamageOverTimeCageEndMessage CreateDamageOverTimeCageEndMessage(int targetNetworkId)
		{
			return null;
		}

		[Token(Token = "0x60016E2")]
		[Address(RVA = "0x100738C", Offset = "0x100738C", VA = "0x100738C")]
		public Mtm CreateMtm(Vector3Short headPosition, Vector3UShort headRotation, Vector3Short leftHandPosition, Vector3UShort leftHandRotation, Vector3Short rightHandPosition, Vector3UShort rightHandRotation, byte rightHandIndex, byte rightHandMiddle, byte rightHandRing, byte rightHandPinky, byte leftHandIndex, byte leftHandMiddle, byte leftHandRing, byte leftHandPinky, byte rightThumb, byte leftThumb)
		{
			return null;
		}

		[Token(Token = "0x60016E3")]
		[Address(RVA = "0x1007728", Offset = "0x1007728", VA = "0x1007728")]
		public StationaryProjectileTriggerMessage CreateStationaryProjectileTriggerMessage(int sourceNetworkId, Vector3 position, Quaternion rotation, ProjectileMessageData projectileMessageData)
		{
			return null;
		}

		[Token(Token = "0x60016E4")]
		[Address(RVA = "0x1007950", Offset = "0x1007950", VA = "0x1007950")]
		public DestroyProjectileMessage CreateDestroyProjectileMessage(int targetNetworkId, Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x60016E5")]
		[Address(RVA = "0x1007B00", Offset = "0x1007B00", VA = "0x1007B00")]
		public DestroyToolMessage CreateDestroyToolMessage(int targetNetworkId, Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x60016E6")]
		[Address(RVA = "0x1007CB0", Offset = "0x1007CB0", VA = "0x1007CB0")]
		public SynchronizeTimeMessage CreateSynchronizeTimeMessage(double roomCreationTime)
		{
			return null;
		}

		[Token(Token = "0x60016E7")]
		[Address(RVA = "0x1007E20", Offset = "0x1007E20", VA = "0x1007E20")]
		public PlayGesturesMessage CreatePlayGesturesMessage(int gesture, Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x60016E8")]
		[Address(RVA = "0x1007FD8", Offset = "0x1007FD8", VA = "0x1007FD8")]
		public StartChargingToolMessage CreateStartChargingToolMessage(int toolNetworkId, int triggerCount)
		{
			return null;
		}

		[Token(Token = "0x60016E9")]
		[Address(RVA = "0x1008158", Offset = "0x1008158", VA = "0x1008158")]
		public StopChargingToolMessage CreateStopChargingToolMessage(int toolNetworkId, int triggerCount)
		{
			return null;
		}

		[Token(Token = "0x60016EA")]
		[Address(RVA = "0x10082D8", Offset = "0x10082D8", VA = "0x10082D8")]
		public PingInfoMessage CreatePingInfoMessage(ushort pingValueInMillis)
		{
			return null;
		}

		[Token(Token = "0x60016EB")]
		[Address(RVA = "0x1008458", Offset = "0x1008458", VA = "0x1008458")]
		public DeckInfoMessage CreateDeckInfoMessage(List<ToolSet> deck)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200051F")]
	public abstract class GameMessage
	{
		[Token(Token = "0x40020C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float t;

		[Token(Token = "0x40020CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int fTc;

		[Token(Token = "0x40020CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int sNId;

		[Token(Token = "0x40020CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint sN;

		[Token(Token = "0x40020CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public byte r;

		[NonSerialized]
		[Token(Token = "0x40020CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool cBTA;

		[Token(Token = "0x40020CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rT;

		[NonSerialized]
		[Token(Token = "0x40020D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool tAP;

		[Token(Token = "0x60016EC")]
		[Address(RVA = "0x10085D8", Offset = "0x10085D8", VA = "0x10085D8")]
		public GameMessage()
		{
		}

		[Token(Token = "0x60016ED")]
		[Address(RVA = "0x10085EC", Offset = "0x10085EC", VA = "0x10085EC")]
		public GameMessage(int sNId, float t, uint sN, int round, int ftc)
		{
		}

		[Token(Token = "0x60016EE")]
		public abstract GameMessageInvokationResult Visit(GameMessageVisitor visitor);

		[Token(Token = "0x60016EF")]
		[Address(RVA = "0x100864C", Offset = "0x100864C", VA = "0x100864C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000520")]
	public enum GameMessageInvokationResult
	{
		[Token(Token = "0x40020D2")]
		SUCCESS,
		[Token(Token = "0x40020D3")]
		FAILURE_TRY_AGAIN,
		[Token(Token = "0x40020D4")]
		FAILURE_DISCARD
	}
	[Token(Token = "0x2000521")]
	public class LogMessage : GameMessage
	{
		[Token(Token = "0x40020D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string msg;

		[Token(Token = "0x60016F0")]
		[Address(RVA = "0x10088AC", Offset = "0x10088AC", VA = "0x10088AC")]
		public LogMessage()
		{
		}

		[Token(Token = "0x60016F1")]
		[Address(RVA = "0x10031EC", Offset = "0x10031EC", VA = "0x10031EC")]
		public LogMessage(int sNId, float t, uint sN, int round, int ftc, string msg)
		{
		}

		[Token(Token = "0x60016F2")]
		[Address(RVA = "0x10088D4", Offset = "0x10088D4", VA = "0x10088D4", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000522")]
	public class ConsoleMessage : GameMessage
	{
		[Token(Token = "0x40020D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string command;

		[Token(Token = "0x60016F3")]
		[Address(RVA = "0x100897C", Offset = "0x100897C", VA = "0x100897C")]
		public ConsoleMessage()
		{
		}

		[Token(Token = "0x60016F4")]
		[Address(RVA = "0x100336C", Offset = "0x100336C", VA = "0x100336C")]
		public ConsoleMessage(int sNId, float t, uint sN, int round, int ftc, string command)
		{
		}

		[Token(Token = "0x60016F5")]
		[Address(RVA = "0x10089A4", Offset = "0x10089A4", VA = "0x10089A4", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000523")]
	public class RequestSyncMessage : GameMessage
	{
		[Token(Token = "0x40020D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float firstSeenMessageRoomTime;

		[Token(Token = "0x60016F6")]
		[Address(RVA = "0x1008A4C", Offset = "0x1008A4C", VA = "0x1008A4C")]
		public RequestSyncMessage()
		{
		}

		[Token(Token = "0x60016F7")]
		[Address(RVA = "0x10034E4", Offset = "0x10034E4", VA = "0x10034E4")]
		public RequestSyncMessage(int sNId, float t, uint sN, int round, int ftc, float firstSeenMessageRoomTime)
		{
		}

		[Token(Token = "0x60016F8")]
		[Address(RVA = "0x1008A74", Offset = "0x1008A74", VA = "0x1008A74", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60016F9")]
		[Address(RVA = "0x1008B1C", Offset = "0x1008B1C", VA = "0x1008B1C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000524")]
	public class RequestInitGameMessage : GameMessage
	{
		[Token(Token = "0x60016FA")]
		[Address(RVA = "0x1008B70", Offset = "0x1008B70", VA = "0x1008B70")]
		public RequestInitGameMessage()
		{
		}

		[Token(Token = "0x60016FB")]
		[Address(RVA = "0x10037EC", Offset = "0x10037EC", VA = "0x10037EC")]
		public RequestInitGameMessage(int sNId, float t, uint sN, int round, int ftc)
		{
		}

		[Token(Token = "0x60016FC")]
		[Address(RVA = "0x1008B98", Offset = "0x1008B98", VA = "0x1008B98", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60016FD")]
		[Address(RVA = "0x1008C40", Offset = "0x1008C40", VA = "0x1008C40", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000525")]
	public class InitGameMessage : GameMessage
	{
		[Token(Token = "0x40020D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public double roomStartTime;

		[Token(Token = "0x40020D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string matchId;

		[Token(Token = "0x40020DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int sceneIndex;

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0x1008C90", Offset = "0x1008C90", VA = "0x1008C90")]
		public InitGameMessage()
		{
		}

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0x100366C", Offset = "0x100366C", VA = "0x100366C")]
		public InitGameMessage(int sNId, float t, uint sN, int round, int ftc, double roomStartTime, string matchId, int sceneIndex)
		{
		}

		[Token(Token = "0x6001700")]
		[Address(RVA = "0x1008CB8", Offset = "0x1008CB8", VA = "0x1008CB8", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001701")]
		[Address(RVA = "0x1008D60", Offset = "0x1008D60", VA = "0x1008D60", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000526")]
	public class GrabMessage : GameMessage
	{
		[Token(Token = "0x40020DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int handID;

		[Token(Token = "0x40020DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int toolNetworkId;

		[Token(Token = "0x6001702")]
		[Address(RVA = "0x1008DF8", Offset = "0x1008DF8", VA = "0x1008DF8")]
		public GrabMessage()
		{
		}

		[Token(Token = "0x6001703")]
		[Address(RVA = "0x100395C", Offset = "0x100395C", VA = "0x100395C")]
		public GrabMessage(int sNId, float t, uint sN, int round, int ftc, int hand, int grabbedObject)
		{
		}

		[Token(Token = "0x6001704")]
		[Address(RVA = "0x1008E0C", Offset = "0x1008E0C", VA = "0x1008E0C", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001705")]
		[Address(RVA = "0x1008EB4", Offset = "0x1008EB4", VA = "0x1008EB4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000527")]
	public class GrabSecondaryMessage : GameMessage
	{
		[Token(Token = "0x40020DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int handID;

		[Token(Token = "0x40020DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int toolNetworkId;

		[Token(Token = "0x6001706")]
		[Address(RVA = "0x1008F6C", Offset = "0x1008F6C", VA = "0x1008F6C")]
		public GrabSecondaryMessage()
		{
		}

		[Token(Token = "0x6001707")]
		[Address(RVA = "0x1003ADC", Offset = "0x1003ADC", VA = "0x1003ADC")]
		public GrabSecondaryMessage(int sNId, float t, uint sN, int round, int ftc, int hand, int grabbedObject)
		{
		}

		[Token(Token = "0x6001708")]
		[Address(RVA = "0x1008F80", Offset = "0x1008F80", VA = "0x1008F80", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001709")]
		[Address(RVA = "0x1009028", Offset = "0x1009028", VA = "0x1009028", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000528")]
	public class DropMessage : GameMessage
	{
		[Token(Token = "0x40020DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int handID;

		[Token(Token = "0x40020E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int toolNetworkId;

		[Token(Token = "0x40020E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 direction;

		[Token(Token = "0x40020E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 startPosition;

		[Token(Token = "0x40020E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float speed;

		[Token(Token = "0x40020E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 angularVelocity;

		[Token(Token = "0x600170A")]
		[Address(RVA = "0x10090E0", Offset = "0x10090E0", VA = "0x10090E0")]
		public DropMessage()
		{
		}

		[Token(Token = "0x600170B")]
		[Address(RVA = "0x1003CBC", Offset = "0x1003CBC", VA = "0x1003CBC")]
		public DropMessage(int sNId, float t, uint sN, int round, int ftc, int hand, int grabbedObject, Vector3 startPosition, Vector3 direction, float speed, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0x10090F4", Offset = "0x10090F4", VA = "0x10090F4", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x600170D")]
		[Address(RVA = "0x100919C", Offset = "0x100919C", VA = "0x100919C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000529")]
	public class DropSecondaryMessage : GameMessage
	{
		[Token(Token = "0x40020E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int handID;

		[Token(Token = "0x40020E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int toolNetworkId;

		[Token(Token = "0x600170E")]
		[Address(RVA = "0x10093F4", Offset = "0x10093F4", VA = "0x10093F4")]
		public DropSecondaryMessage()
		{
		}

		[Token(Token = "0x600170F")]
		[Address(RVA = "0x1003E9C", Offset = "0x1003E9C", VA = "0x1003E9C")]
		public DropSecondaryMessage(int sNId, float t, uint sN, int round, int ftc, int hand, int grabbedObject)
		{
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0x1009408", Offset = "0x1009408", VA = "0x1009408", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001711")]
		[Address(RVA = "0x10094B0", Offset = "0x10094B0", VA = "0x10094B0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200052A")]
	public class DeactivateTetherMessage : GameMessage
	{
		[Token(Token = "0x40020E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int handID;

		[Token(Token = "0x40020E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int toolNetworkId;

		[Token(Token = "0x40020E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool giveDamageToPlayer;

		[Token(Token = "0x6001712")]
		[Address(RVA = "0x1009568", Offset = "0x1009568", VA = "0x1009568")]
		public DeactivateTetherMessage()
		{
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0x1004030", Offset = "0x1004030", VA = "0x1004030")]
		public DeactivateTetherMessage(int sNId, float t, uint sN, int round, int ftc, int hand, int grabbedObject, bool giveDamageToPlayer)
		{
		}

		[Token(Token = "0x6001714")]
		[Address(RVA = "0x100957C", Offset = "0x100957C", VA = "0x100957C", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001715")]
		[Address(RVA = "0x1009624", Offset = "0x1009624", VA = "0x1009624", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200052B")]
	public class SpawnPlayerMessage : GameMessage
	{
		[Token(Token = "0x40020EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int playerSpawnNetworkId;

		[Token(Token = "0x40020EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int character;

		[Token(Token = "0x40020EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int platform;

		[Token(Token = "0x40020ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int banner;

		[Token(Token = "0x40020EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool playerOne;

		[Token(Token = "0x40020EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string displayName;

		[Token(Token = "0x40020F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int leaguePoints;

		[Token(Token = "0x40020F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int voiceNetworkId;

		[Token(Token = "0x40020F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool useOriginalColor;

		[Token(Token = "0x40020F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int winterDeckIndex;

		[Token(Token = "0x6001716")]
		[Address(RVA = "0x10097D8", Offset = "0x10097D8", VA = "0x10097D8")]
		public SpawnPlayerMessage()
		{
		}

		[Token(Token = "0x6001717")]
		[Address(RVA = "0x1004244", Offset = "0x1004244", VA = "0x1004244")]
		public SpawnPlayerMessage(int sNId, float t, uint sN, int round, int ftc, int playerSpawnId, int character, bool playerOne, string displayName, int platform, int banner, int leaguePoints, int voiceNetworkId, bool useOriginalColor, int winterDeckIndex)
		{
		}

		[Token(Token = "0x6001718")]
		[Address(RVA = "0x1009800", Offset = "0x1009800", VA = "0x1009800", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001719")]
		[Address(RVA = "0x10098A8", Offset = "0x10098A8", VA = "0x10098A8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200052C")]
	public class ReqSpawnPlayerMessage : GameMessage
	{
		[Token(Token = "0x40020F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int playerSpawnNetowkrSpawnNetworkId;

		[Token(Token = "0x40020F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string displayName;

		[Token(Token = "0x40020F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int character;

		[Token(Token = "0x40020F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int platform;

		[Token(Token = "0x40020F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int banner;

		[Token(Token = "0x40020F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int leaguePoints;

		[Token(Token = "0x600171A")]
		[Address(RVA = "0x1009A5C", Offset = "0x1009A5C", VA = "0x1009A5C")]
		public ReqSpawnPlayerMessage()
		{
		}

		[Token(Token = "0x600171B")]
		[Address(RVA = "0x1004464", Offset = "0x1004464", VA = "0x1004464")]
		public ReqSpawnPlayerMessage(int sNId, float t, uint sN, int round, int ftc, int playerSpawnNetowkrId, string displayName, int character, int platform, int banner, int leaguePoints)
		{
		}

		[Token(Token = "0x600171C")]
		[Address(RVA = "0x1009A84", Offset = "0x1009A84", VA = "0x1009A84", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x200052D")]
	public class FailedSpawnPlayerMessage : GameMessage
	{
		[Token(Token = "0x40020FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int playerNetwokrId;

		[Token(Token = "0x600171D")]
		[Address(RVA = "0x1009B2C", Offset = "0x1009B2C", VA = "0x1009B2C")]
		public FailedSpawnPlayerMessage()
		{
		}

		[Token(Token = "0x600171E")]
		[Address(RVA = "0x1004614", Offset = "0x1004614", VA = "0x1004614")]
		public FailedSpawnPlayerMessage(int sNId, float t, uint sN, int round, int ftc, int playerNetwokrId)
		{
		}

		[Token(Token = "0x600171F")]
		[Address(RVA = "0x1009B54", Offset = "0x1009B54", VA = "0x1009B54", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x200052E")]
	public class StartArenaRoundMessage : GameMessage
	{
		[Token(Token = "0x40020FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public ushort seed;

		[Token(Token = "0x40020FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float startArenaRoundTimeStamp;

		[Token(Token = "0x40020FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int currentRound;

		[Token(Token = "0x40020FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int scorePlayerOne;

		[Token(Token = "0x40020FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int scorePlayerTwo;

		[Token(Token = "0x6001720")]
		[Address(RVA = "0x1009BFC", Offset = "0x1009BFC", VA = "0x1009BFC")]
		public StartArenaRoundMessage()
		{
		}

		[Token(Token = "0x6001721")]
		[Address(RVA = "0x1004938", Offset = "0x1004938", VA = "0x1004938")]
		public StartArenaRoundMessage(int sNId, float t, uint sN, int round, int ftc, ushort seed, float startArenaRoundTimeStamp, int currentRound, int scorePlayerOne, int scorePlayerTwo)
		{
		}

		[Token(Token = "0x6001722")]
		[Address(RVA = "0x1009C24", Offset = "0x1009C24", VA = "0x1009C24", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x200052F")]
	public class StartIntro : GameMessage
	{
		[Token(Token = "0x4002100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public ushort seed;

		[Token(Token = "0x6001723")]
		[Address(RVA = "0x1009CCC", Offset = "0x1009CCC", VA = "0x1009CCC")]
		public StartIntro()
		{
		}

		[Token(Token = "0x6001724")]
		[Address(RVA = "0x1004794", Offset = "0x1004794", VA = "0x1004794")]
		public StartIntro(int sNId, float t, uint sN, int round, int ftc, ushort seed)
		{
		}

		[Token(Token = "0x6001725")]
		[Address(RVA = "0x1009CF4", Offset = "0x1009CF4", VA = "0x1009CF4", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000530")]
	public class RestartArenaRoundMessage : GameMessage
	{
		[Token(Token = "0x4002101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float startArenaRoundTimeStamp;

		[Token(Token = "0x6001726")]
		[Address(RVA = "0x1009D9C", Offset = "0x1009D9C", VA = "0x1009D9C")]
		public RestartArenaRoundMessage()
		{
		}

		[Token(Token = "0x6001727")]
		[Address(RVA = "0x1004AD4", Offset = "0x1004AD4", VA = "0x1004AD4")]
		public RestartArenaRoundMessage(int sNId, float t, uint sN, int round, int ftc, float startArenaRoundTimeStamp)
		{
		}

		[Token(Token = "0x6001728")]
		[Address(RVA = "0x1009DC4", Offset = "0x1009DC4", VA = "0x1009DC4", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000531")]
	public class RematchResponseMessage : GameMessage
	{
		[Token(Token = "0x4002102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool rematchResponse;

		[Token(Token = "0x6001729")]
		[Address(RVA = "0x1009E6C", Offset = "0x1009E6C", VA = "0x1009E6C")]
		public RematchResponseMessage()
		{
		}

		[Token(Token = "0x600172A")]
		[Address(RVA = "0x1004C50", Offset = "0x1004C50", VA = "0x1004C50")]
		public RematchResponseMessage(int sNId, float t, uint sN, int round, int ftc, bool rematchResponse)
		{
		}

		[Token(Token = "0x600172B")]
		[Address(RVA = "0x1009E94", Offset = "0x1009E94", VA = "0x1009E94", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000532")]
	public class EndArenaRoundMessage : GameMessage
	{
		[Token(Token = "0x4002103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int winnerPlayerID;

		[Token(Token = "0x4002104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int playerOneScore;

		[Token(Token = "0x4002105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int playerTwoScore;

		[Token(Token = "0x4002106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float roundDamagePlayerOne;

		[Token(Token = "0x4002107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float roundDamagePlayerTwo;

		[Token(Token = "0x600172C")]
		[Address(RVA = "0x1009F3C", Offset = "0x1009F3C", VA = "0x1009F3C")]
		public EndArenaRoundMessage()
		{
		}

		[Token(Token = "0x600172D")]
		[Address(RVA = "0x1004DF8", Offset = "0x1004DF8", VA = "0x1004DF8")]
		public EndArenaRoundMessage(int sNId, float t, uint sN, int round, int ftc, int winnerPlayerID, int playerOneScore, int playerTwoScore, float roundDamagePlayerOne, float roundDamagePlayerTwo)
		{
		}

		[Token(Token = "0x600172E")]
		[Address(RVA = "0x1009F64", Offset = "0x1009F64", VA = "0x1009F64", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000533")]
	public class ForfeitMatchMessage : GameMessage
	{
		[Token(Token = "0x4002108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int forefeitID;

		[Token(Token = "0x600172F")]
		[Address(RVA = "0x100A00C", Offset = "0x100A00C", VA = "0x100A00C")]
		public ForfeitMatchMessage()
		{
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0x1004FA0", Offset = "0x1004FA0", VA = "0x1004FA0")]
		public ForfeitMatchMessage(int sNId, float t, uint sN, int round, int ftc, int forefeitId)
		{
		}

		[Token(Token = "0x6001731")]
		[Address(RVA = "0x100A034", Offset = "0x100A034", VA = "0x100A034", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000534")]
	public class ForfeitRoundMessage : GameMessage
	{
		[Token(Token = "0x4002109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int forefeitID;

		[Token(Token = "0x6001732")]
		[Address(RVA = "0x100A0DC", Offset = "0x100A0DC", VA = "0x100A0DC")]
		public ForfeitRoundMessage()
		{
		}

		[Token(Token = "0x6001733")]
		[Address(RVA = "0x1005120", Offset = "0x1005120", VA = "0x1005120")]
		public ForfeitRoundMessage(int sNId, float t, uint sN, int round, int ftc, int forefeitId)
		{
		}

		[Token(Token = "0x6001734")]
		[Address(RVA = "0x100A104", Offset = "0x100A104", VA = "0x100A104", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000535")]
	public class ToolSpawnMessage : GameMessage
	{
		[Token(Token = "0x400210A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool playerOne;

		[Token(Token = "0x400210B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int spawnPoint;

		[Token(Token = "0x400210C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int toolNetworkId;

		[Token(Token = "0x400210D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public ToolName toolName;

		[Token(Token = "0x400210E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int attachmentIndex;

		[Token(Token = "0x400210F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int toolSkinId;

		[Token(Token = "0x6001735")]
		[Address(RVA = "0x100A1AC", Offset = "0x100A1AC", VA = "0x100A1AC")]
		public ToolSpawnMessage()
		{
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0x10052D0", Offset = "0x10052D0", VA = "0x10052D0")]
		public ToolSpawnMessage(int sNId, float t, uint sN, int round, int ftc, ToolName toolName, int attachmentIndex, bool playerOne, int spawnPoint, int toolNetworkId, int toolSkinId)
		{
		}

		[Token(Token = "0x6001737")]
		[Address(RVA = "0x100A1C0", Offset = "0x100A1C0", VA = "0x100A1C0", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001738")]
		[Address(RVA = "0x100A268", Offset = "0x100A268", VA = "0x100A268", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000536")]
	public class StraightProjectileToolTriggerMessage : GameMessage
	{
		[Token(Token = "0x4002110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ProjectileMessageData projectileData;

		[Token(Token = "0x4002111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int toolNetworkId;

		[Token(Token = "0x4002112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 position;

		[Token(Token = "0x4002113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Quaternion rotation;

		[Token(Token = "0x6001739")]
		[Address(RVA = "0x100A4B0", Offset = "0x100A4B0", VA = "0x100A4B0")]
		public StraightProjectileToolTriggerMessage()
		{
		}

		[Token(Token = "0x600173A")]
		[Address(RVA = "0x10054D8", Offset = "0x10054D8", VA = "0x10054D8")]
		public StraightProjectileToolTriggerMessage(int sNId, float t, uint sN, int round, int ftc, int toolNetworkId, Vector3 position, Quaternion rotation, ProjectileMessageData projectileData)
		{
		}

		[Token(Token = "0x600173B")]
		[Address(RVA = "0x100A4C4", Offset = "0x100A4C4", VA = "0x100A4C4", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x600173C")]
		[Address(RVA = "0x100A56C", Offset = "0x100A56C", VA = "0x100A56C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000537")]
	public class HelixProjectileToolTriggerMessage : GameMessage
	{
		[Token(Token = "0x4002114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int toolNetworkId;

		[Token(Token = "0x4002115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 position;

		[Token(Token = "0x4002116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotation;

		[Token(Token = "0x4002117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ProjectileMessageData projectileData;

		[Token(Token = "0x600173D")]
		[Address(RVA = "0x100A7FC", Offset = "0x100A7FC", VA = "0x100A7FC")]
		public HelixProjectileToolTriggerMessage()
		{
		}

		[Token(Token = "0x600173E")]
		[Address(RVA = "0x1005700", Offset = "0x1005700", VA = "0x1005700")]
		public HelixProjectileToolTriggerMessage(int sNId, float t, uint sN, int round, int ftc, int toolNetworkId, Vector3 position, Quaternion rotation, ProjectileMessageData projectileData)
		{
		}

		[Token(Token = "0x600173F")]
		[Address(RVA = "0x100A810", Offset = "0x100A810", VA = "0x100A810", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001740")]
		[Address(RVA = "0x100A8B8", Offset = "0x100A8B8", VA = "0x100A8B8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000538")]
	public class BounceProjectileToolTriggerMessage : GameMessage
	{
		[Token(Token = "0x4002118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int toolNetworkId;

		[Token(Token = "0x4002119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 position;

		[Token(Token = "0x400211A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotation;

		[Token(Token = "0x400211B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ProjectileMessageData projectileData;

		[Token(Token = "0x6001741")]
		[Address(RVA = "0x100AB48", Offset = "0x100AB48", VA = "0x100AB48")]
		public BounceProjectileToolTriggerMessage()
		{
		}

		[Token(Token = "0x6001742")]
		[Address(RVA = "0x1005928", Offset = "0x1005928", VA = "0x1005928")]
		public BounceProjectileToolTriggerMessage(int sNId, float t, uint sN, int round, int ftc, int toolNetworkId, Vector3 position, Quaternion rotation, ProjectileMessageData projectileData)
		{
		}

		[Token(Token = "0x6001743")]
		[Address(RVA = "0x100AB5C", Offset = "0x100AB5C", VA = "0x100AB5C", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001744")]
		[Address(RVA = "0x100AC04", Offset = "0x100AC04", VA = "0x100AC04", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000539")]
	public class StationaryProjectileTriggerMessage : GameMessage
	{
		[Token(Token = "0x400211C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int sourceNetworkId;

		[Token(Token = "0x400211D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 position;

		[Token(Token = "0x400211E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotation;

		[Token(Token = "0x400211F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ProjectileMessageData projectileData;

		[Token(Token = "0x6001745")]
		[Address(RVA = "0x100AE94", Offset = "0x100AE94", VA = "0x100AE94")]
		public StationaryProjectileTriggerMessage()
		{
		}

		[Token(Token = "0x6001746")]
		[Address(RVA = "0x1007890", Offset = "0x1007890", VA = "0x1007890")]
		public StationaryProjectileTriggerMessage(int sNId, float t, uint sN, int round, int ftc, int sourceNetworkId, Vector3 position, Quaternion rotation, ProjectileMessageData projectileData)
		{
		}

		[Token(Token = "0x6001747")]
		[Address(RVA = "0x100AEA8", Offset = "0x100AEA8", VA = "0x100AEA8", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001748")]
		[Address(RVA = "0x100AF50", Offset = "0x100AF50", VA = "0x100AF50", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200053A")]
	public class CurveProjectileToolTriggerMessage : GameMessage
	{
		[Token(Token = "0x4002120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ProjectileMessageData projectileData;

		[Token(Token = "0x4002121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int toolNetworkId;

		[Token(Token = "0x4002122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 position;

		[Token(Token = "0x4002123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Quaternion rotation;

		[Token(Token = "0x4002124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Vector3 gravityDirection;

		[Token(Token = "0x4002125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float gravityForce;

		[Token(Token = "0x6001749")]
		[Address(RVA = "0x100B024", Offset = "0x100B024", VA = "0x100B024")]
		public CurveProjectileToolTriggerMessage()
		{
		}

		[Token(Token = "0x600174A")]
		[Address(RVA = "0x1005B6C", Offset = "0x1005B6C", VA = "0x1005B6C")]
		public CurveProjectileToolTriggerMessage(int sNId, float t, uint sN, int round, int ftc, int toolNetworkId, Vector3 position, Quaternion rotation, Vector3 gravityDirection, float gravityForce, ProjectileMessageData projectileData)
		{
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0x100B038", Offset = "0x100B038", VA = "0x100B038", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x600174C")]
		[Address(RVA = "0x100B0E0", Offset = "0x100B0E0", VA = "0x100B0E0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200053B")]
	public class ProjectileImpactMessage : GameMessage
	{
		[Token(Token = "0x4002126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int projectileId;

		[Token(Token = "0x4002127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int otherId;

		[Token(Token = "0x4002128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public ImpactTypes type;

		[Token(Token = "0x4002129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 position;

		[Token(Token = "0x600174D")]
		[Address(RVA = "0x100B370", Offset = "0x100B370", VA = "0x100B370")]
		public ProjectileImpactMessage()
		{
		}

		[Token(Token = "0x600174E")]
		[Address(RVA = "0x1005D84", Offset = "0x1005D84", VA = "0x1005D84")]
		public ProjectileImpactMessage(int sNId, float t, uint sN, int round, int ftc, int projectileId, int otherId, ImpactTypes type, Vector3 position)
		{
		}

		[Token(Token = "0x600174F")]
		[Address(RVA = "0x100B384", Offset = "0x100B384", VA = "0x100B384", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001750")]
		[Address(RVA = "0x100B42C", Offset = "0x100B42C", VA = "0x100B42C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200053C")]
	public class ToolImpactMessage : GameMessage
	{
		[Token(Token = "0x400212A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int toolId;

		[Token(Token = "0x400212B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int otherId;

		[Token(Token = "0x400212C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public ImpactTypes type;

		[Token(Token = "0x400212D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 position;

		[Token(Token = "0x6001751")]
		[Address(RVA = "0x100B63C", Offset = "0x100B63C", VA = "0x100B63C")]
		public ToolImpactMessage()
		{
		}

		[Token(Token = "0x6001752")]
		[Address(RVA = "0x1005F5C", Offset = "0x1005F5C", VA = "0x1005F5C")]
		public ToolImpactMessage(int sNId, float t, uint sN, int round, int ftc, int toolId, int otherId, ImpactTypes type, Vector3 position)
		{
		}

		[Token(Token = "0x6001753")]
		[Address(RVA = "0x100B650", Offset = "0x100B650", VA = "0x100B650", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0x100B6F8", Offset = "0x100B6F8", VA = "0x100B6F8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200053D")]
	public class ForceFieldImpactMessage : GameMessage
	{
		[Token(Token = "0x400212E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int toolId;

		[Token(Token = "0x400212F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int otherId;

		[Token(Token = "0x4002130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public ImpactTypes type;

		[Token(Token = "0x4002131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 position;

		[Token(Token = "0x6001755")]
		[Address(RVA = "0x100B95C", Offset = "0x100B95C", VA = "0x100B95C")]
		public ForceFieldImpactMessage()
		{
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0x1006134", Offset = "0x1006134", VA = "0x1006134")]
		public ForceFieldImpactMessage(int sNId, float t, uint sN, int round, int ftc, int toolId, int otherId, ImpactTypes type, Vector3 position)
		{
		}

		[Token(Token = "0x6001757")]
		[Address(RVA = "0x100B970", Offset = "0x100B970", VA = "0x100B970", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001758")]
		[Address(RVA = "0x100BA18", Offset = "0x100BA18", VA = "0x100BA18", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200053E")]
	public class EnvironmentImpactMessage : GameMessage
	{
		[Token(Token = "0x4002132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int otherId;

		[Token(Token = "0x4002133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ImpactTypes type;

		[Token(Token = "0x6001759")]
		[Address(RVA = "0x100BC7C", Offset = "0x100BC7C", VA = "0x100BC7C")]
		public EnvironmentImpactMessage()
		{
		}

		[Token(Token = "0x600175A")]
		[Address(RVA = "0x1006460", Offset = "0x1006460", VA = "0x1006460")]
		public EnvironmentImpactMessage(int sNId, float t, uint sN, int round, int ftc, int otherId, ImpactTypes type)
		{
		}

		[Token(Token = "0x600175B")]
		[Address(RVA = "0x100BC90", Offset = "0x100BC90", VA = "0x100BC90", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x600175C")]
		[Address(RVA = "0x100BD38", Offset = "0x100BD38", VA = "0x100BD38", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200053F")]
	public class WaterImpactMessage : GameMessage
	{
		[Token(Token = "0x4002134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int otherId;

		[Token(Token = "0x4002135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ImpactTypes type;

		[Token(Token = "0x600175D")]
		[Address(RVA = "0x100BE04", Offset = "0x100BE04", VA = "0x100BE04")]
		public WaterImpactMessage()
		{
		}

		[Token(Token = "0x600175E")]
		[Address(RVA = "0x10062E0", Offset = "0x10062E0", VA = "0x10062E0")]
		public WaterImpactMessage(int sNId, float t, uint sN, int round, int ftc, int otherId, ImpactTypes type)
		{
		}

		[Token(Token = "0x600175F")]
		[Address(RVA = "0x100BE18", Offset = "0x100BE18", VA = "0x100BE18", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001760")]
		[Address(RVA = "0x100BEC0", Offset = "0x100BEC0", VA = "0x100BEC0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000540")]
	public class EnvironmentExitMessage : GameMessage
	{
		[Token(Token = "0x4002136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int otherId;

		[Token(Token = "0x4002137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ImpactTypes type;

		[Token(Token = "0x6001761")]
		[Address(RVA = "0x100BF8C", Offset = "0x100BF8C", VA = "0x100BF8C")]
		public EnvironmentExitMessage()
		{
		}

		[Token(Token = "0x6001762")]
		[Address(RVA = "0x10065E0", Offset = "0x10065E0", VA = "0x10065E0")]
		public EnvironmentExitMessage(int sNId, float t, uint sN, int round, int ftc, int otherId, ImpactTypes type)
		{
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0x100BFA0", Offset = "0x100BFA0", VA = "0x100BFA0", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001764")]
		[Address(RVA = "0x100C048", Offset = "0x100C048", VA = "0x100C048", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000541")]
	public class DeployBarrierMessage : GameMessage
	{
		[Token(Token = "0x4002138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int toolNetworkId;

		[Token(Token = "0x4002139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int barrierId;

		[Token(Token = "0x400213A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int deploymentNetworkId;

		[Token(Token = "0x400213B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 position;

		[Token(Token = "0x400213C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float chargeAmount;

		[Token(Token = "0x6001765")]
		[Address(RVA = "0x100C114", Offset = "0x100C114", VA = "0x100C114")]
		public DeployBarrierMessage()
		{
		}

		[Token(Token = "0x6001766")]
		[Address(RVA = "0x1006798", Offset = "0x1006798", VA = "0x1006798")]
		public DeployBarrierMessage(int sNId, float t, uint sN, int round, int ftc, int toolNetworkId, int barrierId, int deploymentNetworkId, Vector3 position, float chargeAmount)
		{
		}

		[Token(Token = "0x6001767")]
		[Address(RVA = "0x100C128", Offset = "0x100C128", VA = "0x100C128", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000542")]
	public class ShieldActivationMessage : GameMessage
	{
		[Token(Token = "0x400213D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int toolNetworkId;

		[Token(Token = "0x400213E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float chargeAmount;

		[Token(Token = "0x6001768")]
		[Address(RVA = "0x100C1D0", Offset = "0x100C1D0", VA = "0x100C1D0")]
		public ShieldActivationMessage()
		{
		}

		[Token(Token = "0x6001769")]
		[Address(RVA = "0x1006954", Offset = "0x1006954", VA = "0x1006954")]
		public ShieldActivationMessage(int sNId, float t, uint sN, int round, int ftc, int toolNetworkId, float chargeAmount)
		{
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0x100C1E4", Offset = "0x100C1E4", VA = "0x100C1E4", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000543")]
	public class ShieldDeactivationMessage : GameMessage
	{
		[Token(Token = "0x400213F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int toolNetworkId;

		[Token(Token = "0x600176B")]
		[Address(RVA = "0x100C28C", Offset = "0x100C28C", VA = "0x100C28C")]
		public ShieldDeactivationMessage()
		{
		}

		[Token(Token = "0x600176C")]
		[Address(RVA = "0x1006AD4", Offset = "0x1006AD4", VA = "0x1006AD4")]
		public ShieldDeactivationMessage(int sNId, float t, uint sN, int round, int ftc, int toolNetworkId)
		{
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0x100C2A0", Offset = "0x100C2A0", VA = "0x100C2A0", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000544")]
	public class TimerActivationMessage : GameMessage
	{
		[Token(Token = "0x4002140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int toolNetworkId;

		[Token(Token = "0x4002141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int tetherNetworkId;

		[Token(Token = "0x4002142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float chargeAmount;

		[Token(Token = "0x600176E")]
		[Address(RVA = "0x100C348", Offset = "0x100C348", VA = "0x100C348")]
		public TimerActivationMessage()
		{
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0x1006C58", Offset = "0x1006C58", VA = "0x1006C58")]
		public TimerActivationMessage(int sNId, float t, uint sN, int round, int ftc, int toolNetworkId, int tetherNetworkId, float chargeAmount)
		{
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0x100C35C", Offset = "0x100C35C", VA = "0x100C35C", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000545")]
	public class DamageOverTimeImpactStartMessage : GameMessage
	{
		[Token(Token = "0x4002143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public ImpactTypes targetImpactType;

		[Token(Token = "0x4002144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int targetNetworkId;

		[Token(Token = "0x4002145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int projectileNetworkId;

		[Token(Token = "0x4002146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 position;

		[Token(Token = "0x4002147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Quaternion rotation;

		[Token(Token = "0x6001771")]
		[Address(RVA = "0x100C404", Offset = "0x100C404", VA = "0x100C404")]
		public DamageOverTimeImpactStartMessage()
		{
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0x1006E34", Offset = "0x1006E34", VA = "0x1006E34")]
		public DamageOverTimeImpactStartMessage(int sNId, float t, uint sN, int round, int ftc, ImpactTypes targetImpactType, int targetNetworkId, int projectileNetworkId, Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0x100C418", Offset = "0x100C418", VA = "0x100C418", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000546")]
	public class DamageOverTimeImpactEndMessage : GameMessage
	{
		[Token(Token = "0x4002148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public ImpactTypes targetImpactType;

		[Token(Token = "0x4002149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int targetNetworkId;

		[Token(Token = "0x400214A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int projectileNetworkId;

		[Token(Token = "0x6001774")]
		[Address(RVA = "0x100C4C0", Offset = "0x100C4C0", VA = "0x100C4C0")]
		public DamageOverTimeImpactEndMessage()
		{
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0x1007018", Offset = "0x1007018", VA = "0x1007018")]
		public DamageOverTimeImpactEndMessage(int sNId, float t, uint sN, int round, int ftc, ImpactTypes targetImpactType, int targetNetworkId, int projectileNetworkId)
		{
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0x100C4D4", Offset = "0x100C4D4", VA = "0x100C4D4", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000547")]
	public class DamageOverTimeCageStartMessage : GameMessage
	{
		[Token(Token = "0x400214B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int targetNetworkId;

		[Token(Token = "0x6001777")]
		[Address(RVA = "0x100C57C", Offset = "0x100C57C", VA = "0x100C57C")]
		public DamageOverTimeCageStartMessage()
		{
		}

		[Token(Token = "0x6001778")]
		[Address(RVA = "0x10071A4", Offset = "0x10071A4", VA = "0x10071A4")]
		public DamageOverTimeCageStartMessage(int sNId, float t, uint sN, int round, int ftc, int targetNetworkId)
		{
		}

		[Token(Token = "0x6001779")]
		[Address(RVA = "0x100C590", Offset = "0x100C590", VA = "0x100C590", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000548")]
	public class DamageOverTimeCageEndMessage : GameMessage
	{
		[Token(Token = "0x400214C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int targetNetworkId;

		[Token(Token = "0x600177A")]
		[Address(RVA = "0x100C638", Offset = "0x100C638", VA = "0x100C638")]
		public DamageOverTimeCageEndMessage()
		{
		}

		[Token(Token = "0x600177B")]
		[Address(RVA = "0x100731C", Offset = "0x100731C", VA = "0x100731C")]
		public DamageOverTimeCageEndMessage(int sNId, float t, uint sN, int round, int ftc, int targetNetworkId)
		{
		}

		[Token(Token = "0x600177C")]
		[Address(RVA = "0x100C64C", Offset = "0x100C64C", VA = "0x100C64C", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000549")]
	public class DestroyProjectileMessage : GameMessage
	{
		[Token(Token = "0x400214D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int targetNetworkId;

		[Token(Token = "0x400214E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 position;

		[Token(Token = "0x600177D")]
		[Address(RVA = "0x100C6F4", Offset = "0x100C6F4", VA = "0x100C6F4")]
		public DestroyProjectileMessage()
		{
		}

		[Token(Token = "0x600177E")]
		[Address(RVA = "0x1007A74", Offset = "0x1007A74", VA = "0x1007A74")]
		public DestroyProjectileMessage(int sNId, float t, uint sN, int round, int ftc, int targetNetworkId, Vector3 position)
		{
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0x100C708", Offset = "0x100C708", VA = "0x100C708", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x200054A")]
	public class DestroyToolMessage : GameMessage
	{
		[Token(Token = "0x400214F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int targetNetworkId;

		[Token(Token = "0x4002150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 position;

		[Token(Token = "0x6001780")]
		[Address(RVA = "0x100C7B0", Offset = "0x100C7B0", VA = "0x100C7B0")]
		public DestroyToolMessage()
		{
		}

		[Token(Token = "0x6001781")]
		[Address(RVA = "0x1007C24", Offset = "0x1007C24", VA = "0x1007C24")]
		public DestroyToolMessage(int sNId, float t, uint sN, int round, int ftc, int targetNetworkId, Vector3 position)
		{
		}

		[Token(Token = "0x6001782")]
		[Address(RVA = "0x100C7C4", Offset = "0x100C7C4", VA = "0x100C7C4", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x200054B")]
	public class SynchronizeTimeMessage : GameMessage
	{
		[Token(Token = "0x4002151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public double roomCreationTime;

		[Token(Token = "0x6001783")]
		[Address(RVA = "0x100C86C", Offset = "0x100C86C", VA = "0x100C86C")]
		public SynchronizeTimeMessage()
		{
		}

		[Token(Token = "0x6001784")]
		[Address(RVA = "0x1007DB4", Offset = "0x1007DB4", VA = "0x1007DB4")]
		public SynchronizeTimeMessage(int sNId, float t, uint sN, int round, int ftc, double roomCreationTime)
		{
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0x100C894", Offset = "0x100C894", VA = "0x100C894", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x200054C")]
	public class PlayGesturesMessage : GameMessage
	{
		[Token(Token = "0x4002152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int gesture;

		[Token(Token = "0x4002153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 position;

		[Token(Token = "0x6001786")]
		[Address(RVA = "0x100C93C", Offset = "0x100C93C", VA = "0x100C93C")]
		public PlayGesturesMessage()
		{
		}

		[Token(Token = "0x6001787")]
		[Address(RVA = "0x1007F48", Offset = "0x1007F48", VA = "0x1007F48")]
		public PlayGesturesMessage(int sNId, float t, uint sN, int round, int ftc, int gesture, Vector3 position)
		{
		}

		[Token(Token = "0x6001788")]
		[Address(RVA = "0x100C964", Offset = "0x100C964", VA = "0x100C964", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Serializable]
	[Token(Token = "0x200054D")]
	public class Mtm : GameMessage
	{
		[Token(Token = "0x4002154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public Vector3Short hP;

		[Token(Token = "0x4002155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3UShort hR;

		[Token(Token = "0x4002156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		public Vector3Short lHP;

		[Token(Token = "0x4002157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3UShort lHR;

		[Token(Token = "0x4002158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public Vector3Short rHP;

		[Token(Token = "0x4002159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3UShort rHR;

		[Token(Token = "0x400215A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		public byte rHI;

		[Token(Token = "0x400215B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
		public byte rHm;

		[Token(Token = "0x400215C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public byte rHRi;

		[Token(Token = "0x400215D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public byte rHPi;

		[Token(Token = "0x400215E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public byte lHI;

		[Token(Token = "0x400215F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public byte lHm;

		[Token(Token = "0x4002160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public byte lHRi;

		[Token(Token = "0x4002161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public byte lHPi;

		[Token(Token = "0x4002162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public byte lTh;

		[Token(Token = "0x4002163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public byte rTh;

		[Token(Token = "0x6001789")]
		[Address(RVA = "0x100CA0C", Offset = "0x100CA0C", VA = "0x100CA0C")]
		public Mtm()
		{
		}

		[Token(Token = "0x600178A")]
		[Address(RVA = "0x10075A8", Offset = "0x10075A8", VA = "0x10075A8")]
		public Mtm(int sNId, float t, uint sN, int round, int ftc, Vector3Short hP, Vector3UShort hR, Vector3Short lHp, Vector3UShort lHr, Vector3Short rHp, Vector3UShort rHr, byte rHi, byte rHm, byte rHRi, byte rHPi, byte lHi, byte lHm, byte lHri, byte lHpi, byte rTh, byte lTh)
		{
		}

		[Token(Token = "0x600178B")]
		[Address(RVA = "0x100CA34", Offset = "0x100CA34", VA = "0x100CA34", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x200054E")]
	public class StartChargingToolMessage : GameMessage
	{
		[Token(Token = "0x4002164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int toolNetworkId;

		[Token(Token = "0x4002165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int triggerCount;

		[Token(Token = "0x600178C")]
		[Address(RVA = "0x100CADC", Offset = "0x100CADC", VA = "0x100CADC")]
		public StartChargingToolMessage()
		{
		}

		[Token(Token = "0x600178D")]
		[Address(RVA = "0x10080E4", Offset = "0x10080E4", VA = "0x10080E4")]
		public StartChargingToolMessage(int sNId, float t, uint sN, int round, int ftc, int toolNetworkId, int triggerCount)
		{
		}

		[Token(Token = "0x600178E")]
		[Address(RVA = "0x100CB04", Offset = "0x100CB04", VA = "0x100CB04", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x200054F")]
	public class StopChargingToolMessage : GameMessage
	{
		[Token(Token = "0x4002166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int toolNetworkId;

		[Token(Token = "0x4002167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int triggerCount;

		[Token(Token = "0x600178F")]
		[Address(RVA = "0x100CBAC", Offset = "0x100CBAC", VA = "0x100CBAC")]
		public StopChargingToolMessage()
		{
		}

		[Token(Token = "0x6001790")]
		[Address(RVA = "0x1008264", Offset = "0x1008264", VA = "0x1008264")]
		public StopChargingToolMessage(int sNId, float t, uint sN, int round, int ftc, int toolNetworkId, int triggerCount)
		{
		}

		[Token(Token = "0x6001791")]
		[Address(RVA = "0x100CBD4", Offset = "0x100CBD4", VA = "0x100CBD4", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000550")]
	public class PingInfoMessage : GameMessage
	{
		[Token(Token = "0x4002168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public ushort pingValueInMillis;

		[Token(Token = "0x6001792")]
		[Address(RVA = "0x100CC7C", Offset = "0x100CC7C", VA = "0x100CC7C")]
		public PingInfoMessage()
		{
		}

		[Token(Token = "0x6001793")]
		[Address(RVA = "0x10083E4", Offset = "0x10083E4", VA = "0x10083E4")]
		public PingInfoMessage(int sNId, float t, uint sN, int round, int ftc, ushort pingValueInMillis)
		{
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0x100CCA4", Offset = "0x100CCA4", VA = "0x100CCA4", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000551")]
	public class DeckInfoMessage : GameMessage
	{
		[Token(Token = "0x4002169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<ToolSet> deck;

		[Token(Token = "0x6001795")]
		[Address(RVA = "0x100CD4C", Offset = "0x100CD4C", VA = "0x100CD4C")]
		public DeckInfoMessage()
		{
		}

		[Token(Token = "0x6001796")]
		[Address(RVA = "0x1008564", Offset = "0x1008564", VA = "0x1008564")]
		public DeckInfoMessage(int sNId, float t, uint sN, int round, int ftc, List<ToolSet> deck)
		{
		}

		[Token(Token = "0x6001797")]
		[Address(RVA = "0x100CD74", Offset = "0x100CD74", VA = "0x100CD74", Slot = "4")]
		public override GameMessageInvokationResult Visit(GameMessageVisitor visitor)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000552")]
	public class GameMessageData
	{
		[Token(Token = "0x2000553")]
		public readonly struct GameMessageIdentification
		{
			[Token(Token = "0x400216F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly int sender;

			[Token(Token = "0x4002170")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public readonly uint messageOrder;

			[Token(Token = "0x4002171")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly int fixedFrame;

			[Token(Token = "0x600179C")]
			[Address(RVA = "0x100CF80", Offset = "0x100CF80", VA = "0x100CF80")]
			public GameMessageIdentification(int sender, uint messageOrder, int fixedFrame)
			{
			}
		}

		[Token(Token = "0x400216A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<GameMessage> newMessages;

		[Token(Token = "0x400216B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GameMessage> gameMessages;

		[Token(Token = "0x400216C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<GameMessage> retryMessages;

		[Token(Token = "0x400216D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HashSet<GameMessageIdentification> messagesSeenBeforeResync;

		[Token(Token = "0x400216E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float firstSeenMovementMessageInArena;

		[Token(Token = "0x6001798")]
		[Address(RVA = "0x100CE1C", Offset = "0x100CE1C", VA = "0x100CE1C")]
		public float GetFirstSeenMovementMessageInArenaTimestamp()
		{
			return default(float);
		}

		[Token(Token = "0x6001799")]
		[Address(RVA = "0x100CE24", Offset = "0x100CE24", VA = "0x100CE24")]
		public void ResetFirstSeenMovementMessageInArenaTimestamp()
		{
		}

		[Token(Token = "0x600179A")]
		[Address(RVA = "0x100CE30", Offset = "0x100CE30", VA = "0x100CE30")]
		public void SetFirstSeenMovementMessageInArenaTimestampIfLower(float timestamp)
		{
		}

		[Token(Token = "0x600179B")]
		[Address(RVA = "0x100CE44", Offset = "0x100CE44", VA = "0x100CE44")]
		public GameMessageData()
		{
		}
	}
	[Token(Token = "0x2000554")]
	public class GameMessageHandler : ITickable
	{
		[Token(Token = "0x4002172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameMessageData gameMessageData;

		[Token(Token = "0x4002173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameMessageVisitor gameMessageInvoker;

		[Token(Token = "0x4002174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4002175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4002176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GameData gameData;

		[Token(Token = "0x4002177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly RoomTimeReSyncData roomTimeReSyncData;

		[Token(Token = "0x4002178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameMessageVisitor networkIdDeallocator;

		[Token(Token = "0x4002179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float timestampOfLatestInvokedMessage;

		[Token(Token = "0x400217A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<int, uint> latestSeenMessageFromSender;

		[Token(Token = "0x400217B")]
		public const float RETRYFAILTIME = 30f;

		[Token(Token = "0x400217C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ProfilerMarker invokeMarker;

		[Token(Token = "0x600179D")]
		[Address(RVA = "0x100CF8C", Offset = "0x100CF8C", VA = "0x100CF8C")]
		public GameMessageHandler(GameMessageData gameMessageData, GameMessageVisitor gameMessageInvoker, IRoomTimeProvider roomTimeProvider, MatchHandlerData matchHandlerData, GameData gameData, RoomTimeReSyncData roomTimeReSyncData, GameMessageVisitor networkIdDeallocator)
		{
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0x100D058", Offset = "0x100D058", VA = "0x100D058")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600179F")]
		[Address(RVA = "0x100D0EC", Offset = "0x100D0EC", VA = "0x100D0EC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60017A0")]
		[Address(RVA = "0x100D7F4", Offset = "0x100D7F4", VA = "0x100D7F4")]
		private void DeallocatNetworkIdsFromDiscardedMessages(GameMessage gameMessage)
		{
		}

		[Token(Token = "0x60017A1")]
		[Address(RVA = "0x100D9E4", Offset = "0x100D9E4", VA = "0x100D9E4")]
		[Conditional("IGNIS_DEBUG_VERBOSE")]
		private void LogTraceMessage(GameMessage message, GameMessageInvokationResult result)
		{
		}

		[Token(Token = "0x60017A2")]
		[Address(RVA = "0x100D81C", Offset = "0x100D81C", VA = "0x100D81C")]
		private GameMessageInvokationResult InvokeMessage(GameMessage gameMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017A3")]
		[Address(RVA = "0x100D698", Offset = "0x100D698", VA = "0x100D698")]
		private void CheckAndLogOutOfSequenceMessage(GameMessage gameMessage)
		{
		}

		[Token(Token = "0x60017A4")]
		[Address(RVA = "0x100D8F8", Offset = "0x100D8F8", VA = "0x100D8F8")]
		private void CheckMessageTimeStampsToDetectTimeSyncIssues(GameMessage gameMessage, GameMessageInvokationResult result)
		{
		}

		[Token(Token = "0x60017A5")]
		[Address(RVA = "0x100DA80", Offset = "0x100DA80", VA = "0x100DA80")]
		[Conditional("IGNIS_DEBUG_VERBOSE")]
		private void LogTraceTimeStamps(GameMessage gameMessage, float deltaTime)
		{
		}

		[Token(Token = "0x60017A6")]
		[Address(RVA = "0x100DB1C", Offset = "0x100DB1C", VA = "0x100DB1C")]
		public void CleanUpRound()
		{
		}

		[Token(Token = "0x60017A7")]
		[Address(RVA = "0x100DB94", Offset = "0x100DB94", VA = "0x100DB94")]
		public void CleanUp()
		{
		}
	}
	[Token(Token = "0x2000555")]
	public class GameMessageInvoker : GameMessageVisitor
	{
		[Token(Token = "0x400217D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ToolGrabHandler toolGrabHandler;

		[Token(Token = "0x400217E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayerSpawnHandler playerSpawnHandler;

		[Token(Token = "0x400217F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ToolSpawnHandler toolSpawnHandler;

		[Token(Token = "0x4002180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ToolSpawnHandler playerTwoToolSpawnHandler;

		[Token(Token = "0x4002181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ImpactHandler impactHandler;

		[Token(Token = "0x4002182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4002183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly CageHandler cageHandler;

		[Token(Token = "0x4002184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly StraightProjectileHandler straightProjectileHandler;

		[Token(Token = "0x4002185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ShieldHandler shieldHandler;

		[Token(Token = "0x4002186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly BarrierShieldToolHandler barrierShieldToolHandler;

		[Token(Token = "0x4002187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly BarrierSourceHandler barrierSourceHandler;

		[Token(Token = "0x4002188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly BotController botController;

		[Token(Token = "0x4002189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x400218A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly GameData gameData;

		[Token(Token = "0x400218B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly PlayerHUDHandler playerHUDHandler;

		[Token(Token = "0x400218C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly PlayerHealthHandler playerHealthHandler;

		[Token(Token = "0x400218D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly CurveProjectileHandler curveProjectileHandler;

		[Token(Token = "0x400218E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly TimeHandler timeHandler;

		[Token(Token = "0x400218F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly ToolRecycleHandler toolRecycleHandler;

		[Token(Token = "0x4002190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly PlayerMovementHandler playerMovementHandler;

		[Token(Token = "0x4002191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4002192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly ProjectileRecycleHandler projectileRecycleHandler;

		[Token(Token = "0x4002193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly SyncHandler syncHandler;

		[Token(Token = "0x4002194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4002195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly BotEmoteRecordHandler botEmoteRecordHandler;

		[Token(Token = "0x4002196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly TetherToolHandler tetherToolHandler;

		[Token(Token = "0x4002197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly SpectateRequestViewHandler spectateRequestViewHandler;

		[Token(Token = "0x4002198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private readonly DebugData debugData;

		[Token(Token = "0x4002199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private readonly RoomTimeReSyncData roomTimeReSyncData;

		[Token(Token = "0x400219A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private readonly InitMessageHandler initMessageHandler;

		[Token(Token = "0x400219B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private readonly ToolSpawnAlgorithmData toolSpawnAlgorithmData;

		[Token(Token = "0x400219C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private readonly HelixProjectileHandler helixProjectileHandler;

		[Token(Token = "0x400219D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private readonly BounceProjectileHandler bounceProjectileHandler;

		[Token(Token = "0x400219E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private readonly GesturesPlayerHandler gesturesPlayerHandler;

		[Token(Token = "0x400219F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x40021A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private readonly AutoSpectateScoreboardViewHandler autoSpectateScoreboardViewHandler;

		[Token(Token = "0x40021A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private readonly ArcadeCampaignHandler arcadeCampaignHandler;

		[Token(Token = "0x40021A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x40021A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private readonly BayTekMatchHandler bayTekMatchHandler;

		[Token(Token = "0x40021A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x40021A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private readonly ToolChargeHandler toolChargeHandler;

		[Token(Token = "0x40021A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private readonly ToolBowPullbackHandler toolBowPullbackHandler;

		[Token(Token = "0x40021A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private readonly StationaryProjectileHandler stationaryProjectileHandler;

		[Token(Token = "0x40021A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private readonly PlayerTriggerHandler playerTriggerHandler;

		[Token(Token = "0x40021A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private readonly PingInformationHandler pingInformationHandler;

		[Token(Token = "0x40021AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private readonly MatchDeckInfoHandler matchDeckInfoHandler;

		[Token(Token = "0x60017A9")]
		[Address(RVA = "0x100DD08", Offset = "0x100DD08", VA = "0x100DD08")]
		public GameMessageInvoker(ToolGrabHandler toolGrabHandler, PlayerSpawnHandler playerSpawnHandler, ToolSpawnHandler toolSpawnHandler, ImpactHandler impactHandler, ArenaGameStateData arenaGameStateData, CageHandler cageHandler, StraightProjectileHandler straightProjectileHandler, ShieldHandler shieldHandler, BarrierShieldToolHandler barrierShieldToolHandler, BarrierSourceHandler barrierSourceHandler, BotController botController, DamageRecordKeeper damageRecordKeeper, GameData gameData, PlayerHUDHandler playerHUDHandler, PlayerHealthHandler playerHealthHandler, CurveProjectileHandler curveProjectileHandler, TimeHandler timeHandler, ToolRecycleHandler toolRecycleHandler, PlayerMovementHandler playerMovementHandler, IgnisSoundTriggerData ignisSoundTriggerData, ProjectileRecycleHandler projectileRecycleHandler, SyncHandler syncHandler, MatchHandlerData matchHandlerData, BotEmoteRecordHandler botEmoteRecordHandler, TetherToolHandler tetherToolHandler, SpectateRequestViewHandler spectateRequestViewHandler, RoomTimeReSyncData roomTimeReSyncData, InitMessageHandler initMessageHandler, ToolSpawnAlgorithmData toolSpawnAlgorithmData, HelixProjectileHandler helixProjectileHandler, BounceProjectileHandler bounceProjectileHandler, GesturesPlayerHandler gesturesPlayerHandler, AutoSpectateData autoSpectateData, AutoSpectateScoreboardViewHandler autoSpectateScoreboardViewHandler, ArcadeCampaignHandler arcadeCampaignHandler, ArcadeData arcadeData, BayTekMatchHandler bayTekMatchHandler, BayTekData bayTekData, ToolChargeHandler toolChargeHandler, ToolBowPullbackHandler toolBowPullbackHandler, StationaryProjectileHandler stationaryProjectileHandler, PlayerTriggerHandler playerTriggerHandler, PingInformationHandler pingInformationHandler, MatchDeckInfoHandler matchDeckInfoHandler)
		{
		}

		[Token(Token = "0x60017AA")]
		[Address(RVA = "0x100DEC0", Offset = "0x100DEC0", VA = "0x100DEC0", Slot = "4")]
		public GameMessageInvokationResult Visit(GameMessage gameMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017AB")]
		[Address(RVA = "0x100DF00", Offset = "0x100DF00", VA = "0x100DF00", Slot = "6")]
		public GameMessageInvokationResult Visit(ConsoleMessage consoleMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017AC")]
		[Address(RVA = "0x100DF08", Offset = "0x100DF08", VA = "0x100DF08", Slot = "7")]
		public GameMessageInvokationResult Visit(InitGameMessage initGame)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017AD")]
		[Address(RVA = "0x100E068", Offset = "0x100E068", VA = "0x100E068", Slot = "8")]
		public GameMessageInvokationResult Visit(RequestInitGameMessage requestInitGame)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0x100E194", Offset = "0x100E194", VA = "0x100E194", Slot = "9")]
		public GameMessageInvokationResult Visit(RequestSyncMessage requestSync)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017AF")]
		[Address(RVA = "0x100E214", Offset = "0x100E214", VA = "0x100E214", Slot = "11")]
		public GameMessageInvokationResult Visit(GrabMessage grabMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017B0")]
		[Address(RVA = "0x100E31C", Offset = "0x100E31C", VA = "0x100E31C", Slot = "12")]
		public GameMessageInvokationResult Visit(GrabSecondaryMessage grabSecondaryMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017B1")]
		[Address(RVA = "0x100E36C", Offset = "0x100E36C", VA = "0x100E36C", Slot = "13")]
		public GameMessageInvokationResult Visit(DropMessage dropMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0x100E3D0", Offset = "0x100E3D0", VA = "0x100E3D0", Slot = "14")]
		public GameMessageInvokationResult Visit(DropSecondaryMessage dropSecondaryMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0x100E434", Offset = "0x100E434", VA = "0x100E434", Slot = "10")]
		public GameMessageInvokationResult Visit(SpawnPlayerMessage spawnPlayerMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0x100E530", Offset = "0x100E530", VA = "0x100E530", Slot = "15")]
		public GameMessageInvokationResult Visit(ReqSpawnPlayerMessage reqSpawnPlayerMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0x100E54C", Offset = "0x100E54C", VA = "0x100E54C", Slot = "16")]
		public GameMessageInvokationResult Visit(FailedSpawnPlayerMessage failedSpawnPlayerMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0x100E59C", Offset = "0x100E59C", VA = "0x100E59C", Slot = "17")]
		public GameMessageInvokationResult Visit(StartArenaRoundMessage startArenaRoundMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0x100E64C", Offset = "0x100E64C", VA = "0x100E64C", Slot = "18")]
		public GameMessageInvokationResult Visit(EndArenaRoundMessage m)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0x100E75C", Offset = "0x100E75C", VA = "0x100E75C", Slot = "19")]
		public GameMessageInvokationResult Visit(ToolSpawnMessage toolSpawnMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0x100E7B8", Offset = "0x100E7B8", VA = "0x100E7B8", Slot = "46")]
		public GameMessageInvokationResult Visit(RematchResponseMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0x100E828", Offset = "0x100E828", VA = "0x100E828", Slot = "23")]
		public GameMessageInvokationResult Visit(ProjectileImpactMessage projectileImpactMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0x100E844", Offset = "0x100E844", VA = "0x100E844", Slot = "25")]
		public GameMessageInvokationResult Visit(EnvironmentImpactMessage environmentImpactMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0x100E860", Offset = "0x100E860", VA = "0x100E860", Slot = "24")]
		public GameMessageInvokationResult Visit(WaterImpactMessage waterImpactMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0x100E87C", Offset = "0x100E87C", VA = "0x100E87C", Slot = "26")]
		public GameMessageInvokationResult Visit(EnvironmentExitMessage environmentExitMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0x100E898", Offset = "0x100E898", VA = "0x100E898", Slot = "27")]
		public GameMessageInvokationResult Visit(DeployBarrierMessage deployBarrierMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017BF")]
		[Address(RVA = "0x100E8B4", Offset = "0x100E8B4", VA = "0x100E8B4", Slot = "28")]
		public GameMessageInvokationResult Visit(ShieldActivationMessage shieldActivationMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0x100E8D0", Offset = "0x100E8D0", VA = "0x100E8D0", Slot = "29")]
		public GameMessageInvokationResult Visit(ShieldDeactivationMessage shieldActivationMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0x100E8EC", Offset = "0x100E8EC", VA = "0x100E8EC", Slot = "30")]
		public GameMessageInvokationResult Visit(TimerActivationMessage timerActivationMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0x100E908", Offset = "0x100E908", VA = "0x100E908", Slot = "31")]
		public GameMessageInvokationResult Visit(DamageOverTimeImpactStartMessage damageOverTimeImpactStartMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017C3")]
		[Address(RVA = "0x100E948", Offset = "0x100E948", VA = "0x100E948", Slot = "32")]
		public GameMessageInvokationResult Visit(DamageOverTimeImpactEndMessage damageOverTimeImpactEndMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0x100E988", Offset = "0x100E988", VA = "0x100E988", Slot = "33")]
		public GameMessageInvokationResult Visit(DamageOverTimeCageStartMessage damageOverTimeCageStartMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0x100E9C8", Offset = "0x100E9C8", VA = "0x100E9C8", Slot = "34")]
		public GameMessageInvokationResult Visit(DamageOverTimeCageEndMessage damageOverTimeCageEndMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0x100EA08", Offset = "0x100EA08", VA = "0x100EA08", Slot = "35")]
		public GameMessageInvokationResult Visit(ToolImpactMessage toolImpactMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0x100EA24", Offset = "0x100EA24", VA = "0x100EA24", Slot = "36")]
		public GameMessageInvokationResult Visit(ForceFieldImpactMessage forceFieldImpactMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0x100EA40", Offset = "0x100EA40", VA = "0x100EA40", Slot = "37")]
		public GameMessageInvokationResult Visit(RestartArenaRoundMessage restartArenaRoundMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0x100EB08", Offset = "0x100EB08", VA = "0x100EB08", Slot = "38")]
		public GameMessageInvokationResult Visit(ForfeitMatchMessage forfeitMatchMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0x100EBA8", Offset = "0x100EBA8", VA = "0x100EBA8", Slot = "39")]
		public GameMessageInvokationResult Visit(ForfeitRoundMessage forfeitRoundMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0x100EC38", Offset = "0x100EC38", VA = "0x100EC38", Slot = "40")]
		public GameMessageInvokationResult Visit(StartIntro startIntro)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0x100EC9C", Offset = "0x100EC9C", VA = "0x100EC9C", Slot = "20")]
		public GameMessageInvokationResult Visit(StraightProjectileToolTriggerMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0x100F264", Offset = "0x100F264", VA = "0x100F264", Slot = "21")]
		public GameMessageInvokationResult Visit(HelixProjectileToolTriggerMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0x100F698", Offset = "0x100F698", VA = "0x100F698", Slot = "22")]
		public GameMessageInvokationResult Visit(BounceProjectileToolTriggerMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0x100FACC", Offset = "0x100FACC", VA = "0x100FACC", Slot = "41")]
		public GameMessageInvokationResult Visit(CurveProjectileToolTriggerMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0x100F0D0", Offset = "0x100F0D0", VA = "0x100F0D0")]
		private bool GetSourceObject(int networkId, out ISource source)
		{
			return default(bool);
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0x100FF08", Offset = "0x100FF08", VA = "0x100FF08", Slot = "43")]
		public GameMessageInvokationResult Visit(StationaryProjectileTriggerMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0x101033C", Offset = "0x101033C", VA = "0x101033C", Slot = "44")]
		public GameMessageInvokationResult Visit(DestroyProjectileMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0x1010470", Offset = "0x1010470", VA = "0x1010470", Slot = "45")]
		public GameMessageInvokationResult Visit(DestroyToolMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0x10105E4", Offset = "0x10105E4", VA = "0x10105E4", Slot = "42")]
		public GameMessageInvokationResult Visit(Mtm mtm)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0x101062C", Offset = "0x101062C", VA = "0x101062C", Slot = "47")]
		public GameMessageInvokationResult Visit(DeactivateTetherMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0x1010650", Offset = "0x1010650", VA = "0x1010650", Slot = "48")]
		public GameMessageInvokationResult Visit(SynchronizeTimeMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0x1010680", Offset = "0x1010680", VA = "0x1010680", Slot = "49")]
		public GameMessageInvokationResult Visit(PlayGesturesMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0x10106B8", Offset = "0x10106B8", VA = "0x10106B8", Slot = "50")]
		public GameMessageInvokationResult Visit(StartChargingToolMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0x10106D4", Offset = "0x10106D4", VA = "0x10106D4", Slot = "51")]
		public GameMessageInvokationResult Visit(StopChargingToolMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0x10106F0", Offset = "0x10106F0", VA = "0x10106F0", Slot = "52")]
		public GameMessageInvokationResult Visit(PingInfoMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0x101070C", Offset = "0x101070C", VA = "0x101070C", Slot = "53")]
		public GameMessageInvokationResult Visit(DeckInfoMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017DC")]
		[Address(RVA = "0x1010728", Offset = "0x1010728", VA = "0x1010728", Slot = "5")]
		public GameMessageInvokationResult Visit(LogMessage logMessage)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000556")]
	public class GameMessageNetworkIdeAllocator : GameMessageVisitor
	{
		[Token(Token = "0x40021AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly NetworkIdAllocator networkIdAllocator;

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0x1010730", Offset = "0x1010730", VA = "0x1010730")]
		public GameMessageNetworkIdeAllocator(NetworkIdAllocator networkIdAllocator)
		{
		}

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0x1010758", Offset = "0x1010758", VA = "0x1010758", Slot = "4")]
		public GameMessageInvokationResult Visit(GameMessage gameMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0x1010760", Offset = "0x1010760", VA = "0x1010760", Slot = "5")]
		public GameMessageInvokationResult Visit(LogMessage logMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017E0")]
		[Address(RVA = "0x1010768", Offset = "0x1010768", VA = "0x1010768", Slot = "6")]
		public GameMessageInvokationResult Visit(ConsoleMessage consoleMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017E1")]
		[Address(RVA = "0x1010770", Offset = "0x1010770", VA = "0x1010770", Slot = "7")]
		public GameMessageInvokationResult Visit(InitGameMessage initGame)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017E2")]
		[Address(RVA = "0x1010778", Offset = "0x1010778", VA = "0x1010778", Slot = "8")]
		public GameMessageInvokationResult Visit(RequestInitGameMessage requestInitGame)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0x1010780", Offset = "0x1010780", VA = "0x1010780", Slot = "9")]
		public GameMessageInvokationResult Visit(RequestSyncMessage requestSync)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017E4")]
		[Address(RVA = "0x1010788", Offset = "0x1010788", VA = "0x1010788", Slot = "10")]
		public GameMessageInvokationResult Visit(SpawnPlayerMessage spawnPlayerMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0x1010790", Offset = "0x1010790", VA = "0x1010790", Slot = "11")]
		public GameMessageInvokationResult Visit(GrabMessage grabMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0x1010798", Offset = "0x1010798", VA = "0x1010798", Slot = "12")]
		public GameMessageInvokationResult Visit(GrabSecondaryMessage grabSecondaryMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0x10107A0", Offset = "0x10107A0", VA = "0x10107A0", Slot = "13")]
		public GameMessageInvokationResult Visit(DropMessage dropMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0x10107A8", Offset = "0x10107A8", VA = "0x10107A8", Slot = "14")]
		public GameMessageInvokationResult Visit(DropSecondaryMessage dropSecondaryMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0x10107B0", Offset = "0x10107B0", VA = "0x10107B0", Slot = "15")]
		public GameMessageInvokationResult Visit(ReqSpawnPlayerMessage reqSpawnPlayerMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017EA")]
		[Address(RVA = "0x10107B8", Offset = "0x10107B8", VA = "0x10107B8", Slot = "16")]
		public GameMessageInvokationResult Visit(FailedSpawnPlayerMessage failedSpawnPlayerMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0x10107C0", Offset = "0x10107C0", VA = "0x10107C0", Slot = "17")]
		public GameMessageInvokationResult Visit(StartArenaRoundMessage startArenaRoundMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017EC")]
		[Address(RVA = "0x10107C8", Offset = "0x10107C8", VA = "0x10107C8", Slot = "18")]
		public GameMessageInvokationResult Visit(EndArenaRoundMessage endArenaRoundMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0x10107D0", Offset = "0x10107D0", VA = "0x10107D0", Slot = "19")]
		public GameMessageInvokationResult Visit(ToolSpawnMessage toolSpawnMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017EE")]
		[Address(RVA = "0x10107FC", Offset = "0x10107FC", VA = "0x10107FC", Slot = "20")]
		public GameMessageInvokationResult Visit(StraightProjectileToolTriggerMessage straightProjectileToolTriggerMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0x101081C", Offset = "0x101081C", VA = "0x101081C")]
		private void DeallocateProjectileIds(List<int> networkIds)
		{
		}

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0x10108C0", Offset = "0x10108C0", VA = "0x10108C0", Slot = "21")]
		public GameMessageInvokationResult Visit(HelixProjectileToolTriggerMessage helixProjectileToolTriggerMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0x10108E0", Offset = "0x10108E0", VA = "0x10108E0", Slot = "22")]
		public GameMessageInvokationResult Visit(BounceProjectileToolTriggerMessage bounceProjectileToolTriggerMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017F2")]
		[Address(RVA = "0x1010900", Offset = "0x1010900", VA = "0x1010900", Slot = "23")]
		public GameMessageInvokationResult Visit(ProjectileImpactMessage projectileImpactMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0x1010908", Offset = "0x1010908", VA = "0x1010908", Slot = "24")]
		public GameMessageInvokationResult Visit(WaterImpactMessage waterImpactMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017F4")]
		[Address(RVA = "0x1010910", Offset = "0x1010910", VA = "0x1010910", Slot = "25")]
		public GameMessageInvokationResult Visit(EnvironmentImpactMessage environmentImpactMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0x1010918", Offset = "0x1010918", VA = "0x1010918", Slot = "26")]
		public GameMessageInvokationResult Visit(EnvironmentExitMessage environmentExitMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0x1010920", Offset = "0x1010920", VA = "0x1010920", Slot = "27")]
		public GameMessageInvokationResult Visit(DeployBarrierMessage deployBarrierMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0x101094C", Offset = "0x101094C", VA = "0x101094C", Slot = "28")]
		public GameMessageInvokationResult Visit(ShieldActivationMessage shieldActivationMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017F8")]
		[Address(RVA = "0x1010954", Offset = "0x1010954", VA = "0x1010954", Slot = "29")]
		public GameMessageInvokationResult Visit(ShieldDeactivationMessage shieldActivationMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0x101095C", Offset = "0x101095C", VA = "0x101095C", Slot = "30")]
		public GameMessageInvokationResult Visit(TimerActivationMessage timerActivationMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0x1010964", Offset = "0x1010964", VA = "0x1010964", Slot = "31")]
		public GameMessageInvokationResult Visit(DamageOverTimeImpactStartMessage damageOverTimeImpactStartMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0x101096C", Offset = "0x101096C", VA = "0x101096C", Slot = "32")]
		public GameMessageInvokationResult Visit(DamageOverTimeImpactEndMessage damageOverTimeImpactEndMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0x1010974", Offset = "0x1010974", VA = "0x1010974", Slot = "33")]
		public GameMessageInvokationResult Visit(DamageOverTimeCageStartMessage damageOverTimeCageStartMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0x101097C", Offset = "0x101097C", VA = "0x101097C", Slot = "34")]
		public GameMessageInvokationResult Visit(DamageOverTimeCageEndMessage damageOverTimeCageEndMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0x1010984", Offset = "0x1010984", VA = "0x1010984", Slot = "35")]
		public GameMessageInvokationResult Visit(ToolImpactMessage toolImpactMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0x101098C", Offset = "0x101098C", VA = "0x101098C", Slot = "36")]
		public GameMessageInvokationResult Visit(ForceFieldImpactMessage forceFieldImpactMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001800")]
		[Address(RVA = "0x1010994", Offset = "0x1010994", VA = "0x1010994", Slot = "37")]
		public GameMessageInvokationResult Visit(RestartArenaRoundMessage restartArenaRoundMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0x101099C", Offset = "0x101099C", VA = "0x101099C", Slot = "38")]
		public GameMessageInvokationResult Visit(ForfeitMatchMessage forfeitMatchMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001802")]
		[Address(RVA = "0x10109A4", Offset = "0x10109A4", VA = "0x10109A4", Slot = "39")]
		public GameMessageInvokationResult Visit(ForfeitRoundMessage forfeitRoundMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001803")]
		[Address(RVA = "0x10109AC", Offset = "0x10109AC", VA = "0x10109AC", Slot = "40")]
		public GameMessageInvokationResult Visit(StartIntro startIntro)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001804")]
		[Address(RVA = "0x10109B4", Offset = "0x10109B4", VA = "0x10109B4", Slot = "41")]
		public GameMessageInvokationResult Visit(CurveProjectileToolTriggerMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0x10109D4", Offset = "0x10109D4", VA = "0x10109D4", Slot = "42")]
		public GameMessageInvokationResult Visit(Mtm mtm)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001806")]
		[Address(RVA = "0x10109DC", Offset = "0x10109DC", VA = "0x10109DC", Slot = "43")]
		public GameMessageInvokationResult Visit(StationaryProjectileTriggerMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0x10109FC", Offset = "0x10109FC", VA = "0x10109FC", Slot = "44")]
		public GameMessageInvokationResult Visit(DestroyProjectileMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0x1010A04", Offset = "0x1010A04", VA = "0x1010A04", Slot = "45")]
		public GameMessageInvokationResult Visit(DestroyToolMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001809")]
		[Address(RVA = "0x1010A0C", Offset = "0x1010A0C", VA = "0x1010A0C", Slot = "46")]
		public GameMessageInvokationResult Visit(RematchResponseMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x600180A")]
		[Address(RVA = "0x1010A14", Offset = "0x1010A14", VA = "0x1010A14", Slot = "47")]
		public GameMessageInvokationResult Visit(DeactivateTetherMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x600180B")]
		[Address(RVA = "0x1010A1C", Offset = "0x1010A1C", VA = "0x1010A1C", Slot = "48")]
		public GameMessageInvokationResult Visit(SynchronizeTimeMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0x1010A24", Offset = "0x1010A24", VA = "0x1010A24", Slot = "49")]
		public GameMessageInvokationResult Visit(PlayGesturesMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x600180D")]
		[Address(RVA = "0x1010A2C", Offset = "0x1010A2C", VA = "0x1010A2C", Slot = "50")]
		public GameMessageInvokationResult Visit(StartChargingToolMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x600180E")]
		[Address(RVA = "0x1010A34", Offset = "0x1010A34", VA = "0x1010A34", Slot = "51")]
		public GameMessageInvokationResult Visit(StopChargingToolMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x600180F")]
		[Address(RVA = "0x1010A3C", Offset = "0x1010A3C", VA = "0x1010A3C", Slot = "52")]
		public GameMessageInvokationResult Visit(PingInfoMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0x1010A44", Offset = "0x1010A44", VA = "0x1010A44", Slot = "53")]
		public GameMessageInvokationResult Visit(DeckInfoMessage message)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Serializable]
	[Token(Token = "0x2000557")]
	public struct SerializedMessage
	{
		[Token(Token = "0x40021AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string id;

		[Token(Token = "0x40021AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m;

		[Token(Token = "0x6001811")]
		[Address(RVA = "0x1010A4C", Offset = "0x1010A4C", VA = "0x1010A4C")]
		public SerializedMessage(string id, string m)
		{
		}
	}
	[Token(Token = "0x2000558")]
	public class GameMessageSerializer
	{
		[Token(Token = "0x2000559")]
		[CompilerGenerated]
		private sealed class <AsyncSerializeGameMessages>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40021B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40021B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40021B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MemoryStream stream;

			[Token(Token = "0x40021B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameMessage[] messages;

			[Token(Token = "0x40021B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public GameMessageSerializer <>4__this;

			[Token(Token = "0x40021B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private StreamWriter <writer>5__2;

			[Token(Token = "0x40021B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <i>5__3;

			[Token(Token = "0x17000100")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600181A")]
				[Address(RVA = "0x1011054", Offset = "0x1011054", VA = "0x1011054", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000101")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600181C")]
				[Address(RVA = "0x101109C", Offset = "0x101109C", VA = "0x101109C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001817")]
			[Address(RVA = "0x1010E44", Offset = "0x1010E44", VA = "0x1010E44")]
			[DebuggerHidden]
			public <AsyncSerializeGameMessages>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001818")]
			[Address(RVA = "0x1010F28", Offset = "0x1010F28", VA = "0x1010F28", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001819")]
			[Address(RVA = "0x1010F2C", Offset = "0x1010F2C", VA = "0x1010F2C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600181B")]
			[Address(RVA = "0x101105C", Offset = "0x101105C", VA = "0x101105C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40021AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameMessageData gameMessageData;

		[Token(Token = "0x40021AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly SingleMessageSerializer singleMessageSerializer;

		[Token(Token = "0x6001812")]
		[Address(RVA = "0x1010A54", Offset = "0x1010A54", VA = "0x1010A54")]
		public GameMessageSerializer(GameMessageData gameMessageData, SingleMessageSerializer singleMessageSerializer)
		{
		}

		[Token(Token = "0x6001813")]
		[Address(RVA = "0x1010A80", Offset = "0x1010A80", VA = "0x1010A80")]
		public void SerializeEmoteGameMessages(MemoryStream stream, Mtm[] emoteMessages)
		{
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0x1010DC8", Offset = "0x1010DC8", VA = "0x1010DC8")]
		[IteratorStateMachine(typeof(<AsyncSerializeGameMessages>d__4))]
		public IEnumerator AsyncSerializeGameMessages(MemoryStream stream, GameMessage[] messages)
		{
			return null;
		}

		[Token(Token = "0x6001815")]
		[Address(RVA = "0x1010E6C", Offset = "0x1010E6C", VA = "0x1010E6C")]
		public string MessageTypeId(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0x1010EB8", Offset = "0x1010EB8", VA = "0x1010EB8")]
		public Type MessageTypeFromId(string serializedMessageID)
		{
			return null;
		}
	}
	[Token(Token = "0x200055A")]
	public interface ISingleMessageSerializer
	{
		[Token(Token = "0x600181D")]
		void SerializeGameMessage(GameMessage message, StreamWriter writer);

		[Token(Token = "0x600181E")]
		string MessageTypeId(Type type);

		[Token(Token = "0x600181F")]
		Type MessageIdToType(string serializedMessageID);
	}
	[Token(Token = "0x200055B")]
	public class SingleMessageSerializer : ISingleMessageSerializer
	{
		[Token(Token = "0x40021B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, Type> messageIdToType;

		[Token(Token = "0x6001820")]
		[Address(RVA = "0x10110A4", Offset = "0x10110A4", VA = "0x10110A4")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001821")]
		[Address(RVA = "0x10110A8", Offset = "0x10110A8", VA = "0x10110A8")]
		private void GenerateGameMessageIdToTypeMapping()
		{
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0x1010CE0", Offset = "0x1010CE0", VA = "0x1010CE0", Slot = "4")]
		public void SerializeGameMessage(GameMessage message, StreamWriter writer)
		{
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0x1010E84", Offset = "0x1010E84", VA = "0x1010E84", Slot = "5")]
		public string MessageTypeId(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0x1010ED0", Offset = "0x1010ED0", VA = "0x1010ED0", Slot = "6")]
		public Type MessageIdToType(string serializedMessageID)
		{
			return null;
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0x101130C", Offset = "0x101130C", VA = "0x101130C")]
		public SingleMessageSerializer()
		{
		}
	}
	[Token(Token = "0x200055D")]
	public interface GameMessageVisitor
	{
		[Token(Token = "0x6001829")]
		GameMessageInvokationResult Visit(GameMessage gameMessage);

		[Token(Token = "0x600182A")]
		GameMessageInvokationResult Visit(LogMessage logMessage);

		[Token(Token = "0x600182B")]
		GameMessageInvokationResult Visit(ConsoleMessage consoleMessage);

		[Token(Token = "0x600182C")]
		GameMessageInvokationResult Visit(InitGameMessage initGame);

		[Token(Token = "0x600182D")]
		GameMessageInvokationResult Visit(RequestInitGameMessage requestInitGame);

		[Token(Token = "0x600182E")]
		GameMessageInvokationResult Visit(RequestSyncMessage requestSync);

		[Token(Token = "0x600182F")]
		GameMessageInvokationResult Visit(SpawnPlayerMessage spawnPlayerMessage);

		[Token(Token = "0x6001830")]
		GameMessageInvokationResult Visit(GrabMessage grabMessage);

		[Token(Token = "0x6001831")]
		GameMessageInvokationResult Visit(GrabSecondaryMessage grabSecondaryMessage);

		[Token(Token = "0x6001832")]
		GameMessageInvokationResult Visit(DropMessage dropMessage);

		[Token(Token = "0x6001833")]
		GameMessageInvokationResult Visit(DropSecondaryMessage dropSecondaryMessage);

		[Token(Token = "0x6001834")]
		GameMessageInvokationResult Visit(ReqSpawnPlayerMessage reqSpawnPlayerMessage);

		[Token(Token = "0x6001835")]
		GameMessageInvokationResult Visit(FailedSpawnPlayerMessage failedSpawnPlayerMessage);

		[Token(Token = "0x6001836")]
		GameMessageInvokationResult Visit(StartArenaRoundMessage startArenaRoundMessage);

		[Token(Token = "0x6001837")]
		GameMessageInvokationResult Visit(EndArenaRoundMessage endArenaRoundMessage);

		[Token(Token = "0x6001838")]
		GameMessageInvokationResult Visit(ToolSpawnMessage toolSpawnMessage);

		[Token(Token = "0x6001839")]
		GameMessageInvokationResult Visit(StraightProjectileToolTriggerMessage straightProjectileToolTriggerMessage);

		[Token(Token = "0x600183A")]
		GameMessageInvokationResult Visit(HelixProjectileToolTriggerMessage helixProjectileToolTriggerMessage);

		[Token(Token = "0x600183B")]
		GameMessageInvokationResult Visit(BounceProjectileToolTriggerMessage bounceProjectileToolTriggerMessage);

		[Token(Token = "0x600183C")]
		GameMessageInvokationResult Visit(ProjectileImpactMessage projectileImpactMessage);

		[Token(Token = "0x600183D")]
		GameMessageInvokationResult Visit(WaterImpactMessage waterImpactMessage);

		[Token(Token = "0x600183E")]
		GameMessageInvokationResult Visit(EnvironmentImpactMessage environmentImpactMessage);

		[Token(Token = "0x600183F")]
		GameMessageInvokationResult Visit(EnvironmentExitMessage environmentExitMessage);

		[Token(Token = "0x6001840")]
		GameMessageInvokationResult Visit(DeployBarrierMessage deployBarrierMessage);

		[Token(Token = "0x6001841")]
		GameMessageInvokationResult Visit(ShieldActivationMessage shieldActivationMessage);

		[Token(Token = "0x6001842")]
		GameMessageInvokationResult Visit(ShieldDeactivationMessage shieldActivationMessage);

		[Token(Token = "0x6001843")]
		GameMessageInvokationResult Visit(TimerActivationMessage timerActivationMessage);

		[Token(Token = "0x6001844")]
		GameMessageInvokationResult Visit(DamageOverTimeImpactStartMessage damageOverTimeImpactStartMessage);

		[Token(Token = "0x6001845")]
		GameMessageInvokationResult Visit(DamageOverTimeImpactEndMessage damageOverTimeImpactEndMessage);

		[Token(Token = "0x6001846")]
		GameMessageInvokationResult Visit(DamageOverTimeCageStartMessage damageOverTimeCageStartMessage);

		[Token(Token = "0x6001847")]
		GameMessageInvokationResult Visit(DamageOverTimeCageEndMessage damageOverTimeCageEndMessage);

		[Token(Token = "0x6001848")]
		GameMessageInvokationResult Visit(ToolImpactMessage toolImpactMessage);

		[Token(Token = "0x6001849")]
		GameMessageInvokationResult Visit(ForceFieldImpactMessage forceFieldImpactMessage);

		[Token(Token = "0x600184A")]
		GameMessageInvokationResult Visit(RestartArenaRoundMessage restartArenaRoundMessage);

		[Token(Token = "0x600184B")]
		GameMessageInvokationResult Visit(ForfeitMatchMessage forfeitMatchMessage);

		[Token(Token = "0x600184C")]
		GameMessageInvokationResult Visit(ForfeitRoundMessage forfeitRoundMessage);

		[Token(Token = "0x600184D")]
		GameMessageInvokationResult Visit(StartIntro startIntro);

		[Token(Token = "0x600184E")]
		GameMessageInvokationResult Visit(CurveProjectileToolTriggerMessage message);

		[Token(Token = "0x600184F")]
		GameMessageInvokationResult Visit(Mtm mtm);

		[Token(Token = "0x6001850")]
		GameMessageInvokationResult Visit(StationaryProjectileTriggerMessage message);

		[Token(Token = "0x6001851")]
		GameMessageInvokationResult Visit(DestroyProjectileMessage message);

		[Token(Token = "0x6001852")]
		GameMessageInvokationResult Visit(DestroyToolMessage message);

		[Token(Token = "0x6001853")]
		GameMessageInvokationResult Visit(RematchResponseMessage message);

		[Token(Token = "0x6001854")]
		GameMessageInvokationResult Visit(DeactivateTetherMessage message);

		[Token(Token = "0x6001855")]
		GameMessageInvokationResult Visit(SynchronizeTimeMessage message);

		[Token(Token = "0x6001856")]
		GameMessageInvokationResult Visit(PlayGesturesMessage message);

		[Token(Token = "0x6001857")]
		GameMessageInvokationResult Visit(StartChargingToolMessage message);

		[Token(Token = "0x6001858")]
		GameMessageInvokationResult Visit(StopChargingToolMessage message);

		[Token(Token = "0x6001859")]
		GameMessageInvokationResult Visit(PingInfoMessage message);

		[Token(Token = "0x600185A")]
		GameMessageInvokationResult Visit(DeckInfoMessage message);
	}
	[Token(Token = "0x200055E")]
	public class InitMessageHandler
	{
		[Token(Token = "0x40021BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x40021BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x40021BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly SceneHandlerData sceneHandlerData;

		[Token(Token = "0x40021BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x40021BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x40021BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x600185B")]
		[Address(RVA = "0x1011418", Offset = "0x1011418", VA = "0x1011418")]
		public InitMessageHandler(ArenaGameStateData arenaGameStateData, MatchHandlerData matchHandlerData, SceneHandlerData sceneHandlerData, IgnisNetworkConnectionData networkConnectionData, MessageSender messageSender, GameMessageFactory gameMessageFactory)
		{
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0x100DF28", Offset = "0x100DF28", VA = "0x100DF28")]
		public GameMessageInvokationResult OnInitMessage(InitGameMessage initGame)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0x100E088", Offset = "0x100E088", VA = "0x100E088")]
		public GameMessageInvokationResult OnRequestInitGameMessage(RequestInitGameMessage requestInitGame)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x200055F")]
	public interface IRoomTimeProvider
	{
		[Token(Token = "0x600185E")]
		float GetRoomTime();

		[Token(Token = "0x600185F")]
		float GetFixedRoomTime();

		[Token(Token = "0x6001860")]
		float GetFixedRoomTimeTargetTime();

		[Token(Token = "0x6001861")]
		void ResetPhysicsTime();

		[Token(Token = "0x6001862")]
		bool shouldRunFixedTimeOnRoomTime();

		[Token(Token = "0x6001863")]
		bool IsRunningFixedTimeOnRoomTime();

		[Token(Token = "0x6001864")]
		void StepRoomTime(bool isGameTime);

		[Token(Token = "0x6001865")]
		double GetNetworkTime();

		[Token(Token = "0x6001866")]
		void SetRoomCreationTime(double roomFirstSpawnTime);

		[Token(Token = "0x6001867")]
		void SetRoomTimeNotSynced();

		[Token(Token = "0x6001868")]
		double GetRoomCreationTime();
	}
	[Token(Token = "0x2000560")]
	public class RoomTimeProviderProxy : IRoomTimeProvider
	{
		[Token(Token = "0x40021C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IRoomTimeProvider currentRoomTimeProvider;

		[Token(Token = "0x6001869")]
		[Address(RVA = "0x10014AC", Offset = "0x10014AC", VA = "0x10014AC")]
		public RoomTimeProviderProxy(IRoomTimeProvider roomTimeProvider)
		{
		}

		[Token(Token = "0x600186A")]
		[Address(RVA = "0x10114F8", Offset = "0x10114F8", VA = "0x10114F8")]
		public void SetCurrentProvider(IRoomTimeProvider roomTimeProvider)
		{
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0x1011500", Offset = "0x1011500", VA = "0x1011500", Slot = "4")]
		public float GetRoomTime()
		{
			return default(float);
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0x10115A0", Offset = "0x10115A0", VA = "0x10115A0", Slot = "5")]
		public float GetFixedRoomTime()
		{
			return default(float);
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0x1011644", Offset = "0x1011644", VA = "0x1011644", Slot = "6")]
		public float GetFixedRoomTimeTargetTime()
		{
			return default(float);
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0x10116E8", Offset = "0x10116E8", VA = "0x10116E8", Slot = "7")]
		public void ResetPhysicsTime()
		{
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0x101178C", Offset = "0x101178C", VA = "0x101178C", Slot = "8")]
		public bool shouldRunFixedTimeOnRoomTime()
		{
			return default(bool);
		}

		[Token(Token = "0x6001870")]
		[Address(RVA = "0x1011830", Offset = "0x1011830", VA = "0x1011830", Slot = "9")]
		public bool IsRunningFixedTimeOnRoomTime()
		{
			return default(bool);
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0x10118D4", Offset = "0x10118D4", VA = "0x10118D4", Slot = "10")]
		public void StepRoomTime(bool isGameTime)
		{
		}

		[Token(Token = "0x6001872")]
		[Address(RVA = "0x1011980", Offset = "0x1011980", VA = "0x1011980", Slot = "11")]
		public double GetNetworkTime()
		{
			return default(double);
		}

		[Token(Token = "0x6001873")]
		[Address(RVA = "0x1011A24", Offset = "0x1011A24", VA = "0x1011A24", Slot = "12")]
		public void SetRoomCreationTime(double roomFirstSpawnTime)
		{
		}

		[Token(Token = "0x6001874")]
		[Address(RVA = "0x1011AD8", Offset = "0x1011AD8", VA = "0x1011AD8", Slot = "14")]
		public double GetRoomCreationTime()
		{
			return default(double);
		}

		[Token(Token = "0x6001875")]
		[Address(RVA = "0x1011B7C", Offset = "0x1011B7C", VA = "0x1011B7C", Slot = "13")]
		public void SetRoomTimeNotSynced()
		{
		}
	}
	[Token(Token = "0x2000561")]
	public class PhotonRoomTimeProvider : IRoomTimeProvider
	{
		[Token(Token = "0x40021C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x40021C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameData gameData;

		[Token(Token = "0x40021C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double latestKnownRoomTime;

		[Token(Token = "0x40021C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double roomCreationTimeNetworked;

		[Token(Token = "0x40021C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float roomCreationTimeOffline;

		[Token(Token = "0x40021C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float fixedRoomTime;

		[Token(Token = "0x40021C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool roomTimeSynced;

		[Token(Token = "0x40021C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool hasReportedErrorOnTimePrecision;

		[Token(Token = "0x40021C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private bool isRunningFixedTimeOnRoomTime;

		[Token(Token = "0x6001876")]
		[Address(RVA = "0x1001480", Offset = "0x1001480", VA = "0x1001480")]
		public PhotonRoomTimeProvider(IgnisNetworkConnectionData networkConnectionData, GameData gameData)
		{
		}

		[Token(Token = "0x6001877")]
		[Address(RVA = "0x1011C20", Offset = "0x1011C20", VA = "0x1011C20", Slot = "4")]
		public float GetRoomTime()
		{
			return default(float);
		}

		[Token(Token = "0x6001878")]
		[Address(RVA = "0x1011E08", Offset = "0x1011E08", VA = "0x1011E08", Slot = "5")]
		public float GetFixedRoomTime()
		{
			return default(float);
		}

		[Token(Token = "0x6001879")]
		[Address(RVA = "0x1011E10", Offset = "0x1011E10", VA = "0x1011E10", Slot = "6")]
		public float GetFixedRoomTimeTargetTime()
		{
			return default(float);
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0x1011E24", Offset = "0x1011E24", VA = "0x1011E24", Slot = "9")]
		public bool IsRunningFixedTimeOnRoomTime()
		{
			return default(bool);
		}

		[Token(Token = "0x600187B")]
		[Address(RVA = "0x1011E2C", Offset = "0x1011E2C", VA = "0x1011E2C", Slot = "10")]
		public void StepRoomTime(bool isGameTime)
		{
		}

		[Token(Token = "0x600187C")]
		[Address(RVA = "0x1011E94", Offset = "0x1011E94", VA = "0x1011E94", Slot = "11")]
		public double GetNetworkTime()
		{
			return default(double);
		}

		[Token(Token = "0x600187D")]
		[Address(RVA = "0x1011F18", Offset = "0x1011F18", VA = "0x1011F18", Slot = "12")]
		public void SetRoomCreationTime(double roomFirstSpawnTime)
		{
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0x1012080", Offset = "0x1012080", VA = "0x1012080", Slot = "8")]
		public bool shouldRunFixedTimeOnRoomTime()
		{
			return default(bool);
		}

		[Token(Token = "0x600187F")]
		[Address(RVA = "0x10120D0", Offset = "0x10120D0", VA = "0x10120D0", Slot = "14")]
		public double GetRoomCreationTime()
		{
			return default(double);
		}

		[Token(Token = "0x6001880")]
		[Address(RVA = "0x10120D8", Offset = "0x10120D8", VA = "0x10120D8", Slot = "13")]
		public void SetRoomTimeNotSynced()
		{
		}

		[Token(Token = "0x6001881")]
		[Address(RVA = "0x1011F30", Offset = "0x1011F30", VA = "0x1011F30", Slot = "7")]
		public void ResetPhysicsTime()
		{
		}

		[Token(Token = "0x6001882")]
		[Address(RVA = "0x1011DE0", Offset = "0x1011DE0", VA = "0x1011DE0")]
		private void UnwrapTime()
		{
		}
	}
	[Token(Token = "0x2000562")]
	public class MessageSender : IMessageSender
	{
		[Token(Token = "0x40021CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameMessageData gameMessageData;

		[Token(Token = "0x40021CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x40021CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ReplayData replayData;

		[Token(Token = "0x40021CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly RaiseEventOptions raiseEventOptionsOther;

		[Token(Token = "0x40021CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly RaiseEventOptions raiseEventOptionsTarget;

		[Token(Token = "0x40021CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly GameMessageUploadHandlerData gameMessageUploadHandlerData;

		[Token(Token = "0x40021D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameData gameData;

		[Token(Token = "0x6001883")]
		[Address(RVA = "0x10012C4", Offset = "0x10012C4", VA = "0x10012C4")]
		public MessageSender(GameMessageData gameMessageData, IgnisNetworkConnectionData networkConnectionData, ReplayData replayData, GameMessageUploadHandlerData gameMessageUploadHandlerData, GameData gameData)
		{
		}

		[Token(Token = "0x6001884")]
		[Address(RVA = "0x10120E0", Offset = "0x10120E0", VA = "0x10120E0")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001885")]
		[Address(RVA = "0x10120E4", Offset = "0x10120E4", VA = "0x10120E4")]
		private void SetSendRate(int sendRate)
		{
		}

		[Token(Token = "0x6001886")]
		[Address(RVA = "0x10121A8", Offset = "0x10121A8", VA = "0x10121A8")]
		private void SetSerializationRate(int serializationRate)
		{
		}

		[Token(Token = "0x6001887")]
		[Address(RVA = "0x101226C", Offset = "0x101226C", VA = "0x101226C", Slot = "4")]
		public void SendAll(GameMessage gameMessage, bool reliable)
		{
		}

		[Token(Token = "0x6001888")]
		[Address(RVA = "0x10122A0", Offset = "0x10122A0", VA = "0x10122A0")]
		public void SendOther(GameMessage gameMessage, bool reliable)
		{
		}

		[Token(Token = "0x6001889")]
		[Address(RVA = "0x101146C", Offset = "0x101146C", VA = "0x101146C")]
		public void SendPlayer(GameMessage gameMessage, int target, bool reliable)
		{
		}

		[Token(Token = "0x600188A")]
		[Address(RVA = "0x10123BC", Offset = "0x10123BC", VA = "0x10123BC")]
		private void SendPhotonMessage(GameMessage gameMessage, RaiseEventOptions raiseEventOptions, bool reliable)
		{
		}

		[Token(Token = "0x600188B")]
		[Address(RVA = "0x10122B0", Offset = "0x10122B0", VA = "0x10122B0")]
		private void SendSelf(GameMessage gameMessage)
		{
		}

		[Token(Token = "0x600188C")]
		[Address(RVA = "0x10124F8", Offset = "0x10124F8", VA = "0x10124F8")]
		[Conditional("IGNIS_DEBUG_VERBOSE")]
		private void LogTraceMessages(GameMessage gameMessage, RaiseEventOptions raiseEventOptions)
		{
		}
	}
	[Token(Token = "0x2000563")]
	public interface IMessageSender
	{
		[Token(Token = "0x600188D")]
		void SendAll(GameMessage gameMessage, bool reliable);
	}
	[Token(Token = "0x2000564")]
	public class SyncHandler : ITickable
	{
		[Token(Token = "0x40021D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x40021D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameMessageData gameMessageData;

		[Token(Token = "0x40021D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x40021D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x40021D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Queue<RequestSyncMessage> playersRequestedSync;

		[Token(Token = "0x600188E")]
		[Address(RVA = "0x1012594", Offset = "0x1012594", VA = "0x1012594")]
		public SyncHandler(IgnisNetworkConnectionData networkConnectionData, GameMessageData gameMessageData, MessageSender messageSender, MatchHandlerData matchHandlerData)
		{
		}

		[Token(Token = "0x600188F")]
		[Address(RVA = "0x101263C", Offset = "0x101263C", VA = "0x101263C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001890")]
		[Address(RVA = "0x100E1B4", Offset = "0x100E1B4", VA = "0x100E1B4")]
		public GameMessageInvokationResult OnRequestSyncMessage(RequestSyncMessage requestSync)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0x10126BC", Offset = "0x10126BC", VA = "0x10126BC")]
		private void SyncGame(RequestSyncMessage requestSyncMessage)
		{
		}

		[Token(Token = "0x6001892")]
		[Address(RVA = "0x1012884", Offset = "0x1012884", VA = "0x1012884")]
		private bool ShouldSyncMessage(GameMessage message, float firstSeenMessageRoomTime)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000565")]
	public class AddressableLoader : ISceneLoaderFacade
	{
		[Token(Token = "0x6001893")]
		[Address(RVA = "0x1012970", Offset = "0x1012970", VA = "0x1012970", Slot = "5")]
		public ISceneHandleFacade LoadSceneAsync(string sceneHandleFacade, LoadSceneMode additive, bool requestActivate)
		{
			return null;
		}

		[Token(Token = "0x6001894")]
		[Address(RVA = "0x1012A64", Offset = "0x1012A64", VA = "0x1012A64", Slot = "4")]
		public ISceneHandleFacade UnloadSceneAsync(ISceneHandleFacade sceneHandleFacade)
		{
			return null;
		}

		[Token(Token = "0x6001895")]
		[Address(RVA = "0x1001478", Offset = "0x1001478", VA = "0x1001478")]
		public AddressableLoader()
		{
		}
	}
	[Token(Token = "0x2000566")]
	public class AddressableSceneHandle : ISceneHandleFacade
	{
		[Token(Token = "0x40021D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AsyncOperationHandle<SceneInstance> asyncHandle;

		[Token(Token = "0x6001896")]
		[Address(RVA = "0x1012A38", Offset = "0x1012A38", VA = "0x1012A38")]
		public AddressableSceneHandle(AsyncOperationHandle<SceneInstance> asyncHandle)
		{
		}

		[Token(Token = "0x6001897")]
		[Address(RVA = "0x1012B9C", Offset = "0x1012B9C", VA = "0x1012B9C", Slot = "4")]
		public void ActivateSceneAsync()
		{
		}

		[Token(Token = "0x6001898")]
		[Address(RVA = "0x1012C08", Offset = "0x1012C08", VA = "0x1012C08", Slot = "5")]
		public bool IsDone()
		{
			return default(bool);
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0x1012C68", Offset = "0x1012C68", VA = "0x1012C68", Slot = "6")]
		public AsyncOperationHandle<SceneInstance> GetSceneInstance()
		{
			return default(AsyncOperationHandle<SceneInstance>);
		}
	}
	[Token(Token = "0x2000567")]
	public class AnimationStateEnterTrigger : StateMachineBehaviour
	{
		[Token(Token = "0x40021D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string booleanVariableName;

		[Token(Token = "0x600189A")]
		[Address(RVA = "0x1012C74", Offset = "0x1012C74", VA = "0x1012C74", Slot = "4")]
		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x600189B")]
		[Address(RVA = "0x1012CD0", Offset = "0x1012CD0", VA = "0x1012CD0")]
		public AnimationStateEnterTrigger()
		{
		}
	}
	[Token(Token = "0x2000568")]
	public class AnimationStateExitTrigger : StateMachineBehaviour
	{
		[Token(Token = "0x40021D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string booleanVariableName;

		[Token(Token = "0x600189C")]
		[Address(RVA = "0x1012D20", Offset = "0x1012D20", VA = "0x1012D20", Slot = "6")]
		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x600189D")]
		[Address(RVA = "0x1012D7C", Offset = "0x1012D7C", VA = "0x1012D7C")]
		public AnimationStateExitTrigger()
		{
		}
	}
	[Token(Token = "0x2000569")]
	public abstract class AnimationStateData
	{
		[Token(Token = "0x40021D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public bool isDone;

		[Token(Token = "0x40021DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[HideInInspector]
		public float startTime;

		[Token(Token = "0x40021DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public float timeUntilTimeOut;

		[Token(Token = "0x40021DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public bool hasTimedOut;

		[Token(Token = "0x600189E")]
		public abstract void Play(AnimationStateHandler handler);

		[Token(Token = "0x600189F")]
		public abstract bool IsDone(AnimationStateHandler handler);

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0x1012DCC", Offset = "0x1012DCC", VA = "0x1012DCC")]
		protected AnimationStateData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200056A")]
	public class AnimationLegacyStateData : AnimationStateData
	{
		[Token(Token = "0x40021DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animation animation;

		[Token(Token = "0x40021DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationClip clip;

		[Token(Token = "0x40021DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCallback animationCallback;

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0x1012DD4", Offset = "0x1012DD4", VA = "0x1012DD4", Slot = "4")]
		public override void Play(AnimationStateHandler handler)
		{
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0x1012E34", Offset = "0x1012E34", VA = "0x1012E34", Slot = "5")]
		public override bool IsDone(AnimationStateHandler handler)
		{
			return default(bool);
		}

		[Token(Token = "0x60018A3")]
		[Address(RVA = "0x1012E74", Offset = "0x1012E74", VA = "0x1012E74", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60018A4")]
		[Address(RVA = "0x1013010", Offset = "0x1013010", VA = "0x1013010")]
		public AnimationLegacyStateData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200056B")]
	public class AnimatorStateData : AnimationStateData
	{
		[Token(Token = "0x40021E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator animator;

		[Token(Token = "0x40021E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string trigger;

		[Token(Token = "0x40021E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string endCheck;

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0x1013018", Offset = "0x1013018", VA = "0x1013018", Slot = "4")]
		public override void Play(AnimationStateHandler handler)
		{
		}

		[Token(Token = "0x60018A6")]
		[Address(RVA = "0x101306C", Offset = "0x101306C", VA = "0x101306C", Slot = "5")]
		public override bool IsDone(AnimationStateHandler handler)
		{
			return default(bool);
		}

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0x10130A4", Offset = "0x10130A4", VA = "0x10130A4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0x10132B0", Offset = "0x10132B0", VA = "0x10132B0")]
		public AnimatorStateData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200056C")]
	public class MultiTriggerAnimatorStateData : AnimationStateData
	{
		[Token(Token = "0x40021E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator animator;

		[Token(Token = "0x40021E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<string> triggers;

		[Token(Token = "0x40021E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string endCheck;

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0x1013300", Offset = "0x1013300", VA = "0x1013300", Slot = "4")]
		public override void Play(AnimationStateHandler handler)
		{
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0x10133DC", Offset = "0x10133DC", VA = "0x10133DC", Slot = "5")]
		public override bool IsDone(AnimationStateHandler handler)
		{
			return default(bool);
		}

		[Token(Token = "0x60018AB")]
		[Address(RVA = "0x1013414", Offset = "0x1013414", VA = "0x1013414", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0x10136D8", Offset = "0x10136D8", VA = "0x10136D8")]
		public MultiTriggerAnimatorStateData()
		{
		}
	}
	[Token(Token = "0x200056D")]
	public class AnimationStateHandlerData
	{
		[Token(Token = "0x40021E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<AnimationStateData> startAnimations;

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0x1013728", Offset = "0x1013728", VA = "0x1013728")]
		public void StartAnimations(AnimationStateData animationStateData, float timeUntilTimeOut = 5f)
		{
		}

		[Token(Token = "0x60018AE")]
		[Address(RVA = "0x1000EF0", Offset = "0x1000EF0", VA = "0x1000EF0")]
		public AnimationStateHandlerData()
		{
		}
	}
	[Token(Token = "0x200056E")]
	public class AnimationStateHandler : ITickable
	{
		[Token(Token = "0x40021E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AnimationStateHandlerData animationStateHandlerData;

		[Token(Token = "0x40021E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<AnimationStateData> activeAnimations;

		[Token(Token = "0x60018AF")]
		[Address(RVA = "0x10013E8", Offset = "0x10013E8", VA = "0x10013E8")]
		public AnimationStateHandler(AnimationStateHandlerData animationStateHandlerData)
		{
		}

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0xFFF880", Offset = "0xFFF880", VA = "0xFFF880", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0x1012DE8", Offset = "0x1012DE8", VA = "0x1012DE8")]
		public void Play(AnimationLegacyStateData animationData)
		{
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0x1012E48", Offset = "0x1012E48", VA = "0x1012E48")]
		public bool IsDone(AnimationLegacyStateData animationData)
		{
			return default(bool);
		}

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0x101302C", Offset = "0x101302C", VA = "0x101302C")]
		public void Play(AnimatorStateData animationData)
		{
		}

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0x1013080", Offset = "0x1013080", VA = "0x1013080")]
		public bool IsDone(AnimatorStateData animationData)
		{
			return default(bool);
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0x1013314", Offset = "0x1013314", VA = "0x1013314")]
		public void Play(MultiTriggerAnimatorStateData animationData)
		{
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0x10133F0", Offset = "0x10133F0", VA = "0x10133F0")]
		public bool IsDone(MultiTriggerAnimatorStateData animationData)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200056F")]
	public class ColliderListener : MonoBehaviour
	{
		[Token(Token = "0x40021EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ColliderListenerEventArgs eventArgs;

		[Token(Token = "0x1400001C")]
		public event EventHandler<ColliderListenerEventArgs> OnTriggerEnter_
		{
			[Token(Token = "0x60018B7")]
			[Address(RVA = "0x1013798", Offset = "0x1013798", VA = "0x1013798")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60018B8")]
			[Address(RVA = "0x1013848", Offset = "0x1013848", VA = "0x1013848")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001D")]
		public event EventHandler<ColliderListenerEventArgs> OnTriggerExit_
		{
			[Token(Token = "0x60018B9")]
			[Address(RVA = "0x10138F8", Offset = "0x10138F8", VA = "0x10138F8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60018BA")]
			[Address(RVA = "0x10139A8", Offset = "0x10139A8", VA = "0x10139A8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0x1013A58", Offset = "0x1013A58", VA = "0x1013A58")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0x1013A98", Offset = "0x1013A98", VA = "0x1013A98")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0x1013AD8", Offset = "0x1013AD8", VA = "0x1013AD8")]
		public ColliderListener()
		{
		}
	}
	[Token(Token = "0x2000570")]
	public class ColliderListenerEventArgs : EventArgs
	{
		[Token(Token = "0x40021EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Collider other;

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0x1013B3C", Offset = "0x1013B3C", VA = "0x1013B3C")]
		public ColliderListenerEventArgs()
		{
		}
	}
	[Token(Token = "0x2000571")]
	public readonly struct ErrorMessageRequest
	{
		[Token(Token = "0x40021ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string headerId;

		[Token(Token = "0x40021EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string message;

		[Token(Token = "0x40021EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string buttonId;

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0x1013B94", Offset = "0x1013B94", VA = "0x1013B94")]
		public ErrorMessageRequest(string message, string headerId = "error/error", string buttonId = "menu/okbutton")
		{
		}
	}
	[Token(Token = "0x2000572")]
	public readonly struct ErrorMessageTimeRequest
	{
		[Token(Token = "0x40021F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly ErrorMessageRequest messageRequest;

		[Token(Token = "0x40021F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float time;

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0x1013BA0", Offset = "0x1013BA0", VA = "0x1013BA0")]
		public ErrorMessageTimeRequest(ErrorMessageRequest messageRequest, float time)
		{
		}
	}
	[Token(Token = "0x2000573")]
	public class ErrorMessageData
	{
		[Token(Token = "0x40021F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isShowingError;

		[Token(Token = "0x40021F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<ErrorMessageRequest> errorMessageButtonRequest;

		[Token(Token = "0x40021F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Queue<ErrorMessageTimeRequest> errorMessageTimeRequest;

		[Token(Token = "0x40021F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Queue<ErrorMessageRequest> errorMessageRequest;

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0x1000E0C", Offset = "0x1000E0C", VA = "0x1000E0C")]
		public ErrorMessageData()
		{
		}
	}
	[Token(Token = "0x2000574")]
	public class ErrorMessageViewHandler : ITickable
	{
		[Token(Token = "0x40021F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ErrorMessageData errorMessageData;

		[Token(Token = "0x40021F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MenuStateSettings menuStateSettings;

		[Token(Token = "0x40021F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AnimationStateHandlerData animatorStateData;

		[Token(Token = "0x40021F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameData gameData;

		[Token(Token = "0x40021FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Locale locale;

		[Token(Token = "0x40021FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PopupMessageReference messageReference;

		[Token(Token = "0x40021FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool showingError;

		[Token(Token = "0x40021FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AnimationStateData currentAnimation;

		[Token(Token = "0x40021FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool isOnTimmer;

		[Token(Token = "0x40021FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float activatoinTimeStamp;

		[Token(Token = "0x4002200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float activatoinTime;

		[Token(Token = "0x4002201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x60018C2")]
		[Address(RVA = "0x1013BB8", Offset = "0x1013BB8", VA = "0x1013BB8")]
		public ErrorMessageViewHandler(ErrorMessageData errorMessageData, MenuStateSettings menuStateSettings, AnimationStateHandlerData animatorStateData, GameData gameData, AutoSpectateData autoSpectateData)
		{
		}

		[Token(Token = "0x60018C3")]
		[Address(RVA = "0x1013C48", Offset = "0x1013C48", VA = "0x1013C48")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x60018C4")]
		[Address(RVA = "0x1013DB8", Offset = "0x1013DB8", VA = "0x1013DB8")]
		public void LoadDone()
		{
		}

		[Token(Token = "0x60018C5")]
		[Address(RVA = "0x1013DC0", Offset = "0x1013DC0", VA = "0x1013DC0")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x60018C6")]
		[Address(RVA = "0x1013E34", Offset = "0x1013E34", VA = "0x1013E34")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0x1013E38", Offset = "0x1013E38", VA = "0x1013E38", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0x10141AC", Offset = "0x10141AC", VA = "0x10141AC")]
		private void RotateMenuTowardsPlayer()
		{
		}

		[Token(Token = "0x60018C9")]
		[Address(RVA = "0x1014294", Offset = "0x1014294", VA = "0x1014294")]
		private void CloseMessage()
		{
		}

		[Token(Token = "0x60018CA")]
		[Address(RVA = "0x1014040", Offset = "0x1014040", VA = "0x1014040")]
		private void CheckTimer()
		{
		}

		[Token(Token = "0x60018CB")]
		[Address(RVA = "0x101407C", Offset = "0x101407C", VA = "0x101407C")]
		private void ShowErrorMessage(ErrorMessageRequest errorMessage, bool showButton)
		{
		}
	}
	[Token(Token = "0x2000575")]
	public class FactoryData
	{
		[Token(Token = "0x4002202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool allPoolsAreInitialized;

		[Token(Token = "0x4002203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Dictionary<ToolName, IToolsFactory[]> toolsFactories;

		[Token(Token = "0x4002204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Dictionary<int, IBallisticProjectileFactory> ballisticProjectileFactories;

		[Token(Token = "0x4002205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly Dictionary<int, BarrierSourceFactory> barrierSourceFactories;

		[Token(Token = "0x4002206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly Dictionary<ToolName, ComponentPrefabPool<ToolReferences>> toolReferencePools;

		[Token(Token = "0x4002207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Dictionary<ToolName, ToolSetting> toolSettings;

		[Token(Token = "0x4002208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly Dictionary<int, IProjectileFactory> projectileFactories;

		[Token(Token = "0x4002209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ComponentPrefabPool<ProjectileReference>[] projectileReferencePools;

		[Token(Token = "0x400220A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ComponentPrefabPool<SphereColliderReference> sphereColliderReferencePools;

		[Token(Token = "0x400220B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ComponentPrefabPool<BoxColliderReference> boxColliderReferencePool;

		[Token(Token = "0x400220C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ComponentPrefabPool<DoubleBoxColliderReference> doubleBoxColliderReferencePool;

		[Token(Token = "0x400220D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BaseProjectileSettings[] projectileSettings;

		[Token(Token = "0x400220E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public readonly Dictionary<ToolSet, string[]> toolAttributeLookup;

		[Token(Token = "0x400220F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool shouldFinishInitialization;

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0x10142B0", Offset = "0x10142B0", VA = "0x10142B0")]
		public FactoryData()
		{
		}
	}
	[Token(Token = "0x2000576")]
	public class FactoryDirector : ITickable
	{
		[Token(Token = "0x4002210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly FactoryData factoryData;

		[Token(Token = "0x4002211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Transform parentTransform;

		[Token(Token = "0x4002212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4002213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4002214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GameData gameData;

		[Token(Token = "0x4002215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly OwnershipHelper ownershipHelper;

		[Token(Token = "0x4002216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ParticleEffectData particleEffectData;

		[Token(Token = "0x4002217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly BallisticAirHandlerData ballisticAirHandlerData;

		[Token(Token = "0x4002218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly TimeHandlerData timeHandlerData;

		[Token(Token = "0x4002219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly ToolInitializationUtility toolInitializationUtility;

		[Token(Token = "0x400221A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x400221B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly ImpactHandlerData impactHandlerData;

		[Token(Token = "0x400221C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly EffectTriggerAssigner effectTriggerAssigner;

		[Token(Token = "0x400221D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly EventTriggerModuleFactory eventTriggerModuleFactory;

		[Token(Token = "0x400221E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly CSharpObjectPool<GenericProjectileTool> straightProjectileToolPool;

		[Token(Token = "0x400221F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly CSharpObjectPool<ShieldTool> shieldToolPool;

		[Token(Token = "0x4002220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly CSharpObjectPool<TetherProjectileSpeedTool> tetherToolPool;

		[Token(Token = "0x4002221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly CSharpObjectPool<BarrierShieldTool> barrierShieldToolPool;

		[Token(Token = "0x4002222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly CSharpObjectPool<GrenadeTool> grenadeToolPool;

		[Token(Token = "0x4002223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly CSharpObjectPool<ThrowableTool> throwableToolPool;

		[Token(Token = "0x4002224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4002225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly CSharpObjectPool<BarrierSource> barrierSourcePool;

		[Token(Token = "0x4002226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly CSharpObjectPool<LaserSource> laserSourcePool;

		[Token(Token = "0x4002227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly CSharpObjectPool<BulletProjectile> bulletProjectilePool;

		[Token(Token = "0x4002228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly CSharpObjectPool<TimedProjectile> timedProjectilePool;

		[Token(Token = "0x4002229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly CSharpObjectPool<ExplodeOnImpactProjectile> explodeOnImpactProjectilePool;

		[Token(Token = "0x400222A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly CSharpObjectPool<AreaOfEffectProjectile> areaOfEffectProjectilePool;

		[Token(Token = "0x400222B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int numToolAttributes;

		[Token(Token = "0x400222C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private ComponentPrefabPool<ToolReferences>[] toolReferencePools;

		[Token(Token = "0x400222D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float timeSpentInitialingPoolsThisFrame;

		[Token(Token = "0x400222E")]
		private const float MaxTimeSpentOnInstantiation = 0.001f;

		[Token(Token = "0x60018CD")]
		[Address(RVA = "0x10144C4", Offset = "0x10144C4", VA = "0x10144C4")]
		public FactoryDirector(FactoryData factoryData, Transform parentTransform, MessageSender messageSender, GameMessageFactory gameMessageFactory, NetworkIdAllocator networkIdAllocator, GameData gameData, OwnershipHelper ownershipHelper, IgnisSoundTriggerData soundTriggerData, ParticleEffectData particleEffectData, BallisticAirHandlerData ballisticAirHandlerData, TimeHandlerData timeHandlerData, ToolInitializationUtility toolInitializationUtility, DamageRecordKeeper damageRecordKeeper, ImpactHandlerData impactHandlerData, IRoomTimeProvider timeProvider, EffectTriggerAssigner effectTriggerAssigner, EventTriggerModuleFactory eventTriggerModuleFactory, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x60018CE")]
		[Address(RVA = "0x1014EDC", Offset = "0x1014EDC", VA = "0x1014EDC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60018CF")]
		private bool AsyncInitializationOfPool<T>(ComponentPrefabPool<T> pool, float startTimeStamp) where T : MonoBehaviour
		{
			return default(bool);
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0x1015158", Offset = "0x1015158", VA = "0x1015158")]
		public void CreatePoolsAndFactories(Transform poolTransform, ToolDefinitionSettings toolDefinitionSettings)
		{
		}

		[Token(Token = "0x60018D1")]
		[Address(RVA = "0x1015580", Offset = "0x1015580", VA = "0x1015580")]
		private int AddToolDefinitions(ComponentPrefabPool<ToolReferences>[] referencePool, ToolSettingsData[] toolDefinitions, Transform poolTransform, int index)
		{
			return default(int);
		}

		[Token(Token = "0x60018D2")]
		[Address(RVA = "0x1015848", Offset = "0x1015848", VA = "0x1015848")]
		private void CreateToolFactory(ToolSet toolSet, int attachmentIndex, ToolSetting toolSettings, ComponentPrefabPool<ToolReferences> referencePool)
		{
		}

		[Token(Token = "0x60018D3")]
		[Address(RVA = "0x101679C", Offset = "0x101679C", VA = "0x101679C")]
		private void CreateBallisticFactory(BaseProjectileSettings baseProjectileSettings, string[] attributes)
		{
		}

		[Token(Token = "0x60018D4")]
		[Address(RVA = "0x1017A48", Offset = "0x1017A48", VA = "0x1017A48")]
		public void TrackPoolUsage(string occasion, string matchId, int round)
		{
		}

		[Token(Token = "0x60018D5")]
		[Address(RVA = "0x10175C4", Offset = "0x10175C4", VA = "0x10175C4")]
		private void AssignAttributes(string[] attributes, BulletProjectileSettings settings)
		{
		}

		[Token(Token = "0x60018D6")]
		[Address(RVA = "0x10177E4", Offset = "0x10177E4", VA = "0x10177E4")]
		private void AssignAttributes(string[] attributes, TimedProjectileSettings settings)
		{
		}

		[Token(Token = "0x60018D7")]
		[Address(RVA = "0x10176CC", Offset = "0x10176CC", VA = "0x10176CC")]
		private void AssignAttributes(string[] attributes, AreaOffEffectProjectileSettings settings)
		{
		}

		[Token(Token = "0x60018D8")]
		[Address(RVA = "0x10178EC", Offset = "0x10178EC", VA = "0x10178EC")]
		private void AssignAttributes(string[] attributes, LaserSourceSettings settings)
		{
		}

		[Token(Token = "0x60018D9")]
		[Address(RVA = "0x1016674", Offset = "0x1016674", VA = "0x1016674")]
		private void AssignAttributes(string[] attributes, FireableSettings settings)
		{
		}

		[Token(Token = "0x60018DA")]
		[Address(RVA = "0x10174E4", Offset = "0x10174E4", VA = "0x10174E4")]
		private void AssignAttributes(string[] attributes, StraightProjectileSetting settings)
		{
		}

		[Token(Token = "0x60018DB")]
		[Address(RVA = "0x101733C", Offset = "0x101733C", VA = "0x101733C")]
		private void AssignAttributes(string[] attributes, GranadeToolSettings settings)
		{
		}

		[Token(Token = "0x60018DC")]
		[Address(RVA = "0x1017438", Offset = "0x1017438", VA = "0x1017438")]
		private void AssignAttributes(string[] attributes, CurveProjectileSettings settings)
		{
		}

		[Token(Token = "0x60018DD")]
		[Address(RVA = "0x1016FE0", Offset = "0x1016FE0", VA = "0x1016FE0")]
		private void AssignAttributes(string[] attributes, ForceFieldSettings settings)
		{
		}

		[Token(Token = "0x60018DE")]
		[Address(RVA = "0x101714C", Offset = "0x101714C", VA = "0x101714C")]
		private void AssignAttributes(string[] attributes, TetherHandlerSettings settings)
		{
		}

		[Token(Token = "0x60018DF")]
		[Address(RVA = "0x1017230", Offset = "0x1017230", VA = "0x1017230")]
		private void AssignAttributes(string[] attributes, TetherStraightProjectileSetting settings)
		{
		}

		[Token(Token = "0x60018E0")]
		[Address(RVA = "0x1016520", Offset = "0x1016520", VA = "0x1016520")]
		private void AssignAttributes(string[] attributes, ToolSetting settings)
		{
		}

		[Token(Token = "0x60018E1")]
		[Address(RVA = "0x1016444", Offset = "0x1016444", VA = "0x1016444")]
		private string[] CreateAttributeTextArray()
		{
			return null;
		}
	}
	[Token(Token = "0x2000579")]
	public class FeaturePermissionData
	{
		[Token(Token = "0x400223E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isVoiceAllowed;

		[Token(Token = "0x400223F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool isShowingPermissionRequest;

		[Token(Token = "0x4002240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<RequestPermission> requestPermissions;

		[Token(Token = "0x60018F1")]
		[Address(RVA = "0x1018914", Offset = "0x1018914", VA = "0x1018914")]
		public FeaturePermissionData()
		{
		}
	}
	[Token(Token = "0x200057A")]
	public struct RequestPermission
	{
		[Token(Token = "0x4002241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool activate;

		[Token(Token = "0x4002242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public readonly bool showPopup;

		[Token(Token = "0x60018F2")]
		[Address(RVA = "0x1018994", Offset = "0x1018994", VA = "0x1018994")]
		public RequestPermission(bool activate, bool showPopup)
		{
		}
	}
	[Token(Token = "0x200057B")]
	public class FeaturePermissionHandler : ITickable
	{
		[Token(Token = "0x4002243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly FeaturePermissionData featurePermissionData;

		[Token(Token = "0x4002244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4002246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4002247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PermissionRequestReference permissionRequestReference;

		[Token(Token = "0x4002248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool showView;

		[Token(Token = "0x60018F3")]
		[Address(RVA = "0x10189A8", Offset = "0x10189A8", VA = "0x10189A8")]
		public FeaturePermissionHandler(FeaturePermissionData featurePermissionData, MenuStateData menuStateData, LocalPersistentData localPersistentData, PersistantDataUtility persistantDataUtility)
		{
		}

		[Token(Token = "0x60018F4")]
		[Address(RVA = "0x10189E8", Offset = "0x10189E8", VA = "0x10189E8")]
		public void Initialize(MenuStateSettings settings)
		{
		}

		[Token(Token = "0x60018F5")]
		[Address(RVA = "0x1018C38", Offset = "0x1018C38", VA = "0x1018C38")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x60018F6")]
		[Address(RVA = "0x1018C8C", Offset = "0x1018C8C", VA = "0x1018C8C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0x1018D58", Offset = "0x1018D58", VA = "0x1018D58")]
		private void RequestPermission(RequestPermission request)
		{
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0x1018E8C", Offset = "0x1018E8C", VA = "0x1018E8C")]
		private void DeniedRequest()
		{
		}

		[Token(Token = "0x60018F9")]
		[Address(RVA = "0x1018DF0", Offset = "0x1018DF0", VA = "0x1018DF0")]
		private void AllowRequest()
		{
		}

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0x1018F1C", Offset = "0x1018F1C", VA = "0x1018F1C")]
		public void OnPauseApplication()
		{
		}

		[Token(Token = "0x60018FB")]
		[Address(RVA = "0x1018B70", Offset = "0x1018B70", VA = "0x1018B70")]
		private void UpdatePermission()
		{
		}

		[Token(Token = "0x60018FC")]
		[Address(RVA = "0x1018F14", Offset = "0x1018F14", VA = "0x1018F14")]
		private void Close()
		{
		}
	}
	[Token(Token = "0x200057C")]
	public interface IGameMechanicStateHelper
	{
		[Token(Token = "0x60018FD")]
		void Initialize(GameplayRules gameplayRules);

		[Token(Token = "0x60018FE")]
		void Restart();

		[Token(Token = "0x60018FF")]
		void CleanUpMatch(float endRoundTimestamp);
	}
	[Token(Token = "0x200057D")]
	public class GameMechanicStateHelper : ITickable, IGameMechanicStateHelper
	{
		[Token(Token = "0x4002249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly CooldownHandler cooldownHandler;

		[Token(Token = "0x400224A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ToolRecycleHandler toolRecycleHandler;

		[Token(Token = "0x400224B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ProjectileRecycleHandler projectileRecycleHandler;

		[Token(Token = "0x400224C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly LaserHandler laserHandler;

		[Token(Token = "0x400224D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ToolGrabHandler toolGrabHandler;

		[Token(Token = "0x400224E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PlayerGrabHandler playerGrabHandler;

		[Token(Token = "0x400224F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameMessageHandler gameMessageHandler;

		[Token(Token = "0x4002250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly PlayerTriggerHandler playerTriggerHandler;

		[Token(Token = "0x4002251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly IgnisSoundTriggerHandler ignisSoundTriggerHandler;

		[Token(Token = "0x4002252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x4002253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly BarrierShieldToolHandler barrierShieldToolHandler;

		[Token(Token = "0x4002254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly BarrierSourceHandler barrierSourceHandler;

		[Token(Token = "0x4002255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly PlayerHUDHandler playerHudHandler;

		[Token(Token = "0x4002256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly PlayerHealthHandler playerHealthHandler;

		[Token(Token = "0x4002257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly PlayerSpawnHandler playerSpawnHandler;

		[Token(Token = "0x4002258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly PlayerMovementHandler playerMovementHandler;

		[Token(Token = "0x4002259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly DamageOverTimeData damageOverTimeData;

		[Token(Token = "0x400225A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly HapticData hapticData;

		[Token(Token = "0x400225B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly RecycleData recycleData;

		[Token(Token = "0x400225C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly TetherToolHandler tetherToolHandler;

		[Token(Token = "0x400225D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly CharacterData characterData;

		[Token(Token = "0x400225E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly EmotePlaybackHandler botEmotePlaybackHandler;

		[Token(Token = "0x400225F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly ImpactHandlerData impactHandlerData;

		[Token(Token = "0x4002260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly ScoreBoardViewHandler scoreBoardViewHandler;

		[Token(Token = "0x4002261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly GameData gameData;

		[Token(Token = "0x6001900")]
		[Address(RVA = "0x1018F20", Offset = "0x1018F20", VA = "0x1018F20")]
		public GameMechanicStateHelper(CooldownHandler cooldownHandler, GameData gameData, ToolRecycleHandler toolRecycleHandler, ProjectileRecycleHandler projectileRecycleHandler, LaserHandler laserHandler, ToolGrabHandler toolGrabHandler, PlayerGrabHandler playerGrabHandler, GameMessageHandler gameMessageHandler, PlayerTriggerHandler playerTriggerHandler, IgnisSoundTriggerHandler ignisSoundTriggerHandler, DamageRecordKeeper damageRecordKeeper, BarrierShieldToolHandler barrierShieldToolHandler, BarrierSourceHandler barrierSourceHandler, PlayerHUDHandler playerHudHandler, PlayerHealthHandler playerHealthHandler, PlayerSpawnHandler playerSpawnHandler, PlayerMovementHandler playerMovementHandler, DamageOverTimeData damageOverTimeData, HapticData hapticData, RecycleData recycleData, TetherToolHandler tetherToolHandler, CharacterData characterData, EmotePlaybackHandler botEmotePlaybackHandler, ImpactHandlerData impactHandlerData, ScoreBoardViewHandler scoreBoardViewHandler)
		{
		}

		[Token(Token = "0x6001901")]
		[Address(RVA = "0x101901C", Offset = "0x101901C", VA = "0x101901C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001902")]
		[Address(RVA = "0x10190F0", Offset = "0x10190F0", VA = "0x10190F0", Slot = "5")]
		public void Initialize(GameplayRules gameplayRules)
		{
		}

		[Token(Token = "0x6001903")]
		[Address(RVA = "0x10192F4", Offset = "0x10192F4", VA = "0x10192F4")]
		public void CleanUpRound(float endRoundTimeStamp)
		{
		}

		[Token(Token = "0x6001904")]
		[Address(RVA = "0x1019504", Offset = "0x1019504", VA = "0x1019504", Slot = "6")]
		public void Restart()
		{
		}

		[Token(Token = "0x6001905")]
		[Address(RVA = "0x1019520", Offset = "0x1019520", VA = "0x1019520", Slot = "7")]
		public void CleanUpMatch(float endRoundTimestamp)
		{
		}

		[Token(Token = "0x6001906")]
		[Address(RVA = "0x10191B8", Offset = "0x10191B8", VA = "0x10191B8")]
		private void CleanUpDamageOverTime(string reason)
		{
		}
	}
	[Token(Token = "0x200057E")]
	public interface IHealth
	{
		[Token(Token = "0x17000102")]
		float ActiveDotDamage
		{
			[Token(Token = "0x600190C")]
			get;
			[Token(Token = "0x600190D")]
			set;
		}

		[Token(Token = "0x17000103")]
		float ActiveDotDamageLagCompensation
		{
			[Token(Token = "0x600190E")]
			get;
			[Token(Token = "0x600190F")]
			set;
		}

		[Token(Token = "0x6001907")]
		bool IsDead();

		[Token(Token = "0x6001908")]
		bool IsDestroyed();

		[Token(Token = "0x6001909")]
		float CurrentHealth();

		[Token(Token = "0x600190A")]
		float CurrentHealthWithLagCompensation();

		[Token(Token = "0x600190B")]
		void Damage(float damage);
	}
	[Token(Token = "0x200057F")]
	public class SaveData
	{
		[Token(Token = "0x6001910")]
		[Address(RVA = "0x10199F0", Offset = "0x10199F0", VA = "0x10199F0")]
		public SaveData()
		{
		}
	}
	[Token(Token = "0x2000580")]
	public class LocalPersistentData : SaveData
	{
		[Token(Token = "0x4002262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string version;

		[Token(Token = "0x4002263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string setLocale;

		[Token(Token = "0x4002264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float masterVolume;

		[Token(Token = "0x4002265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float musicVolume;

		[Token(Token = "0x4002266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float effectVolume;

		[Token(Token = "0x4002267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float voiceVolume;

		[Token(Token = "0x4002268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool mute;

		[Token(Token = "0x4002269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool haptic;

		[Token(Token = "0x400226A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int lastSeenLevel;

		[Token(Token = "0x400226B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string lastSeenNewsId;

		[Token(Token = "0x400226C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool hasSeenMicrophonePermission;

		[Token(Token = "0x400226D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool allowedMicrophonePermission;

		[Token(Token = "0x400226E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool gdprAccepted;

		[Token(Token = "0x400226F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<string> unconfirmedOrderIds;

		[Token(Token = "0x4002270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool showPlayerOnLiv;

		[Token(Token = "0x4002271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool bhapticsEnabled;

		[Token(Token = "0x4002272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool hasSeenOnboardingInfo_v2;

		[Token(Token = "0x4002273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool passthroughEnabled;

		[Token(Token = "0x4002274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool argentiaClaimed;

		[Token(Token = "0x4002275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int resolution;

		[Token(Token = "0x4002276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int displayMode;

		[Token(Token = "0x6001911")]
		[Address(RVA = "0x10199F8", Offset = "0x10199F8", VA = "0x10199F8")]
		public LocalPersistentData()
		{
		}
	}
	[Token(Token = "0x2000581")]
	public class PersistentPlatformData : SaveData
	{
		[Token(Token = "0x4002277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string version;

		[Token(Token = "0x4002278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Quaternion steamRotationOffset;

		[Token(Token = "0x4002279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandOffset handOffsetState;

		[Token(Token = "0x400227A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 handRotationOffset;

		[Token(Token = "0x400227B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 handPositionOffset;

		[Token(Token = "0x6001912")]
		[Address(RVA = "0x1019ACC", Offset = "0x1019ACC", VA = "0x1019ACC")]
		public PersistentPlatformData()
		{
		}
	}
	[Token(Token = "0x2000582")]
	public class PermissionRequestReference : MonoBehaviour
	{
		[Token(Token = "0x400227C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button allowRequest;

		[Token(Token = "0x400227D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button deniedRequest;

		[Token(Token = "0x400227E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Canvas canvas;

		[Token(Token = "0x400227F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Collider boxCollider;

		[Token(Token = "0x6001914")]
		[Address(RVA = "0x1019BD4", Offset = "0x1019BD4", VA = "0x1019BD4")]
		public PermissionRequestReference()
		{
		}
	}
	[Token(Token = "0x2000583")]
	public readonly struct SaveToLoad
	{
		[Token(Token = "0x4002280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string key;

		[Token(Token = "0x4002281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly SaveData saveData;

		[Token(Token = "0x6001915")]
		[Address(RVA = "0x1019BDC", Offset = "0x1019BDC", VA = "0x1019BDC")]
		public SaveToLoad(string key, SaveData saveData)
		{
		}
	}
	[Token(Token = "0x2000584")]
	public class PersistantDataUtility : ITickable
	{
		[Token(Token = "0x4002282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlatformLoginData loginData;

		[Token(Token = "0x4002283")]
		public const string PersistentPrefKey = "IgnisGameData";

		[Token(Token = "0x4002284")]
		public const string PlatformPrefKey = "IgnisPlatformData";

		[Token(Token = "0x4002285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string userKey;

		[Token(Token = "0x4002286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<SaveToLoad> savesToLoad;

		[Token(Token = "0x6001916")]
		[Address(RVA = "0x1019BE4", Offset = "0x1019BE4", VA = "0x1019BE4")]
		public PersistantDataUtility(PlatformLoginData loginData)
		{
		}

		[Token(Token = "0x6001917")]
		[Address(RVA = "0x1019C74", Offset = "0x1019C74", VA = "0x1019C74")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001918")]
		[Address(RVA = "0x1019C78", Offset = "0x1019C78", VA = "0x1019C78")]
		private void ClearSave()
		{
		}

		[Token(Token = "0x6001919")]
		[Address(RVA = "0x1019D54", Offset = "0x1019D54", VA = "0x1019D54")]
		public bool HasLoadedData()
		{
			return default(bool);
		}

		[Token(Token = "0x600191A")]
		[Address(RVA = "0x1019D64", Offset = "0x1019D64", VA = "0x1019D64")]
		private void SeUserKeyAndLoad(string userKey)
		{
		}

		[Token(Token = "0x600191B")]
		public T Load<T>(T toLoad, string key) where T : SaveData
		{
			return null;
		}

		[Token(Token = "0x600191C")]
		private bool TryLoad<T>(T serialize, string key) where T : SaveData
		{
			return default(bool);
		}

		[Token(Token = "0x600191D")]
		private bool TryLoadFromOldPrefSave<T>(T serialize, string key)
		{
			return default(bool);
		}

		[Token(Token = "0x600191E")]
		public void Save<T>(T deserialized, string key) where T : SaveData
		{
		}

		[Token(Token = "0x600191F")]
		private bool TrySave<T>(T deserialized, string key) where T : SaveData
		{
			return default(bool);
		}

		[Token(Token = "0x6001920")]
		[Address(RVA = "0x1019CF8", Offset = "0x1019CF8", VA = "0x1019CF8")]
		private string CreatSaveKey(string saveKey)
		{
			return null;
		}

		[Token(Token = "0x6001921")]
		[Address(RVA = "0x1019E20", Offset = "0x1019E20", VA = "0x1019E20", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000585")]
	public class EnvironmentSceneData
	{
		[Token(Token = "0x4002287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public bool isAvailable;

		[Token(Token = "0x4002288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ColliderListener environmentCollider;

		[Token(Token = "0x4002289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlatformReference playerOnePlatform;

		[Token(Token = "0x400228A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlatformReference playerTwoPlatform;

		[Token(Token = "0x400228B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform playerOnePlatformCollider;

		[Token(Token = "0x400228C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform playerTwoPlatformCollider;

		[Token(Token = "0x400228D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CrowdReference crowdReference;

		[Token(Token = "0x400228E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BannerReference[] playerOneBanners;

		[Token(Token = "0x400228F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public BannerReference[] playerTwoBanners;

		[Token(Token = "0x4002290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public PlayableDirector playableDirector;

		[Token(Token = "0x4002291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject[] disableObjectsOnPassthrough;

		[Token(Token = "0x4002292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FogData fogData;

		[Token(Token = "0x4002293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Optional")]
		public ColliderListener waterCollider;

		[Token(Token = "0x4002294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public BarEntranceReference barEntranceReference;

		[Token(Token = "0x6001922")]
		[Address(RVA = "0x1019E68", Offset = "0x1019E68", VA = "0x1019E68")]
		public EnvironmentSceneData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000586")]
	public class FogData
	{
		[Token(Token = "0x4002295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color color;

		[Token(Token = "0x4002296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FogMode mode;

		[Token(Token = "0x4002297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float density;

		[Token(Token = "0x4002298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float linearFogStart;

		[Token(Token = "0x4002299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float linearFogEnd;

		[Token(Token = "0x6001923")]
		[Address(RVA = "0x1019ED8", Offset = "0x1019ED8", VA = "0x1019ED8")]
		public FogData()
		{
		}
	}
	[Token(Token = "0x2000587")]
	public static class EnvironmentCrossSceneData
	{
		[Token(Token = "0x400229A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Queue<EnvironmentSceneData> SceneData;
	}
	[Token(Token = "0x2000588")]
	public struct SceneLoadData
	{
		[Token(Token = "0x400229B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string sceneToLoad;

		[Token(Token = "0x400229C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int sceneLookUpIndex;

		[Token(Token = "0x400229D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ISceneHandleFacade asyncHandle;

		[Token(Token = "0x400229E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SceneLoadState sceneLoadState;

		[Token(Token = "0x400229F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool activate;

		[Token(Token = "0x40022A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int sceneType;

		[Token(Token = "0x40022A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float timeStamp;

		[Token(Token = "0x40022A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool fadeOut;

		[Token(Token = "0x6001925")]
		[Address(RVA = "0x1019F78", Offset = "0x1019F78", VA = "0x1019F78")]
		public SceneLoadData(string sceneToLoad, int sceneLookUpIndex, SceneLoadState sceneLoadState, bool activate, int sceneType, float timeStamp, bool fadeOut, ISceneHandleFacade sceneHandle)
		{
		}
	}
	[Token(Token = "0x2000589")]
	public enum SceneLoadState
	{
		[Token(Token = "0x40022A4")]
		Idle,
		[Token(Token = "0x40022A5")]
		Loading,
		[Token(Token = "0x40022A6")]
		WaitingForActivation,
		[Token(Token = "0x40022A7")]
		Unloading,
		[Token(Token = "0x40022A8")]
		IsUnloaded
	}
	[Token(Token = "0x200058A")]
	public enum SceneMap
	{
		[Token(Token = "0x40022AA")]
		Main,
		[Token(Token = "0x40022AB")]
		Environment
	}
	[Token(Token = "0x200058B")]
	public readonly struct SceneRequest
	{
		[Token(Token = "0x40022AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int sceneTyp;

		[Token(Token = "0x40022AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int sceneIndex;

		[Token(Token = "0x40022AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string sceneName;

		[Token(Token = "0x40022AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool activate;

		[Token(Token = "0x40022B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public readonly bool fadeOut;

		[Token(Token = "0x6001926")]
		[Address(RVA = "0x1019FA4", Offset = "0x1019FA4", VA = "0x1019FA4")]
		public SceneRequest(SceneMap sceneMap, int sceneIndex, bool activate = true, bool fadeOut = true)
		{
		}

		[Token(Token = "0x6001927")]
		[Address(RVA = "0x101A018", Offset = "0x101A018", VA = "0x101A018")]
		public SceneRequest(int sceneTyp, string sceneName, bool activate = true, bool fadeOut = false)
		{
		}
	}
	[Token(Token = "0x200058C")]
	public interface ISceneHandleFacade
	{
		[Token(Token = "0x6001928")]
		void ActivateSceneAsync();

		[Token(Token = "0x6001929")]
		bool IsDone();

		[Token(Token = "0x600192A")]
		AsyncOperationHandle<SceneInstance> GetSceneInstance();
	}
	[Token(Token = "0x200058D")]
	public interface ISceneLoaderFacade
	{
		[Token(Token = "0x600192B")]
		ISceneHandleFacade UnloadSceneAsync(ISceneHandleFacade sceneHandleFacade);

		[Token(Token = "0x600192C")]
		ISceneHandleFacade LoadSceneAsync(string sceneHandleFacade, LoadSceneMode additive, bool requestActivate);
	}
	[Token(Token = "0x200058E")]
	public class SceneHandlerData
	{
		[Token(Token = "0x40022B1")]
		public const int HOME_ROOM_INDEX = 0;

		[Token(Token = "0x40022B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int currentSceneIndex;

		[Token(Token = "0x40022B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string currentSceneName;

		[Token(Token = "0x40022B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Queue<SceneRequest> loadSceneRequest;

		[Token(Token = "0x40022B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly Queue<SceneRequest> unloadSceneRequest;

		[Token(Token = "0x600192D")]
		[Address(RVA = "0x101A038", Offset = "0x101A038", VA = "0x101A038")]
		public SceneHandlerData()
		{
		}
	}
	[Token(Token = "0x200058F")]
	public class SceneHandler : ITickable
	{
		[Token(Token = "0x40022B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly EnvironmentSceneData environmentSceneData;

		[Token(Token = "0x40022B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly SceneHandlerData sceneHandlerData;

		[Token(Token = "0x40022B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly SceneHandlerSettings sceneHandlerSettings;

		[Token(Token = "0x40022B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly CameraFadeData cameraFadeData;

		[Token(Token = "0x40022BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ISceneLoaderFacade sceneLoader;

		[Token(Token = "0x40022BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x40022BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly List<SceneLoadData> sceneLoadData;

		[Token(Token = "0x40022BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly Dictionary<int, SceneLoadData> sceneLookUp;

		[Token(Token = "0x40022BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ProfilerMarker tickProfilerMarker;

		[Token(Token = "0x40022BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool loadDataAsyncHandleIsDone;

		[Token(Token = "0x600192E")]
		[Address(RVA = "0x101A0E8", Offset = "0x101A0E8", VA = "0x101A0E8")]
		public SceneHandler(EnvironmentSceneData environmentSceneData, SceneHandlerData sceneHandlerData, SceneHandlerSettings sceneHandlerSettings, CameraFadeData cameraFadeData, ISceneLoaderFacade sceneLoader, IgnisSoundTriggerData ignisSoundTriggerData)
		{
		}

		[Token(Token = "0x600192F")]
		[Address(RVA = "0x101A220", Offset = "0x101A220", VA = "0x101A220")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001930")]
		[Address(RVA = "0x101A438", Offset = "0x101A438", VA = "0x101A438", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001931")]
		[Address(RVA = "0x101A76C", Offset = "0x101A76C", VA = "0x101A76C")]
		private void AssignEnvironmentSceneData(EnvironmentSceneData data)
		{
		}

		[Token(Token = "0x6001932")]
		[Address(RVA = "0x101A7D0", Offset = "0x101A7D0", VA = "0x101A7D0")]
		private void RequestSceneLoad(SceneRequest request)
		{
		}

		[Token(Token = "0x6001933")]
		[Address(RVA = "0x101B388", Offset = "0x101B388", VA = "0x101B388")]
		private void LoadScene(SceneRequest request)
		{
		}

		[Token(Token = "0x6001934")]
		[Address(RVA = "0x101AB80", Offset = "0x101AB80", VA = "0x101AB80")]
		private void RequestSceneUnload(SceneRequest request)
		{
		}

		[Token(Token = "0x6001935")]
		[Address(RVA = "0x101B0A0", Offset = "0x101B0A0", VA = "0x101B0A0")]
		private bool IsTheSameScene(SceneLoadData loadData, SceneRequest sceneRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6001936")]
		[Address(RVA = "0x101B95C", Offset = "0x101B95C", VA = "0x101B95C")]
		private string GetSceneName(string name, int index)
		{
			return null;
		}

		[Token(Token = "0x6001937")]
		[Address(RVA = "0x101B0CC", Offset = "0x101B0CC", VA = "0x101B0CC")]
		private void ApplySettingsForActivatedScene(SceneLoadData data)
		{
		}

		[Token(Token = "0x6001938")]
		[Address(RVA = "0x101B164", Offset = "0x101B164", VA = "0x101B164")]
		private void UnloadScene(SceneLoadData sceneData)
		{
		}

		[Token(Token = "0x6001939")]
		[Address(RVA = "0x101AC9C", Offset = "0x101AC9C", VA = "0x101AC9C")]
		private bool UpdateSceneLoadState(SceneLoadData loadData)
		{
			return default(bool);
		}

		[Token(Token = "0x600193A")]
		[Address(RVA = "0x101AF28", Offset = "0x101AF28", VA = "0x101AF28")]
		private bool UpdateUnloadSceneState(SceneLoadData loadData)
		{
			return default(bool);
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0x101B788", Offset = "0x101B788", VA = "0x101B788")]
		private void ChangeLoadState(int id, string sceneName, SceneLoadState newState, float time)
		{
		}
	}
	[Token(Token = "0x2000590")]
	public enum SceneId
	{
		[Token(Token = "0x40022C1")]
		None,
		[Token(Token = "0x40022C2")]
		homeLanding,
		[Token(Token = "0x40022C3")]
		abandonedTheater,
		[Token(Token = "0x40022C4")]
		backAlley,
		[Token(Token = "0x40022C5")]
		desertShootout,
		[Token(Token = "0x40022C6")]
		emptyRoomAutoSpectator,
		[Token(Token = "0x40022C7")]
		winterClassic,
		[Token(Token = "0x40022C8")]
		desertClassic,
		[Token(Token = "0x40022C9")]
		scrapperStreetClassic,
		[Token(Token = "0x40022CA")]
		scrappersStreetShootout
	}
	[Serializable]
	[Token(Token = "0x2000591")]
	public struct SceneSettings
	{
		[Token(Token = "0x40022CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SceneId sceneId;

		[Token(Token = "0x40022CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[FormerlySerializedAs("sceneId")]
		public string sceneName;

		[Token(Token = "0x40022CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Header("Trailer Settings")]
		public string postProcessingSceneName;

		[Token(Token = "0x40022CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("FogSettings")]
		public Color fogColor;

		[Token(Token = "0x40022CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fogDensity;
	}
	[Token(Token = "0x2000592")]
	[CreateAssetMenu(menuName = "Settings/SceneHandlerSettings", fileName = "SceneHandlerSettings")]
	public class SceneHandlerSettings : ScriptableObject
	{
		[Token(Token = "0x40022D0")]
		private const string abandonedTheater = "abandonedTheater";

		[Token(Token = "0x40022D1")]
		private const string desertShootout = "desertShootout";

		[Token(Token = "0x40022D2")]
		private const string backAlley = "backAlley";

		[Token(Token = "0x40022D3")]
		private const string homeLanding = "homeLanding";

		[Token(Token = "0x40022D4")]
		private const string emptyRoomAutoSpectator = "emptyRoomAutoSpectator";

		[Token(Token = "0x40022D5")]
		private const string winterClassic = "winterClassic";

		[Token(Token = "0x40022D6")]
		private const string desertClassic = "desertClassic";

		[Token(Token = "0x40022D7")]
		private const string scrapperStreetClassic = "scrapperStreetClassic";

		[Token(Token = "0x40022D8")]
		private const string scrappersStreetShootout = "scrappersStreetShootout";

		[Token(Token = "0x40022D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SceneSettings[] sceneSettings;

		[Token(Token = "0x600193C")]
		[Address(RVA = "0x101A36C", Offset = "0x101A36C", VA = "0x101A36C")]
		public static string GetSceneBundleName(SceneId sceneId)
		{
			return null;
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0x101B9AC", Offset = "0x101B9AC", VA = "0x101B9AC")]
		public static SceneId GetSceneId(string sceneName)
		{
			return default(SceneId);
		}

		[Token(Token = "0x600193E")]
		[Address(RVA = "0x101BC58", Offset = "0x101BC58", VA = "0x101BC58")]
		public int GetSceneIndex(string sceneName)
		{
			return default(int);
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0x101BCD8", Offset = "0x101BCD8", VA = "0x101BCD8")]
		public string GetPostProcessingScene(int arenaSceneIndex)
		{
			return null;
		}

		[Token(Token = "0x6001940")]
		[Address(RVA = "0x101BD0C", Offset = "0x101BD0C", VA = "0x101BD0C")]
		public SceneHandlerSettings()
		{
		}
	}
	[Token(Token = "0x2000593")]
	public static class GlobalData
	{
		[Token(Token = "0x40022DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int fixedFrameCount;
	}
	[Token(Token = "0x2000594")]
	public interface IGameState
	{
		[Token(Token = "0x6001941")]
		void Initalize();

		[Token(Token = "0x6001942")]
		void PreTick();

		[Token(Token = "0x6001943")]
		EntryPoint.GameState Tick();

		[Token(Token = "0x6001944")]
		void PostTick();

		[Token(Token = "0x6001945")]
		void LateTick();

		[Token(Token = "0x6001946")]
		void FixedTick();

		[Token(Token = "0x6001947")]
		void OnApplicationPause(bool isPaused);

		[Token(Token = "0x6001948")]
		void Terminate();
	}
	[Token(Token = "0x2000595")]
	public class EnvironmentHandler : ITickable
	{
		[Token(Token = "0x40022DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x40022DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x40022DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly OwnershipHelper ownershipHelper;

		[Token(Token = "0x40022DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly EnvironmentSceneData environmentSceneData;

		[Token(Token = "0x40022DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ColliderListener environmentReference;

		[Token(Token = "0x40022E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ColliderListener waterColliderListener;

		[Token(Token = "0x40022E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool isSceneAvaialble;

		[Token(Token = "0x6001949")]
		[Address(RVA = "0x101BD14", Offset = "0x101BD14", VA = "0x101BD14")]
		public EnvironmentHandler(MessageSender messageSender, GameMessageFactory gameMessageFactory, OwnershipHelper ownershipHelper, EnvironmentSceneData environmentSceneData)
		{
		}

		[Token(Token = "0x600194A")]
		[Address(RVA = "0x101BD54", Offset = "0x101BD54", VA = "0x101BD54")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x600194B")]
		[Address(RVA = "0x101BD58", Offset = "0x101BD58", VA = "0x101BD58", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600194C")]
		[Address(RVA = "0x101BF48", Offset = "0x101BF48", VA = "0x101BF48")]
		private void OnWaterTriggerExit(object sender, ColliderListenerEventArgs other)
		{
		}

		[Token(Token = "0x600194D")]
		[Address(RVA = "0x101C21C", Offset = "0x101C21C", VA = "0x101C21C")]
		private void OnWaterTriggerEnter(object sender, ColliderListenerEventArgs other)
		{
		}

		[Token(Token = "0x600194E")]
		[Address(RVA = "0x101C4EC", Offset = "0x101C4EC", VA = "0x101C4EC")]
		public void OnTriggerEnter(object sender, ColliderListenerEventArgs other)
		{
		}

		[Token(Token = "0x600194F")]
		[Address(RVA = "0x101BF4C", Offset = "0x101BF4C", VA = "0x101BF4C")]
		public void OnTriggerExit(object sender, ColliderListenerEventArgs other)
		{
		}
	}
	[Token(Token = "0x2000596")]
	public enum ImpactTypes
	{
		[Token(Token = "0x40022E3")]
		Player,
		[Token(Token = "0x40022E4")]
		Tool,
		[Token(Token = "0x40022E5")]
		Projectile,
		[Token(Token = "0x40022E6")]
		Environment,
		[Token(Token = "0x40022E7")]
		ForceField,
		[Token(Token = "0x40022E8")]
		NoImpact,
		[Token(Token = "0x40022E9")]
		Water
	}
	[Token(Token = "0x2000597")]
	public enum PlayerImpactTypes
	{
		[Token(Token = "0x40022EB")]
		None,
		[Token(Token = "0x40022EC")]
		Body,
		[Token(Token = "0x40022ED")]
		Head,
		[Token(Token = "0x40022EE")]
		RightHand,
		[Token(Token = "0x40022EF")]
		LeftHand
	}
	[Serializable]
	[Token(Token = "0x2000598")]
	public class ImpactSettings
	{
		[Token(Token = "0x40022F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SoundGroup]
		public string[] impactEnvironmentSound;

		[Token(Token = "0x40022F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SoundGroup]
		public string[] impactPlayerSound;

		[Token(Token = "0x40022F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SoundGroup]
		public string[] impactToolSound;

		[Token(Token = "0x40022F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SoundGroup]
		public string[] impactProjectileSound;

		[Token(Token = "0x40022F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[FormerlySerializedAs("forcefieldSound")]
		[SoundGroup]
		public string[] impactForcefieldSound;

		[Token(Token = "0x40022F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ParticleEffectReference ImpactProjectileParticleEffect;

		[Token(Token = "0x40022F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ParticleEffectReference ImpactPlayerParticleEffect;

		[Token(Token = "0x40022F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ParticleEffectReference ImpactOpponentParticleEffect;

		[Token(Token = "0x40022F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ParticleEffectReference ImpactEnvironmentParticleEffect;

		[Token(Token = "0x40022F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ParticleEffectReference ImpactToolParticleEffect;

		[Token(Token = "0x40022FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ParticleEffectReference impactForcefieldParticleEffect;

		[Token(Token = "0x40022FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public VisorParticleEffectType ImpactPlayerHUDEffect;

		[Token(Token = "0x40022FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool useCollidingObjectAsCenterOfHitForImpact;

		[Token(Token = "0x6001950")]
		[Address(RVA = "0x101C7BC", Offset = "0x101C7BC", VA = "0x101C7BC")]
		public ImpactSettings()
		{
		}
	}
	[Token(Token = "0x2000599")]
	public static class ImpactUtility
	{
		[Token(Token = "0x40022FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<int> hasSetInitializer;
	}
	[Token(Token = "0x200059A")]
	public interface IImpactable : ITransformRoots
	{
		[Token(Token = "0x17000104")]
		HashSet<int> CollidingIds
		{
			[Token(Token = "0x600195E")]
			get;
		}

		[Token(Token = "0x17000105")]
		float LastTriggeredEffectTimeStamp
		{
			[Token(Token = "0x600195F")]
			get;
			[Token(Token = "0x6001960")]
			set;
		}

		[Token(Token = "0x17000106")]
		bool CanCollideWithHands
		{
			[Token(Token = "0x6001961")]
			get;
			[Token(Token = "0x6001962")]
			set;
		}

		[Token(Token = "0x17000107")]
		bool UseCollidingObjectAsCenterOfHitForImpact
		{
			[Token(Token = "0x6001963")]
			get;
			[Token(Token = "0x6001964")]
			set;
		}

		[Token(Token = "0x6001952")]
		int NetworkId();

		[Token(Token = "0x6001953")]
		ImpactTypes ImpactType();

		[Token(Token = "0x6001954")]
		PlayerImpactTypes PlayerImpactType();

		[Token(Token = "0x6001955")]
		float GetDamageProjectile();

		[Token(Token = "0x6001956")]
		float GetDamagePlayer();

		[Token(Token = "0x6001957")]
		float GetProjectileRadius();

		[Token(Token = "0x6001958")]
		float GetTotalPredictedPlayerDamage();

		[Token(Token = "0x6001959")]
		float GetSpeed();

		[Token(Token = "0x600195A")]
		bool IsHeld();

		[Token(Token = "0x600195B")]
		void SetThreatRay(BotUtils.ThreatRay ray);

		[Token(Token = "0x600195C")]
		BotUtils.ThreatRay GetThreatRay();

		[Token(Token = "0x600195D")]
		ImpactSettings ImpactSettings();
	}
	[Token(Token = "0x200059B")]
	public interface IImpactableReference
	{
		[Token(Token = "0x6001965")]
		TriggerColliderType TriggerColliderType();

		[Token(Token = "0x6001966")]
		IImpactable Impactable();
	}
	[Token(Token = "0x200059C")]
	public readonly struct ImpactData
	{
		[Token(Token = "0x40022FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly IThreat self;

		[Token(Token = "0x40022FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Collider other;

		[Token(Token = "0x6001967")]
		[Address(RVA = "0x101D0FC", Offset = "0x101D0FC", VA = "0x101D0FC")]
		public ImpactData(IThreat self, Collider other)
		{
		}
	}
	[Token(Token = "0x200059D")]
	public readonly struct ProjectileHitData
	{
		[Token(Token = "0x4002300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly IThreat threat;

		[Token(Token = "0x4002301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int impactReceiverId;

		[Token(Token = "0x4002302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly int damage;

		[Token(Token = "0x4002303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Vector3 position;

		[Token(Token = "0x4002304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly float timeStamp;

		[Token(Token = "0x6001968")]
		[Address(RVA = "0x101D104", Offset = "0x101D104", VA = "0x101D104")]
		public ProjectileHitData(IThreat threat, int impactReceiverId, int damage, Vector3 position, float timeStamp)
		{
		}
	}
	[Token(Token = "0x200059E")]
	public class ImpactHandlerData
	{
		[Token(Token = "0x4002305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<ImpactData> impactData;

		[Token(Token = "0x4002306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<ProjectileHitData> projectileHitData;

		[Token(Token = "0x4002307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<int, Dictionary<ImpactTypes, ImpactDamageMultiplier>> impactImmunity;

		[Token(Token = "0x6001969")]
		[Address(RVA = "0x101D118", Offset = "0x101D118", VA = "0x101D118")]
		public void SetDamageMultiplier(int player, ImpactDamageMultiplier impactDamageMultiplier)
		{
		}

		[Token(Token = "0x600196A")]
		[Address(RVA = "0x101D248", Offset = "0x101D248", VA = "0x101D248")]
		public ImpactHandlerData()
		{
		}
	}
	[Token(Token = "0x200059F")]
	public class ImpactHandler : ITickable
	{
		[Token(Token = "0x4002308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameData gameData;

		[Token(Token = "0x4002309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x400230A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IgnisSoundTriggerData soundTriggers;

		[Token(Token = "0x400230B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ProjectileRecycleHandler projectileRecycleHandler;

		[Token(Token = "0x400230C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ToolRecycleHandler toolRecycleHandler;

		[Token(Token = "0x400230D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PlayerSettings playerSettings;

		[Token(Token = "0x400230E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly HapticData hapticData;

		[Token(Token = "0x400230F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly DamageOverTimeData damageOverTimeData;

		[Token(Token = "0x4002310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ParticleEffectData particleEffectData;

		[Token(Token = "0x4002311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly GameDesignTrackingData gameDesignTrackingData;

		[Token(Token = "0x4002312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly BhapticsData bhapticsData;

		[Token(Token = "0x4002313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly FaceAnimationData faceAnimationData;

		[Token(Token = "0x4002314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly ImpactHandlerData impactHandlerData;

		[Token(Token = "0x4002315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly OwnershipHelper ownershipHelper;

		[Token(Token = "0x4002316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4002317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4002318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<int> alreadyCheckedProjectileIds;

		[Token(Token = "0x4002319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ProfilerMarker handleImpactsMarker;

		[Token(Token = "0x600196B")]
		[Address(RVA = "0x101D354", Offset = "0x101D354", VA = "0x101D354")]
		public ImpactHandler(GameData gameData, DamageRecordKeeper damageRecordKeeper, IgnisSoundTriggerData soundTriggers, ProjectileRecycleHandler projectileRecycleHandler, ToolRecycleHandler toolRecycleHandler, PlayerSettings playerSettings, HapticData hapticData, DamageOverTimeData damageOverTimeData, ParticleEffectData particleEffectData, GameDesignTrackingData gameDesignTrackingData, ImpactHandlerData impactHandlerData, OwnershipHelper ownershipHelper, MessageSender messageSender, GameMessageFactory gameMessageFactory, BhapticsData bhapticsData, FaceAnimationData faceAnimationData)
		{
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0x101D4A0", Offset = "0x101D4A0", VA = "0x101D4A0", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600196D")]
		[Address(RVA = "0x101D534", Offset = "0x101D534", VA = "0x101D534")]
		private void HandleImpactTriggers(ImpactData impactData)
		{
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0x101DA50", Offset = "0x101DA50", VA = "0x101DA50")]
		private static Vector3 GetHitPosition(IThreat self, IImpactable other)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0x101DE74", Offset = "0x101DE74", VA = "0x101DE74")]
		private void HandleToolImpact(IImpactable self, IImpactable other, Vector3 centerOfHit)
		{
		}

		[Token(Token = "0x6001970")]
		[Address(RVA = "0x101E310", Offset = "0x101E310", VA = "0x101E310")]
		private void HandleForceFieldImpact(IImpactable self, IImpactable other, Vector3 centerOfHit)
		{
		}

		[Token(Token = "0x6001971")]
		[Address(RVA = "0x101E570", Offset = "0x101E570", VA = "0x101E570")]
		private void HandleProjectileImpact(IImpactable self, IImpactable other, Vector3 centerOfHit)
		{
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0x101E73C", Offset = "0x101E73C", VA = "0x101E73C")]
		public GameMessageInvokationResult OnProjectileImpact(ProjectileImpactMessage projectileImpactMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001973")]
		[Address(RVA = "0x101F988", Offset = "0x101F988", VA = "0x101F988")]
		public void OnRoundEnd(EndArenaRoundMessage message)
		{
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0x101F98C", Offset = "0x101F98C", VA = "0x101F98C")]
		private void ClearAlreadySeenProjectileIds()
		{
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0x101EE34", Offset = "0x101EE34", VA = "0x101EE34")]
		private float PlayerImpact(IThreat threat, int playerId, Vector3 position, ImpactTypes impactType, float timeStamp)
		{
			return default(float);
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0x1020020", Offset = "0x1020020", VA = "0x1020020")]
		public GameMessageInvokationResult OnToolImpactMessage(ToolImpactMessage toolImpactMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001977")]
		[Address(RVA = "0x10200D4", Offset = "0x10200D4", VA = "0x10200D4")]
		private GameMessageInvokationResult ToolOnOtherImpact(ToolImpactMessage toolImpactMessage, Tool tool)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0x1020634", Offset = "0x1020634", VA = "0x1020634")]
		public GameMessageInvokationResult OnForceFieldImpactMessage(ForceFieldImpactMessage fieldImpactMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001979")]
		[Address(RVA = "0x101F7D4", Offset = "0x101F7D4", VA = "0x101F7D4")]
		private static bool CanForceFieldCollide(Tool tool)
		{
			return default(bool);
		}

		[Token(Token = "0x600197A")]
		[Address(RVA = "0x101F25C", Offset = "0x101F25C", VA = "0x101F25C")]
		private static bool CanCollide(Tool tool)
		{
			return default(bool);
		}

		[Token(Token = "0x600197B")]
		[Address(RVA = "0x101EE00", Offset = "0x101EE00", VA = "0x101EE00")]
		private static bool CanCollide(Projectile projectile)
		{
			return default(bool);
		}

		[Token(Token = "0x600197C")]
		[Address(RVA = "0x101F294", Offset = "0x101F294", VA = "0x101F294")]
		private bool HandleImpact(IThreat source, IThreat target, bool canCollide, float timeStamp)
		{
			return default(bool);
		}

		[Token(Token = "0x600197D")]
		[Address(RVA = "0x101F80C", Offset = "0x101F80C", VA = "0x101F80C")]
		private void ForceFieldImpact(IThreat target, Tool forceField, bool canCollide, float timeStamp, Vector3 position, int sNid)
		{
		}

		[Token(Token = "0x600197E")]
		[Address(RVA = "0x101F6B8", Offset = "0x101F6B8", VA = "0x101F6B8")]
		private void CollisionTrackingData(ToolName target, IImpactable damageSource, int sNId)
		{
		}

		[Token(Token = "0x600197F")]
		[Address(RVA = "0x1020534", Offset = "0x1020534", VA = "0x1020534")]
		private void ThrowCollisionTrackingData(IImpactable damageSource, int sNId)
		{
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0x1020C44", Offset = "0x1020C44", VA = "0x1020C44")]
		private void TriggerEffectFromForceField(IImpactable effectSource, Vector3 position, float timeStamp)
		{
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0x101F4D8", Offset = "0x101F4D8", VA = "0x101F4D8")]
		private void TriggerEffectFromProjectile(IImpactable effectSource, Vector3 position, float timeStamp)
		{
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0x1020354", Offset = "0x1020354", VA = "0x1020354")]
		private void TriggerEffectFromTool(IImpactable effectSource, Vector3 position, float timeStamp)
		{
		}

		[Token(Token = "0x6001983")]
		[Address(RVA = "0x1020990", Offset = "0x1020990", VA = "0x1020990")]
		private void ApplyImpactDamage(IThreat threatOne, IThreat threatTwo, float timeOfImpact)
		{
		}

		[Token(Token = "0x6001984")]
		[Address(RVA = "0x101FA50", Offset = "0x101FA50", VA = "0x101FA50")]
		private int GetPlayerDamage(IImpactable impactable, int playerId)
		{
			return default(int);
		}

		[Token(Token = "0x6001985")]
		[Address(RVA = "0x1020E24", Offset = "0x1020E24", VA = "0x1020E24")]
		public GameMessageInvokationResult OnWaterImpact(WaterImpactMessage waterImpactMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001986")]
		[Address(RVA = "0x1020E70", Offset = "0x1020E70", VA = "0x1020E70")]
		public GameMessageInvokationResult OnEnvironmentImpact(EnvironmentImpactMessage environmentImpactMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0x10210A4", Offset = "0x10210A4", VA = "0x10210A4")]
		private void TryToDestroyProjectile(Projectile projectile, float timeStamp)
		{
		}

		[Token(Token = "0x6001988")]
		[Address(RVA = "0x1021194", Offset = "0x1021194", VA = "0x1021194")]
		public GameMessageInvokationResult OnEnvironmentExit(EnvironmentExitMessage enviromentExitMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6001989")]
		[Address(RVA = "0x1020FAC", Offset = "0x1020FAC", VA = "0x1020FAC")]
		private void TryToDestroyTool(Tool tool, float timeStamp)
		{
		}

		[Token(Token = "0x600198A")]
		[Address(RVA = "0x1021284", Offset = "0x1021284", VA = "0x1021284")]
		public GameMessageInvokationResult OnDamageOverTimeImpactStartMessage(DamageOverTimeImpactStartMessage damageOverTimeImpactStartMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x600198B")]
		[Address(RVA = "0x1021C48", Offset = "0x1021C48", VA = "0x1021C48")]
		public GameMessageInvokationResult OnDamageOverTimeImpactEndMessage(DamageOverTimeImpactEndMessage damageOverTimeImpactEndMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x600198C")]
		[Address(RVA = "0x1020778", Offset = "0x1020778", VA = "0x1020778")]
		private bool AlreadyResolved(IImpactable first, IImpactable seconds)
		{
			return default(bool);
		}

		[Token(Token = "0x600198D")]
		[Address(RVA = "0x101FC34", Offset = "0x101FC34", VA = "0x101FC34")]
		private void TriggerPlayerHitEffects(int networkId, Vector3 position, int particleToken, int damage, float timeStamp)
		{
		}

		[Token(Token = "0x600198E")]
		[Address(RVA = "0x1021A58", Offset = "0x1021A58", VA = "0x1021A58")]
		private void OnContinuesDamage(int networkId, string sourceName)
		{
		}

		[Token(Token = "0x600198F")]
		[Address(RVA = "0x1022238", Offset = "0x1022238", VA = "0x1022238")]
		private void OnEndContinuesDamage(int networkId, string sourceName)
		{
		}
	}
	[Token(Token = "0x20005A0")]
	public class AutoSpectateInputHandler : IInputHandler, ITickable
	{
		[Token(Token = "0x400231A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly InputData inputData;

		[Token(Token = "0x400231B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Transform headCamera;

		[Token(Token = "0x400231C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x400231D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x400231E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly SpectatorCameraData spectatorCameraData;

		[Token(Token = "0x400231F")]
		private const KeyCode alpha1 = KeyCode.Alpha1;

		[Token(Token = "0x4002320")]
		private const KeyCode keypad1 = KeyCode.Keypad1;

		[Token(Token = "0x4002321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 currentRotation;

		[Token(Token = "0x6001990")]
		[Address(RVA = "0x1022450", Offset = "0x1022450", VA = "0x1022450")]
		public AutoSpectateInputHandler(InputData inputData, Transform headCamera, AutoSpectateData autoSpectateData, AutoSpectateSettings autoSpectateSettings, SpectatorCameraData spectatorCameraData)
		{
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0x10224E4", Offset = "0x10224E4", VA = "0x10224E4", Slot = "4")]
		public void Setup()
		{
		}

		[Token(Token = "0x6001992")]
		[Address(RVA = "0x1022600", Offset = "0x1022600", VA = "0x1022600", Slot = "5")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0x1022604", Offset = "0x1022604", VA = "0x1022604", Slot = "8")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001994")]
		[Address(RVA = "0x1022A84", Offset = "0x1022A84", VA = "0x1022A84")]
		private void CalculateHeadPosition()
		{
		}

		[Token(Token = "0x6001995")]
		[Address(RVA = "0x10228E0", Offset = "0x10228E0", VA = "0x10228E0")]
		private void CalculateHeadRotation()
		{
		}

		[Token(Token = "0x6001996")]
		[Address(RVA = "0x1022CBC", Offset = "0x1022CBC", VA = "0x1022CBC", Slot = "6")]
		public void AttachLocalPlayerToCamera(PlayerReferences localPlayerReferences, Camera headCamera)
		{
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0x1022CC0", Offset = "0x1022CC0", VA = "0x1022CC0", Slot = "7")]
		public void DetachLocalPlayerFromCamera(PlayerReferences localPlayerReferences, Camera headCamera, Transform playerMenuOrigin)
		{
		}
	}
	[Token(Token = "0x20005A1")]
	public class AutoTestInputHandler : IInputHandler, ITickable
	{
		[Token(Token = "0x4002322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4002323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Transform headCamera;

		[Token(Token = "0x4002324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PlayerReferences playerReferences;

		[Token(Token = "0x6001998")]
		[Address(RVA = "0x1022CC4", Offset = "0x1022CC4", VA = "0x1022CC4")]
		public AutoTestInputHandler(EntryPoint.EntryPointData entryPointData, Transform headCamera, PlayerReferences playerReferences)
		{
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0x1022D00", Offset = "0x1022D00", VA = "0x1022D00", Slot = "4")]
		public void Setup()
		{
		}

		[Token(Token = "0x600199A")]
		[Address(RVA = "0x1022D04", Offset = "0x1022D04", VA = "0x1022D04", Slot = "5")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x600199B")]
		[Address(RVA = "0x1022D08", Offset = "0x1022D08", VA = "0x1022D08", Slot = "6")]
		public void AttachLocalPlayerToCamera(PlayerReferences localPlayerReferences, Camera headCamera)
		{
		}

		[Token(Token = "0x600199C")]
		[Address(RVA = "0x1022D0C", Offset = "0x1022D0C", VA = "0x1022D0C", Slot = "7")]
		public void DetachLocalPlayerFromCamera(PlayerReferences localPlayerReferences, Camera headCamera, Transform playerMenuOrigin)
		{
		}

		[Token(Token = "0x600199D")]
		[Address(RVA = "0x1022D10", Offset = "0x1022D10", VA = "0x1022D10", Slot = "8")]
		private void RGCommon.ECS.ITickable.Tick()
		{
		}
	}
	[Token(Token = "0x20005A2")]
	public class DesktopInputHandler : IInputHandler, ITickable
	{
		[Token(Token = "0x4002325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool mouseEnabled;

		[Token(Token = "0x4002326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Vector3 currentRotation;

		[Token(Token = "0x4002327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly InputDesktopSettings inputDesktopSettings;

		[Token(Token = "0x4002328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Transform headCamera;

		[Token(Token = "0x4002329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private InputData inputData;

		[Token(Token = "0x400232A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ReplayData replayData;

		[Token(Token = "0x400232B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VectorCircularBuffer rightHandMovementBuffer;

		[Token(Token = "0x400232C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VectorCircularBuffer leftHandMovementBuffer;

		[Token(Token = "0x400232D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VectorCircularBuffer leftHandAngularVelocityBuffer;

		[Token(Token = "0x400232E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private VectorCircularBuffer rightHandAngularVelocityBuffer;

		[Token(Token = "0x400232F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 rightHandPrevPosition;

		[Token(Token = "0x4002330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 leftHandPrevPosition;

		[Token(Token = "0x4002331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion leftHandPrevRotation;

		[Token(Token = "0x4002332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion rightHandPrevRotation;

		[Token(Token = "0x4002333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float currentSlowMotion;

		[Token(Token = "0x4002334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private ButtonState nextCustomTargetState;

		[Token(Token = "0x4002335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private ButtonState nextPlayerTargetState;

		[Token(Token = "0x4002336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private ButtonState nextPositionTargetState;

		[Token(Token = "0x4002337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private ButtonState resetFollowState;

		[Token(Token = "0x600199E")]
		[Address(RVA = "0x1022E68", Offset = "0x1022E68", VA = "0x1022E68")]
		public DesktopInputHandler(InputDesktopSettings inputDesktopSettings, Transform headCamera, InputData inputData, ReplayData replayData)
		{
		}

		[Token(Token = "0x600199F")]
		[Address(RVA = "0x1022FF0", Offset = "0x1022FF0", VA = "0x1022FF0", Slot = "4")]
		public void Setup()
		{
		}

		[Token(Token = "0x60019A0")]
		[Address(RVA = "0x1023400", Offset = "0x1023400", VA = "0x1023400", Slot = "5")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x60019A1")]
		[Address(RVA = "0x1023404", Offset = "0x1023404", VA = "0x1023404", Slot = "8")]
		public void Tick()
		{
		}

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0x10248A8", Offset = "0x10248A8", VA = "0x10248A8", Slot = "6")]
		public void AttachLocalPlayerToCamera(PlayerReferences localPlayerReferences, Camera headCamera)
		{
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0x10249D8", Offset = "0x10249D8", VA = "0x10249D8", Slot = "7")]
		public void DetachLocalPlayerFromCamera(PlayerReferences localPlayerReferences, Camera headCamera, Transform playerMenuOrigin)
		{
		}

		[Token(Token = "0x60019A4")]
		[Address(RVA = "0x1023E14", Offset = "0x1023E14", VA = "0x1023E14")]
		private void RecordMovement()
		{
		}

		[Token(Token = "0x60019A5")]
		[Address(RVA = "0x1023678", Offset = "0x1023678", VA = "0x1023678")]
		private void CalculateAndSetMouseRotation()
		{
		}

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0x1023864", Offset = "0x1023864", VA = "0x1023864")]
		private Vector3 CalculateHeadPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019A7")]
		[Address(RVA = "0x1023B1C", Offset = "0x1023B1C", VA = "0x1023B1C")]
		private Vector3 CalculateRightHandPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019A8")]
		[Address(RVA = "0x1023BA4", Offset = "0x1023BA4", VA = "0x1023BA4")]
		private Vector3 CalculateLeftHandPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019A9")]
		[Address(RVA = "0x1023C2C", Offset = "0x1023C2C", VA = "0x1023C2C")]
		private Quaternion CalculateRightHandRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60019AA")]
		[Address(RVA = "0x1023D20", Offset = "0x1023D20", VA = "0x1023D20")]
		private Quaternion CalculateLeftHandRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60019AB")]
		[Address(RVA = "0x1024138", Offset = "0x1024138", VA = "0x1024138")]
		private void UpdateButtonInput()
		{
		}
	}
	[Token(Token = "0x20005A3")]
	public struct VectorCircularBuffer
	{
		[Token(Token = "0x4002338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<Vector3> vectors;

		[Token(Token = "0x4002339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 average;

		[Token(Token = "0x400233A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int index;

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0x1022FE4", Offset = "0x1022FE4", VA = "0x1022FE4")]
		public VectorCircularBuffer(List<Vector3> vectors)
		{
		}

		[Token(Token = "0x60019AD")]
		[Address(RVA = "0x1024A38", Offset = "0x1024A38", VA = "0x1024A38")]
		public void SetNextVector(Vector3 vector3)
		{
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0x1024AE8", Offset = "0x1024AE8", VA = "0x1024AE8")]
		public void CalculateAverage()
		{
		}
	}
	[Token(Token = "0x20005A4")]
	public enum ButtonState
	{
		[Token(Token = "0x400233C")]
		Up,
		[Token(Token = "0x400233D")]
		Down,
		[Token(Token = "0x400233E")]
		InBetweenDown,
		[Token(Token = "0x400233F")]
		InBetweenUp
	}
	[Token(Token = "0x20005A5")]
	public enum HandOffset
	{
		[Token(Token = "0x4002341")]
		Oculus,
		[Token(Token = "0x4002342")]
		Steam,
		[Token(Token = "0x4002343")]
		Custom
	}
	[Token(Token = "0x20005A6")]
	public struct AxisButton
	{
		[Token(Token = "0x4002344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ButtonState buttonState;

		[Token(Token = "0x4002345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float axis;

		[Token(Token = "0x4002346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool axisUp;

		[Token(Token = "0x4002347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public bool axisDown;

		[Token(Token = "0x4002348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public bool axisHeld;

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0x1024BDC", Offset = "0x1024BDC", VA = "0x1024BDC")]
		public AxisButton(ButtonState buttonState, float axis)
		{
		}
	}
	[Token(Token = "0x20005A7")]
	public class HandInput
	{
		[Token(Token = "0x4002349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 handPosition;

		[Token(Token = "0x400234A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion handRotation;

		[Token(Token = "0x400234B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 handMovement;

		[Token(Token = "0x400234C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 handAngularVelocity;

		[Token(Token = "0x400234D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool grabToolDown;

		[Token(Token = "0x400234E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool grabToolHeld;

		[Token(Token = "0x400234F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool grabToolUp;

		[Token(Token = "0x4002350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool activateToolDown;

		[Token(Token = "0x4002351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool activateToolHeld;

		[Token(Token = "0x4002352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool activateToolUp;

		[Token(Token = "0x4002353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float indexFinger;

		[Token(Token = "0x4002354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float middleFinger;

		[Token(Token = "0x4002355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float ringFinger;

		[Token(Token = "0x4002356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float pinkyFinger;

		[Token(Token = "0x4002357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float thumb;

		[Token(Token = "0x4002358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool uiInteractionDown;

		[Token(Token = "0x4002359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool uiInteractionHeld;

		[Token(Token = "0x400235A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public bool uiInteractionUp;

		[Token(Token = "0x400235B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector2 scroll;

		[Token(Token = "0x400235C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool passthroughDown;

		[Token(Token = "0x400235D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public bool passthroughHeld;

		[Token(Token = "0x400235E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		public bool debugMenuDown;

		[Token(Token = "0x400235F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		public bool pauseMenuDown;

		[Token(Token = "0x4002360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool debugMenuHeld;

		[Token(Token = "0x4002361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool spectatorViewDown;

		[Token(Token = "0x4002362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		public bool spectatorViewHeld;

		[Token(Token = "0x4002363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		public bool any;

		[Token(Token = "0x4002364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool sideViewHeld;

		[Token(Token = "0x4002365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		public bool skippCutsceneHeld;

		[Token(Token = "0x60019B0")]
		[Address(RVA = "0x1024CB8", Offset = "0x1024CB8", VA = "0x1024CB8")]
		public HandInput()
		{
		}
	}
	[Token(Token = "0x20005A8")]
	public class InputData
	{
		[Token(Token = "0x4002366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool foundHeadDevice;

		[Token(Token = "0x4002367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool foundLeftHandDevice;

		[Token(Token = "0x4002368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool foundRightHandDevice;

		[Token(Token = "0x4002369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly HandInput leftHand;

		[Token(Token = "0x400236A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly HandInput rightHand;

		[Token(Token = "0x400236B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 handPositionOffset;

		[Token(Token = "0x400236C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion handRotationOffset;

		[Token(Token = "0x400236D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool botEmoteRecordStopLeftHand;

		[Token(Token = "0x400236E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool togglePlayerTarget;

		[Token(Token = "0x400236F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool toggleProjectileTarget;

		[Token(Token = "0x4002370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool toggleToolTarget;

		[Token(Token = "0x4002371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool toggleCustomTarget;

		[Token(Token = "0x4002372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool nextPlayerTarget;

		[Token(Token = "0x4002373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool nextCustomTarget;

		[Token(Token = "0x4002374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		public bool resetTargetToFollow;

		[Token(Token = "0x4002375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool resetSpectatorView;

		[Token(Token = "0x4002376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool rotateSpectatorView;

		[Token(Token = "0x4002377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float slowMotion;

		[Token(Token = "0x4002378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool pauseReplayDown;

		[Token(Token = "0x4002379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool leaveRoom;

		[Token(Token = "0x400237A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool openInGameMenu;

		[Token(Token = "0x400237B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public bool changeCameraMode;

		[Token(Token = "0x400237C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool changeAutoSpectateMode;

		[Token(Token = "0x400237D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool toggleMatchUI;

		[Token(Token = "0x400237E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool loadConfigSettings;

		[Token(Token = "0x400237F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool[] changeCameraView;

		[Token(Token = "0x4002380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool thirdPersonPlayer1;

		[Token(Token = "0x4002381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool thirdPersonPlayer2;

		[Token(Token = "0x4002382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool povPlayer1;

		[Token(Token = "0x4002383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		public bool povPlayer2;

		[Token(Token = "0x4002384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool resetHead;

		[Token(Token = "0x60019B1")]
		[Address(RVA = "0x1024CC0", Offset = "0x1024CC0", VA = "0x1024CC0")]
		public InputData()
		{
		}
	}
	[Token(Token = "0x20005A9")]
	public interface IInputHandler : ITickable
	{
		[Token(Token = "0x60019B2")]
		void Setup();

		[Token(Token = "0x60019B3")]
		void SetupDebug();

		[Token(Token = "0x60019B4")]
		void AttachLocalPlayerToCamera(PlayerReferences localPlayerReferences, Camera headCamera);

		[Token(Token = "0x60019B5")]
		void DetachLocalPlayerFromCamera(PlayerReferences localPlayerReferences, Camera headCamera, Transform playerMenuOrigin);
	}
	[Token(Token = "0x20005AA")]
	public static class InputUtility
	{
		[Token(Token = "0x60019B6")]
		[Address(RVA = "0x1024BEC", Offset = "0x1024BEC", VA = "0x1024BEC")]
		public static AxisButton GetAxisButton(AxisButton axisButton, float downThreshold, float upThreshold)
		{
			return default(AxisButton);
		}

		[Token(Token = "0x60019B7")]
		[Address(RVA = "0x1024D84", Offset = "0x1024D84", VA = "0x1024D84")]
		public static Quaternion SmoothDamp(Quaternion rot, Quaternion target, ref Quaternion deriv, float time)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x20005AB")]
	[CreateAssetMenu(fileName = "InputDesktopSettings", menuName = "Settings/Input/InputDesktopSettings", order = 1)]
	public class InputDesktopSettings : ScriptableObject
	{
		[Token(Token = "0x4002385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int averageVelocityOverNumFrames;

		[Token(Token = "0x4002386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 rightHandOffset;

		[Token(Token = "0x4002387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x4002388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float slowMotionSpeed;

		[Token(Token = "0x4002389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float controllerRotationSpeed;

		[Token(Token = "0x400238A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float mouseSpeed;

		[Token(Token = "0x400238B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float movementSpeed;

		[Token(Token = "0x400238C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float movementSpeedMultiplier;

		[Token(Token = "0x400238D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 startHeadPosition;

		[Token(Token = "0x400238E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float movementSpeedLowerMultiplier;

		[Token(Token = "0x60019B8")]
		[Address(RVA = "0x1024FF8", Offset = "0x1024FF8", VA = "0x1024FF8")]
		public InputDesktopSettings()
		{
		}
	}
	[Token(Token = "0x20005AC")]
	[CreateAssetMenu(fileName = "InputXrSettings", menuName = "Settings/Input/InputXrSettings", order = 1)]
	public class InputXrSettings : ScriptableObject
	{
		[Token(Token = "0x400238F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int averageVelocityOverNumFrames;

		[Token(Token = "0x4002390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float gripDownThreshold;

		[Token(Token = "0x4002391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float gripUpThreshold;

		[Token(Token = "0x4002392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float scrollSpeed;

		[Token(Token = "0x4002393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float indexTouchOffset;

		[Token(Token = "0x4002394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float middleFingerOffset;

		[Token(Token = "0x4002395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float ringFingerOffset;

		[Token(Token = "0x4002396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float pinkyFingerOffset;

		[Token(Token = "0x60019B9")]
		[Address(RVA = "0x1025020", Offset = "0x1025020", VA = "0x1025020")]
		public InputXrSettings()
		{
		}
	}
	[Token(Token = "0x20005AD")]
	public class SteamHandBuffer
	{
		[Token(Token = "0x4002397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VectorCircularBuffer handMovementBuffer;

		[Token(Token = "0x4002398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VectorCircularBuffer handAngularVelocityBuffer;

		[Token(Token = "0x60019BA")]
		[Address(RVA = "0x102505C", Offset = "0x102505C", VA = "0x102505C")]
		public SteamHandBuffer()
		{
		}
	}
	[Token(Token = "0x20005AE")]
	public class SteamVrInputHandler : IInputHandler, ITickable
	{
		[Token(Token = "0x4002399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly InputData inputData;

		[Token(Token = "0x400239A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly SteamVrPlatformSettings settings;

		[Token(Token = "0x400239B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private SteamHandBuffer leftHandBuffer;

		[Token(Token = "0x400239C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SteamHandBuffer rightHandBuffer;

		[Token(Token = "0x60019BB")]
		[Address(RVA = "0x1025064", Offset = "0x1025064", VA = "0x1025064")]
		public SteamVrInputHandler(InputData inputData, SteamVrPlatformSettings settings)
		{
		}

		[Token(Token = "0x60019BC")]
		[Address(RVA = "0x1025100", Offset = "0x1025100", VA = "0x1025100", Slot = "4")]
		public void Setup()
		{
		}

		[Token(Token = "0x60019BD")]
		[Address(RVA = "0x1025514", Offset = "0x1025514", VA = "0x1025514", Slot = "8")]
		public void Tick()
		{
		}

		[Token(Token = "0x60019BE")]
		[Address(RVA = "0x1025518", Offset = "0x1025518", VA = "0x1025518", Slot = "5")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0x102551C", Offset = "0x102551C", VA = "0x102551C", Slot = "6")]
		public void AttachLocalPlayerToCamera(PlayerReferences localPlayerReferences, Camera headCamera)
		{
		}

		[Token(Token = "0x60019C0")]
		[Address(RVA = "0x1025520", Offset = "0x1025520", VA = "0x1025520", Slot = "7")]
		public void DetachLocalPlayerFromCamera(PlayerReferences localPlayerReferences, Camera headCamera, Transform playerMenuOrigin)
		{
		}
	}
	[Token(Token = "0x20005AF")]
	public class SteamVrHapticFacade : IHapticFacade
	{
		[Token(Token = "0x60019C1")]
		[Address(RVA = "0x1025524", Offset = "0x1025524", VA = "0x1025524", Slot = "4")]
		public void StartHaptic(HapticEffect effect)
		{
		}

		[Token(Token = "0x60019C2")]
		[Address(RVA = "0x1025528", Offset = "0x1025528", VA = "0x1025528", Slot = "5")]
		public void StopHaptic(ControllerHand hand)
		{
		}

		[Token(Token = "0x60019C3")]
		[Address(RVA = "0x102552C", Offset = "0x102552C", VA = "0x102552C")]
		public SteamVrHapticFacade()
		{
		}
	}
	[Token(Token = "0x20005B0")]
	public class XrHandData
	{
		[Token(Token = "0x400239D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ButtonState gripButtonState;

		[Token(Token = "0x400239E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ButtonState triggerButtonState;

		[Token(Token = "0x400239F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VectorCircularBuffer handMovementBuffer;

		[Token(Token = "0x40023A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VectorCircularBuffer handAngularVelocityBuffer;

		[Token(Token = "0x40023A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InputDevice device;

		[Token(Token = "0x60019C4")]
		[Address(RVA = "0x1025534", Offset = "0x1025534", VA = "0x1025534")]
		public XrHandData()
		{
		}
	}
	[Token(Token = "0x20005B1")]
	public class XrInputHandler : IInputHandler, ITickable
	{
		[Token(Token = "0x40023A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly InputXrSettings inputXrSettings;

		[Token(Token = "0x40023A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InputData inputData;

		[Token(Token = "0x40023A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private InputDevice headDevice;

		[Token(Token = "0x40023A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private XrHandData xrRightHand;

		[Token(Token = "0x40023A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private XrHandData xrLeftHand;

		[Token(Token = "0x40023A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform deviceRoot;

		[Token(Token = "0x40023A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<InputDevice> headDevices;

		[Token(Token = "0x40023A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly List<InputDevice> leftHandDevices;

		[Token(Token = "0x40023AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly List<InputDevice> rightHandDevices;

		[Token(Token = "0x40023AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool xrSubSystemStarted;

		[Token(Token = "0x40023AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool pauseMenuHeldLeftHand;

		[Token(Token = "0x40023AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool playingOnQuest;

		[Token(Token = "0x60019C5")]
		[Address(RVA = "0x102553C", Offset = "0x102553C", VA = "0x102553C")]
		public XrInputHandler(InputXrSettings inputXrSettings, InputData inputData)
		{
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0x1025A20", Offset = "0x1025A20", VA = "0x1025A20", Slot = "4")]
		public void Setup()
		{
		}

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0x1025A44", Offset = "0x1025A44", VA = "0x1025A44", Slot = "5")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0x1025A24", Offset = "0x1025A24", VA = "0x1025A24")]
		private void TryToGetDevices()
		{
		}

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0x1025A48", Offset = "0x1025A48", VA = "0x1025A48")]
		private void CheckHeadDevice()
		{
		}

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0x1025C1C", Offset = "0x1025C1C", VA = "0x1025C1C")]
		private void CheckLeftHandDevice()
		{
		}

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0x1025CD8", Offset = "0x1025CD8", VA = "0x1025CD8")]
		private void CheckRightHandDevice()
		{
		}

		[Token(Token = "0x60019CC")]
		[Address(RVA = "0x1025E10", Offset = "0x1025E10", VA = "0x1025E10", Slot = "8")]
		public void Tick()
		{
		}

		[Token(Token = "0x60019CD")]
		[Address(RVA = "0x1025FCC", Offset = "0x1025FCC", VA = "0x1025FCC", Slot = "6")]
		public void AttachLocalPlayerToCamera(PlayerReferences localPlayerReferences, Camera headCamera)
		{
		}

		[Token(Token = "0x60019CE")]
		[Address(RVA = "0x10260FC", Offset = "0x10260FC", VA = "0x10260FC", Slot = "7")]
		public void DetachLocalPlayerFromCamera(PlayerReferences localPlayerReferences, Camera headCamera, Transform playerMenuOrigin)
		{
		}

		[Token(Token = "0x60019CF")]
		[Address(RVA = "0x1025EC4", Offset = "0x1025EC4", VA = "0x1025EC4")]
		private void TrackRightHand()
		{
		}

		[Token(Token = "0x60019D0")]
		[Address(RVA = "0x1025EE8", Offset = "0x1025EE8", VA = "0x1025EE8")]
		private void TrackLeftHand()
		{
		}

		[Token(Token = "0x60019D1")]
		[Address(RVA = "0x102615C", Offset = "0x102615C", VA = "0x102615C")]
		private void TrackHand(HandInput inputHand, XrHandData xrHand, bool isLeft)
		{
		}

		[Token(Token = "0x60019D2")]
		[Address(RVA = "0x1026824", Offset = "0x1026824", VA = "0x1026824")]
		private AxisButton GetAxisButton(AxisButton axisButton)
		{
			return default(AxisButton);
		}
	}
	[Token(Token = "0x20005B2")]
	public enum ControllerHand
	{
		[Token(Token = "0x40023AF")]
		Right,
		[Token(Token = "0x40023B0")]
		Left
	}
	[Token(Token = "0x20005B3")]
	public class InteractionHandler : StandaloneInputModule
	{
		[Token(Token = "0x40023B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private PointerEventData m_InputPointerEvent;

		[Token(Token = "0x40023B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private DevicePlatform devicePlatform;

		[Token(Token = "0x40023B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InputData inputData;

		[Token(Token = "0x40023B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private PointerData pointerData;

		[Token(Token = "0x40023B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly MouseState mouseState;

		[Token(Token = "0x40023B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool logCurrentSelectedObject;

		[Token(Token = "0x40023B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
		private bool isInitialized;

		[Token(Token = "0x60019D3")]
		[Address(RVA = "0x1026850", Offset = "0x1026850", VA = "0x1026850")]
		public void Setup(InputData inputData, DevicePlatform devicePlatform, PointerData pointerData)
		{
		}

		[Token(Token = "0x60019D4")]
		[Address(RVA = "0x1026864", Offset = "0x1026864", VA = "0x1026864")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x60019D5")]
		[Address(RVA = "0x1026868", Offset = "0x1026868", VA = "0x1026868")]
		private bool GetActiveUiInteractionDown()
		{
			return default(bool);
		}

		[Token(Token = "0x60019D6")]
		[Address(RVA = "0x10268A8", Offset = "0x10268A8", VA = "0x10268A8")]
		private bool GetActiveUiInteractionUp()
		{
			return default(bool);
		}

		[Token(Token = "0x60019D7")]
		[Address(RVA = "0x10268E8", Offset = "0x10268E8", VA = "0x10268E8")]
		private Vector2 GetScrollInput()
		{
			return default(Vector2);
		}

		[Token(Token = "0x60019D8")]
		[Address(RVA = "0x1026928", Offset = "0x1026928", VA = "0x1026928")]
		private PointerEventData.FramePressState GetFrameInputState()
		{
			return default(PointerEventData.FramePressState);
		}

		[Token(Token = "0x60019D9")]
		[Address(RVA = "0x1026944", Offset = "0x1026944", VA = "0x1026944")]
		private PointerEventData.FramePressState StateForVrButton()
		{
			return default(PointerEventData.FramePressState);
		}

		[Token(Token = "0x60019DA")]
		[Address(RVA = "0x1026988", Offset = "0x1026988", VA = "0x1026988", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x60019DB")]
		[Address(RVA = "0x1026B00", Offset = "0x1026B00", VA = "0x1026B00")]
		protected void ProcessXREvent()
		{
		}

		[Token(Token = "0x60019DC")]
		[Address(RVA = "0x1026F64", Offset = "0x1026F64", VA = "0x1026F64", Slot = "29")]
		protected override void ProcessMove(PointerEventData pointerEvent)
		{
		}

		[Token(Token = "0x60019DD")]
		[Address(RVA = "0x1026CF0", Offset = "0x1026CF0", VA = "0x1026CF0")]
		protected MouseState GetVrPointerEventData()
		{
			return null;
		}

		[Token(Token = "0x60019DE")]
		[Address(RVA = "0x1026F80", Offset = "0x1026F80", VA = "0x1026F80", Slot = "30")]
		protected override void ProcessDrag(PointerEventData pointerEvent)
		{
		}

		[Token(Token = "0x60019DF")]
		[Address(RVA = "0x1027244", Offset = "0x1027244", VA = "0x1027244")]
		private static bool ShouldStartDrag(Vector2 pressPos, Vector2 currentPos, float threshold, bool useDragThreshold)
		{
			return default(bool);
		}

		[Token(Token = "0x60019E0")]
		[Address(RVA = "0x1027274", Offset = "0x1027274", VA = "0x1027274")]
		public InteractionHandler()
		{
		}
	}
	[Token(Token = "0x20005B4")]
	public class MousePointer
	{
		[Token(Token = "0x40023B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform transform;

		[Token(Token = "0x40023B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Camera camera;

		[Token(Token = "0x40023BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Ray ray;

		[Token(Token = "0x60019E1")]
		[Address(RVA = "0x10272DC", Offset = "0x10272DC", VA = "0x10272DC")]
		public MousePointer(Transform transform, Camera camera)
		{
		}

		[Token(Token = "0x60019E2")]
		[Address(RVA = "0x1027308", Offset = "0x1027308", VA = "0x1027308")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x20005B5")]
	public class PointerData
	{
		[Token(Token = "0x40023BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ControllerHand activeHand;

		[Token(Token = "0x40023BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform currentPointer;

		[Token(Token = "0x40023BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PointerReferences pointerReferences;

		[Token(Token = "0x40023BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 lastHitScreenPosition;

		[Token(Token = "0x40023BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IgnisTelemetry IgnisTelemetry;

		[Token(Token = "0x60019E3")]
		[Address(RVA = "0x102730C", Offset = "0x102730C", VA = "0x102730C")]
		public PointerData()
		{
		}
	}
	[Token(Token = "0x20005B6")]
	public class PointerHandler : ITickable
	{
		[Token(Token = "0x40023C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PointerData pointerData;

		[Token(Token = "0x40023C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly InputData inputData;

		[Token(Token = "0x40023C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DevicePlatform devicePlatform;

		[Token(Token = "0x40023C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Camera camera;

		[Token(Token = "0x40023C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Transform rightHandPointer;

		[Token(Token = "0x40023C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Transform leftHandPointer;

		[Token(Token = "0x40023C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly bool isDesktopMode;

		[Token(Token = "0x40023C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform mousePointer;

		[Token(Token = "0x60019E4")]
		[Address(RVA = "0x1027314", Offset = "0x1027314", VA = "0x1027314")]
		public PointerHandler(PointerData pointerData, InputData inputData, DevicePlatform devicePlatform, Camera camera, Transform rightHand, Transform leftHand)
		{
		}

		[Token(Token = "0x60019E5")]
		[Address(RVA = "0x1027378", Offset = "0x1027378", VA = "0x1027378")]
		public void SetupPointer(Transform anchor)
		{
		}

		[Token(Token = "0x60019E6")]
		[Address(RVA = "0x102743C", Offset = "0x102743C", VA = "0x102743C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60019E7")]
		[Address(RVA = "0x10275D8", Offset = "0x10275D8", VA = "0x10275D8")]
		private void ChangeActiveHand(ControllerHand hand)
		{
		}
	}
	[Token(Token = "0x20005B7")]
	public class PointerRaycastHandler : ITickable
	{
		[Token(Token = "0x40023C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly RaycastHit[] raycastHit;

		[Token(Token = "0x40023C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PointerRaycastHandlerSettings pointerRaycasterSettings;

		[Token(Token = "0x40023CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PointerData pointerData;

		[Token(Token = "0x40023CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Camera mainCamera;

		[Token(Token = "0x40023CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly DebugData debugData;

		[Token(Token = "0x40023CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x40023CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly PauseMenuData pauseMenuData;

		[Token(Token = "0x40023CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly SpectatorRequestViewData spectatorRequestViewData;

		[Token(Token = "0x40023D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly OnboardingGameStateData onboardingGameStateData;

		[Token(Token = "0x40023D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x40023D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x40023D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x40023D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool forceHidePointer;

		[Token(Token = "0x60019E8")]
		[Address(RVA = "0x102760C", Offset = "0x102760C", VA = "0x102760C")]
		public PointerRaycastHandler(Camera camera, PointerRaycastHandlerSettings pointerRaycasterSettings, PointerData pointerData, DebugData debugData, OnboardingGameStateData onboardingGameStateData, MatchHandlerData matchHandlerData, ArenaGameStateData arenaGameStateData, PauseMenuData pauseMenuData, SpectatorRequestViewData spectatorRequestViewData, AutoSpectateData autoSpectateData, EntryPoint.EntryPointData entryPointData)
		{
		}

		[Token(Token = "0x60019E9")]
		[Address(RVA = "0x1027718", Offset = "0x1027718", VA = "0x1027718")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x60019EA")]
		[Address(RVA = "0x102771C", Offset = "0x102771C", VA = "0x102771C", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x20005B8")]
	[CreateAssetMenu(menuName = "Settings/Pointer/PointerRaycasterSettings")]
	public class PointerRaycastHandlerSettings : ScriptableObject
	{
		[Token(Token = "0x40023D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask layer;

		[Token(Token = "0x40023D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float raycastDistance;

		[Token(Token = "0x40023D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color hitColor;

		[Token(Token = "0x40023D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color missColor;

		[Token(Token = "0x40023D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int numRaycastHits;

		[Token(Token = "0x40023DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public PointerReferences pointerReferences;

		[Token(Token = "0x60019EB")]
		[Address(RVA = "0x1027DD4", Offset = "0x1027DD4", VA = "0x1027DD4")]
		public PointerRaycastHandlerSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005B9")]
	public struct KeyboardRow
	{
		[Token(Token = "0x40023DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public KeyReference[] keys;
	}
	[Token(Token = "0x20005BA")]
	public class KeyboardFactory
	{
		[Token(Token = "0x40023DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string currentText;

		[Token(Token = "0x40023DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string captionText;

		[Token(Token = "0x60019EC")]
		[Address(RVA = "0x1027E20", Offset = "0x1027E20", VA = "0x1027E20")]
		public KeyboardFactory()
		{
		}
	}
	[Token(Token = "0x20005BB")]
	public class KeyReference : MonoBehaviour
	{
		[Token(Token = "0x40023DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button button;

		[Token(Token = "0x40023DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI text;

		[Token(Token = "0x60019ED")]
		[Address(RVA = "0x1027E70", Offset = "0x1027E70", VA = "0x1027E70")]
		public KeyReference()
		{
		}
	}
	[Token(Token = "0x20005BC")]
	public enum AccountManagementState
	{
		[Token(Token = "0x40023E1")]
		None,
		[Token(Token = "0x40023E2")]
		AccountMainMenu,
		[Token(Token = "0x40023E3")]
		LoginView,
		[Token(Token = "0x40023E4")]
		CreateUsernamePasswordForCustomIdUser,
		[Token(Token = "0x40023E5")]
		CreateNewAccount
	}
	[Token(Token = "0x20005BD")]
	public class AccountManagementViewHandler
	{
		[Token(Token = "0x40023E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly LoginData loginData;

		[Token(Token = "0x40023E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ILogin login;

		[Token(Token = "0x40023E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly VrKeyboardData vrKeyboardData;

		[Token(Token = "0x40023E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly DebugData debugData;

		[Token(Token = "0x40023EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AccountSettingsReference accountSettingsReference;

		[Token(Token = "0x40023EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool showingAccountSettings;

		[Token(Token = "0x40023EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string showingDisplayName;

		[Token(Token = "0x40023ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string currentUserName;

		[Token(Token = "0x40023EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AccountManagementState accountManagementState;

		[Token(Token = "0x40023EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private AccountManagementState nextState;

		[Token(Token = "0x40023F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private LoginData.AccountCreationState showingAccountCreationStatus;

		[Token(Token = "0x60019EE")]
		[Address(RVA = "0x1027E78", Offset = "0x1027E78", VA = "0x1027E78")]
		public AccountManagementViewHandler(LoginData loginData, ILogin login, VrKeyboardData vrKeyboardData, DebugData debugData)
		{
		}

		[Token(Token = "0x60019EF")]
		[Address(RVA = "0x1027EF4", Offset = "0x1027EF4", VA = "0x1027EF4")]
		[Conditional("IGNIS_DEBUG")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x60019F0")]
		[Address(RVA = "0x1028578", Offset = "0x1028578", VA = "0x1028578")]
		[Conditional("IGNIS_DEBUG")]
		public void Tick()
		{
		}

		[Token(Token = "0x60019F1")]
		[Address(RVA = "0x1028860", Offset = "0x1028860", VA = "0x1028860")]
		private void ShowEditField(string caption, TextMeshProUGUI fieldToUpdate)
		{
		}

		[Token(Token = "0x60019F2")]
		[Address(RVA = "0x1028A1C", Offset = "0x1028A1C", VA = "0x1028A1C")]
		private void ShowChangeDisplayName()
		{
		}

		[Token(Token = "0x60019F3")]
		[Address(RVA = "0x1028B90", Offset = "0x1028B90", VA = "0x1028B90")]
		private void Logout()
		{
		}

		[Token(Token = "0x60019F4")]
		[Address(RVA = "0x1028C54", Offset = "0x1028C54", VA = "0x1028C54")]
		private void Login()
		{
		}

		[Token(Token = "0x60019F5")]
		[Address(RVA = "0x1028D48", Offset = "0x1028D48", VA = "0x1028D48")]
		private void CancelInput()
		{
		}

		[Token(Token = "0x60019F6")]
		[Address(RVA = "0x1028D4C", Offset = "0x1028D4C", VA = "0x1028D4C")]
		private void ChangeDisplayName(string newDisplayName)
		{
		}

		[Token(Token = "0x60019F7")]
		[Address(RVA = "0x1028DE4", Offset = "0x1028DE4", VA = "0x1028DE4")]
		private void CreateUsernamePassword()
		{
		}

		[Token(Token = "0x60019F8")]
		[Address(RVA = "0x1029010", Offset = "0x1029010", VA = "0x1029010")]
		private void ChangeState(AccountManagementState newState)
		{
		}
	}
	[Token(Token = "0x20005BF")]
	public class AccountSettingsReference : MonoBehaviour
	{
		[Token(Token = "0x40023F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform rectTransform;

		[Token(Token = "0x40023F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button goToCreateLogin;

		[Token(Token = "0x40023F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button goToCreateNewAccount;

		[Token(Token = "0x40023F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button goToLogin;

		[Token(Token = "0x40023F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button currentAccountDisplayNameButton;

		[Token(Token = "0x40023F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI currentAccountDisplayNameText;

		[Token(Token = "0x40023F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Button createLoginUsername;

		[Token(Token = "0x40023F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Button createLoginPassword1;

		[Token(Token = "0x40023FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Button createLoginEmail;

		[Token(Token = "0x40023FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TextMeshProUGUI createLoginUsernameText;

		[Token(Token = "0x40023FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TextMeshProUGUI createLoginPassword1Text;

		[Token(Token = "0x40023FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TextMeshProUGUI createLoginEmailText;

		[Token(Token = "0x40023FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Button createLoginButton;

		[Token(Token = "0x40023FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Button cancelCreateLoginButton;

		[Token(Token = "0x4002400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Button logoutButton;

		[Token(Token = "0x4002401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Button loginUsername;

		[Token(Token = "0x4002402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public TextMeshProUGUI loginUsernameText;

		[Token(Token = "0x4002403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Button loginPassword;

		[Token(Token = "0x4002404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public TextMeshProUGUI loginPasswordText;

		[Token(Token = "0x4002405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Button loginButton;

		[Token(Token = "0x4002406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Button cancelLoginButton;

		[Token(Token = "0x4002407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public GameObject createAccountGroup;

		[Token(Token = "0x4002408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject loginGroup;

		[Token(Token = "0x4002409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public TextMeshProUGUI statusText;

		[Token(Token = "0x6001A05")]
		[Address(RVA = "0x10293D4", Offset = "0x10293D4", VA = "0x10293D4")]
		public AccountSettingsReference()
		{
		}
	}
	[Token(Token = "0x20005C0")]
	public class ObjectiveViewReference : MonoBehaviour
	{
		[Token(Token = "0x400240A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image doneImage;

		[Token(Token = "0x400240B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocalizedText descriptionText;

		[Token(Token = "0x6001A06")]
		[Address(RVA = "0x10293DC", Offset = "0x10293DC", VA = "0x10293DC")]
		public ObjectiveViewReference()
		{
		}
	}
	[Token(Token = "0x20005C1")]
	public class StageIconPrefabReference : MonoBehaviour
	{
		[Token(Token = "0x400240C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button portraitButton;

		[Token(Token = "0x400240D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject selectedBackgroundImage;

		[Token(Token = "0x400240E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image portraitImage;

		[Token(Token = "0x400240F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Image portraitImageLarge;

		[Token(Token = "0x4002410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Image mainBackgroundImage;

		[Token(Token = "0x4002411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Image completedImage;

		[Token(Token = "0x4002412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject isActive;

		[Token(Token = "0x4002413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject inactiveGameObject;

		[Token(Token = "0x4002414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ParticleSystem activeParticles;

		[Token(Token = "0x4002415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Color completedColor;

		[Token(Token = "0x6001A07")]
		[Address(RVA = "0x10293E4", Offset = "0x10293E4", VA = "0x10293E4")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001A08")]
		[Address(RVA = "0x1029468", Offset = "0x1029468", VA = "0x1029468")]
		public StageIconPrefabReference()
		{
		}
	}
	[Token(Token = "0x20005C2")]
	public class StoryActWidgetViewReference : MonoBehaviour
	{
		[Token(Token = "0x4002416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject mainContainer;

		[Token(Token = "0x4002417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI stagesStatusText;

		[Token(Token = "0x4002418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject gridContainer;

		[Token(Token = "0x4002419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RectTransform connectorBar;

		[Token(Token = "0x400241A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Canvas canvas;

		[Token(Token = "0x400241B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IgnisButton widgetButton;

		[Token(Token = "0x400241C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float anchorSizeDelta;

		[Token(Token = "0x6001A09")]
		[Address(RVA = "0x1029470", Offset = "0x1029470", VA = "0x1029470")]
		public StoryActWidgetViewReference()
		{
		}
	}
	[Token(Token = "0x20005C3")]
	public class StoryGuidedBubbleReference : MonoBehaviour
	{
		[Token(Token = "0x400241D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x400241E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject line;

		[Token(Token = "0x400241F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LocalizedText bubbleText;

		[Token(Token = "0x4002420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftAnchorPoint;

		[Token(Token = "0x4002421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rightAnchorPoint;

		[Token(Token = "0x4002422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform bottomAnchorPoint;

		[Token(Token = "0x6001A0A")]
		[Address(RVA = "0x1029478", Offset = "0x1029478", VA = "0x1029478")]
		public StoryGuidedBubbleReference()
		{
		}
	}
	[Token(Token = "0x20005C4")]
	public enum StoryGuidedState
	{
		[Token(Token = "0x4002424")]
		Inactive,
		[Token(Token = "0x4002425")]
		StoryDisguise,
		[Token(Token = "0x4002426")]
		ShopEquipCharacter,
		[Token(Token = "0x4002427")]
		ShopEquipModOpsSkin
	}
	[Token(Token = "0x20005C5")]
	public class StoryGuidedTutorialData
	{
		[Token(Token = "0x4002428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public StoryGuidedState storyGuidedState;

		[Token(Token = "0x6001A0B")]
		[Address(RVA = "0x1029480", Offset = "0x1029480", VA = "0x1029480")]
		public StoryGuidedTutorialData()
		{
		}
	}
	[Token(Token = "0x20005C6")]
	public class StoryGuidedTutorial : ITickable
	{
		[Token(Token = "0x4002429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x400242A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MenuStateSettings menuStateSettings;

		[Token(Token = "0x400242B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly StoryGuidedTutorialData storyGuidedTutorialData;

		[Token(Token = "0x400242C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x400242D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly StoryEventsSettings storyEventsSettings;

		[Token(Token = "0x400242E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly StoryMenuReference storyMenuReference;

		[Token(Token = "0x400242F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly StoryMenuData storyMenuData;

		[Token(Token = "0x4002430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly StoryData storyData;

		[Token(Token = "0x4002431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool shouldShow;

		[Token(Token = "0x4002432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private StoryGuidedBubbleReference storyGuidedBubbleReference;

		[Token(Token = "0x4002433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform bubbleTransform;

		[Token(Token = "0x4002434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lineTransform;

		[Token(Token = "0x4002435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float settingsRotation;

		[Token(Token = "0x4002436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private StoryGuidedState previousState;

		[Token(Token = "0x4002437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private MenuState previousMenuState;

		[Token(Token = "0x6001A0C")]
		[Address(RVA = "0x1029488", Offset = "0x1029488", VA = "0x1029488")]
		public StoryGuidedTutorial(MenuStateData menuStateData, MenuStateSettings menuStateSettings, StoryGuidedTutorialData storyGuidedTutorialData, CustomizationData customizationData, StoryEventsSettings storyEventsSettings, StoryMenuReference storyMenuReference, StoryMenuData storyMenuData, StoryData storyData)
		{
		}

		[Token(Token = "0x6001A0D")]
		[Address(RVA = "0x10294F0", Offset = "0x10294F0", VA = "0x10294F0")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001A0E")]
		[Address(RVA = "0x10295FC", Offset = "0x10295FC", VA = "0x10295FC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001A0F")]
		[Address(RVA = "0x10297EC", Offset = "0x10297EC", VA = "0x10297EC")]
		private bool CheckTauronStage()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A10")]
		[Address(RVA = "0x102993C", Offset = "0x102993C", VA = "0x102993C")]
		private void CheckShopEquipCharacter()
		{
		}

		[Token(Token = "0x6001A11")]
		[Address(RVA = "0x1029DE0", Offset = "0x1029DE0", VA = "0x1029DE0")]
		private void CheckShopEquipModOpsSkin()
		{
		}

		[Token(Token = "0x6001A12")]
		[Address(RVA = "0x1029B34", Offset = "0x1029B34", VA = "0x1029B34")]
		private void ShowShopEquipCharacter()
		{
		}

		[Token(Token = "0x6001A13")]
		[Address(RVA = "0x1029C24", Offset = "0x1029C24", VA = "0x1029C24")]
		private void ShowShopEquipModOpsSkin()
		{
		}

		[Token(Token = "0x6001A14")]
		[Address(RVA = "0x1029A4C", Offset = "0x1029A4C", VA = "0x1029A4C")]
		private void ShowStoryDisguise()
		{
		}

		[Token(Token = "0x6001A15")]
		[Address(RVA = "0x1029D14", Offset = "0x1029D14", VA = "0x1029D14")]
		private void SetLinePositionAndRotation()
		{
		}
	}
	[Token(Token = "0x20005C7")]
	public enum CampaingRewardType
	{
		[Token(Token = "0x4002439")]
		Skin,
		[Token(Token = "0x400243A")]
		Arena
	}
	[Token(Token = "0x20005C8")]
	public class StoryMenuData
	{
		[Token(Token = "0x400243B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Act currentSelectedAct;

		[Token(Token = "0x400243C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Stage currentSelectedStage;

		[Token(Token = "0x6001A16")]
		[Address(RVA = "0x1029F0C", Offset = "0x1029F0C", VA = "0x1029F0C")]
		public StoryMenuData()
		{
		}
	}
	[Token(Token = "0x20005C9")]
	public class StoryMenuViewHandler : ITickable
	{
		[Token(Token = "0x20005CC")]
		[CompilerGenerated]
		private sealed class <HandleCompleted>d__57 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002467")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002468")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002469")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public StoryMenuViewHandler <>4__this;

			[Token(Token = "0x400246A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int amountRewards;

			[Token(Token = "0x400246B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <i>5__2;

			[Token(Token = "0x400246C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private StoryRewardReference <storyRewardReference>5__3;

			[Token(Token = "0x17000108")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001A40")]
				[Address(RVA = "0x102E844", Offset = "0x102E844", VA = "0x102E844", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000109")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A42")]
				[Address(RVA = "0x102E88C", Offset = "0x102E88C", VA = "0x102E88C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A3D")]
			[Address(RVA = "0x102E3D4", Offset = "0x102E3D4", VA = "0x102E3D4")]
			[DebuggerHidden]
			public <HandleCompleted>d__57(int <>1__state)
			{
			}

			[Token(Token = "0x6001A3E")]
			[Address(RVA = "0x102E3FC", Offset = "0x102E3FC", VA = "0x102E3FC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001A3F")]
			[Address(RVA = "0x102E400", Offset = "0x102E400", VA = "0x102E400", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A41")]
			[Address(RVA = "0x102E84C", Offset = "0x102E84C", VA = "0x102E84C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400243D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x400243E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly StoryData storyData;

		[Token(Token = "0x400243F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x4002440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly StoryEventsSettings storyEventsSettings;

		[Token(Token = "0x4002441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CharacterSettings characterSettings;

		[Token(Token = "0x4002442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly CharacterData characterData;

		[Token(Token = "0x4002443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly StoryMenuData storyMenuData;

		[Token(Token = "0x4002444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x4002445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly BarEntranceData barEntranceData;

		[Token(Token = "0x4002446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly StoryGuidedTutorialData storyGuidedTutorialData;

		[Token(Token = "0x4002447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4002448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4002449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly SoundTriggersList soundTriggersList;

		[Token(Token = "0x400244A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly GlobalMatchmakingStateData globalMatchmakingStateData;

		[Token(Token = "0x400244B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x400244C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x400244D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private StoryMenuReference storyMenuReference;

		[Token(Token = "0x400244E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool showingView;

		[Token(Token = "0x400244F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float latestUpdateTimestamp;

		[Token(Token = "0x4002450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int currentSelectedStageIndex;

		[Token(Token = "0x4002451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly List<ObjectiveViewReference> objectiveViewReferences;

		[Token(Token = "0x4002452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly List<StoryRewardReference> storyRewardReferences;

		[Token(Token = "0x4002453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly List<StageIconPrefabReference> stageIconPrefabReferences;

		[Token(Token = "0x4002454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private string cachedActId;

		[Token(Token = "0x4002455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 cachedIconScale;

		[Token(Token = "0x4002456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private string currentlyActiveStageId;

		[Token(Token = "0x4002457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly Color cachedColor;

		[Token(Token = "0x4002458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool rewardsClaimed;

		[Token(Token = "0x4002459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		private bool argentiaClaimed;

		[Token(Token = "0x400245A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
		private bool isClaimingRewards;

		[Token(Token = "0x400245B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF3")]
		private bool haveBeenShown;

		[Token(Token = "0x400245C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private StoryGuidedState currentState;

		[Token(Token = "0x400245D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private (string, string, string) savedActAndStage;

		[Token(Token = "0x400245E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private bool buttonShouldBeInteractableAccodringToStoryState;

		[Token(Token = "0x400245F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x111")]
		private bool buttonIsInteractable;

		[Token(Token = "0x4002460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x112")]
		private bool forceShow;

		[Token(Token = "0x4002461")]
		private const string savedStageKey = "savedStage";

		[Token(Token = "0x4002462")]
		private const string savedActKey = "savedAct";

		[Token(Token = "0x4002463")]
		private const string savedHasAdvancedKey = "hasAdvanced";

		[Token(Token = "0x6001A17")]
		[Address(RVA = "0x1029F14", Offset = "0x1029F14", VA = "0x1029F14")]
		public StoryMenuViewHandler(MenuStateData menuStateData, StoryData storyData, LockerRoomGameStateData lockerRoomGameStateData, StoryEventsSettings storyEventsSettings, CharacterSettings characterSettings, CharacterData characterData, StoryMenuData storyMenuData, CustomizationData customizationData, BarEntranceData barEntranceData, StoryGuidedTutorialData storyGuidedTutorialData, IgnisSoundTriggerData ignisSoundTriggerData, IRoomTimeProvider roomTimeProvider, SoundTriggersList soundTriggersList, GlobalMatchmakingStateData globalMatchmakingStateData, LocalPersistentData localPersistentData, PersistantDataUtility persistantDataUtility)
		{
		}

		[Token(Token = "0x6001A18")]
		[Address(RVA = "0x102A0DC", Offset = "0x102A0DC", VA = "0x102A0DC")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6001A19")]
		[Address(RVA = "0x102A3B0", Offset = "0x102A3B0", VA = "0x102A3B0")]
		private void PoolObjectivesRefs(int amount)
		{
		}

		[Token(Token = "0x6001A1A")]
		[Address(RVA = "0x102A4EC", Offset = "0x102A4EC", VA = "0x102A4EC")]
		private void PoolRewardsRefs(int amount)
		{
		}

		[Token(Token = "0x6001A1B")]
		[Address(RVA = "0x102A63C", Offset = "0x102A63C", VA = "0x102A63C")]
		private void SetUpStagesProgressionBox(int centerPrefabSplit, int rightPrefabSplit)
		{
		}

		[Token(Token = "0x6001A1C")]
		[Address(RVA = "0x102A960", Offset = "0x102A960", VA = "0x102A960")]
		private void UpdateCampaignSelectionTab()
		{
		}

		[Token(Token = "0x6001A1D")]
		[Address(RVA = "0x102AB18", Offset = "0x102AB18", VA = "0x102AB18")]
		private void OnSelectStage(string stageId)
		{
		}

		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0x102AD54", Offset = "0x102AD54", VA = "0x102AD54")]
		private void UpdateStageAndObjectivesInfo()
		{
		}

		[Token(Token = "0x6001A1F")]
		[Address(RVA = "0x102B194", Offset = "0x102B194", VA = "0x102B194")]
		private void UpdateActionButton()
		{
		}

		[Token(Token = "0x6001A20")]
		[Address(RVA = "0x102B798", Offset = "0x102B798", VA = "0x102B798")]
		private void RefreshDataFromButton()
		{
		}

		[Token(Token = "0x6001A21")]
		[Address(RVA = "0x102B7FC", Offset = "0x102B7FC", VA = "0x102B7FC")]
		private void SetWhichLiveStageId()
		{
		}

		[Token(Token = "0x6001A22")]
		[Address(RVA = "0x102B81C", Offset = "0x102B81C", VA = "0x102B81C")]
		private void UpdateTargetInfo()
		{
		}

		[Token(Token = "0x6001A23")]
		[Address(RVA = "0x102B9B4", Offset = "0x102B9B4", VA = "0x102B9B4")]
		private void UpdateRewardsBox()
		{
		}

		[Token(Token = "0x6001A24")]
		[Address(RVA = "0x102C374", Offset = "0x102C374", VA = "0x102C374")]
		private void UpdateCampaignProgressionBox()
		{
		}

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0x102C848", Offset = "0x102C848", VA = "0x102C848")]
		private void GenerateCampaignProgessionBox(int stagesAmount)
		{
		}

		[Token(Token = "0x6001A26")]
		[Address(RVA = "0x102C984", Offset = "0x102C984", VA = "0x102C984")]
		private void SetCampaingProgressionBoxGridData(CampaignViewSettings.StageProgressionBarGridValues currentGridData)
		{
		}

		[Token(Token = "0x6001A27")]
		[Address(RVA = "0x102CBA4", Offset = "0x102CBA4", VA = "0x102CBA4", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001A28")]
		[Address(RVA = "0x102ABB8", Offset = "0x102ABB8", VA = "0x102ABB8")]
		private void RefreshData([Optional] Act act, [Optional] string stageId)
		{
		}

		[Token(Token = "0x6001A29")]
		[Address(RVA = "0x102C2FC", Offset = "0x102C2FC", VA = "0x102C2FC")]
		[IteratorStateMachine(typeof(<HandleCompleted>d__57))]
		private IEnumerator HandleCompleted(int amountRewards)
		{
			return null;
		}

		[Token(Token = "0x6001A2A")]
		[Address(RVA = "0x102CD54", Offset = "0x102CD54", VA = "0x102CD54")]
		private void SetActData(Act act, string stageId)
		{
		}

		[Token(Token = "0x6001A2B")]
		[Address(RVA = "0x102CE6C", Offset = "0x102CE6C", VA = "0x102CE6C")]
		private void SavePlayerPrefs()
		{
		}

		[Token(Token = "0x6001A2C")]
		[Address(RVA = "0x102C218", Offset = "0x102C218", VA = "0x102C218")]
		private StoryEventSettings GetLocalObjectiveSettings(string objectiveId)
		{
			return null;
		}

		[Token(Token = "0x6001A2D")]
		[Address(RVA = "0x102CF88", Offset = "0x102CF88", VA = "0x102CF88")]
		private Stage GetLiveStageData(string stageId)
		{
			return null;
		}

		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0x102B0A0", Offset = "0x102B0A0", VA = "0x102B0A0")]
		private bool isObjectiveCompleted(string objectiveId)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A2F")]
		[Address(RVA = "0x102B63C", Offset = "0x102B63C", VA = "0x102B63C")]
		private bool isOnlineStageCompleted(string stageId)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A30")]
		[Address(RVA = "0x102B90C", Offset = "0x102B90C", VA = "0x102B90C")]
		private CharacterItem GetCharacterItem(Objective currentObjective)
		{
			return null;
		}

		[Token(Token = "0x6001A31")]
		[Address(RVA = "0x102B594", Offset = "0x102B594", VA = "0x102B594")]
		private StoryEventSettings GetLiveObjectiveSettings()
		{
			return null;
		}

		[Token(Token = "0x6001A32")]
		[Address(RVA = "0x102D06C", Offset = "0x102D06C", VA = "0x102D06C")]
		private StoryEventSettings GetObjectiveSettings(string objectiveId)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20005D0")]
	public class CampaignViewSettings
	{
		[Serializable]
		[Token(Token = "0x20005D1")]
		public class BossReward
		{
			[Token(Token = "0x4002477")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string objectiveId;

			[Token(Token = "0x4002478")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public CampaingRewardType RewardType;

			[Token(Token = "0x6001A4A")]
			[Address(RVA = "0x102E92C", Offset = "0x102E92C", VA = "0x102E92C")]
			public BossReward()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20005D2")]
		public class StageProgressionBarGridValues
		{
			[Token(Token = "0x4002479")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int stagesAmount;

			[Token(Token = "0x400247A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int leftPrefabSplit;

			[Token(Token = "0x400247B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int rightPrefabSplit;

			[Token(Token = "0x400247C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int connectorLeftSize;

			[Token(Token = "0x400247D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int connectorRightSize;

			[Token(Token = "0x400247E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int spacingLeft;

			[Token(Token = "0x400247F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int spacingRight;

			[Token(Token = "0x4002480")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int paddingLeft;

			[Token(Token = "0x4002481")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int paddingRight;

			[Token(Token = "0x6001A4B")]
			[Address(RVA = "0x102E934", Offset = "0x102E934", VA = "0x102E934")]
			public StageProgressionBarGridValues()
			{
			}
		}

		[Token(Token = "0x4002470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public StageIconPrefabReference stageIconPrefabReference;

		[Token(Token = "0x4002471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Special Rewards")]
		public BossReward[] bossRewards;

		[Token(Token = "0x4002472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Icons")]
		public UnityEngine.Sprite blastIcon;

		[Token(Token = "0x4002473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Sprite fremIcon;

		[Token(Token = "0x4002474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Sprite heroIcon;

		[Token(Token = "0x4002475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Stage Progression Bar Data")]
		public float widgetIconSizeDelta;

		[Token(Token = "0x4002476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public StageProgressionBarGridValues[] stageProgressionBarGridValues;

		[Token(Token = "0x6001A49")]
		[Address(RVA = "0x102E918", Offset = "0x102E918", VA = "0x102E918")]
		public CampaignViewSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005D3")]
	public class StoryGuidedTutorialSettings
	{
		[Token(Token = "0x4002482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float storyDisguiseRotation;

		[Token(Token = "0x4002483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float shopEquipCharacterRotation;

		[Token(Token = "0x4002484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float shopEquipModOpsSkinRotation;

		[Token(Token = "0x4002485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<string> modOpsIds;

		[Token(Token = "0x4002486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<string> modOpsSkinIds;

		[Token(Token = "0x6001A4C")]
		[Address(RVA = "0x102E93C", Offset = "0x102E93C", VA = "0x102E93C")]
		public StoryGuidedTutorialSettings()
		{
		}
	}
	[Token(Token = "0x20005D4")]
	public class StoryRewardReference : MonoBehaviour
	{
		[Token(Token = "0x4002487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image rewardIcon;

		[Token(Token = "0x4002488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocalizedText claimedText;

		[Token(Token = "0x4002489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject claimedState;

		[Token(Token = "0x400248A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem claimingEffect;

		[Token(Token = "0x6001A4D")]
		[Address(RVA = "0x102E950", Offset = "0x102E950", VA = "0x102E950")]
		public StoryRewardReference()
		{
		}
	}
	[Token(Token = "0x20005D5")]
	public class StoryWidgetViewHandler : ITickable
	{
		[Token(Token = "0x400248B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly StoryEventsSettings storyEventsSettings;

		[Token(Token = "0x400248C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x400248D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly CharacterSettings characterSettings;

		[Token(Token = "0x400248E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly DuelSettingsViewData duelSettingsViewData;

		[Token(Token = "0x400248F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly StoryData storyData;

		[Token(Token = "0x4002490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly StoryMenuData storyMenuData;

		[Token(Token = "0x4002491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x4002492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private StoryActWidgetViewReference storyActWidgetViewReference;

		[Token(Token = "0x4002493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private StageIconPrefabReference stageIconPrefabReference;

		[Token(Token = "0x4002494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool showingStoryWidget;

		[Token(Token = "0x4002495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 cachedIconSize;

		[Token(Token = "0x4002496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float cachedBarOffset;

		[Token(Token = "0x4002497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly List<StageIconPrefabReference> activeGridReferences;

		[Token(Token = "0x4002498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly List<int> skinIndexes;

		[Token(Token = "0x4002499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string currentCachedActId;

		[Token(Token = "0x400249A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly Color cachedColor;

		[Token(Token = "0x400249B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool interactionIsBlocked;

		[Token(Token = "0x6001A4E")]
		[Address(RVA = "0x102E958", Offset = "0x102E958", VA = "0x102E958")]
		public StoryWidgetViewHandler(StoryEventsSettings storyEventsSettings, MenuStateData menuStateData, CharacterSettings characterSettings, DuelSettingsViewData duelSettingsViewData, StoryData storyData, StoryMenuData storyMenuData, CustomizationData customizationData)
		{
		}

		[Token(Token = "0x6001A4F")]
		[Address(RVA = "0x102EA70", Offset = "0x102EA70", VA = "0x102EA70")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6001A50")]
		[Address(RVA = "0x102EBD4", Offset = "0x102EBD4", VA = "0x102EBD4")]
		private void PoolWidgetIcons(int amount)
		{
		}

		[Token(Token = "0x6001A51")]
		[Address(RVA = "0x102EE98", Offset = "0x102EE98", VA = "0x102EE98")]
		private void OpenCampaignMenu()
		{
		}

		[Token(Token = "0x6001A52")]
		[Address(RVA = "0x102EEB8", Offset = "0x102EEB8", VA = "0x102EEB8")]
		private void RefreshWidget()
		{
		}

		[Token(Token = "0x6001A53")]
		[Address(RVA = "0x102F2E4", Offset = "0x102F2E4", VA = "0x102F2E4")]
		private void CacheSkinIndex()
		{
		}

		[Token(Token = "0x6001A54")]
		[Address(RVA = "0x102F5F0", Offset = "0x102F5F0", VA = "0x102F5F0", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001A55")]
		[Address(RVA = "0x102F50C", Offset = "0x102F50C", VA = "0x102F50C")]
		private StoryEventSettings GetLocalObjectiveSettings(string objectiveId)
		{
			return null;
		}

		[Token(Token = "0x6001A56")]
		[Address(RVA = "0x102F6CC", Offset = "0x102F6CC", VA = "0x102F6CC")]
		private void SetActive(bool isActive)
		{
		}
	}
	[Token(Token = "0x20005D7")]
	[CreateAssetMenu(fileName = "ArenaItemSettings", menuName = "Settings/Item/ArenaItemSettings")]
	public class ArenaItemSettings : ScriptableObject
	{
		[Token(Token = "0x400249D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SceneCustomizationItem[] sceneItems;

		[Token(Token = "0x1700010A")]
		public List<string> ClassicScenes
		{
			[Token(Token = "0x6001A59")]
			[Address(RVA = "0x102F750", Offset = "0x102F750", VA = "0x102F750")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A5A")]
			[Address(RVA = "0x102F758", Offset = "0x102F758", VA = "0x102F758")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700010B")]
		public List<string> ShootOutScenes
		{
			[Token(Token = "0x6001A5B")]
			[Address(RVA = "0x102F760", Offset = "0x102F760", VA = "0x102F760")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A5C")]
			[Address(RVA = "0x102F768", Offset = "0x102F768", VA = "0x102F768")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700010C")]
		public List<string> WinterClassicScenes
		{
			[Token(Token = "0x6001A5D")]
			[Address(RVA = "0x102F770", Offset = "0x102F770", VA = "0x102F770")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A5E")]
			[Address(RVA = "0x102F778", Offset = "0x102F778", VA = "0x102F778")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700010D")]
		public List<string> ScrapperShootoutScenes
		{
			[Token(Token = "0x6001A5F")]
			[Address(RVA = "0x102F780", Offset = "0x102F780", VA = "0x102F780")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A60")]
			[Address(RVA = "0x102F788", Offset = "0x102F788", VA = "0x102F788")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001A61")]
		[Address(RVA = "0x102F790", Offset = "0x102F790", VA = "0x102F790")]
		public void SetSceneIds()
		{
		}

		[Token(Token = "0x6001A62")]
		[Address(RVA = "0x102FC88", Offset = "0x102FC88", VA = "0x102FC88")]
		public List<string> GetScenesId(GameplayRules gameplayRules)
		{
			return null;
		}

		[Token(Token = "0x6001A63")]
		[Address(RVA = "0x102FE9C", Offset = "0x102FE9C", VA = "0x102FE9C")]
		public ArenaItemSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005DA")]
	public class SceneCustomizationItem : Item
	{
		[Token(Token = "0x40024A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Space(10f)]
		public SceneId sceneId;

		[Token(Token = "0x40024AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Views used when spectating a match or replaying a match in-game")]
		public SpectatorView[] spectatorViews;

		[Token(Token = "0x40024AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Views used when using the AutoSpectator streaming client")]
		public SpectatorView[] autoSpectatorViews;

		[Token(Token = "0x6001A6C")]
		[Address(RVA = "0x102FF50", Offset = "0x102FF50", VA = "0x102FF50")]
		public SceneCustomizationItem()
		{
		}
	}
	[Token(Token = "0x20005DB")]
	[CreateAssetMenu(fileName = "BannerSettings", menuName = "Settings/Items/BannerSettings", order = 2)]
	public class BannerSettings : ScriptableObject
	{
		[Token(Token = "0x40024AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BannerItem[] bannerItems;

		[Token(Token = "0x6001A6D")]
		[Address(RVA = "0x102FFAC", Offset = "0x102FFAC", VA = "0x102FFAC")]
		public BannerSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005DC")]
	public class BannerItem : Item
	{
		[Token(Token = "0x40024AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string characterId;

		[Token(Token = "0x40024AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Material bannerMaterial;

		[Token(Token = "0x6001A6E")]
		[Address(RVA = "0x102FFB4", Offset = "0x102FFB4", VA = "0x102FFB4")]
		public BannerItem()
		{
		}
	}
	[Token(Token = "0x20005DD")]
	public class CharacterInformationReference : MonoBehaviour
	{
		[Token(Token = "0x40024AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x40024B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject meshParent;

		[Token(Token = "0x40024B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI characterName;

		[Token(Token = "0x40024B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI characterDescription;

		[Token(Token = "0x40024B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button player1ColorButton;

		[Token(Token = "0x40024B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Button player2ColorButton;

		[Token(Token = "0x40024B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject lockedImage;

		[Token(Token = "0x40024B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshProUGUI lockedText;

		[Token(Token = "0x40024B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Camera mirrorCamera;

		[Token(Token = "0x6001A6F")]
		[Address(RVA = "0x102FFB8", Offset = "0x102FFB8", VA = "0x102FFB8")]
		public CharacterInformationReference()
		{
		}
	}
	[Token(Token = "0x20005DE")]
	public class CharacterInformationViewHandler : ITickable
	{
		[Token(Token = "0x40024B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x40024B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x40024BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly CharacterData characterData;

		[Token(Token = "0x40024BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayerReferences localPlayerRef;

		[Token(Token = "0x40024BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CharacterViewData characterViewData;

		[Token(Token = "0x40024BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x40024BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly BayTekCharacterChoiceViewReference bayTekCharacterChoiceViewReference;

		[Token(Token = "0x40024BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CharacterInformationReference characterInformationReference;

		[Token(Token = "0x40024C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool showingViewHandler;

		[Token(Token = "0x40024C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool mirrorInitialized;

		[Token(Token = "0x40024C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private CharacterItem selectedCharacterSkin;

		[Token(Token = "0x40024C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float lastSeenOwnershipUpdateTimeStamp;

		[Token(Token = "0x6001A70")]
		[Address(RVA = "0x102FFC0", Offset = "0x102FFC0", VA = "0x102FFC0")]
		public CharacterInformationViewHandler(CustomizationData customizationData, MenuStateData menuStateData, CharacterData characterData, PlayerReferences localPlayerRef, CharacterViewData characterViewData, BayTekData bayTekData)
		{
		}

		[Token(Token = "0x6001A71")]
		[Address(RVA = "0x1030014", Offset = "0x1030014", VA = "0x1030014")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001A72")]
		[Address(RVA = "0x10301A8", Offset = "0x10301A8", VA = "0x10301A8")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001A73")]
		[Address(RVA = "0x10301B0", Offset = "0x10301B0", VA = "0x10301B0")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001A74")]
		[Address(RVA = "0x10301B4", Offset = "0x10301B4", VA = "0x10301B4")]
		private void ToggleMirrorCamera(bool enabled)
		{
		}

		[Token(Token = "0x6001A75")]
		[Address(RVA = "0x10301DC", Offset = "0x10301DC", VA = "0x10301DC")]
		private void SetMirrorFov(float value)
		{
		}

		[Token(Token = "0x6001A76")]
		[Address(RVA = "0x1030138", Offset = "0x1030138", VA = "0x1030138")]
		private void SetViewActive(bool isActive)
		{
		}

		[Token(Token = "0x6001A77")]
		[Address(RVA = "0x1030200", Offset = "0x1030200", VA = "0x1030200", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001A78")]
		[Address(RVA = "0x1030544", Offset = "0x1030544", VA = "0x1030544")]
		private void SetPlayerColor(bool playerOneColor)
		{
		}

		[Token(Token = "0x6001A79")]
		[Address(RVA = "0x1030564", Offset = "0x1030564", VA = "0x1030564")]
		private void UpdateCharacter()
		{
		}

		[Token(Token = "0x6001A7A")]
		[Address(RVA = "0x1030608", Offset = "0x1030608", VA = "0x1030608")]
		private int GetCharacterItem()
		{
			return default(int);
		}

		[Token(Token = "0x6001A7B")]
		[Address(RVA = "0x103036C", Offset = "0x103036C", VA = "0x103036C")]
		private void ShowInformation(CharacterItem characterItem)
		{
		}
	}
	[Token(Token = "0x20005DF")]
	public class CharacterSelectIconReference : MonoBehaviour
	{
		[Token(Token = "0x40024C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image icon;

		[Token(Token = "0x40024C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button button;

		[Token(Token = "0x6001A7E")]
		[Address(RVA = "0x10306A8", Offset = "0x10306A8", VA = "0x10306A8")]
		public CharacterSelectIconReference()
		{
		}
	}
	[Token(Token = "0x20005E0")]
	public class CharacterViewData
	{
		[Token(Token = "0x40024C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CharacterItem selectedCharacterSkin;

		[Token(Token = "0x6001A7F")]
		[Address(RVA = "0x10306B0", Offset = "0x10306B0", VA = "0x10306B0")]
		public CharacterViewData()
		{
		}
	}
	[Token(Token = "0x20005E1")]
	public class CharacterSkinViewHandler : ITickable
	{
		[Token(Token = "0x40024C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly CharacterSkinViewSettings settings;

		[Token(Token = "0x40024C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x40024C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x40024CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ItemGridViewHandlerData itemGridViewHandlerData;

		[Token(Token = "0x40024CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ShopData shopData;

		[Token(Token = "0x40024CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly CharacterViewData characterViewData;

		[Token(Token = "0x40024CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ItemGridData itemGridData;

		[Token(Token = "0x40024CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CharacterSkinViewReference characterSkinViewReference;

		[Token(Token = "0x40024CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool showingView;

		[Token(Token = "0x40024D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private CharacterItem selectedCharacter;

		[Token(Token = "0x40024D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<CharacterItem> availableSkins;

		[Token(Token = "0x40024D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Locale locale;

		[Token(Token = "0x40024D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int selectedSkinIndex;

		[Token(Token = "0x40024D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float lastSeenOwnershipUpdateTimeStamp;

		[Token(Token = "0x6001A80")]
		[Address(RVA = "0x10306B8", Offset = "0x10306B8", VA = "0x10306B8")]
		public CharacterSkinViewHandler(CharacterSkinViewSettings settings, MenuStateData menuStateData, CustomizationData customizationData, ItemGridViewHandlerData itemGridViewHandlerData, ShopData shopData, CharacterViewData characterViewData)
		{
		}

		[Token(Token = "0x6001A81")]
		[Address(RVA = "0x1030988", Offset = "0x1030988", VA = "0x1030988")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001A82")]
		[Address(RVA = "0x1030CC0", Offset = "0x1030CC0", VA = "0x1030CC0")]
		public void LoadDone()
		{
		}

		[Token(Token = "0x6001A83")]
		[Address(RVA = "0x1030C98", Offset = "0x1030C98", VA = "0x1030C98")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001A84")]
		[Address(RVA = "0x1030CC8", Offset = "0x1030CC8", VA = "0x1030CC8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001A85")]
		[Address(RVA = "0x1030EFC", Offset = "0x1030EFC", VA = "0x1030EFC")]
		private void SelectTheFirstItem()
		{
		}

		[Token(Token = "0x6001A86")]
		[Address(RVA = "0x1030F20", Offset = "0x1030F20", VA = "0x1030F20")]
		private void UpdateAvailableSkins(string characterId)
		{
		}

		[Token(Token = "0x6001A87")]
		[Address(RVA = "0x103137C", Offset = "0x103137C", VA = "0x103137C")]
		private void UpdateIcons()
		{
		}

		[Token(Token = "0x6001A88")]
		[Address(RVA = "0x103117C", Offset = "0x103117C", VA = "0x103117C")]
		private void UpdateInteractionButton()
		{
		}

		[Token(Token = "0x6001A89")]
		[Address(RVA = "0x10315E0", Offset = "0x10315E0", VA = "0x10315E0")]
		private void HandleButtonInteraction()
		{
		}

		[Token(Token = "0x6001A8A")]
		[Address(RVA = "0x10314A0", Offset = "0x10314A0", VA = "0x10314A0")]
		private void UpdateIconReference(ItemIconReference icon, CharacterItem item, ItemOwnership ownership)
		{
		}
	}
	[Token(Token = "0x20005E2")]
	public class CharacterSkinViewReference : MonoBehaviour
	{
		[Token(Token = "0x40024D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x40024D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ItemGridReference itemGridReference;

		[Token(Token = "0x40024D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RectTransform contentTransform;

		[Token(Token = "0x6001A8B")]
		[Address(RVA = "0x10316F0", Offset = "0x10316F0", VA = "0x10316F0")]
		public CharacterSkinViewReference()
		{
		}
	}
	[Token(Token = "0x20005E3")]
	[CreateAssetMenu(fileName = "CharacterSkinViewSettings", menuName = "Settings/Player/CharacterSkinViewSettings")]
	public class CharacterSkinViewSettings : ScriptableObject
	{
		[Token(Token = "0x40024D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemGridSetting itemGridSetting;

		[Token(Token = "0x40024D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ItemIconReference itemIconReference;

		[Token(Token = "0x40024DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string swapItemLocalizationId;

		[Token(Token = "0x40024DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CharacterSkinViewReference characterSkinViewReference;

		[Token(Token = "0x40024DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IconSpriteStateSettings defaultIconStates;

		[Token(Token = "0x6001A8C")]
		[Address(RVA = "0x10316F8", Offset = "0x10316F8", VA = "0x10316F8")]
		public CharacterSkinViewSettings()
		{
		}
	}
	[Token(Token = "0x20005E4")]
	public class CoinItemIconReference : ItemIconReference
	{
		[Token(Token = "0x40024DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TextMeshProUGUI reward;

		[Token(Token = "0x6001A8D")]
		[Address(RVA = "0x1031700", Offset = "0x1031700", VA = "0x1031700")]
		public CoinItemIconReference()
		{
		}
	}
	[Token(Token = "0x20005E5")]
	[CreateAssetMenu(fileName = "CoinItemSettings", menuName = "Settings/Item/CoinItemSettings")]
	public class CoinItemSettings : ScriptableObject
	{
		[Token(Token = "0x40024DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemGridSetting itemGridSetting;

		[Token(Token = "0x40024DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IconSpriteStateSettings iconSpriteStates;

		[Token(Token = "0x40024E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CoinItem[] premiumCoinItems;

		[Token(Token = "0x40024E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CoinItem[] inGameCoinItems;

		[Token(Token = "0x40024E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public CoinItemIconReference itemIconReference;

		[Token(Token = "0x40024E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int startInGameCoins;

		[Token(Token = "0x40024E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float transactionTimeoutInMs;

		[Token(Token = "0x6001A8E")]
		[Address(RVA = "0x1031708", Offset = "0x1031708", VA = "0x1031708")]
		public CoinItemSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005E6")]
	public class CoinItem
	{
		[Token(Token = "0x40024E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string id;

		[Token(Token = "0x40024E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Sprite icon;

		[Token(Token = "0x40024E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public int price;

		[Token(Token = "0x40024E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public string formattedPrice;

		[Token(Token = "0x40024E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int coinsToReceive;

		[Token(Token = "0x40024EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public bool isPremium;

		[Token(Token = "0x6001A8F")]
		[Address(RVA = "0x1031720", Offset = "0x1031720", VA = "0x1031720")]
		public CoinItem()
		{
		}
	}
	[Token(Token = "0x20005E7")]
	public class CustomizationData
	{
		[Token(Token = "0x40024EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<string, Item> itemLookup;

		[Token(Token = "0x40024EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<ToolName, string> activeToolItems;

		[Token(Token = "0x40024ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<string, List<CharacterItem>> characterSkinGroups;

		[Token(Token = "0x40024EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dictionary<ToolName, List<ToolCustomizationItem>> toolCustomizationGroups;

		[Token(Token = "0x40024EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<string, List<Item>> itemPackGroups;

		[Token(Token = "0x40024F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<string> activeItems;

		[Token(Token = "0x40024F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Dictionary<string, int> itemToNetworkId;

		[Token(Token = "0x40024F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Dictionary<string, ItemOwnership> itemOwnership;

		[Token(Token = "0x40024F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ItemGridData itemGridData;

		[Token(Token = "0x40024F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Item selectedItem;

		[Token(Token = "0x40024F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float itemOwnershipUpdateTimeStamp;

		[Token(Token = "0x40024F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Dictionary<ItemType, int> activeIndexLookup;

		[Token(Token = "0x40024F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public CustomizationViewReference customizationViewReference;

		[Token(Token = "0x40024F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public BayTekCharacterChoiceViewReference bayTekCharacterChoiceViewReference;

		[Token(Token = "0x40024F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool isViewInCustomizationMode;

		[Token(Token = "0x40024FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Queue<string[]> setActiveItemsRequest;

		[Token(Token = "0x40024FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Queue<List<RG.Ignis.PlayFab.ToolCustomizationItem>> setActiveToolItemsRequest;

		[Token(Token = "0x40024FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Queue<Item> setActiveItemFromClientRequest;

		[Token(Token = "0x40024FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Queue<ToolCustomizationItem> setActiveToolItemFromClientRequest;

		[Token(Token = "0x40024FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool activeItemsHaveLocalModifications;

		[Token(Token = "0x6001A90")]
		[Address(RVA = "0x1031728", Offset = "0x1031728", VA = "0x1031728")]
		public CustomizationData()
		{
		}
	}
	[Token(Token = "0x20005E8")]
	public class CustomizationHandler : ITickable
	{
		[Token(Token = "0x40024FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly CustomizationSettings customizationSettings;

		[Token(Token = "0x4002500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly CharacterSettings characterSettings;

		[Token(Token = "0x4002501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PlatformSettings platformSettings;

		[Token(Token = "0x4002502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly BannerSettings bannerSettings;

		[Token(Token = "0x4002503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CharacterData characterData;

		[Token(Token = "0x4002504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly BannerData bannerData;

		[Token(Token = "0x4002505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly PlatformData platformData;

		[Token(Token = "0x4002506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly GameData gameData;

		[Token(Token = "0x4002507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly GameDesignTrackingData gameDesignTrackingData;

		[Token(Token = "0x4002508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly ToolCustomizationSettings toolCustomizationSettings;

		[Token(Token = "0x4002509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly PackItemSettings packItemSettings;

		[Token(Token = "0x400250A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly ArenaItemSettings arenaItemSettings;

		[Token(Token = "0x400250B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x400250C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly SceneHandlerSettings sceneHandlerSettings;

		[Token(Token = "0x400250D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly Dictionary<string, Item> itemLookup;

		[Token(Token = "0x400250E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly List<string> activeItems;

		[Token(Token = "0x400250F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly Dictionary<string, ItemOwnership> itemOwnership;

		[Token(Token = "0x4002510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly Dictionary<string, int> itemToNetworkId;

		[Token(Token = "0x4002511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly Dictionary<ItemType, int> activeIndexLookup;

		[Token(Token = "0x4002512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private CustomizationData customizationData;

		[Token(Token = "0x6001A91")]
		[Address(RVA = "0x10319D4", Offset = "0x10319D4", VA = "0x10319D4")]
		public CustomizationHandler(CustomizationData customizationData, CustomizationSettings customizationSettings, CharacterSettings characterSettings, CharacterData characterData, BannerData bannerData, PlatformData platformData, GameData gameData, GameDesignTrackingData gameDesignTrackingData, ToolCustomizationSettings toolCustomizationSettings, PackItemSettings packItemSettings, ArenaItemSettings arenaItemSettings, ArenaGameStateData arenaGameStateData, SceneHandlerSettings sceneHandlerSettings)
		{
		}

		[Token(Token = "0x6001A92")]
		[Address(RVA = "0x1032368", Offset = "0x1032368", VA = "0x1032368")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001A93")]
		[Address(RVA = "0x1032678", Offset = "0x1032678", VA = "0x1032678")]
		private void ReplaceActiveItems(string character, string platform, string banner)
		{
		}

		[Token(Token = "0x6001A94")]
		[Address(RVA = "0x103279C", Offset = "0x103279C", VA = "0x103279C")]
		private void ReplaceActiveItemsWithRandom()
		{
		}

		[Token(Token = "0x6001A95")]
		[Address(RVA = "0x1032958", Offset = "0x1032958", VA = "0x1032958", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001A96")]
		[Address(RVA = "0x1032ADC", Offset = "0x1032ADC", VA = "0x1032ADC")]
		private void SetNewActiveList(string[] newActiveList)
		{
		}

		[Token(Token = "0x6001A97")]
		[Address(RVA = "0x1032C10", Offset = "0x1032C10", VA = "0x1032C10")]
		private void SetNewActiveItemFromClient(Item item)
		{
		}

		[Token(Token = "0x6001A98")]
		[Address(RVA = "0x10331A4", Offset = "0x10331A4", VA = "0x10331A4")]
		private void MarkOwnerShipModified()
		{
		}

		[Token(Token = "0x6001A99")]
		[Address(RVA = "0x1032CDC", Offset = "0x1032CDC", VA = "0x1032CDC")]
		private void SetNewActiveToolList(List<RG.Ignis.PlayFab.ToolCustomizationItem> newActiveList)
		{
		}

		[Token(Token = "0x6001A9A")]
		[Address(RVA = "0x1032E88", Offset = "0x1032E88", VA = "0x1032E88")]
		private void SetNewActiveToolItemFromClient(ToolCustomizationItem toolItem)
		{
		}

		[Token(Token = "0x6001A9B")]
		[Address(RVA = "0x1033330", Offset = "0x1033330", VA = "0x1033330")]
		private void SetToolItem(ToolCustomizationItem toolItem)
		{
		}

		[Token(Token = "0x6001A9C")]
		[Address(RVA = "0x10331C8", Offset = "0x10331C8", VA = "0x10331C8")]
		private void TrackItemReplacement(Item selectedItem)
		{
		}

		[Token(Token = "0x6001A9D")]
		[Address(RVA = "0x1032F84", Offset = "0x1032F84", VA = "0x1032F84")]
		public void SetItem(string id, string reason)
		{
		}

		[Token(Token = "0x6001A9E")]
		[Address(RVA = "0x1031D1C", Offset = "0x1031D1C", VA = "0x1031D1C")]
		private void SetupPackSettings()
		{
		}

		[Token(Token = "0x6001A9F")]
		[Address(RVA = "0x1031FFC", Offset = "0x1031FFC", VA = "0x1031FFC")]
		private void SetupArenaSettings()
		{
		}

		[Token(Token = "0x6001AA0")]
		[Address(RVA = "0x1031E64", Offset = "0x1031E64", VA = "0x1031E64")]
		private void SetupCharacterSettings()
		{
		}

		[Token(Token = "0x6001AA1")]
		[Address(RVA = "0x103373C", Offset = "0x103373C", VA = "0x103373C")]
		private void SetupCharacterItem(CharacterItem characterItem)
		{
		}

		[Token(Token = "0x6001AA2")]
		[Address(RVA = "0x1031F60", Offset = "0x1031F60", VA = "0x1031F60")]
		private void SetupToolSettings()
		{
		}

		[Token(Token = "0x6001AA3")]
		[Address(RVA = "0x10338B8", Offset = "0x10338B8", VA = "0x10338B8")]
		private void SetupToolItem(ToolCustomizationItem toolItem)
		{
		}

		[Token(Token = "0x6001AA4")]
		[Address(RVA = "0x1032094", Offset = "0x1032094", VA = "0x1032094")]
		private void SetupBannerSettings()
		{
		}

		[Token(Token = "0x6001AA5")]
		[Address(RVA = "0x1032128", Offset = "0x1032128", VA = "0x1032128")]
		private void SetupPlatformSettings()
		{
		}

		[Token(Token = "0x6001AA6")]
		[Address(RVA = "0x1033524", Offset = "0x1033524", VA = "0x1033524")]
		private void SetupItem(Item item, int index)
		{
		}

		[Token(Token = "0x6001AA7")]
		[Address(RVA = "0x10321C0", Offset = "0x10321C0", VA = "0x10321C0")]
		private void SetupActiveItems()
		{
		}

		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0x103347C", Offset = "0x103347C", VA = "0x103347C")]
		private void UpdateActiveItems(int index, string newItem)
		{
		}

		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0x10333EC", Offset = "0x10333EC", VA = "0x10333EC")]
		private void UpdateItemOwnerShip(string oldItem, string newItem)
		{
		}
	}
	[Token(Token = "0x20005E9")]
	[CreateAssetMenu(fileName = "CustomizationSettings", menuName = "Settings/Player/CustomizationSettings", order = 2)]
	public class CustomizationSettings : ScriptableObject
	{
		[Token(Token = "0x4002513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemGridSetting itemGridSetting;

		[Token(Token = "0x4002514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IconSpriteStateSettings unusedItemSprites;

		[Token(Token = "0x4002515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ItemIconReference itemIconReference;

		[Token(Token = "0x4002516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string[] itemsToStartWith;

		[Token(Token = "0x4002517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PlatformSettings platformSettings;

		[Token(Token = "0x4002518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BannerSettings bannerSettings;

		[Token(Token = "0x4002519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ItemInformationSettings itemInformationSettings;

		[Token(Token = "0x400251A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string swapItemLocalizationId;

		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0x1033A9C", Offset = "0x1033A9C", VA = "0x1033A9C")]
		public CustomizationSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005EA")]
	public class CharacterSelectSettings
	{
		[Token(Token = "0x400251B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CustomizationViewReference customizationViewReference;

		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0x1033AA4", Offset = "0x1033AA4", VA = "0x1033AA4")]
		public CharacterSelectSettings()
		{
		}
	}
	[Token(Token = "0x20005EB")]
	public class CustomizationViewHandler : ITickable, IInitialisable
	{
		[Token(Token = "0x400251C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x400251D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MenuStateSettings menuStateSettings;

		[Token(Token = "0x400251E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly CustomizationSettings customizationSettings;

		[Token(Token = "0x400251F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x4002520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ItemGridViewHandlerData itemGridViewHandlerData;

		[Token(Token = "0x4002521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ShopData shopData;

		[Token(Token = "0x4002522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x4002523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<Item> itemsToShowInMainList;

		[Token(Token = "0x4002524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly List<ItemIconReference> availableIcons;

		[Token(Token = "0x4002525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly int[] numItemsInGroup;

		[Token(Token = "0x4002526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly List<Item> itemsInUse;

		[Token(Token = "0x4002527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly List<Item> characters;

		[Token(Token = "0x4002528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly List<Item> arenas;

		[Token(Token = "0x4002529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly List<Item> platforms;

		[Token(Token = "0x400252A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly List<Item> banners;

		[Token(Token = "0x400252B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly string[] itemLookup;

		[Token(Token = "0x400252C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly Dictionary<string, int> itemIdToIconId;

		[Token(Token = "0x400252D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly Locale locale;

		[Token(Token = "0x400252E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private CustomizationViewReference customizationViewReference;

		[Token(Token = "0x400252F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private ItemGridReference itemGridReference;

		[Token(Token = "0x4002530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool showingViewHandler;

		[Token(Token = "0x4002531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private int selectedIndex;

		[Token(Token = "0x4002532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int hoveredIndex;

		[Token(Token = "0x4002533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool isViewInCustomizationMode;

		[Token(Token = "0x4002534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float lastSeenOwnershipUpdateTimeStamp;

		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0x1033AAC", Offset = "0x1033AAC", VA = "0x1033AAC")]
		public CustomizationViewHandler(MenuStateData menuStateData, MenuStateSettings menuStateSettings, CustomizationSettings customizationSettings, CustomizationData customizationData, ItemGridViewHandlerData itemGridViewHandlerData, ShopData shopData, ArcadeData arcadeData)
		{
		}

		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0x1033FD4", Offset = "0x1033FD4", VA = "0x1033FD4", Slot = "5")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0x10348D4", Offset = "0x10348D4", VA = "0x10348D4")]
		private void RefreshTab()
		{
		}

		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0x1034B6C", Offset = "0x1034B6C", VA = "0x1034B6C")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0x10342E4", Offset = "0x10342E4", VA = "0x10342E4")]
		private void SetViewActive(bool isActive)
		{
		}

		[Token(Token = "0x6001AB1")]
		[Address(RVA = "0x1034B74", Offset = "0x1034B74", VA = "0x1034B74", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001AB2")]
		[Address(RVA = "0x1034FA0", Offset = "0x1034FA0", VA = "0x1034FA0")]
		public void CustomizationViewMode(bool isCustomizationView)
		{
		}

		[Token(Token = "0x6001AB3")]
		[Address(RVA = "0x103522C", Offset = "0x103522C", VA = "0x103522C")]
		public void SetCustomizationViewMode(bool isCustomizationView)
		{
		}

		[Token(Token = "0x6001AB4")]
		[Address(RVA = "0x103524C", Offset = "0x103524C", VA = "0x103524C")]
		private void HandleButtonInteraction()
		{
		}

		[Token(Token = "0x6001AB5")]
		[Address(RVA = "0x1035080", Offset = "0x1035080", VA = "0x1035080")]
		private void UpdateInteractionButton()
		{
		}

		[Token(Token = "0x6001AB6")]
		[Address(RVA = "0x1035058", Offset = "0x1035058", VA = "0x1035058")]
		private void UpdateSelections()
		{
		}

		[Token(Token = "0x6001AB7")]
		[Address(RVA = "0x1035364", Offset = "0x1035364", VA = "0x1035364")]
		private void SetAndSortOwnedItems()
		{
		}

		[Token(Token = "0x6001AB8")]
		[Address(RVA = "0x1035488", Offset = "0x1035488", VA = "0x1035488")]
		private void SetAndSortOtherItems()
		{
		}

		[Token(Token = "0x6001AB9")]
		[Address(RVA = "0x1034380", Offset = "0x1034380", VA = "0x1034380")]
		private void UpdateActiveItems()
		{
		}

		[Token(Token = "0x6001ABA")]
		[Address(RVA = "0x1034504", Offset = "0x1034504", VA = "0x1034504")]
		private void UpdateNoneActiveItems()
		{
		}

		[Token(Token = "0x6001ABB")]
		[Address(RVA = "0x103548C", Offset = "0x103548C", VA = "0x103548C")]
		private bool IsCharacterItemActive(Item itemToCheck, Item activeCharacterItem)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ABC")]
		[Address(RVA = "0x10349C4", Offset = "0x10349C4", VA = "0x10349C4")]
		private void SetIcons(List<Item> selections, int offset)
		{
		}

		[Token(Token = "0x6001ABD")]
		[Address(RVA = "0x1034814", Offset = "0x1034814", VA = "0x1034814")]
		private void UpdateItemsPerGroupCount()
		{
		}

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0x1035568", Offset = "0x1035568", VA = "0x1035568")]
		private void UpdateIconReference(ItemIconReference icon, Item item, ItemOwnership ownership)
		{
		}
	}
	[Token(Token = "0x20005ED")]
	public class CustomizationViewReference : MonoBehaviour
	{
		[Token(Token = "0x4002537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemGridReference itemGridReference;

		[Token(Token = "0x4002538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Canvas canvas;

		[Token(Token = "0x4002539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Canvas itemListCanvas;

		[Token(Token = "0x400253A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CharacterInformationReference characterInformationReference;

		[Token(Token = "0x400253B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ItemInformationReference itemInformationReference;

		[Token(Token = "0x400253C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI toolTipText;

		[Token(Token = "0x400253D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform showShopEquipCharacterTransform;

		[Token(Token = "0x400253E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform showShopEquipModOpsSkinTransform;

		[Token(Token = "0x6001AC2")]
		[Address(RVA = "0x10356F0", Offset = "0x10356F0", VA = "0x10356F0")]
		public CustomizationViewReference()
		{
		}
	}
	[Token(Token = "0x20005EE")]
	public enum ItemType
	{
		[Token(Token = "0x4002540")]
		Character,
		[Token(Token = "0x4002541")]
		Banner,
		[Token(Token = "0x4002542")]
		Platform,
		[Token(Token = "0x4002543")]
		ToolSkin,
		[Token(Token = "0x4002544")]
		ItemPack,
		[Token(Token = "0x4002545")]
		Arena,
		[Token(Token = "0x4002546")]
		Attachment
	}
	[Serializable]
	[Token(Token = "0x20005EF")]
	public class Item
	{
		[Token(Token = "0x4002547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string id;

		[Token(Token = "0x4002548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameplayRules[] gameplayRules;

		[Token(Token = "0x4002549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public ItemType itemType;

		[Token(Token = "0x400254A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public bool isMainItem;

		[Token(Token = "0x400254B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[FormerlySerializedAs("isPartOfPattern")]
		public bool isPartOfItemPack;

		[Token(Token = "0x400254C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[FormerlySerializedAs("patternId")]
		public string itemPackId;

		[Token(Token = "0x400254D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Sprite icon;

		[Token(Token = "0x400254E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Sprite iconSplash;

		[Token(Token = "0x400254F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEngine.Sprite lockedIcon;

		[Token(Token = "0x4002550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEngine.Sprite lockedIconSplash;

		[Token(Token = "0x4002551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string localizationIdForName;

		[Token(Token = "0x4002552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string localizationIdForDescription;

		[Token(Token = "0x4002553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int iconSortingOrder;

		[Token(Token = "0x4002554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IconSpriteStateSettings iconSpriteStates;

		[Token(Token = "0x6001AC3")]
		[Address(RVA = "0x102FF54", Offset = "0x102FF54", VA = "0x102FF54")]
		public Item()
		{
		}
	}
	[Token(Token = "0x20005F0")]
	public class ItemInformationReference : MonoBehaviour
	{
		[Token(Token = "0x4002555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas[] canvas;

		[Token(Token = "0x4002556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RectMask2D rectMask2D;

		[Token(Token = "0x4002557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI lockedText;

		[Token(Token = "0x4002558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject lockedImage;

		[Token(Token = "0x4002559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI description;

		[Token(Token = "0x400255A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI itemName;

		[Token(Token = "0x400255B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public RectTransform itemRect;

		[Token(Token = "0x400255C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public RectTransform itemBackgroundRect;

		[Token(Token = "0x400255D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Image icon;

		[Token(Token = "0x400255E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public RectTransform iconRect;

		[Token(Token = "0x400255F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public RectTransform descriptionRect;

		[Token(Token = "0x4002560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public RectTransform scrollRectContent;

		[Token(Token = "0x4002561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public RectTransform descriptionBackgroundRect;

		[Token(Token = "0x4002562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public IgnisScrollRect scrollRect;

		[Token(Token = "0x6001AC4")]
		[Address(RVA = "0x10356F8", Offset = "0x10356F8", VA = "0x10356F8")]
		public ItemInformationReference()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005F1")]
	public class ItemInformationSettings
	{
		[Token(Token = "0x4002563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float uiSpacing;

		[Token(Token = "0x4002564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector2 platformIconSize;

		[Token(Token = "0x4002565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 bannerIconSize;

		[Token(Token = "0x4002566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector2 arenaIconSize;

		[Token(Token = "0x4002567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector2 characterIconSize;

		[Token(Token = "0x4002568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 toolSkinIconSize;

		[Token(Token = "0x4002569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector2 itemPackIconSize;

		[Token(Token = "0x400256A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector2 servicesIconSize;

		[Token(Token = "0x400256B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float iconTopPadding;

		[Token(Token = "0x400256C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float servicesIconTopPadding;

		[Token(Token = "0x6001AC5")]
		[Address(RVA = "0x1035700", Offset = "0x1035700", VA = "0x1035700")]
		public ItemInformationSettings()
		{
		}
	}
	[Token(Token = "0x20005F2")]
	public class ItemInformationViewHandler : ITickable
	{
		[Token(Token = "0x400256D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x400256E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x400256F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ShopData shopData;

		[Token(Token = "0x4002570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ItemInformationSettings informationSettings;

		[Token(Token = "0x4002571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ItemGridData itemGridData;

		[Token(Token = "0x4002572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool showingViewHandler;

		[Token(Token = "0x4002573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int selectedIndex;

		[Token(Token = "0x4002574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ItemInformationReference itemInformationReference;

		[Token(Token = "0x4002575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool selectedItemIsShowing;

		[Token(Token = "0x4002576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private InteractionSettings interactionSettings;

		[Token(Token = "0x4002577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float lastSeenOwnershipUpdateTimeStamp;

		[Token(Token = "0x6001AC6")]
		[Address(RVA = "0x1035708", Offset = "0x1035708", VA = "0x1035708")]
		public ItemInformationViewHandler(MenuStateData menuStateData, CustomizationData customizationData, ShopData shopData, ItemInformationSettings informationSettings, InteractionSettings interactionSettings)
		{
		}

		[Token(Token = "0x6001AC7")]
		[Address(RVA = "0x1035768", Offset = "0x1035768", VA = "0x1035768")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001AC8")]
		[Address(RVA = "0x1035880", Offset = "0x1035880", VA = "0x1035880")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001AC9")]
		[Address(RVA = "0x10357B0", Offset = "0x10357B0", VA = "0x10357B0")]
		private void SetViewActive(bool isActive)
		{
		}

		[Token(Token = "0x6001ACA")]
		[Address(RVA = "0x1035888", Offset = "0x1035888", VA = "0x1035888", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001ACB")]
		[Address(RVA = "0x10359D0", Offset = "0x10359D0", VA = "0x10359D0")]
		private void ShowInformation()
		{
		}

		[Token(Token = "0x6001ACC")]
		[Address(RVA = "0x1035D84", Offset = "0x1035D84", VA = "0x1035D84")]
		private void SetUiPositions(bool isPurchasable)
		{
		}

		[Token(Token = "0x6001ACD")]
		[Address(RVA = "0x1035E90", Offset = "0x1035E90", VA = "0x1035E90")]
		private float StepLocalHeight(RectTransform rectTransform, float height)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20005F3")]
	[CreateAssetMenu(fileName = "PackItemSettings", menuName = "Settings/Customization/PackItemSettings")]
	public class PackItemSettings : ScriptableObject
	{
		[Token(Token = "0x4002578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[FormerlySerializedAs("patternItems")]
		public PackItem[] packItems;

		[Token(Token = "0x6001ACE")]
		[Address(RVA = "0x1035EFC", Offset = "0x1035EFC", VA = "0x1035EFC")]
		public PackItemSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005F4")]
	public class PackItem : Item
	{
		[Token(Token = "0x6001ACF")]
		[Address(RVA = "0x1035F54", Offset = "0x1035F54", VA = "0x1035F54")]
		public PackItem()
		{
		}
	}
	[Token(Token = "0x20005F5")]
	[CreateAssetMenu(fileName = "PlatformSettings", menuName = "Settings/Items/PlatformSettings", order = 1)]
	public class PlatformSettings : ScriptableObject
	{
		[Token(Token = "0x4002579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlatformItem[] platformItems;

		[Token(Token = "0x6001AD0")]
		[Address(RVA = "0x1035F58", Offset = "0x1035F58", VA = "0x1035F58")]
		public PlatformSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005F6")]
	public class PlatformItem : Item
	{
		[Token(Token = "0x400257A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Material materialPlayer1;

		[Token(Token = "0x400257B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Material materialPlayer2;

		[Token(Token = "0x400257C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Mesh platformBase;

		[Token(Token = "0x400257D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Mesh platformTint;

		[Token(Token = "0x6001AD1")]
		[Address(RVA = "0x1035F60", Offset = "0x1035F60", VA = "0x1035F60")]
		public PlatformItem()
		{
		}
	}
	[Token(Token = "0x20005F7")]
	public class ShopViewReference : MonoBehaviour
	{
		[Token(Token = "0x400257E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemGridReference itemGridReference;

		[Token(Token = "0x400257F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Canvas canvas;

		[Token(Token = "0x4002580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Canvas itemListCanvas;

		[Token(Token = "0x4002581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CharacterInformationReference characterInformationReference;

		[Token(Token = "0x4002582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ItemInformationReference itemInformationReference;

		[Token(Token = "0x4002583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI toolTipText;

		[Token(Token = "0x4002584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CoinShopReference coinShopReference;

		[Token(Token = "0x4002585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform showShopEquipCharacterTransform;

		[Token(Token = "0x4002586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform showShopEquipModOpsSkinTransform;

		[Token(Token = "0x4002587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject subTab;

		[Token(Token = "0x4002588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public RectTransform tabParent;

		[Token(Token = "0x4002589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Button customizationTab;

		[Token(Token = "0x400258A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Button coinShopTab;

		[Token(Token = "0x400258B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public BoxCollider tabParentBoxCollider;

		[Token(Token = "0x6001AD2")]
		[Address(RVA = "0x1035F64", Offset = "0x1035F64", VA = "0x1035F64")]
		public ShopViewReference()
		{
		}
	}
	[Token(Token = "0x20005F8")]
	public class DuelSettingsViewData
	{
		[Token(Token = "0x400258C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool showingExpandedDuelSetting;

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0x1035F6C", Offset = "0x1035F6C", VA = "0x1035F6C")]
		public DuelSettingsViewData()
		{
		}
	}
	[Token(Token = "0x20005F9")]
	public class DuelSettingsMenuViewHandler : ITickable
	{
		[Token(Token = "0x400258D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool showingDuelSettingsView;

		[Token(Token = "0x400258E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool shouldShowExpandedDuelSettings;

		[Token(Token = "0x400258F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool showingBotRewards;

		[Token(Token = "0x4002590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		private bool showingPvPSettings;

		[Token(Token = "0x4002591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float viewUpdatedFromDataTimestamp;

		[Token(Token = "0x4002592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DuelSettingsViewData duelSettingsViewData;

		[Token(Token = "0x4002593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x4002594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly LeagueTierProgressData leagueTierProgressData;

		[Token(Token = "0x4002596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IgnisSoundTriggerData soundTriggerData;

		[Token(Token = "0x4002597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x4002598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly RatingMatchmakerSettingsData ratingMatchmakerSettingsData;

		[Token(Token = "0x4002599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x400259A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly LeagueTierSettings leagueTierSettings;

		[Token(Token = "0x400259B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly SpectatorSettingsData spectatorSettingsData;

		[Token(Token = "0x400259C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly TextHintViewData textHintViewData;

		[Token(Token = "0x400259D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly PlayMenuViewData playMenuViewData;

		[Token(Token = "0x400259E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private DuelSettingsMenuViewReferences duelSettingsMenuViewReferences;

		[Token(Token = "0x6001AD4")]
		[Address(RVA = "0x1035F7C", Offset = "0x1035F7C", VA = "0x1035F7C")]
		public DuelSettingsMenuViewHandler(DuelSettingsViewData duelSettingsViewData, LockerRoomGameStateData lockerRoomGameStateData, MenuStateData menuStateData, LeagueTierProgressData leagueTierProgressData, IgnisSoundTriggerData soundTriggerData, FindFriendData findFriendData, RatingMatchmakerSettingsData ratingMatchmakerSettingsData, PlayFabProgressionData playFabProgressionData, LeagueTierSettings leagueTierSettings, SpectatorSettingsData spectatorSettingsData, TextHintViewData textHintViewData, PlayMenuViewData playMenuViewData)
		{
		}

		[Token(Token = "0x6001AD5")]
		[Address(RVA = "0x1036018", Offset = "0x1036018", VA = "0x1036018")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6001AD6")]
		[Address(RVA = "0x10368F4", Offset = "0x10368F4", VA = "0x10368F4")]
		private void OnMainModeSelection(int value)
		{
		}

		[Token(Token = "0x6001AD7")]
		[Address(RVA = "0x10369F4", Offset = "0x10369F4", VA = "0x10369F4")]
		private void OnTrainingDifficultyChanged(int newValue)
		{
		}

		[Token(Token = "0x6001AD8")]
		[Address(RVA = "0x1036A8C", Offset = "0x1036A8C", VA = "0x1036A8C")]
		private void OnBotsChanged(bool newValue)
		{
		}

		[Token(Token = "0x6001AD9")]
		[Address(RVA = "0x10369AC", Offset = "0x10369AC", VA = "0x10369AC")]
		private void OnTrainingModeChange(bool newValue)
		{
		}

		[Token(Token = "0x6001ADA")]
		[Address(RVA = "0x1036B1C", Offset = "0x1036B1C", VA = "0x1036B1C")]
		private void OnBotRewardChanged(bool newValue)
		{
		}

		[Token(Token = "0x6001ADB")]
		[Address(RVA = "0x1036B64", Offset = "0x1036B64", VA = "0x1036B64")]
		private void OnAlwaysQueueChanged(bool newValue)
		{
		}

		[Token(Token = "0x6001ADC")]
		[Address(RVA = "0x1036BAC", Offset = "0x1036BAC", VA = "0x1036BAC")]
		private void OnHideDuelSettings()
		{
		}

		[Token(Token = "0x6001ADD")]
		[Address(RVA = "0x1036BB4", Offset = "0x1036BB4", VA = "0x1036BB4")]
		private void OnShowDuelSettings()
		{
		}

		[Token(Token = "0x6001ADE")]
		[Address(RVA = "0x1036BC0", Offset = "0x1036BC0", VA = "0x1036BC0")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001ADF")]
		[Address(RVA = "0x1036C50", Offset = "0x1036C50", VA = "0x1036C50")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001AE0")]
		[Address(RVA = "0x1036C58", Offset = "0x1036C58", VA = "0x1036C58", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001AE1")]
		[Address(RVA = "0x1036DF4", Offset = "0x1036DF4", VA = "0x1036DF4")]
		private void ShowHint(Transform transform, string localizationId, HintRule type)
		{
		}

		[Token(Token = "0x6001AE2")]
		[Address(RVA = "0x1036F7C", Offset = "0x1036F7C", VA = "0x1036F7C")]
		private int GetRankIndex(HintRule type)
		{
			return default(int);
		}

		[Token(Token = "0x6001AE3")]
		[Address(RVA = "0x1036FCC", Offset = "0x1036FCC", VA = "0x1036FCC")]
		private void HideHint(Transform transform)
		{
		}

		[Token(Token = "0x6001AE4")]
		[Address(RVA = "0x103668C", Offset = "0x103668C", VA = "0x103668C")]
		private void UpdateViewFromData()
		{
		}

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0x1036AD8", Offset = "0x1036AD8", VA = "0x1036AD8")]
		private void UpdateNonDefaultSettingsIndicator()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005FB")]
	public struct HoverHintTarget
	{
		[Token(Token = "0x40025A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IgnisButton target;

		[Token(Token = "0x40025A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform originTransform;

		[Token(Token = "0x40025A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string localizationId;

		[Token(Token = "0x40025A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HintRule hintType;
	}
	[Token(Token = "0x20005FC")]
	public enum HintRule
	{
		[Token(Token = "0x40025A6")]
		botOnOffUnlockAtLeagueTier,
		[Token(Token = "0x40025A7")]
		botRewardsOnOffUnlockAtLeagueTier,
		[Token(Token = "0x40025A8")]
		trainingModeUnlockAtLeagueTier
	}
	[Token(Token = "0x20005FD")]
	public class DuelSettingsMenuViewReferences : MonoBehaviour
	{
		[Token(Token = "0x40025A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas[] canvas;

		[Token(Token = "0x40025AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button showDuelSettingsButton;

		[Token(Token = "0x40025AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject duelSettingsCollapsed;

		[Token(Token = "0x40025AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button hideDuelSettingsButton;

		[Token(Token = "0x40025AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Toggle toggleBotsCheckBox;

		[Token(Token = "0x40025AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject toggleBotsCheckBoxContainer;

		[Token(Token = "0x40025AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject botRewardsContainer;

		[Token(Token = "0x40025B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject alwaysQueueContainer;

		[Token(Token = "0x40025B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject trainingDifficultyContainer;

		[Token(Token = "0x40025B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject pvPBotSettingsContainer;

		[Token(Token = "0x40025B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IgnisDropdown trainingDifficultyDropdown;

		[Token(Token = "0x40025B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Toggle toggleBotRewardsCheckBox;

		[Token(Token = "0x40025B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Toggle toggleAlwaysQueueCheckBox;

		[Token(Token = "0x40025B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject toggleBotRewardsCheckBoxContainer;

		[Token(Token = "0x40025B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject duelSettingsExpanded;

		[Token(Token = "0x40025B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Image botsLockIcon;

		[Token(Token = "0x40025B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject botsLockIconContainer;

		[Token(Token = "0x40025BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Image botRewardsLockIcon;

		[Token(Token = "0x40025BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject botRewardsLockIconContainer;

		[Token(Token = "0x40025BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject nonDefaultSettingsIndicator;

		[Token(Token = "0x40025BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public HoverHintTarget[] hintTargets;

		[Token(Token = "0x40025BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public IgnisDropdown mainDropDown;

		[Token(Token = "0x40025BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject trainingContainer;

		[Token(Token = "0x40025C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public GameObject competitiveContainer;

		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0x1037070", Offset = "0x1037070", VA = "0x1037070")]
		public DuelSettingsMenuViewReferences()
		{
		}
	}
	[Token(Token = "0x20005FE")]
	public class ExperienceCounterReference : MonoBehaviour
	{
		[Token(Token = "0x40025C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image experienceBarRenderer;

		[Token(Token = "0x40025C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve experienceBarFillDelay;

		[Token(Token = "0x6001AEA")]
		[Address(RVA = "0x1037078", Offset = "0x1037078", VA = "0x1037078")]
		public ExperienceCounterReference()
		{
		}
	}
	[Token(Token = "0x20005FF")]
	public class ExperienceCounterViewHandler : ITickable
	{
		[Token(Token = "0x40025C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ExperienceCounterReference experienceCounterReference;

		[Token(Token = "0x40025C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int showingExperience;

		[Token(Token = "0x40025C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool isShowing;

		[Token(Token = "0x40025C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material bar;

		[Token(Token = "0x40025C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float previouslyShowingProgress;

		[Token(Token = "0x40025C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float currentProgress;

		[Token(Token = "0x40025C9")]
		private const float MaxRelativeProgress = 1f;

		[Token(Token = "0x40025CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool waitForLevelToUpdate;

		[Token(Token = "0x40025CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x40025CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MenuStateData menuStateData;

		[Token(Token = "0x40025CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly LocalPlayerExperienceData localPlayerExperienceData;

		[Token(Token = "0x40025CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly PlayerInfoPanelData playerInfoPanelData;

		[Token(Token = "0x40025CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float elapsedTime;

		[Token(Token = "0x40025D0")]
		private const float Duration = 1f;

		[Token(Token = "0x40025D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool animateBar;

		[Token(Token = "0x40025D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float startAnimationValue;

		[Token(Token = "0x40025D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float targetAnimationValue;

		[Token(Token = "0x6001AEB")]
		[Address(RVA = "0x10370B0", Offset = "0x10370B0", VA = "0x10370B0")]
		public ExperienceCounterViewHandler(PlayFabProgressionData playFabProgressionData, MenuStateData menuStateData, LocalPlayerExperienceData localPlayerExperienceData)
		{
		}

		[Token(Token = "0x6001AEC")]
		[Address(RVA = "0x10370F8", Offset = "0x10370F8", VA = "0x10370F8")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001AED")]
		[Address(RVA = "0x1037120", Offset = "0x1037120", VA = "0x1037120", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001AEE")]
		[Address(RVA = "0x10371C8", Offset = "0x10371C8", VA = "0x10371C8")]
		private void UpdateExperienceBar()
		{
		}

		[Token(Token = "0x6001AEF")]
		[Address(RVA = "0x1037368", Offset = "0x1037368", VA = "0x1037368")]
		private void StartBarAnimation(float relativeLevelProgression)
		{
		}

		[Token(Token = "0x6001AF0")]
		[Address(RVA = "0x10373A0", Offset = "0x10373A0", VA = "0x10373A0")]
		private float RelativeLevelProgression(int exp)
		{
			return default(float);
		}

		[Token(Token = "0x6001AF1")]
		[Address(RVA = "0x10372C4", Offset = "0x10372C4", VA = "0x10372C4")]
		private void UpdateAnimation()
		{
		}
	}
	[Token(Token = "0x2000600")]
	public class FindFriendHandler : ITickable
	{
		[Token(Token = "0x40025D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x40025D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x40025D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x40025D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly INetworkConnectionHandler networkConnectionHandler;

		[Token(Token = "0x40025D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly NetworkRegionProvider networkRegionProvider;

		[Token(Token = "0x40025D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly NetworkRegionSelector networkRegionSelector;

		[Token(Token = "0x40025DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly LoginData loginData;

		[Token(Token = "0x40025DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x40025DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ErrorMessageData errorMessageData;

		[Token(Token = "0x40025DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly GameMessageUploadHandlerData gameMessageUploadHandlerData;

		[Token(Token = "0x40025DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly GameData gameData;

		[Token(Token = "0x40025DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x40025E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float BACKGROUND_TIMEOUT;

		[Token(Token = "0x40025E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float FIND_FRIEND_ATTEMPT_TIMEOUT;

		[Token(Token = "0x40025E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int NUMBER_OF_ATTEMPTS;

		[Token(Token = "0x40025E3")]
		public const int ROOM_CODE_LENGTH = 6;

		[Token(Token = "0x6001AF2")]
		[Address(RVA = "0x10373D8", Offset = "0x10373D8", VA = "0x10373D8")]
		public FindFriendHandler(FindFriendData findFriendData, LockerRoomGameStateData lockerRoomGameStateData, IgnisNetworkConnectionData networkConnectionData, INetworkConnectionHandler networkConnectionHandler, NetworkRegionProvider networkRegionProvider, NetworkRegionSelector networkRegionSelector, LoginData loginData, ITimeProvider timeProvider, ErrorMessageData errorMessageData, GameMessageUploadHandlerData gameMessageUploadHandlerData, GameData gameData, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x6001AF3")]
		[Address(RVA = "0x103746C", Offset = "0x103746C", VA = "0x103746C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001AF4")]
		[Address(RVA = "0x1038460", Offset = "0x1038460", VA = "0x1038460")]
		private void CheckIfItIsTimeToRetryAttempt()
		{
		}

		[Token(Token = "0x6001AF5")]
		[Address(RVA = "0x1038C78", Offset = "0x1038C78", VA = "0x1038C78")]
		private void AttemptToJoinRoom()
		{
		}

		[Token(Token = "0x6001AF6")]
		[Address(RVA = "0x1038D40", Offset = "0x1038D40", VA = "0x1038D40")]
		private bool ShouldRetryJoiningRoom()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AF7")]
		[Address(RVA = "0x1038C38", Offset = "0x1038C38", VA = "0x1038C38")]
		private NetworkingRegion GetRegionToPlayIn()
		{
			return default(NetworkingRegion);
		}

		[Token(Token = "0x6001AF8")]
		[Address(RVA = "0x1038B90", Offset = "0x1038B90", VA = "0x1038B90")]
		private GameplayRules GetGameplayRulesFromToPlay()
		{
			return default(GameplayRules);
		}

		[Token(Token = "0x6001AF9")]
		[Address(RVA = "0x103887C", Offset = "0x103887C", VA = "0x103887C")]
		private void SetError(FindFriendError errorCode)
		{
		}

		[Token(Token = "0x6001AFA")]
		[Address(RVA = "0x1038D7C", Offset = "0x1038D7C", VA = "0x1038D7C")]
		private FindFriendError GetErrorReasonFromRoomError()
		{
			return default(FindFriendError);
		}

		[Token(Token = "0x6001AFB")]
		[Address(RVA = "0x1038DB0", Offset = "0x1038DB0", VA = "0x1038DB0")]
		public NetworkingRegion GetRegionFromRoomCode(string selectedRoomCode)
		{
			return default(NetworkingRegion);
		}

		[Token(Token = "0x6001AFC")]
		[Address(RVA = "0x1038E1C", Offset = "0x1038E1C", VA = "0x1038E1C")]
		public GameplayRules GetRulesFromRoomCode(string selectedRoomCode)
		{
			return default(GameplayRules);
		}

		[Token(Token = "0x6001AFD")]
		[Address(RVA = "0x10387B4", Offset = "0x10387B4", VA = "0x10387B4")]
		private void ChangeState(FindFriendState newState)
		{
		}

		[Token(Token = "0x6001AFE")]
		[Address(RVA = "0x1038960", Offset = "0x1038960", VA = "0x1038960")]
		private void SetUpOtherSystemsForFindFriendGame()
		{
		}

		[Token(Token = "0x6001AFF")]
		[Address(RVA = "0x1038A8C", Offset = "0x1038A8C", VA = "0x1038A8C")]
		private void CreateRoomWithRandomName(GameplayRules gameplayRules)
		{
		}

		[Token(Token = "0x6001B00")]
		[Address(RVA = "0x10389C8", Offset = "0x10389C8", VA = "0x10389C8")]
		private void CreateRoomWithName(string roomCode)
		{
		}

		[Token(Token = "0x6001B01")]
		[Address(RVA = "0x1038E38", Offset = "0x1038E38", VA = "0x1038E38")]
		public static string GenerateRoomCodeForRegionAndRules(NetworkingRegion getSelectedRegion, GameplayRules gameplayRules)
		{
			return null;
		}
	}
	[Token(Token = "0x2000601")]
	public class FindFriendData
	{
		[Token(Token = "0x40025E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FindFriendState state;

		[Token(Token = "0x40025E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public FindFriendError error;

		[Token(Token = "0x40025E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<FriendlyGameRequest> createFriendlyGameRequests;

		[Token(Token = "0x40025E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string errorRoomCode;

		[Token(Token = "0x40025E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FriendlyGameRequest currentFriendlyGameRequest;

		[Token(Token = "0x40025E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<FindFriendState> activeStates;

		[Token(Token = "0x6001B03")]
		[Address(RVA = "0x1038EEC", Offset = "0x1038EEC", VA = "0x1038EEC")]
		public bool IsFindingFriendMatch()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B04")]
		[Address(RVA = "0x1038F0C", Offset = "0x1038F0C", VA = "0x1038F0C")]
		public FindFriendData()
		{
		}
	}
	[Token(Token = "0x2000602")]
	public class FriendlyGameRequest
	{
		[Token(Token = "0x40025EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool createRoomRequested;

		[Token(Token = "0x40025EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool joinRoomRequested;

		[Token(Token = "0x40025EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool autoCreateJoinRoomByRegionAndCode;

		[Token(Token = "0x40025ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool joinRoomByRegionAndCode;

		[Token(Token = "0x40025EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string selectedRoomCode;

		[Token(Token = "0x40025EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NetworkingRegion selectedRegion;

		[Token(Token = "0x40025F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public GameMode selectedGameMode;

		[Token(Token = "0x40025F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isExternalFriendlyGameRequest;

		[Token(Token = "0x40025F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool shouldTryRejoiningRoom;

		[Token(Token = "0x40025F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float attemptTimeoutAt;

		[Token(Token = "0x40025F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int numberOfAttempts;

		[Token(Token = "0x40025F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool completed;

		[Token(Token = "0x40025F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string requestOrigin;

		[Token(Token = "0x40025F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameplayRules gameplayRules;

		[Token(Token = "0x40025F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public PostMatchAction postMatchAction;

		[Token(Token = "0x40025F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly KnockoutTournamentMatchInfo knockoutTournamentMatchInfo;

		[Token(Token = "0x6001B06")]
		[Address(RVA = "0x10393C0", Offset = "0x10393C0", VA = "0x10393C0")]
		private FriendlyGameRequest(bool createRoomRequested, bool joinRoomRequested, bool autoCreateJoinRoomByRegionAndCode, bool joinRoomByRegionAndCode, string selectedRoomCode, NetworkingRegion selectedRegion, GameMode selectedGameMode, bool isExternalFriendlyGameRequest, bool shouldTryRejoiningRoom, string requestOrigin, GameplayRules gameplayRules, [Optional] PostMatchAction postMatchAction, [Optional] KnockoutTournamentMatchInfo knockoutTournamentMatchInfo)
		{
		}

		[Token(Token = "0x6001B07")]
		[Address(RVA = "0x10394CC", Offset = "0x10394CC", VA = "0x10394CC")]
		public static FriendlyGameRequest CreateSpecificRoomRequest(string roomCode, string requestOrigin = "locker", bool isExternalFriendlyGameRequest = true, NetworkingRegion region = NetworkingRegion.None, GameplayRules gameplayRules = GameplayRules.Classic)
		{
			return null;
		}

		[Token(Token = "0x6001B08")]
		[Address(RVA = "0x1039584", Offset = "0x1039584", VA = "0x1039584")]
		public static FriendlyGameRequest CreateRandomRoomRequest(string requestOrigin = "locker", GameplayRules gameplayRules = GameplayRules.Classic)
		{
			return null;
		}

		[Token(Token = "0x6001B09")]
		[Address(RVA = "0x1039624", Offset = "0x1039624", VA = "0x1039624")]
		public static FriendlyGameRequest CreateRandomRoomAsSpectatorRequest(string requestOrigin = "locker", GameplayRules gameplayRules = GameplayRules.Classic)
		{
			return null;
		}

		[Token(Token = "0x6001B0A")]
		[Address(RVA = "0x10396C4", Offset = "0x10396C4", VA = "0x10396C4")]
		public static FriendlyGameRequest JoinRoomRequest(string selectedRoomCode, string requestOrigin = "locker", GameplayRules gameplayRules = GameplayRules.Classic)
		{
			return null;
		}

		[Token(Token = "0x6001B0B")]
		[Address(RVA = "0x1039768", Offset = "0x1039768", VA = "0x1039768")]
		public static FriendlyGameRequest JoinRoomAsSpectatorRequest(string selectedRoomCode, string requestOrigin = "locker", GameplayRules gameplayRules = GameplayRules.Classic)
		{
			return null;
		}

		[Token(Token = "0x6001B0C")]
		[Address(RVA = "0x103980C", Offset = "0x103980C", VA = "0x103980C")]
		public static FriendlyGameRequest AutoCreateJoinRoomByCodeAndRegionRequest(string selectedRoomCode, NetworkingRegion region, PostMatchAction postMatchAction, string requestOrigin = "locker", GameplayRules gameplayRules = GameplayRules.Classic, [Optional] KnockoutTournamentMatchInfo knockoutTournamentMatchInfo)
		{
			return null;
		}

		[Token(Token = "0x6001B0D")]
		[Address(RVA = "0x10398D0", Offset = "0x10398D0", VA = "0x10398D0")]
		public static FriendlyGameRequest JoinRoomByCodeAndRegionRequest(string selectedRoomCode, NetworkingRegion region, string requestOrigin = "locker", GameplayRules gameplayRules = GameplayRules.Classic)
		{
			return null;
		}

		[Token(Token = "0x6001B0E")]
		[Address(RVA = "0x1039984", Offset = "0x1039984", VA = "0x1039984")]
		public static FriendlyGameRequest JoinRoomAsSpectatorByRoomCodeAndRegionRequest(string selectedRoomCode, NetworkingRegion networkingRegion, PostMatchAction postMatchAction, string requestOrigin = "locker", GameplayRules gameplayRules = GameplayRules.Classic, [Optional] KnockoutTournamentMatchInfo knockoutTournamentMatchInfo)
		{
			return null;
		}
	}
	[Token(Token = "0x2000603")]
	public enum FindFriendState
	{
		[Token(Token = "0x40025FB")]
		NotConnected,
		[Token(Token = "0x40025FC")]
		Idle,
		[Token(Token = "0x40025FD")]
		CreatingRoom,
		[Token(Token = "0x40025FE")]
		WaitingToRetry,
		[Token(Token = "0x40025FF")]
		JoiningRoom,
		[Token(Token = "0x4002600")]
		Joined,
		[Token(Token = "0x4002601")]
		CreateRoom,
		[Token(Token = "0x4002602")]
		JoinRoom,
		[Token(Token = "0x4002603")]
		JoiningRegion,
		[Token(Token = "0x4002604")]
		Connecting,
		[Token(Token = "0x4002605")]
		JoiningRegionBeforeCreateRoom
	}
	[Token(Token = "0x2000604")]
	public enum FindFriendError
	{
		[Token(Token = "0x4002607")]
		None,
		[Token(Token = "0x4002608")]
		InvalidRoomCode,
		[Token(Token = "0x4002609")]
		RoomDoesNotExist,
		[Token(Token = "0x400260A")]
		RoomIsFull,
		[Token(Token = "0x400260B")]
		Timeout
	}
	[Token(Token = "0x2000605")]
	public class FindFriendMenuViewHandler : ITickable
	{
		[Token(Token = "0x400260C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x400260D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GlobalMatchmakingStateData globalMatchmakingStateData;

		[Token(Token = "0x400260E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x400260F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly VrKeyboardData vrKeyboardData;

		[Token(Token = "0x4002610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x4002611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly LeagueTierProgressData leagueTierProgressData;

		[Token(Token = "0x4002612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4002613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly FeaturePermissionData featurePermissionData;

		[Token(Token = "0x4002614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly DuelSettingsViewData duelSettingsViewData;

		[Token(Token = "0x4002615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly RatingMatchmakerSettingsData matchmakerSettings;

		[Token(Token = "0x4002616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NetworkingRegion currentlyShowingGameRoomButtonsForRegion;

		[Token(Token = "0x4002617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private FindFriendReference findFriendReference;

		[Token(Token = "0x4002618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool showingPlayFriend;

		[Token(Token = "0x4002619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool showingFindRegion;

		[Token(Token = "0x400261A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private FindFriendError isShowingError;

		[Token(Token = "0x400261B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private FindFriendState currentlyShowingForFindFriendState;

		[Token(Token = "0x400261C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string keyboardHelpString;

		[Token(Token = "0x400261D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool blockingAction;

		[Token(Token = "0x400261E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private GameMode preferedGameModeToJoinIn;

		[Token(Token = "0x400261F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly KeyboardControllerData keyboardControllerData;

		[Token(Token = "0x4002620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool isShowingShootout;

		[Token(Token = "0x4002621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool isShowingWinterClassic;

		[Token(Token = "0x4002622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		private bool isShowingScrapperShootout;

		[Token(Token = "0x4002623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9B")]
		private bool secondaryBlockingAction;

		[Token(Token = "0x6001B0F")]
		[Address(RVA = "0x1039A3C", Offset = "0x1039A3C", VA = "0x1039A3C")]
		public FindFriendMenuViewHandler(MenuStateData menuStateData, GlobalMatchmakingStateData globalMatchmakingStateData, IgnisNetworkConnectionData networkConnectionData, VrKeyboardData vrKeyboardData, FindFriendData findFriendData, LeagueTierProgressData leagueTierProgressData, LocalPersistentData localPersistentData, FeaturePermissionData featurePermissionData, DuelSettingsViewData duelSettingsViewData, RatingMatchmakerSettingsData matchmakerSettings)
		{
		}

		[Token(Token = "0x6001B10")]
		[Address(RVA = "0x1039B0C", Offset = "0x1039B0C", VA = "0x1039B0C")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6001B11")]
		[Address(RVA = "0x1039FB4", Offset = "0x1039FB4", VA = "0x1039FB4")]
		private void ToggleFriendlyContainer()
		{
		}

		[Token(Token = "0x6001B12")]
		[Address(RVA = "0x1039FF0", Offset = "0x1039FF0", VA = "0x1039FF0")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001B13")]
		[Address(RVA = "0x1039FF8", Offset = "0x1039FF8", VA = "0x1039FF8")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001B14")]
		[Address(RVA = "0x1039F44", Offset = "0x1039F44", VA = "0x1039F44")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001B15")]
		[Address(RVA = "0x1039FFC", Offset = "0x1039FFC", VA = "0x1039FFC")]
		private void ShowChangeRoomCodeFriend()
		{
		}

		[Token(Token = "0x6001B16")]
		[Address(RVA = "0x103A2C0", Offset = "0x103A2C0", VA = "0x103A2C0")]
		private void ShowChangeRoomCodeSpectate()
		{
		}

		[Token(Token = "0x6001B17")]
		[Address(RVA = "0x103A0F0", Offset = "0x103A0F0", VA = "0x103A0F0")]
		private void ShowChangeRoomCode()
		{
		}

		[Token(Token = "0x6001B18")]
		[Address(RVA = "0x103A304", Offset = "0x103A304", VA = "0x103A304")]
		private void ChangeRoomCode(string newRoomCode)
		{
		}

		[Token(Token = "0x6001B19")]
		[Address(RVA = "0x103A3BC", Offset = "0x103A3BC", VA = "0x103A3BC")]
		private void CancelInput()
		{
		}

		[Token(Token = "0x6001B1A")]
		[Address(RVA = "0x103A3DC", Offset = "0x103A3DC", VA = "0x103A3DC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001B1B")]
		[Address(RVA = "0x103AAC8", Offset = "0x103AAC8", VA = "0x103AAC8")]
		private void HandleCreateRoomButtonCallback(GameplayRules gameplayRules)
		{
		}

		[Token(Token = "0x6001B1C")]
		[Address(RVA = "0x103AB74", Offset = "0x103AB74", VA = "0x103AB74")]
		private void HandleSpectatorButtonCallback(string room)
		{
		}

		[Token(Token = "0x6001B1D")]
		[Address(RVA = "0x103A03C", Offset = "0x103A03C", VA = "0x103A03C")]
		private void CancelOngoingMatchmaking()
		{
		}

		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0x103A058", Offset = "0x103A058", VA = "0x103A058")]
		private bool ShouldWaitForMicrophoneRequest()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000606")]
	public class FindFriendReference : MonoBehaviour
	{
		[Token(Token = "0x4002624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas[] canvas;

		[Token(Token = "0x4002625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject createFriendlyContainer;

		[Token(Token = "0x4002626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button closePanel;

		[Token(Token = "0x4002627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button openFriendlyContainer;

		[Token(Token = "0x4002628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button createClassicFriendGameButton;

		[Token(Token = "0x4002629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Button createShootoutFriendGameButton;

		[Token(Token = "0x400262A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Button createScrapperShootoutFriendGameButton;

		[Token(Token = "0x400262B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Button createWinterClassicFriendGameButton;

		[Token(Token = "0x400262C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Button joinFriendGameButton;

		[Token(Token = "0x400262D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Button spectateFriendGameButton;

		[Token(Token = "0x6001B25")]
		[Address(RVA = "0x103AC78", Offset = "0x103AC78", VA = "0x103AC78")]
		public FindFriendReference()
		{
		}
	}
	[Token(Token = "0x2000607")]
	public class GamePlayRulesData
	{
		[Token(Token = "0x400262E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int winterDeckIndex;

		[Token(Token = "0x400262F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> shootOutSkins;

		[Token(Token = "0x6001B26")]
		[Address(RVA = "0x103AC80", Offset = "0x103AC80", VA = "0x103AC80")]
		public DecksSet GetCurentDeck(DeckBuildSettings deckBuildSettings, GameplayRules gameplayRules, int defaultIndex = 0)
		{
			return null;
		}

		[Token(Token = "0x6001B27")]
		[Address(RVA = "0x103AD90", Offset = "0x103AD90", VA = "0x103AD90")]
		public void RandomizeDeckIndex(List<DecksSet> decksSet)
		{
		}

		[Token(Token = "0x6001B28")]
		[Address(RVA = "0x103ADE8", Offset = "0x103ADE8", VA = "0x103ADE8")]
		public int SelectGameplaySkins(CharacterSettings characterSettings)
		{
			return default(int);
		}

		[Token(Token = "0x6001B29")]
		[Address(RVA = "0x103AE84", Offset = "0x103AE84", VA = "0x103AE84")]
		private List<int> GetItemsIndexesList(Item[] itemArray, GameplayRules gameplayRules)
		{
			return null;
		}

		[Token(Token = "0x6001B2A")]
		[Address(RVA = "0x103B014", Offset = "0x103B014", VA = "0x103B014")]
		public GamePlayRulesData()
		{
		}
	}
	[Token(Token = "0x2000608")]
	public class GameplayRulesHandler : ITickable
	{
		[Token(Token = "0x4002630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameData gameData;

		[Token(Token = "0x4002631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MatchmakingData matchmakingData;

		[Token(Token = "0x4002632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly GamePlayRulesData gamePlayRulesData;

		[Token(Token = "0x4002633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly CurrentMatchRequestData currentMatchRequestData;

		[Token(Token = "0x4002634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameplayRules prevGameplayRules;

		[Token(Token = "0x4002635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int savedIndex;

		[Token(Token = "0x6001B2B")]
		[Address(RVA = "0x103B098", Offset = "0x103B098", VA = "0x103B098")]
		public GameplayRulesHandler(GameData gameData, MatchmakingData matchmakingData, GamePlayRulesData gamePlayRulesData, CurrentMatchRequestData currentMatchRequestData)
		{
		}

		[Token(Token = "0x6001B2C")]
		[Address(RVA = "0x103B0D8", Offset = "0x103B0D8", VA = "0x103B0D8")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001B2D")]
		[Address(RVA = "0x103B0DC", Offset = "0x103B0DC", VA = "0x103B0DC")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001B2E")]
		[Address(RVA = "0x103B0E0", Offset = "0x103B0E0", VA = "0x103B0E0")]
		[Conditional("IGNIS_DEBUG")]
		private void StartWinterClassicMatch()
		{
		}

		[Token(Token = "0x6001B2F")]
		[Address(RVA = "0x103B118", Offset = "0x103B118", VA = "0x103B118")]
		[Conditional("IGNIS_DEBUG")]
		private void StartShootoutMatch()
		{
		}

		[Token(Token = "0x6001B30")]
		[Address(RVA = "0x103B14C", Offset = "0x103B14C", VA = "0x103B14C")]
		[Conditional("IGNIS_DEBUG")]
		private void StartScrapperShootoutMatch()
		{
		}

		[Token(Token = "0x6001B31")]
		[Address(RVA = "0x103B184", Offset = "0x103B184", VA = "0x103B184", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x2000609")]
	public class LeagueTierProgressData
	{
		[Token(Token = "0x4002636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool shouldShowLeagueUp;

		[Token(Token = "0x4002637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int lastSeenLeagueUpTier;

		[Token(Token = "0x4002638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isShowingLeagueUpAnimation;

		[Token(Token = "0x4002639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool showingLeagueTier;

		[Token(Token = "0x400263A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool requestToShowLeagueTier;

		[Token(Token = "0x400263B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int previousThreshold;

		[Token(Token = "0x400263C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int currentThreshold;

		[Token(Token = "0x6001B32")]
		[Address(RVA = "0x103B188", Offset = "0x103B188", VA = "0x103B188")]
		public LeagueTierProgressData()
		{
		}
	}
	[Token(Token = "0x200060A")]
	public class LeagueTierProgressHandler : ITickable
	{
		[Token(Token = "0x400263D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly LeagueTierProgressData leagueTierProgressData;

		[Token(Token = "0x400263E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x400263F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4002640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayFabTitleData playFabTitleData;

		[Token(Token = "0x4002641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool leagueTierDataIsValid;

		[Token(Token = "0x4002642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool showLeagueUpDebug;

		[Token(Token = "0x4002643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int currentLeagueTier;

		[Token(Token = "0x4002644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool showLeagueUpFromReward;

		[Token(Token = "0x4002645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float lastPlayFabUpdateTimestamp;

		[Token(Token = "0x6001B33")]
		[Address(RVA = "0x103B190", Offset = "0x103B190", VA = "0x103B190")]
		public LeagueTierProgressHandler(LeagueTierProgressData leagueTierProgressData, PlayFabProgressionData playFabProgressionData, LocalPersistentData localPersistentData, PlayFabTitleData playFabTitleData)
		{
		}

		[Token(Token = "0x6001B34")]
		[Address(RVA = "0x103B1D0", Offset = "0x103B1D0", VA = "0x103B1D0")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001B35")]
		[Address(RVA = "0x103B1D4", Offset = "0x103B1D4", VA = "0x103B1D4")]
		private void ShowLeagueUpDebug(int tierToShow)
		{
		}

		[Token(Token = "0x6001B36")]
		[Address(RVA = "0x103B298", Offset = "0x103B298", VA = "0x103B298", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001B37")]
		[Address(RVA = "0x103B4EC", Offset = "0x103B4EC", VA = "0x103B4EC")]
		private void UpdatedThresholds(int thresholdRange)
		{
		}
	}
	[Token(Token = "0x200060B")]
	public class LeagueTierProgressReference : MonoBehaviour
	{
		[Token(Token = "0x4002646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4002647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator animator;

		[Token(Token = "0x4002648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Canvas scrollCanvas;

		[Token(Token = "0x4002649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IgnisScrollRect scrollbar;

		[Token(Token = "0x400264A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public RectTransform scrollRect;

		[Token(Token = "0x400264B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Scrollbar horizontalScrollBar;

		[Token(Token = "0x400264C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public RectMask2D rectMask2D;

		[Token(Token = "0x400264D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Image ratingBar;

		[Token(Token = "0x400264E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public RectTransform ratingBarRect;

		[Token(Token = "0x400264F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public RectTransform tierMarkerSample;

		[Token(Token = "0x4002650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TextReference currentRatingValue;

		[Token(Token = "0x4002651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Button closeButton;

		[Token(Token = "0x4002652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public BoxCollider uiHitCollider;

		[Token(Token = "0x4002653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TextMeshProUGUI[] thresholdTexts;

		[Token(Token = "0x4002654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public AnimatorStateData showLeagueTierAnimation;

		[Token(Token = "0x4002655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public AnimatorStateData hideLeagueTierAnimation;

		[Token(Token = "0x4002656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimatorStateData[] leagueTierAnimations;

		[Token(Token = "0x4002657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public LeagueTierReferences[] leagueTierReferences;

		[Token(Token = "0x6001B38")]
		[Address(RVA = "0x103B5CC", Offset = "0x103B5CC", VA = "0x103B5CC")]
		public LeagueTierProgressReference()
		{
		}
	}
	[Token(Token = "0x200060C")]
	public class LeagueTierProgressViewHandler : ITickable
	{
		[Token(Token = "0x4002658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly LeagueTierSettings leagueTierSettings;

		[Token(Token = "0x400265A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PlayFabTitleData playFabTitleData;

		[Token(Token = "0x400265B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x400265C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly AnimationStateHandlerData animationStateHandlerData;

		[Token(Token = "0x400265D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly LeagueTierProgressData leagueTierProgressData;

		[Token(Token = "0x400265E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x400265F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly Locale locale;

		[Token(Token = "0x4002660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private LeagueTierProgressReference leagueTierProgressReference;

		[Token(Token = "0x4002661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly InteractionSettings interactionSettings;

		[Token(Token = "0x4002662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly PlayerInfoPanelData playerInfoPanelData;

		[Token(Token = "0x4002663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4002664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4002665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool isInitialized;

		[Token(Token = "0x4002666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int currentLeaguePoints;

		[Token(Token = "0x4002667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int targetLeaguePoints;

		[Token(Token = "0x4002668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material ratingBarMaterial;

		[Token(Token = "0x4002669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float ratingValueStartPosition;

		[Token(Token = "0x400266A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int currentLeagueTier;

		[Token(Token = "0x400266B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float contentViewWidth;

		[Token(Token = "0x400266C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float visibleContentWidth;

		[Token(Token = "0x400266D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float scrollWidth;

		[Token(Token = "0x400266E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float ratingBarMarginToEdge;

		[Token(Token = "0x400266F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AnimationStateData currentLeagueUpAnimation;

		[Token(Token = "0x4002670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool interactionIsBlocked;

		[Token(Token = "0x4002671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly List<Color> rankTextDefaultColors;

		[Token(Token = "0x4002672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly List<Color> tierTextDefaultColors;

		[Token(Token = "0x4002673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly List<Color> backgroundDefaultColors;

		[Token(Token = "0x4002674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly List<Color> emblemDefaultColors;

		[Token(Token = "0x4002675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private AnimatorStateData currentShowHideAnimation;

		[Token(Token = "0x4002676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private MenuState showingIMenuState;

		[Token(Token = "0x6001B39")]
		[Address(RVA = "0x103B5D4", Offset = "0x103B5D4", VA = "0x103B5D4")]
		public LeagueTierProgressViewHandler(MenuStateData menuStateData, LeagueTierSettings leagueTierSettings, PlayFabTitleData playFabTitleData, PlayFabProgressionData playFabProgressionData, AnimationStateHandlerData animationStateHandlerData, LeagueTierProgressData leagueTierProgressData, LocalPersistentData localPersistentData, InteractionSettings interactionSettings, PlayerInfoPanelData playerInfoPanelData, PersistantDataUtility persistantDataUtility, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x6001B3A")]
		[Address(RVA = "0x103B770", Offset = "0x103B770", VA = "0x103B770")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001B3B")]
		[Address(RVA = "0x103BE54", Offset = "0x103BE54", VA = "0x103BE54")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001B3C")]
		[Address(RVA = "0x103BD2C", Offset = "0x103BD2C", VA = "0x103BD2C")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0x103BE5C", Offset = "0x103BE5C", VA = "0x103BE5C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0x103C758", Offset = "0x103C758", VA = "0x103C758")]
		private void SetThresholdValues()
		{
		}

		[Token(Token = "0x6001B3F")]
		[Address(RVA = "0x103C9A8", Offset = "0x103C9A8", VA = "0x103C9A8")]
		private void SetIsInteractable(bool isInteractable)
		{
		}

		[Token(Token = "0x6001B40")]
		[Address(RVA = "0x103C9FC", Offset = "0x103C9FC", VA = "0x103C9FC")]
		private void StartLeagueUpAnimation()
		{
		}

		[Token(Token = "0x6001B41")]
		[Address(RVA = "0x103C924", Offset = "0x103C924", VA = "0x103C924")]
		private void CenterViewOnCurrentTier()
		{
		}

		[Token(Token = "0x6001B42")]
		[Address(RVA = "0x103C8FC", Offset = "0x103C8FC", VA = "0x103C8FC")]
		private void CheckLeaguePoints()
		{
		}

		[Token(Token = "0x6001B43")]
		[Address(RVA = "0x103C710", Offset = "0x103C710", VA = "0x103C710")]
		private void InitializeTiers()
		{
		}

		[Token(Token = "0x6001B44")]
		[Address(RVA = "0x103CD9C", Offset = "0x103CD9C", VA = "0x103CD9C")]
		private void SetRatingBarFill(int leaguePoint)
		{
		}

		[Token(Token = "0x6001B45")]
		[Address(RVA = "0x103CEE0", Offset = "0x103CEE0", VA = "0x103CEE0")]
		private (float, float, int) GetCurrentThresholds()
		{
			return default((float, float, int));
		}

		[Token(Token = "0x6001B46")]
		[Address(RVA = "0x103CBD8", Offset = "0x103CBD8", VA = "0x103CBD8")]
		private void SetTierVisibilityStates()
		{
		}

		[Token(Token = "0x6001B47")]
		[Address(RVA = "0x103D074", Offset = "0x103D074", VA = "0x103D074")]
		private Color GetDarkerColor(Color color, float amountToDarken)
		{
			return default(Color);
		}

		[Token(Token = "0x6001B48")]
		[Address(RVA = "0x103D038", Offset = "0x103D038", VA = "0x103D038")]
		private void SetRectTransformPositionAlongX(float position, RectTransform rectTransform)
		{
		}

		[Token(Token = "0x6001B49")]
		[Address(RVA = "0x103D084", Offset = "0x103D084", VA = "0x103D084")]
		private void CloseView()
		{
		}
	}
	[Token(Token = "0x200060D")]
	public class LeagueTierReferences : MonoBehaviour
	{
		[Token(Token = "0x4002677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI rankText;

		[Token(Token = "0x4002678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rewardSource;

		[Token(Token = "0x4002679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI tierText;

		[Token(Token = "0x400267A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Image background;

		[Token(Token = "0x400267B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Image emblem;

		[Token(Token = "0x400267C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public LocalizedText rankLocalizedText;

		[Token(Token = "0x6001B4A")]
		[Address(RVA = "0x103D0A0", Offset = "0x103D0A0", VA = "0x103D0A0")]
		public LeagueTierReferences()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200060E")]
	public struct LeagueTierVisualInformation
	{
		[Token(Token = "0x400267D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UnityEngine.Sprite icon;

		[Token(Token = "0x400267E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UnityEngine.Sprite background;
	}
	[Token(Token = "0x200060F")]
	[CreateAssetMenu(menuName = "Settings/LockerRoom/LeagueTierSettings", fileName = "LeagueTierSettings")]
	public class LeagueTierSettings : ScriptableObject
	{
		[Token(Token = "0x400267F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LeagueTierProgressReference leagueTierProgressReference;

		[Token(Token = "0x4002680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] tierTitles;

		[Token(Token = "0x4002681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LeagueTierVisualInformation[] leagueTierVisuals;

		[Token(Token = "0x4002682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LeagueTierVisualInformation leagueTierRewardVisuals;

		[Token(Token = "0x4002683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEngine.Sprite leagueTierGenericIcon;

		[Token(Token = "0x4002684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float ratingBarAnimationSpeed;

		[Token(Token = "0x4002685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public float amountToDarken;

		[Token(Token = "0x4002686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string[] endSeasonCountDownSound;

		[Token(Token = "0x6001B4B")]
		[Address(RVA = "0x103D0A8", Offset = "0x103D0A8", VA = "0x103D0A8")]
		public LeagueTierSettings()
		{
		}
	}
	[Token(Token = "0x2000610")]
	public class LevelUpPopupReference : MonoBehaviour
	{
		[Token(Token = "0x4002687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4002688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RectTransform viewRectTransform;

		[Token(Token = "0x4002689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BoxCollider boxCollider;

		[Token(Token = "0x400268A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LevelUpAnimationCallback levelUpAnimationCallback;

		[Token(Token = "0x400268B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI premiumText;

		[Token(Token = "0x400268C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI freemiumText;

		[Token(Token = "0x400268D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshProUGUI levelUpText;

		[Token(Token = "0x400268E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshProUGUI receiveText;

		[Token(Token = "0x400268F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TextMeshProUGUI unlocksText;

		[Token(Token = "0x4002690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TextMeshProUGUI buttonText;

		[Token(Token = "0x4002691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TextMeshProUGUI previousLevel;

		[Token(Token = "0x4002692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TextMeshProUGUI currentLevel;

		[Token(Token = "0x4002693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IgnisButton dismissPopupButton;

		[Token(Token = "0x4002694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform[] rewardSources;

		[Token(Token = "0x4002695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public RectTransform[] unlockedItemObjects;

		[Token(Token = "0x4002696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public ItemIconReference[] unlockedItemIcons;

		[Token(Token = "0x4002697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public TextMeshProUGUI[] unlockedItemTitles;

		[Token(Token = "0x4002698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public int[] frameHeightsAtNumUnlocks;

		[Token(Token = "0x4002699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AnimatorStateData levelUpAnimation;

		[Token(Token = "0x400269A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public AnimatorStateData hidAnimation;

		[Token(Token = "0x6001B4C")]
		[Address(RVA = "0x103D19C", Offset = "0x103D19C", VA = "0x103D19C")]
		public LevelUpPopupReference()
		{
		}
	}
	[Token(Token = "0x2000611")]
	public struct LevelUpNavigationData
	{
		[Token(Token = "0x400269B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MenuState menuState;

		[Token(Token = "0x400269C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ToolName toolToSelect;

		[Token(Token = "0x400269D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string itemToSelect;

		[Token(Token = "0x6001B4D")]
		[Address(RVA = "0x103D1A4", Offset = "0x103D1A4", VA = "0x103D1A4")]
		public LevelUpNavigationData(MenuState menuState, ToolName toolToSelect, string itemToSelect)
		{
		}
	}
	[Token(Token = "0x2000612")]
	public class LevelUpViewData
	{
		[Token(Token = "0x400269E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<LevelUpNavigationData> levelUpNavigationData;

		[Token(Token = "0x400269F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool updateLevelUpView;

		[Token(Token = "0x40026A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string premium;

		[Token(Token = "0x40026A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string freemium;

		[Token(Token = "0x6001B4E")]
		[Address(RVA = "0x103D1B0", Offset = "0x103D1B0", VA = "0x103D1B0")]
		public LevelUpViewData()
		{
		}
	}
	[Token(Token = "0x2000613")]
	public class LevelUpPopupViewHandler : ITickable
	{
		[Token(Token = "0x40026A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x40026A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x40026A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x40026A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Dictionary<ToolName, ToolSetting> toolSettings;

		[Token(Token = "0x40026A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly LevelUpViewData levelUpViewData;

		[Token(Token = "0x40026A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x40026A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly DeckData deckData;

		[Token(Token = "0x40026A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private LevelUpPopupReference levelUpPopupReference;

		[Token(Token = "0x40026AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool showLevelUpDebug;

		[Token(Token = "0x40026AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool showingView;

		[Token(Token = "0x40026AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		private bool wasInMatchmakingGame;

		[Token(Token = "0x40026AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly List<UnityEngine.Sprite> unlockedSprites;

		[Token(Token = "0x40026AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly List<string> unlockedNames;

		[Token(Token = "0x6001B4F")]
		[Address(RVA = "0x103D230", Offset = "0x103D230", VA = "0x103D230")]
		public LevelUpPopupViewHandler(MenuStateData menuStateData, PlayFabProgressionData playFabProgressionData, CustomizationData customizationData, Dictionary<ToolName, ToolSetting> toolSettings, LevelUpViewData levelUpViewData, DeckData deckData)
		{
		}

		[Token(Token = "0x6001B50")]
		[Address(RVA = "0x103D33C", Offset = "0x103D33C", VA = "0x103D33C")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001B51")]
		[Address(RVA = "0x103D340", Offset = "0x103D340", VA = "0x103D340")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001B52")]
		[Address(RVA = "0x103D4E4", Offset = "0x103D4E4", VA = "0x103D4E4", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001B53")]
		[Address(RVA = "0x103D510", Offset = "0x103D510", VA = "0x103D510")]
		private void UpdatedLevelUpInfo()
		{
		}

		[Token(Token = "0x6001B54")]
		[Address(RVA = "0x103D720", Offset = "0x103D720", VA = "0x103D720")]
		private void FindItemsUnlockedAtLevel(int currentLevel)
		{
		}

		[Token(Token = "0x6001B55")]
		[Address(RVA = "0x103DED4", Offset = "0x103DED4", VA = "0x103DED4")]
		private int UpdatedUnlockedIcons()
		{
			return default(int);
		}

		[Token(Token = "0x6001B56")]
		[Address(RVA = "0x103E0D8", Offset = "0x103E0D8", VA = "0x103E0D8")]
		private void SetViewHeight(int counter)
		{
		}
	}
	[Token(Token = "0x2000614")]
	public enum LockerRoomState
	{
		[Token(Token = "0x40026B0")]
		Initialized,
		[Token(Token = "0x40026B1")]
		GameRequested,
		[Token(Token = "0x40026B2")]
		ReadyToEnterArena,
		[Token(Token = "0x40026B3")]
		ReadyToEnterStoryEvent
	}
	[Token(Token = "0x2000615")]
	public class LockerRoomGameStateData
	{
		[Token(Token = "0x40026B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LockerRoomState currentState;

		[Token(Token = "0x40026B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool cancellingMatchMaking;

		[Token(Token = "0x40026B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool isMatchMaking;

		[Token(Token = "0x40026B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float timestampWhenMultiplayerGameWasRequested;

		[Token(Token = "0x40026B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string typeOfMultiplayerGameRequest;

		[Token(Token = "0x40026B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool skipResetRegionWhenInitiating;

		[Token(Token = "0x40026BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Queue<StartGameRequest> startGameRequests;

		[Token(Token = "0x40026BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Queue<StartStoryEventRequest> startStoryEventRequests;

		[Token(Token = "0x40026BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Queue<float> startOnboardingRequests;

		[Token(Token = "0x40026BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Queue initArenaObjectsSkingChange;

		[Token(Token = "0x40026BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public StartGameRequest currentStartGameRequest;

		[Token(Token = "0x6001B57")]
		[Address(RVA = "0x103E17C", Offset = "0x103E17C", VA = "0x103E17C")]
		public LockerRoomGameStateData()
		{
		}
	}
	[Token(Token = "0x2000616")]
	public class StartGameRequest
	{
		[Token(Token = "0x40026BF")]
		public const string AUTOSPECTATOR_ORIGIN = "autospectator";

		[Token(Token = "0x40026C0")]
		public const string LOCKERROOM_ORIGIN = "locker";

		[Token(Token = "0x40026C1")]
		public const string BOWERSER_ORIGIN = "ozo";

		[Token(Token = "0x40026C2")]
		public const string REPLAY_ORIGIN = "replay";

		[Token(Token = "0x40026C3")]
		public const string CAMPAIGN_ORIGIN = "campaign";

		[Token(Token = "0x40026C4")]
		public const string DEEP_LINK = "deeplink";

		[Token(Token = "0x40026C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly GameMode gameMode;

		[Token(Token = "0x40026C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly GameplayRules gameplayRules;

		[Token(Token = "0x40026C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly bool shouldBeThrownAwayAtInitilizeOfLockerroomState;

		[Token(Token = "0x40026C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public readonly bool isMatchmaking;

		[Token(Token = "0x40026C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly float timestamp;

		[Token(Token = "0x40026CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string opponentId;

		[Token(Token = "0x40026CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string rewardRandomSeed;

		[Token(Token = "0x40026CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int? opponentLeaguePoints;

		[Token(Token = "0x40026CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string requestOrigin;

		[Token(Token = "0x40026CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string matchmakingQueueName;

		[Token(Token = "0x40026CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public PostMatchAction postMatchAction;

		[Token(Token = "0x40026D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public KnockoutTournamentMatchInfo knockoutTournamentMatchInfo;

		[Token(Token = "0x6001B58")]
		[Address(RVA = "0x1038BD0", Offset = "0x1038BD0", VA = "0x1038BD0")]
		public StartGameRequest(GameMode gameMode, GameplayRules gameplayRules, bool shouldBeThrownAwayAtInitilizeOfLockerroomState, PostMatchAction postMatchAction, string requestOrigin = "locker", [Optional] KnockoutTournamentMatchInfo knockoutTournamentMatchInfo)
		{
		}

		[Token(Token = "0x6001B59")]
		[Address(RVA = "0x103E2B0", Offset = "0x103E2B0", VA = "0x103E2B0")]
		public StartGameRequest(GameMode gameMode, GameplayRules gameplayRules, bool shouldBeThrownAwayAtInitilizeOfLockerroomState, bool isMatchmaking, string opponentId, string rewardRandomSeed, [Optional] int? opponentLeaguePoints, string requestOrigin = "locker", [Optional] string matchmakingQueueName)
		{
		}

		[Token(Token = "0x6001B5A")]
		[Address(RVA = "0x103E334", Offset = "0x103E334", VA = "0x103E334")]
		public float GetAge()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000617")]
	public class PostMatchAction
	{
		[Token(Token = "0x2000618")]
		public enum Type
		{
			[Token(Token = "0x40026D5")]
			DoNothing,
			[Token(Token = "0x40026D6")]
			GoToOzo
		}

		[Token(Token = "0x40026D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static PostMatchAction DoNothing;

		[Token(Token = "0x40026D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type postMatchActionType;

		[Token(Token = "0x40026D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string parameters;

		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0x103E354", Offset = "0x103E354", VA = "0x103E354")]
		public PostMatchAction(Type postMatchActionType, string parameters)
		{
		}
	}
	[Token(Token = "0x2000619")]
	public class StartStoryEventRequest
	{
		[Token(Token = "0x40026D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly StoryEventSettings storyEventSettings;

		[Token(Token = "0x40026D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly bool shouldBeThrownAwayAtInitilizeOfLockerroomState;

		[Token(Token = "0x40026D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PostMatchAction postMatchAction;

		[Token(Token = "0x6001B5D")]
		[Address(RVA = "0x103E408", Offset = "0x103E408", VA = "0x103E408")]
		public StartStoryEventRequest(StoryEventSettings storyEventSettings)
		{
		}

		[Token(Token = "0x6001B5E")]
		[Address(RVA = "0x103E48C", Offset = "0x103E48C", VA = "0x103E48C")]
		public StartStoryEventRequest(StoryEventSettings storyEventSettings, bool shouldBeThrownAwayAtInitilizeOfLockerroomState, PostMatchAction postMatchAction)
		{
		}
	}
	[Token(Token = "0x200061A")]
	public class LockerRoomGameState : IGameState
	{
		[Token(Token = "0x40026DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x40026DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<ITickable> lockerRoomGameStatePreTickHandlers;

		[Token(Token = "0x40026DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<ITickable> lockerRoomGameStatePostTickHandlers;

		[Token(Token = "0x40026DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<IFixedTickable> lockerRoomGameStateFixedTickHandlers;

		[Token(Token = "0x40026DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly List<ILateTickable> lockerRoomGameStateLateTickHandlers;

		[Token(Token = "0x40026DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x40026E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private EntryPoint.GameState nextGameState;

		[Token(Token = "0x40026E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly GameData gameData;

		[Token(Token = "0x40026E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly LeaderBoardData ratingLeaderBoardData;

		[Token(Token = "0x40026E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly LeaderBoardData winsLeaderBoardData;

		[Token(Token = "0x40026E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x40026E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly NetworkRegionSelector networkRegionSelector;

		[Token(Token = "0x40026E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly GameMechanicStateHelper gameMechanicStateHelper;

		[Token(Token = "0x40026E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly ToolSpawnAlgorithmData toolSpawnAlgorithmData;

		[Token(Token = "0x40026E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly List<IToolSpawnAlgorithm> toolSpawnAlgorithms;

		[Token(Token = "0x40026E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x40026EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly MatchRewardPredictionData matchRewardPredictionData;

		[Token(Token = "0x40026EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly PlayerStatisticsData playerStatisticsData;

		[Token(Token = "0x40026EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly BannerData bannerData;

		[Token(Token = "0x40026ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly PlatformData platformData;

		[Token(Token = "0x40026EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly OwnershipData ownershipData;

		[Token(Token = "0x40026EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x40026F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly CameraFadeData cameraFadeData;

		[Token(Token = "0x40026F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly PlayerSpawnPointReference playerSpawnPointReference;

		[Token(Token = "0x40026F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly PlayerReferences playerReferences;

		[Token(Token = "0x40026F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly TournamentEventData tournamentEventData;

		[Token(Token = "0x40026F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly OnboardingGameStateData onboardingGameStateData;

		[Token(Token = "0x40026F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private readonly StoryEventGameStateData storyEventGameStateData;

		[Token(Token = "0x40026F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private readonly ArenaGameStateSettings arenaGameStateSettings;

		[Token(Token = "0x40026F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private readonly GamePlayRulesData gamePlayRulesData;

		[Token(Token = "0x40026F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private readonly DeckData deckData;

		[Token(Token = "0x40026F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private readonly ToolAttachmentsData toolAttachmentsData;

		[Token(Token = "0x40026FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x40026FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x40026FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private readonly ArcadeOperatorSettingsData arcadeOperatorSettingsData;

		[Token(Token = "0x40026FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private IToolSpawnAlgorithm nextSpawnAlgorithm;

		[Token(Token = "0x40026FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AiData aiData;

		[Token(Token = "0x40026FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private List<BotSettings> listOfBotSettings;

		[Token(Token = "0x4002700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4002701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private readonly CharacterData characterData;

		[Token(Token = "0x4002702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private bool allowedToMovePlayerToPlatfrom;

		[Token(Token = "0x4002703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private PlayFabLeaguePointsSeasonData playFabLeaguePointsSeasonData;

		[Token(Token = "0x4002704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private readonly DeckBuildSettings deckBuildSettings;

		[Token(Token = "0x6001B5F")]
		[Address(RVA = "0x103E4CC", Offset = "0x103E4CC", VA = "0x103E4CC")]
		public LockerRoomGameState(List<ITickable> lockerRoomGameStatePreTickHandlers, List<ITickable> lockerRoomGameStatePostTickHandlers, List<IFixedTickable> lockerRoomGameStateFixedTickHandlers, List<ILateTickable> lockerRoomGameStateLateTickHandlers, LockerRoomGameStateData lockerRoomGameStateData, IgnisNetworkConnectionData networkConnectionData, GameData gameData, IRoomTimeProvider roomTimeProvider, NetworkRegionSelector networkRegionSelector, GameMechanicStateHelper gameMechanicStateHelper, ToolSpawnAlgorithmData toolSpawnAlgorithmData, List<IToolSpawnAlgorithm> toolSpawnAlgorithms, PlayFabProgressionData playFabProgressionData, AiData aiData, List<BotSettings> listOfBotSettings, MatchRewardPredictionData matchRewardPredictionData, PlayerStatisticsData playerStatisticsData, BannerData bannerData, PlatformData platformData, OwnershipData ownershipData, PlayFabConnectionSettings playFabConnectionSettings, CameraFadeData cameraFadeData, PlayerSpawnPointReference playerSpawnPointReference, PlayerReferences playerReferences, ArenaGameStateData arenaGameStateData, CharacterData characterData, TournamentEventData tournamentEventData, OnboardingGameStateData onboardingGameStateData, StoryEventGameStateData storyEventGameStateData, ArenaGameStateSettings arenaGameStateSettings, GamePlayRulesData gamePlayRulesData, DeckData deckData, ToolAttachmentsData toolAttachmentsData, IgnisTelemetry ignisTelemetry, PlayFabLeaguePointsSeasonData playFabLeaguePointsSeasonData, DeckBuildSettings deckBuildSettings, ArcadeData arcadeData, ArcadeOperatorSettingsData arcadeOperatorSettingsData)
		{
		}

		[Token(Token = "0x6001B60")]
		[Address(RVA = "0x103E630", Offset = "0x103E630", VA = "0x103E630", Slot = "4")]
		public void Initalize()
		{
		}

		[Token(Token = "0x6001B61")]
		[Address(RVA = "0x103F0A4", Offset = "0x103F0A4", VA = "0x103F0A4")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001B62")]
		[Address(RVA = "0x103F208", Offset = "0x103F208", VA = "0x103F208")]
		private void ChangeHowToolSpawn(int value)
		{
		}

		[Token(Token = "0x6001B63")]
		[Address(RVA = "0x103EDBC", Offset = "0x103EDBC", VA = "0x103EDBC")]
		private void ChangeLockerRoomGameState(LockerRoomState newState)
		{
		}

		[Token(Token = "0x6001B64")]
		[Address(RVA = "0x103F268", Offset = "0x103F268", VA = "0x103F268", Slot = "6")]
		public EntryPoint.GameState Tick()
		{
			return default(EntryPoint.GameState);
		}

		[Token(Token = "0x6001B65")]
		[Address(RVA = "0x103F5FC", Offset = "0x103F5FC", VA = "0x103F5FC")]
		private void HandleStartGameRequests()
		{
		}

		[Token(Token = "0x6001B66")]
		[Address(RVA = "0x103EE84", Offset = "0x103EE84", VA = "0x103EE84")]
		private void HandleStartGameRules(GameplayRules gameplayRules, GameMode gameMode)
		{
		}

		[Token(Token = "0x6001B67")]
		[Address(RVA = "0x103FB10", Offset = "0x103FB10", VA = "0x103FB10", Slot = "10")]
		public void OnApplicationPause(bool isPaused)
		{
		}

		[Token(Token = "0x6001B68")]
		[Address(RVA = "0x103F510", Offset = "0x103F510", VA = "0x103F510")]
		private void TryToSwapToPlayerOnePosition()
		{
		}

		[Token(Token = "0x6001B69")]
		[Address(RVA = "0x103FB14", Offset = "0x103FB14", VA = "0x103FB14", Slot = "11")]
		public void Terminate()
		{
		}

		[Token(Token = "0x6001B6A")]
		[Address(RVA = "0x103FBF8", Offset = "0x103FBF8", VA = "0x103FBF8", Slot = "8")]
		public void LateTick()
		{
		}

		[Token(Token = "0x6001B6B")]
		[Address(RVA = "0x103FCF4", Offset = "0x103FCF4", VA = "0x103FCF4", Slot = "9")]
		public void FixedTick()
		{
		}

		[Token(Token = "0x6001B6C")]
		[Address(RVA = "0x103FDF0", Offset = "0x103FDF0", VA = "0x103FDF0", Slot = "5")]
		public void PreTick()
		{
		}

		[Token(Token = "0x6001B6D")]
		[Address(RVA = "0x103FEEC", Offset = "0x103FEEC", VA = "0x103FEEC", Slot = "7")]
		public void PostTick()
		{
		}
	}
	[Token(Token = "0x200061B")]
	public class LockerRoomSceneHandler : ITickable
	{
		[Token(Token = "0x4002705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly SceneHandlerData sceneHandlerData;

		[Token(Token = "0x4002706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BarEntranceData barEntranceData;

		[Token(Token = "0x4002707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4002708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GlobalMatchmakingStateData matchmakingStateData;

		[Token(Token = "0x4002709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x400270A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly CameraFadeData cameraFadeData;

		[Token(Token = "0x400270B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x400270C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly NetworkData networkData;

		[Token(Token = "0x400270D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool isLoadingHomeRoom;

		[Token(Token = "0x400270E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool isLoadingInitialBaseScene;

		[Token(Token = "0x400270F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		private bool isWaitingToJoinRoom;

		[Token(Token = "0x4002710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		private bool isLoadingFirstSceneOfTheGame;

		[Token(Token = "0x4002711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private EntryPoint.GameState lastSeenGameState;

		[Token(Token = "0x4002712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int numberConnectionIssuesAtInit;

		[Token(Token = "0x6001B6E")]
		[Address(RVA = "0x103FFE8", Offset = "0x103FFE8", VA = "0x103FFE8")]
		public LockerRoomSceneHandler(SceneHandlerData sceneHandlerData, BarEntranceData barEntranceData, EntryPoint.EntryPointData entryPointData, GlobalMatchmakingStateData matchmakingStateData, LockerRoomGameStateData lockerRoomGameStateData, CameraFadeData cameraFadeData, FindFriendData findFriendData, NetworkData networkData)
		{
		}

		[Token(Token = "0x6001B6F")]
		[Address(RVA = "0x1040050", Offset = "0x1040050", VA = "0x1040050")]
		public void LoadInitialScene()
		{
		}

		[Token(Token = "0x6001B70")]
		[Address(RVA = "0x10401F4", Offset = "0x10401F4", VA = "0x10401F4", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001B71")]
		[Address(RVA = "0x10402E4", Offset = "0x10402E4", VA = "0x10402E4")]
		private void LoadHomeRoomOnFailingToJoinRoom()
		{
		}

		[Token(Token = "0x6001B72")]
		[Address(RVA = "0x1040214", Offset = "0x1040214", VA = "0x1040214")]
		private void FadeOutFirstLoadedScene()
		{
		}

		[Token(Token = "0x6001B73")]
		[Address(RVA = "0x1040404", Offset = "0x1040404", VA = "0x1040404")]
		private void TryToLoadHomeRoom()
		{
		}

		[Token(Token = "0x6001B74")]
		[Address(RVA = "0x10404C4", Offset = "0x10404C4", VA = "0x10404C4")]
		private void LoadHomeRoom(bool shouldBeInHomeRoom)
		{
		}
	}
	[Token(Token = "0x200061C")]
	[CreateAssetMenu(fileName = "LockerRoomSettings", menuName = "Settings/LockerRoom/LockerRoomSettings")]
	public class LockerRoomSettings : ScriptableObject
	{
		[Token(Token = "0x4002713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float retryConnectTimeout;

		[Token(Token = "0x6001B75")]
		[Address(RVA = "0x1040584", Offset = "0x1040584", VA = "0x1040584")]
		public LockerRoomSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200061D")]
	public class LoginVewSettings
	{
		[Token(Token = "0x4002714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PopupMessageReference popupMessageReference;

		[Token(Token = "0x4002715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string noInternetLocalizationId;

		[Token(Token = "0x4002716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string checkingAccountLocalizationId;

		[Token(Token = "0x6001B76")]
		[Address(RVA = "0x1040594", Offset = "0x1040594", VA = "0x1040594")]
		public LoginVewSettings()
		{
		}
	}
	[Token(Token = "0x200061E")]
	public class LoginViewHandler : ITickable
	{
		[Token(Token = "0x4002717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayFabLoginData loginData;

		[Token(Token = "0x4002718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameData gameData;

		[Token(Token = "0x4002719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly NetworkServicesDiagnosticsData networkServicesDiagnosticsData;

		[Token(Token = "0x400271A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly AnimationStateHandlerData animationStateHandlerData;

		[Token(Token = "0x400271B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x400271C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x400271D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x400271E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ErrorMessageData errorMessageData;

		[Token(Token = "0x400271F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x4002720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly DeckData deckData;

		[Token(Token = "0x4002721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly ToolMasteryData toolMasteryData;

		[Token(Token = "0x4002722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly StoryEventGameStateData storyEventGameStateData;

		[Token(Token = "0x4002723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private LoginVewSettings loginVewSettings;

		[Token(Token = "0x4002724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PopupMessageReference loginViewReference;

		[Token(Token = "0x4002725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool showingView;

		[Token(Token = "0x4002726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool isInternetAvaiable;

		[Token(Token = "0x4002727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AnimatorStateData currentAnimation;

		[Token(Token = "0x6001B77")]
		[Address(RVA = "0x104059C", Offset = "0x104059C", VA = "0x104059C")]
		public LoginViewHandler(PlayFabLoginData loginData, GameData gameData, NetworkServicesDiagnosticsData networkServicesDiagnosticsData, AnimationStateHandlerData animationStateHandlerData, EntryPoint.EntryPointData entryPointData, IgnisNetworkConnectionData networkConnectionData, ArenaGameStateData arenaGameStateData, ErrorMessageData errorMessageData, BayTekData bayTekData, DeckData deckData, ToolMasteryData toolMasteryData, StoryEventGameStateData storyEventGameStateData)
		{
		}

		[Token(Token = "0x6001B78")]
		[Address(RVA = "0x1040630", Offset = "0x1040630", VA = "0x1040630")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6001B79")]
		[Address(RVA = "0x1040818", Offset = "0x1040818", VA = "0x1040818")]
		public void SetUpDebug(DebugMenu debugMenu)
		{
		}

		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0x104081C", Offset = "0x104081C", VA = "0x104081C")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001B7B")]
		[Address(RVA = "0x10406E8", Offset = "0x10406E8", VA = "0x10406E8")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0x1040824", Offset = "0x1040824", VA = "0x1040824", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0x1041044", Offset = "0x1041044", VA = "0x1041044")]
		private bool IsLoggingIn()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B7E")]
		[Address(RVA = "0x1041020", Offset = "0x1041020", VA = "0x1041020")]
		private bool ConsiderConnectionWorkingConsideringPhotonConsecutiveConnectionErrorCount()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B7F")]
		[Address(RVA = "0x1040FAC", Offset = "0x1040FAC", VA = "0x1040FAC")]
		private bool ConsiderConnectionWorkingConsideringPlayFabCallErrors()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B80")]
		[Address(RVA = "0x1040778", Offset = "0x1040778", VA = "0x1040778")]
		private void SetDescription()
		{
		}
	}
	[Token(Token = "0x200061F")]
	public enum MenuState
	{
		[Token(Token = "0x4002729")]
		Hidden,
		[Token(Token = "0x400272A")]
		Main,
		[Token(Token = "0x400272B")]
		Tools,
		[Token(Token = "0x400272C")]
		Settings,
		[Token(Token = "0x400272D")]
		Customization,
		[Token(Token = "0x400272E")]
		News,
		[Token(Token = "0x400272F")]
		LeaderBoard,
		[Token(Token = "0x4002730")]
		Mission,
		[Token(Token = "0x4002731")]
		StoryEvent,
		[Token(Token = "0x4002732")]
		Spectator,
		[Token(Token = "0x4002733")]
		Tournament,
		[Token(Token = "0x4002734")]
		ArcadeOperatorSettings,
		[Token(Token = "0x4002735")]
		Shop
	}
	[Token(Token = "0x2000620")]
	public class MenuStateData
	{
		[Token(Token = "0x4002736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MenuState menuState;

		[Token(Token = "0x4002737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public MenuState nextState;

		[Token(Token = "0x4002738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MenuState savedMenuState;

		[Token(Token = "0x4002739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MainMenuReference mainMenuReference;

		[Token(Token = "0x400273A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MainMenuTabsReference mainMenuTabsReference;

		[Token(Token = "0x400273B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PlayerInfoPanelReference playerInfoPanelReference;

		[Token(Token = "0x400273C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool goBackToMainMenu;

		[Token(Token = "0x400273D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ToolName toolToNavigateTo;

		[Token(Token = "0x400273E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string itemToNavigateTo;

		[Token(Token = "0x400273F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool blockInteraction;

		[Token(Token = "0x6001B81")]
		[Address(RVA = "0x104106C", Offset = "0x104106C", VA = "0x104106C")]
		public MenuStateData()
		{
		}
	}
	[Token(Token = "0x2000621")]
	public class MainMenuHandler : ITickable
	{
		[Token(Token = "0x4002740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4002742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4002743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4002744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4002745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4002746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameData gameData;

		[Token(Token = "0x4002747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly GameMechanicStateHelper gameMechanicStateHelper;

		[Token(Token = "0x4002748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly IToolSpawnAlgorithm toolSpawnAlgorithm;

		[Token(Token = "0x4002749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly CharacterData characterData;

		[Token(Token = "0x400274A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly PlatformData platformData;

		[Token(Token = "0x400274B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly BannerData bannerData;

		[Token(Token = "0x400274C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly BotController botController;

		[Token(Token = "0x400274D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly AiData aiData;

		[Token(Token = "0x400274E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly MenuStateSettings menuStateSettings;

		[Token(Token = "0x400274F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly FactoryData factoryData;

		[Token(Token = "0x4002750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x4002751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly LoginData loginData;

		[Token(Token = "0x4002752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly GlobalMatchmakingStateData matchmakingStateData;

		[Token(Token = "0x4002753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly ToolSpawnAlgorithmData toolSpawnAlgorithmData;

		[Token(Token = "0x4002754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly ErrorMessageData errorMessageData;

		[Token(Token = "0x4002755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly PlayerInfoPanelData playerInfoPanelData;

		[Token(Token = "0x4002756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly EndSeasonRewardViewData endSeasonRewardViewData;

		[Token(Token = "0x4002757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly SceneHandlerData sceneHandlerData;

		[Token(Token = "0x4002758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly BarEntranceData barEntranceData;

		[Token(Token = "0x4002759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly FeaturePermissionData featurePermissionData;

		[Token(Token = "0x400275A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly SettingsData settingsData;

		[Token(Token = "0x400275B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private readonly GameMessageData gameMessageData;

		[Token(Token = "0x400275C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x400275D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x400275E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x400275F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private readonly MissionViewHandlerData missionViewHandlerData;

		[Token(Token = "0x4002760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x4002761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private readonly BayTekMatchLoopData bayTekMatchLoopData;

		[Token(Token = "0x4002762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x4002763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private readonly OnBoardingViewData onboardingViewData;

		[Token(Token = "0x4002764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private readonly GameMessageDownloadHandlerData gameMessageDownloadHandlerData;

		[Token(Token = "0x4002765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4002766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private readonly DeckData deckData;

		[Token(Token = "0x4002767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private readonly ToolMasteryData toolMasteryData;

		[Token(Token = "0x4002768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private readonly RatingMatchmakerSettingsData ratingMatchmakerSettingsData;

		[Token(Token = "0x4002769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private readonly CoinShopData coinShopData;

		[Token(Token = "0x400276A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private bool initializeMechanics;

		[Token(Token = "0x400276B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x161")]
		private bool toolTestingRunning;

		[Token(Token = "0x400276C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int previousAiAgent;

		[Token(Token = "0x400276D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private bool forceMenuState;

		[Token(Token = "0x400276E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private MenuState forcedMenuState;

		[Token(Token = "0x400276F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool shouldForceMenuState;

		[Token(Token = "0x4002770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x171")]
		private bool isLoggingIn;

		[Token(Token = "0x4002771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x172")]
		private bool showingMainMenuView;

		[Token(Token = "0x4002772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private HashSet<MenuState> resumableMenuStates;

		[Token(Token = "0x6001B82")]
		[Address(RVA = "0x10410C4", Offset = "0x10410C4", VA = "0x10410C4")]
		public MainMenuHandler(MenuStateData menuStateData, EntryPoint.EntryPointData entryPointData, MessageSender messageSender, GameMessageFactory gameMessageFactory, IRoomTimeProvider roomTimeProvider, IgnisNetworkConnectionData networkConnectionData, GameData gameData, GameMechanicStateHelper gameMechanicStateHelper, IToolSpawnAlgorithm toolSpawnAlgorithm, CharacterData characterData, PlatformData platformData, BannerData bannerData, BotController botController, AiData aiData, MenuStateSettings menuStateSettings, FactoryData factoryData, DamageRecordKeeper damageRecordKeeper, LoginData loginData, GlobalMatchmakingStateData matchmakingStateData, ToolSpawnAlgorithmData toolSpawnAlgorithmData, ErrorMessageData errorMessageData, PlayerInfoPanelData playerInfoPanelData, EndSeasonRewardViewData endSeasonRewardViewData, SceneHandlerData sceneHandlerData, BarEntranceData barEntranceData, FeaturePermissionData featurePermissionData, SettingsData settingsData, GameMessageData gameMessageData, AutoSpectateData autoSpectateData, FindFriendData findFriendData, LockerRoomGameStateData lockerRoomGameStateData, MissionViewHandlerData missionViewHandlerData, BayTekData bayTekData, BayTekMatchLoopData bayTekMatchLoopData, ArcadeData arcadeData, OnBoardingViewData onboardingViewData, GameMessageDownloadHandlerData gameMessageDownloadHandlerData, IgnisTelemetry ignisTelemetry, DeckData deckData, ToolMasteryData toolMasteryData, RatingMatchmakerSettingsData ratingMatchmakerSettingsData, CoinShopData coinShopData)
		{
		}

		[Token(Token = "0x6001B83")]
		[Address(RVA = "0x10413C8", Offset = "0x10413C8", VA = "0x10413C8")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001B84")]
		[Address(RVA = "0x10413CC", Offset = "0x10413CC", VA = "0x10413CC")]
		public void ForceMenuState(bool shouldForce, MenuState menuState)
		{
		}

		[Token(Token = "0x6001B85")]
		[Address(RVA = "0x10413DC", Offset = "0x10413DC", VA = "0x10413DC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001B86")]
		[Address(RVA = "0x10418EC", Offset = "0x10418EC", VA = "0x10418EC")]
		private MenuState GetMenuStateToResumeTo()
		{
			return default(MenuState);
		}

		[Token(Token = "0x6001B87")]
		[Address(RVA = "0x10416F4", Offset = "0x10416F4", VA = "0x10416F4")]
		private bool IsInArcadeMenu()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B88")]
		[Address(RVA = "0x1041690", Offset = "0x1041690", VA = "0x1041690")]
		private bool IsInBayTekMenu()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B89")]
		[Address(RVA = "0x104172C", Offset = "0x104172C", VA = "0x104172C")]
		private bool GetShouldHideMenu()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B8A")]
		[Address(RVA = "0x1041958", Offset = "0x1041958", VA = "0x1041958")]
		private void RunToolTesting()
		{
		}

		[Token(Token = "0x6001B8B")]
		[Address(RVA = "0x1041674", Offset = "0x1041674", VA = "0x1041674")]
		public void ChangeState(MenuState state)
		{
		}

		[Token(Token = "0x6001B8C")]
		[Address(RVA = "0x1041C3C", Offset = "0x1041C3C", VA = "0x1041C3C")]
		private void OnChangeState(MenuState state)
		{
		}

		[Token(Token = "0x6001B8D")]
		[Address(RVA = "0x1042330", Offset = "0x1042330", VA = "0x1042330")]
		private void CleanUpAfterToolTesting()
		{
		}
	}
	[Token(Token = "0x2000622")]
	public class MainMenuReference : MonoBehaviour
	{
		[Token(Token = "0x4002773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject meshParent;

		[Token(Token = "0x4002774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator animator;

		[Token(Token = "0x4002775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform animationRoot;

		[Token(Token = "0x4002776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Canvas networkDiagnosticCanvas;

		[Token(Token = "0x4002777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public NetworkServicesDiagnosticsReference networkServicesDiagnosticsReference;

		[Token(Token = "0x4002778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimatorStateData showMenuAnimation;

		[Token(Token = "0x4002779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimatorStateData hideMenuAnimation;

		[Token(Token = "0x400277A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimatorStateData showToolMenuAnimation;

		[Token(Token = "0x400277B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimatorStateData hideToolMenuAnimation;

		[Token(Token = "0x6001B8E")]
		[Address(RVA = "0x1042524", Offset = "0x1042524", VA = "0x1042524")]
		public MainMenuReference()
		{
		}
	}
	[Token(Token = "0x2000623")]
	public class MainMenuTabsReference : MonoBehaviour
	{
		[Token(Token = "0x400277C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas tabCanvas;

		[Token(Token = "0x400277D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button playTabButton;

		[Token(Token = "0x400277E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button toolsTabButton;

		[Token(Token = "0x400277F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button leaderBoardTabButton;

		[Token(Token = "0x4002780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Button shopTabButton;

		[Token(Token = "0x4002781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Button newsTabButton;

		[Token(Token = "0x4002782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Button settingsTabButton;

		[Token(Token = "0x4002783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Button quitButton;

		[Token(Token = "0x4002784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Button storyEventButton;

		[Token(Token = "0x4002785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Button cosmeticsButton;

		[Token(Token = "0x4002786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Button loadoutButton;

		[Token(Token = "0x4002787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform loadoutSubtabs;

		[Token(Token = "0x4002788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public BoxCollider tabCollider;

		[Token(Token = "0x6001B8F")]
		[Address(RVA = "0x104252C", Offset = "0x104252C", VA = "0x104252C")]
		public MainMenuTabsReference()
		{
		}
	}
	[Token(Token = "0x2000624")]
	public class MainMenuTabsViewHandler : ITickable
	{
		[Token(Token = "0x4002789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x400278A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MainMenuHandler mainMenuHandler;

		[Token(Token = "0x400278B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MenuStateSettings menuStateSettings;

		[Token(Token = "0x400278C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameData gameData;

		[Token(Token = "0x400278D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly LeagueTierProgressData leagueTierProgressData;

		[Token(Token = "0x400278E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x400278F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly PlayerSpawnPointReference playerSpawnPointReference;

		[Token(Token = "0x4002790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MainMenuTabsReference mainMenuTabsReference;

		[Token(Token = "0x4002791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool showingMainMenuTabs;

		[Token(Token = "0x4002792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private MenuState currentState;

		[Token(Token = "0x4002793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 center;

		[Token(Token = "0x4002794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 direction;

		[Token(Token = "0x4002795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool interactionIsBlocked;

		[Token(Token = "0x4002796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly ProfilerMarker mainMenuTabsViewProfileMarker;

		[Token(Token = "0x6001B90")]
		[Address(RVA = "0x1042534", Offset = "0x1042534", VA = "0x1042534")]
		public MainMenuTabsViewHandler(MenuStateData menuStateData, MainMenuHandler mainMenuHandler, MenuStateSettings menuStateSettings, GameData gameData, PlayerSpawnPointReference playerSpawnPointReference, LeagueTierProgressData leagueTierProgressData, FindFriendData findFriendData)
		{
		}

		[Token(Token = "0x6001B91")]
		[Address(RVA = "0x10425E8", Offset = "0x10425E8", VA = "0x10425E8")]
		public void Initialize(MainMenuTabsReference menuTabsReference, Transform worldParent)
		{
		}

		[Token(Token = "0x6001B92")]
		[Address(RVA = "0x1042C64", Offset = "0x1042C64", VA = "0x1042C64")]
		private void ChangeState(MenuState menuState)
		{
		}

		[Token(Token = "0x6001B93")]
		[Address(RVA = "0x1042C2C", Offset = "0x1042C2C", VA = "0x1042C2C")]
		private void SetSubTabs(bool isActive)
		{
		}

		[Token(Token = "0x6001B94")]
		[Address(RVA = "0x1042C8C", Offset = "0x1042C8C", VA = "0x1042C8C")]
		private void ToggleCustomizationSubMenu()
		{
		}

		[Token(Token = "0x6001B95")]
		[Address(RVA = "0x10429E8", Offset = "0x10429E8", VA = "0x10429E8")]
		private void RotateMenuTowardsPlayer()
		{
		}

		[Token(Token = "0x6001B96")]
		[Address(RVA = "0x1042CD0", Offset = "0x1042CD0", VA = "0x1042CD0")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001B97")]
		[Address(RVA = "0x1042BD8", Offset = "0x1042BD8", VA = "0x1042BD8")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001B98")]
		[Address(RVA = "0x1042CD8", Offset = "0x1042CD8", VA = "0x1042CD8")]
		private void SetInteractableState(bool isInteractable)
		{
		}

		[Token(Token = "0x6001B99")]
		[Address(RVA = "0x1042DF0", Offset = "0x1042DF0", VA = "0x1042DF0", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x2000625")]
	public class MainMenuViewHandler : ITickable
	{
		[Token(Token = "0x4002797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MenuStateSettings menuStateSettings;

		[Token(Token = "0x4002799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly GameData gameData;

		[Token(Token = "0x400279A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayerSpawnPointReference playerSpawnPointReference;

		[Token(Token = "0x400279B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly NetworkServicesDiagnosticsData networkServicesDiagnosticsData;

		[Token(Token = "0x400279C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly AnimationStateHandlerData animationStateHandlerData;

		[Token(Token = "0x400279D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MainMenuReference mainMenuReference;

		[Token(Token = "0x400279E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool showingMainMenu;

		[Token(Token = "0x400279F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private MenuState currentState;

		[Token(Token = "0x40027A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 center;

		[Token(Token = "0x40027A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 direction;

		[Token(Token = "0x40027A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AnimatorStateData currentAnimation;

		[Token(Token = "0x40027A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly ProfilerMarker mainMenuViewProfileMarker;

		[Token(Token = "0x6001BA2")]
		[Address(RVA = "0x1042F68", Offset = "0x1042F68", VA = "0x1042F68")]
		public MainMenuViewHandler(MenuStateData menuStateData, MenuStateSettings menuStateSettings, GameData gameData, PlayerSpawnPointReference playerSpawnPointReference, NetworkServicesDiagnosticsData networkServicesDiagnosticsData, AnimationStateHandlerData animationStateHandlerData)
		{
		}

		[Token(Token = "0x6001BA3")]
		[Address(RVA = "0x104300C", Offset = "0x104300C", VA = "0x104300C")]
		public void Initialize(MainMenuReference menuReference, Transform worldParent)
		{
		}

		[Token(Token = "0x6001BA4")]
		[Address(RVA = "0x1043320", Offset = "0x1043320", VA = "0x1043320")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001BA5")]
		[Address(RVA = "0x10432A4", Offset = "0x10432A4", VA = "0x10432A4")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001BA6")]
		[Address(RVA = "0x10430B4", Offset = "0x10430B4", VA = "0x10430B4")]
		private void RotateMenuTowardsPlayer()
		{
		}

		[Token(Token = "0x6001BA7")]
		[Address(RVA = "0x1043328", Offset = "0x1043328", VA = "0x1043328", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x2000626")]
	[CreateAssetMenu(menuName = "Settings/Game State/MenuStateSettings")]
	public class MenuStateSettings : ScriptableObject
	{
		[Token(Token = "0x40027A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float menuDistanceFromPlayer;

		[Token(Token = "0x40027A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float menuHeightFromPlatform;

		[Token(Token = "0x40027A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float rotationFromCenter;

		[Token(Token = "0x40027A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MainMenuReference mainMenuReference;

		[Token(Token = "0x40027A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MainMenuTabsReference mainMenuTabsReference;

		[Token(Token = "0x40027A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PlayMenuViewReferences playMenuViewReferences;

		[Token(Token = "0x40027AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TournamentEventMenuViewReference tournamentEventMenuViewReference;

		[Token(Token = "0x40027AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TournamentEventWidgetViewReference TournamentEventWidgetViewReference;

		[Token(Token = "0x40027AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AccountSettingsReference accountSettingsReference;

		[Token(Token = "0x40027AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FindFriendReference findFriendReference;

		[Token(Token = "0x40027AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LeaderBoardViewReference leaderBoardViewReference;

		[Token(Token = "0x40027AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public PlayerStatsWidgetReference playerStatsWidgetReference;

		[Token(Token = "0x40027B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public CharacterSelectSettings characterSelectSettings;

		[Token(Token = "0x40027B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public SettingsMenuSettings settingsMenuSettings;

		[Token(Token = "0x40027B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public NetworkServicesDiagnosticsSettings networkServicesDiagnosticsSettings;

		[Token(Token = "0x40027B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public BotSettings botInToolSelection;

		[Token(Token = "0x40027B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public PlayerInfoPanelReference playerInfoPanelReference;

		[Token(Token = "0x40027B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public NewsWidgetReference newsPopUpReference;

		[Token(Token = "0x40027B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public NewsViewReference newsViewReference;

		[Token(Token = "0x40027B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public MatchmakingViewReference matchmakingViewReference;

		[Token(Token = "0x40027B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public LoginVewSettings loginViewSettings;

		[Token(Token = "0x40027B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public PopupMessageReference errorMessageReference;

		[Token(Token = "0x40027BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public PopupMessageReference errorMessageDummyReference;

		[Token(Token = "0x40027BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public EndSeasonRewardViewReference endSeasonRewardReference;

		[Token(Token = "0x40027BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public PermissionRequestReference permissionRequestReference;

		[Token(Token = "0x40027BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public PermissionRequestReference quitApplicationViewRefernce;

		[Token(Token = "0x40027BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public SpectatorMenuViewReference spectatorMenuViewReference;

		[Token(Token = "0x40027BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public StoryMenuReference storyMenuReference;

		[Token(Token = "0x40027C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public StoryActWidgetViewReference storyActWidgetViewReference;

		[Token(Token = "0x40027C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public StoryGuidedBubbleReference storyGuidedBubbleReference;

		[Token(Token = "0x40027C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public AlwaysQueueWidgetViewReferences alwaysQueueWidgetViewReferences;

		[Token(Token = "0x40027C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public CoinShopReference coinShopReference;

		[Token(Token = "0x40027C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public IgnisButton onBoardingInformationButton;

		[Token(Token = "0x40027C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public UnityEngine.AddressableAssets.AssetReference onboardingPopupViewReference;

		[Token(Token = "0x40027C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Header("SideView")]
		public SideViewReference sideViewReference;

		[Token(Token = "0x40027C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public string sideViewHintLocalization;

		[Token(Token = "0x40027C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public SymbolSpecificLocalization sideViewHintButtonId;

		[Token(Token = "0x6001BA8")]
		[Address(RVA = "0x1043480", Offset = "0x1043480", VA = "0x1043480")]
		public MenuStateSettings()
		{
		}
	}
	[Token(Token = "0x2000627")]
	public class MissionClaimRewardPopupReference : MonoBehaviour
	{
		[Token(Token = "0x40027C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("General")]
		public Canvas canvas;

		[Token(Token = "0x40027CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BoxCollider boxCollider;

		[Token(Token = "0x40027CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimatorStateData showAnimation;

		[Token(Token = "0x40027CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimatorStateData hideAnimation;

		[Token(Token = "0x40027CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI header;

		[Token(Token = "0x40027CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IgnisButton continueButton;

		[Token(Token = "0x40027CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IgnisButton backButton;

		[Token(Token = "0x6001BA9")]
		[Address(RVA = "0x1043490", Offset = "0x1043490", VA = "0x1043490")]
		public MissionClaimRewardPopupReference()
		{
		}
	}
	[Token(Token = "0x2000628")]
	public class MissionListReference : MonoBehaviour
	{
		[Token(Token = "0x40027D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform rectTransform;

		[Token(Token = "0x40027D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Image barImage;

		[Token(Token = "0x40027D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image missionIconComplete;

		[Token(Token = "0x40027D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Image missionIconIncomplete;

		[Token(Token = "0x40027D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material barBlueMaterial;

		[Token(Token = "0x40027D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material barGreenMaterial;

		[Token(Token = "0x40027D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LocalizedText description;

		[Token(Token = "0x40027D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LocalizedText unlockCountdown;

		[Token(Token = "0x40027D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LocalizedText progressText;

		[Token(Token = "0x40027D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Animator animator;

		[Token(Token = "0x1700010E")]
		public string MissionId
		{
			[Token(Token = "0x6001BAA")]
			[Address(RVA = "0x1043498", Offset = "0x1043498", VA = "0x1043498")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BAB")]
			[Address(RVA = "0x10434A0", Offset = "0x10434A0", VA = "0x10434A0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001BAC")]
		[Address(RVA = "0x10434A8", Offset = "0x10434A8", VA = "0x10434A8")]
		public MissionListReference()
		{
		}
	}
	[Token(Token = "0x2000629")]
	public class MissionNotificationHandlerData
	{
		[Token(Token = "0x40027DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool showingNotifications;

		[Token(Token = "0x40027DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool isHovering;

		[Token(Token = "0x6001BAD")]
		[Address(RVA = "0x10434B0", Offset = "0x10434B0", VA = "0x10434B0")]
		public MissionNotificationHandlerData()
		{
		}
	}
	[Token(Token = "0x200062A")]
	public class MissionNotificationHandler : ITickable
	{
		[Token(Token = "0x200062C")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass36_0
		{
			[Token(Token = "0x40027F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public (PlayerMissionProgress serverMissionProgress, PlayerMissionProgress localMissionProgress) mission;

			[Token(Token = "0x6001BC1")]
			[Address(RVA = "0x1044F60", Offset = "0x1044F60", VA = "0x1044F60")]
			public <>c__DisplayClass36_0()
			{
			}

			[Token(Token = "0x6001BC2")]
			[Address(RVA = "0x1044F68", Offset = "0x1044F68", VA = "0x1044F68")]
			internal bool <DelayEffect>b__0(PlayerMissionProgress m)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200062D")]
		[CompilerGenerated]
		private sealed class <DelayEffect>d__36 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40027F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40027F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40027F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public (PlayerMissionProgress serverMissionProgress, PlayerMissionProgress localMissionProgress) mission;

			[Token(Token = "0x40027FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MissionNotificationHandler <>4__this;

			[Token(Token = "0x40027FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public ParticleSystem particleSystem;

			[Token(Token = "0x40027FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private <>c__DisplayClass36_0 <>8__1;

			[Token(Token = "0x40027FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public MissionListReference reference;

			[Token(Token = "0x40027FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Animator animator;

			[Token(Token = "0x40027FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <startValue>5__2;

			[Token(Token = "0x4002800")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			private float <endValue>5__3;

			[Token(Token = "0x4002801")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private PlayerMissionProgress <progress>5__4;

			[Token(Token = "0x4002802")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private float <time>5__5;

			[Token(Token = "0x4002803")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			private float <barStartValue>5__6;

			[Token(Token = "0x4002804")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private float <barEndValue>5__7;

			[Token(Token = "0x4002805")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private float <textValue>5__8;

			[Token(Token = "0x4002806")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private float <barValue>5__9;

			[Token(Token = "0x4002807")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			private float <elapsedTime>5__10;

			[Token(Token = "0x1700010F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BC6")]
				[Address(RVA = "0x10454BC", Offset = "0x10454BC", VA = "0x10454BC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000110")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BC8")]
				[Address(RVA = "0x1045504", Offset = "0x1045504", VA = "0x1045504", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BC3")]
			[Address(RVA = "0x1044EB0", Offset = "0x1044EB0", VA = "0x1044EB0")]
			[DebuggerHidden]
			public <DelayEffect>d__36(int <>1__state)
			{
			}

			[Token(Token = "0x6001BC4")]
			[Address(RVA = "0x1044F90", Offset = "0x1044F90", VA = "0x1044F90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BC5")]
			[Address(RVA = "0x1044F94", Offset = "0x1044F94", VA = "0x1044F94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BC7")]
			[Address(RVA = "0x10454C4", Offset = "0x10454C4", VA = "0x10454C4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40027DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PlayerMissionsProgress localPlayerMissionsProgress;

		[Token(Token = "0x40027DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MissionNotificationHandlerData missionNotificationHandlerData;

		[Token(Token = "0x40027DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x40027E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MissionSettings missionSettings;

		[Token(Token = "0x40027E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly AnimatedCanvasHandlerData animatedCanvasHandlerData;

		[Token(Token = "0x40027E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly SeasonMissionsData seasonMissionsData;

		[Token(Token = "0x40027E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x40027E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ServerTimeSyncData serverTimeSyncData;

		[Token(Token = "0x40027E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly DuelSettingsViewData duelSettingsViewData;

		[Token(Token = "0x40027E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MissionNotificationReference missionNotificationReference;

		[Token(Token = "0x40027E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool showingView;

		[Token(Token = "0x40027E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private MissionHandlerState missionDownloadState;

		[Token(Token = "0x40027E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool missionDataIsDownloaded;

		[Token(Token = "0x40027EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool dataUpdated;

		[Token(Token = "0x40027EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int currentActiveMissionIndex;

		[Token(Token = "0x40027EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int notificationCyclesElapsed;

		[Token(Token = "0x40027ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int maxNotifCycles;

		[Token(Token = "0x40027EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float desiredAlpha;

		[Token(Token = "0x40027EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float currentAlpha;

		[Token(Token = "0x40027F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float interfadeTimer;

		[Token(Token = "0x40027F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool isUpdatingProgress;

		[Token(Token = "0x40027F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float showingProgressTimer;

		[Token(Token = "0x40027F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly Queue<(PlayerMissionProgress serverMissionProgress, PlayerMissionProgress localMissionProgress)> missionsWithProgress;

		[Token(Token = "0x40027F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool interactionIsBlocked;

		[Token(Token = "0x6001BAE")]
		[Address(RVA = "0x10434B8", Offset = "0x10434B8", VA = "0x10434B8")]
		public MissionNotificationHandler(MissionNotificationHandlerData missionNotificationHandlerData, MenuStateData menuStateData, MissionSettings missionSettings, AnimatedCanvasHandlerData animatedCanvasHandlerData, SeasonMissionsData seasonMissionsData, CustomizationData customizationData, ServerTimeSyncData serverTimeSyncData, DuelSettingsViewData duelSettingsViewData)
		{
		}

		[Token(Token = "0x6001BAF")]
		[Address(RVA = "0x1043598", Offset = "0x1043598", VA = "0x1043598")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001BB0")]
		[Address(RVA = "0x10436D4", Offset = "0x10436D4", VA = "0x10436D4")]
		private void SetHoverTriggers()
		{
		}

		[Token(Token = "0x6001BB1")]
		[Address(RVA = "0x1043978", Offset = "0x1043978", VA = "0x1043978")]
		private void OnPointerEnter(BaseEventData data)
		{
		}

		[Token(Token = "0x6001BB2")]
		[Address(RVA = "0x1043A10", Offset = "0x1043A10", VA = "0x1043A10")]
		private void OnPointerExit(BaseEventData data)
		{
		}

		[Token(Token = "0x6001BB3")]
		[Address(RVA = "0x1043A80", Offset = "0x1043A80", VA = "0x1043A80")]
		private void GoToMissionTab()
		{
		}

		[Token(Token = "0x6001BB4")]
		[Address(RVA = "0x1043AA0", Offset = "0x1043AA0", VA = "0x1043AA0")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001BB5")]
		[Address(RVA = "0x1043AA8", Offset = "0x1043AA8", VA = "0x1043AA8")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001BB6")]
		[Address(RVA = "0x1043AD8", Offset = "0x1043AD8", VA = "0x1043AD8")]
		private void SwitchActiveMission(int nextMissionIndex = -1)
		{
		}

		[Token(Token = "0x6001BB7")]
		[Address(RVA = "0x1043B8C", Offset = "0x1043B8C", VA = "0x1043B8C")]
		private void HandleFade()
		{
		}

		[Token(Token = "0x6001BB8")]
		[Address(RVA = "0x1043C5C", Offset = "0x1043C5C", VA = "0x1043C5C")]
		private float SetTransparency(float current, float desired)
		{
			return default(float);
		}

		[Token(Token = "0x6001BB9")]
		[Address(RVA = "0x1043DAC", Offset = "0x1043DAC", VA = "0x1043DAC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001BBA")]
		[Address(RVA = "0x1044790", Offset = "0x1044790", VA = "0x1044790")]
		[IteratorStateMachine(typeof(<DelayEffect>d__36))]
		private IEnumerator DelayEffect(ParticleSystem particleSystem, Animator animator, (PlayerMissionProgress serverMissionProgress, PlayerMissionProgress localMissionProgress) mission, MissionListReference reference)
		{
			return null;
		}

		[Token(Token = "0x6001BBB")]
		[Address(RVA = "0x104462C", Offset = "0x104462C", VA = "0x104462C")]
		private void UpdateProgression()
		{
		}

		[Token(Token = "0x6001BBC")]
		[Address(RVA = "0x104482C", Offset = "0x104482C", VA = "0x104482C")]
		private void HandleUpdatingMissionsView()
		{
		}

		[Token(Token = "0x6001BBD")]
		[Address(RVA = "0x1044410", Offset = "0x1044410", VA = "0x1044410")]
		private void HandleMissionProgressionUpdate()
		{
		}

		[Token(Token = "0x6001BBE")]
		[Address(RVA = "0x10441C0", Offset = "0x10441C0", VA = "0x10441C0")]
		private PlayerMissionsProgress DeepClonePlayerMissionsProgress(PlayerMissionsProgress a)
		{
			return null;
		}
	}
	[Token(Token = "0x200062F")]
	public class MissionNotificationReference : MonoBehaviour
	{
		[Token(Token = "0x400280A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimatedCanvas animatedCanvas;

		[Token(Token = "0x400280B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button goToMissionTabButton;

		[Token(Token = "0x400280C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EventTrigger eventTrigger;

		[Token(Token = "0x400280D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI allMissionsProgress;

		[Token(Token = "0x400280E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LocalizedText clickToSeeAllText;

		[Token(Token = "0x400280F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CanvasGroup missionCanvasGroup;

		[Token(Token = "0x4002810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MissionListReference[] missions;

		[Token(Token = "0x4002811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ParticleSystem progressParticleEfect;

		[Token(Token = "0x6001BCC")]
		[Address(RVA = "0x10455E8", Offset = "0x10455E8", VA = "0x10455E8")]
		public MissionNotificationReference()
		{
		}
	}
	[Token(Token = "0x2000630")]
	public class MissionProgressHandler : ITickable
	{
		[Token(Token = "0x4002812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly SeasonMissionsData seasonMissionsData;

		[Token(Token = "0x4002813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4002814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4002815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MatchReportingData matchReportingData;

		[Token(Token = "0x4002816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4002817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly GameData gameData;

		[Token(Token = "0x4002818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly RatingMatchmakerSettingsData ratingMatchmakerSettingsData;

		[Token(Token = "0x4002819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly IDamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x400281A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly GameDesignTrackingData gameDesignTrackingData;

		[Token(Token = "0x400281B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly MatchRewardPredictionData matchRewardPredictionData;

		[Token(Token = "0x400281C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly DeckData deckData;

		[Token(Token = "0x400281D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly ReplayData replayData;

		[Token(Token = "0x400281E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x400281F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly ShopData shopData;

		[Token(Token = "0x4002820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x4002821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly ToolMasteryData toolMasteryData;

		[Token(Token = "0x4002822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MatchHandlerState lastSeenMatchHandlerState;

		[Token(Token = "0x4002823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool matchStateChangedThisFrame;

		[Token(Token = "0x4002824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		private bool matchEndedThisFrame;

		[Token(Token = "0x4002825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
		private bool roundEndedThisFrame;

		[Token(Token = "0x4002826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x97")]
		private bool matchStartedThisFrame;

		[Token(Token = "0x4002827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private StartGameRequest latestSeenStartGameRequest;

		[Token(Token = "0x4002828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string[] duelQueues;

		[Token(Token = "0x4002829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int lastSeenLeagueTier;

		[Token(Token = "0x400282A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private ToolSet lastSeenToolTracking;

		[Token(Token = "0x400282B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int previousSeenCreds;

		[Token(Token = "0x400282C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool toolMasteryUpdatedThisFrame;

		[Token(Token = "0x400282D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float lastSeenToolMasteryUpdateTimestamp;

		[Token(Token = "0x6001BCD")]
		[Address(RVA = "0x10455F0", Offset = "0x10455F0", VA = "0x10455F0")]
		public MissionProgressHandler(SeasonMissionsData seasonMissionsData, MatchHandlerData matchHandlerData, ArenaGameStateData arenaGameStateData, MatchReportingData matchReportingData, IgnisNetworkConnectionData networkConnectionData, GameData gameData, RatingMatchmakerSettingsData ratingMatchmakerSettingsData, IDamageRecordKeeper damageRecordKeeper, GameDesignTrackingData gameDesignTrackingData, MatchRewardPredictionData matchRewardPredictionData, DeckData deckData, ReplayData replayData, LockerRoomGameStateData lockerRoomGameStateData, ShopData shopData, PlayFabProgressionData playFabProgressionData, ToolMasteryData toolMasteryData)
		{
		}

		[Token(Token = "0x6001BCE")]
		[Address(RVA = "0x10456F8", Offset = "0x10456F8", VA = "0x10456F8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001BCF")]
		[Address(RVA = "0x104591C", Offset = "0x104591C", VA = "0x104591C")]
		private void CheckMasteryMasteryUpdated()
		{
		}

		[Token(Token = "0x6001BD0")]
		[Address(RVA = "0x1045990", Offset = "0x1045990", VA = "0x1045990")]
		private void CheckLeagueTierChange()
		{
		}

		[Token(Token = "0x6001BD1")]
		[Address(RVA = "0x104580C", Offset = "0x104580C", VA = "0x104580C")]
		private void CheckLockerRoom()
		{
		}

		[Token(Token = "0x6001BD2")]
		[Address(RVA = "0x104584C", Offset = "0x104584C", VA = "0x104584C")]
		private void CheckMatchHandler()
		{
		}

		[Token(Token = "0x6001BD3")]
		[Address(RVA = "0x1045A4C", Offset = "0x1045A4C", VA = "0x1045A4C")]
		private void CheckPlayDuelMission()
		{
		}

		[Token(Token = "0x6001BD4")]
		[Address(RVA = "0x1045AC0", Offset = "0x1045AC0", VA = "0x1045AC0")]
		private void CheckWinDuelMission()
		{
		}

		[Token(Token = "0x6001BD5")]
		[Address(RVA = "0x1045B40", Offset = "0x1045B40", VA = "0x1045B40")]
		private void CheckTotalDamage()
		{
		}

		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0x1045C54", Offset = "0x1045C54", VA = "0x1045C54")]
		private void CheckPlayOzoGames()
		{
		}

		[Token(Token = "0x6001BD7")]
		[Address(RVA = "0x1045CF8", Offset = "0x1045CF8", VA = "0x1045CF8")]
		private void CheckDealDamageTool()
		{
		}

		[Token(Token = "0x6001BD8")]
		[Address(RVA = "0x1046CA8", Offset = "0x1046CA8", VA = "0x1046CA8")]
		private void CheckDealDamageWithToolAndWinRound()
		{
		}

		[Token(Token = "0x6001BD9")]
		[Address(RVA = "0x1046AE8", Offset = "0x1046AE8", VA = "0x1046AE8")]
		private void CheckPickUpTool()
		{
		}

		[Token(Token = "0x6001BDA")]
		[Address(RVA = "0x1047404", Offset = "0x1047404", VA = "0x1047404")]
		private int ValueAsValue(float value)
		{
			return default(int);
		}

		[Token(Token = "0x6001BDB")]
		[Address(RVA = "0x1047420", Offset = "0x1047420", VA = "0x1047420")]
		private int RoundWinnerDoneDamage(float value)
		{
			return default(int);
		}

		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0x1047148", Offset = "0x1047148", VA = "0x1047148")]
		private void AggregateRoundCounters(GameDesignTrackingData.Type type, string missionId, Func<float, int> ValueFunctiong, int targetPlayerNetworkId)
		{
		}

		[Token(Token = "0x6001BDD")]
		[Address(RVA = "0x1045DA0", Offset = "0x1045DA0", VA = "0x1045DA0")]
		private void CheckDuelWinStreak()
		{
		}

		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0x1045E30", Offset = "0x1045E30", VA = "0x1045E30")]
		private void CheckWinRoundWithHealthRemaining()
		{
		}

		[Token(Token = "0x6001BDF")]
		[Address(RVA = "0x1045FE4", Offset = "0x1045FE4", VA = "0x1045FE4")]
		private void CheckWinRoundWithLessThanHealthRemaining()
		{
		}

		[Token(Token = "0x6001BE0")]
		[Address(RVA = "0x1046D50", Offset = "0x1046D50", VA = "0x1046D50")]
		public void CheckCredsEarned()
		{
		}

		[Token(Token = "0x6001BE1")]
		[Address(RVA = "0x1046198", Offset = "0x1046198", VA = "0x1046198")]
		public void CheckRewardsEarned()
		{
		}

		[Token(Token = "0x6001BE2")]
		[Address(RVA = "0x1046214", Offset = "0x1046214", VA = "0x1046214")]
		public void CheckWinDuelWithToolInDeck()
		{
		}

		[Token(Token = "0x6001BE3")]
		[Address(RVA = "0x104641C", Offset = "0x104641C", VA = "0x104641C")]
		public void Check21WinDuel()
		{
		}

		[Token(Token = "0x6001BE4")]
		[Address(RVA = "0x10464E0", Offset = "0x10464E0", VA = "0x10464E0")]
		private void CheckWinByUsing4Tools()
		{
		}

		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0x10468D8", Offset = "0x10468D8", VA = "0x10468D8")]
		private void CheckDuelHigherLP()
		{
		}

		[Token(Token = "0x6001BE6")]
		[Address(RVA = "0x10469C4", Offset = "0x10469C4", VA = "0x10469C4")]
		private void CheckFlawlessRound()
		{
		}

		[Token(Token = "0x6001BE7")]
		[Address(RVA = "0x10458A8", Offset = "0x10458A8", VA = "0x10458A8")]
		private void CheckReplay()
		{
		}

		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0x1046B90", Offset = "0x1046B90", VA = "0x1046B90")]
		private void CheckThrownDamage()
		{
		}

		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0x1046C1C", Offset = "0x1046C1C", VA = "0x1046C1C")]
		private void CheckThrownCollision()
		{
		}

		[Token(Token = "0x6001BEA")]
		[Address(RVA = "0x104796C", Offset = "0x104796C", VA = "0x104796C")]
		private void ProgressSpecificRoundRecordAsMission(GameDesignTrackingData.Type type, string missionId, string recordKey, int targetNetworkId)
		{
		}

		[Token(Token = "0x6001BEB")]
		[Address(RVA = "0x1046DD8", Offset = "0x1046DD8", VA = "0x1046DD8")]
		private void EnqueueMissionProgress(string missionId, int value, bool isDelta = true, [Optional] string qualifier)
		{
		}

		[Token(Token = "0x6001BEC")]
		[Address(RVA = "0x10470B0", Offset = "0x10470B0", VA = "0x10470B0")]
		private bool IAmWinner()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BED")]
		[Address(RVA = "0x1047448", Offset = "0x1047448", VA = "0x1047448")]
		private bool IAmRoundWinner()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BEE")]
		[Address(RVA = "0x1046F88", Offset = "0x1046F88", VA = "0x1046F88")]
		private bool IsDuellingMatchmakingGame()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BEF")]
		[Address(RVA = "0x1047884", Offset = "0x1047884", VA = "0x1047884")]
		private int MyHealthAtEndOfRound()
		{
			return default(int);
		}

		[Token(Token = "0x6001BF0")]
		[Address(RVA = "0x1047478", Offset = "0x1047478", VA = "0x1047478")]
		private HashSet<int> GetIntQualifierFromCurrentMissions(string missionId)
		{
			return null;
		}
	}
	[Token(Token = "0x2000631")]
	public enum MissionName
	{
		[Token(Token = "0x400282F")]
		total_damage_done,
		[Token(Token = "0x4002830")]
		play_duels,
		[Token(Token = "0x4002831")]
		win_duels,
		[Token(Token = "0x4002832")]
		play_ozo_games,
		[Token(Token = "0x4002833")]
		deal_damage_tool,
		[Token(Token = "0x4002834")]
		duel_win_streak,
		[Token(Token = "0x4002835")]
		win_rounds_with_health_remaining,
		[Token(Token = "0x4002836")]
		creds_earned,
		[Token(Token = "0x4002837")]
		win_duel_with_tool_in_deck,
		[Token(Token = "0x4002838")]
		gain_league_points,
		[Token(Token = "0x4002839")]
		win_duel_2_1,
		[Token(Token = "0x400283A")]
		win_round_by_using_x_different_tools,
		[Token(Token = "0x400283B")]
		win_duel_higher_lp,
		[Token(Token = "0x400283C")]
		watch_replay,
		[Token(Token = "0x400283D")]
		flawless_round,
		[Token(Token = "0x400283E")]
		grab_tool,
		[Token(Token = "0x400283F")]
		win_rounds_with_less_than_health_remaining,
		[Token(Token = "0x4002840")]
		deal_throw_damage_to_opponent,
		[Token(Token = "0x4002841")]
		deal_throw_collision,
		[Token(Token = "0x4002842")]
		deal_damage_with_tool_and_win_round,
		[Token(Token = "0x4002843")]
		reach_league_tier
	}
	[Token(Token = "0x2000632")]
	public class MissionRewardIcon : MonoBehaviour
	{
		[Token(Token = "0x4002844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image icon;

		[Token(Token = "0x4002845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocalizedText amountText;

		[Token(Token = "0x4002846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CanvasGroup canvasGroup;

		[Token(Token = "0x4002847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem claimParticles;

		[Token(Token = "0x6001BF2")]
		[Address(RVA = "0x1047C04", Offset = "0x1047C04", VA = "0x1047C04")]
		public MissionRewardIcon()
		{
		}
	}
	[Token(Token = "0x2000633")]
	[CreateAssetMenu(fileName = "MissionSettings", menuName = "Settings/MissionSettings")]
	public class MissionSettings : ScriptableObject
	{
		[Token(Token = "0x4002848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("UI")]
		public MissionNotificationReference missionNotificationReference;

		[Token(Token = "0x4002849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MissionWidgetReference missionWidgetReference;

		[Token(Token = "0x400284A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MissionViewReference missionViewReference;

		[Token(Token = "0x400284B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MissionClaimRewardPopupReference missionClaimRewardPopupReference;

		[Token(Token = "0x400284C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MissionListReference missionListReference;

		[Token(Token = "0x400284D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float missionListSpacing;

		[Token(Token = "0x400284E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEngine.Sprite blastRewardIcon;

		[Token(Token = "0x400284F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEngine.Sprite credRewardIcon;

		[Token(Token = "0x4002850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEngine.Sprite unknownItemRewardIcon;

		[Token(Token = "0x4002851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float timeBetweenFades;

		[Token(Token = "0x4002852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float fadeMultiplier;

		[Token(Token = "0x4002853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Missions")]
		public int numberOfMissions;

		[Token(Token = "0x4002854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Mission[] missions;

		[Token(Token = "0x4002855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("TextIds")]
		public string widgetLockedLocalizationId;

		[Token(Token = "0x4002856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string widgetSeasonCompleteLocalizationId;

		[Token(Token = "0x4002857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string widgetCountdownDayHoursLocalizationId;

		[Token(Token = "0x4002858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string widgetCountdownHoursMinutesLocalizationId;

		[Token(Token = "0x4002859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string claimRewardLocalizationId;

		[Token(Token = "0x400285A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly Dictionary<string, Mission> missionLookup;

		[Token(Token = "0x17000111")]
		public Dictionary<string, Mission> MissionLookup
		{
			[Token(Token = "0x6001BF3")]
			[Address(RVA = "0x1044ED8", Offset = "0x1044ED8", VA = "0x1044ED8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001BF4")]
		[Address(RVA = "0x1047C0C", Offset = "0x1047C0C", VA = "0x1047C0C")]
		private void SetupMissionLookup()
		{
		}

		[Token(Token = "0x6001BF5")]
		[Address(RVA = "0x1047CB4", Offset = "0x1047CB4", VA = "0x1047CB4")]
		public MissionSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000634")]
	public class Mission
	{
		[Token(Token = "0x2000635")]
		public enum MissionQualifierType
		{
			[Token(Token = "0x400285F")]
			None,
			[Token(Token = "0x4002860")]
			Tool,
			[Token(Token = "0x4002861")]
			Integer
		}

		[Token(Token = "0x400285B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string id;

		[Token(Token = "0x400285C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string localizedDescriptionId;

		[Token(Token = "0x400285D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MissionQualifierType qualifierType;

		[Token(Token = "0x6001BF6")]
		[Address(RVA = "0x1047D78", Offset = "0x1047D78", VA = "0x1047D78")]
		public Mission()
		{
		}
	}
	[Token(Token = "0x2000636")]
	public class MissionUpgradeReference : MonoBehaviour
	{
		[Token(Token = "0x4002862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MissionRewardIcon rewardIcon;

		[Token(Token = "0x4002863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IgnisButton upgradeButton;

		[Token(Token = "0x4002864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EventTrigger eventTrigger;

		[Token(Token = "0x4002865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LocalizedText typeText;

		[Token(Token = "0x4002866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LocalizedText buttonText;

		[Token(Token = "0x6001BF7")]
		[Address(RVA = "0x1047D80", Offset = "0x1047D80", VA = "0x1047D80")]
		public MissionUpgradeReference()
		{
		}
	}
	[Token(Token = "0x2000637")]
	public class MissionViewHandlerData
	{
		[Token(Token = "0x4002867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool claimingReward;

		[Token(Token = "0x6001BF8")]
		[Address(RVA = "0x1047D88", Offset = "0x1047D88", VA = "0x1047D88")]
		public MissionViewHandlerData()
		{
		}
	}
	[Token(Token = "0x2000638")]
	public class MissionViewHandler : ITickable
	{
		[Token(Token = "0x2000639")]
		[CompilerGenerated]
		private sealed class <ClaimRewards>d__36 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002886")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002887")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002888")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MissionViewHandler <>4__this;

			[Token(Token = "0x4002889")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private CanvasGroup <ms>5__2;

			[Token(Token = "0x400288A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private CanvasGroup <ps>5__3;

			[Token(Token = "0x400288B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private MissionRewardIcon[] <icons>5__4;

			[Token(Token = "0x400288C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <i>5__5;

			[Token(Token = "0x400288D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private Color <iconColor>5__6;

			[Token(Token = "0x400288E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float <time>5__7;

			[Token(Token = "0x400288F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <elapsedTime>5__8;

			[Token(Token = "0x17000112")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C29")]
				[Address(RVA = "0x104BC0C", Offset = "0x104BC0C", VA = "0x104BC0C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000113")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C2B")]
				[Address(RVA = "0x104BC54", Offset = "0x104BC54", VA = "0x104BC54", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C26")]
			[Address(RVA = "0x1048728", Offset = "0x1048728", VA = "0x1048728")]
			[DebuggerHidden]
			public <ClaimRewards>d__36(int <>1__state)
			{
			}

			[Token(Token = "0x6001C27")]
			[Address(RVA = "0x104B398", Offset = "0x104B398", VA = "0x104B398", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C28")]
			[Address(RVA = "0x104B39C", Offset = "0x104B39C", VA = "0x104B39C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C2A")]
			[Address(RVA = "0x104BC14", Offset = "0x104BC14", VA = "0x104BC14", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200063A")]
		[CompilerGenerated]
		private sealed class <RevealReward>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002890")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002891")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002892")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MissionViewHandler <>4__this;

			[Token(Token = "0x4002893")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private MissionRewardIcon <reward>5__2;

			[Token(Token = "0x17000114")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C2F")]
				[Address(RVA = "0x104BD5C", Offset = "0x104BD5C", VA = "0x104BD5C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000115")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C31")]
				[Address(RVA = "0x104BDA4", Offset = "0x104BDA4", VA = "0x104BDA4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C2C")]
			[Address(RVA = "0x104A48C", Offset = "0x104A48C", VA = "0x104A48C")]
			[DebuggerHidden]
			public <RevealReward>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x6001C2D")]
			[Address(RVA = "0x104BC5C", Offset = "0x104BC5C", VA = "0x104BC5C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C2E")]
			[Address(RVA = "0x104BC60", Offset = "0x104BC60", VA = "0x104BC60", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C30")]
			[Address(RVA = "0x104BD64", Offset = "0x104BD64", VA = "0x104BD64", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MissionViewHandlerData missionViewHandlerData;

		[Token(Token = "0x4002869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x400286A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MissionSettings missionSettings;

		[Token(Token = "0x400286B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly SeasonMissionsData seasonMissionsData;

		[Token(Token = "0x400286C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x400286D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly AnimationStateHandlerData animationStateHandlerData;

		[Token(Token = "0x400286E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ServerTimeSyncData serverTimeSyncData;

		[Token(Token = "0x400286F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4002870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4002871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly ShopData shopData;

		[Token(Token = "0x4002872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly SoundTriggersList soundTriggersList;

		[Token(Token = "0x4002873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MissionViewReference missionViewReference;

		[Token(Token = "0x4002874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MissionClaimRewardPopupReference missionClaimRewardPopupReference;

		[Token(Token = "0x4002875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<MissionListReference> missionLists;

		[Token(Token = "0x4002876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool showingView;

		[Token(Token = "0x4002877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool isInteractable;

		[Token(Token = "0x4002878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		private bool showClaimAnimationStarted;

		[Token(Token = "0x4002879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
		private bool thereAreOldRewardsToClaim;

		[Token(Token = "0x400287A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool currentSeasonComplete;

		[Token(Token = "0x400287B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private CompletedSeason claimingRewardsFromCompletedSeason;

		[Token(Token = "0x400287C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private UpgradeRewardRequest upgradeBlueRewardRequest;

		[Token(Token = "0x400287D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private UpgradeRewardRequest upgradePinkRewardRequest;

		[Token(Token = "0x400287E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private ClaimMissionRewardRequest claimMissionRewardRequest;

		[Token(Token = "0x400287F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float desiredAlpha;

		[Token(Token = "0x4002880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private int currentActiveMissionIndex;

		[Token(Token = "0x4002881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float currentAlpha;

		[Token(Token = "0x4002882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool shouldUpdateUI;

		[Token(Token = "0x4002883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Transform topUpgradesParent;

		[Token(Token = "0x4002884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform middleUpgradesParent;

		[Token(Token = "0x4002885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Transform bottomUpgradesParrent;

		[Token(Token = "0x6001BF9")]
		[Address(RVA = "0x1047D90", Offset = "0x1047D90", VA = "0x1047D90")]
		public MissionViewHandler(MissionViewHandlerData missionViewHandlerData, MenuStateData menuStateData, MissionSettings missionSettings, SeasonMissionsData seasonMissionsData, CustomizationData customizationData, AnimationStateHandlerData animationStateHandlerData, ServerTimeSyncData serverTimeSyncData, IgnisSoundTriggerData ignisSoundTriggerData, IRoomTimeProvider roomTimeProvider, ShopData shopData, SoundTriggersList soundTriggersList)
		{
		}

		[Token(Token = "0x6001BFA")]
		[Address(RVA = "0x1047E88", Offset = "0x1047E88", VA = "0x1047E88")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001BFB")]
		[Address(RVA = "0x1048558", Offset = "0x1048558", VA = "0x1048558")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001BFC")]
		[Address(RVA = "0x104855C", Offset = "0x104855C", VA = "0x104855C")]
		private void ClaimRewardOnClick()
		{
		}

		[Token(Token = "0x6001BFD")]
		[Address(RVA = "0x10485B0", Offset = "0x10485B0", VA = "0x10485B0")]
		private void RequestClaimingRewards()
		{
		}

		[Token(Token = "0x6001BFE")]
		[Address(RVA = "0x1048668", Offset = "0x1048668", VA = "0x1048668")]
		private void ClaimRewardOnSuccess()
		{
		}

		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0x10486C0", Offset = "0x10486C0", VA = "0x10486C0")]
		[IteratorStateMachine(typeof(<ClaimRewards>d__36))]
		private IEnumerator ClaimRewards()
		{
			return null;
		}

		[Token(Token = "0x6001C00")]
		[Address(RVA = "0x1048750", Offset = "0x1048750", VA = "0x1048750")]
		private List<PlayerMissionReward> GetMissionRewardsToClaim()
		{
			return null;
		}

		[Token(Token = "0x6001C01")]
		[Address(RVA = "0x1048790", Offset = "0x1048790", VA = "0x1048790")]
		private string GetSeasonIdToClaim()
		{
			return null;
		}

		[Token(Token = "0x6001C02")]
		[Address(RVA = "0x10487C4", Offset = "0x10487C4", VA = "0x10487C4")]
		private void ClaimAnimationDone()
		{
		}

		[Token(Token = "0x6001C03")]
		[Address(RVA = "0x1048858", Offset = "0x1048858", VA = "0x1048858")]
		private void ClaimOnClose()
		{
		}

		[Token(Token = "0x6001C04")]
		[Address(RVA = "0x10488B4", Offset = "0x10488B4", VA = "0x10488B4")]
		private void ClaimOnClick()
		{
		}

		[Token(Token = "0x6001C05")]
		[Address(RVA = "0x10489D8", Offset = "0x10489D8", VA = "0x10489D8")]
		private void PinkTierOnClick()
		{
		}

		[Token(Token = "0x6001C06")]
		[Address(RVA = "0x1048BEC", Offset = "0x1048BEC", VA = "0x1048BEC")]
		private void BlueTierOnClick()
		{
		}

		[Token(Token = "0x6001C07")]
		[Address(RVA = "0x1048AE4", Offset = "0x1048AE4", VA = "0x1048AE4")]
		private UpgradeRewardRequest StartClaimRewardRequest(int indexofReward, MissionUpgradeReference upgradeReference)
		{
			return null;
		}

		[Token(Token = "0x6001C08")]
		[Address(RVA = "0x1048CF8", Offset = "0x1048CF8", VA = "0x1048CF8")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001C09")]
		[Address(RVA = "0x1048D00", Offset = "0x1048D00", VA = "0x1048D00")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001C0A")]
		[Address(RVA = "0x1048DCC", Offset = "0x1048DCC", VA = "0x1048DCC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001C0B")]
		[Address(RVA = "0x10487E0", Offset = "0x10487E0", VA = "0x10487E0")]
		private void UpdateFullUI()
		{
		}

		[Token(Token = "0x6001C0C")]
		[Address(RVA = "0x1048F18", Offset = "0x1048F18", VA = "0x1048F18")]
		private void HandleClaimAnimation()
		{
		}

		[Token(Token = "0x6001C0D")]
		[Address(RVA = "0x1048F7C", Offset = "0x1048F7C", VA = "0x1048F7C")]
		private void HandleRewardRequests()
		{
		}

		[Token(Token = "0x6001C0E")]
		[Address(RVA = "0x104A2C8", Offset = "0x104A2C8", VA = "0x104A2C8")]
		private UpgradeRewardRequest CheckRewardRequest(UpgradeRewardRequest upgradeRewardRequest, int rewardIndex)
		{
			return null;
		}

		[Token(Token = "0x6001C0F")]
		[Address(RVA = "0x104A424", Offset = "0x104A424", VA = "0x104A424")]
		[IteratorStateMachine(typeof(<RevealReward>d__52))]
		private IEnumerator RevealReward()
		{
			return null;
		}

		[Token(Token = "0x6001C10")]
		[Address(RVA = "0x1048FA8", Offset = "0x1048FA8", VA = "0x1048FA8")]
		private void UpdateClaim()
		{
		}

		[Token(Token = "0x6001C11")]
		[Address(RVA = "0x1049EE0", Offset = "0x1049EE0", VA = "0x1049EE0")]
		private void UpdateAmountRewards()
		{
		}

		[Token(Token = "0x6001C12")]
		[Address(RVA = "0x1049C40", Offset = "0x1049C40", VA = "0x1049C40")]
		private void UpdateUpgradeView()
		{
		}

		[Token(Token = "0x6001C13")]
		[Address(RVA = "0x104A570", Offset = "0x104A570", VA = "0x104A570")]
		private void UpdateUpgradeIcon(MissionUpgradeReference reference, PlayerMissionReward rewardData, string price, bool canAfford)
		{
		}

		[Token(Token = "0x6001C14")]
		[Address(RVA = "0x1049080", Offset = "0x1049080", VA = "0x1049080")]
		private void UpdateHeaderInformation()
		{
		}

		[Token(Token = "0x6001C15")]
		[Address(RVA = "0x1049AB4", Offset = "0x1049AB4", VA = "0x1049AB4")]
		private void UpdateRewardIcons()
		{
		}

		[Token(Token = "0x6001C16")]
		[Address(RVA = "0x104A7B0", Offset = "0x104A7B0", VA = "0x104A7B0")]
		private void SetIconRewardsDetails()
		{
		}

		[Token(Token = "0x6001C17")]
		[Address(RVA = "0x104A0EC", Offset = "0x104A0EC", VA = "0x104A0EC")]
		private void SwitchSeasonPanels()
		{
		}

		[Token(Token = "0x6001C18")]
		[Address(RVA = "0x104A95C", Offset = "0x104A95C", VA = "0x104A95C")]
		private void SetIconsParent(Transform topParent, Transform middleParent, Transform bottomParent)
		{
		}

		[Token(Token = "0x6001C19")]
		[Address(RVA = "0x1049334", Offset = "0x1049334", VA = "0x1049334")]
		private void UpdateMissionList()
		{
		}

		[Token(Token = "0x6001C1A")]
		[Address(RVA = "0x104AA44", Offset = "0x104AA44", VA = "0x104AA44")]
		private void UpdateMissionItem(MissionListReference reference, PlayerMissionProgress progress)
		{
		}

		[Token(Token = "0x6001C1B")]
		[Address(RVA = "0x1048414", Offset = "0x1048414", VA = "0x1048414")]
		private void ExtendMissionList(int numMissions)
		{
		}

		[Token(Token = "0x6001C1C")]
		[Address(RVA = "0x1049904", Offset = "0x1049904", VA = "0x1049904")]
		private void UpdateMoreMissionsText()
		{
		}

		[Token(Token = "0x6001C1D")]
		[Address(RVA = "0x104AFA4", Offset = "0x104AFA4", VA = "0x104AFA4")]
		private int GetNumActiveMissions()
		{
			return default(int);
		}

		[Token(Token = "0x6001C1E")]
		[Address(RVA = "0x104A4B4", Offset = "0x104A4B4", VA = "0x104A4B4")]
		private int GetNumCompletedMissions()
		{
			return default(int);
		}

		[Token(Token = "0x6001C1F")]
		[Address(RVA = "0x104B060", Offset = "0x104B060", VA = "0x104B060")]
		private void UpdateNextMissionCountdown()
		{
		}

		[Token(Token = "0x6001C20")]
		[Address(RVA = "0x104A628", Offset = "0x104A628", VA = "0x104A628")]
		private void SetItemType(MissionUpgradeReference reference, PlayerMissionReward reward)
		{
		}

		[Token(Token = "0x6001C21")]
		[Address(RVA = "0x104B258", Offset = "0x104B258", VA = "0x104B258")]
		private void OnSecondTierEnter(BaseEventData arg0)
		{
		}

		[Token(Token = "0x6001C22")]
		[Address(RVA = "0x104B2DC", Offset = "0x104B2DC", VA = "0x104B2DC")]
		private void OnSecondTierExit(BaseEventData arg0)
		{
		}

		[Token(Token = "0x6001C23")]
		[Address(RVA = "0x104B2E0", Offset = "0x104B2E0", VA = "0x104B2E0")]
		private void OnThirdTierEnter(BaseEventData arg0)
		{
		}

		[Token(Token = "0x6001C24")]
		[Address(RVA = "0x104B364", Offset = "0x104B364", VA = "0x104B364")]
		private void OnThirdTierExit(BaseEventData arg0)
		{
		}
	}
	[Token(Token = "0x200063C")]
	public class MissionViewReference : MonoBehaviour
	{
		[Token(Token = "0x4002897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("MAIN VIEW")]
		public Canvas canvas;

		[Token(Token = "0x4002898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CanvasGroup canvasGroup;

		[Token(Token = "0x4002899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RectMask2D scrollMask;

		[Token(Token = "0x400289A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IgnisScrollRect ignisScrollRect;

		[Token(Token = "0x400289B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public RectTransform content;

		[Token(Token = "0x400289C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ParticleSystem claimRewards;

		[Token(Token = "0x400289D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LocalizedText progressionText;

		[Token(Token = "0x400289E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LocalizedText seasonCountdownText;

		[Token(Token = "0x400289F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LocalizedText rewardBodyText;

		[Token(Token = "0x40028A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LocalizedText moreMissionsText;

		[Token(Token = "0x40028A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject moreMissionsLock;

		[Token(Token = "0x40028A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject moreMissionBanner;

		[Token(Token = "0x40028A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject seasonEndPanel;

		[Token(Token = "0x40028A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public LocalizedText seasonEndText;

		[Token(Token = "0x40028A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Rewards Tab")]
		public GameObject middleSeasonView;

		[Token(Token = "0x40028A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public MissionRewardIcon[] missionRewardIcons;

		[Token(Token = "0x40028A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public MissionRewardIcon singleMissionRewardIcons;

		[Token(Token = "0x40028A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IgnisButton claimButton;

		[Token(Token = "0x40028A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Button fullTierClaimButton;

		[Token(Token = "0x40028AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject infoTextContainer;

		[Token(Token = "0x40028AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public LocalizedText upgradeText;

		[Token(Token = "0x40028AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public LocalizedText disclaimerText;

		[Token(Token = "0x40028AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public MissionUpgradeReference secondUpgradeTierReference;

		[Token(Token = "0x40028AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public MissionUpgradeReference thirdUpgradeTierReference;

		[Token(Token = "0x40028AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public GameObject rewardContainerWhenThereAreMoreThanOneReward;

		[Token(Token = "0x40028B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public GameObject rewardContainerWhenThereAreOnlyOneReward;

		[Token(Token = "0x40028B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public GameObject postSeasonView;

		[Token(Token = "0x40028B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Transform postSeasonContainerTop;

		[Token(Token = "0x40028B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Transform postSeasonContainerMiddle;

		[Token(Token = "0x40028B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Transform postSeasonContainerBottom;

		[Token(Token = "0x40028B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public CanvasGroup middleSeasonCanvasGroup;

		[Token(Token = "0x40028B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public CanvasGroup postSeasonCanvasGroup;

		[Token(Token = "0x6001C36")]
		[Address(RVA = "0x104BE48", Offset = "0x104BE48", VA = "0x104BE48")]
		public MissionViewReference()
		{
		}
	}
	[Token(Token = "0x200063D")]
	public class MissionWidgetProgressIconReference : MonoBehaviour
	{
		[Token(Token = "0x40028B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image missionCompleteIcon;

		[Token(Token = "0x40028B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Image missionAvailableIcon;

		[Token(Token = "0x40028B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image missionLockedIcon;

		[Token(Token = "0x6001C37")]
		[Address(RVA = "0x104BE50", Offset = "0x104BE50", VA = "0x104BE50")]
		public MissionWidgetProgressIconReference()
		{
		}
	}
	[Token(Token = "0x200063E")]
	public class MissionWidgetReference : MonoBehaviour
	{
		[Token(Token = "0x40028BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimatedCanvas animatedCanvas;

		[Token(Token = "0x40028BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject lockedMissionContainer;

		[Token(Token = "0x40028BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MissionRewardIcon missionRewardIcon;

		[Token(Token = "0x40028BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LocalizedText missionProgressText;

		[Token(Token = "0x40028BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LocalizedText bannerText;

		[Token(Token = "0x6001C38")]
		[Address(RVA = "0x104BE58", Offset = "0x104BE58", VA = "0x104BE58")]
		public MissionWidgetReference()
		{
		}
	}
	[Token(Token = "0x200063F")]
	public class LeaderBoardData
	{
		[Token(Token = "0x40028BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string statisticsName;

		[Token(Token = "0x40028C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<LeaderBoardRecord> records;

		[Token(Token = "0x40028C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public double lastTimeLeaderBoardWasUpdated;

		[Token(Token = "0x40028C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int leaderBoardCapacity;

		[Token(Token = "0x40028C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int version;

		[Token(Token = "0x40028C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DateTime? nextReset;

		[Token(Token = "0x40028C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int myPosition;

		[Token(Token = "0x40028C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int myScore;

		[Token(Token = "0x6001C39")]
		[Address(RVA = "0x104BE60", Offset = "0x104BE60", VA = "0x104BE60")]
		public LeaderBoardData(string statisticsName)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000640")]
	public struct LeaderBoardRecord : IComparable<LeaderBoardRecord>
	{
		[Token(Token = "0x40028C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string displayName;

		[Token(Token = "0x40028C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int value;

		[Token(Token = "0x40028C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string timestamp;

		[Token(Token = "0x6001C3A")]
		[Address(RVA = "0x104BF00", Offset = "0x104BF00", VA = "0x104BF00")]
		public LeaderBoardRecord(string displayName, int value)
		{
		}

		[Token(Token = "0x6001C3B")]
		[Address(RVA = "0x104BFA8", Offset = "0x104BFA8", VA = "0x104BFA8", Slot = "4")]
		public int CompareTo(LeaderBoardRecord other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000641")]
	public class LeaderBoardReference : MonoBehaviour
	{
		[Token(Token = "0x40028CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform content;

		[Token(Token = "0x40028CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocalizedText leaderboardHeader;

		[Token(Token = "0x40028CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<LeaderBoardRowReference> leaderboardRows;

		[Token(Token = "0x6001C3C")]
		[Address(RVA = "0x104BFBC", Offset = "0x104BFBC", VA = "0x104BFBC")]
		public LeaderBoardReference()
		{
		}
	}
	[Token(Token = "0x2000642")]
	public class LeaderBoardRowReference : MonoBehaviour
	{
		[Token(Token = "0x40028CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform rectTransform;

		[Token(Token = "0x40028CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI playerName;

		[Token(Token = "0x40028CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI value;

		[Token(Token = "0x40028D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI rankValue;

		[Token(Token = "0x40028D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Image icon;

		[Token(Token = "0x6001C3D")]
		[Address(RVA = "0x104C038", Offset = "0x104C038", VA = "0x104C038")]
		public LeaderBoardRowReference()
		{
		}
	}
	[Token(Token = "0x2000643")]
	public class LeaderBoardViewHandler : ITickable
	{
		[Token(Token = "0x40028D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayFabLeaguePointsSeasonData playFabLeaguePointsSeasonData;

		[Token(Token = "0x40028D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x40028D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x40028D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly InteractionSettings interactionSettings;

		[Token(Token = "0x40028D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly LeagueTierSettings leagueTierSettings;

		[Token(Token = "0x40028D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PlayFabTitleData playFabTitleData;

		[Token(Token = "0x40028D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ServerTimeSyncData serverTimeSyncData;

		[Token(Token = "0x40028D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private LeaderBoardViewReference leaderBoardViewReference;

		[Token(Token = "0x40028DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private double lastTimeLeaderboardUpdated;

		[Token(Token = "0x40028DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool showingLeaderBoard;

		[Token(Token = "0x6001C3E")]
		[Address(RVA = "0x104C040", Offset = "0x104C040", VA = "0x104C040")]
		public LeaderBoardViewHandler(PlayFabLeaguePointsSeasonData playFabLeaguePointsSeasonData, MenuStateData menuStateData, PlayFabProgressionData playFabProgressionData, InteractionSettings interactionSettings, LeagueTierSettings leagueTierSettings, PlayFabTitleData playFabTitleData, ServerTimeSyncData serverTimeSyncData)
		{
		}

		[Token(Token = "0x6001C3F")]
		[Address(RVA = "0x104C0A4", Offset = "0x104C0A4", VA = "0x104C0A4")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6001C40")]
		[Address(RVA = "0x104C834", Offset = "0x104C834", VA = "0x104C834")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001C41")]
		[Address(RVA = "0x104C6D4", Offset = "0x104C6D4", VA = "0x104C6D4")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0x104C83C", Offset = "0x104C83C", VA = "0x104C83C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001C43")]
		[Address(RVA = "0x104C8C4", Offset = "0x104C8C4", VA = "0x104C8C4")]
		private void SetScrollToTheTop()
		{
		}

		[Token(Token = "0x6001C44")]
		[Address(RVA = "0x104C19C", Offset = "0x104C19C", VA = "0x104C19C")]
		private void UpdateLeaderBoard()
		{
		}

		[Token(Token = "0x6001C45")]
		[Address(RVA = "0x104CC24", Offset = "0x104CC24", VA = "0x104CC24")]
		private string FormatIntAsStringWithDashAsZero(int value)
		{
			return null;
		}

		[Token(Token = "0x6001C46")]
		[Address(RVA = "0x104C968", Offset = "0x104C968", VA = "0x104C968")]
		private void UpdateNamesAndValuesOnLeaderboard(List<LeaderBoardRowReference> leaderBoardReference, List<LeaguePointsSeasonItem> records)
		{
		}

		[Token(Token = "0x6001C47")]
		[Address(RVA = "0x104CC80", Offset = "0x104CC80", VA = "0x104CC80")]
		private int GetLeagueTierFromPoints(int points)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000644")]
	public class LeaderBoardViewReference : MonoBehaviour
	{
		[Token(Token = "0x40028DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas[] canvas;

		[Token(Token = "0x40028DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RectMask2D[] rectMask2Ds;

		[Token(Token = "0x40028DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LeaderBoardReference currentLeaderBoard;

		[Token(Token = "0x40028DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LeaderBoardReference previousLeaderBoard;

		[Token(Token = "0x40028E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI rankText;

		[Token(Token = "0x40028E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[FormerlySerializedAs("currentSeasonEndsAt")]
		public TextMeshProUGUI currentSeasonCountDown;

		[Token(Token = "0x40028E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IgnisScrollRect[] scrollRects;

		[Token(Token = "0x6001C48")]
		[Address(RVA = "0x104CD64", Offset = "0x104CD64", VA = "0x104CD64")]
		public LeaderBoardViewReference()
		{
		}
	}
	[Token(Token = "0x2000645")]
	public class NewsViewHandler : ITickable
	{
		[Token(Token = "0x40028E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x40028E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x40028E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private NewsViewReference newsViewReference;

		[Token(Token = "0x40028E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly InteractionSettings interactionSettings;

		[Token(Token = "0x40028E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool showingView;

		[Token(Token = "0x40028E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly NewsData newsData;

		[Token(Token = "0x40028E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly Locale locale;

		[Token(Token = "0x40028EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private DateTime now;

		[Token(Token = "0x40028EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool isInteractable;

		[Token(Token = "0x6001C49")]
		[Address(RVA = "0x104CD6C", Offset = "0x104CD6C", VA = "0x104CD6C")]
		public NewsViewHandler(MenuStateData menuStateData, NewsData newsData, InteractionSettings interactionSettings, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x6001C4A")]
		[Address(RVA = "0x104CDF0", Offset = "0x104CDF0", VA = "0x104CDF0")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6001C4B")]
		[Address(RVA = "0x104D434", Offset = "0x104D434", VA = "0x104D434")]
		private void OnClicSocialURL(string url)
		{
		}

		[Token(Token = "0x6001C4C")]
		[Address(RVA = "0x104D440", Offset = "0x104D440", VA = "0x104D440")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001C4D")]
		[Address(RVA = "0x104D25C", Offset = "0x104D25C", VA = "0x104D25C")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001C4E")]
		[Address(RVA = "0x104D448", Offset = "0x104D448", VA = "0x104D448", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001C4F")]
		[Address(RVA = "0x104DDD4", Offset = "0x104DDD4", VA = "0x104DDD4")]
		private void SetScrollViewToTop()
		{
		}

		[Token(Token = "0x6001C50")]
		[Address(RVA = "0x104DC5C", Offset = "0x104DC5C", VA = "0x104DC5C")]
		private void UpdateScrollHeight(int amountNewsDataItems)
		{
		}

		[Token(Token = "0x6001C51")]
		[Address(RVA = "0x104D9F8", Offset = "0x104D9F8", VA = "0x104D9F8")]
		private void ShowAndUpdatedNewsButtons()
		{
		}

		[Token(Token = "0x6001C52")]
		[Address(RVA = "0x104D588", Offset = "0x104D588", VA = "0x104D588")]
		private void DisplayNewsFromSelectedTab(int index)
		{
		}
	}
	[Token(Token = "0x2000647")]
	public class NewsViewReference : MonoBehaviour
	{
		[Token(Token = "0x40028EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas[] canvas;

		[Token(Token = "0x40028EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RectMask2D[] rectMask2Ds;

		[Token(Token = "0x40028F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RectTransform newsTabsRectTransform;

		[Token(Token = "0x40028F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RectTransform newsContentRectTransform;

		[Token(Token = "0x40028F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public NewsWidgetReference[] newsButtons;

		[Token(Token = "0x40028F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI currentNewsHeader;

		[Token(Token = "0x40028F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshProUGUI currentNewsBody;

		[Token(Token = "0x40028F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public IgnisScrollRect[] scrollRects;

		[Token(Token = "0x40028F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public IgnisButton twitterButton;

		[Token(Token = "0x40028F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public IgnisButton discordButton;

		[Token(Token = "0x40028F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IgnisButton twitchButton;

		[Token(Token = "0x40028F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public IgnisButton youTubeButton;

		[Token(Token = "0x40028FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IgnisButton wikiButton;

		[Token(Token = "0x40028FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public IgnisButton faqButton;

		[Token(Token = "0x6001C5B")]
		[Address(RVA = "0x1065C64", Offset = "0x1065C64", VA = "0x1065C64")]
		public NewsViewReference()
		{
		}
	}
	[Token(Token = "0x2000648")]
	public class NewsWidgetReference : MonoBehaviour
	{
		[Token(Token = "0x40028FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x40028FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button button;

		[Token(Token = "0x40028FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RectTransform rectTransform;

		[Token(Token = "0x40028FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI title;

		[Token(Token = "0x4002900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI textSnippet;

		[Token(Token = "0x4002901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI timestamp;

		[Token(Token = "0x4002902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public int id;

		[Token(Token = "0x6001C5C")]
		[Address(RVA = "0x1065C6C", Offset = "0x1065C6C", VA = "0x1065C6C")]
		public NewsWidgetReference()
		{
		}
	}
	[Token(Token = "0x2000649")]
	public class NewsWidgetViewHandler : ITickable
	{
		[Token(Token = "0x4002903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private NewsWidgetReference newsWidgetReference;

		[Token(Token = "0x4002905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool showingView;

		[Token(Token = "0x4002906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly NewsData newsData;

		[Token(Token = "0x4002907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly LeagueTierProgressData leagueTierProgressData;

		[Token(Token = "0x4002908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x4002909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x400290A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly SpectatorSettingsData spectatorSettingsData;

		[Token(Token = "0x400290B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly DuelSettingsViewData duelSettingsViewData;

		[Token(Token = "0x400290C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x400290D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool interactionIsBlocked;

		[Token(Token = "0x400290E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string showingNewsId;

		[Token(Token = "0x6001C5D")]
		[Address(RVA = "0x1065C74", Offset = "0x1065C74", VA = "0x1065C74")]
		public NewsWidgetViewHandler(MenuStateData menuStateData, NewsData newsData, LeagueTierProgressData leagueTierProgressData, FindFriendData findFriendData, LocalPersistentData localPersistentData, SpectatorSettingsData spectatorSettingsData, DuelSettingsViewData duelSettingsViewData, PersistantDataUtility persistantDataUtility)
		{
		}

		[Token(Token = "0x6001C5E")]
		[Address(RVA = "0x1065D1C", Offset = "0x1065D1C", VA = "0x1065D1C")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6001C5F")]
		[Address(RVA = "0x1065E5C", Offset = "0x1065E5C", VA = "0x1065E5C")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001C60")]
		[Address(RVA = "0x1065E34", Offset = "0x1065E34", VA = "0x1065E34")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001C61")]
		[Address(RVA = "0x1065E64", Offset = "0x1065E64", VA = "0x1065E64", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001C62")]
		[Address(RVA = "0x1066060", Offset = "0x1066060", VA = "0x1066060")]
		private void ChangeToMenuState()
		{
		}

		[Token(Token = "0x6001C63")]
		[Address(RVA = "0x1065F80", Offset = "0x1065F80", VA = "0x1065F80")]
		private void DisplayLatestNews(bool showPopup)
		{
		}
	}
	[Token(Token = "0x200064A")]
	public class OnboardingPagesReference : MonoBehaviour
	{
		[Token(Token = "0x400290F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image[] images;

		[Token(Token = "0x4002910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color neutralColor;

		[Token(Token = "0x4002911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color selectedColor;

		[Token(Token = "0x6001C65")]
		[Address(RVA = "0x10660F8", Offset = "0x10660F8", VA = "0x10660F8")]
		public OnboardingPagesReference()
		{
		}
	}
	[Token(Token = "0x200064B")]
	public class OnboardingMenuViewHandler : ITickable
	{
		[Token(Token = "0x4002912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool showingOnboardingView;

		[Token(Token = "0x4002913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool activeOnboardingButton;

		[Token(Token = "0x4002914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool viewInMatchmaking;

		[Token(Token = "0x4002915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private NetworkingRegion currentlyShowingGameRoomButtonsForRegion;

		[Token(Token = "0x4002916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double lastTimeLeaderboardUpdated;

		[Token(Token = "0x4002917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool showingFindRegion;

		[Token(Token = "0x4002918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x4002919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GameData gameData;

		[Token(Token = "0x400291A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x400291B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly MatchmakingData globalRatingMatchmakerData;

		[Token(Token = "0x400291C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly NetworkRegionProvider networkRegionProvider;

		[Token(Token = "0x400291D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x400291E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly LeagueTierProgressData leagueTierProgressData;

		[Token(Token = "0x400291F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly IgnisSoundTriggerData soundTriggerData;

		[Token(Token = "0x4002920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x4002921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly DuelSettingsViewData duelSettingsViewData;

		[Token(Token = "0x4002922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly PlayMenuViewData playMenuViewData;

		[Token(Token = "0x4002923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x4002924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly GlobalMatchmakingStateData globalMatchmakingStateData;

		[Token(Token = "0x4002925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private OnboardingMenuViewReferences onboardingMenuViewReferences;

		[Token(Token = "0x6001C66")]
		[Address(RVA = "0x1066100", Offset = "0x1066100", VA = "0x1066100")]
		public OnboardingMenuViewHandler(LockerRoomGameStateData lockerRoomGameStateData, GameData gameData, IgnisNetworkConnectionData networkConnectionData, NetworkRegionProvider networkRegionProvider, MenuStateData menuStateData, LeagueTierProgressData leagueTierProgressData, IgnisSoundTriggerData soundTriggerData, FindFriendData findFriendData, DuelSettingsViewData duelSettingsViewData, PlayMenuViewData playMenuViewData, ArcadeData arcadeData, GlobalMatchmakingStateData globalMatchmakingStateData)
		{
		}

		[Token(Token = "0x6001C67")]
		[Address(RVA = "0x1066194", Offset = "0x1066194", VA = "0x1066194")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6001C68")]
		[Address(RVA = "0x1066278", Offset = "0x1066278", VA = "0x1066278")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001C69")]
		[Address(RVA = "0x106627C", Offset = "0x106627C", VA = "0x106627C")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001C6A")]
		[Address(RVA = "0x10662D4", Offset = "0x10662D4", VA = "0x10662D4")]
		private void OnStartOnboarding()
		{
		}

		[Token(Token = "0x6001C6B")]
		[Address(RVA = "0x106638C", Offset = "0x106638C", VA = "0x106638C", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x200064C")]
	public class OnboardingMenuViewReferences : MonoBehaviour
	{
		[Token(Token = "0x4002926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4002927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button startOnboardingButton;

		[Token(Token = "0x6001C6C")]
		[Address(RVA = "0x106657C", Offset = "0x106657C", VA = "0x106657C")]
		public OnboardingMenuViewReferences()
		{
		}
	}
	[Token(Token = "0x200064D")]
	public class LevelUpAnimationCallback : MonoBehaviour
	{
		[Token(Token = "0x4002928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action onClaimLevelUpRewards;

		[Token(Token = "0x6001C6D")]
		[Address(RVA = "0x1066584", Offset = "0x1066584", VA = "0x1066584")]
		public void TriggerLevelUpRewards()
		{
		}

		[Token(Token = "0x6001C6E")]
		[Address(RVA = "0x10665A8", Offset = "0x10665A8", VA = "0x10665A8")]
		public LevelUpAnimationCallback()
		{
		}
	}
	[Token(Token = "0x200064E")]
	public enum PlayerInfoPanelValuesEnum
	{
		[Token(Token = "0x400292A")]
		FREEMIUM,
		[Token(Token = "0x400292B")]
		PREMIUM,
		[Token(Token = "0x400292C")]
		EXPERIENCE,
		[Token(Token = "0x400292D")]
		LEAGUE_POINTS
	}
	[Token(Token = "0x200064F")]
	public class PlayerInfoPanelReferenceAnimationCallback : MonoBehaviour
	{
		[Token(Token = "0x400292E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent onPremiumFlightVFX;

		[Token(Token = "0x400292F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent onFreemiumFlightVFX;

		[Token(Token = "0x4002930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent onLevelFlightVFX;

		[Token(Token = "0x4002931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent onLeagueFlightVFX;

		[Token(Token = "0x4002932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent onFreemiumAnimationShowNewValue;

		[Token(Token = "0x4002933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onPremiumAnimationShowNewValue;

		[Token(Token = "0x4002934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent onExperienceAnimationShowNewValue;

		[Token(Token = "0x4002935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent onLeaguePointsAnimationShowNewValue;

		[Token(Token = "0x6001C6F")]
		[Address(RVA = "0x10665B0", Offset = "0x10665B0", VA = "0x10665B0")]
		public void TriggerCurrencyHasBeenUpdated(PlayerInfoPanelValuesEnum currency)
		{
		}

		[Token(Token = "0x6001C70")]
		[Address(RVA = "0x1066618", Offset = "0x1066618", VA = "0x1066618")]
		public void PremiumFlightVFX()
		{
		}

		[Token(Token = "0x6001C71")]
		[Address(RVA = "0x1066634", Offset = "0x1066634", VA = "0x1066634")]
		public void FreemiumFlightVFX()
		{
		}

		[Token(Token = "0x6001C72")]
		[Address(RVA = "0x1066650", Offset = "0x1066650", VA = "0x1066650")]
		public void LevelFlightVFX()
		{
		}

		[Token(Token = "0x6001C73")]
		[Address(RVA = "0x106666C", Offset = "0x106666C", VA = "0x106666C")]
		public void LeagueFlightVFX()
		{
		}

		[Token(Token = "0x6001C74")]
		[Address(RVA = "0x1066688", Offset = "0x1066688", VA = "0x1066688")]
		public PlayerInfoPanelReferenceAnimationCallback()
		{
		}
	}
	[Token(Token = "0x2000650")]
	public class LocalPlayerExperienceData
	{
		[Token(Token = "0x4002936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int experience;

		[Token(Token = "0x4002937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int currentLevelSpan;

		[Token(Token = "0x4002938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int premiumCoins;

		[Token(Token = "0x4002939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int inGameCoins;

		[Token(Token = "0x400293A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int leaguePoints;

		[Token(Token = "0x400293B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int level;

		[Token(Token = "0x6001C75")]
		[Address(RVA = "0x1066690", Offset = "0x1066690", VA = "0x1066690")]
		public LocalPlayerExperienceData()
		{
		}
	}
	[Token(Token = "0x2000651")]
	public enum PlayerStatType
	{
		[Token(Token = "0x400293D")]
		PremiumCoins,
		[Token(Token = "0x400293E")]
		InGameCoins,
		[Token(Token = "0x400293F")]
		Experience,
		[Token(Token = "0x4002940")]
		LeaguePoints
	}
	[Token(Token = "0x2000652")]
	public readonly struct RewardRequest
	{
		[Token(Token = "0x4002941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly PlayerStatType playerStatType;

		[Token(Token = "0x4002942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int amount;

		[Token(Token = "0x4002943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Transform sourceTarget;

		[Token(Token = "0x6001C76")]
		[Address(RVA = "0x10666A4", Offset = "0x10666A4", VA = "0x10666A4")]
		public RewardRequest(PlayerStatType playerStatType, int amount, Transform sourceTarget)
		{
		}
	}
	[Token(Token = "0x2000653")]
	public readonly struct MinRewardRequest
	{
		[Token(Token = "0x4002944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly PlayerStatType playerStatType;

		[Token(Token = "0x4002945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int amount;

		[Token(Token = "0x6001C77")]
		[Address(RVA = "0x10666B0", Offset = "0x10666B0", VA = "0x10666B0")]
		public MinRewardRequest(PlayerStatType playerStatType, int amount)
		{
		}
	}
	[Token(Token = "0x2000654")]
	public readonly struct TriggerAndClaimRewardRequest
	{
		[Token(Token = "0x4002946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly RewardFromPlayFab rewards;

		[Token(Token = "0x4002947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Transform experienceTarget;

		[Token(Token = "0x4002948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Transform premiumTarget;

		[Token(Token = "0x4002949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Transform freemiumTarget;

		[Token(Token = "0x6001C78")]
		[Address(RVA = "0x10666B8", Offset = "0x10666B8", VA = "0x10666B8")]
		public TriggerAndClaimRewardRequest(RewardFromPlayFab rewards, Transform target)
		{
		}

		[Token(Token = "0x6001C79")]
		[Address(RVA = "0x10666C4", Offset = "0x10666C4", VA = "0x10666C4")]
		public TriggerAndClaimRewardRequest(RewardFromPlayFab rewards, Transform experienceTarget, Transform premiumTarget, Transform freemiumTarget)
		{
		}
	}
	[Token(Token = "0x2000655")]
	public class PlayerInfoPanelData
	{
		[Token(Token = "0x400294A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool showingRewardOrLevelUpAnimation;

		[Token(Token = "0x400294B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool forceUpdateExperienceValues;

		[Token(Token = "0x400294C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool forceUpdateShopValues;

		[Token(Token = "0x400294D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool showingLevelUp;

		[Token(Token = "0x400294E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<RewardRequest> rewardAnimationRequest;

		[Token(Token = "0x400294F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Queue<MinRewardRequest> minRewardAnimationRequest;

		[Token(Token = "0x4002950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Queue<TriggerAndClaimRewardRequest> triggerAndClaimRewardRequests;

		[Token(Token = "0x4002951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform defaultRewardsSource;

		[Token(Token = "0x6001C7A")]
		[Address(RVA = "0x10666D0", Offset = "0x10666D0", VA = "0x10666D0")]
		public PlayerInfoPanelData()
		{
		}
	}
	[Token(Token = "0x2000656")]
	public class PlayerInfoPanelViewHandler : ITickable
	{
		[Token(Token = "0x4002952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ShopData shopData;

		[Token(Token = "0x4002954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly LoginData loginData;

		[Token(Token = "0x4002955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x4002956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly AnimationStateHandlerData animationStateHandlerData;

		[Token(Token = "0x4002957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4002958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly PlayerInfoPanelData playerInfoPanelData;

		[Token(Token = "0x4002959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly LocalPlayerExperienceData localPlayerExperienceData;

		[Token(Token = "0x400295A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly FindFriendData friendData;

		[Token(Token = "0x400295B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly VrKeyboardData keyboardData;

		[Token(Token = "0x400295C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly LevelUpViewData levelUpNavigationData;

		[Token(Token = "0x400295D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly LeagueTierProgressData leagueTierProgressData;

		[Token(Token = "0x400295E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly LeagueTierSettings leagueTierSettings;

		[Token(Token = "0x400295F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4002960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4002961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayerInfoPanelReference playerInfoPanelReference;

		[Token(Token = "0x4002962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool showingView;

		[Token(Token = "0x4002963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private string showingDisplayName;

		[Token(Token = "0x4002964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int recentLevelShown;

		[Token(Token = "0x4002965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool isProcessingPurchase;

		[Token(Token = "0x4002966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		private bool isShowingReward;

		[Token(Token = "0x4002967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA6")]
		private bool showingRewardUpAnimation;

		[Token(Token = "0x4002968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA7")]
		private bool experienceIsValid;

		[Token(Token = "0x4002969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private MultiTriggerAnimatorStateData currentAnimation;

		[Token(Token = "0x400296A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Dictionary<PlayerStatType, string> rewardAnimationLookup;

		[Token(Token = "0x400296B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Dictionary<PlayerStatType, string> minRewardAnimationLookup;

		[Token(Token = "0x400296C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Dictionary<PlayerStatType, int> rewardAnimationAmountChange;

		[Token(Token = "0x400296D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Transform[] emitterTransFormTargets;

		[Token(Token = "0x400296E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool isInteractionBlocked;

		[Token(Token = "0x400296F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		private bool showLeagueUpNotification;

		[Token(Token = "0x4002970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int currentlyShowingLeaguepoints;

		[Token(Token = "0x4002971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int currentLeagueTier;

		[Token(Token = "0x6001C7B")]
		[Address(RVA = "0x10667E0", Offset = "0x10667E0", VA = "0x10667E0")]
		public PlayerInfoPanelViewHandler(MenuStateData menuStateData, ShopData shopData, LoginData loginData, PlayFabProgressionData playFabProgressionData, AnimationStateHandlerData animationStateHandlerData, LocalPersistentData localPersistentData, PlayerInfoPanelData playerInfoPanelData, LocalPlayerExperienceData localPlayerExperienceData, FindFriendData friendData, VrKeyboardData keyboardData, LevelUpViewData levelUpNavigationData, LeagueTierProgressData leagueTierProgressData, LeagueTierSettings leagueTierSettings, PersistantDataUtility persistantDataUtility, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x6001C7C")]
		[Address(RVA = "0x1066BBC", Offset = "0x1066BBC", VA = "0x1066BBC")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6001C7D")]
		[Address(RVA = "0x106728C", Offset = "0x106728C", VA = "0x106728C")]
		private void ClaimLevelUpRewards()
		{
		}

		[Token(Token = "0x6001C7E")]
		[Address(RVA = "0x1067410", Offset = "0x1067410", VA = "0x1067410")]
		private void AddInGameCoinRewardsToData()
		{
		}

		[Token(Token = "0x6001C7F")]
		[Address(RVA = "0x10674BC", Offset = "0x10674BC", VA = "0x10674BC")]
		private void AddPremiumRewardsToData()
		{
		}

		[Token(Token = "0x6001C80")]
		[Address(RVA = "0x1067568", Offset = "0x1067568", VA = "0x1067568")]
		private void AddExperienceRewardsToData()
		{
		}

		[Token(Token = "0x6001C81")]
		[Address(RVA = "0x1067610", Offset = "0x1067610", VA = "0x1067610")]
		private void AddLeaguePointsRewardsToData()
		{
		}

		[Token(Token = "0x6001C82")]
		[Address(RVA = "0x10676C8", Offset = "0x10676C8", VA = "0x10676C8")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001C83")]
		[Address(RVA = "0x10676CC", Offset = "0x10676CC", VA = "0x10676CC")]
		private void CloseLevelUpPopUpAndSwitchTab(int iconId)
		{
		}

		[Token(Token = "0x6001C84")]
		[Address(RVA = "0x106774C", Offset = "0x106774C", VA = "0x106774C")]
		private void CloseLevelUpPopUp()
		{
		}

		[Token(Token = "0x6001C85")]
		[Address(RVA = "0x10678EC", Offset = "0x10678EC", VA = "0x10678EC")]
		private void ShowPlayerReward(bool showLevelUpRewards)
		{
		}

		[Token(Token = "0x6001C86")]
		[Address(RVA = "0x1067B90", Offset = "0x1067B90", VA = "0x1067B90")]
		private void ShowTinyPlayerReward(bool showLevelUpRewards)
		{
		}

		[Token(Token = "0x6001C87")]
		[Address(RVA = "0x1067A38", Offset = "0x1067A38", VA = "0x1067A38")]
		private void RequestLevelUp()
		{
		}

		[Token(Token = "0x6001C88")]
		[Address(RVA = "0x1067CAC", Offset = "0x1067CAC", VA = "0x1067CAC")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001C89")]
		[Address(RVA = "0x10671B8", Offset = "0x10671B8", VA = "0x10671B8")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001C8A")]
		[Address(RVA = "0x1067D08", Offset = "0x1067D08", VA = "0x1067D08", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001C8B")]
		[Address(RVA = "0x106883C", Offset = "0x106883C", VA = "0x106883C")]
		private void CheckLevel()
		{
		}

		[Token(Token = "0x6001C8C")]
		[Address(RVA = "0x1068AD4", Offset = "0x1068AD4", VA = "0x1068AD4")]
		private void StopCurrentAnimation()
		{
		}

		[Token(Token = "0x6001C8D")]
		[Address(RVA = "0x1068ED0", Offset = "0x1068ED0", VA = "0x1068ED0")]
		private void SetLeagueTierVisuals(LeagueTierVisualInformation leagueTierVisualInformation)
		{
		}

		[Token(Token = "0x6001C8E")]
		[Address(RVA = "0x10688A8", Offset = "0x10688A8", VA = "0x10688A8")]
		private void ClaimAllOldRewards()
		{
		}

		[Token(Token = "0x6001C8F")]
		[Address(RVA = "0x1068F20", Offset = "0x1068F20", VA = "0x1068F20")]
		private void ForceUpdateLocalExperienceData()
		{
		}

		[Token(Token = "0x6001C90")]
		[Address(RVA = "0x1068F70", Offset = "0x1068F70", VA = "0x1068F70")]
		private void ForceUpdateLocalShopData()
		{
		}

		[Token(Token = "0x6001C91")]
		[Address(RVA = "0x1068D94", Offset = "0x1068D94", VA = "0x1068D94")]
		private void TriggerAndClaimReward(TriggerAndClaimRewardRequest rewardRequest)
		{
		}

		[Token(Token = "0x6001C92")]
		[Address(RVA = "0x1069604", Offset = "0x1069604", VA = "0x1069604")]
		private void TriggerReward(PlayerStatType type, string value, Transform target)
		{
		}

		[Token(Token = "0x6001C93")]
		[Address(RVA = "0x1067548", Offset = "0x1067548", VA = "0x1067548")]
		private void AddPremiumCoins(int value)
		{
		}

		[Token(Token = "0x6001C94")]
		[Address(RVA = "0x106749C", Offset = "0x106749C", VA = "0x106749C")]
		private void AddInGameCoins(int value)
		{
		}

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0x10675F4", Offset = "0x10675F4", VA = "0x10675F4")]
		private void AddExperience(int value)
		{
		}

		[Token(Token = "0x6001C96")]
		[Address(RVA = "0x1069600", Offset = "0x1069600", VA = "0x1069600")]
		private void AddLeaguePoints(int value)
		{
		}

		[Token(Token = "0x6001C97")]
		[Address(RVA = "0x1068768", Offset = "0x1068768", VA = "0x1068768")]
		private void SetPremiumCoins(int value)
		{
		}

		[Token(Token = "0x6001C98")]
		[Address(RVA = "0x10687C4", Offset = "0x10687C4", VA = "0x10687C4")]
		private void SetInGameCoins(int value)
		{
		}

		[Token(Token = "0x6001C99")]
		[Address(RVA = "0x1068820", Offset = "0x1068820", VA = "0x1068820")]
		private void SetExperience(int value)
		{
		}

		[Token(Token = "0x6001C9A")]
		[Address(RVA = "0x10676AC", Offset = "0x10676AC", VA = "0x10676AC")]
		private void SetLeaguePoints(int value)
		{
		}

		[Token(Token = "0x6001C9B")]
		[Address(RVA = "0x10677D4", Offset = "0x10677D4", VA = "0x10677D4")]
		private void UpdateLevel(int level)
		{
		}

		[Token(Token = "0x6001C9C")]
		[Address(RVA = "0x1069480", Offset = "0x1069480", VA = "0x1069480")]
		private void ShowRewardAnimation()
		{
		}

		[Token(Token = "0x6001C9D")]
		[Address(RVA = "0x1066B1C", Offset = "0x1066B1C", VA = "0x1066B1C")]
		private void SetRewardAmountChangeToDefault()
		{
		}

		[Token(Token = "0x6001C9E")]
		[Address(RVA = "0x10694E0", Offset = "0x10694E0", VA = "0x10694E0")]
		private void HandelRewardAnimationFlow()
		{
		}

		[Token(Token = "0x6001C9F")]
		[Address(RVA = "0x1069410", Offset = "0x1069410", VA = "0x1069410")]
		private void TriggerLevelUpAnimation()
		{
		}

		[Token(Token = "0x6001CA0")]
		[Address(RVA = "0x1068FD8", Offset = "0x1068FD8", VA = "0x1068FD8")]
		private bool LevelUpRewardExists()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000658")]
	public class PlayRewardOnParticleCollision : MonoBehaviour
	{
		[Token(Token = "0x4002974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ParticleSystem CollidingParticle;

		[Token(Token = "0x4002975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ParticleSystem CollisionEffect;

		[Token(Token = "0x4002976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioTriggerComponent AudioTrigger;

		[Token(Token = "0x4002977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private string AudioString;

		[Token(Token = "0x4002978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private RectTransform AudioTransform;

		[Token(Token = "0x4002979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private PlayerInfoPanelReferenceAnimationCallback ResourceUpdateTriggers;

		[Token(Token = "0x400297A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private PlayerInfoPanelValuesEnum ResourceType;

		[Token(Token = "0x6001CA4")]
		[Address(RVA = "0x1069760", Offset = "0x1069760", VA = "0x1069760")]
		private void OnParticleCollision(GameObject CollidingParticle)
		{
		}

		[Token(Token = "0x6001CA5")]
		[Address(RVA = "0x10697AC", Offset = "0x10697AC", VA = "0x10697AC")]
		public PlayRewardOnParticleCollision()
		{
		}
	}
	[Token(Token = "0x2000659")]
	public class PlayerStatsWidgetViewHandler : ITickable
	{
		[Token(Token = "0x200065A")]
		private readonly struct SeasonScore
		{
			[Token(Token = "0x4002990")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly int leaguePoints;

			[Token(Token = "0x4002991")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public readonly int rank;

			[Token(Token = "0x4002992")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly bool isVisible;

			[Token(Token = "0x6001CB2")]
			[Address(RVA = "0x106A6B0", Offset = "0x106A6B0", VA = "0x106A6B0")]
			public SeasonScore(int leaguePoints, int rank, bool isVisible)
			{
			}
		}

		[Token(Token = "0x400297B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x400297C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DeckData deckData;

		[Token(Token = "0x400297D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Dictionary<ToolName, ToolSetting> toolSettings;

		[Token(Token = "0x400297E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly CharacterData characterData;

		[Token(Token = "0x400297F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly FindFriendData friendData;

		[Token(Token = "0x4002980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ToolIconSettings toolIconSettings;

		[Token(Token = "0x4002981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ToolViewData toolViewData;

		[Token(Token = "0x4002982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PlayerStatsWidgetReference playerStatsWidgetReference;

		[Token(Token = "0x4002983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly InteractionSettings interactionSettings;

		[Token(Token = "0x4002984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x4002985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly PlayFabLeaguePointsSeasonData playFabLeaguePointsSeasonData;

		[Token(Token = "0x4002986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly ServerTimeSyncData serverTimeSyncData;

		[Token(Token = "0x4002987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool showingViewHandler;

		[Token(Token = "0x4002988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool showLeagueUpNotification;

		[Token(Token = "0x4002989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		private bool interactionIsBlocked;

		[Token(Token = "0x400298A")]
		private const int MaxNumberOfRankedPlayers = 500;

		[Token(Token = "0x400298B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int numRankingLists;

		[Token(Token = "0x400298C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private SeasonScore currentScore;

		[Token(Token = "0x400298D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private SeasonScore previousScore;

		[Token(Token = "0x400298E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float lastUpdateOfEndDate;

		[Token(Token = "0x400298F")]
		private const float SecondsBetweenEndOfSeasonTimeUpdates = 60f;

		[Token(Token = "0x6001CA6")]
		[Address(RVA = "0x10697B4", Offset = "0x10697B4", VA = "0x10697B4")]
		public PlayerStatsWidgetViewHandler(MenuStateData menuStateData, DeckData deckData, Dictionary<ToolName, ToolSetting> toolSettings, CharacterData characterData, FindFriendData friendData, ToolIconSettings toolIconSettings, InteractionSettings interactionSettings, CustomizationData customizationData, PlayFabLeaguePointsSeasonData playFabLeaguePointsSeasonData, ServerTimeSyncData serverTimeSyncData)
		{
		}

		[Token(Token = "0x6001CA7")]
		[Address(RVA = "0x1069840", Offset = "0x1069840", VA = "0x1069840")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6001CA8")]
		[Address(RVA = "0x1069B20", Offset = "0x1069B20", VA = "0x1069B20")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001CA9")]
		[Address(RVA = "0x1069A78", Offset = "0x1069A78", VA = "0x1069A78")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001CAA")]
		[Address(RVA = "0x1069B28", Offset = "0x1069B28", VA = "0x1069B28")]
		private void GoToCharacterTab()
		{
		}

		[Token(Token = "0x6001CAB")]
		[Address(RVA = "0x1069BC8", Offset = "0x1069BC8", VA = "0x1069BC8")]
		private void GoToToolTab(int index)
		{
		}

		[Token(Token = "0x6001CAC")]
		[Address(RVA = "0x1069C48", Offset = "0x1069C48", VA = "0x1069C48")]
		private void SetInteractableState(bool isInteractable)
		{
		}

		[Token(Token = "0x6001CAD")]
		[Address(RVA = "0x1069CF4", Offset = "0x1069CF4", VA = "0x1069CF4", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001CAE")]
		[Address(RVA = "0x106A4F4", Offset = "0x106A4F4", VA = "0x106A4F4")]
		private SeasonScore CheckUpdateRank(SeasonScore score, LeaguePointsSeason leaderBoardData, RankWidgetReference reference)
		{
			return default(SeasonScore);
		}

		[Token(Token = "0x6001CAF")]
		[Address(RVA = "0x106A114", Offset = "0x106A114", VA = "0x106A114")]
		private void UpdateDeck()
		{
		}

		[Token(Token = "0x6001CB0")]
		[Address(RVA = "0x106A600", Offset = "0x106A600", VA = "0x106A600")]
		private void UpdateRankWidget(RankWidgetReference reference, int myPosition, int myScore, bool showRanking)
		{
		}

		[Token(Token = "0x6001CB1")]
		[Address(RVA = "0x106A340", Offset = "0x106A340", VA = "0x106A340")]
		private void UpdateHeight()
		{
		}
	}
	[Token(Token = "0x200065C")]
	public class PlayerStatsWidgetReference : MonoBehaviour
	{
		[Token(Token = "0x4002995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4002996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IgnisScrollRect scrollRect;

		[Token(Token = "0x4002997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RectMask2D rectMask2D;

		[Token(Token = "0x4002998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Animator animator;

		[Token(Token = "0x4002999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ToolIconReference[] toolIcons;

		[Token(Token = "0x400299A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Camera mirrorCamera;

		[Token(Token = "0x400299B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Button characterButton;

		[Token(Token = "0x400299C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Image rankBackground;

		[Token(Token = "0x400299D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public RankWidgetReference currentRank;

		[Token(Token = "0x400299E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public RankWidgetReference previousRank;

		[Token(Token = "0x400299F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public RectTransform loadOutHeaderRect;

		[Token(Token = "0x40029A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public RectTransform deckRect;

		[Token(Token = "0x40029A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public RectTransform contentRect;

		[Token(Token = "0x40029A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public RectTransform currentSeasonRect;

		[Token(Token = "0x40029A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public RectTransform preciousSeasonRect;

		[Token(Token = "0x6001CB5")]
		[Address(RVA = "0x106A6E0", Offset = "0x106A6E0", VA = "0x106A6E0")]
		public PlayerStatsWidgetReference()
		{
		}
	}
	[Token(Token = "0x200065D")]
	public class RankWidgetReference : MonoBehaviour
	{
		[Token(Token = "0x40029A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI leaguePoints;

		[Token(Token = "0x40029A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI rank;

		[Token(Token = "0x40029A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI dateText;

		[Token(Token = "0x6001CB6")]
		[Address(RVA = "0x106A6E8", Offset = "0x106A6E8", VA = "0x106A6E8")]
		public RankWidgetReference()
		{
		}
	}
	[Token(Token = "0x200065E")]
	public class PlayMenuViewData
	{
		[Token(Token = "0x40029A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DuelSettingsMenuViewReferences duelSettingsMenuViewReferences;

		[Token(Token = "0x40029A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ReplayMenuViewReference classicReplayMenuViewReference;

		[Token(Token = "0x40029A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ReplayMenuViewReference shootoutReplayMenuViewReference;

		[Token(Token = "0x40029AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ReplayMenuViewReference winterClassicReplayMenuViewReference;

		[Token(Token = "0x40029AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ReplayMenuViewReference scrapperShootoutReplayMenuViewReference;

		[Token(Token = "0x40029AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public OnboardingMenuViewReferences onboardingMenuViewReferences;

		[Token(Token = "0x6001CB7")]
		[Address(RVA = "0x106A6F0", Offset = "0x106A6F0", VA = "0x106A6F0")]
		public PlayMenuViewData()
		{
		}
	}
	[Token(Token = "0x200065F")]
	public class PlayMenuViewHandler : ITickable
	{
		[Token(Token = "0x40029AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x40029AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x40029AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MatchmakingData ratingMatchmakerData;

		[Token(Token = "0x40029B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MatchmakingData shootoutMatchmakerData;

		[Token(Token = "0x40029B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly MatchmakingData scrapperShootoutMatchmakerData;

		[Token(Token = "0x40029B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly MatchmakingData winterClassicMatchmakerData;

		[Token(Token = "0x40029B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly NetworkRegionProvider networkRegionProvider;

		[Token(Token = "0x40029B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x40029B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly LeagueTierProgressData leagueTierProgressData;

		[Token(Token = "0x40029B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x40029B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x40029B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x40029B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly PlayMenuViewData playMenuViewData;

		[Token(Token = "0x40029BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly RatingMatchmakerSettingsData ratingMatchmakerSettingsData;

		[Token(Token = "0x40029BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly ArenaItemSettings arenaItemSettings;

		[Token(Token = "0x40029BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x40029BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly CurrentMatchRequestData currentMatchRequestData;

		[Token(Token = "0x40029BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly TournamentEventData tournamentEventData;

		[Token(Token = "0x40029BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly ServerTimeSyncData serverTimeSyncData;

		[Token(Token = "0x40029C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly DuelSettingsViewData duelSettingsViewData;

		[Token(Token = "0x40029C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly GlobalMatchmakingStateData globalMatchmakingStateData;

		[Token(Token = "0x40029C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly PlayFabLeaguePointsSeasonData playFabLeaguePointsSeasonData;

		[Token(Token = "0x40029C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private PlayMenuViewReferences playMenuViewReferences;

		[Token(Token = "0x40029C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool showingPlayView;

		[Token(Token = "0x40029C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		private bool activeMatchMakingButton;

		[Token(Token = "0x40029C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
		private bool viewInMatchmaking;

		[Token(Token = "0x40029C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private NetworkingRegion currentlyShowingGameRoomButtonsForRegion;

		[Token(Token = "0x40029C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private double lastTimeLeaderboardUpdated;

		[Token(Token = "0x40029C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool showingFindRegion;

		[Token(Token = "0x40029CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private double lastSeenMatchmakerSettingsSeen;

		[Token(Token = "0x40029CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool showingQuickDrawWidget;

		[Token(Token = "0x40029CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
		private bool interactionIsBlockedQuickDraw;

		[Token(Token = "0x40029CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEA")]
		private bool isWinterClassicActive;

		[Token(Token = "0x40029CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEB")]
		private bool isShootoutDuelActive;

		[Token(Token = "0x40029CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private bool isScrapperShootoutActive;

		[Token(Token = "0x40029D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
		private bool showingWinterClassicWidget;

		[Token(Token = "0x40029D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEE")]
		private bool showingScrapperQuickDrawWidget;

		[Token(Token = "0x40029D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEF")]
		private bool isInTrainingMode;

		[Token(Token = "0x40029D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float lastTimeUpdateGlobalMatchmakingWidgetDependingOnSeasonBeingActiveChecked;

		[Token(Token = "0x6001CB8")]
		[Address(RVA = "0x106A6F8", Offset = "0x106A6F8", VA = "0x106A6F8")]
		public PlayMenuViewHandler(LockerRoomGameStateData lockerRoomGameStateData, IgnisNetworkConnectionData networkConnectionData, MatchmakingData ratingMatchmakerData, MatchmakingData shootoutMatchmakerData, MatchmakingData scrapperShootoutMatchmakerData, MatchmakingData winterClassicMatchmakerData, NetworkRegionProvider networkRegionProvider, MenuStateData menuStateData, LeagueTierProgressData leagueTierProgressData, FindFriendData findFriendData, IgnisSoundTriggerData ignisSoundTriggerData, IRoomTimeProvider roomTimeProvider, PlayMenuViewData playMenuViewData, RatingMatchmakerSettingsData ratingMatchmakerSettingsData, ArenaItemSettings arenaItemSettings, CustomizationData customizationData, CurrentMatchRequestData currentMatchRequestData, TournamentEventData tournamentEventData, ServerTimeSyncData serverTimeSyncData, DuelSettingsViewData duelSettingsViewData, GlobalMatchmakingStateData globalMatchmakingStateData, PlayFabLeaguePointsSeasonData playFabLeaguePointsSeasonData)
		{
		}

		[Token(Token = "0x6001CB9")]
		[Address(RVA = "0x106A7DC", Offset = "0x106A7DC", VA = "0x106A7DC")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6001CBA")]
		[Address(RVA = "0x106AB0C", Offset = "0x106AB0C", VA = "0x106AB0C")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001CBB")]
		[Address(RVA = "0x106AB38", Offset = "0x106AB38", VA = "0x106AB38")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001CBC")]
		[Address(RVA = "0x106AB3C", Offset = "0x106AB3C", VA = "0x106AB3C")]
		private void CancelOngoingMatchmaking()
		{
		}

		[Token(Token = "0x6001CBD")]
		[Address(RVA = "0x106AB68", Offset = "0x106AB68", VA = "0x106AB68")]
		private void PlaySingleMode(GameplayRules gameplayRules)
		{
		}

		[Token(Token = "0x6001CBE")]
		[Address(RVA = "0x106AC64", Offset = "0x106AC64", VA = "0x106AC64")]
		private void PlayGlobalMode()
		{
		}

		[Token(Token = "0x6001CBF")]
		[Address(RVA = "0x106ADDC", Offset = "0x106ADDC", VA = "0x106ADDC")]
		private void PlayShootoutMode()
		{
		}

		[Token(Token = "0x6001CC0")]
		[Address(RVA = "0x106AF54", Offset = "0x106AF54", VA = "0x106AF54")]
		private void PlayScrapperShootoutMode()
		{
		}

		[Token(Token = "0x6001CC1")]
		[Address(RVA = "0x106B0D0", Offset = "0x106B0D0", VA = "0x106B0D0")]
		private void PlayWinterClassicMode()
		{
		}

		[Token(Token = "0x6001CC2")]
		[Address(RVA = "0x106B24C", Offset = "0x106B24C", VA = "0x106B24C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001CC3")]
		[Address(RVA = "0x106B974", Offset = "0x106B974", VA = "0x106B974")]
		private void UpdateGlobalMatchmakingWidgetDependingOnSeasonBeingActive()
		{
		}

		[Token(Token = "0x6001CC4")]
		[Address(RVA = "0x106B828", Offset = "0x106B828", VA = "0x106B828")]
		public bool IsVisibleTournamentState()
		{
			return default(bool);
		}

		[Token(Token = "0x6001CC5")]
		[Address(RVA = "0x106B874", Offset = "0x106B874", VA = "0x106B874")]
		private UnityEngine.Sprite GetBackgroundForEquippedArena()
		{
			return null;
		}
	}
	[Token(Token = "0x2000660")]
	public class PlayMenuViewReferences : MonoBehaviour
	{
		[Token(Token = "0x40029D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button globalMatchMaking;

		[Token(Token = "0x40029D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject duelButtonContainer;

		[Token(Token = "0x40029D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI globalMatchMakingText;

		[Token(Token = "0x40029D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI infoText;

		[Token(Token = "0x40029D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject infoTextContainer;

		[Token(Token = "0x40029D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject infoTextBackgroundBlurContainer;

		[Token(Token = "0x40029DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Image chosenLocationBackground;

		[Token(Token = "0x40029DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject shootoutMatchMakingContainer;

		[Token(Token = "0x40029DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject scrapperShootoutMatchMakingContainer;

		[Token(Token = "0x40029DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject winterClassicMatchMakingContainer;

		[Token(Token = "0x40029DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Button shootoutMatchMaking;

		[Token(Token = "0x40029DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Button scrapperShootoutMatchMaking;

		[Token(Token = "0x40029E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Button winterClassicMatchMaking;

		[Token(Token = "0x40029E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public OnboardingMenuViewReferences onboardingMenuViewReferences;

		[Token(Token = "0x40029E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public ReplayMenuViewReference classicReplayMenuViewReference;

		[Token(Token = "0x40029E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public ReplayMenuViewReference shootoutReplayMenuViewReference;

		[Token(Token = "0x40029E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public ReplayMenuViewReference scrapperShootoutReplayMenuViewReference;

		[Token(Token = "0x40029E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public ReplayMenuViewReference winterClassicReplayMenuViewReference;

		[Token(Token = "0x40029E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public DuelSettingsMenuViewReferences duelSettingsMenuViewReferences;

		[Token(Token = "0x6001CC6")]
		[Address(RVA = "0x106BDD4", Offset = "0x106BDD4", VA = "0x106BDD4")]
		public PlayMenuViewReferences()
		{
		}
	}
	[Token(Token = "0x2000661")]
	public class PopupMessageReference : MonoBehaviour
	{
		[Token(Token = "0x40029E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x40029E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI header;

		[Token(Token = "0x40029E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI description;

		[Token(Token = "0x40029EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button button;

		[Token(Token = "0x40029EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI buttonText;

		[Token(Token = "0x40029EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public NetworkServicesDiagnosticsReference networkServiceDiagnosticsReference;

		[Token(Token = "0x40029ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Animator animator;

		[Token(Token = "0x40029EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimatorStateData showAnimation;

		[Token(Token = "0x40029EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimatorStateData hideAnimation;

		[Token(Token = "0x40029F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Collider uiCollider;

		[Token(Token = "0x40029F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Animation loadingAnimation;

		[Token(Token = "0x6001CC7")]
		[Address(RVA = "0x106BDDC", Offset = "0x106BDDC", VA = "0x106BDDC")]
		public PopupMessageReference()
		{
		}
	}
	[Token(Token = "0x2000662")]
	public class QuitApplicationViewHandler : ITickable
	{
		[Token(Token = "0x40029F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x40029F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PermissionRequestReference viewReference;

		[Token(Token = "0x40029F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool isRequestingQuit;

		[Token(Token = "0x40029F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool showingView;

		[Token(Token = "0x6001CC8")]
		[Address(RVA = "0x106BDE4", Offset = "0x106BDE4", VA = "0x106BDE4")]
		public QuitApplicationViewHandler(MenuStateData menuStateData)
		{
		}

		[Token(Token = "0x6001CC9")]
		[Address(RVA = "0x106BE0C", Offset = "0x106BE0C", VA = "0x106BE0C")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6001CCA")]
		[Address(RVA = "0x106C014", Offset = "0x106C014", VA = "0x106C014")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001CCB")]
		[Address(RVA = "0x106C068", Offset = "0x106C068", VA = "0x106C068", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001CCC")]
		[Address(RVA = "0x106C0C0", Offset = "0x106C0C0", VA = "0x106C0C0")]
		private void OpenView()
		{
		}

		[Token(Token = "0x6001CCD")]
		[Address(RVA = "0x106C0CC", Offset = "0x106C0CC", VA = "0x106C0CC")]
		private void Quit()
		{
		}

		[Token(Token = "0x6001CCE")]
		[Address(RVA = "0x106C0D4", Offset = "0x106C0D4", VA = "0x106C0D4")]
		private void Close()
		{
		}
	}
	[Token(Token = "0x2000663")]
	public class ReportIssuePopupReference : MonoBehaviour
	{
		[Token(Token = "0x40029F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("General")]
		public Canvas canvas;

		[Token(Token = "0x40029F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BoxCollider boxCollider;

		[Token(Token = "0x40029F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimatorStateData showAnimation;

		[Token(Token = "0x40029F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimatorStateData hideAnimation;

		[Token(Token = "0x40029FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI header;

		[Token(Token = "0x40029FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Part 1 - Select Issue")]
		public GameObject part1Container;

		[Token(Token = "0x40029FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IgnisButton continueButton;

		[Token(Token = "0x40029FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public IgnisButton backButton;

		[Token(Token = "0x40029FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public IgnisButton[] dismissButtons;

		[Token(Token = "0x40029FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TextMeshProUGUI localPlayerName;

		[Token(Token = "0x4002A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TextMeshProUGUI opponentPlayerName;

		[Token(Token = "0x4002A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TextMeshProUGUI continueButtonText;

		[Token(Token = "0x4002A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public TextMeshProUGUI dismissButtonText;

		[Token(Token = "0x4002A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public ReportIssueToggleReferences toggleBugReferences;

		[Token(Token = "0x4002A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public ReportIssueToggleReferences togglePlayerNameReferences;

		[Token(Token = "0x4002A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public ReportIssueToggleReferences toggleGesturesReferences;

		[Token(Token = "0x4002A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public ReportIssueToggleReferences toggleCheatingReferences;

		[Token(Token = "0x4002A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Part 2 - Describe Issue")]
		public GameObject part2Container;

		[Token(Token = "0x4002A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public VRInputField describeIssueInput;

		[Token(Token = "0x4002A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public VRInputField enterEmailInput;

		[Token(Token = "0x4002A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public IgnisButton sendReportButton;

		[Token(Token = "0x4002A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Header("Part 3 - Thank you")]
		public GameObject part3Container;

		[Token(Token = "0x4002A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public IgnisButton dismissFinalButton;

		[Token(Token = "0x6001CCF")]
		[Address(RVA = "0x106C0DC", Offset = "0x106C0DC", VA = "0x106C0DC")]
		public ReportIssuePopupReference()
		{
		}
	}
	[Token(Token = "0x2000664")]
	public class ReportIssueViewHandler : ITickable
	{
		[Token(Token = "0x4002A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SettingsMiscReference settingsMiscReference;

		[Token(Token = "0x4002A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MenuStateSettings menuStateSettings;

		[Token(Token = "0x4002A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly SettingsData settingsData;

		[Token(Token = "0x4002A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly InputData inputData;

		[Token(Token = "0x4002A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PersistentPlatformData persistentPlatformData;

		[Token(Token = "0x4002A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4002A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly LogSenderComponent logSenderComponent;

		[Token(Token = "0x4002A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly Ignis.DebugTools.LogSender logSender;

		[Token(Token = "0x4002A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly GameMessageSerializer gameMessageSerializer;

		[Token(Token = "0x4002A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly LoginData loginData;

		[Token(Token = "0x4002A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly AnimationStateHandlerData animationStateHandlerData;

		[Token(Token = "0x4002A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly VrKeyboardData vrKeyboardData;

		[Token(Token = "0x4002A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly AbuseReportingData abuseReportingData;

		[Token(Token = "0x4002A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool toggleBug;

		[Token(Token = "0x4002A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool togglePlayerName;

		[Token(Token = "0x4002A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		private bool toggleGestures;

		[Token(Token = "0x4002A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
		private bool toggleCheating;

		[Token(Token = "0x4002A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly KeyboardControllerData keyboardControllerData;

		[Token(Token = "0x4002A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string issueDescription;

		[Token(Token = "0x4002A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private string issueEmail;

		[Token(Token = "0x4002A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private SettingState nextState;

		[Token(Token = "0x4002A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool showingView;

		[Token(Token = "0x4002A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		private bool isInteractable;

		[Token(Token = "0x4002A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly ProfilerMarker reportIssueViewHandlerProfileMarker;

		[Token(Token = "0x6001CD0")]
		[Address(RVA = "0x106C0E4", Offset = "0x106C0E4", VA = "0x106C0E4")]
		public ReportIssueViewHandler(SettingsData settingsData, MenuStateData menuStateData, MenuStateSettings menuStateSettings, InputData inputData, PersistentPlatformData persistentPlatformData, PersistantDataUtility persistantDataUtility, LogSenderComponent logSenderComponent, Ignis.DebugTools.LogSender logSender, GameMessageSerializer gameMessageSerializer, LoginData loginData, AnimationStateHandlerData animationStateHandlerData, VrKeyboardData vrKeyboardData, AbuseReportingData abuseReportingData)
		{
		}

		[Token(Token = "0x6001CD1")]
		[Address(RVA = "0x106C21C", Offset = "0x106C21C", VA = "0x106C21C")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001CD2")]
		[Address(RVA = "0x106C9E8", Offset = "0x106C9E8", VA = "0x106C9E8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001CD3")]
		[Address(RVA = "0x106CAA0", Offset = "0x106CAA0", VA = "0x106CAA0")]
		private void SetSubTabsActive(bool isActive)
		{
		}

		[Token(Token = "0x6001CD4")]
		[Address(RVA = "0x106CAD8", Offset = "0x106CAD8", VA = "0x106CAD8")]
		private void OnReportIssueButtonClicked()
		{
		}

		[Token(Token = "0x6001CD5")]
		[Address(RVA = "0x106CFA0", Offset = "0x106CFA0", VA = "0x106CFA0")]
		private void CloseReportIssuePopup()
		{
		}

		[Token(Token = "0x6001CD6")]
		[Address(RVA = "0x106D2F4", Offset = "0x106D2F4", VA = "0x106D2F4")]
		private void OnReportIssueBackToPartOne()
		{
		}

		[Token(Token = "0x6001CD7")]
		[Address(RVA = "0x106D370", Offset = "0x106D370", VA = "0x106D370")]
		private void OnReportIssueContinueToPartTwo()
		{
		}

		[Token(Token = "0x6001CD8")]
		[Address(RVA = "0x106D3F0", Offset = "0x106D3F0", VA = "0x106D3F0")]
		private void ShowIssueDescriptionInput()
		{
		}

		[Token(Token = "0x6001CD9")]
		[Address(RVA = "0x106D5CC", Offset = "0x106D5CC", VA = "0x106D5CC")]
		private void ShowIssueEmailInput()
		{
		}

		[Token(Token = "0x6001CDA")]
		[Address(RVA = "0x106D7A8", Offset = "0x106D7A8", VA = "0x106D7A8")]
		private void UpdateIssueDescription(string newIssueDescription)
		{
		}

		[Token(Token = "0x6001CDB")]
		[Address(RVA = "0x106D840", Offset = "0x106D840", VA = "0x106D840")]
		private void UpdateIssueEmail(string newIssueEmail)
		{
		}

		[Token(Token = "0x6001CDC")]
		[Address(RVA = "0x106D8D8", Offset = "0x106D8D8", VA = "0x106D8D8")]
		private void CancelInput()
		{
		}

		[Token(Token = "0x6001CDD")]
		[Address(RVA = "0x106CF4C", Offset = "0x106CF4C", VA = "0x106CF4C")]
		private AbuseReportingData.Match GetActiveAbuseReportData()
		{
			return null;
		}

		[Token(Token = "0x6001CDE")]
		[Address(RVA = "0x106D8F8", Offset = "0x106D8F8", VA = "0x106D8F8")]
		private void OnSendReport()
		{
		}
	}
	[Token(Token = "0x2000665")]
	public class EndSeasonRewardViewData
	{
		[Token(Token = "0x4002A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isShowingView;

		[Token(Token = "0x6001CE3")]
		[Address(RVA = "0x106E028", Offset = "0x106E028", VA = "0x106E028")]
		public EndSeasonRewardViewData()
		{
		}
	}
	[Token(Token = "0x2000666")]
	public class EndSeasonRewardViewHandler : ITickable
	{
		[Token(Token = "0x4002A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly EndSeasonRewardViewData endSeasonRewardViewData;

		[Token(Token = "0x4002A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x4002A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly AnimationStateHandlerData animatorStateData;

		[Token(Token = "0x4002A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PlayerInfoPanelData playerInfoPanelData;

		[Token(Token = "0x4002A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly LoginData loginData;

		[Token(Token = "0x4002A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly LeagueTierSettings leagueTierSettings;

		[Token(Token = "0x4002A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly LeagueTierProgressData leagueTierProgressData;

		[Token(Token = "0x4002A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly LocalPlayerExperienceData localPlayerExperienceData;

		[Token(Token = "0x4002A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly PlayFabTitleData playFabTitleData;

		[Token(Token = "0x4002A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4002A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4002A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool shouldCheckReward;

		[Token(Token = "0x4002A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool showingView;

		[Token(Token = "0x4002A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private EndSeasonRewardViewReference reference;

		[Token(Token = "0x4002A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AnimatorStateData currentAnimation;

		[Token(Token = "0x4002A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RewardFromPlayFab playfabReward;

		[Token(Token = "0x4002A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool lowerLeaguePointAnimation;

		[Token(Token = "0x4002A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int leaguePointsBeforeSeasonEnd;

		[Token(Token = "0x4002A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int leaguePointsAfterSeasonEnd;

		[Token(Token = "0x4002A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float lowerLeaguePointAnimationLerpTime;

		[Token(Token = "0x4002A3C")]
		private const float LowerLeaguePointsLerpSpeed = 0.5f;

		[Token(Token = "0x6001CE4")]
		[Address(RVA = "0x106E030", Offset = "0x106E030", VA = "0x106E030")]
		public EndSeasonRewardViewHandler(EndSeasonRewardViewData endSeasonRewardViewData, PlayFabProgressionData playFabProgressionData, MenuStateData menuStateData, AnimationStateHandlerData animatorStateData, PlayerInfoPanelData playerInfoPanelData, LoginData loginData, LeagueTierSettings leagueTierSettings, LeagueTierProgressData leagueTierProgressData, LocalPlayerExperienceData localPlayerExperienceData, PlayFabTitleData playFabTitleData, IgnisSoundTriggerData ignisSoundTriggerData, IRoomTimeProvider roomTimeProvider)
		{
		}

		[Token(Token = "0x6001CE5")]
		[Address(RVA = "0x106E0C4", Offset = "0x106E0C4", VA = "0x106E0C4")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6001CE6")]
		[Address(RVA = "0x106E22C", Offset = "0x106E22C", VA = "0x106E22C")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001CE7")]
		[Address(RVA = "0x106E230", Offset = "0x106E230", VA = "0x106E230")]
		private void DebugTriggerReward()
		{
		}

		[Token(Token = "0x6001CE8")]
		[Address(RVA = "0x106E3B8", Offset = "0x106E3B8", VA = "0x106E3B8")]
		public void LoadDone()
		{
		}

		[Token(Token = "0x6001CE9")]
		[Address(RVA = "0x106E3C0", Offset = "0x106E3C0", VA = "0x106E3C0")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001CEA")]
		[Address(RVA = "0x106E450", Offset = "0x106E450", VA = "0x106E450", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001CEB")]
		[Address(RVA = "0x106E6B0", Offset = "0x106E6B0", VA = "0x106E6B0")]
		private void HandleShowingOfView()
		{
		}

		[Token(Token = "0x6001CEC")]
		[Address(RVA = "0x106E4C4", Offset = "0x106E4C4", VA = "0x106E4C4")]
		private void TryToTriggerSeaonsEndReward(bool allowedToShowView)
		{
		}

		[Token(Token = "0x6001CED")]
		[Address(RVA = "0x106E5A8", Offset = "0x106E5A8", VA = "0x106E5A8")]
		private void TryToLowerLeaguePoints()
		{
		}

		[Token(Token = "0x6001CEE")]
		[Address(RVA = "0x106ECF8", Offset = "0x106ECF8", VA = "0x106ECF8")]
		private float EaseOut(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6001CEF")]
		[Address(RVA = "0x106ED2C", Offset = "0x106ED2C", VA = "0x106ED2C")]
		private void CloeToLeaderboard()
		{
		}

		[Token(Token = "0x6001CF0")]
		[Address(RVA = "0x106ED54", Offset = "0x106ED54", VA = "0x106ED54")]
		private void CloseView()
		{
		}

		[Token(Token = "0x6001CF1")]
		[Address(RVA = "0x106E78C", Offset = "0x106E78C", VA = "0x106E78C")]
		private void TriggerAndClaimReward()
		{
		}

		[Token(Token = "0x6001CF2")]
		[Address(RVA = "0x106E828", Offset = "0x106E828", VA = "0x106E828")]
		private void UpdateUi()
		{
		}

		[Token(Token = "0x6001CF3")]
		[Address(RVA = "0x106EF40", Offset = "0x106EF40", VA = "0x106EF40")]
		private bool IsRewardGreaterThanZero(string reward)
		{
			return default(bool);
		}

		[Token(Token = "0x6001CF4")]
		[Address(RVA = "0x106EF14", Offset = "0x106EF14", VA = "0x106EF14")]
		private int ParseReward(string reward)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000667")]
	public class EndSeasonRewardViewReference : MonoBehaviour
	{
		[Token(Token = "0x4002A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4002A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BoxCollider boxCollider;

		[Token(Token = "0x4002A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Animator animator;

		[Token(Token = "0x4002A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI creditReward;

		[Token(Token = "0x4002A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject creditRewardParent;

		[Token(Token = "0x4002A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI blastReward;

		[Token(Token = "0x4002A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject blastRewardParent;

		[Token(Token = "0x4002A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshProUGUI experienceReward;

		[Token(Token = "0x4002A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject experienceRewardParent;

		[Token(Token = "0x4002A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TextMeshProUGUI leaguePoints;

		[Token(Token = "0x4002A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TextMeshProUGUI rank;

		[Token(Token = "0x4002A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Image leagueIcon;

		[Token(Token = "0x4002A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public TextMeshProUGUI seasonText;

		[Token(Token = "0x4002A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TextMeshProUGUI playerName;

		[Token(Token = "0x4002A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Button leaderboardButton;

		[Token(Token = "0x4002A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public AnimatorStateData showAnimation;

		[Token(Token = "0x4002A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimatorStateData hideAnimation;

		[Token(Token = "0x4002A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Button closeButton;

		[Token(Token = "0x4002A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Transform[] rewardSources;

		[Token(Token = "0x6001CF5")]
		[Address(RVA = "0x106EF70", Offset = "0x106EF70", VA = "0x106EF70")]
		public EndSeasonRewardViewReference()
		{
		}
	}
	[Token(Token = "0x2000668")]
	public class ControllerOffsetReference : MonoBehaviour
	{
		[Token(Token = "0x4002A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4002A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IgnisDropdown dropdown;

		[Token(Token = "0x4002A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject positionOffset;

		[Token(Token = "0x4002A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject rotationOffset;

		[Token(Token = "0x4002A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public OffsetValueReference positionX;

		[Token(Token = "0x4002A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public OffsetValueReference positionY;

		[Token(Token = "0x4002A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public OffsetValueReference positionZ;

		[Token(Token = "0x4002A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OffsetValueReference rotationX;

		[Token(Token = "0x4002A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OffsetValueReference rotationY;

		[Token(Token = "0x4002A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public OffsetValueReference rotationZ;

		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0x106EF78", Offset = "0x106EF78", VA = "0x106EF78")]
		public ControllerOffsetReference()
		{
		}
	}
	[Token(Token = "0x2000669")]
	[CreateAssetMenu(fileName = "ControllerOffsetSettings", menuName = "Settings/Input/ControllerOffsetSettings")]
	public class ControllerOffsetSettings : ScriptableObject
	{
		[Token(Token = "0x4002A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ControllerOffsetReference controllerOffsetReference;

		[Token(Token = "0x4002A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 positionOffsetMinMax;

		[Token(Token = "0x4002A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 rotationOffsetMinMax;

		[Token(Token = "0x4002A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float positionDecimalScale;

		[Token(Token = "0x4002A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Localization")]
		public string positionXLocalizationId;

		[Token(Token = "0x4002A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string positionYLocalizationId;

		[Token(Token = "0x4002A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string positionZLocalizationId;

		[Token(Token = "0x4002A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string rotationXLocalizationId;

		[Token(Token = "0x4002A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string rotationYLocalizationId;

		[Token(Token = "0x4002A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string rotationZLocalizationId;

		[Token(Token = "0x4002A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string errorNoFloatId;

		[Token(Token = "0x4002A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string errorNeedToBeLessThanId;

		[Token(Token = "0x4002A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string errorNeedToBeLargerThanId;

		[Token(Token = "0x6001CF7")]
		[Address(RVA = "0x106EF80", Offset = "0x106EF80", VA = "0x106EF80")]
		public ControllerOffsetSettings()
		{
		}
	}
	[Token(Token = "0x200066A")]
	public class ControllerOffsetViewHandler : ITickable
	{
		[Token(Token = "0x4002A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ControllerOffsetSettings controllerOffsetSettings;

		[Token(Token = "0x4002A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly InputData inputData;

		[Token(Token = "0x4002A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PersistentPlatformData persistentPlatformData;

		[Token(Token = "0x4002A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4002A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly VrKeyboardData vrKeyboardData;

		[Token(Token = "0x4002A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x4002A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ControllerOffsetReference controllerOffsetReference;

		[Token(Token = "0x4002A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool isShowingView;

		[Token(Token = "0x4002A70")]
		private const string NoDecimal = "N0";

		[Token(Token = "0x4002A71")]
		private const string TwoDecimal = "N2";

		[Token(Token = "0x4002A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private KeyboardControllerData keyboardControllerData;

		[Token(Token = "0x4002A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Locale locale;

		[Token(Token = "0x6001CF8")]
		[Address(RVA = "0x106EF88", Offset = "0x106EF88", VA = "0x106EF88")]
		public ControllerOffsetViewHandler(ControllerOffsetSettings controllerOffsetSettings, MenuStateData menuStateData, InputData inputData, PersistentPlatformData persistentPlatformData, PersistantDataUtility persistantDataUtility, VrKeyboardData vrKeyboardData, ArcadeData arcadeData)
		{
		}

		[Token(Token = "0x6001CF9")]
		[Address(RVA = "0x106F074", Offset = "0x106F074", VA = "0x106F074")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001CFA")]
		[Address(RVA = "0x106F924", Offset = "0x106F924", VA = "0x106F924", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001CFB")]
		[Address(RVA = "0x106F2D8", Offset = "0x106F2D8", VA = "0x106F2D8")]
		private void SetUpSliders()
		{
		}

		[Token(Token = "0x6001CFC")]
		[Address(RVA = "0x106F9B4", Offset = "0x106F9B4", VA = "0x106F9B4")]
		private void SetSlider(OffsetValueReference reference, Action<float, OffsetValueReference> action, float defaultValue, Vector2 minMax, string format, string titleId)
		{
		}

		[Token(Token = "0x6001CFD")]
		[Address(RVA = "0x106F994", Offset = "0x106F994", VA = "0x106F994")]
		private float ScaleOffsetToInput(float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001CFE")]
		[Address(RVA = "0x106FC68", Offset = "0x106FC68", VA = "0x106FC68")]
		private float ScaleInputToOffset(float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001CFF")]
		[Address(RVA = "0x106FC88", Offset = "0x106FC88", VA = "0x106FC88")]
		private void OnWordChanged(string word, Vector2 minMax, string format)
		{
		}

		[Token(Token = "0x6001D00")]
		[Address(RVA = "0x106FE34", Offset = "0x106FE34", VA = "0x106FE34")]
		private void RequestKeyboard(float currentValue, Action<float> action, string keyboardTitle, Action<string> onWordChanged, string format)
		{
		}

		[Token(Token = "0x6001D01")]
		[Address(RVA = "0x1070038", Offset = "0x1070038", VA = "0x1070038")]
		private void OnCancelKeyBoard()
		{
		}

		[Token(Token = "0x6001D02")]
		[Address(RVA = "0x107003C", Offset = "0x107003C", VA = "0x107003C")]
		private void OnKeyboardSubmit(string stringValue, Action<float> applyValueAction)
		{
		}

		[Token(Token = "0x6001D03")]
		[Address(RVA = "0x106FC18", Offset = "0x106FC18", VA = "0x106FC18")]
		private void SetButtonValue(OffsetValueReference offsetValue, float value, string format)
		{
		}

		[Token(Token = "0x6001D04")]
		[Address(RVA = "0x106F62C", Offset = "0x106F62C", VA = "0x106F62C")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001D05")]
		[Address(RVA = "0x10700D8", Offset = "0x10700D8", VA = "0x10700D8")]
		private void SetReferenceValues(OffsetValueReference offsetValue, float value, string format)
		{
		}

		[Token(Token = "0x6001D06")]
		[Address(RVA = "0x107012C", Offset = "0x107012C", VA = "0x107012C")]
		private void SetPositionX(float value, OffsetValueReference offsetReference)
		{
		}

		[Token(Token = "0x6001D07")]
		[Address(RVA = "0x1070294", Offset = "0x1070294", VA = "0x1070294")]
		private void SetPositionY(float value, OffsetValueReference offsetReference)
		{
		}

		[Token(Token = "0x6001D08")]
		[Address(RVA = "0x107032C", Offset = "0x107032C", VA = "0x107032C")]
		private void SetPositionZ(float value, OffsetValueReference offsetReference)
		{
		}

		[Token(Token = "0x6001D09")]
		[Address(RVA = "0x10701C4", Offset = "0x10701C4", VA = "0x10701C4")]
		private float ClampPosition(float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001D0A")]
		[Address(RVA = "0x10701F0", Offset = "0x10701F0", VA = "0x10701F0")]
		private void SetPositionOffset()
		{
		}

		[Token(Token = "0x6001D0B")]
		[Address(RVA = "0x10703C4", Offset = "0x10703C4", VA = "0x10703C4")]
		private void SetRotationX(float value, OffsetValueReference offsetReference)
		{
		}

		[Token(Token = "0x6001D0C")]
		[Address(RVA = "0x1070528", Offset = "0x1070528", VA = "0x1070528")]
		private void SetRotationY(float value, OffsetValueReference offsetReference)
		{
		}

		[Token(Token = "0x6001D0D")]
		[Address(RVA = "0x10705B8", Offset = "0x10705B8", VA = "0x10705B8")]
		private void SetRotationZ(float value, OffsetValueReference offsetReference)
		{
		}

		[Token(Token = "0x6001D0E")]
		[Address(RVA = "0x1070454", Offset = "0x1070454", VA = "0x1070454")]
		private float ClampRotation(float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001D0F")]
		[Address(RVA = "0x1070480", Offset = "0x1070480", VA = "0x1070480")]
		private void SetRotationOffset()
		{
		}

		[Token(Token = "0x6001D10")]
		[Address(RVA = "0x106F654", Offset = "0x106F654", VA = "0x106F654")]
		private void SetHandOffset(HandOffset handOffset)
		{
		}
	}
	[Token(Token = "0x200066D")]
	public class OffsetValueReference : MonoBehaviour
	{
		[Token(Token = "0x4002A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Slider slider;

		[Token(Token = "0x4002A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SliderReleaseInputEvent releaseInput;

		[Token(Token = "0x4002A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button button;

		[Token(Token = "0x4002A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI buttonText;

		[Token(Token = "0x6001D1A")]
		[Address(RVA = "0x107082C", Offset = "0x107082C", VA = "0x107082C")]
		public OffsetValueReference()
		{
		}
	}
	[Token(Token = "0x200066E")]
	public class SettingsAudioReference : MonoBehaviour
	{
		[Token(Token = "0x4002A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4002A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IgnisDropdown languageSelection;

		[Token(Token = "0x4002A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Slider masterVolume;

		[Token(Token = "0x4002A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Slider musicVolume;

		[Token(Token = "0x4002A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Slider effectsVolume;

		[Token(Token = "0x4002A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Slider voiceVolume;

		[Token(Token = "0x4002A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ToggleReference haptic;

		[Token(Token = "0x4002A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ToggleReference micPermission;

		[Token(Token = "0x6001D1B")]
		[Address(RVA = "0x1070834", Offset = "0x1070834", VA = "0x1070834")]
		public SettingsAudioReference()
		{
		}
	}
	[Token(Token = "0x200066F")]
	public class SettingsMenuReference : MonoBehaviour
	{
		[Token(Token = "0x4002A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4002A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button settingsButton;

		[Token(Token = "0x4002A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button reportButton;

		[Token(Token = "0x6001D1C")]
		[Address(RVA = "0x107083C", Offset = "0x107083C", VA = "0x107083C")]
		public SettingsMenuReference()
		{
		}
	}
	[Token(Token = "0x2000670")]
	public enum SettingState
	{
		[Token(Token = "0x4002A8E")]
		MainSettings,
		[Token(Token = "0x4002A8F")]
		Report
	}
	[Serializable]
	[Token(Token = "0x2000671")]
	public class SettingsMenuSettings
	{
		[Token(Token = "0x4002A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SettingsMenuReference settingsMenuReference;

		[Token(Token = "0x4002A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SettingsMiscReference settingsMiscReference;

		[Token(Token = "0x4002A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SettingsAudioReference settingsAudioReference;

		[Token(Token = "0x4002A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioMixer audioMixer;

		[Token(Token = "0x6001D1D")]
		[Address(RVA = "0x1070844", Offset = "0x1070844", VA = "0x1070844")]
		public SettingsMenuSettings()
		{
		}
	}
	[Token(Token = "0x2000672")]
	public class SettingsData
	{
		[Token(Token = "0x4002A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SettingState settingState;

		[Token(Token = "0x4002A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool reportingIssue;

		[Token(Token = "0x6001D1E")]
		[Address(RVA = "0x107084C", Offset = "0x107084C", VA = "0x107084C")]
		public SettingsData()
		{
		}
	}
	[Token(Token = "0x2000673")]
	public class SettingsMenuViewHandler : ITickable
	{
		[Token(Token = "0x4002A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly SettingsData settingsData;

		[Token(Token = "0x4002A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4002A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly FeaturePermissionData featurePermissionData;

		[Token(Token = "0x4002A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4002A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x4002A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4002A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SettingsMenuReference settingsMenuReference;

		[Token(Token = "0x4002A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private SettingsAudioReference settingsAudioReference;

		[Token(Token = "0x4002A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioMixer audioMixer;

		[Token(Token = "0x4002AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool showingView;

		[Token(Token = "0x4002AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private SettingState nextState;

		[Token(Token = "0x4002AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isInteractable;

		[Token(Token = "0x4002AA3")]
		private const float MuteMasterVolumeMultiplier = 0.0001f;

		[Token(Token = "0x4002AA4")]
		private const float UnMuteMasterVolumeMultiplier = 1f;

		[Token(Token = "0x4002AA5")]
		private const string MasterVolumeKey = "masterVolume";

		[Token(Token = "0x4002AA6")]
		private const string MusicVolumeKey = "musicVolume";

		[Token(Token = "0x4002AA7")]
		private const string SoundVolumeKey = "soundVolume";

		[Token(Token = "0x4002AA8")]
		private const string VoiceVolumeKey = "voiceVolume";

		[Token(Token = "0x4002AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<LocalizedText> localizedTextComponents;

		[Token(Token = "0x4002AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool voiceAllowedIsOn;

		[Token(Token = "0x6001D1F")]
		[Address(RVA = "0x1070854", Offset = "0x1070854", VA = "0x1070854")]
		public SettingsMenuViewHandler(MenuStateData menuStateData, SettingsData settingsData, LocalPersistentData localPersistentData, FeaturePermissionData featurePermissionData, PersistantDataUtility persistantDataUtility, ArcadeData arcadeData, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x6001D20")]
		[Address(RVA = "0x10708B8", Offset = "0x10708B8", VA = "0x10708B8")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6001D21")]
		[Address(RVA = "0x10713F4", Offset = "0x10713F4", VA = "0x10713F4")]
		private void OnLanguageSelectionChanged(int dropdownIndex)
		{
		}

		[Token(Token = "0x6001D22")]
		[Address(RVA = "0x10712C0", Offset = "0x10712C0", VA = "0x10712C0")]
		private void ApplySavedSettings()
		{
		}

		[Token(Token = "0x6001D23")]
		[Address(RVA = "0x10715FC", Offset = "0x10715FC", VA = "0x10715FC")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001D24")]
		[Address(RVA = "0x1071A14", Offset = "0x1071A14", VA = "0x1071A14", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001D25")]
		[Address(RVA = "0x107138C", Offset = "0x107138C", VA = "0x107138C")]
		private void SetSubTabsActive(bool isActive)
		{
		}

		[Token(Token = "0x6001D26")]
		[Address(RVA = "0x1071BF0", Offset = "0x1071BF0", VA = "0x1071BF0")]
		private void OnChangeTab(SettingState newState)
		{
		}

		[Token(Token = "0x6001D27")]
		[Address(RVA = "0x1071BF8", Offset = "0x1071BF8", VA = "0x1071BF8")]
		private void OnMasterVolumeChanged(float value)
		{
		}

		[Token(Token = "0x6001D28")]
		[Address(RVA = "0x1071EF8", Offset = "0x1071EF8", VA = "0x1071EF8")]
		private void OnMusicVolumeChanged(float value)
		{
		}

		[Token(Token = "0x6001D29")]
		[Address(RVA = "0x1071F8C", Offset = "0x1071F8C", VA = "0x1071F8C")]
		private void OnEffectVolumeChanged(float value)
		{
		}

		[Token(Token = "0x6001D2A")]
		[Address(RVA = "0x1072020", Offset = "0x1072020", VA = "0x1072020")]
		private void OnVoiceVolumeChanged(float value)
		{
		}

		[Token(Token = "0x6001D2B")]
		[Address(RVA = "0x10715C0", Offset = "0x10715C0", VA = "0x10715C0")]
		private void SetVolume(string group, float volume)
		{
		}

		[Token(Token = "0x6001D2C")]
		[Address(RVA = "0x10720B4", Offset = "0x10720B4", VA = "0x10720B4")]
		private void OnSetHaptic(bool useHaptic)
		{
		}

		[Token(Token = "0x6001D2D")]
		[Address(RVA = "0x1071CA4", Offset = "0x1071CA4", VA = "0x1071CA4")]
		private void SaveSettings()
		{
		}

		[Token(Token = "0x6001D2E")]
		[Address(RVA = "0x107212C", Offset = "0x107212C", VA = "0x107212C")]
		private void OnSetMicPermission(bool allowMic)
		{
		}

		[Token(Token = "0x6001D2F")]
		[Address(RVA = "0x1071D10", Offset = "0x1071D10", VA = "0x1071D10")]
		private void TrackChangeOfSetting(float value, string name)
		{
		}

		[Token(Token = "0x6001D30")]
		[Address(RVA = "0x10721B4", Offset = "0x10721B4", VA = "0x10721B4")]
		public void OnApplicationPause()
		{
		}
	}
	[Token(Token = "0x2000674")]
	public class SettingsMiscReference : MonoBehaviour
	{
		[Token(Token = "0x4002AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4002AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button reportIssue;

		[Token(Token = "0x4002AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI reportIssueId;

		[Token(Token = "0x4002AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI reportIssueText;

		[Token(Token = "0x4002AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ReportIssuePopupReference reportIssuePopupReference;

		[Token(Token = "0x6001D33")]
		[Address(RVA = "0x1072200", Offset = "0x1072200", VA = "0x1072200")]
		public SettingsMiscReference()
		{
		}
	}
	[Token(Token = "0x2000675")]
	public class CoinShopReference : MonoBehaviour
	{
		[Token(Token = "0x4002AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4002AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Canvas popupCanvas;

		[Token(Token = "0x4002AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IgnisScrollRect categoryScrollRect;

		[Token(Token = "0x4002AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IgnisScrollRect itemScrollView;

		[Token(Token = "0x4002AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject coinItemView;

		[Token(Token = "0x4002AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform coinItemContent;

		[Token(Token = "0x4002AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform premiumCoinContent;

		[Token(Token = "0x4002AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public IgnisScrollRect itemInfoScrollRect;

		[Token(Token = "0x4002AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ItemInformationReference itemInformationReference;

		[Token(Token = "0x4002AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TMP_Text categoryHeader;

		[Token(Token = "0x4002ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Toggle categoryToggleCharacterSkins;

		[Token(Token = "0x4002ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Toggle categoryToggleToolSkins;

		[Token(Token = "0x4002ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Toggle categoryToggleBanners;

		[Token(Token = "0x4002ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Toggle categoryToggleArenas;

		[Token(Token = "0x4002ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Toggle categoryTogglePodiums;

		[Token(Token = "0x4002ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Toggle categoryToggleServices;

		[Token(Token = "0x4002AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject characterMirror;

		[Token(Token = "0x4002AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public TMP_Text itemInfoCostText;

		[Token(Token = "0x4002AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public PopupMessageReference purchasePopupReference;

		[Token(Token = "0x4002AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public PopupMessageReference purchaseErrorPopupReference;

		[Token(Token = "0x4002AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public IgnisButton purchaseErrorPopupCloseButton;

		[Token(Token = "0x4002AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public IgnisButton purchaseErrorPopupRetryButton;

		[Token(Token = "0x4002AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public ShopPurchasePopupReference notEnoughCredPopupReference;

		[Token(Token = "0x4002AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public ShopPurchasePopupReference notEnoughBlastsPopupReference;

		[Token(Token = "0x4002AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public IgnisButton buyItemButton;

		[Token(Token = "0x4002AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public bool alwaysHaveItemSelected;

		[Token(Token = "0x4002ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		public bool itemInfoDisplayCost;

		[Token(Token = "0x6001D34")]
		[Address(RVA = "0x1072208", Offset = "0x1072208", VA = "0x1072208")]
		public CoinShopReference()
		{
		}
	}
	[Token(Token = "0x2000676")]
	[CreateAssetMenu(fileName = "CoinShopSettings", menuName = "Settings/Player/CoinShopSettings", order = 2)]
	public class CoinShopSettings : ScriptableObject
	{
		[Token(Token = "0x4002ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemIconReference itemIconReference;

		[Token(Token = "0x4002ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CoinItemIconReference coinItemIconReference;

		[Token(Token = "0x6001D35")]
		[Address(RVA = "0x1072210", Offset = "0x1072210", VA = "0x1072210")]
		public CoinShopSettings()
		{
		}
	}
	[Token(Token = "0x2000677")]
	public class CoinShopData
	{
		[Token(Token = "0x4002ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isProcessingPurchase;

		[Token(Token = "0x4002ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool isPurchaseError;

		[Token(Token = "0x4002ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string currentUnfinishedItemPurchase;

		[Token(Token = "0x4002AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CoinItem currentUnfinishedCoinItemPurchase;

		[Token(Token = "0x4002AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CoinItem currentSuggestedCoinItem;

		[Token(Token = "0x4002AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int rewardSourceIconIndex;

		[Token(Token = "0x6001D36")]
		[Address(RVA = "0x1072218", Offset = "0x1072218", VA = "0x1072218")]
		public CoinShopData()
		{
		}
	}
	[Token(Token = "0x2000678")]
	public class CoinShopViewHandler : ITickable
	{
		[Token(Token = "0x2000679")]
		private enum Category
		{
			[Token(Token = "0x4002B00")]
			CharacterSkins,
			[Token(Token = "0x4002B01")]
			ToolSkins,
			[Token(Token = "0x4002B02")]
			Banners,
			[Token(Token = "0x4002B03")]
			Arenas,
			[Token(Token = "0x4002B04")]
			Podiums,
			[Token(Token = "0x4002B05")]
			Services,
			[Token(Token = "0x4002B06")]
			NotInShop
		}

		[Token(Token = "0x4002AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Category categoryToOpen;

		[Token(Token = "0x4002AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Category categoryCurrentlyOpen;

		[Token(Token = "0x4002AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly CoinShopData coinShopData;

		[Token(Token = "0x4002AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x4002AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ShopData shopData;

		[Token(Token = "0x4002AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly OwnershipData ownershipData;

		[Token(Token = "0x4002ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly CoinItemSettings coinItemSettings;

		[Token(Token = "0x4002ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly PlayerInfoPanelData playerInfoPanelData;

		[Token(Token = "0x4002ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly CharacterData characterData;

		[Token(Token = "0x4002ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private CoinShopReference coinShopReference;

		[Token(Token = "0x4002ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ItemInformationReference itemInformationReference;

		[Token(Token = "0x4002ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ShopPurchasePopupReference notEnoughCredPopupReference;

		[Token(Token = "0x4002AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ShopPurchasePopupReference notEnoughBlastsPopupReference;

		[Token(Token = "0x4002AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly ItemInformationSettings informationSettings;

		[Token(Token = "0x4002AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly CoinShopSettings coinShopSettings;

		[Token(Token = "0x4002AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly CustomizationSettings customizationSettings;

		[Token(Token = "0x4002AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool showingView;

		[Token(Token = "0x4002AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ItemGridData itemGridData;

		[Token(Token = "0x4002AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<CoinItem> premiumCoinItems;

		[Token(Token = "0x4002AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private List<CoinItem> inGameCoinItems;

		[Token(Token = "0x4002AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private List<ItemIconReference> availableIcons;

		[Token(Token = "0x4002AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<CoinItemIconReference> availableCoinIcons;

		[Token(Token = "0x4002AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int[] numItemsInGroup;

		[Token(Token = "0x4002AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private string[] itemLookup;

		[Token(Token = "0x4002AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<CoinItem> coinItemLookup;

		[Token(Token = "0x4002AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int selectedIndex;

		[Token(Token = "0x4002AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private int itemToSelect;

		[Token(Token = "0x4002AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool hideOwnedItems;

		[Token(Token = "0x4002AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool toggledHideOwnedItems;

		[Token(Token = "0x4002AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private int itemsDisplayed;

		[Token(Token = "0x4002AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int itemsDisplayedOwned;

		[Token(Token = "0x4002AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private bool showingPurchaseErrorPopup;

		[Token(Token = "0x4002AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
		private bool isTryingOnSkin;

		[Token(Token = "0x4002AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEE")]
		private bool shouldShowNotEnoughCredPopup;

		[Token(Token = "0x4002AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEF")]
		private bool showingNotEnoughCredPopup;

		[Token(Token = "0x4002AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool shouldShowNotEnoughBlastsPopup;

		[Token(Token = "0x4002AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		private bool showingNotEnoughBlastsPopup;

		[Token(Token = "0x4002AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
		private bool isButtonsInteractable;

		[Token(Token = "0x4002AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private List<Item> itemsInShop;

		[Token(Token = "0x4002AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private readonly List<Item> itemsToShowInMainList;

		[Token(Token = "0x4002AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private BuyItemRequest prevFailedBuyItemRequest;

		[Token(Token = "0x4002AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private BuyCoinItemRequest prevFailedBuyCoinItemRequest;

		[Token(Token = "0x4002AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private bool areCoinsPackagesInitialized;

		[Token(Token = "0x6001D37")]
		[Address(RVA = "0x1072220", Offset = "0x1072220", VA = "0x1072220")]
		public CoinShopViewHandler(CoinShopData coinShopData, MenuStateData menuStateData, CustomizationData customizationData, ShopData shopData, CharacterData characterData, OwnershipData ownershipData, CoinShopSettings coinShopSettings, CoinItemSettings coinItemSettings, CustomizationSettings customizationSettings, ItemInformationSettings informationSettings, ItemGridViewHandlerData itemGridViewHandlerData, PlayerInfoPanelData playerInfoPanelData)
		{
		}

		[Token(Token = "0x6001D38")]
		[Address(RVA = "0x10726DC", Offset = "0x10726DC", VA = "0x10726DC")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6001D39")]
		[Address(RVA = "0x1072FAC", Offset = "0x1072FAC", VA = "0x1072FAC")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001D3A")]
		[Address(RVA = "0x1072FB4", Offset = "0x1072FB4", VA = "0x1072FB4")]
		private void InitializeCoinItems()
		{
		}

		[Token(Token = "0x6001D3B")]
		[Address(RVA = "0x1072EF0", Offset = "0x1072EF0", VA = "0x1072EF0")]
		private void SetViewActive(bool isActive)
		{
		}

		[Token(Token = "0x6001D3C")]
		[Address(RVA = "0x1072FA0", Offset = "0x1072FA0", VA = "0x1072FA0")]
		private void RefreshTab()
		{
		}

		[Token(Token = "0x6001D3D")]
		[Address(RVA = "0x1073980", Offset = "0x1073980", VA = "0x1073980", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001D3E")]
		[Address(RVA = "0x107584C", Offset = "0x107584C", VA = "0x107584C")]
		private void CategoryButton(Category selectedCategory)
		{
		}

		[Token(Token = "0x6001D3F")]
		[Address(RVA = "0x1074640", Offset = "0x1074640", VA = "0x1074640")]
		private void UpdateInventory()
		{
		}

		[Token(Token = "0x6001D40")]
		[Address(RVA = "0x1075868", Offset = "0x1075868", VA = "0x1075868")]
		private void UpdateWallet(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x6001D41")]
		[Address(RVA = "0x10744B8", Offset = "0x10744B8", VA = "0x10744B8")]
		private void UpdateCategoryButtons()
		{
		}

		[Token(Token = "0x6001D42")]
		[Address(RVA = "0x107595C", Offset = "0x107595C", VA = "0x107595C")]
		private void ClickItemButton(int iconId)
		{
		}

		[Token(Token = "0x6001D43")]
		[Address(RVA = "0x1075964", Offset = "0x1075964", VA = "0x1075964")]
		private void ClickHideOwnedToggle(bool toggleOn)
		{
		}

		[Token(Token = "0x6001D44")]
		[Address(RVA = "0x1074CC0", Offset = "0x1074CC0", VA = "0x1074CC0")]
		public void ShowInformation(int iconId)
		{
		}

		[Token(Token = "0x6001D45")]
		[Address(RVA = "0x10759D0", Offset = "0x10759D0", VA = "0x10759D0")]
		private void SetUiPositions()
		{
		}

		[Token(Token = "0x6001D46")]
		[Address(RVA = "0x1075BE0", Offset = "0x1075BE0", VA = "0x1075BE0")]
		private float StepLocalHeight(RectTransform rectTransform, float height)
		{
			return default(float);
		}

		[Token(Token = "0x6001D47")]
		[Address(RVA = "0x1074728", Offset = "0x1074728", VA = "0x1074728")]
		private void UpdateItems()
		{
		}

		[Token(Token = "0x6001D48")]
		[Address(RVA = "0x1073714", Offset = "0x1073714", VA = "0x1073714")]
		private void SetIcons(List<Item> selections, int offset)
		{
		}

		[Token(Token = "0x6001D49")]
		[Address(RVA = "0x1074B20", Offset = "0x1074B20", VA = "0x1074B20")]
		private void SetCoinIcons(List<CoinItem> selections, int offset)
		{
		}

		[Token(Token = "0x6001D4A")]
		[Address(RVA = "0x1075684", Offset = "0x1075684", VA = "0x1075684")]
		private void UpdateInteractable(bool isInteractable)
		{
		}

		[Token(Token = "0x6001D4B")]
		[Address(RVA = "0x1075C4C", Offset = "0x1075C4C", VA = "0x1075C4C")]
		private void UpdateIconReference(ItemIconReference icon, Item item, ItemOwnership ownership)
		{
		}

		[Token(Token = "0x6001D4C")]
		[Address(RVA = "0x1075D0C", Offset = "0x1075D0C", VA = "0x1075D0C")]
		private void UpdateCoinIconReference(CoinItemIconReference icon, CoinItem item)
		{
		}

		[Token(Token = "0x6001D4D")]
		[Address(RVA = "0x1075664", Offset = "0x1075664", VA = "0x1075664")]
		private Category ItemTypeCategory(ItemType itemType)
		{
			return default(Category);
		}

		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0x1074334", Offset = "0x1074334", VA = "0x1074334")]
		private void ResetSkinToEquipped()
		{
		}

		[Token(Token = "0x6001D4F")]
		[Address(RVA = "0x1075E58", Offset = "0x1075E58", VA = "0x1075E58")]
		private void BuyItemButton()
		{
		}

		[Token(Token = "0x6001D50")]
		[Address(RVA = "0x107602C", Offset = "0x107602C", VA = "0x107602C")]
		private void BuyItem(string itemId)
		{
		}

		[Token(Token = "0x6001D51")]
		[Address(RVA = "0x1075F44", Offset = "0x1075F44", VA = "0x1075F44")]
		private void BuyCoinItem(CoinItem item)
		{
		}

		[Token(Token = "0x6001D52")]
		[Address(RVA = "0x1075970", Offset = "0x1075970", VA = "0x1075970")]
		private bool IsSelectedItemCoin(int id)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D53")]
		[Address(RVA = "0x1074708", Offset = "0x1074708", VA = "0x1074708")]
		private void DisplayPurchaseErrorPopup()
		{
		}

		[Token(Token = "0x6001D54")]
		[Address(RVA = "0x1076404", Offset = "0x1076404", VA = "0x1076404")]
		private void RetryPurchase()
		{
		}

		[Token(Token = "0x6001D55")]
		[Address(RVA = "0x1074294", Offset = "0x1074294", VA = "0x1074294")]
		private void SetPurchaseErrorPopupActive(bool isActive)
		{
		}

		[Token(Token = "0x6001D56")]
		[Address(RVA = "0x10743DC", Offset = "0x10743DC", VA = "0x10743DC")]
		public void SetPurchasePopupActive(bool isActive)
		{
		}

		[Token(Token = "0x6001D57")]
		[Address(RVA = "0x10734FC", Offset = "0x10734FC", VA = "0x10734FC")]
		public void SetNotEnoughCredPopupActive(bool isActive)
		{
		}

		[Token(Token = "0x6001D58")]
		[Address(RVA = "0x1073608", Offset = "0x1073608", VA = "0x1073608")]
		public void SetNotEnoughBlastsPopupActive(bool isActive)
		{
		}

		[Token(Token = "0x6001D59")]
		[Address(RVA = "0x1076170", Offset = "0x1076170", VA = "0x1076170")]
		private void SetTextForNotEnoughCurrencyPopups(int price, bool isPremium)
		{
		}

		[Token(Token = "0x6001D5A")]
		[Address(RVA = "0x1076460", Offset = "0x1076460", VA = "0x1076460")]
		private CoinItem FindAppropriateCoinItemForCost(int price, bool findCredPack)
		{
			return null;
		}

		[Token(Token = "0x6001D5B")]
		[Address(RVA = "0x1076588", Offset = "0x1076588", VA = "0x1076588")]
		private void NotEnoughCredBuyButton()
		{
		}

		[Token(Token = "0x6001D5C")]
		[Address(RVA = "0x10765B0", Offset = "0x10765B0", VA = "0x10765B0")]
		private void CloseNotEnoughCredPopup()
		{
		}

		[Token(Token = "0x6001D5D")]
		[Address(RVA = "0x10765D0", Offset = "0x10765D0", VA = "0x10765D0")]
		private void BuyBlastsButton()
		{
		}

		[Token(Token = "0x6001D5E")]
		[Address(RVA = "0x1076610", Offset = "0x1076610", VA = "0x1076610")]
		private void NotEnoughBlastsBuyButton()
		{
		}
	}
	[Token(Token = "0x200067D")]
	public class ShopPurchasePopupReference : MonoBehaviour
	{
		[Token(Token = "0x4002B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4002B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator animator;

		[Token(Token = "0x4002B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CoinItemIconReference coinItemIconReference;

		[Token(Token = "0x4002B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IgnisButton buyButton;

		[Token(Token = "0x4002B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IgnisButton cancelButton;

		[Token(Token = "0x4002B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TMP_Text currencyNeededText;

		[Token(Token = "0x4002B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TMP_Text currentCurrencyText;

		[Token(Token = "0x6001D74")]
		[Address(RVA = "0x1076910", Offset = "0x1076910", VA = "0x1076910")]
		public ShopPurchasePopupReference()
		{
		}
	}
	[Token(Token = "0x200067E")]
	public class SideViewData
	{
		[Token(Token = "0x4002B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isInSideView;

		[Token(Token = "0x6001D75")]
		[Address(RVA = "0x1076918", Offset = "0x1076918", VA = "0x1076918")]
		public SideViewData()
		{
		}
	}
	[Token(Token = "0x200067F")]
	public class SideViewHandler : ITickable
	{
		[Token(Token = "0x4002B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly SideViewData sideViewData;

		[Token(Token = "0x4002B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MenuStateSettings menuStateSettings;

		[Token(Token = "0x4002B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly InputData inputData;

		[Token(Token = "0x4002B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CharacterData characterData;

		[Token(Token = "0x4002B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PlayerReferences localPlayerReference;

		[Token(Token = "0x4002B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly CameraReference cameraReference;

		[Token(Token = "0x4002B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly Transform playerSideViewOrigin;

		[Token(Token = "0x4002B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly Quaternion defaultSideViewRotation;

		[Token(Token = "0x4002B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SideViewReference sideViewReference;

		[Token(Token = "0x4002B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isShowingReference;

		[Token(Token = "0x6001D76")]
		[Address(RVA = "0x1076920", Offset = "0x1076920", VA = "0x1076920")]
		public SideViewHandler(SideViewData sideViewData, MenuStateData menuStateData, MenuStateSettings menuStateSettings, InputData inputData, CharacterData characterData, PlayerReferences localPlayerReference, CameraReference cameraReference, Transform playerSideViewOrigin)
		{
		}

		[Token(Token = "0x6001D77")]
		[Address(RVA = "0x10769A4", Offset = "0x10769A4", VA = "0x10769A4")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001D78")]
		[Address(RVA = "0x10769A8", Offset = "0x10769A8", VA = "0x10769A8")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001D79")]
		[Address(RVA = "0x10769AC", Offset = "0x10769AC", VA = "0x10769AC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001D7A")]
		[Address(RVA = "0x1076ADC", Offset = "0x1076ADC", VA = "0x1076ADC")]
		private void SetSideViewActive(bool isSideView)
		{
		}

		[Token(Token = "0x6001D7B")]
		[Address(RVA = "0x1076B14", Offset = "0x1076B14", VA = "0x1076B14")]
		private void SetHeadVisibility(bool isVisible)
		{
		}

		[Token(Token = "0x6001D7C")]
		[Address(RVA = "0x1076BBC", Offset = "0x1076BBC", VA = "0x1076BBC")]
		private void SetCameraToSideView()
		{
		}

		[Token(Token = "0x6001D7D")]
		[Address(RVA = "0x1076DC8", Offset = "0x1076DC8", VA = "0x1076DC8")]
		private Quaternion GetCameraRotationOffset()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001D7E")]
		[Address(RVA = "0x1076CA0", Offset = "0x1076CA0", VA = "0x1076CA0")]
		private void ResetCameraView()
		{
		}

		[Token(Token = "0x6001D7F")]
		[Address(RVA = "0x1076A64", Offset = "0x1076A64", VA = "0x1076A64")]
		private void SetHintButtonLocalization()
		{
		}
	}
	[Token(Token = "0x2000680")]
	public class SideViewReference : MonoBehaviour
	{
		[Token(Token = "0x4002B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LocalizedText localizedText;

		[Token(Token = "0x4002B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Canvas canvas;

		[Token(Token = "0x6001D80")]
		[Address(RVA = "0x1076E2C", Offset = "0x1076E2C", VA = "0x1076E2C")]
		public SideViewReference()
		{
		}
	}
	[Token(Token = "0x2000681")]
	[CreateAssetMenu(fileName = "AttachmentsItemSettings", menuName = "Settings/Customization/AttachmentsItemSettings")]
	public class AttachmentsItemSettings : ScriptableObject
	{
		[Token(Token = "0x4002B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ToolDefinitionSettings toolDefinitionSettings;

		[Token(Token = "0x4002B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IconSpriteStateSettings iconSpriteStateSettings;

		[Token(Token = "0x4002B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Current tools that have attachments")]
		public ToolAttachmentSet[] toolAttachmentSets;

		[Token(Token = "0x6001D81")]
		[Address(RVA = "0x1076E34", Offset = "0x1076E34", VA = "0x1076E34")]
		public AttachmentsItemSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000682")]
	public class ToolAttachmentSet
	{
		[Token(Token = "0x4002B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		[SerializeField]
		private string name;

		[Token(Token = "0x4002B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ToolName toolName;

		[Token(Token = "0x4002B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AttachmentItem[] attachmentItem;

		[Token(Token = "0x6001D82")]
		[Address(RVA = "0x1076E8C", Offset = "0x1076E8C", VA = "0x1076E8C")]
		public ToolAttachmentSet()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000683")]
	public class AttachmentItem : Item
	{
		[Token(Token = "0x4002B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ToolConfigurationType toolConfigurationType;

		[Token(Token = "0x6001D83")]
		[Address(RVA = "0x1076E94", Offset = "0x1076E94", VA = "0x1076E94")]
		public AttachmentItem()
		{
		}
	}
	[Token(Token = "0x2000684")]
	public class DeckViewReference : MonoBehaviour
	{
		[Token(Token = "0x4002B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform rectTransform;

		[Token(Token = "0x4002B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI deckHeader;

		[Token(Token = "0x4002B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<ToolIconReference> deckSlots;

		[Token(Token = "0x4002B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ToolIconReference currentToolToChange;

		[Token(Token = "0x4002B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Canvas canvas;

		[Token(Token = "0x6001D84")]
		[Address(RVA = "0x1076E9C", Offset = "0x1076E9C", VA = "0x1076E9C")]
		public DeckViewReference()
		{
		}
	}
	[Token(Token = "0x2000685")]
	public class ToolAttachmentChallengeReference : MonoBehaviour
	{
		[Token(Token = "0x4002B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform progressContainer;

		[Token(Token = "0x4002B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RectTransform hiddenChallengeContainer;

		[Token(Token = "0x4002B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image icon;

		[Token(Token = "0x4002B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material barBlueMaterial;

		[Token(Token = "0x4002B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material barGreenMaterial;

		[Token(Token = "0x4002B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public LocalizedText challengeTitle;

		[Token(Token = "0x4002B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LocalizedText challengeDescription;

		[Token(Token = "0x4002B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Image progressBar;

		[Token(Token = "0x4002B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LocalizedText progressText;

		[Token(Token = "0x4002B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Animator animator;

		[Token(Token = "0x17000116")]
		public string MissionId
		{
			[Token(Token = "0x6001D85")]
			[Address(RVA = "0x1076EA4", Offset = "0x1076EA4", VA = "0x1076EA4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D86")]
			[Address(RVA = "0x1076EAC", Offset = "0x1076EAC", VA = "0x1076EAC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001D87")]
		[Address(RVA = "0x1076EB4", Offset = "0x1076EB4", VA = "0x1076EB4")]
		public ToolAttachmentChallengeReference()
		{
		}
	}
	[Token(Token = "0x2000686")]
	public class ToolAttributeReference : MonoBehaviour
	{
		[Token(Token = "0x4002B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform rectTransform;

		[Token(Token = "0x4002B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocalizedText attributeNameLocalized;

		[Token(Token = "0x4002B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LocalizedText attributeValueLocalized;

		[Token(Token = "0x6001D88")]
		[Address(RVA = "0x1076EBC", Offset = "0x1076EBC", VA = "0x1076EBC")]
		public ToolAttributeReference()
		{
		}
	}
	[Token(Token = "0x2000687")]
	[CreateAssetMenu(fileName = "ToolCustomizationSettings", menuName = "Settings/Customization/ToolCustomizationSettings")]
	public class ToolCustomizationSettings : ScriptableObject
	{
		[Token(Token = "0x4002B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ToolCustomizationItem[] toolItems;

		[Token(Token = "0x6001D89")]
		[Address(RVA = "0x1076EC4", Offset = "0x1076EC4", VA = "0x1076EC4")]
		public ToolCustomizationSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000688")]
	public class ToolCustomizationItem : Item
	{
		[Token(Token = "0x4002B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ToolName toolType;

		[Token(Token = "0x4002B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Mesh spawnReference;

		[Token(Token = "0x4002B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool isDefaultSkin;

		[Token(Token = "0x4002B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		[Tooltip("The last material index will be used for a case with more meshes than Materials")]
		public bool isSkinAPrefab;

		[Token(Token = "0x4002B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject skinPrefab;

		[Token(Token = "0x4002B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Material[] materials;

		[Token(Token = "0x4002B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Mesh[] meshes;

		[Token(Token = "0x6001D8A")]
		[Address(RVA = "0x1076ECC", Offset = "0x1076ECC", VA = "0x1076ECC")]
		public ToolCustomizationItem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000689")]
	public class ToolIconSettings
	{
		[Token(Token = "0x4002B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float maxEnergy;

		[Token(Token = "0x6001D8B")]
		[Address(RVA = "0x1076ED4", Offset = "0x1076ED4", VA = "0x1076ED4")]
		public ToolIconSettings()
		{
		}
	}
	[Token(Token = "0x200068A")]
	public class ToolIconReference : MonoBehaviour
	{
		[Token(Token = "0x4002B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemIconReference itemIconReference;

		[Token(Token = "0x4002B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject energyImage;

		[Token(Token = "0x4002B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI energyCostText;

		[Token(Token = "0x4002B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Image energyImageToFill;

		[Token(Token = "0x6001D8C")]
		[Address(RVA = "0x1076EE4", Offset = "0x1076EE4", VA = "0x1076EE4")]
		public void ApplyItem(Item item, bool showLock, string lockCondition, bool showPrice, bool showLoadingIcon, float energy, float maxEnergy, ItemOwnership ownership, bool isTracked = false, bool isMastered = false)
		{
		}

		[Token(Token = "0x6001D8D")]
		[Address(RVA = "0x107707C", Offset = "0x107707C", VA = "0x107707C")]
		public void SetEnergy(float energy, float maxEnergy)
		{
		}

		[Token(Token = "0x6001D8E")]
		[Address(RVA = "0x10770F4", Offset = "0x10770F4", VA = "0x10770F4")]
		public ToolIconReference()
		{
		}
	}
	[Token(Token = "0x200068B")]
	public class ToolInformationReference : MonoBehaviour
	{
		[Token(Token = "0x4002B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas[] canvas;

		[Token(Token = "0x4002B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Tool Information")]
		public TextMeshProUGUI toolName;

		[Token(Token = "0x4002B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ItemIconReference toolIcon;

		[Token(Token = "0x4002B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI toolDescription;

		[Token(Token = "0x4002B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject lockedImage;

		[Token(Token = "0x4002B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI lockedText;

		[Token(Token = "0x4002B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject toolStatsHolder;

		[Token(Token = "0x4002B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject weaponInfoHolder;

		[Token(Token = "0x4002B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject noToolSelected;

		[Token(Token = "0x4002B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Skin Selection")]
		public RectMask2D rectMask2D;

		[Token(Token = "0x4002B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public CharacterSkinViewReference characterSkinViewReference;

		[Token(Token = "0x4002B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LocalizedText skinsOwnedNumber;

		[Token(Token = "0x4002B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Attributes")]
		public ToolAttributeReference spawnCostAttribute;

		[Token(Token = "0x4002B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public ToolAttributeReference ammoAttribute;

		[Token(Token = "0x4002B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public ToolAttributeReference cooldownAttribute;

		[Token(Token = "0x4002B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IgnisScrollRect scrollRect;

		[Token(Token = "0x4002B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public ToolInformationCategoryReference toolInformationCategoryReference;

		[Token(Token = "0x4002B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Attachments")]
		public GameObject attachmentsHolder;

		[Token(Token = "0x4002B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public ItemIconReference[] attachmentsIcons;

		[Token(Token = "0x4002B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public LocalizedText attachmentDescription;

		[Token(Token = "0x4002B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public LocalizedText attachmentsOwnedNumber;

		[Token(Token = "0x4002B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public BuyButtonReference interractionButton;

		[Token(Token = "0x4002B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Tweaks")]
		public Transform scrollBuffer;

		[Token(Token = "0x6001D8F")]
		[Address(RVA = "0x10770FC", Offset = "0x10770FC", VA = "0x10770FC")]
		public ToolInformationReference()
		{
		}
	}
	[Token(Token = "0x200068C")]
	public enum ToolInformationCategory
	{
		[Token(Token = "0x4002B64")]
		Projectile,
		[Token(Token = "0x4002B65")]
		Defence,
		[Token(Token = "0x4002B66")]
		Dot,
		[Token(Token = "0x4002B67")]
		Laser,
		[Token(Token = "0x4002B68")]
		Orb,
		[Token(Token = "0x4002B69")]
		Grenade,
		[Token(Token = "0x4002B6A")]
		LaserGrenade,
		[Token(Token = "0x4002B6B")]
		DotGrenade,
		[Token(Token = "0x4002B6C")]
		Tether,
		[Token(Token = "0x4002B6D")]
		Throw
	}
	[Token(Token = "0x200068D")]
	public enum ToolAttribute
	{
		[Token(Token = "0x4002B6F")]
		PlayerDamage,
		[Token(Token = "0x4002B70")]
		DamagePerSecond,
		[Token(Token = "0x4002B71")]
		ProjectileDamage,
		[Token(Token = "0x4002B72")]
		HitPoint,
		[Token(Token = "0x4002B73")]
		Duration,
		[Token(Token = "0x4002B74")]
		Speed,
		[Token(Token = "0x4002B75")]
		NumProjectileSpawned,
		[Token(Token = "0x4002B76")]
		TimeUntilActive,
		[Token(Token = "0x4002B77")]
		Size,
		[Token(Token = "0x4002B78")]
		Radius,
		[Token(Token = "0x4002B79")]
		Cooldown,
		[Token(Token = "0x4002B7A")]
		RoundsInTool,
		[Token(Token = "0x4002B7B")]
		Hide,
		[Token(Token = "0x4002B7C")]
		Fuse,
		[Token(Token = "0x4002B7D")]
		TetherHoldDuration,
		[Token(Token = "0x4002B7E")]
		TetherDistBeforeBreak,
		[Token(Token = "0x4002B7F")]
		TetherSpeedBoost,
		[Token(Token = "0x4002B80")]
		ThrowDamage,
		[Token(Token = "0x4002B81")]
		ThrowCollision,
		[Token(Token = "0x4002B82")]
		ThrowHp,
		[Token(Token = "0x4002B83")]
		SpawnCost
	}
	[Serializable]
	[Token(Token = "0x200068E")]
	public struct ToolInformationCategoryDefinition
	{
		[Token(Token = "0x4002B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ToolInformationCategory category;

		[Token(Token = "0x4002B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ToolAttribute[] attributes;
	}
	[Serializable]
	[Token(Token = "0x200068F")]
	public class ToolInformationSettings
	{
		[Token(Token = "0x4002B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ToolInformationCategoryDefinition[] toolInformationCategories;

		[Token(Token = "0x4002B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly HashSet<ToolAttribute> stringBasedAttributes;

		[Token(Token = "0x6001D90")]
		[Address(RVA = "0x1077104", Offset = "0x1077104", VA = "0x1077104")]
		public ToolInformationSettings()
		{
		}
	}
	[Token(Token = "0x2000690")]
	public class ToolInformationViewHandler : ITickable
	{
		[Token(Token = "0x4002B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ToolViewData toolViewData;

		[Token(Token = "0x4002B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly FactoryData factoryData;

		[Token(Token = "0x4002B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DeckData deckData;

		[Token(Token = "0x4002B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ToolInformationReference toolInformationReference;

		[Token(Token = "0x4002B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Locale locale;

		[Token(Token = "0x4002B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ToolCustomizationItem currentShownItem;

		[Token(Token = "0x4002B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool showingToolView;

		[Token(Token = "0x4002B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MenuStateData menuStateData;

		[Token(Token = "0x4002B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ToolInformationSettings toolInformationSettings;

		[Token(Token = "0x4002B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly ToolSkinViewData toolSkinViewData;

		[Token(Token = "0x4002B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly ToolAttachmentsData toolAttachmentsData;

		[Token(Token = "0x4002B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly ToolDefinitionSettings toolDefinitionSettings;

		[Token(Token = "0x6001D91")]
		[Address(RVA = "0x10771E4", Offset = "0x10771E4", VA = "0x10771E4")]
		public ToolInformationViewHandler(ToolViewData toolViewData, FactoryData factoryData, DeckData deckData, MenuStateData menuStateData, ToolInformationSettings toolInformationSettings, ToolSkinViewData toolSkinViewData, ToolAttachmentsData toolAttachmentsData, ToolDefinitionSettings toolDefinitionSettings)
		{
		}

		[Token(Token = "0x6001D92")]
		[Address(RVA = "0x1077290", Offset = "0x1077290", VA = "0x1077290")]
		public void Initialize(ToolInformationReference toolInfoReference)
		{
		}

		[Token(Token = "0x6001D93")]
		[Address(RVA = "0x1077300", Offset = "0x1077300", VA = "0x1077300")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001D94")]
		[Address(RVA = "0x10772A0", Offset = "0x10772A0", VA = "0x10772A0")]
		private void SetViewActive(bool active)
		{
		}

		[Token(Token = "0x6001D95")]
		[Address(RVA = "0x1077308", Offset = "0x1077308", VA = "0x1077308", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001D96")]
		[Address(RVA = "0x107746C", Offset = "0x107746C", VA = "0x107746C")]
		private void ShowToolInformation(ToolCustomizationItem toolSkin)
		{
		}

		[Token(Token = "0x6001D97")]
		[Address(RVA = "0x1077A58", Offset = "0x1077A58", VA = "0x1077A58")]
		private void ShowExtendedCategories(ToolSetting toolSetting, string[] attributes)
		{
		}

		[Token(Token = "0x6001D98")]
		[Address(RVA = "0x1077940", Offset = "0x1077940", VA = "0x1077940")]
		private void SetAttributeAndName(ToolAttributeReference attributeReferences, ToolAttribute toolAttributes, string[] attributeTexts)
		{
		}

		[Token(Token = "0x6001D99")]
		[Address(RVA = "0x1077DA0", Offset = "0x1077DA0", VA = "0x1077DA0")]
		private void SetAttributeValue(ToolAttributeReference reference, ToolAttribute toolAttribute, string value)
		{
		}
	}
	[Token(Token = "0x2000692")]
	[CreateAssetMenu(fileName = "ToolMenuSettings", menuName = "Settings/Tools/ToolMenuSettings", order = 1)]
	public class ToolMenuSettings : ScriptableObject
	{
		[Token(Token = "0x4002B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ToolViewReference toolViewReference;

		[Token(Token = "0x4002B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ToolViewSettings toolViewSettings;

		[Token(Token = "0x4002B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ToolInformationSettings toolInformationSettings;

		[Token(Token = "0x4002B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ToolSkinViewSettings toolSkinViewSettings;

		[Token(Token = "0x4002B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ParticleSystem claimGlowEffectReference;

		[Token(Token = "0x4002B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Attachments")]
		public AttachmentsItemSettings attachmentsItemSettings;

		[Token(Token = "0x4002B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IconSpriteStateSettings attachemntsIconSpriteStateSettings;

		[Token(Token = "0x4002B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEngine.Sprite comingSoonSprite;

		[Token(Token = "0x6001D9C")]
		[Address(RVA = "0x1077EA8", Offset = "0x1077EA8", VA = "0x1077EA8")]
		public ToolMenuSettings()
		{
		}
	}
	[Token(Token = "0x2000693")]
	public class ToolSelectionViewHandler : ITickable
	{
		[Token(Token = "0x4002B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ToolViewData toolViewData;

		[Token(Token = "0x4002BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DeckData deckData;

		[Token(Token = "0x4002BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Camera camera;

		[Token(Token = "0x4002BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PointerData pointerData;

		[Token(Token = "0x4002BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly InputData inputData;

		[Token(Token = "0x4002BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly DeckBuilderHandler deckBuilderHandler;

		[Token(Token = "0x4002BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly Dictionary<ToolName, ToolSetting> toolSettings;

		[Token(Token = "0x4002BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ToolIconSettings toolIconSettings;

		[Token(Token = "0x4002BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x4002BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly ToolAttachmentsData toolAttachmentsData;

		[Token(Token = "0x4002BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private DeckViewReference deckViewReference;

		[Token(Token = "0x4002BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool showingToolView;

		[Token(Token = "0x4002BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool showingToolSelection;

		[Token(Token = "0x6001D9D")]
		[Address(RVA = "0x1077EB0", Offset = "0x1077EB0", VA = "0x1077EB0")]
		public ToolSelectionViewHandler(MenuStateData menuStateData, ToolViewData toolViewData, DeckData deckData, Camera camera, PointerData pointerData, InputData inputData, DeckBuilderHandler deckBuilderHandler, Dictionary<ToolName, ToolSetting> toolSettings, ToolIconSettings toolIconSettings, CustomizationData customizationData, ToolAttachmentsData toolAttachmentsData)
		{
		}

		[Token(Token = "0x6001D9E")]
		[Address(RVA = "0x1077F3C", Offset = "0x1077F3C", VA = "0x1077F3C")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001D9F")]
		[Address(RVA = "0x10780EC", Offset = "0x10780EC", VA = "0x10780EC")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001DA0")]
		[Address(RVA = "0x1078118", Offset = "0x1078118", VA = "0x1078118", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001DA1")]
		[Address(RVA = "0x1078220", Offset = "0x1078220", VA = "0x1078220")]
		private void UpdateIcons()
		{
		}

		[Token(Token = "0x6001DA2")]
		[Address(RVA = "0x107833C", Offset = "0x107833C", VA = "0x107833C")]
		private bool IsPointerInsideToolSelection()
		{
			return default(bool);
		}

		[Token(Token = "0x6001DA3")]
		[Address(RVA = "0x10785FC", Offset = "0x10785FC", VA = "0x10785FC")]
		private void AddToolToDeck(int slotId)
		{
		}

		[Token(Token = "0x6001DA4")]
		[Address(RVA = "0x1078494", Offset = "0x1078494", VA = "0x1078494")]
		private void UpdateIconReference(ToolIconReference icon, ToolName toolName)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000695")]
	public class ToolSkinViewSettings
	{
		[Token(Token = "0x4002BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ItemGridSetting itemGridSetting;

		[Token(Token = "0x4002BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemIconReference itemIconReference;

		[Token(Token = "0x4002BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string swapItemLocalizationId;

		[Token(Token = "0x4002BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string buyItemLocalizationId;

		[Token(Token = "0x4002BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string numericOwnedLocalizationId;

		[Token(Token = "0x4002BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public CharacterSkinViewReference viewReference;

		[Token(Token = "0x4002BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IconSpriteStateSettings defaultIconSpriteStates;

		[Token(Token = "0x6001DA7")]
		[Address(RVA = "0x1078728", Offset = "0x1078728", VA = "0x1078728")]
		public ToolSkinViewSettings()
		{
		}
	}
	[Token(Token = "0x2000696")]
	public class ToolSkinViewData
	{
		[Token(Token = "0x4002BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ToolCustomizationItem selectedSkinItem;

		[Token(Token = "0x6001DA8")]
		[Address(RVA = "0x1078730", Offset = "0x1078730", VA = "0x1078730")]
		public ToolSkinViewData()
		{
		}
	}
	[Token(Token = "0x2000697")]
	public class ToolSkinViewHandler : ITickable
	{
		[Token(Token = "0x4002BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ToolCustomizationSettings itemSettings;

		[Token(Token = "0x4002BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ToolSkinViewSettings viewSettings;

		[Token(Token = "0x4002BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x4002BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ItemGridViewHandlerData itemGridViewHandlerData;

		[Token(Token = "0x4002BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ShopData shopData;

		[Token(Token = "0x4002BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ToolViewData toolViewData;

		[Token(Token = "0x4002BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly DeckData deckData;

		[Token(Token = "0x4002BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ToolSkinViewData toolSkinViewData;

		[Token(Token = "0x4002BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly ToolAttachmentsData toolAttachmentsData;

		[Token(Token = "0x4002BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly ItemGridData itemGridData;

		[Token(Token = "0x4002BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CharacterSkinViewReference skinViewReference;

		[Token(Token = "0x4002BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool showingView;

		[Token(Token = "0x4002BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private ToolName selectedTool;

		[Token(Token = "0x4002BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int selectedSkinIndex;

		[Token(Token = "0x4002BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<ToolCustomizationItem> availableSkins;

		[Token(Token = "0x4002BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Locale locale;

		[Token(Token = "0x4002BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private double lastDeckUpdateTimeStamp;

		[Token(Token = "0x4002BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastSeenOwnershipUpdateTimeStamp;

		[Token(Token = "0x6001DA9")]
		[Address(RVA = "0x1078738", Offset = "0x1078738", VA = "0x1078738")]
		public ToolSkinViewHandler(ToolCustomizationSettings itemSettings, ToolSkinViewSettings viewSettings, MenuStateData menuStateData, CustomizationData customizationData, ItemGridViewHandlerData itemGridViewHandlerData, ShopData shopData, ToolViewData toolViewData, DeckData deckData, ToolSkinViewData toolSkinViewData, ToolAttachmentsData toolAttachmentsData)
		{
		}

		[Token(Token = "0x6001DAA")]
		[Address(RVA = "0x1078A30", Offset = "0x1078A30", VA = "0x1078A30")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001DAB")]
		[Address(RVA = "0x1078D30", Offset = "0x1078D30", VA = "0x1078D30")]
		public void LoadDone()
		{
		}

		[Token(Token = "0x6001DAC")]
		[Address(RVA = "0x1078D08", Offset = "0x1078D08", VA = "0x1078D08")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001DAD")]
		[Address(RVA = "0x1078D38", Offset = "0x1078D38", VA = "0x1078D38", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001DAE")]
		[Address(RVA = "0x1079688", Offset = "0x1079688", VA = "0x1079688")]
		private void UpdateSelectedSkinsInDeckLoadOut()
		{
		}

		[Token(Token = "0x6001DAF")]
		[Address(RVA = "0x10797F8", Offset = "0x10797F8", VA = "0x10797F8")]
		private void UpdateSkinsInDeckLoadOut()
		{
		}

		[Token(Token = "0x6001DB0")]
		[Address(RVA = "0x1078F80", Offset = "0x1078F80", VA = "0x1078F80")]
		private void UpdateAvailableSkins(ToolName toolName)
		{
		}

		[Token(Token = "0x6001DB1")]
		[Address(RVA = "0x1079A40", Offset = "0x1079A40", VA = "0x1079A40")]
		private void UpdateIcons()
		{
		}

		[Token(Token = "0x6001DB2")]
		[Address(RVA = "0x1079CB8", Offset = "0x1079CB8", VA = "0x1079CB8")]
		private void UpdateSkinCounter(int counter)
		{
		}

		[Token(Token = "0x6001DB3")]
		[Address(RVA = "0x1079288", Offset = "0x1079288", VA = "0x1079288")]
		private void UpdateInteractionButton()
		{
		}

		[Token(Token = "0x6001DB4")]
		[Address(RVA = "0x1079E50", Offset = "0x1079E50", VA = "0x1079E50")]
		private void HandleButtonInteraction()
		{
		}

		[Token(Token = "0x6001DB5")]
		[Address(RVA = "0x1079B84", Offset = "0x1079B84", VA = "0x1079B84")]
		private void UpdateIconReference(ItemIconReference icon, ToolCustomizationItem item, ItemOwnership ownership)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000699")]
	public class ToolViewSettings
	{
		[Token(Token = "0x4002BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ToolIconReference toolIconReference;

		[Token(Token = "0x4002BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemGridSetting itemGridSetting;

		[Token(Token = "0x4002BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IconSpriteStateSettings unusedItemSprites;

		[Token(Token = "0x4002BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Sprite isTrackingIcon;

		[Token(Token = "0x4002BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Sprite isMasteredIcon;

		[Token(Token = "0x4002BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Generic Strings")]
		public string swapToolLocalizationId;

		[Token(Token = "0x4002BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string unlockToolLocalizationId;

		[Token(Token = "0x4002BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string masteryLocalizationId;

		[Token(Token = "0x4002BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string trackingLocalizationId;

		[Token(Token = "0x4002BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string masteredLocalizationId;

		[Token(Token = "0x4002BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Left Tab Weapon Info strings")]
		public string leftTabOnlyOne;

		[Token(Token = "0x4002BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string leftTabChallComplete;

		[Token(Token = "0x4002BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string leftTabAttUnlocked;

		[Token(Token = "0x4002BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string leftTabMustEquip;

		[Token(Token = "0x4002BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string leftTabTrackingNow;

		[Token(Token = "0x4002BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("COLOURS")]
		public string pink;

		[Token(Token = "0x4002BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string yellow;

		[Token(Token = "0x4002BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string white;

		[Token(Token = "0x4002BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("List Weapon Levels")]
		public int level_0;

		[Token(Token = "0x4002BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public int level_1;

		[Token(Token = "0x4002BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int level_2;

		[Token(Token = "0x4002BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public int level_3;

		[Token(Token = "0x6001DB9")]
		[Address(RVA = "0x107A040", Offset = "0x107A040", VA = "0x107A040")]
		public ToolViewSettings()
		{
		}
	}
	[Token(Token = "0x200069A")]
	public class ToolViewData
	{
		[Token(Token = "0x4002BE1")]
		public const string toolTracking = "0";

		[Token(Token = "0x4002BE2")]
		public const string attachmentTracking = "1";

		[Token(Token = "0x4002BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly List<int> skinSelectedForLoadOut;

		[Token(Token = "0x4002BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ToolViewReference toolViewReference;

		[Token(Token = "0x4002BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ToolSet toolSet;

		[Token(Token = "0x4002BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool shouldShowToolSelection;

		[Token(Token = "0x4002BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ItemGridData itemGridData;

		[Token(Token = "0x4002BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool isModified;

		[Token(Token = "0x4002BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform scrollBuffer;

		[Token(Token = "0x6001DBA")]
		[Address(RVA = "0x107A0D0", Offset = "0x107A0D0", VA = "0x107A0D0")]
		public ToolViewData()
		{
		}
	}
	[Token(Token = "0x200069B")]
	public class ToolViewHandler : ITickable, ILateTickable
	{
		[Token(Token = "0x200069C")]
		private struct ToolSelection
		{
			[Token(Token = "0x4002C15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly ToolSetting setting;

			[Token(Token = "0x4002C16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly ToolName toolName;

			[Token(Token = "0x6001DF1")]
			[Address(RVA = "0x107AAD8", Offset = "0x107AAD8", VA = "0x107AAD8")]
			public ToolSelection(ToolSetting setting, ToolName toolName)
			{
			}
		}

		[Token(Token = "0x200069E")]
		[CompilerGenerated]
		private sealed class <PlayEffectOnResult>d__70 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002C1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002C1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002C1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ToolViewHandler <>4__this;

			[Token(Token = "0x4002C1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ToolName toolName;

			[Token(Token = "0x4002C1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ParticleSystem particleSystem;

			[Token(Token = "0x4002C1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private ItemOwnership <toolOwnership>5__2;

			[Token(Token = "0x17000117")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001DF9")]
				[Address(RVA = "0x1080C3C", Offset = "0x1080C3C", VA = "0x1080C3C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000118")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DFB")]
				[Address(RVA = "0x1080C84", Offset = "0x1080C84", VA = "0x1080C84", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DF6")]
			[Address(RVA = "0x107DC90", Offset = "0x107DC90", VA = "0x107DC90")]
			[DebuggerHidden]
			public <PlayEffectOnResult>d__70(int <>1__state)
			{
			}

			[Token(Token = "0x6001DF7")]
			[Address(RVA = "0x1080AA0", Offset = "0x1080AA0", VA = "0x1080AA0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DF8")]
			[Address(RVA = "0x1080AA4", Offset = "0x1080AA4", VA = "0x1080AA4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DFA")]
			[Address(RVA = "0x1080C44", Offset = "0x1080C44", VA = "0x1080C44", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ToolMenuSettings toolMenuSettings;

		[Token(Token = "0x4002BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ToolViewSettings toolViewSettings;

		[Token(Token = "0x4002BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Dictionary<ToolName, ToolSetting> toolSettingLookUp;

		[Token(Token = "0x4002BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly DeckData deckData;

		[Token(Token = "0x4002BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ToolViewData toolViewData;

		[Token(Token = "0x4002BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ItemGridViewHandlerData itemGridViewHandlerData;

		[Token(Token = "0x4002BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ToolIconSettings toolIconSettings;

		[Token(Token = "0x4002BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ShopData shopData;

		[Token(Token = "0x4002BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x4002BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly PlayerInfoPanelData playerInfoPanelData;

		[Token(Token = "0x4002BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x4002BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly List<ToolSelection> deckTools;

		[Token(Token = "0x4002BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly List<ToolSelection> ownedTools;

		[Token(Token = "0x4002BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly List<ToolSelection> availabeToTrackTools;

		[Token(Token = "0x4002BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly List<ToolSelection> lockedTools;

		[Token(Token = "0x4002BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly ToolName[] toolLookUp;

		[Token(Token = "0x4002BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly Dictionary<ToolName, int> toolToId;

		[Token(Token = "0x4002BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly ToolAttachmentsData toolAttachmentsData;

		[Token(Token = "0x4002BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly ToolMasteryData toolMasteryData;

		[Token(Token = "0x4002BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly MissionSettings missionSettings;

		[Token(Token = "0x4002BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4002C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly SoundTriggersList soundTriggersList;

		[Token(Token = "0x4002C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private ToolViewReference toolViewReference;

		[Token(Token = "0x4002C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool showingViewHandler;

		[Token(Token = "0x4002C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		private bool showingToolSelection;

		[Token(Token = "0x4002C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly List<ToolIconReference> availableIcons;

		[Token(Token = "0x4002C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly List<AttachementToolIconReference> attachementToolIconReferences;

		[Token(Token = "0x4002C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private readonly List<ToolMasteryMissionProgress> trackedMissionsForTool;

		[Token(Token = "0x4002C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private readonly int[] numToolsInGroup;

		[Token(Token = "0x4002C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private int selectedIndex;

		[Token(Token = "0x4002C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private bool hasModifiedViewThisFrame;

		[Token(Token = "0x4002C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Locale locale;

		[Token(Token = "0x4002C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private BuyToolRequest currentBuyToolRequest;

		[Token(Token = "0x4002C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private bool checkForExpectedReward;

		[Token(Token = "0x4002C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private ToolName toolToTriggerRewardFrom;

		[Token(Token = "0x4002C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float lastSeenOwnershipUpdateTimeStamp;

		[Token(Token = "0x4002C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private ItemIconReference[] attachmentsIcons;

		[Token(Token = "0x4002C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private bool trackingButtonWasPressed;

		[Token(Token = "0x4002C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private float currentTimeStamp;

		[Token(Token = "0x4002C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Queue<ToolName> checkToolUnlockStatusQueue;

		[Token(Token = "0x4002C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Queue<ToolSet> attachmentClaimeQueue;

		[Token(Token = "0x4002C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private ParticleSystem attachmentClaimVFX;

		[Token(Token = "0x6001DBB")]
		[Address(RVA = "0x107A180", Offset = "0x107A180", VA = "0x107A180")]
		public ToolViewHandler(MenuStateData menuStateData, ToolMenuSettings toolMenuSettings, Dictionary<ToolName, ToolSetting> toolSettingLookUp, DeckData deckData, ToolViewData toolViewData, ItemGridViewHandlerData itemGridViewHandlerData, ToolIconSettings toolIconSettings, ShopData shopData, PlayFabProgressionData playFabProgressionData, PlayerInfoPanelData playerInfoPanelData, CustomizationData customizationData, ToolAttachmentsData toolAttachmentsData, ToolMasteryData toolMasteryData, MissionSettings missionSettings, IgnisSoundTriggerData ignisSoundTriggerData, SoundTriggersList soundTriggersList)
		{
		}

		[Token(Token = "0x6001DBC")]
		[Address(RVA = "0x107A608", Offset = "0x107A608", VA = "0x107A608")]
		private void UpdateToolList()
		{
		}

		[Token(Token = "0x6001DBD")]
		[Address(RVA = "0x107AAE4", Offset = "0x107AAE4", VA = "0x107AAE4")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001DBE")]
		[Address(RVA = "0x107BD14", Offset = "0x107BD14", VA = "0x107BD14")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001DBF")]
		[Address(RVA = "0x107BD18", Offset = "0x107BD18", VA = "0x107BD18")]
		private void DebugTriggerToolExperienceRewardFromSlot()
		{
		}

		[Token(Token = "0x6001DC0")]
		[Address(RVA = "0x107BD8C", Offset = "0x107BD8C", VA = "0x107BD8C")]
		private void DebugTriggerToolExperienceReward()
		{
		}

		[Token(Token = "0x6001DC1")]
		[Address(RVA = "0x107BF04", Offset = "0x107BF04", VA = "0x107BF04")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001DC2")]
		[Address(RVA = "0x107AF84", Offset = "0x107AF84", VA = "0x107AF84")]
		private void SetViewActive(bool active)
		{
		}

		[Token(Token = "0x6001DC3")]
		[Address(RVA = "0x107BF0C", Offset = "0x107BF0C", VA = "0x107BF0C")]
		private void SetToolListActive(bool active)
		{
		}

		[Token(Token = "0x6001DC4")]
		[Address(RVA = "0x107BF34", Offset = "0x107BF34", VA = "0x107BF34")]
		private void HandleRewards()
		{
		}

		[Token(Token = "0x6001DC5")]
		[Address(RVA = "0x107B544", Offset = "0x107B544", VA = "0x107B544")]
		private void UpdateLoadOutSkins()
		{
		}

		[Token(Token = "0x6001DC6")]
		[Address(RVA = "0x107C120", Offset = "0x107C120", VA = "0x107C120", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001DC7")]
		[Address(RVA = "0x107CFF8", Offset = "0x107CFF8", VA = "0x107CFF8")]
		private void CheckClaimAttachmentVFX()
		{
		}

		[Token(Token = "0x6001DC8")]
		[Address(RVA = "0x107D57C", Offset = "0x107D57C", VA = "0x107D57C", Slot = "5")]
		public void LateTick()
		{
		}

		[Token(Token = "0x6001DC9")]
		[Address(RVA = "0x107CD3C", Offset = "0x107CD3C", VA = "0x107CD3C")]
		private void HandleShowingToolSelection()
		{
		}

		[Token(Token = "0x6001DCA")]
		[Address(RVA = "0x107CD88", Offset = "0x107CD88", VA = "0x107CD88")]
		private void HandleSelectedToolIndex()
		{
		}

		[Token(Token = "0x6001DCB")]
		[Address(RVA = "0x107CC64", Offset = "0x107CC64", VA = "0x107CC64")]
		private void HandleOutsideModificationOfDeck()
		{
		}

		[Token(Token = "0x6001DCC")]
		[Address(RVA = "0x107C9F8", Offset = "0x107C9F8", VA = "0x107C9F8")]
		private void UpdateBuyInteractionButton()
		{
		}

		[Token(Token = "0x6001DCD")]
		[Address(RVA = "0x107B29C", Offset = "0x107B29C", VA = "0x107B29C")]
		private void SortOwnedToolSelection()
		{
		}

		[Token(Token = "0x6001DCE")]
		[Address(RVA = "0x107B3C0", Offset = "0x107B3C0", VA = "0x107B3C0")]
		private void SortOtherToolSelection()
		{
		}

		[Token(Token = "0x6001DCF")]
		[Address(RVA = "0x107C564", Offset = "0x107C564", VA = "0x107C564")]
		private void UpdateSelections()
		{
		}

		[Token(Token = "0x6001DD0")]
		[Address(RVA = "0x107D604", Offset = "0x107D604", VA = "0x107D604")]
		private void SetAverageEnergyCost()
		{
		}

		[Token(Token = "0x6001DD1")]
		[Address(RVA = "0x107B07C", Offset = "0x107B07C", VA = "0x107B07C")]
		private void SetIcons(List<ToolSelection> toolSelections, int offset)
		{
		}

		[Token(Token = "0x6001DD2")]
		[Address(RVA = "0x107AFEC", Offset = "0x107AFEC", VA = "0x107AFEC")]
		private void UpdateToolPerGroupCount()
		{
		}

		[Token(Token = "0x6001DD3")]
		[Address(RVA = "0x107DAB4", Offset = "0x107DAB4", VA = "0x107DAB4")]
		private void StartToolSwap()
		{
		}

		[Token(Token = "0x6001DD4")]
		[Address(RVA = "0x107DB0C", Offset = "0x107DB0C", VA = "0x107DB0C")]
		private void BuyTool()
		{
		}

		[Token(Token = "0x6001DD5")]
		[Address(RVA = "0x107D4FC", Offset = "0x107D4FC", VA = "0x107D4FC")]
		[IteratorStateMachine(typeof(<PlayEffectOnResult>d__70))]
		private IEnumerator PlayEffectOnResult(ParticleSystem particleSystem, ToolName toolName)
		{
			return null;
		}

		[Token(Token = "0x6001DD6")]
		[Address(RVA = "0x107D768", Offset = "0x107D768", VA = "0x107D768")]
		private void UpdateIconReference(ToolIconReference icon, ToolName toolName, ItemOwnership ownerShipData)
		{
		}

		[Token(Token = "0x6001DD7")]
		[Address(RVA = "0x107D9A8", Offset = "0x107D9A8", VA = "0x107D9A8")]
		private void UpdateAttachmentsToolIcons(AttachementToolIconReference reference, ItemOwnership ownerShipData, ToolName toolName)
		{
		}

		[Token(Token = "0x6001DD8")]
		[Address(RVA = "0x107BA08", Offset = "0x107BA08", VA = "0x107BA08")]
		private void InitializeAttachmentsEquipingInfo()
		{
		}

		[Token(Token = "0x6001DD9")]
		[Address(RVA = "0x107DD5C", Offset = "0x107DD5C", VA = "0x107DD5C")]
		private void UpdateAttachmentsSelection(ToolAttachmentSet set, ToolConfigurationType equipedAttachment, bool forceOwnership = false)
		{
		}

		[Token(Token = "0x6001DDA")]
		[Address(RVA = "0x107E354", Offset = "0x107E354", VA = "0x107E354")]
		private void OnSelectAttachment(ItemIconReference itemIconReference)
		{
		}

		[Token(Token = "0x6001DDB")]
		[Address(RVA = "0x107E640", Offset = "0x107E640", VA = "0x107E640")]
		private void OnEquipAttachment(AttachmentItem attachment, bool alreadyEquipped)
		{
		}

		[Token(Token = "0x6001DDC")]
		[Address(RVA = "0x107D5A4", Offset = "0x107D5A4", VA = "0x107D5A4")]
		private ToolAttachmentSet GetToolAttachmentSet(ToolName toolName)
		{
			return null;
		}

		[Token(Token = "0x6001DDD")]
		[Address(RVA = "0x107E73C", Offset = "0x107E73C", VA = "0x107E73C")]
		private AttachmentItem GetAttachmentItem(ToolSet toolset)
		{
			return null;
		}

		[Token(Token = "0x6001DDE")]
		[Address(RVA = "0x107D488", Offset = "0x107D488", VA = "0x107D488")]
		private int GetAttachmentIndex(ToolSet toolset)
		{
			return default(int);
		}

		[Token(Token = "0x6001DDF")]
		[Address(RVA = "0x107E7B0", Offset = "0x107E7B0", VA = "0x107E7B0")]
		private ToolConfigurationType GetFirstUnlockedAttachment(ToolName toolName)
		{
			return default(ToolConfigurationType);
		}

		[Token(Token = "0x6001DE0")]
		[Address(RVA = "0x107B760", Offset = "0x107B760", VA = "0x107B760")]
		private void InitializeToolsTrackingInfo()
		{
		}

		[Token(Token = "0x6001DE1")]
		[Address(RVA = "0x107E864", Offset = "0x107E864", VA = "0x107E864")]
		private void OnUnlockWeaponPressed()
		{
		}

		[Token(Token = "0x6001DE2")]
		[Address(RVA = "0x107E868", Offset = "0x107E868", VA = "0x107E868")]
		private void OnTrackingButtonPressed()
		{
		}

		[Token(Token = "0x6001DE3")]
		[Address(RVA = "0x107C774", Offset = "0x107C774", VA = "0x107C774")]
		private void CheckToolForTracking(ToolName toolToTrack)
		{
		}

		[Token(Token = "0x6001DE4")]
		[Address(RVA = "0x107C5A8", Offset = "0x107C5A8", VA = "0x107C5A8")]
		private ToolName CheckForTrackingErrors(ToolName toolName)
		{
			return default(ToolName);
		}

		[Token(Token = "0x6001DE5")]
		[Address(RVA = "0x107D250", Offset = "0x107D250", VA = "0x107D250")]
		private void CheckToolUnlockStatus(ToolName toolName)
		{
		}

		[Token(Token = "0x6001DE6")]
		[Address(RVA = "0x107ED88", Offset = "0x107ED88", VA = "0x107ED88")]
		private void UpdateToolUnlockView(ToolName toolName)
		{
		}

		[Token(Token = "0x6001DE7")]
		[Address(RVA = "0x107FA54", Offset = "0x107FA54", VA = "0x107FA54")]
		private void UpdateTrackingViewInfo(ToolName toolName)
		{
		}

		[Token(Token = "0x6001DE8")]
		[Address(RVA = "0x107EE60", Offset = "0x107EE60", VA = "0x107EE60")]
		private void UpdateLeftTabWeaponInfo(ToolName toolName)
		{
		}

		[Token(Token = "0x6001DE9")]
		[Address(RVA = "0x107FDC4", Offset = "0x107FDC4", VA = "0x107FDC4")]
		private void SetChallengeStatus(bool toolChallengesActive, bool attachmentChallengesActive)
		{
		}

		[Token(Token = "0x6001DEA")]
		[Address(RVA = "0x1080554", Offset = "0x1080554", VA = "0x1080554")]
		private void UpdateChallenges(ToolAttachmentChallengeReference challRef, List<ToolMasteryMissionProgress> missionProgressList, int index)
		{
		}

		[Token(Token = "0x6001DEB")]
		[Address(RVA = "0x107DCB8", Offset = "0x107DCB8", VA = "0x107DCB8")]
		private bool CheckIfIsMastered(ToolName toolName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DEC")]
		[Address(RVA = "0x107EB34", Offset = "0x107EB34", VA = "0x107EB34")]
		private void ToggleLeftPanel(bool hasTool)
		{
		}
	}
	[Token(Token = "0x20006A4")]
	public class ToolViewReference : MonoBehaviour
	{
		[Token(Token = "0x4002C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4002C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Left Panel")]
		public LocalizedText leftMasteryText;

		[Token(Token = "0x4002C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI averageEnergyCost;

		[Token(Token = "0x4002C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Image averageEnergyFillImage;

		[Token(Token = "0x4002C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ItemIconReference leftPanelToolIcon;

		[Token(Token = "0x4002C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public LocalizedText leftPanelToolName;

		[Token(Token = "0x4002C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject weaponStatusHolder;

		[Token(Token = "0x4002C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LocalizedText trackingText;

		[Token(Token = "0x4002C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Image trackingIcon;

		[Token(Token = "0x4002C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public IgnisButton trackingButton;

		[Token(Token = "0x4002C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BuyButtonReference unlockButton;

		[Token(Token = "0x4002C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LocalizedText trackingComment;

		[Token(Token = "0x4002C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject noToolSelectedHolder;

		[Token(Token = "0x4002C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject toolInfoHolder;

		[Token(Token = "0x4002C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject challengesHolder;

		[Token(Token = "0x4002C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject noToolTrackedHolder;

		[Token(Token = "0x4002C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject cannotBeMasteredHolder;

		[Token(Token = "0x4002C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public ToolAttachmentChallengeReference[] toolChallRefs;

		[Token(Token = "0x4002C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public ToolAttachmentChallengeReference[] toolAttachmentsChallRefs;

		[Token(Token = "0x4002C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public ParticleSystem leftUnlockGlowParticleSystem;

		[Token(Token = "0x4002C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject spawnTimeWidgetContainer;

		[Token(Token = "0x4002C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public GameObject masteryRewardContainer;

		[Token(Token = "0x4002C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public ToolIconReference masteryRewardToolRef;

		[Token(Token = "0x4002C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public LocalizedText masteryRewardName;

		[Token(Token = "0x4002C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public LocalizedText masteryRewardItemType;

		[Token(Token = "0x4002C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public LocalizedText masteryRewardStatus;

		[Token(Token = "0x4002C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Header("Confirmation Window")]
		public GameObject confirmationTrackingWindow;

		[Token(Token = "0x4002C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public ToolIconReference currentlyTrackedIcon;

		[Token(Token = "0x4002C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public ToolIconReference toBeTrackedIcon;

		[Token(Token = "0x4002C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public LocalizedText currentlyTrackedText;

		[Token(Token = "0x4002C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public LocalizedText toBeTrackedText;

		[Token(Token = "0x4002C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public IgnisButton yesButton;

		[Token(Token = "0x4002C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public IgnisButton noButton;

		[Token(Token = "0x4002C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Header("Center Panel")]
		public ItemGridReference itemGridReference;

		[Token(Token = "0x4002C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Canvas toolListParent;

		[Token(Token = "0x4002C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public RectTransform scrollContent;

		[Token(Token = "0x4002C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public DeckViewReference deckViewReference;

		[Token(Token = "0x4002C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public LocalizedText unlockedAtLevel;

		[Token(Token = "0x4002C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[Header("Right Panel")]
		public ToolInformationReference rightPanelInformationReference;

		[Token(Token = "0x6001E04")]
		[Address(RVA = "0x1080D14", Offset = "0x1080D14", VA = "0x1080D14")]
		public ToolViewReference()
		{
		}
	}
	[Token(Token = "0x20006A5")]
	[CreateAssetMenu(fileName = "IconSpriteStateSettings", menuName = "Settings/Utility/IconSpriteStateSettings")]
	public class IconSpriteStateSettings : ScriptableObject
	{
		[Token(Token = "0x4002C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Sprite normal;

		[Token(Token = "0x4002C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Sprite highlighted;

		[Token(Token = "0x4002C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Sprite pressed;

		[Token(Token = "0x4002C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Sprite selected;

		[Token(Token = "0x4002C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Sprite disabled;

		[Token(Token = "0x6001E05")]
		[Address(RVA = "0x1080D1C", Offset = "0x1080D1C", VA = "0x1080D1C")]
		public IconSpriteStateSettings()
		{
		}
	}
	[Token(Token = "0x20006A6")]
	public class TextHintReference : MonoBehaviour
	{
		[Token(Token = "0x4002C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimatedCanvas animatedCanvas;

		[Token(Token = "0x4002C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RectTransform rectTransform;

		[Token(Token = "0x4002C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LocalizedText text;

		[Token(Token = "0x6001E06")]
		[Address(RVA = "0x1080D24", Offset = "0x1080D24", VA = "0x1080D24")]
		public TextHintReference()
		{
		}
	}
	[Token(Token = "0x20006A7")]
	[CreateAssetMenu(menuName = "Settings/MenuTextHint", fileName = "TextHintSettings", order = 0)]
	public class TextHintSettings : ScriptableObject
	{
		[Token(Token = "0x4002C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextHintReference textHintReference;

		[Token(Token = "0x4002C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 hintOffset;

		[Token(Token = "0x6001E07")]
		[Address(RVA = "0x1080D2C", Offset = "0x1080D2C", VA = "0x1080D2C")]
		public TextHintSettings()
		{
		}
	}
	[Token(Token = "0x20006A8")]
	public readonly struct TextHintRequest
	{
		[Token(Token = "0x4002C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string text;

		[Token(Token = "0x4002C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Transform target;

		[Token(Token = "0x6001E08")]
		[Address(RVA = "0x1080D8C", Offset = "0x1080D8C", VA = "0x1080D8C")]
		public TextHintRequest(Transform target, string text)
		{
		}
	}
	[Token(Token = "0x20006A9")]
	public class TextHintViewData
	{
		[Token(Token = "0x4002C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<TextHintRequest> showTextHint;

		[Token(Token = "0x4002C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<Transform> hideTextHint;

		[Token(Token = "0x6001E09")]
		[Address(RVA = "0x1080D94", Offset = "0x1080D94", VA = "0x1080D94")]
		public TextHintViewData()
		{
		}
	}
	[Token(Token = "0x20006AA")]
	public class TextHintViewHandler : ITickable
	{
		[Token(Token = "0x4002C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly TextHintViewData textHintViewData;

		[Token(Token = "0x4002C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly TextHintSettings textHintSettings;

		[Token(Token = "0x4002C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly AnimatedCanvasHandlerData animatedCanvasHandlerData;

		[Token(Token = "0x4002C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform currentHintTarget;

		[Token(Token = "0x4002C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TextHintReference textHintReference;

		[Token(Token = "0x6001E0A")]
		[Address(RVA = "0x1080E5C", Offset = "0x1080E5C", VA = "0x1080E5C")]
		public TextHintViewHandler(TextHintViewData textHintViewData, TextHintSettings textHintSettings, MenuStateData menuStateData, AnimatedCanvasHandlerData animatedCanvasHandlerData)
		{
		}

		[Token(Token = "0x6001E0B")]
		[Address(RVA = "0x1080E9C", Offset = "0x1080E9C", VA = "0x1080E9C")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001E0C")]
		[Address(RVA = "0x1080F48", Offset = "0x1080F48", VA = "0x1080F48")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6001E0D")]
		[Address(RVA = "0x1080F78", Offset = "0x1080F78", VA = "0x1080F78", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001E0E")]
		[Address(RVA = "0x1081060", Offset = "0x1081060", VA = "0x1081060")]
		private void ShowHint(TextHintRequest textHintRequest)
		{
		}

		[Token(Token = "0x6001E0F")]
		[Address(RVA = "0x10811CC", Offset = "0x10811CC", VA = "0x10811CC")]
		private void TryHideHint(Transform hintTarget)
		{
		}
	}
	[Token(Token = "0x20006AB")]
	public abstract class CountHandler
	{
		[Token(Token = "0x4002C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4002C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4002C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected readonly TrailerData trailerData;

		[Token(Token = "0x4002C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected readonly GameData gameData;

		[Token(Token = "0x4002C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected readonly AnimationStateHandlerData animationStateHandlerData;

		[Token(Token = "0x4002C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4002C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4002C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected readonly MatchViewHandlerData matchViewHandlerData;

		[Token(Token = "0x4002C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected readonly Transform matchViewTransform;

		[Token(Token = "0x4002C6F")]
		private const float fightTextTime = 1f;

		[Token(Token = "0x4002C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected bool showingFightText;

		[Token(Token = "0x4002C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		protected float fightTextTimer;

		[Token(Token = "0x4002C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected float currentCountDown;

		[Token(Token = "0x4002C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		protected bool showingCountdown;

		[Token(Token = "0x6001E10")]
		[Address(RVA = "0x108128C", Offset = "0x108128C", VA = "0x108128C")]
		protected CountHandler(MatchCountdownData matchCountdownData)
		{
		}

		[Token(Token = "0x6001E11")]
		public abstract void Run();

		[Token(Token = "0x6001E12")]
		[Address(RVA = "0x10812E0", Offset = "0x10812E0", VA = "0x10812E0")]
		protected void HandleFightingText()
		{
		}
	}
	[Token(Token = "0x20006AC")]
	public class MatchCountdownData
	{
		[Token(Token = "0x4002C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4002C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4002C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly TrailerData trailerData;

		[Token(Token = "0x4002C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly GameData gameData;

		[Token(Token = "0x4002C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly AnimationStateHandlerData animationStateHandlerData;

		[Token(Token = "0x4002C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4002C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4002C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly MatchViewHandlerData matchViewHandlerData;

		[Token(Token = "0x4002C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly Transform matchViewTransform;

		[Token(Token = "0x4002C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public readonly SoundTriggersList soundTriggersList;

		[Token(Token = "0x6001E13")]
		[Address(RVA = "0x1081350", Offset = "0x1081350", VA = "0x1081350")]
		public MatchCountdownData(MatchHandlerData matchHandlerData, AutoSpectateData autoSpectateData, TrailerData trailerData, GameData gameData, AnimationStateHandlerData animationStateHandlerData, IgnisSoundTriggerData ignisSoundTriggerData, IRoomTimeProvider roomTimeProvider, MatchViewHandlerData matchViewHandlerData)
		{
		}
	}
	[Token(Token = "0x20006AD")]
	public class MatchCountdownHandler : ITickable
	{
		[Token(Token = "0x20006AE")]
		private class ClassicCountdownHandler : CountHandler
		{
			[Token(Token = "0x4002C86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private int numOfCountdowns;

			[Token(Token = "0x4002C87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			private int countDown;

			[Token(Token = "0x6001E18")]
			[Address(RVA = "0x1081448", Offset = "0x1081448", VA = "0x1081448")]
			public ClassicCountdownHandler(MatchCountdownData matchCountdownData)
			{
			}

			[Token(Token = "0x6001E19")]
			[Address(RVA = "0x10815FC", Offset = "0x10815FC", VA = "0x10815FC", Slot = "4")]
			public override void Run()
			{
			}

			[Token(Token = "0x6001E1A")]
			[Address(RVA = "0x108163C", Offset = "0x108163C", VA = "0x108163C")]
			private void HandleCountdown()
			{
			}

			[Token(Token = "0x6001E1B")]
			[Address(RVA = "0x10818EC", Offset = "0x10818EC", VA = "0x10818EC")]
			private void HandleCountDownTick()
			{
			}
		}

		[Token(Token = "0x20006AF")]
		private class ShootOutCountDownHandler : CountHandler
		{
			[Token(Token = "0x6001E1C")]
			[Address(RVA = "0x10815F4", Offset = "0x10815F4", VA = "0x10815F4")]
			public ShootOutCountDownHandler(MatchCountdownData matchCountdownData)
			{
			}

			[Token(Token = "0x6001E1D")]
			[Address(RVA = "0x1081BB0", Offset = "0x1081BB0", VA = "0x1081BB0", Slot = "4")]
			public override void Run()
			{
			}

			[Token(Token = "0x6001E1E")]
			[Address(RVA = "0x1081DA4", Offset = "0x1081DA4", VA = "0x1081DA4")]
			private void HandleCountdown()
			{
			}

			[Token(Token = "0x6001E1F")]
			[Address(RVA = "0x1081FC4", Offset = "0x1081FC4", VA = "0x1081FC4")]
			private void HandleCountDownTick()
			{
			}
		}

		[Token(Token = "0x20006B0")]
		private class WinterClassicCountdownHandler : CountHandler
		{
			[Token(Token = "0x4002C88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private int numOfCountdowns;

			[Token(Token = "0x4002C89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			private int countDown;

			[Token(Token = "0x6001E20")]
			[Address(RVA = "0x10815F8", Offset = "0x10815F8", VA = "0x10815F8")]
			public WinterClassicCountdownHandler(MatchCountdownData matchCountdownData)
			{
			}

			[Token(Token = "0x6001E21")]
			[Address(RVA = "0x10820B8", Offset = "0x10820B8", VA = "0x10820B8", Slot = "4")]
			public override void Run()
			{
			}

			[Token(Token = "0x6001E22")]
			[Address(RVA = "0x10820F8", Offset = "0x10820F8", VA = "0x10820F8")]
			private void HandleCountdown()
			{
			}

			[Token(Token = "0x6001E23")]
			[Address(RVA = "0x10823A8", Offset = "0x10823A8", VA = "0x10823A8")]
			private void HandleCountDownTick()
			{
			}
		}

		[Token(Token = "0x4002C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameData gameData;

		[Token(Token = "0x4002C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MatchCountdownData matchCountdownData;

		[Token(Token = "0x4002C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform matchViewTransform;

		[Token(Token = "0x4002C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameplayRules currentGameplayRules;

		[Token(Token = "0x4002C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CountHandler selectedCountdownHandler;

		[Token(Token = "0x4002C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ClassicCountdownHandler classicCountdownHandler;

		[Token(Token = "0x4002C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ShootOutCountDownHandler shootOutCountDownHandler;

		[Token(Token = "0x4002C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private WinterClassicCountdownHandler winterClassicCountdownHandler;

		[Token(Token = "0x6001E14")]
		[Address(RVA = "0x10813B8", Offset = "0x10813B8", VA = "0x10813B8")]
		public MatchCountdownHandler(GameData gameData, MatchCountdownData matchCountdownData)
		{
		}

		[Token(Token = "0x6001E15")]
		[Address(RVA = "0x10813E4", Offset = "0x10813E4", VA = "0x10813E4")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001E16")]
		[Address(RVA = "0x108144C", Offset = "0x108144C", VA = "0x108144C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001E17")]
		[Address(RVA = "0x1081524", Offset = "0x1081524", VA = "0x1081524")]
		private CountHandler GetCountdownHandler(GameplayRules gameplayRules)
		{
			return null;
		}
	}
	[Token(Token = "0x20006B1")]
	public enum MatchHandlerState
	{
		[Token(Token = "0x4002C8B")]
		Inactive,
		[Token(Token = "0x4002C8C")]
		Intro,
		[Token(Token = "0x4002C8D")]
		IdleBeforeRound,
		[Token(Token = "0x4002C8E")]
		RoundCountdown,
		[Token(Token = "0x4002C8F")]
		Playing,
		[Token(Token = "0x4002C90")]
		CleanUp,
		[Token(Token = "0x4002C91")]
		EndRound,
		[Token(Token = "0x4002C92")]
		EndMatch
	}
	[Token(Token = "0x20006B2")]
	public class MatchHandlerData
	{
		[Token(Token = "0x4002C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MatchHandlerState currentState;

		[Token(Token = "0x4002C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public MatchEndReason endMatchReason;

		[Token(Token = "0x4002C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<StartRoundRequest> startRoundRequests;

		[Token(Token = "0x4002C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Queue<EndRoundRequest> endRoundRequests;

		[Token(Token = "0x4002C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Queue<StartRoundRequest> restartMatchRequests;

		[Token(Token = "0x4002C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Queue<ForfeitRoundRequest> forfeitRoundRequests;

		[Token(Token = "0x4002C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Queue<CleanUpMatchDataRequest> cleanUpMatchDataRequests;

		[Token(Token = "0x4002C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Queue<StartMatchRequest> startMatchRequests;

		[Token(Token = "0x4002C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int roundCount;

		[Token(Token = "0x4002C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int totalRoundCount;

		[Token(Token = "0x4002C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Dictionary<int, int> roundsWon;

		[Token(Token = "0x4002C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int roundWinnerId;

		[Token(Token = "0x4002C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool localPlayerWon;

		[Token(Token = "0x4002CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float latestStateUpdateTimestamp;

		[Token(Token = "0x4002CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float matchStartTimestamp;

		[Token(Token = "0x4002CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float startRoundTimeStamp;

		[Token(Token = "0x4002CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float startCountDownTimeStamp;

		[Token(Token = "0x4002CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float endRoundTimestamp;

		[Token(Token = "0x4002CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int forfeitPlayer;

		[Token(Token = "0x4002CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal bool endingRoundThroughForfeit;

		[Token(Token = "0x4002CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		public bool endingMatchThroughDisconnect;

		[Token(Token = "0x4002CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		public bool firstRoundHasStarted;

		[Token(Token = "0x4002CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Queue<EndMatchRequest> endMatchRequests;

		[Token(Token = "0x4002CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Dictionary<int, bool> rematchResponses;

		[Token(Token = "0x4002CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool clockSyncIssueDetectedThisFrame;

		[Token(Token = "0x4002CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool autoStartNextRound;

		[Token(Token = "0x4002CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		public bool shouldExitMatch;

		[Token(Token = "0x6001E24")]
		[Address(RVA = "0x108266C", Offset = "0x108266C", VA = "0x108266C")]
		public MatchHandlerData()
		{
		}
	}
	[Token(Token = "0x20006B3")]
	public enum MatchEndReason
	{
		[Token(Token = "0x4002CAF")]
		None,
		[Token(Token = "0x4002CB0")]
		OpponentDisconnected,
		[Token(Token = "0x4002CB1")]
		PlayerForfeit,
		[Token(Token = "0x4002CB2")]
		IDisconnected,
		[Token(Token = "0x4002CB3")]
		MatchEndedSuccessfully,
		[Token(Token = "0x4002CB4")]
		OpponentLeftBetweenMatches,
		[Token(Token = "0x4002CB5")]
		OpponentLeftBeforeFirstRound,
		[Token(Token = "0x4002CB6")]
		OpponentLeftBetweenRounds,
		[Token(Token = "0x4002CB7")]
		HumanFoundWhenPlayingBot,
		[Token(Token = "0x4002CB8")]
		ForceEndMatchWithOutEndScreen
	}
	[Token(Token = "0x20006B4")]
	public readonly struct ForfeitRoundRequest
	{
		[Token(Token = "0x4002CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int round;

		[Token(Token = "0x4002CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int forfeitId;

		[Token(Token = "0x6001E25")]
		[Address(RVA = "0x1082908", Offset = "0x1082908", VA = "0x1082908")]
		public ForfeitRoundRequest(int round, int forfeitId)
		{
		}
	}
	[Token(Token = "0x20006B5")]
	public readonly struct StartRoundRequest
	{
		[Token(Token = "0x4002CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int totalRounds;

		[Token(Token = "0x4002CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int currentRound;

		[Token(Token = "0x4002CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly float startRoundTimeStamp;

		[Token(Token = "0x4002CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly float startCountDownTimeStamp;

		[Token(Token = "0x4002CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int scorePlayerOne;

		[Token(Token = "0x4002CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly int scorePlayerTwo;

		[Token(Token = "0x6001E26")]
		[Address(RVA = "0x1082910", Offset = "0x1082910", VA = "0x1082910")]
		public StartRoundRequest(int totalRounds, int currentRound, float startRoundTimeStamp, float startCountDownTimeStamp, int scorePlayerOne, int scorePlayerTwo)
		{
		}
	}
	[Token(Token = "0x20006B6")]
	public readonly struct StartMatchRequest
	{
	}
	[Token(Token = "0x20006B7")]
	public readonly struct EndMatchRequest
	{
		[Token(Token = "0x4002CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int round;

		[Token(Token = "0x4002CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly MatchEndReason endReason;

		[Token(Token = "0x6001E27")]
		[Address(RVA = "0x1082920", Offset = "0x1082920", VA = "0x1082920")]
		public EndMatchRequest(int round, MatchEndReason endReason)
		{
		}
	}
	[Token(Token = "0x20006B8")]
	public readonly struct CleanUpMatchDataRequest
	{
	}
	[Token(Token = "0x20006B9")]
	public readonly struct EndRoundRequest
	{
		[Token(Token = "0x4002CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int round;

		[Token(Token = "0x4002CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int roundWinnerId;

		[Token(Token = "0x4002CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int playerOneScore;

		[Token(Token = "0x4002CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly int playerTwoScore;

		[Token(Token = "0x4002CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly float endRoundTimestamp;

		[Token(Token = "0x4002CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly float roundDamagePlayerOne;

		[Token(Token = "0x4002CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float roundDamagePlayerTwo;

		[Token(Token = "0x6001E28")]
		[Address(RVA = "0x1082928", Offset = "0x1082928", VA = "0x1082928")]
		public EndRoundRequest(int round, int roundWinnerId, int playerOneScore, int playerTwoScore, float endRoundTimestamp, float roundDamagePlayerOne, float roundDamagePlayerTwo)
		{
		}
	}
	[Token(Token = "0x20006BA")]
	public class MatchHandler : IMatchHandler, ITickable
	{
		[Token(Token = "0x4002CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MatchHandlerData matchHandlerData;

		[Token(Token = "0x4002CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameData gameData;

		[Token(Token = "0x4002CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BotController botController;

		[Token(Token = "0x4002CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4002CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x4002CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly GameMechanicStateHelper gameMechanicStateHelper;

		[Token(Token = "0x4002CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ToolSpawnAlgorithmData toolSpawnAlgorithmData;

		[Token(Token = "0x4002CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly MatchReportingData matchReportingData;

		[Token(Token = "0x4002CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly MatchRewardPredictionData matchRewardPredictionData;

		[Token(Token = "0x4002CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly GlobalMatchmakingStateData globalMatchmakingStateData;

		[Token(Token = "0x4002CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4002CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4002CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4002CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4002CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly NetworkRegionProvider networkRegionProvider;

		[Token(Token = "0x4002CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly CageHandler cageHandler;

		[Token(Token = "0x4002CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly ArenaGameStateSettings arenaGameStateSettings;

		[Token(Token = "0x4002CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4002CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly Transform centerArenaTransform;

		[Token(Token = "0x4002CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly PlayFabTitleData playFabTitleData;

		[Token(Token = "0x4002CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly GameDesignTrackingData gameDesignTrackingData;

		[Token(Token = "0x4002CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly RatingMatchmakerSettingsData ratingMatchmakerSettingsData;

		[Token(Token = "0x4002CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly GameMessageUploadHandlerData gameMessageUploadHandlerData;

		[Token(Token = "0x4002CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4002CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x4002CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly KnockoutTournamentData knockoutTournamentData;

		[Token(Token = "0x4002CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly LoginData loginData;

		[Token(Token = "0x4002CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4002CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private readonly FaceAnimationData faceAnimationData;

		[Token(Token = "0x4002CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private readonly SoundTriggersList soundTriggersList;

		[Token(Token = "0x4002CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool forceMoveToNextStateDebug;

		[Token(Token = "0x4002CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
		private bool isRematch;

		[Token(Token = "0x4002CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x102")]
		private bool startRound;

		[Token(Token = "0x4002CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x103")]
		private bool restartMatch;

		[Token(Token = "0x4002CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private bool endRound;

		[Token(Token = "0x4002CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
		private bool startingRound;

		[Token(Token = "0x4002CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float lastSyncMessageSentTimestamp;

		[Token(Token = "0x4002CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool startMatch;

		[Token(Token = "0x4002CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10D")]
		private bool failedToCleanUpMatchDueToTournamentNotBeingReported;

		[Token(Token = "0x6001E29")]
		[Address(RVA = "0x108293C", Offset = "0x108293C", VA = "0x108293C")]
		public MatchHandler(MatchHandlerData matchHandlerData, GameData gameData, ToolSpawnAlgorithmData toolSpawnAlgorithmData, MatchReportingData matchReportingData, MatchRewardPredictionData matchRewardPredictionData, GlobalMatchmakingStateData globalMatchmakingStateData, GameDesignTrackingData gameDesignTrackingData, BotController botController, IgnisSoundTriggerData ignisSoundTriggerData, GameMechanicStateHelper gameMechanicStateHelper, IgnisNetworkConnectionData networkConnectionData, MessageSender messageSender, GameMessageFactory gameMessageFactory, IRoomTimeProvider roomTimeProvider, NetworkRegionProvider networkRegionProvider, DamageRecordKeeper damageRecordKeeper, CageHandler cageHandler, ArenaGameStateSettings arenaGameStateSettings, ArenaGameStateData arenaGameStateData, Transform centerArenaTransform, PlayFabTitleData playFabTitleData, RatingMatchmakerSettingsData ratingMatchmakerSettingsData, GameMessageUploadHandlerData gameMessageUploadHandlerData, AutoSpectateData autoSpectateData, LockerRoomGameStateData lockerRoomGameStateData, KnockoutTournamentData knockoutTournamentData, LoginData loginData, IgnisTelemetry ignisTelemetry, FaceAnimationData faceAnimationData, SoundTriggersList soundTriggersList)
		{
		}

		[Token(Token = "0x6001E2A")]
		[Address(RVA = "0x1082A70", Offset = "0x1082A70", VA = "0x1082A70")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug(DebugMenu debugMenu)
		{
		}

		[Token(Token = "0x6001E2B")]
		[Address(RVA = "0x1082A74", Offset = "0x1082A74", VA = "0x1082A74")]
		private void ForceLoseMatch()
		{
		}

		[Token(Token = "0x6001E2C")]
		[Address(RVA = "0x1082ABC", Offset = "0x1082ABC", VA = "0x1082ABC")]
		private void ForceWinMatch()
		{
		}

		[Token(Token = "0x6001E2D")]
		[Address(RVA = "0x1082B04", Offset = "0x1082B04", VA = "0x1082B04")]
		private void StartNewRound()
		{
		}

		[Token(Token = "0x6001E2E")]
		[Address(RVA = "0x1082D64", Offset = "0x1082D64", VA = "0x1082D64")]
		[Conditional("IGNIS_DEBUG")]
		private void WinRound()
		{
		}

		[Token(Token = "0x6001E2F")]
		[Address(RVA = "0x1082EE0", Offset = "0x1082EE0", VA = "0x1082EE0")]
		private void SendEndRoundMessage(int winner)
		{
		}

		[Token(Token = "0x6001E30")]
		[Address(RVA = "0x1083074", Offset = "0x1083074", VA = "0x1083074", Slot = "5")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001E31")]
		[Address(RVA = "0x1083A00", Offset = "0x1083A00", VA = "0x1083A00")]
		private void HandleInactive()
		{
		}

		[Token(Token = "0x6001E32")]
		[Address(RVA = "0x108337C", Offset = "0x108337C", VA = "0x108337C")]
		private void TryToStartMatch(StartMatchRequest request)
		{
		}

		[Token(Token = "0x6001E33")]
		[Address(RVA = "0x1084BE0", Offset = "0x1084BE0", VA = "0x1084BE0")]
		private void CleanUpMatchStateData()
		{
		}

		[Token(Token = "0x6001E34")]
		[Address(RVA = "0x1083454", Offset = "0x1083454", VA = "0x1083454")]
		private void TryToStartRound(StartRoundRequest request)
		{
		}

		[Token(Token = "0x6001E35")]
		[Address(RVA = "0x10837F4", Offset = "0x10837F4", VA = "0x10837F4")]
		private void TryToEndRound(EndRoundRequest request)
		{
		}

		[Token(Token = "0x6001E36")]
		[Address(RVA = "0x1085548", Offset = "0x1085548", VA = "0x1085548")]
		private bool CheckForfeitRound()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E37")]
		[Address(RVA = "0x10836C0", Offset = "0x10836C0", VA = "0x10836C0")]
		private void TryToRestartRound(StartRoundRequest request)
		{
		}

		[Token(Token = "0x6001E38")]
		[Address(RVA = "0x1085610", Offset = "0x1085610", VA = "0x1085610")]
		private void PrepareGame()
		{
		}

		[Token(Token = "0x6001E39")]
		[Address(RVA = "0x1084720", Offset = "0x1084720", VA = "0x1084720")]
		private void SetEndMatchAndReportTelemetry(EndMatchRequest reason)
		{
		}

		[Token(Token = "0x6001E3A")]
		[Address(RVA = "0x1086080", Offset = "0x1086080", VA = "0x1086080")]
		private void FinalizeLogUpload()
		{
		}

		[Token(Token = "0x6001E3B")]
		[Address(RVA = "0x1085790", Offset = "0x1085790", VA = "0x1085790")]
		private (int, float) HandleMatchEndReasonsCases(MatchEndReason reason)
		{
			return default((int, float));
		}

		[Token(Token = "0x6001E3C")]
		[Address(RVA = "0x1085948", Offset = "0x1085948", VA = "0x1085948")]
		private void TryToAbortMatchMaking()
		{
		}

		[Token(Token = "0x6001E3D")]
		[Address(RVA = "0x10866E0", Offset = "0x10866E0", VA = "0x10866E0")]
		private bool OpponentLeftTheMatch(MatchEndReason reason)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E3E")]
		[Address(RVA = "0x10863D0", Offset = "0x10863D0", VA = "0x10863D0")]
		private void UpdateScoreAgainstBot()
		{
		}

		[Token(Token = "0x6001E3F")]
		[Address(RVA = "0x1086634", Offset = "0x1086634", VA = "0x1086634")]
		private int GetWinnerOfMatch()
		{
			return default(int);
		}

		[Token(Token = "0x6001E40")]
		[Address(RVA = "0x10859A4", Offset = "0x10859A4", VA = "0x10859A4")]
		private void TryReportEndOfMatchMakingOrTournamentGame(EndMatchRequest endMatchRequest)
		{
		}

		[Token(Token = "0x6001E41")]
		[Address(RVA = "0x1085DB4", Offset = "0x1085DB4", VA = "0x1085DB4")]
		private void TryReportEndOfBotGame(float matchRewardFactor, EndMatchRequest endMatchRequest)
		{
		}

		[Token(Token = "0x6001E42")]
		[Address(RVA = "0x1086520", Offset = "0x1086520", VA = "0x1086520")]
		private float GetBotMatchRewardFactor()
		{
			return default(float);
		}

		[Token(Token = "0x6001E43")]
		[Address(RVA = "0x1086704", Offset = "0x1086704", VA = "0x1086704")]
		private void CalculateMatchReward(float matchRewardFactor, bool isLocalPlayerWinner)
		{
		}

		[Token(Token = "0x6001E44")]
		[Address(RVA = "0x10869B0", Offset = "0x10869B0", VA = "0x10869B0")]
		private void ResetRound()
		{
		}

		[Token(Token = "0x6001E45")]
		[Address(RVA = "0x1086B38", Offset = "0x1086B38", VA = "0x1086B38")]
		private int ComputeNumberOfRoundsToWin()
		{
			return default(int);
		}

		[Token(Token = "0x6001E46")]
		[Address(RVA = "0x1086BC4", Offset = "0x1086BC4", VA = "0x1086BC4")]
		private Tracking.TrackingEvent CreateMatchStateTrackingEvent(string eventName)
		{
			return null;
		}

		[Token(Token = "0x6001E47")]
		[Address(RVA = "0x1087230", Offset = "0x1087230", VA = "0x1087230")]
		private void ReportRoundTelemetry()
		{
		}

		[Token(Token = "0x6001E48")]
		[Address(RVA = "0x108538C", Offset = "0x108538C", VA = "0x108538C")]
		private void TriggerFaceAnimations()
		{
		}

		[Token(Token = "0x6001E49")]
		[Address(RVA = "0x1085278", Offset = "0x1085278", VA = "0x1085278")]
		private void ResetMatchState()
		{
		}

		[Token(Token = "0x6001E4A")]
		[Address(RVA = "0x1082C74", Offset = "0x1082C74", VA = "0x1082C74")]
		private float CreateRoundStartTimeStamp(GameplayRules gameplayRules)
		{
			return default(float);
		}

		[Token(Token = "0x6001E4B")]
		[Address(RVA = "0x1087420", Offset = "0x1087420", VA = "0x1087420", Slot = "4")]
		public void LeaveMatch()
		{
		}

		[Token(Token = "0x6001E4C")]
		[Address(RVA = "0x1087440", Offset = "0x1087440", VA = "0x1087440")]
		public void Rematch()
		{
		}

		[Token(Token = "0x6001E4D")]
		[Address(RVA = "0x1083A18", Offset = "0x1083A18", VA = "0x1083A18")]
		private void HandleIntro()
		{
		}

		[Token(Token = "0x6001E4E")]
		[Address(RVA = "0x1083A44", Offset = "0x1083A44", VA = "0x1083A44")]
		private void HandleIdleBeforeRound()
		{
		}

		[Token(Token = "0x6001E4F")]
		[Address(RVA = "0x1087564", Offset = "0x1087564", VA = "0x1087564")]
		private void TryToStartRound()
		{
		}

		[Token(Token = "0x6001E50")]
		[Address(RVA = "0x1083B34", Offset = "0x1083B34", VA = "0x1083B34")]
		private void HandleRoundCountdown()
		{
		}

		[Token(Token = "0x6001E51")]
		[Address(RVA = "0x1083C20", Offset = "0x1083C20", VA = "0x1083C20")]
		private void HandlePlaying()
		{
		}

		[Token(Token = "0x6001E52")]
		[Address(RVA = "0x10875A8", Offset = "0x10875A8", VA = "0x10875A8")]
		private void TryToEndRound()
		{
		}

		[Token(Token = "0x6001E53")]
		[Address(RVA = "0x1087764", Offset = "0x1087764", VA = "0x1087764")]
		private (int, float) GetMostDamagedPlayer()
		{
			return default((int, float));
		}

		[Token(Token = "0x6001E54")]
		[Address(RVA = "0x1083D40", Offset = "0x1083D40", VA = "0x1083D40")]
		private void HandleCleanUp()
		{
		}

		[Token(Token = "0x6001E55")]
		[Address(RVA = "0x1084494", Offset = "0x1084494", VA = "0x1084494")]
		private void HandleEndRound()
		{
		}

		[Token(Token = "0x6001E56")]
		[Address(RVA = "0x1084608", Offset = "0x1084608", VA = "0x1084608")]
		private void HandleEndMatch()
		{
		}

		[Token(Token = "0x6001E57")]
		[Address(RVA = "0x1087888", Offset = "0x1087888", VA = "0x1087888")]
		private bool ShouldExitMatch()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E58")]
		[Address(RVA = "0x1084CE4", Offset = "0x1084CE4", VA = "0x1084CE4")]
		private void ChangeStateTo(MatchHandlerState newMatchHandlerState)
		{
		}

		[Token(Token = "0x6001E59")]
		[Address(RVA = "0x1087980", Offset = "0x1087980", VA = "0x1087980")]
		private void TriggerEndMatchSound()
		{
		}
	}
	[Token(Token = "0x20006BB")]
	public interface IMatchHandler : ITickable
	{
		[Token(Token = "0x6001E5A")]
		void LeaveMatch();
	}
	[Serializable]
	[Token(Token = "0x20006BC")]
	public struct MatchResultColors
	{
		[Token(Token = "0x4002CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Color wreath;

		[Token(Token = "0x4002CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color text;

		[Token(Token = "0x4002CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color name;

		[Token(Token = "0x4002CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color bright;

		[Token(Token = "0x4002CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color dark;

		[Token(Token = "0x4002CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color hologram;
	}
	[Token(Token = "0x20006BD")]
	[CreateAssetMenu(menuName = "Settings/Arena/MatchHandlerSetting", fileName = "MatchHandlerSetting")]
	public class MatchHandlerSetting : ScriptableObject
	{
		[Token(Token = "0x4002CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MatchViewReference matchViewReference;

		[Token(Token = "0x4002CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MatchViewReference autoSpectatorMatchViewReference;

		[Token(Token = "0x4002CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string winnerLocaleId;

		[Token(Token = "0x4002CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string loserLocaleId;

		[Token(Token = "0x4002CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float matchViewHorizOffset;

		[Token(Token = "0x4002CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("MatchResult")]
		public MatchResultColors player1Colors;

		[Token(Token = "0x4002CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public MatchResultColors player2Colors;

		[Token(Token = "0x4002CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Range(0f, 1f)]
		public float opponentColorDarkening;

		[Token(Token = "0x4002CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public UnityEngine.Sprite acceptButtonIcon;

		[Token(Token = "0x4002D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public UnityEngine.Sprite acceptButtonIconSelected;

		[Token(Token = "0x4002D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public UnityEngine.Sprite rejectButtonIcon;

		[Token(Token = "0x4002D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public UnityEngine.Sprite rejectButtonIconSelected;

		[Token(Token = "0x6001E5B")]
		[Address(RVA = "0x1089004", Offset = "0x1089004", VA = "0x1089004")]
		public MatchHandlerSetting()
		{
		}
	}
	[Token(Token = "0x20006BE")]
	public class MatchViewHandlerData
	{
		[Token(Token = "0x4002D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool shouldUpdateMatchTimer;

		[Token(Token = "0x4002D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MatchViewReference matchViewReference;

		[Token(Token = "0x6001E5C")]
		[Address(RVA = "0x1089018", Offset = "0x1089018", VA = "0x1089018")]
		public MatchViewHandlerData()
		{
		}
	}
	[Token(Token = "0x20006BF")]
	public class MatchViewHandler : ITickable
	{
		[Token(Token = "0x4002D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool showingMatchTimer;

		[Token(Token = "0x4002D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool showingViewHandler;

		[Token(Token = "0x4002D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool updateMatchHandler;

		[Token(Token = "0x4002D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		private bool showingRoundForfeit;

		[Token(Token = "0x4002D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool showingMatchThroughDisconnect;

		[Token(Token = "0x4002D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MatchTimer nextTimeReminder;

		[Token(Token = "0x4002D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Color timerColor;

		[Token(Token = "0x4002D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int nextMatchTimerIndex;

		[Token(Token = "0x4002D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4002D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly GameData gameData;

		[Token(Token = "0x4002D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4002D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4002D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly ScoreBoardData scoreBoardData;

		[Token(Token = "0x4002D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly Camera camera;

		[Token(Token = "0x4002D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4002D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly MatchViewHandlerData matchViewHandlerData;

		[Token(Token = "0x4002D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly SoundTriggersList soundTriggersList;

		[Token(Token = "0x4002D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MatchViewReference classicMatchViewRef;

		[Token(Token = "0x4002D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MatchViewReference shootoutMatchViewRef;

		[Token(Token = "0x4002D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private MatchViewReference winterClassicMatchViewRef;

		[Token(Token = "0x4002D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform worldParent;

		[Token(Token = "0x4002D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GameplayRules gameplayRules;

		[Token(Token = "0x6001E5D")]
		[Address(RVA = "0x1089020", Offset = "0x1089020", VA = "0x1089020")]
		public MatchViewHandler(MatchHandlerData matchHandlerData, GameData gameData, IRoomTimeProvider roomTimeProvider, IgnisSoundTriggerData ignisSoundTriggerData, ScoreBoardData scoreBoardData, Camera camera, AutoSpectateData autoSpectateData, MatchViewHandlerData matchViewHandlerData, SoundTriggersList soundTriggersList)
		{
		}

		[Token(Token = "0x6001E5E")]
		[Address(RVA = "0x108909C", Offset = "0x108909C", VA = "0x108909C")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x6001E5F")]
		[Address(RVA = "0x10890A4", Offset = "0x10890A4", VA = "0x10890A4")]
		private void SwitchMatchHandler()
		{
		}

		[Token(Token = "0x6001E60")]
		[Address(RVA = "0x1089228", Offset = "0x1089228", VA = "0x1089228")]
		private MatchViewReference GetMatchViewReference(GameplayRules gameplayRules, bool isAutoSpectatorActive)
		{
			return null;
		}

		[Token(Token = "0x6001E61")]
		[Address(RVA = "0x10895D8", Offset = "0x10895D8", VA = "0x10895D8")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001E62")]
		[Address(RVA = "0x10895DC", Offset = "0x10895DC", VA = "0x10895DC")]
		public void SetActive(bool active)
		{
		}

		[Token(Token = "0x6001E63")]
		[Address(RVA = "0x10893E4", Offset = "0x10893E4", VA = "0x10893E4")]
		private void UpdateMatchTimer(float timeRemaining)
		{
		}

		[Token(Token = "0x6001E64")]
		[Address(RVA = "0x10898A4", Offset = "0x10898A4", VA = "0x10898A4", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001E65")]
		[Address(RVA = "0x1089CA4", Offset = "0x1089CA4", VA = "0x1089CA4")]
		private void HandleForfeitThroughDisconnect()
		{
		}

		[Token(Token = "0x6001E66")]
		[Address(RVA = "0x1089B28", Offset = "0x1089B28", VA = "0x1089B28")]
		private void HandleRoundForfeit()
		{
		}

		[Token(Token = "0x6001E67")]
		[Address(RVA = "0x1089B14", Offset = "0x1089B14", VA = "0x1089B14")]
		private void HandleMatchTimer()
		{
		}

		[Token(Token = "0x6001E68")]
		[Address(RVA = "0x1089DA0", Offset = "0x1089DA0", VA = "0x1089DA0")]
		private void HandleMatchTimerTick()
		{
		}
	}
	[Token(Token = "0x20006C0")]
	public class MatchViewReference : MonoBehaviour
	{
		[Token(Token = "0x4002D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4002D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI roundCountDown;

		[Token(Token = "0x4002D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject fightText;

		[Token(Token = "0x4002D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PopupMessageReference errorMessageReference;

		[Token(Token = "0x4002D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationLegacyStateData countDownAnimation;

		[Token(Token = "0x4002D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationLegacyStateData showFightAnimation;

		[Token(Token = "0x6001E69")]
		[Address(RVA = "0x108A050", Offset = "0x108A050", VA = "0x108A050")]
		public MatchViewReference()
		{
		}
	}
	[Token(Token = "0x20006C1")]
	public class RematchReference : MonoBehaviour
	{
		[Token(Token = "0x4002D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button acceptRematch;

		[Token(Token = "0x4002D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Image acceptImage;

		[Token(Token = "0x4002D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button rejectRematch;

		[Token(Token = "0x4002D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Image rejectImage;

		[Token(Token = "0x6001E6A")]
		[Address(RVA = "0x108A058", Offset = "0x108A058", VA = "0x108A058")]
		public RematchReference()
		{
		}
	}
	[Token(Token = "0x20006C2")]
	public class BadPingDetectionData
	{
		[Token(Token = "0x4002D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool badPingDetected;

		[Token(Token = "0x6001E6B")]
		[Address(RVA = "0x108A060", Offset = "0x108A060", VA = "0x108A060")]
		public BadPingDetectionData()
		{
		}
	}
	[Token(Token = "0x20006C3")]
	public class BadPingDetectionHandler : ITickable
	{
		[Token(Token = "0x4002D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BadPingDetectionData badPingDetectionData;

		[Token(Token = "0x4002D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4002D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly NetworkRegionSelector networkRegionSelector;

		[Token(Token = "0x4002D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly NetworkRegionProvider networkRegionProvider;

		[Token(Token = "0x4002D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PlayFabUserSettingsData playFabUserSettingsData;

		[Token(Token = "0x4002D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x4002D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4002D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float latestTimestampWhenPingWasNotKnownToBeBad;

		[Token(Token = "0x6001E6C")]
		[Address(RVA = "0x108A068", Offset = "0x108A068", VA = "0x108A068")]
		public BadPingDetectionHandler(BadPingDetectionData badPingDetectionData, IgnisNetworkConnectionData networkConnectionData, NetworkRegionSelector networkRegionSelector, NetworkRegionProvider networkRegionProvider, PlayFabUserSettingsData playFabUserSettingsData, ITimeProvider timeProvider, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x6001E6D")]
		[Address(RVA = "0x108A0CC", Offset = "0x108A0CC", VA = "0x108A0CC", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x20006C4")]
	public class DeterministicRandom
	{
		[Token(Token = "0x4002D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int A;

		[Token(Token = "0x4002D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int C;

		[Token(Token = "0x4002D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int M;

		[Token(Token = "0x4002D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int seed;

		[Token(Token = "0x6001E6E")]
		[Address(RVA = "0x108A7FC", Offset = "0x108A7FC", VA = "0x108A7FC")]
		public void InitRandom(ushort seed)
		{
		}

		[Token(Token = "0x6001E6F")]
		[Address(RVA = "0x108A808", Offset = "0x108A808", VA = "0x108A808")]
		public float GetRandomFloat()
		{
			return default(float);
		}

		[Token(Token = "0x6001E70")]
		[Address(RVA = "0x108A8B4", Offset = "0x108A8B4", VA = "0x108A8B4")]
		public int GetRandomIntInRange(int minInclusive, int maxInclusive)
		{
			return default(int);
		}

		[Token(Token = "0x6001E71")]
		[Address(RVA = "0x108A904", Offset = "0x108A904", VA = "0x108A904")]
		public DeterministicRandom()
		{
		}
	}
	[Token(Token = "0x20006C5")]
	public class IgnisNetworkConnectionData : NetworkData
	{
		[Token(Token = "0x4002D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly int offlineId;

		[Token(Token = "0x4002D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int LOCALOFFLINEID;

		[Token(Token = "0x4002D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly int OPPONENTOFFLINEID;

		[Token(Token = "0x4002D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public bool isNetworkAvailable;

		[Token(Token = "0x4002D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public int maxPlayers;

		[Token(Token = "0x4002D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public int maxSpectators;

		[Token(Token = "0x4002D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool isOffline;

		[Token(Token = "0x4002D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		public bool useOfflineId;

		[Token(Token = "0x6001E73")]
		[Address(RVA = "0x108A964", Offset = "0x108A964", VA = "0x108A964")]
		public IgnisNetworkConnectionData(int offlineId)
		{
		}

		[Token(Token = "0x6001E74")]
		[Address(RVA = "0x108A98C", Offset = "0x108A98C", VA = "0x108A98C")]
		public bool IsMasterClient()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E75")]
		[Address(RVA = "0x108A9AC", Offset = "0x108A9AC", VA = "0x108A9AC")]
		public int MasterClientId()
		{
			return default(int);
		}

		[Token(Token = "0x6001E76")]
		[Address(RVA = "0x108A9C8", Offset = "0x108A9C8", VA = "0x108A9C8")]
		public int LocalPlayerServerId()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20006C6")]
	public sealed class IgnisLogger : RGCommon.Logging.ILogger
	{
		[Token(Token = "0x6001E78")]
		[Address(RVA = "0x108AA34", Offset = "0x108AA34", VA = "0x108AA34", Slot = "4")]
		public void Error(string message)
		{
		}

		[Token(Token = "0x6001E79")]
		[Address(RVA = "0x108AB44", Offset = "0x108AB44", VA = "0x108AB44", Slot = "5")]
		public void Warn(string message)
		{
		}

		[Token(Token = "0x6001E7A")]
		[Address(RVA = "0x108AC54", Offset = "0x108AC54", VA = "0x108AC54", Slot = "6")]
		public void Info(string message)
		{
		}

		[Token(Token = "0x6001E7B")]
		[Address(RVA = "0x108AC5C", Offset = "0x108AC5C", VA = "0x108AC5C")]
		public IgnisLogger()
		{
		}
	}
	[Token(Token = "0x20006C7")]
	public class IgnisPhotonRegionSelector : ITickable
	{
		[Token(Token = "0x4002D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PhotonRegionSelector photonRegionSelector;

		[Token(Token = "0x6001E7C")]
		[Address(RVA = "0x108AC64", Offset = "0x108AC64", VA = "0x108AC64")]
		public IgnisPhotonRegionSelector(PhotonRegionSelector photonRegionSelector)
		{
		}

		[Token(Token = "0x6001E7D")]
		[Address(RVA = "0x108AC8C", Offset = "0x108AC8C", VA = "0x108AC8C", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x20006C8")]
	public static class Log
	{
		[Token(Token = "0x6001E7E")]
		[Address(RVA = "0x108ACA8", Offset = "0x108ACA8", VA = "0x108ACA8")]
		[Conditional("IGNIS_DEBUG_VERBOSE")]
		internal static void Trace(string msg)
		{
		}

		[Token(Token = "0x6001E7F")]
		[Address(RVA = "0x108ADB0", Offset = "0x108ADB0", VA = "0x108ADB0")]
		[Conditional("IGNIS_DEBUG_BOT")]
		internal static void BotTrace(string msg)
		{
		}

		[Token(Token = "0x6001E80")]
		[Address(RVA = "0x108979C", Offset = "0x108979C", VA = "0x108979C")]
		internal static void Info(string msg)
		{
		}

		[Token(Token = "0x6001E81")]
		[Address(RVA = "0x108AB4C", Offset = "0x108AB4C", VA = "0x108AB4C")]
		internal static void Warn(string msg)
		{
		}

		[Token(Token = "0x6001E82")]
		[Address(RVA = "0x108AA3C", Offset = "0x108AA3C", VA = "0x108AA3C")]
		internal static void Err(string msg)
		{
		}
	}
	[Token(Token = "0x20006C9")]
	public interface IMultiplayerProtocolVersion : IGameVersionProvider
	{
	}
	[Token(Token = "0x20006CA")]
	public class MultiplayerProtocolVersion : IMultiplayerProtocolVersion, IGameVersionProvider
	{
		[Token(Token = "0x6001E83")]
		[Address(RVA = "0x108AEB8", Offset = "0x108AEB8", VA = "0x108AEB8", Slot = "4")]
		public string GetGameVersionString()
		{
			return null;
		}

		[Token(Token = "0x6001E84")]
		[Address(RVA = "0x108AEF8", Offset = "0x108AEF8", VA = "0x108AEF8")]
		public MultiplayerProtocolVersion()
		{
		}
	}
	[Token(Token = "0x20006CB")]
	public class AutoTestProtocolVersion : IMultiplayerProtocolVersion, IGameVersionProvider
	{
		[Token(Token = "0x6001E85")]
		[Address(RVA = "0x108AF00", Offset = "0x108AF00", VA = "0x108AF00", Slot = "4")]
		public string GetGameVersionString()
		{
			return null;
		}

		[Token(Token = "0x6001E86")]
		[Address(RVA = "0x108AF40", Offset = "0x108AF40", VA = "0x108AF40")]
		public AutoTestProtocolVersion()
		{
		}
	}
	[Token(Token = "0x20006CC")]
	public class ArcadeMultiplayerProtocolVersion : IMultiplayerProtocolVersion, IGameVersionProvider
	{
		[Token(Token = "0x4002D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string multiplayerProtocolVersion;

		[Token(Token = "0x6001E87")]
		[Address(RVA = "0x108AF48", Offset = "0x108AF48", VA = "0x108AF48")]
		public ArcadeMultiplayerProtocolVersion(string multiplayerProtocolVersion)
		{
		}

		[Token(Token = "0x6001E88")]
		[Address(RVA = "0x108AF70", Offset = "0x108AF70", VA = "0x108AF70", Slot = "4")]
		public string GetGameVersionString()
		{
			return null;
		}
	}
	[Token(Token = "0x20006CD")]
	public class NetworkDebugMenu : ITickable
	{
		[Token(Token = "0x4002D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4002D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly NetworkRegionSelector networkRegionSelector;

		[Token(Token = "0x4002D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4002D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4002D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool disconnectAtArenaState;

		[Token(Token = "0x4002D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private ArenaState atArenaState;

		[Token(Token = "0x4002D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool disconnectAtMatchState;

		[Token(Token = "0x4002D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private MatchHandlerState atMatchState;

		[Token(Token = "0x6001E89")]
		[Address(RVA = "0x108AFBC", Offset = "0x108AFBC", VA = "0x108AFBC")]
		public NetworkDebugMenu(IgnisNetworkConnectionData networkConnectionData, NetworkRegionSelector networkRegionSelector, MatchHandlerData matchHandlerData, ArenaGameStateData arenaGameStateData)
		{
		}

		[Token(Token = "0x6001E8A")]
		[Address(RVA = "0x108AFFC", Offset = "0x108AFFC", VA = "0x108AFFC")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug(DebugMenu instance, NetworkConnectionHandler networkConnectionHandler, NetworkRegionSelector networkRegionSelector)
		{
		}

		[Token(Token = "0x6001E8B")]
		[Address(RVA = "0x108B000", Offset = "0x108B000", VA = "0x108B000")]
		private void LeaveRoomAtState(ArenaState arenaState)
		{
		}

		[Token(Token = "0x6001E8C")]
		[Address(RVA = "0x108B010", Offset = "0x108B010", VA = "0x108B010")]
		private void LeaveRoomAtState(MatchHandlerState matchState)
		{
		}

		[Token(Token = "0x6001E8D")]
		[Address(RVA = "0x108B020", Offset = "0x108B020", VA = "0x108B020")]
		private void FindRegion()
		{
		}

		[Token(Token = "0x6001E8E")]
		[Address(RVA = "0x108B11C", Offset = "0x108B11C", VA = "0x108B11C", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x20006CE")]
	public class NetworkIdAllocator
	{
		[Token(Token = "0x4002D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int rangeLower;

		[Token(Token = "0x4002D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] idPool;

		[Token(Token = "0x4002D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int capacity;

		[Token(Token = "0x4002D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int head;

		[Token(Token = "0x4002D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int tail;

		[Token(Token = "0x4002D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int size;

		[Token(Token = "0x6001E8F")]
		[Address(RVA = "0x108B200", Offset = "0x108B200", VA = "0x108B200")]
		public NetworkIdAllocator(int capacity, int idRangeIndex)
		{
		}

		[Token(Token = "0x6001E90")]
		[Address(RVA = "0x108B278", Offset = "0x108B278", VA = "0x108B278")]
		public void ResetIds(int idRangeIndex)
		{
		}

		[Token(Token = "0x6001E91")]
		[Address(RVA = "0x108B368", Offset = "0x108B368", VA = "0x108B368")]
		public int AllocateId()
		{
			return default(int);
		}

		[Token(Token = "0x6001E92")]
		[Address(RVA = "0x108B458", Offset = "0x108B458", VA = "0x108B458")]
		public void DeallocateId(int id)
		{
		}
	}
	[Token(Token = "0x20006CF")]
	public class IdPoolDepleetedException : Exception
	{
		[Token(Token = "0x6001E93")]
		[Address(RVA = "0x108B400", Offset = "0x108B400", VA = "0x108B400")]
		public IdPoolDepleetedException()
		{
		}
	}
	[Token(Token = "0x20006D0")]
	public interface NetworkIdFactory
	{
		[Token(Token = "0x6001E94")]
		int AllocateNetworkId(int player);
	}
	[Token(Token = "0x20006D1")]
	public class PhotonNetworkIdFactory : NetworkIdFactory
	{
		[Token(Token = "0x6001E95")]
		[Address(RVA = "0x108B52C", Offset = "0x108B52C", VA = "0x108B52C", Slot = "4")]
		public int AllocateNetworkId(int player)
		{
			return default(int);
		}

		[Token(Token = "0x6001E96")]
		[Address(RVA = "0x108B584", Offset = "0x108B584", VA = "0x108B584")]
		public PhotonNetworkIdFactory()
		{
		}
	}
	[Token(Token = "0x20006D2")]
	public class NetworkMessageSerializer
	{
		[Token(Token = "0x4002D4A")]
		private const short DEFUALTMESSAGESIZE = 14;

		[Token(Token = "0x6001E97")]
		[Address(RVA = "0x108B58C", Offset = "0x108B58C", VA = "0x108B58C")]
		public object LogMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001E98")]
		[Address(RVA = "0x108B844", Offset = "0x108B844", VA = "0x108B844")]
		public short LogMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001E99")]
		[Address(RVA = "0x108BB3C", Offset = "0x108BB3C", VA = "0x108BB3C")]
		public object ConsoleMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001E9A")]
		[Address(RVA = "0x108BC04", Offset = "0x108BC04", VA = "0x108BC04")]
		public short ConsoleMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001E9B")]
		[Address(RVA = "0x108BD38", Offset = "0x108BD38", VA = "0x108BD38")]
		public object RequestSyncMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001E9C")]
		[Address(RVA = "0x108BE38", Offset = "0x108BE38", VA = "0x108BE38")]
		public short RequestSyncMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001E9D")]
		[Address(RVA = "0x108BF74", Offset = "0x108BF74", VA = "0x108BF74")]
		public object InitGameMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001E9E")]
		[Address(RVA = "0x108C3AC", Offset = "0x108C3AC", VA = "0x108C3AC")]
		public short InitGameMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001E9F")]
		[Address(RVA = "0x108C8B0", Offset = "0x108C8B0", VA = "0x108C8B0")]
		public object RequestInitGameMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EA0")]
		[Address(RVA = "0x108C96C", Offset = "0x108C96C", VA = "0x108C96C")]
		public short RequestInitGameMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EA1")]
		[Address(RVA = "0x108CA54", Offset = "0x108CA54", VA = "0x108CA54")]
		public object SpawnPlayerMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EA2")]
		[Address(RVA = "0x108CCD0", Offset = "0x108CCD0", VA = "0x108CCD0")]
		public short SpawnPlayerMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EA3")]
		[Address(RVA = "0x108CFB8", Offset = "0x108CFB8", VA = "0x108CFB8")]
		public object ReqSpawnPlayerMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EA4")]
		[Address(RVA = "0x108D140", Offset = "0x108D140", VA = "0x108D140")]
		public short ReqSpawnPlayerMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EA5")]
		[Address(RVA = "0x108D338", Offset = "0x108D338", VA = "0x108D338")]
		public object FailedSpawnPlayerMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EA6")]
		[Address(RVA = "0x108D468", Offset = "0x108D468", VA = "0x108D468")]
		public short FailedSpawnPlayerMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EA7")]
		[Address(RVA = "0x108D5C4", Offset = "0x108D5C4", VA = "0x108D5C4")]
		public object StartIntro_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EA8")]
		[Address(RVA = "0x108D690", Offset = "0x108D690", VA = "0x108D690")]
		public short StartIntro_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EA9")]
		[Address(RVA = "0x108D790", Offset = "0x108D790", VA = "0x108D790")]
		public object StartArenaRoundMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EAA")]
		[Address(RVA = "0x108D900", Offset = "0x108D900", VA = "0x108D900")]
		public short StartArenaRoundMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EAB")]
		[Address(RVA = "0x108DAC0", Offset = "0x108DAC0", VA = "0x108DAC0")]
		public object EndArenaRoundMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EAC")]
		[Address(RVA = "0x108DC30", Offset = "0x108DC30", VA = "0x108DC30")]
		public short EndArenaRoundMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EAD")]
		[Address(RVA = "0x108DDD4", Offset = "0x108DDD4", VA = "0x108DDD4")]
		public object ForfeitMatchMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EAE")]
		[Address(RVA = "0x108DED4", Offset = "0x108DED4", VA = "0x108DED4")]
		public short ForfeitMatchMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EAF")]
		[Address(RVA = "0x108E000", Offset = "0x108E000", VA = "0x108E000")]
		public object ForfeitRoundMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EB0")]
		[Address(RVA = "0x108E100", Offset = "0x108E100", VA = "0x108E100")]
		public short ForfeitRoundMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EB1")]
		[Address(RVA = "0x108E22C", Offset = "0x108E22C", VA = "0x108E22C")]
		public object RestartArenaRoundMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EB2")]
		[Address(RVA = "0x108E32C", Offset = "0x108E32C", VA = "0x108E32C")]
		public short RestartArenaRoundMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EB3")]
		[Address(RVA = "0x108E468", Offset = "0x108E468", VA = "0x108E468")]
		public object RematchResponseMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EB4")]
		[Address(RVA = "0x108E534", Offset = "0x108E534", VA = "0x108E534")]
		public short RematchResponseMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EB5")]
		[Address(RVA = "0x108E634", Offset = "0x108E634", VA = "0x108E634")]
		public object GrabMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EB6")]
		[Address(RVA = "0x108E734", Offset = "0x108E734", VA = "0x108E734")]
		public short GrabMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EB7")]
		[Address(RVA = "0x108E860", Offset = "0x108E860", VA = "0x108E860")]
		public object GrabSecondaryMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EB8")]
		[Address(RVA = "0x108E960", Offset = "0x108E960", VA = "0x108E960")]
		public short GrabSecondaryMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EB9")]
		[Address(RVA = "0x108EA8C", Offset = "0x108EA8C", VA = "0x108EA8C")]
		public object DropMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EBA")]
		[Address(RVA = "0x108EC90", Offset = "0x108EC90", VA = "0x108EC90")]
		public short DropMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EBB")]
		[Address(RVA = "0x108EEF4", Offset = "0x108EEF4", VA = "0x108EEF4")]
		public object DropSecondaryMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EBC")]
		[Address(RVA = "0x108EFF4", Offset = "0x108EFF4", VA = "0x108EFF4")]
		public short DropSecondaryMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EBD")]
		[Address(RVA = "0x108F120", Offset = "0x108F120", VA = "0x108F120")]
		public object DeactivateTetherMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EBE")]
		[Address(RVA = "0x108F230", Offset = "0x108F230", VA = "0x108F230")]
		public short DeactivateTetherMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EBF")]
		[Address(RVA = "0x108F36C", Offset = "0x108F36C", VA = "0x108F36C")]
		public object ToolSpawnMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EC0")]
		[Address(RVA = "0x108F4C8", Offset = "0x108F4C8", VA = "0x108F4C8")]
		public short ToolSpawnMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EC1")]
		[Address(RVA = "0x108F618", Offset = "0x108F618", VA = "0x108F618")]
		public object StraightProjectileToolTriggerMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EC2")]
		[Address(RVA = "0x108F9E4", Offset = "0x108F9E4", VA = "0x108F9E4")]
		public short StraightProjectileToolTriggerMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EC3")]
		[Address(RVA = "0x108FD98", Offset = "0x108FD98", VA = "0x108FD98")]
		public object HelixProjectileToolTriggerMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EC4")]
		[Address(RVA = "0x108FEB0", Offset = "0x108FEB0", VA = "0x108FEB0")]
		public short HelixProjectileToolTriggerMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EC5")]
		[Address(RVA = "0x1090020", Offset = "0x1090020", VA = "0x1090020")]
		public object BounceProjectileToolTriggerMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EC6")]
		[Address(RVA = "0x1090138", Offset = "0x1090138", VA = "0x1090138")]
		public short BounceProjectileToolTriggerMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EC7")]
		[Address(RVA = "0x10902A8", Offset = "0x10902A8", VA = "0x10902A8")]
		public object CurveProjectileToolTriggerMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EC8")]
		[Address(RVA = "0x109040C", Offset = "0x109040C", VA = "0x109040C")]
		public short CurveProjectileToolTriggerMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EC9")]
		[Address(RVA = "0x10905D4", Offset = "0x10905D4", VA = "0x10905D4")]
		public object StationaryProjectileTriggerMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001ECA")]
		[Address(RVA = "0x10906FC", Offset = "0x10906FC", VA = "0x10906FC")]
		public short StationaryProjectileTriggerMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001ECB")]
		[Address(RVA = "0x109086C", Offset = "0x109086C", VA = "0x109086C")]
		public object DeployBarrierMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001ECC")]
		[Address(RVA = "0x10909CC", Offset = "0x10909CC", VA = "0x10909CC")]
		public short DeployBarrierMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001ECD")]
		[Address(RVA = "0x1090B4C", Offset = "0x1090B4C", VA = "0x1090B4C")]
		public object ShieldActivationMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001ECE")]
		[Address(RVA = "0x1090C64", Offset = "0x1090C64", VA = "0x1090C64")]
		public short ShieldActivationMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001ECF")]
		[Address(RVA = "0x1090DB0", Offset = "0x1090DB0", VA = "0x1090DB0")]
		public object ShieldDeactivationMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001ED0")]
		[Address(RVA = "0x1090E84", Offset = "0x1090E84", VA = "0x1090E84")]
		public short ShieldDeactivationMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001ED1")]
		[Address(RVA = "0x1090F84", Offset = "0x1090F84", VA = "0x1090F84")]
		public object TimerActivationMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001ED2")]
		[Address(RVA = "0x10910B8", Offset = "0x10910B8", VA = "0x10910B8")]
		public short TimerActivationMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001ED3")]
		[Address(RVA = "0x1091214", Offset = "0x1091214", VA = "0x1091214")]
		public object ProjectileImpactMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001ED4")]
		[Address(RVA = "0x1091348", Offset = "0x1091348", VA = "0x1091348")]
		public short ProjectileImpactMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001ED5")]
		[Address(RVA = "0x1091498", Offset = "0x1091498", VA = "0x1091498")]
		public object ToolImpactMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001ED6")]
		[Address(RVA = "0x10915CC", Offset = "0x10915CC", VA = "0x10915CC")]
		public short ToolImpactMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001ED7")]
		[Address(RVA = "0x109171C", Offset = "0x109171C", VA = "0x109171C")]
		public object ForceFieldImpactMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001ED8")]
		[Address(RVA = "0x1091850", Offset = "0x1091850", VA = "0x1091850")]
		public short ForceFieldImpactMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001ED9")]
		[Address(RVA = "0x10919A0", Offset = "0x10919A0", VA = "0x10919A0")]
		public object WaterImpactMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EDA")]
		[Address(RVA = "0x1091A9C", Offset = "0x1091A9C", VA = "0x1091A9C")]
		public short WaterImpactMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EDB")]
		[Address(RVA = "0x1091BC8", Offset = "0x1091BC8", VA = "0x1091BC8")]
		public object EnvironmentImpactMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EDC")]
		[Address(RVA = "0x1091CC4", Offset = "0x1091CC4", VA = "0x1091CC4")]
		public short EnvironmentImpactMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EDD")]
		[Address(RVA = "0x1091DF0", Offset = "0x1091DF0", VA = "0x1091DF0")]
		public object EnvironmentExitMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EDE")]
		[Address(RVA = "0x1091EEC", Offset = "0x1091EEC", VA = "0x1091EEC")]
		public short EnvironmentExitMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EDF")]
		[Address(RVA = "0x1092018", Offset = "0x1092018", VA = "0x1092018")]
		public object DamageOverTimeImpactEndMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EE0")]
		[Address(RVA = "0x109213C", Offset = "0x109213C", VA = "0x109213C")]
		public short DamageOverTimeImpactEndMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EE1")]
		[Address(RVA = "0x1092278", Offset = "0x1092278", VA = "0x1092278")]
		public object DamageOverTimeImpactStartMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EE2")]
		[Address(RVA = "0x10923BC", Offset = "0x10923BC", VA = "0x10923BC")]
		public short DamageOverTimeImpactStartMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EE3")]
		[Address(RVA = "0x1092520", Offset = "0x1092520", VA = "0x1092520")]
		public object DamageOverTimeCageStartMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EE4")]
		[Address(RVA = "0x10925F4", Offset = "0x10925F4", VA = "0x10925F4")]
		public short DamageOverTimeCageStartMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EE5")]
		[Address(RVA = "0x10926F4", Offset = "0x10926F4", VA = "0x10926F4")]
		public object DamageOverTimeCageEndMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EE6")]
		[Address(RVA = "0x10927C8", Offset = "0x10927C8", VA = "0x10927C8")]
		public short DamageOverTimeCageEndMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EE7")]
		[Address(RVA = "0x10928C8", Offset = "0x10928C8", VA = "0x10928C8")]
		public object Mtm_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EE8")]
		[Address(RVA = "0x1092BE8", Offset = "0x1092BE8", VA = "0x1092BE8")]
		public short Mtm_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EE9")]
		[Address(RVA = "0x1092FCC", Offset = "0x1092FCC", VA = "0x1092FCC")]
		public object DestroyProjectileMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EEA")]
		[Address(RVA = "0x10930B4", Offset = "0x10930B4", VA = "0x10930B4")]
		public short DestroyProjectileMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EEB")]
		[Address(RVA = "0x10931C8", Offset = "0x10931C8", VA = "0x10931C8")]
		public object DestroyToolMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EEC")]
		[Address(RVA = "0x10932B0", Offset = "0x10932B0", VA = "0x10932B0")]
		public short DestroyToolMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EED")]
		[Address(RVA = "0x10933C4", Offset = "0x10933C4", VA = "0x10933C4")]
		public object SynchronizeTimeMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EEE")]
		[Address(RVA = "0x10934A0", Offset = "0x10934A0", VA = "0x10934A0")]
		public short SynchronizeTimeMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EEF")]
		[Address(RVA = "0x10935A0", Offset = "0x10935A0", VA = "0x10935A0")]
		public object PlayGesturesMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EF0")]
		[Address(RVA = "0x10936A4", Offset = "0x10936A4", VA = "0x10936A4")]
		public short PlayGesturesMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EF1")]
		[Address(RVA = "0x10937B8", Offset = "0x10937B8", VA = "0x10937B8")]
		public object StartChargingToolMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EF2")]
		[Address(RVA = "0x10938B0", Offset = "0x10938B0", VA = "0x10938B0")]
		public short StartChargingToolMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EF3")]
		[Address(RVA = "0x10939C0", Offset = "0x10939C0", VA = "0x10939C0")]
		public object StopChargingToolMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EF4")]
		[Address(RVA = "0x1093AB8", Offset = "0x1093AB8", VA = "0x1093AB8")]
		public short StopChargingToolMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EF5")]
		[Address(RVA = "0x1093BC8", Offset = "0x1093BC8", VA = "0x1093BC8")]
		public object PingInfoMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EF6")]
		[Address(RVA = "0x1093C9C", Offset = "0x1093C9C", VA = "0x1093C9C")]
		public short PingInfoMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EF7")]
		[Address(RVA = "0x1093D9C", Offset = "0x1093D9C", VA = "0x1093D9C")]
		public object DeckInfoMessage_Read(StreamBuffer stream, short length)
		{
			return null;
		}

		[Token(Token = "0x6001EF8")]
		[Address(RVA = "0x1093FB4", Offset = "0x1093FB4", VA = "0x1093FB4")]
		public short DeckInfoMessage_Write(StreamBuffer stream, object customType)
		{
			return default(short);
		}

		[Token(Token = "0x6001EF9")]
		[Address(RVA = "0x108B978", Offset = "0x108B978", VA = "0x108B978")]
		private void SerializeBaseMessage(GameMessage msg, byte[] buf, ref int index)
		{
		}

		[Token(Token = "0x6001EFA")]
		[Address(RVA = "0x108B654", Offset = "0x108B654", VA = "0x108B654")]
		private void DeserializeBaseMessage(GameMessage msg, byte[] buf, ref int index)
		{
		}

		[Token(Token = "0x6001EFB")]
		[Address(RVA = "0x108EE44", Offset = "0x108EE44", VA = "0x108EE44")]
		private void SerializeVector(Vector3 vector, byte[] buf, ref int i)
		{
		}

		[Token(Token = "0x6001EFC")]
		[Address(RVA = "0x108EBF8", Offset = "0x108EBF8", VA = "0x108EBF8")]
		private void DeserializeVector(out Vector3 vector, byte[] buf, ref int i)
		{
		}

		[Token(Token = "0x6001EFD")]
		[Address(RVA = "0x1092ED8", Offset = "0x1092ED8", VA = "0x1092ED8")]
		private void SerializeVector(Vector3Short vector, byte[] buf, ref int i)
		{
		}

		[Token(Token = "0x6001EFE")]
		[Address(RVA = "0x1092B04", Offset = "0x1092B04", VA = "0x1092B04")]
		private void DeserializeVector(out Vector3Short vector, byte[] buf, ref int i)
		{
		}

		[Token(Token = "0x6001EFF")]
		[Address(RVA = "0x1092F80", Offset = "0x1092F80", VA = "0x1092F80")]
		private void SerializeVector(Vector3UShort vector, byte[] buf, ref int i)
		{
		}

		[Token(Token = "0x6001F00")]
		[Address(RVA = "0x1092B9C", Offset = "0x1092B9C", VA = "0x1092B9C")]
		private void DeserializeVector(out Vector3UShort vector, byte[] buf, ref int i)
		{
		}

		[Token(Token = "0x6001F01")]
		[Address(RVA = "0x108FC1C", Offset = "0x108FC1C", VA = "0x108FC1C")]
		private void Serialize(ProjectileMessageData projectiledata, byte[] buf, ref int i)
		{
		}

		[Token(Token = "0x6001F02")]
		[Address(RVA = "0x108F7DC", Offset = "0x108F7DC", VA = "0x108F7DC")]
		private ProjectileMessageData Deserialize(byte[] buf, ref int i)
		{
			return default(ProjectileMessageData);
		}

		[Token(Token = "0x6001F03")]
		[Address(RVA = "0x10942A0", Offset = "0x10942A0", VA = "0x10942A0")]
		public void IntArray_Write(List<int> ints, BinaryWriter writer)
		{
		}

		[Token(Token = "0x6001F04")]
		[Address(RVA = "0x109438C", Offset = "0x109438C", VA = "0x109438C")]
		public List<int> IntArray_Read(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001F05")]
		[Address(RVA = "0x108FB54", Offset = "0x108FB54", VA = "0x108FB54")]
		private void SerializeQuaternion(Quaternion rotation, byte[] buf, ref int i)
		{
		}

		[Token(Token = "0x6001F06")]
		[Address(RVA = "0x108F730", Offset = "0x108F730", VA = "0x108F730")]
		private void DeserializeQuaternion(out Quaternion rotation, byte[] buf, ref int i)
		{
		}

		[Token(Token = "0x6001F07")]
		[Address(RVA = "0x1094168", Offset = "0x1094168", VA = "0x1094168")]
		private void SerializeUint(uint u, byte[] b, ref int i)
		{
		}

		[Token(Token = "0x6001F08")]
		[Address(RVA = "0x109420C", Offset = "0x109420C", VA = "0x109420C")]
		private void DeserializeUint(out uint u, byte[] b, ref int i)
		{
		}

		[Token(Token = "0x6001F09")]
		[Address(RVA = "0x108D568", Offset = "0x108D568", VA = "0x108D568")]
		private void SerializeUshort(ushort u, byte[] b, ref int i)
		{
		}

		[Token(Token = "0x6001F0A")]
		[Address(RVA = "0x108D410", Offset = "0x108D410", VA = "0x108D410")]
		private static void DeserializeUshort(out ushort u, byte[] b, ref int i)
		{
		}

		[Token(Token = "0x6001F0B")]
		[Address(RVA = "0x108BA70", Offset = "0x108BA70", VA = "0x108BA70")]
		private void SerializeString(string s, byte[] b, ref int i)
		{
		}

		[Token(Token = "0x6001F0C")]
		[Address(RVA = "0x108B744", Offset = "0x108B744", VA = "0x108B744")]
		private static void DeserializeString(out string s, byte[] b, ref int i)
		{
		}

		[Token(Token = "0x6001F0D")]
		[Address(RVA = "0x108C51C", Offset = "0x108C51C", VA = "0x108C51C")]
		private void SerializeDouble(double d, byte[] b, ref int i)
		{
		}

		[Token(Token = "0x6001F0E")]
		[Address(RVA = "0x108C078", Offset = "0x108C078", VA = "0x108C078")]
		private static void DeserializeDouble(out double d, byte[] b, ref int i)
		{
		}

		[Token(Token = "0x6001F0F")]
		[Address(RVA = "0x108CF20", Offset = "0x108CF20", VA = "0x108CF20")]
		private void SerializeBool(bool b, byte[] buf, ref int i)
		{
		}

		[Token(Token = "0x6001F10")]
		[Address(RVA = "0x108CC30", Offset = "0x108CC30", VA = "0x108CC30")]
		private void DeserializeBool(out bool b, byte[] buf, ref int i)
		{
		}

		[Token(Token = "0x6001F11")]
		[Address(RVA = "0x10944F0", Offset = "0x10944F0", VA = "0x10944F0")]
		public NetworkMessageSerializer()
		{
		}
	}
	[Token(Token = "0x20006D3")]
	public class NetworkServicesDiagnosticsReference : MonoBehaviour
	{
		[Token(Token = "0x4002D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject oculusLogo;

		[Token(Token = "0x4002D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject playFabLogo;

		[Token(Token = "0x4002D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject photonLogo;

		[Token(Token = "0x4002D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject highPingIcon;

		[Token(Token = "0x4002D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI versionText;

		[Token(Token = "0x4002D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool isInitialized;

		[Token(Token = "0x6001F12")]
		[Address(RVA = "0x10944F8", Offset = "0x10944F8", VA = "0x10944F8")]
		public NetworkServicesDiagnosticsReference()
		{
		}
	}
	[Token(Token = "0x20006D4")]
	[CreateAssetMenu(fileName = "NetworkServicesDiagnosticsSettings", menuName = "Settings/NetworkServicesDiagnosticsSettings")]
	public class NetworkServicesDiagnosticsSettings : ScriptableObject
	{
		[Token(Token = "0x4002D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float ConnectingFlashFrequency;

		[Token(Token = "0x6001F13")]
		[Address(RVA = "0x1094500", Offset = "0x1094500", VA = "0x1094500")]
		public NetworkServicesDiagnosticsSettings()
		{
		}
	}
	[Token(Token = "0x20006D5")]
	public class NetworkServicesDiagnosticsData
	{
		[Token(Token = "0x4002D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public NetworkServicesDiagnosticsReference activeDiagnosticsReference;

		[Token(Token = "0x6001F14")]
		[Address(RVA = "0x1094510", Offset = "0x1094510", VA = "0x1094510")]
		public NetworkServicesDiagnosticsData()
		{
		}
	}
	[Token(Token = "0x20006D6")]
	public class NetworkServicesDiagnosticsViewHandler : ITickable
	{
		[Token(Token = "0x20006D7")]
		private enum ServiceStatus
		{
			[Token(Token = "0x4002D61")]
			WAITING,
			[Token(Token = "0x4002D62")]
			CONNECTING,
			[Token(Token = "0x4002D63")]
			CONNECTED,
			[Token(Token = "0x4002D64")]
			ERROR
		}

		[Token(Token = "0x4002D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly NetworkServicesDiagnosticsData networkServicesDiagnosticsData;

		[Token(Token = "0x4002D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly NetworkServicesDiagnosticsSettings networkServicesDiagnosticsSettings;

		[Token(Token = "0x4002D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PlatformLoginData platformLoginData;

		[Token(Token = "0x4002D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly LoginData loginData;

		[Token(Token = "0x4002D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4002D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ErrorMessageData errorMessageData;

		[Token(Token = "0x4002D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly BadPingDetectionData badPingDetectionData;

		[Token(Token = "0x4002D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool isShowingOculus;

		[Token(Token = "0x4002D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool isShowingPlayFab;

		[Token(Token = "0x4002D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		private bool isShowingPhoton;

		[Token(Token = "0x4002D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		private bool isShowingPingWarning;

		[Token(Token = "0x4002D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool hasShowPingWarningDialog;

		[Token(Token = "0x6001F15")]
		[Address(RVA = "0x1094518", Offset = "0x1094518", VA = "0x1094518")]
		public NetworkServicesDiagnosticsViewHandler(NetworkServicesDiagnosticsData networkServicesDiagnosticsData, NetworkServicesDiagnosticsSettings networkServicesDiagnosticsSettings, PlatformLoginData platformLoginData, LoginData loginData, IgnisNetworkConnectionData networkConnectionData, ErrorMessageData errorMessageData, MenuStateData menuStateData, BadPingDetectionData badPingDetectionData)
		{
		}

		[Token(Token = "0x6001F16")]
		[Address(RVA = "0x1094580", Offset = "0x1094580", VA = "0x1094580")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6001F17")]
		[Address(RVA = "0x1094620", Offset = "0x1094620", VA = "0x1094620", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001F18")]
		[Address(RVA = "0x1094A94", Offset = "0x1094A94", VA = "0x1094A94")]
		private bool ShouldShowPingWarning()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F19")]
		[Address(RVA = "0x10949D4", Offset = "0x10949D4", VA = "0x10949D4")]
		private bool ShouldShow(ServiceStatus status)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F1A")]
		[Address(RVA = "0x10949B0", Offset = "0x10949B0", VA = "0x10949B0")]
		private ServiceStatus GetPhotonStatus(NetworkConnectionState networkConnectionState)
		{
			return default(ServiceStatus);
		}

		[Token(Token = "0x6001F1B")]
		[Address(RVA = "0x109498C", Offset = "0x109498C", VA = "0x109498C")]
		private ServiceStatus GetPlayFabStatus(LoginData.LoginState state)
		{
			return default(ServiceStatus);
		}

		[Token(Token = "0x6001F1C")]
		[Address(RVA = "0x1094968", Offset = "0x1094968", VA = "0x1094968")]
		private ServiceStatus GetOculusStatus(PlatformLoginState state)
		{
			return default(ServiceStatus);
		}
	}
	[Token(Token = "0x20006D8")]
	internal enum MessageType
	{
		[Token(Token = "0x4002D66")]
		DeckInfoMessage = 204,
		[Token(Token = "0x4002D67")]
		PingInfoMessage = 205,
		[Token(Token = "0x4002D68")]
		GrabSecondaryMessage = 206,
		[Token(Token = "0x4002D69")]
		DropSecondaryMessage = 207,
		[Token(Token = "0x4002D6A")]
		WaterImpactMessage = 208,
		[Token(Token = "0x4002D6B")]
		PlayGestureMessage = 209,
		[Token(Token = "0x4002D6C")]
		RequestInitGame = 210,
		[Token(Token = "0x4002D6D")]
		SynchronizeTime = 211,
		[Token(Token = "0x4002D6E")]
		DeactivateTether = 212,
		[Token(Token = "0x4002D6F")]
		RematchResponse = 213,
		[Token(Token = "0x4002D70")]
		ForfeitRound = 214,
		[Token(Token = "0x4002D71")]
		ShieldDeactivationMessage = 215,
		[Token(Token = "0x4002D72")]
		DestroyToolMessage = 216,
		[Token(Token = "0x4002D73")]
		RequestSyncMessage = 217,
		[Token(Token = "0x4002D74")]
		DestroyProjectileMessage = 219,
		[Token(Token = "0x4002D75")]
		StationaryProjectileTriggerMessage = 220,
		[Token(Token = "0x4002D76")]
		MovementTracking = 222,
		[Token(Token = "0x4002D77")]
		CurveToolTriggerMessage = 224,
		[Token(Token = "0x4002D78")]
		StartAndSetupToolSelection = 225,
		[Token(Token = "0x4002D79")]
		BounceProjectileToolTriggerMessage = 226,
		[Token(Token = "0x4002D7A")]
		FailedToSpawnPlayer = 227,
		[Token(Token = "0x4002D7B")]
		DeployBarrierMessage = 228,
		[Token(Token = "0x4002D7C")]
		ForfeitMatch = 229,
		[Token(Token = "0x4002D7D")]
		RestartArenaMatch = 230,
		[Token(Token = "0x4002D7E")]
		GranadeActivationMessage = 231,
		[Token(Token = "0x4002D7F")]
		ConsoleMessage = 232,
		[Token(Token = "0x4002D80")]
		ForceFieldImpactMessage = 233,
		[Token(Token = "0x4002D81")]
		ToolImpactMessage = 234,
		[Token(Token = "0x4002D82")]
		ShieldActivationMessage = 235,
		[Token(Token = "0x4002D83")]
		EnvironmentExitMessage = 236,
		[Token(Token = "0x4002D84")]
		InitGame = 237,
		[Token(Token = "0x4002D85")]
		DamageOverTimeCageEndMessage = 238,
		[Token(Token = "0x4002D86")]
		DamageOverTimeCageStartMessage = 239,
		[Token(Token = "0x4002D87")]
		DamageOverTimeImpactEndMessage = 240,
		[Token(Token = "0x4002D88")]
		DamageOverTimeImpactStartMessage = 241,
		[Token(Token = "0x4002D89")]
		StopChargingToolMessage = 242,
		[Token(Token = "0x4002D8A")]
		EndArenaRound = 243,
		[Token(Token = "0x4002D8B")]
		StartArenaRound = 244,
		[Token(Token = "0x4002D8C")]
		HelixProjectileToolTriggerMessage = 245,
		[Token(Token = "0x4002D8D")]
		StartChargingTool = 246,
		[Token(Token = "0x4002D8E")]
		EnvironmentImpactMessage = 247,
		[Token(Token = "0x4002D8F")]
		ProjetileImapctMessage = 248,
		[Token(Token = "0x4002D90")]
		StraightProjetileToolTrigger = 249,
		[Token(Token = "0x4002D91")]
		ToolSpawn = 250,
		[Token(Token = "0x4002D92")]
		ReqSpawnPlayer = 251,
		[Token(Token = "0x4002D93")]
		SpawnPlayer = 252,
		[Token(Token = "0x4002D94")]
		Drop = 253,
		[Token(Token = "0x4002D95")]
		Grab = 254,
		[Token(Token = "0x4002D96")]
		Log = 255
	}
	[Token(Token = "0x20006D9")]
	public class PhotonMessageRegistry
	{
		[Token(Token = "0x6001F1D")]
		[Address(RVA = "0x1094AC4", Offset = "0x1094AC4", VA = "0x1094AC4")]
		public void Register()
		{
		}

		[Token(Token = "0x6001F1E")]
		[Address(RVA = "0x1096BCC", Offset = "0x1096BCC", VA = "0x1096BCC")]
		public PhotonMessageRegistry()
		{
		}
	}
	[Token(Token = "0x20006DA")]
	public class PhotonNetworkMessageReciver : IOnEventCallback
	{
		[Token(Token = "0x4002D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameMessageData gameMessageData;

		[Token(Token = "0x4002D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4002D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly GameMessageUploadHandlerData gameMessageUploadHandlerData;

		[Token(Token = "0x6001F1F")]
		[Address(RVA = "0x1096BD4", Offset = "0x1096BD4", VA = "0x1096BD4")]
		public PhotonNetworkMessageReciver(GameMessageData gameMessageData, IRoomTimeProvider roomTimeProvider, GameMessageUploadHandlerData gameMessageUploadHandlerData)
		{
		}

		[Token(Token = "0x6001F20")]
		[Address(RVA = "0x1096C5C", Offset = "0x1096C5C", VA = "0x1096C5C", Slot = "4")]
		private void Photon.Realtime.IOnEventCallback.OnEvent(EventData eventData)
		{
		}

		[Token(Token = "0x6001F21")]
		[Address(RVA = "0x1096E3C", Offset = "0x1096E3C", VA = "0x1096E3C")]
		[Conditional("IGNIS_DEBUG_VERBOSE")]
		private void LogTraceMessages(GameMessage gameMessage)
		{
		}

		[Token(Token = "0x6001F22")]
		[Address(RVA = "0x1096ED8", Offset = "0x1096ED8", VA = "0x1096ED8")]
		public void OnDestroy()
		{
		}
	}
	[Token(Token = "0x20006DB")]
	[HelpURL("https://doc.photonengine.com/en-us/pun/v2/gameplay/synchronization-and-state")]
	[AddComponentMenu("Photon Networking/Photon Transform View")]
	public class PhotonTransformViewRG : MonoBehaviour, IPunObservable
	{
		[Token(Token = "0x4002D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_Distance;

		[Token(Token = "0x4002D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_Angle;

		[Token(Token = "0x4002D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private PhotonView m_PhotonView;

		[Token(Token = "0x4002D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 m_Direction;

		[Token(Token = "0x4002D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 m_NetworkPosition;

		[Token(Token = "0x4002D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 m_StoredPosition;

		[Token(Token = "0x4002DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion m_NetworkRotation;

		[Token(Token = "0x4002DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool m_SynchronizePosition;

		[Token(Token = "0x4002DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool m_SynchronizeRotation;

		[Token(Token = "0x4002DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		public bool m_SynchronizeScale;

		[Token(Token = "0x4002DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
		private bool m_firstTake;

		[Token(Token = "0x6001F23")]
		[Address(RVA = "0x1096F30", Offset = "0x1096F30", VA = "0x1096F30")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001F24")]
		[Address(RVA = "0x1096FE0", Offset = "0x1096FE0", VA = "0x1096FE0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001F25")]
		[Address(RVA = "0x1096FEC", Offset = "0x1096FEC", VA = "0x1096FEC")]
		public void Update()
		{
		}

		[Token(Token = "0x6001F26")]
		[Address(RVA = "0x10972F8", Offset = "0x10972F8", VA = "0x10972F8", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6001F27")]
		[Address(RVA = "0x10977D0", Offset = "0x10977D0", VA = "0x10977D0")]
		public PhotonTransformViewRG()
		{
		}
	}
	[Token(Token = "0x20006DC")]
	public class PingInformationData
	{
		[Token(Token = "0x4002DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<int, int> playerPingValues;

		[Token(Token = "0x6001F28")]
		[Address(RVA = "0x10977E0", Offset = "0x10977E0", VA = "0x10977E0")]
		public PingInformationData()
		{
		}
	}
	[Token(Token = "0x20006DD")]
	public class PingInformationHandler : ITickable
	{
		[Token(Token = "0x4002DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PingInformationData pingInformationData;

		[Token(Token = "0x4002DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly NetworkData networkData;

		[Token(Token = "0x4002DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x4002DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4002DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IMessageSender messageSender;

		[Token(Token = "0x4002DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly GameData gameData;

		[Token(Token = "0x4002DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float lastSyncMessageSentTimestamp;

		[Token(Token = "0x4002DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly PlayFabUserSettingsData playFabUserSettingsData;

		[Token(Token = "0x6001F29")]
		[Address(RVA = "0x109785C", Offset = "0x109785C", VA = "0x109785C")]
		public PingInformationHandler(PingInformationData pingInformationData, NetworkData networkData, ITimeProvider timeProvider, GameMessageFactory gameMessageFactory, IMessageSender messageSender, GameData gameData, PlayFabUserSettingsData playFabUserSettingsData)
		{
		}

		[Token(Token = "0x6001F2A")]
		[Address(RVA = "0x10978C8", Offset = "0x10978C8", VA = "0x10978C8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001F2B")]
		[Address(RVA = "0x1097AB8", Offset = "0x1097AB8", VA = "0x1097AB8")]
		public GameMessageInvokationResult OnPingInfoMessage(PingInfoMessage message)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x20006DE")]
	public class RoomTimeReSyncData
	{
		[Token(Token = "0x4002DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool newRoomTimeSyncReceived;

		[Token(Token = "0x4002DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double roomCreationTime;

		[Token(Token = "0x4002DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool clockSyncIssueDetectedThisFrame;

		[Token(Token = "0x6001F2C")]
		[Address(RVA = "0x1097B28", Offset = "0x1097B28", VA = "0x1097B28")]
		public RoomTimeReSyncData()
		{
		}
	}
	[Token(Token = "0x20006DF")]
	public class RoomTimeReSyncHandler : ITickable
	{
		[Token(Token = "0x4002DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly RoomTimeReSyncData roomTimeReSyncData;

		[Token(Token = "0x4002DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4002DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4002DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4002DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4002DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x4002DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4002DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4002DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4002DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private double lastSyncMessageSentTimestamp;

		[Token(Token = "0x4002DBB")]
		private const float SHORTEST_SYNC_INTERVAL = 10f;

		[Token(Token = "0x4002DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ProfilerMarker tickProfileMarker;

		[Token(Token = "0x6001F2D")]
		[Address(RVA = "0x1097B30", Offset = "0x1097B30", VA = "0x1097B30")]
		public RoomTimeReSyncHandler(RoomTimeReSyncData roomTimeReSyncData, IRoomTimeProvider roomTimeProvider, MessageSender messageSender, IgnisNetworkConnectionData networkConnectionData, MatchHandlerData matchHandlerData, ITimeProvider timeProvider, ArenaGameStateData arenaGameStateData, GameMessageFactory gameMessageFactory, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x6001F2E")]
		[Address(RVA = "0x1097BF4", Offset = "0x1097BF4", VA = "0x1097BF4", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001F2F")]
		[Address(RVA = "0x1097C14", Offset = "0x1097C14", VA = "0x1097C14")]
		private void SetRoomTimeIfSyncMessageReceived()
		{
		}

		[Token(Token = "0x6001F30")]
		[Address(RVA = "0x1097E30", Offset = "0x1097E30", VA = "0x1097E30")]
		private void SendSyncMessageIfOutOfSyncAndMaster()
		{
		}

		[Token(Token = "0x6001F31")]
		[Address(RVA = "0x1097F70", Offset = "0x1097F70", VA = "0x1097F70")]
		private void RecomputeRoomTimeIfPrecisionIsLowBeforeMatch()
		{
		}

		[Token(Token = "0x6001F32")]
		[Address(RVA = "0x1098514", Offset = "0x1098514", VA = "0x1098514")]
		private void SendSyncMessage(double roomCreationTime, string reason)
		{
		}

		[Token(Token = "0x6001F33")]
		[Address(RVA = "0x1098160", Offset = "0x1098160", VA = "0x1098160")]
		private Tracking.TrackingEvent CreateTrackingEvent(string action)
		{
			return null;
		}
	}
	[Token(Token = "0x20006E0")]
	public class VoipData
	{
		[Token(Token = "0x4002DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Queue<PhotonVoiceRequest> photonVoiceRequests;

		[Token(Token = "0x6001F34")]
		[Address(RVA = "0x109871C", Offset = "0x109871C", VA = "0x109871C")]
		public VoipData()
		{
		}
	}
	[Token(Token = "0x20006E1")]
	public class PhotonVoiceRequest
	{
		[Token(Token = "0x4002DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int id;

		[Token(Token = "0x4002DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Transform voiceParent;

		[Token(Token = "0x4002DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly bool spawnVoiceRecorder;

		[Token(Token = "0x4002DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly int owner;

		[Token(Token = "0x4002DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly bool shouldRemoveSource;

		[Token(Token = "0x6001F35")]
		[Address(RVA = "0x1098798", Offset = "0x1098798", VA = "0x1098798")]
		public PhotonVoiceRequest(int id, Transform voiceParent, bool spawnVoiceRecorder, int owner, bool shouldRemoveSource)
		{
		}

		[Token(Token = "0x6001F36")]
		[Address(RVA = "0x10987F0", Offset = "0x10987F0", VA = "0x10987F0")]
		public static PhotonVoiceRequest RequestVoiceRecorder(int id, Transform voiceParent, int owner)
		{
			return null;
		}

		[Token(Token = "0x6001F37")]
		[Address(RVA = "0x1098878", Offset = "0x1098878", VA = "0x1098878")]
		public static PhotonVoiceRequest RequestVoiceSource(int id, Transform voiceParent, int owner)
		{
			return null;
		}

		[Token(Token = "0x6001F38")]
		[Address(RVA = "0x10988FC", Offset = "0x10988FC", VA = "0x10988FC")]
		public static PhotonVoiceRequest RequestRemoveVoiceSource(int id)
		{
			return null;
		}
	}
	[Token(Token = "0x20006E2")]
	public class VoipHandler : ITickable
	{
		[Token(Token = "0x4002DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly VoipData voipData;

		[Token(Token = "0x4002DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PhotonVoiceSettings photonVoiceSettings;

		[Token(Token = "0x4002DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly FeaturePermissionData featurePermissionData;

		[Token(Token = "0x4002DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IPlatformFactory platformFactory;

		[Token(Token = "0x4002DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4002DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IgnisNetworkConnectionData ignisNetworkConnectionData;

		[Token(Token = "0x4002DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4002DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<PhotonVoiceReference> voiceReference;

		[Token(Token = "0x4002DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Recorder voiceRecorder;

		[Token(Token = "0x6001F39")]
		[Address(RVA = "0x1098974", Offset = "0x1098974", VA = "0x1098974")]
		public VoipHandler(VoipData voipData, PhotonVoiceSettings photonVoiceSettings, FeaturePermissionData featurePermissionData, IPlatformFactory platformFactory, LocalPersistentData localPersistentData, IgnisNetworkConnectionData ignisNetworkConnectionData, AutoSpectateData autoSpectateData)
		{
		}

		[Token(Token = "0x6001F3A")]
		[Address(RVA = "0x1098A44", Offset = "0x1098A44", VA = "0x1098A44", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001F3B")]
		[Address(RVA = "0x1098FAC", Offset = "0x1098FAC", VA = "0x1098FAC")]
		private void SetupPhotonVoice(int id, Transform voiceParent, bool spawnVoiceRecorder, int owner)
		{
		}

		[Token(Token = "0x6001F3C")]
		[Address(RVA = "0x1098E64", Offset = "0x1098E64", VA = "0x1098E64")]
		private void RemovePhotonSource(int actorId)
		{
		}

		[Token(Token = "0x6001F3D")]
		[Address(RVA = "0x1098CC4", Offset = "0x1098CC4", VA = "0x1098CC4")]
		private void CleanUpPhotonVoice()
		{
		}
	}
	[Token(Token = "0x20006E3")]
	public class OnboardingGameStateData
	{
		[Token(Token = "0x4002DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool showPointer;

		[Token(Token = "0x4002DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool isStartedByUser;

		[Token(Token = "0x4002DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool isInLastPart;

		[Token(Token = "0x4002DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool isOnboardingInfoViewActive;

		[Token(Token = "0x6001F3E")]
		[Address(RVA = "0x10991E8", Offset = "0x10991E8", VA = "0x10991E8")]
		public OnboardingGameStateData()
		{
		}
	}
	[Token(Token = "0x20006E4")]
	public class OnboardingGameState : IGameState
	{
		[Serializable]
		[Token(Token = "0x20006E5")]
		private class OnboardingSaveData : SaveData
		{
			[Token(Token = "0x4002E0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool part1Done;

			[Token(Token = "0x4002E10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool part1CageDone;

			[Token(Token = "0x4002E11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
			public bool part1DodgingDone;

			[Token(Token = "0x4002E12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
			public bool part2Done;

			[Token(Token = "0x4002E13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool part3Done;

			[Token(Token = "0x4002E14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			public bool part4Done;

			[Token(Token = "0x4002E15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
			public bool part5Done;

			[Token(Token = "0x6001F77")]
			[Address(RVA = "0x1099A94", Offset = "0x1099A94", VA = "0x1099A94")]
			public OnboardingSaveData()
			{
			}
		}

		[Token(Token = "0x20006E6")]
		[CompilerGenerated]
		private sealed class <TickMainCoroutine>d__64 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x4002E19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private bool <loggedIn>5__2;

			[Token(Token = "0x17000119")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F7B")]
				[Address(RVA = "0x109C378", Offset = "0x109C378", VA = "0x109C378", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700011A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F7D")]
				[Address(RVA = "0x109C3C0", Offset = "0x109C3C0", VA = "0x109C3C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F78")]
			[Address(RVA = "0x1099854", Offset = "0x1099854", VA = "0x1099854")]
			[DebuggerHidden]
			public <TickMainCoroutine>d__64(int <>1__state)
			{
			}

			[Token(Token = "0x6001F79")]
			[Address(RVA = "0x109BAD8", Offset = "0x109BAD8", VA = "0x109BAD8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F7A")]
			[Address(RVA = "0x109BADC", Offset = "0x109BADC", VA = "0x109BADC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F7C")]
			[Address(RVA = "0x109C380", Offset = "0x109C380", VA = "0x109C380", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006E7")]
		[CompilerGenerated]
		private sealed class <SkipOnboarding>d__65 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x1700011B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F81")]
				[Address(RVA = "0x109C5B4", Offset = "0x109C5B4", VA = "0x109C5B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700011C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F83")]
				[Address(RVA = "0x109C5FC", Offset = "0x109C5FC", VA = "0x109C5FC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F7E")]
			[Address(RVA = "0x10998E4", Offset = "0x10998E4", VA = "0x10998E4")]
			[DebuggerHidden]
			public <SkipOnboarding>d__65(int <>1__state)
			{
			}

			[Token(Token = "0x6001F7F")]
			[Address(RVA = "0x109C3C8", Offset = "0x109C3C8", VA = "0x109C3C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F80")]
			[Address(RVA = "0x109C3CC", Offset = "0x109C3CC", VA = "0x109C3CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F82")]
			[Address(RVA = "0x109C5BC", Offset = "0x109C5BC", VA = "0x109C5BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006E8")]
		[CompilerGenerated]
		private sealed class <HideAndRemovePopup>d__67 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x4002E20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public OnboardingTextBubbleReferences references;

			[Token(Token = "0x1700011D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F87")]
				[Address(RVA = "0x109C6F0", Offset = "0x109C6F0", VA = "0x109C6F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700011E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F89")]
				[Address(RVA = "0x109C738", Offset = "0x109C738", VA = "0x109C738", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F84")]
			[Address(RVA = "0x10999C4", Offset = "0x10999C4", VA = "0x10999C4")]
			[DebuggerHidden]
			public <HideAndRemovePopup>d__67(int <>1__state)
			{
			}

			[Token(Token = "0x6001F85")]
			[Address(RVA = "0x109C604", Offset = "0x109C604", VA = "0x109C604", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F86")]
			[Address(RVA = "0x109C608", Offset = "0x109C608", VA = "0x109C608", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F88")]
			[Address(RVA = "0x109C6F8", Offset = "0x109C6F8", VA = "0x109C6F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006E9")]
		[CompilerGenerated]
		private sealed class <HandleShowingWelcomePopup>d__78 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x4002E24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private OnboardingTextBubbleReferences <middlePopupTextBubble>5__2;

			[Token(Token = "0x4002E25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private OnboardingButtonReferences <startButtonReferences>5__3;

			[Token(Token = "0x1700011F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F8D")]
				[Address(RVA = "0x109CC18", Offset = "0x109CC18", VA = "0x109CC18", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000120")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F8F")]
				[Address(RVA = "0x109CC60", Offset = "0x109CC60", VA = "0x109CC60", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F8A")]
			[Address(RVA = "0x109A698", Offset = "0x109A698", VA = "0x109A698")]
			[DebuggerHidden]
			public <HandleShowingWelcomePopup>d__78(int <>1__state)
			{
			}

			[Token(Token = "0x6001F8B")]
			[Address(RVA = "0x109C740", Offset = "0x109C740", VA = "0x109C740", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F8C")]
			[Address(RVA = "0x109C744", Offset = "0x109C744", VA = "0x109C744", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F8E")]
			[Address(RVA = "0x109CC20", Offset = "0x109CC20", VA = "0x109CC20", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006EA")]
		[CompilerGenerated]
		private sealed class <HandleIntroAnimation>d__82 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x17000121")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F93")]
				[Address(RVA = "0x109CD30", Offset = "0x109CD30", VA = "0x109CD30", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000122")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F95")]
				[Address(RVA = "0x109CD78", Offset = "0x109CD78", VA = "0x109CD78", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F90")]
			[Address(RVA = "0x109A744", Offset = "0x109A744", VA = "0x109A744")]
			[DebuggerHidden]
			public <HandleIntroAnimation>d__82(int <>1__state)
			{
			}

			[Token(Token = "0x6001F91")]
			[Address(RVA = "0x109CC68", Offset = "0x109CC68", VA = "0x109CC68", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F92")]
			[Address(RVA = "0x109CC6C", Offset = "0x109CC6C", VA = "0x109CC6C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F94")]
			[Address(RVA = "0x109CD38", Offset = "0x109CD38", VA = "0x109CD38", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006EB")]
		[CompilerGenerated]
		private sealed class <AnimateTextBubble>d__83 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x4002E2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AnimationStateData animation;

			[Token(Token = "0x17000123")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F99")]
				[Address(RVA = "0x109CE00", Offset = "0x109CE00", VA = "0x109CE00", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000124")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F9B")]
				[Address(RVA = "0x109CE48", Offset = "0x109CE48", VA = "0x109CE48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F96")]
			[Address(RVA = "0x109A7E0", Offset = "0x109A7E0", VA = "0x109A7E0")]
			[DebuggerHidden]
			public <AnimateTextBubble>d__83(int <>1__state)
			{
			}

			[Token(Token = "0x6001F97")]
			[Address(RVA = "0x109CD80", Offset = "0x109CD80", VA = "0x109CD80", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F98")]
			[Address(RVA = "0x109CD84", Offset = "0x109CD84", VA = "0x109CD84", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F9A")]
			[Address(RVA = "0x109CE08", Offset = "0x109CE08", VA = "0x109CE08", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006EC")]
		[CompilerGenerated]
		private sealed class <TickCoroutinePartOne>d__94 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x4002E30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private OnboardingTextBubbleReferences <leftHandTextBubble>5__2;

			[Token(Token = "0x4002E31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private OnboardingTextBubbleReferences <rightHandTextBubble>5__3;

			[Token(Token = "0x4002E32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private OnboardingTextBubbleReferences <toolTextBubble>5__4;

			[Token(Token = "0x4002E33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private OnboardingTextBubbleReferences <middlePopupTextBubble>5__5;

			[Token(Token = "0x17000125")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F9F")]
				[Address(RVA = "0x109D0E4", Offset = "0x109D0E4", VA = "0x109D0E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000126")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FA1")]
				[Address(RVA = "0x109D12C", Offset = "0x109D12C", VA = "0x109D12C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F9C")]
			[Address(RVA = "0x109ADF8", Offset = "0x109ADF8", VA = "0x109ADF8")]
			[DebuggerHidden]
			public <TickCoroutinePartOne>d__94(int <>1__state)
			{
			}

			[Token(Token = "0x6001F9D")]
			[Address(RVA = "0x109CE50", Offset = "0x109CE50", VA = "0x109CE50", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F9E")]
			[Address(RVA = "0x109CE54", Offset = "0x109CE54", VA = "0x109CE54", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FA0")]
			[Address(RVA = "0x109D0EC", Offset = "0x109D0EC", VA = "0x109D0EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006ED")]
		[CompilerGenerated]
		private sealed class <HandleSqueezeHands>d__95 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x4002E37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public OnboardingTextBubbleReferences rightHandTextBubble;

			[Token(Token = "0x4002E38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public OnboardingTextBubbleReferences middlePopupTextBubble;

			[Token(Token = "0x4002E39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public OnboardingTextBubbleReferences leftHandTextBubble;

			[Token(Token = "0x17000127")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001FA5")]
				[Address(RVA = "0x109D570", Offset = "0x109D570", VA = "0x109D570", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000128")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FA7")]
				[Address(RVA = "0x109D5B8", Offset = "0x109D5B8", VA = "0x109D5B8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FA2")]
			[Address(RVA = "0x109AEA8", Offset = "0x109AEA8", VA = "0x109AEA8")]
			[DebuggerHidden]
			public <HandleSqueezeHands>d__95(int <>1__state)
			{
			}

			[Token(Token = "0x6001FA3")]
			[Address(RVA = "0x109D134", Offset = "0x109D134", VA = "0x109D134", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FA4")]
			[Address(RVA = "0x109D138", Offset = "0x109D138", VA = "0x109D138", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FA6")]
			[Address(RVA = "0x109D578", Offset = "0x109D578", VA = "0x109D578", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006EE")]
		[CompilerGenerated]
		private sealed class <WaitForHandSqueeze>d__96 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x4002E3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public OnboardingTextBubbleReferences bubbleTarget;

			[Token(Token = "0x4002E3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform handTarget;

			[Token(Token = "0x4002E3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool isRightHand;

			[Token(Token = "0x4002E40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public HandInput hand;

			[Token(Token = "0x4002E41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private bool <squeezedHand>5__2;

			[Token(Token = "0x17000129")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001FAB")]
				[Address(RVA = "0x109E800", Offset = "0x109E800", VA = "0x109E800", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FAD")]
				[Address(RVA = "0x109E848", Offset = "0x109E848", VA = "0x109E848", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FA8")]
			[Address(RVA = "0x109E5C0", Offset = "0x109E5C0", VA = "0x109E5C0")]
			[DebuggerHidden]
			public <WaitForHandSqueeze>d__96(int <>1__state)
			{
			}

			[Token(Token = "0x6001FA9")]
			[Address(RVA = "0x109E5E8", Offset = "0x109E5E8", VA = "0x109E5E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FAA")]
			[Address(RVA = "0x109E5EC", Offset = "0x109E5EC", VA = "0x109E5EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FAC")]
			[Address(RVA = "0x109E808", Offset = "0x109E808", VA = "0x109E808", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006EF")]
		[CompilerGenerated]
		private sealed class <HandleGrabGun>d__97 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x4002E45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public OnboardingTextBubbleReferences toolTextBubble;

			[Token(Token = "0x4002E46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public OnboardingTextBubbleReferences middlePopupTextBubble;

			[Token(Token = "0x4002E47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool <isShowingSqueezeHint>5__2;

			[Token(Token = "0x4002E48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <elapsedTime>5__3;

			[Token(Token = "0x4002E49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <progress>5__4;

			[Token(Token = "0x4002E4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <duration>5__5;

			[Token(Token = "0x1700012B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001FB1")]
				[Address(RVA = "0x109EFB0", Offset = "0x109EFB0", VA = "0x109EFB0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FB3")]
				[Address(RVA = "0x109EFF8", Offset = "0x109EFF8", VA = "0x109EFF8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FAE")]
			[Address(RVA = "0x109E850", Offset = "0x109E850", VA = "0x109E850")]
			[DebuggerHidden]
			public <HandleGrabGun>d__97(int <>1__state)
			{
			}

			[Token(Token = "0x6001FAF")]
			[Address(RVA = "0x109E878", Offset = "0x109E878", VA = "0x109E878", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FB0")]
			[Address(RVA = "0x109E87C", Offset = "0x109E87C", VA = "0x109E87C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FB2")]
			[Address(RVA = "0x109EFB8", Offset = "0x109EFB8", VA = "0x109EFB8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006F0")]
		[CompilerGenerated]
		private sealed class <HandleFireGun>d__98 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x4002E4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public OnboardingTextBubbleReferences middlePopupTextBubble;

			[Token(Token = "0x4002E4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public OnboardingTextBubbleReferences rightHandTextBubble;

			[Token(Token = "0x4002E50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public OnboardingTextBubbleReferences leftHandTextBubble;

			[Token(Token = "0x4002E51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private bool <isShowingTextBubble>5__2;

			[Token(Token = "0x1700012D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001FB7")]
				[Address(RVA = "0x109F888", Offset = "0x109F888", VA = "0x109F888", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FB9")]
				[Address(RVA = "0x109F8D0", Offset = "0x109F8D0", VA = "0x109F8D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FB4")]
			[Address(RVA = "0x109F000", Offset = "0x109F000", VA = "0x109F000")]
			[DebuggerHidden]
			public <HandleFireGun>d__98(int <>1__state)
			{
			}

			[Token(Token = "0x6001FB5")]
			[Address(RVA = "0x109F028", Offset = "0x109F028", VA = "0x109F028", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FB6")]
			[Address(RVA = "0x109F02C", Offset = "0x109F02C", VA = "0x109F02C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FB8")]
			[Address(RVA = "0x109F890", Offset = "0x109F890", VA = "0x109F890", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006F1")]
		[CompilerGenerated]
		private sealed class <HandleDropGun>d__106 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x4002E55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public OnboardingTextBubbleReferences gunTextBubble;

			[Token(Token = "0x4002E56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public OnboardingTextBubbleReferences middlePopupTextBubble;

			[Token(Token = "0x4002E57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool <toolAlive>5__2;

			[Token(Token = "0x1700012F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001FBD")]
				[Address(RVA = "0x109FF08", Offset = "0x109FF08", VA = "0x109FF08", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000130")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FBF")]
				[Address(RVA = "0x109FF50", Offset = "0x109FF50", VA = "0x109FF50", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FBA")]
			[Address(RVA = "0x109F8D8", Offset = "0x109F8D8", VA = "0x109F8D8")]
			[DebuggerHidden]
			public <HandleDropGun>d__106(int <>1__state)
			{
			}

			[Token(Token = "0x6001FBB")]
			[Address(RVA = "0x109F900", Offset = "0x109F900", VA = "0x109F900", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FBC")]
			[Address(RVA = "0x109F904", Offset = "0x109F904", VA = "0x109F904", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FBE")]
			[Address(RVA = "0x109FF10", Offset = "0x109FF10", VA = "0x109FF10", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006F2")]
		[CompilerGenerated]
		private sealed class <TickCoroutinePartFive>d__111 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x4002E5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private OnboardingTextBubbleReferences <middlePopupTextBubble>5__2;

			[Token(Token = "0x4002E5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <nameHasBeenChanged>5__3;

			[Token(Token = "0x17000131")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001FC3")]
				[Address(RVA = "0x10A03DC", Offset = "0x10A03DC", VA = "0x10A03DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000132")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FC5")]
				[Address(RVA = "0x10A0424", Offset = "0x10A0424", VA = "0x10A0424", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FC0")]
			[Address(RVA = "0x109FF58", Offset = "0x109FF58", VA = "0x109FF58")]
			[DebuggerHidden]
			public <TickCoroutinePartFive>d__111(int <>1__state)
			{
			}

			[Token(Token = "0x6001FC1")]
			[Address(RVA = "0x109FF80", Offset = "0x109FF80", VA = "0x109FF80", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FC2")]
			[Address(RVA = "0x109FF84", Offset = "0x109FF84", VA = "0x109FF84", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FC4")]
			[Address(RVA = "0x10A03E4", Offset = "0x10A03E4", VA = "0x10A03E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006F3")]
		[CompilerGenerated]
		private sealed class <TickCoroutineCage>d__115 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x4002E60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private OnboardingTextBubbleReferences <middlePopupTextBubble>5__2;

			[Token(Token = "0x4002E61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <partDone>5__3;

			[Token(Token = "0x17000133")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001FC9")]
				[Address(RVA = "0x10A0A24", Offset = "0x10A0A24", VA = "0x10A0A24", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000134")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FCB")]
				[Address(RVA = "0x10A0A6C", Offset = "0x10A0A6C", VA = "0x10A0A6C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FC6")]
			[Address(RVA = "0x10A042C", Offset = "0x10A042C", VA = "0x10A042C")]
			[DebuggerHidden]
			public <TickCoroutineCage>d__115(int <>1__state)
			{
			}

			[Token(Token = "0x6001FC7")]
			[Address(RVA = "0x10A0454", Offset = "0x10A0454", VA = "0x10A0454", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FC8")]
			[Address(RVA = "0x10A0458", Offset = "0x10A0458", VA = "0x10A0458", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FCA")]
			[Address(RVA = "0x10A0A2C", Offset = "0x10A0A2C", VA = "0x10A0A2C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006F4")]
		[CompilerGenerated]
		private sealed class <TickCoroutineDodging>d__116 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x4002E65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private OnboardingTextBubbleReferences <middlePopupTextBubble>5__2;

			[Token(Token = "0x4002E66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <dodgingStartingTimestamp>5__3;

			[Token(Token = "0x4002E67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private bool <didNotCompleteDodging>5__4;

			[Token(Token = "0x4002E68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
			private bool <partDone>5__5;

			[Token(Token = "0x17000135")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001FCF")]
				[Address(RVA = "0x10A1A14", Offset = "0x10A1A14", VA = "0x10A1A14", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000136")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FD1")]
				[Address(RVA = "0x10A1A5C", Offset = "0x10A1A5C", VA = "0x10A1A5C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FCC")]
			[Address(RVA = "0x10A0A74", Offset = "0x10A0A74", VA = "0x10A0A74")]
			[DebuggerHidden]
			public <TickCoroutineDodging>d__116(int <>1__state)
			{
			}

			[Token(Token = "0x6001FCD")]
			[Address(RVA = "0x10A0A9C", Offset = "0x10A0A9C", VA = "0x10A0A9C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FCE")]
			[Address(RVA = "0x10A0AA0", Offset = "0x10A0AA0", VA = "0x10A0AA0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FD0")]
			[Address(RVA = "0x10A1A1C", Offset = "0x10A1A1C", VA = "0x10A1A1C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006F5")]
		[CompilerGenerated]
		private sealed class <TickCoroutinePartTwo>d__117 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x4002E6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private OnboardingTextBubbleReferences <middlePopupTextBubble>5__2;

			[Token(Token = "0x4002E6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <partDone>5__3;

			[Token(Token = "0x17000137")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001FD5")]
				[Address(RVA = "0x10A2370", Offset = "0x10A2370", VA = "0x10A2370", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000138")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FD7")]
				[Address(RVA = "0x10A23B8", Offset = "0x10A23B8", VA = "0x10A23B8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FD2")]
			[Address(RVA = "0x10A1A64", Offset = "0x10A1A64", VA = "0x10A1A64")]
			[DebuggerHidden]
			public <TickCoroutinePartTwo>d__117(int <>1__state)
			{
			}

			[Token(Token = "0x6001FD3")]
			[Address(RVA = "0x10A1A8C", Offset = "0x10A1A8C", VA = "0x10A1A8C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FD4")]
			[Address(RVA = "0x10A1A90", Offset = "0x10A1A90", VA = "0x10A1A90", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FD6")]
			[Address(RVA = "0x10A2378", Offset = "0x10A2378", VA = "0x10A2378", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006F6")]
		[CompilerGenerated]
		private sealed class <TickCoroutinePartThree>d__118 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x4002E71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private OnboardingTextBubbleReferences <middlePopupTextBubble>5__2;

			[Token(Token = "0x4002E72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <partDone>5__3;

			[Token(Token = "0x17000139")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001FDB")]
				[Address(RVA = "0x10A2DE8", Offset = "0x10A2DE8", VA = "0x10A2DE8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FDD")]
				[Address(RVA = "0x10A2E30", Offset = "0x10A2E30", VA = "0x10A2E30", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FD8")]
			[Address(RVA = "0x10A23C0", Offset = "0x10A23C0", VA = "0x10A23C0")]
			[DebuggerHidden]
			public <TickCoroutinePartThree>d__118(int <>1__state)
			{
			}

			[Token(Token = "0x6001FD9")]
			[Address(RVA = "0x10A23E8", Offset = "0x10A23E8", VA = "0x10A23E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FDA")]
			[Address(RVA = "0x10A23EC", Offset = "0x10A23EC", VA = "0x10A23EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FDC")]
			[Address(RVA = "0x10A2DF0", Offset = "0x10A2DF0", VA = "0x10A2DF0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20006F7")]
		[CompilerGenerated]
		private sealed class <TickCoroutinePartFour>d__119 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002E73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002E74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002E75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OnboardingGameState <>4__this;

			[Token(Token = "0x4002E76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private OnboardingTextBubbleReferences <middlePopupTextBubble>5__2;

			[Token(Token = "0x4002E77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <victorious>5__3;

			[Token(Token = "0x4002E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
			private bool <partDone>5__4;

			[Token(Token = "0x1700013B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001FE1")]
				[Address(RVA = "0x10A3954", Offset = "0x10A3954", VA = "0x10A3954", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FE3")]
				[Address(RVA = "0x10A399C", Offset = "0x10A399C", VA = "0x10A399C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FDE")]
			[Address(RVA = "0x10A2E38", Offset = "0x10A2E38", VA = "0x10A2E38")]
			[DebuggerHidden]
			public <TickCoroutinePartFour>d__119(int <>1__state)
			{
			}

			[Token(Token = "0x6001FDF")]
			[Address(RVA = "0x10A2E60", Offset = "0x10A2E60", VA = "0x10A2E60", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FE0")]
			[Address(RVA = "0x10A2E64", Offset = "0x10A2E64", VA = "0x10A2E64", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FE2")]
			[Address(RVA = "0x10A395C", Offset = "0x10A395C", VA = "0x10A395C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool welcomeButtonPressed;

		[Token(Token = "0x4002DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool skipTutorial;

		[Token(Token = "0x4002DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool onboardingDone;

		[Token(Token = "0x4002DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		private bool isCollidingWithGrabbable_RightHand;

		[Token(Token = "0x4002DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool isCollidingWithGrabbable_LeftHand;

		[Token(Token = "0x4002DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private OnboardingSaveData onboardingSaveData;

		[Token(Token = "0x4002DD6")]
		private const string ONBOARDING_SAVE_KEY = "ONBOARDING";

		[Token(Token = "0x4002DD7")]
		public const string RESTART_ONBOARDING_FROM_PART_PREFS = "RestartOnboarding";

		[Token(Token = "0x4002DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<ITickable> onboardingGameStatePreTickHandlers;

		[Token(Token = "0x4002DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<ITickable> onboardingGameStatePostTickHandlers;

		[Token(Token = "0x4002DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly List<IFixedTickable> onboardingGameStateFixedTickHandlers;

		[Token(Token = "0x4002DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly List<ILateTickable> onboardingGameStateLateTickHandlers;

		[Token(Token = "0x4002DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly OnboardingGameStateSettings onboardingGameStateSettings;

		[Token(Token = "0x4002DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly OnboardingGameStateData onboardingGameStateData;

		[Token(Token = "0x4002DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ArenaGameStateSettings arenaGameStateSettings;

		[Token(Token = "0x4002DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly MonoBehaviour entryPointMonoBehaviour;

		[Token(Token = "0x4002DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly PlayerReferences playerReferences;

		[Token(Token = "0x4002DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly ScoreBoardData scoreBoardData;

		[Token(Token = "0x4002DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly AnimationStateHandlerData animationStateHandlerData;

		[Token(Token = "0x4002DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly CageHandler cageHandler;

		[Token(Token = "0x4002DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly InputData inputData;

		[Token(Token = "0x4002DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4002DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly NetworkIdAllocator networkIdAllocator;

		[Token(Token = "0x4002DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly ToolSpawnData toolSpawnData;

		[Token(Token = "0x4002DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4002DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly GameData gameData;

		[Token(Token = "0x4002DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly GrabData grabData;

		[Token(Token = "0x4002DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly PlatformData platformData;

		[Token(Token = "0x4002DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly BannerData bannerData;

		[Token(Token = "0x4002DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly CharacterData characterData;

		[Token(Token = "0x4002DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly AiData aiData;

		[Token(Token = "0x4002DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4002DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly BotController botController;

		[Token(Token = "0x4002DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private readonly GameMechanicStateHelper gameMechanicStateHelper;

		[Token(Token = "0x4002DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private readonly ToolSpawnAlgorithmData toolSpawnAlgorithmData;

		[Token(Token = "0x4002DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4002DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private readonly DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x4002DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private readonly ScoreBoardViewHandler scoreBoardViewHandler;

		[Token(Token = "0x4002DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4002DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private readonly SoundTriggersList soundTriggersList;

		[Token(Token = "0x4002DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private readonly VrKeyboardData vrKeyboardData;

		[Token(Token = "0x4002DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private readonly LoginData loginData;

		[Token(Token = "0x4002DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4002DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private readonly MatchHandler matchHandler;

		[Token(Token = "0x4002DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private readonly FactoryData factoryData;

		[Token(Token = "0x4002DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private readonly Camera headCamera;

		[Token(Token = "0x4002DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private readonly SpectatorSettingsData spectatorSettingsData;

		[Token(Token = "0x4002DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4002E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x4002E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x4002E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4002E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private readonly GameMessageData gameMessageData;

		[Token(Token = "0x4002E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private OnboardingTextBubbleReferences mainTextBubble;

		[Token(Token = "0x4002E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private OnboardingVoiceLineEvents voiceLineEvents;

		[Token(Token = "0x4002E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private bool partGrabDone;

		[Token(Token = "0x4002E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		private int toolSpawnPoint;

		[Token(Token = "0x4002E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private int firedBullets;

		[Token(Token = "0x4002E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private int firedBulletsThreshold;

		[Token(Token = "0x4002E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private int amountOfTimesHit;

		[Token(Token = "0x4002E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private bool sentChangeNameDisplayRequest;

		[Token(Token = "0x4002E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private ChangeDisplayNameRequest changeDisplayNameRequest;

		[Token(Token = "0x4002E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private KeyboardControllerData keyboardControllerData;

		[Token(Token = "0x4002E0E")]
		private const int MaxDisplayNameCount = 16;

		[Token(Token = "0x6001F3F")]
		[Address(RVA = "0x10991F8", Offset = "0x10991F8", VA = "0x10991F8")]
		public OnboardingGameState(List<ITickable> onboardingGameStatePreTickHandlers, List<ITickable> onboardingGameStatePostTickHandlers, List<IFixedTickable> onboardingGameStateFixedTickHandlers, List<ILateTickable> onboardingGameStateLateTickHandlers, OnboardingGameStateSettings onboardingGameStateSettings, OnboardingGameStateData onboardingGameStateData, ArenaGameStateSettings arenaGameStateSettings, MonoBehaviour entryPointMonoBehaviour, PlayerReferences playerReferences, ScoreBoardData scoreBoardData, AnimationStateHandlerData animationStateHandlerData, CageHandler cageHandler, InputData inputData, GameMessageFactory gameMessageFactory, NetworkIdAllocator networkIdAllocator, ToolSpawnData toolSpawnData, MessageSender messageSender, GameData gameData, GrabData grabData, PlatformData platformData, BannerData bannerData, CharacterData characterData, AiData aiData, IgnisNetworkConnectionData networkConnectionData, BotController botController, GameMechanicStateHelper gameMechanicStateHelper, ToolSpawnAlgorithmData toolSpawnAlgorithmData, IRoomTimeProvider roomTimeProvider, DamageRecordKeeper damageRecordKeeper, ScoreBoardViewHandler scoreBoardViewHandler, IgnisSoundTriggerData ignisSoundTriggerData, SoundTriggersList soundTriggersList, VrKeyboardData vrKeyboardData, LoginData loginData, MatchHandlerData matchHandlerData, MatchHandler matchHandler, FactoryData factoryData, Camera headCamera, SpectatorSettingsData spectatorSettingsData, PersistantDataUtility persistantDataUtility, CustomizationData customizationData, BayTekData bayTekData, IgnisTelemetry ignisTelemetry, GameMessageData gameMessageData)
		{
		}

		[Token(Token = "0x6001F40")]
		[Address(RVA = "0x1099520", Offset = "0x1099520", VA = "0x1099520", Slot = "4")]
		public void Initalize()
		{
		}

		[Token(Token = "0x6001F41")]
		[Address(RVA = "0x1099780", Offset = "0x1099780", VA = "0x1099780")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6001F42")]
		[Address(RVA = "0x1099784", Offset = "0x1099784", VA = "0x1099784")]
		private void SetOnboardingToStartOnNextStartUp(int value)
		{
		}

		[Token(Token = "0x6001F43")]
		[Address(RVA = "0x10997D0", Offset = "0x10997D0", VA = "0x10997D0")]
		private void OnTriggerEnter_RightHand(object sender, ColliderListenerEventArgs e)
		{
		}

		[Token(Token = "0x6001F44")]
		[Address(RVA = "0x10997DC", Offset = "0x10997DC", VA = "0x10997DC")]
		private void OnTriggerExit_RightHand(object sender, ColliderListenerEventArgs e)
		{
		}

		[Token(Token = "0x6001F45")]
		[Address(RVA = "0x10997E4", Offset = "0x10997E4", VA = "0x10997E4")]
		private void OnTriggerEnter_LeftHand(object sender, ColliderListenerEventArgs e)
		{
		}

		[Token(Token = "0x6001F46")]
		[Address(RVA = "0x10997F0", Offset = "0x10997F0", VA = "0x10997F0")]
		private void OnTriggerExit_LeftHand(object sender, ColliderListenerEventArgs e)
		{
		}

		[Token(Token = "0x6001F47")]
		[Address(RVA = "0x10997F8", Offset = "0x10997F8", VA = "0x10997F8", Slot = "6")]
		public EntryPoint.GameState Tick()
		{
			return default(EntryPoint.GameState);
		}

		[Token(Token = "0x6001F48")]
		[Address(RVA = "0x1099718", Offset = "0x1099718", VA = "0x1099718")]
		[IteratorStateMachine(typeof(<TickMainCoroutine>d__64))]
		private IEnumerator TickMainCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6001F49")]
		[Address(RVA = "0x109987C", Offset = "0x109987C", VA = "0x109987C")]
		[IteratorStateMachine(typeof(<SkipOnboarding>d__65))]
		private IEnumerator SkipOnboarding()
		{
			return null;
		}

		[Token(Token = "0x6001F4A")]
		[Address(RVA = "0x109990C", Offset = "0x109990C", VA = "0x109990C")]
		private bool IsPartOneToFourDone()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F4B")]
		[Address(RVA = "0x1099950", Offset = "0x1099950", VA = "0x1099950")]
		[IteratorStateMachine(typeof(<HideAndRemovePopup>d__67))]
		private IEnumerator HideAndRemovePopup(OnboardingTextBubbleReferences references)
		{
			return null;
		}

		[Token(Token = "0x6001F4C")]
		[Address(RVA = "0x10999EC", Offset = "0x10999EC", VA = "0x10999EC")]
		private OnboardingSaveData GetRestartOnboardingData(int partToRestartFrom)
		{
			return null;
		}

		[Token(Token = "0x6001F4D")]
		[Address(RVA = "0x1099A9C", Offset = "0x1099A9C", VA = "0x1099A9C")]
		private void SaveGame()
		{
		}

		[Token(Token = "0x6001F4E")]
		[Address(RVA = "0x1099B08", Offset = "0x1099B08", VA = "0x1099B08")]
		private OnboardingSaveData LoadData()
		{
			return null;
		}

		[Token(Token = "0x6001F4F")]
		[Address(RVA = "0x1099BA4", Offset = "0x1099BA4", VA = "0x1099BA4")]
		private void PrepareGame()
		{
		}

		[Token(Token = "0x6001F50")]
		[Address(RVA = "0x1099C14", Offset = "0x1099C14", VA = "0x1099C14")]
		private void CleanUpRound()
		{
		}

		[Token(Token = "0x6001F51")]
		[Address(RVA = "0x1099E1C", Offset = "0x1099E1C", VA = "0x1099E1C")]
		private void CleanUpMatch()
		{
		}

		[Token(Token = "0x6001F52")]
		[Address(RVA = "0x109A070", Offset = "0x109A070", VA = "0x109A070")]
		private void ResetAndSpawnLocalPlayer()
		{
		}

		[Token(Token = "0x6001F53")]
		[Address(RVA = "0x109A380", Offset = "0x109A380", VA = "0x109A380")]
		private void SpawnBot(BotSettings ai)
		{
		}

		[Token(Token = "0x6001F54")]
		[Address(RVA = "0x109A458", Offset = "0x109A458", VA = "0x109A458")]
		private string Localize(string localizationId)
		{
			return null;
		}

		[Token(Token = "0x6001F55")]
		[Address(RVA = "0x109A4EC", Offset = "0x109A4EC", VA = "0x109A4EC")]
		private OnboardingTextBubbleReferences CreateMainTextBubble()
		{
			return null;
		}

		[Token(Token = "0x6001F56")]
		[Address(RVA = "0x109A630", Offset = "0x109A630", VA = "0x109A630")]
		[IteratorStateMachine(typeof(<HandleShowingWelcomePopup>d__78))]
		private IEnumerator HandleShowingWelcomePopup()
		{
			return null;
		}

		[Token(Token = "0x6001F57")]
		[Address(RVA = "0x109A6C0", Offset = "0x109A6C0", VA = "0x109A6C0")]
		private void OnWelcomeButtonPressed()
		{
		}

		[Token(Token = "0x6001F58")]
		[Address(RVA = "0x109A6CC", Offset = "0x109A6CC", VA = "0x109A6CC")]
		private void OnSkipButtonPressed()
		{
		}

		[Token(Token = "0x6001F59")]
		[Address(RVA = "0x109A6D8", Offset = "0x109A6D8", VA = "0x109A6D8", Slot = "10")]
		public void OnApplicationPause(bool isPaused)
		{
		}

		[Token(Token = "0x6001F5A")]
		[Address(RVA = "0x109A6DC", Offset = "0x109A6DC", VA = "0x109A6DC")]
		[IteratorStateMachine(typeof(<HandleIntroAnimation>d__82))]
		private IEnumerator HandleIntroAnimation()
		{
			return null;
		}

		[Token(Token = "0x6001F5B")]
		[Address(RVA = "0x109A76C", Offset = "0x109A76C", VA = "0x109A76C")]
		[IteratorStateMachine(typeof(<AnimateTextBubble>d__83))]
		private IEnumerator AnimateTextBubble(AnimationStateData animation)
		{
			return null;
		}

		[Token(Token = "0x6001F5C")]
		[Address(RVA = "0x109A808", Offset = "0x109A808", VA = "0x109A808", Slot = "11")]
		public void Terminate()
		{
		}

		[Token(Token = "0x6001F5D")]
		[Address(RVA = "0x109A9A0", Offset = "0x109A9A0", VA = "0x109A9A0", Slot = "5")]
		public void PreTick()
		{
		}

		[Token(Token = "0x6001F5E")]
		[Address(RVA = "0x109AA9C", Offset = "0x109AA9C", VA = "0x109AA9C", Slot = "7")]
		public void PostTick()
		{
		}

		[Token(Token = "0x6001F5F")]
		[Address(RVA = "0x109AB98", Offset = "0x109AB98", VA = "0x109AB98", Slot = "8")]
		public void LateTick()
		{
		}

		[Token(Token = "0x6001F60")]
		[Address(RVA = "0x109AC94", Offset = "0x109AC94", VA = "0x109AC94", Slot = "9")]
		public void FixedTick()
		{
		}

		[Token(Token = "0x6001F61")]
		[Address(RVA = "0x109AD90", Offset = "0x109AD90", VA = "0x109AD90")]
		[IteratorStateMachine(typeof(<TickCoroutinePartOne>d__94))]
		private IEnumerator TickCoroutinePartOne()
		{
			return null;
		}

		[Token(Token = "0x6001F62")]
		[Address(RVA = "0x109AE20", Offset = "0x109AE20", VA = "0x109AE20")]
		[IteratorStateMachine(typeof(<HandleSqueezeHands>d__95))]
		private IEnumerator HandleSqueezeHands(OnboardingTextBubbleReferences leftHandTextBubble, OnboardingTextBubbleReferences rightHandTextBubble, OnboardingTextBubbleReferences middlePopupTextBubble)
		{
			return null;
		}

		[Token(Token = "0x6001F63")]
		[Address(RVA = "0x109AED0", Offset = "0x109AED0", VA = "0x109AED0")]
		[IteratorStateMachine(typeof(<WaitForHandSqueeze>d__96))]
		private IEnumerator WaitForHandSqueeze(OnboardingTextBubbleReferences bubbleTarget, Transform handTarget, HandInput hand, bool isRightHand)
		{
			return null;
		}

		[Token(Token = "0x6001F64")]
		[Address(RVA = "0x109AF68", Offset = "0x109AF68", VA = "0x109AF68")]
		[IteratorStateMachine(typeof(<HandleGrabGun>d__97))]
		private IEnumerator HandleGrabGun(OnboardingTextBubbleReferences toolTextBubble, OnboardingTextBubbleReferences middlePopupTextBubble)
		{
			return null;
		}

		[Token(Token = "0x6001F65")]
		[Address(RVA = "0x109AFE4", Offset = "0x109AFE4", VA = "0x109AFE4")]
		[IteratorStateMachine(typeof(<HandleFireGun>d__98))]
		private IEnumerator HandleFireGun(OnboardingTextBubbleReferences leftHandTextBubble, OnboardingTextBubbleReferences rightHandTextBubble, OnboardingTextBubbleReferences middlePopupTextBubble)
		{
			return null;
		}

		[Token(Token = "0x6001F66")]
		[Address(RVA = "0x109B06C", Offset = "0x109B06C", VA = "0x109B06C")]
		private void UpdateTextWithNumFiredBullets(OnboardingTextBubbleReferences middlePopupTextBubble)
		{
		}

		[Token(Token = "0x6001F67")]
		[Address(RVA = "0x109B158", Offset = "0x109B158", VA = "0x109B158")]
		private bool IsGrabbingTool()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F68")]
		[Address(RVA = "0x109B1B0", Offset = "0x109B1B0", VA = "0x109B1B0")]
		private (ControllerHand, Tool) GrabbedToolAndHandID()
		{
			return default((ControllerHand, Tool));
		}

		[Token(Token = "0x6001F69")]
		[Address(RVA = "0x109B280", Offset = "0x109B280", VA = "0x109B280")]
		private void SpawnToolIfDestroyed()
		{
		}

		[Token(Token = "0x6001F6A")]
		[Address(RVA = "0x109B2AC", Offset = "0x109B2AC", VA = "0x109B2AC")]
		private bool AreAllToolDestroyed()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F6B")]
		[Address(RVA = "0x109B450", Offset = "0x109B450", VA = "0x109B450")]
		private void BubbleFollowTarget(Transform bubble, Transform target, Vector3 offset, bool isRightHand)
		{
		}

		[Token(Token = "0x6001F6C")]
		[Address(RVA = "0x109B358", Offset = "0x109B358", VA = "0x109B358")]
		private void SpawnHandGun(bool isPlayerOne, int spawnPoint)
		{
		}

		[Token(Token = "0x6001F6D")]
		[Address(RVA = "0x109B5A4", Offset = "0x109B5A4", VA = "0x109B5A4")]
		[IteratorStateMachine(typeof(<HandleDropGun>d__106))]
		private IEnumerator HandleDropGun(OnboardingTextBubbleReferences gunTextBubble, OnboardingTextBubbleReferences middlePopupTextBubble)
		{
			return null;
		}

		[Token(Token = "0x6001F6E")]
		[Address(RVA = "0x109B620", Offset = "0x109B620", VA = "0x109B620")]
		[IteratorStateMachine(typeof(<TickCoroutinePartFive>d__111))]
		private IEnumerator TickCoroutinePartFive()
		{
			return null;
		}

		[Token(Token = "0x6001F6F")]
		[Address(RVA = "0x109B688", Offset = "0x109B688", VA = "0x109B688")]
		private void ShowChangeDisplayName()
		{
		}

		[Token(Token = "0x6001F70")]
		[Address(RVA = "0x109B830", Offset = "0x109B830", VA = "0x109B830")]
		private void CancelInput()
		{
		}

		[Token(Token = "0x6001F71")]
		[Address(RVA = "0x109B834", Offset = "0x109B834", VA = "0x109B834")]
		private void ChangeDisplayName(string newDisplayName)
		{
		}

		[Token(Token = "0x6001F72")]
		[Address(RVA = "0x109B8D0", Offset = "0x109B8D0", VA = "0x109B8D0")]
		[IteratorStateMachine(typeof(<TickCoroutineCage>d__115))]
		private IEnumerator TickCoroutineCage()
		{
			return null;
		}

		[Token(Token = "0x6001F73")]
		[Address(RVA = "0x109B938", Offset = "0x109B938", VA = "0x109B938")]
		[IteratorStateMachine(typeof(<TickCoroutineDodging>d__116))]
		private IEnumerator TickCoroutineDodging()
		{
			return null;
		}

		[Token(Token = "0x6001F74")]
		[Address(RVA = "0x109B9A0", Offset = "0x109B9A0", VA = "0x109B9A0")]
		[IteratorStateMachine(typeof(<TickCoroutinePartTwo>d__117))]
		private IEnumerator TickCoroutinePartTwo()
		{
			return null;
		}

		[Token(Token = "0x6001F75")]
		[Address(RVA = "0x109BA08", Offset = "0x109BA08", VA = "0x109BA08")]
		[IteratorStateMachine(typeof(<TickCoroutinePartThree>d__118))]
		private IEnumerator TickCoroutinePartThree()
		{
			return null;
		}

		[Token(Token = "0x6001F76")]
		[Address(RVA = "0x109BA70", Offset = "0x109BA70", VA = "0x109BA70")]
		[IteratorStateMachine(typeof(<TickCoroutinePartFour>d__119))]
		private IEnumerator TickCoroutinePartFour()
		{
			return null;
		}
	}
	[Token(Token = "0x20006F8")]
	[CreateAssetMenu(fileName = "OnboardingGameStateSettings", menuName = "Settings/Game State/OnboardingGameStateSettings", order = 1)]
	public class OnboardingGameStateSettings : ScriptableObject
	{
		[Token(Token = "0x4002E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Text Bubble Settings")]
		public OnboardingTextBubbleReferences textBubbleMainReferences;

		[Token(Token = "0x4002E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnboardingTextBubbleReferences textBubbleToolReferences;

		[Token(Token = "0x4002E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OnboardingTextBubbleReferences textBubbleHandReferences;

		[Token(Token = "0x4002E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 handOffset;

		[Token(Token = "0x4002E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Bots")]
		public BotSettings dodgingBot;

		[Token(Token = "0x4002E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BotSettings firstBot;

		[Token(Token = "0x4002E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public BotSettings secondBot;

		[Token(Token = "0x4002E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BotSettings thirdBot;

		[Token(Token = "0x4002E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Localization")]
		public string localizationId_SqueezeRightHand;

		[Token(Token = "0x4002E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string localizationId_SqueezeLeftHand;

		[Token(Token = "0x4002E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string localizationId_SqueezeMainHeader;

		[Token(Token = "0x4002E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string localizationId_SqueezeMainInitialText;

		[Token(Token = "0x4002E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string localizationId_SqueezeMainInitialTextBaytek;

		[Token(Token = "0x4002E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string localizationId_SqueezeMainRightHand;

		[Token(Token = "0x4002E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string localizationId_SqueezeMainLeftHand;

		[Token(Token = "0x4002E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Space]
		public string localizationId_GrabGunReachOut;

		[Token(Token = "0x4002E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public string localizationId_GrabGunSqueeze;

		[Token(Token = "0x4002E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string localizationId_GrabMainHeader;

		[Token(Token = "0x4002E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string localizationId_GrabMainGrab;

		[Token(Token = "0x4002E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public string localizationId_GrabMainGrabBayTek;

		[Token(Token = "0x4002E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public string localizationId_GrabMainHoldOn;

		[Token(Token = "0x4002E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public string localizationId_GrabMainHoldOnBayTek;

		[Token(Token = "0x4002E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Space]
		public string localizationId_FireRightHandSqueeze;

		[Token(Token = "0x4002E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public string localizationId_FireLeftHandSqueeze;

		[Token(Token = "0x4002E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public string localizationId_FireMainHeader;

		[Token(Token = "0x4002E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public string localizationId_FireMainFire;

		[Token(Token = "0x4002E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public string localizationId_FireMainFireMore;

		[Token(Token = "0x4002E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Space]
		public string localizationId_DropGunDrop;

		[Token(Token = "0x4002E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public string localizationId_DropMainHeader;

		[Token(Token = "0x4002E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public string localizationId_DropMainText;

		[Token(Token = "0x4002E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public string localizationId_DropMainWellDone;

		[Token(Token = "0x4002E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Space]
		public string localizationID_CageMainHeader;

		[Token(Token = "0x4002E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public string localizationId_CageMainTextInfo;

		[Token(Token = "0x4002E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public string localizationId_CageMainTextDone;

		[Token(Token = "0x4002E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Space]
		public string localizationID_DodgingMainHeader;

		[Token(Token = "0x4002E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public string localizationId_DodgingMainTextInfo;

		[Token(Token = "0x4002E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public string localizationId_DodgingMainTextFightDone;

		[Token(Token = "0x4002E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public string localizationId_DodgingMainTextKeepTrying;

		[Token(Token = "0x4002E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public string localizationId_DodgingMainTextDidNotComplete;

		[Token(Token = "0x4002EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[Space]
		public string localizationId_FightOneMainHeader;

		[Token(Token = "0x4002EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public string localizationId_FightOneMainTextInfo;

		[Token(Token = "0x4002EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public string localizationId_FightOneMainTextFightDone;

		[Token(Token = "0x4002EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[Space]
		public string localizationId_FightTwoMainHeader;

		[Token(Token = "0x4002EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public string localizationId_FightTwoMainInfo;

		[Token(Token = "0x4002EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public string localizationId_FightTwoMainTextFightDone;

		[Token(Token = "0x4002EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[Space]
		public string localizationId_FightThreeMainHeader;

		[Token(Token = "0x4002EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public string localizationId_FightThreeMainPrepare;

		[Token(Token = "0x4002EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public string localizationId_FightThreeMainRoundTime;

		[Token(Token = "0x4002EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public string localizationId_FightThreeMainWonRound;

		[Token(Token = "0x4002EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public string localizationId_FightThreeMainLostRound;

		[Token(Token = "0x4002EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public string localizationId_FightThreeMainBestOutOfThree;

		[Token(Token = "0x4002EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public string localizationId_FightThreeMainGoodLuckRound;

		[Token(Token = "0x4002EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public string localizationId_FightThreeMainDefeat;

		[Token(Token = "0x4002EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[Space]
		public string localizationId_DisplayNameChoose;

		[Token(Token = "0x4002EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public string localizationId_DisplayNameHeader;

		[Token(Token = "0x4002EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public string localizationId_DisplayNameText;

		[Token(Token = "0x4002EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public string localizationId_DisplayNameErrorCode;

		[Token(Token = "0x4002EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public string localizationId_DisplayNameRequestCriteria;

		[Token(Token = "0x4002EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public string localizationId_DisplayNameCongratulations;

		[Token(Token = "0x6001FE4")]
		[Address(RVA = "0x10A39A4", Offset = "0x10A39A4", VA = "0x10A39A4")]
		public OnboardingGameStateSettings()
		{
		}
	}
	[Token(Token = "0x20006F9")]
	public class OnboardingTextBubbleReferences : MonoBehaviour
	{
		[Token(Token = "0x4002EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4002EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI header;

		[Token(Token = "0x4002EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI mainText;

		[Token(Token = "0x4002EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI timer;

		[Token(Token = "0x4002EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Image timerUI;

		[Token(Token = "0x4002EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public OnboardingButtonReferences onboardingButtonReferences;

		[Token(Token = "0x4002EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimatorStateData showBubbleAnimation;

		[Token(Token = "0x4002EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimatorStateData hideBubbleAnimation;

		[Token(Token = "0x4002EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimatorStateData goToLeftAnimation;

		[Token(Token = "0x4002EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimatorStateData goToCenterAnimation;

		[Token(Token = "0x6001FE5")]
		[Address(RVA = "0x10A39AC", Offset = "0x10A39AC", VA = "0x10A39AC")]
		public OnboardingTextBubbleReferences()
		{
		}
	}
	[Token(Token = "0x20006FA")]
	public class OwnershipData
	{
		[Token(Token = "0x20006FB")]
		public struct Item
		{
			[Token(Token = "0x4002EC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string itemId;

			[Token(Token = "0x6001FE8")]
			[Address(RVA = "0x10A3AC8", Offset = "0x10A3AC8", VA = "0x10A3AC8")]
			public Item(string itemId)
			{
			}
		}

		[Token(Token = "0x20006FC")]
		public enum State
		{
			[Token(Token = "0x4002EC3")]
			NotInitilized,
			[Token(Token = "0x4002EC4")]
			Requesting,
			[Token(Token = "0x4002EC5")]
			Ready
		}

		[Token(Token = "0x4002EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public State state;

		[Token(Token = "0x4002EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<Item> addItemToOwnerShipRequest;

		[Token(Token = "0x4002EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Queue<int> refreshInventoryRequests;

		[Token(Token = "0x6001FE6")]
		[Address(RVA = "0x10A39B4", Offset = "0x10A39B4", VA = "0x10A39B4")]
		public void RequestInventoryUpdate()
		{
		}

		[Token(Token = "0x6001FE7")]
		[Address(RVA = "0x10A3A08", Offset = "0x10A3A08", VA = "0x10A3A08")]
		public OwnershipData()
		{
		}
	}
	[Token(Token = "0x20006FD")]
	public class OwnershipHandler : ITickable
	{
		[Token(Token = "0x4002EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly OwnershipData ownershipData;

		[Token(Token = "0x4002EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x4002EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DeckData deckData;

		[Token(Token = "0x4002EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData;

		[Token(Token = "0x4002ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ShopData shopData;

		[Token(Token = "0x4002ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PlayerInfoPanelData playerInfoPanelData;

		[Token(Token = "0x4002ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x4002ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CloudScriptInvocationRequest pendingCloudScriptInvocationRequest;

		[Token(Token = "0x4002ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private DebugMenu debugMenuInstance;

		[Token(Token = "0x4002ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool hasAddedAssignItemsToDebugMenu;

		[Token(Token = "0x6001FE9")]
		[Address(RVA = "0x10A3AD0", Offset = "0x10A3AD0", VA = "0x10A3AD0")]
		public OwnershipHandler(OwnershipData ownershipData, CustomizationData customizationData, DeckData deckData, PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData, ShopData shopData, PlayerInfoPanelData playerInfoPanelData, ITimeProvider timeProvider)
		{
		}

		[Token(Token = "0x6001FEA")]
		[Address(RVA = "0x10A3B34", Offset = "0x10A3B34", VA = "0x10A3B34")]
		public void SetupDebug(DebugMenu instance)
		{
		}

		[Token(Token = "0x6001FEB")]
		[Address(RVA = "0x10A3B3C", Offset = "0x10A3B3C", VA = "0x10A3B3C")]
		private void UpdateInventoryDebug()
		{
		}

		[Token(Token = "0x6001FEC")]
		[Address(RVA = "0x10A3B98", Offset = "0x10A3B98", VA = "0x10A3B98")]
		private void SetItemOwnership(string itemId, Action<ItemOwnership> changeAction)
		{
		}

		[Token(Token = "0x6001FED")]
		[Address(RVA = "0x10A3E00", Offset = "0x10A3E00", VA = "0x10A3E00")]
		private void SetOwnerShipToPackItems(string itemId, Action<ItemOwnership> changeAction)
		{
		}

		[Token(Token = "0x6001FEE")]
		[Address(RVA = "0x10A3D7C", Offset = "0x10A3D7C", VA = "0x10A3D7C")]
		private void SetOwnerShipOfItem(string itemId, Action<ItemOwnership> changeAction)
		{
		}

		[Token(Token = "0x6001FEF")]
		[Address(RVA = "0x10A3EF0", Offset = "0x10A3EF0", VA = "0x10A3EF0", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6001FF0")]
		[Address(RVA = "0x10A4204", Offset = "0x10A4204", VA = "0x10A4204")]
		private void CheckRefreshRequests()
		{
		}

		[Token(Token = "0x6001FF1")]
		[Address(RVA = "0x10A417C", Offset = "0x10A417C", VA = "0x10A417C")]
		private void CheckResponse()
		{
		}

		[Token(Token = "0x6001FF2")]
		[Address(RVA = "0x10A4288", Offset = "0x10A4288", VA = "0x10A4288")]
		private void ParseSuccessfulResponse()
		{
		}

		[Token(Token = "0x6001FF3")]
		[Address(RVA = "0x10A4680", Offset = "0x10A4680", VA = "0x10A4680")]
		private void AssignItemDebug(string itemId)
		{
		}

		[Token(Token = "0x6001FF4")]
		[Address(RVA = "0x10A40B0", Offset = "0x10A40B0", VA = "0x10A40B0")]
		private void RequestInventoryUpdate()
		{
		}

		[Token(Token = "0x6001FF5")]
		[Address(RVA = "0x10A45B8", Offset = "0x10A45B8", VA = "0x10A45B8")]
		private void ChangeState(OwnershipData.State newState)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000700")]
	internal class GetInventoryResponse
	{
		[Serializable]
		[Token(Token = "0x2000701")]
		internal class VirtualCurrencies
		{
			[Token(Token = "0x4002ED5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int BP;

			[Token(Token = "0x4002ED6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int FR;

			[Token(Token = "0x6001FFC")]
			[Address(RVA = "0x10A48D0", Offset = "0x10A48D0", VA = "0x10A48D0")]
			public VirtualCurrencies()
			{
			}
		}

		[Token(Token = "0x4002ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<InventoryItem> items;

		[Token(Token = "0x4002ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VirtualCurrencies virtualCurrencies;

		[Token(Token = "0x6001FFB")]
		[Address(RVA = "0x10A48C8", Offset = "0x10A48C8", VA = "0x10A48C8")]
		public GetInventoryResponse()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000702")]
	internal class InventoryItem
	{
		[Token(Token = "0x4002ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string itemId;

		[Token(Token = "0x4002ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string itemClass;

		[Token(Token = "0x4002ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isLocked;

		[Token(Token = "0x4002EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool isOwned;

		[Token(Token = "0x4002EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool isVisible;

		[Token(Token = "0x4002EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int price;

		[Token(Token = "0x4002EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string currencyCode;

		[Token(Token = "0x4002EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int requiredLevel;

		[Token(Token = "0x4002EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool isAvailableForUnlocking;

		[Token(Token = "0x6001FFD")]
		[Address(RVA = "0x10A48D8", Offset = "0x10A48D8", VA = "0x10A48D8")]
		public InventoryItem()
		{
		}
	}
	[Token(Token = "0x2000703")]
	public class OwnershipHelper
	{
		[Token(Token = "0x4002EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly OwnershipSettings settings;

		[Token(Token = "0x4002EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameData gameData;

		[Token(Token = "0x4002EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x6001FFE")]
		[Address(RVA = "0x10A48E0", Offset = "0x10A48E0", VA = "0x10A48E0")]
		public OwnershipHelper(OwnershipSettings settings, GameData gameData, IgnisNetworkConnectionData networkConnectionData)
		{
		}

		[Token(Token = "0x6001FFF")]
		[Address(RVA = "0x10A491C", Offset = "0x10A491C", VA = "0x10A491C")]
		public bool IsOwner(Vector3 objectPosition, ImpactTypes impactType = ImpactTypes.Environment, int playerNetworkId = -1)
		{
			return default(bool);
		}

		[Token(Token = "0x6002000")]
		[Address(RVA = "0x10A49C8", Offset = "0x10A49C8", VA = "0x10A49C8")]
		public bool IsOwner(Vector3 objectPosition, int currentHolder)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000704")]
	[CreateAssetMenu(fileName = "OwnershipSettings", menuName = "Settings/Ownership/OwnershipSettings", order = 1)]
	public class OwnershipSettings : ScriptableObject
	{
		[Token(Token = "0x4002EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool localPlayerDecides;

		[Token(Token = "0x4002EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float zoneThresholdFromCenter;

		[Token(Token = "0x6002001")]
		[Address(RVA = "0x10A4A5C", Offset = "0x10A4A5C", VA = "0x10A4A5C")]
		public OwnershipSettings()
		{
		}
	}
	[Token(Token = "0x2000705")]
	public class PassthroughData
	{
		[Token(Token = "0x4002EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool passthroughEnabled;

		[Token(Token = "0x4002EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool persistentDataPassthroughEnabled;

		[Token(Token = "0x4002EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<bool> passthroughEnableRequests;

		[Token(Token = "0x6002002")]
		[Address(RVA = "0x10A4A6C", Offset = "0x10A4A6C", VA = "0x10A4A6C")]
		public PassthroughData()
		{
		}
	}
	[Token(Token = "0x2000706")]
	public class PassthroughHandler : ITickable
	{
		[Token(Token = "0x2000707")]
		private enum PassthroughInsightState
		{
			[Token(Token = "0x4002F00")]
			Disable,
			[Token(Token = "0x4002F01")]
			DisableComplete,
			[Token(Token = "0x4002F02")]
			Enable,
			[Token(Token = "0x4002F03")]
			EnableComplete
		}

		[Token(Token = "0x4002EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PassthroughSettings passthroughSettings;

		[Token(Token = "0x4002EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PassthroughData passthroughData;

		[Token(Token = "0x4002EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly InputData inputData;

		[Token(Token = "0x4002EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly EnvironmentSceneData environmentSceneData;

		[Token(Token = "0x4002EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly SceneHandlerData sceneHandlerData;

		[Token(Token = "0x4002EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4002EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4002EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly CameraReference cameraReference;

		[Token(Token = "0x4002EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4002EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly BarEntranceData barEntranceData;

		[Token(Token = "0x4002EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x4002EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly GameMessageDownloadHandlerData gameMessageDownloadHandlerData;

		[Token(Token = "0x4002EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly StoryEventGameStateData storyEventGameStateData;

		[Token(Token = "0x4002EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private OVRPassthroughLayer passthroughLayer;

		[Token(Token = "0x4002EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private OVRManager ovrManager;

		[Token(Token = "0x4002EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int togglingPassthroughFrame;

		[Token(Token = "0x4002EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool togglingPassthroughInsightStateComplete;

		[Token(Token = "0x4002EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PassthroughInsightState passthroughInsightState;

		[Token(Token = "0x4002EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool isInsightPassthroughEnabled;

		[Token(Token = "0x4002EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		private bool isCurrentSceneCompatible;

		[Token(Token = "0x4002EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
		private bool isCurrentSceneCompatibleCache;

		[Token(Token = "0x4002EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x97")]
		private bool togglePassthroughInput;

		[Token(Token = "0x4002EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private SceneId currentSceneId;

		[Token(Token = "0x6002003")]
		[Address(RVA = "0x10A4AE8", Offset = "0x10A4AE8", VA = "0x10A4AE8")]
		public PassthroughHandler(PassthroughSettings passthroughSettings, PassthroughData passthroughData, InputData inputData, EnvironmentSceneData environmentSceneData, SceneHandlerData sceneHandlerData, LocalPersistentData localPersistentData, PersistantDataUtility persistantDataUtility, CameraReference cameraReference, IgnisTelemetry ignisTelemetry, BarEntranceData barEntranceData, LockerRoomGameStateData lockerRoomGameStateData, GameMessageDownloadHandlerData gameMessageDownloadHandlerData, StoryEventGameStateData storyEventGameStateData)
		{
		}

		[Token(Token = "0x6002004")]
		[Address(RVA = "0x10A4B90", Offset = "0x10A4B90", VA = "0x10A4B90")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6002005")]
		[Address(RVA = "0x10A4C90", Offset = "0x10A4C90", VA = "0x10A4C90", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002006")]
		[Address(RVA = "0x10A51F4", Offset = "0x10A51F4", VA = "0x10A51F4")]
		private void ChangePassthroughInsightState(PassthroughInsightState newState)
		{
		}

		[Token(Token = "0x6002007")]
		[Address(RVA = "0x10A5854", Offset = "0x10A5854", VA = "0x10A5854")]
		private void UpdatePassthroughInsightState()
		{
		}

		[Token(Token = "0x6002008")]
		[Address(RVA = "0x10A5384", Offset = "0x10A5384", VA = "0x10A5384")]
		private void TogglePassthrough(bool enable, string reason)
		{
		}

		[Token(Token = "0x6002009")]
		[Address(RVA = "0x10A5168", Offset = "0x10A5168", VA = "0x10A5168")]
		private void SaveToPersistentData(bool enable)
		{
		}

		[Token(Token = "0x600200A")]
		[Address(RVA = "0x10A5218", Offset = "0x10A5218", VA = "0x10A5218")]
		private bool IsCurrentSceneCompatible()
		{
			return default(bool);
		}

		[Token(Token = "0x600200B")]
		[Address(RVA = "0x10A5B70", Offset = "0x10A5B70", VA = "0x10A5B70")]
		private bool PlayerWillReturnToOzoAfterMatch()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000708")]
	public class PassthroughSettingsViewHandler : ITickable
	{
		[Token(Token = "0x4002F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PassthroughSettings passthroughSettings;

		[Token(Token = "0x4002F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PassthroughData passthroughData;

		[Token(Token = "0x4002F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4002F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PassthroughSettingsViewReference passthroughSettingsViewReference;

		[Token(Token = "0x4002F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool showingView;

		[Token(Token = "0x4002F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject passthroughSetup;

		[Token(Token = "0x600200C")]
		[Address(RVA = "0x10A5BF8", Offset = "0x10A5BF8", VA = "0x10A5BF8")]
		public PassthroughSettingsViewHandler(MenuStateData menuStateData, PassthroughSettings passthroughSettings, PassthroughData passthroughData, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x600200D")]
		[Address(RVA = "0x10A5C38", Offset = "0x10A5C38", VA = "0x10A5C38")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600200E")]
		[Address(RVA = "0x10A5DE4", Offset = "0x10A5DE4", VA = "0x10A5DE4", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600200F")]
		[Address(RVA = "0x10A5E58", Offset = "0x10A5E58", VA = "0x10A5E58")]
		private void SetPassthroughEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6002010")]
		[Address(RVA = "0x10A5D8C", Offset = "0x10A5D8C", VA = "0x10A5D8C")]
		private void SetActive(bool isActive)
		{
		}
	}
	[Token(Token = "0x2000709")]
	public class PassthroughSettingsViewReference : MonoBehaviour
	{
		[Token(Token = "0x4002F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4002F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Toggle enabledToggle;

		[Token(Token = "0x6002011")]
		[Address(RVA = "0x10A608C", Offset = "0x10A608C", VA = "0x10A608C")]
		public PassthroughSettingsViewReference()
		{
		}
	}
	[Token(Token = "0x200070A")]
	public enum Entitlement
	{
		[Token(Token = "0x4002F0E")]
		Initializing,
		[Token(Token = "0x4002F0F")]
		Entitled,
		[Token(Token = "0x4002F10")]
		EntitlementFailed
	}
	[Token(Token = "0x200070B")]
	[CreateAssetMenu(fileName = "GameplayRulesLivShotsList", menuName = "Settings/Platform/GameplayRulesLivShotsList")]
	public class GameplayRulesLivShotsList : ScriptableObject
	{
		[Token(Token = "0x4002F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LivCameraShotsGroup[] livCameraShotsGroups;

		[Token(Token = "0x6002012")]
		[Address(RVA = "0x10A6094", Offset = "0x10A6094", VA = "0x10A6094")]
		public GameplayRulesLivShotsList()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200070C")]
	public class LivCameraShotsGroup
	{
		[Token(Token = "0x4002F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameplayRules gameplayRules;

		[Token(Token = "0x4002F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LivCameraShots[] livShotsList;

		[Token(Token = "0x6002013")]
		[Address(RVA = "0x10A609C", Offset = "0x10A609C", VA = "0x10A609C")]
		public LivCameraShotsGroup()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200070D")]
	public class LivCameraShots
	{
		[Token(Token = "0x4002F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string description;

		[Token(Token = "0x4002F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 cameraPosition;

		[Token(Token = "0x4002F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 cameraRotation;

		[Token(Token = "0x6002014")]
		[Address(RVA = "0x10A60A4", Offset = "0x10A60A4", VA = "0x10A60A4")]
		public LivCameraShots()
		{
		}
	}
	[Token(Token = "0x200070E")]
	public class LivSettingsViewReference : MonoBehaviour
	{
		[Token(Token = "0x4002F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4002F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Toggle showCharacterToggle;

		[Token(Token = "0x6002015")]
		[Address(RVA = "0x10A60AC", Offset = "0x10A60AC", VA = "0x10A60AC")]
		public LivSettingsViewReference()
		{
		}
	}
	[Token(Token = "0x200070F")]
	public class BhapticsData
	{
		[Token(Token = "0x4002F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool enabled;

		[Token(Token = "0x4002F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<BhapticsFeedback> feeedbackQueue;

		[Token(Token = "0x6002016")]
		[Address(RVA = "0x10A60B4", Offset = "0x10A60B4", VA = "0x10A60B4")]
		[Conditional("OCULUS_VR")]
		public void EnqueueFeedback(BhapticsFeedback bhapticsImpact, bool onLocalPlayer)
		{
		}

		[Token(Token = "0x6002017")]
		[Address(RVA = "0x10A6150", Offset = "0x10A6150", VA = "0x10A6150")]
		public BhapticsData()
		{
		}
	}
	[Token(Token = "0x2000710")]
	public enum BhapticsFeedbackType
	{
		[Token(Token = "0x4002F1C")]
		Impact,
		[Token(Token = "0x4002F1D")]
		StartLoop,
		[Token(Token = "0x4002F1E")]
		EndLoop
	}
	[Token(Token = "0x2000711")]
	public struct BhapticsFeedback
	{
		[Token(Token = "0x4002F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public BhapticsFeedbackType type;

		[Token(Token = "0x4002F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 position;

		[Token(Token = "0x4002F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int damage;

		[Token(Token = "0x4002F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ToolName toolName;

		[Token(Token = "0x4002F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ImpactTypes impactType;

		[Token(Token = "0x6002018")]
		[Address(RVA = "0x10A61CC", Offset = "0x10A61CC", VA = "0x10A61CC")]
		public BhapticsFeedback(BhapticsFeedbackType type, Vector3 position, int damage, ToolName toolName, ImpactTypes impactType)
		{
		}

		[Token(Token = "0x6002019")]
		[Address(RVA = "0x10A61E4", Offset = "0x10A61E4", VA = "0x10A61E4")]
		public BhapticsFeedback(BhapticsFeedbackType type, ToolName toolName, ImpactTypes impactType)
		{
		}
	}
	[Token(Token = "0x2000712")]
	public class BhapticsHandler : ITickable
	{
		[Token(Token = "0x4002F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BhapticsSettings bhapticsSettings;

		[Token(Token = "0x4002F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BhapticsData bhapticsData;

		[Token(Token = "0x4002F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4002F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Transform localPlayerBodyTransform;

		[Token(Token = "0x4002F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<HapticClipReference> loopingClips;

		[Token(Token = "0x600201A")]
		[Address(RVA = "0x10A6254", Offset = "0x10A6254", VA = "0x10A6254")]
		public BhapticsHandler(BhapticsSettings bhapticsSettings, BhapticsData bhapticsData, MatchHandlerData matchHandlerData, Transform localPlayerBodyTransform)
		{
		}

		[Token(Token = "0x600201B")]
		[Address(RVA = "0x10A62FC", Offset = "0x10A62FC", VA = "0x10A62FC", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x2000713")]
	public class BhapticsSettingsHandler : ITickable
	{
		[Token(Token = "0x4002F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BhapticsSettings bhapticsSettings;

		[Token(Token = "0x4002F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BhapticsData bhapticsData;

		[Token(Token = "0x4002F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4002F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4002F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BhapticsSettingsViewReference bhapticsSettingsViewReference;

		[Token(Token = "0x4002F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool showingView;

		[Token(Token = "0x4002F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject bhapticsSetup;

		[Token(Token = "0x600201C")]
		[Address(RVA = "0x10A6824", Offset = "0x10A6824", VA = "0x10A6824")]
		public BhapticsSettingsHandler(MenuStateData menuStateData, BhapticsSettings bhapticsSettings, BhapticsData bhapticsData, PersistantDataUtility persistantDataUtility, LocalPersistentData localPersistentData)
		{
		}

		[Token(Token = "0x600201D")]
		[Address(RVA = "0x10A6874", Offset = "0x10A6874", VA = "0x10A6874")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600201E")]
		[Address(RVA = "0x10A6B34", Offset = "0x10A6B34", VA = "0x10A6B34", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600201F")]
		[Address(RVA = "0x10A6A04", Offset = "0x10A6A04", VA = "0x10A6A04")]
		private void SetBhapticsEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6002020")]
		[Address(RVA = "0x10A69DC", Offset = "0x10A69DC", VA = "0x10A69DC")]
		private void SetActive(bool isActive)
		{
		}
	}
	[Token(Token = "0x2000714")]
	public class BhapticsSettingsViewReference : MonoBehaviour
	{
		[Token(Token = "0x4002F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4002F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Toggle enabledToggle;

		[Token(Token = "0x6002021")]
		[Address(RVA = "0x10A6B78", Offset = "0x10A6B78", VA = "0x10A6B78")]
		public BhapticsSettingsViewReference()
		{
		}
	}
	[Token(Token = "0x2000715")]
	public struct OculusUserData
	{
		[Token(Token = "0x4002F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string ID;

		[Token(Token = "0x6002022")]
		[Address(RVA = "0x10A6B80", Offset = "0x10A6B80", VA = "0x10A6B80")]
		public OculusUserData(string id)
		{
		}
	}
	[Token(Token = "0x2000716")]
	public class OculusLoginHandler : ITickable
	{
		[Token(Token = "0x4002F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float timestampWhenEntitlementFailed;

		[Token(Token = "0x4002F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly OculusLoginSettings oculusLoginSettings;

		[Token(Token = "0x4002F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IOculusFacade oculusFacade;

		[Token(Token = "0x4002F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlatformLoginData platformLoginData;

		[Token(Token = "0x4002F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x4002F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ITimeSinceStartupTracking timeSinceStartupTracking;

		[Token(Token = "0x4002F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Entitlement entitlement;

		[Token(Token = "0x4002F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool pushTokenReceived;

		[Token(Token = "0x4002F3C")]
		private const string OCULUS_USER_ID = "OCULUS_USER_ID";

		[Token(Token = "0x6002023")]
		[Address(RVA = "0x10A6B88", Offset = "0x10A6B88", VA = "0x10A6B88")]
		public OculusLoginHandler(OculusLoginSettings oculusLoginSettings, IOculusFacade oculusFacade, PlatformLoginData platformLoginData, ITimeProvider timeProvider, ITimeSinceStartupTracking timeSinceStartupTracking)
		{
		}

		[Token(Token = "0x6002024")]
		[Address(RVA = "0x10A6F1C", Offset = "0x10A6F1C", VA = "0x10A6F1C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002025")]
		[Address(RVA = "0x10A6D4C", Offset = "0x10A6D4C", VA = "0x10A6D4C")]
		private void GetLoggedInUserCallback(OculusUserData user)
		{
		}

		[Token(Token = "0x6002026")]
		[Address(RVA = "0x10A6DCC", Offset = "0x10A6DCC", VA = "0x10A6DCC")]
		private void ChangeState(PlatformLoginState newState)
		{
		}
	}
	[Token(Token = "0x2000717")]
	public class OculusDummyFacade : IOculusFacade
	{
		[Token(Token = "0x1700013D")]
		public Entitlement EntitledStatus
		{
			[Token(Token = "0x6002027")]
			[Address(RVA = "0x10A76AC", Offset = "0x10A76AC", VA = "0x10A76AC", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return default(Entitlement);
			}
			[Token(Token = "0x6002028")]
			[Address(RVA = "0x10A76B4", Offset = "0x10A76B4", VA = "0x10A76B4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700013E")]
		public bool FailedToGetUserData
		{
			[Token(Token = "0x6002029")]
			[Address(RVA = "0x10A76BC", Offset = "0x10A76BC", VA = "0x10A76BC", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600202A")]
			[Address(RVA = "0x10A76C4", Offset = "0x10A76C4", VA = "0x10A76C4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700013F")]
		public bool FoundUserData
		{
			[Token(Token = "0x600202B")]
			[Address(RVA = "0x10A76D0", Offset = "0x10A76D0", VA = "0x10A76D0", Slot = "6")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600202C")]
			[Address(RVA = "0x10A76D8", Offset = "0x10A76D8", VA = "0x10A76D8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000140")]
		public OculusUserData GetOculusUserData
		{
			[Token(Token = "0x600202D")]
			[Address(RVA = "0x10A76E4", Offset = "0x10A76E4", VA = "0x10A76E4", Slot = "7")]
			[CompilerGenerated]
			get
			{
				return default(OculusUserData);
			}
			[Token(Token = "0x600202E")]
			[Address(RVA = "0x10A76EC", Offset = "0x10A76EC", VA = "0x10A76EC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000141")]
		public string AccessToken
		{
			[Token(Token = "0x600202F")]
			[Address(RVA = "0x10A76F4", Offset = "0x10A76F4", VA = "0x10A76F4", Slot = "8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002030")]
			[Address(RVA = "0x10A76FC", Offset = "0x10A76FC", VA = "0x10A76FC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002031")]
		[Address(RVA = "0x10A7704", Offset = "0x10A7704", VA = "0x10A7704", Slot = "9")]
		public void Initalize()
		{
		}

		[Token(Token = "0x6002032")]
		[Address(RVA = "0x10A7728", Offset = "0x10A7728", VA = "0x10A7728", Slot = "10")]
		public bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6002033")]
		[Address(RVA = "0x10A7730", Offset = "0x10A7730", VA = "0x10A7730")]
		public OculusDummyFacade()
		{
		}
	}
	[Token(Token = "0x2000718")]
	public interface IOculusFacade
	{
		[Token(Token = "0x17000142")]
		Entitlement EntitledStatus
		{
			[Token(Token = "0x6002034")]
			get;
		}

		[Token(Token = "0x17000143")]
		bool FailedToGetUserData
		{
			[Token(Token = "0x6002035")]
			get;
		}

		[Token(Token = "0x17000144")]
		bool FoundUserData
		{
			[Token(Token = "0x6002036")]
			get;
		}

		[Token(Token = "0x17000145")]
		OculusUserData GetOculusUserData
		{
			[Token(Token = "0x6002037")]
			get;
		}

		[Token(Token = "0x17000146")]
		string AccessToken
		{
			[Token(Token = "0x6002038")]
			get;
		}

		[Token(Token = "0x6002039")]
		void Initalize();

		[Token(Token = "0x600203A")]
		bool IsInitialized();
	}
	[Token(Token = "0x2000719")]
	public class OculusFacade : IOculusFacade
	{
		[Token(Token = "0x4002F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DevicePlatform platform;

		[Token(Token = "0x17000147")]
		public Entitlement EntitledStatus
		{
			[Token(Token = "0x600203B")]
			[Address(RVA = "0x10A7738", Offset = "0x10A7738", VA = "0x10A7738", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return default(Entitlement);
			}
			[Token(Token = "0x600203C")]
			[Address(RVA = "0x10A7740", Offset = "0x10A7740", VA = "0x10A7740")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000148")]
		public bool FailedToGetUserData
		{
			[Token(Token = "0x600203D")]
			[Address(RVA = "0x10A7748", Offset = "0x10A7748", VA = "0x10A7748", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600203E")]
			[Address(RVA = "0x10A7750", Offset = "0x10A7750", VA = "0x10A7750")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000149")]
		public bool FoundUserData
		{
			[Token(Token = "0x600203F")]
			[Address(RVA = "0x10A775C", Offset = "0x10A775C", VA = "0x10A775C", Slot = "6")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002040")]
			[Address(RVA = "0x10A7764", Offset = "0x10A7764", VA = "0x10A7764")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700014A")]
		public OculusUserData GetOculusUserData
		{
			[Token(Token = "0x6002041")]
			[Address(RVA = "0x10A7770", Offset = "0x10A7770", VA = "0x10A7770", Slot = "7")]
			[CompilerGenerated]
			get
			{
				return default(OculusUserData);
			}
			[Token(Token = "0x6002042")]
			[Address(RVA = "0x10A7778", Offset = "0x10A7778", VA = "0x10A7778")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700014B")]
		public string AccessToken
		{
			[Token(Token = "0x6002043")]
			[Address(RVA = "0x10A7780", Offset = "0x10A7780", VA = "0x10A7780", Slot = "8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002044")]
			[Address(RVA = "0x10A7788", Offset = "0x10A7788", VA = "0x10A7788")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002045")]
		[Address(RVA = "0x10A7790", Offset = "0x10A7790", VA = "0x10A7790")]
		public OculusFacade(DevicePlatform platform)
		{
		}

		[Token(Token = "0x6002046")]
		[Address(RVA = "0x10A77BC", Offset = "0x10A77BC", VA = "0x10A77BC", Slot = "9")]
		public void Initalize()
		{
		}

		[Token(Token = "0x6002047")]
		[Address(RVA = "0x10A7A80", Offset = "0x10A7A80", VA = "0x10A7A80")]
		private void SetAccessToken(Message<string> message)
		{
		}

		[Token(Token = "0x6002048")]
		[Address(RVA = "0x10A7ACC", Offset = "0x10A7ACC", VA = "0x10A7ACC", Slot = "10")]
		public bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6002049")]
		[Address(RVA = "0x10A7B54", Offset = "0x10A7B54", VA = "0x10A7B54")]
		private void SetEntitlement(Message message)
		{
		}

		[Token(Token = "0x600204A")]
		[Address(RVA = "0x10A7C4C", Offset = "0x10A7C4C", VA = "0x10A7C4C")]
		private void SetOculusUserData(Message<User> message)
		{
		}
	}
	[Token(Token = "0x200071A")]
	[CreateAssetMenu(fileName = "OculusLoginSettings", menuName = "Settings/Oculus/LoginSettings")]
	public class OculusLoginSettings : ScriptableObject
	{
		[Token(Token = "0x4002F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float retryInCaseOfErrorTimeoutInSeconds;

		[Token(Token = "0x600204B")]
		[Address(RVA = "0x10A7D78", Offset = "0x10A7D78", VA = "0x10A7D78")]
		public OculusLoginSettings()
		{
		}
	}
	[Token(Token = "0x200071B")]
	public struct Destinations
	{
		[Token(Token = "0x4002F49")]
		public const string MAIN_MENU = "main_menu";

		[Token(Token = "0x4002F4A")]
		public const string FRIENDLY_DUEL = "start_friendly_match";

		[Token(Token = "0x4002F4B")]
		public const string FRIENDLY_SHOOTOUT = "start_friendly_shootout";

		[Token(Token = "0x4002F4C")]
		public const string FRIENDLY_STREET_BRAWL = "start_friendly_streetbrawl";

		[Token(Token = "0x4002F4D")]
		public const string FRIENDLY_ARCTIC_BLAST = "start_friendly_arcticblast";

		[Token(Token = "0x4002F4E")]
		public const string GO_TO_OZO = "go_to_ozo";

		[Token(Token = "0x4002F4F")]
		public const string MISSIONS = "missions";

		[Token(Token = "0x4002F50")]
		public const string KNOCKOUT_TOURNAMENTS = "knockout_tournaments";
	}
	[Token(Token = "0x200071C")]
	public class RichPresenceData
	{
		[Token(Token = "0x4002F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string apiName;

		[Token(Token = "0x4002F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string DeeplinkMessageOverride;

		[Token(Token = "0x4002F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string matchSessionId;

		[Token(Token = "0x4002F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string lobbySessionId;

		[Token(Token = "0x4002F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool IsJoinable;

		[Token(Token = "0x600204C")]
		[Address(RVA = "0x10A7D88", Offset = "0x10A7D88", VA = "0x10A7D88", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600204D")]
		[Address(RVA = "0x10A7E84", Offset = "0x10A7E84", VA = "0x10A7E84", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600204E")]
		[Address(RVA = "0x10A7E8C", Offset = "0x10A7E8C", VA = "0x10A7E8C")]
		public RichPresenceData()
		{
		}
	}
	[Token(Token = "0x200071D")]
	public class LaunchDetailsData
	{
		[Token(Token = "0x4002F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string DeeplinkMessage;

		[Token(Token = "0x4002F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string DestinationApiName;

		[Token(Token = "0x4002F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string MatchSessionID;

		[Token(Token = "0x4002F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string LobbySessionID;

		[Token(Token = "0x600204F")]
		[Address(RVA = "0x10A7E94", Offset = "0x10A7E94", VA = "0x10A7E94")]
		public LaunchDetailsData()
		{
		}
	}
	[Token(Token = "0x200071E")]
	public class RichPresenceHandler : ITickable
	{
		[Token(Token = "0x200071F")]
		private enum Location
		{
			[Token(Token = "0x4002F6F")]
			none,
			[Token(Token = "0x4002F70")]
			menuDefault,
			[Token(Token = "0x4002F71")]
			classic_arena,
			[Token(Token = "0x4002F72")]
			bar,
			[Token(Token = "0x4002F73")]
			missions,
			[Token(Token = "0x4002F74")]
			quickdraw_arena,
			[Token(Token = "0x4002F75")]
			arcticblast_arena,
			[Token(Token = "0x4002F76")]
			streetbrawl_arena
		}

		[Token(Token = "0x4002F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlatformLoginData platformLoginData;

		[Token(Token = "0x4002F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4002F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BarEntranceData barEntranceData;

		[Token(Token = "0x4002F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x4002F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4002F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4002F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GlobalMatchmakingStateData globalMatchmakingStateData;

		[Token(Token = "0x4002F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4002F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly SceneHandlerData sceneHandlerData;

		[Token(Token = "0x4002F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly GameData gameData;

		[Token(Token = "0x4002F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GroupPresenceJoinIntent groupPresenceJoinIntent;

		[Token(Token = "0x4002F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GroupPresenceLeaveIntent groupPresenceLeaveIntent;

		[Token(Token = "0x4002F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly List<Destination> destinations;

		[Token(Token = "0x4002F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private LaunchDetailsData launchRequestData;

		[Token(Token = "0x4002F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool isInitialized;

		[Token(Token = "0x4002F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool shouldEvaluateRequest;

		[Token(Token = "0x4002F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Location currentLocation;

		[Token(Token = "0x4002F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Location previousLocation;

		[Token(Token = "0x4002F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private RichPresenceData currentRichPresenceData;

		[Token(Token = "0x4002F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool isArenaSet;

		[Token(Token = "0x6002050")]
		[Address(RVA = "0x10A7E9C", Offset = "0x10A7E9C", VA = "0x10A7E9C")]
		public RichPresenceHandler(PlatformLoginData platformLoginData, IgnisNetworkConnectionData networkConnectionData, BarEntranceData barEntranceData, FindFriendData findFriendData, EntryPoint.EntryPointData entryPointData, ArenaGameStateData arenaGameStateData, GlobalMatchmakingStateData globalMatchmakingStateData, MenuStateData menuStateData, SceneHandlerData sceneHandlerData, GameData gameData)
		{
		}

		[Token(Token = "0x6002051")]
		[Address(RVA = "0x10A7FC0", Offset = "0x10A7FC0", VA = "0x10A7FC0")]
		private void Initialize()
		{
		}

		[Token(Token = "0x6002052")]
		[Address(RVA = "0x10A8128", Offset = "0x10A8128", VA = "0x10A8128")]
		private void OnLeaveIntentReceived(Message<GroupPresenceLeaveIntent> message)
		{
		}

		[Token(Token = "0x6002053")]
		[Address(RVA = "0x10A812C", Offset = "0x10A812C", VA = "0x10A812C")]
		private void OnInvitiationsSent(Message<LaunchInvitePanelFlowResult> message)
		{
		}

		[Token(Token = "0x6002054")]
		[Address(RVA = "0x10A8130", Offset = "0x10A8130", VA = "0x10A8130")]
		private void OnJoinIntentReceived(Message<GroupPresenceJoinIntent> message)
		{
		}

		[Token(Token = "0x6002055")]
		[Address(RVA = "0x10A81E4", Offset = "0x10A81E4", VA = "0x10A81E4")]
		private void GetAppLaunchDetails()
		{
		}

		[Token(Token = "0x6002056")]
		[Address(RVA = "0x10A84D4", Offset = "0x10A84D4", VA = "0x10A84D4", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002057")]
		[Address(RVA = "0x10A8698", Offset = "0x10A8698", VA = "0x10A8698")]
		private void EvaluateDeepLink(LaunchDetailsData data)
		{
		}

		[Token(Token = "0x6002058")]
		[Address(RVA = "0x10A9380", Offset = "0x10A9380", VA = "0x10A9380")]
		private void GoToMissions(LaunchDetailsData data)
		{
		}

		[Token(Token = "0x6002059")]
		[Address(RVA = "0x10A8DD4", Offset = "0x10A8DD4", VA = "0x10A8DD4")]
		private void GoToMainMenu(LaunchDetailsData data)
		{
		}

		[Token(Token = "0x600205A")]
		[Address(RVA = "0x10A8EB4", Offset = "0x10A8EB4", VA = "0x10A8EB4")]
		private void JoinFriendlyDuel(LaunchDetailsData data, GameplayRules gameplayRules)
		{
		}

		[Token(Token = "0x600205B")]
		[Address(RVA = "0x10A90F0", Offset = "0x10A90F0", VA = "0x10A90F0")]
		private void JoinTheBar(LaunchDetailsData data)
		{
		}

		[Token(Token = "0x600205C")]
		[Address(RVA = "0x10A9460", Offset = "0x10A9460", VA = "0x10A9460")]
		private bool ShouldActivateDeepLink(LaunchDetailsData data)
		{
			return default(bool);
		}

		[Token(Token = "0x600205D")]
		[Address(RVA = "0x10A9764", Offset = "0x10A9764", VA = "0x10A9764")]
		private void SetBarParams(GoToBarData goToBarData)
		{
		}

		[Token(Token = "0x600205E")]
		[Address(RVA = "0x10A9678", Offset = "0x10A9678", VA = "0x10A9678")]
		private void OculusSetRichPresence(RichPresenceData richPresenceData)
		{
		}

		[Token(Token = "0x600205F")]
		[Address(RVA = "0x10A8948", Offset = "0x10A8948", VA = "0x10A8948")]
		private void UpdateRichPresence()
		{
		}

		[Token(Token = "0x6002060")]
		[Address(RVA = "0x10A9920", Offset = "0x10A9920", VA = "0x10A9920")]
		private Location GetCurrentLocation(GameplayRules gameplayRules)
		{
			return default(Location);
		}

		[Token(Token = "0x6002061")]
		[Address(RVA = "0x10A9940", Offset = "0x10A9940", VA = "0x10A9940")]
		[Conditional("IGNIS_DEBUG")]
		private void DebugSetup()
		{
		}

		[Token(Token = "0x6002062")]
		[Address(RVA = "0x10A9944", Offset = "0x10A9944", VA = "0x10A9944")]
		private void DebugOnGetDestinations(Message<DestinationList> message)
		{
		}

		[Token(Token = "0x6002063")]
		[Address(RVA = "0x10A827C", Offset = "0x10A827C", VA = "0x10A827C")]
		private void LogLaunchRequest(LaunchDetailsData launchDetailsData, bool isCall = false)
		{
		}

		[Token(Token = "0x6002064")]
		[Address(RVA = "0x10A9780", Offset = "0x10A9780", VA = "0x10A9780")]
		private void LogRichPresenceUpdate(RichPresenceData data)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000720")]
	public class GoToBarData
	{
		[Token(Token = "0x4002F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string destination;

		[Token(Token = "0x4002F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string lobbyId;

		[Token(Token = "0x4002F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string matchId;

		[Token(Token = "0x6002065")]
		[Address(RVA = "0x10A9728", Offset = "0x10A9728", VA = "0x10A9728")]
		public GoToBarData(string destination, string lobbyId, string matchId)
		{
		}
	}
	[Token(Token = "0x2000721")]
	public struct PicoUserData
	{
		[Token(Token = "0x4002F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string ID;

		[Token(Token = "0x6002066")]
		[Address(RVA = "0x10A9BF0", Offset = "0x10A9BF0", VA = "0x10A9BF0")]
		public PicoUserData(string id)
		{
		}
	}
	[Token(Token = "0x2000722")]
	public class PicoLoginHandler : ITickable
	{
		[Token(Token = "0x4002F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float timestampWhenEntitlementFailed;

		[Token(Token = "0x4002F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PicoLoginSettings picoLoginSettings;

		[Token(Token = "0x4002F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IPicoFacade picoFacade;

		[Token(Token = "0x4002F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlatformLoginData platformLoginData;

		[Token(Token = "0x4002F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x4002F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ITimeSinceStartupTracking timeSinceStartupTracking;

		[Token(Token = "0x4002F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Entitlement entitlement;

		[Token(Token = "0x4002F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool pushTokenReceived;

		[Token(Token = "0x4002F83")]
		private const string PICO_USER_ID = "PICO_USER_ID";

		[Token(Token = "0x6002067")]
		[Address(RVA = "0x10A9BF8", Offset = "0x10A9BF8", VA = "0x10A9BF8")]
		public PicoLoginHandler(PicoLoginSettings picoLoginSettings, IPicoFacade picoFacade, PlatformLoginData platformLoginData, ITimeProvider timeProvider, ITimeSinceStartupTracking timeSinceStartupTracking)
		{
		}

		[Token(Token = "0x6002068")]
		[Address(RVA = "0x10A9F94", Offset = "0x10A9F94", VA = "0x10A9F94", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002069")]
		[Address(RVA = "0x10A9DBC", Offset = "0x10A9DBC", VA = "0x10A9DBC")]
		private void GetLoggedInUserCallback(PicoUserData user)
		{
		}

		[Token(Token = "0x600206A")]
		[Address(RVA = "0x10A9E44", Offset = "0x10A9E44", VA = "0x10A9E44")]
		private void ChangeState(PlatformLoginState newState)
		{
		}
	}
	[Token(Token = "0x2000723")]
	public class PicoDummyFacade : IPicoFacade
	{
		[Token(Token = "0x1700014C")]
		public Entitlement EntitledStatus
		{
			[Token(Token = "0x600206B")]
			[Address(RVA = "0x10AA7BC", Offset = "0x10AA7BC", VA = "0x10AA7BC", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return default(Entitlement);
			}
			[Token(Token = "0x600206C")]
			[Address(RVA = "0x10AA7C4", Offset = "0x10AA7C4", VA = "0x10AA7C4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700014D")]
		public bool FailedToGetUserData
		{
			[Token(Token = "0x600206D")]
			[Address(RVA = "0x10AA7CC", Offset = "0x10AA7CC", VA = "0x10AA7CC", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600206E")]
			[Address(RVA = "0x10AA7D4", Offset = "0x10AA7D4", VA = "0x10AA7D4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700014E")]
		public bool FoundUserData
		{
			[Token(Token = "0x600206F")]
			[Address(RVA = "0x10AA7E0", Offset = "0x10AA7E0", VA = "0x10AA7E0", Slot = "6")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002070")]
			[Address(RVA = "0x10AA7E8", Offset = "0x10AA7E8", VA = "0x10AA7E8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700014F")]
		public PicoUserData GetPicoUserData
		{
			[Token(Token = "0x6002071")]
			[Address(RVA = "0x10AA7F4", Offset = "0x10AA7F4", VA = "0x10AA7F4", Slot = "7")]
			[CompilerGenerated]
			get
			{
				return default(PicoUserData);
			}
			[Token(Token = "0x6002072")]
			[Address(RVA = "0x10AA7FC", Offset = "0x10AA7FC", VA = "0x10AA7FC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000150")]
		public string AccessToken
		{
			[Token(Token = "0x6002073")]
			[Address(RVA = "0x10AA804", Offset = "0x10AA804", VA = "0x10AA804", Slot = "8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002074")]
			[Address(RVA = "0x10AA80C", Offset = "0x10AA80C", VA = "0x10AA80C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002075")]
		[Address(RVA = "0x10AA814", Offset = "0x10AA814", VA = "0x10AA814", Slot = "9")]
		public void Initalize()
		{
		}

		[Token(Token = "0x6002076")]
		[Address(RVA = "0x10AA838", Offset = "0x10AA838", VA = "0x10AA838", Slot = "10")]
		public bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6002077")]
		[Address(RVA = "0x10AA840", Offset = "0x10AA840", VA = "0x10AA840")]
		public PicoDummyFacade()
		{
		}
	}
	[Token(Token = "0x2000724")]
	public interface IPicoFacade
	{
		[Token(Token = "0x17000151")]
		Entitlement EntitledStatus
		{
			[Token(Token = "0x6002078")]
			get;
		}

		[Token(Token = "0x17000152")]
		bool FailedToGetUserData
		{
			[Token(Token = "0x6002079")]
			get;
		}

		[Token(Token = "0x17000153")]
		bool FoundUserData
		{
			[Token(Token = "0x600207A")]
			get;
		}

		[Token(Token = "0x17000154")]
		PicoUserData GetPicoUserData
		{
			[Token(Token = "0x600207B")]
			get;
		}

		[Token(Token = "0x17000155")]
		string AccessToken
		{
			[Token(Token = "0x600207C")]
			get;
		}

		[Token(Token = "0x600207D")]
		void Initalize();

		[Token(Token = "0x600207E")]
		bool IsInitialized();
	}
	[Token(Token = "0x2000725")]
	public class PicoFacade : IPicoFacade
	{
		[Token(Token = "0x4002F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DevicePlatform platform;

		[Token(Token = "0x4002F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PicoEntitlementHandler picoEntitlementHandler;

		[Token(Token = "0x17000156")]
		public Entitlement EntitledStatus
		{
			[Token(Token = "0x600207F")]
			[Address(RVA = "0x10AA848", Offset = "0x10AA848", VA = "0x10AA848", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return default(Entitlement);
			}
			[Token(Token = "0x6002080")]
			[Address(RVA = "0x10AA850", Offset = "0x10AA850", VA = "0x10AA850")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000157")]
		public bool FailedToGetUserData
		{
			[Token(Token = "0x6002081")]
			[Address(RVA = "0x10AA858", Offset = "0x10AA858", VA = "0x10AA858", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002082")]
			[Address(RVA = "0x10AA860", Offset = "0x10AA860", VA = "0x10AA860")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000158")]
		public bool FoundUserData
		{
			[Token(Token = "0x6002083")]
			[Address(RVA = "0x10AA86C", Offset = "0x10AA86C", VA = "0x10AA86C", Slot = "6")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002084")]
			[Address(RVA = "0x10AA874", Offset = "0x10AA874", VA = "0x10AA874")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000159")]
		public PicoUserData GetPicoUserData
		{
			[Token(Token = "0x6002085")]
			[Address(RVA = "0x10AA880", Offset = "0x10AA880", VA = "0x10AA880", Slot = "7")]
			[CompilerGenerated]
			get
			{
				return default(PicoUserData);
			}
			[Token(Token = "0x6002086")]
			[Address(RVA = "0x10AA888", Offset = "0x10AA888", VA = "0x10AA888")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700015A")]
		public string AccessToken
		{
			[Token(Token = "0x6002087")]
			[Address(RVA = "0x10AA890", Offset = "0x10AA890", VA = "0x10AA890", Slot = "8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002088")]
			[Address(RVA = "0x10AA898", Offset = "0x10AA898", VA = "0x10AA898")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002089")]
		[Address(RVA = "0x10AA8A0", Offset = "0x10AA8A0", VA = "0x10AA8A0")]
		public PicoFacade(DevicePlatform platform, PicoEntitlementHandler picoEntitlementHandler)
		{
		}

		[Token(Token = "0x600208A")]
		[Address(RVA = "0x10AA8D8", Offset = "0x10AA8D8", VA = "0x10AA8D8", Slot = "9")]
		public void Initalize()
		{
		}

		[Token(Token = "0x600208B")]
		[Address(RVA = "0x10AA8DC", Offset = "0x10AA8DC", VA = "0x10AA8DC", Slot = "10")]
		public bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x600208C")]
		[Address(RVA = "0x10AA8E4", Offset = "0x10AA8E4", VA = "0x10AA8E4")]
		private void SetEntitlement(PicoEntitlementData entitlementData)
		{
		}
	}
	[Token(Token = "0x2000726")]
	[CreateAssetMenu(fileName = "PicoLoginSettings", menuName = "Settings/Pico/LoginSettings")]
	public class PicoLoginSettings : ScriptableObject
	{
		[Token(Token = "0x4002F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float retryInCaseOfErrorTimeoutInSeconds;

		[Token(Token = "0x600208D")]
		[Address(RVA = "0x10AA9E4", Offset = "0x10AA9E4", VA = "0x10AA9E4")]
		public PicoLoginSettings()
		{
		}
	}
	[Token(Token = "0x2000727")]
	public class SteamLoginHandler : ITickable
	{
		[Token(Token = "0x4002F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlatformLoginData platformLoginData;

		[Token(Token = "0x4002F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x4002F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ISteamFacade steamFacade;

		[Token(Token = "0x4002F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly OculusLoginSettings oculusLoginSettings;

		[Token(Token = "0x600208E")]
		[Address(RVA = "0x10AA9F4", Offset = "0x10AA9F4", VA = "0x10AA9F4")]
		public SteamLoginHandler(PlatformLoginData platformLoginData, ITimeProvider timeProvider, ISteamFacade steamFacade, OculusLoginSettings oculusLoginSettings)
		{
		}

		[Token(Token = "0x600208F")]
		[Address(RVA = "0x10AAA40", Offset = "0x10AAA40", VA = "0x10AAA40", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002090")]
		[Address(RVA = "0x10AAFA0", Offset = "0x10AAFA0", VA = "0x10AAFA0")]
		private void GetLoggedInUserCallback(string token)
		{
		}

		[Token(Token = "0x6002091")]
		[Address(RVA = "0x10AAE50", Offset = "0x10AAE50", VA = "0x10AAE50")]
		private void ChangeState(PlatformLoginState newState)
		{
		}
	}
	[Token(Token = "0x2000728")]
	public interface ISteamFacade
	{
		[Token(Token = "0x6002092")]
		string GetSteamUserId();

		[Token(Token = "0x6002093")]
		string GetSteamAuthTicket();

		[Token(Token = "0x6002094")]
		void Initalize();

		[Token(Token = "0x6002095")]
		bool IsInitialized();
	}
	[Token(Token = "0x2000729")]
	public class SteamFacade : ISteamFacade
	{
		[Token(Token = "0x6002096")]
		[Address(RVA = "0x10AAFD4", Offset = "0x10AAFD4", VA = "0x10AAFD4", Slot = "4")]
		public string GetSteamUserId()
		{
			return null;
		}

		[Token(Token = "0x6002097")]
		[Address(RVA = "0x10AAFDC", Offset = "0x10AAFDC", VA = "0x10AAFDC", Slot = "5")]
		public string GetSteamAuthTicket()
		{
			return null;
		}

		[Token(Token = "0x6002098")]
		[Address(RVA = "0x10AAFE4", Offset = "0x10AAFE4", VA = "0x10AAFE4", Slot = "6")]
		public void Initalize()
		{
		}

		[Token(Token = "0x6002099")]
		[Address(RVA = "0x10AAFE8", Offset = "0x10AAFE8", VA = "0x10AAFE8", Slot = "7")]
		public bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x600209A")]
		[Address(RVA = "0x10AAFF0", Offset = "0x10AAFF0", VA = "0x10AAFF0")]
		public SteamFacade()
		{
		}
	}
	[Token(Token = "0x200072A")]
	public class SteamVRCameraHelper : MonoBehaviour
	{
		[Token(Token = "0x600209B")]
		[Address(RVA = "0x10AAFF8", Offset = "0x10AAFF8", VA = "0x10AAFF8")]
		private void Start()
		{
		}

		[Token(Token = "0x600209C")]
		[Address(RVA = "0x10AAFFC", Offset = "0x10AAFFC", VA = "0x10AAFFC")]
		public SteamVRCameraHelper()
		{
		}
	}
	[Token(Token = "0x200072B")]
	public class BannerData
	{
		[Token(Token = "0x4002F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int player1BannerId;

		[Token(Token = "0x4002F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int player2BannerId;

		[Token(Token = "0x4002F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int currentBannerId;

		[Token(Token = "0x600209D")]
		[Address(RVA = "0x10AB004", Offset = "0x10AB004", VA = "0x10AB004")]
		public BannerData()
		{
		}
	}
	[Token(Token = "0x200072C")]
	public class BannerHandler : ITickable
	{
		[Token(Token = "0x4002F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BannerData bannerData;

		[Token(Token = "0x4002F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly EnvironmentSceneData environmentSceneData;

		[Token(Token = "0x4002F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BannerSettings bannerSettings;

		[Token(Token = "0x4002F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int player1BannerId;

		[Token(Token = "0x4002F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int player2BannerId;

		[Token(Token = "0x4002F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isSceneAvailable;

		[Token(Token = "0x600209E")]
		[Address(RVA = "0x10AB00C", Offset = "0x10AB00C", VA = "0x10AB00C")]
		public BannerHandler(BannerData bannerData, EnvironmentSceneData environmentSceneData, BannerSettings bannerSettings)
		{
		}

		[Token(Token = "0x600209F")]
		[Address(RVA = "0x10AB050", Offset = "0x10AB050", VA = "0x10AB050", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60020A0")]
		[Address(RVA = "0x10AB0F0", Offset = "0x10AB0F0", VA = "0x10AB0F0")]
		private void UpdateBanners(BannerReference[] banners, int index)
		{
		}
	}
	[Token(Token = "0x200072D")]
	public class BannerReference : MonoBehaviour
	{
		[Token(Token = "0x4002F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshRenderer meshRenderer;

		[Token(Token = "0x4002F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshFilter meshFilter;

		[Token(Token = "0x60020A1")]
		[Address(RVA = "0x10AB1F4", Offset = "0x10AB1F4", VA = "0x10AB1F4")]
		public BannerReference()
		{
		}
	}
	[Token(Token = "0x200072E")]
	public class BarAnimationData
	{
		[Token(Token = "0x4002FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int Percentage;

		[Token(Token = "0x4002FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly int PercentageDelay;

		[Token(Token = "0x4002FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly int LowHPpulseSpeed;

		[Token(Token = "0x4002FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly int LowHPpulseStr;

		[Token(Token = "0x4002FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float startValue;

		[Token(Token = "0x4002FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float finalValue;

		[Token(Token = "0x4002FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float duration;

		[Token(Token = "0x4002FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float elapsedTime;

		[Token(Token = "0x4002FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool animate;

		[Token(Token = "0x4002FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve animationCurve;

		[Token(Token = "0x4002FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int shaderProperty;

		[Token(Token = "0x60020A2")]
		[Address(RVA = "0x10AB1FC", Offset = "0x10AB1FC", VA = "0x10AB1FC")]
		public BarAnimationData(int shaderProperty, float duration, AnimationCurve animationCurve)
		{
		}

		[Token(Token = "0x60020A3")]
		[Address(RVA = "0x10AB23C", Offset = "0x10AB23C", VA = "0x10AB23C")]
		public void UpdateAnimation(Material material)
		{
		}
	}
	[Token(Token = "0x200072F")]
	public class BodyPartReference : MonoBehaviour, IImpactableReference, IImpactable, ITransformRoots
	{
		[Token(Token = "0x4002FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TriggerColliderType colliderType;

		[Token(Token = "0x4002FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Collider bodyPartCollider;

		[Token(Token = "0x4002FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ImpactTypes impactType;

		[Token(Token = "0x4002FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public PlayerImpactTypes playerImpactType;

		[Token(Token = "0x4002FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public int playerNetworkId;

		[Token(Token = "0x1700015B")]
		public HashSet<int> CollidingIds
		{
			[Token(Token = "0x60020AD")]
			[Address(RVA = "0x10AB590", Offset = "0x10AB590", VA = "0x10AB590", Slot = "18")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60020AE")]
			[Address(RVA = "0x10AB598", Offset = "0x10AB598", VA = "0x10AB598")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700015C")]
		public float LastTriggeredEffectTimeStamp
		{
			[Token(Token = "0x60020AF")]
			[Address(RVA = "0x10AB5A0", Offset = "0x10AB5A0", VA = "0x10AB5A0", Slot = "19")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60020B0")]
			[Address(RVA = "0x10AB5A8", Offset = "0x10AB5A8", VA = "0x10AB5A8", Slot = "20")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700015D")]
		public bool CanCollideWithHands
		{
			[Token(Token = "0x60020B1")]
			[Address(RVA = "0x10AB5B0", Offset = "0x10AB5B0", VA = "0x10AB5B0", Slot = "21")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60020B2")]
			[Address(RVA = "0x10AB5B8", Offset = "0x10AB5B8", VA = "0x10AB5B8", Slot = "22")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700015E")]
		public bool UseCollidingObjectAsCenterOfHitForImpact
		{
			[Token(Token = "0x60020B3")]
			[Address(RVA = "0x10AB5C4", Offset = "0x10AB5C4", VA = "0x10AB5C4", Slot = "23")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60020B4")]
			[Address(RVA = "0x10AB5CC", Offset = "0x10AB5CC", VA = "0x10AB5CC", Slot = "24")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700015F")]
		public Transform PhysicsRootTransform
		{
			[Token(Token = "0x60020BC")]
			[Address(RVA = "0x10AB67C", Offset = "0x10AB67C", VA = "0x10AB67C", Slot = "25")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60020BD")]
			[Address(RVA = "0x10AB684", Offset = "0x10AB684", VA = "0x10AB684")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000160")]
		public Transform VisualRootTransform
		{
			[Token(Token = "0x60020BE")]
			[Address(RVA = "0x10AB68C", Offset = "0x10AB68C", VA = "0x10AB68C", Slot = "26")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60020BF")]
			[Address(RVA = "0x10AB694", Offset = "0x10AB694", VA = "0x10AB694")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60020A5")]
		[Address(RVA = "0x10AB3D8", Offset = "0x10AB3D8", VA = "0x10AB3D8")]
		public void Start()
		{
		}

		[Token(Token = "0x60020A6")]
		[Address(RVA = "0x10AB408", Offset = "0x10AB408", VA = "0x10AB408", Slot = "9")]
		public float GetDamageProjectile()
		{
			return default(float);
		}

		[Token(Token = "0x60020A7")]
		[Address(RVA = "0x10AB448", Offset = "0x10AB448", VA = "0x10AB448", Slot = "10")]
		public float GetDamagePlayer()
		{
			return default(float);
		}

		[Token(Token = "0x60020A8")]
		[Address(RVA = "0x10AB488", Offset = "0x10AB488", VA = "0x10AB488", Slot = "11")]
		public float GetProjectileRadius()
		{
			return default(float);
		}

		[Token(Token = "0x60020A9")]
		[Address(RVA = "0x10AB4C8", Offset = "0x10AB4C8", VA = "0x10AB4C8", Slot = "12")]
		public float GetTotalPredictedPlayerDamage()
		{
			return default(float);
		}

		[Token(Token = "0x60020AA")]
		[Address(RVA = "0x10AB508", Offset = "0x10AB508", VA = "0x10AB508", Slot = "13")]
		public float GetSpeed()
		{
			return default(float);
		}

		[Token(Token = "0x60020AB")]
		[Address(RVA = "0x10AB548", Offset = "0x10AB548", VA = "0x10AB548", Slot = "14")]
		public bool IsHeld()
		{
			return default(bool);
		}

		[Token(Token = "0x60020AC")]
		[Address(RVA = "0x10AB550", Offset = "0x10AB550", VA = "0x10AB550", Slot = "17")]
		public ImpactSettings ImpactSettings()
		{
			return null;
		}

		[Token(Token = "0x60020B5")]
		[Address(RVA = "0x10AB5D8", Offset = "0x10AB5D8", VA = "0x10AB5D8", Slot = "5")]
		public IImpactable Impactable()
		{
			return null;
		}

		[Token(Token = "0x60020B6")]
		[Address(RVA = "0x10AB5DC", Offset = "0x10AB5DC", VA = "0x10AB5DC", Slot = "7")]
		public ImpactTypes ImpactType()
		{
			return default(ImpactTypes);
		}

		[Token(Token = "0x60020B7")]
		[Address(RVA = "0x10AB5E4", Offset = "0x10AB5E4", VA = "0x10AB5E4", Slot = "8")]
		public PlayerImpactTypes PlayerImpactType()
		{
			return default(PlayerImpactTypes);
		}

		[Token(Token = "0x60020B8")]
		[Address(RVA = "0x10AB5EC", Offset = "0x10AB5EC", VA = "0x10AB5EC", Slot = "6")]
		public int NetworkId()
		{
			return default(int);
		}

		[Token(Token = "0x60020B9")]
		[Address(RVA = "0x10AB5F4", Offset = "0x10AB5F4", VA = "0x10AB5F4", Slot = "15")]
		public void SetThreatRay(BotUtils.ThreatRay ray)
		{
		}

		[Token(Token = "0x60020BA")]
		[Address(RVA = "0x10AB634", Offset = "0x10AB634", VA = "0x10AB634", Slot = "16")]
		public BotUtils.ThreatRay GetThreatRay()
		{
			return default(BotUtils.ThreatRay);
		}

		[Token(Token = "0x60020BB")]
		[Address(RVA = "0x10AB674", Offset = "0x10AB674", VA = "0x10AB674", Slot = "4")]
		public TriggerColliderType TriggerColliderType()
		{
			return default(TriggerColliderType);
		}

		[Token(Token = "0x60020C0")]
		[Address(RVA = "0x10AB69C", Offset = "0x10AB69C", VA = "0x10AB69C")]
		public BodyPartReference()
		{
		}
	}
	[Token(Token = "0x2000730")]
	public class CameraReference : MonoBehaviour
	{
		[Token(Token = "0x4002FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera mainCamera;

		[Token(Token = "0x4002FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform cameraTransform;

		[Token(Token = "0x4002FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform vignetteParent;

		[Token(Token = "0x4002FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Camera uiCamera;

		[Token(Token = "0x60020C1")]
		[Address(RVA = "0x10AB6AC", Offset = "0x10AB6AC", VA = "0x10AB6AC")]
		public CameraReference()
		{
		}
	}
	[Token(Token = "0x2000731")]
	public enum CharacterType
	{
		[Token(Token = "0x4002FBB")]
		LocalCharacter,
		[Token(Token = "0x4002FBC")]
		PlayerOne,
		[Token(Token = "0x4002FBD")]
		PlayerTwo,
		[Token(Token = "0x4002FBE")]
		Cinematic
	}
	[Token(Token = "0x2000732")]
	public struct FingerTracking
	{
		[Token(Token = "0x4002FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly float index;

		[Token(Token = "0x4002FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly float middle;

		[Token(Token = "0x4002FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly float ring;

		[Token(Token = "0x4002FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly float pinky;

		[Token(Token = "0x4002FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly float thumb;

		[Token(Token = "0x60020C2")]
		[Address(RVA = "0x10AB6B4", Offset = "0x10AB6B4", VA = "0x10AB6B4")]
		public FingerTracking(float index, float middle, float ring, float pinky, float thumb)
		{
		}
	}
	[Token(Token = "0x2000733")]
	public readonly struct CharacterSkinUpdate
	{
		[Token(Token = "0x4002FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int lookUpIndex;

		[Token(Token = "0x4002FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string lookupId;

		[Token(Token = "0x4002FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly CharacterColor colorType;

		[Token(Token = "0x4002FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly CharacterType characterType;

		[Token(Token = "0x4002FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly bool showHelmet;

		[Token(Token = "0x4002FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public readonly bool isLocalPlayer;

		[Token(Token = "0x60020C3")]
		[Address(RVA = "0x10AB6C4", Offset = "0x10AB6C4", VA = "0x10AB6C4")]
		public CharacterSkinUpdate(int lookUpIndex, CharacterColor colorType, CharacterType characterType, bool showHelmet, bool isLocalPlayer = false)
		{
		}

		[Token(Token = "0x60020C4")]
		[Address(RVA = "0x10AB6F0", Offset = "0x10AB6F0", VA = "0x10AB6F0")]
		public CharacterSkinUpdate(int lookUpIndex, bool isPlayerOne, CharacterType characterType, bool showHelmet, bool isLocalPlayer = false)
		{
		}

		[Token(Token = "0x60020C5")]
		[Address(RVA = "0x10AB724", Offset = "0x10AB724", VA = "0x10AB724")]
		private CharacterSkinUpdate(string skinLookupId)
		{
		}

		[Token(Token = "0x60020C6")]
		[Address(RVA = "0x10AB748", Offset = "0x10AB748", VA = "0x10AB748")]
		public static CharacterSkinUpdate CreateCinematicCharacter(string skinId)
		{
			return default(CharacterSkinUpdate);
		}
	}
	[Token(Token = "0x2000734")]
	public class CharacterAnimationData
	{
		[Token(Token = "0x4002FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CharacterType characterType;

		[Token(Token = "0x4002FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandAnimationData leftHand;

		[Token(Token = "0x4002FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandAnimationData rightHand;

		[Token(Token = "0x4002FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool hasFaceAnimation;

		[Token(Token = "0x4002FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool revealPlayer;

		[Token(Token = "0x4002FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool isRevealed;

		[Token(Token = "0x60020C7")]
		[Address(RVA = "0x10AB774", Offset = "0x10AB774", VA = "0x10AB774")]
		public CharacterAnimationData()
		{
		}
	}
	[Token(Token = "0x2000735")]
	public class HandAnimationData
	{
		[Token(Token = "0x4002FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FingerTracking fingers;

		[Token(Token = "0x4002FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isTriggering;

		[Token(Token = "0x4002FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool isReleasingBowstring;

		[Token(Token = "0x60020C8")]
		[Address(RVA = "0x10AB7F8", Offset = "0x10AB7F8", VA = "0x10AB7F8")]
		public HandAnimationData()
		{
		}
	}
	[Token(Token = "0x2000736")]
	public struct CharacterSkinData
	{
		[Token(Token = "0x4002FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int characterId;

		[Token(Token = "0x4002FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Material bodyMaterial;

		[Token(Token = "0x4002FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Material holoMaterial;

		[Token(Token = "0x60020C9")]
		[Address(RVA = "0x10AB800", Offset = "0x10AB800", VA = "0x10AB800")]
		public CharacterSkinData(int characterId, Material bodyMaterial, Material holoMaterial)
		{
		}
	}
	[Token(Token = "0x2000737")]
	public enum CharacterColor
	{
		[Token(Token = "0x4002FD7")]
		Pink,
		[Token(Token = "0x4002FD8")]
		Blue,
		[Token(Token = "0x4002FD9")]
		useOriginalColor
	}
	[Token(Token = "0x2000738")]
	public readonly struct RemoveCharacterRequest
	{
		[Token(Token = "0x4002FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly CharacterType characterType;

		[Token(Token = "0x4002FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string skin;

		[Token(Token = "0x60020CA")]
		[Address(RVA = "0x10AB80C", Offset = "0x10AB80C", VA = "0x10AB80C")]
		public RemoveCharacterRequest(CharacterType characterType, string skin = "")
		{
		}
	}
	[Token(Token = "0x2000739")]
	public readonly struct CinematicCharacter
	{
		[Token(Token = "0x4002FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly CharacterReference characterReference;

		[Token(Token = "0x4002FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly PlayerReferences emoteTarget;

		[Token(Token = "0x4002FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string skin;

		[Token(Token = "0x60020CB")]
		[Address(RVA = "0x10AB818", Offset = "0x10AB818", VA = "0x10AB818")]
		public CinematicCharacter(CharacterReference characterReference, string skin, PlayerReferences emoteTarget)
		{
		}
	}
	[Token(Token = "0x200073A")]
	public class CharacterData
	{
		[Token(Token = "0x4002FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int Index;

		[Token(Token = "0x4002FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly int Middle;

		[Token(Token = "0x4002FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly int Ring;

		[Token(Token = "0x4002FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly int Pinky;

		[Token(Token = "0x4002FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly int Thumb;

		[Token(Token = "0x4002FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static readonly int GrabTool;

		[Token(Token = "0x4002FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly int GrabBow;

		[Token(Token = "0x4002FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static readonly int ToolActivation;

		[Token(Token = "0x4002FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly int ReleasingBowstring;

		[Token(Token = "0x4002FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static readonly int PullingBowstring;

		[Token(Token = "0x4002FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly int Hide;

		[Token(Token = "0x4002FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static readonly int Idle;

		[Token(Token = "0x4002FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static LayerMask remotePlayerMask;

		[Token(Token = "0x4002FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static LayerMask hideFromMainCameraMask;

		[Token(Token = "0x4002FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static LayerMask localPlayerMask;

		[Token(Token = "0x4002FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int currentCharacterId;

		[Token(Token = "0x4002FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly CharacterAnimationData[] characterAnimationData;

		[Token(Token = "0x4002FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Queue<CharacterSkinUpdate> spawnCharacterRequest;

		[Token(Token = "0x4002FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly Queue<RemoveCharacterRequest> removeCharacterRequest;

		[Token(Token = "0x4002FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool isPinkSelected;

		[Token(Token = "0x4002FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Dictionary<string, CinematicCharacter> cinematicCharacters;

		[Token(Token = "0x4002FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly Dictionary<string, CharacterReference> characterLookup;

		[Token(Token = "0x4002FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly string[] TypeToLookupID;

		[Token(Token = "0x4002FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool isLocalCharacterActive;

		[Token(Token = "0x4002FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public CharacterReference localCharacter;

		[Token(Token = "0x60020CC")]
		[Address(RVA = "0x10AB824", Offset = "0x10AB824", VA = "0x10AB824")]
		public CharacterReference GetCharacter(CharacterType characterType, string skinId)
		{
			return null;
		}

		[Token(Token = "0x60020CD")]
		[Address(RVA = "0x10AB8B0", Offset = "0x10AB8B0", VA = "0x10AB8B0")]
		public string GetCharacterLookupKey(CharacterType characterType, string skinId)
		{
			return null;
		}

		[Token(Token = "0x60020CE")]
		[Address(RVA = "0x10AB940", Offset = "0x10AB940", VA = "0x10AB940")]
		public CharacterData()
		{
		}
	}
	[Token(Token = "0x200073B")]
	public class CharacterHandler : ITickable
	{
		[Token(Token = "0x4002FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly CharacterData characterData;

		[Token(Token = "0x4002FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly CharacterSyncHandlerData characterSyncHandlerData;

		[Token(Token = "0x4002FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly CharacterSettings characterSettings;

		[Token(Token = "0x4002FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayerSettings playerSettings;

		[Token(Token = "0x4002FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Transform worldParent;

		[Token(Token = "0x4002FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly GameData gameData;

		[Token(Token = "0x4002FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x4002FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int characterId;

		[Token(Token = "0x4003000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int HologramColor;

		[Token(Token = "0x4003001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int EmissionColor;

		[Token(Token = "0x4003002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool alwaysShowHelmet;

		[Token(Token = "0x4003003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		private bool forceHideLocalPlayerCharacter;

		[Token(Token = "0x4003004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly Dictionary<string, CharacterSkinData> charactersSkinData;

		[Token(Token = "0x60020D0")]
		[Address(RVA = "0x10ABF00", Offset = "0x10ABF00", VA = "0x10ABF00")]
		public CharacterHandler(CharacterData characterData, CharacterSyncHandlerData characterSyncHandlerData, CharacterSettings characterSettings, PlayerReferences playerReferences, PlayerSettings playerSettings, Transform worldParent, GameData gameData, CustomizationData customizationData)
		{
		}

		[Token(Token = "0x60020D1")]
		[Address(RVA = "0x10AC060", Offset = "0x10AC060", VA = "0x10AC060", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60020D2")]
		[Address(RVA = "0x10AC1E0", Offset = "0x10AC1E0", VA = "0x10AC1E0")]
		private void UpdateSkin(CharacterSkinUpdate skinUpdate)
		{
		}

		[Token(Token = "0x60020D3")]
		[Address(RVA = "0x10AC87C", Offset = "0x10AC87C", VA = "0x10AC87C")]
		private void AssignMaterials(CharacterSkinUpdate skinUpdate, int skinIndex, CharacterItem characterSkin, CharacterReference reference)
		{
		}

		[Token(Token = "0x60020D4")]
		[Address(RVA = "0x10AD018", Offset = "0x10AD018", VA = "0x10AD018")]
		private void SetFaceColor(CharacterType characterType, CharacterReference reference, CharacterItem characterSkin)
		{
		}

		[Token(Token = "0x60020D5")]
		[Address(RVA = "0x10ACB54", Offset = "0x10ACB54", VA = "0x10ACB54")]
		private void SetupCharacter(bool isLocalPlayer, CharacterType characterType, CharacterReference reference, CharacterItem characterItem)
		{
		}

		[Token(Token = "0x60020D6")]
		[Address(RVA = "0x10AD210", Offset = "0x10AD210", VA = "0x10AD210")]
		private void AssignPlayerData(CharacterType characterType, CharacterReference reference, bool isRevealed, int networkId)
		{
		}

		[Token(Token = "0x60020D7")]
		[Address(RVA = "0x10AC628", Offset = "0x10AC628", VA = "0x10AC628")]
		private CharacterReference CreateOrGetCurrentReference(bool isLocalPlayer, CharacterType characterType, CharacterItem characterItem)
		{
			return null;
		}

		[Token(Token = "0x60020D8")]
		[Address(RVA = "0x10AC7D8", Offset = "0x10AC7D8", VA = "0x10AC7D8")]
		private void StartSyncCharacterWithPlayer(CharacterType characterType, bool isLocalPlayer, string skinId)
		{
		}

		[Token(Token = "0x60020D9")]
		[Address(RVA = "0x10AD2D4", Offset = "0x10AD2D4", VA = "0x10AD2D4")]
		private CharacterReference CreateCharacter(CharacterItem characterItem, CharacterType characterType)
		{
			return null;
		}

		[Token(Token = "0x60020DA")]
		[Address(RVA = "0x10AC94C", Offset = "0x10AC94C", VA = "0x10AC94C")]
		private void SetRenderingLayer(CharacterReference reference, bool isLocalPlayer, bool showHelmet)
		{
		}

		[Token(Token = "0x60020DB")]
		[Address(RVA = "0x10AD43C", Offset = "0x10AD43C", VA = "0x10AD43C")]
		private LayerMask GetLocalBodyLayerMask()
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60020DC")]
		[Address(RVA = "0x10AD4AC", Offset = "0x10AD4AC", VA = "0x10AD4AC")]
		private int GetHeadLayerMask(bool showHead, bool isLocalPLayer)
		{
			return default(int);
		}

		[Token(Token = "0x60020DD")]
		[Address(RVA = "0x10AD528", Offset = "0x10AD528", VA = "0x10AD528")]
		private LayerMask GetPlayerLayerMask(bool isLocalPlayer)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60020DE")]
		[Address(RVA = "0x10ACD9C", Offset = "0x10ACD9C", VA = "0x10ACD9C")]
		private (Material, Material) UpdateMaterials(CharacterColor colorType, CharacterType characterType, int character, CharacterItem characterSkin)
		{
			return default((Material, Material));
		}

		[Token(Token = "0x60020DF")]
		[Address(RVA = "0x10AD118", Offset = "0x10AD118", VA = "0x10AD118")]
		private Color GetCharacterColor(CharacterColor colorType, CharacterItem character)
		{
			return default(Color);
		}

		[Token(Token = "0x60020E0")]
		[Address(RVA = "0x10AC40C", Offset = "0x10AC40C", VA = "0x10AC40C")]
		private void RemoveCharacterRequest(RemoveCharacterRequest request)
		{
		}
	}
	[Token(Token = "0x200073C")]
	public class CharacterReference : MonoBehaviour
	{
		[Token(Token = "0x4003005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] transformSyncOrder;

		[Token(Token = "0x4003006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator mainAnimator;

		[Token(Token = "0x4003007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Hands")]
		public bool hasHands;

		[Token(Token = "0x4003008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[ConditionalHide("hasHands", true)]
		public HandReference leftHand;

		[Token(Token = "0x4003009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[ConditionalHide("hasHands", true)]
		public HandReference rightHand;

		[Token(Token = "0x400300A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Head")]
		public bool hasHead;

		[Token(Token = "0x400300B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[ConditionalHide("hasHead", true)]
		public Transform head;

		[Token(Token = "0x400300C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[ConditionalHide("hasHead", true)]
		public SkinnedMeshRenderer headRenderer;

		[Token(Token = "0x400300D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Face")]
		public bool hasFaceAnimations;

		[Token(Token = "0x400300E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ConditionalHide("hasFaceAnimations", true)]
		public Animator faceAnimator;

		[Token(Token = "0x400300F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[ConditionalHide("hasFaceAnimations", true)]
		public AnimatedFaceMaterialDriverReference faceMaterialDriver;

		[Token(Token = "0x4003010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Body")]
		public bool hasBody;

		[Token(Token = "0x4003011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[ConditionalHide("hasBody", true)]
		public SkinnedMeshRenderer bodyRenderer;

		[Token(Token = "0x4003012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[ConditionalHide("hasBody", true)]
		public SkinnedMeshRenderer holoRenderer;

		[Token(Token = "0x4003013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Needs to match with the transform on the player")]
		public Transform[] transformsToSync;

		[NonSerialized]
		[Token(Token = "0x4003014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public int typeIndex;

		[Token(Token = "0x60020E2")]
		[Address(RVA = "0x10AD630", Offset = "0x10AD630", VA = "0x10AD630")]
		public CharacterReference()
		{
		}
	}
	[Token(Token = "0x200073D")]
	[CreateAssetMenu(fileName = "CharacterSettings", menuName = "Settings/Player/CharacterSettings", order = 2)]
	public class CharacterSettings : ScriptableObject
	{
		[Token(Token = "0x4003015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CharacterItem[] characterItems;

		[Token(Token = "0x4003016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerReferences characterEmoteTarget;

		[Token(Token = "0x4003017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FactionSettings factionSettings;

		[Token(Token = "0x60020E4")]
		[Address(RVA = "0x10AD800", Offset = "0x10AD800", VA = "0x10AD800")]
		public CharacterSettings()
		{
		}
	}
	[Token(Token = "0x200073E")]
	public enum FactionType
	{
		[Token(Token = "0x4003019")]
		ModOps,
		[Token(Token = "0x400301A")]
		NeoTexx,
		[Token(Token = "0x400301B")]
		TrueTech
	}
	[Serializable]
	[Token(Token = "0x200073F")]
	public class CharacterItem : Item
	{
		[Token(Token = "0x400301C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FactionType characterFactionType;

		[Token(Token = "0x400301D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string characterId;

		[Token(Token = "0x400301E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEngine.Sprite healthBarIconPlayerOne;

		[Token(Token = "0x400301F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEngine.Sprite healthBarIconPlayerTwo;

		[Token(Token = "0x4003020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public CharacterReference characterPrefab;

		[Token(Token = "0x4003021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Material material;

		[Token(Token = "0x4003022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[ColorUsage(true, true)]
		public Color customColor;

		[Token(Token = "0x4003023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public CharacterHeadReference headPrefab;

		[Token(Token = "0x4003024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public Material handMaterial;

		[Token(Token = "0x4003025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		public Mesh hologramBodyMesh;

		[Token(Token = "0x4003026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		public Mesh lShoulderMesh;

		[Token(Token = "0x4003027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		public Mesh rShoulderMesh;

		[Token(Token = "0x4003028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		public Mesh bodyMesh;

		[Token(Token = "0x4003029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[HideInInspector]
		public Mesh rHandMesh;

		[Token(Token = "0x400302A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[HideInInspector]
		public Mesh rHologramHandMesh;

		[Token(Token = "0x400302B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[HideInInspector]
		public Mesh lHandMesh;

		[Token(Token = "0x400302C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[HideInInspector]
		public Mesh lHologramHandMesh;

		[Token(Token = "0x60020E5")]
		[Address(RVA = "0x10AD808", Offset = "0x10AD808", VA = "0x10AD808")]
		public CharacterItem()
		{
		}
	}
	[Token(Token = "0x2000740")]
	public readonly struct CharacterSyncRequest
	{
		[Token(Token = "0x400302D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly CharacterType characterType;

		[Token(Token = "0x400302E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string skinId;

		[Token(Token = "0x400302F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool isLocalPlayer;

		[Token(Token = "0x60020E6")]
		[Address(RVA = "0x10AD428", Offset = "0x10AD428", VA = "0x10AD428")]
		public CharacterSyncRequest(CharacterType characterType, string skinId = "", bool isLocalPlayer = false)
		{
		}
	}
	[Token(Token = "0x2000741")]
	public readonly struct CharacterSyncData
	{
		[Token(Token = "0x4003030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly PlayerData playerData;

		[Token(Token = "0x4003031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly CharacterReference characterReference;

		[Token(Token = "0x4003032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly PlayerReferences playerReferences;

		[Token(Token = "0x4003033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly CharacterType characterType;

		[Token(Token = "0x4003034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string skinId;

		[Token(Token = "0x60020E7")]
		[Address(RVA = "0x10AD810", Offset = "0x10AD810", VA = "0x10AD810")]
		public CharacterSyncData(CharacterReference characterReference, PlayerReferences playerReferences, CharacterType characterType, PlayerData playerData, string skinId)
		{
		}
	}
	[Token(Token = "0x2000742")]
	public class CharacterSyncHandlerData
	{
		[Token(Token = "0x4003035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<CharacterSyncRequest> startSync;

		[Token(Token = "0x4003036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<CharacterSyncRequest> stopSync;

		[Token(Token = "0x4003037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly List<CharacterSyncData> characterSyncData;

		[Token(Token = "0x60020E8")]
		[Address(RVA = "0x10AD824", Offset = "0x10AD824", VA = "0x10AD824")]
		public CharacterSyncHandlerData()
		{
		}
	}
	[Token(Token = "0x2000743")]
	public class CharacterSyncHandler : ITickable
	{
		[Token(Token = "0x4003038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly CharacterSyncHandlerData handlerData;

		[Token(Token = "0x4003039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly CharacterData characterData;

		[Token(Token = "0x400303A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly InputData inputData;

		[Token(Token = "0x400303B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameData gameData;

		[Token(Token = "0x400303C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GrabData grabData;

		[Token(Token = "0x400303D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PlayerReferences localPlayerReference;

		[Token(Token = "0x400303E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int RevealPlayer;

		[Token(Token = "0x400303F")]
		public const int LEFT_HAND_ID = 1;

		[Token(Token = "0x4003040")]
		public const int RIGHT_HAND_ID = 0;

		[Token(Token = "0x4003041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ProfilerMarker tickProfileMarker;

		[Token(Token = "0x60020E9")]
		[Address(RVA = "0x10AD914", Offset = "0x10AD914", VA = "0x10AD914")]
		public CharacterSyncHandler(CharacterSyncHandlerData handlerData, CharacterData characterData, InputData inputData, GameData gameData, GrabData grabData, PlayerReferences localPlayerReference)
		{
		}

		[Token(Token = "0x60020EA")]
		[Address(RVA = "0x10AD9B8", Offset = "0x10AD9B8", VA = "0x10AD9B8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60020EB")]
		[Address(RVA = "0x10AD9D8", Offset = "0x10AD9D8", VA = "0x10AD9D8")]
		private void UpdateCharactersToSync()
		{
		}

		[Token(Token = "0x60020EC")]
		[Address(RVA = "0x10ADC40", Offset = "0x10ADC40", VA = "0x10ADC40")]
		private void RemoveCharacterFromSync(CharacterSyncRequest syncRequest)
		{
		}

		[Token(Token = "0x60020ED")]
		[Address(RVA = "0x10ADD78", Offset = "0x10ADD78", VA = "0x10ADD78")]
		private void AddCharacterToSync(CharacterSyncRequest syncRequest)
		{
		}

		[Token(Token = "0x60020EE")]
		[Address(RVA = "0x10ADFF4", Offset = "0x10ADFF4", VA = "0x10ADFF4")]
		private CharacterSyncData CreateCharacterSyncData(CharacterSyncRequest syncRequest)
		{
			return default(CharacterSyncData);
		}

		[Token(Token = "0x60020EF")]
		[Address(RVA = "0x10ADAE4", Offset = "0x10ADAE4", VA = "0x10ADAE4")]
		private void SetLocalAnimationData()
		{
		}

		[Token(Token = "0x60020F0")]
		[Address(RVA = "0x10AE1D4", Offset = "0x10AE1D4", VA = "0x10AE1D4")]
		private void SetHandAnimationData(HandAnimationData handAnimationData, HandInput hand)
		{
		}

		[Token(Token = "0x60020F1")]
		[Address(RVA = "0x10ADB48", Offset = "0x10ADB48", VA = "0x10ADB48")]
		private void SyncPlayerCharacters()
		{
		}

		[Token(Token = "0x60020F2")]
		[Address(RVA = "0x10AE1FC", Offset = "0x10AE1FC", VA = "0x10AE1FC")]
		private void SyncCharacter(CharacterSyncData characterToSync, PlayerReferences player)
		{
		}

		[Token(Token = "0x60020F3")]
		[Address(RVA = "0x10AE454", Offset = "0x10AE454", VA = "0x10AE454")]
		private void SyncHands(CharacterSyncData characterToSync, PlayerReferences player, CharacterReference character, CharacterAnimationData characterAnimationData)
		{
		}

		[Token(Token = "0x60020F4")]
		[Address(RVA = "0x10AE33C", Offset = "0x10AE33C", VA = "0x10AE33C")]
		private void SyncBody(PlayerReferences player, CharacterReference character)
		{
		}

		[Token(Token = "0x60020F5")]
		[Address(RVA = "0x10AE400", Offset = "0x10AE400", VA = "0x10AE400")]
		private void SyncTransform(Transform target, Transform source)
		{
		}

		[Token(Token = "0x60020F6")]
		[Address(RVA = "0x10AE678", Offset = "0x10AE678", VA = "0x10AE678")]
		private void SyncHandData(HandAnimationData handAnimationData, Animator animator, bool isGrabbingBow, bool isGrabbingBowstring, bool isHandGrabbing)
		{
		}
	}
	[Token(Token = "0x2000744")]
	public class FaceAnimationData
	{
		[Token(Token = "0x4003042")]
		public const string onGameWin = "GameWin";

		[Token(Token = "0x4003043")]
		public const string onGameLoss = "GameLose";

		[Token(Token = "0x4003044")]
		public const string onDamage = "Damage";

		[Token(Token = "0x4003045")]
		public const string onCriticalDamage = "CriticalDamage";

		[Token(Token = "0x4003046")]
		public const string onSpawn = "TreeReset";

		[Token(Token = "0x4003047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int criticalDamageThreshold;

		[Token(Token = "0x4003048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Queue<(int netwokId, string faceAnimations, int damage)> onTriggerFaceAnimations;

		[Token(Token = "0x60020F8")]
		[Address(RVA = "0x10AE95C", Offset = "0x10AE95C", VA = "0x10AE95C")]
		public FaceAnimationData()
		{
		}
	}
	[Token(Token = "0x2000745")]
	public class FaceAnimationsHandler : ITickable
	{
		[Token(Token = "0x4003049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameData gameData;

		[Token(Token = "0x400304A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly EmotePlaybackSettings emotePlaybackSettings;

		[Token(Token = "0x400304B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly FaceAnimationData faceAnimationData;

		[Token(Token = "0x400304C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly CharacterData characterData;

		[Token(Token = "0x400304D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x400304E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly int Damage;

		[Token(Token = "0x400304F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private readonly int CriticalDamage;

		[Token(Token = "0x60020F9")]
		[Address(RVA = "0x10AE9E0", Offset = "0x10AE9E0", VA = "0x10AE9E0")]
		public FaceAnimationsHandler(GameData gameData, EmotePlaybackSettings emotePlaybackSettings, FaceAnimationData faceAnimationData, CharacterData characterData, MatchHandlerData matchHandlerData)
		{
		}

		[Token(Token = "0x60020FA")]
		[Address(RVA = "0x10AEA98", Offset = "0x10AEA98", VA = "0x10AEA98")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60020FB")]
		[Address(RVA = "0x10AEAC0", Offset = "0x10AEAC0", VA = "0x10AEAC0")]
		[Conditional("IGNIS_DEBUG")]
		private void SetUpDebug()
		{
		}

		[Token(Token = "0x60020FC")]
		[Address(RVA = "0x10AEAC4", Offset = "0x10AEAC4", VA = "0x10AEAC4")]
		[Conditional("IGNIS_DEBUG")]
		private void DebugTriggerAnimations(string faceAnimation)
		{
		}

		[Token(Token = "0x60020FD")]
		[Address(RVA = "0x10AEB00", Offset = "0x10AEB00", VA = "0x10AEB00", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60020FE")]
		[Address(RVA = "0x10AEE5C", Offset = "0x10AEE5C", VA = "0x10AEE5C")]
		private void OffsetFaceMaterial(CharacterReference charRef)
		{
		}

		[Token(Token = "0x60020FF")]
		[Address(RVA = "0x10AEC74", Offset = "0x10AEC74", VA = "0x10AEC74")]
		private void TriggerFaceAnimations(int networkId, int damage, string faceAnimations)
		{
		}
	}
	[Token(Token = "0x2000746")]
	[CreateAssetMenu(fileName = "FactionSettings", menuName = "Settings/Player/FactionSettings")]
	public class FactionSettings : ScriptableObject
	{
		[Token(Token = "0x4003050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FactionItem[] factionItems;

		[Token(Token = "0x6002100")]
		[Address(RVA = "0x10AEF40", Offset = "0x10AEF40", VA = "0x10AEF40")]
		public FactionSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000747")]
	public class FactionItem
	{
		[Token(Token = "0x4003051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FactionType factionType;

		[Token(Token = "0x4003052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Sprite factionSprite;

		[Token(Token = "0x6002101")]
		[Address(RVA = "0x10AEF48", Offset = "0x10AEF48", VA = "0x10AEF48")]
		public FactionItem()
		{
		}
	}
	[Token(Token = "0x2000748")]
	public class HandReference : MonoBehaviour
	{
		[Token(Token = "0x4003053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x4003054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform handTransform;

		[Token(Token = "0x4003055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform attachmentPoint;

		[Token(Token = "0x6002102")]
		[Address(RVA = "0x10AEF50", Offset = "0x10AEF50", VA = "0x10AEF50")]
		public HandReference()
		{
		}
	}
	[Token(Token = "0x2000749")]
	public class CharacterHeadReference : MonoBehaviour
	{
		[Token(Token = "0x4003056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SkinnedMeshRenderer headRenderer;

		[Token(Token = "0x6002103")]
		[Address(RVA = "0x10AEF58", Offset = "0x10AEF58", VA = "0x10AEF58")]
		public CharacterHeadReference()
		{
		}
	}
	[Token(Token = "0x200074A")]
	public enum HandState
	{
		[Token(Token = "0x4003058")]
		Closed,
		[Token(Token = "0x4003059")]
		Open,
		[Token(Token = "0x400305A")]
		Other
	}
	[Token(Token = "0x200074B")]
	public enum HandGesture
	{
		[Token(Token = "0x400305C")]
		Other,
		[Token(Token = "0x400305D")]
		FistBump,
		[Token(Token = "0x400305E")]
		HighFive,
		[Token(Token = "0x400305F")]
		ThumbsUp,
		[Token(Token = "0x4003060")]
		ToTheBar
	}
	[Token(Token = "0x200074C")]
	public class ContactGesturesHandler : ITickable
	{
		[Token(Token = "0x4003061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayerReferences localPlayerReferences;

		[Token(Token = "0x4003062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GestureSettings settings;

		[Token(Token = "0x4003063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly GameData gameData;

		[Token(Token = "0x4003064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GesturesMessageData gesturesMessageData;

		[Token(Token = "0x4003065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CharacterData characterData;

		[Token(Token = "0x4003066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CharacterAnimationData localCharacterAniamtionData;

		[Token(Token = "0x4003067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float fistBumpAntispamDelay;

		[Token(Token = "0x4003068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool allowedToFistBump;

		[Token(Token = "0x4003069")]
		private const string LeftHandTag = "LeftHand";

		[Token(Token = "0x400306A")]
		private const string RightHandTag = "RightHand";

		[Token(Token = "0x6002104")]
		[Address(RVA = "0x10AEF60", Offset = "0x10AEF60", VA = "0x10AEF60")]
		public ContactGesturesHandler(PlayerReferences localPlayerReferences, GestureSettings settings, GameData gameData, GesturesMessageData gesturesMessageData, CharacterData characterData)
		{
		}

		[Token(Token = "0x6002105")]
		[Address(RVA = "0x10AEFB0", Offset = "0x10AEFB0", VA = "0x10AEFB0")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6002106")]
		[Address(RVA = "0x10AF0B4", Offset = "0x10AF0B4", VA = "0x10AF0B4")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6002107")]
		[Address(RVA = "0x10AF0B8", Offset = "0x10AF0B8", VA = "0x10AF0B8")]
		private void LogHandCurls()
		{
		}

		[Token(Token = "0x6002108")]
		[Address(RVA = "0x10AF13C", Offset = "0x10AF13C", VA = "0x10AF13C")]
		private void LogHand(string handPrefix, HandAnimationData handData)
		{
		}

		[Token(Token = "0x6002109")]
		[Address(RVA = "0x10AF2AC", Offset = "0x10AF2AC", VA = "0x10AF2AC")]
		private void LogFinger(string logId, float fingerValue)
		{
		}

		[Token(Token = "0x600210A")]
		[Address(RVA = "0x10AF3E0", Offset = "0x10AF3E0", VA = "0x10AF3E0")]
		private void OnHandOverlapped(object sender, ColliderListenerEventArgs e)
		{
		}

		[Token(Token = "0x600210B")]
		[Address(RVA = "0x10AF8A0", Offset = "0x10AF8A0", VA = "0x10AF8A0", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600210C")]
		[Address(RVA = "0x10AF9C4", Offset = "0x10AF9C4", VA = "0x10AF9C4")]
		private void SetPlayerColliderActive(PlayerReferences playerReferences, bool isActive)
		{
		}

		[Token(Token = "0x600210D")]
		[Address(RVA = "0x10AF550", Offset = "0x10AF550", VA = "0x10AF550")]
		private void TryToPlayGestureEffect(GameObject myHand, GameObject targetHand, Vector3 position)
		{
		}

		[Token(Token = "0x600210E")]
		[Address(RVA = "0x10AFA24", Offset = "0x10AFA24", VA = "0x10AFA24")]
		private HandState GetHandGesture(HandAnimationData handData)
		{
			return default(HandState);
		}

		[Token(Token = "0x600210F")]
		[Address(RVA = "0x10AF3A4", Offset = "0x10AF3A4", VA = "0x10AF3A4")]
		private HandState GetFingerState(float fingerValue)
		{
			return default(HandState);
		}
	}
	[Serializable]
	[Token(Token = "0x200074D")]
	public struct GestureEffects
	{
		[Token(Token = "0x400306B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ParticleEffectReference particleEffectReference;

		[Token(Token = "0x400306C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string[] effectSound;
	}
	[Token(Token = "0x200074E")]
	[CreateAssetMenu(menuName = "Settings/GestureSettings", fileName = "GestureSettings")]
	public class GestureSettings : ScriptableObject
	{
		[Token(Token = "0x400306D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Finger Thresholds")]
		public float FingerClosedMargin;

		[Token(Token = "0x400306E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float ThumbClosedMargin;

		[Token(Token = "0x400306F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float FingerOpenMargin;

		[Token(Token = "0x4003070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Looping Effects Intervals (seconds)")]
		public float thumbsUpTriggeDelay;

		[Token(Token = "0x4003071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float thumbsUpAntiSpamDelay;

		[Token(Token = "0x4003072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float goToBarAntiSpamDelay;

		[Token(Token = "0x4003073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Offsets")]
		public Vector3 aboveHeadEffectsOffset;

		[Token(Token = "0x4003074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 aboveHandEffectsOffset;

		[Token(Token = "0x4003075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Gesture Detection Angle (0° top, counterclockwise, symetric)")]
		public float thumbsUpAngle;

		[Token(Token = "0x4003076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float thumbsDownAngle;

		[Token(Token = "0x4003077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Effects")]
		public GestureEffects[] fistBumpEffects;

		[Token(Token = "0x4003078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GestureEffects[] highFiveEffects;

		[Token(Token = "0x4003079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GestureEffects[] thumbsUpEffects;

		[Token(Token = "0x400307A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GestureEffects[] goToBarEffects;

		[Token(Token = "0x6002110")]
		[Address(RVA = "0x10AFB48", Offset = "0x10AFB48", VA = "0x10AFB48")]
		public GestureSettings()
		{
		}
	}
	[Token(Token = "0x200074F")]
	public class GesturesData
	{
		[Token(Token = "0x400307B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public HandGesture gesture;

		[Token(Token = "0x400307C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 position;

		[Token(Token = "0x6002111")]
		[Address(RVA = "0x10AFAFC", Offset = "0x10AFAFC", VA = "0x10AFAFC")]
		public GesturesData(HandGesture gesture, Vector3 position)
		{
		}
	}
	[Token(Token = "0x2000750")]
	public class GesturesMessageData
	{
		[Token(Token = "0x400307D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<GesturesData> gesturesQueue;

		[Token(Token = "0x400307E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool allowedToTriggerEffects;

		[Token(Token = "0x6002112")]
		[Address(RVA = "0x10AFB74", Offset = "0x10AFB74", VA = "0x10AFB74")]
		public GesturesMessageData()
		{
		}
	}
	[Token(Token = "0x2000751")]
	public class GesturesPlayerHandler : ITickable
	{
		[Token(Token = "0x400307F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4003080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4003081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly GestureSettings settings;

		[Token(Token = "0x4003082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IgnisSoundTriggerData soundTriggerData;

		[Token(Token = "0x4003083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ParticleEffectData effectData;

		[Token(Token = "0x4003084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4003085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GesturesMessageData gesturesMessageData;

		[Token(Token = "0x4003086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly PlayerReferences localPlayerReferences;

		[Token(Token = "0x4003087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly GameData gameData;

		[Token(Token = "0x4003088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4003089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly ArcadeData arcadeData;

		[Token(Token = "0x400308A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool forceAllowEffectDebug;

		[Token(Token = "0x6002113")]
		[Address(RVA = "0x10AFBF0", Offset = "0x10AFBF0", VA = "0x10AFBF0")]
		public GesturesPlayerHandler(MessageSender messageSender, GameMessageFactory gameMessageFactory, GestureSettings settings, IgnisSoundTriggerData soundTriggerData, ParticleEffectData effectData, IRoomTimeProvider roomTimeProvider, GesturesMessageData gesturesMessageData, PlayerReferences localPlayerReferences, GameData gameData, MatchHandlerData matchHandlerData, ArcadeData arcadeData)
		{
		}

		[Token(Token = "0x6002114")]
		[Address(RVA = "0x10AFC7C", Offset = "0x10AFC7C", VA = "0x10AFC7C")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6002115")]
		[Address(RVA = "0x10AFC80", Offset = "0x10AFC80", VA = "0x10AFC80")]
		private void PlayDebugGesture(HandGesture handGesture)
		{
		}

		[Token(Token = "0x6002116")]
		[Address(RVA = "0x10AFDAC", Offset = "0x10AFDAC", VA = "0x10AFDAC")]
		public void OnReceiveGestureMessage(int gesture, Vector3 position, float timestamp)
		{
		}

		[Token(Token = "0x6002117")]
		[Address(RVA = "0x10B0138", Offset = "0x10B0138", VA = "0x10B0138", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002118")]
		[Address(RVA = "0x10B0204", Offset = "0x10B0204", VA = "0x10B0204")]
		private void PostGestureMessage(HandGesture gesture, Vector3 position)
		{
		}

		[Token(Token = "0x6002119")]
		[Address(RVA = "0x10B0030", Offset = "0x10B0030", VA = "0x10B0030")]
		private void PlayThumbUpEffect(Vector3 position)
		{
		}

		[Token(Token = "0x600211A")]
		[Address(RVA = "0x10B00AC", Offset = "0x10B00AC", VA = "0x10B00AC")]
		private void PlayGoToBarEffect(Vector3 position)
		{
		}

		[Token(Token = "0x600211B")]
		[Address(RVA = "0x10AFFB4", Offset = "0x10AFFB4", VA = "0x10AFFB4")]
		private void PlayHighFiveEffect(Vector3 position)
		{
		}

		[Token(Token = "0x600211C")]
		[Address(RVA = "0x10AFF38", Offset = "0x10AFF38", VA = "0x10AFF38")]
		private void PlayFistBumpEffect(Vector3 position)
		{
		}

		[Token(Token = "0x600211D")]
		[Address(RVA = "0x10B0240", Offset = "0x10B0240", VA = "0x10B0240")]
		private GestureEffects GetRandomEffect(GestureEffects[] effects)
		{
			return default(GestureEffects);
		}

		[Token(Token = "0x600211E")]
		[Address(RVA = "0x10B0294", Offset = "0x10B0294", VA = "0x10B0294")]
		private void PlayEffects(Vector3 position, GestureEffects effect)
		{
		}
	}
	[Token(Token = "0x2000752")]
	public class NonContactGesturesHandler : ITickable
	{
		[Token(Token = "0x2000753")]
		private enum Hand
		{
			[Token(Token = "0x4003096")]
			None,
			[Token(Token = "0x4003097")]
			Left,
			[Token(Token = "0x4003098")]
			Right
		}

		[Token(Token = "0x400308B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayerReferences localPlayerReferences;

		[Token(Token = "0x400308C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GestureSettings settings;

		[Token(Token = "0x400308D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly GameData gameData;

		[Token(Token = "0x400308E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GesturesMessageData gesturesMessageData;

		[Token(Token = "0x400308F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CharacterData characterData;

		[Token(Token = "0x4003090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool allowedGestures;

		[Token(Token = "0x4003091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool isColliding;

		[Token(Token = "0x4003092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float triggeringTimer;

		[Token(Token = "0x4003093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float thumbsUpDelayTimer;

		[Token(Token = "0x4003094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float goToBarDelayTimer;

		[Token(Token = "0x600211F")]
		[Address(RVA = "0x10B0554", Offset = "0x10B0554", VA = "0x10B0554")]
		public NonContactGesturesHandler(PlayerReferences localPlayerReferences, GestureSettings settings, GameData gameData, GesturesMessageData gesturesMessageData, CharacterData characterData)
		{
		}

		[Token(Token = "0x6002120")]
		[Address(RVA = "0x10B05B4", Offset = "0x10B05B4", VA = "0x10B05B4")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6002121")]
		[Address(RVA = "0x10B0738", Offset = "0x10B0738", VA = "0x10B0738")]
		private void OnTriggerExit(object sender, ColliderListenerEventArgs e)
		{
		}

		[Token(Token = "0x6002122")]
		[Address(RVA = "0x10B074C", Offset = "0x10B074C", VA = "0x10B074C")]
		private void OnContact(object sender, ColliderListenerEventArgs e)
		{
		}

		[Token(Token = "0x6002123")]
		[Address(RVA = "0x10B0A30", Offset = "0x10B0A30", VA = "0x10B0A30")]
		private HandGesture GetHandGesture(HandAnimationData handAnimationData, Transform hand)
		{
			return default(HandGesture);
		}

		[Token(Token = "0x6002124")]
		[Address(RVA = "0x10B0B40", Offset = "0x10B0B40", VA = "0x10B0B40")]
		private bool CheckHandRotation(Transform hand, Vector2 eulerLimits)
		{
			return default(bool);
		}

		[Token(Token = "0x6002125")]
		[Address(RVA = "0x10B0B08", Offset = "0x10B0B08", VA = "0x10B0B08")]
		private HandState GetFingerState(float fingerRatio, float closedMargin)
		{
			return default(HandState);
		}

		[Token(Token = "0x6002126")]
		[Address(RVA = "0x10B0980", Offset = "0x10B0980", VA = "0x10B0980")]
		private bool CheckForGesture(HandGesture gesture, out Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6002127")]
		[Address(RVA = "0x10B0BAC", Offset = "0x10B0BAC", VA = "0x10B0BAC")]
		private void SetColliders(PlayerReferences playerReferences, bool isActive)
		{
		}

		[Token(Token = "0x6002128")]
		[Address(RVA = "0x10B0BF4", Offset = "0x10B0BF4", VA = "0x10B0BF4", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002129")]
		[Address(RVA = "0x10B0C64", Offset = "0x10B0C64", VA = "0x10B0C64")]
		private void CheckInitGesture(bool shouldAllowGestures)
		{
		}

		[Token(Token = "0x600212A")]
		[Address(RVA = "0x10B0D4C", Offset = "0x10B0D4C", VA = "0x10B0D4C")]
		private void VerifyAndPlayGestures()
		{
		}
	}
	[Token(Token = "0x2000754")]
	public class PlatformData
	{
		[Token(Token = "0x4003099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int currentPlatformId;

		[Token(Token = "0x400309A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int player1PlatformId;

		[Token(Token = "0x400309B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int player2PlatformId;

		[Token(Token = "0x600212B")]
		[Address(RVA = "0x10B1058", Offset = "0x10B1058", VA = "0x10B1058")]
		public PlatformData()
		{
		}
	}
	[Token(Token = "0x2000755")]
	public class PlatformHandler : ITickable
	{
		[Token(Token = "0x400309C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlatformData platformData;

		[Token(Token = "0x400309D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly EnvironmentSceneData environmentSceneData;

		[Token(Token = "0x400309E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PlatformSettings platformSettings;

		[Token(Token = "0x400309F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameData gameData;

		[Token(Token = "0x40030A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int player1PlatformId;

		[Token(Token = "0x40030A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int player2PlatformId;

		[Token(Token = "0x40030A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool isSceneAvailable;

		[Token(Token = "0x40030A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int savedPlatformId1;

		[Token(Token = "0x40030A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int savedPlatformId2;

		[Token(Token = "0x600212C")]
		[Address(RVA = "0x10B1060", Offset = "0x10B1060", VA = "0x10B1060")]
		public PlatformHandler(PlatformData platformData, EnvironmentSceneData environmentSceneData, PlatformSettings platformSettings, GameData gameData)
		{
		}

		[Token(Token = "0x600212D")]
		[Address(RVA = "0x10B10A0", Offset = "0x10B10A0", VA = "0x10B10A0", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600212E")]
		[Address(RVA = "0x10B1138", Offset = "0x10B1138", VA = "0x10B1138")]
		private void CheckForcePlatformId()
		{
		}

		[Token(Token = "0x600212F")]
		[Address(RVA = "0x10B11E4", Offset = "0x10B11E4", VA = "0x10B11E4")]
		private void SetPlatformPlayer1(int index)
		{
		}

		[Token(Token = "0x6002130")]
		[Address(RVA = "0x10B1278", Offset = "0x10B1278", VA = "0x10B1278")]
		private void SetPlatformPlayer2(int index)
		{
		}

		[Token(Token = "0x6002131")]
		[Address(RVA = "0x10B130C", Offset = "0x10B130C", VA = "0x10B130C")]
		private void SetPlatformPosition(PlatformReference playerOnePlatform, Transform spawnpoint, Transform platformCollider)
		{
		}

		[Token(Token = "0x6002132")]
		[Address(RVA = "0x10B1438", Offset = "0x10B1438", VA = "0x10B1438")]
		private void SetPlatformMesh(PlatformReference playerPlatform, Mesh itemPlatformBase, Mesh itemPlatformTint)
		{
		}

		[Token(Token = "0x6002133")]
		[Address(RVA = "0x10B1494", Offset = "0x10B1494", VA = "0x10B1494")]
		private void SetPlatformMaterial(PlatformReference platformReference, Material material)
		{
		}
	}
	[Token(Token = "0x2000756")]
	public class PlatformReference : MonoBehaviour
	{
		[Token(Token = "0x40030A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshRenderer meshRenderer;

		[Token(Token = "0x40030A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshFilter platformBase;

		[Token(Token = "0x40030A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MeshFilter platformTint;

		[Token(Token = "0x40030A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Textures and meshes will not be changed on the platforms models")]
		public bool arePlatformsModelsStatic;

		[Token(Token = "0x6002134")]
		[Address(RVA = "0x10B14C8", Offset = "0x10B14C8", VA = "0x10B14C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002135")]
		[Address(RVA = "0x10B168C", Offset = "0x10B168C", VA = "0x10B168C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6002136")]
		[Address(RVA = "0x10B1850", Offset = "0x10B1850", VA = "0x10B1850")]
		public PlatformReference()
		{
		}
	}
	[Token(Token = "0x2000757")]
	public class LocalPlayerData
	{
		[Token(Token = "0x40030A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayerReferences playerReferences;

		[Token(Token = "0x6002137")]
		[Address(RVA = "0x10B1858", Offset = "0x10B1858", VA = "0x10B1858")]
		public LocalPlayerData()
		{
		}
	}
	[Token(Token = "0x2000758")]
	public class PlayerData
	{
		[Token(Token = "0x40030AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int playerNetworkId;

		[Token(Token = "0x40030AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int opponentNetworkId;

		[Token(Token = "0x40030AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly CharacterAnimationData characterAnimationData;

		[Token(Token = "0x40030AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly PlayerReferences playerReference;

		[Token(Token = "0x40030AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly PlayerGrabData grabData;

		[Token(Token = "0x40030AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 originPosition;

		[Token(Token = "0x40030B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly string displayName;

		[Token(Token = "0x40030B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly int leaguePoints;

		[Token(Token = "0x40030B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public readonly int characterId;

		[Token(Token = "0x40030B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<ToolSet> deck;

		[Token(Token = "0x40030B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Dictionary<ToolName, string> toolSkinsLookup;

		[Token(Token = "0x6002138")]
		[Address(RVA = "0x10B1860", Offset = "0x10B1860", VA = "0x10B1860")]
		public PlayerData(int playerNetworkId, int opponentNetworkId, PlayerReferences playerReference, string displayName, Vector3 originPosition, int leaguePoints, Dictionary<ToolName, string> toolSkinsLookup, int characterId, [Optional] CharacterAnimationData characterAnimationData)
		{
		}
	}
	[Token(Token = "0x2000759")]
	public class HandGrabData
	{
		[Token(Token = "0x40030B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isGrabbing;

		[Token(Token = "0x40030B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int toolId;

		[Token(Token = "0x40030B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool allowedToTrigger;

		[Token(Token = "0x40030B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool shouldForceDrop;

		[Token(Token = "0x6002139")]
		[Address(RVA = "0x10B19C4", Offset = "0x10B19C4", VA = "0x10B19C4")]
		public HandGrabData()
		{
		}
	}
	[Token(Token = "0x200075A")]
	public class PlayerGrabData
	{
		[Token(Token = "0x40030B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public HandGrabData rightHandGrabData;

		[Token(Token = "0x40030BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandGrabData leftHandGrabData;

		[Token(Token = "0x600213A")]
		[Address(RVA = "0x10B1940", Offset = "0x10B1940", VA = "0x10B1940")]
		public PlayerGrabData()
		{
		}
	}
	[Token(Token = "0x200075B")]
	public class UpdatableObject
	{
		[Token(Token = "0x40030BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int playerID;

		[Token(Token = "0x40030BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int handID;

		[Token(Token = "0x40030BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int toolNetworkId;

		[Token(Token = "0x40030BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool grabbedWithTwoHands;

		[Token(Token = "0x600213B")]
		[Address(RVA = "0x10B19CC", Offset = "0x10B19CC", VA = "0x10B19CC")]
		public UpdatableObject(int playerID, int handID, int toolNetworkId)
		{
		}
	}
	[Token(Token = "0x200075C")]
	public class GrabData
	{
		[Token(Token = "0x40030BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<UpdatableObject> grabbedObjects;

		[Token(Token = "0x40030C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<BarrierShieldData> grabbedBarriers;

		[Token(Token = "0x600213C")]
		[Address(RVA = "0x10B1A0C", Offset = "0x10B1A0C", VA = "0x10B1A0C")]
		public GrabData()
		{
		}
	}
	[Token(Token = "0x200075D")]
	public class PlayerGrabHandler
	{
		[Token(Token = "0x40030C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<int> triggersEntered_RightHand;

		[Token(Token = "0x40030C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<int> triggersEntered_LeftHand;

		[Token(Token = "0x40030C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<int> ungrabbableTools;

		[Token(Token = "0x40030C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameData gameData;

		[Token(Token = "0x40030C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PlayerReferences playerReferences;

		[Token(Token = "0x40030C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly InputData inputData;

		[Token(Token = "0x40030C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x40030C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x40030C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly GrabData grabData;

		[Token(Token = "0x40030CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly Predicate<int> removeHandObjects;

		[Token(Token = "0x40030CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int toolIdGrabbedThisFrameWithRightHand;

		[Token(Token = "0x40030CC")]
		public const int LEFT_HAND_ID = 1;

		[Token(Token = "0x40030CD")]
		public const int RIGHT_HAND_ID = 0;

		[Token(Token = "0x600213D")]
		[Address(RVA = "0x10B1AD4", Offset = "0x10B1AD4", VA = "0x10B1AD4")]
		public PlayerGrabHandler(GameData gameData, PlayerReferences playerReferences, InputData inputData, MessageSender messageSender, GameMessageFactory gameMessageFactory, GrabData grabData)
		{
		}

		[Token(Token = "0x600213E")]
		[Address(RVA = "0x10B1D64", Offset = "0x10B1D64", VA = "0x10B1D64")]
		private void OnTriggerEnter_RightHand(object sender, ColliderListenerEventArgs e)
		{
		}

		[Token(Token = "0x600213F")]
		[Address(RVA = "0x10B1F90", Offset = "0x10B1F90", VA = "0x10B1F90")]
		private void OnTriggerExit_RightHand(object sender, ColliderListenerEventArgs e)
		{
		}

		[Token(Token = "0x6002140")]
		[Address(RVA = "0x10B2338", Offset = "0x10B2338", VA = "0x10B2338")]
		private void OnTriggerEnter_LeftHand(object sender, ColliderListenerEventArgs e)
		{
		}

		[Token(Token = "0x6002141")]
		[Address(RVA = "0x10B2564", Offset = "0x10B2564", VA = "0x10B2564")]
		private void OnTriggerExit_LeftHand(object sender, ColliderListenerEventArgs e)
		{
		}

		[Token(Token = "0x6002142")]
		[Address(RVA = "0x10B224C", Offset = "0x10B224C", VA = "0x10B224C")]
		private void UngrabWeaponIfOverSecondaryGrabTolerance(IImpactableReference impactableReference, HandGrabData handGrabData, int toolNetworkId, int handId)
		{
		}

		[Token(Token = "0x6002143")]
		[Address(RVA = "0x10B2820", Offset = "0x10B2820", VA = "0x10B2820")]
		private void UngrabWeaponHeldWithSecondHand(int handId, int toolNetworkId)
		{
		}

		[Token(Token = "0x6002144")]
		[Address(RVA = "0x10B285C", Offset = "0x10B285C", VA = "0x10B285C")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002145")]
		[Address(RVA = "0x10B2874", Offset = "0x10B2874", VA = "0x10B2874")]
		private void RemoveDestroyedObjects()
		{
		}

		[Token(Token = "0x6002146")]
		[Address(RVA = "0x10B28DC", Offset = "0x10B28DC", VA = "0x10B28DC")]
		private void UpdateLocalData()
		{
		}

		[Token(Token = "0x6002147")]
		[Address(RVA = "0x10B29B8", Offset = "0x10B29B8", VA = "0x10B29B8")]
		private void CheckHandGrabs(PlayerData playerData, InputData inputData, HandGrabData handGrabData, HandInput handInput, int handId, List<int> toolsEnteredInTriggers)
		{
		}

		[Token(Token = "0x6002148")]
		[Address(RVA = "0x10B2DDC", Offset = "0x10B2DDC", VA = "0x10B2DDC")]
		private Vector3 AngularVelocityToWorldSpace(HandInput hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002149")]
		[Address(RVA = "0x10B2DF8", Offset = "0x10B2DF8", VA = "0x10B2DF8")]
		private void CreateAndSendDropMessage(int handId, int toolNetworkId, Vector3 handMovement, Vector3 handAngularVelocity)
		{
		}

		[Token(Token = "0x600214A")]
		[Address(RVA = "0x10B305C", Offset = "0x10B305C", VA = "0x10B305C")]
		private int GetValidGrabbableTool(List<int> overlappingTools)
		{
			return default(int);
		}

		[Token(Token = "0x600214B")]
		[Address(RVA = "0x10B2D48", Offset = "0x10B2D48", VA = "0x10B2D48")]
		private bool IsTwoHandedTool(int toolNetworkId)
		{
			return default(bool);
		}

		[Token(Token = "0x600214C")]
		[Address(RVA = "0x10B3108", Offset = "0x10B3108", VA = "0x10B3108")]
		private bool IsToolGrabbed(int toolNetworkId)
		{
			return default(bool);
		}

		[Token(Token = "0x600214D")]
		[Address(RVA = "0x10B31C8", Offset = "0x10B31C8", VA = "0x10B31C8")]
		private bool RemoveHandObjects(int objNetworkId)
		{
			return default(bool);
		}

		[Token(Token = "0x600214E")]
		[Address(RVA = "0x10B3258", Offset = "0x10B3258", VA = "0x10B3258")]
		public void CleanUpRound()
		{
		}
	}
	[Token(Token = "0x200075E")]
	public class PlayerHealthHandler
	{
		[Token(Token = "0x200075F")]
		public struct PlayerHealthData
		{
			[Token(Token = "0x40030DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly List<HealthBarReference> arneaHealthBars;

			[Token(Token = "0x40030DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly Material playerHealthBar;

			[Token(Token = "0x40030DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public readonly BarAnimationData animationData;

			[Token(Token = "0x600215B")]
			[Address(RVA = "0x10B3770", Offset = "0x10B3770", VA = "0x10B3770")]
			public PlayerHealthData(List<HealthBarReference> arneaHealthBars, Material playerHealthBar, BarAnimationData animationData)
			{
			}
		}

		[Token(Token = "0x40030CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BarAnimationData p1PercentageDelayAnimationData;

		[Token(Token = "0x40030CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BarAnimationData p2PercentageDelayAnimationData;

		[Token(Token = "0x40030D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<PlayerHealthData> healthData;

		[Token(Token = "0x40030D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material player1HealthBar;

		[Token(Token = "0x40030D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material player2HealthBar;

		[Token(Token = "0x40030D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly List<float> playerLastRecordedDamage;

		[Token(Token = "0x40030D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly PlayerSettings playerSettings;

		[Token(Token = "0x40030D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ArenaGameStateSettings arenaGameStateSettings;

		[Token(Token = "0x40030D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ScoreBoardData scoreBoardData;

		[Token(Token = "0x40030D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x40030D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly GameData gameData;

		[Token(Token = "0x40030D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly CharacterData characterData;

		[Token(Token = "0x40030DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly CharacterSettings characterSettings;

		[Token(Token = "0x600214F")]
		[Address(RVA = "0x10B32D0", Offset = "0x10B32D0", VA = "0x10B32D0")]
		public PlayerHealthHandler(PlayerSettings playerSettings, ArenaGameStateSettings arenaGameStateSettings, ScoreBoardData scoreBoardData, DamageRecordKeeper damageRecordKeeper, GameData gameData, CharacterData characterData, CharacterSettings characterSettings)
		{
		}

		[Token(Token = "0x6002150")]
		[Address(RVA = "0x10B34A0", Offset = "0x10B34A0", VA = "0x10B34A0")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6002151")]
		[Address(RVA = "0x10B3544", Offset = "0x10B3544", VA = "0x10B3544")]
		public void ClearPlayerNames()
		{
		}

		[Token(Token = "0x6002152")]
		[Address(RVA = "0x10B3678", Offset = "0x10B3678", VA = "0x10B3678")]
		public void OnSpawnPlayer(SpawnPlayerMessage spawnPlayerMessage)
		{
		}

		[Token(Token = "0x6002153")]
		[Address(RVA = "0x10B377C", Offset = "0x10B377C", VA = "0x10B377C")]
		public void Setup()
		{
		}

		[Token(Token = "0x6002154")]
		[Address(RVA = "0x10B39B4", Offset = "0x10B39B4", VA = "0x10B39B4")]
		private static void UpdateHealthBarFromPlayerData(HealthBarReference healthBar, PlayerData playerData)
		{
		}

		[Token(Token = "0x6002155")]
		[Address(RVA = "0x10B3A8C", Offset = "0x10B3A8C", VA = "0x10B3A8C")]
		public void ResetBeforeNewGame()
		{
		}

		[Token(Token = "0x6002156")]
		[Address(RVA = "0x10B3BE4", Offset = "0x10B3BE4", VA = "0x10B3BE4")]
		public void CleanUpRound()
		{
		}

		[Token(Token = "0x6002157")]
		[Address(RVA = "0x10B3EDC", Offset = "0x10B3EDC", VA = "0x10B3EDC")]
		public void CleanUpMatch()
		{
		}

		[Token(Token = "0x6002158")]
		[Address(RVA = "0x10B4084", Offset = "0x10B4084", VA = "0x10B4084")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002159")]
		[Address(RVA = "0x10B4234", Offset = "0x10B4234", VA = "0x10B4234")]
		private void UpdateDamage(float lastRecordedDamage, List<HealthBarReference> healthBars, Material sharedPlayerMaterial, BarAnimationData data)
		{
		}

		[Token(Token = "0x600215A")]
		[Address(RVA = "0x10B3DF4", Offset = "0x10B3DF4", VA = "0x10B3DF4")]
		private void StartAnimation(float lastRecordedDamage, Material sharedPlayerMaterial, BarAnimationData data)
		{
		}
	}
	[Token(Token = "0x2000760")]
	public class VisorEffectsData
	{
		[Token(Token = "0x40030DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Dictionary<VisorParticleEffectType, VisorParticleEffect> visorParticleEffectLookup;

		[Token(Token = "0x40030DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly List<ParticleEffectReference> hudEffectPool;

		[Token(Token = "0x40030E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly List<float> stepTimestamps;

		[Token(Token = "0x40030E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VisorParticleEffect currentActiveVisorEffect;

		[Token(Token = "0x40030E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int currentActiveVisorEffectStep;

		[Token(Token = "0x40030E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float currentActiveVisorEffectTimestamp;

		[Token(Token = "0x600215C")]
		[Address(RVA = "0x10B4370", Offset = "0x10B4370", VA = "0x10B4370")]
		public VisorEffectsData()
		{
		}
	}
	[Token(Token = "0x2000761")]
	public class PlayerHUDHandler
	{
		[Token(Token = "0x2000762")]
		private enum State
		{
			[Token(Token = "0x40030F5")]
			Off,
			[Token(Token = "0x40030F6")]
			Activate,
			[Token(Token = "0x40030F7")]
			AnimateIn,
			[Token(Token = "0x40030F8")]
			AnimateMid,
			[Token(Token = "0x40030F9")]
			AnimateOut
		}

		[Token(Token = "0x2000763")]
		private enum EffectSource
		{
			[Token(Token = "0x40030FB")]
			Cage,
			[Token(Token = "0x40030FC")]
			Projectile
		}

		[Token(Token = "0x2000764")]
		private class VignetteEffect
		{
			[Token(Token = "0x40030FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public State currentState;

			[Token(Token = "0x40030FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float elapsedTime;

			[Token(Token = "0x40030FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float damage;

			[Token(Token = "0x4003100")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public readonly Material material;

			[Token(Token = "0x4003101")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public readonly MeshRenderer renderer;

			[Token(Token = "0x4003102")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 hitPosition;

			[Token(Token = "0x4003103")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public IDamageOverTime iDamageOverTime;

			[Token(Token = "0x4003104")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public bool isDot;

			[Token(Token = "0x4003105")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public int id;

			[Token(Token = "0x4003106")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public EffectSource effectSource;

			[Token(Token = "0x6002171")]
			[Address(RVA = "0x10B4BF8", Offset = "0x10B4BF8", VA = "0x10B4BF8")]
			public VignetteEffect(Material material, MeshRenderer renderer, EffectSource effectSource)
			{
			}
		}

		[Token(Token = "0x40030E4")]
		private const float IdleClipValue = 2f;

		[Token(Token = "0x40030E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayerSettings playerSettings;

		[Token(Token = "0x40030E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x40030E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly GameData gameData;

		[Token(Token = "0x40030E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Camera camera;

		[Token(Token = "0x40030E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ImpactHandlerData impactHandlerData;

		[Token(Token = "0x40030EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly SoundTriggersList soundTriggersList;

		[Token(Token = "0x40030EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x40030EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly VisorEffectsData visorEffectsData;

		[Token(Token = "0x40030ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly Transform cameraTransform;

		[Token(Token = "0x40030EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly List<VignetteEffect> vignetteEffects;

		[Token(Token = "0x40030EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly VignetteEffect cageEffect;

		[Token(Token = "0x40030F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float timeStamp;

		[Token(Token = "0x40030F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int ClipValue;

		[Token(Token = "0x40030F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int ColorProperty;

		[Token(Token = "0x40030F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x600215D")]
		[Address(RVA = "0x10B447C", Offset = "0x10B447C", VA = "0x10B447C")]
		public PlayerHUDHandler(PlayerSettings playerSettings, EntryPoint.EntryPointData entryPointData, GameData gameData, Camera camera, Transform vignetteParent, ImpactHandlerData impactHandlerData, SoundTriggersList soundTriggersList, IgnisSoundTriggerData ignisSoundTriggerData, IRoomTimeProvider roomTimeProvider, VisorEffectsData visorEffectsData)
		{
		}

		[Token(Token = "0x600215E")]
		[Address(RVA = "0x10B4D58", Offset = "0x10B4D58", VA = "0x10B4D58")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x600215F")]
		[Address(RVA = "0x10B4D5C", Offset = "0x10B4D5C", VA = "0x10B4D5C")]
		public void OnProjectileDamage(ProjectileHitData projectileHitData)
		{
		}

		[Token(Token = "0x6002160")]
		[Address(RVA = "0x10B5464", Offset = "0x10B5464", VA = "0x10B5464")]
		private void DebugVisorEffect(int visorEffect)
		{
		}

		[Token(Token = "0x6002161")]
		[Address(RVA = "0x10B5088", Offset = "0x10B5088", VA = "0x10B5088")]
		private void StartVisorParticleEffect(VisorParticleEffectType effectType)
		{
		}

		[Token(Token = "0x6002162")]
		[Address(RVA = "0x10B5470", Offset = "0x10B5470", VA = "0x10B5470")]
		private void PlayVisorParticleEffect(int token)
		{
		}

		[Token(Token = "0x6002163")]
		[Address(RVA = "0x10B5520", Offset = "0x10B5520", VA = "0x10B5520")]
		private void StopVisorParticleEffect(int token)
		{
		}

		[Token(Token = "0x6002164")]
		[Address(RVA = "0x10B4C80", Offset = "0x10B4C80", VA = "0x10B4C80")]
		private void ResetCurrentActiveVisorEffect()
		{
		}

		[Token(Token = "0x6002165")]
		[Address(RVA = "0x10B4EF8", Offset = "0x10B4EF8", VA = "0x10B4EF8")]
		private void StartImpactEffect(float damage, Vector3 position, bool isDot, int id, IDamageOverTime dotTransform)
		{
		}

		[Token(Token = "0x6002166")]
		[Address(RVA = "0x10B56A8", Offset = "0x10B56A8", VA = "0x10B56A8")]
		public void OnDamageOverTimeLaserStart(DamageOverTimeImpactStartMessage message)
		{
		}

		[Token(Token = "0x6002167")]
		[Address(RVA = "0x10B57F4", Offset = "0x10B57F4", VA = "0x10B57F4")]
		public void OnDamageOverTimeLaserEnd(DamageOverTimeImpactEndMessage message)
		{
		}

		[Token(Token = "0x6002168")]
		[Address(RVA = "0x10B58BC", Offset = "0x10B58BC", VA = "0x10B58BC")]
		public void OnDamageOverTimeCageStart(DamageOverTimeCageStartMessage message)
		{
		}

		[Token(Token = "0x6002169")]
		[Address(RVA = "0x10B58FC", Offset = "0x10B58FC", VA = "0x10B58FC")]
		public void OnDamageOverTimeCageEnd(DamageOverTimeCageEndMessage message)
		{
		}

		[Token(Token = "0x600216A")]
		[Address(RVA = "0x10B5934", Offset = "0x10B5934", VA = "0x10B5934")]
		public void CleanUpRound()
		{
		}

		[Token(Token = "0x600216B")]
		[Address(RVA = "0x10B59E0", Offset = "0x10B59E0", VA = "0x10B59E0")]
		public void Tick()
		{
		}

		[Token(Token = "0x600216C")]
		[Address(RVA = "0x10B604C", Offset = "0x10B604C", VA = "0x10B604C")]
		private void UpdateVignette(VignetteEffect effect)
		{
		}

		[Token(Token = "0x600216D")]
		[Address(RVA = "0x10B55E8", Offset = "0x10B55E8", VA = "0x10B55E8")]
		private void SetEffectRotationBasedOnHitPosition(VignetteEffect effectToStart)
		{
		}

		[Token(Token = "0x600216E")]
		[Address(RVA = "0x10B6384", Offset = "0x10B6384", VA = "0x10B6384")]
		private float GetCurveAnimationValue(float time, float duration)
		{
			return default(float);
		}

		[Token(Token = "0x600216F")]
		[Address(RVA = "0x10B6284", Offset = "0x10B6284", VA = "0x10B6284")]
		private void SetColor(float damage, Material material, bool isDotEffect, EffectSource effectType)
		{
		}
	}
	[Token(Token = "0x2000765")]
	public readonly struct PlayerTrackingData
	{
		[Token(Token = "0x4003107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int playerNetworkId;

		[Token(Token = "0x4003108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly Vector3 headPosition;

		[Token(Token = "0x4003109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Quaternion headRotation;

		[Token(Token = "0x400310A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Vector3 leftHandPosition;

		[Token(Token = "0x400310B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public readonly Quaternion leftHandRotation;

		[Token(Token = "0x400310C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public readonly Vector3 rightHandPosition;

		[Token(Token = "0x400310D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly Quaternion rightHandRotation;

		[Token(Token = "0x400310E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public readonly FingerTracking leftFinger;

		[Token(Token = "0x400310F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public readonly FingerTracking rightFinger;

		[Token(Token = "0x4003110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public readonly bool normalize;

		[Token(Token = "0x4003111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public readonly float timeStamp;

		[Token(Token = "0x4003112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public readonly float receivedTimeStamp;

		[Token(Token = "0x6002172")]
		[Address(RVA = "0x10B6448", Offset = "0x10B6448", VA = "0x10B6448")]
		public PlayerTrackingData(int playerNetworkId, Vector3 headPosition, Quaternion headRotation, Vector3 leftHandPosition, Quaternion leftHandRotation, Vector3 rightHandPosition, Quaternion rightHandRotation, FingerTracking leftFingers, FingerTracking rightFingers, bool normalize, float timeStamp, float receivedTimeStamp)
		{
		}

		[Token(Token = "0x6002173")]
		[Address(RVA = "0x10B64C4", Offset = "0x10B64C4", VA = "0x10B64C4")]
		public PlayerTrackingData(int playerNetworkId)
		{
		}
	}
	[Token(Token = "0x2000766")]
	public class RecordData
	{
		[Token(Token = "0x4003113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int headPositionMargin;

		[Token(Token = "0x4003114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly int handPositionMargin;

		[Token(Token = "0x6002174")]
		[Address(RVA = "0x10B6678", Offset = "0x10B6678", VA = "0x10B6678")]
		public RecordData()
		{
		}
	}
	[Token(Token = "0x2000767")]
	public class PlayerMovementHandler : ITickable, ILateTickable
	{
		[Token(Token = "0x4003115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayerReferences references;

		[Token(Token = "0x4003116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly InputData inputData;

		[Token(Token = "0x4003117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly GameData gameData;

		[Token(Token = "0x4003118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4003119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x400311A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x400311B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x400311C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly TrailerData trailerData;

		[Token(Token = "0x400311D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly PlayerSettings playerSettings;

		[Token(Token = "0x400311E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly RecordData recordData;

		[Token(Token = "0x400311F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly AutoPlayTestData autoPlayTestData;

		[Token(Token = "0x4003120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly CharacterData characterData;

		[Token(Token = "0x4003121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly SideViewData sideViewData;

		[Token(Token = "0x4003122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<PlayerTrackingData> playerTrackingData;

		[Token(Token = "0x4003123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<PlayerTrackingData> playerTrackingPreviousData;

		[Token(Token = "0x4003124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Dictionary<int, int> playerMapping;

		[Token(Token = "0x4003125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float timePerUpdate;

		[Token(Token = "0x4003126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float networkMessageUpdateTimer;

		[Token(Token = "0x4003127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 rightHandSmoothMovement;

		[Token(Token = "0x4003128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Quaternion rightHandSmoothRotation;

		[Token(Token = "0x4003129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Vector3 leftHandSmoothMovement;

		[Token(Token = "0x400312A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Quaternion leftHandSmoothRotation;

		[Token(Token = "0x400312B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Transform localCameraTransform;

		[Token(Token = "0x400312C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 currentSmoothHeadPosition;

		[Token(Token = "0x400312D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion currentSmoothHeadRotation;

		[Token(Token = "0x400312E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Vector3 headSmoothMovement;

		[Token(Token = "0x400312F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Quaternion headSmoothRotation;

		[Token(Token = "0x4003130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Vector3 previousHeadPosition;

		[Token(Token = "0x4003131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Quaternion previousHeadRotation;

		[Token(Token = "0x4003132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Predicate<PlayerTrackingData> removeTrackingDataPredicate;

		[Token(Token = "0x6002175")]
		[Address(RVA = "0x10B668C", Offset = "0x10B668C", VA = "0x10B668C")]
		public PlayerMovementHandler(PlayerReferences references, InputData inputData, GameData gameData, MessageSender messageSender, GameMessageFactory gameMessageFactory, IgnisNetworkConnectionData networkConnectionData, IRoomTimeProvider roomTimeProvider, TrailerData trailerData, PlayerSettings playerSettings, RecordData recordData, AutoPlayTestData autoPlayTestData, CharacterData characterData, SideViewData sideViewData)
		{
		}

		[Token(Token = "0x6002176")]
		[Address(RVA = "0x10B6848", Offset = "0x10B6848", VA = "0x10B6848")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6002177")]
		[Address(RVA = "0x10B684C", Offset = "0x10B684C", VA = "0x10B684C")]
		private void SetupBotForRecording()
		{
		}

		[Token(Token = "0x6002178")]
		[Address(RVA = "0x10B6AF4", Offset = "0x10B6AF4", VA = "0x10B6AF4")]
		public void OnSpawnPlayer(SpawnPlayerMessage spawnPlayerMessage)
		{
		}

		[Token(Token = "0x6002179")]
		[Address(RVA = "0x10B6D38", Offset = "0x10B6D38", VA = "0x10B6D38", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600217A")]
		[Address(RVA = "0x10B6D60", Offset = "0x10B6D60", VA = "0x10B6D60")]
		private void RemoveOldTrackingData()
		{
		}

		[Token(Token = "0x600217B")]
		[Address(RVA = "0x10B78B8", Offset = "0x10B78B8", VA = "0x10B78B8")]
		private bool RemoveTrackingData(PlayerTrackingData trackingData)
		{
			return default(bool);
		}

		[Token(Token = "0x600217C")]
		[Address(RVA = "0x10B6DC8", Offset = "0x10B6DC8", VA = "0x10B6DC8")]
		private void ApplyLocalTrackingData()
		{
		}

		[Token(Token = "0x600217D")]
		[Address(RVA = "0x10B6F38", Offset = "0x10B6F38", VA = "0x10B6F38")]
		private void UpdateLocalTrackingData()
		{
		}

		[Token(Token = "0x600217E")]
		[Address(RVA = "0x10B7924", Offset = "0x10B7924", VA = "0x10B7924")]
		private Vector3 GetHandPosition(Vector3 current, Vector3 targetPosition, ref Vector3 movementVelocity)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600217F")]
		[Address(RVA = "0x10B79E0", Offset = "0x10B79E0", VA = "0x10B79E0")]
		private Quaternion GetHandRotation(Quaternion current, Quaternion target, ref Quaternion rotationVelocity)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002180")]
		[Address(RVA = "0x10B7340", Offset = "0x10B7340", VA = "0x10B7340")]
		private void ApplyTrackingData()
		{
		}

		[Token(Token = "0x6002181")]
		[Address(RVA = "0x10B7AE0", Offset = "0x10B7AE0", VA = "0x10B7AE0")]
		private void SetHandAnimatorCurlValuesFromTrackingDataNormalized(HandAnimationData handAnimationData, FingerTracking data, FingerTracking previousData, float normalizedTime)
		{
		}

		[Token(Token = "0x6002182")]
		[Address(RVA = "0x10B7B78", Offset = "0x10B7B78", VA = "0x10B7B78", Slot = "5")]
		public void LateTick()
		{
		}

		[Token(Token = "0x6002183")]
		[Address(RVA = "0x10B7B7C", Offset = "0x10B7B7C", VA = "0x10B7B7C")]
		public void OnMovementTrackingMessage(Mtm mtm)
		{
		}

		[Token(Token = "0x6002184")]
		[Address(RVA = "0x10B8020", Offset = "0x10B8020", VA = "0x10B8020")]
		public void CleanupMatch()
		{
		}

		[Token(Token = "0x6002185")]
		[Address(RVA = "0x10B7A3C", Offset = "0x10B7A3C", VA = "0x10B7A3C")]
		public static Vector3UShort RotationToEulerShort(Quaternion rotation)
		{
			return default(Vector3UShort);
		}

		[Token(Token = "0x6002186")]
		[Address(RVA = "0x10B7FF0", Offset = "0x10B7FF0", VA = "0x10B7FF0")]
		private Quaternion EulerShortToRotation(Vector3UShort eulerShort)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002187")]
		[Address(RVA = "0x10B7F88", Offset = "0x10B7F88", VA = "0x10B7F88")]
		private float ByteToFloat(byte x)
		{
			return default(float);
		}

		[Token(Token = "0x6002188")]
		[Address(RVA = "0x10B7A78", Offset = "0x10B7A78", VA = "0x10B7A78")]
		public static byte FloatToByte(float x)
		{
			return default(byte);
		}

		[Token(Token = "0x6002189")]
		[Address(RVA = "0x10B8070", Offset = "0x10B8070", VA = "0x10B8070")]
		public void SmoothHeadMovement()
		{
		}
	}
	[Token(Token = "0x2000768")]
	public class PlayerReferences : MonoBehaviour
	{
		[Token(Token = "0x4003133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Transforms")]
		public Transform head;

		[Token(Token = "0x4003134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform body;

		[Token(Token = "0x4003135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform rightHand;

		[Token(Token = "0x4003136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftHand;

		[Token(Token = "0x4003137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform headController;

		[Token(Token = "0x4003138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform leftHandPointer;

		[Token(Token = "0x4003139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform rightHandPointer;

		[Token(Token = "0x400313A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform frontOfCameraPoint;

		[Token(Token = "0x400313B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform thirdPersonCameraPointRightShoulder;

		[Token(Token = "0x400313C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform thirdPersonCameraPointLeftShoulder;

		[Token(Token = "0x400313D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform leftShoulder;

		[Token(Token = "0x400313E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform rightShoulder;

		[Token(Token = "0x400313F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Collision")]
		public ColliderListener rightHandColliderListener;

		[Token(Token = "0x4003140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public ColliderListener leftHandColliderListener;

		[Token(Token = "0x4003141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public ColliderListener leftHandEffectTrigger;

		[Token(Token = "0x4003142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public ColliderListener rightHandEffectTrigger;

		[Token(Token = "0x4003143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public BodyPartReference[] bodyParts;

		[Token(Token = "0x4003144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("VisualTargets")]
		public Transform lefHandVisualTarget;

		[Token(Token = "0x4003145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Transform rightHandVisualTarget;

		[Token(Token = "0x4003146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Transform[] transformSyncSources;

		[Token(Token = "0x4003147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public VRIK ikSolver;

		[Token(Token = "0x600218A")]
		[Address(RVA = "0x10B8228", Offset = "0x10B8228", VA = "0x10B8228")]
		public PlayerReferences()
		{
		}
	}
	[Token(Token = "0x2000769")]
	[CreateAssetMenu(fileName = "PlayerSettings", menuName = "Settings/Player/PlayerSettings", order = 1)]
	public class PlayerSettings : ScriptableObject
	{
		[Token(Token = "0x4003148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerReferences references;

		[Token(Token = "0x4003149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Value -1 == number of missed events before clamping movement")]
		public float maxNormalizedSyncTime;

		[Token(Token = "0x400314A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Torso")]
		public Vector3 torsoOffset;

		[Token(Token = "0x400314B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float bodyNeckOffset;

		[Token(Token = "0x400314C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxNeckAngle;

		[Token(Token = "0x400314D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("HUD")]
		public int numVignettes;

		[Token(Token = "0x400314E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float vignetteInDuration;

		[Token(Token = "0x400314F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float vignetteOutDuration;

		[Token(Token = "0x4003150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Color projectileHighDamageColor;

		[Token(Token = "0x4003151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Color projectileLowDamageColor;

		[Token(Token = "0x4003152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Color dotHighDamageColor;

		[Token(Token = "0x4003153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Color dotLowDamageColor;

		[Token(Token = "0x4003154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Color vignetteCageColor;

		[Token(Token = "0x4003155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int vignetteColorMaxDamageThreshold;

		[Token(Token = "0x4003156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve vignetteInCurve;

		[Token(Token = "0x4003157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public VignetteReference vignettePrefab;

		[Token(Token = "0x4003158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public VignetteReference vignetteCagePrefab;

		[Token(Token = "0x4003159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Vector3 vignetteSpawnOffset;

		[Token(Token = "0x400315A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public VisorParticleEffectSettings visorParticleEffectSettings;

		[Token(Token = "0x400315B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Color")]
		[ColorUsage(true, true)]
		public Color player1ColorHdr;

		[Token(Token = "0x400315C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Color player1Color;

		[Token(Token = "0x400315D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[ColorUsage(true, true)]
		public Color player2ColorHdr;

		[Token(Token = "0x400315E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Color player2Color;

		[Token(Token = "0x400315F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Material hologramMaterial;

		[Token(Token = "0x4003160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Header("Player Health")]
		public AnimationCurve healthbarDelay;

		[Token(Token = "0x4003161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Header("Haptics")]
		public HapticEffect playerHit;

		[Token(Token = "0x4003162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public HapticEffect continuesDamage;

		[Token(Token = "0x4003163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public HapticEffect coolDownHaptic;

		[Token(Token = "0x4003164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public HapticEffect grabToolHaptic;

		[Token(Token = "0x4003165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public VrKeyboardSettings vrKeyboardSettings;

		[Token(Token = "0x4003166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public DamageRecordSetting damageRecordSettings;

		[Token(Token = "0x4003167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public string[] grabToolSound;

		[Token(Token = "0x4003168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public Material playerOneHealthBarMaterial;

		[Token(Token = "0x4003169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public Material playerTwoHealthBarMaterial;

		[Token(Token = "0x600218B")]
		[Address(RVA = "0x10B8230", Offset = "0x10B8230", VA = "0x10B8230")]
		public PlayerSettings()
		{
		}
	}
	[Token(Token = "0x200076A")]
	public class PlayerSpawnHandler
	{
		[Token(Token = "0x400316A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayerReferences localPlayer;

		[Token(Token = "0x400316B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x400316C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PlayerSettings playerSettings;

		[Token(Token = "0x400316D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x400316E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PlayerSpawnPointReference playerSpawnPointReference;

		[Token(Token = "0x400316F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4003170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameData gameData;

		[Token(Token = "0x4003171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly Transform worldParent;

		[Token(Token = "0x4003172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly CharacterData characterData;

		[Token(Token = "0x4003173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly DeckData deckData;

		[Token(Token = "0x4003174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly BannerData bannerData;

		[Token(Token = "0x4003175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly PlatformData platformData;

		[Token(Token = "0x4003176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4003177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly GlobalMatchmakingStateData matchmakingStateData;

		[Token(Token = "0x4003178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly ScoreBoardData scoreBoardData;

		[Token(Token = "0x4003179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly NetworkIdAllocator networkIdAllocator;

		[Token(Token = "0x400317A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x400317B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly VoipData voipData;

		[Token(Token = "0x400317C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly GamePlayRulesData gamePlayRulesData;

		[Token(Token = "0x400317D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly DeckBuildSettings deckBuildSettings;

		[Token(Token = "0x400317E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x400317F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4003180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x4003181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4003182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int numPlayers;

		[Token(Token = "0x600218C")]
		[Address(RVA = "0x10B8320", Offset = "0x10B8320", VA = "0x10B8320")]
		public PlayerSpawnHandler(PlayerReferences localPlayer, IgnisNetworkConnectionData networkConnectionData, PlayerSettings playerSettings, MessageSender messageSender, PlayerSpawnPointReference playerSpawnPointReference, GameMessageFactory gameMessageFactory, GameData gameData, Transform worldParent, CharacterData characterData, DeckData deckData, BannerData bannerData, PlatformData platformData, MatchHandlerData matchHandlerData, GlobalMatchmakingStateData matchmakingStateData, ScoreBoardData scoreBoardData, NetworkIdAllocator networkIdAllocator, CustomizationData customizationData, VoipData voipData, GamePlayRulesData gamePlayRulesData, DeckBuildSettings deckBuildSettings, BayTekData bayTekData, IgnisTelemetry ignisTelemetry, LockerRoomGameStateData lockerRoomGameStateData, EntryPoint.EntryPointData entryPointData)
		{
		}

		[Token(Token = "0x600218D")]
		[Address(RVA = "0x10B8414", Offset = "0x10B8414", VA = "0x10B8414")]
		public GameMessageInvokationResult OnReqSpawnPlayer(ReqSpawnPlayerMessage reqSpawnPlayerMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x600218E")]
		[Address(RVA = "0x10B8A6C", Offset = "0x10B8A6C", VA = "0x10B8A6C")]
		public void OnSpawnPlayer(SpawnPlayerMessage spawnPlayerMessage)
		{
		}

		[Token(Token = "0x600218F")]
		[Address(RVA = "0x10B9400", Offset = "0x10B9400", VA = "0x10B9400")]
		private void CheckForDoublePlayerOneSpawnBug(SpawnPlayerMessage spawnPlayerMessage)
		{
		}

		[Token(Token = "0x6002190")]
		[Address(RVA = "0x10B9AA8", Offset = "0x10B9AA8", VA = "0x10B9AA8")]
		private List<ToolSet> GetRulesBasedPlayerDeck(GameplayRules gameplayRules, SpawnPlayerMessage spawnPlayerMessage)
		{
			return null;
		}

		[Token(Token = "0x6002191")]
		[Address(RVA = "0x10B9BD8", Offset = "0x10B9BD8", VA = "0x10B9BD8")]
		private void RequestVoip(SpawnPlayerMessage spawnPlayerMessage, bool isLocalPlayer, PlayerReferences playerReference)
		{
		}

		[Token(Token = "0x6002192")]
		[Address(RVA = "0x10B9A00", Offset = "0x10B9A00", VA = "0x10B9A00")]
		private void SetColliderLayer(PlayerReferences references, LayerMask layerMask)
		{
		}

		[Token(Token = "0x6002193")]
		[Address(RVA = "0x10B9C9C", Offset = "0x10B9C9C", VA = "0x10B9C9C")]
		public GameMessageInvokationResult FailedToSpawnPlayer(FailedSpawnPlayerMessage failedSpawnPlayerMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6002194")]
		[Address(RVA = "0x10B9DDC", Offset = "0x10B9DDC", VA = "0x10B9DDC")]
		public void SetupOpponentId()
		{
		}

		[Token(Token = "0x6002195")]
		[Address(RVA = "0x10B9EA8", Offset = "0x10B9EA8", VA = "0x10B9EA8")]
		public void HidePlayer(int playerId)
		{
		}

		[Token(Token = "0x6002196")]
		[Address(RVA = "0x10B9F2C", Offset = "0x10B9F2C", VA = "0x10B9F2C")]
		public void CleanUp()
		{
		}
	}
	[Token(Token = "0x200076B")]
	public class PlayerSpawnPointReference : MonoBehaviour
	{
		[Token(Token = "0x4003183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SpawnPoints[] spawnPoints;

		[Token(Token = "0x6002197")]
		[Address(RVA = "0x10BA094", Offset = "0x10BA094", VA = "0x10BA094")]
		public SpawnPoints GetSpawnPoints(GameplayRules gameplayRules)
		{
			return null;
		}

		[Token(Token = "0x6002198")]
		[Address(RVA = "0x10BA130", Offset = "0x10BA130", VA = "0x10BA130")]
		public PlayerSpawnPointReference()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200076C")]
	public class SpawnPoints
	{
		[Token(Token = "0x4003184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameplayRules gameplayRules;

		[Token(Token = "0x4003185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform playerOneSpawn;

		[Token(Token = "0x4003186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform playerTwoSpawn;

		[Token(Token = "0x6002199")]
		[Address(RVA = "0x10BA138", Offset = "0x10BA138", VA = "0x10BA138")]
		public SpawnPoints()
		{
		}
	}
	[Token(Token = "0x200076D")]
	public class PlayerTransfromObserver : MonoBehaviour, IPunObservable
	{
		[Token(Token = "0x4003187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PhotonView photonView;

		[Token(Token = "0x4003188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform follow;

		[Token(Token = "0x600219A")]
		[Address(RVA = "0x10BA140", Offset = "0x10BA140", VA = "0x10BA140")]
		private void Update()
		{
		}

		[Token(Token = "0x600219B")]
		[Address(RVA = "0x10BA1E0", Offset = "0x10BA1E0", VA = "0x10BA1E0", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x600219C")]
		[Address(RVA = "0x10BA390", Offset = "0x10BA390", VA = "0x10BA390")]
		public PlayerTransfromObserver()
		{
		}
	}
	[Token(Token = "0x200076E")]
	public class PlayerTriggerHandler
	{
		[Token(Token = "0x4003189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly InputData inputData;

		[Token(Token = "0x400318A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameData gameData;

		[Token(Token = "0x400318B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly GrabData grabData;

		[Token(Token = "0x400318C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x400318D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PlayerReferences localPlayer;

		[Token(Token = "0x400318E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly CharacterData characterData;

		[Token(Token = "0x400318F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4003190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4003191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly TetherToolHandlerData tetherToolHandlerData;

		[Token(Token = "0x4003192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4003193")]
		public const int LEFT_HAND_ID = 1;

		[Token(Token = "0x4003194")]
		public const int RIGHT_HAND_ID = 0;

		[Token(Token = "0x600219D")]
		[Address(RVA = "0x10BA398", Offset = "0x10BA398", VA = "0x10BA398")]
		public PlayerTriggerHandler(InputData inputData, GameData gameData, GrabData grabData, IRoomTimeProvider roomTimeProvider, PlayerReferences localPlayer, CharacterData characterData, IgnisSoundTriggerData ignisSoundTriggerData, GameMessageFactory gameMessageFactory, TetherToolHandlerData tetherToolHandlerData, MessageSender messageSender)
		{
		}

		[Token(Token = "0x600219E")]
		[Address(RVA = "0x10BA41C", Offset = "0x10BA41C", VA = "0x10BA41C")]
		public void Tick()
		{
		}

		[Token(Token = "0x600219F")]
		[Address(RVA = "0x10BA5F0", Offset = "0x10BA5F0", VA = "0x10BA5F0")]
		public void OnBowHandRelease(DropSecondaryMessage dropSecondaryMessage)
		{
		}

		[Token(Token = "0x60021A0")]
		[Address(RVA = "0x10BA4FC", Offset = "0x10BA4FC", VA = "0x10BA4FC")]
		private void CheckTriggerInput(HandGrabData handGrabData, HandAnimationData handAnimationData, int handId, HandInput handInput)
		{
		}

		[Token(Token = "0x60021A1")]
		[Address(RVA = "0x10BA7CC", Offset = "0x10BA7CC", VA = "0x10BA7CC")]
		private void TryToTriggerTool(Tool tool, HandAnimationData animationData, HandInput handInput, int handId, HandGrabData handGrabData)
		{
		}

		[Token(Token = "0x60021A2")]
		[Address(RVA = "0x10BA928", Offset = "0x10BA928", VA = "0x10BA928")]
		private bool CanTriggerTwoHandedWeapon(Tool tool, int handId)
		{
			return default(bool);
		}

		[Token(Token = "0x60021A3")]
		[Address(RVA = "0x10BAB98", Offset = "0x10BAB98", VA = "0x10BAB98")]
		private void StopAndTriggerTool(Tool tool, HandAnimationData animationData, HandInput handInput)
		{
		}

		[Token(Token = "0x60021A4")]
		[Address(RVA = "0x10BAA00", Offset = "0x10BAA00", VA = "0x10BAA00")]
		private void StartChargeOrTriggerTool(Tool tool, HandAnimationData animationData, HandInput handInput, HandGrabData handGrabData)
		{
		}

		[Token(Token = "0x60021A5")]
		[Address(RVA = "0x10BAC28", Offset = "0x10BAC28", VA = "0x10BAC28")]
		private bool TriggerStartCharging(Tool tool)
		{
			return default(bool);
		}

		[Token(Token = "0x60021A6")]
		[Address(RVA = "0x10BAA44", Offset = "0x10BAA44", VA = "0x10BAA44")]
		private void TriggerTool(Tool toolToTrigger, HandAnimationData animationData, Vector3 averageMovement)
		{
		}

		[Token(Token = "0x60021A7")]
		[Address(RVA = "0x10BACA4", Offset = "0x10BACA4", VA = "0x10BACA4")]
		private bool CheckIfAllowedToTrigger(Tool toolToTrigger)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200076F")]
	public class RandomNameGenerator
	{
		[Token(Token = "0x4003195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static System.Random random;

		[Token(Token = "0x4003196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<string> firstNames;

		[Token(Token = "0x4003197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<string> lastNames;

		[Token(Token = "0x60021A8")]
		[Address(RVA = "0x10BAE24", Offset = "0x10BAE24", VA = "0x10BAE24")]
		public static string GetRandomRankName()
		{
			return null;
		}

		[Token(Token = "0x60021A9")]
		[Address(RVA = "0x10BAF64", Offset = "0x10BAF64", VA = "0x10BAF64")]
		public static string GetRandomName()
		{
			return null;
		}

		[Token(Token = "0x60021AA")]
		[Address(RVA = "0x10BB0A8", Offset = "0x10BB0A8", VA = "0x10BB0A8")]
		public RandomNameGenerator()
		{
		}
	}
	[Token(Token = "0x2000770")]
	public class SyncGamobjectTransform : MonoBehaviour, IPunObservable
	{
		[Token(Token = "0x4003198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PhotonView photonView;

		[Token(Token = "0x4003199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float timePerUpdate;

		[Token(Token = "0x400319A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float normalizedTime;

		[Token(Token = "0x400319B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 position;

		[Token(Token = "0x400319C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion rotation;

		[Token(Token = "0x400319D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 prevPosition;

		[Token(Token = "0x400319E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion prevRotation;

		[Token(Token = "0x60021AC")]
		[Address(RVA = "0x10BE980", Offset = "0x10BE980", VA = "0x10BE980")]
		private void Start()
		{
		}

		[Token(Token = "0x60021AD")]
		[Address(RVA = "0x10BE9E8", Offset = "0x10BE9E8", VA = "0x10BE9E8")]
		private void Update()
		{
		}

		[Token(Token = "0x60021AE")]
		[Address(RVA = "0x10BEB24", Offset = "0x10BEB24", VA = "0x10BEB24", Slot = "4")]
		private void Photon.Pun.IPunObservable.OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x60021AF")]
		[Address(RVA = "0x10BEC88", Offset = "0x10BEC88", VA = "0x10BEC88")]
		public SyncGamobjectTransform()
		{
		}
	}
	[Token(Token = "0x2000771")]
	public class ToolGrabHandler : ITickable
	{
		[Token(Token = "0x400319F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GrabData grabData;

		[Token(Token = "0x40031A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameData gameData;

		[Token(Token = "0x40031A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ToolThrownHandlerData toolThrownHandlerData;

		[Token(Token = "0x40031A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly TetherToolHandlerData tetherToolHandlerData;

		[Token(Token = "0x40031A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ToolSpawnAlgorithmData spawnAlgorithm;

		[Token(Token = "0x40031A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Predicate<UpdatableObject> removeGrabbedObject;

		[Token(Token = "0x40031A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameDesignTrackingData gameDesignTrackingData;

		[Token(Token = "0x40031A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ToolRecycleHandler toolRecycleHandler;

		[Token(Token = "0x40031A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x40031A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly PlayerSettings playerSettings;

		[Token(Token = "0x40031A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly IgnisSoundTriggerData soundTriggerData;

		[Token(Token = "0x40031AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly HapticData hapticData;

		[Token(Token = "0x40031AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ThrowSettings throwSettings;

		[Token(Token = "0x60021B0")]
		[Address(RVA = "0x10BEDB0", Offset = "0x10BEDB0", VA = "0x10BEDB0")]
		public ToolGrabHandler(GrabData grabData, GameData gameData, ToolThrownHandlerData toolThrownHandlerData, TetherToolHandlerData tetherToolHandlerData, ToolSpawnAlgorithmData spawnAlgorithm, ThrowSettings throwSettings, GameDesignTrackingData gameDesignTrackingData, ToolRecycleHandler toolRecycleHandler, IRoomTimeProvider roomTimeProvider, PlayerSettings playerSettings, IgnisSoundTriggerData soundTriggerData, HapticData hapticData)
		{
		}

		[Token(Token = "0x60021B1")]
		[Address(RVA = "0x10BEE9C", Offset = "0x10BEE9C", VA = "0x10BEE9C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60021B2")]
		[Address(RVA = "0x10BEEB4", Offset = "0x10BEEB4", VA = "0x10BEEB4")]
		private void RemoveDestroyedObjects()
		{
		}

		[Token(Token = "0x60021B3")]
		[Address(RVA = "0x10BEF10", Offset = "0x10BEF10", VA = "0x10BEF10")]
		private void UpdateGrabbedPositions()
		{
		}

		[Token(Token = "0x60021B4")]
		[Address(RVA = "0x10BF104", Offset = "0x10BF104", VA = "0x10BF104")]
		private void SetToolPosition(Transform toolReference, Transform hand)
		{
		}

		[Token(Token = "0x60021B5")]
		[Address(RVA = "0x10BF1F8", Offset = "0x10BF1F8", VA = "0x10BF1F8")]
		public GameMessageInvokationResult OnGrabbedMessage(GrabMessage grabMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60021B6")]
		[Address(RVA = "0x10BFB70", Offset = "0x10BFB70", VA = "0x10BFB70")]
		public GameMessageInvokationResult OnGrabbedSecondaryMessage(GrabSecondaryMessage grabSecondaryMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60021B7")]
		[Address(RVA = "0x10BF998", Offset = "0x10BF998", VA = "0x10BF998")]
		private static bool TryToAssignGrabData(int toolNetworkId, HandGrabData handGrabData)
		{
			return default(bool);
		}

		[Token(Token = "0x60021B8")]
		[Address(RVA = "0x10BF9CC", Offset = "0x10BF9CC", VA = "0x10BF9CC")]
		private static void SetToolCollisionLayer(Tool tool, bool isPlayerOne)
		{
		}

		[Token(Token = "0x60021B9")]
		[Address(RVA = "0x10BFE1C", Offset = "0x10BFE1C", VA = "0x10BFE1C")]
		public GameMessageInvokationResult OnDroppedMessage(DropMessage dropMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60021BA")]
		[Address(RVA = "0x10C0804", Offset = "0x10C0804", VA = "0x10C0804")]
		public GameMessageInvokationResult OnDroppedSecondaryMessage(DropSecondaryMessage dropMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60021BB")]
		[Address(RVA = "0x10C09CC", Offset = "0x10C09CC", VA = "0x10C09CC")]
		private bool RemoveGrabbedObject(UpdatableObject grabbedObject)
		{
			return default(bool);
		}

		[Token(Token = "0x60021BC")]
		[Address(RVA = "0x10C0AF8", Offset = "0x10C0AF8", VA = "0x10C0AF8")]
		public void CleanUpRound()
		{
		}
	}
	[Token(Token = "0x2000773")]
	public class VignetteReference : MonoBehaviour
	{
		[Token(Token = "0x40031AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshRenderer meshRenderer;

		[Token(Token = "0x40031AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VisorParticleEffectType hudEffectType;

		[Token(Token = "0x60021BF")]
		[Address(RVA = "0x10C0C78", Offset = "0x10C0C78", VA = "0x10C0C78")]
		public VignetteReference()
		{
		}
	}
	[Token(Token = "0x2000774")]
	[CreateAssetMenu(menuName = "Settings/Photon/PhotonVoice", fileName = "PhotonVoiceSettings")]
	public class PhotonVoiceSettings : ScriptableObject
	{
		[Token(Token = "0x40031AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PhotonVoiceReference photonVoiceReference;

		[Token(Token = "0x40031B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Recorder recorder;

		[Token(Token = "0x60021C0")]
		[Address(RVA = "0x10C0C80", Offset = "0x10C0C80", VA = "0x10C0C80")]
		public PhotonVoiceSettings()
		{
		}
	}
	[Token(Token = "0x2000775")]
	public class EndOfMatchReport
	{
		[Token(Token = "0x40031B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string matchId;

		[Token(Token = "0x40031B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string roomCode;

		[Token(Token = "0x40031B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly float myScore;

		[Token(Token = "0x40031B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly float opponentScore;

		[Token(Token = "0x40031B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly bool wasBotFight;

		[Token(Token = "0x40031B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public readonly bool iAmMaster;

		[Token(Token = "0x40031B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[CanBeNull]
		public string botId;

		[Token(Token = "0x40031B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly string rewardRandomSeed;

		[Token(Token = "0x40031B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly float matchRewardFactor;

		[Token(Token = "0x40031BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public readonly MatchEndReason matchEndReason;

		[Token(Token = "0x40031BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public EndOfMatchReportState state;

		[Token(Token = "0x40031BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float retryAt;

		[Token(Token = "0x60021C1")]
		[Address(RVA = "0x10C0C88", Offset = "0x10C0C88", VA = "0x10C0C88")]
		public EndOfMatchReport(string matchId, string roomCode, float myScore, float opponentScore, string rewardRandomSeed, bool iAmMaster, MatchEndReason matchEndReason)
		{
		}

		[Token(Token = "0x60021C2")]
		[Address(RVA = "0x10C0CF4", Offset = "0x10C0CF4", VA = "0x10C0CF4")]
		public EndOfMatchReport(string matchId, float myScore, float opponentScore, [CanBeNull] string botId, string rewardRandomSeed, float matchRewardFactor, MatchEndReason matchEndReason)
		{
		}
	}
	[Token(Token = "0x2000776")]
	public class MatchReportingData
	{
		[Token(Token = "0x2000777")]
		public class MatchInfo
		{
			[Token(Token = "0x40031C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string opponentEntityId;

			[Token(Token = "0x40031C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string queueName;

			[Token(Token = "0x60021C4")]
			[Address(RVA = "0x10C0E68", Offset = "0x10C0E68", VA = "0x10C0E68")]
			public MatchInfo(string opponentEntityId, string queueName)
			{
			}
		}

		[Token(Token = "0x40031BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<EndOfMatchReport> reports;

		[Token(Token = "0x40031BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Dictionary<string, MatchInfo> roomCodeMatchInfoMap;

		[Token(Token = "0x40031BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Queue<int> resetLosingStreakRequests;

		[Token(Token = "0x60021C3")]
		[Address(RVA = "0x10C0D64", Offset = "0x10C0D64", VA = "0x10C0D64")]
		public MatchReportingData()
		{
		}
	}
	[Token(Token = "0x2000778")]
	public enum EndOfMatchReportState
	{
		[Token(Token = "0x40031C3")]
		Queued,
		[Token(Token = "0x40031C4")]
		Sending,
		[Token(Token = "0x40031C5")]
		Sent,
		[Token(Token = "0x40031C6")]
		Failed
	}
	[Token(Token = "0x2000779")]
	public class PlayFabMatchReportingHandler : ITickable
	{
		[Token(Token = "0x40031C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MatchReportingData matchReportingData;

		[Token(Token = "0x40031C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IPlayFabMatchReportFacade playFabMatchReportFacade;

		[Token(Token = "0x40031C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x40031CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x40031CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly AbuseReportingData abuseReportingData;

		[Token(Token = "0x40031CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PlayFabPlayerIdentitiesData playFabPlayerIdentitiesData;

		[Token(Token = "0x40031CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData;

		[Token(Token = "0x60021C5")]
		[Address(RVA = "0x10C0E94", Offset = "0x10C0E94", VA = "0x10C0E94")]
		public PlayFabMatchReportingHandler(MatchReportingData matchReportingData, IPlayFabMatchReportFacade playFabMatchReportFacade, ITimeProvider timeProvider, PlayFabConnectionSettings playFabConnectionSettings, AbuseReportingData abuseReportingData, PlayFabPlayerIdentitiesData playFabPlayerIdentitiesData, PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData)
		{
		}

		[Token(Token = "0x60021C6")]
		[Address(RVA = "0x10C0EF8", Offset = "0x10C0EF8", VA = "0x10C0EF8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60021C7")]
		[Address(RVA = "0x10C15A4", Offset = "0x10C15A4", VA = "0x10C15A4")]
		public void ReportError(EndOfMatchReport report, PlayFabError obj)
		{
		}

		[Token(Token = "0x60021C8")]
		[Address(RVA = "0x10C14E0", Offset = "0x10C14E0", VA = "0x10C14E0")]
		private void ChangeState(EndOfMatchReport report, EndOfMatchReportState newState)
		{
		}

		[Token(Token = "0x60021C9")]
		[Address(RVA = "0x10C16E4", Offset = "0x10C16E4", VA = "0x10C16E4")]
		public void ReportSuccessful(EndOfMatchReport report)
		{
		}
	}
	[Token(Token = "0x200077A")]
	public class PlayFabMatchReportFacade : IPlayFabMatchReportFacade
	{
		[Token(Token = "0x60021CA")]
		[Address(RVA = "0x10C16FC", Offset = "0x10C16FC", VA = "0x10C16FC", Slot = "4")]
		public void ReportMatchResult(EndOfMatchReport report, MatchReportingData.MatchInfo matchInfo, Action<EndOfMatchReport> successCallback, Action<EndOfMatchReport, PlayFabError> errorCallback)
		{
		}

		[Token(Token = "0x60021CB")]
		[Address(RVA = "0x10C1A08", Offset = "0x10C1A08", VA = "0x10C1A08")]
		private static bool matchReported(JsonObject resultJson)
		{
			return default(bool);
		}

		[Token(Token = "0x60021CC")]
		[Address(RVA = "0x10C1B20", Offset = "0x10C1B20", VA = "0x10C1B20", Slot = "5")]
		public void ReportBotMatchResult(EndOfMatchReport report, Action<EndOfMatchReport> successCallback, Action<EndOfMatchReport, PlayFabError> errorCallback)
		{
		}

		[Token(Token = "0x60021CD")]
		[Address(RVA = "0x10C1E04", Offset = "0x10C1E04", VA = "0x10C1E04")]
		public PlayFabMatchReportFacade()
		{
		}
	}
	[Token(Token = "0x200077D")]
	public interface IPlayFabMatchReportFacade
	{
		[Token(Token = "0x60021D4")]
		void ReportMatchResult(EndOfMatchReport report, MatchReportingData.MatchInfo matchInfo, Action<EndOfMatchReport> successCallback, Action<EndOfMatchReport, PlayFabError> errorCallback);

		[Token(Token = "0x60021D5")]
		void ReportBotMatchResult(EndOfMatchReport report, Action<EndOfMatchReport> successCallback, Action<EndOfMatchReport, PlayFabError> errorCallback);
	}
	[Token(Token = "0x200077E")]
	public class PushNotificationInfoData
	{
		[Token(Token = "0x40031D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<UpdatePushNotificationInfoRequest> updateRequests;

		[Token(Token = "0x60021D6")]
		[Address(RVA = "0x10C216C", Offset = "0x10C216C", VA = "0x10C216C")]
		public PushNotificationInfoData()
		{
		}
	}
	[Token(Token = "0x200077F")]
	public class UpdatePushNotificationInfoRequest
	{
		[Token(Token = "0x2000780")]
		public enum PushNotificationPlatform
		{
			[Token(Token = "0x40031D9")]
			Oculus
		}

		[Token(Token = "0x40031D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string recipientId;

		[Token(Token = "0x40031D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string token;

		[Token(Token = "0x40031D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PushNotificationPlatform platform;

		[Token(Token = "0x60021D7")]
		[Address(RVA = "0x10C21E8", Offset = "0x10C21E8", VA = "0x10C21E8")]
		public UpdatePushNotificationInfoRequest(string recipientId, string token, PushNotificationPlatform platform)
		{
		}
	}
	[Token(Token = "0x2000781")]
	public class PlayFabPushNotificationInfoHandler : ITickable
	{
		[Token(Token = "0x40031DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PushNotificationInfoData pushNotificationInfoData;

		[Token(Token = "0x40031DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData;

		[Token(Token = "0x40031DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PlatformLoginData platformLoginData;

		[Token(Token = "0x40031DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DebugMenu debugMenu;

		[Token(Token = "0x40031DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool hasDetectedPushInfo;

		[Token(Token = "0x60021D8")]
		[Address(RVA = "0x10C2224", Offset = "0x10C2224", VA = "0x10C2224")]
		public PlayFabPushNotificationInfoHandler(PushNotificationInfoData pushNotificationInfoData, PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData, PlatformLoginData platformLoginData)
		{
		}

		[Token(Token = "0x60021D9")]
		[Address(RVA = "0x10C2260", Offset = "0x10C2260", VA = "0x10C2260")]
		public void SetupDebug(DebugMenu debugMenu)
		{
		}

		[Token(Token = "0x60021DA")]
		[Address(RVA = "0x10C2268", Offset = "0x10C2268", VA = "0x10C2268")]
		private void SendDebugRetentionNotifcation()
		{
		}

		[Token(Token = "0x60021DB")]
		[Address(RVA = "0x10C2354", Offset = "0x10C2354", VA = "0x10C2354")]
		private void SendDebugNotifcation(string notificationId)
		{
		}

		[Token(Token = "0x60021DC")]
		[Address(RVA = "0x10C2464", Offset = "0x10C2464", VA = "0x10C2464", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x2000782")]
	public interface IPooledObject
	{
		[Token(Token = "0x17000161")]
		List<Transform> PoolReferences
		{
			[Token(Token = "0x60021DF")]
			get;
		}

		[Token(Token = "0x17000162")]
		bool IsRemovedFromPool
		{
			[Token(Token = "0x60021E0")]
			get;
			[Token(Token = "0x60021E1")]
			set;
		}

		[Token(Token = "0x60021DD")]
		bool IsDead();

		[Token(Token = "0x60021DE")]
		bool IsDestroyed();
	}
	[Token(Token = "0x2000783")]
	public class PoolReferenceActivator : ITickable
	{
		[Token(Token = "0x40031DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameData gameData;

		[Token(Token = "0x40031E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Transform worldParent;

		[Token(Token = "0x60021E2")]
		[Address(RVA = "0x10C365C", Offset = "0x10C365C", VA = "0x10C365C")]
		public PoolReferenceActivator(GameData gameData, Transform worldParent)
		{
		}

		[Token(Token = "0x60021E3")]
		[Address(RVA = "0x10C3688", Offset = "0x10C3688", VA = "0x10C3688", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60021E4")]
		[Address(RVA = "0x10C37A0", Offset = "0x10C37A0", VA = "0x10C37A0")]
		private void TryToActivateObject(IPooledObject pooledObject)
		{
		}
	}
	[Token(Token = "0x2000784")]
	public sealed class ComponentPrefabPool<T> where T : Component
	{
		[Token(Token = "0x2000785")]
		[CompilerGenerated]
		private sealed class <get_AllocatedObjects>d__18 : IEnumerable<T>, IEnumerable, IEnumerator<T>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40031ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x40031EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <>2__current;

			[Token(Token = "0x40031EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40031F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ComponentPrefabPool<T> <>4__this;

			[Token(Token = "0x40031F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <capacityMask>5__2;

			[Token(Token = "0x40031F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <i>5__3;

			[Token(Token = "0x17000166")]
			private T System.Collections.Generic.IEnumerator<T>.Current
			{
				[Token(Token = "0x60021FD")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000167")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60021FF")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60021FA")]
			[DebuggerHidden]
			public <get_AllocatedObjects>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x60021FB")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60021FC")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60021FE")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002200")]
			[DebuggerHidden]
			private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002201")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40031E1")]
		private const int MAX_CAPACITY = 4096;

		[Token(Token = "0x40031E2")]
		private const double INV_LOG2 = 1.44269504088896;

		[Token(Token = "0x40031E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Transform disabledParentTransform;

		[Token(Token = "0x40031E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T prefab;

		[Token(Token = "0x40031E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] buffer;

		[Token(Token = "0x40031E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int capacity;

		[Token(Token = "0x40031E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int size;

		[Token(Token = "0x40031E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int head;

		[Token(Token = "0x40031E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int tail;

		[Token(Token = "0x40031EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int asyncInstantiationIndex;

		[Token(Token = "0x40031EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ProfilerMarker popMarker;

		[Token(Token = "0x17000163")]
		public bool HasReachedCapacity
		{
			[Token(Token = "0x60021E5")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60021E6")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000164")]
		internal T Prefab
		{
			[Token(Token = "0x60021E7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000165")]
		internal IEnumerable<T> AllocatedObjects
		{
			[Token(Token = "0x60021E8")]
			[IteratorStateMachine(typeof(ComponentPrefabPool<>.<get_AllocatedObjects>d__18))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60021E9")]
		internal ComponentPrefabPool(Transform disabledParentTransform, T prefab, int capacity, int initialAmountToInstatiate)
		{
		}

		[Token(Token = "0x60021EA")]
		internal T Pop()
		{
			return null;
		}

		[Token(Token = "0x60021EB")]
		internal T Pop(Transform parent)
		{
			return null;
		}

		[Token(Token = "0x60021EC")]
		internal T Pop(Vector3 localPosition, Quaternion localRotation)
		{
			return null;
		}

		[Token(Token = "0x60021ED")]
		internal T Pop(Transform parent, Vector3 localPosition, Quaternion localRotation)
		{
			return null;
		}

		[Token(Token = "0x60021EE")]
		internal T Pop(Transform parent, Vector3 localPosition, Quaternion localRotation, Vector3 localScale)
		{
			return null;
		}

		[Token(Token = "0x60021EF")]
		internal void Push(T obj, bool worldPositionStays = false)
		{
		}

		[Token(Token = "0x60021F0")]
		internal bool AssertSizeZero()
		{
			return default(bool);
		}

		[Token(Token = "0x60021F1")]
		internal bool AssertBufferIntegrity()
		{
			return default(bool);
		}

		[Token(Token = "0x60021F2")]
		private void CheckForNullObjects()
		{
		}

		[Token(Token = "0x60021F3")]
		internal void AsyncInstantiation(int amountToInstantiate)
		{
		}

		[Token(Token = "0x60021F4")]
		private void SetCapacity(int n)
		{
		}

		[Token(Token = "0x60021F5")]
		private void IncreaseCapacity(int n)
		{
		}

		[Token(Token = "0x60021F6")]
		private T PopInternal()
		{
			return null;
		}

		[Token(Token = "0x60021F7")]
		private void PushInternal(T obj)
		{
		}

		[Token(Token = "0x60021F8")]
		public int GetNumberOfAllocatedObjects()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000786")]
	public sealed class CSharpObjectPool<T> where T : class
	{
		[Token(Token = "0x2000787")]
		[CompilerGenerated]
		private sealed class <get_AllocatedObjects>d__10 : IEnumerable<T>, IEnumerable, IEnumerator<T>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40031FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x40031FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <>2__current;

			[Token(Token = "0x40031FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40031FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CSharpObjectPool<T> <>4__this;

			[Token(Token = "0x4003200")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <capacityMask>5__2;

			[Token(Token = "0x4003201")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <i>5__3;

			[Token(Token = "0x17000169")]
			private T System.Collections.Generic.IEnumerator<T>.Current
			{
				[Token(Token = "0x6002210")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002212")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600220D")]
			[DebuggerHidden]
			public <get_AllocatedObjects>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x600220E")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600220F")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002211")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002213")]
			[DebuggerHidden]
			private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002214")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40031F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T> instantion;

		[Token(Token = "0x40031F4")]
		private const int MAX_CAPACITY = 4096;

		[Token(Token = "0x40031F5")]
		private const double INV_LOG2 = 1.44269504088896;

		[Token(Token = "0x40031F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] buffer;

		[Token(Token = "0x40031F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int capacity;

		[Token(Token = "0x40031F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int size;

		[Token(Token = "0x40031F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int head;

		[Token(Token = "0x40031FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int tail;

		[Token(Token = "0x40031FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ProfilerMarker popProfileMarker;

		[Token(Token = "0x17000168")]
		internal IEnumerable<T> AllocatedObjects
		{
			[Token(Token = "0x6002202")]
			[IteratorStateMachine(typeof(CSharpObjectPool<>.<get_AllocatedObjects>d__10))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002203")]
		internal CSharpObjectPool(int capacity, Func<T> instantion)
		{
		}

		[Token(Token = "0x6002204")]
		internal T Pop()
		{
			return null;
		}

		[Token(Token = "0x6002205")]
		internal T Pop(Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6002206")]
		internal void Push(T obj)
		{
		}

		[Token(Token = "0x6002207")]
		internal bool AssertSizeZero()
		{
			return default(bool);
		}

		[Token(Token = "0x6002208")]
		internal bool AssertBufferIntegrity()
		{
			return default(bool);
		}

		[Token(Token = "0x6002209")]
		private void IncreaseCapacity(int n)
		{
		}

		[Token(Token = "0x600220A")]
		private T PopInternal()
		{
			return null;
		}

		[Token(Token = "0x600220B")]
		private void PushInternal(T obj)
		{
		}
	}
	[Token(Token = "0x2000788")]
	public class AreaOfEffectStationaryProjectileFactory : IBallisticProjectileFactory, IProjectileFactory
	{
		[Token(Token = "0x4003202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform parentTransform;

		[Token(Token = "0x4003203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AreaOffEffectProjectileSettings projectileSettings;

		[Token(Token = "0x4003204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4003205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4003206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly OwnershipHelper ownershipHelper;

		[Token(Token = "0x4003207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ComponentPrefabPool<ProjectileReference> referencePool;

		[Token(Token = "0x4003208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ComponentPrefabPool<SphereColliderReference> colliderReferencePool;

		[Token(Token = "0x4003209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly CSharpObjectPool<AreaOfEffectProjectile> projectilePool;

		[Token(Token = "0x400320A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly int projectileGroupId;

		[Token(Token = "0x400320B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly TimeHandlerData timeHandlerData;

		[Token(Token = "0x400320C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly GameData gameData;

		[Token(Token = "0x400320D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly BallisticAirHandlerData ballisticAirData;

		[Token(Token = "0x6002215")]
		[Address(RVA = "0x10C3A4C", Offset = "0x10C3A4C", VA = "0x10C3A4C")]
		public AreaOfEffectStationaryProjectileFactory(Transform parentTransform, AreaOffEffectProjectileSettings projectileSettings, MessageSender messageSender, GameMessageFactory gameMessageFactory, OwnershipHelper ownershipHelper, ComponentPrefabPool<ProjectileReference> referencePool, ComponentPrefabPool<SphereColliderReference> colliderReferencePool, CSharpObjectPool<AreaOfEffectProjectile> projectilePool, int projectileGroupId, TimeHandlerData timeHandlerData, GameData gameData, BallisticAirHandlerData ballisticAirData)
		{
		}

		[Token(Token = "0x6002216")]
		[Address(RVA = "0x10C3AE4", Offset = "0x10C3AE4", VA = "0x10C3AE4", Slot = "4")]
		public Projectile Create(float spawnTime, Vector3 position, Quaternion rotation, int projectileId, int collisionLayer, int playerInstigator, ToolName toolSpawnedFrom, float chargeAmount, float bowPullbackAmount, int tetherId)
		{
			return null;
		}

		[Token(Token = "0x6002217")]
		[Address(RVA = "0x10C4030", Offset = "0x10C4030", VA = "0x10C4030", Slot = "5")]
		public void Recycle(Projectile projectile)
		{
		}

		[Token(Token = "0x6002218")]
		[Address(RVA = "0x10C40D4", Offset = "0x10C40D4", VA = "0x10C40D4", Slot = "6")]
		public void RecycleGameObjects(Projectile projectile)
		{
		}
	}
	[Token(Token = "0x2000789")]
	public readonly struct AreaOfEffectHit
	{
		[Token(Token = "0x400320E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int id;

		[Token(Token = "0x400320F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int count;

		[Token(Token = "0x4003210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ImpactTypes impactTypes;

		[Token(Token = "0x6002219")]
		[Address(RVA = "0x10C417C", Offset = "0x10C417C", VA = "0x10C417C")]
		public AreaOfEffectHit(int id, int count, ImpactTypes impactTypes)
		{
		}
	}
	[Token(Token = "0x200078A")]
	public class AreaOfEffectProjectile : Projectile, IBallistics, IDamageOverTime, ITimeable
	{
		[Token(Token = "0x4003211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private MessageSender messageSender;

		[Token(Token = "0x4003212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4003213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private OwnershipHelper ownershipHelper;

		[Token(Token = "0x4003214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private AreaOffEffectProjectileSettings projectileSettings;

		[Token(Token = "0x4003215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly EventHandler<ColliderListenerEventArgs> onTriggerEnter;

		[Token(Token = "0x4003216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly EventHandler<ColliderListenerEventArgs> onTriggerExit;

		[Token(Token = "0x4003217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private BallisticSoundState soundState;

		[Token(Token = "0x4003218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private int playerInstigator;

		[Token(Token = "0x4003219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private DamagePerSecondData damagePerSecondData;

		[Token(Token = "0x400321A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Dictionary<int, AreaOfEffectHit> idOverlapCounts;

		[Token(Token = "0x1700016B")]
		public Transform DOTSoundTransform
		{
			[Token(Token = "0x600221A")]
			[Address(RVA = "0x10C4188", Offset = "0x10C4188", VA = "0x10C4188", Slot = "59")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600221B")]
			[Address(RVA = "0x10C4190", Offset = "0x10C4190", VA = "0x10C4190")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700016C")]
		public SphereColliderReference SphereColliderReference
		{
			[Token(Token = "0x600221C")]
			[Address(RVA = "0x10C4198", Offset = "0x10C4198", VA = "0x10C4198")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600221D")]
			[Address(RVA = "0x10C41A0", Offset = "0x10C41A0", VA = "0x10C41A0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600221E")]
		[Address(RVA = "0x10C41A8", Offset = "0x10C41A8", VA = "0x10C41A8")]
		public AreaOfEffectProjectile()
		{
		}

		[Token(Token = "0x600221F")]
		[Address(RVA = "0x10C3E94", Offset = "0x10C3E94", VA = "0x10C3E94")]
		public void Initialize(float spawnTime, ProjectileReference reference, SphereColliderReference sphereColliderReference, int projectileNetworkId, MessageSender sender, GameMessageFactory factory, OwnershipHelper ownership, AreaOffEffectProjectileSettings settings, int projectileGroupId, int playerInstigator, ToolName toolSpawnedFrom, float chargeAmount, float bowPullbackAmount, int tetherId, DamagePerSecondData damagePerSecondData)
		{
		}

		[Token(Token = "0x6002220")]
		[Address(RVA = "0x10C46E0", Offset = "0x10C46E0", VA = "0x10C46E0", Slot = "46")]
		public override float GetDamageProjectile()
		{
			return default(float);
		}

		[Token(Token = "0x6002221")]
		[Address(RVA = "0x10C46E8", Offset = "0x10C46E8", VA = "0x10C46E8", Slot = "47")]
		public override float GetDamagePlayer()
		{
			return default(float);
		}

		[Token(Token = "0x6002222")]
		[Address(RVA = "0x10C46F0", Offset = "0x10C46F0", VA = "0x10C46F0", Slot = "49")]
		public override float GetTotalPredictedPlayerDamage()
		{
			return default(float);
		}

		[Token(Token = "0x6002223")]
		[Address(RVA = "0x10C4710", Offset = "0x10C4710", VA = "0x10C4710", Slot = "48")]
		public override float GetProjectileRadius()
		{
			return default(float);
		}

		[Token(Token = "0x6002224")]
		[Address(RVA = "0x10C472C", Offset = "0x10C472C", VA = "0x10C472C")]
		private void OnTriggerEnter(object sender, ColliderListenerEventArgs eventArgs)
		{
		}

		[Token(Token = "0x6002225")]
		[Address(RVA = "0x10C4DBC", Offset = "0x10C4DBC", VA = "0x10C4DBC")]
		public void OnTriggerExit(object sender, ColliderListenerEventArgs other)
		{
		}

		[Token(Token = "0x6002226")]
		[Address(RVA = "0x10C5344", Offset = "0x10C5344", VA = "0x10C5344", Slot = "50")]
		public override ImpactTypes ImpactType()
		{
			return default(ImpactTypes);
		}

		[Token(Token = "0x6002227")]
		[Address(RVA = "0x10C534C", Offset = "0x10C534C", VA = "0x10C534C", Slot = "57")]
		public string[] AirSounds()
		{
			return null;
		}

		[Token(Token = "0x6002228")]
		[Address(RVA = "0x10C5368", Offset = "0x10C5368", VA = "0x10C5368", Slot = "51")]
		public override void TriggerOnDestroy(Vector3 position)
		{
		}

		[Token(Token = "0x6002229")]
		[Address(RVA = "0x10C55AC", Offset = "0x10C55AC", VA = "0x10C55AC", Slot = "53")]
		public override void ClearEventhandlers()
		{
		}

		[Token(Token = "0x600222A")]
		[Address(RVA = "0x10C55F4", Offset = "0x10C55F4", VA = "0x10C55F4", Slot = "58")]
		public DamageOverTimeSettings DamageOverTimeSettings()
		{
			return null;
		}

		[Token(Token = "0x600222B")]
		[Address(RVA = "0x10C5610", Offset = "0x10C5610", VA = "0x10C5610", Slot = "65")]
		public void UpdateTimableVisuals(float elapsedTime)
		{
		}

		[Token(Token = "0x600222C")]
		[Address(RVA = "0x10C5614", Offset = "0x10C5614", VA = "0x10C5614", Slot = "66")]
		public void TimerDone()
		{
		}

		[Token(Token = "0x600222D")]
		[Address(RVA = "0x10C536C", Offset = "0x10C536C", VA = "0x10C536C")]
		private void OnEndAreOfEffect()
		{
		}

		[Token(Token = "0x600222E")]
		[Address(RVA = "0x10C56D4", Offset = "0x10C56D4", VA = "0x10C56D4", Slot = "67")]
		public float GetDuration()
		{
			return default(float);
		}

		[Token(Token = "0x600222F")]
		[Address(RVA = "0x10C5718", Offset = "0x10C5718", VA = "0x10C5718", Slot = "69")]
		public void OnActivation(int playerNetworkId, float timeStamp, int tetherNetworkId = 0, float chargeAmount = 0f)
		{
		}

		[Token(Token = "0x6002230")]
		[Address(RVA = "0x10C571C", Offset = "0x10C571C", VA = "0x10C571C", Slot = "70")]
		public void TimerAborted(float timeStamp)
		{
		}
	}
	[Token(Token = "0x200078B")]
	[CreateAssetMenu(menuName = "Settings/Projectile/AreaOffEffectProjectileSetting")]
	public class AreaOffEffectProjectileSettings : BaseProjectileSettings
	{
		[Token(Token = "0x400321D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Projectile")]
		public ProjectileReference reference;

		[Token(Token = "0x400321E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float health;

		[Token(Token = "0x400321F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float areaOfEffectDuration;

		[Token(Token = "0x4003220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float healthCharged;

		[Token(Token = "0x4003221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float areaOfEffectDurationCharged;

		[Token(Token = "0x4003222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Audio")]
		public string[] projectileAirSound;

		[Token(Token = "0x4003223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float soundDistanceThreshold;

		[Token(Token = "0x4003224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ImpactSettings projectileImpactSettings;

		[Token(Token = "0x4003225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public DamageOverTimeSettings damageOverTimeSettings;

		[Token(Token = "0x4003226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float colliderRadius;

		[Token(Token = "0x6002231")]
		[Address(RVA = "0x10C5720", Offset = "0x10C5720", VA = "0x10C5720", Slot = "4")]
		public override float GetTotalPredictedDamagePlayer()
		{
			return default(float);
		}

		[Token(Token = "0x6002232")]
		[Address(RVA = "0x10C5744", Offset = "0x10C5744", VA = "0x10C5744")]
		public AreaOffEffectProjectileSettings()
		{
		}
	}
	[Token(Token = "0x200078C")]
	public class BarrierProjectileReference : ProjectileReference
	{
		[Token(Token = "0x4003227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Renderer healthBar;

		[Token(Token = "0x4003228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Renderer forceFieldRenderer;

		[Token(Token = "0x6002233")]
		[Address(RVA = "0x10C5804", Offset = "0x10C5804", VA = "0x10C5804")]
		public BarrierProjectileReference()
		{
		}
	}
	[Token(Token = "0x200078D")]
	[CreateAssetMenu(fileName = "ProjectileSettings", menuName = "Settings/Projectile/BarrierSourceSettings")]
	public class BarrierSourceSettings : BaseProjectileSettings
	{
		[Token(Token = "0x4003229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ForceFieldSettings forceFieldSettings;

		[Token(Token = "0x400322A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 colliderCenter;

		[Token(Token = "0x400322B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 colliderSize;

		[Token(Token = "0x400322C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ImpactSettings impactSettings;

		[Token(Token = "0x6002234")]
		[Address(RVA = "0x10C5814", Offset = "0x10C5814", VA = "0x10C5814", Slot = "4")]
		public override float GetTotalPredictedDamagePlayer()
		{
			return default(float);
		}

		[Token(Token = "0x6002235")]
		[Address(RVA = "0x10C5854", Offset = "0x10C5854", VA = "0x10C5854")]
		public BarrierSourceSettings()
		{
		}
	}
	[Token(Token = "0x200078E")]
	public abstract class BaseProjectileSettings : ScriptableObject
	{
		[Token(Token = "0x400322D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public int poolToken;

		[Token(Token = "0x400322E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string projectileRadius;

		[Token(Token = "0x6002236")]
		public abstract float GetTotalPredictedDamagePlayer();

		[Token(Token = "0x6002237")]
		[Address(RVA = "0x10C57FC", Offset = "0x10C57FC", VA = "0x10C57FC")]
		protected BaseProjectileSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200078F")]
	public class BaseProjectileSettingsSet
	{
		[Token(Token = "0x400322F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public string name;

		[Token(Token = "0x4003230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BaseProjectileSettings[] baseProjectileSettings;

		[Token(Token = "0x6002238")]
		[Address(RVA = "0x10C585C", Offset = "0x10C585C", VA = "0x10C585C")]
		public BaseProjectileSettingsSet()
		{
		}
	}
	[Token(Token = "0x2000790")]
	[CreateAssetMenu(fileName = "BulletLauncherProjectileSettings", menuName = "Projectile/BulletLauncherToolSetting")]
	public class BulletLauncherProjectileSettings : CurveProjectileSettings
	{
		[Token(Token = "0x4003231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 gravityDirection;

		[Token(Token = "0x4003232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector3 gravityDirectionCharged;

		[Token(Token = "0x4003233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Vector3 gravityDirectionBowPullback;

		[Token(Token = "0x6002239")]
		[Address(RVA = "0x10C5864", Offset = "0x10C5864", VA = "0x10C5864")]
		public BulletLauncherProjectileSettings()
		{
		}
	}
	[Token(Token = "0x2000791")]
	public struct BounceProjectileData
	{
		[Token(Token = "0x4003234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Transform colliderTransform;

		[Token(Token = "0x4003235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Transform visualTransform;

		[Token(Token = "0x4003236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly float speed;

		[Token(Token = "0x4003237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly Vector3 startPostion;

		[Token(Token = "0x4003238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly float spawnTime;

		[Token(Token = "0x4003239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly Projectile projectile;

		[Token(Token = "0x400323A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly float delayFactor;

		[Token(Token = "0x400323B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public readonly float minVelocityThreshold;

		[Token(Token = "0x400323C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly float maxVelocityThreshold;

		[Token(Token = "0x400323D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly Vector3[] impactPoints;

		[Token(Token = "0x400323E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly float[] distanceBetweenPoints;

		[Token(Token = "0x400323F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool[] bounceImpactTriggered;

		[Token(Token = "0x4003240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BounceProjectileSetting projectileSettings;

		[Token(Token = "0x600223A")]
		[Address(RVA = "0x10C592C", Offset = "0x10C592C", VA = "0x10C592C")]
		public BounceProjectileData(Transform colliderTransform, Transform visualTransform, float speed, Vector3 startPostion, float spawnTime, Projectile projectile, float delayFactor, float minVelocityThreshold, float maxVelocityThreshold, Vector3[] impactPoints, float[] distanceBetweenPoints, bool[] bounceImpactTriggered, BounceProjectileSetting projectileSettings)
		{
		}
	}
	[Token(Token = "0x2000792")]
	public class BounceProjectileMovementUtility
	{
		[Token(Token = "0x600223B")]
		[Address(RVA = "0x10C5954", Offset = "0x10C5954", VA = "0x10C5954")]
		public Vector3 GetWorldPositionAtTime(float time, BounceProjectileData projectileData)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600223C")]
		[Address(RVA = "0x10C5ABC", Offset = "0x10C5ABC", VA = "0x10C5ABC")]
		public float GetDistanceTraveledAtTime(float time, BounceProjectileData projectileData)
		{
			return default(float);
		}

		[Token(Token = "0x600223D")]
		[Address(RVA = "0x10C5B14", Offset = "0x10C5B14", VA = "0x10C5B14")]
		public BounceProjectileMovementUtility()
		{
		}
	}
	[Token(Token = "0x2000793")]
	public class BounceProjectileHandlerData
	{
		[Token(Token = "0x4003241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<BounceProjectileData> projectiles;

		[Token(Token = "0x600223E")]
		[Address(RVA = "0x10C5B1C", Offset = "0x10C5B1C", VA = "0x10C5B1C")]
		public BounceProjectileHandlerData()
		{
		}
	}
	[Token(Token = "0x2000794")]
	public class BounceProjectileHandler : ThreatHandler, ITickable, IFixedTickable
	{
		[Token(Token = "0x4003242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly BounceProjectileHandlerData projectileHandlerData;

		[Token(Token = "0x4003243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4003244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly DeterministicRandom deterministicRandom;

		[Token(Token = "0x4003245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly BounceProjectileMovementUtility movementUtility;

		[Token(Token = "0x4003246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4003247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly OwnershipHelper ownershipHelper;

		[Token(Token = "0x4003248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4003249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x400324A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<Projectile> projectiles;

		[Token(Token = "0x600223F")]
		[Address(RVA = "0x10C5B9C", Offset = "0x10C5B9C", VA = "0x10C5B9C")]
		public BounceProjectileHandler(BounceProjectileHandlerData projectileData, IRoomTimeProvider roomTimeProvider, GameData gameData, DeterministicRandom deterministicRandom, FactoryData factoryData, BounceProjectileMovementUtility movementUtility, IgnisSoundTriggerData ignisSoundTriggerData, OwnershipHelper ownershipHelper, MessageSender messageSender, GameMessageFactory gameMessageFactory, ImpactHandlerData impactHandlerData)
		{
		}

		[Token(Token = "0x6002240")]
		[Address(RVA = "0x10C5D24", Offset = "0x10C5D24", VA = "0x10C5D24", Slot = "5")]
		public void FixedTick()
		{
		}

		[Token(Token = "0x6002241")]
		[Address(RVA = "0x10C66EC", Offset = "0x10C66EC", VA = "0x10C66EC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002242")]
		[Address(RVA = "0x10C69D4", Offset = "0x10C69D4", VA = "0x10C69D4")]
		public List<Projectile> OnBounceProjectileToolTrigger(BounceProjectileSetting projectileSettings, in ProjectileMessageData messageData, in ProjectileSourceData sourceData)
		{
			return null;
		}

		[Token(Token = "0x6002243")]
		[Address(RVA = "0x10C76D8", Offset = "0x10C76D8", VA = "0x10C76D8")]
		private static void DetermineImpactPoints(Vector3[] impactPoints, Vector3 rayStartPosition, Vector3 direction, BotUtils.ThreatRay botThreatRay, float[] distanceBetweenPoints)
		{
		}
	}
	[Token(Token = "0x2000796")]
	public class BoxColliderReference : MonoBehaviour, IImpactableReference
	{
		[Token(Token = "0x400324E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TriggerColliderType colliderType;

		[Token(Token = "0x400324F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform transformReference;

		[Token(Token = "0x4003250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BoxCollider boxCollider;

		[Token(Token = "0x4003251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IImpactable impactable;

		[Token(Token = "0x4003252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ColliderListener colliderListener;

		[Token(Token = "0x6002248")]
		[Address(RVA = "0x10C7AD0", Offset = "0x10C7AD0", VA = "0x10C7AD0", Slot = "4")]
		public TriggerColliderType TriggerColliderType()
		{
			return default(TriggerColliderType);
		}

		[Token(Token = "0x6002249")]
		[Address(RVA = "0x10C7AD8", Offset = "0x10C7AD8", VA = "0x10C7AD8", Slot = "5")]
		public IImpactable Impactable()
		{
			return null;
		}

		[Token(Token = "0x600224A")]
		[Address(RVA = "0x10C7AE0", Offset = "0x10C7AE0", VA = "0x10C7AE0")]
		public BoxColliderReference()
		{
		}
	}
	[Token(Token = "0x2000797")]
	public class BulletProjectile : Projectile, IBallistics
	{
		[Token(Token = "0x4003253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private BulletProjectileSettings projectileSettings;

		[Token(Token = "0x4003254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private ProjectileCommon projectileCommon;

		[Token(Token = "0x1700016D")]
		public SphereColliderReference SphereColliderReference
		{
			[Token(Token = "0x600224C")]
			[Address(RVA = "0x10C7AF0", Offset = "0x10C7AF0", VA = "0x10C7AF0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600224D")]
			[Address(RVA = "0x10C7AF8", Offset = "0x10C7AF8", VA = "0x10C7AF8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600224B")]
		[Address(RVA = "0x10C7AE8", Offset = "0x10C7AE8", VA = "0x10C7AE8")]
		public BulletProjectile()
		{
		}

		[Token(Token = "0x600224E")]
		[Address(RVA = "0x10C7B00", Offset = "0x10C7B00", VA = "0x10C7B00")]
		public void Initialize(float spawnTime, ProjectileReference reference, SphereColliderReference sphereColliderReference, int projectileNetworkId, BulletProjectileSettings settings, int projectileGroupId, int instigator, ToolName toolSpawnedFrom, float spawnedChargeAmount, float spawnedBowPullbackAmount, int tetherId, ProjectileCommon common)
		{
		}

		[Token(Token = "0x600224F")]
		[Address(RVA = "0x10C7B94", Offset = "0x10C7B94", VA = "0x10C7B94", Slot = "46")]
		public override float GetDamageProjectile()
		{
			return default(float);
		}

		[Token(Token = "0x6002250")]
		[Address(RVA = "0x10C7B9C", Offset = "0x10C7B9C", VA = "0x10C7B9C", Slot = "47")]
		public override float GetDamagePlayer()
		{
			return default(float);
		}

		[Token(Token = "0x6002251")]
		[Address(RVA = "0x10C7BA4", Offset = "0x10C7BA4", VA = "0x10C7BA4", Slot = "48")]
		public override float GetProjectileRadius()
		{
			return default(float);
		}

		[Token(Token = "0x6002252")]
		[Address(RVA = "0x10C7BC0", Offset = "0x10C7BC0", VA = "0x10C7BC0", Slot = "57")]
		public string[] AirSounds()
		{
			return null;
		}

		[Token(Token = "0x6002253")]
		[Address(RVA = "0x10C7BDC", Offset = "0x10C7BDC", VA = "0x10C7BDC", Slot = "51")]
		public override void TriggerOnDestroy(Vector3 position)
		{
		}

		[Token(Token = "0x6002254")]
		[Address(RVA = "0x10C7BE0", Offset = "0x10C7BE0", VA = "0x10C7BE0", Slot = "53")]
		public override void ClearEventhandlers()
		{
		}
	}
	[Token(Token = "0x2000798")]
	[CreateAssetMenu(fileName = "ProjectileSettings", menuName = "Settings/Projectile/BulletProjectileSettings")]
	public class BulletProjectileSettings : BaseProjectileSettings
	{
		[Token(Token = "0x4003256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Projectile")]
		public ProjectileReference reference;

		[Token(Token = "0x4003257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ProjectileCommon commonData;

		[Token(Token = "0x4003258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ProjectileCommon commonDataCharged;

		[Token(Token = "0x4003259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ProjectileCommon commonDataBowPullback;

		[Token(Token = "0x400325A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Audio")]
		public string[] projectileAirSound;

		[Token(Token = "0x400325B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float soundDistanceThreshold;

		[Token(Token = "0x400325C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public ImpactSettings projectileImpactSettings;

		[Token(Token = "0x400325D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float colliderRadius;

		[Token(Token = "0x6002255")]
		[Address(RVA = "0x10C7BE4", Offset = "0x10C7BE4", VA = "0x10C7BE4", Slot = "4")]
		public override float GetTotalPredictedDamagePlayer()
		{
			return default(float);
		}

		[Token(Token = "0x6002256")]
		[Address(RVA = "0x10C7BEC", Offset = "0x10C7BEC", VA = "0x10C7BEC")]
		public BulletProjectileSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000799")]
	public struct ProjectileCommon
	{
		[Token(Token = "0x400325E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float health;

		[Token(Token = "0x400325F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float projectileDamage;

		[Token(Token = "0x4003260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float playerDamage;

		[Token(Token = "0x6002257")]
		[Address(RVA = "0x10C7CB0", Offset = "0x10C7CB0", VA = "0x10C7CB0")]
		public ProjectileCommon(in ProjectileCommon common, in ProjectileCommon charged, float chargedAmount)
		{
		}
	}
	[Token(Token = "0x200079A")]
	public struct CurveProjectileData
	{
		[Token(Token = "0x4003261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Transform visualTransform;

		[Token(Token = "0x4003262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Transform colliderTransform;

		[Token(Token = "0x4003263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Vector3 startPosition;

		[Token(Token = "0x4003264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly float spawnTime;

		[Token(Token = "0x4003265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Vector3 gravity;

		[Token(Token = "0x4003266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly Projectile projectile;

		[Token(Token = "0x4003267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly float powerFactor;

		[Token(Token = "0x4003268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public readonly float gravityPowerFactor;

		[Token(Token = "0x4003269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly float minVelocityThreshold;

		[Token(Token = "0x400326A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public readonly float maxVelocityThreshold;

		[Token(Token = "0x400326B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly Vector3 direction;

		[Token(Token = "0x400326C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public readonly float speed;

		[Token(Token = "0x6002258")]
		[Address(RVA = "0x10C7CF8", Offset = "0x10C7CF8", VA = "0x10C7CF8")]
		public CurveProjectileData(Transform visualTransform, Transform colliderTransform, Vector3 startPosition, Vector3 gravity, float spawnTime, Projectile projectile, float powerFactor, float gravityPowerFactor, float minVelocityThreshold, float maxVelocityThreshold, Vector3 direction, float speed)
		{
		}
	}
	[Token(Token = "0x200079B")]
	public class CurveProjectileHandlerData
	{
		[Token(Token = "0x400326D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<CurveProjectileData> curveProjectileData;

		[Token(Token = "0x6002259")]
		[Address(RVA = "0x10C7D3C", Offset = "0x10C7D3C", VA = "0x10C7D3C")]
		public CurveProjectileHandlerData()
		{
		}
	}
	[Token(Token = "0x200079C")]
	public readonly struct CurveProjectileChargeData
	{
		[Token(Token = "0x400326E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly float curveForce;

		[Token(Token = "0x400326F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly float curveForceTimePower;

		[Token(Token = "0x4003270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly float limitForwardForceGreaterThanDotAngle;

		[Token(Token = "0x600225A")]
		[Address(RVA = "0x10C7DBC", Offset = "0x10C7DBC", VA = "0x10C7DBC")]
		public CurveProjectileChargeData(float curveForce, float curveForceTimePower, float limitForwardForceGreaterThanDotAngle)
		{
		}
	}
	[Token(Token = "0x200079D")]
	public class CurveProjectileMovementUtility
	{
		[Token(Token = "0x600225B")]
		[Address(RVA = "0x10C7DC8", Offset = "0x10C7DC8", VA = "0x10C7DC8")]
		public Vector3 GetWorldPositionAtTime(float time, CurveProjectileData projectileData)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600225C")]
		[Address(RVA = "0x10C7E68", Offset = "0x10C7E68", VA = "0x10C7E68")]
		public CurveProjectileMovementUtility()
		{
		}
	}
	[Token(Token = "0x200079E")]
	public class CurveProjectileHandler : ThreatHandler, ITickable, IFixedTickable
	{
		[Token(Token = "0x4003271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4003272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly GameData gameData;

		[Token(Token = "0x4003273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly DeterministicRandom deterministicRandom;

		[Token(Token = "0x4003274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly FactoryData factoryData;

		[Token(Token = "0x4003275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly CurveProjectileHandlerData curveProjectileHandlerData;

		[Token(Token = "0x4003276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly CurveProjectileMovementUtility movementUtility;

		[Token(Token = "0x4003277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4003278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly List<Projectile> projectiles;

		[Token(Token = "0x600225D")]
		[Address(RVA = "0x10C7E70", Offset = "0x10C7E70", VA = "0x10C7E70")]
		public CurveProjectileHandler(IRoomTimeProvider roomTimeProvider, GameData gameData, DeterministicRandom deterministicRandom, FactoryData factoryData, CurveProjectileHandlerData cruveProjectileHandlerData, CurveProjectileMovementUtility movementUtility, IgnisSoundTriggerData ignisSoundTriggerData, ImpactHandlerData impactHandlerData)
		{
		}

		[Token(Token = "0x600225E")]
		[Address(RVA = "0x10C7F54", Offset = "0x10C7F54", VA = "0x10C7F54", Slot = "5")]
		public void FixedTick()
		{
		}

		[Token(Token = "0x600225F")]
		[Address(RVA = "0x10C84FC", Offset = "0x10C84FC", VA = "0x10C84FC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002260")]
		[Address(RVA = "0x10C82BC", Offset = "0x10C82BC", VA = "0x10C82BC")]
		private void UpdatePredictionRay(CurveProjectileData projectileData, float roomTime)
		{
		}

		[Token(Token = "0x6002261")]
		[Address(RVA = "0x10C8800", Offset = "0x10C8800", VA = "0x10C8800")]
		public List<Projectile> OnCurveProjectileToolTrigger(CurveProjectileSettings curveProjectileSettings, in ProjectileMessageData messageData, in ProjectileSourceData sourceData, Vector3 gravityDirection, float gravityForce)
		{
			return null;
		}

		[Token(Token = "0x6002262")]
		[Address(RVA = "0x10C8D3C", Offset = "0x10C8D3C", VA = "0x10C8D3C")]
		private CurveProjectileChargeData GetChargedCurveData(CurveProjectileSettings settings, float chargeAmount)
		{
			return default(CurveProjectileChargeData);
		}

		[Token(Token = "0x6002263")]
		[Address(RVA = "0x10C8D90", Offset = "0x10C8D90", VA = "0x10C8D90")]
		public CurveProjectileChargeData GetBowPullbackCurvedData(CurveProjectileSettings settings, float bowPullbackAmount)
		{
			return default(CurveProjectileChargeData);
		}
	}
	[Token(Token = "0x20007A0")]
	[CreateAssetMenu(menuName = "Projectile/CurveProjectileSettings", fileName = "CurveProjectileSettings")]
	public class CurveProjectileSettings : ProjectileSettings
	{
		[Token(Token = "0x400327C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ProjectileVelocitySettings velocitySettings;

		[Token(Token = "0x400327D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float curveForce;

		[Token(Token = "0x400327E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 4f)]
		public float curveForceTimePower;

		[Token(Token = "0x400327F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool limitForwardGravityForce;

		[Token(Token = "0x4003280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(-1f, 1f)]
		public float limitForwardForceGreaterThanDotAngle;

		[Token(Token = "0x4003281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Charged")]
		public float curveForceCharged;

		[Token(Token = "0x4003282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 4f)]
		public float curveForceTimePowerCharged;

		[Token(Token = "0x4003283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(-1f, 1f)]
		public float limitForwardForceGreaterThanDotAngleCharged;

		[Token(Token = "0x4003284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Bow Pullback")]
		public float curveForceBowPullback;

		[Token(Token = "0x4003285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 4f)]
		public float curveForceTimePowerBowPullback;

		[Token(Token = "0x4003286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(-1f, 1f)]
		public float limitForwardForceGreaterThanDotAngleBowPullback;

		[Token(Token = "0x6002268")]
		[Address(RVA = "0x10C5908", Offset = "0x10C5908", VA = "0x10C5908")]
		public CurveProjectileSettings()
		{
		}
	}
	[Token(Token = "0x20007A1")]
	[CreateAssetMenu(fileName = "CurveToolSettings", menuName = "Tools/CurveToolSettings", order = 1)]
	public class CurveToolSettings : ToolSetting
	{
		[Token(Token = "0x4003287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public FireableSettings fireable;

		[Token(Token = "0x4003288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public CurveProjectileSettings projectile;

		[Token(Token = "0x6002269")]
		[Address(RVA = "0x10C8E98", Offset = "0x10C8E98", VA = "0x10C8E98")]
		public CurveToolSettings()
		{
		}
	}
	[Token(Token = "0x20007A2")]
	public class DoubleBoxColliderReference : BoxColliderReference
	{
		[Token(Token = "0x4003289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BoxCollider boxColliderTwo;

		[Token(Token = "0x600226A")]
		[Address(RVA = "0x10C8EA0", Offset = "0x10C8EA0", VA = "0x10C8EA0")]
		public DoubleBoxColliderReference()
		{
		}
	}
	[Token(Token = "0x20007A3")]
	public class ExplodeOnImpactProjectileFactory : IBallisticProjectileFactory, IProjectileFactory
	{
		[Token(Token = "0x400328A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ExplodeOnImpactProjectileSettings projectileSettings;

		[Token(Token = "0x400328B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ComponentPrefabPool<ProjectileReference> referencePool;

		[Token(Token = "0x400328C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ComponentPrefabPool<SphereColliderReference> colliderReferencePool;

		[Token(Token = "0x400328D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly CSharpObjectPool<ExplodeOnImpactProjectile> projectilePool;

		[Token(Token = "0x400328E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly int projectileGroupId;

		[Token(Token = "0x400328F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly BallisticAirHandlerData ballisticAirData;

		[Token(Token = "0x4003290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly EventTriggerModule eventTriggerModule;

		[Token(Token = "0x4003291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<IEventTriggerEffects> eventTriggerEffectsList;

		[Token(Token = "0x600226B")]
		[Address(RVA = "0x10C8EA8", Offset = "0x10C8EA8", VA = "0x10C8EA8")]
		public ExplodeOnImpactProjectileFactory(ExplodeOnImpactProjectileSettings projectileSettings, ComponentPrefabPool<ProjectileReference> referencePool, ComponentPrefabPool<SphereColliderReference> colliderReferencePool, CSharpObjectPool<ExplodeOnImpactProjectile> projectilePool, int projectileGroupId, BallisticAirHandlerData ballisticAirData, EventTriggerModule eventTriggerModule, List<IEventTriggerEffects> eventTriggerEffectsList)
		{
		}

		[Token(Token = "0x600226C")]
		[Address(RVA = "0x10C8F14", Offset = "0x10C8F14", VA = "0x10C8F14", Slot = "4")]
		public Projectile Create(float spawnTime, Vector3 position, Quaternion rotation, int projectileId, int collisionLayer, int playerInstigator, ToolName toolSpawnedFrom, float chargeAmount, float bowPullbackAmount, int tetherId)
		{
			return null;
		}

		[Token(Token = "0x600226D")]
		[Address(RVA = "0x10C92B0", Offset = "0x10C92B0", VA = "0x10C92B0", Slot = "5")]
		public void Recycle(Projectile projectile)
		{
		}

		[Token(Token = "0x600226E")]
		[Address(RVA = "0x10C9354", Offset = "0x10C9354", VA = "0x10C9354", Slot = "6")]
		public void RecycleGameObjects(Projectile projectile)
		{
		}
	}
	[Token(Token = "0x20007A4")]
	public class ExplodeOnImpactProjectile : Projectile, IBallistics, ISource, ITransformRoots
	{
		[Token(Token = "0x4003292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private ExplodeOnImpactProjectileSettings projectileSettings;

		[Token(Token = "0x4003293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly EventHandler<ColliderListenerEventArgs> onTriggerEnter;

		[Token(Token = "0x4003294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly EventHandler<ColliderListenerEventArgs> onTriggerExit;

		[Token(Token = "0x4003295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private EventTriggerModule eventTriggerModule;

		[Token(Token = "0x4003296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private ProjectileCommon projectileCommon;

		[Token(Token = "0x1700016E")]
		public SphereColliderReference SphereColliderReference
		{
			[Token(Token = "0x600226F")]
			[Address(RVA = "0x10C93FC", Offset = "0x10C93FC", VA = "0x10C93FC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002270")]
			[Address(RVA = "0x10C9404", Offset = "0x10C9404", VA = "0x10C9404")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700016F")]
		public ProjectileSettings ProjectileSettings
		{
			[Token(Token = "0x6002273")]
			[Address(RVA = "0x10C9414", Offset = "0x10C9414", VA = "0x10C9414", Slot = "59")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002274")]
			[Address(RVA = "0x10C941C", Offset = "0x10C941C", VA = "0x10C941C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000170")]
		public List<IEventTriggerEffects> Effects
		{
			[Token(Token = "0x6002275")]
			[Address(RVA = "0x10C9424", Offset = "0x10C9424", VA = "0x10C9424", Slot = "63")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002276")]
			[Address(RVA = "0x10C942C", Offset = "0x10C942C", VA = "0x10C942C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002271")]
		[Address(RVA = "0x10C940C", Offset = "0x10C940C", VA = "0x10C940C")]
		public ExplodeOnImpactProjectile()
		{
		}

		[Token(Token = "0x6002272")]
		[Address(RVA = "0x10C9200", Offset = "0x10C9200", VA = "0x10C9200")]
		public void Initialize(float spawnTime, ProjectileReference reference, SphereColliderReference colliderReference, int projectileNetworkId, ExplodeOnImpactProjectileSettings settings, int projectileGroupId, int playerInstigator, ToolName toolSpawnedFrom, float chargeAmount, float bowPullbackAmount, int tetherId, EventTriggerModule eventTriggerModule, List<IEventTriggerEffects> effects, ProjectileCommon common)
		{
		}

		[Token(Token = "0x6002277")]
		[Address(RVA = "0x10C9434", Offset = "0x10C9434", VA = "0x10C9434", Slot = "46")]
		public override float GetDamageProjectile()
		{
			return default(float);
		}

		[Token(Token = "0x6002278")]
		[Address(RVA = "0x10C943C", Offset = "0x10C943C", VA = "0x10C943C", Slot = "47")]
		public override float GetDamagePlayer()
		{
			return default(float);
		}

		[Token(Token = "0x6002279")]
		[Address(RVA = "0x10C9444", Offset = "0x10C9444", VA = "0x10C9444", Slot = "48")]
		public override float GetProjectileRadius()
		{
			return default(float);
		}

		[Token(Token = "0x600227A")]
		[Address(RVA = "0x10C9460", Offset = "0x10C9460", VA = "0x10C9460", Slot = "57")]
		public string[] AirSounds()
		{
			return null;
		}

		[Token(Token = "0x600227B")]
		[Address(RVA = "0x10C947C", Offset = "0x10C947C", VA = "0x10C947C", Slot = "51")]
		public override void TriggerOnDestroy(Vector3 position)
		{
		}

		[Token(Token = "0x600227C")]
		[Address(RVA = "0x10C9568", Offset = "0x10C9568", VA = "0x10C9568", Slot = "53")]
		public override void ClearEventhandlers()
		{
		}
	}
	[Token(Token = "0x20007A5")]
	[CreateAssetMenu(fileName = "ProjectileSettings", menuName = "Settings/Projectile/SpawnOnImpactSettings")]
	public class ExplodeOnImpactProjectileSettings : BaseProjectileSettings
	{
		[Token(Token = "0x400329A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Projectile")]
		public ProjectileReference reference;

		[Token(Token = "0x400329B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleEffectReference trailEffect;

		[Token(Token = "0x400329C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ProjectileSettings projectileToSpawnSetting;

		[Token(Token = "0x400329D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<EventTriggerEffectSettings> effects;

		[Token(Token = "0x400329E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public ProjectileCommon commonData;

		[Token(Token = "0x400329F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public ProjectileCommon commonDataCharged;

		[Token(Token = "0x40032A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Audio")]
		public string[] projectileAirSound;

		[Token(Token = "0x40032A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float soundDistanceThreshold;

		[Token(Token = "0x40032A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ImpactSettings projectileImpactSettings;

		[Token(Token = "0x40032A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float colliderRadius;

		[Token(Token = "0x600227D")]
		[Address(RVA = "0x10C956C", Offset = "0x10C956C", VA = "0x10C956C", Slot = "4")]
		public override float GetTotalPredictedDamagePlayer()
		{
			return default(float);
		}

		[Token(Token = "0x600227E")]
		[Address(RVA = "0x10C95AC", Offset = "0x10C95AC", VA = "0x10C95AC")]
		public ExplodeOnImpactProjectileSettings()
		{
		}
	}
	[Token(Token = "0x20007A6")]
	public struct HelixProjectileData
	{
		[Token(Token = "0x40032A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Transform colliderTransform;

		[Token(Token = "0x40032A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Transform visualTransform;

		[Token(Token = "0x40032A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly float speed;

		[Token(Token = "0x40032A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly Vector3 startPostion;

		[Token(Token = "0x40032A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Vector3 direction;

		[Token(Token = "0x40032A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public readonly float spawnTime;

		[Token(Token = "0x40032AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly Projectile projectile;

		[Token(Token = "0x40032AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly float delayFactor;

		[Token(Token = "0x40032AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public readonly float minVelocityThreshold;

		[Token(Token = "0x40032AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly float maxVelocityThreshold;

		[Token(Token = "0x40032AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public readonly float rotationSpeed;

		[Token(Token = "0x40032AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly float rotationPower;

		[Token(Token = "0x40032B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public readonly float bellScale;

		[Token(Token = "0x40032B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly float bellWidth;

		[Token(Token = "0x40032B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public readonly float bellCenter;

		[Token(Token = "0x40032B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public readonly float basePower;

		[Token(Token = "0x40032B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public readonly float baseScale;

		[Token(Token = "0x40032B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public readonly float projectileSpinOffset;

		[Token(Token = "0x600227F")]
		[Address(RVA = "0x10C9670", Offset = "0x10C9670", VA = "0x10C9670")]
		public HelixProjectileData(Transform colliderTransform, Transform visualTransform, float speed, Vector3 startPostion, Vector3 direction, float spawnTime, Projectile projectile, float delayFactor, float minVelocityThreshold, float maxVelocityThreshold, float rotationSpeed, float rotationPower, float bellScale, float bellWidth, float bellCenter, float basePower, float baseScale, float projectileSpinOffset)
		{
		}
	}
	[Token(Token = "0x20007A7")]
	public class HelixProjectileMovementUtility
	{
		[Token(Token = "0x6002280")]
		[Address(RVA = "0x10C96D0", Offset = "0x10C96D0", VA = "0x10C96D0")]
		public Vector3 GetWorldPositionAtTime(float time, HelixProjectileData projectileData)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002281")]
		[Address(RVA = "0x10C985C", Offset = "0x10C985C", VA = "0x10C985C")]
		public HelixProjectileMovementUtility()
		{
		}
	}
	[Token(Token = "0x20007A8")]
	public class HelixProjectileHandlerData
	{
		[Token(Token = "0x40032B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<HelixProjectileData> projectiles;

		[Token(Token = "0x6002282")]
		[Address(RVA = "0x10C9864", Offset = "0x10C9864", VA = "0x10C9864")]
		public HelixProjectileHandlerData()
		{
		}
	}
	[Token(Token = "0x20007A9")]
	public readonly struct HelixCurveData
	{
		[Token(Token = "0x40032B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly float rotationSpeed;

		[Token(Token = "0x40032B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly float rotationPower;

		[Token(Token = "0x40032B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly float bellScale;

		[Token(Token = "0x40032BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly float bellWidth;

		[Token(Token = "0x40032BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly float bellCenter;

		[Token(Token = "0x40032BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly float basePower;

		[Token(Token = "0x40032BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float baseScale;

		[Token(Token = "0x6002283")]
		[Address(RVA = "0x10C98E4", Offset = "0x10C98E4", VA = "0x10C98E4")]
		public HelixCurveData(float rotationSpeed, float rotationPower, float bellScale, float bellWidth, float bellCenter, float basePower, float baseScale)
		{
		}
	}
	[Token(Token = "0x20007AA")]
	public class HelixProjectileHandler : ThreatHandler, ITickable, IFixedTickable
	{
		[Token(Token = "0x40032BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly HelixProjectileHandlerData projectileHandlerData;

		[Token(Token = "0x40032BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x40032C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly GameData gameData;

		[Token(Token = "0x40032C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly DeterministicRandom deterministicRandom;

		[Token(Token = "0x40032C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly FactoryData factoryData;

		[Token(Token = "0x40032C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly HelixProjectileMovementUtility movementUtility;

		[Token(Token = "0x40032C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x40032C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Projectile> projectiles;

		[Token(Token = "0x6002284")]
		[Address(RVA = "0x10C98F8", Offset = "0x10C98F8", VA = "0x10C98F8")]
		public HelixProjectileHandler(HelixProjectileHandlerData projectileData, IRoomTimeProvider roomTimeProvider, GameData gameData, DeterministicRandom deterministicRandom, FactoryData factoryData, HelixProjectileMovementUtility movementUtility, IgnisSoundTriggerData ignisSoundTriggerData, ImpactHandlerData impactHandlerData)
		{
		}

		[Token(Token = "0x6002285")]
		[Address(RVA = "0x10C99D8", Offset = "0x10C99D8", VA = "0x10C99D8", Slot = "5")]
		public void FixedTick()
		{
		}

		[Token(Token = "0x6002286")]
		[Address(RVA = "0x10C9FC0", Offset = "0x10C9FC0", VA = "0x10C9FC0", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002287")]
		[Address(RVA = "0x10C9D80", Offset = "0x10C9D80", VA = "0x10C9D80")]
		private void UpdatePredictionRays(HelixProjectileData helixProjectileData, float currentTime)
		{
		}

		[Token(Token = "0x6002288")]
		[Address(RVA = "0x10CA2AC", Offset = "0x10CA2AC", VA = "0x10CA2AC")]
		public List<Projectile> OnHelixProjectileToolTrigger(HelixProjectileSetting projectileSettings, in ProjectileMessageData messageData, in ProjectileSourceData sourceData)
		{
			return null;
		}

		[Token(Token = "0x6002289")]
		[Address(RVA = "0x10CA740", Offset = "0x10CA740", VA = "0x10CA740")]
		private HelixCurveData GetHelixCurveChargeData(HelixProjectileSetting setting, float chargeAmount)
		{
			return default(HelixCurveData);
		}

		[Token(Token = "0x600228A")]
		[Address(RVA = "0x10CA6A0", Offset = "0x10CA6A0", VA = "0x10CA6A0")]
		private HelixCurveData GetHelixCurveBowPullbackData(HelixProjectileSetting setting, float bowPullbackAmount)
		{
			return default(HelixCurveData);
		}
	}
	[Token(Token = "0x20007AC")]
	public interface IProjectileSpawner
	{
		[Token(Token = "0x600228F")]
		int GetNumProjectilesToSpawn();

		[Token(Token = "0x6002290")]
		float GetTotalPredictedPlayerDamage();
	}
	[Token(Token = "0x20007AD")]
	public class LaserProjectileReference : ProjectileReference
	{
		[Token(Token = "0x40032C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LineRenderer beam;

		[Token(Token = "0x40032CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform continuesSoundTransform;

		[Token(Token = "0x40032CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform damageSoundTransform;

		[Token(Token = "0x6002291")]
		[Address(RVA = "0x10CA894", Offset = "0x10CA894", VA = "0x10CA894")]
		public LaserProjectileReference()
		{
		}
	}
	[Token(Token = "0x20007AE")]
	[CreateAssetMenu(fileName = "ProjectileSettings", menuName = "Settings/Projectile/LaserSourceSettings")]
	public class LaserSourceSettings : BaseProjectileSettings
	{
		[Token(Token = "0x40032CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LaserProjectileReference sourceReference;

		[Token(Token = "0x40032CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float timeToLive;

		[Token(Token = "0x40032CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float warmUp;

		[Token(Token = "0x40032CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float laserBeamRadius;

		[Token(Token = "0x40032D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float timeToLiveCharged;

		[Token(Token = "0x40032D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float warmUpCharged;

		[Token(Token = "0x40032D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float laserBeamRadiusCharged;

		[Token(Token = "0x40032D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve warmUpAnimationCurve;

		[Token(Token = "0x40032D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public DamageOverTimeSettings damageOverTime;

		[Token(Token = "0x40032D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float projectileHealth;

		[Token(Token = "0x40032D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ImpactSettings impactSettings;

		[Token(Token = "0x40032D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Audio")]
		public string[] deployedContinousSound;

		[Token(Token = "0x40032D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string[] deploymendDespawnSound;

		[Token(Token = "0x6002292")]
		[Address(RVA = "0x10CA89C", Offset = "0x10CA89C", VA = "0x10CA89C", Slot = "4")]
		public override float GetTotalPredictedDamagePlayer()
		{
			return default(float);
		}

		[Token(Token = "0x6002293")]
		[Address(RVA = "0x10CA8C0", Offset = "0x10CA8C0", VA = "0x10CA8C0")]
		public LaserSourceSettings()
		{
		}
	}
	[Token(Token = "0x20007AF")]
	public readonly struct LaserSourceCharge
	{
		[Token(Token = "0x40032D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly float timeToLive;

		[Token(Token = "0x40032DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly float warmUp;

		[Token(Token = "0x40032DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly float laserBeamRadius;

		[Token(Token = "0x6002294")]
		[Address(RVA = "0x10CA99C", Offset = "0x10CA99C", VA = "0x10CA99C")]
		public LaserSourceCharge(LaserSourceSettings settings, float chargeAmount)
		{
		}
	}
	[Token(Token = "0x20007B0")]
	public enum ProjectileState
	{
		[Token(Token = "0x40032DD")]
		Traveling,
		[Token(Token = "0x40032DE")]
		Destroyed
	}
	[Token(Token = "0x20007B1")]
	public abstract class Projectile : IThreat, IImpactable, ITransformRoots, IIdentification, IHealth, IAffectsHUD, IPooledObject
	{
		[Token(Token = "0x40032DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float spawnTime;

		[Token(Token = "0x40032E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected ProjectileState state;

		[Token(Token = "0x40032E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float destroyedAtTimestamp;

		[Token(Token = "0x40032E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ProjectileReference projectileReference;

		[Token(Token = "0x40032E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected int projectileNetworkId;

		[Token(Token = "0x40032E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected float currentHealth;

		[Token(Token = "0x40032E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ImpactSettings impactSettings;

		[Token(Token = "0x40032E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int projectileGroupId;

		[Token(Token = "0x40032E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BotUtils.ThreatRay ray;

		[Token(Token = "0x17000171")]
		public HashSet<int> CollidingIds
		{
			[Token(Token = "0x6002295")]
			[Address(RVA = "0x10CA9F4", Offset = "0x10CA9F4", VA = "0x10CA9F4", Slot = "18")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000172")]
		public float LastTriggeredEffectTimeStamp
		{
			[Token(Token = "0x6002296")]
			[Address(RVA = "0x10CA9FC", Offset = "0x10CA9FC", VA = "0x10CA9FC", Slot = "19")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002297")]
			[Address(RVA = "0x10CAA04", Offset = "0x10CAA04", VA = "0x10CAA04", Slot = "20")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000173")]
		public bool CanCollideWithHands
		{
			[Token(Token = "0x6002298")]
			[Address(RVA = "0x10CAA0C", Offset = "0x10CAA0C", VA = "0x10CAA0C", Slot = "21")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002299")]
			[Address(RVA = "0x10CAA14", Offset = "0x10CAA14", VA = "0x10CAA14", Slot = "22")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000174")]
		public bool UseCollidingObjectAsCenterOfHitForImpact
		{
			[Token(Token = "0x600229A")]
			[Address(RVA = "0x10CAA20", Offset = "0x10CAA20", VA = "0x10CAA20", Slot = "23")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600229B")]
			[Address(RVA = "0x10CAA28", Offset = "0x10CAA28", VA = "0x10CAA28", Slot = "24")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000175")]
		public float ActiveDotDamage
		{
			[Token(Token = "0x600229C")]
			[Address(RVA = "0x10CAA34", Offset = "0x10CAA34", VA = "0x10CAA34", Slot = "33")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600229D")]
			[Address(RVA = "0x10CAA3C", Offset = "0x10CAA3C", VA = "0x10CAA3C", Slot = "34")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000176")]
		public float ActiveDotDamageLagCompensation
		{
			[Token(Token = "0x600229E")]
			[Address(RVA = "0x10CAA44", Offset = "0x10CAA44", VA = "0x10CAA44", Slot = "35")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600229F")]
			[Address(RVA = "0x10CAA4C", Offset = "0x10CAA4C", VA = "0x10CAA4C", Slot = "36")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000177")]
		public int PlayerInstigator
		{
			[Token(Token = "0x60022A0")]
			[Address(RVA = "0x10CAA54", Offset = "0x10CAA54", VA = "0x10CAA54", Slot = "44")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60022A1")]
			[Address(RVA = "0x10CAA5C", Offset = "0x10CAA5C", VA = "0x10CAA5C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000178")]
		public ToolName ToolSource
		{
			[Token(Token = "0x60022A2")]
			[Address(RVA = "0x10CAA64", Offset = "0x10CAA64", VA = "0x10CAA64", Slot = "27")]
			[CompilerGenerated]
			get
			{
				return default(ToolName);
			}
			[Token(Token = "0x60022A3")]
			[Address(RVA = "0x10CAA6C", Offset = "0x10CAA6C", VA = "0x10CAA6C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000179")]
		public List<Transform> PoolReferences
		{
			[Token(Token = "0x60022A4")]
			[Address(RVA = "0x10CAA74", Offset = "0x10CAA74", VA = "0x10CAA74", Slot = "41")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017A")]
		public bool IsRemovedFromPool
		{
			[Token(Token = "0x60022A5")]
			[Address(RVA = "0x10CAA7C", Offset = "0x10CAA7C", VA = "0x10CAA7C", Slot = "42")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60022A6")]
			[Address(RVA = "0x10CAA84", Offset = "0x10CAA84", VA = "0x10CAA84", Slot = "43")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700017B")]
		public Transform PhysicsRootTransform
		{
			[Token(Token = "0x60022A7")]
			[Address(RVA = "0x10CAA90", Offset = "0x10CAA90", VA = "0x10CAA90", Slot = "25")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60022A8")]
			[Address(RVA = "0x10CAA98", Offset = "0x10CAA98", VA = "0x10CAA98")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700017C")]
		public Transform VisualRootTransform
		{
			[Token(Token = "0x60022A9")]
			[Address(RVA = "0x10CAAA0", Offset = "0x10CAAA0", VA = "0x10CAAA0", Slot = "26")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60022AA")]
			[Address(RVA = "0x10CAAA8", Offset = "0x10CAAA8", VA = "0x10CAAA8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700017D")]
		public int HitMask
		{
			[Token(Token = "0x60022AB")]
			[Address(RVA = "0x10CAAB0", Offset = "0x10CAAB0", VA = "0x10CAAB0", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60022AC")]
			[Address(RVA = "0x10CAAB8", Offset = "0x10CAAB8", VA = "0x10CAAB8", Slot = "5")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700017E")]
		public bool IsTool
		{
			[Token(Token = "0x60022AD")]
			[Address(RVA = "0x10CAAC0", Offset = "0x10CAAC0", VA = "0x10CAAC0", Slot = "45")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017F")]
		public float Speed
		{
			[Token(Token = "0x60022AE")]
			[Address(RVA = "0x10CAAC8", Offset = "0x10CAAC8", VA = "0x10CAAC8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60022AF")]
			[Address(RVA = "0x10CAAD0", Offset = "0x10CAAD0", VA = "0x10CAAD0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000180")]
		public float SpawnedChargeAmount
		{
			[Token(Token = "0x60022B0")]
			[Address(RVA = "0x10CAAD8", Offset = "0x10CAAD8", VA = "0x10CAAD8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60022B1")]
			[Address(RVA = "0x10CAAE0", Offset = "0x10CAAE0", VA = "0x10CAAE0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000181")]
		public float SpawnedBowPullbackAmount
		{
			[Token(Token = "0x60022B2")]
			[Address(RVA = "0x10CAAE8", Offset = "0x10CAAE8", VA = "0x10CAAE8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60022B3")]
			[Address(RVA = "0x10CAAF0", Offset = "0x10CAAF0", VA = "0x10CAAF0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000182")]
		public int SpawnedTetherId
		{
			[Token(Token = "0x60022B4")]
			[Address(RVA = "0x10CAAF8", Offset = "0x10CAAF8", VA = "0x10CAAF8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60022B5")]
			[Address(RVA = "0x10CAB00", Offset = "0x10CAB00", VA = "0x10CAB00")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000183")]
		public bool ShouldBounce
		{
			[Token(Token = "0x60022B6")]
			[Address(RVA = "0x10CAB08", Offset = "0x10CAB08", VA = "0x10CAB08")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60022B7")]
			[Address(RVA = "0x10CAB10", Offset = "0x10CAB10", VA = "0x10CAB10")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000184")]
		public VisorParticleEffectType VisorParticleEffectType
		{
			[Token(Token = "0x60022B8")]
			[Address(RVA = "0x10CAB1C", Offset = "0x10CAB1C", VA = "0x10CAB1C", Slot = "37")]
			[CompilerGenerated]
			get
			{
				return default(VisorParticleEffectType);
			}
			[Token(Token = "0x60022B9")]
			[Address(RVA = "0x10CAB24", Offset = "0x10CAB24", VA = "0x10CAB24", Slot = "38")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60022BA")]
		[Address(RVA = "0x10C4360", Offset = "0x10C4360", VA = "0x10C4360")]
		protected Projectile(int numberOfPoolReferences)
		{
		}

		[Token(Token = "0x60022BB")]
		[Address(RVA = "0x10C44F0", Offset = "0x10C44F0", VA = "0x10C44F0")]
		protected void Initialize(float spawnTime, ProjectileReference reference, Transform colliderTransform, int networkId, float health, ImpactSettings settings, int projectileGroupId, int instigator, ToolName toolSpawnedFrom, float spawnedChargeAmount, float spawnedBowPullbackAmount, int tetherId)
		{
		}

		[Token(Token = "0x60022BC")]
		[Address(RVA = "0x10CAB2C", Offset = "0x10CAB2C", VA = "0x10CAB2C")]
		public ProjectileReference ProjectileReference()
		{
			return null;
		}

		[Token(Token = "0x60022BD")]
		[Address(RVA = "0x10CAB34", Offset = "0x10CAB34", VA = "0x10CAB34")]
		public ProjectileState GetProjectileState()
		{
			return default(ProjectileState);
		}

		[Token(Token = "0x60022BE")]
		[Address(RVA = "0x10CAB3C", Offset = "0x10CAB3C", VA = "0x10CAB3C")]
		public void SetProjectileState(ProjectileState state)
		{
		}

		[Token(Token = "0x60022BF")]
		public abstract float GetDamageProjectile();

		[Token(Token = "0x60022C0")]
		public abstract float GetDamagePlayer();

		[Token(Token = "0x60022C1")]
		public abstract float GetProjectileRadius();

		[Token(Token = "0x60022C2")]
		[Address(RVA = "0x10CAB44", Offset = "0x10CAB44", VA = "0x10CAB44", Slot = "49")]
		public virtual float GetTotalPredictedPlayerDamage()
		{
			return default(float);
		}

		[Token(Token = "0x60022C3")]
		[Address(RVA = "0x10CAB54", Offset = "0x10CAB54", VA = "0x10CAB54", Slot = "17")]
		public ImpactSettings ImpactSettings()
		{
			return null;
		}

		[Token(Token = "0x60022C4")]
		[Address(RVA = "0x10CAB5C", Offset = "0x10CAB5C", VA = "0x10CAB5C", Slot = "6")]
		public int NetworkId()
		{
			return default(int);
		}

		[Token(Token = "0x60022C5")]
		[Address(RVA = "0x10CAB64", Offset = "0x10CAB64", VA = "0x10CAB64", Slot = "50")]
		public virtual ImpactTypes ImpactType()
		{
			return default(ImpactTypes);
		}

		[Token(Token = "0x60022C6")]
		[Address(RVA = "0x10CAB6C", Offset = "0x10CAB6C", VA = "0x10CAB6C", Slot = "8")]
		public PlayerImpactTypes PlayerImpactType()
		{
			return default(PlayerImpactTypes);
		}

		[Token(Token = "0x60022C7")]
		[Address(RVA = "0x10CAB74", Offset = "0x10CAB74", VA = "0x10CAB74")]
		public int ProjectileGroupId()
		{
			return default(int);
		}

		[Token(Token = "0x60022C8")]
		[Address(RVA = "0x10CAB7C", Offset = "0x10CAB7C", VA = "0x10CAB7C")]
		public void SetDestroyedAt(float timestamp)
		{
		}

		[Token(Token = "0x60022C9")]
		[Address(RVA = "0x10CAB84", Offset = "0x10CAB84", VA = "0x10CAB84")]
		public float GetDestroyedAt()
		{
			return default(float);
		}

		[Token(Token = "0x60022CA")]
		[Address(RVA = "0x10CAB8C", Offset = "0x10CAB8C", VA = "0x10CAB8C")]
		public float GetSpawnTime()
		{
			return default(float);
		}

		[Token(Token = "0x60022CB")]
		[Address(RVA = "0x10CAB94", Offset = "0x10CAB94", VA = "0x10CAB94", Slot = "13")]
		public float GetSpeed()
		{
			return default(float);
		}

		[Token(Token = "0x60022CC")]
		[Address(RVA = "0x10CAB9C", Offset = "0x10CAB9C", VA = "0x10CAB9C", Slot = "14")]
		public bool IsHeld()
		{
			return default(bool);
		}

		[Token(Token = "0x60022CD")]
		public abstract void TriggerOnDestroy(Vector3 position);

		[Token(Token = "0x60022CE")]
		[Address(RVA = "0x10C4DA4", Offset = "0x10C4DA4", VA = "0x10C4DA4", Slot = "39")]
		public bool IsDead()
		{
			return default(bool);
		}

		[Token(Token = "0x60022CF")]
		[Address(RVA = "0x10CABB4", Offset = "0x10CABB4", VA = "0x10CABB4", Slot = "40")]
		public bool IsDestroyed()
		{
			return default(bool);
		}

		[Token(Token = "0x60022D0")]
		[Address(RVA = "0x10CABA4", Offset = "0x10CABA4", VA = "0x10CABA4", Slot = "30")]
		public float CurrentHealth()
		{
			return default(float);
		}

		[Token(Token = "0x60022D1")]
		[Address(RVA = "0x10CABC4", Offset = "0x10CABC4", VA = "0x10CABC4", Slot = "31")]
		public float CurrentHealthWithLagCompensation()
		{
			return default(float);
		}

		[Token(Token = "0x60022D2")]
		[Address(RVA = "0x10CABD4", Offset = "0x10CABD4", VA = "0x10CABD4", Slot = "52")]
		public virtual void Damage(float damage)
		{
		}

		[Token(Token = "0x60022D3")]
		public abstract void ClearEventhandlers();

		[Token(Token = "0x60022D4")]
		[Address(RVA = "0x10CABE4", Offset = "0x10CABE4", VA = "0x10CABE4", Slot = "54")]
		public virtual void Recycle()
		{
		}

		[Token(Token = "0x60022D5")]
		[Address(RVA = "0x10CAC44", Offset = "0x10CAC44", VA = "0x10CAC44")]
		public bool Equals(Projectile p)
		{
			return default(bool);
		}

		[Token(Token = "0x60022D6")]
		[Address(RVA = "0x10CAC68", Offset = "0x10CAC68", VA = "0x10CAC68", Slot = "15")]
		public void SetThreatRay(BotUtils.ThreatRay ray)
		{
		}

		[Token(Token = "0x60022D7")]
		[Address(RVA = "0x10CAC7C", Offset = "0x10CAC7C", VA = "0x10CAC7C", Slot = "16")]
		public BotUtils.ThreatRay GetThreatRay()
		{
			return default(BotUtils.ThreatRay);
		}
	}
	[Token(Token = "0x20007B2")]
	public enum BallisticSoundState
	{
		[Token(Token = "0x40032FD")]
		QUIET,
		[Token(Token = "0x40032FE")]
		PLAYING
	}
	[Token(Token = "0x20007B3")]
	public interface IBallistics
	{
		[Token(Token = "0x60022D8")]
		bool IsDestroyed();

		[Token(Token = "0x60022D9")]
		float GetProjectileRadius();

		[Token(Token = "0x60022DA")]
		string[] AirSounds();
	}
	[Token(Token = "0x20007B4")]
	public struct BallisticAirData
	{
		[Token(Token = "0x40032FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly IBallistics ballistic;

		[Token(Token = "0x4003300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Transform transform;

		[Token(Token = "0x4003301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly BallisticSoundState soundState;

		[Token(Token = "0x4003302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly float soundDistanceThreshold;

		[Token(Token = "0x60022DB")]
		[Address(RVA = "0x10C4020", Offset = "0x10C4020", VA = "0x10C4020")]
		public BallisticAirData(IBallistics ballistic, Transform transform, BallisticSoundState soundState, float soundDistanceThreshold)
		{
		}
	}
	[Token(Token = "0x20007B5")]
	public class BallisticAirHandlerData
	{
		[Token(Token = "0x4003303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly List<BallisticAirData> BallisticInAir;

		[Token(Token = "0x60022DC")]
		[Address(RVA = "0x10CAC90", Offset = "0x10CAC90", VA = "0x10CAC90")]
		public BallisticAirHandlerData()
		{
		}
	}
	[Token(Token = "0x20007B6")]
	public class ProjectileAirHandler : ITickable
	{
		[Token(Token = "0x4003304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BallisticAirHandlerData ballisticAirHandlerData;

		[Token(Token = "0x4003305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4003306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Transform localPlayerTransform;

		[Token(Token = "0x60022DD")]
		[Address(RVA = "0x10CAD10", Offset = "0x10CAD10", VA = "0x10CAD10")]
		public ProjectileAirHandler(BallisticAirHandlerData ballisticAirHandlerData, IgnisSoundTriggerData ignisSoundTriggerData, Transform localPlayerTransform)
		{
		}

		[Token(Token = "0x60022DE")]
		[Address(RVA = "0x10CAD4C", Offset = "0x10CAD4C", VA = "0x10CAD4C", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x20007B8")]
	public interface IProjectileFactory
	{
		[Token(Token = "0x60022E2")]
		void Recycle(Projectile projectile);

		[Token(Token = "0x60022E3")]
		void RecycleGameObjects(Projectile projectile);
	}
	[Token(Token = "0x20007B9")]
	public struct BallisticProjectile
	{
		[Token(Token = "0x4003309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Projectile projectile;

		[Token(Token = "0x400330A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IBallistics ballistics;
	}
	[Token(Token = "0x20007BA")]
	public interface IBallisticProjectileFactory : IProjectileFactory
	{
		[Token(Token = "0x60022E4")]
		Projectile Create(float spawnTime, Vector3 position, Quaternion rotation, int projectileId, int collisionLayer, int playerInstigator, ToolName toolSpawnedFrom, float chargeAmount, float bowPullbackAmount, int tetherId);
	}
	[Token(Token = "0x20007BB")]
	public class BulletProjectileFactory : IBallisticProjectileFactory, IProjectileFactory
	{
		[Token(Token = "0x400330B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform parentTransform;

		[Token(Token = "0x400330C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BulletProjectileSettings projectileSettings;

		[Token(Token = "0x400330D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x400330E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x400330F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly OwnershipHelper ownershipHelper;

		[Token(Token = "0x4003310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ComponentPrefabPool<ProjectileReference> referencePool;

		[Token(Token = "0x4003311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ComponentPrefabPool<SphereColliderReference> colliderReferencePool;

		[Token(Token = "0x4003312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ParticleEffectData particleEffectData;

		[Token(Token = "0x4003313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly CSharpObjectPool<BulletProjectile> projectilePool;

		[Token(Token = "0x4003314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly int projectileGroupId;

		[Token(Token = "0x4003315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly BallisticAirHandlerData ballisticAirData;

		[Token(Token = "0x4003316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly ImpactHandlerData impactHandlerData;

		[Token(Token = "0x60022E5")]
		[Address(RVA = "0x10CB36C", Offset = "0x10CB36C", VA = "0x10CB36C")]
		public BulletProjectileFactory(Transform parentTransform, BulletProjectileSettings projectileSettings, MessageSender messageSender, GameMessageFactory gameMessageFactory, OwnershipHelper ownershipHelper, ComponentPrefabPool<ProjectileReference> referencePool, ComponentPrefabPool<SphereColliderReference> colliderReferencePool, ParticleEffectData particleEffectData, CSharpObjectPool<BulletProjectile> projectilePool, int projectileGroupId, BallisticAirHandlerData ballisticAirData, ImpactHandlerData impactHandlerData)
		{
		}

		[Token(Token = "0x60022E6")]
		[Address(RVA = "0x10CB3FC", Offset = "0x10CB3FC", VA = "0x10CB3FC", Slot = "4")]
		public Projectile Create(float spawnTime, Vector3 position, Quaternion rotation, int projectileId, int collisionLayer, int playerInstigator, ToolName toolSpawnedFrom, float chargeAmount, float bowPullbackAmount, int tetherId)
		{
			return null;
		}

		[Token(Token = "0x60022E7")]
		[Address(RVA = "0x10CB824", Offset = "0x10CB824", VA = "0x10CB824", Slot = "5")]
		public void Recycle(Projectile projectile)
		{
		}

		[Token(Token = "0x60022E8")]
		[Address(RVA = "0x10CB8C8", Offset = "0x10CB8C8", VA = "0x10CB8C8", Slot = "6")]
		public void RecycleGameObjects(Projectile projectile)
		{
		}
	}
	[Token(Token = "0x20007BC")]
	public class StationaryProjectileHandlerData
	{
		[Token(Token = "0x4003317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<StationaryProjectileData> stationaryProjectileData;

		[Token(Token = "0x60022E9")]
		[Address(RVA = "0x10CB970", Offset = "0x10CB970", VA = "0x10CB970")]
		public StationaryProjectileHandlerData()
		{
		}
	}
	[Token(Token = "0x20007BD")]
	public class StationaryProjectileHandler : ThreatHandler, IFixedTickable
	{
		[Token(Token = "0x4003318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly StationaryProjectileHandlerData stationaryProjectileHandlerData;

		[Token(Token = "0x4003319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<Projectile> projectiles;

		[Token(Token = "0x60022EA")]
		[Address(RVA = "0x10CB9EC", Offset = "0x10CB9EC", VA = "0x10CB9EC")]
		public StationaryProjectileHandler(StationaryProjectileHandlerData stationaryProjectileHandlerData, GameData gameData, DeterministicRandom deterministicRandom, FactoryData factoryData, IgnisSoundTriggerData ignisSoundTriggerData, ImpactHandlerData impactHandlerData)
		{
		}

		[Token(Token = "0x60022EB")]
		[Address(RVA = "0x10CBAB4", Offset = "0x10CBAB4", VA = "0x10CBAB4", Slot = "4")]
		public void FixedTick()
		{
		}

		[Token(Token = "0x60022EC")]
		[Address(RVA = "0x10CBBBC", Offset = "0x10CBBBC", VA = "0x10CBBBC")]
		public List<Projectile> CreateStationaryProjectiles(StationaryProjectileSettings projectileSettings, in ProjectileMessageData messageData, in ProjectileSourceData sourceData)
		{
			return null;
		}
	}
	[Token(Token = "0x20007BF")]
	[CreateAssetMenu(fileName = "StationaryProjectileSettings", menuName = "Projectile/StationaryProjectileSettings")]
	public class StationaryProjectileSettings : ProjectileSettings
	{
		[Token(Token = "0x60022F0")]
		[Address(RVA = "0x10CBDC8", Offset = "0x10CBDC8", VA = "0x10CBDC8")]
		public StationaryProjectileSettings()
		{
		}
	}
	[Token(Token = "0x20007C0")]
	public class ProjectileRecycleHandler
	{
		[Token(Token = "0x400331C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameData gameData;

		[Token(Token = "0x400331D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x400331E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly NetworkIdAllocator networkIdAllocator;

		[Token(Token = "0x400331F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly FactoryData factoryData;

		[Token(Token = "0x4003320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ComponentPrefabPool<ProjectileReference>[] posols;

		[Token(Token = "0x4003321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Dictionary<int, IProjectileFactory> factoryLsookup;

		[Token(Token = "0x4003322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ParticleEffectData particleEffectData;

		[Token(Token = "0x4003323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4003324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4003325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly OwnershipHelper ownershipHelper;

		[Token(Token = "0x4003326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly RecycleData recycleData;

		[Token(Token = "0x4003327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4003328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Queue<Projectile> destroyedProjectiles;

		[Token(Token = "0x4003329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float PROJECTILE_QUARANTEEN_TIME;

		[Token(Token = "0x400332A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float lastLingeringProjectileReport;

		[Token(Token = "0x60022F1")]
		[Address(RVA = "0x10CBDD0", Offset = "0x10CBDD0", VA = "0x10CBDD0")]
		public ProjectileRecycleHandler(GameData gameData, IRoomTimeProvider roomTimeProvider, NetworkIdAllocator networkIdAllocator, FactoryData factoryData, ParticleEffectData particleEffectData, MessageSender messageSender, GameMessageFactory gameMessageFactory, OwnershipHelper ownershipHelper, RecycleData recycleData, IgnisTelemetry ignisTelemetry)
		{
		}

		[Token(Token = "0x60022F2")]
		[Address(RVA = "0x10CBEBC", Offset = "0x10CBEBC", VA = "0x10CBEBC")]
		public void Destroy(Projectile projectile, float timestamp, Vector3 position)
		{
		}

		[Token(Token = "0x60022F3")]
		[Address(RVA = "0x10CBF70", Offset = "0x10CBF70", VA = "0x10CBF70")]
		public void Destroy(Projectile projectile, float timestamp)
		{
		}

		[Token(Token = "0x60022F4")]
		[Address(RVA = "0x10CC148", Offset = "0x10CC148", VA = "0x10CC148")]
		public void Tick()
		{
		}

		[Token(Token = "0x60022F5")]
		[Address(RVA = "0x10CC4F0", Offset = "0x10CC4F0", VA = "0x10CC4F0")]
		private void DebugLingeringProjectiles()
		{
		}

		[Token(Token = "0x60022F6")]
		[Address(RVA = "0x10CC1DC", Offset = "0x10CC1DC", VA = "0x10CC1DC")]
		private void TryDestroyDeadProjectiles()
		{
		}

		[Token(Token = "0x60022F7")]
		[Address(RVA = "0x10CC3AC", Offset = "0x10CC3AC", VA = "0x10CC3AC")]
		private void RemoveOldDestroyedProjectiles()
		{
		}

		[Token(Token = "0x60022F8")]
		[Address(RVA = "0x10CC32C", Offset = "0x10CC32C", VA = "0x10CC32C")]
		private void RecycleAllProjectiles()
		{
		}

		[Token(Token = "0x60022F9")]
		[Address(RVA = "0x10CD148", Offset = "0x10CD148", VA = "0x10CD148")]
		private void RecycleProjectile(Projectile projectile)
		{
		}

		[Token(Token = "0x60022FA")]
		[Address(RVA = "0x10CD2AC", Offset = "0x10CD2AC", VA = "0x10CD2AC")]
		public void TrackPoolUsage(string occasion, string matchId, int round)
		{
		}
	}
	[Token(Token = "0x20007C1")]
	public class ProjectileReference : MonoBehaviour
	{
		[Token(Token = "0x400332B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public int poolToken;

		[Token(Token = "0x400332C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Bow Properties")]
		public ParticleSystem projectileParticle;

		[Token(Token = "0x400332D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minRotationSpeed;

		[Token(Token = "0x400332E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxRotationSpeed;

		[Token(Token = "0x400332F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Renderer[] projectileRenderers;

		[Token(Token = "0x60022FB")]
		[Address(RVA = "0x10C580C", Offset = "0x10C580C", VA = "0x10C580C")]
		public ProjectileReference()
		{
		}
	}
	[Token(Token = "0x20007C2")]
	public class SphereColliderReference : MonoBehaviour, IImpactableReference
	{
		[Token(Token = "0x4003330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TriggerColliderType colliderType;

		[Token(Token = "0x4003331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform transformReference;

		[Token(Token = "0x4003332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SphereCollider sphereCollider;

		[Token(Token = "0x4003333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IImpactable impactable;

		[Token(Token = "0x4003334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ColliderListener colliderListener;

		[Token(Token = "0x60022FC")]
		[Address(RVA = "0x10CD744", Offset = "0x10CD744", VA = "0x10CD744", Slot = "4")]
		public TriggerColliderType TriggerColliderType()
		{
			return default(TriggerColliderType);
		}

		[Token(Token = "0x60022FD")]
		[Address(RVA = "0x10CD74C", Offset = "0x10CD74C", VA = "0x10CD74C", Slot = "5")]
		public IImpactable Impactable()
		{
			return null;
		}

		[Token(Token = "0x60022FE")]
		[Address(RVA = "0x10CD754", Offset = "0x10CD754", VA = "0x10CD754")]
		public SphereColliderReference()
		{
		}
	}
	[Token(Token = "0x20007C3")]
	public struct StraightProjectileData
	{
		[Token(Token = "0x4003335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Transform colliderTransform;

		[Token(Token = "0x4003336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Transform visualTransform;

		[Token(Token = "0x4003337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly float speed;

		[Token(Token = "0x4003338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly Vector3 startPostion;

		[Token(Token = "0x4003339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Vector3 direction;

		[Token(Token = "0x400333A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public readonly float spawnTime;

		[Token(Token = "0x400333B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly Projectile projectile;

		[Token(Token = "0x400333C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly float delayFactor;

		[Token(Token = "0x400333D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public readonly float minVelocityThreshold;

		[Token(Token = "0x400333E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly float maxVelocityThreshold;

		[Token(Token = "0x60022FF")]
		[Address(RVA = "0x10CD75C", Offset = "0x10CD75C", VA = "0x10CD75C")]
		public StraightProjectileData(Transform colliderTransform, Transform visualTransform, float speed, Vector3 startPostion, Vector3 direction, float spawnTime, Projectile projectile, float delayFactor, float minVelocityThreshold, float maxVelocityThreshold)
		{
		}
	}
	[Token(Token = "0x20007C4")]
	public class StraightProjectileMovementUtility
	{
		[Token(Token = "0x6002300")]
		[Address(RVA = "0x10CD78C", Offset = "0x10CD78C", VA = "0x10CD78C")]
		public Vector3 GetWorldPositionAtTime(float time, StraightProjectileData projectileData)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002301")]
		[Address(RVA = "0x10CD808", Offset = "0x10CD808", VA = "0x10CD808")]
		public StraightProjectileMovementUtility()
		{
		}
	}
	[Token(Token = "0x20007C5")]
	public readonly struct StationaryProjectileData
	{
		[Token(Token = "0x400333F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Projectile projectile;

		[Token(Token = "0x4003340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Vector3 position;

		[Token(Token = "0x6002302")]
		[Address(RVA = "0x10CBD28", Offset = "0x10CBD28", VA = "0x10CBD28")]
		public StationaryProjectileData(Projectile projectile, Vector3 position)
		{
		}
	}
	[Token(Token = "0x20007C6")]
	public class StraightProjectileHandlerData
	{
		[Token(Token = "0x4003341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<StraightProjectileData> straightProjectiles;

		[Token(Token = "0x6002303")]
		[Address(RVA = "0x10CD810", Offset = "0x10CD810", VA = "0x10CD810")]
		public StraightProjectileHandlerData()
		{
		}
	}
	[Token(Token = "0x20007C7")]
	public class StraightProjectileHandler : ThreatHandler, ITickable, IFixedTickable
	{
		[Token(Token = "0x4003342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly StraightProjectileHandlerData straightProjectileHandlerData;

		[Token(Token = "0x4003343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4003344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly DeterministicRandom deterministicRandom;

		[Token(Token = "0x4003345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly StraightProjectileMovementUtility movementUtility;

		[Token(Token = "0x4003346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Projectile> projectiles;

		[Token(Token = "0x4003347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ParticleEffectData particleEffectData;

		[Token(Token = "0x6002304")]
		[Address(RVA = "0x10CD890", Offset = "0x10CD890", VA = "0x10CD890")]
		public StraightProjectileHandler(StraightProjectileHandlerData straightProjectileData, IRoomTimeProvider roomTimeProvider, GameData gameData, DeterministicRandom deterministicRandom, FactoryData factoryData, StraightProjectileMovementUtility movementUtility, IgnisSoundTriggerData ignisSoundTriggerData, ImpactHandlerData impactHandlerData)
		{
		}

		[Token(Token = "0x6002305")]
		[Address(RVA = "0x10CD96C", Offset = "0x10CD96C", VA = "0x10CD96C", Slot = "5")]
		public void FixedTick()
		{
		}

		[Token(Token = "0x6002306")]
		[Address(RVA = "0x10CDC6C", Offset = "0x10CDC6C", VA = "0x10CDC6C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002307")]
		[Address(RVA = "0x10CDF04", Offset = "0x10CDF04", VA = "0x10CDF04")]
		public List<Projectile> OnStraightProjectileToolTrigger(StraightProjectileSetting straightProjectileSettings, in ProjectileMessageData messageData, in ProjectileSourceData sourceData)
		{
			return null;
		}
	}
	[Token(Token = "0x20007C9")]
	public readonly struct ProjectileSpawnData
	{
		[Token(Token = "0x400334B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly float heightSpread;

		[Token(Token = "0x400334C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly float widthSpread;

		[Token(Token = "0x600230C")]
		[Address(RVA = "0x10CE424", Offset = "0x10CE424", VA = "0x10CE424")]
		public ProjectileSpawnData(float heightSpread, float widthSpread)
		{
		}
	}
	[Token(Token = "0x20007CA")]
	public readonly struct ProjectileSpeedData
	{
		[Token(Token = "0x400334D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly float minVelocity;

		[Token(Token = "0x400334E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly float maxVelocity;

		[Token(Token = "0x400334F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly float minVelocityThreshold;

		[Token(Token = "0x4003350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly float maxVelocityThreshold;

		[Token(Token = "0x4003351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly float velocityTimePower;

		[Token(Token = "0x600230D")]
		[Address(RVA = "0x10CE42C", Offset = "0x10CE42C", VA = "0x10CE42C")]
		public ProjectileSpeedData(float minVelocity, float maxVelocity, float minVelocityThreshold, float maxVelocityThreshold, float velocityTimePower)
		{
		}
	}
	[Token(Token = "0x20007CB")]
	public readonly struct ProjectileSourceData
	{
		[Token(Token = "0x4003352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly ToolName toolSource;

		[Token(Token = "0x4003353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly float timestamp;

		[Token(Token = "0x4003354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Vector3 position;

		[Token(Token = "0x4003355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly Quaternion rotation;

		[Token(Token = "0x600230E")]
		[Address(RVA = "0x10CE43C", Offset = "0x10CE43C", VA = "0x10CE43C")]
		public ProjectileSourceData(ToolName toolSource, float timestamp, Vector3 position, Quaternion rotation)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007CC")]
	public struct ProjectileMessageData
	{
		[Token(Token = "0x4003356")]
		public const int SERIALIZATION_SIZE = 14;

		[Token(Token = "0x4003357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private ushort seed;

		[Token(Token = "0x4003358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[SerializeField]
		private int tetherNetworkId;

		[Token(Token = "0x4003359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		private int playerSourceId;

		[Token(Token = "0x400335A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private float chargeAmount;

		[Token(Token = "0x400335B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private float bowPullbackAmount;

		[Token(Token = "0x400335C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<int> projectileNetworkIds;

		[Token(Token = "0x17000185")]
		public ushort Seed
		{
			[Token(Token = "0x6002310")]
			[Address(RVA = "0x10CE468", Offset = "0x10CE468", VA = "0x10CE468")]
			get
			{
				return default(ushort);
			}
		}

		[Token(Token = "0x17000186")]
		public int TetherNetworkId
		{
			[Token(Token = "0x6002311")]
			[Address(RVA = "0x10CE470", Offset = "0x10CE470", VA = "0x10CE470")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000187")]
		public int PlayerSourceId
		{
			[Token(Token = "0x6002312")]
			[Address(RVA = "0x10CE478", Offset = "0x10CE478", VA = "0x10CE478")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000188")]
		public float ChargeAmount
		{
			[Token(Token = "0x6002313")]
			[Address(RVA = "0x10CE480", Offset = "0x10CE480", VA = "0x10CE480")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000189")]
		public float BowPullbackAmount
		{
			[Token(Token = "0x6002314")]
			[Address(RVA = "0x10CE488", Offset = "0x10CE488", VA = "0x10CE488")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700018A")]
		public List<int> ProjectileNetworkIds
		{
			[Token(Token = "0x6002315")]
			[Address(RVA = "0x10CE490", Offset = "0x10CE490", VA = "0x10CE490")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600230F")]
		[Address(RVA = "0x10CE454", Offset = "0x10CE454", VA = "0x10CE454")]
		public ProjectileMessageData(ushort seed, int tetherNetworkId, List<int> projectileNetworkIds, float chargeAmount, float bowPullbackAmount, int playerSourceId)
		{
		}
	}
	[Token(Token = "0x20007CD")]
	public abstract class ThreatHandler
	{
		[Token(Token = "0x400335D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ImpactHandlerData impactHandlerData;

		[Token(Token = "0x400335E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameData gameData;

		[Token(Token = "0x400335F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DeterministicRandom deterministicRandom;

		[Token(Token = "0x4003360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4003361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly FactoryData factoryData;

		[Token(Token = "0x4003362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly RaycastHit[] raycastHits;

		[Token(Token = "0x4003363")]
		public const int PLAYER_ONE_HIT_MASK = 301056;

		[Token(Token = "0x4003364")]
		public const int PLAYER_TWO_HIT_MASK = 19200;

		[Token(Token = "0x4003365")]
		public const int PLAYER_ONE_AOE_MASK = 0;

		[Token(Token = "0x4003366")]
		public const int PLAYER_TWO_AOE_MASK = 0;

		[Token(Token = "0x6002316")]
		[Address(RVA = "0x10C5C90", Offset = "0x10C5C90", VA = "0x10C5C90")]
		protected ThreatHandler(ImpactHandlerData impactHandlerData, GameData gameData, DeterministicRandom deterministicRandom, IgnisSoundTriggerData ignisSoundTriggerData, FactoryData factoryData)
		{
		}

		[Token(Token = "0x6002317")]
		[Address(RVA = "0x10C63B4", Offset = "0x10C63B4", VA = "0x10C63B4")]
		protected void CheckSphereCollision(IThreat threat, Vector3 from, Vector3 to)
		{
		}

		[Token(Token = "0x6002318")]
		[Address(RVA = "0x10C6E50", Offset = "0x10C6E50", VA = "0x10C6E50")]
		protected void CreateProjectiles(ProjectileSpawnSettings settings, in ProjectileMessageData messageData, in ProjectileSourceData sourceData, int poolToken, List<Projectile> outProjectiles)
		{
		}

		[Token(Token = "0x6002319")]
		[Address(RVA = "0x10CE498", Offset = "0x10CE498", VA = "0x10CE498")]
		private int GetLayerMask(int playerSourceId, SpawnLayerMaskType colliderType)
		{
			return default(int);
		}

		[Token(Token = "0x600231A")]
		[Address(RVA = "0x10CE7A8", Offset = "0x10CE7A8", VA = "0x10CE7A8")]
		private int GetHitTraceMask(int playerSourceId, SpawnLayerMaskType colliderType)
		{
			return default(int);
		}

		[Token(Token = "0x600231B")]
		[Address(RVA = "0x10CE608", Offset = "0x10CE608", VA = "0x10CE608")]
		public ProjectileSpawnData GetBowPullbackSpawnData(ProjectileSpawnSettings settings, float bowPullback, float timestamp)
		{
			return default(ProjectileSpawnData);
		}

		[Token(Token = "0x600231C")]
		[Address(RVA = "0x10CE648", Offset = "0x10CE648", VA = "0x10CE648")]
		public ProjectileSpawnData GetTetherSpawnData(ProjectileSpawnSettings settings, int tetherNetworkId, float chargeAmount, float timestamp)
		{
			return default(ProjectileSpawnData);
		}

		[Token(Token = "0x600231D")]
		[Address(RVA = "0x10C7520", Offset = "0x10C7520", VA = "0x10C7520")]
		public ProjectileSpeedData GetBowPullbackVelocityData(ProjectileVelocitySettings settings, float bowPullbackAmount)
		{
			return default(ProjectileSpeedData);
		}

		[Token(Token = "0x600231E")]
		[Address(RVA = "0x10C7578", Offset = "0x10C7578", VA = "0x10C7578")]
		public ProjectileSpeedData GetTetherModifiedData(ProjectileVelocitySettings settings, int tetherNetworkId, float chargeAmount)
		{
			return default(ProjectileSpeedData);
		}
	}
	[Token(Token = "0x20007CE")]
	public class TimedProjectileFactory : IBallisticProjectileFactory, IProjectileFactory
	{
		[Token(Token = "0x4003367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly TimedProjectileSettings projectileSettings;

		[Token(Token = "0x4003368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly OwnershipHelper ownershipHelper;

		[Token(Token = "0x4003369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ComponentPrefabPool<ProjectileReference> referencePool;

		[Token(Token = "0x400336A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ComponentPrefabPool<SphereColliderReference> colliderReferencePool;

		[Token(Token = "0x400336B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CSharpObjectPool<TimedProjectile> projectilePool;

		[Token(Token = "0x400336C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly int projectileGroupId;

		[Token(Token = "0x400336D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly BallisticAirHandlerData ballisticAirData;

		[Token(Token = "0x400336E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly TimeHandlerData timeHandlerData;

		[Token(Token = "0x400336F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly EventTriggerModule eventTriggerModule;

		[Token(Token = "0x4003370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly List<IEventTriggerEffects> eventTriggerEffectsList;

		[Token(Token = "0x600231F")]
		[Address(RVA = "0x10CE868", Offset = "0x10CE868", VA = "0x10CE868")]
		public TimedProjectileFactory(TimedProjectileSettings projectileSettings, OwnershipHelper ownershipHelper, ComponentPrefabPool<ProjectileReference> referencePool, ComponentPrefabPool<SphereColliderReference> colliderReferencePool, CSharpObjectPool<TimedProjectile> projectilePool, int projectileGroupId, BallisticAirHandlerData ballisticAirData, TimeHandlerData timeHandlerData, EventTriggerModule eventTriggerModule, List<IEventTriggerEffects> eventTriggerEffectsList)
		{
		}

		[Token(Token = "0x6002320")]
		[Address(RVA = "0x10CE8F0", Offset = "0x10CE8F0", VA = "0x10CE8F0", Slot = "4")]
		public Projectile Create(float spawnTime, Vector3 position, Quaternion rotation, int projectileId, int collisionLayer, int playerInstigator, ToolName toolSpawnedFrom, float chargeAmount, float bowPullbackAmount, int tetherId)
		{
			return null;
		}

		[Token(Token = "0x6002321")]
		[Address(RVA = "0x10CED38", Offset = "0x10CED38", VA = "0x10CED38", Slot = "5")]
		public void Recycle(Projectile projectile)
		{
		}

		[Token(Token = "0x6002322")]
		[Address(RVA = "0x10CEDDC", Offset = "0x10CEDDC", VA = "0x10CEDDC", Slot = "6")]
		public void RecycleGameObjects(Projectile projectile)
		{
		}
	}
	[Token(Token = "0x20007CF")]
	public class TimedProjectile : Projectile, IBallistics, ITimeable, ISource, ITransformRoots
	{
		[Token(Token = "0x4003371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private OwnershipHelper ownershipHelper;

		[Token(Token = "0x4003372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private TimedProjectileSettings projectileSettings;

		[Token(Token = "0x4003373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private ProjectileCommon projectileCommon;

		[Token(Token = "0x4003374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly EventHandler<ColliderListenerEventArgs> onTriggerEnter;

		[Token(Token = "0x4003375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private EventTriggerModule eventTriggerModule;

		[Token(Token = "0x4003377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int playerInstigatorId;

		[Token(Token = "0x1700018B")]
		public SphereColliderReference SphereColliderReference
		{
			[Token(Token = "0x6002323")]
			[Address(RVA = "0x10CEE84", Offset = "0x10CEE84", VA = "0x10CEE84")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002324")]
			[Address(RVA = "0x10CEE8C", Offset = "0x10CEE8C", VA = "0x10CEE8C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700018C")]
		public ProjectileSettings ProjectileSettings
		{
			[Token(Token = "0x6002332")]
			[Address(RVA = "0x10CF060", Offset = "0x10CF060", VA = "0x10CF060", Slot = "65")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002333")]
			[Address(RVA = "0x10CF068", Offset = "0x10CF068", VA = "0x10CF068")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700018D")]
		public List<IEventTriggerEffects> Effects
		{
			[Token(Token = "0x6002334")]
			[Address(RVA = "0x10CF070", Offset = "0x10CF070", VA = "0x10CF070", Slot = "69")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002335")]
			[Address(RVA = "0x10CF078", Offset = "0x10CF078", VA = "0x10CF078")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002325")]
		[Address(RVA = "0x10CEE94", Offset = "0x10CEE94", VA = "0x10CEE94")]
		public TimedProjectile()
		{
		}

		[Token(Token = "0x6002326")]
		[Address(RVA = "0x10CEC74", Offset = "0x10CEC74", VA = "0x10CEC74")]
		public void Initialize(float spawnTime, ProjectileReference reference, SphereColliderReference sphereColliderReference, int projectileNetworkId, OwnershipHelper ownership, TimedProjectileSettings settings, int projectileGroupId, int playerInstigator, ToolName toolSpawnedFrom, float chargeAmount, float bowPullbackAmount, int tetherId, ProjectileCommon common, EventTriggerModule triggerModule, List<IEventTriggerEffects> effects)
		{
		}

		[Token(Token = "0x6002327")]
		[Address(RVA = "0x10CEE9C", Offset = "0x10CEE9C", VA = "0x10CEE9C", Slot = "46")]
		public override float GetDamageProjectile()
		{
			return default(float);
		}

		[Token(Token = "0x6002328")]
		[Address(RVA = "0x10CEEA4", Offset = "0x10CEEA4", VA = "0x10CEEA4", Slot = "47")]
		public override float GetDamagePlayer()
		{
			return default(float);
		}

		[Token(Token = "0x6002329")]
		[Address(RVA = "0x10CEEAC", Offset = "0x10CEEAC", VA = "0x10CEEAC", Slot = "48")]
		public override float GetProjectileRadius()
		{
			return default(float);
		}

		[Token(Token = "0x600232A")]
		[Address(RVA = "0x10CEEC8", Offset = "0x10CEEC8", VA = "0x10CEEC8", Slot = "57")]
		public string[] AirSounds()
		{
			return null;
		}

		[Token(Token = "0x600232B")]
		[Address(RVA = "0x10CEEE4", Offset = "0x10CEEE4", VA = "0x10CEEE4", Slot = "51")]
		public override void TriggerOnDestroy(Vector3 position)
		{
		}

		[Token(Token = "0x600232C")]
		[Address(RVA = "0x10CEEE8", Offset = "0x10CEEE8", VA = "0x10CEEE8", Slot = "53")]
		public override void ClearEventhandlers()
		{
		}

		[Token(Token = "0x600232D")]
		[Address(RVA = "0x10CEEEC", Offset = "0x10CEEEC", VA = "0x10CEEEC", Slot = "58")]
		public void UpdateTimableVisuals(float elapsedTime)
		{
		}

		[Token(Token = "0x600232E")]
		[Address(RVA = "0x10CEEF0", Offset = "0x10CEEF0", VA = "0x10CEEF0", Slot = "59")]
		public void TimerDone()
		{
		}

		[Token(Token = "0x600232F")]
		[Address(RVA = "0x10CF018", Offset = "0x10CF018", VA = "0x10CF018", Slot = "60")]
		public float GetDuration()
		{
			return default(float);
		}

		[Token(Token = "0x6002330")]
		[Address(RVA = "0x10CF058", Offset = "0x10CF058", VA = "0x10CF058", Slot = "62")]
		public void OnActivation(int playerNetworkId, float timeStamp, int tetherNetworkId = 0, float chargeAmount = 0f)
		{
		}

		[Token(Token = "0x6002331")]
		[Address(RVA = "0x10CF05C", Offset = "0x10CF05C", VA = "0x10CF05C", Slot = "63")]
		public void TimerAborted(float timeStamp)
		{
		}
	}
	[Token(Token = "0x20007D0")]
	[CreateAssetMenu(fileName = "TimedProjectileSettings", menuName = "Settings/Projectile/TimedProjectileSettings")]
	public class TimedProjectileSettings : BaseProjectileSettings
	{
		[Token(Token = "0x400337A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Projectile")]
		public ProjectileReference reference;

		[Token(Token = "0x400337B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ProjectileCommon commonData;

		[Token(Token = "0x400337C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ProjectileCommon commonDataCharged;

		[Token(Token = "0x400337D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float timeToBeAlive;

		[Token(Token = "0x400337E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float timeToBeAliveCharged;

		[Token(Token = "0x400337F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ProjectileSettings projectileToSpawn;

		[Token(Token = "0x4003380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Audio")]
		public string[] projectileAirSound;

		[Token(Token = "0x4003381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float soundDistanceThreshold;

		[Token(Token = "0x4003382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public ImpactSettings projectileImpactSettings;

		[Token(Token = "0x4003383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float colliderRadius;

		[Token(Token = "0x4003384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<EventTriggerEffectSettings> effects;

		[Token(Token = "0x6002336")]
		[Address(RVA = "0x10CF080", Offset = "0x10CF080", VA = "0x10CF080", Slot = "4")]
		public override float GetTotalPredictedDamagePlayer()
		{
			return default(float);
		}

		[Token(Token = "0x6002337")]
		[Address(RVA = "0x10CF088", Offset = "0x10CF088", VA = "0x10CF088")]
		public TimedProjectileSettings()
		{
		}
	}
	[Token(Token = "0x20007D1")]
	public class GameMessageDownloadHandlerData
	{
		[Token(Token = "0x4003385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue refreshLatestReplayRequest;

		[Token(Token = "0x4003386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<DownloadAndPlayReplayRequest> downloadAndPlayReplayRequest;

		[Token(Token = "0x4003387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameMessageUploadHandlerData.MatchEndedEvent currentReplayFileMatchEndedEvent;

		[Token(Token = "0x4003388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameMessageUploadHandlerData.MatchEndedEvent latestReplayFileMatchEndedEvent;

		[Token(Token = "0x4003389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<GameMessage> currentReplayMessages;

		[Token(Token = "0x400338A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<GameMessage> latestReplayMessages;

		[Token(Token = "0x400338B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<GameMessage> downloadedReplayMessages;

		[Token(Token = "0x400338C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public DownloadAndPlayReplayRequest pendingDownloadRequest;

		[Token(Token = "0x6002338")]
		[Address(RVA = "0x10CF154", Offset = "0x10CF154", VA = "0x10CF154")]
		public bool IsDownloadingReplay()
		{
			return default(bool);
		}

		[Token(Token = "0x6002339")]
		[Address(RVA = "0x10CF164", Offset = "0x10CF164", VA = "0x10CF164")]
		public GameMessageDownloadHandlerData()
		{
		}
	}
	[Token(Token = "0x20007D2")]
	public class DownloadAndPlayReplayRequest
	{
		[Token(Token = "0x20007D3")]
		public enum State
		{
			[Token(Token = "0x4003392")]
			Created,
			[Token(Token = "0x4003393")]
			ReplayRequestedFromServer,
			[Token(Token = "0x4003394")]
			ReplayReceivedFromServer,
			[Token(Token = "0x4003395")]
			ReplayPlaying,
			[Token(Token = "0x4003396")]
			ReplayDone
		}

		[Token(Token = "0x400338D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string replayUri;

		[Token(Token = "0x400338E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameplayRules gameplayRules;

		[Token(Token = "0x400338F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PostMatchAction postMatchAction;

		[Token(Token = "0x4003390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public State state;

		[Token(Token = "0x600233A")]
		[Address(RVA = "0x10CF2A0", Offset = "0x10CF2A0", VA = "0x10CF2A0")]
		public static string ReplayUriFromMatchIdAndUser(string matchId, string playerId)
		{
			return null;
		}

		[Token(Token = "0x600233B")]
		[Address(RVA = "0x10CF314", Offset = "0x10CF314", VA = "0x10CF314")]
		public DownloadAndPlayReplayRequest(string replayUri, GameplayRules gameplayRules, PostMatchAction postMatchAction)
		{
		}
	}
	[Token(Token = "0x20007D4")]
	public class GameMessageDownloadHandler : ITickable
	{
		[Token(Token = "0x4003397")]
		public const string GameMessagesFileNameSuffix = "LatestGameMessages.txt";

		[Token(Token = "0x4003398")]
		public const string GameEndInfoFileNameSuffix = "LatestGameEndInfo.txt";

		[Token(Token = "0x4003399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ITokenApisHttpComponent httpComponent;

		[Token(Token = "0x400339A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ApiTokenData apiTokenData;

		[Token(Token = "0x400339B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly GameMessageDownloadHandlerData gameMessageDownloadHandlerData;

		[Token(Token = "0x400339C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly LoginData loginData;

		[Token(Token = "0x400339D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PlatformLoginData platformLoginData;

		[Token(Token = "0x400339E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ISingleMessageSerializer singleMessageSerializer;

		[Token(Token = "0x400339F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ReplayData replayData;

		[Token(Token = "0x40033A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly BarEntranceData barEntranceData;

		[Token(Token = "0x40033A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ErrorMessageData errorMessageData;

		[Token(Token = "0x40033A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool localStoreReplayRead;

		[Token(Token = "0x600233C")]
		[Address(RVA = "0x10CF354", Offset = "0x10CF354", VA = "0x10CF354")]
		public GameMessageDownloadHandler(ITokenApisHttpComponent httpComponent, ApiTokenData apiTokenData, GameMessageDownloadHandlerData gameMessageDownloadHandlerData, LoginData loginData, PlatformLoginData platformLoginData, ISingleMessageSerializer singleMessageSerializer, ReplayData replayData, BarEntranceData barEntranceData, ErrorMessageData errorMessageData)
		{
		}

		[Token(Token = "0x600233D")]
		[Address(RVA = "0x10CF3C8", Offset = "0x10CF3C8", VA = "0x10CF3C8")]
		public void SetupDebug(DebugMenu debugMenu)
		{
		}

		[Token(Token = "0x600233E")]
		[Address(RVA = "0x10CF3CC", Offset = "0x10CF3CC", VA = "0x10CF3CC")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600233F")]
		[Address(RVA = "0x10CF3D0", Offset = "0x10CF3D0", VA = "0x10CF3D0")]
		private void ReadLocallyStoredReplay()
		{
		}

		[Token(Token = "0x6002340")]
		[Address(RVA = "0x10CFCF8", Offset = "0x10CFCF8", VA = "0x10CFCF8")]
		public void WriteLatestLogToFile()
		{
		}

		[Token(Token = "0x6002341")]
		[Address(RVA = "0x10CFE60", Offset = "0x10CFE60", VA = "0x10CFE60")]
		private void SerializeReplayLogGameMessages(MemoryStream stream)
		{
		}

		[Token(Token = "0x6002342")]
		[Address(RVA = "0x10CF5EC", Offset = "0x10CF5EC", VA = "0x10CF5EC")]
		private string LogFilePath()
		{
			return null;
		}

		[Token(Token = "0x6002343")]
		[Address(RVA = "0x10CF664", Offset = "0x10CF664", VA = "0x10CF664")]
		private string GameEndInfoFilePath()
		{
			return null;
		}

		[Token(Token = "0x6002344")]
		[Address(RVA = "0x10D0124", Offset = "0x10D0124", VA = "0x10D0124", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002345")]
		[Address(RVA = "0x10D0614", Offset = "0x10D0614", VA = "0x10D0614")]
		private void HandlePendingDownloadReplayRequest()
		{
		}

		[Token(Token = "0x6002346")]
		[Address(RVA = "0x10D067C", Offset = "0x10D067C", VA = "0x10D067C")]
		private void HandleReplayRequestFinished(DownloadAndPlayReplayRequest downloadAndPlayReplayRequest)
		{
		}

		[Token(Token = "0x6002347")]
		[Address(RVA = "0x10D0424", Offset = "0x10D0424", VA = "0x10D0424")]
		private void RefreshLatestReplay()
		{
		}

		[Token(Token = "0x6002348")]
		[Address(RVA = "0x10D06DC", Offset = "0x10D06DC", VA = "0x10D06DC")]
		private void DownloadReplayAsLatest(string uri, GameMessagesMatchJsonObject matchJsonObject)
		{
		}

		[Token(Token = "0x6002349")]
		[Address(RVA = "0x10D08EC", Offset = "0x10D08EC", VA = "0x10D08EC")]
		private static string[] SplitReplayFileIntoLines(string s)
		{
			return null;
		}

		[Token(Token = "0x600234A")]
		[Address(RVA = "0x10D0274", Offset = "0x10D0274", VA = "0x10D0274")]
		private void DownloadReplayToCache(DownloadAndPlayReplayRequest request)
		{
		}

		[Token(Token = "0x600234B")]
		[Address(RVA = "0x10D0910", Offset = "0x10D0910", VA = "0x10D0910")]
		private void HandleErrorLoadingReplay(DownloadAndPlayReplayRequest downloadAndPlayReplayRequest)
		{
		}

		[Token(Token = "0x600234C")]
		[Address(RVA = "0x10CF6DC", Offset = "0x10CF6DC", VA = "0x10CF6DC")]
		private bool ParseGameMessagesFromStrings(IEnumerable<string> serializedGameMessages, List<GameMessage> messageQueue)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20007D8")]
	internal class GameMessagesJsonObject
	{
		[Token(Token = "0x40033AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<GameMessagesMatchJsonObject> matches;

		[Token(Token = "0x6002357")]
		[Address(RVA = "0x10D11E4", Offset = "0x10D11E4", VA = "0x10D11E4")]
		public GameMessagesJsonObject()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007D9")]
	internal class GameMessagesMatchJsonObject
	{
		[Token(Token = "0x40033AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string uri;

		[Token(Token = "0x40033AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string match_id;

		[Token(Token = "0x40033AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[CanBeNull]
		public string sender_name;

		[Token(Token = "0x40033AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string opponent_name;

		[Token(Token = "0x40033AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int sender_score;

		[Token(Token = "0x40033B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int opponent_score;

		[Token(Token = "0x40033B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int sender_player_id;

		[Token(Token = "0x40033B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string gameplay_rules;

		[Token(Token = "0x6002358")]
		[Address(RVA = "0x10D1260", Offset = "0x10D1260", VA = "0x10D1260")]
		public GameMessagesMatchJsonObject()
		{
		}
	}
	[Token(Token = "0x20007DA")]
	public class GameMessageUploadHandlerData
	{
		[Token(Token = "0x20007DB")]
		public class MatchEndedEvent
		{
			[Token(Token = "0x40033B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string matchId;

			[Token(Token = "0x40033B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string myName;

			[Token(Token = "0x40033B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string opponentName;

			[Token(Token = "0x40033BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int myScore;

			[Token(Token = "0x40033BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int opponentScore;

			[Token(Token = "0x40033BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int myPlayerId;

			[Token(Token = "0x40033BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public GameplayRules gameplayRules;

			[Token(Token = "0x600235A")]
			[Address(RVA = "0x10D0DD0", Offset = "0x10D0DD0", VA = "0x10D0DD0")]
			public MatchEndedEvent(string matchId, string myName, string opponentName, int myScore, int opponentScore, int myPlayerId, GameplayRules gameplayRules)
			{
			}
		}

		[Token(Token = "0x40033B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<GameMessage> incomingMessages;

		[Token(Token = "0x40033B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<MatchEndedEvent> matchEndedEvents;

		[Token(Token = "0x40033B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Queue<ArenaLeftEvent> arenaLeftEvents;

		[Token(Token = "0x40033B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool resetRecording;

		[Token(Token = "0x6002359")]
		[Address(RVA = "0x10D12D4", Offset = "0x10D12D4", VA = "0x10D12D4")]
		public GameMessageUploadHandlerData()
		{
		}
	}
	[Token(Token = "0x20007DC")]
	public struct ArenaLeftEvent
	{
	}
	[Token(Token = "0x20007DD")]
	public class GameMessageUploadHandler : ITickable
	{
		[Token(Token = "0x20007DE")]
		private class BatchRequest
		{
			[Token(Token = "0x40033D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public byte[] data;

			[Token(Token = "0x40033D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string matchId;

			[Token(Token = "0x40033D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string batchId;

			[Token(Token = "0x40033D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public RequestState requestState;

			[Token(Token = "0x40033D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int retryCount;

			[Token(Token = "0x40033D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float lastSendAttemptTimestamp;

			[Token(Token = "0x6002368")]
			[Address(RVA = "0x10D2E34", Offset = "0x10D2E34", VA = "0x10D2E34")]
			public BatchRequest(byte[] data, string matchId, string batchId)
			{
			}
		}

		[Token(Token = "0x20007DF")]
		private class EndRequest
		{
			[Token(Token = "0x40033D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameMessageUploadHandlerData.MatchEndedEvent matchEndedEvent;

			[Token(Token = "0x40033D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float doNotProcessBeforeTimestamp;

			[Token(Token = "0x40033DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public RequestState requestState;

			[Token(Token = "0x40033DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float lastSendAttemptTimestamp;

			[Token(Token = "0x40033DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int retryCount;

			[Token(Token = "0x40033DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool replayCopiedToLatest;

			[Token(Token = "0x6002369")]
			[Address(RVA = "0x10D2948", Offset = "0x10D2948", VA = "0x10D2948")]
			public EndRequest(GameMessageUploadHandlerData.MatchEndedEvent matchEndedEvent, float doNotProcessBeforeTimestamp)
			{
			}
		}

		[Token(Token = "0x20007E0")]
		public enum RequestState
		{
			[Token(Token = "0x40033DF")]
			NotSent,
			[Token(Token = "0x40033E0")]
			Sending,
			[Token(Token = "0x40033E1")]
			Sent,
			[Token(Token = "0x40033E2")]
			Error,
			[Token(Token = "0x40033E3")]
			Failed
		}

		[Token(Token = "0x20007E1")]
		private struct CompleteMatchData
		{
			[Token(Token = "0x40033E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string sender_name;

			[Token(Token = "0x40033E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string opponent_name;

			[Token(Token = "0x40033E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int sender_score;

			[Token(Token = "0x40033E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int opponent_score;

			[Token(Token = "0x40033E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int sender_player_id;

			[Token(Token = "0x40033E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string gameplay_rules;

			[Token(Token = "0x600236A")]
			[Address(RVA = "0x10D2E20", Offset = "0x10D2E20", VA = "0x10D2E20")]
			public CompleteMatchData(string senderName, string opponentName, int senderScore, int opponentScore, int senderPlayerID, string gameplayRules)
			{
			}
		}

		[Token(Token = "0x40033BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameMessageUploadHandlerData gameMessageUploadHandlerData;

		[Token(Token = "0x40033BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameMessageDownloadHandlerData gameMessageDownloadHandlerData;

		[Token(Token = "0x40033C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ISingleMessageSerializer gameMessageSerializer;

		[Token(Token = "0x40033C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x40033C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ApiTokenData apiTokenData;

		[Token(Token = "0x40033C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ITokenApisHttpComponent httpComponent;

		[Token(Token = "0x40033C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly LoginData loginData;

		[Token(Token = "0x40033C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly PlayFabUserSettingsData playFabUserSettingsData;

		[Token(Token = "0x40033C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x40033C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private StreamWriter currentBatchWriter;

		[Token(Token = "0x40033C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int currentBatchNumber;

		[Token(Token = "0x40033C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string currentMatchId;

		[Token(Token = "0x40033CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float timeOfLastBatch;

		[Token(Token = "0x40033CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool hasDataToBatch;

		[Token(Token = "0x40033CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<BatchRequest> batchRequests;

		[Token(Token = "0x40033CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<EndRequest> endRequests;

		[Token(Token = "0x40033CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MemoryStream batchUploadStream;

		[Token(Token = "0x40033CF")]
		private const int NumberOfRequestAttemptBeforeFailing = 10;

		[Token(Token = "0x40033D0")]
		private const int WaitBeforeRetryingBatchError = 30;

		[Token(Token = "0x40033D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ProfilerMarker tickProfilerMaker;

		[Token(Token = "0x600235B")]
		[Address(RVA = "0x10D13D8", Offset = "0x10D13D8", VA = "0x10D13D8")]
		public GameMessageUploadHandler(GameMessageUploadHandlerData gameMessageUploadHandlerData, GameMessageDownloadHandlerData gameMessageDownloadHandlerData, ISingleMessageSerializer gameMessageSerializer, ITimeProvider timeProvider, ApiTokenData apiTokenData, ITokenApisHttpComponent httpComponent, LoginData loginData, PlayFabUserSettingsData playFabUserSettingsData, EntryPoint.EntryPointData entryPointData)
		{
		}

		[Token(Token = "0x600235C")]
		[Address(RVA = "0x10D1530", Offset = "0x10D1530", VA = "0x10D1530")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600235D")]
		[Address(RVA = "0x10D15CC", Offset = "0x10D15CC", VA = "0x10D15CC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600235E")]
		[Address(RVA = "0x10D2C64", Offset = "0x10D2C64", VA = "0x10D2C64")]
		private void CopyCurrentReplayToLatestReplay()
		{
		}

		[Token(Token = "0x600235F")]
		[Address(RVA = "0x10D2BA0", Offset = "0x10D2BA0", VA = "0x10D2BA0")]
		private void ResetRecoringBuffer()
		{
		}

		[Token(Token = "0x6002360")]
		[Address(RVA = "0x10D292C", Offset = "0x10D292C", VA = "0x10D292C")]
		private void StoreCurrentGameEndEvent(GameMessageUploadHandlerData.MatchEndedEvent endEvent)
		{
		}

		[Token(Token = "0x6002361")]
		[Address(RVA = "0x10D2980", Offset = "0x10D2980", VA = "0x10D2980")]
		private void CreateBatchIfThereIsData()
		{
		}

		[Token(Token = "0x6002362")]
		[Address(RVA = "0x10D2DDC", Offset = "0x10D2DDC", VA = "0x10D2DDC")]
		private bool ShouldUploadReplays()
		{
			return default(bool);
		}

		[Token(Token = "0x6002363")]
		[Address(RVA = "0x10D28FC", Offset = "0x10D28FC", VA = "0x10D28FC")]
		private bool ShouldRecordReplay()
		{
			return default(bool);
		}

		[Token(Token = "0x6002364")]
		[Address(RVA = "0x10D2E70", Offset = "0x10D2E70", VA = "0x10D2E70")]
		private void OnBatchUploadError(string response, BatchRequest batchRequest)
		{
		}

		[Token(Token = "0x6002365")]
		[Address(RVA = "0x10D303C", Offset = "0x10D303C", VA = "0x10D303C")]
		private void OnBatchUploaded(string response, BatchRequest batchRequest)
		{
		}

		[Token(Token = "0x6002366")]
		[Address(RVA = "0x10D3248", Offset = "0x10D3248", VA = "0x10D3248")]
		private void OnCompleteError(string response, EndRequest endRequest)
		{
		}

		[Token(Token = "0x6002367")]
		[Address(RVA = "0x10D32D4", Offset = "0x10D32D4", VA = "0x10D32D4")]
		private void OnCompleteSuccess(string response, EndRequest endRequest)
		{
		}
	}
	[Token(Token = "0x20007E5")]
	public class ReplayData
	{
		[Token(Token = "0x40033F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isReplaying;

		[Token(Token = "0x40033F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool isMatchAReplay;

		[Token(Token = "0x40033F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float replaySpeed;

		[Token(Token = "0x40033F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isReplayPaused;

		[Token(Token = "0x40033F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int replayAsPlayer;

		[Token(Token = "0x40033F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool startedReplayThisFrame;

		[Token(Token = "0x40033F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Queue<ReplayRequest> startReplayRequest;

		[Token(Token = "0x6002374")]
		[Address(RVA = "0x10D3578", Offset = "0x10D3578", VA = "0x10D3578")]
		public ReplayData()
		{
		}
	}
	[Token(Token = "0x20007E6")]
	public enum ReplayPlayType
	{
		[Token(Token = "0x40033F8")]
		LastMatch,
		[Token(Token = "0x40033F9")]
		FromFile,
		[Token(Token = "0x40033FA")]
		FromAsset,
		[Token(Token = "0x40033FB")]
		DownloadedReplay
	}
	[Token(Token = "0x20007E7")]
	public readonly struct ReplayRequest
	{
		[Token(Token = "0x40033FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly ReplayPlayType replayPlayType;

		[Token(Token = "0x40033FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string fileName;

		[Token(Token = "0x40033FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int fileIndex;

		[Token(Token = "0x40033FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly GameplayRules? forceGameplayRules;

		[Token(Token = "0x4003400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly int playerNetworkId;

		[Token(Token = "0x6002375")]
		[Address(RVA = "0x10D3604", Offset = "0x10D3604", VA = "0x10D3604")]
		public static ReplayRequest ReplayLastMatch(int playerNetworkId, [Optional] GameplayRules? forceGameplayRules)
		{
			return default(ReplayRequest);
		}

		[Token(Token = "0x6002376")]
		[Address(RVA = "0x10D3684", Offset = "0x10D3684", VA = "0x10D3684")]
		public static ReplayRequest ReplayFromFilePath(string path, [Optional] GameplayRules? forceGameplayRules)
		{
			return default(ReplayRequest);
		}

		[Token(Token = "0x6002377")]
		[Address(RVA = "0x10D369C", Offset = "0x10D369C", VA = "0x10D369C")]
		public static ReplayRequest ReplayFromFileAsset(int fileIndex, [Optional] GameplayRules? forceGameplayRules)
		{
			return default(ReplayRequest);
		}

		[Token(Token = "0x6002378")]
		[Address(RVA = "0x10D1108", Offset = "0x10D1108", VA = "0x10D1108")]
		public static ReplayRequest ReplayFromServer(int playerNetworkId, [Optional] GameplayRules? forceGameplayRules)
		{
			return default(ReplayRequest);
		}

		[Token(Token = "0x6002379")]
		[Address(RVA = "0x10D366C", Offset = "0x10D366C", VA = "0x10D366C")]
		private ReplayRequest(ReplayPlayType replayPlayType, string fileName, int fileIndex, GameplayRules? forceGameplayRules, int playerNetworkId)
		{
		}
	}
	[Token(Token = "0x20007E8")]
	public class ReplayHandler : ITickable
	{
		[Token(Token = "0x4003401")]
		private const string FileEnd = ".txt";

		[Token(Token = "0x4003402")]
		private const string Replaydirectory = "IgnisReplays";

		[Token(Token = "0x4003403")]
		private const string ReplaySaveName = "Replay_";

		[Token(Token = "0x4003404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Queue<GameMessage> loadedGameMessages;

		[Token(Token = "0x4003405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ReplayData replayData;

		[Token(Token = "0x4003406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ReplaySettings replaySettings;

		[Token(Token = "0x4003407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameMessageData gameMessageData;

		[Token(Token = "0x4003408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ReplayRoomTimeProvider replayRoomTimeProvider;

		[Token(Token = "0x4003409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly GameMessageSerializer replayLogGameMessageSerializer;

		[Token(Token = "0x400340A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x400340B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x400340C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly RoomTimeProviderProxy roomTimeProviderProxy;

		[Token(Token = "0x400340D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly IRoomTimeProvider gameTimeProvider;

		[Token(Token = "0x400340E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly GameData gameData;

		[Token(Token = "0x400340F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4003410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly DevicePlatform devicePlatform;

		[Token(Token = "0x4003411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly SceneHandlerData sceneHandlerData;

		[Token(Token = "0x4003412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly CameraFadeData cameraFadeData;

		[Token(Token = "0x4003413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly GameMessageDownloadHandlerData gameMessageDownloadHandlerData;

		[Token(Token = "0x4003414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4003415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly DebugData debugData;

		[Token(Token = "0x4003416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4003417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly SoundTriggersList soundTriggersList;

		[Token(Token = "0x4003418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly IgnisSoundTriggerData soundTriggerData;

		[Token(Token = "0x4003419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly Transform worldTransform;

		[Token(Token = "0x400341A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private GameMessage nextGameMessage;

		[Token(Token = "0x400341B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool hasEnteredArena;

		[Token(Token = "0x400341C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private string currentFile;

		[Token(Token = "0x400341D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private string replayDirectoryPath;

		[Token(Token = "0x400341E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly List<string> availableReplays;

		[Token(Token = "0x400341F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool isPaused;

		[Token(Token = "0x4003420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
		private bool shouldAutoReplay;

		[Token(Token = "0x4003421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float nextMessageTime;

		[Token(Token = "0x4003422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float timeToStartAt;

		[Token(Token = "0x4003423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private bool randomizeMessages;

		[Token(Token = "0x4003424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		private bool jitterReplay;

		[Token(Token = "0x4003425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private int jitterMin;

		[Token(Token = "0x4003426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private int jitterMax;

		[Token(Token = "0x4003427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float jitterDelay;

		[Token(Token = "0x4003428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private bool logMessages;

		[Token(Token = "0x4003429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
		private bool stayInReplayAtEnd;

		[Token(Token = "0x400342A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x106")]
		private bool isFastForwardingUntilStartOfFirstRound;

		[Token(Token = "0x600237A")]
		[Address(RVA = "0x10D3708", Offset = "0x10D3708", VA = "0x10D3708")]
		public ReplayHandler(ReplayData replayData, ReplaySettings replaySettings, GameMessageData gameMessageData, ReplayRoomTimeProvider replayRoomTimeProvider, GameMessageSerializer replayLogGameMessageSerializer, EntryPoint.EntryPointData entryPointData, LockerRoomGameStateData lockerRoomGameStateData, RoomTimeProviderProxy roomTimeProviderProxy, IRoomTimeProvider gameTimeProvider, GameData gameData, IgnisNetworkConnectionData networkConnectionData, DevicePlatform devicePlatform, SceneHandlerData sceneHandlerData, CameraFadeData cameraFadeData, GameMessageDownloadHandlerData gameMessageDownloadHandlerData, ArenaGameStateData arenaGameStateData, DebugData debugData, IgnisTelemetry ignisTelemetry, SoundTriggersList soundTriggersList, IgnisSoundTriggerData soundTriggerData, Transform worldTransform)
		{
		}

		[Token(Token = "0x600237B")]
		[Address(RVA = "0x10D38F0", Offset = "0x10D38F0", VA = "0x10D38F0")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600237C")]
		[Address(RVA = "0x10D3CCC", Offset = "0x10D3CCC", VA = "0x10D3CCC")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug(DebugMenu debugMenu)
		{
		}

		[Token(Token = "0x600237D")]
		[Address(RVA = "0x10D3E10", Offset = "0x10D3E10", VA = "0x10D3E10")]
		private void ReplayAs(bool replayAsPlayerOne)
		{
		}

		[Token(Token = "0x600237E")]
		[Address(RVA = "0x10D3E48", Offset = "0x10D3E48", VA = "0x10D3E48", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600237F")]
		[Address(RVA = "0x10D446C", Offset = "0x10D446C", VA = "0x10D446C")]
		private void CleanUpReplays()
		{
		}

		[Token(Token = "0x6002380")]
		[Address(RVA = "0x10D4808", Offset = "0x10D4808", VA = "0x10D4808")]
		private void PauseReplayWithTimeScale(bool value)
		{
		}

		[Token(Token = "0x6002381")]
		[Address(RVA = "0x10D46C8", Offset = "0x10D46C8", VA = "0x10D46C8")]
		private void SetTimeScaleFromReplayData()
		{
		}

		[Token(Token = "0x6002382")]
		[Address(RVA = "0x10D4828", Offset = "0x10D4828", VA = "0x10D4828")]
		private void StartReplay(string replayToPlay, GameplayRules gameplayRules)
		{
		}

		[Token(Token = "0x6002383")]
		[Address(RVA = "0x10D4928", Offset = "0x10D4928", VA = "0x10D4928")]
		private void StartReplayFromFile(int index)
		{
		}

		[Token(Token = "0x6002384")]
		[Address(RVA = "0x10D4198", Offset = "0x10D4198", VA = "0x10D4198")]
		private void InitializeReplay(ReplayRequest replayRequest)
		{
		}

		[Token(Token = "0x6002385")]
		[Address(RVA = "0x10D4CD0", Offset = "0x10D4CD0", VA = "0x10D4CD0")]
		private void SetPlayerToReplayAs(ReplayRequest replayRequest)
		{
		}

		[Token(Token = "0x6002386")]
		[Address(RVA = "0x10D4B64", Offset = "0x10D4B64", VA = "0x10D4B64")]
		private void ShuffleMessages()
		{
		}

		[Token(Token = "0x6002387")]
		[Address(RVA = "0x10D46F4", Offset = "0x10D46F4", VA = "0x10D46F4")]
		private void PlayMessages()
		{
		}

		[Token(Token = "0x6002388")]
		[Address(RVA = "0x10D44E0", Offset = "0x10D44E0", VA = "0x10D44E0")]
		private void PlayNextMessage()
		{
		}

		[Token(Token = "0x6002389")]
		[Address(RVA = "0x10D4D9C", Offset = "0x10D4D9C", VA = "0x10D4D9C")]
		private void JumpTimeAndPlayNextMessage()
		{
		}

		[Token(Token = "0x600238A")]
		[Address(RVA = "0x10D3A98", Offset = "0x10D3A98", VA = "0x10D3A98")]
		private void LoadReplayFromEnvironmentArguments()
		{
		}

		[Token(Token = "0x600238B")]
		[Address(RVA = "0x10D4A18", Offset = "0x10D4A18", VA = "0x10D4A18")]
		private bool LoadGameMessageData(ReplayRequest request)
		{
			return default(bool);
		}

		[Token(Token = "0x600238C")]
		[Address(RVA = "0x10D5374", Offset = "0x10D5374", VA = "0x10D5374")]
		private bool LoadGameMessageFromPath(string filename, GameplayRules? requestForceGameplayRules)
		{
			return default(bool);
		}

		[Token(Token = "0x600238D")]
		[Address(RVA = "0x10D5498", Offset = "0x10D5498", VA = "0x10D5498")]
		private bool LoadGameMessagesFromAsset(int fileIndex, GameplayRules? requestForceGameplayRules)
		{
			return default(bool);
		}

		[Token(Token = "0x600238E")]
		[Address(RVA = "0x10D5524", Offset = "0x10D5524", VA = "0x10D5524")]
		private void ForceReplayGamePlayRules(GameplayRules? requestForceGameplayRules)
		{
		}

		[Token(Token = "0x600238F")]
		[Address(RVA = "0x10D5090", Offset = "0x10D5090", VA = "0x10D5090")]
		private bool LoadLatestGameMessagesFromDownloader()
		{
			return default(bool);
		}

		[Token(Token = "0x6002390")]
		[Address(RVA = "0x10D4EF8", Offset = "0x10D4EF8", VA = "0x10D4EF8")]
		private bool LoadDownloadedGameMessagesFromDownloader()
		{
			return default(bool);
		}

		[Token(Token = "0x6002391")]
		[Address(RVA = "0x10D5608", Offset = "0x10D5608", VA = "0x10D5608")]
		private bool ParseGameMessagesFromStrings(IEnumerable<string> serializedGameMessages, Queue<GameMessage> messageQueue)
		{
			return default(bool);
		}

		[Token(Token = "0x6002392")]
		[Address(RVA = "0x10D3B54", Offset = "0x10D3B54", VA = "0x10D3B54")]
		private void CheckAvailableReplays()
		{
		}

		[Token(Token = "0x6002393")]
		[Address(RVA = "0x10D3960", Offset = "0x10D3960", VA = "0x10D3960")]
		private void CreateReplayDirectory()
		{
		}
	}
	[Token(Token = "0x20007E9")]
	public class ReplayRoomTimeProvider : IRoomTimeProvider
	{
		[Token(Token = "0x400342B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float currentTime;

		[Token(Token = "0x400342C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float fixedRoomTime;

		[Token(Token = "0x6002394")]
		[Address(RVA = "0x10D5AB0", Offset = "0x10D5AB0", VA = "0x10D5AB0", Slot = "6")]
		public float GetFixedRoomTimeTargetTime()
		{
			return default(float);
		}

		[Token(Token = "0x6002395")]
		[Address(RVA = "0x10D5AB8", Offset = "0x10D5AB8", VA = "0x10D5AB8", Slot = "7")]
		public void ResetPhysicsTime()
		{
		}

		[Token(Token = "0x6002396")]
		[Address(RVA = "0x10D5C04", Offset = "0x10D5C04", VA = "0x10D5C04", Slot = "8")]
		public bool shouldRunFixedTimeOnRoomTime()
		{
			return default(bool);
		}

		[Token(Token = "0x6002397")]
		[Address(RVA = "0x10D5C0C", Offset = "0x10D5C0C", VA = "0x10D5C0C", Slot = "9")]
		public bool IsRunningFixedTimeOnRoomTime()
		{
			return default(bool);
		}

		[Token(Token = "0x6002398")]
		[Address(RVA = "0x10D5C14", Offset = "0x10D5C14", VA = "0x10D5C14", Slot = "10")]
		public void StepRoomTime(bool isGameTime)
		{
		}

		[Token(Token = "0x6002399")]
		[Address(RVA = "0x10D5C7C", Offset = "0x10D5C7C", VA = "0x10D5C7C", Slot = "11")]
		public double GetNetworkTime()
		{
			return default(double);
		}

		[Token(Token = "0x600239A")]
		[Address(RVA = "0x10D5C94", Offset = "0x10D5C94", VA = "0x10D5C94", Slot = "4")]
		public float GetRoomTime()
		{
			return default(float);
		}

		[Token(Token = "0x600239B")]
		[Address(RVA = "0x10D5C9C", Offset = "0x10D5C9C", VA = "0x10D5C9C", Slot = "5")]
		public float GetFixedRoomTime()
		{
			return default(float);
		}

		[Token(Token = "0x600239C")]
		[Address(RVA = "0x10D5CA4", Offset = "0x10D5CA4", VA = "0x10D5CA4", Slot = "12")]
		public void SetRoomCreationTime(double roomFirstSpawnTime)
		{
		}

		[Token(Token = "0x600239D")]
		[Address(RVA = "0x10D5CA8", Offset = "0x10D5CA8", VA = "0x10D5CA8", Slot = "14")]
		public double GetRoomCreationTime()
		{
			return default(double);
		}

		[Token(Token = "0x600239E")]
		[Address(RVA = "0x10D4D98", Offset = "0x10D4D98", VA = "0x10D4D98", Slot = "13")]
		public void SetRoomTimeNotSynced()
		{
		}

		[Token(Token = "0x600239F")]
		[Address(RVA = "0x10D5CB0", Offset = "0x10D5CB0", VA = "0x10D5CB0")]
		public ReplayRoomTimeProvider()
		{
		}
	}
	[Token(Token = "0x20007EA")]
	public class ReplayMenuViewHandler : ITickable
	{
		[Token(Token = "0x400342D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameMessageDownloadHandlerData gameMessageDownloadHandlerData;

		[Token(Token = "0x400342E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ReplayData replayData;

		[Token(Token = "0x400342F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4003430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x4003431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly DuelSettingsViewData duelSettingsViewData;

		[Token(Token = "0x4003432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PlayMenuViewData playMenuViewData;

		[Token(Token = "0x4003433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GlobalMatchmakingStateData globalMatchmakingStateData;

		[Token(Token = "0x4003434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ReplayMenuViewReference classicViewReference;

		[Token(Token = "0x4003435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ReplayMenuViewReference shootoutViewReference;

		[Token(Token = "0x4003436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ReplayMenuViewReference scrapperShootoutViewReference;

		[Token(Token = "0x4003437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ReplayMenuViewReference winterClassicViewReference;

		[Token(Token = "0x4003438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool showingView;

		[Token(Token = "0x4003439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool replayUpdated;

		[Token(Token = "0x400343A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private string showingMatchId;

		[Token(Token = "0x400343B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameplayRules showingMatchRules;

		[Token(Token = "0x60023A0")]
		[Address(RVA = "0x10D5CB8", Offset = "0x10D5CB8", VA = "0x10D5CB8")]
		public ReplayMenuViewHandler(GameMessageDownloadHandlerData gameMessageDownloadHandlerData, ReplayData replayData, MenuStateData menuStateData, FindFriendData findFriendData, DuelSettingsViewData duelSettingsViewData, PlayMenuViewData playMenuViewData, GlobalMatchmakingStateData globalMatchmakingStateData)
		{
		}

		[Token(Token = "0x60023A1")]
		[Address(RVA = "0x10D5D1C", Offset = "0x10D5D1C", VA = "0x10D5D1C")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x60023A2")]
		[Address(RVA = "0x10D5F3C", Offset = "0x10D5F3C", VA = "0x10D5F3C")]
		private void StartReplay()
		{
		}

		[Token(Token = "0x60023A3")]
		[Address(RVA = "0x10D5FF8", Offset = "0x10D5FF8", VA = "0x10D5FF8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60023A4")]
		[Address(RVA = "0x10D5EE8", Offset = "0x10D5EE8", VA = "0x10D5EE8")]
		private void SetActive(ReplayMenuViewReference viewReference, bool active)
		{
		}
	}
	[Token(Token = "0x20007EB")]
	public class ReplayMenuViewReference : MonoBehaviour
	{
		[Token(Token = "0x400343C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject container;

		[Token(Token = "0x400343D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button replayLatestMatchButton;

		[Token(Token = "0x400343E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI participantsText;

		[Token(Token = "0x400343F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI resultText;

		[Token(Token = "0x4003440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI timeText;

		[Token(Token = "0x4003441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Canvas canvas;

		[Token(Token = "0x60023A5")]
		[Address(RVA = "0x10D6674", Offset = "0x10D6674", VA = "0x10D6674")]
		public ReplayMenuViewReference()
		{
		}
	}
	[Token(Token = "0x20007EC")]
	[CreateAssetMenu(fileName = "ReplaySettings", menuName = "Settings/Replay/ReplaySettings", order = 1)]
	public class ReplaySettings : ScriptableObject
	{
		[Token(Token = "0x4003442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextAsset[] replayFiles;

		[Token(Token = "0x60023A6")]
		[Address(RVA = "0x10D667C", Offset = "0x10D667C", VA = "0x10D667C")]
		public ReplaySettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007ED")]
	public class DamageRecordSetting
	{
		[Token(Token = "0x4003443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float timeBetweenDamageNumbers;

		[Token(Token = "0x60023A7")]
		[Address(RVA = "0x10D6684", Offset = "0x10D6684", VA = "0x10D6684")]
		public DamageRecordSetting()
		{
		}
	}
	[Token(Token = "0x20007EE")]
	internal struct DoTData
	{
		[Token(Token = "0x4003444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float startTime;

		[Token(Token = "0x4003445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float damagePerSecond;

		[Token(Token = "0x4003446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string damageSource;

		[Token(Token = "0x60023A8")]
		[Address(RVA = "0x10D6694", Offset = "0x10D6694", VA = "0x10D6694")]
		public DoTData(float startTime, float damagePerSecond, string damageSource)
		{
		}
	}
	[Token(Token = "0x20007EF")]
	public struct PlayerDotEffect
	{
		[Token(Token = "0x4003447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IDamageOverTime iDamageOverTime;

		[Token(Token = "0x4003448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform transform;

		[Token(Token = "0x4003449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float effectTime;

		[Token(Token = "0x400344A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 lastHitPosition;

		[Token(Token = "0x60023A9")]
		[Address(RVA = "0x10D66A0", Offset = "0x10D66A0", VA = "0x10D66A0")]
		public PlayerDotEffect(IDamageOverTime iDamageOverTime, Transform transform, float effectTime, Vector3 lastHitPosition)
		{
		}
	}
	[Token(Token = "0x20007F0")]
	internal readonly struct HealthDoTData
	{
		[Token(Token = "0x400344B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly float startTime;

		[Token(Token = "0x400344C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly float damagePerSecond;

		[Token(Token = "0x400344D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly IHealth health;

		[Token(Token = "0x400344E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly float endTime;

		[Token(Token = "0x60023AA")]
		[Address(RVA = "0x10D66B0", Offset = "0x10D66B0", VA = "0x10D66B0")]
		public HealthDoTData(float startTime, float damagePerSecond, IHealth health, float endTime)
		{
		}
	}
	[Token(Token = "0x20007F1")]
	internal readonly struct ActiveDotTarget
	{
		[Token(Token = "0x400344F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int networkId;

		[Token(Token = "0x4003450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly IHealth health;

		[Token(Token = "0x60023AB")]
		[Address(RVA = "0x10D66C0", Offset = "0x10D66C0", VA = "0x10D66C0")]
		public ActiveDotTarget(int networkId, IHealth health)
		{
		}

		[Token(Token = "0x60023AC")]
		[Address(RVA = "0x10D66CC", Offset = "0x10D66CC", VA = "0x10D66CC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20007F2")]
	public readonly struct PlayerDamageRecord
	{
		[Token(Token = "0x4003451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly float damage;

		[Token(Token = "0x4003452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly float activeDotDamage;

		[Token(Token = "0x4003453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly float lagCompensatedDotDamage;

		[Token(Token = "0x60023AD")]
		[Address(RVA = "0x10D66D4", Offset = "0x10D66D4", VA = "0x10D66D4")]
		public PlayerDamageRecord(float damage, float activeDotDamage, float lagCompensatedDotDamage)
		{
		}
	}
	[Token(Token = "0x20007F3")]
	public interface IDamageRecordKeeper
	{
		[Token(Token = "0x60023AE")]
		float GetDamageForPlayerWithLagCompensation(int player);

		[Token(Token = "0x60023AF")]
		float GetDamageForPlayerWithoutLagCompensation(int player);

		[Token(Token = "0x60023B0")]
		void Tick();

		[Token(Token = "0x60023B1")]
		void ResetDamage();
	}
	[Token(Token = "0x20007F4")]
	public class DamageRecordKeeper : IDamageRecordKeeper
	{
		[Token(Token = "0x4003454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4003455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameData gameData;

		[Token(Token = "0x4003456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ParticleEffectData particleEffectData;

		[Token(Token = "0x4003457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly DamageRecordSetting damageRecordSetting;

		[Token(Token = "0x4003458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<int, PlayerDamageRecord> damageRecords;

		[Token(Token = "0x4003459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<int, PlayerDotEffect> playerDotEffects;

		[Token(Token = "0x400345A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Dictionary<int, Dictionary<int, DoTData>> playersActiveDots;

		[Token(Token = "0x400345B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<int, Dictionary<int, HealthDoTData>> otherActiveDots;

		[Token(Token = "0x400345C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<ActiveDotTarget> activeDotTargets;

		[Token(Token = "0x400345D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float DOT_LAG_COMPENSATION_MARGIN;

		[Token(Token = "0x400345E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool godMode;

		[Token(Token = "0x400345F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly GameDesignTrackingData gameDesignTrackingData;

		[Token(Token = "0x4003460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly FaceAnimationData faceAnimationData;

		[Token(Token = "0x60023B2")]
		[Address(RVA = "0x10D66E0", Offset = "0x10D66E0", VA = "0x10D66E0")]
		public DamageRecordKeeper(IRoomTimeProvider roomTimeProvider, GameData gameData, ParticleEffectData particleEffectData, DamageRecordSetting damageRecordSetting, GameDesignTrackingData gameDesignTrackingData, FaceAnimationData faceAnimationData)
		{
		}

		[Token(Token = "0x60023B3")]
		[Address(RVA = "0x10D68C0", Offset = "0x10D68C0", VA = "0x10D68C0")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x60023B4")]
		[Address(RVA = "0x10D68C4", Offset = "0x10D68C4", VA = "0x10D68C4")]
		public void OnSpawnPlayer(SpawnPlayerMessage spawnPlayerMessage)
		{
		}

		[Token(Token = "0x60023B5")]
		[Address(RVA = "0x10D69A0", Offset = "0x10D69A0", VA = "0x10D69A0", Slot = "6")]
		public void Tick()
		{
		}

		[Token(Token = "0x60023B6")]
		[Address(RVA = "0x10D69B8", Offset = "0x10D69B8", VA = "0x10D69B8")]
		private void RemoveDestroyedDots()
		{
		}

		[Token(Token = "0x60023B7")]
		[Address(RVA = "0x10D6B20", Offset = "0x10D6B20", VA = "0x10D6B20")]
		private void UpdateActiveDotDamage()
		{
		}

		[Token(Token = "0x60023B8")]
		[Address(RVA = "0x10D73C8", Offset = "0x10D73C8", VA = "0x10D73C8")]
		private void TryToTriggerDotEffect(int networkId, int effect, float damagePerSecond, float timeStamp)
		{
		}

		[Token(Token = "0x60023B9")]
		[Address(RVA = "0x10D75EC", Offset = "0x10D75EC", VA = "0x10D75EC")]
		private void TriggerDotEffect(int networkId, float damagePerSecond, float time, Vector3 position, float timeStamp)
		{
		}

		[Token(Token = "0x60023BA")]
		[Address(RVA = "0x10D77B8", Offset = "0x10D77B8", VA = "0x10D77B8")]
		public void PlayerHitByProjectile(float damage, int playerNetworkId)
		{
		}

		[Token(Token = "0x60023BB")]
		[Address(RVA = "0x10D7848", Offset = "0x10D7848", VA = "0x10D7848", Slot = "4")]
		public float GetDamageForPlayerWithLagCompensation(int player)
		{
			return default(float);
		}

		[Token(Token = "0x60023BC")]
		[Address(RVA = "0x10D78B4", Offset = "0x10D78B4", VA = "0x10D78B4", Slot = "5")]
		public float GetDamageForPlayerWithoutLagCompensation(int player)
		{
			return default(float);
		}

		[Token(Token = "0x60023BD")]
		[Address(RVA = "0x10D7914", Offset = "0x10D7914", VA = "0x10D7914")]
		private float GetActiveDotDamage(int playerNetworkId, float lagCompensation)
		{
			return default(float);
		}

		[Token(Token = "0x60023BE")]
		[Address(RVA = "0x10D7B38", Offset = "0x10D7B38", VA = "0x10D7B38")]
		public bool ThereAreActiveDotsForPlayer(int playerNetworkId)
		{
			return default(bool);
		}

		[Token(Token = "0x60023BF")]
		[Address(RVA = "0x10D7B54", Offset = "0x10D7B54", VA = "0x10D7B54", Slot = "7")]
		public void ResetDamage()
		{
		}

		[Token(Token = "0x60023C0")]
		[Address(RVA = "0x10D7C38", Offset = "0x10D7C38", VA = "0x10D7C38")]
		public void FinalizeDamageFromDot(float endTimestamp)
		{
		}

		[Token(Token = "0x60023C1")]
		[Address(RVA = "0x10D7F4C", Offset = "0x10D7F4C", VA = "0x10D7F4C")]
		public void SetFinalDamage(float playerOneDamage, float playerTwoDamage)
		{
		}

		[Token(Token = "0x60023C2")]
		[Address(RVA = "0x10D7FEC", Offset = "0x10D7FEC", VA = "0x10D7FEC")]
		public void CleanUpRound()
		{
		}

		[Token(Token = "0x60023C3")]
		[Address(RVA = "0x10D8164", Offset = "0x10D8164", VA = "0x10D8164")]
		public void CleanUp()
		{
		}

		[Token(Token = "0x60023C4")]
		[Address(RVA = "0x10D8258", Offset = "0x10D8258", VA = "0x10D8258")]
		public void DamageOverTimeStart(IDamageOverTime projectile, int playerNetworkId, float dotStartTime, string sourceName)
		{
		}

		[Token(Token = "0x60023C5")]
		[Address(RVA = "0x10D8538", Offset = "0x10D8538", VA = "0x10D8538")]
		public float DamageOverTimeEnd(Projectile projectile, int playerNetworkId, float dotEndTime)
		{
			return default(float);
		}

		[Token(Token = "0x60023C6")]
		[Address(RVA = "0x10D88A8", Offset = "0x10D88A8", VA = "0x10D88A8")]
		public void DamgeOverTimeCageStart(int playerNetworkId, float dotStartTime, float cageDamage)
		{
		}

		[Token(Token = "0x60023C7")]
		[Address(RVA = "0x10D8A30", Offset = "0x10D8A30", VA = "0x10D8A30")]
		public float DamgeOverTimeCageEnd(int playerNetworkId, float dotEndTime, float cageDamage)
		{
			return default(float);
		}

		[Token(Token = "0x60023C8")]
		[Address(RVA = "0x10D8A38", Offset = "0x10D8A38", VA = "0x10D8A38")]
		public void DamageOverTimeProjectileStart(Projectile projectile, IHealth health, int targetNetworkId, float dotStartTime)
		{
		}

		[Token(Token = "0x60023C9")]
		[Address(RVA = "0x10D8AA4", Offset = "0x10D8AA4", VA = "0x10D8AA4")]
		public void DamageOverTimeObjectStart(int projectileNetworkId, float damage, IHealth health, int targetNetworkId, float dotStartTime)
		{
		}

		[Token(Token = "0x60023CA")]
		[Address(RVA = "0x10D8CC4", Offset = "0x10D8CC4", VA = "0x10D8CC4")]
		public float DamageOvertimeProjectileEnd(int sourceNetworkId, int targetNetworkId, float dotEndTime)
		{
			return default(float);
		}

		[Token(Token = "0x60023CB")]
		[Address(RVA = "0x10D848C", Offset = "0x10D848C", VA = "0x10D848C")]
		private void HandleDamageOverTimeStart(int sourceNetworkId, float sourceDamage, int playerNetworkId, float dotStartTime, string sourceName)
		{
		}

		[Token(Token = "0x60023CC")]
		[Address(RVA = "0x10D8598", Offset = "0x10D8598", VA = "0x10D8598")]
		private float HandleDamageOverTimeEnd(int playerNetworkId, float dotEndTime, int sourceNetworkId, float sourceDamage)
		{
			return default(float);
		}

		[Token(Token = "0x60023CD")]
		[Address(RVA = "0x10D73AC", Offset = "0x10D73AC", VA = "0x10D73AC")]
		private float GetAccumulatedDamage(float damagePerSecond, float startTime, float timeToCheck, float lagCompensation)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20007F5")]
	public class RoundWonReference : MonoBehaviour
	{
		[Token(Token = "0x4003461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject notPlayed;

		[Token(Token = "0x4003462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject playerWon;

		[Token(Token = "0x4003463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image playerWonImage;

		[Token(Token = "0x60023CF")]
		[Address(RVA = "0x10D9094", Offset = "0x10D9094", VA = "0x10D9094")]
		public RoundWonReference()
		{
		}
	}
	[Token(Token = "0x20007F6")]
	public class ScoreBoardReference : MonoBehaviour
	{
		[Token(Token = "0x4003464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HealthBarReference[] healthBarReferences;

		[Token(Token = "0x4003465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Canvas canvas;

		[Token(Token = "0x4003466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("ScoreBoardTargets")]
		public Transform glowP1Target;

		[Token(Token = "0x4003467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform glowP2Target;

		[Token(Token = "0x4003468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform glow;

		[Token(Token = "0x4003469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform wreathP1Target;

		[Token(Token = "0x400346A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform wreathP2Target;

		[Token(Token = "0x400346B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform wreath;

		[Token(Token = "0x400346C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ScoreReferences scoreReferences;

		[Token(Token = "0x400346D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public MatchTimerReference matchTimers;

		[Token(Token = "0x400346E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Animaiton")]
		public AnimationLegacyStateData introAnimation;

		[Token(Token = "0x400346F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationLegacyStateData skipIntroAnimation;

		[Token(Token = "0x4003470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationLegacyStateData showScoreAnimation;

		[Token(Token = "0x4003471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AnimationLegacyStateData showWinEndScoreAnimation;

		[Token(Token = "0x4003472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public AnimationLegacyStateData loseWithZeroRoundsWonEndAnimation;

		[Token(Token = "0x4003473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public AnimationLegacyStateData loseWithOneRoundsWonEndAnimation;

		[Token(Token = "0x4003474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationLegacyStateData hideScoreAnimation;

		[Token(Token = "0x4003475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public AnimationLegacyStateData showWinEndScoreInterruptAnimation;

		[Token(Token = "0x4003476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AnimationLegacyStateData loseWithOneRoundsWonEndInterruptAnimation;

		[Token(Token = "0x4003477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public AnimationLegacyStateData loseWithZeroRoundsWonEndInterruptAnimation;

		[Token(Token = "0x4003478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject fakeAnimationWinMarker;

		[Token(Token = "0x4003479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public RoundWonReference fakeAnimationScoreReferences;

		[Token(Token = "0x400347A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Transform[] markerTargets;

		[Token(Token = "0x400347B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public ParticleSystem[] particleSystemToChangeColorOn;

		[Token(Token = "0x400347C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Header("Round Won/Lost")]
		public GameObject roundWon;

		[Token(Token = "0x400347D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public TextMeshProUGUI roundWonText;

		[Token(Token = "0x400347E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public GameObject roundLost;

		[Token(Token = "0x400347F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public TextMeshProUGUI roundLostText;

		[Token(Token = "0x4003480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Header("EndMatchScreen")]
		public Collider hitCollider;

		[Token(Token = "0x4003481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public RematchReference rematchReference;

		[Token(Token = "0x4003482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public MatchResultViewReferences localMatchResultReference;

		[Token(Token = "0x4003483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Button leaveArena;

		[Token(Token = "0x4003484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public GameObject endScreen;

		[Token(Token = "0x60023D0")]
		[Address(RVA = "0x10D909C", Offset = "0x10D909C", VA = "0x10D909C")]
		public ScoreBoardReference()
		{
		}
	}
	[Token(Token = "0x20007F7")]
	public class ScoreBoardData
	{
		[Token(Token = "0x4003485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool shouldResetScoreBoards;

		[Token(Token = "0x4003486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<ScoreBoardReference> scoreBoards;

		[Token(Token = "0x4003487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ScoreBoardReference scoreBoardPlayerOne;

		[Token(Token = "0x4003488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ScoreBoardReference scoreBoardPlayerTwo;

		[Token(Token = "0x4003489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<HealthBarReference> player1HealthBars;

		[Token(Token = "0x400348A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<HealthBarReference> player2HealthBars;

		[Token(Token = "0x400348B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Queue<int> showPlayerRequests;

		[Token(Token = "0x60023D1")]
		[Address(RVA = "0x10D90A4", Offset = "0x10D90A4", VA = "0x10D90A4")]
		public ScoreBoardData()
		{
		}
	}
	[Token(Token = "0x20007F8")]
	public class ScoreBoardViewHandler : ITickable
	{
		[Token(Token = "0x20007F9")]
		public enum WonMarkerState
		{
			[Token(Token = "0x40034BD")]
			TurnOff,
			[Token(Token = "0x40034BE")]
			PlayerOne,
			[Token(Token = "0x40034BF")]
			PlayerTwo
		}

		[Token(Token = "0x400348C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ScoreBoardData scoreBoardData;

		[Token(Token = "0x400348D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameData gameData;

		[Token(Token = "0x400348E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AnimationStateHandlerData animationStateHandlerData;

		[Token(Token = "0x400348F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly TrailerData trailerData;

		[Token(Token = "0x4003490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4003491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PlayerSettings playerSettings;

		[Token(Token = "0x4003492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4003493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly MatchRewardPredictionData matchRewardPredictionData;

		[Token(Token = "0x4003494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ReplayData replayData;

		[Token(Token = "0x4003495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly PlayerInfoPanelData playerInfoPanelData;

		[Token(Token = "0x4003496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4003497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4003498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly ArenaGameStateSettings arenaGameStateSettings;

		[Token(Token = "0x4003499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x400349A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x400349B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x400349C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x400349D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly NetworkRegionProvider networkRegionProvider;

		[Token(Token = "0x400349E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x400349F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly BayTekMatchLoopData bayTekMatchLoopData;

		[Token(Token = "0x40034A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly LockerRoomGameStateData lockerRoomGameStateData;

		[Token(Token = "0x40034A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x40034A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly PingInformationData pingInformationData;

		[Token(Token = "0x40034A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly PlayFabUserSettingsData playFabUserSettingsData;

		[Token(Token = "0x40034A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private ScoreBoardReference scoreBoardReferencePlayerOne;

		[Token(Token = "0x40034A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private ScoreBoardReference scoreBoardReferencePlayerTwo;

		[Token(Token = "0x40034A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool updateScoreBoard;

		[Token(Token = "0x40034A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform fakeAnimationTarget;

		[Token(Token = "0x40034A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Transform[] fakeAnimationTransformsToMoveTarget;

		[Token(Token = "0x40034A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private GameObject fakeAnimationWinMarker;

		[Token(Token = "0x40034AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool resetWinEffects;

		[Token(Token = "0x40034AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
		private bool hideScoreBoard;

		[Token(Token = "0x40034AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x102")]
		private bool resetScoreBoard;

		[Token(Token = "0x40034AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x103")]
		private bool showingEndRound;

		[Token(Token = "0x40034AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Transform glowTarget;

		[Token(Token = "0x40034AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Transform glow;

		[Token(Token = "0x40034B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private AnimationLegacyStateData currentShowScoreAnimation;

		[Token(Token = "0x40034B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private bool isPlayingShowScoreAnimation;

		[Token(Token = "0x40034B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
		private bool showingEndMatch;

		[Token(Token = "0x40034B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x122")]
		private bool showingIntro;

		[Token(Token = "0x40034B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private AnimationStateData currentMatchIntroAnimation;

		[Token(Token = "0x40034B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int RevealPlayer;

		[Token(Token = "0x40034B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private GameplayRules prevGamePlayRules;

		[Token(Token = "0x40034B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Transform worldParent;

		[Token(Token = "0x40034B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private ScoreBoardReference[] classicScoreBoardRef;

		[Token(Token = "0x40034B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private ScoreBoardReference[] shootoutScoreBoardRef;

		[Token(Token = "0x40034BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private ScoreBoardReference[] winterClassicScoreBoardRef;

		[Token(Token = "0x40034BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private int[] currentlyShowingPingLevel;

		[Token(Token = "0x60023D2")]
		[Address(RVA = "0x10D91D8", Offset = "0x10D91D8", VA = "0x10D91D8")]
		public ScoreBoardViewHandler(ScoreBoardData scoreBoardData, GameData gameData, AnimationStateHandlerData animationStateHandlerData, TrailerData trailerData, MatchHandlerData matchHandlerData, PlayerSettings playerSettings, ArenaGameStateData arenaGameStateData, MatchRewardPredictionData matchRewardPredictionData, ReplayData replayData, PlayerInfoPanelData playerInfoPanelData, AutoSpectateData autoSpectateData, EntryPoint.EntryPointData entryPointData, ArenaGameStateSettings arenaGameStateSettings, MessageSender messageSender, GameMessageFactory gameMessageFactory, IRoomTimeProvider roomTimeProvider, IgnisNetworkConnectionData networkConnectionData, NetworkRegionProvider networkRegionProvider, BayTekData bayTekData, BayTekMatchLoopData bayTekMatchLoopData, LockerRoomGameStateData lockerRoomGameStateData, IgnisTelemetry ignisTelemetry, PlayFabUserSettingsData playFabUserSettingsData, PingInformationData pingInformationData)
		{
		}

		[Token(Token = "0x60023D3")]
		[Address(RVA = "0x10D937C", Offset = "0x10D937C", VA = "0x10D937C")]
		public void Initialize(Transform worldParent)
		{
		}

		[Token(Token = "0x60023D4")]
		[Address(RVA = "0x10D9388", Offset = "0x10D9388", VA = "0x10D9388")]
		public void InitGameplayRules(GameplayRules gameplayRules)
		{
		}

		[Token(Token = "0x60023D5")]
		[Address(RVA = "0x10D9798", Offset = "0x10D9798", VA = "0x10D9798")]
		private void SetScoarboards(GameplayRules gameplayRules)
		{
		}

		[Token(Token = "0x60023D6")]
		[Address(RVA = "0x10DA264", Offset = "0x10DA264", VA = "0x10DA264")]
		private void LeaveMatch()
		{
		}

		[Token(Token = "0x60023D7")]
		[Address(RVA = "0x10DA284", Offset = "0x10DA284", VA = "0x10DA284")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x60023D8")]
		[Address(RVA = "0x10DA288", Offset = "0x10DA288", VA = "0x10DA288")]
		[Conditional("IGNIS_DEBUG")]
		private void ForceScoreboardVisibility(bool visible)
		{
		}

		[Token(Token = "0x60023D9")]
		[Address(RVA = "0x10DA34C", Offset = "0x10DA34C", VA = "0x10DA34C")]
		private void RejectRematch()
		{
		}

		[Token(Token = "0x60023DA")]
		[Address(RVA = "0x10DA570", Offset = "0x10DA570", VA = "0x10DA570")]
		private void AcceptRematch()
		{
		}

		[Token(Token = "0x60023DB")]
		[Address(RVA = "0x10DA458", Offset = "0x10DA458", VA = "0x10DA458")]
		public void CreateRematchResponse(bool response)
		{
		}

		[Token(Token = "0x60023DC")]
		[Address(RVA = "0x10DA608", Offset = "0x10DA608", VA = "0x10DA608")]
		private Tracking.TrackingEvent CreateMatchStateTrackingEvent(string eventName)
		{
			return null;
		}

		[Token(Token = "0x60023DD")]
		[Address(RVA = "0x10DAC74", Offset = "0x10DAC74", VA = "0x10DAC74")]
		private void SetActive(ScoreBoardReference scoreBoard, bool isActive)
		{
		}

		[Token(Token = "0x60023DE")]
		[Address(RVA = "0x10D9B20", Offset = "0x10D9B20", VA = "0x10D9B20")]
		private void HideScoreBoards()
		{
		}

		[Token(Token = "0x60023DF")]
		[Address(RVA = "0x10D9BF8", Offset = "0x10D9BF8", VA = "0x10D9BF8")]
		private void ResetScoreboards()
		{
		}

		[Token(Token = "0x60023E0")]
		[Address(RVA = "0x10DAE28", Offset = "0x10DAE28", VA = "0x10DAE28", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60023E1")]
		[Address(RVA = "0x10DBC64", Offset = "0x10DBC64", VA = "0x10DBC64")]
		private void UpdatePingIndicators()
		{
		}

		[Token(Token = "0x60023E2")]
		[Address(RVA = "0x10DBD5C", Offset = "0x10DBD5C", VA = "0x10DBD5C")]
		private void UpdatePingIncator(int playerIndex)
		{
		}

		[Token(Token = "0x60023E3")]
		[Address(RVA = "0x10DBAD0", Offset = "0x10DBAD0", VA = "0x10DBAD0")]
		private void HandleIntroLogic()
		{
		}

		[Token(Token = "0x60023E4")]
		[Address(RVA = "0x10DB1F0", Offset = "0x10DB1F0", VA = "0x10DB1F0")]
		private void ShowOpponent()
		{
		}

		[Token(Token = "0x60023E5")]
		[Address(RVA = "0x10DC198", Offset = "0x10DC198", VA = "0x10DC198")]
		private void StartAppearAnimationForPlayer(PlayerData player)
		{
		}

		[Token(Token = "0x60023E6")]
		[Address(RVA = "0x10DB308", Offset = "0x10DB308", VA = "0x10DB308")]
		private void ShowHideRoundResultBoard()
		{
		}

		[Token(Token = "0x60023E7")]
		[Address(RVA = "0x10DBBB4", Offset = "0x10DBBB4", VA = "0x10DBBB4")]
		private void StartScoreBoardAnimation()
		{
		}

		[Token(Token = "0x60023E8")]
		[Address(RVA = "0x10DC524", Offset = "0x10DC524", VA = "0x10DC524")]
		private void SetWinEffectPositions(bool isPlayerOnWinner, ScoreBoardReference scoreBoard)
		{
		}

		[Token(Token = "0x60023E9")]
		[Address(RVA = "0x10DB8B8", Offset = "0x10DB8B8", VA = "0x10DB8B8")]
		private void SetWinMarkers()
		{
		}

		[Token(Token = "0x60023EA")]
		[Address(RVA = "0x10DC1BC", Offset = "0x10DC1BC", VA = "0x10DC1BC")]
		private void StartShowScoringAnimation()
		{
		}

		[Token(Token = "0x60023EB")]
		[Address(RVA = "0x10DBBDC", Offset = "0x10DBBDC", VA = "0x10DBBDC")]
		private void SetFakeAnimationTargetPositions()
		{
		}

		[Token(Token = "0x60023EC")]
		[Address(RVA = "0x10DACE0", Offset = "0x10DACE0", VA = "0x10DACE0")]
		private void SetRoundWonMarker(RoundWonReference roundWonReference, WonMarkerState state)
		{
		}

		[Token(Token = "0x60023ED")]
		[Address(RVA = "0x10DB4E8", Offset = "0x10DB4E8", VA = "0x10DB4E8")]
		private void HandleEndMatch()
		{
		}

		[Token(Token = "0x60023EE")]
		[Address(RVA = "0x10DC634", Offset = "0x10DC634", VA = "0x10DC634")]
		private void TryToSetRematchViewActive(ScoreBoardReference scoreBoard)
		{
		}

		[Token(Token = "0x60023EF")]
		[Address(RVA = "0x10DCEF0", Offset = "0x10DCEF0", VA = "0x10DCEF0")]
		private bool IsInTournamentGame()
		{
			return default(bool);
		}

		[Token(Token = "0x60023F0")]
		[Address(RVA = "0x10DCCC4", Offset = "0x10DCCC4", VA = "0x10DCCC4")]
		private void SetWinnerResult(MatchResultViewReferences references, PlayerData playerData, bool winner, MatchResultColors colors)
		{
		}

		[Token(Token = "0x60023F1")]
		[Address(RVA = "0x10DC6D0", Offset = "0x10DC6D0", VA = "0x10DC6D0")]
		private void SetLocalPlayerReward(bool winner, MatchResultViewReferences references)
		{
		}

		[Token(Token = "0x60023F2")]
		[Address(RVA = "0x10DA3E4", Offset = "0x10DA3E4", VA = "0x10DA3E4")]
		private ScoreBoardReference GetLocalScoreBoard()
		{
			return null;
		}

		[Token(Token = "0x60023F3")]
		[Address(RVA = "0x10DC15C", Offset = "0x10DC15C", VA = "0x10DC15C")]
		private int GetPlayerIdToShowScoreFor()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20007FB")]
	public class AiData
	{
		[Token(Token = "0x40034C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int nextAiToPlay;

		[Token(Token = "0x40034C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool isPaused;

		[Token(Token = "0x40034C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int whoAmI;

		[Token(Token = "0x40034C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BotSettings currentBotSettings;

		[Token(Token = "0x40034C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EmoteHandle emoteHandle;

		[Token(Token = "0x40034C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<BarrierSlotData> barrierSlotData;

		[Token(Token = "0x40034C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PlayerData myPlayerData;

		[Token(Token = "0x40034C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PlayerReferences myPlayerReference;

		[Token(Token = "0x40034CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 myCageOrigin;

		[Token(Token = "0x40034CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BotPainData botPainData;

		[Token(Token = "0x40034CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public BotAttentionData botAttentionData;

		[Token(Token = "0x40034CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Bounds handBounds;

		[Token(Token = "0x40034CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool isPlayingEmote;

		[Token(Token = "0x40034CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool isRevealed;

		[Token(Token = "0x40034D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		public bool isInitialized;

		[Token(Token = "0x60023F9")]
		[Address(RVA = "0x10DD004", Offset = "0x10DD004", VA = "0x10DD004")]
		public AiData()
		{
		}
	}
	[Token(Token = "0x20007FC")]
	public class FollowHandBehavior : Behavior
	{
		[Token(Token = "0x40034D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BotHand hand;

		[Token(Token = "0x40034D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float giveUpTimer;

		[Token(Token = "0x60023FA")]
		[Address(RVA = "0x10DD220", Offset = "0x10DD220", VA = "0x10DD220")]
		public FollowHandBehavior(BotController controller, BotHand hand)
		{
		}

		[Token(Token = "0x60023FB")]
		[Address(RVA = "0x10DD2B8", Offset = "0x10DD2B8", VA = "0x10DD2B8", Slot = "4")]
		public override bool IsPossible()
		{
			return default(bool);
		}

		[Token(Token = "0x60023FC")]
		[Address(RVA = "0x10DD300", Offset = "0x10DD300", VA = "0x10DD300", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x60023FD")]
		[Address(RVA = "0x10DD30C", Offset = "0x10DD30C", VA = "0x10DD30C", Slot = "9")]
		public override void OnResumed()
		{
		}

		[Token(Token = "0x60023FE")]
		[Address(RVA = "0x10DD310", Offset = "0x10DD310", VA = "0x10DD310", Slot = "6")]
		public override Result Update(float deltaT)
		{
			return null;
		}
	}
	[Token(Token = "0x20007FD")]
	public class BarrierDeployBehavior : Behavior
	{
		[Token(Token = "0x40034D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BotHand hand;

		[Token(Token = "0x60023FF")]
		[Address(RVA = "0x10DD66C", Offset = "0x10DD66C", VA = "0x10DD66C")]
		public BarrierDeployBehavior(BotController controller, BotHand hand)
		{
		}

		[Token(Token = "0x6002400")]
		[Address(RVA = "0x10DD6DC", Offset = "0x10DD6DC", VA = "0x10DD6DC", Slot = "7")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002401")]
		[Address(RVA = "0x10DD6F8", Offset = "0x10DD6F8", VA = "0x10DD6F8")]
		private void AttemptToDeployBarrier(BarrierShieldTool barrier)
		{
		}

		[Token(Token = "0x6002402")]
		[Address(RVA = "0x10DD928", Offset = "0x10DD928", VA = "0x10DD928", Slot = "6")]
		public override Result Update(float deltaT)
		{
			return null;
		}
	}
	[Token(Token = "0x20007FE")]
	public class DropToolBehavior : Behavior
	{
		[Token(Token = "0x40034D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BotHand hand;

		[Token(Token = "0x6002403")]
		[Address(RVA = "0x10DDD94", Offset = "0x10DDD94", VA = "0x10DDD94")]
		public DropToolBehavior(BotController controller, BotHand hand)
		{
		}

		[Token(Token = "0x6002404")]
		[Address(RVA = "0x10DDE7C", Offset = "0x10DDE7C", VA = "0x10DDE7C", Slot = "6")]
		public override Result Update(float deltaT)
		{
			return null;
		}
	}
	[Token(Token = "0x20007FF")]
	public class IdleHandBehavior : Behavior
	{
		[Token(Token = "0x40034D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AiData aiData;

		[Token(Token = "0x40034D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BotHand hand;

		[Token(Token = "0x40034D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PickUpGunBehavior pickUpGunBehavior;

		[Token(Token = "0x40034D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timer;

		[Token(Token = "0x6002405")]
		[Address(RVA = "0x10DE110", Offset = "0x10DE110", VA = "0x10DE110")]
		public IdleHandBehavior(BotController controller, AiData aiData, BotHand hand)
		{
		}

		[Token(Token = "0x6002406")]
		[Address(RVA = "0x10DE190", Offset = "0x10DE190", VA = "0x10DE190", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002407")]
		[Address(RVA = "0x10DE2E0", Offset = "0x10DE2E0", VA = "0x10DE2E0", Slot = "6")]
		public override Result Update(float deltaT)
		{
			return null;
		}
	}
	[Token(Token = "0x2000800")]
	public class PickUpGunBehavior : Behavior
	{
		[Token(Token = "0x2000801")]
		private struct WeaponInfo
		{
			[Token(Token = "0x40034E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x40034E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int networkID;

			[Token(Token = "0x40034E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool isAvailable;
		}

		[Token(Token = "0x40034D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AiData aiData;

		[Token(Token = "0x40034DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BotHand hand;

		[Token(Token = "0x40034DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DeckToolSpawnProgressData weaponSpawner;

		[Token(Token = "0x40034DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 weaponSpawnPosition;

		[Token(Token = "0x40034DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float giveUpTimer;

		[Token(Token = "0x40034DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float inhibitUntilTimestamp;

		[Token(Token = "0x40034DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private readonly float grabDistance;

		[Token(Token = "0x6002408")]
		[Address(RVA = "0x10DE254", Offset = "0x10DE254", VA = "0x10DE254")]
		public PickUpGunBehavior(BotController controller, AiData aiData, BotHand hand)
		{
		}

		[Token(Token = "0x6002409")]
		[Address(RVA = "0x10DE540", Offset = "0x10DE540", VA = "0x10DE540", Slot = "4")]
		public override bool IsPossible()
		{
			return default(bool);
		}

		[Token(Token = "0x600240A")]
		[Address(RVA = "0x10DE870", Offset = "0x10DE870", VA = "0x10DE870", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600240B")]
		[Address(RVA = "0x10DE87C", Offset = "0x10DE87C", VA = "0x10DE87C", Slot = "7")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x600240C")]
		[Address(RVA = "0x10DE898", Offset = "0x10DE898", VA = "0x10DE898", Slot = "6")]
		public override Result Update(float deltaT)
		{
			return null;
		}

		[Token(Token = "0x600240D")]
		[Address(RVA = "0x10DF138", Offset = "0x10DF138", VA = "0x10DF138")]
		private WeaponInfo FindWeapon(ToolName toolType)
		{
			return default(WeaponInfo);
		}

		[Token(Token = "0x600240E")]
		[Address(RVA = "0x10DE5DC", Offset = "0x10DE5DC", VA = "0x10DE5DC")]
		private WeaponInfo FindClosestWeapon()
		{
			return default(WeaponInfo);
		}
	}
	[Token(Token = "0x2000802")]
	public class ShieldDefendBehavior : Behavior
	{
		[Token(Token = "0x40034E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AiData aiData;

		[Token(Token = "0x40034E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BotHand hand;

		[Token(Token = "0x40034E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float giveUpTimer;

		[Token(Token = "0x600240F")]
		[Address(RVA = "0x10DF010", Offset = "0x10DF010", VA = "0x10DF010")]
		public ShieldDefendBehavior(BotController controller, AiData aiData, BotHand hand)
		{
		}

		[Token(Token = "0x6002410")]
		[Address(RVA = "0x10DF334", Offset = "0x10DF334", VA = "0x10DF334", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002411")]
		[Address(RVA = "0x10DF358", Offset = "0x10DF358", VA = "0x10DF358", Slot = "7")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002412")]
		[Address(RVA = "0x10DF374", Offset = "0x10DF374", VA = "0x10DF374", Slot = "6")]
		public override Result Update(float deltaT)
		{
			return null;
		}
	}
	[Token(Token = "0x2000803")]
	public class ShootGunBehavior : Behavior
	{
		[Token(Token = "0x40034E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BotHand hand;

		[Token(Token = "0x40034E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float delayTimer;

		[Token(Token = "0x40034E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float aimErrorTimer;

		[Token(Token = "0x40034E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float dryFireTimer;

		[Token(Token = "0x40034EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 aimError;

		[Token(Token = "0x40034EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 vectorTarget;

		[Token(Token = "0x40034EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int chosenChargeAmount;

		[Token(Token = "0x40034ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ProfilerMarker shootGunBehaviorProfileMarker;

		[Token(Token = "0x6002413")]
		[Address(RVA = "0x10DF090", Offset = "0x10DF090", VA = "0x10DF090")]
		public ShootGunBehavior(BotController controller, BotHand hand)
		{
		}

		[Token(Token = "0x6002414")]
		[Address(RVA = "0x10DFC54", Offset = "0x10DFC54", VA = "0x10DFC54", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002415")]
		[Address(RVA = "0x10DFD98", Offset = "0x10DFD98", VA = "0x10DFD98", Slot = "7")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002416")]
		[Address(RVA = "0x10DFDB4", Offset = "0x10DFDB4", VA = "0x10DFDB4", Slot = "6")]
		public override Result Update(float deltaT)
		{
			return null;
		}

		[Token(Token = "0x6002417")]
		[Address(RVA = "0x10DFD58", Offset = "0x10DFD58", VA = "0x10DFD58")]
		private void SelectChargeStep(Tool tool)
		{
		}
	}
	[Token(Token = "0x2000804")]
	internal enum ThrowTarget
	{
		[Token(Token = "0x40034EF")]
		OPPOSING_PLAYER = 1,
		[Token(Token = "0x40034F0")]
		INCOMING_PROJECTILE,
		[Token(Token = "0x40034F1")]
		OUTSIDE_OPPOSING_CAGE
	}
	[Token(Token = "0x2000805")]
	public class ThrowGrenadeBehavior : Behavior
	{
		[Token(Token = "0x40034F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BotHand hand;

		[Token(Token = "0x40034F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float throwTime;

		[Token(Token = "0x6002418")]
		[Address(RVA = "0x10DEFA0", Offset = "0x10DEFA0", VA = "0x10DEFA0")]
		public ThrowGrenadeBehavior(BotController controller, BotHand hand)
		{
		}

		[Token(Token = "0x6002419")]
		[Address(RVA = "0x10E05A0", Offset = "0x10E05A0", VA = "0x10E05A0", Slot = "6")]
		public override Result Update(float deltaT)
		{
			return null;
		}
	}
	[Token(Token = "0x2000806")]
	public class ThrowEmptyToolBehavior : Behavior
	{
		[Token(Token = "0x40034F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BotHand hand;

		[Token(Token = "0x40034F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 throwTarget;

		[Token(Token = "0x40034F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float throwTime;

		[Token(Token = "0x600241A")]
		[Address(RVA = "0x10DDE04", Offset = "0x10DDE04", VA = "0x10DDE04")]
		public ThrowEmptyToolBehavior(BotController controller, BotHand hand)
		{
		}

		[Token(Token = "0x600241B")]
		[Address(RVA = "0x10E0BA0", Offset = "0x10E0BA0", VA = "0x10E0BA0", Slot = "6")]
		public override Result Update(float deltaT)
		{
			return null;
		}
	}
	[Token(Token = "0x2000807")]
	public class ThrowArmedGrenadeBehavior : Behavior
	{
		[Token(Token = "0x40034F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BotHand hand;

		[Token(Token = "0x40034F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 throwGoal;

		[Token(Token = "0x40034F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly RandomRange throwGoalRadius;

		[Token(Token = "0x40034FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly RandomRange throwGoalHeight;

		[Token(Token = "0x600241C")]
		[Address(RVA = "0x10E0B1C", Offset = "0x10E0B1C", VA = "0x10E0B1C")]
		public ThrowArmedGrenadeBehavior(BotController controller, BotHand hand, RandomRange throwGoalRadius, RandomRange throwGoalHeight)
		{
		}

		[Token(Token = "0x600241D")]
		[Address(RVA = "0x10E0FF4", Offset = "0x10E0FF4", VA = "0x10E0FF4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x600241E")]
		[Address(RVA = "0x10E109C", Offset = "0x10E109C", VA = "0x10E109C", Slot = "7")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x600241F")]
		[Address(RVA = "0x10E10B8", Offset = "0x10E10B8", VA = "0x10E10B8", Slot = "6")]
		public override Result Update(float deltaT)
		{
			return null;
		}
	}
	[Token(Token = "0x2000808")]
	public class ThrowAtOpponentBehavior : Behavior
	{
		[Token(Token = "0x40034FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BotHand hand;

		[Token(Token = "0x40034FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 throwTarget;

		[Token(Token = "0x6002420")]
		[Address(RVA = "0x10E0F14", Offset = "0x10E0F14", VA = "0x10E0F14")]
		public ThrowAtOpponentBehavior(BotController controller, BotHand hand)
		{
		}

		[Token(Token = "0x6002421")]
		[Address(RVA = "0x10E138C", Offset = "0x10E138C", VA = "0x10E138C", Slot = "7")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002422")]
		[Address(RVA = "0x10E13A8", Offset = "0x10E13A8", VA = "0x10E13A8", Slot = "6")]
		public override Result Update(float deltaT)
		{
			return null;
		}
	}
	[Token(Token = "0x2000809")]
	public class ThrowDefensivelyBehavior : Behavior
	{
		[Token(Token = "0x40034FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BotHand hand;

		[Token(Token = "0x40034FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 throwTarget;

		[Token(Token = "0x6002423")]
		[Address(RVA = "0x10E0F84", Offset = "0x10E0F84", VA = "0x10E0F84")]
		public ThrowDefensivelyBehavior(BotController controller, BotHand hand)
		{
		}

		[Token(Token = "0x6002424")]
		[Address(RVA = "0x10E1744", Offset = "0x10E1744", VA = "0x10E1744", Slot = "7")]
		public override void OnEnd()
		{
		}

		[Token(Token = "0x6002425")]
		[Address(RVA = "0x10E1760", Offset = "0x10E1760", VA = "0x10E1760", Slot = "6")]
		public override Result Update(float deltaT)
		{
			return null;
		}
	}
	[Token(Token = "0x200080A")]
	public class IdleHeadBehavior : Behavior
	{
		[Token(Token = "0x40034FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float reactionTimer;

		[Token(Token = "0x4003500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float reactionTime;

		[Token(Token = "0x4003501")]
		private const int MaxWatchCount = 3;

		[Token(Token = "0x4003502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IThreat[] watchList;

		[Token(Token = "0x4003503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<AttentionSubject> watchHistory;

		[Token(Token = "0x4003504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int watchListCount;

		[Token(Token = "0x6002426")]
		[Address(RVA = "0x10E1B04", Offset = "0x10E1B04", VA = "0x10E1B04")]
		public IdleHeadBehavior(BotController controller)
		{
		}

		[Token(Token = "0x6002427")]
		[Address(RVA = "0x10E1BE4", Offset = "0x10E1BE4", VA = "0x10E1BE4", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002428")]
		[Address(RVA = "0x10E1BF0", Offset = "0x10E1BF0", VA = "0x10E1BF0")]
		private float ComputeDanger(IThreat threat)
		{
			return default(float);
		}

		[Token(Token = "0x6002429")]
		[Address(RVA = "0x10E1E34", Offset = "0x10E1E34", VA = "0x10E1E34")]
		private void TestAndAddThreatToWatchList(IThreat threat)
		{
		}

		[Token(Token = "0x600242A")]
		[Address(RVA = "0x10E2314", Offset = "0x10E2314", VA = "0x10E2314")]
		private void CollectWatchList()
		{
		}

		[Token(Token = "0x600242B")]
		[Address(RVA = "0x10E25AC", Offset = "0x10E25AC", VA = "0x10E25AC")]
		private AttentionSubject ChooseSubjectFromWatchList()
		{
			return null;
		}

		[Token(Token = "0x600242C")]
		[Address(RVA = "0x10E2B24", Offset = "0x10E2B24", VA = "0x10E2B24")]
		private Vector3 GetRandomWeaponSpawnPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600242D")]
		[Address(RVA = "0x10E2BD4", Offset = "0x10E2BD4", VA = "0x10E2BD4")]
		private void UpdateWatchHistory(float roomTime)
		{
		}

		[Token(Token = "0x600242E")]
		[Address(RVA = "0x10E2CC0", Offset = "0x10E2CC0", VA = "0x10E2CC0", Slot = "6")]
		public override Result Update(float deltaT)
		{
			return null;
		}
	}
	[Token(Token = "0x200080B")]
	public class IdleBehavior : Behavior
	{
		[Token(Token = "0x200080C")]
		private enum EaseState
		{
			[Token(Token = "0x4003510")]
			None,
			[Token(Token = "0x4003511")]
			EaseIn,
			[Token(Token = "0x4003512")]
			EaseOut,
			[Token(Token = "0x4003513")]
			EaseInAndOut
		}

		[Token(Token = "0x4003505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AiData aiData;

		[Token(Token = "0x4003506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float predictInterval;

		[Token(Token = "0x4003507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BotPath safestPath;

		[Token(Token = "0x4003508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int pathNodeIndex;

		[Token(Token = "0x4003509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float nodeArrivedTime;

		[Token(Token = "0x400350A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool isMoving;

		[Token(Token = "0x400350B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private FollowHandBehavior followRightHandBehavior;

		[Token(Token = "0x400350C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private FollowHandBehavior followLeftHandBehavior;

		[Token(Token = "0x400350D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isRepathDesired;

		[Token(Token = "0x400350E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float repathTimer;

		[Token(Token = "0x600242F")]
		[Address(RVA = "0x10E30DC", Offset = "0x10E30DC", VA = "0x10E30DC")]
		public IdleBehavior(BotController controller, AiData aiData)
		{
		}

		[Token(Token = "0x6002430")]
		[Address(RVA = "0x10E3230", Offset = "0x10E3230", VA = "0x10E3230", Slot = "5")]
		public override void OnStart()
		{
		}

		[Token(Token = "0x6002431")]
		[Address(RVA = "0x10E3320", Offset = "0x10E3320", VA = "0x10E3320", Slot = "9")]
		public override void OnResumed()
		{
		}

		[Token(Token = "0x6002432")]
		[Address(RVA = "0x10E332C", Offset = "0x10E332C", VA = "0x10E332C")]
		private void ComputeEaseState(int newPathIndex)
		{
		}

		[Token(Token = "0x6002433")]
		[Address(RVA = "0x10E3408", Offset = "0x10E3408", VA = "0x10E3408")]
		private void DriveAlongPath(float deltaT)
		{
		}

		[Token(Token = "0x6002434")]
		[Address(RVA = "0x10E3364", Offset = "0x10E3364", VA = "0x10E3364")]
		private bool IsPathNodeAMovement(int i)
		{
			return default(bool);
		}

		[Token(Token = "0x6002435")]
		[Address(RVA = "0x10E36C8", Offset = "0x10E36C8", VA = "0x10E36C8")]
		private void RecomputeSafePath()
		{
		}

		[Token(Token = "0x6002436")]
		[Address(RVA = "0x10E36B8", Offset = "0x10E36B8", VA = "0x10E36B8")]
		private bool IsPathValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6002437")]
		[Address(RVA = "0x10E328C", Offset = "0x10E328C", VA = "0x10E328C")]
		private void InvalidatePath()
		{
		}

		[Token(Token = "0x6002438")]
		[Address(RVA = "0x10E37B4", Offset = "0x10E37B4", VA = "0x10E37B4", Slot = "6")]
		public override Result Update(float deltaT)
		{
			return null;
		}

		[Token(Token = "0x6002439")]
		[Address(RVA = "0x10E3BC4", Offset = "0x10E3BC4", VA = "0x10E3BC4")]
		private void RenderDebugVisualizations(float deltaT)
		{
		}
	}
	[Token(Token = "0x200080D")]
	public class BinaryMinHeap
	{
		[Token(Token = "0x4003514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BotSpacePartition.SearchNode[] heap;

		[Token(Token = "0x4003515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int heapSize;

		[Token(Token = "0x600243A")]
		[Address(RVA = "0x10E42D8", Offset = "0x10E42D8", VA = "0x10E42D8")]
		private int ParentIndex(int i)
		{
			return default(int);
		}

		[Token(Token = "0x600243B")]
		[Address(RVA = "0x10E42EC", Offset = "0x10E42EC", VA = "0x10E42EC")]
		private int LeftIndex(int i)
		{
			return default(int);
		}

		[Token(Token = "0x600243C")]
		[Address(RVA = "0x10E42F8", Offset = "0x10E42F8", VA = "0x10E42F8")]
		private int RightIndex(int i)
		{
			return default(int);
		}

		[Token(Token = "0x600243D")]
		[Address(RVA = "0x10E4304", Offset = "0x10E4304", VA = "0x10E4304")]
		public BinaryMinHeap(int maxSize)
		{
		}

		[Token(Token = "0x600243E")]
		[Address(RVA = "0x10E4370", Offset = "0x10E4370", VA = "0x10E4370")]
		public void Reset()
		{
		}

		[Token(Token = "0x600243F")]
		[Address(RVA = "0x10E4378", Offset = "0x10E4378", VA = "0x10E4378")]
		public bool Insert(BotSpacePartition.SearchNode node)
		{
			return default(bool);
		}

		[Token(Token = "0x6002440")]
		[Address(RVA = "0x10E44D8", Offset = "0x10E44D8", VA = "0x10E44D8")]
		public BotSpacePartition.SearchNode ExtractMin()
		{
			return null;
		}

		[Token(Token = "0x6002441")]
		[Address(RVA = "0x10E45A4", Offset = "0x10E45A4", VA = "0x10E45A4")]
		private void MinHeapify(int i)
		{
		}
	}
	[Token(Token = "0x200080E")]
	public class BotAttentionData
	{
		[Token(Token = "0x4003516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AttentionSubject currentSubject;

		[Token(Token = "0x4003517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly HashSet<int> threatsLookup;

		[Token(Token = "0x4003518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly List<IThreat> currentThreats;

		[Token(Token = "0x4003519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly List<Blind> blindList;

		[Token(Token = "0x400351A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Priority noisePriority;

		[Token(Token = "0x400351B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float lookAtDuration;

		[Token(Token = "0x400351C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Quaternion lookAtFromRotation;

		[Token(Token = "0x400351D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ProfilerMarker findClosestThreatMarker;

		[Token(Token = "0x6002442")]
		[Address(RVA = "0x10E4744", Offset = "0x10E4744", VA = "0x10E4744")]
		public void Reset()
		{
		}

		[Token(Token = "0x6002443")]
		[Address(RVA = "0x10E47FC", Offset = "0x10E47FC", VA = "0x10E47FC")]
		public bool IsLooking()
		{
			return default(bool);
		}

		[Token(Token = "0x6002444")]
		[Address(RVA = "0x10DF8CC", Offset = "0x10DF8CC", VA = "0x10DF8CC")]
		public IThreat FindClosestThreat(PlayerReferences botReference)
		{
			return null;
		}

		[Token(Token = "0x6002445")]
		[Address(RVA = "0x10DD0E0", Offset = "0x10DD0E0", VA = "0x10DD0E0")]
		public BotAttentionData()
		{
		}
	}
	[Token(Token = "0x200080F")]
	public enum AttentionSubjectType
	{
		[Token(Token = "0x400351F")]
		Position,
		[Token(Token = "0x4003520")]
		Transform,
		[Token(Token = "0x4003521")]
		NetworkedTransform
	}
	[Token(Token = "0x2000810")]
	public class AttentionSubject
	{
		[Token(Token = "0x4003522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Transform transform;

		[Token(Token = "0x4003523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly IThreat threat;

		[Token(Token = "0x4003524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Priority priority;

		[Token(Token = "0x4003525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly AttentionSubjectType type;

		[Token(Token = "0x4003526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 position;

		[Token(Token = "0x4003527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float timestamp;

		[Token(Token = "0x6002446")]
		[Address(RVA = "0x10E2FA4", Offset = "0x10E2FA4", VA = "0x10E2FA4")]
		public AttentionSubject(Transform player, Priority priority, float timestamp)
		{
		}

		[Token(Token = "0x6002447")]
		[Address(RVA = "0x10E2A34", Offset = "0x10E2A34", VA = "0x10E2A34")]
		public AttentionSubject(IThreat threat, Priority priority, float timestamp)
		{
		}

		[Token(Token = "0x6002448")]
		[Address(RVA = "0x10E480C", Offset = "0x10E480C", VA = "0x10E480C")]
		public AttentionSubject(Vector3 position, Priority priority, float timestamp)
		{
		}

		[Token(Token = "0x6002449")]
		[Address(RVA = "0x10E4860", Offset = "0x10E4860", VA = "0x10E4860")]
		public Vector3 GetPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600244A")]
		[Address(RVA = "0x10E4894", Offset = "0x10E4894", VA = "0x10E4894")]
		public bool IsEqual(AttentionSubject other)
		{
			return default(bool);
		}

		[Token(Token = "0x600244B")]
		[Address(RVA = "0x10E2488", Offset = "0x10E2488", VA = "0x10E2488")]
		public bool IsEqual(IThreat other)
		{
			return default(bool);
		}

		[Token(Token = "0x600244C")]
		[Address(RVA = "0x10E4A64", Offset = "0x10E4A64", VA = "0x10E4A64")]
		public bool IsValid()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000811")]
	public struct Blind
	{
		[Token(Token = "0x4003528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int networkID;

		[Token(Token = "0x4003529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float blindUntilTime;
	}
	[Token(Token = "0x2000812")]
	public class BotAttention
	{
		[Token(Token = "0x400352A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BotController me;

		[Token(Token = "0x400352B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly BotAttentionData botAttentionData;

		[Token(Token = "0x400352C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly SinglePlayerSettings singlePlayerSettings;

		[Token(Token = "0x400352D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ProfilerMarker attentionUpdateMarker;

		[Token(Token = "0x400352E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ProfilerMarker collectAllThreatsMarker;

		[Token(Token = "0x600244D")]
		[Address(RVA = "0x10E4BA0", Offset = "0x10E4BA0", VA = "0x10E4BA0")]
		public BotAttention(BotController me, BotAttentionData botAttentionData, SinglePlayerSettings singlePlayerSettings)
		{
		}

		[Token(Token = "0x600244E")]
		[Address(RVA = "0x10E4C68", Offset = "0x10E4C68", VA = "0x10E4C68")]
		public void Reset()
		{
		}

		[Token(Token = "0x600244F")]
		[Address(RVA = "0x10E4C80", Offset = "0x10E4C80", VA = "0x10E4C80")]
		public void Update(float deltaT)
		{
		}

		[Token(Token = "0x6002450")]
		[Address(RVA = "0x10E301C", Offset = "0x10E301C", VA = "0x10E301C")]
		public void LookAt(AttentionSubject subject, float duration)
		{
		}

		[Token(Token = "0x6002451")]
		[Address(RVA = "0x10DEE68", Offset = "0x10DEE68", VA = "0x10DEE68")]
		public void LookAt(Vector3 position, Priority priority, float duration)
		{
		}

		[Token(Token = "0x6002452")]
		[Address(RVA = "0x10E5AF4", Offset = "0x10E5AF4", VA = "0x10E5AF4")]
		public void LookAt(IThreat subject, Priority priority, float duration)
		{
		}

		[Token(Token = "0x6002453")]
		[Address(RVA = "0x10E5D58", Offset = "0x10E5D58", VA = "0x10E5D58")]
		public void ClearLookAt()
		{
		}

		[Token(Token = "0x6002454")]
		[Address(RVA = "0x10E5D7C", Offset = "0x10E5D7C", VA = "0x10E5D7C")]
		private Vector3 RotateAroundYAxis(Vector3 v, float angleInDegrees)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002455")]
		[Address(RVA = "0x10E53E0", Offset = "0x10E53E0", VA = "0x10E53E0")]
		private void DebugVisualization(float deltaT)
		{
		}

		[Token(Token = "0x6002456")]
		[Address(RVA = "0x10E5E54", Offset = "0x10E5E54", VA = "0x10E5E54")]
		public void OnOpponentNoise(ISource tool)
		{
		}

		[Token(Token = "0x6002457")]
		[Address(RVA = "0x10E3000", Offset = "0x10E3000", VA = "0x10E3000")]
		public void ClearOpponentNoise()
		{
		}

		[Token(Token = "0x6002458")]
		private bool IsVeryNear<T>(T thing) where T : ITransformRoots, IImpactable
		{
			return default(bool);
		}

		[Token(Token = "0x6002459")]
		private bool IsVisible<T>(T thing) where T : ITransformRoots, IImpactable
		{
			return default(bool);
		}

		[Token(Token = "0x600245A")]
		private bool CanBeNoticed<T>(T thing) where T : IImpactable, ITransformRoots, IIdentification
		{
			return default(bool);
		}

		[Token(Token = "0x600245B")]
		[Address(RVA = "0x10E5F8C", Offset = "0x10E5F8C", VA = "0x10E5F8C")]
		private bool IsNoticed(IThreat thing)
		{
			return default(bool);
		}

		[Token(Token = "0x600245C")]
		[Address(RVA = "0x10E5038", Offset = "0x10E5038", VA = "0x10E5038")]
		private void CollectAllThreats()
		{
		}

		[Token(Token = "0x600245D")]
		[Address(RVA = "0x10E6260", Offset = "0x10E6260", VA = "0x10E6260")]
		private void TryToAddThreath(IThreat threat, HashSet<int> threatsLookup, List<IThreat> threats)
		{
		}
	}
	[Token(Token = "0x2000813")]
	public class Behavior
	{
		[Token(Token = "0x2000814")]
		public enum Intention
		{
			[Token(Token = "0x4003532")]
			Continue,
			[Token(Token = "0x4003533")]
			ChangeTo,
			[Token(Token = "0x4003534")]
			SuspendFor,
			[Token(Token = "0x4003535")]
			Done
		}

		[Token(Token = "0x2000815")]
		public class Result
		{
			[Token(Token = "0x4003536")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Intention intention;

			[Token(Token = "0x4003537")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Behavior toBehavior;

			[Token(Token = "0x4003538")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string reason;

			[Token(Token = "0x6002466")]
			[Address(RVA = "0x10DD630", Offset = "0x10DD630", VA = "0x10DD630")]
			public Result(Intention intention, [Optional] Behavior toBehavior, string reason = "")
			{
			}
		}

		[Token(Token = "0x400352F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Result IntentionContinue;

		[Token(Token = "0x4003530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected BotController me;

		[Token(Token = "0x600245E")]
		[Address(RVA = "0x10DD290", Offset = "0x10DD290", VA = "0x10DD290")]
		public Behavior(BotController controller)
		{
		}

		[Token(Token = "0x600245F")]
		[Address(RVA = "0x10E6518", Offset = "0x10E6518", VA = "0x10E6518", Slot = "4")]
		public virtual bool IsPossible()
		{
			return default(bool);
		}

		[Token(Token = "0x6002460")]
		[Address(RVA = "0x10E6520", Offset = "0x10E6520", VA = "0x10E6520", Slot = "5")]
		public virtual void OnStart()
		{
		}

		[Token(Token = "0x6002461")]
		[Address(RVA = "0x10E6524", Offset = "0x10E6524", VA = "0x10E6524", Slot = "6")]
		public virtual Result Update(float deltaT)
		{
			return null;
		}

		[Token(Token = "0x6002462")]
		[Address(RVA = "0x10E65A4", Offset = "0x10E65A4", VA = "0x10E65A4", Slot = "7")]
		public virtual void OnEnd()
		{
		}

		[Token(Token = "0x6002463")]
		[Address(RVA = "0x10E65A8", Offset = "0x10E65A8", VA = "0x10E65A8", Slot = "8")]
		public virtual void OnSuspended()
		{
		}

		[Token(Token = "0x6002464")]
		[Address(RVA = "0x10E65AC", Offset = "0x10E65AC", VA = "0x10E65AC", Slot = "9")]
		public virtual void OnResumed()
		{
		}
	}
	[Token(Token = "0x2000816")]
	public class BehaviorStack
	{
		[Token(Token = "0x4003539")]
		private const int MaxBehaviorStackDepth = 8;

		[Token(Token = "0x400353A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Behavior[] stack;

		[Token(Token = "0x400353B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int stackIndex;

		[Token(Token = "0x6002467")]
		[Address(RVA = "0x10E6648", Offset = "0x10E6648", VA = "0x10E6648")]
		public void Initialize(Behavior initial)
		{
		}

		[Token(Token = "0x6002468")]
		[Address(RVA = "0x10E66D4", Offset = "0x10E66D4", VA = "0x10E66D4")]
		public bool IsRunning()
		{
			return default(bool);
		}

		[Token(Token = "0x6002469")]
		[Address(RVA = "0x10E66E4", Offset = "0x10E66E4", VA = "0x10E66E4")]
		public void Reset()
		{
		}

		[Token(Token = "0x600246A")]
		[Address(RVA = "0x10E672C", Offset = "0x10E672C", VA = "0x10E672C")]
		public void ResumeBehaviour()
		{
		}

		[Token(Token = "0x600246B")]
		[Address(RVA = "0x10E6778", Offset = "0x10E6778", VA = "0x10E6778")]
		public void Update(float deltaT)
		{
		}

		[Token(Token = "0x600246C")]
		[Address(RVA = "0x10E6A18", Offset = "0x10E6A18", VA = "0x10E6A18")]
		public BehaviorStack()
		{
		}
	}
	[Token(Token = "0x2000817")]
	public interface IAIController
	{
		[Token(Token = "0x600246D")]
		void SpawnAgent(int botOfflineId, int agentId, bool isRequest, bool generateGameMesssage, bool spawnWithOriginalColor = false);

		[Token(Token = "0x600246E")]
		void Tick();

		[Token(Token = "0x600246F")]
		void CleanUpMatch();
	}
	[Token(Token = "0x2000818")]
	public class BotController : IAIController
	{
		[Token(Token = "0x400353C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly GameData gameData;

		[Token(Token = "0x400353D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly MessageSender messageSender;

		[Token(Token = "0x400353E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x400353F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly CharacterSettings characterSettings;

		[Token(Token = "0x4003540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly BayTekData bayTekData;

		[Token(Token = "0x4003541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x4003542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GamePlayRulesData gamePlayRulesData;

		[Token(Token = "0x4003543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly DeckBuildSettings deckBuildSettings;

		[Token(Token = "0x4003544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly DeckData deckData;

		[Token(Token = "0x4003545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly List<BotSettings> listOfBotSettings;

		[Token(Token = "0x4003546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public readonly ToolSpawnData toolSpawnData;

		[Token(Token = "0x4003547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public readonly AiData aiData;

		[Token(Token = "0x4003548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public readonly CageSettings cageSettings;

		[Token(Token = "0x4003549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public readonly StraightProjectileHandlerData straightProjectileHandlerData;

		[Token(Token = "0x400354A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public readonly StraightProjectileMovementUtility straightProjectileMovementUtility;

		[Token(Token = "0x400354B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public readonly CurveProjectileHandlerData curveProjectileHandlerData;

		[Token(Token = "0x400354C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public readonly CurveProjectileMovementUtility curveProjectileMovementUtility;

		[Token(Token = "0x400354D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public readonly HelixProjectileHandlerData helixProjectileHandlerData;

		[Token(Token = "0x400354E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public readonly HelixProjectileMovementUtility helixProjectileMovementUtility;

		[Token(Token = "0x400354F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public readonly BounceProjectileHandlerData bounceProjectileHandlerData;

		[Token(Token = "0x4003550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public readonly BounceProjectileMovementUtility bounceProjectileMovementUtility;

		[Token(Token = "0x4003551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public readonly ToolThrownHandlerData toolThrownHandlerData;

		[Token(Token = "0x4003552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public readonly ToolThrownMovementUtility toolThrownMovementUtility;

		[Token(Token = "0x4003553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public readonly BarrierShieldToolHandlerData barrierData;

		[Token(Token = "0x4003554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public readonly StationaryProjectileHandlerData stationaryProjectileHandlerData;

		[Token(Token = "0x4003555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x4003556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly ArenaGameStateSettings arenaGameStateSettings;

		[Token(Token = "0x4003557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4003558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4003559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float priorRoomTime;

		[Token(Token = "0x400355A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public float moveSpeed;

		[Token(Token = "0x400355B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private readonly List<BotEmoteSettings> listOfBotEmoteSettings;

		[Token(Token = "0x400355C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float immediateDangerTimer;

		[Token(Token = "0x400355D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private float extremeDangerTimer;

		[Token(Token = "0x400355E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private IThreat noticedNewThreat;

		[Token(Token = "0x400355F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public BotAttention attentionSystem;

		[Token(Token = "0x4003560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public BotPainHandler painHandler;

		[Token(Token = "0x4003561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private readonly BehaviorStack mainBehavior;

		[Token(Token = "0x4003562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private readonly BehaviorStack headBehavior;

		[Token(Token = "0x4003563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private readonly BehaviorStack rightHandBehavior;

		[Token(Token = "0x4003564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private readonly BehaviorStack leftHandBehavior;

		[Token(Token = "0x4003565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public Vector3 headVelocity;

		[Token(Token = "0x4003566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private readonly BotHand[] hand;

		[Token(Token = "0x4003567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public readonly BotToolSettingsData[] botToolSettings;

		[Token(Token = "0x4003568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public readonly SinglePlayerSettings singlePlayerSettings;

		[Token(Token = "0x4003569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public readonly BotUtils botUtils;

		[Token(Token = "0x400356A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public readonly EmotePlaybackHandlerData botEmotePlaybackData;

		[Token(Token = "0x400356B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ProfilerMarker tickMarker;

		[Token(Token = "0x400356C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private BotSpacePartition spacePartition;

		[Token(Token = "0x400356D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private float timeAtStartOfUpdate;

		[Token(Token = "0x400356E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private MatchHandlerState lastSeenState;

		[Token(Token = "0x400356F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private List<int> relevantEmoteIds;

		[Token(Token = "0x4003570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private float lastEmoteInterruptTime;

		[Token(Token = "0x4003571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private float nextInterruptEmoteRange;

		[Token(Token = "0x6002470")]
		[Address(RVA = "0x10E6A78", Offset = "0x10E6A78", VA = "0x10E6A78")]
		public float GetTime()
		{
			return default(float);
		}

		[Token(Token = "0x6002471")]
		[Address(RVA = "0x10E6A80", Offset = "0x10E6A80", VA = "0x10E6A80")]
		public float GetMoveSpeed()
		{
			return default(float);
		}

		[Token(Token = "0x6002472")]
		[Address(RVA = "0x10E623C", Offset = "0x10E623C", VA = "0x10E623C")]
		public bool IsMyNetworkID(int networkID)
		{
			return default(bool);
		}

		[Token(Token = "0x6002473")]
		[Address(RVA = "0x10DF2B0", Offset = "0x10DF2B0", VA = "0x10DF2B0")]
		public Spawnpoint[] GetMyToolSpawnPoints()
		{
			return null;
		}

		[Token(Token = "0x6002474")]
		[Address(RVA = "0x10E0B00", Offset = "0x10E0B00", VA = "0x10E0B00")]
		public float GetCageRadius()
		{
			return default(float);
		}

		[Token(Token = "0x6002475")]
		[Address(RVA = "0x10E22E4", Offset = "0x10E22E4", VA = "0x10E22E4")]
		public bool IsOnMySideOfTheArena(Vector3 pos)
		{
			return default(bool);
		}

		[Token(Token = "0x6002476")]
		[Address(RVA = "0x10E31DC", Offset = "0x10E31DC", VA = "0x10E31DC")]
		public BotHand GetRightHand()
		{
			return null;
		}

		[Token(Token = "0x6002477")]
		[Address(RVA = "0x10E3204", Offset = "0x10E3204", VA = "0x10E3204")]
		public BotHand GetLeftHand()
		{
			return null;
		}

		[Token(Token = "0x6002478")]
		[Address(RVA = "0x10DF2F4", Offset = "0x10DF2F4", VA = "0x10DF2F4")]
		public BotHand OtherHand(BotHand thisHand)
		{
			return null;
		}

		[Token(Token = "0x6002479")]
		[Address(RVA = "0x10E044C", Offset = "0x10E044C", VA = "0x10E044C")]
		public bool IsLookingTowards(Vector3 position, float cosTolerance = 0.9f)
		{
			return default(bool);
		}

		[Token(Token = "0x600247A")]
		[Address(RVA = "0x10DFC44", Offset = "0x10DFC44", VA = "0x10DFC44")]
		public bool IsUnderAttack()
		{
			return default(bool);
		}

		[Token(Token = "0x600247B")]
		[Address(RVA = "0x10E2308", Offset = "0x10E2308", VA = "0x10E2308")]
		public void OnAttacked()
		{
		}

		[Token(Token = "0x600247C")]
		[Address(RVA = "0x10DD620", Offset = "0x10DD620", VA = "0x10DD620")]
		public bool IsInExtremeDanger()
		{
			return default(bool);
		}

		[Token(Token = "0x600247D")]
		[Address(RVA = "0x10E22FC", Offset = "0x10E22FC", VA = "0x10E22FC")]
		public void OnExtremeDanger()
		{
		}

		[Token(Token = "0x600247E")]
		[Address(RVA = "0x10E22F0", Offset = "0x10E22F0", VA = "0x10E22F0")]
		public float GetExtremeDangerThreshold()
		{
			return default(float);
		}

		[Token(Token = "0x600247F")]
		[Address(RVA = "0x10E28D0", Offset = "0x10E28D0", VA = "0x10E28D0")]
		public bool IsExtremelyDangerous(IThreat thing)
		{
			return default(bool);
		}

		[Token(Token = "0x6002480")]
		[Address(RVA = "0x10E6A88", Offset = "0x10E6A88", VA = "0x10E6A88")]
		public float GetDangerousThreshold()
		{
			return default(float);
		}

		[Token(Token = "0x6002481")]
		[Address(RVA = "0x10E2984", Offset = "0x10E2984", VA = "0x10E2984")]
		public bool IsDangerous(IThreat thing)
		{
			return default(bool);
		}

		[Token(Token = "0x6002482")]
		[Address(RVA = "0x10E6110", Offset = "0x10E6110", VA = "0x10E6110")]
		public void OnNoticedNewThreat(IThreat threat)
		{
		}

		[Token(Token = "0x6002483")]
		[Address(RVA = "0x10E3BB4", Offset = "0x10E3BB4", VA = "0x10E3BB4")]
		public bool IsNewThreatNoticed()
		{
			return default(bool);
		}

		[Token(Token = "0x6002484")]
		[Address(RVA = "0x10E6A90", Offset = "0x10E6A90", VA = "0x10E6A90")]
		public IThreat GetNewlyNoticedThreat()
		{
			return null;
		}

		[Token(Token = "0x6002485")]
		[Address(RVA = "0x10DE4A0", Offset = "0x10DE4A0", VA = "0x10DE4A0")]
		public bool CanPickUpWeapons()
		{
			return default(bool);
		}

		[Token(Token = "0x6002486")]
		[Address(RVA = "0x10E6A98", Offset = "0x10E6A98", VA = "0x10E6A98")]
		public BotToolSettingsData[] GetBotToolSettingsData()
		{
			return null;
		}

		[Token(Token = "0x6002487")]
		[Address(RVA = "0x10E6AA0", Offset = "0x10E6AA0", VA = "0x10E6AA0")]
		public BotController(GameData gameData, SinglePlayerSettings singlePlayerSettings, CageSettings cageSettings, MessageSender messageSender, GameMessageFactory gameMessageFactory, IRoomTimeProvider roomTimeProvider, ToolSpawnData toolSpawnData, AiData aiData, StraightProjectileHandlerData straightProjectileHandlerData, StraightProjectileMovementUtility straightProjectileMovementUtility, CurveProjectileHandlerData curveProjectileHandlerData, CurveProjectileMovementUtility curveProjectileMovementUtility, HelixProjectileHandlerData helixProjectileHandlerData, HelixProjectileMovementUtility helixProjectileMovementUtility, BounceProjectileHandlerData bounceProjectileHandlerData, BounceProjectileMovementUtility bounceProjectileMovementUtility, ToolThrownHandlerData toolThrownHandlerData, ToolThrownMovementUtility toolThrownMovementUtility, List<BotSettings> listOfBotSettings, BarrierShieldToolHandlerData barrierData, DamageRecordKeeper damageRecordKeeper, ArenaGameStateSettings arenaGameStateSettings, MatchHandlerData matchHandlerData, EmotePlaybackHandlerData botEmotePlaybackData, StationaryProjectileHandlerData stationaryProjectileHandlerData, BotUtils botUtils, CharacterSettings characterSettings, BayTekData bayTekData, CustomizationData customizationData, DeckBuildSettings deckBuildSettings, GamePlayRulesData gamePlayRulesData, DeckData deckData)
		{
		}

		[Token(Token = "0x6002488")]
		[Address(RVA = "0x10E7158", Offset = "0x10E7158", VA = "0x10E7158")]
		public float GetHealth()
		{
			return default(float);
		}

		[Token(Token = "0x6002489")]
		[Address(RVA = "0x10E719C", Offset = "0x10E719C", VA = "0x10E719C")]
		public void OnOpponentNoise(ISource tool)
		{
		}

		[Token(Token = "0x600248A")]
		[Address(RVA = "0x10E7288", Offset = "0x10E7288", VA = "0x10E7288", Slot = "4")]
		public void SpawnAgent(int botOfflineId, int agentId, bool isRequest, bool generateGameMesssage, bool spawnWithOriginalColor = false)
		{
		}

		[Token(Token = "0x600248B")]
		[Address(RVA = "0x10E7350", Offset = "0x10E7350", VA = "0x10E7350")]
		public void SpawnAgent(int botOfflineId, int agentId, bool isRequest, int platform, int banner, int leaguePoints, bool generateGameMesssage, bool spawnWithOriginalColor = false)
		{
		}

		[Token(Token = "0x600248C")]
		[Address(RVA = "0x10E7778", Offset = "0x10E7778", VA = "0x10E7778")]
		public void OnSpawnPlayer(SpawnPlayerMessage spawnPlayerMessage)
		{
		}

		[Token(Token = "0x600248D")]
		[Address(RVA = "0x10E77B8", Offset = "0x10E77B8", VA = "0x10E77B8")]
		public void InitializeAIPlayer(SpawnPlayerMessage spawnPlayerMessage)
		{
		}

		[Token(Token = "0x600248E")]
		[Address(RVA = "0x10E7C24", Offset = "0x10E7C24", VA = "0x10E7C24")]
		private List<ToolSet> GetAIPlayerDeck(GameplayRules gameplayRules, SpawnPlayerMessage spawnPlayerMessage)
		{
			return null;
		}

		[Token(Token = "0x600248F")]
		[Address(RVA = "0x10E7D88", Offset = "0x10E7D88", VA = "0x10E7D88")]
		public void OnToolSpawn(ToolSpawnMessage toolSpawnMessage)
		{
		}

		[Token(Token = "0x6002490")]
		[Address(RVA = "0x10E7EF0", Offset = "0x10E7EF0", VA = "0x10E7EF0")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug(DebugMenu debugMenu)
		{
		}

		[Token(Token = "0x6002491")]
		[Address(RVA = "0x10E8420", Offset = "0x10E8420", VA = "0x10E8420")]
		private bool PlayEmote(BotEmoteType emoteType)
		{
			return default(bool);
		}

		[Token(Token = "0x6002492")]
		private T GetRandomItemFromList<T>(List<T> list)
		{
			return (T)null;
		}

		[Token(Token = "0x6002493")]
		[Address(RVA = "0x10E86A8", Offset = "0x10E86A8", VA = "0x10E86A8")]
		private void PlayEmote(string emoteId)
		{
		}

		[Token(Token = "0x6002494")]
		[Address(RVA = "0x10E85E0", Offset = "0x10E85E0", VA = "0x10E85E0")]
		private void PlayEmote(BotEmoteSettings emoteSettings)
		{
		}

		[Token(Token = "0x6002495")]
		[Address(RVA = "0x10E8900", Offset = "0x10E8900", VA = "0x10E8900")]
		private void ChangeBotSetting(int settingsIndex)
		{
		}

		[Token(Token = "0x6002496")]
		[Address(RVA = "0x10E8970", Offset = "0x10E8970", VA = "0x10E8970")]
		private void PauseAI()
		{
		}

		[Token(Token = "0x6002497")]
		[Address(RVA = "0x10E8994", Offset = "0x10E8994", VA = "0x10E8994")]
		private void UpdateBodyPhysics(float deltaT)
		{
		}

		[Token(Token = "0x6002498")]
		[Address(RVA = "0x10E8C2C", Offset = "0x10E8C2C", VA = "0x10E8C2C", Slot = "5")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002499")]
		[Address(RVA = "0x10E8EB0", Offset = "0x10E8EB0", VA = "0x10E8EB0")]
		private void OnEmoteStateChanged(bool isEmoteHandleActive)
		{
		}

		[Token(Token = "0x600249A")]
		[Address(RVA = "0x10E912C", Offset = "0x10E912C", VA = "0x10E912C")]
		private bool TryToPlayIdleDependingOnMatchState()
		{
			return default(bool);
		}

		[Token(Token = "0x600249B")]
		[Address(RVA = "0x10E8F14", Offset = "0x10E8F14", VA = "0x10E8F14")]
		private void TrackMatchStates()
		{
		}

		[Token(Token = "0x600249C")]
		[Address(RVA = "0x10E9178", Offset = "0x10E9178", VA = "0x10E9178")]
		private void OnMatchStateChanged()
		{
		}

		[Token(Token = "0x600249D")]
		[Address(RVA = "0x10E8F98", Offset = "0x10E8F98", VA = "0x10E8F98")]
		private void CheckIfInterruptEmoteShouldBeTriggered(float deltaT)
		{
		}

		[Token(Token = "0x600249E")]
		[Address(RVA = "0x10E92BC", Offset = "0x10E92BC", VA = "0x10E92BC")]
		private void OnStartPlaying()
		{
		}

		[Token(Token = "0x600249F")]
		[Address(RVA = "0x10E9294", Offset = "0x10E9294", VA = "0x10E9294")]
		private void OnEndMatchAnimation(int winnerNetworkId)
		{
		}

		[Token(Token = "0x60024A0")]
		[Address(RVA = "0x10E9250", Offset = "0x10E9250", VA = "0x10E9250")]
		private void OnEndRoundAnimation(int winnerNetworkId)
		{
		}

		[Token(Token = "0x60024A1")]
		[Address(RVA = "0x10E92FC", Offset = "0x10E92FC", VA = "0x10E92FC", Slot = "6")]
		public void CleanUpMatch()
		{
		}

		[Token(Token = "0x60024A2")]
		[Address(RVA = "0x10E3798", Offset = "0x10E3798", VA = "0x10E3798")]
		public void FindSafestPath(float predictionLimit, ref BotPath path)
		{
		}

		[Token(Token = "0x60024A3")]
		[Address(RVA = "0x10E93BC", Offset = "0x10E93BC", VA = "0x10E93BC")]
		public bool IsLaser(IThreat threat)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200081A")]
	public class BotHand
	{
		[Token(Token = "0x200081B")]
		public struct HandGoal
		{
			[Token(Token = "0x400357D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x400357E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool isValid;

			[Token(Token = "0x400357F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			public bool isAimTarget;

			[Token(Token = "0x4003580")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			public bool isReaching;
		}

		[Token(Token = "0x4003574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AiData aiData;

		[Token(Token = "0x4003575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly SinglePlayerSettings singlePlayerSettings;

		[Token(Token = "0x4003576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BotController me;

		[Token(Token = "0x4003577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly WhichHand which;

		[Token(Token = "0x4003578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform transform;

		[Token(Token = "0x4003579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 velocity;

		[Token(Token = "0x400357A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion desiredRotation;

		[Token(Token = "0x400357B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private HandGoal goal;

		[Token(Token = "0x400357C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Tool weaponInHand;

		[Token(Token = "0x60024A8")]
		[Address(RVA = "0x10E9624", Offset = "0x10E9624", VA = "0x10E9624")]
		public BotHand(BotController me, AiData aiData, SinglePlayerSettings singlePlayerSettings, WhichHand which)
		{
		}

		[Token(Token = "0x60024A9")]
		[Address(RVA = "0x10E96AC", Offset = "0x10E96AC", VA = "0x10E96AC")]
		public bool IsRightHand()
		{
			return default(bool);
		}

		[Token(Token = "0x60024AA")]
		[Address(RVA = "0x10E96BC", Offset = "0x10E96BC", VA = "0x10E96BC")]
		public bool IsLeftHand()
		{
			return default(bool);
		}

		[Token(Token = "0x60024AB")]
		[Address(RVA = "0x10E96CC", Offset = "0x10E96CC", VA = "0x10E96CC")]
		public string GetName()
		{
			return null;
		}

		[Token(Token = "0x60024AC")]
		[Address(RVA = "0x10E9738", Offset = "0x10E9738", VA = "0x10E9738")]
		public void Reset()
		{
		}

		[Token(Token = "0x60024AD")]
		[Address(RVA = "0x10E9754", Offset = "0x10E9754", VA = "0x10E9754")]
		public Vector3 GetPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60024AE")]
		[Address(RVA = "0x10E9770", Offset = "0x10E9770", VA = "0x10E9770")]
		public Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60024AF")]
		[Address(RVA = "0x10E977C", Offset = "0x10E977C", VA = "0x10E977C")]
		public int GetIndex()
		{
			return default(int);
		}

		[Token(Token = "0x60024B0")]
		[Address(RVA = "0x10E9784", Offset = "0x10E9784", VA = "0x10E9784")]
		public bool IsAiming()
		{
			return default(bool);
		}

		[Token(Token = "0x60024B1")]
		[Address(RVA = "0x10E97A4", Offset = "0x10E97A4", VA = "0x10E97A4")]
		public bool HasGoal()
		{
			return default(bool);
		}

		[Token(Token = "0x60024B2")]
		[Address(RVA = "0x10E97AC", Offset = "0x10E97AC", VA = "0x10E97AC")]
		public bool HasMovementGoal()
		{
			return default(bool);
		}

		[Token(Token = "0x60024B3")]
		[Address(RVA = "0x10E97CC", Offset = "0x10E97CC", VA = "0x10E97CC")]
		public Vector3 GetGoalPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60024B4")]
		[Address(RVA = "0x10E97D8", Offset = "0x10E97D8", VA = "0x10E97D8")]
		public void SetMoveToGoal(Vector3 target)
		{
		}

		[Token(Token = "0x60024B5")]
		[Address(RVA = "0x10E97F0", Offset = "0x10E97F0", VA = "0x10E97F0")]
		public void SetAimAtGoal(Vector3 target, bool isReaching = false)
		{
		}

		[Token(Token = "0x60024B6")]
		[Address(RVA = "0x10E974C", Offset = "0x10E974C", VA = "0x10E974C")]
		public void ClearGoal()
		{
		}

		[Token(Token = "0x60024B7")]
		[Address(RVA = "0x10E980C", Offset = "0x10E980C", VA = "0x10E980C")]
		public bool IsHoldingWeaponInHand()
		{
			return default(bool);
		}

		[Token(Token = "0x60024B8")]
		[Address(RVA = "0x10E981C", Offset = "0x10E981C", VA = "0x10E981C")]
		public Tool GetWeaponInHand()
		{
			return null;
		}

		[Token(Token = "0x60024B9")]
		[Address(RVA = "0x10E9824", Offset = "0x10E9824", VA = "0x10E9824")]
		public void SetWeaponInHand(Tool weapon)
		{
		}

		[Token(Token = "0x60024BA")]
		[Address(RVA = "0x10E9744", Offset = "0x10E9744", VA = "0x10E9744")]
		public void ClearWeaponInHand()
		{
		}

		[Token(Token = "0x60024BB")]
		[Address(RVA = "0x10E982C", Offset = "0x10E982C", VA = "0x10E982C")]
		public bool IsReachable(Vector3 position)
		{
			return default(bool);
		}

		[Token(Token = "0x60024BC")]
		[Address(RVA = "0x10E98F8", Offset = "0x10E98F8", VA = "0x10E98F8")]
		public bool IsGoalReachable()
		{
			return default(bool);
		}

		[Token(Token = "0x60024BD")]
		[Address(RVA = "0x10E9904", Offset = "0x10E9904", VA = "0x10E9904")]
		public void Update(float deltaT)
		{
		}

		[Token(Token = "0x60024BE")]
		[Address(RVA = "0x10EA788", Offset = "0x10EA788", VA = "0x10EA788")]
		private Vector3 ComputeThreatAvoidanceAcceleration(IThreat threat, float handRadius, float avoidRange)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60024BF")]
		[Address(RVA = "0x10EA22C", Offset = "0x10EA22C", VA = "0x10EA22C")]
		private Vector3 ComputePainAvoidanceAcceleration()
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200081C")]
	public class BotPainData
	{
		[Token(Token = "0x4003581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayerGrabData opponentGrabData;

		[Token(Token = "0x4003582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ImminentFastMovingRay[] imminentFastMovingRay;

		[Token(Token = "0x60024C0")]
		[Address(RVA = "0x10EAB20", Offset = "0x10EAB20", VA = "0x10EAB20")]
		public bool IsOpponentHoldingFastDangerousWeapon()
		{
			return default(bool);
		}

		[Token(Token = "0x60024C1")]
		[Address(RVA = "0x10EAB68", Offset = "0x10EAB68", VA = "0x10EAB68")]
		public BotPainData()
		{
		}
	}
	[Token(Token = "0x200081D")]
	public class BotPainHandler
	{
		[Token(Token = "0x4003583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BotUtils botUtils;

		[Token(Token = "0x4003584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AiData aiData;

		[Token(Token = "0x4003585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly GameData gameData;

		[Token(Token = "0x4003586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4003587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly BarrierShieldToolHandlerData barrierData;

		[Token(Token = "0x4003588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly SinglePlayerSettings singlePlayerSettings;

		[Token(Token = "0x4003589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly BotController me;

		[Token(Token = "0x400358A")]
		private const int MaxBarrierCount = 4;

		[Token(Token = "0x400358B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly Bounds[] barrierBounds;

		[Token(Token = "0x400358C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int barrierCount;

		[Token(Token = "0x400358D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private readonly float avoidLaserDistance;

		[Token(Token = "0x400358E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly float avoidDOTDistance;

		[Token(Token = "0x400358F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private readonly float avoidNearbyDistance;

		[Token(Token = "0x4003590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly ProfilerMarker barrierBoundMarker;

		[Token(Token = "0x4003591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly ProfilerMarker updateImminentFastMarker;

		[Token(Token = "0x4003592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly ProfilerMarker willHitBoundsMarker;

		[Token(Token = "0x4003593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly ProfilerMarker isBlockedByBarrierAtTimeMarker;

		[Token(Token = "0x4003594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly ProfilerMarker computePainFromThreatAtTimeMarker;

		[Token(Token = "0x4003595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly ProfilerMarker computePainFromThreatLaserMarker;

		[Token(Token = "0x4003596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly ProfilerMarker computePainFromThreatFastMovingSetupMarker;

		[Token(Token = "0x4003597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly ProfilerMarker computePainFromThreatExtentsMarker;

		[Token(Token = "0x4003598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly ProfilerMarker computePainFromThreatSphereMarker;

		[Token(Token = "0x4003599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly ProfilerMarker computeFastDangerousWeaponPainMarker;

		[Token(Token = "0x400359A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly ProfilerMarker computePainAtTimeMarker;

		[Token(Token = "0x400359B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private ProfilerMarker GetTotalPainFromThreatsMarker;

		[Token(Token = "0x400359C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private ProfilerMarker GetTotalPainFromThreatsIsAThreatMarker;

		[Token(Token = "0x400359D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private ProfilerMarker GetTotalPainFromThreatsIsAStraightMarker;

		[Token(Token = "0x400359E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private ProfilerMarker GetTotalPainFromThreatsIsAStraightGetDataMarker;

		[Token(Token = "0x400359F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private ProfilerMarker GetTotalPainFromThreatsPositionMarker;

		[Token(Token = "0x40035A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private ProfilerMarker GetTotalPainFromThreatsIsACurveMarker;

		[Token(Token = "0x60024C2")]
		[Address(RVA = "0x10EABC0", Offset = "0x10EABC0", VA = "0x10EABC0")]
		public BotPainHandler(BotController me, BotUtils botUtils, AiData aiData, GameData gameData, MatchHandlerData matchHandlerData, BarrierShieldToolHandlerData barrierData, SinglePlayerSettings singlePlayerSettings)
		{
		}

		[Token(Token = "0x60024C3")]
		[Address(RVA = "0x10EAFC0", Offset = "0x10EAFC0", VA = "0x10EAFC0")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60024C4")]
		[Address(RVA = "0x10EB098", Offset = "0x10EB098", VA = "0x10EB098")]
		public void Tick()
		{
		}

		[Token(Token = "0x60024C5")]
		[Address(RVA = "0x10EB308", Offset = "0x10EB308", VA = "0x10EB308")]
		private void UpdateBarrierBounds()
		{
		}

		[Token(Token = "0x60024C6")]
		[Address(RVA = "0x10EB0D0", Offset = "0x10EB0D0", VA = "0x10EB0D0")]
		public void UpdateImminentFastMovingRays()
		{
		}

		[Token(Token = "0x60024C7")]
		[Address(RVA = "0x10EB450", Offset = "0x10EB450", VA = "0x10EB450")]
		private void SetImminentFastMovingRays(int hand, Tool tool)
		{
		}

		[Token(Token = "0x60024C8")]
		[Address(RVA = "0x10EBBF4", Offset = "0x10EBBF4", VA = "0x10EBBF4")]
		public bool IsOpponentAimingSniperAtMe()
		{
			return default(bool);
		}

		[Token(Token = "0x60024C9")]
		[Address(RVA = "0x10EBDC0", Offset = "0x10EBDC0", VA = "0x10EBDC0")]
		private bool IsRayIntersectingBounds(Ray ray, Bounds[] bounds, int boundsCount)
		{
			return default(bool);
		}

		[Token(Token = "0x60024CA")]
		[Address(RVA = "0x10EBE68", Offset = "0x10EBE68", VA = "0x10EBE68")]
		private bool IsRayIntersectingBounds(BotUtils.ThreatRay threatRay, Bounds[] bounds, int boundsCount)
		{
			return default(bool);
		}

		[Token(Token = "0x60024CB")]
		[Address(RVA = "0x10EBF44", Offset = "0x10EBF44", VA = "0x10EBF44")]
		private bool WillHitBounds(IThreat threat, Bounds[] inBounds, int inBoundsCount, Vector3 predictedPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x60024CC")]
		[Address(RVA = "0x10EC258", Offset = "0x10EC258", VA = "0x10EC258")]
		public bool IsBlockedByBarrierAtTime(IThreat threat, Vector3 predictedPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x60024CD")]
		[Address(RVA = "0x10EC4B4", Offset = "0x10EC4B4", VA = "0x10EC4B4")]
		private float ComputePainFromThreatAtTime(IThreat threat, BodySpheres spheres, float predictTime, Vector3 predictedPosition)
		{
			return default(float);
		}

		[Token(Token = "0x60024CE")]
		[Address(RVA = "0x10ECF10", Offset = "0x10ECF10", VA = "0x10ECF10")]
		private void DebugTheratPrediction(IThreat threat, float predictTime, Vector3 predictedPosition)
		{
		}

		[Token(Token = "0x60024CF")]
		[Address(RVA = "0x10ED2D4", Offset = "0x10ED2D4", VA = "0x10ED2D4")]
		private float ComputeFastDangerousWeaponAimPain(BodySpheres spheres)
		{
			return default(float);
		}

		[Token(Token = "0x60024D0")]
		[Address(RVA = "0x10ED464", Offset = "0x10ED464", VA = "0x10ED464")]
		public float ComputePainAtTime(BodySpheres predictPose, float predictTime)
		{
			return default(float);
		}

		[Token(Token = "0x60024D1")]
		[Address(RVA = "0x10ED4E4", Offset = "0x10ED4E4", VA = "0x10ED4E4")]
		private float GetTotalPainFromThreats(BodySpheres predictPose, float predictTime)
		{
			return default(float);
		}

		[Token(Token = "0x60024D2")]
		[Address(RVA = "0x10EDEE8", Offset = "0x10EDEE8", VA = "0x10EDEE8")]
		private void DebugPainPrediction(float predictTime, float pain, BodySpheres spheres)
		{
		}
	}
	[Token(Token = "0x200081E")]
	public struct BotPathStep
	{
		[Token(Token = "0x40035A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 position;

		[Token(Token = "0x40035A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float time;
	}
	[Token(Token = "0x200081F")]
	public struct BotPath
	{
		[Token(Token = "0x40035A3")]
		public const int MaxBotPathLength = 32;

		[Token(Token = "0x40035A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public BotPathStep[] step;

		[Token(Token = "0x40035A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int length;

		[Token(Token = "0x40035A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float pain;
	}
	[Token(Token = "0x2000820")]
	public class BotSpacePartition
	{
		[Token(Token = "0x2000821")]
		private struct VoxelPain
		{
			[Token(Token = "0x40035B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float pain;

			[Token(Token = "0x40035B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float time;
		}

		[Token(Token = "0x2000822")]
		private class VoxelPainCache
		{
			[Token(Token = "0x40035BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public VoxelPain[] cache;

			[Token(Token = "0x40035BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int count;

			[Token(Token = "0x60024E6")]
			[Address(RVA = "0x10EE5F8", Offset = "0x10EE5F8", VA = "0x10EE5F8")]
			public VoxelPainCache()
			{
			}
		}

		[Token(Token = "0x2000823")]
		public class SearchNode
		{
			[Token(Token = "0x40035BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3Int voxel;

			[Token(Token = "0x40035BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 position;

			[Token(Token = "0x40035BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float pain;

			[Token(Token = "0x40035BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float cumulativePain;

			[Token(Token = "0x40035C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float time;

			[Token(Token = "0x40035C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float travelDistance;

			[Token(Token = "0x40035C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int stepCount;

			[Token(Token = "0x40035C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public SearchNode parent;

			[Token(Token = "0x60024E7")]
			[Address(RVA = "0x10EFA64", Offset = "0x10EFA64", VA = "0x10EFA64")]
			public float Cost()
			{
				return default(float);
			}

			[Token(Token = "0x60024E8")]
			[Address(RVA = "0x10EE98C", Offset = "0x10EE98C", VA = "0x10EE98C")]
			public SearchNode()
			{
			}
		}

		[Token(Token = "0x40035A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AiData aiData;

		[Token(Token = "0x40035A8")]
		private const int maxCacheArraySize = 32;

		[Token(Token = "0x40035A9")]
		private const float cacheTimeEpsilon = 0.1f;

		[Token(Token = "0x40035AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VoxelPainCache[,,] voxelCache;

		[Token(Token = "0x40035AB")]
		private const int nodeSearchLimit = 1024;

		[Token(Token = "0x40035AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BinaryMinHeap minHeap;

		[Token(Token = "0x40035AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SearchNode[] searchNodePool;

		[Token(Token = "0x40035AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int searchNodePoolIndex;

		[Token(Token = "0x40035AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Vector3Int[] adjacentSteps;

		[Token(Token = "0x40035B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BotController me;

		[Token(Token = "0x40035B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int subdivisions;

		[Token(Token = "0x40035B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int verticalSubdivisions;

		[Token(Token = "0x40035B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float cageRadius;

		[Token(Token = "0x40035B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 cageFloorCenter;

		[Token(Token = "0x40035B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float minHeightAboveFloor;

		[Token(Token = "0x40035B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float horizontalVoxelSize;

		[Token(Token = "0x40035B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float verticalVoxelSize;

		[Token(Token = "0x60024D3")]
		[Address(RVA = "0x10EE0AC", Offset = "0x10EE0AC", VA = "0x10EE0AC")]
		public BotSpacePartition(BotController me, AiData aiData)
		{
		}

		[Token(Token = "0x60024D4")]
		[Address(RVA = "0x10EE2EC", Offset = "0x10EE2EC", VA = "0x10EE2EC")]
		private void InitializeVoxelPainCache()
		{
		}

		[Token(Token = "0x60024D5")]
		[Address(RVA = "0x10EE600", Offset = "0x10EE600", VA = "0x10EE600")]
		private void ClearCache()
		{
		}

		[Token(Token = "0x60024D6")]
		[Address(RVA = "0x10EE6A8", Offset = "0x10EE6A8", VA = "0x10EE6A8")]
		private void AddToCache(Vector3Int voxel, float pain, float time)
		{
		}

		[Token(Token = "0x60024D7")]
		[Address(RVA = "0x10EE858", Offset = "0x10EE858", VA = "0x10EE858")]
		private float GetCachedPain(Vector3Int voxel, float time)
		{
			return default(float);
		}

		[Token(Token = "0x60024D8")]
		[Address(RVA = "0x10EE4E8", Offset = "0x10EE4E8", VA = "0x10EE4E8")]
		private void InitializeSearchNodePool(int poolSize)
		{
		}

		[Token(Token = "0x60024D9")]
		[Address(RVA = "0x10EE994", Offset = "0x10EE994", VA = "0x10EE994")]
		private bool IsSearchPoolEmpty()
		{
			return default(bool);
		}

		[Token(Token = "0x60024DA")]
		[Address(RVA = "0x10EE9BC", Offset = "0x10EE9BC", VA = "0x10EE9BC")]
		private SearchNode AllocateSearchNode()
		{
			return null;
		}

		[Token(Token = "0x60024DB")]
		[Address(RVA = "0x10EEA08", Offset = "0x10EEA08", VA = "0x10EEA08")]
		private void FreeAllSearchNodes()
		{
		}

		[Token(Token = "0x60024DC")]
		[Address(RVA = "0x10EEA10", Offset = "0x10EEA10", VA = "0x10EEA10")]
		public void FindSafestPath(float predictionLimit, ref BotPath path)
		{
		}

		[Token(Token = "0x60024DD")]
		[Address(RVA = "0x10EF6B0", Offset = "0x10EF6B0", VA = "0x10EF6B0")]
		private void DrawDebugVoxels(float deltaT)
		{
		}

		[Token(Token = "0x60024DE")]
		[Address(RVA = "0x10EF610", Offset = "0x10EF610", VA = "0x10EF610")]
		public bool IsValid(Vector3Int voxel)
		{
			return default(bool);
		}

		[Token(Token = "0x60024DF")]
		[Address(RVA = "0x10EF7A8", Offset = "0x10EF7A8", VA = "0x10EF7A8")]
		public void Update(float deltaT)
		{
		}

		[Token(Token = "0x60024E0")]
		[Address(RVA = "0x10EF7C8", Offset = "0x10EF7C8", VA = "0x10EF7C8")]
		private Vector3 VoxelToWorld(Vector3Int voxel)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60024E1")]
		[Address(RVA = "0x10EF810", Offset = "0x10EF810", VA = "0x10EF810")]
		private Vector3 CylinderWarp(Vector3Int voxel)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60024E2")]
		[Address(RVA = "0x10EF59C", Offset = "0x10EF59C", VA = "0x10EF59C")]
		private Vector3 CenterOfVoxelInWorldCoordinates(Vector3Int voxel)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60024E3")]
		[Address(RVA = "0x10EF954", Offset = "0x10EF954", VA = "0x10EF954")]
		private Vector3Int WorldToVoxel(Vector3 pos)
		{
			return default(Vector3Int);
		}

		[Token(Token = "0x60024E4")]
		[Address(RVA = "0x10EF45C", Offset = "0x10EF45C", VA = "0x10EF45C")]
		private Vector3Int FindClosestVoxel(Vector3 position)
		{
			return default(Vector3Int);
		}

		[Token(Token = "0x60024E5")]
		[Address(RVA = "0x10EF9CC", Offset = "0x10EF9CC", VA = "0x10EF9CC")]
		private Vector3Int ValidateVoxelPosition(Vector3Int voxel)
		{
			return default(Vector3Int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000824")]
	public struct BotToolSettingsData
	{
		[Token(Token = "0x40035C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ToolName toolName;

		[Token(Token = "0x40035C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public BotToolSettings botToolSettings;
	}
	[Token(Token = "0x2000825")]
	[CreateAssetMenu(menuName = "Settings/SinglePlayer/BotToolSettings")]
	public class BotToolSettings : ScriptableObject
	{
		[Token(Token = "0x40035C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 5f)]
		[Tooltip("The average delay (in seconds) between shots")]
		public float shotDelay;

		[Token(Token = "0x40035C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The variation (in +/- seconds) of the shot delay")]
		[Range(0f, 5f)]
		public float shotVariation;

		[Token(Token = "0x40035C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The chance the bot will notice incoming projectiles. 0=never notice, 1=always notice. Failures are reevaluated a few times a second")]
		[Range(0f, 1f)]
		public float projectileNoticeChance;

		[Token(Token = "0x60024E9")]
		[Address(RVA = "0x10EFA6C", Offset = "0x10EFA6C", VA = "0x10EFA6C")]
		public BotToolSettings()
		{
		}
	}
	[Token(Token = "0x2000826")]
	public enum WhichHand
	{
		[Token(Token = "0x40035CA")]
		Right,
		[Token(Token = "0x40035CB")]
		Left
	}
	[Token(Token = "0x2000827")]
	public enum Who
	{
		[Token(Token = "0x40035CD")]
		Me,
		[Token(Token = "0x40035CE")]
		Opponent
	}
	[Token(Token = "0x2000828")]
	public enum BodyPart
	{
		[Token(Token = "0x40035D0")]
		RightHand,
		[Token(Token = "0x40035D1")]
		LeftHand,
		[Token(Token = "0x40035D2")]
		Head,
		[Token(Token = "0x40035D3")]
		Torso,
		[Token(Token = "0x40035D4")]
		BodyPartCount
	}
	[Token(Token = "0x2000829")]
	public enum Priority
	{
		[Token(Token = "0x40035D6")]
		None,
		[Token(Token = "0x40035D7")]
		Low,
		[Token(Token = "0x40035D8")]
		Normal,
		[Token(Token = "0x40035D9")]
		Important,
		[Token(Token = "0x40035DA")]
		Critical,
		[Token(Token = "0x40035DB")]
		PriorityCount
	}
	[Token(Token = "0x200082A")]
	public class RandomRange
	{
		[Token(Token = "0x40035DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float min;

		[Token(Token = "0x40035DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float max;

		[Token(Token = "0x60024EA")]
		[Address(RVA = "0x10EFA88", Offset = "0x10EFA88", VA = "0x10EFA88")]
		public float RandomValue()
		{
			return default(float);
		}

		[Token(Token = "0x60024EB")]
		[Address(RVA = "0x10EFA94", Offset = "0x10EFA94", VA = "0x10EFA94")]
		public RandomRange()
		{
		}
	}
	[Token(Token = "0x200082B")]
	public struct Sphere
	{
		[Token(Token = "0x40035DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 center;

		[Token(Token = "0x40035DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float radius;

		[Token(Token = "0x60024EC")]
		[Address(RVA = "0x10EFA9C", Offset = "0x10EFA9C", VA = "0x10EFA9C")]
		public float DistanceToPoint(Vector3 point)
		{
			return default(float);
		}

		[Token(Token = "0x60024ED")]
		[Address(RVA = "0x10EFB4C", Offset = "0x10EFB4C", VA = "0x10EFB4C")]
		public float DistanceToRay(Ray ray)
		{
			return default(float);
		}

		[Token(Token = "0x60024EE")]
		[Address(RVA = "0x10EFD30", Offset = "0x10EFD30", VA = "0x10EFD30")]
		public float DistanceToRaySegment(Ray ray, float segmentLength)
		{
			return default(float);
		}

		[Token(Token = "0x60024EF")]
		[Address(RVA = "0x10EFF30", Offset = "0x10EFF30", VA = "0x10EFF30")]
		public bool IntersectRay(Ray ray)
		{
			return default(bool);
		}

		[Token(Token = "0x60024F0")]
		[Address(RVA = "0x10F0120", Offset = "0x10F0120", VA = "0x10F0120")]
		public bool IntersectRay(Ray ray, out float distanceToRayOrigin)
		{
			return default(bool);
		}

		[Token(Token = "0x60024F1")]
		[Address(RVA = "0x10F0344", Offset = "0x10F0344", VA = "0x10F0344")]
		public void Expand(float amount)
		{
		}

		[Token(Token = "0x60024F2")]
		[Address(RVA = "0x10F00E4", Offset = "0x10F00E4", VA = "0x10F00E4")]
		public bool Contains(Vector3 pos)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200082C")]
	public struct BodySpheres
	{
		[Token(Token = "0x40035E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Sphere head;

		[Token(Token = "0x40035E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Sphere torso;

		[Token(Token = "0x60024F3")]
		[Address(RVA = "0x10ECEC0", Offset = "0x10ECEC0", VA = "0x10ECEC0")]
		public float DistanceToPoint(Vector3 point)
		{
			return default(float);
		}

		[Token(Token = "0x60024F4")]
		[Address(RVA = "0x10ECD00", Offset = "0x10ECD00", VA = "0x10ECD00")]
		public float DistanceToThreatRay(BotUtils.ThreatRay threatRay)
		{
			return default(float);
		}

		[Token(Token = "0x60024F5")]
		[Address(RVA = "0x10ECC94", Offset = "0x10ECC94", VA = "0x10ECC94")]
		public float DistanceToRay(Ray ray)
		{
			return default(float);
		}

		[Token(Token = "0x60024F6")]
		[Address(RVA = "0x10F0354", Offset = "0x10F0354", VA = "0x10F0354")]
		public float DistanceToRaySegment(Ray ray, float segmentLength)
		{
			return default(float);
		}

		[Token(Token = "0x60024F7")]
		[Address(RVA = "0x10F03CC", Offset = "0x10F03CC", VA = "0x10F03CC")]
		public bool IntersectRay(Ray ray)
		{
			return default(bool);
		}

		[Token(Token = "0x60024F8")]
		[Address(RVA = "0x10F0434", Offset = "0x10F0434", VA = "0x10F0434")]
		public bool IntersectRay(Ray ray, out float distance)
		{
			return default(bool);
		}

		[Token(Token = "0x60024F9")]
		[Address(RVA = "0x10ECE2C", Offset = "0x10ECE2C", VA = "0x10ECE2C")]
		public void Expand(float amount)
		{
		}

		[Token(Token = "0x60024FA")]
		[Address(RVA = "0x10ECE48", Offset = "0x10ECE48", VA = "0x10ECE48")]
		public bool Contains(Vector3 pos)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200082D")]
	public struct ImminentFastMovingRay
	{
		[Token(Token = "0x40035E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool IsValid;

		[Token(Token = "0x40035E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Ray ThreatRay;
	}
	[Token(Token = "0x200082E")]
	public class BotUtils
	{
		[Token(Token = "0x200082F")]
		public readonly struct ThreatRay
		{
			[Token(Token = "0x40035E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly List<Ray> rays;

			[Token(Token = "0x40035E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly Vector3 origin;

			[Token(Token = "0x40035EA")]
			public const int RAY_CAPACITY = 10;

			[Token(Token = "0x600250B")]
			[Address(RVA = "0x10F0CD8", Offset = "0x10F0CD8", VA = "0x10F0CD8")]
			public ThreatRay(int rayCapacity)
			{
			}

			[Token(Token = "0x600250C")]
			[Address(RVA = "0x10F0D9C", Offset = "0x10F0D9C", VA = "0x10F0D9C")]
			public ThreatRay(Vector3 origin, List<Ray> rays)
			{
			}
		}

		[Token(Token = "0x40035E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameData gameData;

		[Token(Token = "0x40035E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AiData aiData;

		[Token(Token = "0x40035E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x40035E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ToolSpawnData toolSpawnData;

		[Token(Token = "0x60024FB")]
		[Address(RVA = "0x10F04A4", Offset = "0x10F04A4", VA = "0x10F04A4")]
		public BotUtils(GameData gameData, AiData aiData, MenuStateData menuStateData, ToolSpawnData toolSpawnData)
		{
		}

		[Token(Token = "0x60024FC")]
		[Address(RVA = "0x10F04E4", Offset = "0x10F04E4", VA = "0x10F04E4")]
		public bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x60024FD")]
		[Address(RVA = "0x10EB050", Offset = "0x10EB050", VA = "0x10EB050")]
		public int GetPlayerId(Who who)
		{
			return default(int);
		}

		[Token(Token = "0x60024FE")]
		[Address(RVA = "0x10F0548", Offset = "0x10F0548", VA = "0x10F0548")]
		public PlayerReferences GetOpponentPlayerReference()
		{
			return null;
		}

		[Token(Token = "0x60024FF")]
		[Address(RVA = "0x10F05C0", Offset = "0x10F05C0", VA = "0x10F05C0")]
		public Vector3 GetOpponentCageOrigin()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002500")]
		[Address(RVA = "0x10F063C", Offset = "0x10F063C", VA = "0x10F063C")]
		public DeckToolSpawnProgressData[] GetMyToolSpawnData()
		{
			return null;
		}

		[Token(Token = "0x6002501")]
		[Address(RVA = "0x10F06CC", Offset = "0x10F06CC", VA = "0x10F06CC")]
		public DeckToolSpawnProgressData[] GetOpponentToolSpawnData()
		{
			return null;
		}

		[Token(Token = "0x6002502")]
		[Address(RVA = "0x10F0764", Offset = "0x10F0764", VA = "0x10F0764")]
		public void DrawBounds(Bounds bounds, Color color, float duration = 0.2f)
		{
		}

		[Token(Token = "0x6002503")]
		[Address(RVA = "0x10ED090", Offset = "0x10ED090", VA = "0x10ED090")]
		public void DrawCircle(Vector3 pos, float radius, Color color, float duration = 0.2f)
		{
		}

		[Token(Token = "0x6002504")]
		[Address(RVA = "0x10EB66C", Offset = "0x10EB66C", VA = "0x10EB66C")]
		public void DrawArrow(Vector3 start, Vector3 end, Color color, float duration = 0.2f)
		{
		}

		[Token(Token = "0x6002505")]
		[Address(RVA = "0x10F0AC0", Offset = "0x10F0AC0", VA = "0x10F0AC0")]
		public float EaseInOutCubic(float x)
		{
			return default(float);
		}

		[Token(Token = "0x6002506")]
		[Address(RVA = "0x10F0B60", Offset = "0x10F0B60", VA = "0x10F0B60")]
		public float EaseInCubic(float x)
		{
			return default(float);
		}

		[Token(Token = "0x6002507")]
		[Address(RVA = "0x10F0B6C", Offset = "0x10F0B6C", VA = "0x10F0B6C")]
		public float EaseOutCubic(float x)
		{
			return default(float);
		}

		[Token(Token = "0x6002508")]
		[Address(RVA = "0x10F0BE4", Offset = "0x10F0BE4", VA = "0x10F0BE4")]
		public float GenerateMoveSpeed(float mean)
		{
			return default(float);
		}

		[Token(Token = "0x6002509")]
		[Address(RVA = "0x10F0C34", Offset = "0x10F0C34", VA = "0x10F0C34")]
		private float GetArbitraryGaussianValue(float mean, float std)
		{
			return default(float);
		}

		[Token(Token = "0x600250A")]
		[Address(RVA = "0x10F0C5C", Offset = "0x10F0C5C", VA = "0x10F0C5C")]
		private float GetGaussianValue()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000830")]
	public class BotEmoteRecordData
	{
		[Token(Token = "0x40035EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isRecording;

		[Token(Token = "0x40035EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool isPlayback;

		[Token(Token = "0x40035ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly int countdownLength;

		[Token(Token = "0x40035EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly List<Mtm> recordedMessages;

		[Token(Token = "0x40035EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string emoteID;

		[Token(Token = "0x600250D")]
		[Address(RVA = "0x10F0DAC", Offset = "0x10F0DAC", VA = "0x10F0DAC")]
		public BotEmoteRecordData()
		{
		}
	}
	[Token(Token = "0x2000831")]
	public class BotEmoteRecordHandler : ITickable
	{
		[Token(Token = "0x40035F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BotEmoteRecordData botEmoteRecordData;

		[Token(Token = "0x40035F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x40035F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly InputData inputData;

		[Token(Token = "0x40035F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameData gameData;

		[Token(Token = "0x40035F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GameMessageData gameMessageData;

		[Token(Token = "0x40035F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IRoomTimeProvider gameTimeProvider;

		[Token(Token = "0x40035F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ArenaGameStateSettings arenaGameStateSettings;

		[Token(Token = "0x40035F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly IgnisSoundTriggerData soundTriggers;

		[Token(Token = "0x40035F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x40035F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool botInitialised;

		[Token(Token = "0x40035FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PlayerReferences botReferences;

		[Token(Token = "0x40035FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly Queue<GameMessage> loadedGameMessages;

		[Token(Token = "0x40035FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameMessage nextGameMessage;

		[Token(Token = "0x40035FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool countdownStarted;

		[Token(Token = "0x40035FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float countdownStartedTimestamp;

		[Token(Token = "0x40035FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int countDown;

		[Token(Token = "0x600250E")]
		[Address(RVA = "0x10F0E48", Offset = "0x10F0E48", VA = "0x10F0E48")]
		public BotEmoteRecordHandler(BotEmoteRecordData botEmoteRecordData, MenuStateData menuStateData, InputData inputData, GameData gameData, GameMessageData gameMessageData, IRoomTimeProvider gameTimeProvider, ArenaGameStateSettings arenaGameStateSettings, IgnisSoundTriggerData soundTriggers, IRoomTimeProvider roomTimeProvider)
		{
		}

		[Token(Token = "0x600250F")]
		[Address(RVA = "0x10F0F1C", Offset = "0x10F0F1C", VA = "0x10F0F1C")]
		public void SetupDebug(DebugMenu debugMenu)
		{
		}

		[Token(Token = "0x6002510")]
		[Address(RVA = "0x10F0F20", Offset = "0x10F0F20", VA = "0x10F0F20", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002511")]
		[Address(RVA = "0x10F1410", Offset = "0x10F1410", VA = "0x10F1410")]
		public void OnMovementTrackingMessage(Mtm mtm)
		{
		}

		[Token(Token = "0x6002512")]
		[Address(RVA = "0x10F14DC", Offset = "0x10F14DC", VA = "0x10F14DC")]
		private void StartCountdown()
		{
		}

		[Token(Token = "0x6002513")]
		[Address(RVA = "0x10F1220", Offset = "0x10F1220", VA = "0x10F1220")]
		private void StartRecording()
		{
		}

		[Token(Token = "0x6002514")]
		[Address(RVA = "0x10F13B4", Offset = "0x10F13B4", VA = "0x10F13B4")]
		private void StopRecording()
		{
		}

		[Token(Token = "0x6002515")]
		[Address(RVA = "0x10F1558", Offset = "0x10F1558", VA = "0x10F1558")]
		private void ClearRecording()
		{
		}

		[Token(Token = "0x6002516")]
		[Address(RVA = "0x10F1298", Offset = "0x10F1298", VA = "0x10F1298")]
		private void PlaybackRecording()
		{
		}

		[Token(Token = "0x6002517")]
		[Address(RVA = "0x10F15F0", Offset = "0x10F15F0", VA = "0x10F15F0")]
		private void PlayNextMessage()
		{
		}

		[Token(Token = "0x6002518")]
		[Address(RVA = "0x10F1690", Offset = "0x10F1690", VA = "0x10F1690")]
		private void StartPlayback()
		{
		}

		[Token(Token = "0x6002519")]
		[Address(RVA = "0x10F185C", Offset = "0x10F185C", VA = "0x10F185C")]
		private Quaternion EulerShortToRotation(Vector3UShort eulerShort)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x2000832")]
	public class CharacterBlendShapeAsset : PlayableAsset
	{
		[Token(Token = "0x4003600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private CharacterBlendShapeBehaviour template;

		[Token(Token = "0x600251A")]
		[Address(RVA = "0x10F188C", Offset = "0x10F188C", VA = "0x10F188C", Slot = "6")]
		public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
		{
			return default(Playable);
		}

		[Token(Token = "0x600251B")]
		[Address(RVA = "0x10F1934", Offset = "0x10F1934", VA = "0x10F1934")]
		public CharacterBlendShapeAsset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000833")]
	public class CharacterBlendShapeBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x4003601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Min(0f)]
		public int blendShapeIndex;

		[Token(Token = "0x4003602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 100f)]
		public float blendWeight;

		[Token(Token = "0x600251C")]
		[Address(RVA = "0x10F193C", Offset = "0x10F193C", VA = "0x10F193C")]
		public CharacterBlendShapeBehaviour()
		{
		}
	}
	[Token(Token = "0x2000834")]
	public class CharacterBlendShapeMixerBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x4003603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] blendWeights;

		[Token(Token = "0x600251D")]
		[Address(RVA = "0x10F1944", Offset = "0x10F1944", VA = "0x10F1944", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x600251E")]
		[Address(RVA = "0x10F1CAC", Offset = "0x10F1CAC", VA = "0x10F1CAC")]
		public CharacterBlendShapeMixerBehaviour()
		{
		}
	}
	[Token(Token = "0x2000835")]
	[TrackBindingType(typeof(SkinnedMeshRenderer))]
	[TrackClipType(typeof(CharacterBlendShapeAsset))]
	public class CharacterBlendShapeTrack : PlayableTrack
	{
		[Token(Token = "0x600251F")]
		[Address(RVA = "0x10F1D04", Offset = "0x10F1D04", VA = "0x10F1D04", Slot = "24")]
		public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
		{
			return default(Playable);
		}

		[Token(Token = "0x6002520")]
		[Address(RVA = "0x10F1DA4", Offset = "0x10F1DA4", VA = "0x10F1DA4")]
		public CharacterBlendShapeTrack()
		{
		}
	}
	[Token(Token = "0x2000836")]
	public readonly struct CutsceneRequest
	{
		[Token(Token = "0x4003604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string cutsceneName;

		[Token(Token = "0x4003605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool fadeInAfterCutscene;

		[Token(Token = "0x4003606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly List<TrackObject> trackObjects;

		[Token(Token = "0x6002521")]
		[Address(RVA = "0x10F1DAC", Offset = "0x10F1DAC", VA = "0x10F1DAC")]
		public CutsceneRequest(string cutsceneName, List<TrackObject> trackObjects, bool fadeInAfterCutscene)
		{
		}
	}
	[Token(Token = "0x2000837")]
	public enum CutSceneState
	{
		[Token(Token = "0x4003608")]
		Inactive,
		[Token(Token = "0x4003609")]
		Initializing,
		[Token(Token = "0x400360A")]
		Playing,
		[Token(Token = "0x400360B")]
		CleanUp,
		[Token(Token = "0x400360C")]
		Skipping,
		[Token(Token = "0x400360D")]
		Ended
	}
	[Token(Token = "0x2000838")]
	public class CutsceneData
	{
		[Token(Token = "0x400360E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isPlayingCutscene;

		[Token(Token = "0x400360F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public CutSceneState cutSceneState;

		[Token(Token = "0x4003610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<CutsceneRequest> cutsceneRequests;

		[Token(Token = "0x4003611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Queue<CutsceneSkippRequest> skippCutsceneRequest;

		[Token(Token = "0x6002522")]
		[Address(RVA = "0x10F1DC0", Offset = "0x10F1DC0", VA = "0x10F1DC0")]
		public CutsceneData()
		{
		}
	}
	[Token(Token = "0x2000839")]
	public struct CutsceneSkippRequest
	{
	}
	[Token(Token = "0x200083A")]
	public interface IPlayableDirectorFacade
	{
		[Token(Token = "0x6002523")]
		void AssignDirector(EnvironmentSceneData environmentSceneData);

		[Token(Token = "0x6002524")]
		float GetDuration();

		[Token(Token = "0x6002525")]
		void Play(TimelineAsset timeline, DirectorWrapMode wrapMode);

		[Token(Token = "0x6002526")]
		void SetReferenceValue(PropertyName name, UnityEngine.Object value);

		[Token(Token = "0x6002527")]
		void SetBindingValue(UnityEngine.Object key, UnityEngine.Object value);

		[Token(Token = "0x6002528")]
		void Stop();

		[Token(Token = "0x6002529")]
		void SkipToEnd();
	}
	[Token(Token = "0x200083B")]
	public class PlayableDirectorFacade : IPlayableDirectorFacade
	{
		[Token(Token = "0x4003612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PlayableDirector director;

		[Token(Token = "0x600252A")]
		[Address(RVA = "0x10F1E88", Offset = "0x10F1E88", VA = "0x10F1E88", Slot = "4")]
		public void AssignDirector(EnvironmentSceneData environmentSceneData)
		{
		}

		[Token(Token = "0x600252B")]
		[Address(RVA = "0x10F1EA4", Offset = "0x10F1EA4", VA = "0x10F1EA4")]
		public void AssignDirector(PlayableDirector playableDirector)
		{
		}

		[Token(Token = "0x600252C")]
		[Address(RVA = "0x10F1EAC", Offset = "0x10F1EAC", VA = "0x10F1EAC", Slot = "5")]
		public float GetDuration()
		{
			return default(float);
		}

		[Token(Token = "0x600252D")]
		[Address(RVA = "0x10F1ED0", Offset = "0x10F1ED0", VA = "0x10F1ED0", Slot = "6")]
		public void Play(TimelineAsset timeline, DirectorWrapMode wrapMode)
		{
		}

		[Token(Token = "0x600252E")]
		[Address(RVA = "0x10F1EEC", Offset = "0x10F1EEC", VA = "0x10F1EEC", Slot = "7")]
		public void SetReferenceValue(PropertyName name, UnityEngine.Object value)
		{
		}

		[Token(Token = "0x600252F")]
		[Address(RVA = "0x10F1F0C", Offset = "0x10F1F0C", VA = "0x10F1F0C", Slot = "8")]
		public void SetBindingValue(UnityEngine.Object key, UnityEngine.Object value)
		{
		}

		[Token(Token = "0x6002530")]
		[Address(RVA = "0x10F1F28", Offset = "0x10F1F28", VA = "0x10F1F28", Slot = "9")]
		public void Stop()
		{
		}

		[Token(Token = "0x6002531")]
		[Address(RVA = "0x10F1F44", Offset = "0x10F1F44", VA = "0x10F1F44", Slot = "10")]
		public void SkipToEnd()
		{
		}

		[Token(Token = "0x6002532")]
		[Address(RVA = "0x10F1F70", Offset = "0x10F1F70", VA = "0x10F1F70")]
		public PlayableDirectorFacade()
		{
		}
	}
	[Token(Token = "0x200083C")]
	public class CutsceneHandler : ITickable
	{
		[Token(Token = "0x4003613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly CutsceneData cutsceneData;

		[Token(Token = "0x4003614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IPlayableDirectorFacade currentDirector;

		[Token(Token = "0x4003615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly EnvironmentSceneData environmentSceneData;

		[Token(Token = "0x4003616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly CutsceneSettings cutsceneSettings;

		[Token(Token = "0x4003617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GameData gameData;

		[Token(Token = "0x4003618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly AiData aiData;

		[Token(Token = "0x4003619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly CharacterData characterData;

		[Token(Token = "0x400361A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x400361B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x400361C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly CharacterSyncHandlerData characterSyncHandlerData;

		[Token(Token = "0x400361D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly PlayerSpawnPointReference spawnPointReference;

		[Token(Token = "0x400361E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly TrailerData trailerData;

		[Token(Token = "0x400361F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly CameraFadeData cameraFadeData;

		[Token(Token = "0x4003620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool isCutscenePlayerAvailable;

		[Token(Token = "0x4003621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Dictionary<string, int> cutsceneLookup;

		[Token(Token = "0x4003622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Dictionary<string, TrackObject> trackObjectLookup;

		[Token(Token = "0x4003623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<TrackObject> trackObjectsToSetup;

		[Token(Token = "0x4003624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private CutsceneReference cutsceneReference;

		[Token(Token = "0x4003625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Cutscene currentCutscene;

		[Token(Token = "0x4003626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool fadeInAfterCutscene;

		[Token(Token = "0x4003627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private CutSceneState currentState;

		[Token(Token = "0x4003628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float startTimeStamp;

		[Token(Token = "0x4003629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float loadStartTimeStamp;

		[Token(Token = "0x400362A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<DialogueReference> dialogueReference;

		[Token(Token = "0x400362B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Dictionary<string, RuntimeAnimatorController> runtimeAnimatorControllers;

		[Token(Token = "0x400362C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int idleHash;

		[Token(Token = "0x6002533")]
		[Address(RVA = "0x10F1F78", Offset = "0x10F1F78", VA = "0x10F1F78")]
		public CutsceneHandler(CutsceneData cutsceneData, IPlayableDirectorFacade playableDirectorFacade, EnvironmentSceneData environmentSceneData, CutsceneSettings cutsceneSettings, GameData gameData, AiData aiData, CharacterData characterData, CustomizationData customizationData, ITimeProvider timeProvider, CharacterSyncHandlerData characterSyncHandlerData, PlayerSpawnPointReference spawnPointReference, TrailerData trailerData, CameraFadeData cameraFadeData)
		{
		}

		[Token(Token = "0x6002534")]
		[Address(RVA = "0x10F2238", Offset = "0x10F2238", VA = "0x10F2238")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6002535")]
		[Address(RVA = "0x10F2388", Offset = "0x10F2388", VA = "0x10F2388", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002536")]
		[Address(RVA = "0x10F24D8", Offset = "0x10F24D8", VA = "0x10F24D8")]
		private void HandleTimelineState()
		{
		}

		[Token(Token = "0x6002537")]
		[Address(RVA = "0x10F2A10", Offset = "0x10F2A10", VA = "0x10F2A10")]
		private void TryToEndCutscene()
		{
		}

		[Token(Token = "0x6002538")]
		[Address(RVA = "0x10F2B60", Offset = "0x10F2B60", VA = "0x10F2B60")]
		private void TrySkippCutscene()
		{
		}

		[Token(Token = "0x6002539")]
		[Address(RVA = "0x10F2900", Offset = "0x10F2900", VA = "0x10F2900")]
		private void TryToInitialize()
		{
		}

		[Token(Token = "0x600253A")]
		[Address(RVA = "0x10F2934", Offset = "0x10F2934", VA = "0x10F2934")]
		private void TimeOutInitalization()
		{
		}

		[Token(Token = "0x600253B")]
		[Address(RVA = "0x10F30E8", Offset = "0x10F30E8", VA = "0x10F30E8")]
		private void PlayCutscene()
		{
		}

		[Token(Token = "0x600253C")]
		[Address(RVA = "0x10F30B0", Offset = "0x10F30B0", VA = "0x10F30B0")]
		private void SetupTimeline()
		{
		}

		[Token(Token = "0x600253D")]
		[Address(RVA = "0x10F2878", Offset = "0x10F2878", VA = "0x10F2878")]
		private bool CheckForSkippCutscene()
		{
			return default(bool);
		}

		[Token(Token = "0x600253E")]
		[Address(RVA = "0x10F3D40", Offset = "0x10F3D40", VA = "0x10F3D40")]
		private void StartSkipCutscene()
		{
		}

		[Token(Token = "0x600253F")]
		[Address(RVA = "0x10F2CF4", Offset = "0x10F2CF4", VA = "0x10F2CF4")]
		private void CleanUpCutscene()
		{
		}

		[Token(Token = "0x6002540")]
		[Address(RVA = "0x10F3224", Offset = "0x10F3224", VA = "0x10F3224")]
		private void LogFailedInitialization()
		{
		}

		[Token(Token = "0x6002541")]
		[Address(RVA = "0x10F3DD4", Offset = "0x10F3DD4", VA = "0x10F3DD4")]
		private void RemoveDialogues()
		{
		}

		[Token(Token = "0x6002542")]
		[Address(RVA = "0x10F3EE8", Offset = "0x10F3EE8", VA = "0x10F3EE8")]
		private void ResetTrackObjects()
		{
		}

		[Token(Token = "0x6002543")]
		[Address(RVA = "0x10F2E24", Offset = "0x10F2E24", VA = "0x10F2E24")]
		private bool WaitForCharacters()
		{
			return default(bool);
		}

		[Token(Token = "0x6002544")]
		[Address(RVA = "0x10F2658", Offset = "0x10F2658", VA = "0x10F2658")]
		private void StartCutsceneFlow(CutsceneRequest cutsceneRequest)
		{
		}

		[Token(Token = "0x6002545")]
		[Address(RVA = "0x10F46AC", Offset = "0x10F46AC", VA = "0x10F46AC")]
		private void UpdateTrackLookUp(List<TrackObject> preloadedObjects)
		{
		}

		[Token(Token = "0x6002546")]
		[Address(RVA = "0x10F497C", Offset = "0x10F497C", VA = "0x10F497C")]
		private void SetOrUpdateCommonTrackedObject(TrackObject newObject)
		{
		}

		[Token(Token = "0x6002547")]
		[Address(RVA = "0x10F4580", Offset = "0x10F4580", VA = "0x10F4580")]
		private void LoadCharacters(TrackObject[] trackObjects)
		{
		}

		[Token(Token = "0x6002548")]
		[Address(RVA = "0x10F4484", Offset = "0x10F4484", VA = "0x10F4484")]
		private Cutscene GetCutsceneByName(string name)
		{
			return null;
		}

		[Token(Token = "0x6002549")]
		[Address(RVA = "0x10F2EDC", Offset = "0x10F2EDC", VA = "0x10F2EDC")]
		private void AssignCharacterReferences()
		{
		}

		[Token(Token = "0x600254A")]
		[Address(RVA = "0x10F4DBC", Offset = "0x10F4DBC", VA = "0x10F4DBC")]
		private void SetCharacterVisible(CharacterReference characterReference, bool shouldShowCharacter)
		{
		}

		[Token(Token = "0x600254B")]
		[Address(RVA = "0x10F335C", Offset = "0x10F335C", VA = "0x10F335C")]
		private void MuteTracksForTrailer(TimelineAsset timeline)
		{
		}

		[Token(Token = "0x600254C")]
		[Address(RVA = "0x10F36C8", Offset = "0x10F36C8", VA = "0x10F36C8")]
		private void SetTrackData(TimelineAsset timeline, Dictionary<string, TrackObject> trackObjects)
		{
		}

		[Token(Token = "0x600254D")]
		[Address(RVA = "0x10F6064", Offset = "0x10F6064", VA = "0x10F6064")]
		private void AssignCharacterBlendShapTrack(Dictionary<string, TrackObject> trackObjects, CharacterBlendShapeTrack blendTrack, PlayableBinding binding)
		{
		}

		[Token(Token = "0x600254E")]
		[Address(RVA = "0x10F5B24", Offset = "0x10F5B24", VA = "0x10F5B24")]
		private void AssignEmoteTrack(Dictionary<string, TrackObject> trackObjects, EmoteTrack emoteTrack, PlayableBinding binding)
		{
		}

		[Token(Token = "0x600254F")]
		[Address(RVA = "0x10F5460", Offset = "0x10F5460", VA = "0x10F5460")]
		private void AssignSpeechTrack(Dictionary<string, TrackObject> trackObjects, SpeechTrack speechTrack, PlayableBinding binding)
		{
		}

		[Token(Token = "0x6002550")]
		[Address(RVA = "0x10F5320", Offset = "0x10F5320", VA = "0x10F5320")]
		private void AssignMasterAudioTrack(Dictionary<string, TrackObject> trackObjects, PlayableBinding binding)
		{
		}

		[Token(Token = "0x6002551")]
		[Address(RVA = "0x10F514C", Offset = "0x10F514C", VA = "0x10F514C")]
		private void AssignAudioTrack(Dictionary<string, TrackObject> trackObjects, PlayableBinding binding)
		{
		}

		[Token(Token = "0x6002552")]
		[Address(RVA = "0x10F4F54", Offset = "0x10F4F54", VA = "0x10F4F54")]
		private void AssignAnimationTrack(Dictionary<string, TrackObject> trackObjects, PlayableBinding binding)
		{
		}

		[Token(Token = "0x6002553")]
		[Address(RVA = "0x10F62D4", Offset = "0x10F62D4", VA = "0x10F62D4")]
		private void AssignAnimatorToTrack(PlayableBinding binding, Animator animator, TrackObject trackObject)
		{
		}

		[Token(Token = "0x6002554")]
		[Address(RVA = "0x10F4E38", Offset = "0x10F4E38", VA = "0x10F4E38")]
		private void AssignActivationTrack(Dictionary<string, TrackObject> trackObjects, PlayableBinding binding)
		{
		}

		[Token(Token = "0x6002555")]
		[Address(RVA = "0x10F433C", Offset = "0x10F433C", VA = "0x10F433C")]
		private CharacterReference GetCharacter(TrackType trackType, string skinId)
		{
			return null;
		}

		[Token(Token = "0x6002556")]
		[Address(RVA = "0x10F6190", Offset = "0x10F6190", VA = "0x10F6190")]
		private PlayerReferences GetEmoteTarget(TrackType trackType, string id)
		{
			return null;
		}

		[Token(Token = "0x6002557")]
		[Address(RVA = "0x10F4224", Offset = "0x10F4224", VA = "0x10F4224")]
		private bool IsTrackObjectReady(TrackType trackType, string id)
		{
			return default(bool);
		}

		[Token(Token = "0x6002558")]
		[Address(RVA = "0x10F6438", Offset = "0x10F6438", VA = "0x10F6438")]
		private bool CinematicCharacterExist(string id)
		{
			return default(bool);
		}

		[Token(Token = "0x6002559")]
		[Address(RVA = "0x10F2C30", Offset = "0x10F2C30", VA = "0x10F2C30")]
		private void ChangeState(CutSceneState newState)
		{
		}
	}
	[Token(Token = "0x200083D")]
	public class CutsceneReference : MonoBehaviour
	{
		[Token(Token = "0x400362D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrackObject[] trackObjects;

		[Token(Token = "0x600255A")]
		[Address(RVA = "0x10F6498", Offset = "0x10F6498", VA = "0x10F6498")]
		public CutsceneReference()
		{
		}
	}
	[Token(Token = "0x200083E")]
	public enum TrackType
	{
		[Token(Token = "0x400362F")]
		PreloadedObject,
		[Token(Token = "0x4003630")]
		Bot,
		[Token(Token = "0x4003631")]
		PreloadedCharacter,
		[Token(Token = "0x4003632")]
		CharacterToSpawn
	}
	[Serializable]
	[Token(Token = "0x200083F")]
	public class TrackObject
	{
		[Token(Token = "0x4003633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string id;

		[Token(Token = "0x4003634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string skinId;

		[Token(Token = "0x4003635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator animator;

		[Token(Token = "0x4003636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject gameObject;

		[Token(Token = "0x4003637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioSource audioSource;

		[Token(Token = "0x4003638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform transform;

		[Token(Token = "0x4003639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TrackType trackType;

		[Token(Token = "0x600255B")]
		[Address(RVA = "0x10F64F0", Offset = "0x10F64F0", VA = "0x10F64F0")]
		public TrackObject()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000840")]
	public class Cutscene
	{
		[Token(Token = "0x400363A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x400363B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TimelineAsset timelineAsset;

		[Token(Token = "0x400363C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CutsceneReference cutsceneReference;

		[Token(Token = "0x400363D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DialogueReference dialogueReference;

		[Token(Token = "0x400363E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool setBotAsRevealedAfterCutscene;

		[Token(Token = "0x400363F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TrackObject[] trackItems;

		[Token(Token = "0x600255C")]
		[Address(RVA = "0x10F64F8", Offset = "0x10F64F8", VA = "0x10F64F8")]
		public Cutscene()
		{
		}
	}
	[Token(Token = "0x2000841")]
	[CreateAssetMenu(fileName = "CutsceneSettings", menuName = "Settings/Story/CutsceneSettings")]
	public class CutsceneSettings : ScriptableObject
	{
		[Token(Token = "0x4003640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Cutscene[] cutscenes;

		[Token(Token = "0x4003641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float waitForCharacterTimeOut;

		[Token(Token = "0x4003642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Skipp Cutscene")]
		public CutsceneSkippReference skippCutsceneReference;

		[Token(Token = "0x4003643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float skippCutsceneResetTime;

		[Token(Token = "0x4003644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float timeToSkipp;

		[Token(Token = "0x4003645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float skippCutsceneFadeOutTime;

		[Token(Token = "0x4003646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string skippLocalizedId;

		[Token(Token = "0x4003647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SymbolSpecificLocalization skippButtonLocalizationId;

		[Token(Token = "0x600255D")]
		[Address(RVA = "0x10F6558", Offset = "0x10F6558", VA = "0x10F6558")]
		public CutsceneSettings()
		{
		}
	}
	[Token(Token = "0x2000842")]
	public class CutsceneSkippHandler : ITickable
	{
		[Token(Token = "0x4003648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly CutsceneSettings cutsceneSettings;

		[Token(Token = "0x4003649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly CutsceneData cutsceneData;

		[Token(Token = "0x400364A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly InputData inputData;

		[Token(Token = "0x400364B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Transform worldParent;

		[Token(Token = "0x400364C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly AnimatedCanvasHandlerData animatedCanvasHandlerData;

		[Token(Token = "0x400364D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly AnimationStateHandlerData animationStateHandlerData;

		[Token(Token = "0x400364E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CutsceneSkippReference reference;

		[Token(Token = "0x400364F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool isShowingView;

		[Token(Token = "0x4003650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float hideTimer;

		[Token(Token = "0x4003651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float skippTimer;

		[Token(Token = "0x4003652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool isWaitingForSkippAnimationToEnd;

		[Token(Token = "0x600255E")]
		[Address(RVA = "0x10F6570", Offset = "0x10F6570", VA = "0x10F6570")]
		public CutsceneSkippHandler(CutsceneSettings cutsceneSettings, CutsceneData cutsceneData, InputData inputData, Transform worldParent, AnimatedCanvasHandlerData animatedCanvasHandlerData, AnimationStateHandlerData animationStateHandlerData)
		{
		}

		[Token(Token = "0x600255F")]
		[Address(RVA = "0x10F65C4", Offset = "0x10F65C4", VA = "0x10F65C4")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6002560")]
		[Address(RVA = "0x10F6724", Offset = "0x10F6724", VA = "0x10F6724")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6002561")]
		[Address(RVA = "0x10F6788", Offset = "0x10F6788", VA = "0x10F6788", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002562")]
		[Address(RVA = "0x10F6964", Offset = "0x10F6964", VA = "0x10F6964")]
		private void ShowUi()
		{
		}

		[Token(Token = "0x6002563")]
		[Address(RVA = "0x10F69E4", Offset = "0x10F69E4", VA = "0x10F69E4")]
		private void HideUi()
		{
		}

		[Token(Token = "0x6002564")]
		[Address(RVA = "0x10F6A50", Offset = "0x10F6A50", VA = "0x10F6A50")]
		private void SkippCutscene()
		{
		}

		[Token(Token = "0x6002565")]
		[Address(RVA = "0x10F668C", Offset = "0x10F668C", VA = "0x10F668C")]
		private void SetSkippButtonArgument()
		{
		}
	}
	[Token(Token = "0x2000843")]
	public class CutsceneSkippReference : MonoBehaviour
	{
		[Token(Token = "0x4003653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimatedCanvas animatedCanvas;

		[Token(Token = "0x4003654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocalizedText localizedText;

		[Token(Token = "0x4003655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image loadingBar;

		[Token(Token = "0x4003656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimatorStateData onSkippCutsceneAnimation;

		[Token(Token = "0x6002566")]
		[Address(RVA = "0x10F6A8C", Offset = "0x10F6A8C", VA = "0x10F6A8C")]
		public CutsceneSkippReference()
		{
		}
	}
	[Token(Token = "0x2000844")]
	[ExecuteInEditMode]
	public class CutsceneTestHandling : MonoBehaviour
	{
		[Token(Token = "0x4003657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CharacterReference[] characterReferences;

		[Token(Token = "0x4003658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerReferences[] emoteTargets;

		[Token(Token = "0x4003659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CharacterData characterData;

		[Token(Token = "0x400365A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private InputData inputData;

		[Token(Token = "0x400365B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CharacterSyncHandler characterSyncHandler;

		[Token(Token = "0x400365C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CharacterSyncHandlerData syncHandlerData;

		[Token(Token = "0x6002567")]
		[Address(RVA = "0x10F6A94", Offset = "0x10F6A94", VA = "0x10F6A94")]
		public void Update()
		{
		}

		[Token(Token = "0x6002568")]
		[Address(RVA = "0x10F6CAC", Offset = "0x10F6CAC", VA = "0x10F6CAC")]
		[ContextMenu("SetupSync")]
		public void SetupCharacterSync()
		{
		}

		[Token(Token = "0x6002569")]
		[Address(RVA = "0x10F710C", Offset = "0x10F710C", VA = "0x10F710C")]
		public CutsceneTestHandling()
		{
		}
	}
	[Token(Token = "0x2000845")]
	public class EmotePlayableAsset : PlayableAsset
	{
		[Token(Token = "0x400365D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public EmotePlayableBehaviour template;

		[Token(Token = "0x600256A")]
		[Address(RVA = "0x10F7114", Offset = "0x10F7114", VA = "0x10F7114", Slot = "6")]
		public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
		{
			return default(Playable);
		}

		[Token(Token = "0x600256B")]
		[Address(RVA = "0x10F7260", Offset = "0x10F7260", VA = "0x10F7260")]
		public EmotePlayableAsset()
		{
		}
	}
	[Token(Token = "0x2000846")]
	public struct EmoteTransform
	{
		[Token(Token = "0x400365E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 position;

		[Token(Token = "0x400365F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion rotation;

		[Token(Token = "0x600256C")]
		[Address(RVA = "0x10F7268", Offset = "0x10F7268", VA = "0x10F7268")]
		public EmoteTransform(EmoteTransform to, Transform from, Vector3 verticalOffset)
		{
		}

		[Token(Token = "0x600256D")]
		[Address(RVA = "0x10F7390", Offset = "0x10F7390", VA = "0x10F7390")]
		public EmoteTransform(Vector3 position, Quaternion rotation)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000847")]
	public class EmotePlayableBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x4003660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ExposedReference<PlayerReferences> targetPlayer;

		[Token(Token = "0x4003661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[FormerlySerializedAs("startOffset")]
		public float playbackOffset;

		[Token(Token = "0x4003662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BotEmoteSettings emoteSettings;

		[Token(Token = "0x4003663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float blendTime;

		[Token(Token = "0x4003664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly int[] fingerHash;

		[Token(Token = "0x4003665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool playAtPosition;

		[Token(Token = "0x4003666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CharacterSyncHandlerData characterSyncHandlerData;

		[Token(Token = "0x4003667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public CharacterSyncRequest characterSyncRequest;

		[Token(Token = "0x4003668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private EmoteTransform head;

		[Token(Token = "0x4003669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private EmoteTransform leftHand;

		[Token(Token = "0x400366A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private EmoteTransform rightHand;

		[Token(Token = "0x400366B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 startOffset;

		[Token(Token = "0x400366C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float lastSeenTimestamp;

		[Token(Token = "0x600256E")]
		[Address(RVA = "0x10F73A4", Offset = "0x10F73A4", VA = "0x10F73A4", Slot = "17")]
		public override void OnBehaviourPlay(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x600256F")]
		[Address(RVA = "0x10F7478", Offset = "0x10F7478", VA = "0x10F7478")]
		private void SetInitialEmotePosition(Playable playable)
		{
		}

		[Token(Token = "0x6002570")]
		[Address(RVA = "0x10F77E4", Offset = "0x10F77E4", VA = "0x10F77E4", Slot = "18")]
		public override void OnBehaviourPause(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x6002571")]
		[Address(RVA = "0x10F78A8", Offset = "0x10F78A8", VA = "0x10F78A8", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x6002572")]
		[Address(RVA = "0x10F7D24", Offset = "0x10F7D24", VA = "0x10F7D24")]
		private void EvaluateFingers(BotEmoteSettings emote, CharacterReference character, float time)
		{
		}

		[Token(Token = "0x6002573")]
		[Address(RVA = "0x10F7D88", Offset = "0x10F7D88", VA = "0x10F7D88")]
		private void SetFingerValue(EmoteFingerData emoteFingerData, Animator animator, float time)
		{
		}

		[Token(Token = "0x6002574")]
		[Address(RVA = "0x10F7A6C", Offset = "0x10F7A6C", VA = "0x10F7A6C")]
		private void EvaluateTransformData(BotEmoteSettings emote, PlayerReferences body, float currentTime)
		{
		}

		[Token(Token = "0x6002575")]
		[Address(RVA = "0x10F7F80", Offset = "0x10F7F80", VA = "0x10F7F80")]
		private void UpdateTransform(Transform transform, EmoteTransform newTransform, EmoteTransform offset, Vector3 originOffset)
		{
		}

		[Token(Token = "0x6002576")]
		[Address(RVA = "0x10F7E60", Offset = "0x10F7E60", VA = "0x10F7E60")]
		private EmoteTransform GetBlendedOffset(EmoteTransform transform, float amount)
		{
			return default(EmoteTransform);
		}

		[Token(Token = "0x6002577")]
		[Address(RVA = "0x10F7750", Offset = "0x10F7750", VA = "0x10F7750")]
		private EmoteTransform GetTransformFromEmoteData(EmoteTransformData transformData, float time)
		{
			return default(EmoteTransform);
		}

		[Token(Token = "0x6002578")]
		[Address(RVA = "0x10F8064", Offset = "0x10F8064", VA = "0x10F8064")]
		private Vector3 GetVectorFromCurves(AnimationCurve[] curves, float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002579")]
		[Address(RVA = "0x10F8100", Offset = "0x10F8100", VA = "0x10F8100")]
		public EmotePlayableBehaviour()
		{
		}
	}
	[Token(Token = "0x2000848")]
	[TrackBindingType(typeof(CharacterReference))]
	[TrackClipType(typeof(EmotePlayableAsset))]
	public class EmoteTrack : TrackAsset
	{
		[Token(Token = "0x600257A")]
		[Address(RVA = "0x10F8160", Offset = "0x10F8160", VA = "0x10F8160")]
		public EmoteTrack()
		{
		}
	}
	[Token(Token = "0x2000849")]
	public class SpeechPlayableAsset : PlayableAsset
	{
		[Token(Token = "0x400366D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public SpeechPlayableBehaviour template;

		[Token(Token = "0x600257B")]
		[Address(RVA = "0x10F81B8", Offset = "0x10F81B8", VA = "0x10F81B8", Slot = "6")]
		public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
		{
			return default(Playable);
		}

		[Token(Token = "0x600257C")]
		[Address(RVA = "0x10F8260", Offset = "0x10F8260", VA = "0x10F8260")]
		public SpeechPlayableAsset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200084A")]
	public class SpeechPlayableBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x400366E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationClip showAnimationClip;

		[Token(Token = "0x400366F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationClip hideAnimationClip;

		[Token(Token = "0x4003670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string localizationId;

		[Token(Token = "0x4003671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ExposedReference<DialogueReference> dialogueReference;

		[Token(Token = "0x4003672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ExposedReference<Transform> lookAtReference;

		[Token(Token = "0x600257D")]
		[Address(RVA = "0x10F8268", Offset = "0x10F8268", VA = "0x10F8268", Slot = "17")]
		public override void OnBehaviourPlay(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x600257E")]
		[Address(RVA = "0x10F8380", Offset = "0x10F8380", VA = "0x10F8380", Slot = "18")]
		public override void OnBehaviourPause(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x600257F")]
		[Address(RVA = "0x10F8560", Offset = "0x10F8560", VA = "0x10F8560", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x6002580")]
		[Address(RVA = "0x10F8868", Offset = "0x10F8868", VA = "0x10F8868")]
		private void AnimateIn(GameObject go, float time)
		{
		}

		[Token(Token = "0x6002581")]
		[Address(RVA = "0x10F88D0", Offset = "0x10F88D0", VA = "0x10F88D0")]
		private void AnimateOut(GameObject go, float time, float duration)
		{
		}

		[Token(Token = "0x6002582")]
		[Address(RVA = "0x10F8940", Offset = "0x10F8940", VA = "0x10F8940")]
		public SpeechPlayableBehaviour()
		{
		}
	}
	[Token(Token = "0x200084B")]
	[TrackBindingType(typeof(CharacterReference))]
	[TrackClipType(typeof(SpeechPlayableAsset))]
	public class SpeechTrack : TrackAsset
	{
		[Token(Token = "0x6002583")]
		[Address(RVA = "0x10F8948", Offset = "0x10F8948", VA = "0x10F8948")]
		public SpeechTrack()
		{
		}
	}
	[Token(Token = "0x200084C")]
	public struct DialogueRequest
	{
	}
	[Token(Token = "0x200084D")]
	public class DialogueHandlerData
	{
		[Token(Token = "0x4003673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<DialogueRequest> dialogueRequests;

		[Token(Token = "0x4003674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DialogueReference dialogueReference;

		[Token(Token = "0x6002584")]
		[Address(RVA = "0x10F89A0", Offset = "0x10F89A0", VA = "0x10F89A0")]
		public DialogueHandlerData()
		{
		}
	}
	[Token(Token = "0x200084E")]
	public class DialogueHandler : ITickable
	{
		[Token(Token = "0x4003675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DialogueHandlerData dialogueHandlerData;

		[Token(Token = "0x4003676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DialogueSettings dialogueSettings;

		[Token(Token = "0x4003677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly AnimatedCanvasHandlerData animatedCanvasHandlerData;

		[Token(Token = "0x4003678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Transform worldParent;

		[Token(Token = "0x4003679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GameData gameData;

		[Token(Token = "0x400367A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private DialogueReference dialogueReference;

		[Token(Token = "0x400367B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float timeStampToCloseDialogue;

		[Token(Token = "0x400367C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool showingDialogue;

		[Token(Token = "0x400367D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform dialogueFollowTarget;

		[Token(Token = "0x400367E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform dialogueLookAtTarget;

		[Token(Token = "0x6002585")]
		[Address(RVA = "0x10F8A1C", Offset = "0x10F8A1C", VA = "0x10F8A1C")]
		public DialogueHandler(DialogueHandlerData dialogueHandlerData, DialogueSettings dialogueSettings, AnimatedCanvasHandlerData animatedCanvasHandlerData, InputData inputData, Transform worldParent, GameData gameData)
		{
		}

		[Token(Token = "0x6002586")]
		[Address(RVA = "0x10F8A6C", Offset = "0x10F8A6C", VA = "0x10F8A6C")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6002587")]
		[Address(RVA = "0x10F8B0C", Offset = "0x10F8B0C", VA = "0x10F8B0C")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6002588")]
		[Address(RVA = "0x10F8B10", Offset = "0x10F8B10", VA = "0x10F8B10")]
		public void LoadingDone()
		{
		}

		[Token(Token = "0x6002589")]
		[Address(RVA = "0x10F8B68", Offset = "0x10F8B68", VA = "0x10F8B68", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600258A")]
		[Address(RVA = "0x10F8CC8", Offset = "0x10F8CC8", VA = "0x10F8CC8")]
		private void StartDialogueMessage(int dialogueId)
		{
		}
	}
	[Token(Token = "0x200084F")]
	public class DialogueReference : MonoBehaviour
	{
		[Token(Token = "0x400367F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimatedCanvas animatedCanvas;

		[Token(Token = "0x4003680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocalizedText localizedText;

		[Token(Token = "0x600258B")]
		[Address(RVA = "0x10F8E14", Offset = "0x10F8E14", VA = "0x10F8E14")]
		public DialogueReference()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000850")]
	public struct DialogueData
	{
		[Token(Token = "0x4003681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string localizedId;

		[Token(Token = "0x4003682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float amountOfTimeToShow;
	}
	[Token(Token = "0x2000851")]
	[CreateAssetMenu(menuName = "Settings/SinglePlayer/DialogueSettings", fileName = "DialogueSettings")]
	public class DialogueSettings : ScriptableObject
	{
		[Token(Token = "0x4003683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DialogueReference dialogueReference;

		[Token(Token = "0x4003684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DialogueData[] dialogueData;

		[Token(Token = "0x600258C")]
		[Address(RVA = "0x10F8E1C", Offset = "0x10F8E1C", VA = "0x10F8E1C")]
		public DialogueSettings()
		{
		}
	}
	[Token(Token = "0x2000852")]
	public enum BotEmoteType
	{
		[Token(Token = "0x4003686")]
		Intro,
		[Token(Token = "0x4003687")]
		Victory,
		[Token(Token = "0x4003688")]
		Defeat,
		[Token(Token = "0x4003689")]
		Interrupt,
		[Token(Token = "0x400368A")]
		Idle
	}
	[Serializable]
	[Token(Token = "0x2000853")]
	public class EmoteCurveData
	{
		[Token(Token = "0x400368B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve[] curve;

		[Token(Token = "0x600258D")]
		[Address(RVA = "0x10F8E24", Offset = "0x10F8E24", VA = "0x10F8E24")]
		public EmoteCurveData(int num)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000854")]
	public class EmoteTransformData
	{
		[Token(Token = "0x400368C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EmoteCurveData position;

		[Token(Token = "0x400368D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EmoteCurveData eulerRotation;

		[Token(Token = "0x600258E")]
		[Address(RVA = "0x10F8F3C", Offset = "0x10F8F3C", VA = "0x10F8F3C")]
		public EmoteTransformData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000855")]
	public class EmoteFingerData
	{
		[Token(Token = "0x400368E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EmoteCurveData fingers;

		[Token(Token = "0x600258F")]
		[Address(RVA = "0x10F8FC4", Offset = "0x10F8FC4", VA = "0x10F8FC4")]
		public EmoteFingerData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000856")]
	public struct EmoteDialogue
	{
		[Token(Token = "0x400368F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string dialogueLocalizationId;

		[Token(Token = "0x4003690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float dialogueStartTime;

		[Token(Token = "0x4003691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float dialogueEndTime;
	}
	[Token(Token = "0x2000857")]
	[CreateAssetMenu(menuName = "Settings/SinglePlayer/BotEmoteSettings")]
	public class BotEmoteSettings : ScriptableObject
	{
		[Token(Token = "0x4003692")]
		public const int HEAD = 0;

		[Token(Token = "0x4003693")]
		public const int LEFT_HAND = 1;

		[Token(Token = "0x4003694")]
		public const int RIGHT_HAND = 2;

		[Token(Token = "0x4003695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string emoteName;

		[Token(Token = "0x4003696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BotEmoteType emoteType;

		[Token(Token = "0x4003697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EmoteTransformData[] emoteTransformData;

		[Token(Token = "0x4003698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EmoteFingerData leftHand;

		[Token(Token = "0x4003699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public EmoteFingerData rightHand;

		[Token(Token = "0x400369A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float duration;

		[Token(Token = "0x400369B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float startTrimAmount;

		[Token(Token = "0x400369C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float endTrimAmount;

		[Token(Token = "0x400369D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<EmoteDialogue> emoteDialogues;

		[Token(Token = "0x6002590")]
		[Address(RVA = "0x10F9030", Offset = "0x10F9030", VA = "0x10F9030")]
		public BotEmoteSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000858")]
	public class BotEmoteInterruptSettings
	{
		[Token(Token = "0x400369E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<BotEmoteSettings> emoteSettings;

		[Token(Token = "0x400369F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minimumTime;

		[Token(Token = "0x40036A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maximumTime;

		[Token(Token = "0x6002591")]
		[Address(RVA = "0x10F911C", Offset = "0x10F911C", VA = "0x10F911C")]
		public BotEmoteInterruptSettings()
		{
		}
	}
	[Token(Token = "0x2000859")]
	public readonly struct StartEmoteRequest
	{
		[Token(Token = "0x40036A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly EmoteHandle emoteHandle;

		[Token(Token = "0x6002592")]
		[Address(RVA = "0x10F9124", Offset = "0x10F9124", VA = "0x10F9124")]
		public StartEmoteRequest(EmoteHandle emoteHandle)
		{
		}
	}
	[Token(Token = "0x200085A")]
	public class EmoteHandle
	{
		[Token(Token = "0x40036A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isPlaying;

		[Token(Token = "0x40036A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IPlayableDirectorFacade director;

		[Token(Token = "0x40036A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float startTimestamp;

		[Token(Token = "0x40036A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BotEmoteSettings emote;

		[Token(Token = "0x40036A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool abort;

		[Token(Token = "0x40036A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DialogueReference dialogueReference;

		[Token(Token = "0x40036A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PlayerReferences emoteTarget;

		[Token(Token = "0x40036A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CharacterReference characterReference;

		[Token(Token = "0x6002593")]
		[Address(RVA = "0x10F912C", Offset = "0x10F912C", VA = "0x10F912C")]
		public EmoteHandle(PlayerReferences emoteTarget, CharacterReference characterReference, BotEmoteSettings emote)
		{
		}
	}
	[Token(Token = "0x200085B")]
	public interface IPlayableDirectorFactory
	{
		[Token(Token = "0x6002594")]
		IPlayableDirectorFacade CreateDirector();
	}
	[Token(Token = "0x200085C")]
	public class PlayablePlayableDirectorFactory : IPlayableDirectorFactory
	{
		[Token(Token = "0x40036AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly EmotePlaybackSettings emotePlaybackSettings;

		[Token(Token = "0x40036AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Transform worldParent;

		[Token(Token = "0x6002595")]
		[Address(RVA = "0x10F9168", Offset = "0x10F9168", VA = "0x10F9168")]
		public PlayablePlayableDirectorFactory(EmotePlaybackSettings emotePlaybackSettings, Transform worldParent)
		{
		}

		[Token(Token = "0x6002596")]
		[Address(RVA = "0x10F9194", Offset = "0x10F9194", VA = "0x10F9194", Slot = "4")]
		public IPlayableDirectorFacade CreateDirector()
		{
			return null;
		}
	}
	[Token(Token = "0x200085D")]
	public class DialogueFactory
	{
		[Token(Token = "0x40036AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Transform worldParent;

		[Token(Token = "0x40036AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DialogueReference prefab;

		[Token(Token = "0x6002597")]
		[Address(RVA = "0x10F9258", Offset = "0x10F9258", VA = "0x10F9258")]
		public DialogueFactory(Transform worldParent, DialogueReference prefab)
		{
		}

		[Token(Token = "0x6002598")]
		[Address(RVA = "0x10F9284", Offset = "0x10F9284", VA = "0x10F9284", Slot = "4")]
		public virtual DialogueReference CreateReference()
		{
			return null;
		}
	}
	[Token(Token = "0x200085E")]
	public class EmotePlaybackHandlerData
	{
		[Token(Token = "0x40036AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Queue<StartEmoteRequest> startEmoteRequests;

		[Token(Token = "0x40036AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Queue<IPlayableDirectorFacade> availableDirector;

		[Token(Token = "0x40036B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Queue<DialogueReference> availableDialogueReferences;

		[Token(Token = "0x6002599")]
		[Address(RVA = "0x10F9360", Offset = "0x10F9360", VA = "0x10F9360")]
		public EmotePlaybackHandlerData()
		{
		}
	}
	[Token(Token = "0x200085F")]
	public class EmotePlaybackHandler : ITickable
	{
		[Token(Token = "0x40036B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly EmotePlaybackHandlerData emotePlaybackHandlerData;

		[Token(Token = "0x40036B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IPlayableDirectorFactory playableDirectorFactory;

		[Token(Token = "0x40036B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly EmotePlaybackSettings emotePlaybackSettings;

		[Token(Token = "0x40036B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x40036B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly List<EmoteHandle> activeEmotes;

		[Token(Token = "0x40036B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameData gameData;

		[Token(Token = "0x40036B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly DialogueFactory dialogueFactory;

		[Token(Token = "0x600259A")]
		[Address(RVA = "0x10F946C", Offset = "0x10F946C", VA = "0x10F946C")]
		public EmotePlaybackHandler(EmotePlaybackHandlerData emotePlaybackHandlerData, IPlayableDirectorFactory playableDirectorFactory, EmotePlaybackSettings emotePlaybackSettings, ITimeProvider timeProvider, GameData gameData, DialogueFactory dialogueFactory)
		{
		}

		[Token(Token = "0x600259B")]
		[Address(RVA = "0x10F95F4", Offset = "0x10F95F4", VA = "0x10F95F4")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600259C")]
		[Address(RVA = "0x10F969C", Offset = "0x10F969C", VA = "0x10F969C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600259D")]
		[Address(RVA = "0x10F97BC", Offset = "0x10F97BC", VA = "0x10F97BC")]
		private void StartEmote(StartEmoteRequest startEmoteRequest)
		{
		}

		[Token(Token = "0x600259E")]
		private T GetRandomItemFromList<T>(List<T> list)
		{
			return (T)null;
		}

		[Token(Token = "0x600259F")]
		[Address(RVA = "0x10F9D7C", Offset = "0x10F9D7C", VA = "0x10F9D7C")]
		private IPlayableDirectorFacade GetDirector()
		{
			return null;
		}

		[Token(Token = "0x60025A0")]
		[Address(RVA = "0x10F9E68", Offset = "0x10F9E68", VA = "0x10F9E68")]
		private DialogueReference GetDialogueReference()
		{
			return null;
		}

		[Token(Token = "0x60025A1")]
		[Address(RVA = "0x10F9AC4", Offset = "0x10F9AC4", VA = "0x10F9AC4")]
		private bool TickEmote(EmoteHandle emoteHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60025A2")]
		[Address(RVA = "0x10FAD54", Offset = "0x10FAD54", VA = "0x10FAD54")]
		public void ForceStopEmotes()
		{
		}

		[Token(Token = "0x60025A3")]
		[Address(RVA = "0x10F9BB4", Offset = "0x10F9BB4", VA = "0x10F9BB4")]
		private void StopEmote(EmoteHandle emoteHandle)
		{
		}

		[Token(Token = "0x60025A4")]
		[Address(RVA = "0x10F9EF4", Offset = "0x10F9EF4", VA = "0x10F9EF4")]
		private void ReplaceTrackItems(TimelineAsset timeline, EmoteHandle emoteHandle, EmoteDialogue emoteDialogue)
		{
		}
	}
	[Token(Token = "0x2000860")]
	[CreateAssetMenu(menuName = "Settings/Emote/EmotePlaybackSettings", fileName = "EmotePlaybackSettings")]
	public class EmotePlaybackSettings : ScriptableObject
	{
		[Token(Token = "0x40036B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayableDirector director;

		[Token(Token = "0x40036B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DialogueReference dialogueReference;

		[Token(Token = "0x40036BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TimelineAsset emoteOnlyTimeline;

		[Token(Token = "0x40036BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TimelineAsset emoteWithDialogueTimeline;

		[Token(Token = "0x40036BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int defaultNumDirectors;

		[Token(Token = "0x40036BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Face Animations")]
		public int faceAnimationCriticalDamageThresh;

		[Token(Token = "0x60025A5")]
		[Address(RVA = "0x10FAE10", Offset = "0x10FAE10", VA = "0x10FAE10")]
		public EmotePlaybackSettings()
		{
		}
	}
	[Token(Token = "0x2000861")]
	[CreateAssetMenu(menuName = "Settings/SinglePlayer/SinglePlayerSettings")]
	public class SinglePlayerSettings : ScriptableObject
	{
		[Token(Token = "0x40036BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The speed at which a projectile or a thrown tool is considered to be fast")]
		[Header("Global Bot Settings")]
		public float fastSpeed;

		[Token(Token = "0x40036BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("A list of positions that the bot will aim at when using the Vector")]
		public List<Vector3> vectorAimTargets;

		[Token(Token = "0x40036C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("A list of bots that will be used in the game")]
		public List<BotSettings> listOfBotSettings;

		[Token(Token = "0x40036C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Debugging")]
		[Tooltip("Debug physical vision system - line of sight, field of view")]
		public bool isDebuggingVision;

		[Token(Token = "0x40036C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[Tooltip("Debug which objects are we aware of, and the one we choose to focus on")]
		public bool isDebuggingAttention;

		[Token(Token = "0x40036C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		[Tooltip("Debug where we choose to move when dodging")]
		public bool isDebuggingDodging;

		[Token(Token = "0x40036C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		[Tooltip("Show important bounding boxes")]
		public bool isDebuggingBounds;

		[Token(Token = "0x40036C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Debug pain prediction")]
		public bool isDebuggingPainPrediction;

		[Token(Token = "0x40036C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[Tooltip("Debug safest path finding")]
		public bool isDebuggingPathfinding;

		[Token(Token = "0x40036C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		[Tooltip("Debug projectile prediction")]
		public bool isDebuggingProjectilePrediction;

		[Token(Token = "0x60025A6")]
		[Address(RVA = "0x10FAE24", Offset = "0x10FAE24", VA = "0x10FAE24")]
		public SinglePlayerSettings()
		{
		}
	}
	[Token(Token = "0x2000862")]
	public class StoryCharacterIdleHandler : ITickable
	{
		[Token(Token = "0x40036C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly StoryCharacterIdleSettings storyCharacterIdleSettings;

		[Token(Token = "0x40036C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly StoryEventGameStateData storyEventGameStateData;

		[Token(Token = "0x40036CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly CharacterData characterData;

		[Token(Token = "0x40036CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly EmotePlaybackHandlerData emotePlaybackHandler;

		[Token(Token = "0x40036CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private StoryEventGameStateData.GameState lastSeenState;

		[Token(Token = "0x40036CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool isPlayingIdle;

		[Token(Token = "0x40036CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private EmoteHandle emoteHandle;

		[Token(Token = "0x40036CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int IsPlayingIdle;

		[Token(Token = "0x60025A7")]
		[Address(RVA = "0x10FAE38", Offset = "0x10FAE38", VA = "0x10FAE38")]
		public StoryCharacterIdleHandler(StoryCharacterIdleSettings storyCharacterIdleSettings, StoryEventGameStateData storyEventGameStateData, CharacterData characterData, EmotePlaybackHandlerData emotePlaybackHandler)
		{
		}

		[Token(Token = "0x60025A8")]
		[Address(RVA = "0x10FAED4", Offset = "0x10FAED4", VA = "0x10FAED4", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60025A9")]
		[Address(RVA = "0x10FAF40", Offset = "0x10FAF40", VA = "0x10FAF40")]
		private void PlayIdle()
		{
		}

		[Token(Token = "0x60025AA")]
		[Address(RVA = "0x10FB140", Offset = "0x10FB140", VA = "0x10FB140")]
		private void StarRandomEmote()
		{
		}

		[Token(Token = "0x60025AB")]
		[Address(RVA = "0x10FB050", Offset = "0x10FB050", VA = "0x10FB050")]
		private void StopIdle()
		{
		}
	}
	[Token(Token = "0x2000863")]
	[CreateAssetMenu(fileName = "StoryCharacterIdleSettings", menuName = "Settings/StoryEvent/StoryCharacterIdleSettings")]
	public class StoryCharacterIdleSettings : ScriptableObject
	{
		[Token(Token = "0x40036D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BotEmoteSettings[] announcerIdleEmotes;

		[Token(Token = "0x40036D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RuntimeAnimatorController hatAnimationController;

		[Token(Token = "0x60025AD")]
		[Address(RVA = "0x10FB2CC", Offset = "0x10FB2CC", VA = "0x10FB2CC")]
		public StoryCharacterIdleSettings()
		{
		}
	}
	[Token(Token = "0x2000864")]
	public class StoryEventProgressData
	{
		[Token(Token = "0x40036D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<ObjectiveUpdateRequest> updateRequests;

		[Token(Token = "0x60025AE")]
		[Address(RVA = "0x10FB2D4", Offset = "0x10FB2D4", VA = "0x10FB2D4")]
		public StoryEventProgressData()
		{
		}
	}
	[Token(Token = "0x2000865")]
	public class StoryProgressHandler : ITickable
	{
		[Token(Token = "0x40036D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string[] OctoSkins;

		[Token(Token = "0x40036D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly StoryEventProgressData storyEventProgressData;

		[Token(Token = "0x40036D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly StoryData storyData;

		[Token(Token = "0x40036D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly OwnershipData ownershipData;

		[Token(Token = "0x40036D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly CharacterData characterData;

		[Token(Token = "0x40036D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CharacterSettings characterSettings;

		[Token(Token = "0x40036D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<ObjectiveUpdateRequest> pendingStoryEventUpdateRequests;

		[Token(Token = "0x40036DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int latestSeenCharacterId;

		[Token(Token = "0x40036DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ProfilerMarker tickProfileMarker;

		[Token(Token = "0x60025AF")]
		[Address(RVA = "0x10FB350", Offset = "0x10FB350", VA = "0x10FB350")]
		public StoryProgressHandler(StoryEventProgressData storyEventProgressData, StoryData storyData, OwnershipData ownershipData, CharacterData characterData, CharacterSettings characterSettings)
		{
		}

		[Token(Token = "0x60025B0")]
		[Address(RVA = "0x10FB440", Offset = "0x10FB440", VA = "0x10FB440", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60025B1")]
		[Address(RVA = "0x10FB6B0", Offset = "0x10FB6B0", VA = "0x10FB6B0")]
		private void CheckCharacterChange()
		{
		}

		[Token(Token = "0x60025B2")]
		[Address(RVA = "0x10FB810", Offset = "0x10FB810", VA = "0x10FB810")]
		public void SetupDebug(DebugMenu instance, PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData)
		{
		}

		[Token(Token = "0x60025B3")]
		[Address(RVA = "0x10FB814", Offset = "0x10FB814", VA = "0x10FB814")]
		private void DebugClearStoryProgress(PlayFabCloudScriptInvocationData playFabCloudScriptInvocationData)
		{
		}

		[Token(Token = "0x60025B4")]
		[Address(RVA = "0x10FB8E4", Offset = "0x10FB8E4", VA = "0x10FB8E4")]
		public void DebugProgressOnCurrentObjective(int progress)
		{
		}

		[Token(Token = "0x60025B5")]
		[Address(RVA = "0x10FB968", Offset = "0x10FB968", VA = "0x10FB968")]
		public void DebugCompleteCurrentObjective()
		{
		}
	}
	[Token(Token = "0x2000867")]
	public class MatchDeckInfoData
	{
		[Token(Token = "0x40036DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<int, List<ToolSet>> playerDeckInfoLookup;

		[Token(Token = "0x60025BA")]
		[Address(RVA = "0x10FBC54", Offset = "0x10FBC54", VA = "0x10FBC54")]
		public MatchDeckInfoData()
		{
		}
	}
	[Token(Token = "0x2000868")]
	public class MatchDeckInfoHandler : ITickable
	{
		[Token(Token = "0x40036DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MatchDeckInfoData matchDeckInfoData;

		[Token(Token = "0x40036E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x40036E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private EntryPoint.GameState lastSeenGameState;

		[Token(Token = "0x60025BB")]
		[Address(RVA = "0x10FBCD0", Offset = "0x10FBCD0", VA = "0x10FBCD0")]
		public MatchDeckInfoHandler(MatchDeckInfoData matchDeckInfoData, EntryPoint.EntryPointData entryPointData)
		{
		}

		[Token(Token = "0x60025BC")]
		[Address(RVA = "0x10FBCFC", Offset = "0x10FBCFC", VA = "0x10FBCFC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60025BD")]
		[Address(RVA = "0x10FBDA4", Offset = "0x10FBDA4", VA = "0x10FBDA4")]
		public GameMessageInvokationResult OnDeckInfoMessage(DeckInfoMessage message)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000869")]
	public class MatchStartAnnouncementsData
	{
		[Token(Token = "0x40036E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<AnnounceMatchRequest> announceMatchReqeusts;

		[Token(Token = "0x40036E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MatchStartAnnouncements matchStartAnnouncements;

		[Token(Token = "0x40036E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float lastUpdated;

		[Token(Token = "0x60025BE")]
		[Address(RVA = "0x10FBEAC", Offset = "0x10FBEAC", VA = "0x10FBEAC")]
		public MatchStartAnnouncementsData()
		{
		}
	}
	[Token(Token = "0x200086A")]
	public class MatchStartAnnouncements
	{
		[Token(Token = "0x40036E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<MatchStartAnnouncementItem> friendlyAnnouncements;

		[Token(Token = "0x40036E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<MatchStartAnnouncementItem> duelAnnouncements;

		[Token(Token = "0x40036E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<MatchStartAnnouncementItem> tourneventAnnouncements;

		[Token(Token = "0x40036E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<MatchStartAnnouncementItem> shootoutDuelAnnouncements;

		[Token(Token = "0x40036E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<MatchStartAnnouncementItem> scrapperShootoutDuelAnnouncements;

		[Token(Token = "0x40036EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<MatchStartAnnouncementItem> winterDuelAnnouncements;

		[Token(Token = "0x60025BF")]
		[Address(RVA = "0x10FBF54", Offset = "0x10FBF54", VA = "0x10FBF54")]
		public MatchStartAnnouncements()
		{
		}
	}
	[Token(Token = "0x200086B")]
	public class MatchStartAnnouncementItem
	{
		[Token(Token = "0x40036EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string matchId;

		[Token(Token = "0x40036EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string roomCode;

		[Token(Token = "0x40036ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NetworkingRegion region;

		[Token(Token = "0x40036EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string multiplayerProtocolVersion;

		[Token(Token = "0x40036EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string matchMakingQueue;

		[Token(Token = "0x40036F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string playerOneName;

		[Token(Token = "0x40036F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int playerOneLp;

		[Token(Token = "0x40036F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string playerTwoName;

		[Token(Token = "0x40036F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int playerTwoLp;

		[Token(Token = "0x40036F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public GameplayRules gameplayRules;

		[Token(Token = "0x40036F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string tournamentAccessCode;

		[Token(Token = "0x40036F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public DateTime timestamp;

		[Token(Token = "0x60025C0")]
		[Address(RVA = "0x10FC064", Offset = "0x10FC064", VA = "0x10FC064")]
		public MatchStartAnnouncementItem(string matchId, string roomCode, NetworkingRegion region, string multiplayerProtocolVersion, string matchMakingQueue, string playerOneName, int playerOneLp, string playerTwoName, int playerTwoLp, GameplayRules gameplayRules, string tournamentAccessCode, DateTime timestamp)
		{
		}

		[Token(Token = "0x60025C1")]
		[Address(RVA = "0x10FC100", Offset = "0x10FC100", VA = "0x10FC100")]
		public int CompareByLP(MatchStartAnnouncementItem other)
		{
			return default(int);
		}

		[Token(Token = "0x60025C2")]
		[Address(RVA = "0x10FC140", Offset = "0x10FC140", VA = "0x10FC140")]
		public int CompareByTournamentRanking(TournamentEventData tournamentEventData, MatchStartAnnouncementItem other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200086C")]
	public class MatchStartAnnouncementsJSon
	{
		[Token(Token = "0x40036F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<MatchStartAnnouncement> recent_announcements;

		[Token(Token = "0x60025C3")]
		[Address(RVA = "0x10FC34C", Offset = "0x10FC34C", VA = "0x10FC34C")]
		public MatchStartAnnouncementsJSon()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200086D")]
	public class MatchStartAnnouncementBase
	{
		[Token(Token = "0x40036F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string match_id;

		[Token(Token = "0x40036F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string room_code;

		[Token(Token = "0x40036FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string region;

		[Token(Token = "0x40036FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string multiplayer_protocol_version;

		[Token(Token = "0x40036FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string match_making_queue;

		[Token(Token = "0x40036FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string player_one_name;

		[Token(Token = "0x40036FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int player_one_lp;

		[Token(Token = "0x40036FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string player_two_name;

		[Token(Token = "0x4003700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int player_two_lp;

		[Token(Token = "0x4003701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string gameplay_rules;

		[Token(Token = "0x4003702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string tournament_access_code;

		[Token(Token = "0x60025C4")]
		[Address(RVA = "0x10FC3C8", Offset = "0x10FC3C8", VA = "0x10FC3C8")]
		public MatchStartAnnouncementBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200086E")]
	public class MatchStartAnnouncement : MatchStartAnnouncementBase
	{
		[Token(Token = "0x4003703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string timestamp;

		[Token(Token = "0x60025C5")]
		[Address(RVA = "0x10FC43C", Offset = "0x10FC43C", VA = "0x10FC43C")]
		public MatchStartAnnouncement()
		{
		}
	}
	[Token(Token = "0x200086F")]
	public class AnnounceMatchRequest
	{
		[Token(Token = "0x4003704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string matchID;

		[Token(Token = "0x4003705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string roomCode;

		[Token(Token = "0x4003706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string region;

		[Token(Token = "0x4003707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string playerOneName;

		[Token(Token = "0x4003708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int playerOneLp;

		[Token(Token = "0x4003709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string playerTwoName;

		[Token(Token = "0x400370A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int playerTwoLp;

		[Token(Token = "0x400370B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string gameplayRules;

		[Token(Token = "0x400370C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string tournamentAccessCode;

		[Token(Token = "0x60025C6")]
		[Address(RVA = "0x10FC440", Offset = "0x10FC440", VA = "0x10FC440")]
		public AnnounceMatchRequest(string matchID, string roomCode, string region, string playerOneName, int playerOneLp, string playerTwoName, int playerTwoLp, string gameplayRules, string tournamentAccessCode)
		{
		}
	}
	[Token(Token = "0x2000870")]
	public class MatchStartAnnouncementsHandler : ITickable
	{
		[Token(Token = "0x400370D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ApiTokenData apiTokenData;

		[Token(Token = "0x400370E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MatchStartAnnouncementsData matchStartAnnouncementsData;

		[Token(Token = "0x400370F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly SpectatorSettingsData spectatorSettingsData;

		[Token(Token = "0x4003710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ITokenApisHttpComponent tokenApisHttpComponent;

		[Token(Token = "0x4003711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x4003712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly MatchReportingData matchReportingData;

		[Token(Token = "0x4003713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly IMultiplayerProtocolVersion multiplayerProtocolVersion;

		[Token(Token = "0x4003714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4003715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly TournamentEventData tournamentEventData;

		[Token(Token = "0x4003716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float latestPollTime;

		[Token(Token = "0x4003717")]
		private const float TimeBetweenPolls = 10f;

		[Token(Token = "0x4003718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Comparison<MatchStartAnnouncementItem> timestampComparison;

		[Token(Token = "0x4003719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Comparison<MatchStartAnnouncementItem> lpComparison;

		[Token(Token = "0x400371A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Comparison<MatchStartAnnouncementItem> tournamentRankingComparison;

		[Token(Token = "0x400371B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ProfilerMarker tickProfileMarker;

		[Token(Token = "0x60025C7")]
		[Address(RVA = "0x10FC4B8", Offset = "0x10FC4B8", VA = "0x10FC4B8")]
		public MatchStartAnnouncementsHandler(ApiTokenData apiTokenData, MatchStartAnnouncementsData matchStartAnnouncementsData, SpectatorSettingsData spectatorSettingsData, ITokenApisHttpComponent tokenApisHttpComponent, ITimeProvider timeProvider, MatchReportingData matchReportingData, IMultiplayerProtocolVersion multiplayerProtocolVersion, AutoSpectateData autoSpectateData, TournamentEventData tournamentEventData)
		{
		}

		[Token(Token = "0x60025C8")]
		[Address(RVA = "0x10FC70C", Offset = "0x10FC70C", VA = "0x10FC70C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60025C9")]
		[Address(RVA = "0x10FCD64", Offset = "0x10FCD64", VA = "0x10FCD64")]
		private void OnGotAnnouncements(string content)
		{
		}

		[Token(Token = "0x60025CA")]
		[Address(RVA = "0x10FD79C", Offset = "0x10FD79C", VA = "0x10FD79C")]
		private void OnErrorOnGetAnnouncements(string content)
		{
		}

		[Token(Token = "0x60025CB")]
		[Address(RVA = "0x10FD7F0", Offset = "0x10FD7F0", VA = "0x10FD7F0")]
		private void OnSuccessfulPostAnnouncement(string content)
		{
		}

		[Token(Token = "0x60025CC")]
		[Address(RVA = "0x10FD844", Offset = "0x10FD844", VA = "0x10FD844")]
		private void OnErrorOnPostAnnouncements(string content)
		{
		}

		[Token(Token = "0x60025CD")]
		[Address(RVA = "0x10FCC48", Offset = "0x10FCC48", VA = "0x10FCC48")]
		private bool ItIsTimeToPoll()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000873")]
	public interface ITokenApisHttpComponent
	{
		[Token(Token = "0x60025D4")]
		void PerformGetRequest(string url, string token, Action<string> onGotResponse, Action<string> onError);

		[Token(Token = "0x60025D5")]
		void PerformPostRequest(string url, string token, byte[] data, Action<string> onGotResponse, Action<string> onError);
	}
	[Token(Token = "0x2000874")]
	public class TokenApisHttpComponent : MonoBehaviour, ITokenApisHttpComponent
	{
		[Token(Token = "0x2000875")]
		[CompilerGenerated]
		private sealed class <PerformGetRequestCoroutine>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003720")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003721")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003722")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string url;

			[Token(Token = "0x4003723")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string token;

			[Token(Token = "0x4003724")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action<string> onError;

			[Token(Token = "0x4003725")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Action<string> onGotResponse;

			[Token(Token = "0x4003726")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x1700018E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60025DF")]
				[Address(RVA = "0x10FDF00", Offset = "0x10FDF00", VA = "0x10FDF00", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60025E1")]
				[Address(RVA = "0x10FDF48", Offset = "0x10FDF48", VA = "0x10FDF48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60025DB")]
			[Address(RVA = "0x10FDACC", Offset = "0x10FDACC", VA = "0x10FDACC")]
			[DebuggerHidden]
			public <PerformGetRequestCoroutine>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x60025DC")]
			[Address(RVA = "0x10FDB24", Offset = "0x10FDB24", VA = "0x10FDB24", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60025DD")]
			[Address(RVA = "0x10FDB40", Offset = "0x10FDB40", VA = "0x10FDB40", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60025DE")]
			[Address(RVA = "0x10FDE50", Offset = "0x10FDE50", VA = "0x10FDE50")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60025E0")]
			[Address(RVA = "0x10FDF08", Offset = "0x10FDF08", VA = "0x10FDF08", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000876")]
		[CompilerGenerated]
		private sealed class <PerformPostRequestCoroutine>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003727")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003728")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003729")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string url;

			[Token(Token = "0x400372A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public byte[] data;

			[Token(Token = "0x400372B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string token;

			[Token(Token = "0x400372C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Action<string> onError;

			[Token(Token = "0x400372D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Action<string> onGotResponse;

			[Token(Token = "0x400372E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x17000190")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60025E6")]
				[Address(RVA = "0x10FE3C0", Offset = "0x10FE3C0", VA = "0x10FE3C0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000191")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60025E8")]
				[Address(RVA = "0x10FE408", Offset = "0x10FE408", VA = "0x10FE408", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60025E2")]
			[Address(RVA = "0x10FDAF4", Offset = "0x10FDAF4", VA = "0x10FDAF4")]
			[DebuggerHidden]
			public <PerformPostRequestCoroutine>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x60025E3")]
			[Address(RVA = "0x10FDF50", Offset = "0x10FDF50", VA = "0x10FDF50", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60025E4")]
			[Address(RVA = "0x10FDF6C", Offset = "0x10FDF6C", VA = "0x10FDF6C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60025E5")]
			[Address(RVA = "0x10FE310", Offset = "0x10FE310", VA = "0x10FE310")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60025E7")]
			[Address(RVA = "0x10FE3C8", Offset = "0x10FE3C8", VA = "0x10FE3C8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x60025D6")]
		[Address(RVA = "0x10FD974", Offset = "0x10FD974", VA = "0x10FD974", Slot = "4")]
		public void PerformGetRequest(string url, string token, Action<string> onGotResponse, Action<string> onError)
		{
		}

		[Token(Token = "0x60025D7")]
		[Address(RVA = "0x10FDA1C", Offset = "0x10FDA1C", VA = "0x10FDA1C", Slot = "5")]
		public void PerformPostRequest(string url, string token, byte[] data, Action<string> onGotResponse, Action<string> onError)
		{
		}

		[Token(Token = "0x60025D8")]
		[Address(RVA = "0x10FD994", Offset = "0x10FD994", VA = "0x10FD994")]
		[IteratorStateMachine(typeof(<PerformGetRequestCoroutine>d__2))]
		private IEnumerator PerformGetRequestCoroutine(string url, string token, Action<string> onGotResponse, Action<string> onError)
		{
			return null;
		}

		[Token(Token = "0x60025D9")]
		[Address(RVA = "0x10FDA3C", Offset = "0x10FDA3C", VA = "0x10FDA3C")]
		[IteratorStateMachine(typeof(<PerformPostRequestCoroutine>d__3))]
		private IEnumerator PerformPostRequestCoroutine(string url, string token, byte[] data, Action<string> onGotResponse, Action<string> onError)
		{
			return null;
		}

		[Token(Token = "0x60025DA")]
		[Address(RVA = "0x10FDB1C", Offset = "0x10FDB1C", VA = "0x10FDB1C")]
		public TokenApisHttpComponent()
		{
		}
	}
	[Token(Token = "0x2000877")]
	public class SpectatorRequestViewData
	{
		[Token(Token = "0x400372F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isShowingView;

		[Token(Token = "0x60025E9")]
		[Address(RVA = "0x10FE410", Offset = "0x10FE410", VA = "0x10FE410")]
		public SpectatorRequestViewData()
		{
		}
	}
	[Token(Token = "0x2000878")]
	public class SpectateRequestViewHandler : ITickable
	{
		[Token(Token = "0x4003730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly SpectatorSettings spectatorSettings;

		[Token(Token = "0x4003731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4003732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4003733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayerReferences playerReferences;

		[Token(Token = "0x4003734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly SpectatorRequestViewData spectatorRequestViewData;

		[Token(Token = "0x4003735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SpectateRequestViewReference spectateRequestViewReference;

		[Token(Token = "0x4003736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool shouldShowSpectateRequest;

		[Token(Token = "0x4003737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool showingSpectateRequest;

		[Token(Token = "0x60025EA")]
		[Address(RVA = "0x10FE418", Offset = "0x10FE418", VA = "0x10FE418")]
		public SpectateRequestViewHandler(SpectatorSettings spectatorSettings, IgnisNetworkConnectionData networkConnectionData, ArenaGameStateData arenaGameStateData, PlayerReferences playerReferences, SpectatorRequestViewData spectatorRequestViewData)
		{
		}

		[Token(Token = "0x60025EB")]
		[Address(RVA = "0x10FE468", Offset = "0x10FE468", VA = "0x10FE468")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60025EC")]
		[Address(RVA = "0x10FE654", Offset = "0x10FE654", VA = "0x10FE654")]
		private void Spectate()
		{
		}

		[Token(Token = "0x60025ED")]
		[Address(RVA = "0x10FE65C", Offset = "0x10FE65C", VA = "0x10FE65C")]
		private void LeaveArena()
		{
		}

		[Token(Token = "0x60025EE")]
		[Address(RVA = "0x10FE680", Offset = "0x10FE680", VA = "0x10FE680")]
		public void LoadDone()
		{
		}

		[Token(Token = "0x60025EF")]
		[Address(RVA = "0x10FE5E0", Offset = "0x10FE5E0", VA = "0x10FE5E0")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x60025F0")]
		[Address(RVA = "0x10FE688", Offset = "0x10FE688", VA = "0x10FE688", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60025F1")]
		[Address(RVA = "0x10FE6E8", Offset = "0x10FE6E8", VA = "0x10FE6E8")]
		public GameMessageInvokationResult FailedToSpawnPlayer(FailedSpawnPlayerMessage failedSpawnPlayerMessage)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000879")]
	public class SpectateRequestViewReference : MonoBehaviour
	{
		[Token(Token = "0x4003738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4003739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Collider boxCollider;

		[Token(Token = "0x400373A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button leaveButton;

		[Token(Token = "0x400373B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button spectateButton;

		[Token(Token = "0x60025F2")]
		[Address(RVA = "0x10FE7E0", Offset = "0x10FE7E0", VA = "0x10FE7E0")]
		public SpectateRequestViewReference()
		{
		}
	}
	[Token(Token = "0x200087A")]
	public class SpectatorData
	{
		[Token(Token = "0x400373C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly List<Transform> customTargets;

		[Token(Token = "0x400373D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform currentTarget;

		[Token(Token = "0x400373E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform customPositionTarget;

		[Token(Token = "0x60025F3")]
		[Address(RVA = "0x10FE7E8", Offset = "0x10FE7E8", VA = "0x10FE7E8")]
		public SpectatorData()
		{
		}
	}
	[Token(Token = "0x200087B")]
	public class SpectatorHandler : ITickable
	{
		[Token(Token = "0x400373F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayerReferences localPlayerReference;

		[Token(Token = "0x4003740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4003741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly CameraFadeData cameraFadeData;

		[Token(Token = "0x4003742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameDesignTrackingData gameDesignTrackingData;

		[Token(Token = "0x4003743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x4003744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly CharacterData characterData;

		[Token(Token = "0x4003745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly Transform targetCamera;

		[Token(Token = "0x4003746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly Transform cameraParent;

		[Token(Token = "0x4003747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly SpectatorSettings spectatorSettings;

		[Token(Token = "0x4003748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly InputData inputData;

		[Token(Token = "0x4003749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly SpectatorPinger spectatorPinger;

		[Token(Token = "0x400374A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly GameData gameData;

		[Token(Token = "0x400374B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly ReplayData replayData;

		[Token(Token = "0x400374C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly SpectatorData spectatorData;

		[Token(Token = "0x400374D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly TrailerData trailerData;

		[Token(Token = "0x400374E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x400374F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly SpectatorCameraData spectatorCameraData;

		[Token(Token = "0x4003750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly ArenaItemSettings arenaItemSettings;

		[Token(Token = "0x4003751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly SceneHandlerSettings sceneHandlerSettings;

		[Token(Token = "0x4003752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly SceneHandlerData sceneHandlerData;

		[Token(Token = "0x4003753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly EnvironmentSceneData environmentSceneData;

		[Token(Token = "0x4003754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int spectatorSeatIndex;

		[Token(Token = "0x4003755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int previousSeatIndex;

		[Token(Token = "0x4003756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float pingTimer;

		[Token(Token = "0x4003757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool isFollowingTarget;

		[Token(Token = "0x4003758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
		private bool isSpectating;

		[Token(Token = "0x4003759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC6")]
		private bool isPlayerTarget;

		[Token(Token = "0x400375A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int lastPlayerTargetIndex;

		[Token(Token = "0x400375B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int playerTargetIndex;

		[Token(Token = "0x400375C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int toolTargetIndex;

		[Token(Token = "0x400375D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int projectileTargetIndex;

		[Token(Token = "0x400375E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int customTargetIndex;

		[Token(Token = "0x400375F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Transform targetToFollow;

		[Token(Token = "0x4003760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 movementVelocity;

		[Token(Token = "0x4003761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion rotationVelocity;

		[Token(Token = "0x4003762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Vector3 offsetPosition;

		[Token(Token = "0x4003763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private bool rotateAroundTarget;

		[Token(Token = "0x4003764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x111")]
		private bool shouldRotateAroundTarget;

		[Token(Token = "0x4003765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 currentRotation;

		[Token(Token = "0x4003766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private float spectatorStartTimeStamp;

		[Token(Token = "0x4003767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private float seatUseStartTimeStamp;

		[Token(Token = "0x4003768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private bool resetPlayerIkSolver;

		[Token(Token = "0x4003769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private int previouslySeenSceneIndex;

		[Token(Token = "0x400376A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private bool alwaysShowHelmet;

		[Token(Token = "0x60025F4")]
		[Address(RVA = "0x10FE864", Offset = "0x10FE864", VA = "0x10FE864")]
		public SpectatorHandler(Transform targetCamera, Transform cameraParent, SpectatorSettings spectatorSettings, InputData inputData, SpectatorPinger spectatorPinger, GameData gameData, ReplayData replayData, SpectatorData spectatorData, TrailerData trailerData, PlayerReferences localPlayerReference, EntryPoint.EntryPointData entryPointData, CameraFadeData cameraFadeData, GameDesignTrackingData gameDesignTrackingData, ArenaGameStateData arenaGameStateData, CharacterData characterData, AutoSpectateData autoSpectateData, SpectatorCameraData spectatorCameraData, SceneHandlerSettings sceneHandlerSettings, SceneHandlerData sceneHandlerData, ArenaItemSettings arenaItemSettings, EnvironmentSceneData environmentSceneData)
		{
		}

		[Token(Token = "0x60025F5")]
		[Address(RVA = "0x10FE948", Offset = "0x10FE948", VA = "0x10FE948")]
		[Conditional("IGNIS_DEBUG")]
		public void SetUpDebug()
		{
		}

		[Token(Token = "0x60025F6")]
		[Address(RVA = "0x10FE94C", Offset = "0x10FE94C", VA = "0x10FE94C")]
		private void SetAlwaysShowHelmet(bool isEnabled)
		{
		}

		[Token(Token = "0x60025F7")]
		[Address(RVA = "0x10FE958", Offset = "0x10FE958", VA = "0x10FE958", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60025F8")]
		[Address(RVA = "0x10FEA68", Offset = "0x10FEA68", VA = "0x10FEA68")]
		private void SelectSpectatorViews()
		{
		}

		[Token(Token = "0x60025F9")]
		[Address(RVA = "0x10FEB5C", Offset = "0x10FEB5C", VA = "0x10FEB5C")]
		private void SetIsSpectating(bool shouldSpectate)
		{
		}

		[Token(Token = "0x60025FA")]
		[Address(RVA = "0x10FEE34", Offset = "0x10FEE34", VA = "0x10FEE34")]
		private void CheckSpectatorInput()
		{
		}

		[Token(Token = "0x60025FB")]
		[Address(RVA = "0x10FEF00", Offset = "0x10FEF00", VA = "0x10FEF00")]
		private void UpdateTargetToFollow()
		{
		}

		[Token(Token = "0x60025FC")]
		[Address(RVA = "0x10FEF7C", Offset = "0x10FEF7C", VA = "0x10FEF7C")]
		private void HidePlayer()
		{
		}

		[Token(Token = "0x60025FD")]
		[Address(RVA = "0x10FF380", Offset = "0x10FF380", VA = "0x10FF380")]
		private void RotateAroundTarget()
		{
		}

		[Token(Token = "0x60025FE")]
		[Address(RVA = "0x10FF1A4", Offset = "0x10FF1A4", VA = "0x10FF1A4")]
		private void CheckTargetToFollow()
		{
		}

		[Token(Token = "0x60025FF")]
		[Address(RVA = "0x10FFAB4", Offset = "0x10FFAB4", VA = "0x10FFAB4")]
		private void CheckCustomTargets()
		{
		}

		[Token(Token = "0x6002600")]
		[Address(RVA = "0x10FF9A4", Offset = "0x10FF9A4", VA = "0x10FF9A4")]
		private void CheckToolTargets()
		{
		}

		[Token(Token = "0x6002601")]
		[Address(RVA = "0x10FF888", Offset = "0x10FF888", VA = "0x10FF888")]
		private void CheckProjectileTarget()
		{
		}

		[Token(Token = "0x6002602")]
		[Address(RVA = "0x10FF794", Offset = "0x10FF794", VA = "0x10FF794")]
		private void CheckPlayerTargets()
		{
		}

		[Token(Token = "0x6002603")]
		[Address(RVA = "0x10FF3C0", Offset = "0x10FF3C0", VA = "0x10FF3C0")]
		private void FollowTarget()
		{
		}

		[Token(Token = "0x6002604")]
		[Address(RVA = "0x10FF230", Offset = "0x10FF230", VA = "0x10FF230")]
		private void SetTargetToFollow()
		{
		}

		[Token(Token = "0x6002605")]
		[Address(RVA = "0x10FFBCC", Offset = "0x10FFBCC", VA = "0x10FFBCC")]
		private void SetHeadRenderActive(int index, bool active)
		{
		}

		[Token(Token = "0x6002606")]
		[Address(RVA = "0x10FF358", Offset = "0x10FF358", VA = "0x10FF358")]
		private void SetupForRotation()
		{
		}

		[Token(Token = "0x6002607")]
		[Address(RVA = "0x10FFCCC", Offset = "0x10FFCCC", VA = "0x10FFCCC")]
		private void SetSpectatorView(SpectatorView spectatorView)
		{
		}

		[Token(Token = "0x6002608")]
		[Address(RVA = "0x10FF06C", Offset = "0x10FF06C", VA = "0x10FF06C")]
		public void GoToNexSeat()
		{
		}

		[Token(Token = "0x6002609")]
		[Address(RVA = "0x10FFB90", Offset = "0x10FFB90", VA = "0x10FFB90")]
		public void GoToPreviousSeat()
		{
		}

		[Token(Token = "0x600260A")]
		[Address(RVA = "0x10FFD68", Offset = "0x10FFD68", VA = "0x10FFD68")]
		private void GoToCurrentSeat()
		{
		}

		[Token(Token = "0x600260B")]
		[Address(RVA = "0x10FF0A8", Offset = "0x10FF0A8", VA = "0x10FF0A8")]
		private void TrackSeatUse()
		{
		}
	}
	[Token(Token = "0x200087C")]
	public class SpectatorMenuViewReference : MonoBehaviour
	{
		[Token(Token = "0x400376B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject container;

		[Token(Token = "0x400376C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SpectatorRoomListViewReference friendly;

		[Token(Token = "0x400376D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SpectatorRoomListViewReference duel;

		[Token(Token = "0x400376E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SpectatorRoomListViewReference shootoutDuels;

		[Token(Token = "0x400376F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SpectatorRoomListViewReference tournevent;

		[Token(Token = "0x4003770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Button toggleSpectatorUiButton;

		[Token(Token = "0x600260C")]
		[Address(RVA = "0x10FFDC8", Offset = "0x10FFDC8", VA = "0x10FFDC8")]
		public SpectatorMenuViewReference()
		{
		}
	}
	[Token(Token = "0x200087D")]
	public class SpectatorPinger
	{
		[Token(Token = "0x4003771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ReplayData replayData;

		[Token(Token = "0x4003772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IgnisNetworkConnectionData ignisNetworkConnectionData;

		[Token(Token = "0x4003773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly GameData gameData;

		[Token(Token = "0x4003774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RaiseEventOptions raiseEventOptions;

		[Token(Token = "0x4003775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SendOptions sendOptions;

		[Token(Token = "0x600260D")]
		[Address(RVA = "0x10FFDD0", Offset = "0x10FFDD0", VA = "0x10FFDD0")]
		public SpectatorPinger(ReplayData replayData, IgnisNetworkConnectionData ignisNetworkConnectionData, GameData gameData)
		{
		}

		[Token(Token = "0x600260E")]
		[Address(RVA = "0x10FED54", Offset = "0x10FED54", VA = "0x10FED54")]
		public void Ping()
		{
		}
	}
	[Token(Token = "0x200087E")]
	public class SpectatorRoomListMenuViewHandler : ITickable
	{
		[Token(Token = "0x4003776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MatchStartAnnouncementsData matchStartAnnouncementsData;

		[Token(Token = "0x4003777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly SpectatorSettingsData spectatorSettingsData;

		[Token(Token = "0x4003778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4003779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x400377A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ExperimentalFeaturesData experimentalFeaturesData;

		[Token(Token = "0x400377B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x400377C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SpectatorMenuViewReference viewReference;

		[Token(Token = "0x400377D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool isShowingView;

		[Token(Token = "0x400377E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float lastAnnouncementListUpdateTime;

		[Token(Token = "0x400377F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool isShowingToggleButton;

		[Token(Token = "0x600260F")]
		[Address(RVA = "0x10FFE78", Offset = "0x10FFE78", VA = "0x10FFE78")]
		public SpectatorRoomListMenuViewHandler(MatchStartAnnouncementsData matchStartAnnouncementsData, SpectatorSettingsData spectatorSettingsData, MenuStateData menuStateData, FindFriendData findFriendData, ExperimentalFeaturesData experimentalFeaturesData, AutoSpectateData autoSpectateData)
		{
		}

		[Token(Token = "0x6002610")]
		[Address(RVA = "0x10FFED4", Offset = "0x10FFED4", VA = "0x10FFED4")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6002611")]
		[Address(RVA = "0x110041C", Offset = "0x110041C", VA = "0x110041C")]
		private void ShowSpectatorRoomList()
		{
		}

		[Token(Token = "0x6002612")]
		[Address(RVA = "0x110043C", Offset = "0x110043C", VA = "0x110043C")]
		public void SetupDebug(DebugMenu debugMenu)
		{
		}

		[Token(Token = "0x6002613")]
		[Address(RVA = "0x1100440", Offset = "0x1100440", VA = "0x1100440")]
		private void OnSpectateDuelClick(int i)
		{
		}

		[Token(Token = "0x6002614")]
		[Address(RVA = "0x1100594", Offset = "0x1100594", VA = "0x1100594")]
		private void OnSpectateShootoutDuelClick(int i)
		{
		}

		[Token(Token = "0x6002615")]
		[Address(RVA = "0x11005BC", Offset = "0x11005BC", VA = "0x11005BC")]
		private void OnSpectateFriendlyClick(int i)
		{
		}

		[Token(Token = "0x6002616")]
		[Address(RVA = "0x11005E4", Offset = "0x11005E4", VA = "0x11005E4")]
		private void OnSpectateTournEventClick(int i)
		{
		}

		[Token(Token = "0x6002617")]
		[Address(RVA = "0x1100468", Offset = "0x1100468", VA = "0x1100468")]
		private void OnSpectateClick(List<MatchStartAnnouncementItem> announcements, int i)
		{
		}

		[Token(Token = "0x6002618")]
		[Address(RVA = "0x110060C", Offset = "0x110060C", VA = "0x110060C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002619")]
		[Address(RVA = "0x1100718", Offset = "0x1100718", VA = "0x1100718")]
		private void UpdateListOfRooms()
		{
		}

		[Token(Token = "0x600261A")]
		[Address(RVA = "0x11007D4", Offset = "0x11007D4", VA = "0x11007D4")]
		private void UpdateRows(SpectatorRoomListViewReference listViewReference, List<MatchStartAnnouncementItem> matchStartAnnouncements)
		{
		}
	}
	[Token(Token = "0x2000883")]
	public class SpectatorRoomListViewItemReference : MonoBehaviour
	{
		[Token(Token = "0x4003788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI roomCodeText;

		[Token(Token = "0x4003789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button spectateButton;

		[Token(Token = "0x6002623")]
		[Address(RVA = "0x1100B78", Offset = "0x1100B78", VA = "0x1100B78")]
		public SpectatorRoomListViewItemReference()
		{
		}
	}
	[Token(Token = "0x2000884")]
	public class SpectatorRoomListViewReference : MonoBehaviour
	{
		[Token(Token = "0x400378A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<SpectatorRoomListViewItemReference> roomRows;

		[Token(Token = "0x6002624")]
		[Address(RVA = "0x1100B80", Offset = "0x1100B80", VA = "0x1100B80")]
		public SpectatorRoomListViewReference()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000885")]
	public struct SpectatorView
	{
		[Token(Token = "0x400378B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 position;

		[Token(Token = "0x400378C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 rotation;

		[Token(Token = "0x6002625")]
		[Address(RVA = "0x1100BFC", Offset = "0x1100BFC", VA = "0x1100BFC")]
		public SpectatorView(Vector3 position, Vector3 rotation)
		{
		}
	}
	[Token(Token = "0x2000886")]
	[CreateAssetMenu(menuName = "Settings/Spectator/SpectatorSettings")]
	public class SpectatorSettings : ScriptableObject
	{
		[Token(Token = "0x400378D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float spectatorPingRate;

		[Token(Token = "0x400378E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 positionOffsetWhenRotation;

		[Token(Token = "0x400378F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SpectateRequestViewReference spectateRequestViewReference;

		[Token(Token = "0x4003790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SpectatorViewReference spectatorViewReference;

		[Token(Token = "0x6002626")]
		[Address(RVA = "0x1100C0C", Offset = "0x1100C0C", VA = "0x1100C0C")]
		public SpectatorSettings()
		{
		}
	}
	[Token(Token = "0x2000887")]
	public class SpectatorSettingsData
	{
		[Token(Token = "0x4003791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isSpectator;

		[Token(Token = "0x4003792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool spectatorAvailible;

		[Token(Token = "0x6002627")]
		[Address(RVA = "0x1100C1C", Offset = "0x1100C1C", VA = "0x1100C1C")]
		public SpectatorSettingsData()
		{
		}
	}
	[Token(Token = "0x2000888")]
	public class SpectatorViewHandler : ITickable
	{
		[Token(Token = "0x4003793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SpectatorSettings spectatorSettings;

		[Token(Token = "0x4003794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly SpectatorHandler spectatorHandler;

		[Token(Token = "0x4003795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PauseMenuData pauseMenuData;

		[Token(Token = "0x4003796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4003797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GameData gameData;

		[Token(Token = "0x4003798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ArenaGameState arenaGameState;

		[Token(Token = "0x4003799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly NetworkData networkData;

		[Token(Token = "0x400379A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x400379B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private SpectatorViewReference spectatorViewReference;

		[Token(Token = "0x400379C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool showingSpectatorView;

		[Token(Token = "0x400379D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Locale locale;

		[Token(Token = "0x6002628")]
		[Address(RVA = "0x1100C24", Offset = "0x1100C24", VA = "0x1100C24")]
		public SpectatorViewHandler(SpectatorSettings spectatorSettings, SpectatorHandler spectatorHandler, PauseMenuData pauseMenuData, GameData gameData, ArenaGameState arenaGameState, NetworkData networkData, FindFriendData findFriendData, AutoSpectateData autoSpectateData)
		{
		}

		[Token(Token = "0x6002629")]
		[Address(RVA = "0x1100CCC", Offset = "0x1100CCC", VA = "0x1100CCC")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600262A")]
		[Address(RVA = "0x1100EA0", Offset = "0x1100EA0", VA = "0x1100EA0")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x600262B")]
		[Address(RVA = "0x1100EF8", Offset = "0x1100EF8", VA = "0x1100EF8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600262C")]
		[Address(RVA = "0x1100F88", Offset = "0x1100F88", VA = "0x1100F88")]
		private void UpdateView()
		{
		}
	}
	[Token(Token = "0x2000889")]
	public class SpectatorViewReference : MonoBehaviour
	{
		[Token(Token = "0x400379E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x400379F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Button goToNextSpectatorSeat;

		[Token(Token = "0x40037A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Button goToPreviousSpectatorSeat;

		[Token(Token = "0x40037A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Button stopSpectating;

		[Token(Token = "0x40037A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshProUGUI roomCode;

		[Token(Token = "0x40037A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI closeTipText;

		[Token(Token = "0x40037A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject roomCodeParent;

		[Token(Token = "0x600262D")]
		[Address(RVA = "0x11010F8", Offset = "0x11010F8", VA = "0x11010F8")]
		public SpectatorViewReference()
		{
		}
	}
	[Token(Token = "0x200088A")]
	public class TrailerData
	{
		[Token(Token = "0x40037A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float movementSmoothTime;

		[Token(Token = "0x40037A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float handSmoothTime;

		[Token(Token = "0x40037A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float headSmoothTime;

		[Token(Token = "0x40037A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rotationSmoothTime;

		[Token(Token = "0x40037A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float rotatingObjectSpeed;

		[Token(Token = "0x40037AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isSmoothingMovement;

		[Token(Token = "0x40037AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool isSmoothingHandMovement;

		[Token(Token = "0x40037AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool isSmoothingHeadMovement;

		[Token(Token = "0x40037AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool keepHorizontal;

		[Token(Token = "0x40037AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool overridePosition;

		[Token(Token = "0x40037AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool overrideRotation;

		[Token(Token = "0x40037B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool skipAnimations;

		[Token(Token = "0x40037B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool hideGamePlayUi;

		[Token(Token = "0x40037B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string trailerMode;

		[Token(Token = "0x40037B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool isTrailerInputActive;

		[Token(Token = "0x40037B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Queue<VisualQualityHandlerData> activatePPRequest;

		[Token(Token = "0x600262E")]
		[Address(RVA = "0x1101100", Offset = "0x1101100", VA = "0x1101100")]
		public TrailerData()
		{
		}
	}
	[Token(Token = "0x200088B")]
	public class TrailerHandler : ITickable
	{
		[Token(Token = "0x40037B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly TrailerSettings trailerSettings;

		[Token(Token = "0x40037B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly TrailerData trailerData;

		[Token(Token = "0x40037B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Transform targetHeadCameraTransform;

		[Token(Token = "0x40037B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Camera targetCamera;

		[Token(Token = "0x40037B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly InputDesktopSettings inputDesktopSettings;

		[Token(Token = "0x40037BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ScoreBoardData scoreBoardData;

		[Token(Token = "0x40037BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly LocalPlayerData localPlayerData;

		[Token(Token = "0x40037BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly SceneHandlerData sceneHandlerData;

		[Token(Token = "0x40037BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly SceneHandlerSettings sceneHandlerSettings;

		[Token(Token = "0x40037BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly DebugData debugData;

		[Token(Token = "0x40037BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly ReplayData replayData;

		[Token(Token = "0x40037C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform recordingCamera;

		[Token(Token = "0x40037C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool isVideoRecodingCameraSpawned;

		[Token(Token = "0x40037C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 movementVelocity;

		[Token(Token = "0x40037C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion rotationVelocity;

		[Token(Token = "0x40037C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly float defaultDesktopSpeed;

		[Token(Token = "0x40037C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector3 smoothCameraLocalPosition;

		[Token(Token = "0x40037C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 smoothCameraOffset;

		[Token(Token = "0x40037C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly AudioMixer audioMixer;

		[Token(Token = "0x40037C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool musicAndCrowedActive;

		[Token(Token = "0x40037C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int fbxAnimationClipToUseForTrailer;

		[Token(Token = "0x40037CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool applyRootMotion;

		[Token(Token = "0x40037CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Vector3 addedPositionFromDebug;

		[Token(Token = "0x40037CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion addedRotationFromDebug;

		[Token(Token = "0x40037CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float cameraPhysicalFocalLength;

		[Token(Token = "0x40037CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private bool isDofActive;

		[Token(Token = "0x40037CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float dofFov;

		[Token(Token = "0x40037D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float dofFocusDistance;

		[Token(Token = "0x40037D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float dofFocalLength;

		[Token(Token = "0x40037D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float dofAperture;

		[Token(Token = "0x40037D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private DepthOfField dofComponent;

		[Token(Token = "0x40037D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private int currentSceneIndex;

		[Token(Token = "0x40037D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private bool currentPPStatus;

		[Token(Token = "0x40037D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
		private bool cursorShouldBeVisible;

		[Token(Token = "0x600262F")]
		[Address(RVA = "0x11011A0", Offset = "0x11011A0", VA = "0x11011A0")]
		public TrailerHandler(TrailerSettings trailerSettings, TrailerData trailerData, Camera targetCamera, InputDesktopSettings inputDesktopSettings, MenuStateSettings menuStateSettings, ScoreBoardData scoreBoardData, LocalPlayerData localPlayerData, SceneHandlerData sceneHandlerData, SceneHandlerSettings sceneHandlerSettings, DebugData debugData, ReplayData replayData)
		{
		}

		[Token(Token = "0x6002630")]
		[Address(RVA = "0x11012B0", Offset = "0x11012B0", VA = "0x11012B0")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6002631")]
		[Address(RVA = "0x11012B4", Offset = "0x11012B4", VA = "0x11012B4")]
		private void DebugTogglePP()
		{
		}

		[Token(Token = "0x6002632")]
		[Address(RVA = "0x11012B8", Offset = "0x11012B8", VA = "0x11012B8")]
		private void SetDofFocalDistance(float value)
		{
		}

		[Token(Token = "0x6002633")]
		[Address(RVA = "0x11012C0", Offset = "0x11012C0", VA = "0x11012C0")]
		private void SetDofAperture(float value)
		{
		}

		[Token(Token = "0x6002634")]
		[Address(RVA = "0x11012C8", Offset = "0x11012C8", VA = "0x11012C8")]
		private void SetDofFocalLength(float value)
		{
		}

		[Token(Token = "0x6002635")]
		[Address(RVA = "0x11012D0", Offset = "0x11012D0", VA = "0x11012D0")]
		private void SetDofFov(float value)
		{
		}

		[Token(Token = "0x6002636")]
		[Address(RVA = "0x11012D8", Offset = "0x11012D8", VA = "0x11012D8")]
		private void SetPhysicalCameraFocalLength(float value)
		{
		}

		[Token(Token = "0x6002637")]
		[Address(RVA = "0x11012E0", Offset = "0x11012E0", VA = "0x11012E0")]
		private void SetRotationOffset(float arg1, float arg2, float arg3)
		{
		}

		[Token(Token = "0x6002638")]
		[Address(RVA = "0x1101314", Offset = "0x1101314", VA = "0x1101314")]
		private void SetPositionOffset(float arg1, float arg2, float arg3)
		{
		}

		[Token(Token = "0x6002639")]
		[Address(RVA = "0x1101320", Offset = "0x1101320", VA = "0x1101320")]
		private void SetFBXAnimation(int value)
		{
		}

		[Token(Token = "0x600263A")]
		[Address(RVA = "0x1101328", Offset = "0x1101328", VA = "0x1101328")]
		private void ShowScoreBoard(bool isActive)
		{
		}

		[Token(Token = "0x600263B")]
		[Address(RVA = "0x110140C", Offset = "0x110140C", VA = "0x110140C")]
		private void SetShowTools(bool isActive)
		{
		}

		[Token(Token = "0x600263C")]
		[Address(RVA = "0x11015B4", Offset = "0x11015B4", VA = "0x11015B4")]
		private void SetTrailerFreeCameraMode()
		{
		}

		[Token(Token = "0x600263D")]
		[Address(RVA = "0x11019C8", Offset = "0x11019C8", VA = "0x11019C8")]
		private void SetTrailerFollowTargetMode()
		{
		}

		[Token(Token = "0x600263E")]
		[Address(RVA = "0x1101B18", Offset = "0x1101B18", VA = "0x1101B18")]
		private void TurnOffTrailerMode()
		{
		}

		[Token(Token = "0x600263F")]
		[Address(RVA = "0x1101720", Offset = "0x1101720", VA = "0x1101720")]
		private void ToggleTrailerInput(bool active)
		{
		}

		[Token(Token = "0x6002640")]
		[Address(RVA = "0x1101A74", Offset = "0x1101A74", VA = "0x1101A74")]
		private void RemoveRecodingCamera()
		{
		}

		[Token(Token = "0x6002641")]
		[Address(RVA = "0x110174C", Offset = "0x110174C", VA = "0x110174C")]
		private void SpawnRecodingCamera()
		{
		}

		[Token(Token = "0x6002642")]
		[Address(RVA = "0x1101660", Offset = "0x1101660", VA = "0x1101660")]
		private void SetCrowdAndMusicGroup(bool value)
		{
		}

		[Token(Token = "0x6002643")]
		[Address(RVA = "0x1101BC0", Offset = "0x1101BC0", VA = "0x1101BC0", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002644")]
		[Address(RVA = "0x11017E8", Offset = "0x11017E8", VA = "0x11017E8")]
		private void TogglePostProcessingScene(bool status, [Optional] Camera camera, [Optional] RenderPipelineAsset renderPipelineAsset)
		{
		}

		[Token(Token = "0x6002645")]
		[Address(RVA = "0x1101E80", Offset = "0x1101E80", VA = "0x1101E80")]
		private void ToggleOn(string postProsScene, Camera camera, RenderPipelineAsset renderPipelineAsset)
		{
		}

		[Token(Token = "0x6002646")]
		[Address(RVA = "0x1101C80", Offset = "0x1101C80", VA = "0x1101C80")]
		private void ToggleOff(string postProsScene, Camera camera, RenderPipelineAsset renderPipelineAsset)
		{
		}
	}
	[Token(Token = "0x200088C")]
	[CreateAssetMenu(fileName = "TrailerSettings", menuName = "Settings/Input/TrailerSettings", order = 1)]
	public class TrailerSettings : ScriptableObject
	{
		[Token(Token = "0x40037D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyCode increaseFov;

		[Token(Token = "0x40037D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public KeyCode decreaseFov;

		[Token(Token = "0x40037D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KeyCode resetFov;

		[Token(Token = "0x40037DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotatingObjectSpeed;

		[Token(Token = "0x40037DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public KeyCode increaseRotationSpeed;

		[Token(Token = "0x40037DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public KeyCode decreaseRotationSpeed;

		[Token(Token = "0x40037DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public KeyCode resetRotationSpeed;

		[Token(Token = "0x40037DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How long it takes for the object to settle at the target object's position")]
		public float movementSmoothTime;

		[Token(Token = "0x40037DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float headSmoothTime;

		[Token(Token = "0x40037E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float handSmoothTime;

		[Token(Token = "0x40037E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public KeyCode increaseMovementSmoothing;

		[Token(Token = "0x40037E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public KeyCode decreaseMovementSmoothing;

		[Token(Token = "0x40037E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public KeyCode resetMovementSmoothing;

		[Token(Token = "0x40037E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("How long it takes for the object to settle at the target object's rotation")]
		public float rotationSmoothTime;

		[Token(Token = "0x40037E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public KeyCode increaseRotationSmoothing;

		[Token(Token = "0x40037E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public KeyCode decreaseRotationSmoothing;

		[Token(Token = "0x40037E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public KeyCode resetRotationSmoothing;

		[Token(Token = "0x40037E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float tweekSpeed;

		[Token(Token = "0x40037E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Camera headsetRecordingCamera;

		[Token(Token = "0x40037EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public KeyCode localOffsetRight;

		[Token(Token = "0x40037EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public KeyCode localOffsetLeft;

		[Token(Token = "0x40037EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public KeyCode localOffsetDown;

		[Token(Token = "0x40037ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public KeyCode localOffsetUp;

		[Token(Token = "0x40037EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public KeyCode localOffsetBack;

		[Token(Token = "0x40037EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public KeyCode localOffsetForward;

		[Token(Token = "0x40037F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public KeyCode localOffsetReset;

		[Token(Token = "0x40037F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public KeyCode localNegativePitchRotation;

		[Token(Token = "0x40037F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public KeyCode localNegativeYawRotation;

		[Token(Token = "0x40037F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public KeyCode localPositivePitchRotation;

		[Token(Token = "0x40037F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public KeyCode localPositiveYawRotation;

		[Token(Token = "0x40037F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public KeyCode localeRotationReset;

		[Token(Token = "0x40037F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("Loading FBX and PostProcessing")]
		public KeyCode startFbxCameraMovement;

		[Token(Token = "0x40037F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public RuntimeAnimatorController fbxAnimatorController;

		[Token(Token = "0x40037F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Vector3 fbxOffsetPosition;

		[Token(Token = "0x40037F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public Quaternion fbxOffsetRotation;

		[Token(Token = "0x40037FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public KeyCode activatePostProcess;

		[Token(Token = "0x40037FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Volume globalPostProcessingVolume;

		[Token(Token = "0x40037FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public RenderPipelineAsset regularRenderPipelineAsset;

		[Token(Token = "0x40037FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public RenderPipelineAsset trailerRenderPipelineAsset;

		[Token(Token = "0x40037FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AnimationClip[] fbxAnimationClips;

		[Token(Token = "0x40037FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public KeyCode dofDistancePlus;

		[Token(Token = "0x4003800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public KeyCode dofDistanceMinus;

		[Token(Token = "0x4003801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public KeyCode apertureDistancePlus;

		[Token(Token = "0x4003802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public KeyCode apertureDistanceMinus;

		[Token(Token = "0x6002647")]
		[Address(RVA = "0x1102110", Offset = "0x1102110", VA = "0x1102110")]
		public TrailerSettings()
		{
		}
	}
	[Token(Token = "0x200088D")]
	public class SplashGameState : IGameState
	{
		[Token(Token = "0x4003803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly SplashGameStateSettings data;

		[Token(Token = "0x4003804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4003805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly NetworkConnectionHandler networkConnectionHandler;

		[Token(Token = "0x6002648")]
		[Address(RVA = "0x11021CC", Offset = "0x11021CC", VA = "0x11021CC")]
		public SplashGameState(SplashGameStateSettings data, IgnisNetworkConnectionData networkModel, NetworkConnectionHandler networkConnectionHandler)
		{
		}

		[Token(Token = "0x6002649")]
		[Address(RVA = "0x1102208", Offset = "0x1102208", VA = "0x1102208", Slot = "4")]
		public void Initalize()
		{
		}

		[Token(Token = "0x600264A")]
		[Address(RVA = "0x110224C", Offset = "0x110224C", VA = "0x110224C", Slot = "6")]
		public EntryPoint.GameState Tick()
		{
			return default(EntryPoint.GameState);
		}

		[Token(Token = "0x600264B")]
		[Address(RVA = "0x1102254", Offset = "0x1102254", VA = "0x1102254", Slot = "10")]
		public void OnApplicationPause(bool isPaused)
		{
		}

		[Token(Token = "0x600264C")]
		[Address(RVA = "0x1102258", Offset = "0x1102258", VA = "0x1102258", Slot = "11")]
		public void Terminate()
		{
		}

		[Token(Token = "0x600264D")]
		[Address(RVA = "0x110225C", Offset = "0x110225C", VA = "0x110225C", Slot = "8")]
		public void LateTick()
		{
		}

		[Token(Token = "0x600264E")]
		[Address(RVA = "0x1102260", Offset = "0x1102260", VA = "0x1102260", Slot = "9")]
		public void FixedTick()
		{
		}

		[Token(Token = "0x600264F")]
		[Address(RVA = "0x1102264", Offset = "0x1102264", VA = "0x1102264", Slot = "5")]
		public void PreTick()
		{
		}

		[Token(Token = "0x6002650")]
		[Address(RVA = "0x1102268", Offset = "0x1102268", VA = "0x1102268", Slot = "7")]
		public void PostTick()
		{
		}
	}
	[Token(Token = "0x200088E")]
	[CreateAssetMenu(fileName = "SplashGameStateSettings", menuName = "Settings/Game State/SplashGameStateSettings", order = 1)]
	public class SplashGameStateSettings : ScriptableObject
	{
		[Token(Token = "0x4003806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string stateName;

		[Token(Token = "0x6002651")]
		[Address(RVA = "0x110226C", Offset = "0x110226C", VA = "0x110226C")]
		public SplashGameStateSettings()
		{
		}
	}
	[Token(Token = "0x200088F")]
	public class BowserToIgnisSingletonData
	{
		[Token(Token = "0x4003807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<ExternalStartFriendlyRequest> startFriendlyRequests;

		[Token(Token = "0x4003808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<ExternalStartStoryEventRequest> startStoryEventRequests;

		[Token(Token = "0x4003809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Queue<ExternalStartReplayRequest> startReplayRequests;

		[Token(Token = "0x400380A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Queue<ExternalDeepLinqRequest> startDeepLinqRequest;

		[Token(Token = "0x6002652")]
		[Address(RVA = "0x1102274", Offset = "0x1102274", VA = "0x1102274")]
		public BowserToIgnisSingletonData()
		{
		}
	}
	[Token(Token = "0x2000890")]
	public class ExternalStartFriendlyRequest
	{
		[Token(Token = "0x400380B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string roomCode;

		[Token(Token = "0x400380C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NetworkingRegion networkingRegion;

		[Token(Token = "0x400380D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool isSpectator;

		[Token(Token = "0x400380E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool returnToBowserAfterMatch;

		[Token(Token = "0x400380F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string returnAfterMatchParameters;

		[Token(Token = "0x4003810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public KnockoutTournamentMatchInfo? knockoutTournamentMatchInfo;

		[Token(Token = "0x6002653")]
		[Address(RVA = "0x11023BC", Offset = "0x11023BC", VA = "0x11023BC")]
		public ExternalStartFriendlyRequest(string roomCode, NetworkingRegion networkingRegion, bool returnToBowserAfterMatch = false, [Optional] string returnAfterMatchParameters, bool isSpectator = false, [Optional] KnockoutTournamentMatchInfo knockoutTournamentMatchInfo)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000891")]
	public class KnockoutTournamentMatchInfo
	{
		[Token(Token = "0x4003811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string tournamentd;

		[Token(Token = "0x4003812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string accessCode;

		[Token(Token = "0x4003813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string matchId;

		[Token(Token = "0x4003814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string myUserId;

		[Token(Token = "0x4003815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string opponentUserId;

		[Token(Token = "0x6002654")]
		[Address(RVA = "0x1102418", Offset = "0x1102418", VA = "0x1102418")]
		public KnockoutTournamentMatchInfo(string tournamentd, string accessCode, string matchId, string myUserId, string opponentUserId)
		{
		}
	}
	[Token(Token = "0x2000892")]
	public class ExternalStartStoryEventRequest
	{
		[Token(Token = "0x4003816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string objectiveId;

		[Token(Token = "0x4003817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool returnToBowserAfterMatch;

		[Token(Token = "0x4003818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string returnAfterMatchParameters;

		[Token(Token = "0x6002655")]
		[Address(RVA = "0x1102468", Offset = "0x1102468", VA = "0x1102468")]
		public ExternalStartStoryEventRequest(string objectiveId, bool returnToBowserAfterMatch, string returnAfterMatchParameters)
		{
		}
	}
	[Token(Token = "0x2000893")]
	public class ExternalDeepLinqRequest
	{
		[Token(Token = "0x4003819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string destination;

		[Token(Token = "0x400381A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string lobbyId;

		[Token(Token = "0x400381B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string matchId;

		[Token(Token = "0x6002656")]
		[Address(RVA = "0x11024A8", Offset = "0x11024A8", VA = "0x11024A8")]
		public ExternalDeepLinqRequest(string destination, string lobbyId, string matchId)
		{
		}
	}
	[Token(Token = "0x2000894")]
	public class ExternalStartReplayRequest
	{
		[Token(Token = "0x400381C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string replayUri;

		[Token(Token = "0x400381D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool returnToBowserAfterMatch;

		[Token(Token = "0x400381E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string returnAfterMatchParameters;

		[Token(Token = "0x400381F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string gameplayRules;

		[Token(Token = "0x6002657")]
		[Address(RVA = "0x11024E4", Offset = "0x11024E4", VA = "0x11024E4")]
		public ExternalStartReplayRequest(string replayUri, bool returnToBowserAfterMatch, string returnAfterMatchParameters, string gameplayRules)
		{
		}
	}
	[Token(Token = "0x2000895")]
	public class BowserToIgnisSingleton
	{
		[Token(Token = "0x4003820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static BowserToIgnisSingletonData instance;

		[Token(Token = "0x6002658")]
		[Address(RVA = "0x1102528", Offset = "0x1102528", VA = "0x1102528")]
		public BowserToIgnisSingleton()
		{
		}
	}
	[Token(Token = "0x2000896")]
	public readonly struct FadeRequest
	{
		[Token(Token = "0x4003821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly bool fadeOut;

		[Token(Token = "0x4003822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public readonly bool forceFade;

		[Token(Token = "0x4003823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly float fadeDuration;

		[Token(Token = "0x600265A")]
		[Address(RVA = "0x11025A4", Offset = "0x11025A4", VA = "0x11025A4")]
		public FadeRequest(bool fadeOut, bool forceFade, float fadeDuration = 0f)
		{
		}
	}
	[Token(Token = "0x2000897")]
	public enum FadeState
	{
		[Token(Token = "0x4003825")]
		NoFade,
		[Token(Token = "0x4003826")]
		FadeTransition,
		[Token(Token = "0x4003827")]
		FullFade
	}
	[Token(Token = "0x2000898")]
	public class CameraFadeData
	{
		[Token(Token = "0x4003828")]
		public const float GLOBAL_FADE_TIME = 1f;

		[Token(Token = "0x4003829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FadeState currentFadeState;

		[Token(Token = "0x400382A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<FadeRequest> requestFade;

		[Token(Token = "0x400382B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CameraFadeReference cameraFadeReference;

		[Token(Token = "0x400382C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FadeState targetFadeState;

		[Token(Token = "0x600265B")]
		[Address(RVA = "0x11025BC", Offset = "0x11025BC", VA = "0x11025BC")]
		public CameraFadeData()
		{
		}
	}
	[Token(Token = "0x2000899")]
	public class CameraFadeHandler : ITickable
	{
		[Token(Token = "0x400382D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly CameraFadeData fadeData;

		[Token(Token = "0x400382E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly CameraFadeSettings cameraFadeSettings;

		[Token(Token = "0x400382F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Camera camera;

		[Token(Token = "0x4003830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CameraFadeReference cameraFadeReference;

		[Token(Token = "0x4003831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color currentColor;

		[Token(Token = "0x4003832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float targetAlpha;

		[Token(Token = "0x4003833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool isFadeDone;

		[Token(Token = "0x4003834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float fadeDuration;

		[Token(Token = "0x600265C")]
		[Address(RVA = "0x110263C", Offset = "0x110263C", VA = "0x110263C")]
		public CameraFadeHandler(CameraFadeData fadeData, CameraFadeSettings cameraFadeSettings, Camera camera)
		{
		}

		[Token(Token = "0x600265D")]
		[Address(RVA = "0x1102678", Offset = "0x1102678", VA = "0x1102678")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600265E")]
		[Address(RVA = "0x110278C", Offset = "0x110278C", VA = "0x110278C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600265F")]
		[Address(RVA = "0x11028A4", Offset = "0x11028A4", VA = "0x11028A4")]
		private void StartFade(FadeRequest fadeRequest)
		{
		}

		[Token(Token = "0x6002660")]
		[Address(RVA = "0x1102B0C", Offset = "0x1102B0C", VA = "0x1102B0C")]
		private void SetFadeDone(FadeState fadeState)
		{
		}

		[Token(Token = "0x6002661")]
		[Address(RVA = "0x1102964", Offset = "0x1102964", VA = "0x1102964")]
		private void ChangeState(FadeState nextState)
		{
		}

		[Token(Token = "0x6002662")]
		[Address(RVA = "0x1102A0C", Offset = "0x1102A0C", VA = "0x1102A0C")]
		private bool FadeTowardsTarget()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200089A")]
	public class CameraFadeReference : MonoBehaviour
	{
		[Token(Token = "0x4003835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4003836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Image fadeImage;

		[Token(Token = "0x6002663")]
		[Address(RVA = "0x1102B90", Offset = "0x1102B90", VA = "0x1102B90")]
		public CameraFadeReference()
		{
		}
	}
	[Token(Token = "0x200089B")]
	[CreateAssetMenu(menuName = "Settings/Utility/CameraFadeSettings", fileName = "CameraFadeSettings")]
	public class CameraFadeSettings : ScriptableObject
	{
		[Token(Token = "0x4003837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float fadeDuration;

		[Token(Token = "0x4003838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CameraFadeReference cameraFadeReference;

		[Token(Token = "0x6002664")]
		[Address(RVA = "0x1102B98", Offset = "0x1102B98", VA = "0x1102B98")]
		public CameraFadeSettings()
		{
		}
	}
	[Token(Token = "0x200089C")]
	public class startup : MonoBehaviour
	{
		[Token(Token = "0x200089D")]
		[CompilerGenerated]
		private sealed class <Start>d__37 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400385E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400385F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003860")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public startup <>4__this;

			[Token(Token = "0x4003861")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Transform <worldParent>5__2;

			[Token(Token = "0x4003862")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private DebugData <debugData>5__3;

			[Token(Token = "0x4003863")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private OnboardingGameStateData <onboardingGameStateData>5__4;

			[Token(Token = "0x4003864")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private MatchHandlerData <matchHandlerData>5__5;

			[Token(Token = "0x4003865")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private ArenaGameStateData <arenaGameStateData>5__6;

			[Token(Token = "0x4003866")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private XrPluginData <xrPluginData>5__7;

			[Token(Token = "0x17000192")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002674")]
				[Address(RVA = "0x1104ACC", Offset = "0x1104ACC", VA = "0x1104ACC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000193")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002676")]
				[Address(RVA = "0x1104B14", Offset = "0x1104B14", VA = "0x1104B14", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002671")]
			[Address(RVA = "0x1102C10", Offset = "0x1102C10", VA = "0x1102C10")]
			[DebuggerHidden]
			public <Start>d__37(int <>1__state)
			{
			}

			[Token(Token = "0x6002672")]
			[Address(RVA = "0x1103254", Offset = "0x1103254", VA = "0x1103254", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002673")]
			[Address(RVA = "0x1103258", Offset = "0x1103258", VA = "0x1103258", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002675")]
			[Address(RVA = "0x1104AD4", Offset = "0x1104AD4", VA = "0x1104AD4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200089E")]
		[CompilerGenerated]
		private sealed class <LoadMainSceneAsync>d__43 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003867")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003868")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003869")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public startup <>4__this;

			[Token(Token = "0x400386A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string scene;

			[Token(Token = "0x400386B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public InputData inputData;

			[Token(Token = "0x400386C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private AsyncOperationHandle<SceneInstance> <asyncLoad>5__2;

			[Token(Token = "0x17000194")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600267A")]
				[Address(RVA = "0x1105018", Offset = "0x1105018", VA = "0x1105018", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000195")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600267C")]
				[Address(RVA = "0x1105060", Offset = "0x1105060", VA = "0x1105060", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002677")]
			[Address(RVA = "0x1103000", Offset = "0x1103000", VA = "0x1103000")]
			[DebuggerHidden]
			public <LoadMainSceneAsync>d__43(int <>1__state)
			{
			}

			[Token(Token = "0x6002678")]
			[Address(RVA = "0x1104B1C", Offset = "0x1104B1C", VA = "0x1104B1C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002679")]
			[Address(RVA = "0x1104B20", Offset = "0x1104B20", VA = "0x1104B20", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600267B")]
			[Address(RVA = "0x1105020", Offset = "0x1105020", VA = "0x1105020", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200089F")]
		[CompilerGenerated]
		private sealed class <LoadShaders>d__45 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400386D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400386E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400386F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public startup <>4__this;

			[Token(Token = "0x4003870")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x4003871")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <n>5__3;

			[Token(Token = "0x4003872")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private string <shaderName>5__4;

			[Token(Token = "0x4003873")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private ShaderVariantCollection <shaderVariantCollection>5__5;

			[Token(Token = "0x17000196")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002680")]
				[Address(RVA = "0x11051EC", Offset = "0x11051EC", VA = "0x11051EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000197")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002682")]
				[Address(RVA = "0x1105234", Offset = "0x1105234", VA = "0x1105234", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600267D")]
			[Address(RVA = "0x1103090", Offset = "0x1103090", VA = "0x1103090")]
			[DebuggerHidden]
			public <LoadShaders>d__45(int <>1__state)
			{
			}

			[Token(Token = "0x600267E")]
			[Address(RVA = "0x1105068", Offset = "0x1105068", VA = "0x1105068", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600267F")]
			[Address(RVA = "0x110506C", Offset = "0x110506C", VA = "0x110506C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002681")]
			[Address(RVA = "0x11051F4", Offset = "0x11051F4", VA = "0x11051F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20008A0")]
		[CompilerGenerated]
		private sealed class <WaitForMainSceneToLoad>d__46 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003874")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003875")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003876")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public startup <>4__this;

			[Token(Token = "0x4003877")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AsyncOperationHandle<SceneInstance> asyncLoad;

			[Token(Token = "0x4003878")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private bool <finishedLoadingMainScene>5__2;

			[Token(Token = "0x17000198")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002686")]
				[Address(RVA = "0x110545C", Offset = "0x110545C", VA = "0x110545C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000199")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002688")]
				[Address(RVA = "0x11054A4", Offset = "0x11054A4", VA = "0x11054A4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002683")]
			[Address(RVA = "0x1103138", Offset = "0x1103138", VA = "0x1103138")]
			[DebuggerHidden]
			public <WaitForMainSceneToLoad>d__46(int <>1__state)
			{
			}

			[Token(Token = "0x6002684")]
			[Address(RVA = "0x110523C", Offset = "0x110523C", VA = "0x110523C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002685")]
			[Address(RVA = "0x1105240", Offset = "0x1105240", VA = "0x1105240", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002687")]
			[Address(RVA = "0x1105464", Offset = "0x1105464", VA = "0x1105464", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20008A1")]
		[CompilerGenerated]
		private sealed class <CheckGdpr>d__47 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003879")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400387A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400387B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public startup <>4__this;

			[Token(Token = "0x400387C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public InputData inputData;

			[Token(Token = "0x400387D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <gdprSigned>5__2;

			[Token(Token = "0x1700019A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600268C")]
				[Address(RVA = "0x11058D0", Offset = "0x11058D0", VA = "0x11058D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700019B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600268E")]
				[Address(RVA = "0x1105918", Offset = "0x1105918", VA = "0x1105918", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002689")]
			[Address(RVA = "0x11031D4", Offset = "0x11031D4", VA = "0x11031D4")]
			[DebuggerHidden]
			public <CheckGdpr>d__47(int <>1__state)
			{
			}

			[Token(Token = "0x600268A")]
			[Address(RVA = "0x11054AC", Offset = "0x11054AC", VA = "0x11054AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600268B")]
			[Address(RVA = "0x11054B0", Offset = "0x11054B0", VA = "0x11054B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600268D")]
			[Address(RVA = "0x11058D8", Offset = "0x11058D8", VA = "0x11058D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4003839")]
		public const string GDPRACCEPTED = "GDPRACCEPTED";

		[Token(Token = "0x400383A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject splashCanvas;

		[Token(Token = "0x400383B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform cameraRoot;

		[Token(Token = "0x400383C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Canvas gdprCanvas;

		[Token(Token = "0x400383D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Canvas oculusEntitlementCanvas;

		[Token(Token = "0x400383E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private CameraFadeSettings cameraFadeSettings;

		[Token(Token = "0x400383F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private PointerRaycastHandlerSettings pointerRaycastHandlerSettings;

		[Token(Token = "0x4003840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private LocaleFonts localeFonts;

		[Token(Token = "0x4003841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private SoundTriggersList soundTriggersList;

		[Token(Token = "0x4003842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Transform rightHand;

		[Token(Token = "0x4003843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform leftHand;

		[Token(Token = "0x4003844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("GDPR")]
		[SerializeField]
		private IgnisButton gdprAcceptButton;

		[Token(Token = "0x4003845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private IgnisButton tosButton;

		[Token(Token = "0x4003846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private IgnisButton privacyButton;

		[Token(Token = "0x4003847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private PlayFabConnectionSettings playFabConnectionSettings;

		[Token(Token = "0x4003848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("AutoSpectator")]
		public AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4003849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private string[] shaderToLoad;

		[Token(Token = "0x400384A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[Header("Debug")]
		private bool shouldDisableGdpr;

		[Token(Token = "0x400384B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private CameraReference cameraReference;

		[Token(Token = "0x400384C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private IPlatformFactory platformFactory;

		[Token(Token = "0x400384D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private ITickable platformLoginHandler;

		[Token(Token = "0x400384E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private PlatformLoginData platformLoginData;

		[Token(Token = "0x400384F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private TimeSinceStartupTrackingHandler timeSinceStartupTrackingHandler;

		[Token(Token = "0x4003850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private CameraFadeHandler cameraFadeHandler;

		[Token(Token = "0x4003851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private CameraFadeData cameraFadeData;

		[Token(Token = "0x4003852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private IInputHandler inputHandler;

		[Token(Token = "0x4003853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private PointerHandler pointerHandler;

		[Token(Token = "0x4003854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private PointerRaycastHandler pointerRaycastHandler;

		[Token(Token = "0x4003855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private InteractionHandler interactionHandler;

		[Token(Token = "0x4003856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private bool gdprAccepted;

		[Token(Token = "0x4003857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		private bool shouldRunUpdate;

		[Token(Token = "0x4003858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private PointerData pointerData;

		[Token(Token = "0x4003859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private ILoginHandler loginHandler;

		[Token(Token = "0x400385A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private PlayFabTitleIdComponent playFabTitleIdComponent;

		[Token(Token = "0x400385B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private IMultiplayerProtocolVersion multiplayerProtocolVersion;

		[Token(Token = "0x400385C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private IXrPluginHandler xrPluginHandler;

		[Token(Token = "0x400385D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x6002665")]
		[Address(RVA = "0x1102BA8", Offset = "0x1102BA8", VA = "0x1102BA8")]
		[IteratorStateMachine(typeof(<Start>d__37))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6002666")]
		[Address(RVA = "0x1102C38", Offset = "0x1102C38", VA = "0x1102C38")]
		private void OpenTermsOfService()
		{
		}

		[Token(Token = "0x6002667")]
		[Address(RVA = "0x1102C7C", Offset = "0x1102C7C", VA = "0x1102C7C")]
		private void OpenPrivacyPolicy()
		{
		}

		[Token(Token = "0x6002668")]
		[Address(RVA = "0x1102CC0", Offset = "0x1102CC0", VA = "0x1102CC0")]
		private void OnButtonClick()
		{
		}

		[Token(Token = "0x6002669")]
		[Address(RVA = "0x1102CCC", Offset = "0x1102CCC", VA = "0x1102CCC")]
		private void Update()
		{
		}

		[Token(Token = "0x600266A")]
		[Address(RVA = "0x1102EDC", Offset = "0x1102EDC", VA = "0x1102EDC")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600266B")]
		[Address(RVA = "0x1102F84", Offset = "0x1102F84", VA = "0x1102F84")]
		[IteratorStateMachine(typeof(<LoadMainSceneAsync>d__43))]
		private IEnumerator LoadMainSceneAsync(InputData inputData, string scene)
		{
			return null;
		}

		[Token(Token = "0x600266C")]
		[Address(RVA = "0x1102E48", Offset = "0x1102E48", VA = "0x1102E48")]
		private void SetCameraFade(bool one, bool two)
		{
		}

		[Token(Token = "0x600266D")]
		[Address(RVA = "0x1103028", Offset = "0x1103028", VA = "0x1103028")]
		[IteratorStateMachine(typeof(<LoadShaders>d__45))]
		private IEnumerator LoadShaders()
		{
			return null;
		}

		[Token(Token = "0x600266E")]
		[Address(RVA = "0x11030B8", Offset = "0x11030B8", VA = "0x11030B8")]
		[IteratorStateMachine(typeof(<WaitForMainSceneToLoad>d__46))]
		private IEnumerator WaitForMainSceneToLoad(AsyncOperationHandle<SceneInstance> asyncLoad)
		{
			return null;
		}

		[Token(Token = "0x600266F")]
		[Address(RVA = "0x1103160", Offset = "0x1103160", VA = "0x1103160")]
		[IteratorStateMachine(typeof(<CheckGdpr>d__47))]
		private IEnumerator CheckGdpr(InputData inputData)
		{
			return null;
		}

		[Token(Token = "0x6002670")]
		[Address(RVA = "0x11031FC", Offset = "0x11031FC", VA = "0x11031FC")]
		public startup()
		{
		}
	}
	[Token(Token = "0x20008A2")]
	public class XrPluginData
	{
		[Token(Token = "0x400387E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isInitialized;

		[Token(Token = "0x600268F")]
		[Address(RVA = "0x1105920", Offset = "0x1105920", VA = "0x1105920")]
		public XrPluginData()
		{
		}
	}
	[Token(Token = "0x20008A3")]
	public interface IXrPluginHandler : ITickable
	{
		[Token(Token = "0x6002690")]
		void StopXRPlugin();
	}
	[Token(Token = "0x20008A4")]
	public class XrPluginHandler : IXrPluginHandler, ITickable
	{
		[Token(Token = "0x20008A5")]
		private enum InitializationState
		{
			[Token(Token = "0x4003887")]
			NotInitialized,
			[Token(Token = "0x4003888")]
			Initializing,
			[Token(Token = "0x4003889")]
			StartSupSystem,
			[Token(Token = "0x400388A")]
			Initialized,
			[Token(Token = "0x400388B")]
			NonXrDevice,
			[Token(Token = "0x400388C")]
			Completed
		}

		[Token(Token = "0x400387F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ITimeSinceStartupTracking timeSinceStartupTracking;

		[Token(Token = "0x4003880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly XrPluginData xrPluginData;

		[Token(Token = "0x4003881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int frameAmount;

		[Token(Token = "0x4003882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private XRManagerSettings xrManagerSettings;

		[Token(Token = "0x4003883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool xrSubSystemStarted;

		[Token(Token = "0x4003884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private InitializationState initializationState;

		[Token(Token = "0x4003885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InputDevice headDevice;

		[Token(Token = "0x6002691")]
		[Address(RVA = "0x1105928", Offset = "0x1105928", VA = "0x1105928")]
		public XrPluginHandler(DevicePlatform devicePlatform, ITimeSinceStartupTracking timeSinceStartupTracking, XrPluginData xrPluginData)
		{
		}

		[Token(Token = "0x6002692")]
		[Address(RVA = "0x1105AC0", Offset = "0x1105AC0", VA = "0x1105AC0")]
		private void SetDisplayFrequency()
		{
		}

		[Token(Token = "0x6002693")]
		[Address(RVA = "0x1105C10", Offset = "0x1105C10", VA = "0x1105C10", Slot = "5")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002694")]
		[Address(RVA = "0x1105A28", Offset = "0x1105A28", VA = "0x1105A28")]
		private void ChangeState(InitializationState newState)
		{
		}

		[Token(Token = "0x6002695")]
		[Address(RVA = "0x1105E3C", Offset = "0x1105E3C", VA = "0x1105E3C", Slot = "4")]
		public void StopXRPlugin()
		{
		}
	}
	[Token(Token = "0x20008A6")]
	public class GameDesignTelemetryHandler : ITickable
	{
		[Token(Token = "0x400388D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x400388E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameDesignTrackingData gameDesignTrackingData;

		[Token(Token = "0x400388F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x4003890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4003891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x4003892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly MatchRewardPredictionData matchRewardPredictionData;

		[Token(Token = "0x4003893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ShopData shopData;

		[Token(Token = "0x4003894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly GameData gameData;

		[Token(Token = "0x4003895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly PlayFabLoginData playFabLoginData;

		[Token(Token = "0x4003896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x4003897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4003898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly bool livIsEnabled;

		[Token(Token = "0x4003899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly Queue<string> matchesToBeDeletedAsTheyAreReported;

		[Token(Token = "0x400389A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ProfilerMarker tickProfilerMarker;

		[Token(Token = "0x400389B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private LoginData.LoginState latestSeenPlayFabLoginState;

		[Token(Token = "0x6002696")]
		[Address(RVA = "0x1105FA8", Offset = "0x1105FA8", VA = "0x1105FA8")]
		public GameDesignTelemetryHandler(EntryPoint.EntryPointData entryPointData, GameDesignTrackingData gameDesignTrackingData, PlayFabProgressionData playFabProgressionData, IgnisNetworkConnectionData networkConnectionData, CustomizationData customizationData, MatchRewardPredictionData matchRewardPredictionData, ShopData shopData, GameData gameData, PlayFabLoginData playFabLoginData, IgnisTelemetry ignisTelemetry, LocalPersistentData localPersistentData, bool livIsEnabled)
		{
		}

		[Token(Token = "0x6002697")]
		[Address(RVA = "0x11060D8", Offset = "0x11060D8", VA = "0x11060D8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002698")]
		[Address(RVA = "0x1108E48", Offset = "0x1108E48", VA = "0x1108E48")]
		private void TrackAttachmentUsage(List<ToolSet> trackingLocalPlayerDeck)
		{
		}

		[Token(Token = "0x6002699")]
		[Address(RVA = "0x1109BC4", Offset = "0x1109BC4", VA = "0x1109BC4")]
		private void CheckNewAccountCreation()
		{
		}

		[Token(Token = "0x600269A")]
		[Address(RVA = "0x11096C8", Offset = "0x11096C8", VA = "0x11096C8")]
		private void Track(SpectatorMatchTracking request)
		{
		}

		[Token(Token = "0x600269B")]
		[Address(RVA = "0x110910C", Offset = "0x110910C", VA = "0x110910C")]
		private void Track(ItemPurchaseTracking request)
		{
		}

		[Token(Token = "0x600269C")]
		[Address(RVA = "0x1107F34", Offset = "0x1107F34", VA = "0x1107F34")]
		private void Track(PlayMatchTracking playMatchTracking)
		{
		}

		[Token(Token = "0x600269D")]
		[Address(RVA = "0x1106CAC", Offset = "0x1106CAC", VA = "0x1106CAC")]
		private void Track(PlayRoundTracking playRoundTracking)
		{
		}

		[Token(Token = "0x600269E")]
		[Address(RVA = "0x110A190", Offset = "0x110A190", VA = "0x110A190")]
		private void ConsumeParameterForTrackedValue(Tracking.TrackingEvent trackingEvent, int playerNetworkId, GameDesignTrackingData.Type type, string prefix)
		{
		}

		[Token(Token = "0x600269F")]
		[Address(RVA = "0x1109D64", Offset = "0x1109D64", VA = "0x1109D64")]
		private void ConsumeParameterForTrackedValueAsPercentage(Tracking.TrackingEvent trackingEvent, int playerNetworkId, GameDesignTrackingData.Type type, string prefix, int max)
		{
		}

		[Token(Token = "0x60026A0")]
		[Address(RVA = "0x11068D0", Offset = "0x11068D0", VA = "0x11068D0")]
		private void Track(PlayChangeTracking playChangeTracking)
		{
		}
	}
	[Token(Token = "0x20008A7")]
	public class PlayRoundTracking
	{
		[Token(Token = "0x400389C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string matchId;

		[Token(Token = "0x400389D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly GameplayRules gameplayRules;

		[Token(Token = "0x400389E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly float loserHPLeft;

		[Token(Token = "0x400389F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly float winnerHPLeft;

		[Token(Token = "0x40038A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly float duration;

		[Token(Token = "0x40038A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly bool localPlayerWon;

		[Token(Token = "0x40038A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public readonly int round;

		[Token(Token = "0x60026A1")]
		[Address(RVA = "0x110A4B0", Offset = "0x110A4B0", VA = "0x110A4B0")]
		public PlayRoundTracking(string matchId, GameplayRules gameplayRules, float loserHpLeft, float winnerHpLeft, float duration, bool localPlayerWon, int round)
		{
		}
	}
	[Token(Token = "0x20008A8")]
	public readonly struct SpectatorMatchTracking
	{
		[Token(Token = "0x40038A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string matchId;

		[Token(Token = "0x40038A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly float duration;

		[Token(Token = "0x60026A2")]
		[Address(RVA = "0x10FF198", Offset = "0x10FF198", VA = "0x10FF198")]
		public SpectatorMatchTracking(string matchId, float duration)
		{
		}
	}
	[Token(Token = "0x20008A9")]
	public class GameDesignTrackingData
	{
		[Token(Token = "0x20008AA")]
		public enum Type
		{
			[Token(Token = "0x40038AE")]
			Damage,
			[Token(Token = "0x40038AF")]
			Grab,
			[Token(Token = "0x40038B0")]
			Collision,
			[Token(Token = "0x40038B1")]
			BodyPartDamage,
			[Token(Token = "0x40038B2")]
			SpectatorSeat
		}

		[Token(Token = "0x40038A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string ThrownStringKey;

		[Token(Token = "0x40038A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<PlayChangeTracking> playChangeTrackings;

		[Token(Token = "0x40038A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<PlayMatchTracking> playMatchTrackings;

		[Token(Token = "0x40038A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Queue<PlayRoundTracking> playRoundTrackings;

		[Token(Token = "0x40038A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Queue<SpectatorMatchTracking> spectatorMatchTrackings;

		[Token(Token = "0x40038AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<string, GameDesignTrackingMatchData> matchDatas;

		[Token(Token = "0x40038AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Dictionary<int, Dictionary<Type, Dictionary<string, float>>> roundRecords;

		[Token(Token = "0x40038AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Queue<ItemPurchaseTracking> itemPurchaseTrackingRequests;

		[Token(Token = "0x60026A3")]
		[Address(RVA = "0x10FFDC4", Offset = "0x10FFDC4", VA = "0x10FFDC4")]
		public void AddValueTrackingRecord(Type type, string partitionName, float value, int receiver)
		{
		}

		[Token(Token = "0x60026A4")]
		[Address(RVA = "0x110A51C", Offset = "0x110A51C", VA = "0x110A51C")]
		public void AddDamageRecord(Type type, string partitionName, float value, int receiver)
		{
		}

		[Token(Token = "0x60026A5")]
		[Address(RVA = "0x110A7F8", Offset = "0x110A7F8", VA = "0x110A7F8")]
		public void ResetAllRoundRecords()
		{
		}

		[Token(Token = "0x60026A6")]
		[Address(RVA = "0x110A848", Offset = "0x110A848", VA = "0x110A848")]
		public GameDesignTrackingData()
		{
		}
	}
	[Token(Token = "0x20008AB")]
	public class ItemPurchaseTracking
	{
		[Token(Token = "0x40038B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string name;

		[Token(Token = "0x40038B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string type;

		[Token(Token = "0x40038B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly int realMoneyChange;

		[Token(Token = "0x40038B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly int premiumChange;

		[Token(Token = "0x40038B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly int freemiumChange;

		[Token(Token = "0x40038B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public readonly int experienceChange;

		[Token(Token = "0x40038B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string origin;

		[Token(Token = "0x40038BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string ORIGIN_SHOP;

		[Token(Token = "0x40038BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string ORIGIN_MISSIONS;

		[Token(Token = "0x60026A8")]
		[Address(RVA = "0x110AAD8", Offset = "0x110AAD8", VA = "0x110AAD8")]
		public ItemPurchaseTracking(string name, string type, int realMoneyChange, int premiumChange, int freemiumChange, int experienceChange, string origin)
		{
		}

		[Token(Token = "0x60026A9")]
		[Address(RVA = "0x110AB3C", Offset = "0x110AB3C", VA = "0x110AB3C")]
		public static ItemPurchaseTracking CreatePremiumItemPurchase(string requestItemId, string itemType, int itemPrice, string origin)
		{
			return null;
		}

		[Token(Token = "0x60026AA")]
		[Address(RVA = "0x110ABC8", Offset = "0x110ABC8", VA = "0x110ABC8")]
		public static ItemPurchaseTracking CreateFreemiumItemPurchase(string requestItemId, string itemType, int itemPrice, string origin)
		{
			return null;
		}

		[Token(Token = "0x60026AB")]
		[Address(RVA = "0x110AC58", Offset = "0x110AC58", VA = "0x110AC58")]
		public static ItemPurchaseTracking CreateToolPurchase(string itemId, int price, int experiencePointsForBuyingTool, string origin)
		{
			return null;
		}

		[Token(Token = "0x60026AC")]
		[Address(RVA = "0x110AD00", Offset = "0x110AD00", VA = "0x110AD00")]
		public static ItemPurchaseTracking CreatePremiumCoinsPurchase(string itemId, int priceToPay, int itemCoinsToReceive, string origin)
		{
			return null;
		}

		[Token(Token = "0x60026AD")]
		[Address(RVA = "0x110ADA4", Offset = "0x110ADA4", VA = "0x110ADA4")]
		public static ItemPurchaseTracking CreateFreemiumCoinsPurchase(string itemId, int priceToPay, int itemCoinsToReceive, string origin)
		{
			return null;
		}

		[Token(Token = "0x60026AE")]
		[Address(RVA = "0x110AE4C", Offset = "0x110AE4C", VA = "0x110AE4C")]
		public static ItemPurchaseTracking CreateMissionReward(string rewardItemId, string itemType, int premiumPrice, int freemiumPrice)
		{
			return null;
		}
	}
	[Token(Token = "0x20008AC")]
	public class GameDesignTrackingMatchData
	{
		[Token(Token = "0x20008AD")]
		public enum MatchType
		{
			[Token(Token = "0x40038C5")]
			rank_bot,
			[Token(Token = "0x40038C6")]
			rank_player,
			[Token(Token = "0x40038C7")]
			friend,
			[Token(Token = "0x40038C8")]
			debug_bot,
			[Token(Token = "0x40038C9")]
			tournament,
			[Token(Token = "0x40038CA")]
			campaign,
			[Token(Token = "0x40038CB")]
			arcade_bot,
			[Token(Token = "0x40038CC")]
			arcade_player,
			[Token(Token = "0x40038CD")]
			shootout
		}

		[Token(Token = "0x40038BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MatchType type;

		[Token(Token = "0x40038BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly int playerOneLeaguePoints;

		[Token(Token = "0x40038BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly int playerTwoLeaguePoints;

		[Token(Token = "0x40038BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string botName;

		[Token(Token = "0x40038C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly int localPlayerNetworkId;

		[Token(Token = "0x40038C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public readonly int opponentNetworkId;

		[Token(Token = "0x40038C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly List<int> reportedRounds;

		[Token(Token = "0x40038C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string origin;

		[Token(Token = "0x60026B0")]
		[Address(RVA = "0x110AF84", Offset = "0x110AF84", VA = "0x110AF84")]
		public GameDesignTrackingMatchData(MatchType type, int playerOneLeaguePoints, int playerTwoLeaguePoints, string botName, int localPlayerNetworkId, int opponentNetworkId, string origin)
		{
		}

		[Token(Token = "0x60026B1")]
		[Address(RVA = "0x110A174", Offset = "0x110A174", VA = "0x110A174")]
		public int OpponentLeaguePoints(int playerOneNetworkId)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20008AE")]
	public class PlayMatchTracking
	{
		[Token(Token = "0x40038CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string matchId;

		[Token(Token = "0x40038CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly GameplayRules gameplayRules;

		[Token(Token = "0x40038D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly int numberOfRounds;

		[Token(Token = "0x40038D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly bool localPlayerWon;

		[Token(Token = "0x40038D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly float duration;

		[Token(Token = "0x40038D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string incident;

		[Token(Token = "0x40038D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly List<ToolSet> localPlayerDeck;

		[Token(Token = "0x60026B2")]
		[Address(RVA = "0x110B058", Offset = "0x110B058", VA = "0x110B058")]
		public PlayMatchTracking(string matchId, GameplayRules gameplayRules, int numberOfRounds, bool localPlayerWon, float duration, string incident, List<ToolSet> localPlayerDeck)
		{
		}
	}
	[Token(Token = "0x20008AF")]
	public class PlayChangeTracking
	{
		[Token(Token = "0x20008B0")]
		public enum Type
		{
			[Token(Token = "0x40038D9")]
			tool,
			[Token(Token = "0x40038DA")]
			avatar,
			[Token(Token = "0x40038DB")]
			banner,
			[Token(Token = "0x40038DC")]
			platform,
			[Token(Token = "0x40038DD")]
			toolSkin,
			[Token(Token = "0x40038DE")]
			itemPack,
			[Token(Token = "0x40038DF")]
			arena
		}

		[Token(Token = "0x40038D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type type;

		[Token(Token = "0x40038D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string added;

		[Token(Token = "0x40038D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string removed;

		[Token(Token = "0x60026B3")]
		[Address(RVA = "0x110B0C0", Offset = "0x110B0C0", VA = "0x110B0C0")]
		public PlayChangeTracking(Type type, string added, string removed)
		{
		}
	}
	[Token(Token = "0x20008B1")]
	public class IgnisMandatoryTelemetryHandler : ITickable
	{
		[Token(Token = "0x40038E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IgnisTelemetry ignisTelemetry;

		[Token(Token = "0x40038E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x40038E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PlayFabLoginData playFabLoginData;

		[Token(Token = "0x40038E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x40038E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ArenaGameStateData arenaGameStateData;

		[Token(Token = "0x40038E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string lastSeenPlayFabId;

		[Token(Token = "0x40038E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string lastSeenMatchId;

		[Token(Token = "0x40038E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int lastSeenPlayerExp;

		[Token(Token = "0x40038E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int lastSeenPlayerLp;

		[Token(Token = "0x60026B4")]
		[Address(RVA = "0x110B0FC", Offset = "0x110B0FC", VA = "0x110B0FC")]
		public IgnisMandatoryTelemetryHandler(IgnisTelemetry ignisTelemetry, EntryPoint.EntryPointData entryPointData, PlayFabLoginData playFabLoginData, PlayFabProgressionData playFabProgressionData, ArenaGameStateData arenaGameStateData)
		{
		}

		[Token(Token = "0x60026B5")]
		[Address(RVA = "0x110B14C", Offset = "0x110B14C", VA = "0x110B14C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60026B6")]
		[Address(RVA = "0x110B1F4", Offset = "0x110B1F4", VA = "0x110B1F4")]
		private void CheckForMatchId()
		{
		}

		[Token(Token = "0x60026B7")]
		[Address(RVA = "0x110B16C", Offset = "0x110B16C", VA = "0x110B16C")]
		private void CheckForPlayFabId()
		{
		}

		[Token(Token = "0x60026B8")]
		[Address(RVA = "0x110B2D0", Offset = "0x110B2D0", VA = "0x110B2D0")]
		private void CheckPlayerProgress()
		{
		}
	}
	[Token(Token = "0x20008B2")]
	public class IgnisTelemetry : Tracking.Tracker
	{
		[Token(Token = "0x40038E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ITrackerFactory trackerFactory;

		[Token(Token = "0x40038EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<string, string> addedStringValues;

		[Token(Token = "0x40038EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, int> addedIntValues;

		[Token(Token = "0x40038EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static IgnisTelemetry instance;

		[Token(Token = "0x60026B9")]
		[Address(RVA = "0x110B498", Offset = "0x110B498", VA = "0x110B498")]
		public IgnisTelemetry(ITrackerFactory trackerFactory)
		{
		}

		[Token(Token = "0x60026BA")]
		[Address(RVA = "0x1107AD0", Offset = "0x1107AD0", VA = "0x1107AD0", Slot = "4")]
		public Tracking.TrackingEvent Track(string eventName)
		{
			return null;
		}

		[Token(Token = "0x60026BB")]
		[Address(RVA = "0x110B398", Offset = "0x110B398", VA = "0x110B398")]
		public void SetParameter(string name, string value)
		{
		}

		[Token(Token = "0x60026BC")]
		[Address(RVA = "0x110B430", Offset = "0x110B430", VA = "0x110B430")]
		public void SetParameter(string name, int value)
		{
		}
	}
	[Token(Token = "0x20008B3")]
	public interface ITrackerFactory
	{
		[Token(Token = "0x60026BE")]
		Tracking.Tracker GetTracker();
	}
	[Token(Token = "0x20008B4")]
	public class TrackerFactory : ITrackerFactory
	{
		[Token(Token = "0x40038ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BackingTracker backingTracker;

		[Token(Token = "0x60026BF")]
		[Address(RVA = "0x110B660", Offset = "0x110B660", VA = "0x110B660", Slot = "4")]
		public Tracking.Tracker GetTracker()
		{
			return null;
		}

		[Token(Token = "0x60026C0")]
		[Address(RVA = "0x110B5F8", Offset = "0x110B5F8", VA = "0x110B5F8")]
		public TrackerFactory()
		{
		}
	}
	[Token(Token = "0x20008B5")]
	internal class BackingTracker : Tracking.Tracker
	{
		[Token(Token = "0x60026C1")]
		[Address(RVA = "0x110B670", Offset = "0x110B670", VA = "0x110B670", Slot = "4")]
		public Tracking.TrackingEvent Track(string eventName)
		{
			return null;
		}

		[Token(Token = "0x60026C2")]
		[Address(RVA = "0x110B668", Offset = "0x110B668", VA = "0x110B668")]
		public BackingTracker()
		{
		}
	}
	[Token(Token = "0x20008B6")]
	public class DummyTrackerFactory : ITrackerFactory
	{
		[Token(Token = "0x40038EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DummyTracker dummyTracker;

		[Token(Token = "0x60026C3")]
		[Address(RVA = "0x110B67C", Offset = "0x110B67C", VA = "0x110B67C", Slot = "4")]
		public Tracking.Tracker GetTracker()
		{
			return null;
		}

		[Token(Token = "0x60026C4")]
		[Address(RVA = "0x110B684", Offset = "0x110B684", VA = "0x110B684")]
		public DummyTrackerFactory()
		{
		}
	}
	[Token(Token = "0x20008B7")]
	internal class DummyTracker : Tracking.Tracker
	{
		[Token(Token = "0x60026C5")]
		[Address(RVA = "0x110B6F4", Offset = "0x110B6F4", VA = "0x110B6F4", Slot = "4")]
		public Tracking.TrackingEvent Track(string eventName)
		{
			return null;
		}

		[Token(Token = "0x60026C6")]
		[Address(RVA = "0x110B6EC", Offset = "0x110B6EC", VA = "0x110B6EC")]
		public DummyTracker()
		{
		}
	}
	[Token(Token = "0x20008B8")]
	internal class DummyTrackingEvent : Tracking.TrackingEvent
	{
		[Token(Token = "0x60026C7")]
		[Address(RVA = "0x110B758", Offset = "0x110B758", VA = "0x110B758", Slot = "4")]
		public Tracking.TrackingEvent AddParameter(string name, string value)
		{
			return null;
		}

		[Token(Token = "0x60026C8")]
		[Address(RVA = "0x110B75C", Offset = "0x110B75C", VA = "0x110B75C", Slot = "5")]
		public Tracking.TrackingEvent AddParameter(string name, int value)
		{
			return null;
		}

		[Token(Token = "0x60026C9")]
		[Address(RVA = "0x110B760", Offset = "0x110B760", VA = "0x110B760", Slot = "6")]
		public Tracking.TrackingEvent AddParameter(string name, long value)
		{
			return null;
		}

		[Token(Token = "0x60026CA")]
		[Address(RVA = "0x110B764", Offset = "0x110B764", VA = "0x110B764", Slot = "7")]
		public Tracking.TrackingEvent AddParameter(string name, float value)
		{
			return null;
		}

		[Token(Token = "0x60026CB")]
		[Address(RVA = "0x110B768", Offset = "0x110B768", VA = "0x110B768", Slot = "8")]
		public Tracking.TrackingEvent AddParameter(string name, double value)
		{
			return null;
		}

		[Token(Token = "0x60026CC")]
		[Address(RVA = "0x110B76C", Offset = "0x110B76C", VA = "0x110B76C", Slot = "9")]
		public Tracking.TrackingEvent AddParameter(string name, bool value)
		{
			return null;
		}

		[Token(Token = "0x60026CD")]
		[Address(RVA = "0x110B770", Offset = "0x110B770", VA = "0x110B770", Slot = "10")]
		public void Submit()
		{
		}

		[Token(Token = "0x60026CE")]
		[Address(RVA = "0x110B750", Offset = "0x110B750", VA = "0x110B750")]
		public DummyTrackingEvent()
		{
		}
	}
	[Token(Token = "0x20008B9")]
	public class TimeSinceStartupTrackingHandler : ITimeSinceStartupTracking, ITickable
	{
		[Token(Token = "0x40038EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<string> alreadyLoggedPoints;

		[Token(Token = "0x40038F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Queue<Tuple<string, float>> cachedLogPoints;

		[Token(Token = "0x60026CF")]
		[Address(RVA = "0x11047F8", Offset = "0x11047F8", VA = "0x11047F8", Slot = "4")]
		public void TrackTimeSinceStartup(string logPoint)
		{
		}

		[Token(Token = "0x60026D0")]
		[Address(RVA = "0x110B774", Offset = "0x110B774", VA = "0x110B774")]
		private void ProcessTelemetryEvent(string logPoint, float realtimeSinceStartup)
		{
		}

		[Token(Token = "0x60026D1")]
		[Address(RVA = "0x110BA94", Offset = "0x110BA94", VA = "0x110BA94", Slot = "5")]
		public void Tick()
		{
		}

		[Token(Token = "0x60026D2")]
		[Address(RVA = "0x110477C", Offset = "0x110477C", VA = "0x110477C")]
		public TimeSinceStartupTrackingHandler()
		{
		}
	}
	[Token(Token = "0x20008BA")]
	public interface ITimeSinceStartupTracking
	{
		[Token(Token = "0x60026D4")]
		void TrackTimeSinceStartup(string startupPoint);
	}
	[Token(Token = "0x20008BB")]
	public class TrackingStarter
	{
		[Token(Token = "0x40038F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool initialized;

		[Token(Token = "0x60026D5")]
		[Address(RVA = "0x11048B8", Offset = "0x11048B8", VA = "0x11048B8")]
		public static IgnisTelemetry StartTracking(string platform, string flavor)
		{
			return null;
		}

		[Token(Token = "0x60026D6")]
		[Address(RVA = "0x110BBBC", Offset = "0x110BBBC", VA = "0x110BBBC")]
		private static void AddScriptDefineSymbolInfo(Tracking.TrackingEvent trackingEvent)
		{
		}

		[Token(Token = "0x60026D7")]
		[Address(RVA = "0x110C248", Offset = "0x110C248", VA = "0x110C248")]
		public TrackingStarter()
		{
		}
	}
	[Token(Token = "0x20008BC")]
	public class BarrierGroupSlotReference : MonoBehaviour
	{
		[Token(Token = "0x40038F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BarrierSlotReference[] barriersSlots;

		[Token(Token = "0x40038F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rootTransform;

		[Token(Token = "0x60026D8")]
		[Address(RVA = "0x110C250", Offset = "0x110C250", VA = "0x110C250")]
		public BarrierGroupSlotReference()
		{
		}
	}
	[Token(Token = "0x20008BD")]
	public class BarrierShieldFactory : GenericToolFactory<BarrierShieldTool, BarrierShieldToolSettings>
	{
		[Token(Token = "0x40038F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly int attachmentId;

		[Token(Token = "0x40038F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly List<IEventTriggerEffects> eventTriggerEffectsList;

		[Token(Token = "0x60026D9")]
		[Address(RVA = "0x110C258", Offset = "0x110C258", VA = "0x110C258")]
		public BarrierShieldFactory(ToolName name, BarrierShieldToolSettings toolSettings, int attachmentId, ComponentPrefabPool<ToolReferences> referencePools, ComponentPrefabPool<BoxColliderReference> colliderReferencePool, ComponentPrefabPool<SphereColliderReference> sphereColliderReferencePool, CSharpObjectPool<BarrierShieldTool> toolPool, ToolInitializationUtility initializationUtility, List<IEventTriggerEffects> eventTriggerEffectsList)
		{
		}

		[Token(Token = "0x60026DA")]
		[Address(RVA = "0x110C31C", Offset = "0x110C31C", VA = "0x110C31C", Slot = "7")]
		protected override void InitializeTool(int toolNetworkId, BarrierShieldTool tool, ToolReferences references, BoxColliderReference colliderReference, SphereColliderReference sphereColliderReference, SphereColliderReference secondaryGrabToleranceColliderReference)
		{
		}
	}
	[Token(Token = "0x20008BE")]
	public class BarrierShieldTool : Tool
	{
		[Token(Token = "0x40038F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public bool activated;

		[Token(Token = "0x40038F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public BarrierShieldToolSettings toolSettings;

		[Token(Token = "0x40038F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public bool hasValidSlot;

		[Token(Token = "0x40038F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public int slotId;

		[Token(Token = "0x40038FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public Vector3 slotPosition;

		[Token(Token = "0x40038FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public BarrierToolReferences barrierToolReferences;

		[Token(Token = "0x40038FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private readonly CooldownColorComponent cooldownColorComponent;

		[Token(Token = "0x60026DB")]
		[Address(RVA = "0x110C48C", Offset = "0x110C48C", VA = "0x110C48C")]
		public BarrierShieldTool(IMessageSender messageSender, GameMessageFactory gameMessageFactory, NetworkIdAllocator networkIdAllocator, OwnershipHelper ownershipHelper, ImpactHandlerData impactHandlerData, ToolChargeComponent toolChargeComponent, ToolBowPullbackComponent toolBowPullbackComponent)
		{
		}

		[Token(Token = "0x60026DC")]
		[Address(RVA = "0x110C408", Offset = "0x110C408", VA = "0x110C408")]
		public void Initialize(BarrierToolReferences toolReferences, BoxColliderReference boxColliderReference, SphereColliderReference sphereColliderReference, SphereColliderReference secondaryGrabToleranceColliderReference, int toolNetworkId, ToolName toolName, BarrierShieldToolSettings toolSettings, int attachmentId, List<IEventTriggerEffects> effects)
		{
		}

		[Token(Token = "0x60026DD")]
		[Address(RVA = "0x110C568", Offset = "0x110C568", VA = "0x110C568", Slot = "54")]
		public override void InitializeVisuals()
		{
		}

		[Token(Token = "0x60026DE")]
		[Address(RVA = "0x110C5BC", Offset = "0x110C5BC", VA = "0x110C5BC")]
		public void HideToolHelpEffects()
		{
		}

		[Token(Token = "0x60026DF")]
		[Address(RVA = "0x110C6E8", Offset = "0x110C6E8", VA = "0x110C6E8", Slot = "60")]
		public override ImpactTypes ImpactType()
		{
			return default(ImpactTypes);
		}

		[Token(Token = "0x60026E0")]
		[Address(RVA = "0x110C6F0", Offset = "0x110C6F0", VA = "0x110C6F0", Slot = "59")]
		public override bool AllowedToTrigger(float timestamp)
		{
			return default(bool);
		}

		[Token(Token = "0x60026E1")]
		[Address(RVA = "0x110C710", Offset = "0x110C710", VA = "0x110C710", Slot = "61")]
		public override bool CanAutoTrigger()
		{
			return default(bool);
		}

		[Token(Token = "0x60026E2")]
		[Address(RVA = "0x110C718", Offset = "0x110C718", VA = "0x110C718", Slot = "58")]
		public override void Trigger(Vector3 averageVelocity, GameMessageFactory messageFactory, int tetherNetworkId = 0)
		{
		}

		[Token(Token = "0x60026E3")]
		[Address(RVA = "0x110C850", Offset = "0x110C850", VA = "0x110C850")]
		public void OnActivation()
		{
		}

		[Token(Token = "0x60026E4")]
		[Address(RVA = "0x110C8B0", Offset = "0x110C8B0", VA = "0x110C8B0", Slot = "56")]
		public override void MarkAsDestroyed(float timestamp)
		{
		}

		[Token(Token = "0x60026E5")]
		[Address(RVA = "0x110C8D8", Offset = "0x110C8D8", VA = "0x110C8D8", Slot = "69")]
		public override void Recycle()
		{
		}

		[Token(Token = "0x60026E6")]
		[Address(RVA = "0x110C8F4", Offset = "0x110C8F4", VA = "0x110C8F4", Slot = "70")]
		public override bool OutOfAmmo()
		{
			return default(bool);
		}

		[Token(Token = "0x60026E7")]
		[Address(RVA = "0x110C894", Offset = "0x110C894", VA = "0x110C894")]
		private void SetCooldownValue(float percentage)
		{
		}
	}
	[Token(Token = "0x20008BF")]
	public struct BarrierShieldData
	{
		[Token(Token = "0x40038FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int handID;

		[Token(Token = "0x40038FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public BarrierShieldTool barrierShield;

		[Token(Token = "0x60026E8")]
		[Address(RVA = "0x110C8FC", Offset = "0x110C8FC", VA = "0x110C8FC")]
		public BarrierShieldData(int handID, BarrierShieldTool barrierShield)
		{
		}
	}
	[Token(Token = "0x20008C0")]
	public class BarrierShieldToolHandlerData
	{
		[Token(Token = "0x40038FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly List<BarrierSlotData> barrierSlotsLocalPlayer;

		[Token(Token = "0x4003900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly List<BarrierSlotData> barrierSlotsAIPlayer;

		[Token(Token = "0x4003901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<int, List<BarrierSlotData>> barrierSlotLookUp;

		[Token(Token = "0x60026E9")]
		[Address(RVA = "0x110C908", Offset = "0x110C908", VA = "0x110C908")]
		public BarrierShieldToolHandlerData(BarrierSlotReference[] localPlayerBarriers, BarrierSlotReference[] AIPlayerBarriers)
		{
		}
	}
	[Token(Token = "0x20008C1")]
	public class BarrierSlotData
	{
		[Token(Token = "0x4003902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool active;

		[Token(Token = "0x4003903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int slotId;

		[Token(Token = "0x4003904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BarrierSlotReference barrier;

		[Token(Token = "0x4003905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BarrierSource barrierSource;

		[Token(Token = "0x60026EA")]
		[Address(RVA = "0x110CBA4", Offset = "0x110CBA4", VA = "0x110CBA4")]
		public BarrierSlotData()
		{
		}
	}
	[Token(Token = "0x20008C2")]
	public class BarrierShieldToolHandler : ITickable
	{
		[Token(Token = "0x4003906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool barrierSlotsHighlighted;

		[Token(Token = "0x4003907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool hadActiveSlotLastFrame;

		[Token(Token = "0x4003908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BarrierShieldToolHandlerData barrierShieldToolHandlerData;

		[Token(Token = "0x4003909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BarrierGroupSlotReference barrierGroupSlotReference;

		[Token(Token = "0x400390A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayerSpawnPointReference playerSpawnPointReference;

		[Token(Token = "0x400390B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Transform barriersRoot;

		[Token(Token = "0x400390C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly GrabData grabData;

		[Token(Token = "0x400390D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameData gameData;

		[Token(Token = "0x400390E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<BarrierShieldData> grabbedBarriers;

		[Token(Token = "0x60026EB")]
		[Address(RVA = "0x110CBAC", Offset = "0x110CBAC", VA = "0x110CBAC")]
		public BarrierShieldToolHandler(BarrierShieldToolHandlerData barrierShieldToolHandlerData, BarrierGroupSlotReference barrierGroupSlotReference, PlayerSpawnPointReference playerSpawnPointReference, GrabData grabData, GameData gameData)
		{
		}

		[Token(Token = "0x60026EC")]
		[Address(RVA = "0x110CC8C", Offset = "0x110CC8C", VA = "0x110CC8C")]
		public GameMessageInvokationResult OnSpawnPlayer(SpawnPlayerMessage spawnPlayerMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60026ED")]
		[Address(RVA = "0x110CDE8", Offset = "0x110CDE8", VA = "0x110CDE8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60026EE")]
		[Address(RVA = "0x110CE20", Offset = "0x110CE20", VA = "0x110CE20")]
		private void HandleShowingBarrierSlots()
		{
		}

		[Token(Token = "0x60026EF")]
		[Address(RVA = "0x110D100", Offset = "0x110D100", VA = "0x110D100")]
		private void HandleHighlightingBarrierSlots()
		{
		}

		[Token(Token = "0x60026F0")]
		[Address(RVA = "0x110D62C", Offset = "0x110D62C", VA = "0x110D62C")]
		public void CleanUpRound()
		{
		}

		[Token(Token = "0x60026F1")]
		[Address(RVA = "0x110D7C0", Offset = "0x110D7C0", VA = "0x110D7C0")]
		public void CleanUpMatch()
		{
		}
	}
	[Token(Token = "0x20008C4")]
	[CreateAssetMenu(fileName = "ToolSettings", menuName = "Settings/Tools/BarrierShieldTool", order = 1)]
	public class BarrierShieldToolSettings : ToolSetting
	{
		[Token(Token = "0x4003910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Barrier Unique Settings")]
		public BarrierProjectileReference sourceReference;

		[Token(Token = "0x4003911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public BarrierSourceSettings barrierSourceSettings;

		[Token(Token = "0x4003912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public string emissionColorName;

		[Token(Token = "0x60026F4")]
		[Address(RVA = "0x110D898", Offset = "0x110D898", VA = "0x110D898")]
		public BarrierShieldToolSettings()
		{
		}
	}
	[Token(Token = "0x20008C5")]
	public class BarrierSource : Projectile, IForceField
	{
		[Token(Token = "0x4003913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly ImpactHandlerData impactHandlerData;

		[Token(Token = "0x4003914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private BarrierProjectileReference barrierProjectileReference;

		[Token(Token = "0x4003915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material healthBar;

		[Token(Token = "0x4003916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private ForceFieldSettings forceFieldSettings;

		[Token(Token = "0x4003917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private ForceFieldState currentState;

		[Token(Token = "0x4003918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private EventHandler<ColliderListenerEventArgs> onTriggerEnter;

		[Token(Token = "0x1700019C")]
		public BoxColliderReference BoxColliderReference
		{
			[Token(Token = "0x60026F6")]
			[Address(RVA = "0x110D9E0", Offset = "0x110D9E0", VA = "0x110D9E0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60026F7")]
			[Address(RVA = "0x110D9E8", Offset = "0x110D9E8", VA = "0x110D9E8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700019D")]
		public ForceFieldProjectileData ForceFieldProjectileData
		{
			[Token(Token = "0x6002706")]
			[Address(RVA = "0x110DD24", Offset = "0x110DD24", VA = "0x110DD24", Slot = "62")]
			[CompilerGenerated]
			get
			{
				return default(ForceFieldProjectileData);
			}
			[Token(Token = "0x6002707")]
			[Address(RVA = "0x110DD30", Offset = "0x110DD30", VA = "0x110DD30")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60026F5")]
		[Address(RVA = "0x110D8E8", Offset = "0x110D8E8", VA = "0x110D8E8")]
		public BarrierSource(ImpactHandlerData impactHandlerData)
		{
		}

		[Token(Token = "0x60026F8")]
		[Address(RVA = "0x110D9F0", Offset = "0x110D9F0", VA = "0x110D9F0")]
		public void Initialize(float spawnTime, ProjectileReference reference, BoxColliderReference boxColliderReference, int projectileNetworkId, BarrierSourceSettings barrierShieldToolSettings, int projectileGroupId, ImpactSettings impactSettings, int playerInstigator, ToolName toolSpawnedFrom, float chargeAmount, float bowPullbackAmount, int tetherId, ForceFieldProjectileData forceFieldProjectileData)
		{
		}

		[Token(Token = "0x60026F9")]
		[Address(RVA = "0x110DBE0", Offset = "0x110DBE0", VA = "0x110DBE0")]
		private void OnTriggerEnter(object sender, ColliderListenerEventArgs eventArgs)
		{
		}

		[Token(Token = "0x60026FA")]
		[Address(RVA = "0x110DC6C", Offset = "0x110DC6C", VA = "0x110DC6C", Slot = "51")]
		public override void TriggerOnDestroy(Vector3 position)
		{
		}

		[Token(Token = "0x60026FB")]
		[Address(RVA = "0x110DC70", Offset = "0x110DC70", VA = "0x110DC70", Slot = "53")]
		public override void ClearEventhandlers()
		{
		}

		[Token(Token = "0x60026FC")]
		[Address(RVA = "0x110DC9C", Offset = "0x110DC9C", VA = "0x110DC9C", Slot = "54")]
		public override void Recycle()
		{
		}

		[Token(Token = "0x60026FD")]
		[Address(RVA = "0x110DCB8", Offset = "0x110DCB8", VA = "0x110DCB8", Slot = "46")]
		public override float GetDamageProjectile()
		{
			return default(float);
		}

		[Token(Token = "0x60026FE")]
		[Address(RVA = "0x110DCC0", Offset = "0x110DCC0", VA = "0x110DCC0", Slot = "47")]
		public override float GetDamagePlayer()
		{
			return default(float);
		}

		[Token(Token = "0x60026FF")]
		[Address(RVA = "0x110DCC8", Offset = "0x110DCC8", VA = "0x110DCC8", Slot = "48")]
		public override float GetProjectileRadius()
		{
			return default(float);
		}

		[Token(Token = "0x6002700")]
		[Address(RVA = "0x110DCD0", Offset = "0x110DCD0", VA = "0x110DCD0")]
		public void Activate()
		{
		}

		[Token(Token = "0x6002701")]
		[Address(RVA = "0x110DCDC", Offset = "0x110DCDC", VA = "0x110DCDC", Slot = "55")]
		public Material HealthBar()
		{
			return null;
		}

		[Token(Token = "0x6002702")]
		[Address(RVA = "0x110DCE4", Offset = "0x110DCE4", VA = "0x110DCE4", Slot = "57")]
		public bool IsDeactivated()
		{
			return default(bool);
		}

		[Token(Token = "0x6002703")]
		[Address(RVA = "0x110DCF4", Offset = "0x110DCF4", VA = "0x110DCF4", Slot = "59")]
		public void Deactivate()
		{
		}

		[Token(Token = "0x6002704")]
		[Address(RVA = "0x110DD00", Offset = "0x110DD00", VA = "0x110DD00", Slot = "60")]
		public Transform Reference()
		{
			return null;
		}

		[Token(Token = "0x6002705")]
		[Address(RVA = "0x110DD1C", Offset = "0x110DD1C", VA = "0x110DD1C", Slot = "61")]
		public ForceFieldSettings Settings()
		{
			return null;
		}
	}
	[Token(Token = "0x20008C6")]
	public class BarrierSourceData
	{
		[Token(Token = "0x400391B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly BarrierSource barrierSource;

		[Token(Token = "0x400391C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float deployedAt;

		[Token(Token = "0x400391D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly int barrierSlotId;

		[Token(Token = "0x400391E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int playerId;

		[Token(Token = "0x6002708")]
		[Address(RVA = "0x110DD3C", Offset = "0x110DD3C", VA = "0x110DD3C")]
		public BarrierSourceData(BarrierSource barrierSource, float deployedAt, int barrierSlotId, int playerId)
		{
		}
	}
	[Token(Token = "0x20008C7")]
	public class BarrierSourceFactory : IProjectileFactory
	{
		[Token(Token = "0x400391F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform parentTransform;

		[Token(Token = "0x4003920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ComponentPrefabPool<ProjectileReference> referencePool;

		[Token(Token = "0x4003921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ComponentPrefabPool<BoxColliderReference> colliderReferencePool;

		[Token(Token = "0x4003922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly BarrierSourceSettings settings;

		[Token(Token = "0x4003923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CSharpObjectPool<BarrierSource> projectilePool;

		[Token(Token = "0x4003924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly int projectileGroupId;

		[Token(Token = "0x4003925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameData gameData;

		[Token(Token = "0x4003926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x6002709")]
		[Address(RVA = "0x110DD88", Offset = "0x110DD88", VA = "0x110DD88")]
		public BarrierSourceFactory(Transform parentTransform, ComponentPrefabPool<ProjectileReference> referencePool, ComponentPrefabPool<BoxColliderReference> colliderReferencePool, BarrierSourceSettings settings, CSharpObjectPool<BarrierSource> projectilePool, int projectileGroupId, GameData gameData, DamageRecordKeeper damageRecordKeeper)
		{
		}

		[Token(Token = "0x600270A")]
		[Address(RVA = "0x110DDF4", Offset = "0x110DDF4", VA = "0x110DDF4")]
		public BarrierSource Create(float timestamp, Vector3 position, Quaternion rotation, int projectileId, int triggeringPlayerNetworkId, ToolName toolSpawnedFrom, float chargeAmount, float bowPullbackAmount, int tetherId)
		{
			return null;
		}

		[Token(Token = "0x600270B")]
		[Address(RVA = "0x110E0A4", Offset = "0x110E0A4", VA = "0x110E0A4", Slot = "4")]
		public void Recycle(Projectile projectile)
		{
		}

		[Token(Token = "0x600270C")]
		[Address(RVA = "0x110E148", Offset = "0x110E148", VA = "0x110E148", Slot = "5")]
		public void RecycleGameObjects(Projectile projectile)
		{
		}
	}
	[Token(Token = "0x20008C8")]
	public class BarrierSourceHandler
	{
		[Token(Token = "0x4003927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<BarrierSourceData> barrierSources;

		[Token(Token = "0x4003928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BarrierShieldToolHandlerData barrierShieldToolHandlerData;

		[Token(Token = "0x4003929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly FactoryData factoryData;

		[Token(Token = "0x400392A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GrabData grabData;

		[Token(Token = "0x400392B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GameData gameData;

		[Token(Token = "0x400392C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x400392D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ProjectileRecycleHandler projectileRecycleHandler;

		[Token(Token = "0x400392E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x400392F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ForceFieldData forceFieldData;

		[Token(Token = "0x4003930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly StationaryProjectileHandlerData stationaryProjectileHandlerData;

		[Token(Token = "0x600270D")]
		[Address(RVA = "0x110E1F0", Offset = "0x110E1F0", VA = "0x110E1F0")]
		public BarrierSourceHandler(BarrierShieldToolHandlerData barrierShieldToolHandlerData, FactoryData factoryData, GrabData grabData, GameData gameData, IRoomTimeProvider roomTimeProvider, ProjectileRecycleHandler projectileRecycleHandler, IgnisSoundTriggerData ignisSoundTriggerData, ForceFieldData forceFieldData, StationaryProjectileHandlerData stationaryProjectileHandlerData)
		{
		}

		[Token(Token = "0x600270E")]
		[Address(RVA = "0x110E2C4", Offset = "0x110E2C4", VA = "0x110E2C4")]
		public GameMessageInvokationResult OnDeployBarrierMessage(DeployBarrierMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x600270F")]
		[Address(RVA = "0x110E8D8", Offset = "0x110E8D8", VA = "0x110E8D8")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002710")]
		[Address(RVA = "0x110E8F0", Offset = "0x110E8F0", VA = "0x110E8F0")]
		private void RemoveDestroyedObjects()
		{
		}

		[Token(Token = "0x6002711")]
		[Address(RVA = "0x110E9F8", Offset = "0x110E9F8", VA = "0x110E9F8")]
		private void HandleDeployedSourceBarriers()
		{
		}
	}
	[Token(Token = "0x20008CA")]
	public class BarrierToolReferences : ToolReferences
	{
		[Token(Token = "0x4003933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public LineRenderer lineRenderer;

		[Token(Token = "0x4003934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public ParticleSystem glowParticle;

		[Token(Token = "0x6002715")]
		[Address(RVA = "0x110EBD4", Offset = "0x110EBD4", VA = "0x110EBD4")]
		public BarrierToolReferences()
		{
		}
	}
	[Token(Token = "0x20008CB")]
	[CreateAssetMenu(menuName = "Projectile/HelixCurveSettings", fileName = "HelixCurveSettings")]
	public class HelixCurveSettings : ScriptableObject
	{
		[Token(Token = "0x4003935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Helix Specific Settings")]
		public float rotationSpeed;

		[Token(Token = "0x4003936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rotationPower;

		[Token(Token = "0x4003937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Helix Radius Settings")]
		public float bellScale;

		[Token(Token = "0x4003938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float bellWidth;

		[Token(Token = "0x4003939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float bellCenter;

		[Token(Token = "0x400393A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float basePower;

		[Token(Token = "0x400393B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float baseScale;

		[Token(Token = "0x6002716")]
		[Address(RVA = "0x110EBDC", Offset = "0x110EBDC", VA = "0x110EBDC")]
		public HelixCurveSettings()
		{
		}
	}
	[Token(Token = "0x20008CC")]
	public interface IProjectileSettings
	{
	}
	[Token(Token = "0x20008CD")]
	public abstract class ProjectileSettings : ScriptableObject, IProjectileSettings
	{
		[Token(Token = "0x400393C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BaseProjectileSettings baseProjectileSettings;

		[Token(Token = "0x400393D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ProjectileSpawnSettings spawnSettings;

		[Token(Token = "0x6002717")]
		[Address(RVA = "0x110EBEC", Offset = "0x110EBEC", VA = "0x110EBEC")]
		protected ProjectileSettings()
		{
		}
	}
	[Token(Token = "0x20008CE")]
	public enum SpawnLayerMaskType
	{
		[Token(Token = "0x400393F")]
		Projectile,
		[Token(Token = "0x4003940")]
		AoeProjectile,
		[Token(Token = "0x4003941")]
		Laser,
		[Token(Token = "0x4003942")]
		EnvironmentOnly
	}
	[Token(Token = "0x20008CF")]
	public enum SpawnDirection
	{
		[Token(Token = "0x4003944")]
		Source,
		[Token(Token = "0x4003945")]
		Player
	}
	[Token(Token = "0x20008D0")]
	[CreateAssetMenu(menuName = "Projectile/SpawnSettings", fileName = "ProjectileSpawnSettings")]
	public class ProjectileSpawnSettings : ScriptableObject
	{
		[Token(Token = "0x4003946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[FormerlySerializedAs("collisionTypes")]
		public SpawnLayerMaskType spawnLayerMaskType;

		[Token(Token = "0x4003947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SpawnDirection spawnDirection;

		[Token(Token = "0x4003948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int numberOfProjectiles;

		[Token(Token = "0x4003949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float heightSpread;

		[Token(Token = "0x400394A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float widthSpread;

		[Token(Token = "0x400394B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Header("ChargeValues")]
		public int numberOfProjectilesCharged;

		[Token(Token = "0x400394C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float heightSpreadCharged;

		[Token(Token = "0x400394D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float widthSpreadCharged;

		[Token(Token = "0x400394E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("BowPullbackValues")]
		public int numberOfProjectilesBowPullback;

		[Token(Token = "0x400394F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float heightSpreadBowPullback;

		[Token(Token = "0x4003950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float widthSpreadBowPullback;

		[Token(Token = "0x6002718")]
		[Address(RVA = "0x110EBF4", Offset = "0x110EBF4", VA = "0x110EBF4")]
		public ProjectileSpawnSettings()
		{
		}
	}
	[Token(Token = "0x20008D1")]
	[CreateAssetMenu(menuName = "Projectile/VelocitySettings", fileName = "ProjectileVelocitySettings")]
	public class ProjectileVelocitySettings : ScriptableObject
	{
		[Token(Token = "0x4003951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minVelocity;

		[Token(Token = "0x4003952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxVelocity;

		[Token(Token = "0x4003953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minVelocityThreshold;

		[Token(Token = "0x4003954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxVelocityThreshold;

		[Token(Token = "0x4003955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 4f)]
		public float velocityTimePower;

		[Token(Token = "0x4003956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string velocityTextId;

		[Token(Token = "0x4003957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Charged")]
		public float minVelocityCharged;

		[Token(Token = "0x4003958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxVelocityCharged;

		[Token(Token = "0x4003959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float minVelocityThresholdCharged;

		[Token(Token = "0x400395A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float maxVelocityThresholdCharged;

		[Token(Token = "0x400395B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 4f)]
		public float velocityTimePowerCharged;

		[Token(Token = "0x400395C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Bow Pullback")]
		public float minVelocityBowPullback;

		[Token(Token = "0x400395D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float maxVelocityBowPullback;

		[Token(Token = "0x400395E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float minVelocityThresholdBowPullback;

		[Token(Token = "0x400395F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxVelocityThresholdBowPullback;

		[Token(Token = "0x4003960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 4f)]
		public float velocityTimePowerBowPullback;

		[Token(Token = "0x6002719")]
		[Address(RVA = "0x110EC0C", Offset = "0x110EC0C", VA = "0x110EC0C")]
		public ProjectileVelocitySettings()
		{
		}
	}
	[Token(Token = "0x20008D2")]
	[CreateAssetMenu(menuName = "Projectile/BounceProjectileSetting", fileName = "BounceProjectileSetting")]
	public class BounceProjectileSetting : ProjectileSettings
	{
		[Token(Token = "0x4003961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ProjectileVelocitySettings velocitySettings;

		[Token(Token = "0x4003962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Bounce Specific Settings")]
		public int numberOfBounces;

		[Token(Token = "0x4003963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int numberOfBouncesCharged;

		[Token(Token = "0x4003964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int numberOfBouncesBowPullback;

		[Token(Token = "0x4003965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string[] impactProjectileSound;

		[Token(Token = "0x4003966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ParticleEffectReference ImpactProjectileParticleEffect;

		[Token(Token = "0x600271A")]
		[Address(RVA = "0x110EC44", Offset = "0x110EC44", VA = "0x110EC44")]
		public BounceProjectileSetting()
		{
		}
	}
	[Token(Token = "0x20008D3")]
	[CreateAssetMenu(fileName = "ToolSettings", menuName = "Settings/Tools/BounceProjectileTool", order = 1)]
	public class BounceProjectileToolSettings : ToolSetting
	{
		[Token(Token = "0x4003967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public FireableSettings fireable;

		[Token(Token = "0x4003968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public BounceProjectileSetting projectile;

		[Token(Token = "0x600271B")]
		[Address(RVA = "0x110ED04", Offset = "0x110ED04", VA = "0x110ED04")]
		public BounceProjectileToolSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20008D4")]
	public class ToolBowPullbackSettings
	{
		[Token(Token = "0x4003969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isBow;

		[Token(Token = "0x400396A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Header("Bow Pullback")]
		public float pullDistanceMaximumStrength;

		[Token(Token = "0x400396B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve pullStrengthCurve;

		[Token(Token = "0x400396C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Bow Haptics")]
		public float travelDistanceToTriggerPullHapticEffect;

		[Token(Token = "0x400396D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HapticEffect bowPullHapticEffect;

		[Token(Token = "0x400396E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Bow Visual")]
		public float minArrowTipRotationSpeed;

		[Token(Token = "0x400396F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float maxArrowTipRotationSpeed;

		[Token(Token = "0x4003970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float reloadCooldownAninmation;

		[Token(Token = "0x4003971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SoundGroup]
		[Header("Sound")]
		public string[] grabStringSound;

		[Token(Token = "0x4003972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SoundGroup]
		public string[] pullbackSound;

		[Token(Token = "0x4003973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SoundGroup]
		public string[] pulledAtMaximumCue;

		[Token(Token = "0x600271C")]
		[Address(RVA = "0x110ED0C", Offset = "0x110ED0C", VA = "0x110ED0C")]
		public ToolBowPullbackSettings()
		{
		}
	}
	[Token(Token = "0x20008D5")]
	public class ToolBowPullbackComponent
	{
		[Token(Token = "0x4003974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ToolBowPullbackSettings toolBowSettings;

		[Token(Token = "0x4003975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IRoomTimeProvider timeProvider;

		[Token(Token = "0x4003976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x1700019E")]
		public int TriggerCount
		{
			[Token(Token = "0x600271D")]
			[Address(RVA = "0x110ED14", Offset = "0x110ED14", VA = "0x110ED14")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600271E")]
			[Address(RVA = "0x110ED1C", Offset = "0x110ED1C", VA = "0x110ED1C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700019F")]
		public bool CanTrigger
		{
			[Token(Token = "0x6002720")]
			[Address(RVA = "0x110ED50", Offset = "0x110ED50", VA = "0x110ED50")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002721")]
			[Address(RVA = "0x110ED58", Offset = "0x110ED58", VA = "0x110ED58")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001A0")]
		public bool IsBeingPulledBack
		{
			[Token(Token = "0x6002722")]
			[Address(RVA = "0x110ED64", Offset = "0x110ED64", VA = "0x110ED64")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002723")]
			[Address(RVA = "0x110ED6C", Offset = "0x110ED6C", VA = "0x110ED6C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001A1")]
		public bool IsAtPullbackLimit
		{
			[Token(Token = "0x6002724")]
			[Address(RVA = "0x110ED78", Offset = "0x110ED78", VA = "0x110ED78")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002725")]
			[Address(RVA = "0x110ED80", Offset = "0x110ED80", VA = "0x110ED80")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001A2")]
		public float PullbackAmount
		{
			[Token(Token = "0x6002726")]
			[Address(RVA = "0x110ED8C", Offset = "0x110ED8C", VA = "0x110ED8C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002727")]
			[Address(RVA = "0x110ED94", Offset = "0x110ED94", VA = "0x110ED94")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001A3")]
		public float PullbackDistance
		{
			[Token(Token = "0x6002728")]
			[Address(RVA = "0x110ED9C", Offset = "0x110ED9C", VA = "0x110ED9C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002729")]
			[Address(RVA = "0x110EDA4", Offset = "0x110EDA4", VA = "0x110EDA4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600271F")]
		[Address(RVA = "0x110ED24", Offset = "0x110ED24", VA = "0x110ED24")]
		public ToolBowPullbackComponent(IRoomTimeProvider timeProvider)
		{
		}

		[Token(Token = "0x600272A")]
		[Address(RVA = "0x110EDAC", Offset = "0x110EDAC", VA = "0x110EDAC")]
		public void Initialize(ToolBowPullbackSettings settings, ParticleSystem reference)
		{
		}

		[Token(Token = "0x600272B")]
		[Address(RVA = "0x110EDD4", Offset = "0x110EDD4", VA = "0x110EDD4")]
		public void Start()
		{
		}

		[Token(Token = "0x600272C")]
		[Address(RVA = "0x110EDE0", Offset = "0x110EDE0", VA = "0x110EDE0")]
		public ToolBowPullbackSettings GetToolBowPullbackSettings()
		{
			return null;
		}

		[Token(Token = "0x600272D")]
		[Address(RVA = "0x110EDE8", Offset = "0x110EDE8", VA = "0x110EDE8")]
		public void Stop()
		{
		}

		[Token(Token = "0x600272E")]
		[Address(RVA = "0x110EDC4", Offset = "0x110EDC4", VA = "0x110EDC4")]
		private void ResetBowPullback()
		{
		}
	}
	[Token(Token = "0x20008D6")]
	public interface IBowPullback
	{
		[Token(Token = "0x170001A4")]
		ToolBowPullbackComponent ToolBowPullbackComponent
		{
			[Token(Token = "0x600272F")]
			get;
		}
	}
	[Token(Token = "0x20008D7")]
	public class ToolBowPullbackHandler : ITickable
	{
		[Token(Token = "0x400397D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameData gameData;

		[Token(Token = "0x400397E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GrabData grabData;

		[Token(Token = "0x400397F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly CharacterData characterData;

		[Token(Token = "0x4003980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly HapticData hapticData;

		[Token(Token = "0x4003981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4003982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4003983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly List<Tool> toolsToUpdate;

		[Token(Token = "0x4003984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool triggeredGrabbingSound;

		[Token(Token = "0x4003985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool hasPlayedPoolBackMaxSound;

		[Token(Token = "0x4003986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		private bool hasStartedStringLoopSound;

		[Token(Token = "0x4003987")]
		public const int LEFT_HAND_ID = 1;

		[Token(Token = "0x4003988")]
		public const int RIGHT_HAND_ID = 0;

		[Token(Token = "0x6002730")]
		[Address(RVA = "0x110EE6C", Offset = "0x110EE6C", VA = "0x110EE6C")]
		public ToolBowPullbackHandler(GameData gameData, GrabData grabData, CharacterData characterData, IgnisSoundTriggerData ignisSoundTriggerData, HapticData hapticData, IRoomTimeProvider roomTimeProvider)
		{
		}

		[Token(Token = "0x6002731")]
		[Address(RVA = "0x110EF28", Offset = "0x110EF28", VA = "0x110EF28", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002732")]
		[Address(RVA = "0x110FC3C", Offset = "0x110FC3C", VA = "0x110FC3C")]
		private void UpdateArrowTipRotation(Tool tool, LumaReferences lumaReferences, float pullStrength)
		{
		}

		[Token(Token = "0x6002733")]
		[Address(RVA = "0x110FDE8", Offset = "0x110FDE8", VA = "0x110FDE8")]
		private void UpdateSoundGroups(float pullbackDistance, LumaReferences lumaReference, Tool tool, int playerNetworkId)
		{
		}

		[Token(Token = "0x6002734")]
		[Address(RVA = "0x110F87C", Offset = "0x110F87C", VA = "0x110F87C")]
		private void UpdateCharacterHandPositionAndRotation(LumaReferences lumaReference, int mainHandId, int playerNetworkId)
		{
		}

		[Token(Token = "0x6002735")]
		[Address(RVA = "0x110FA90", Offset = "0x110FA90", VA = "0x110FA90")]
		private void UpdateBowPullbackVFX(LumaReferences toolReferences, float pullbackAmount)
		{
		}

		[Token(Token = "0x6002736")]
		[Address(RVA = "0x11105B4", Offset = "0x11105B4", VA = "0x11105B4")]
		public void OnToolSpawnMessage(ToolSpawnMessage toolSpawnMessage)
		{
		}

		[Token(Token = "0x6002737")]
		[Address(RVA = "0x110FCAC", Offset = "0x110FCAC", VA = "0x110FCAC")]
		private void UpdateBowPullbackHaptics(Tool tool, int mainHandId, float travelDistance, int playerNetworkId)
		{
		}

		[Token(Token = "0x6002738")]
		[Address(RVA = "0x110F78C", Offset = "0x110F78C", VA = "0x110F78C")]
		private void UpdateGrabStringAnchor(LumaReferences lumaReference, Vector3 handPosition)
		{
		}

		[Token(Token = "0x6002739")]
		[Address(RVA = "0x110F7D4", Offset = "0x110F7D4", VA = "0x110F7D4")]
		private void UpdateMeshAnimator(LumaReferences lumaReference, bool isBeingPulled, float pullStrength)
		{
		}

		[Token(Token = "0x600273A")]
		[Address(RVA = "0x110F5D8", Offset = "0x110F5D8", VA = "0x110F5D8")]
		private void UpdateBowRotation(Tool tool, Transform bowHand, Transform stringHand)
		{
		}

		[Token(Token = "0x600273B")]
		[Address(RVA = "0x1110124", Offset = "0x1110124", VA = "0x1110124")]
		private void UpdateBowString(LumaReferences lumaReference, Vector3 grabPosition)
		{
		}

		[Token(Token = "0x600273C")]
		[Address(RVA = "0x1110310", Offset = "0x1110310", VA = "0x1110310")]
		private void UpdateBowAmmoState(Tool tool, LumaReferences lumaReference, bool justSpawned, bool justFired)
		{
		}

		[Token(Token = "0x600273D")]
		[Address(RVA = "0x1110758", Offset = "0x1110758", VA = "0x1110758")]
		private void SetReloadDeltaLumaReference(LumaReferences lumaReference, float reloadDelta)
		{
		}

		[Token(Token = "0x600273E")]
		[Address(RVA = "0x110F4E4", Offset = "0x110F4E4", VA = "0x110F4E4")]
		public bool IsBowStringGrabbed(Tool tool)
		{
			return default(bool);
		}

		[Token(Token = "0x600273F")]
		[Address(RVA = "0x1110904", Offset = "0x1110904", VA = "0x1110904")]
		public void OnGrabToolMessage(GrabMessage grabMessage)
		{
		}

		[Token(Token = "0x6002740")]
		[Address(RVA = "0x11109C8", Offset = "0x11109C8", VA = "0x11109C8")]
		public void OnGrabbedSecondaryToolMessage(GrabSecondaryMessage grabSecondaryMessage)
		{
		}

		[Token(Token = "0x6002741")]
		[Address(RVA = "0x1110AE0", Offset = "0x1110AE0", VA = "0x1110AE0")]
		public void OnDropToolMessage(DropMessage dropMessage)
		{
		}

		[Token(Token = "0x6002742")]
		[Address(RVA = "0x1110C60", Offset = "0x1110C60", VA = "0x1110C60")]
		public void OnDroppedSecondaryToolMessage(DropSecondaryMessage dropSecondaryMessage)
		{
		}

		[Token(Token = "0x6002743")]
		[Address(RVA = "0x1110998", Offset = "0x1110998", VA = "0x1110998")]
		private void StopBowPullbackTool(Tool tool)
		{
		}

		[Token(Token = "0x6002744")]
		[Address(RVA = "0x1110DD4", Offset = "0x1110DD4", VA = "0x1110DD4")]
		private void StopBowPullbackTool(Tool tool, int triggerCount)
		{
		}
	}
	[Token(Token = "0x20008D9")]
	[CreateAssetMenu(fileName = "ToolSettings", menuName = "Tools/BulletLauncherToolSetting", order = 1)]
	public class BulletLauncherToolSettings : ToolSetting, IProjectileSettings
	{
		[Token(Token = "0x400398B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public FireableSettings fireable;

		[Token(Token = "0x400398C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public BulletLauncherProjectileSettings curveProjectileSettings;

		[Token(Token = "0x6002748")]
		[Address(RVA = "0x1111EF0", Offset = "0x1111EF0", VA = "0x1111EF0")]
		public BulletLauncherToolSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20008DA")]
	public class ToolChargeSettings
	{
		[Token(Token = "0x400398D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float timeToCharge;

		[Token(Token = "0x400398E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool isChargeTool;

		[Token(Token = "0x400398F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool automaticallyFireWhenCharged;

		[Token(Token = "0x4003990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SoundGroup]
		public string[] chargingSound;

		[Token(Token = "0x4003991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve chargeCurve;

		[Token(Token = "0x4003992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Charging steps")]
		public int chargingSteps;

		[Token(Token = "0x4003993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Should be the same with the amount of charging steps")]
		[SoundGroup]
		public string[] soundsPerStep;

		[Token(Token = "0x6002749")]
		[Address(RVA = "0x1111EF8", Offset = "0x1111EF8", VA = "0x1111EF8")]
		public ToolChargeSettings()
		{
		}
	}
	[Token(Token = "0x20008DB")]
	public class ToolChargeComponent
	{
		[Token(Token = "0x4003994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ToolChargeSettings toolChargeSettings;

		[Token(Token = "0x4003995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IRoomTimeProvider timeProvider;

		[Token(Token = "0x4003996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float startChargeTimeStamp;

		[Token(Token = "0x4003997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x170001A5")]
		public int CurrentChargeStep
		{
			[Token(Token = "0x600274A")]
			[Address(RVA = "0x1111F2C", Offset = "0x1111F2C", VA = "0x1111F2C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600274B")]
			[Address(RVA = "0x1111F34", Offset = "0x1111F34", VA = "0x1111F34")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001A6")]
		public int TriggerCount
		{
			[Token(Token = "0x600274C")]
			[Address(RVA = "0x1111F3C", Offset = "0x1111F3C", VA = "0x1111F3C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600274D")]
			[Address(RVA = "0x1111F44", Offset = "0x1111F44", VA = "0x1111F44")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001A7")]
		public bool IsCharging
		{
			[Token(Token = "0x600274F")]
			[Address(RVA = "0x1111F78", Offset = "0x1111F78", VA = "0x1111F78")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002750")]
			[Address(RVA = "0x1111F80", Offset = "0x1111F80", VA = "0x1111F80")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600274E")]
		[Address(RVA = "0x1111F4C", Offset = "0x1111F4C", VA = "0x1111F4C")]
		public ToolChargeComponent(IRoomTimeProvider timeProvider)
		{
		}

		[Token(Token = "0x6002751")]
		[Address(RVA = "0x1111F8C", Offset = "0x1111F8C", VA = "0x1111F8C")]
		public void Initialize(ToolChargeSettings settings, ParticleSystem reference)
		{
		}

		[Token(Token = "0x6002752")]
		[Address(RVA = "0x1111FAC", Offset = "0x1111FAC", VA = "0x1111FAC")]
		public ToolChargeSettings GetToolChargeSettings()
		{
			return null;
		}

		[Token(Token = "0x6002753")]
		[Address(RVA = "0x1111FB4", Offset = "0x1111FB4", VA = "0x1111FB4")]
		public float GetChargeAmount()
		{
			return default(float);
		}

		[Token(Token = "0x6002754")]
		[Address(RVA = "0x11120A8", Offset = "0x11120A8", VA = "0x11120A8")]
		public void SetChargeTimeStartTime(float startTimeStamp, int newTriggerCount)
		{
		}

		[Token(Token = "0x6002755")]
		[Address(RVA = "0x11120D8", Offset = "0x11120D8", VA = "0x11120D8")]
		public void Stop()
		{
		}

		[Token(Token = "0x6002756")]
		[Address(RVA = "0x1112158", Offset = "0x1112158", VA = "0x1112158")]
		public int GetCurrentChargeStep(float tolerance = 0.001f)
		{
			return default(int);
		}

		[Token(Token = "0x6002757")]
		[Address(RVA = "0x1111FA0", Offset = "0x1111FA0", VA = "0x1111FA0")]
		private void ResetCharge()
		{
		}

		[Token(Token = "0x6002758")]
		[Address(RVA = "0x11122B4", Offset = "0x11122B4", VA = "0x11122B4")]
		public void Update()
		{
		}
	}
	[Token(Token = "0x20008DC")]
	public interface ICharge
	{
		[Token(Token = "0x170001A8")]
		ToolChargeComponent ToolChargeComponent
		{
			[Token(Token = "0x6002759")]
			get;
		}
	}
	[Token(Token = "0x20008DD")]
	public class ToolChargeHandler : ITickable
	{
		[Token(Token = "0x400399B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameData gameData;

		[Token(Token = "0x400399C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x400399D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Tool> toolsToUpdate;

		[Token(Token = "0x400399E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool shouldUpdateChargingSteps;

		[Token(Token = "0x400399F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int currentStep;

		[Token(Token = "0x600275A")]
		[Address(RVA = "0x1112320", Offset = "0x1112320", VA = "0x1112320")]
		public ToolChargeHandler(GameData gameData, IgnisSoundTriggerData ignisSoundTriggerData)
		{
		}

		[Token(Token = "0x600275B")]
		[Address(RVA = "0x11123BC", Offset = "0x11123BC", VA = "0x11123BC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600275C")]
		[Address(RVA = "0x1112564", Offset = "0x1112564", VA = "0x1112564")]
		private void UpdateToolChargeStep(Tool tool)
		{
		}

		[Token(Token = "0x600275D")]
		[Address(RVA = "0x1112548", Offset = "0x1112548", VA = "0x1112548")]
		private void UpdateToolChargeEffect(Tool tool)
		{
		}

		[Token(Token = "0x600275E")]
		[Address(RVA = "0x1112748", Offset = "0x1112748", VA = "0x1112748")]
		public GameMessageInvokationResult OnStartToolCharge(StartChargingToolMessage chargeMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x600275F")]
		[Address(RVA = "0x1112950", Offset = "0x1112950", VA = "0x1112950")]
		public GameMessageInvokationResult OnStopToolCharge(StopChargingToolMessage chargeMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6002760")]
		[Address(RVA = "0x1112B78", Offset = "0x1112B78", VA = "0x1112B78")]
		public void OnGrabToolMessage(GrabMessage grabMessage)
		{
		}

		[Token(Token = "0x6002761")]
		[Address(RVA = "0x1112C30", Offset = "0x1112C30", VA = "0x1112C30")]
		public void OnDropToolMessage(DropMessage dropMessage)
		{
		}

		[Token(Token = "0x6002762")]
		[Address(RVA = "0x1112C00", Offset = "0x1112C00", VA = "0x1112C00")]
		private void StopChargingTool(Tool tool)
		{
		}

		[Token(Token = "0x6002763")]
		[Address(RVA = "0x1112A34", Offset = "0x1112A34", VA = "0x1112A34")]
		private void StopChargingTool(Tool tool, int triggerCount)
		{
		}
	}
	[Token(Token = "0x20008DF")]
	public class CooldownColorComponent
	{
		[Token(Token = "0x40039A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ToolReferences toolReferences;

		[Token(Token = "0x40039A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<Color> emissionStartColor;

		[Token(Token = "0x40039A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool hasMaterial;

		[Token(Token = "0x40039A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string materialColorProperty;

		[Token(Token = "0x6002767")]
		[Address(RVA = "0x1112D6C", Offset = "0x1112D6C", VA = "0x1112D6C")]
		public void Initialize(ToolReferences references, string materialColorName)
		{
		}

		[Token(Token = "0x6002768")]
		[Address(RVA = "0x1112EC8", Offset = "0x1112EC8", VA = "0x1112EC8")]
		public void SetCoolDownValue(float percentage)
		{
		}

		[Token(Token = "0x6002769")]
		[Address(RVA = "0x1112FDC", Offset = "0x1112FDC", VA = "0x1112FDC")]
		public void ResetColors()
		{
		}

		[Token(Token = "0x600276A")]
		[Address(RVA = "0x11130CC", Offset = "0x11130CC", VA = "0x11130CC")]
		public CooldownColorComponent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20008E0")]
	public class DeckBasedToolSpawnRandomAlgorithmSettings
	{
		[Token(Token = "0x40039A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Will the fill rate vary over the duration of a round")]
		public bool hasDynamicFillRate;

		[Token(Token = "0x40039A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Curve defining the filling rate over time")]
		[ConditionalHide("hasDynamicFillRate", true)]
		public AnimationCurve dynamicFillRateCurve;

		[Token(Token = "0x40039A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The filler time for the weapon availability in seconds")]
		[ConditionalHide("hasDynamicFillRate", true, true)]
		public float fillRate;

		[Token(Token = "0x40039A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Limits the amount of weapons spawned at one time")]
		public float spawnFillCap;

		[Token(Token = "0x40039AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Minimum amount of energy to ensure quick weapon spawn at the start")]
		public float initialEnergy;

		[Token(Token = "0x600276B")]
		[Address(RVA = "0x1113168", Offset = "0x1113168", VA = "0x1113168")]
		public DeckBasedToolSpawnRandomAlgorithmSettings()
		{
		}
	}
	[Token(Token = "0x20008E1")]
	public class DeckBasedToolSpawnRandomAlgorithmHandler : IToolSpawnAlgorithm
	{
		[Token(Token = "0x20008E2")]
		private class RandomDeckSpawnData
		{
			[Token(Token = "0x40039BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int nextSpawnPoint;

			[Token(Token = "0x40039BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float totalCostOfSpawnedUnusedTools;

			[Token(Token = "0x40039C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Stack<ToolSet> currentSpawnDeck;

			[Token(Token = "0x40039C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Stack<ToolSet> discardPile;

			[Token(Token = "0x40039C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<int> availableSpawnPoints;

			[Token(Token = "0x40039C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public List<int> spawnedToolsNetworkId;

			[Token(Token = "0x6002782")]
			[Address(RVA = "0x1113440", Offset = "0x1113440", VA = "0x1113440")]
			public RandomDeckSpawnData(List<int> availableSpawnPoints)
			{
			}

			[Token(Token = "0x6002783")]
			[Address(RVA = "0x1114438", Offset = "0x1114438", VA = "0x1114438")]
			public bool IsToolAvailibleForSpawn()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40039AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<int> idsToRemove;

		[Token(Token = "0x40039AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IMessageSender messageSender;

		[Token(Token = "0x40039AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameMessageFactory gameMessageFactory;

		[Token(Token = "0x40039AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private NetworkIdAllocator networkIdAllocator;

		[Token(Token = "0x40039AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private DeterministicRandom random;

		[Token(Token = "0x40039B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x40039B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ToolSpawnData toolSpawnData;

		[Token(Token = "0x40039B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly GameData gameData;

		[Token(Token = "0x40039B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x40039B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x40039B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly DeckData deckData;

		[Token(Token = "0x40039B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly FactoryData factoryData;

		[Token(Token = "0x40039B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly ToolDefinitionSettings toolDefinitionSettings;

		[Token(Token = "0x40039B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly List<PlayerData> localPlayerData;

		[Token(Token = "0x40039B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly DeckSpawnSettings deckSettings;

		[Token(Token = "0x40039BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly ToolAttachmentsData toolAttachmentsData;

		[Token(Token = "0x40039BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Dictionary<int, ToolToSpawnPoint> toolToSpawnPoint;

		[Token(Token = "0x40039BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private RandomDeckSpawnData[] randomDeckSpawnData;

		[Token(Token = "0x40039BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private DeckBasedToolSpawnRandomAlgorithmSettings settings;

		[Token(Token = "0x600276C")]
		[Address(RVA = "0x1113184", Offset = "0x1113184", VA = "0x1113184")]
		public DeckBasedToolSpawnRandomAlgorithmHandler(DeckSpawnSettings deckSettings, IMessageSender messageSender, GameMessageFactory gameMessageFactory, NetworkIdAllocator networkIdAllocator, IRoomTimeProvider roomTimeProvider, ToolSpawnData toolSpawnData, GameData gameData, CustomizationData customizationData, MatchHandlerData matchHandlerData, DeckData deckData, FactoryData factoryData, ToolDefinitionSettings toolDefinitionSettings, ToolAttachmentsData toolAttachmentsData)
		{
		}

		[Token(Token = "0x600276D")]
		[Address(RVA = "0x1113530", Offset = "0x1113530", VA = "0x1113530", Slot = "4")]
		public void Initialize(float timestamp)
		{
		}

		[Token(Token = "0x600276E")]
		[Address(RVA = "0x11145EC", Offset = "0x11145EC", VA = "0x11145EC")]
		public void SetupDebug(DebugMenu instance)
		{
		}

		[Token(Token = "0x600276F")]
		[Address(RVA = "0x11145F0", Offset = "0x11145F0", VA = "0x11145F0", Slot = "6")]
		public void OnGrabMessage(GrabMessage grabMessage)
		{
		}

		[Token(Token = "0x6002770")]
		[Address(RVA = "0x11147C4", Offset = "0x11147C4", VA = "0x11147C4")]
		private void GimmeAGun()
		{
		}

		[Token(Token = "0x6002771")]
		[Address(RVA = "0x1114900", Offset = "0x1114900", VA = "0x1114900")]
		private void GimmeASpecificGun(ToolName toolName)
		{
		}

		[Token(Token = "0x6002772")]
		[Address(RVA = "0x11140E0", Offset = "0x11140E0", VA = "0x11140E0")]
		private void SpawnTool(ToolSet toolSet, ToolSetting toolSetting, int deckSlot, RandomDeckSpawnData randomDeckSpawnData, int networkId, int toolSkinId, int iPlayer)
		{
		}

		[Token(Token = "0x6002773")]
		[Address(RVA = "0x1113DCC", Offset = "0x1113DCC", VA = "0x1113DCC")]
		private void RandomizeNextSpawnPoint(RandomDeckSpawnData randomSpawnData, int playerDeckIndex)
		{
		}

		[Token(Token = "0x6002774")]
		[Address(RVA = "0x1113CC4", Offset = "0x1113CC4", VA = "0x1113CC4")]
		private void ShuffleDiscardPileToCurrentSpawnDeck(RandomDeckSpawnData deckSpawnData)
		{
		}

		[Token(Token = "0x6002775")]
		[Address(RVA = "0x1114A84", Offset = "0x1114A84", VA = "0x1114A84")]
		private void ShuffleArray(ToolSet[] arr)
		{
		}

		[Token(Token = "0x6002776")]
		[Address(RVA = "0x1114A78", Offset = "0x1114A78", VA = "0x1114A78")]
		private void LogDecks(RandomDeckSpawnData deckSpawnData, string message)
		{
		}

		[Token(Token = "0x6002777")]
		[Address(RVA = "0x1114B94", Offset = "0x1114B94", VA = "0x1114B94")]
		private string StackToString(Stack<ToolSet> stack)
		{
			return null;
		}

		[Token(Token = "0x6002778")]
		[Address(RVA = "0x1114CEC", Offset = "0x1114CEC", VA = "0x1114CEC", Slot = "5")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002779")]
		[Address(RVA = "0x1115078", Offset = "0x1115078", VA = "0x1115078")]
		private void HandleUpdatingAndSpawningTools(int iPlayer, PlayerData localPlayer, RandomDeckSpawnData randomDeckData)
		{
		}

		[Token(Token = "0x600277A")]
		[Address(RVA = "0x1114034", Offset = "0x1114034", VA = "0x1114034")]
		private int TryGetToolSkin(Dictionary<ToolName, string> toolSkinLookup, ToolName tool)
		{
			return default(int);
		}

		[Token(Token = "0x600277B")]
		[Address(RVA = "0x1114E20", Offset = "0x1114E20", VA = "0x1114E20")]
		private void HandleSpawnedToolsList(RandomDeckSpawnData randomDeckData)
		{
		}

		[Token(Token = "0x600277C")]
		[Address(RVA = "0x111520C", Offset = "0x111520C", VA = "0x111520C")]
		private bool ShouldSpawnNow(float spawnCost, ToolSet toolSet, DeckToolSpawnProgressData[] playerDeckProgress, RandomDeckSpawnData randomSpawnData)
		{
			return default(bool);
		}

		[Token(Token = "0x600277D")]
		[Address(RVA = "0x11144A4", Offset = "0x11144A4", VA = "0x11144A4")]
		private float GetFillrate()
		{
			return default(float);
		}

		[Token(Token = "0x600277E")]
		[Address(RVA = "0x111540C", Offset = "0x111540C", VA = "0x111540C")]
		public void RemoveToolFromSpawner(int toolNetworkId, ToolSet toolSet)
		{
		}

		[Token(Token = "0x600277F")]
		[Address(RVA = "0x1113F74", Offset = "0x1113F74", VA = "0x1113F74")]
		public ToolSet GetNextToolToSpawn(int player)
		{
			return null;
		}

		[Token(Token = "0x6002780")]
		[Address(RVA = "0x1115734", Offset = "0x1115734", VA = "0x1115734")]
		public float GetTotalCostOfSpawnedUnusedTools(int deckSlot)
		{
			return default(float);
		}

		[Token(Token = "0x6002781")]
		[Address(RVA = "0x111576C", Offset = "0x111576C", VA = "0x111576C", Slot = "7")]
		public void CleanUpRound()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20008E3")]
	public class DeckBasedToolSpawnSimultaneouslyAlgorithmSettings
	{
		[Token(Token = "0x40039C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float fillRate;

		[Token(Token = "0x40039C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float initialEnergy;

		[Token(Token = "0x6002784")]
		[Address(RVA = "0x11159C8", Offset = "0x11159C8", VA = "0x11159C8")]
		public DeckBasedToolSpawnSimultaneouslyAlgorithmSettings()
		{
		}
	}
	[Token(Token = "0x20008E4")]
	public readonly struct DeckToolSpawnProgressData
	{
		[Token(Token = "0x40039C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly float currentFillStartTime;

		[Token(Token = "0x40039C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly float progress;

		[Token(Token = "0x40039C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool occupiedSlot;

		[Token(Token = "0x40039C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public readonly bool toolHasBeenGrabbedFromSpawn;

		[Token(Token = "0x40039CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public readonly bool hasReachedCap;

		[Token(Token = "0x40039CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ToolSet toolSet;

		[Token(Token = "0x40039CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly int toolNetworkId;

		[Token(Token = "0x6002785")]
		[Address(RVA = "0x11145C4", Offset = "0x11145C4", VA = "0x11145C4")]
		public DeckToolSpawnProgressData(float currentFillStartTime, float progress, bool occupiedSlot, ToolSet toolSet, int toolNetworkId, bool hasReachedCap, bool toolHasBeenGrabbedFromSpawn)
		{
		}
	}
	[Token(Token = "0x20008E5")]
	public readonly struct ToolToSpawnPoint
	{
		[Token(Token = "0x40039CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int spawnPoint;

		[Token(Token = "0x40039CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int playerDeckProgressIndex;

		[Token(Token = "0x6002786")]
		[Address(RVA = "0x1114A7C", Offset = "0x1114A7C", VA = "0x1114A7C")]
		public ToolToSpawnPoint(int spawnPoint, int playerDeckProgressIndex)
		{
		}
	}
	[Token(Token = "0x20008E6")]
	public class DeckBasedToolInstantSpawnHandler : IToolSpawnAlgorithm
	{
		[Token(Token = "0x40039CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameData gameData;

		[Token(Token = "0x40039D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ToolSpawnData toolSpawnData;

		[Token(Token = "0x40039D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly NetworkIdAllocator networkIdAllocator;

		[Token(Token = "0x40039D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x40039D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x40039D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x40039D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ToolRecycleHandler toolRecycleHandler;

		[Token(Token = "0x40039D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly CustomizationData customizationData;

		[Token(Token = "0x40039D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ToolViewData toolViewData;

		[Token(Token = "0x40039D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly FactoryData factoryData;

		[Token(Token = "0x40039D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly DeckData deckData;

		[Token(Token = "0x40039DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x40039DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly ToolAttachmentsData toolAttachmentsData;

		[Token(Token = "0x40039DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly MatchmakingData ratingMatchmakerData;

		[Token(Token = "0x40039DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Dictionary<int, ToolToSpawnPoint> toolToSpawnPoint;

		[Token(Token = "0x40039DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<int> toolSkinSpawned;

		[Token(Token = "0x40039DF")]
		private const float ToolSpawnTime = 0.5f;

		[Token(Token = "0x40039E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<int> spawnedToolsNetworkId;

		[Token(Token = "0x40039E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float timeOfLastSeenToolAttachmentChange;

		[Token(Token = "0x6002787")]
		[Address(RVA = "0x11159DC", Offset = "0x11159DC", VA = "0x11159DC")]
		public DeckBasedToolInstantSpawnHandler(GameData gameData, ToolSpawnData toolSpawnData, NetworkIdAllocator networkIdAllocator, GameMessageFactory gameMessageFactory, MessageSender messageSender, IRoomTimeProvider roomTimeProvider, ToolRecycleHandler toolRecycleHandler, CustomizationData customizationData, ToolViewData toolViewData, FactoryData factoryData, DeckData deckData, MenuStateData menuStateData, ToolAttachmentsData toolAttachmentsData, MatchmakingData ratingMatchmakerData)
		{
		}

		[Token(Token = "0x6002788")]
		[Address(RVA = "0x1115B10", Offset = "0x1115B10", VA = "0x1115B10", Slot = "4")]
		public void Initialize(float timestamp)
		{
		}

		[Token(Token = "0x6002789")]
		[Address(RVA = "0x1115F04", Offset = "0x1115F04", VA = "0x1115F04")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x600278A")]
		[Address(RVA = "0x1115F08", Offset = "0x1115F08", VA = "0x1115F08", Slot = "6")]
		public void OnGrabMessage(GrabMessage message)
		{
		}

		[Token(Token = "0x600278B")]
		[Address(RVA = "0x1115F0C", Offset = "0x1115F0C", VA = "0x1115F0C", Slot = "5")]
		public void Tick()
		{
		}

		[Token(Token = "0x600278C")]
		[Address(RVA = "0x1116054", Offset = "0x1116054", VA = "0x1116054")]
		private void CheckAndUpdateDeck()
		{
		}

		[Token(Token = "0x600278D")]
		[Address(RVA = "0x111668C", Offset = "0x111668C", VA = "0x111668C")]
		private bool ReplaceToolIfDeckHasChanged(bool isOccupied, DeckToolSpawnProgressData deckProgress, ToolSet toolSet, int deckIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x600278E")]
		[Address(RVA = "0x1115E58", Offset = "0x1115E58", VA = "0x1115E58")]
		private int TryGetToolSkin(Dictionary<ToolName, string> toolSkinLookup, ToolName tool)
		{
			return default(int);
		}

		[Token(Token = "0x600278F")]
		[Address(RVA = "0x1116880", Offset = "0x1116880", VA = "0x1116880")]
		private int SpawnTool(ToolSet toolSet, bool isPlayerOneSpawn, int spawnPoint, int playerIndex, int toolSkinId)
		{
			return default(int);
		}

		[Token(Token = "0x6002790")]
		[Address(RVA = "0x1116504", Offset = "0x1116504", VA = "0x1116504")]
		public void RemoveToolFromSpawner(int toolNetworkId)
		{
		}

		[Token(Token = "0x6002791")]
		[Address(RVA = "0x1116964", Offset = "0x1116964", VA = "0x1116964", Slot = "7")]
		public void CleanUpRound()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20008E7")]
	public class ToolSet : IEqualityComparer<ToolSet>
	{
		[Token(Token = "0x40039E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ToolName toolName;

		[Token(Token = "0x40039E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ToolConfigurationType toolAttachment;

		[Token(Token = "0x6002792")]
		[Address(RVA = "0x11145BC", Offset = "0x11145BC", VA = "0x11145BC")]
		public ToolSet()
		{
		}

		[Token(Token = "0x6002793")]
		[Address(RVA = "0x1116AD0", Offset = "0x1116AD0", VA = "0x1116AD0")]
		public ToolSet(ToolName toolName, ToolConfigurationType toolAttachment)
		{
		}

		[Token(Token = "0x6002794")]
		[Address(RVA = "0x1116AFC", Offset = "0x1116AFC", VA = "0x1116AFC", Slot = "4")]
		public bool Equals(ToolSet x, ToolSet y)
		{
			return default(bool);
		}

		[Token(Token = "0x6002795")]
		[Address(RVA = "0x1116B3C", Offset = "0x1116B3C", VA = "0x1116B3C", Slot = "5")]
		public int GetHashCode(ToolSet obj)
		{
			return default(int);
		}

		[Token(Token = "0x6002796")]
		[Address(RVA = "0x1116B60", Offset = "0x1116B60", VA = "0x1116B60", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20008E8")]
	public class DeckBuildSettings
	{
		[Token(Token = "0x40039E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<ToolSet> classicDefaultDeck;

		[Token(Token = "0x40039E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<DecksSet> shootOutDefaultDeckSet;

		[Token(Token = "0x40039E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<DecksSet> winterClassicDefaultDecksSet;

		[Token(Token = "0x6002797")]
		[Address(RVA = "0x1116C1C", Offset = "0x1116C1C", VA = "0x1116C1C")]
		public DeckBuildSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20008E9")]
	public class Decks
	{
		[Token(Token = "0x40039E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<ToolName> deck;

		[Token(Token = "0x40039E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameplayRules gameplayRules;

		[Token(Token = "0x6002798")]
		[Address(RVA = "0x1116C24", Offset = "0x1116C24", VA = "0x1116C24")]
		public Decks(List<ToolName> deck, GameplayRules gameplayRules)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20008EA")]
	public class DecksSet
	{
		[Token(Token = "0x40039E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public string inspectorName;

		[Token(Token = "0x40039EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<ToolSet> deck;

		[Token(Token = "0x40039EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameplayRules gameplayRules;

		[Token(Token = "0x6002799")]
		[Address(RVA = "0x1116C54", Offset = "0x1116C54", VA = "0x1116C54")]
		public DecksSet(List<ToolSet> deck, GameplayRules gameplayRules)
		{
		}
	}
	[Token(Token = "0x20008EB")]
	public class DeckData
	{
		[Token(Token = "0x40039EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly List<ToolSet> classicCurrentDeck;

		[Token(Token = "0x40039ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Queue<DecksSet> changeDeckRequest;

		[Token(Token = "0x40039EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool currentDeckHasLocalModifications;

		[Token(Token = "0x40039EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float lastDeckLocalUpdateTimeStamp;

		[Token(Token = "0x40039F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float lastDeckUpdateFromServerTimeStamp;

		[Token(Token = "0x40039F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Dictionary<ToolSet, ItemOwnership> toolOwnership;

		[Token(Token = "0x600279A")]
		[Address(RVA = "0x1116C84", Offset = "0x1116C84", VA = "0x1116C84")]
		public ItemOwnership GetToolOwnership(ToolName toolName)
		{
			return null;
		}

		[Token(Token = "0x600279B")]
		[Address(RVA = "0x1116D64", Offset = "0x1116D64", VA = "0x1116D64")]
		public void SetToolOwnership(ToolName toolName, ItemOwnership ownership, ToolConfigurationType attachmentId = ToolConfigurationType.Default)
		{
		}

		[Token(Token = "0x600279C")]
		[Address(RVA = "0x1116EDC", Offset = "0x1116EDC", VA = "0x1116EDC")]
		public List<ToolSet> GenerateDefaultToolSet(List<ToolName> toolNames)
		{
			return null;
		}

		[Token(Token = "0x600279D")]
		[Address(RVA = "0x1117050", Offset = "0x1117050", VA = "0x1117050")]
		public Dictionary<ToolSet, ItemOwnership> ToolOwnership()
		{
			return null;
		}

		[Token(Token = "0x600279E")]
		[Address(RVA = "0x1117058", Offset = "0x1117058", VA = "0x1117058")]
		public void UpdateToolsSettings(ToolName toolName, ToolConfigurationType toolAttachment, ToolDefinitionSettings toolDefinitionSettings, FactoryData factoryData)
		{
		}

		[Token(Token = "0x600279F")]
		[Address(RVA = "0x11171CC", Offset = "0x11171CC", VA = "0x11171CC")]
		public ToolSetting GetToolsSettingsForAttachment(ToolName toolName, ToolConfigurationType toolAttachment, ToolDefinitionSettings toolDefinitionSettings)
		{
			return null;
		}

		[Token(Token = "0x60027A0")]
		[Address(RVA = "0x11172FC", Offset = "0x11172FC", VA = "0x11172FC")]
		public DeckData()
		{
		}
	}
	[Token(Token = "0x20008EC")]
	public class DeckBuilderHandler : ITickable
	{
		[Token(Token = "0x40039F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DeckData deckData;

		[Token(Token = "0x40039F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DeckBuildSettings deckSettings;

		[Token(Token = "0x40039F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ToolViewData toolViewData;

		[Token(Token = "0x40039F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameDesignTrackingData gameDesignTrackingData;

		[Token(Token = "0x40039F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x40039F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly GameData gameData;

		[Token(Token = "0x40039F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ToolDefinitionSettings toolDefinitionSettings;

		[Token(Token = "0x40039F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly FactoryData factoryData;

		[Token(Token = "0x40039FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly GamePlayRulesData gamePlayRulesData;

		[Token(Token = "0x40039FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly ToolAttachmentsData toolAttachmentsData;

		[Token(Token = "0x40039FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int toolSelected;

		[Token(Token = "0x40039FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool shouldOverride;

		[Token(Token = "0x60027A1")]
		[Address(RVA = "0x111740C", Offset = "0x111740C", VA = "0x111740C")]
		public DeckBuilderHandler(DeckData deckData, DeckBuildSettings deckSettings, ToolViewData toolViewData, GameDesignTrackingData gameDesignTrackingData, ITimeProvider timeProvider, GameData gameData, ToolDefinitionSettings toolDefinitionSettings, FactoryData factoryData, GamePlayRulesData gamePlayRulesData, ToolAttachmentsData toolAttachmentsData)
		{
		}

		[Token(Token = "0x60027A2")]
		[Address(RVA = "0x11178AC", Offset = "0x11178AC", VA = "0x11178AC")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x60027A3")]
		[Address(RVA = "0x11178B0", Offset = "0x11178B0", VA = "0x11178B0")]
		private void ReplaceDeckDebug(ToolName t0, ToolName t1, ToolName t2, ToolName t3, ToolName t4, ToolName t5)
		{
		}

		[Token(Token = "0x60027A4")]
		[Address(RVA = "0x1117CA0", Offset = "0x1117CA0", VA = "0x1117CA0")]
		private void ReplaceWithRandomDeckDebug()
		{
		}

		[Token(Token = "0x60027A5")]
		[Address(RVA = "0x11174E0", Offset = "0x11174E0", VA = "0x11174E0")]
		private void SetDefaultCurrentDeck(List<ToolSet> deck)
		{
		}

		[Token(Token = "0x60027A6")]
		[Address(RVA = "0x1117EE8", Offset = "0x1117EE8", VA = "0x1117EE8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60027A7")]
		[Address(RVA = "0x1117F84", Offset = "0x1117F84", VA = "0x1117F84")]
		private void ReplaceDeck(DecksSet decks)
		{
		}

		[Token(Token = "0x60027A8")]
		[Address(RVA = "0x11182DC", Offset = "0x11182DC", VA = "0x11182DC")]
		private void LogNumToolsInUse()
		{
		}

		[Token(Token = "0x60027A9")]
		[Address(RVA = "0x1118970", Offset = "0x1118970", VA = "0x1118970")]
		[Conditional("IGNIS_DEBUG")]
		private void LogDeck(string deckName, List<ToolSet> deck)
		{
		}

		[Token(Token = "0x60027AA")]
		[Address(RVA = "0x1118B34", Offset = "0x1118B34", VA = "0x1118B34")]
		[Conditional("IGNIS_DEBUG")]
		private void LogDeck(string deckName, List<ToolName> deck)
		{
		}

		[Token(Token = "0x60027AB")]
		[Address(RVA = "0x11184A4", Offset = "0x11184A4", VA = "0x11184A4")]
		private ToolName FindFirstBaseToolNotInReplacingDeck(List<ToolSet> deck, int index)
		{
			return default(ToolName);
		}

		[Token(Token = "0x60027AC")]
		[Address(RVA = "0x1118C84", Offset = "0x1118C84", VA = "0x1118C84")]
		private List<ToolSet> GetLocalDeckSettings(GameplayRules gameplayRules, DeckBuildSettings deckBuildSettings)
		{
			return null;
		}

		[Token(Token = "0x60027AD")]
		[Address(RVA = "0x1118D70", Offset = "0x1118D70", VA = "0x1118D70")]
		private bool IsToolInDecSlotUpToIndex(int index, ToolName toolName)
		{
			return default(bool);
		}

		[Token(Token = "0x60027AE")]
		[Address(RVA = "0x1118E14", Offset = "0x1118E14", VA = "0x1118E14")]
		public void LockerRoomChangeToolInDeck(int slot, ToolSet toolSet)
		{
		}

		[Token(Token = "0x60027AF")]
		[Address(RVA = "0x1118E44", Offset = "0x1118E44", VA = "0x1118E44")]
		public void LockerRoomSwapToolsInDeck(int slot1, int slot2)
		{
		}

		[Token(Token = "0x60027B0")]
		[Address(RVA = "0x1118704", Offset = "0x1118704", VA = "0x1118704")]
		private void ChangeToolInDeck(int slot, ToolSet toolSet)
		{
		}

		[Token(Token = "0x60027B1")]
		[Address(RVA = "0x11185A8", Offset = "0x11185A8", VA = "0x11185A8")]
		private void SwapToolsInDeck(int slot1, int slot2)
		{
		}
	}
	[Token(Token = "0x20008EE")]
	public class ToolSelectionReference : MonoBehaviour
	{
		[Token(Token = "0x40039FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button button;

		[Token(Token = "0x4003A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI text;

		[Token(Token = "0x4003A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image icon;

		[Token(Token = "0x60027B4")]
		[Address(RVA = "0x1118E74", Offset = "0x1118E74", VA = "0x1118E74")]
		public ToolSelectionReference()
		{
		}
	}
	[Token(Token = "0x20008EF")]
	[CreateAssetMenu(fileName = "ToolSettings", menuName = "Settings/Tools/SpawnDeck", order = 2)]
	public class DeckSpawnSettings : ScriptableObject
	{
		[Token(Token = "0x4003A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DeckBuildSettings deckBuildSettings;

		[Token(Token = "0x4003A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GlobalToolsSpawnSettings globalToolsSpawnSettings;

		[Token(Token = "0x60027B5")]
		[Address(RVA = "0x1118E7C", Offset = "0x1118E7C", VA = "0x1118E7C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60027B6")]
		[Address(RVA = "0x1113C0C", Offset = "0x1113C0C", VA = "0x1113C0C")]
		public ToolSpawnSettings GetDeckSpawnSettings(GameplayRules gameplayRules)
		{
			return null;
		}

		[Token(Token = "0x60027B7")]
		[Address(RVA = "0x1118FC4", Offset = "0x1118FC4", VA = "0x1118FC4")]
		public DeckSpawnSettings()
		{
		}
	}
	[Token(Token = "0x20008F0")]
	[CreateAssetMenu(fileName = "ToolSettings", menuName = "Settings/Tools/DirectionalGranadeTool", order = 1)]
	public class DirectionalGrenadeToolSettings : GranadeToolSettings
	{
		[Token(Token = "0x4003A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Vector3 blastDirection;

		[Token(Token = "0x60027B8")]
		[Address(RVA = "0x1118FCC", Offset = "0x1118FCC", VA = "0x1118FCC")]
		public DirectionalGrenadeToolSettings()
		{
		}
	}
	[Token(Token = "0x20008F1")]
	public class AutoSpectatorToolUseEffect : IEventTriggerEffects
	{
		[Token(Token = "0x4003A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<AutoSpectateScoreboardViewHandler> viewHandlerList;

		[Token(Token = "0x60027B9")]
		[Address(RVA = "0x1119118", Offset = "0x1119118", VA = "0x1119118")]
		public AutoSpectatorToolUseEffect()
		{
		}

		[Token(Token = "0x60027BA")]
		[Address(RVA = "0x1119198", Offset = "0x1119198", VA = "0x1119198")]
		public void AssignViewHandler(AutoSpectateScoreboardViewHandler scoreboardViewHandler)
		{
		}

		[Token(Token = "0x60027BB")]
		[Address(RVA = "0x1119240", Offset = "0x1119240", VA = "0x1119240")]
		public void TriggerEffect(ISource source, List<Projectile> projectiles, in ProjectileMessageData projectileMessageData, in ProjectileSourceData sourceData)
		{
		}

		[Token(Token = "0x60027BC")]
		[Address(RVA = "0x1119398", Offset = "0x1119398", VA = "0x1119398", Slot = "4")]
		private void Ignis.IEventTriggerEffects.TriggerEffect(ISource source, List<Projectile> projectiles, in ProjectileMessageData projectileMessageData, in ProjectileSourceData sourceData)
		{
		}
	}
	[Token(Token = "0x20008F2")]
	[CreateAssetMenu(fileName = "DestroySourceEffectSettings", menuName = "Effect/DestroySourceEffectSettings")]
	public class DestroySourceEffectSettings : EventTriggerEffectSettings
	{
		[Token(Token = "0x4003A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] sound;

		[Token(Token = "0x4003A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleEffectReference particleEffect;

		[Token(Token = "0x60027BD")]
		[Address(RVA = "0x111939C", Offset = "0x111939C", VA = "0x111939C")]
		public DestroySourceEffectSettings()
		{
		}
	}
	[Token(Token = "0x20008F3")]
	public class DestroySourceEffect : IEventTriggerEffects
	{
		[Token(Token = "0x4003A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DestroySourceEffectSettings destroySourceEffectSettings;

		[Token(Token = "0x4003A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ToolRecycleHandler toolRecycleHandler;

		[Token(Token = "0x4003A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ProjectileRecycleHandler projectileRecycleHandler;

		[Token(Token = "0x4003A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x60027BE")]
		[Address(RVA = "0x1119454", Offset = "0x1119454", VA = "0x1119454")]
		public DestroySourceEffect(DestroySourceEffectSettings destroySourceEffectSettings, ToolRecycleHandler toolRecycleHandler, ProjectileRecycleHandler projectileRecycleHandler, IgnisSoundTriggerData ignisSoundTriggerData)
		{
		}

		[Token(Token = "0x60027BF")]
		[Address(RVA = "0x1119494", Offset = "0x1119494", VA = "0x1119494")]
		public void TriggerEffect(ISource source, List<Projectile> projectiles, in ProjectileMessageData projectileMessageData, in ProjectileSourceData sourceData)
		{
		}

		[Token(Token = "0x60027C0")]
		[Address(RVA = "0x11196B0", Offset = "0x11196B0", VA = "0x11196B0", Slot = "4")]
		private void Ignis.IEventTriggerEffects.TriggerEffect(ISource source, List<Projectile> projectiles, in ProjectileMessageData projectileMessageData, in ProjectileSourceData sourceData)
		{
		}
	}
	[Token(Token = "0x20008F4")]
	public abstract class EventTriggerEffectSettings : ScriptableObject
	{
		[Token(Token = "0x60027C1")]
		[Address(RVA = "0x111944C", Offset = "0x111944C", VA = "0x111944C")]
		protected EventTriggerEffectSettings()
		{
		}
	}
	[Token(Token = "0x20008F5")]
	public interface ISource : ITransformRoots
	{
		[Token(Token = "0x170001A9")]
		bool IsTool
		{
			[Token(Token = "0x60027C2")]
			get;
		}

		[Token(Token = "0x170001AA")]
		ProjectileSettings ProjectileSettings
		{
			[Token(Token = "0x60027C3")]
			get;
		}

		[Token(Token = "0x170001AB")]
		ToolName ToolSource
		{
			[Token(Token = "0x60027C4")]
			get;
		}

		[Token(Token = "0x170001AC")]
		int PlayerInstigator
		{
			[Token(Token = "0x60027C5")]
			get;
		}

		[Token(Token = "0x170001AD")]
		List<IEventTriggerEffects> Effects
		{
			[Token(Token = "0x60027C7")]
			get;
		}

		[Token(Token = "0x60027C6")]
		int NetworkId();
	}
	[Token(Token = "0x20008F6")]
	public interface IEventTriggerEffects
	{
		[Token(Token = "0x60027C8")]
		void TriggerEffect(ISource source, List<Projectile> projectiles, in ProjectileMessageData projectileMessageData, in ProjectileSourceData sourceData);
	}
	[Token(Token = "0x20008F7")]
	public class EffectTriggerAssigner
	{
		[Token(Token = "0x4003A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AutoSpectatorToolUseEffect autoSpectatorToolUseEffect;

		[Token(Token = "0x4003A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly FireableEffect fireableEffect;

		[Token(Token = "0x4003A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly SpawnLaserSourceEffect spawnLaserSourceEffect;

		[Token(Token = "0x4003A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ToolRecycleHandler toolRecycleHandler;

		[Token(Token = "0x4003A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ProjectileRecycleHandler projectileRecycleHandler;

		[Token(Token = "0x4003A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4003A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ParticleEffectData particleEffectData;

		[Token(Token = "0x60027C9")]
		[Address(RVA = "0x11196B4", Offset = "0x11196B4", VA = "0x11196B4")]
		public EffectTriggerAssigner(AutoSpectatorToolUseEffect autoSpectatorToolUseEffect, FireableEffect fireableEffect, SpawnLaserSourceEffect spawnLaserSourceEffect, ToolRecycleHandler toolRecycleHandler, ProjectileRecycleHandler projectileRecycleHandler, IgnisSoundTriggerData ignisSoundTriggerData, ParticleEffectData particleEffectData)
		{
		}

		[Token(Token = "0x60027CA")]
		[Address(RVA = "0x1119718", Offset = "0x1119718", VA = "0x1119718")]
		public List<IEventTriggerEffects> CreateEffectList(List<EventTriggerEffectSettings> settingsList)
		{
			return null;
		}

		[Token(Token = "0x60027CB")]
		[Address(RVA = "0x1119868", Offset = "0x1119868", VA = "0x1119868")]
		public IEventTriggerEffects GetEffect(EventTriggerEffectSettings settings)
		{
			return null;
		}

		[Token(Token = "0x60027CC")]
		[Address(RVA = "0x1119AB8", Offset = "0x1119AB8", VA = "0x1119AB8")]
		public void AddCommonToolEffects(List<IEventTriggerEffects> effectsList)
		{
		}
	}
	[Token(Token = "0x20008F8")]
	public abstract class EventTriggerModule
	{
		[Token(Token = "0x4003A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IProjectileSettings projectileSettings;

		[Token(Token = "0x4003A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly NetworkIdAllocator networkIdAllocator;

		[Token(Token = "0x4003A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly GameData gameData;

		[Token(Token = "0x4003A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected ushort seedSequence;

		[Token(Token = "0x60027CD")]
		[Address(RVA = "0x1119B60", Offset = "0x1119B60", VA = "0x1119B60")]
		protected EventTriggerModule(IProjectileSettings projectileSettings, GameData gameData, NetworkIdAllocator networkIdAllocator)
		{
		}

		[Token(Token = "0x60027CE")]
		public abstract void Trigger(int sourceNetworkId, Vector3 averageVelocity, Vector3 position, Quaternion rotation, int tetherNetworkId, float chargeAmount, float bowPullbackAmount, int playerSource);

		[Token(Token = "0x60027CF")]
		[Address(RVA = "0x1119B9C", Offset = "0x1119B9C", VA = "0x1119B9C")]
		public void ResetSeed()
		{
		}

		[Token(Token = "0x60027D0")]
		[Address(RVA = "0x1119BC4", Offset = "0x1119BC4", VA = "0x1119BC4")]
		protected List<int> GetNetworkIds(int numberOfProjectiles)
		{
			return null;
		}

		[Token(Token = "0x60027D1")]
		[Address(RVA = "0x1119CD4", Offset = "0x1119CD4", VA = "0x1119CD4")]
		protected List<int> GetNetworkIdsThroughTether(int numberOfProjectiles, int tetherNetworkId)
		{
			return null;
		}

		[Token(Token = "0x60027D2")]
		[Address(RVA = "0x1119DBC", Offset = "0x1119DBC", VA = "0x1119DBC")]
		protected ProjectileMessageData CreateProjectileData(ushort seed, ProjectileSpawnSettings spawnSetting, int tetherNetworkId, float chargeAmount, float bowPullbackAmount, int playerSource)
		{
			return default(ProjectileMessageData);
		}

		[Token(Token = "0x60027D3")]
		[Address(RVA = "0x1119E8C", Offset = "0x1119E8C", VA = "0x1119E8C")]
		protected Quaternion GetRotation(ProjectileSpawnSettings spawnSetting, Vector3 position, Quaternion rotation, int playerSource)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x20008F9")]
	public class CurveProjectileTriggerModule : EventTriggerModule
	{
		[Token(Token = "0x4003A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4003A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly CurveProjectileSettings curveProjectileSettings;

		[Token(Token = "0x4003A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameMessageFactory messageFactory;

		[Token(Token = "0x60027D4")]
		[Address(RVA = "0x111A034", Offset = "0x111A034", VA = "0x111A034")]
		public CurveProjectileTriggerModule(MessageSender messageSender, CurveProjectileSettings curveProjectileSettings, GameData gameData, NetworkIdAllocator networkIdAllocator, GameMessageFactory gameMessageFactory)
		{
		}

		[Token(Token = "0x60027D5")]
		[Address(RVA = "0x111A088", Offset = "0x111A088", VA = "0x111A088", Slot = "4")]
		public override void Trigger(int sourceNetworkId, Vector3 averageVelocity, Vector3 position, Quaternion rotation, int tetherNetworkId, float chargeAmount, float bowPullbackAmount, int playerSource)
		{
		}
	}
	[Token(Token = "0x20008FA")]
	public class StraightProjectileTriggerModule : EventTriggerModule
	{
		[Token(Token = "0x4003A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4003A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly StraightProjectileSetting straightProjectileSetting;

		[Token(Token = "0x4003A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameMessageFactory messageFactory;

		[Token(Token = "0x60027D6")]
		[Address(RVA = "0x111A2BC", Offset = "0x111A2BC", VA = "0x111A2BC")]
		public StraightProjectileTriggerModule(MessageSender messageSender, StraightProjectileSetting straightProjectileSetting, GameData gameData, NetworkIdAllocator networkIdAllocator, GameMessageFactory messageFactory)
		{
		}

		[Token(Token = "0x60027D7")]
		[Address(RVA = "0x111A310", Offset = "0x111A310", VA = "0x111A310", Slot = "4")]
		public override void Trigger(int sourceNetworkId, Vector3 averageVelocity, Vector3 position, Quaternion rotation, int tetherNetworkId, float chargeAmount, float bowPullbackAmount, int playerSource)
		{
		}
	}
	[Token(Token = "0x20008FB")]
	public class LauncherProjectileTriggerModule : EventTriggerModule
	{
		[Token(Token = "0x4003A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4003A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly BulletLauncherProjectileSettings launcherSettings;

		[Token(Token = "0x4003A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameMessageFactory messageFactory;

		[Token(Token = "0x60027D8")]
		[Address(RVA = "0x111A44C", Offset = "0x111A44C", VA = "0x111A44C")]
		public LauncherProjectileTriggerModule(MessageSender messageSender, BulletLauncherProjectileSettings launcherSettings, GameData gameData, NetworkIdAllocator networkIdAllocator, GameMessageFactory messageFactory)
		{
		}

		[Token(Token = "0x60027D9")]
		[Address(RVA = "0x111A4A0", Offset = "0x111A4A0", VA = "0x111A4A0", Slot = "4")]
		public override void Trigger(int sourceNetworkId, Vector3 averageVelocity, Vector3 position, Quaternion rotation, int tetherNetworkId, float chargeAmount, float bowPullbackAmount, int playerSource)
		{
		}
	}
	[Token(Token = "0x20008FC")]
	public class HelixProjectileTriggerModule : EventTriggerModule
	{
		[Token(Token = "0x4003A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4003A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly HelixProjectileSetting helixProjectileSetting;

		[Token(Token = "0x4003A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameMessageFactory messageFactory;

		[Token(Token = "0x60027DA")]
		[Address(RVA = "0x111A650", Offset = "0x111A650", VA = "0x111A650")]
		public HelixProjectileTriggerModule(MessageSender messageSender, HelixProjectileSetting helixProjectileSetting, GameData gameData, NetworkIdAllocator networkIdAllocator, GameMessageFactory messageFactory)
		{
		}

		[Token(Token = "0x60027DB")]
		[Address(RVA = "0x111A6A4", Offset = "0x111A6A4", VA = "0x111A6A4", Slot = "4")]
		public override void Trigger(int sourceNetworkId, Vector3 averageVelocity, Vector3 position, Quaternion rotation, int tetherNetworkId, float chargeAmount, float bowPullbackAmount, int playerSource)
		{
		}
	}
	[Token(Token = "0x20008FD")]
	public class BounceProjectileTriggerModule : EventTriggerModule
	{
		[Token(Token = "0x4003A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4003A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly BounceProjectileSetting bounceProjectileSetting;

		[Token(Token = "0x4003A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameMessageFactory messageFactory;

		[Token(Token = "0x60027DC")]
		[Address(RVA = "0x111A7E0", Offset = "0x111A7E0", VA = "0x111A7E0")]
		public BounceProjectileTriggerModule(MessageSender messageSender, BounceProjectileSetting bounceProjectileSetting, GameData gameData, NetworkIdAllocator networkIdAllocator, GameMessageFactory messageFactory)
		{
		}

		[Token(Token = "0x60027DD")]
		[Address(RVA = "0x111A834", Offset = "0x111A834", VA = "0x111A834", Slot = "4")]
		public override void Trigger(int sourceNetworkId, Vector3 averageVelocity, Vector3 position, Quaternion rotation, int tetherNetworkId, float chargeAmount, float bowPullbackAmount, int playerSource)
		{
		}
	}
	[Token(Token = "0x20008FE")]
	public class StationaryProjectileTriggerModule : EventTriggerModule
	{
		[Token(Token = "0x4003A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4003A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly StationaryProjectileSettings stationaryProjectileSettings;

		[Token(Token = "0x4003A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameMessageFactory messageFactory;

		[Token(Token = "0x60027DE")]
		[Address(RVA = "0x111A970", Offset = "0x111A970", VA = "0x111A970")]
		public StationaryProjectileTriggerModule(MessageSender messageSender, StationaryProjectileSettings stationaryProjectileSettings, GameData gameData, NetworkIdAllocator networkIdAllocator, GameMessageFactory messageFactory)
		{
		}

		[Token(Token = "0x60027DF")]
		[Address(RVA = "0x111A9C4", Offset = "0x111A9C4", VA = "0x111A9C4", Slot = "4")]
		public override void Trigger(int sourceNetworkId, Vector3 averageVelocity, Vector3 position, Quaternion rotation, int tetherNetworkId, float chargeAmount, float bowPullbackAmount, int playerSource)
		{
		}
	}
	[Token(Token = "0x20008FF")]
	public class EventTriggerModuleFactory
	{
		[Token(Token = "0x4003A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4003A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameData gameData;

		[Token(Token = "0x4003A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly NetworkIdAllocator networkIdAllocator;

		[Token(Token = "0x4003A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameMessageFactory messageFactory;

		[Token(Token = "0x60027E0")]
		[Address(RVA = "0x111AB00", Offset = "0x111AB00", VA = "0x111AB00")]
		public EventTriggerModuleFactory(MessageSender messageSender, GameData gameData, NetworkIdAllocator networkIdAllocator, GameMessageFactory messageFactory)
		{
		}

		[Token(Token = "0x60027E1")]
		[Address(RVA = "0x111AB40", Offset = "0x111AB40", VA = "0x111AB40")]
		public EventTriggerModule CreateModule(ProjectileSettings projectileSettings)
		{
			return null;
		}
	}
	[Token(Token = "0x2000900")]
	[CreateAssetMenu(fileName = "FireableEffectSettings", menuName = "Effect/FireableEffectSettings")]
	public class FireableEffectSettings : EventTriggerEffectSettings
	{
		[Token(Token = "0x60027E2")]
		[Address(RVA = "0x111AE14", Offset = "0x111AE14", VA = "0x111AE14")]
		public FireableEffectSettings()
		{
		}
	}
	[Token(Token = "0x2000901")]
	public class FireableEffect : IEventTriggerEffects
	{
		[Token(Token = "0x4003A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly CooldownData cooldownData;

		[Token(Token = "0x4003A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x60027E3")]
		[Address(RVA = "0x111AE1C", Offset = "0x111AE1C", VA = "0x111AE1C")]
		public FireableEffect(CooldownData cooldownData, IgnisSoundTriggerData ignisSoundTriggerData)
		{
		}

		[Token(Token = "0x60027E4")]
		[Address(RVA = "0x111AE48", Offset = "0x111AE48", VA = "0x111AE48")]
		public void TriggerEffect(ISource source, List<Projectile> projectiles, in ProjectileMessageData projectileMessageData, in ProjectileSourceData sourceData)
		{
		}

		[Token(Token = "0x60027E5")]
		[Address(RVA = "0x111AFA4", Offset = "0x111AFA4", VA = "0x111AFA4")]
		private void TriggerFireable(IFireable iFireable, float timeStamp, float chargeAmount, int instigator, Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x60027E6")]
		[Address(RVA = "0x111B1B8", Offset = "0x111B1B8", VA = "0x111B1B8", Slot = "4")]
		private void Ignis.IEventTriggerEffects.TriggerEffect(ISource source, List<Projectile> projectiles, in ProjectileMessageData projectileMessageData, in ProjectileSourceData sourceData)
		{
		}
	}
	[Token(Token = "0x2000902")]
	[CreateAssetMenu(fileName = "SpawnLaserSourceEffectSettings", menuName = "Effect/SpawnLaserSourceEffectSettings")]
	public class SpawnLaserSourceEffectSettings : EventTriggerEffectSettings
	{
		[Token(Token = "0x60027E7")]
		[Address(RVA = "0x111B1BC", Offset = "0x111B1BC", VA = "0x111B1BC")]
		public SpawnLaserSourceEffectSettings()
		{
		}
	}
	[Token(Token = "0x2000903")]
	public class SpawnLaserSourceEffect : IEventTriggerEffects
	{
		[Token(Token = "0x4003A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly LaserHandler laserHandler;

		[Token(Token = "0x60027E8")]
		[Address(RVA = "0x111B1C4", Offset = "0x111B1C4", VA = "0x111B1C4")]
		public SpawnLaserSourceEffect(LaserHandler laserHandler)
		{
		}

		[Token(Token = "0x60027E9")]
		[Address(RVA = "0x111B1EC", Offset = "0x111B1EC", VA = "0x111B1EC")]
		public void TriggerEffect(ISource source, List<Projectile> projectiles, in ProjectileMessageData projectileMessageData, in ProjectileSourceData sourceData)
		{
		}

		[Token(Token = "0x60027EA")]
		[Address(RVA = "0x111B718", Offset = "0x111B718", VA = "0x111B718", Slot = "4")]
		private void Ignis.IEventTriggerEffects.TriggerEffect(ISource source, List<Projectile> projectiles, in ProjectileMessageData projectileMessageData, in ProjectileSourceData sourceData)
		{
		}
	}
	[Token(Token = "0x2000904")]
	[CreateAssetMenu(fileName = "TrailEffectSettings", menuName = "Effect/TrailEffectSettings")]
	public class TrailEffectSettings : EventTriggerEffectSettings
	{
		[Token(Token = "0x4003A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParticleEffectReference trailEffect;

		[Token(Token = "0x60027EB")]
		[Address(RVA = "0x111B71C", Offset = "0x111B71C", VA = "0x111B71C")]
		public TrailEffectSettings()
		{
		}
	}
	[Token(Token = "0x2000905")]
	public class TrailEffect : IEventTriggerEffects
	{
		[Token(Token = "0x4003A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ParticleEffectData particleEffectData;

		[Token(Token = "0x4003A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly TrailEffectSettings trailEffectSettings;

		[Token(Token = "0x60027EC")]
		[Address(RVA = "0x1119A8C", Offset = "0x1119A8C", VA = "0x1119A8C")]
		public TrailEffect(ParticleEffectData particleEffectData, TrailEffectSettings trailEffectSettings)
		{
		}

		[Token(Token = "0x60027ED")]
		[Address(RVA = "0x111B724", Offset = "0x111B724", VA = "0x111B724")]
		public void TriggerEffect(ISource source, List<Projectile> projectiles, in ProjectileMessageData projectileMessageData, in ProjectileSourceData sourceData)
		{
		}

		[Token(Token = "0x60027EE")]
		[Address(RVA = "0x111B88C", Offset = "0x111B88C", VA = "0x111B88C", Slot = "4")]
		private void Ignis.IEventTriggerEffects.TriggerEffect(ISource source, List<Projectile> projectiles, in ProjectileMessageData projectileMessageData, in ProjectileSourceData sourceData)
		{
		}
	}
	[Token(Token = "0x2000906")]
	[CreateAssetMenu(fileName = "ToolSettings", menuName = "Settings/Tools/GranadeTool", order = 1)]
	public class GranadeToolSettings : ToolSetting
	{
		[Token(Token = "0x4003A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float countdownDuration;

		[Token(Token = "0x4003A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Header("Audio")]
		public string[] activationSound;

		[Token(Token = "0x4003A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Effects")]
		public AnimationCurve activationBlinkingCurve;

		[Token(Token = "0x4003A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public string emissionColorName;

		[Token(Token = "0x4003A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public string velocityTextId;

		[Token(Token = "0x4003A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public string numRounds;

		[Token(Token = "0x60027EF")]
		[Address(RVA = "0x1119028", Offset = "0x1119028", VA = "0x1119028")]
		public GranadeToolSettings()
		{
		}
	}
	[Token(Token = "0x2000907")]
	public class GrenadeToolFactory : GenericToolFactory<GrenadeTool, GranadeToolSettings>
	{
		[Token(Token = "0x4003A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly int attachmentId;

		[Token(Token = "0x4003A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly List<IEventTriggerEffects> eventTriggerEffectsList;

		[Token(Token = "0x4003A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly EventTriggerModule eventTriggerModule;

		[Token(Token = "0x60027F0")]
		[Address(RVA = "0x111B890", Offset = "0x111B890", VA = "0x111B890")]
		public GrenadeToolFactory(ToolName name, GranadeToolSettings toolSettings, int attachmentId, ComponentPrefabPool<ToolReferences> referencePools, ComponentPrefabPool<BoxColliderReference> colliderReferencePool, ComponentPrefabPool<SphereColliderReference> sphereColliderReferencePool, CSharpObjectPool<GrenadeTool> toolPool, ToolInitializationUtility initializationUtility, List<IEventTriggerEffects> eventTriggerEffectsList, EventTriggerModule eventTriggerModule)
		{
		}

		[Token(Token = "0x60027F1")]
		[Address(RVA = "0x111B95C", Offset = "0x111B95C", VA = "0x111B95C", Slot = "7")]
		protected override void InitializeTool(int toolNetworkId, GrenadeTool tool, ToolReferences references, BoxColliderReference colliderReference, SphereColliderReference sphereColliderReference, SphereColliderReference secondaryGrabToleranceColliderReference)
		{
		}
	}
	[Token(Token = "0x2000908")]
	public class GrenadeTool : Tool, ITimeable, IProjectileSpawner
	{
		[Token(Token = "0x4003A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private bool activated;

		[Token(Token = "0x4003A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int tetherNetworkId;

		[Token(Token = "0x4003A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public GranadeToolSettings toolSettings;

		[Token(Token = "0x4003A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4003A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private readonly ToolChargeComponent toolChargeComponent;

		[Token(Token = "0x4003A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private CooldownColorComponent emissionColor;

		[Token(Token = "0x4003A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private ushort seed;

		[Token(Token = "0x4003A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private float triggeredChargeAmount;

		[Token(Token = "0x4003A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private EventTriggerModule eventTriggerModule;

		[Token(Token = "0x60027F2")]
		[Address(RVA = "0x111BA48", Offset = "0x111BA48", VA = "0x111BA48")]
		public GrenadeTool(IMessageSender messageSender, GameMessageFactory gameMessageFactory, NetworkIdAllocator networkIdAllocator, OwnershipHelper ownershipHelper, ImpactHandlerData impactHandlerData, IgnisSoundTriggerData ignisSoundTriggerData, ToolChargeComponent toolChargeComponent, ToolBowPullbackComponent toolBowPullbackComponent)
		{
		}

		[Token(Token = "0x60027F3")]
		[Address(RVA = "0x111B9B4", Offset = "0x111B9B4", VA = "0x111B9B4")]
		public void Initialize(ToolReferences toolReferences, BoxColliderReference colliderReference, SphereColliderReference sphereColliderReference, SphereColliderReference secondaryGrabToleranceColliderReference, int toolNetworkId, ToolName toolName, GranadeToolSettings toolSettings, int attachmentId, List<IEventTriggerEffects> effects, EventTriggerModule eventTriggerModule)
		{
		}

		[Token(Token = "0x60027F4")]
		[Address(RVA = "0x111BEE0", Offset = "0x111BEE0", VA = "0x111BEE0", Slot = "54")]
		public override void InitializeVisuals()
		{
		}

		[Token(Token = "0x60027F5")]
		[Address(RVA = "0x111C19C", Offset = "0x111C19C", VA = "0x111C19C", Slot = "59")]
		public override bool AllowedToTrigger(float timestamp)
		{
			return default(bool);
		}

		[Token(Token = "0x60027F6")]
		[Address(RVA = "0x111C1AC", Offset = "0x111C1AC", VA = "0x111C1AC", Slot = "61")]
		public override bool CanAutoTrigger()
		{
			return default(bool);
		}

		[Token(Token = "0x60027F7")]
		[Address(RVA = "0x111C1B4", Offset = "0x111C1B4", VA = "0x111C1B4", Slot = "72")]
		public void UpdateTimableVisuals(float elapsedTime)
		{
		}

		[Token(Token = "0x60027F8")]
		[Address(RVA = "0x111C1F0", Offset = "0x111C1F0", VA = "0x111C1F0", Slot = "73")]
		public void TimerDone()
		{
		}

		[Token(Token = "0x60027F9")]
		[Address(RVA = "0x111C374", Offset = "0x111C374", VA = "0x111C374", Slot = "58")]
		public override void Trigger(Vector3 averageVelocity, GameMessageFactory messageFactory, int tetherNetworkId = 0)
		{
		}

		[Token(Token = "0x60027FA")]
		[Address(RVA = "0x111C460", Offset = "0x111C460", VA = "0x111C460", Slot = "76")]
		public void OnActivation(int playerNetworkId, float timeStamp, int tetherNetworkId = 0, float chargeAmount = 0f)
		{
		}

		[Token(Token = "0x60027FB")]
		[Address(RVA = "0x111C4E0", Offset = "0x111C4E0", VA = "0x111C4E0", Slot = "77")]
		public void TimerAborted(float timeStamp)
		{
		}

		[Token(Token = "0x60027FC")]
		[Address(RVA = "0x111C5B0", Offset = "0x111C5B0", VA = "0x111C5B0")]
		public bool IsActivated()
		{
			return default(bool);
		}

		[Token(Token = "0x60027FD")]
		[Address(RVA = "0x111C5B8", Offset = "0x111C5B8", VA = "0x111C5B8", Slot = "74")]
		public float GetDuration()
		{
			return default(float);
		}

		[Token(Token = "0x60027FE")]
		[Address(RVA = "0x111C5D4", Offset = "0x111C5D4", VA = "0x111C5D4", Slot = "78")]
		public int GetNumProjectilesToSpawn()
		{
			return default(int);
		}

		[Token(Token = "0x60027FF")]
		[Address(RVA = "0x111C600", Offset = "0x111C600", VA = "0x111C600", Slot = "65")]
		public override float GetTotalPredictedPlayerDamage()
		{
			return default(float);
		}

		[Token(Token = "0x6002800")]
		[Address(RVA = "0x111C648", Offset = "0x111C648", VA = "0x111C648", Slot = "56")]
		public override void MarkAsDestroyed(float timestamp)
		{
		}

		[Token(Token = "0x6002801")]
		[Address(RVA = "0x111C698", Offset = "0x111C698", VA = "0x111C698", Slot = "69")]
		public override void Recycle()
		{
		}

		[Token(Token = "0x6002802")]
		[Address(RVA = "0x111C714", Offset = "0x111C714", VA = "0x111C714", Slot = "70")]
		public override bool OutOfAmmo()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000909")]
	public class ForceFieldData
	{
		[Token(Token = "0x4003A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<ForceFieldSource> activatedForceFields;

		[Token(Token = "0x6002803")]
		[Address(RVA = "0x111C71C", Offset = "0x111C71C", VA = "0x111C71C")]
		public ForceFieldData()
		{
		}
	}
	[Token(Token = "0x200090A")]
	public struct ForceFieldSource
	{
		[Token(Token = "0x4003A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IForceField forceField;

		[Token(Token = "0x4003A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float activationTime;

		[Token(Token = "0x6002804")]
		[Address(RVA = "0x111C79C", Offset = "0x111C79C", VA = "0x111C79C")]
		public ForceFieldSource(IForceField forceField, float activationTime)
		{
		}
	}
	[Token(Token = "0x200090B")]
	public class ShieldHandler : IFixedTickable
	{
		[Token(Token = "0x4003A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ForceFieldData forceFieldData;

		[Token(Token = "0x4003A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameData gameData;

		[Token(Token = "0x4003A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IgnisSoundTriggerData ignisSoundTriggers;

		[Token(Token = "0x4003A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4003A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x4003A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int Percentage;

		[Token(Token = "0x6002805")]
		[Address(RVA = "0x111C7A8", Offset = "0x111C7A8", VA = "0x111C7A8")]
		public ShieldHandler(ForceFieldData forceFieldData, GameData gameData, IgnisSoundTriggerData ignisSoundTriggers, IRoomTimeProvider roomTimeProvider, DamageRecordKeeper damageRecordKeeper)
		{
		}

		[Token(Token = "0x6002806")]
		[Address(RVA = "0x111C7F8", Offset = "0x111C7F8", VA = "0x111C7F8", Slot = "4")]
		public void FixedTick()
		{
		}

		[Token(Token = "0x6002807")]
		[Address(RVA = "0x111CAFC", Offset = "0x111CAFC", VA = "0x111CAFC")]
		public GameMessageInvokationResult OnShieldActivationMessage(ShieldActivationMessage message)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6002808")]
		[Address(RVA = "0x111CFE4", Offset = "0x111CFE4", VA = "0x111CFE4")]
		public GameMessageInvokationResult DeactiveShiledMessage(ShieldDeactivationMessage message)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x200090D")]
	public class ShieldToolReferences : ToolReferences
	{
		[Token(Token = "0x4003A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject shieldField;

		[Token(Token = "0x4003A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Renderer forceFieldRenderer;

		[Token(Token = "0x4003A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Renderer healthBarRenderer;

		[Token(Token = "0x600280D")]
		[Address(RVA = "0x111D4D0", Offset = "0x111D4D0", VA = "0x111D4D0")]
		public ShieldToolReferences()
		{
		}
	}
	[Token(Token = "0x200090E")]
	[CreateAssetMenu(fileName = "ShieldToolSettings", menuName = "Settings/Tools/ShieldTool", order = 2)]
	public class ShieldToolSettings : ToolSetting
	{
		[Token(Token = "0x4003A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Shield Settings")]
		public int numActivations;

		[Token(Token = "0x4003A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public ForceFieldSettings forceFieldSettings;

		[Token(Token = "0x4003A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Vector3 forceFieldColliderCenter;

		[Token(Token = "0x4003A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public Vector3 forceFieldColliderSize;

		[Token(Token = "0x4003A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public string emissionColorName;

		[Token(Token = "0x600280E")]
		[Address(RVA = "0x111D4D8", Offset = "0x111D4D8", VA = "0x111D4D8")]
		public ShieldToolSettings()
		{
		}
	}
	[Token(Token = "0x200090F")]
	[CreateAssetMenu(menuName = "Projectile/HelixProjectileSetting", fileName = "HelixProjectileSetting")]
	public class HelixProjectileSetting : ProjectileSettings
	{
		[Token(Token = "0x4003A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ProjectileVelocitySettings velocitySettings;

		[Token(Token = "0x4003A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HelixCurveSettings helixCurve;

		[Token(Token = "0x4003A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public HelixCurveSettings helixCurveCharged;

		[Token(Token = "0x4003A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public HelixCurveSettings helixCurveBowPullback;

		[Token(Token = "0x600280F")]
		[Address(RVA = "0x111D530", Offset = "0x111D530", VA = "0x111D530")]
		public HelixProjectileSetting()
		{
		}
	}
	[Token(Token = "0x2000910")]
	[CreateAssetMenu(fileName = "HelixToolSettings", menuName = "Tools/HelixTool", order = 1)]
	public class HelixProjectileToolSettings : ToolSetting
	{
		[Token(Token = "0x4003A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public FireableSettings fireable;

		[Token(Token = "0x4003A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public HelixProjectileSetting projectile;

		[Token(Token = "0x6002810")]
		[Address(RVA = "0x111D538", Offset = "0x111D538", VA = "0x111D538")]
		public HelixProjectileToolSettings()
		{
		}
	}
	[Token(Token = "0x2000911")]
	public interface IFireable : ITransformRoots
	{
		[Token(Token = "0x170001AE")]
		float CoolDown
		{
			[Token(Token = "0x600281C")]
			get;
			[Token(Token = "0x600281D")]
			set;
		}

		[Token(Token = "0x6002811")]
		void UpdateLastRoundFired(float timestamp);

		[Token(Token = "0x6002812")]
		bool ReadyToFire(float timestamp);

		[Token(Token = "0x6002813")]
		float ElapsedTime();

		[Token(Token = "0x6002814")]
		void ElapsedTime(float newTime);

		[Token(Token = "0x6002815")]
		FireableSettings FireableSettings();

		[Token(Token = "0x6002816")]
		ToolState GetToolState();

		[Token(Token = "0x6002817")]
		CooldownColorComponent GetCooldownColorComponent();

		[Token(Token = "0x6002818")]
		ControllerHand HeldHand();

		[Token(Token = "0x6002819")]
		int LastPlayerHeld();

		[Token(Token = "0x600281A")]
		ToolReferences GetToolReference();

		[Token(Token = "0x600281B")]
		int GetRoundsLeft();
	}
	[Serializable]
	[Token(Token = "0x2000912")]
	public class FireableSettings
	{
		[Token(Token = "0x4003A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int numRounds;

		[Token(Token = "0x4003A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool autoFire;

		[Token(Token = "0x4003A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Cooldown")]
		public float cooldown;

		[Token(Token = "0x4003A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float cooldownCharged;

		[Token(Token = "0x4003A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve cooldownCurve;

		[Token(Token = "0x4003A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string emissionColorName;

		[Token(Token = "0x4003A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Audio")]
		[SoundGroup]
		public string[] cooldownSound;

		[Token(Token = "0x4003A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SoundGroup]
		public string[] chargedSound;

		[Token(Token = "0x4003A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SoundGroup]
		public string[] muzzleSoundLocal;

		[Token(Token = "0x4003A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SoundGroup]
		public string[] muzzleSoundRemote;

		[Token(Token = "0x4003A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[FormerlySerializedAs("MuzzleParticleEffect")]
		[Header("Effects")]
		public ParticleEffectReference muzzleParticleEffect;

		[Token(Token = "0x600281E")]
		[Address(RVA = "0x111D540", Offset = "0x111D540", VA = "0x111D540")]
		public FireableSettings()
		{
		}
	}
	[Token(Token = "0x2000913")]
	public class LaserHandlerData
	{
		[Token(Token = "0x4003A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<LaserSourceData> sources;

		[Token(Token = "0x600281F")]
		[Address(RVA = "0x111D6FC", Offset = "0x111D6FC", VA = "0x111D6FC")]
		public LaserHandlerData()
		{
		}
	}
	[Token(Token = "0x2000914")]
	public struct LaserSourceData
	{
		[Token(Token = "0x4003A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly LaserSource laserSource;

		[Token(Token = "0x4003A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IImpactable currentlyHitting;

		[Token(Token = "0x4003A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool hasHitAnything;

		[Token(Token = "0x4003A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float deployedAt;

		[Token(Token = "0x4003A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 lastPositionOfObjectHit;

		[Token(Token = "0x6002820")]
		[Address(RVA = "0x111D77C", Offset = "0x111D77C", VA = "0x111D77C")]
		public LaserSourceData(LaserSource laserSource, float deployedAt)
		{
		}
	}
	[Token(Token = "0x2000915")]
	public class LaserSourceFactory : IBallisticProjectileFactory, IProjectileFactory
	{
		[Token(Token = "0x4003A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform parentTransform;

		[Token(Token = "0x4003A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ComponentPrefabPool<ProjectileReference> referencePool;

		[Token(Token = "0x4003A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ComponentPrefabPool<SphereColliderReference> colliderReferencePool;

		[Token(Token = "0x4003A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly LaserSourceSettings settings;

		[Token(Token = "0x4003A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly CSharpObjectPool<LaserSource> projectilePool;

		[Token(Token = "0x4003A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly int projectileGroupId;

		[Token(Token = "0x4003A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly GameData gameData;

		[Token(Token = "0x4003A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly string[] playerOneHitLayers;

		[Token(Token = "0x4003A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly string[] playerTwoHitLayers;

		[Token(Token = "0x6002821")]
		[Address(RVA = "0x111D7E0", Offset = "0x111D7E0", VA = "0x111D7E0")]
		public LaserSourceFactory(Transform parentTransform, ComponentPrefabPool<ProjectileReference> referencePool, ComponentPrefabPool<SphereColliderReference> colliderReferencePool, LaserSourceSettings settings, CSharpObjectPool<LaserSource> projectilePool, int projectileGroupId, GameData gameData)
		{
		}

		[Token(Token = "0x6002822")]
		[Address(RVA = "0x111DA24", Offset = "0x111DA24", VA = "0x111DA24", Slot = "4")]
		public Projectile Create(float spawnTime, Vector3 position, Quaternion rotation, int projectileId, int collisionLayer, int playerInstigator, ToolName toolSpawnedFrom, float chargeAmount, float bowPullbackAmount, int tetherId)
		{
			return null;
		}

		[Token(Token = "0x6002823")]
		[Address(RVA = "0x111DF60", Offset = "0x111DF60", VA = "0x111DF60", Slot = "5")]
		public void Recycle(Projectile projectile)
		{
		}

		[Token(Token = "0x6002824")]
		[Address(RVA = "0x111E004", Offset = "0x111E004", VA = "0x111E004", Slot = "6")]
		public void RecycleGameObjects(Projectile projectile)
		{
		}
	}
	[Token(Token = "0x2000916")]
	public class LaserHandler
	{
		[Token(Token = "0x4003A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly LaserHandlerData laserHandlerData;

		[Token(Token = "0x4003A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ProjectileRecycleHandler projectileRecycleHandler;

		[Token(Token = "0x4003A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4003A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4003A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4003A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IgnisSoundTriggerData ignisSoundTriggers;

		[Token(Token = "0x4003A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly OwnershipHelper ownershipHelper;

		[Token(Token = "0x4003A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly GameData gameData;

		[Token(Token = "0x4003A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly FactoryData factoryData;

		[Token(Token = "0x4003A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly PlayerReferences localPlayerReferences;

		[Token(Token = "0x4003A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly StationaryProjectileHandlerData stationaryProjectileHandlerData;

		[Token(Token = "0x4003A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Collider[] sphereOverlapResult;

		[Token(Token = "0x4003A84")]
		private const float BeamTraceDistance = 1000f;

		[Token(Token = "0x6002825")]
		[Address(RVA = "0x111E0AC", Offset = "0x111E0AC", VA = "0x111E0AC")]
		public LaserHandler(LaserHandlerData laserHandlerData, ProjectileRecycleHandler projectileRecycleHandler, IRoomTimeProvider roomTimeProvider, MessageSender messageSender, GameMessageFactory gameMessageFactory, IgnisSoundTriggerData ignisSoundTriggers, OwnershipHelper ownershipHelper, GameData gameData, FactoryData factoryData, PlayerReferences localPlayerReferences, StationaryProjectileHandlerData stationaryProjectileHandlerData)
		{
		}

		[Token(Token = "0x6002826")]
		[Address(RVA = "0x111E178", Offset = "0x111E178", VA = "0x111E178")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002827")]
		[Address(RVA = "0x111EC6C", Offset = "0x111EC6C", VA = "0x111EC6C")]
		public void CleanUpRound()
		{
		}

		[Token(Token = "0x6002828")]
		[Address(RVA = "0x111E290", Offset = "0x111E290", VA = "0x111E290")]
		private void RaycastAllLasers()
		{
		}

		[Token(Token = "0x6002829")]
		[Address(RVA = "0x111F3D8", Offset = "0x111F3D8", VA = "0x111F3D8")]
		private static Vector3 WarmUpLaser(float roomTime, LaserSourceData laserSourceData, LaserSource laserSource, Vector3 beamEndPosition, Vector3 beamStartPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600282A")]
		[Address(RVA = "0x111F480", Offset = "0x111F480", VA = "0x111F480")]
		private void UpdatedSoundTransforms(LaserSourceData laserSourceData, Vector3 beamEndPosition)
		{
		}

		[Token(Token = "0x600282B")]
		[Address(RVA = "0x111EEFC", Offset = "0x111EEFC", VA = "0x111EEFC")]
		private LaserSourceData UpdateLaserHitting(IImpactable impactable, LaserSourceData laserSourceData, Vector3 beamEndPosition)
		{
			return default(LaserSourceData);
		}

		[Token(Token = "0x600282C")]
		[Address(RVA = "0x111EA04", Offset = "0x111EA04", VA = "0x111EA04")]
		private void CheckLaserSourcesForDespawnTimeout()
		{
		}

		[Token(Token = "0x600282D")]
		[Address(RVA = "0x111ED3C", Offset = "0x111ED3C", VA = "0x111ED3C")]
		private void TriggerDespawnSounds(LaserSource laserSource)
		{
		}

		[Token(Token = "0x600282E")]
		[Address(RVA = "0x111B398", Offset = "0x111B398", VA = "0x111B398")]
		public void OnDeployLaser(LaserSource laserSource, float timeStamp)
		{
		}
	}
	[Token(Token = "0x2000918")]
	public class LaserSource : Projectile, IDamageOverTime
	{
		[Token(Token = "0x4003A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public LaserSourceSettings laserSettings;

		[Token(Token = "0x4003A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public LaserProjectileReference laserProjectileReference;

		[Token(Token = "0x4003A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private DamagePerSecondData damagePerSecondData;

		[Token(Token = "0x4003A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private LaserSourceCharge laserSourceCharge;

		[Token(Token = "0x170001AF")]
		public int LayerHitMask
		{
			[Token(Token = "0x6002833")]
			[Address(RVA = "0x111F758", Offset = "0x111F758", VA = "0x111F758")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002834")]
			[Address(RVA = "0x111F760", Offset = "0x111F760", VA = "0x111F760")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B0")]
		public Transform DOTSoundTransform
		{
			[Token(Token = "0x6002835")]
			[Address(RVA = "0x111F768", Offset = "0x111F768", VA = "0x111F768", Slot = "56")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002836")]
			[Address(RVA = "0x111F770", Offset = "0x111F770", VA = "0x111F770")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B1")]
		public SphereColliderReference SphereColliderReference
		{
			[Token(Token = "0x6002837")]
			[Address(RVA = "0x111F778", Offset = "0x111F778", VA = "0x111F778")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002838")]
			[Address(RVA = "0x111F780", Offset = "0x111F780", VA = "0x111F780")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B2")]
		public float TimeToLiv
		{
			[Token(Token = "0x600283A")]
			[Address(RVA = "0x111F6B4", Offset = "0x111F6B4", VA = "0x111F6B4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001B3")]
		public float WarmUp
		{
			[Token(Token = "0x600283B")]
			[Address(RVA = "0x111EEF4", Offset = "0x111EEF4", VA = "0x111EEF4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001B4")]
		public float BeamRadius
		{
			[Token(Token = "0x600283C")]
			[Address(RVA = "0x111EEEC", Offset = "0x111EEEC", VA = "0x111EEEC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002832")]
		[Address(RVA = "0x111F74C", Offset = "0x111F74C", VA = "0x111F74C")]
		public LaserSource()
		{
		}

		[Token(Token = "0x6002839")]
		[Address(RVA = "0x111DD10", Offset = "0x111DD10", VA = "0x111DD10")]
		public void Initialize(float timestamp, LaserProjectileReference reference, SphereColliderReference sphereColliderReference, int projectileNetworkId, LaserSourceSettings settings, int projectileGroupId, int layerHitMask, int playerInstigator, ToolName toolSpawnedFrom, float chargeAmount, float bowPullbackAmount, int tetherId, DamagePerSecondData damageData, LaserSourceCharge charge)
		{
		}

		[Token(Token = "0x600283D")]
		[Address(RVA = "0x111F788", Offset = "0x111F788", VA = "0x111F788", Slot = "51")]
		public override void TriggerOnDestroy(Vector3 position)
		{
		}

		[Token(Token = "0x600283E")]
		[Address(RVA = "0x111F78C", Offset = "0x111F78C", VA = "0x111F78C", Slot = "53")]
		public override void ClearEventhandlers()
		{
		}

		[Token(Token = "0x600283F")]
		[Address(RVA = "0x111F790", Offset = "0x111F790", VA = "0x111F790", Slot = "46")]
		public override float GetDamageProjectile()
		{
			return default(float);
		}

		[Token(Token = "0x6002840")]
		[Address(RVA = "0x111F798", Offset = "0x111F798", VA = "0x111F798", Slot = "47")]
		public override float GetDamagePlayer()
		{
			return default(float);
		}

		[Token(Token = "0x6002841")]
		[Address(RVA = "0x111F7A0", Offset = "0x111F7A0", VA = "0x111F7A0", Slot = "48")]
		public override float GetProjectileRadius()
		{
			return default(float);
		}

		[Token(Token = "0x6002842")]
		[Address(RVA = "0x111F7BC", Offset = "0x111F7BC", VA = "0x111F7BC", Slot = "49")]
		public override float GetTotalPredictedPlayerDamage()
		{
			return default(float);
		}

		[Token(Token = "0x6002843")]
		[Address(RVA = "0x111F7DC", Offset = "0x111F7DC", VA = "0x111F7DC", Slot = "55")]
		public DamageOverTimeSettings DamageOverTimeSettings()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000919")]
	public class DamageOverTimeSettings
	{
		[Token(Token = "0x4003A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Header("Damage Over Time")]
		public float damagePerSecond;

		[Token(Token = "0x4003A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float damagePerSecondPlayer;

		[Token(Token = "0x4003A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float damagePerSecondCharged;

		[Token(Token = "0x4003A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float damagePerSecondPlayerCharged;

		[Token(Token = "0x4003A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] damageOverTimeStartSound;

		[Token(Token = "0x4003A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] damageOverTimeEndSound;

		[Token(Token = "0x4003A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string[] damageOverTimeContinuousSound;

		[Token(Token = "0x4003A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[FormerlySerializedAs("damageOverTimePlayerStartSound")]
		public string[] damageOverTimePlayerStartLocalSound;

		[Token(Token = "0x4003A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string[] damageOverTimePlayerStartRemoteSound;

		[Token(Token = "0x4003A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[FormerlySerializedAs("damageOverTimePlayerEndSound")]
		public string[] damageOverTimePlayerEndLocalSound;

		[Token(Token = "0x4003A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string[] damageOverTimePlayerEndRemoteSound;

		[Token(Token = "0x4003A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[FormerlySerializedAs("damageOverTimePlayerContinuousSound")]
		public string[] damageOverTimePlayerContinuousLocalSound;

		[Token(Token = "0x4003A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string[] damageOverTimePlayerContinuousRemoteSound;

		[Token(Token = "0x6002844")]
		[Address(RVA = "0x111F7F8", Offset = "0x111F7F8", VA = "0x111F7F8")]
		public DamageOverTimeSettings()
		{
		}
	}
	[Token(Token = "0x200091A")]
	public readonly struct DamagePerSecondData
	{
		[Token(Token = "0x4003A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly float damagePerSecond;

		[Token(Token = "0x4003A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly float damagePerSecondPlayer;

		[Token(Token = "0x6002845")]
		[Address(RVA = "0x111DCD4", Offset = "0x111DCD4", VA = "0x111DCD4")]
		public DamagePerSecondData(DamageOverTimeSettings settings, float chargeAmount)
		{
		}
	}
	[Token(Token = "0x200091B")]
	[CreateAssetMenu(fileName = "ToolSettings", menuName = "Settings/Tools/LaserTool", order = 2)]
	public class LaserToolSettings : StraightProjectileToolSettings
	{
		[Token(Token = "0x6002846")]
		[Address(RVA = "0x111FAB8", Offset = "0x111FAB8", VA = "0x111FAB8")]
		public LaserToolSettings()
		{
		}
	}
	[Token(Token = "0x200091C")]
	public class LumaReferences : SpawnPointToolReferences
	{
		[Token(Token = "0x4003A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public LineRenderer stringLineRenderer;

		[Token(Token = "0x4003A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public MeshRenderer arrowMeshRenderer;

		[Token(Token = "0x4003A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Renderer[] pullbackStrengthVFXRenderers;

		[Token(Token = "0x4003AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Transform stringTransform;

		[Token(Token = "0x4003AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Transform grabStringTransformAnchor;

		[Token(Token = "0x4003AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public GameObject projectileGameObject;

		[Token(Token = "0x4003AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public ToolPrefabSkinReferences toolBowPullbackSkinReferences;

		[Token(Token = "0x4003AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Transform leftMainGrabHandPositionVisualTarget;

		[Token(Token = "0x4003AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Transform rightMainGrabHandPositionVisualTarget;

		[Token(Token = "0x4003AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform leftStringGrabHandPositionVisualTarget;

		[Token(Token = "0x4003AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Transform rightStringGrabHandPositionVisualTarget;

		[Token(Token = "0x4003AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public ParticleSystem arrowTipParticleSystem;

		[Token(Token = "0x6002847")]
		[Address(RVA = "0x111FAC8", Offset = "0x111FAC8", VA = "0x111FAC8")]
		public LumaReferences()
		{
		}
	}
	[Token(Token = "0x200091D")]
	public class ToolPrefabSkinReferences : MonoBehaviour
	{
		[Token(Token = "0x4003AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator toolAnimator;

		[Token(Token = "0x4003AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Renderer toolModel;

		[Token(Token = "0x4003AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bottomStringAnchor;

		[Token(Token = "0x4003AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform upperStringAnchor;

		[Token(Token = "0x6002848")]
		[Address(RVA = "0x111FAD8", Offset = "0x111FAD8", VA = "0x111FAD8")]
		public ToolPrefabSkinReferences()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200091E")]
	public class ForceFieldSettings
	{
		[Token(Token = "0x4003AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float health;

		[Token(Token = "0x4003AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float damageToPlayer;

		[Token(Token = "0x4003AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float duration;

		[Token(Token = "0x4003AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float damageToProjectiles;

		[Token(Token = "0x4003AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Charged")]
		public float healthCharged;

		[Token(Token = "0x4003AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float damageToPlayerCharged;

		[Token(Token = "0x4003AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float durationCharged;

		[Token(Token = "0x4003AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float damageToProjectilesCharged;

		[Token(Token = "0x4003AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Audio")]
		public string[] activationLocal;

		[Token(Token = "0x4003AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string[] aActivationRemote;

		[Token(Token = "0x4003AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string[] deactivationLocal;

		[Token(Token = "0x4003AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string[] deactivationRemote;

		[Token(Token = "0x4003AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string sizeTextId;

		[Token(Token = "0x4003ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string cooldownTextId;

		[Token(Token = "0x6002849")]
		[Address(RVA = "0x111FAE0", Offset = "0x111FAE0", VA = "0x111FAE0")]
		public ForceFieldSettings()
		{
		}
	}
	[Token(Token = "0x200091F")]
	public struct ForceFieldProjectileData
	{
		[Token(Token = "0x4003ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float health;

		[Token(Token = "0x4003ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float damageToPlayer;

		[Token(Token = "0x4003ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float duration;

		[Token(Token = "0x4003ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float damageToProjectiles;

		[Token(Token = "0x600284A")]
		[Address(RVA = "0x111CE14", Offset = "0x111CE14", VA = "0x111CE14")]
		public ForceFieldProjectileData(ForceFieldSettings forceFieldSettings, float chargeAmount)
		{
		}
	}
	[Token(Token = "0x2000920")]
	public interface IForceField
	{
		[Token(Token = "0x170001B5")]
		ForceFieldProjectileData ForceFieldProjectileData
		{
			[Token(Token = "0x6002852")]
			get;
		}

		[Token(Token = "0x600284B")]
		Material HealthBar();

		[Token(Token = "0x600284C")]
		float CurrentHealth();

		[Token(Token = "0x600284D")]
		bool IsDeactivated();

		[Token(Token = "0x600284E")]
		bool IsDestroyed();

		[Token(Token = "0x600284F")]
		void Deactivate();

		[Token(Token = "0x6002850")]
		Transform Reference();

		[Token(Token = "0x6002851")]
		ForceFieldSettings Settings();
	}
	[Token(Token = "0x2000921")]
	public enum ForceFieldState
	{
		[Token(Token = "0x4003AC0")]
		Unused,
		[Token(Token = "0x4003AC1")]
		Activated,
		[Token(Token = "0x4003AC2")]
		Deactivated
	}
	[Token(Token = "0x2000922")]
	public class ShieldToolFactory : IToolsFactory
	{
		[Token(Token = "0x4003AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ToolName name;

		[Token(Token = "0x4003AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ShieldToolSettings toolSettings;

		[Token(Token = "0x4003AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly int attachmentId;

		[Token(Token = "0x4003AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ComponentPrefabPool<ToolReferences> referencePools;

		[Token(Token = "0x4003AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ComponentPrefabPool<DoubleBoxColliderReference> colliderReferencePool;

		[Token(Token = "0x4003AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ComponentPrefabPool<SphereColliderReference> sphereColliderReferencePool;

		[Token(Token = "0x4003AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly CSharpObjectPool<ShieldTool> toolPool;

		[Token(Token = "0x4003ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ToolInitializationUtility initializationUtility;

		[Token(Token = "0x6002853")]
		[Address(RVA = "0x111FC68", Offset = "0x111FC68", VA = "0x111FC68")]
		public ShieldToolFactory(ToolName name, ShieldToolSettings toolSettings, int attachmentId, ComponentPrefabPool<ToolReferences> referencePools, ComponentPrefabPool<DoubleBoxColliderReference> colliderReferencePool, ComponentPrefabPool<SphereColliderReference> sphereColliderReferencePool, CSharpObjectPool<ShieldTool> toolPool, ToolInitializationUtility initializationUtility)
		{
		}

		[Token(Token = "0x6002854")]
		[Address(RVA = "0x111FCD8", Offset = "0x111FCD8", VA = "0x111FCD8", Slot = "4")]
		public Tool Create(Transform parent, Vector3 position, Quaternion rotation, int toolNetworkId, int toolSkinId)
		{
			return null;
		}

		[Token(Token = "0x6002855")]
		[Address(RVA = "0x1120374", Offset = "0x1120374", VA = "0x1120374", Slot = "5")]
		public void Recycle(Tool tool)
		{
		}

		[Token(Token = "0x6002856")]
		[Address(RVA = "0x1120418", Offset = "0x1120418", VA = "0x1120418", Slot = "6")]
		public void RecycleCollider(Tool tool)
		{
		}
	}
	[Token(Token = "0x2000923")]
	public class ShieldTool : Tool, IForceField
	{
		[Token(Token = "0x4003ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private ForceFieldState currentForceFieldState;

		[Token(Token = "0x4003ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private ShieldToolSettings shieldToolSettings;

		[Token(Token = "0x4003ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private ShieldToolReferences shieldToolReferences;

		[Token(Token = "0x4003ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private readonly GameData gameData;

		[Token(Token = "0x4003ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Material healthBarMaterial;

		[Token(Token = "0x4003AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private float forceFieldHealth;

		[Token(Token = "0x4003AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private int numActivations;

		[Token(Token = "0x4003AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private readonly CooldownColorComponent cooldownColorComponent;

		[Token(Token = "0x170001B6")]
		public DoubleBoxColliderReference DoubleBoxColliderReference
		{
			[Token(Token = "0x6002858")]
			[Address(RVA = "0x112059C", Offset = "0x112059C", VA = "0x112059C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002859")]
			[Address(RVA = "0x11205A4", Offset = "0x11205A4", VA = "0x11205A4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001B7")]
		public float ActivationTime
		{
			[Token(Token = "0x600285A")]
			[Address(RVA = "0x11205AC", Offset = "0x11205AC", VA = "0x11205AC")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600285B")]
			[Address(RVA = "0x11205B4", Offset = "0x11205B4", VA = "0x11205B4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001B8")]
		public ForceFieldProjectileData ForceFieldProjectileData
		{
			[Token(Token = "0x6002869")]
			[Address(RVA = "0x1120934", Offset = "0x1120934", VA = "0x1120934", Slot = "79")]
			[CompilerGenerated]
			get
			{
				return default(ForceFieldProjectileData);
			}
			[Token(Token = "0x600286A")]
			[Address(RVA = "0x1120948", Offset = "0x1120948", VA = "0x1120948")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002857")]
		[Address(RVA = "0x11204C0", Offset = "0x11204C0", VA = "0x11204C0")]
		public ShieldTool(IMessageSender messageSender, GameMessageFactory gameMessageFactory, NetworkIdAllocator networkIdAllocator, OwnershipHelper ownershipHelper, ImpactHandlerData impactHandlerData, GameData gameData, ToolChargeComponent toolChargeComponent, ToolBowPullbackComponent toolBowPullbackComponent)
		{
		}

		[Token(Token = "0x600285C")]
		[Address(RVA = "0x111FFE8", Offset = "0x111FFE8", VA = "0x111FFE8")]
		public void Initialize(ShieldToolSettings shieldToolSettings, int attachmentId, ShieldToolReferences toolReferences, DoubleBoxColliderReference boxColliderReference, SphereColliderReference sphereColliderReference, SphereColliderReference secondaryGrabToleranceColliderReference, int toolNetworkId, ToolName toolName)
		{
		}

		[Token(Token = "0x600285D")]
		[Address(RVA = "0x11205BC", Offset = "0x11205BC", VA = "0x11205BC", Slot = "54")]
		public override void InitializeVisuals()
		{
		}

		[Token(Token = "0x600285E")]
		[Address(RVA = "0x1120710", Offset = "0x1120710", VA = "0x1120710", Slot = "59")]
		public override bool AllowedToTrigger(float timestamp)
		{
			return default(bool);
		}

		[Token(Token = "0x600285F")]
		[Address(RVA = "0x1120748", Offset = "0x1120748", VA = "0x1120748", Slot = "61")]
		public override bool CanAutoTrigger()
		{
			return default(bool);
		}

		[Token(Token = "0x6002860")]
		[Address(RVA = "0x1120750", Offset = "0x1120750", VA = "0x1120750", Slot = "60")]
		public override ImpactTypes ImpactType()
		{
			return default(ImpactTypes);
		}

		[Token(Token = "0x6002861")]
		[Address(RVA = "0x112076C", Offset = "0x112076C", VA = "0x112076C", Slot = "58")]
		public override void Trigger(Vector3 averageVelocity, GameMessageFactory messageFactory, int tetherNetworkId = 0)
		{
		}

		[Token(Token = "0x6002862")]
		[Address(RVA = "0x1120840", Offset = "0x1120840", VA = "0x1120840", Slot = "62")]
		public override float GetDamageProjectile()
		{
			return default(float);
		}

		[Token(Token = "0x6002863")]
		[Address(RVA = "0x1120890", Offset = "0x1120890", VA = "0x1120890", Slot = "63")]
		public override float GetDamagePlayer()
		{
			return default(float);
		}

		[Token(Token = "0x6002864")]
		[Address(RVA = "0x11208E0", Offset = "0x11208E0", VA = "0x11208E0", Slot = "68")]
		public override void Damage(float damage)
		{
		}

		[Token(Token = "0x6002865")]
		[Address(RVA = "0x111CE50", Offset = "0x111CE50", VA = "0x111CE50")]
		public void Activate(ForceFieldProjectileData forceFieldProjectileData)
		{
		}

		[Token(Token = "0x6002866")]
		[Address(RVA = "0x111D260", Offset = "0x111D260", VA = "0x111D260", Slot = "76")]
		public void Deactivate()
		{
		}

		[Token(Token = "0x6002867")]
		[Address(RVA = "0x111CFC8", Offset = "0x111CFC8", VA = "0x111CFC8", Slot = "77")]
		public Transform Reference()
		{
			return null;
		}

		[Token(Token = "0x6002868")]
		[Address(RVA = "0x111CDF8", Offset = "0x111CDF8", VA = "0x111CDF8", Slot = "78")]
		public ForceFieldSettings Settings()
		{
			return null;
		}

		[Token(Token = "0x600286B")]
		[Address(RVA = "0x112095C", Offset = "0x112095C", VA = "0x112095C", Slot = "66")]
		public override float CurrentHealth()
		{
			return default(float);
		}

		[Token(Token = "0x600286C")]
		[Address(RVA = "0x1120990", Offset = "0x1120990", VA = "0x1120990", Slot = "67")]
		public override float CurrentHealthWithLagCompensation()
		{
			return default(float);
		}

		[Token(Token = "0x600286D")]
		[Address(RVA = "0x11209B8", Offset = "0x11209B8", VA = "0x11209B8")]
		public bool IsActivated()
		{
			return default(bool);
		}

		[Token(Token = "0x600286E")]
		[Address(RVA = "0x11209C8", Offset = "0x11209C8", VA = "0x11209C8", Slot = "74")]
		public bool IsDeactivated()
		{
			return default(bool);
		}

		[Token(Token = "0x600286F")]
		[Address(RVA = "0x11209D8", Offset = "0x11209D8", VA = "0x11209D8", Slot = "72")]
		public Material HealthBar()
		{
			return null;
		}

		[Token(Token = "0x6002870")]
		[Address(RVA = "0x11209E0", Offset = "0x11209E0", VA = "0x11209E0", Slot = "56")]
		public override void MarkAsDestroyed(float timestamp)
		{
		}

		[Token(Token = "0x6002871")]
		[Address(RVA = "0x1120A00", Offset = "0x1120A00", VA = "0x1120A00", Slot = "69")]
		public override void Recycle()
		{
		}

		[Token(Token = "0x6002872")]
		[Address(RVA = "0x1120A30", Offset = "0x1120A30", VA = "0x1120A30", Slot = "70")]
		public override bool OutOfAmmo()
		{
			return default(bool);
		}

		[Token(Token = "0x6002873")]
		[Address(RVA = "0x112091C", Offset = "0x112091C", VA = "0x112091C")]
		private void SetCooldownValue(float percentage)
		{
		}

		[Token(Token = "0x6002874")]
		[Address(RVA = "0x1120A58", Offset = "0x1120A58", VA = "0x1120A58", Slot = "71")]
		public override void TriggerDestroy()
		{
		}
	}
	[Token(Token = "0x2000924")]
	public class SpawnPointToolReferences : ToolReferences
	{
		[Token(Token = "0x4003AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform spawnPoint;

		[Token(Token = "0x6002875")]
		[Address(RVA = "0x111FAD0", Offset = "0x111FAD0", VA = "0x111FAD0")]
		public SpawnPointToolReferences()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000925")]
	public class SpawnSetting
	{
		[Token(Token = "0x4003AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float spawnCost;

		[Token(Token = "0x4003AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Audio")]
		[SoundGroup]
		public string[] spawnSound;

		[Token(Token = "0x6002876")]
		[Address(RVA = "0x1120C18", Offset = "0x1120C18", VA = "0x1120C18")]
		public SpawnSetting()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000926")]
	[CreateAssetMenu(menuName = "Projectile/StraightProjectileSetting", fileName = "StraightProjectileSetting")]
	public class StraightProjectileSetting : ProjectileSettings
	{
		[Token(Token = "0x4003AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ProjectileVelocitySettings velocitySettings;

		[Token(Token = "0x6002877")]
		[Address(RVA = "0x1120CD0", Offset = "0x1120CD0", VA = "0x1120CD0")]
		public StraightProjectileSetting()
		{
		}
	}
	[Token(Token = "0x2000927")]
	public class StraightProjectileToolFactory : GenericToolFactory<GenericProjectileTool, ToolSetting>
	{
		[Token(Token = "0x4003ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly int attachmentId;

		[Token(Token = "0x4003ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly FireableSettings fireableSettings;

		[Token(Token = "0x4003ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly EventTriggerModule eventTriggerModule;

		[Token(Token = "0x4003ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly List<IEventTriggerEffects> eventTriggerEffectsList;

		[Token(Token = "0x6002878")]
		[Address(RVA = "0x1120CD8", Offset = "0x1120CD8", VA = "0x1120CD8")]
		public StraightProjectileToolFactory(ToolName name, ToolSetting toolSettings, int attachmentId, FireableSettings fireableSettings, ComponentPrefabPool<ToolReferences> referencePools, ComponentPrefabPool<BoxColliderReference> colliderReferencePool, ComponentPrefabPool<SphereColliderReference> sphereColliderReferencePool, CSharpObjectPool<GenericProjectileTool> toolPool, ToolInitializationUtility initializationUtility, EventTriggerModule eventTriggerModule, List<IEventTriggerEffects> eventTriggerEffectsList)
		{
		}

		[Token(Token = "0x6002879")]
		[Address(RVA = "0x1120DAC", Offset = "0x1120DAC", VA = "0x1120DAC", Slot = "7")]
		protected override void InitializeTool(int toolNetworkId, GenericProjectileTool tool, ToolReferences references, BoxColliderReference colliderReference, SphereColliderReference sphereColliderReference, SphereColliderReference secondaryGrabToleranceColliderReference)
		{
		}
	}
	[Token(Token = "0x2000928")]
	public class GenericProjectileTool : Tool, IFireable, ITransformRoots
	{
		[Token(Token = "0x4003ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private float elapsedCoolDownTime;

		[Token(Token = "0x4003ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public FireableSettings fireableSettings;

		[Token(Token = "0x4003AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private int roundsLeft;

		[Token(Token = "0x4003AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float lastRoundFiredTimestamp;

		[Token(Token = "0x4003AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private readonly CooldownColorComponent cooldownColorComponent;

		[Token(Token = "0x4003AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private EventTriggerModule eventTriggerModule;

		[Token(Token = "0x170001B9")]
		public float CoolDown
		{
			[Token(Token = "0x6002884")]
			[Address(RVA = "0x11211CC", Offset = "0x11211CC", VA = "0x11211CC", Slot = "83")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002885")]
			[Address(RVA = "0x11211D4", Offset = "0x11211D4", VA = "0x11211D4", Slot = "84")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600287A")]
		[Address(RVA = "0x1120EA4", Offset = "0x1120EA4", VA = "0x1120EA4")]
		public GenericProjectileTool(IMessageSender messageSender, GameMessageFactory gameMessageFactory, NetworkIdAllocator networkIdAllocator, OwnershipHelper ownershipHelper, ImpactHandlerData impactHandlerData, ToolChargeComponent toolChargeComponent, ToolBowPullbackComponent toolBowPullbackComponent)
		{
		}

		[Token(Token = "0x600287B")]
		[Address(RVA = "0x1120E08", Offset = "0x1120E08", VA = "0x1120E08")]
		public void Initialize(ToolReferences toolReferences, BoxColliderReference boxColliderReference, SphereColliderReference sphereColliderReference, SphereColliderReference secondaryGrabToleranceColliderReference, FireableSettings fireableSettings, ToolSetting toolSettings, int attachmentId, int toolNetworkId, ToolName toolName, EventTriggerModule eventTriggerModule, List<IEventTriggerEffects> effects)
		{
		}

		[Token(Token = "0x600287C")]
		[Address(RVA = "0x1120F78", Offset = "0x1120F78", VA = "0x1120F78", Slot = "54")]
		public override void InitializeVisuals()
		{
		}

		[Token(Token = "0x600287D")]
		[Address(RVA = "0x1121004", Offset = "0x1121004", VA = "0x1121004", Slot = "58")]
		public override void Trigger(Vector3 averageVelocity, GameMessageFactory messageFactory, int tetherNetworkId = 0)
		{
		}

		[Token(Token = "0x600287E")]
		[Address(RVA = "0x1121168", Offset = "0x1121168", VA = "0x1121168", Slot = "72")]
		public void UpdateLastRoundFired(float timestamp)
		{
		}

		[Token(Token = "0x600287F")]
		[Address(RVA = "0x1121194", Offset = "0x1121194", VA = "0x1121194", Slot = "73")]
		public bool ReadyToFire(float timestamp)
		{
			return default(bool);
		}

		[Token(Token = "0x6002880")]
		[Address(RVA = "0x11211AC", Offset = "0x11211AC", VA = "0x11211AC", Slot = "74")]
		public float ElapsedTime()
		{
			return default(float);
		}

		[Token(Token = "0x6002881")]
		[Address(RVA = "0x11211B4", Offset = "0x11211B4", VA = "0x11211B4", Slot = "79")]
		public ControllerHand HeldHand()
		{
			return default(ControllerHand);
		}

		[Token(Token = "0x6002882")]
		[Address(RVA = "0x11211BC", Offset = "0x11211BC", VA = "0x11211BC", Slot = "80")]
		public int LastPlayerHeld()
		{
			return default(int);
		}

		[Token(Token = "0x6002883")]
		[Address(RVA = "0x11211C4", Offset = "0x11211C4", VA = "0x11211C4", Slot = "82")]
		public int GetRoundsLeft()
		{
			return default(int);
		}

		[Token(Token = "0x6002886")]
		[Address(RVA = "0x11211DC", Offset = "0x11211DC", VA = "0x11211DC", Slot = "75")]
		public void ElapsedTime(float newTime)
		{
		}

		[Token(Token = "0x6002887")]
		[Address(RVA = "0x11211E4", Offset = "0x11211E4", VA = "0x11211E4", Slot = "76")]
		public FireableSettings FireableSettings()
		{
			return null;
		}

		[Token(Token = "0x6002888")]
		[Address(RVA = "0x11211EC", Offset = "0x11211EC", VA = "0x11211EC", Slot = "59")]
		public override bool AllowedToTrigger(float timestamp)
		{
			return default(bool);
		}

		[Token(Token = "0x6002889")]
		[Address(RVA = "0x1121218", Offset = "0x1121218", VA = "0x1121218", Slot = "61")]
		public override bool CanAutoTrigger()
		{
			return default(bool);
		}

		[Token(Token = "0x600288A")]
		[Address(RVA = "0x1121234", Offset = "0x1121234", VA = "0x1121234", Slot = "56")]
		public override void MarkAsDestroyed(float timestamp)
		{
		}

		[Token(Token = "0x600288B")]
		[Address(RVA = "0x1121254", Offset = "0x1121254", VA = "0x1121254", Slot = "69")]
		public override void Recycle()
		{
		}

		[Token(Token = "0x600288C")]
		[Address(RVA = "0x1121270", Offset = "0x1121270", VA = "0x1121270", Slot = "70")]
		public override bool OutOfAmmo()
		{
			return default(bool);
		}

		[Token(Token = "0x600288D")]
		[Address(RVA = "0x1121280", Offset = "0x1121280", VA = "0x1121280", Slot = "78")]
		public CooldownColorComponent GetCooldownColorComponent()
		{
			return null;
		}
	}
	[Token(Token = "0x2000929")]
	[CreateAssetMenu(fileName = "ToolSettings", menuName = "Settings/Tools/SingleStraightProjectileTool", order = 1)]
	public class StraightProjectileToolSettings : ToolSetting
	{
		[Token(Token = "0x4003AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[FormerlySerializedAs("fireableSettings")]
		[FormerlySerializedAs("firable")]
		public FireableSettings fireable;

		[Token(Token = "0x4003AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[FormerlySerializedAs("projectileSetting")]
		[Header("Projectile")]
		public StraightProjectileSetting projectile;

		[Token(Token = "0x600288E")]
		[Address(RVA = "0x111FAC0", Offset = "0x111FAC0", VA = "0x111FAC0")]
		public StraightProjectileToolSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200092A")]
	public class TetherStraightProjectileSetting
	{
		[Token(Token = "0x4003AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int numberOfProjectiles;

		[Token(Token = "0x4003AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(-10f, 10f)]
		public float minVelocity;

		[Token(Token = "0x4003AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(-10f, 10f)]
		public float maxVelocity;

		[Token(Token = "0x4003AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 360f)]
		public float heightSpread;

		[Token(Token = "0x4003AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 360f)]
		public float widthSpread;

		[Token(Token = "0x4003AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 4f)]
		public float velocityTimePower;

		[Token(Token = "0x600288F")]
		[Address(RVA = "0x1121288", Offset = "0x1121288", VA = "0x1121288")]
		public TetherStraightProjectileSetting()
		{
		}
	}
	[Token(Token = "0x200092B")]
	public class TetherProjectileSpeedToolFactory : GenericToolFactory<TetherProjectileSpeedTool, TetherProjectileSpeedToolSettings>
	{
		[Token(Token = "0x4003AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly int attachmentId;

		[Token(Token = "0x4003AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly List<IEventTriggerEffects> eventTriggerEffectsList;

		[Token(Token = "0x6002890")]
		[Address(RVA = "0x11212A0", Offset = "0x11212A0", VA = "0x11212A0")]
		public TetherProjectileSpeedToolFactory(ToolName name, TetherProjectileSpeedToolSettings toolSettings, int attachmentId, ComponentPrefabPool<ToolReferences> referencePools, ComponentPrefabPool<BoxColliderReference> colliderReferencePool, ComponentPrefabPool<SphereColliderReference> sphereColliderReferencePool, CSharpObjectPool<TetherProjectileSpeedTool> toolPool, ToolInitializationUtility initializationUtility, List<IEventTriggerEffects> eventTriggerEffectsList)
		{
		}

		[Token(Token = "0x6002891")]
		[Address(RVA = "0x1121364", Offset = "0x1121364", VA = "0x1121364", Slot = "7")]
		protected override void InitializeTool(int toolNetworkId, TetherProjectileSpeedTool tool, ToolReferences references, BoxColliderReference colliderReference, SphereColliderReference sphereColliderReference, SphereColliderReference secondaryGrabToleranceColliderReference)
		{
		}
	}
	[Token(Token = "0x200092C")]
	public class TetherProjectileSpeedTool : Tool
	{
		[Token(Token = "0x4003AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Vector3 baseStartPosition;

		[Token(Token = "0x4003AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public bool activated;

		[Token(Token = "0x4003AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public TetherProjectileSpeedToolSettings toolSettings;

		[Token(Token = "0x4003AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public TetherToolReferences tetherToolReferences;

		[Token(Token = "0x4003AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private readonly CooldownColorComponent cooldownColorComponent;

		[Token(Token = "0x6002892")]
		[Address(RVA = "0x11214D4", Offset = "0x11214D4", VA = "0x11214D4")]
		public TetherProjectileSpeedTool(IMessageSender messageSender, GameMessageFactory gameMessageFactory, NetworkIdAllocator networkIdAllocator, OwnershipHelper ownershipHelper, ImpactHandlerData impactHandlerData, ToolChargeComponent toolChargeComponent, ToolBowPullbackComponent toolBowPullbackComponent)
		{
		}

		[Token(Token = "0x6002893")]
		[Address(RVA = "0x1121450", Offset = "0x1121450", VA = "0x1121450")]
		public void Initialize(TetherToolReferences toolReferences, BoxColliderReference boxColliderReference, SphereColliderReference sphereColliderReference, SphereColliderReference secondaryGrabToleranceColliderReference, int toolNetworkId, ToolName toolName, TetherProjectileSpeedToolSettings toolSettings, int attachmentId, List<IEventTriggerEffects> effects)
		{
		}

		[Token(Token = "0x6002894")]
		[Address(RVA = "0x11215A8", Offset = "0x11215A8", VA = "0x11215A8", Slot = "54")]
		public override void InitializeVisuals()
		{
		}

		[Token(Token = "0x6002895")]
		[Address(RVA = "0x11215F0", Offset = "0x11215F0", VA = "0x11215F0")]
		public void HideToolHelpEffects()
		{
		}

		[Token(Token = "0x6002896")]
		[Address(RVA = "0x1121798", Offset = "0x1121798", VA = "0x1121798", Slot = "60")]
		public override ImpactTypes ImpactType()
		{
			return default(ImpactTypes);
		}

		[Token(Token = "0x6002897")]
		[Address(RVA = "0x11217A0", Offset = "0x11217A0", VA = "0x11217A0", Slot = "59")]
		public override bool AllowedToTrigger(float timestamp)
		{
			return default(bool);
		}

		[Token(Token = "0x6002898")]
		[Address(RVA = "0x11217B0", Offset = "0x11217B0", VA = "0x11217B0", Slot = "61")]
		public override bool CanAutoTrigger()
		{
			return default(bool);
		}

		[Token(Token = "0x6002899")]
		[Address(RVA = "0x11217B8", Offset = "0x11217B8", VA = "0x11217B8", Slot = "58")]
		public override void Trigger(Vector3 averageVelocity, GameMessageFactory messageFactory, int tetherNetworkId = 0)
		{
		}

		[Token(Token = "0x600289A")]
		[Address(RVA = "0x11217BC", Offset = "0x11217BC", VA = "0x11217BC", Slot = "56")]
		public override void MarkAsDestroyed(float timestamp)
		{
		}

		[Token(Token = "0x600289B")]
		[Address(RVA = "0x11217DC", Offset = "0x11217DC", VA = "0x11217DC", Slot = "69")]
		public override void Recycle()
		{
		}

		[Token(Token = "0x600289C")]
		[Address(RVA = "0x11217F4", Offset = "0x11217F4", VA = "0x11217F4", Slot = "70")]
		public override bool OutOfAmmo()
		{
			return default(bool);
		}

		[Token(Token = "0x600289D")]
		[Address(RVA = "0x11217FC", Offset = "0x11217FC", VA = "0x11217FC")]
		public CooldownColorComponent GetCooldownColorComponent()
		{
			return null;
		}
	}
	[Token(Token = "0x200092D")]
	[CreateAssetMenu(fileName = "TetherProjectileSpeedToolSettings", menuName = "Settings/Tools/TetherProjectileSpeedTool", order = 1)]
	public class TetherProjectileSpeedToolSettings : ToolSetting
	{
		[Token(Token = "0x4003AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Tether Unique Settings")]
		public TetherHandlerSettings tetherHandlerSettings;

		[Token(Token = "0x4003AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public TetherStraightProjectileSetting tetherStraightProjectileSettings;

		[Token(Token = "0x4003AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public HapticEffect hapticEffectSettings;

		[Token(Token = "0x4003AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public string emissionColorName;

		[Token(Token = "0x600289E")]
		[Address(RVA = "0x1121804", Offset = "0x1121804", VA = "0x1121804")]
		public TetherProjectileSpeedToolSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200092E")]
	public class TetherHandlerSettings
	{
		[Token(Token = "0x4003AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float distanceBeforeBreaking;

		[Token(Token = "0x4003AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float holdDuration;

		[Token(Token = "0x4003AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float delayBeforeStart;

		[Token(Token = "0x4003AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve tetherStretchHapticsIntervalCurve;

		[Token(Token = "0x4003AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("VFX")]
		public ParticleEffectReference breakVFX;

		[Token(Token = "0x4003AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleEffectReference dissolveVFX;

		[Token(Token = "0x4003AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 boostVFXOffsetVector;

		[Token(Token = "0x4003AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Audio")]
		public string[] startSound;

		[Token(Token = "0x4003B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string[] loopSound;

		[Token(Token = "0x4003B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string[] stopSound;

		[Token(Token = "0x4003B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string[] breakSound;

		[Token(Token = "0x4003B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string[] tetherStretchSound;

		[Token(Token = "0x4003B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string[] overlayFireSound;

		[Token(Token = "0x4003B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationCurve tetherStretchSoundIntervalCurve;

		[Token(Token = "0x600289F")]
		[Address(RVA = "0x1121854", Offset = "0x1121854", VA = "0x1121854")]
		public TetherHandlerSettings()
		{
		}
	}
	[Token(Token = "0x200092F")]
	public struct TetherObject
	{
		[Token(Token = "0x4003B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int handID;

		[Token(Token = "0x4003B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public TetherProjectileSpeedTool tether;

		[Token(Token = "0x4003B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 grabbedPosition;

		[Token(Token = "0x4003B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float grabbedTimestamp;

		[Token(Token = "0x60028A0")]
		[Address(RVA = "0x1121A8C", Offset = "0x1121A8C", VA = "0x1121A8C")]
		public TetherObject(int handID, TetherProjectileSpeedTool tether, Vector3 grabbedPosition, float grabbedTimestamp)
		{
		}
	}
	[Token(Token = "0x2000930")]
	public class TetherToolHandlerData
	{
		[Token(Token = "0x4003B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int currentlyHoldingTetherNetworkId;

		[Token(Token = "0x4003B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<TetherObject> addGrabbedTethersLocal;

		[Token(Token = "0x4003B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Queue<TetherObject> removeGrabbedTethersLocal;

		[Token(Token = "0x4003B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Queue<TetherObject> addGrabbedTethersOpponent;

		[Token(Token = "0x4003B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Queue<TetherObject> removeGrabbedTethersOpponent;

		[Token(Token = "0x60028A1")]
		[Address(RVA = "0x1121AA0", Offset = "0x1121AA0", VA = "0x1121AA0")]
		public TetherToolHandlerData()
		{
		}
	}
	[Token(Token = "0x2000931")]
	public class TetherToolHandler : ITickable
	{
		[Token(Token = "0x4003B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<TetherObject> grabbedTethersLocal;

		[Token(Token = "0x4003B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<TetherObject> grabbedTethersOpponent;

		[Token(Token = "0x4003B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float lastActivatedBlip;

		[Token(Token = "0x4003B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly TetherToolHandlerData tetherToolHandlerData;

		[Token(Token = "0x4003B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GrabData grabData;

		[Token(Token = "0x4003B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly InputData inputData;

		[Token(Token = "0x4003B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly HapticData hapticData;

		[Token(Token = "0x4003B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4003B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly MessageSender messageSender;

		[Token(Token = "0x4003B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly ParticleEffectData particleEffectData;

		[Token(Token = "0x4003B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4003B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4003B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly ToolRecycleHandler toolRecycleHandler;

		[Token(Token = "0x4003B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly GameData gameData;

		[Token(Token = "0x4003B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x4003B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly ToolSpawnAlgorithmData spawnAlgorithmData;

		[Token(Token = "0x4003B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly ImpactHandlerData impactHandlerData;

		[Token(Token = "0x60028A2")]
		[Address(RVA = "0x1121B80", Offset = "0x1121B80", VA = "0x1121B80")]
		public TetherToolHandler(TetherToolHandlerData tetherToolHandlerData, GrabData grabData, InputData inputData, HapticData hapticData, IgnisSoundTriggerData ignisSoundTriggerData, MessageSender messageSender, ParticleEffectData particleEffectData, GameMessageFactory gameMessageFactory, IRoomTimeProvider roomTimeProvider, ToolRecycleHandler toolRecycleHandler, GameData gameData, DamageRecordKeeper damageRecordKeeper, ToolSpawnAlgorithmData spawnAlgorithmData, ImpactHandlerData impactHandlerData)
		{
		}

		[Token(Token = "0x60028A3")]
		[Address(RVA = "0x1121CBC", Offset = "0x1121CBC", VA = "0x1121CBC")]
		public GameMessageInvokationResult OnSpawnPlayer(SpawnPlayerMessage spawnPlayerMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60028A4")]
		[Address(RVA = "0x1121CC4", Offset = "0x1121CC4", VA = "0x1121CC4")]
		public GameMessageInvokationResult OnDeactivateTether(DeactivateTetherMessage deactivateTetherMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x60028A5")]
		[Address(RVA = "0x1122458", Offset = "0x1122458", VA = "0x1122458", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60028A6")]
		[Address(RVA = "0x1123748", Offset = "0x1123748", VA = "0x1123748")]
		public void PreTick()
		{
		}

		[Token(Token = "0x60028A7")]
		[Address(RVA = "0x1122B50", Offset = "0x1122B50", VA = "0x1122B50")]
		private void HandleLocalTethers()
		{
		}

		[Token(Token = "0x60028A8")]
		[Address(RVA = "0x1122484", Offset = "0x1122484", VA = "0x1122484")]
		private void HandleOpponentTethers()
		{
		}

		[Token(Token = "0x60028A9")]
		[Address(RVA = "0x112374C", Offset = "0x112374C", VA = "0x112374C")]
		private void HandleTetherQueues()
		{
		}

		[Token(Token = "0x60028AA")]
		[Address(RVA = "0x1123B14", Offset = "0x1123B14", VA = "0x1123B14")]
		public void CleanUpRound()
		{
		}
	}
	[Token(Token = "0x2000932")]
	public class TetherToolReferences : ToolReferences
	{
		[Token(Token = "0x4003B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Tether Specific Settings")]
		public LineRenderer lineRenderer;

		[Token(Token = "0x4003B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform baseTether;

		[Token(Token = "0x4003B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("VFX")]
		public ParticleSystem tetherBoostParticleSystem;

		[Token(Token = "0x60028AB")]
		[Address(RVA = "0x1123E78", Offset = "0x1123E78", VA = "0x1123E78")]
		public TetherToolReferences()
		{
		}
	}
	[Token(Token = "0x2000933")]
	public class ThrowableToolFactory : GenericToolFactory<ThrowableTool, ThrowableToolSettings>
	{
		[Token(Token = "0x4003B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly int attachmentId;

		[Token(Token = "0x4003B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly List<IEventTriggerEffects> eventTriggerEffectsList;

		[Token(Token = "0x60028AC")]
		[Address(RVA = "0x1123E80", Offset = "0x1123E80", VA = "0x1123E80")]
		public ThrowableToolFactory(ToolName name, ThrowableToolSettings toolSettings, int attachmentId, ComponentPrefabPool<ToolReferences> referencePools, ComponentPrefabPool<BoxColliderReference> colliderReferencePool, ComponentPrefabPool<SphereColliderReference> sphereColliderReferencePool, CSharpObjectPool<ThrowableTool> toolPool, ToolInitializationUtility initializationUtility, List<IEventTriggerEffects> eventTriggerEffectsList)
		{
		}

		[Token(Token = "0x60028AD")]
		[Address(RVA = "0x1123F44", Offset = "0x1123F44", VA = "0x1123F44", Slot = "7")]
		protected override void InitializeTool(int toolNetworkId, ThrowableTool tool, ToolReferences references, BoxColliderReference colliderReference, SphereColliderReference sphereColliderReference, SphereColliderReference secondaryGrabToleranceColliderReference)
		{
		}
	}
	[Token(Token = "0x2000934")]
	public class ThrowableTool : Tool
	{
		[Token(Token = "0x4003B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private ThrowableToolSettings toolSettings;

		[Token(Token = "0x4003B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private readonly IgnisSoundTriggerData soundTriggerData;

		[Token(Token = "0x60028AE")]
		[Address(RVA = "0x112400C", Offset = "0x112400C", VA = "0x112400C")]
		public ThrowableTool(IMessageSender messageSender, GameMessageFactory gameMessageFactory, NetworkIdAllocator networkIdAllocator, OwnershipHelper ownershipHelper, ImpactHandlerData impactHandlerData, IgnisSoundTriggerData ignisSoundTriggerData, ToolChargeComponent toolChargeComponent, ToolBowPullbackComponent toolBowPullbackComponent)
		{
		}

		[Token(Token = "0x60028AF")]
		[Address(RVA = "0x1123FB0", Offset = "0x1123FB0", VA = "0x1123FB0")]
		public void Initialize(ToolReferences toolReferences, BoxColliderReference boxColliderReference, SphereColliderReference sphereColliderReference, SphereColliderReference secondaryGrabToleranceColliderReference, ThrowableToolSettings toolSettings, int attachmentId, int toolNetworkId, ToolName toolName, List<IEventTriggerEffects> effects)
		{
		}

		[Token(Token = "0x60028B0")]
		[Address(RVA = "0x1124068", Offset = "0x1124068", VA = "0x1124068", Slot = "54")]
		public override void InitializeVisuals()
		{
		}

		[Token(Token = "0x60028B1")]
		[Address(RVA = "0x1124164", Offset = "0x1124164", VA = "0x1124164", Slot = "52")]
		public override void OnDropped(float timestamp)
		{
		}

		[Token(Token = "0x60028B2")]
		[Address(RVA = "0x11242BC", Offset = "0x11242BC", VA = "0x11242BC", Slot = "53")]
		public override void OnGrabbed(float timestamp)
		{
		}

		[Token(Token = "0x60028B3")]
		[Address(RVA = "0x1124414", Offset = "0x1124414", VA = "0x1124414", Slot = "56")]
		public override void MarkAsDestroyed(float timestamp)
		{
		}

		[Token(Token = "0x60028B4")]
		[Address(RVA = "0x11244F0", Offset = "0x11244F0", VA = "0x11244F0", Slot = "69")]
		public override void Recycle()
		{
		}

		[Token(Token = "0x60028B5")]
		[Address(RVA = "0x11245BC", Offset = "0x11245BC", VA = "0x11245BC", Slot = "58")]
		public override void Trigger(Vector3 averageVelocity, GameMessageFactory messageFactory, int tetherNetworkId = 0)
		{
		}

		[Token(Token = "0x60028B6")]
		[Address(RVA = "0x11245C0", Offset = "0x11245C0", VA = "0x11245C0", Slot = "59")]
		public override bool AllowedToTrigger(float timestamp)
		{
			return default(bool);
		}

		[Token(Token = "0x60028B7")]
		[Address(RVA = "0x11245C8", Offset = "0x11245C8", VA = "0x11245C8", Slot = "61")]
		public override bool CanAutoTrigger()
		{
			return default(bool);
		}

		[Token(Token = "0x60028B8")]
		[Address(RVA = "0x11245D0", Offset = "0x11245D0", VA = "0x11245D0", Slot = "70")]
		public override bool OutOfAmmo()
		{
			return default(bool);
		}

		[Token(Token = "0x60028B9")]
		[Address(RVA = "0x1124084", Offset = "0x1124084", VA = "0x1124084")]
		private void ActivateParticleTrailEmissionModules(bool activate)
		{
		}
	}
	[Token(Token = "0x2000935")]
	public class ThrowableToolReferences : ToolReferences
	{
		[Token(Token = "0x4003B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Unique Throwable Tool References")]
		public ParticleSystem[] trailParticleSystems;

		[Token(Token = "0x60028BA")]
		[Address(RVA = "0x11245D8", Offset = "0x11245D8", VA = "0x11245D8")]
		public ThrowableToolReferences()
		{
		}
	}
	[Token(Token = "0x2000936")]
	[CreateAssetMenu(fileName = "ToolSettings", menuName = "Settings/Tools/ThrowableTool", order = 1)]
	public class ThrowableToolSettings : ToolSetting
	{
		[Token(Token = "0x4003B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Unique Throwable Tool Settings")]
		public string[] grabSound;

		[Token(Token = "0x4003B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public string[] throwSound;

		[Token(Token = "0x4003B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public string[] inAirSound;

		[Token(Token = "0x60028BB")]
		[Address(RVA = "0x11245E0", Offset = "0x11245E0", VA = "0x11245E0")]
		public ThrowableToolSettings()
		{
		}
	}
	[Token(Token = "0x2000937")]
	public class TimeHandler : IFixedTickable
	{
		[Token(Token = "0x4003B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly TimeHandlerData data;

		[Token(Token = "0x4003B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameData gameData;

		[Token(Token = "0x4003B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x60028BC")]
		[Address(RVA = "0x1124718", Offset = "0x1124718", VA = "0x1124718")]
		public TimeHandler(TimeHandlerData data, GameData gameData, IRoomTimeProvider roomTimeProvider)
		{
		}

		[Token(Token = "0x60028BD")]
		[Address(RVA = "0x1124754", Offset = "0x1124754", VA = "0x1124754", Slot = "4")]
		public void FixedTick()
		{
		}

		[Token(Token = "0x60028BE")]
		[Address(RVA = "0x1124C14", Offset = "0x1124C14", VA = "0x1124C14")]
		public GameMessageInvokationResult OnTimeableActivationToolTrigger(TimerActivationMessage message)
		{
			return default(GameMessageInvokationResult);
		}
	}
	[Token(Token = "0x2000938")]
	public struct TimeableData
	{
		[Token(Token = "0x4003B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ITimeable timeable;

		[Token(Token = "0x4003B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float startTime;

		[Token(Token = "0x4003B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float elpasedTime;

		[Token(Token = "0x60028BF")]
		[Address(RVA = "0x1124C08", Offset = "0x1124C08", VA = "0x1124C08")]
		public TimeableData(ITimeable timeable, float startTime, float elpasedTime)
		{
		}
	}
	[Token(Token = "0x2000939")]
	public class TimeHandlerData
	{
		[Token(Token = "0x4003B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<TimeableData> activatedTimers;

		[Token(Token = "0x60028C0")]
		[Address(RVA = "0x1124E5C", Offset = "0x1124E5C", VA = "0x1124E5C")]
		public TimeHandlerData()
		{
		}
	}
	[Token(Token = "0x200093A")]
	public interface ITimeable
	{
		[Token(Token = "0x60028C1")]
		void UpdateTimableVisuals(float elapsedTime);

		[Token(Token = "0x60028C2")]
		void TimerDone();

		[Token(Token = "0x60028C3")]
		float GetDuration();

		[Token(Token = "0x60028C4")]
		bool IsDestroyed();

		[Token(Token = "0x60028C5")]
		void OnActivation(int playerNetworkId, float timeStamp, int tetherNetworkId = 0, float chargeAmount = 0f);

		[Token(Token = "0x60028C6")]
		void TimerAborted(float timeStamp);
	}
	[Token(Token = "0x200093B")]
	public interface ITransformRoots
	{
		[Token(Token = "0x170001BA")]
		Transform PhysicsRootTransform
		{
			[Token(Token = "0x60028C7")]
			get;
		}

		[Token(Token = "0x170001BB")]
		Transform VisualRootTransform
		{
			[Token(Token = "0x60028C8")]
			get;
		}
	}
	[Token(Token = "0x200093C")]
	public enum ToolState
	{
		[Token(Token = "0x4003B33")]
		Spawned,
		[Token(Token = "0x4003B34")]
		Held,
		[Token(Token = "0x4003B35")]
		Thrown,
		[Token(Token = "0x4003B36")]
		Destroyed
	}
	[Token(Token = "0x200093D")]
	public enum ToolGroupType
	{
		[Token(Token = "0x4003B38")]
		None,
		[Token(Token = "0x4003B39")]
		Shield,
		[Token(Token = "0x4003B3A")]
		Grenade,
		[Token(Token = "0x4003B3B")]
		Barrier,
		[Token(Token = "0x4003B3C")]
		Tether,
		[Token(Token = "0x4003B3D")]
		Throwable
	}
	[Token(Token = "0x200093E")]
	public enum TriggerColliderType
	{
		[Token(Token = "0x4003B3F")]
		Player,
		[Token(Token = "0x4003B40")]
		Projectile,
		[Token(Token = "0x4003B41")]
		Tool,
		[Token(Token = "0x4003B42")]
		SecondaryGrab,
		[Token(Token = "0x4003B43")]
		SecondaryGrabTolerance
	}
	[Token(Token = "0x200093F")]
	public class ToolInitializationUtility
	{
		[Token(Token = "0x4003B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ToolCustomizationSettings toolCustomizationSettings;

		[Token(Token = "0x4003B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ProfilerMarker profilerMarker;

		[Token(Token = "0x4003B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ProfilerMarker profilerVisualMarker;

		[Token(Token = "0x4003B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static ProfilerMarker profilerColliderMarker;

		[Token(Token = "0x4003B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static ProfilerMarker profilerSecondaryGrabColliderMarker;

		[Token(Token = "0x4003B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static ProfilerMarker profilerListenerMarker;

		[Token(Token = "0x60028C9")]
		[Address(RVA = "0x1124EDC", Offset = "0x1124EDC", VA = "0x1124EDC")]
		public ToolInitializationUtility(ToolCustomizationSettings toolCustomizationSettings)
		{
		}

		[Token(Token = "0x60028CA")]
		[Address(RVA = "0x11200C0", Offset = "0x11200C0", VA = "0x11200C0")]
		public void InitializeTool(BoxColliderReference colliderReference, SphereColliderReference secondaryGrabColliderReference, SphereColliderReference secondaryGrabToleranceColliderReference, ToolReferences references, Vector3 position, Quaternion rotation, Tool tool, ToolSetting toolSettings, int toolSkinId)
		{
		}

		[Token(Token = "0x60028CB")]
		[Address(RVA = "0x1124F20", Offset = "0x1124F20", VA = "0x1124F20")]
		private void AssignToolSkin(ToolReferences toolReferences, ToolName toolName, int toolSkinId)
		{
		}
	}
	[Token(Token = "0x2000940")]
	public interface IIdentification
	{
		[Token(Token = "0x170001BC")]
		ToolName ToolSource
		{
			[Token(Token = "0x60028CD")]
			get;
		}
	}
	[Token(Token = "0x2000941")]
	public interface IAffectsHUD
	{
		[Token(Token = "0x170001BD")]
		VisorParticleEffectType VisorParticleEffectType
		{
			[Token(Token = "0x60028CE")]
			get;
			[Token(Token = "0x60028CF")]
			set;
		}
	}
	[Token(Token = "0x2000942")]
	public interface IThreat : IImpactable, ITransformRoots, IIdentification, IHealth, IAffectsHUD
	{
		[Token(Token = "0x170001BE")]
		int HitMask
		{
			[Token(Token = "0x60028D0")]
			get;
			[Token(Token = "0x60028D1")]
			set;
		}
	}
	[Token(Token = "0x2000943")]
	public enum ColliderType
	{
		[Token(Token = "0x4003B4B")]
		Sphere,
		[Token(Token = "0x4003B4C")]
		Box
	}
	[Token(Token = "0x2000944")]
	public abstract class Tool : IThreat, IImpactable, ITransformRoots, IIdentification, IHealth, IAffectsHUD, IPooledObject, ICharge, IBowPullback, ISource
	{
		[Token(Token = "0x4003B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ToolState toolState;

		[Token(Token = "0x4003B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ToolReferences toolReferences;

		[Token(Token = "0x4003B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected int toolNetworkId;

		[Token(Token = "0x4003B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected IMessageSender messageSender;

		[Token(Token = "0x4003B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly GameMessageFactory gameMessageFactory;

		[Token(Token = "0x4003B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected GameMessageFactory gameMessageFactoryForNonePlayerIdSpecificMessages;

		[Token(Token = "0x4003B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected NetworkIdAllocator networkIdAllocator;

		[Token(Token = "0x4003B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ToolSet toolSet;

		[Token(Token = "0x4003B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected OwnershipHelper ownershipHelper;

		[Token(Token = "0x4003B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected ToolSetting toolSetting;

		[Token(Token = "0x4003B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float destroyedAtTimestamp;

		[Token(Token = "0x4003B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		protected float currentHealth;

		[Token(Token = "0x4003B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public ControllerHand heldHand;

		[Token(Token = "0x4003B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int lastPlayerHeld;

		[Token(Token = "0x4003B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public EventHandler<ColliderListenerEventArgs> onTriggerEnter;

		[Token(Token = "0x4003B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public EventHandler<ColliderListenerEventArgs> onSecondaryGrabTriggerEnter;

		[Token(Token = "0x4003B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public EventHandler<ColliderListenerEventArgs> onSecondaryGrabToleranceTriggerExit;

		[Token(Token = "0x4003B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float thrownSpeed;

		[Token(Token = "0x4003B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private BotUtils.ThreatRay ray;

		[Token(Token = "0x4003B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Transform colliderTransform;

		[Token(Token = "0x4003B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected ImpactHandlerData impactHandlerData;

		[Token(Token = "0x4003B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int attachmentId;

		[Token(Token = "0x170001BF")]
		public BoxColliderReference BoxColliderReference
		{
			[Token(Token = "0x60028D2")]
			[Address(RVA = "0x11255BC", Offset = "0x11255BC", VA = "0x11255BC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60028D3")]
			[Address(RVA = "0x11255C4", Offset = "0x11255C4", VA = "0x11255C4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C0")]
		public SphereColliderReference SecondaryGrabColliderReference
		{
			[Token(Token = "0x60028D4")]
			[Address(RVA = "0x11255CC", Offset = "0x11255CC", VA = "0x11255CC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60028D5")]
			[Address(RVA = "0x11255D4", Offset = "0x11255D4", VA = "0x11255D4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C1")]
		public SphereColliderReference SecondaryGrabToleranceColliderReference
		{
			[Token(Token = "0x60028D6")]
			[Address(RVA = "0x11255DC", Offset = "0x11255DC", VA = "0x11255DC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60028D7")]
			[Address(RVA = "0x11255E4", Offset = "0x11255E4", VA = "0x11255E4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C2")]
		public HashSet<int> CollidingIds
		{
			[Token(Token = "0x60028D8")]
			[Address(RVA = "0x11255EC", Offset = "0x11255EC", VA = "0x11255EC", Slot = "18")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C3")]
		public ToolChargeComponent ToolChargeComponent
		{
			[Token(Token = "0x60028D9")]
			[Address(RVA = "0x11255F4", Offset = "0x11255F4", VA = "0x11255F4", Slot = "44")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60028DA")]
			[Address(RVA = "0x11255FC", Offset = "0x11255FC", VA = "0x11255FC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001C4")]
		public ToolBowPullbackComponent ToolBowPullbackComponent
		{
			[Token(Token = "0x60028DB")]
			[Address(RVA = "0x1125604", Offset = "0x1125604", VA = "0x1125604", Slot = "45")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60028DC")]
			[Address(RVA = "0x112560C", Offset = "0x112560C", VA = "0x112560C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001C5")]
		public float ActiveDotDamage
		{
			[Token(Token = "0x60028DD")]
			[Address(RVA = "0x1125614", Offset = "0x1125614", VA = "0x1125614", Slot = "33")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60028DE")]
			[Address(RVA = "0x112561C", Offset = "0x112561C", VA = "0x112561C", Slot = "34")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001C6")]
		public float ActiveDotDamageLagCompensation
		{
			[Token(Token = "0x60028DF")]
			[Address(RVA = "0x1125624", Offset = "0x1125624", VA = "0x1125624", Slot = "35")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60028E0")]
			[Address(RVA = "0x112562C", Offset = "0x112562C", VA = "0x112562C", Slot = "36")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001C7")]
		public float LastTriggeredEffectTimeStamp
		{
			[Token(Token = "0x60028E1")]
			[Address(RVA = "0x1125634", Offset = "0x1125634", VA = "0x1125634", Slot = "19")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60028E2")]
			[Address(RVA = "0x112563C", Offset = "0x112563C", VA = "0x112563C", Slot = "20")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001C8")]
		public bool CanCollideWithHands
		{
			[Token(Token = "0x60028E3")]
			[Address(RVA = "0x1125644", Offset = "0x1125644", VA = "0x1125644", Slot = "21")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60028E4")]
			[Address(RVA = "0x112564C", Offset = "0x112564C", VA = "0x112564C", Slot = "22")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001C9")]
		public List<Transform> PoolReferences
		{
			[Token(Token = "0x60028E5")]
			[Address(RVA = "0x1125658", Offset = "0x1125658", VA = "0x1125658", Slot = "41")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CA")]
		public bool IsRemovedFromPool
		{
			[Token(Token = "0x60028E6")]
			[Address(RVA = "0x1125660", Offset = "0x1125660", VA = "0x1125660", Slot = "42")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60028E7")]
			[Address(RVA = "0x1125668", Offset = "0x1125668", VA = "0x1125668", Slot = "43")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001CB")]
		public Transform PhysicsRootTransform
		{
			[Token(Token = "0x60028E8")]
			[Address(RVA = "0x1125674", Offset = "0x1125674", VA = "0x1125674", Slot = "25")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60028E9")]
			[Address(RVA = "0x112567C", Offset = "0x112567C", VA = "0x112567C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001CC")]
		public Transform VisualRootTransform
		{
			[Token(Token = "0x60028EA")]
			[Address(RVA = "0x1125684", Offset = "0x1125684", VA = "0x1125684", Slot = "26")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60028EB")]
			[Address(RVA = "0x112568C", Offset = "0x112568C", VA = "0x112568C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001CD")]
		public Transform SecondaryGrabRootTransform
		{
			[Token(Token = "0x60028EC")]
			[Address(RVA = "0x1125694", Offset = "0x1125694", VA = "0x1125694")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60028ED")]
			[Address(RVA = "0x112569C", Offset = "0x112569C", VA = "0x112569C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001CE")]
		public Transform SecondaryGrabToleranceRootTransform
		{
			[Token(Token = "0x60028EE")]
			[Address(RVA = "0x11256A4", Offset = "0x11256A4", VA = "0x11256A4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60028EF")]
			[Address(RVA = "0x11256AC", Offset = "0x11256AC", VA = "0x11256AC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001CF")]
		public ToolName ToolSource
		{
			[Token(Token = "0x60028F0")]
			[Address(RVA = "0x11256B4", Offset = "0x11256B4", VA = "0x11256B4", Slot = "48")]
			[CompilerGenerated]
			get
			{
				return default(ToolName);
			}
			[Token(Token = "0x60028F1")]
			[Address(RVA = "0x11256BC", Offset = "0x11256BC", VA = "0x11256BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001D0")]
		public int PlayerInstigator
		{
			[Token(Token = "0x60028F2")]
			[Address(RVA = "0x11256C4", Offset = "0x11256C4", VA = "0x11256C4", Slot = "49")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001D1")]
		public List<IEventTriggerEffects> Effects
		{
			[Token(Token = "0x60028F3")]
			[Address(RVA = "0x11256CC", Offset = "0x11256CC", VA = "0x11256CC", Slot = "51")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60028F4")]
			[Address(RVA = "0x11256D4", Offset = "0x11256D4", VA = "0x11256D4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001D2")]
		public int HitMask
		{
			[Token(Token = "0x60028F7")]
			[Address(RVA = "0x11256DC", Offset = "0x11256DC", VA = "0x11256DC", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60028F8")]
			[Address(RVA = "0x11256E4", Offset = "0x11256E4", VA = "0x11256E4", Slot = "5")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001D3")]
		public bool IsTool
		{
			[Token(Token = "0x60028F9")]
			[Address(RVA = "0x11256EC", Offset = "0x11256EC", VA = "0x11256EC", Slot = "46")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D4")]
		public ProjectileSettings ProjectileSettings
		{
			[Token(Token = "0x60028FA")]
			[Address(RVA = "0x11256F4", Offset = "0x11256F4", VA = "0x11256F4", Slot = "47")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60028FB")]
			[Address(RVA = "0x11256FC", Offset = "0x11256FC", VA = "0x11256FC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001D5")]
		public bool UseCollidingObjectAsCenterOfHitForImpact
		{
			[Token(Token = "0x60028FC")]
			[Address(RVA = "0x1125704", Offset = "0x1125704", VA = "0x1125704", Slot = "23")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60028FD")]
			[Address(RVA = "0x112570C", Offset = "0x112570C", VA = "0x112570C", Slot = "24")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001D6")]
		public bool UseProjectileHitMask
		{
			[Token(Token = "0x60028FE")]
			[Address(RVA = "0x1125718", Offset = "0x1125718", VA = "0x1125718")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D7")]
		public ColliderType ColliderType
		{
			[Token(Token = "0x60028FF")]
			[Address(RVA = "0x1125720", Offset = "0x1125720", VA = "0x1125720")]
			[CompilerGenerated]
			get
			{
				return default(ColliderType);
			}
		}

		[Token(Token = "0x170001D8")]
		public bool IsChargeTool
		{
			[Token(Token = "0x6002900")]
			[Address(RVA = "0x1125728", Offset = "0x1125728", VA = "0x1125728")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002901")]
			[Address(RVA = "0x1125730", Offset = "0x1125730", VA = "0x1125730")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001D9")]
		public bool IsBowPullbackTool
		{
			[Token(Token = "0x6002902")]
			[Address(RVA = "0x112573C", Offset = "0x112573C", VA = "0x112573C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002903")]
			[Address(RVA = "0x1125744", Offset = "0x1125744", VA = "0x1125744")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001DA")]
		public bool AutomaticallyFireWhenCharged
		{
			[Token(Token = "0x6002904")]
			[Address(RVA = "0x1125750", Offset = "0x1125750", VA = "0x1125750")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002905")]
			[Address(RVA = "0x1125758", Offset = "0x1125758", VA = "0x1125758")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001DB")]
		public ToolName ToolName
		{
			[Token(Token = "0x6002906")]
			[Address(RVA = "0x1124F04", Offset = "0x1124F04", VA = "0x1124F04")]
			get
			{
				return default(ToolName);
			}
		}

		[Token(Token = "0x170001DC")]
		public ToolSet ToolSet
		{
			[Token(Token = "0x6002907")]
			[Address(RVA = "0x1125764", Offset = "0x1125764", VA = "0x1125764")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DD")]
		public ToolSetting ToolSettings
		{
			[Token(Token = "0x6002908")]
			[Address(RVA = "0x112576C", Offset = "0x112576C", VA = "0x112576C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DE")]
		public int ToolAttachmentId
		{
			[Token(Token = "0x6002909")]
			[Address(RVA = "0x1125774", Offset = "0x1125774", VA = "0x1125774")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001DF")]
		public ToolGroupType ToolGroup
		{
			[Token(Token = "0x600290A")]
			[Address(RVA = "0x112577C", Offset = "0x112577C", VA = "0x112577C")]
			get
			{
				return default(ToolGroupType);
			}
		}

		[Token(Token = "0x170001E0")]
		public bool IsTwoHanded
		{
			[Token(Token = "0x600290B")]
			[Address(RVA = "0x1125798", Offset = "0x1125798", VA = "0x1125798")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001E1")]
		public VisorParticleEffectType VisorParticleEffectType
		{
			[Token(Token = "0x600290C")]
			[Address(RVA = "0x11257B4", Offset = "0x11257B4", VA = "0x11257B4", Slot = "37")]
			[CompilerGenerated]
			get
			{
				return default(VisorParticleEffectType);
			}
			[Token(Token = "0x600290D")]
			[Address(RVA = "0x11257BC", Offset = "0x11257BC", VA = "0x11257BC", Slot = "38")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60028F5")]
		[Address(RVA = "0x111BB24", Offset = "0x111BB24", VA = "0x111BB24")]
		public Tool(int numberOfPoolReferences, IMessageSender messageSender, GameMessageFactory gameMessageFactory, NetworkIdAllocator networkIdAllocator, OwnershipHelper ownershipHelper, ImpactHandlerData impactHandlerData, ToolChargeComponent toolChargeComponent, ToolBowPullbackComponent toolBowPullbackComponent, ColliderType colliderType = ColliderType.Box, bool useProjectileHitMask = false)
		{
		}

		[Token(Token = "0x60028F6")]
		[Address(RVA = "0x111BDB4", Offset = "0x111BDB4", VA = "0x111BDB4")]
		protected void Initialize(ToolState toolState, ToolReferences toolReferences, BoxColliderReference boxColliderReference, SphereColliderReference sphereColliderReference, SphereColliderReference sphereColliderToleranceReference, int toolNetworkId, ToolName toolName, ToolSetting toolSetting, int attachmentId, List<IEventTriggerEffects> effects)
		{
		}

		[Token(Token = "0x600290E")]
		[Address(RVA = "0x11257C4", Offset = "0x11257C4", VA = "0x11257C4")]
		public string[] OutOfAmmoSound()
		{
			return null;
		}

		[Token(Token = "0x600290F")]
		[Address(RVA = "0x11257E0", Offset = "0x11257E0", VA = "0x11257E0", Slot = "52")]
		public virtual void OnDropped(float timestamp)
		{
		}

		[Token(Token = "0x6002910")]
		[Address(RVA = "0x11257E4", Offset = "0x11257E4", VA = "0x11257E4", Slot = "53")]
		public virtual void OnGrabbed(float timestamp)
		{
		}

		[Token(Token = "0x6002911")]
		[Address(RVA = "0x111BF54", Offset = "0x111BF54", VA = "0x111BF54", Slot = "54")]
		public virtual void InitializeVisuals()
		{
		}

		[Token(Token = "0x6002912")]
		[Address(RVA = "0x11257E8", Offset = "0x11257E8", VA = "0x11257E8", Slot = "55")]
		public ToolState GetToolState()
		{
			return default(ToolState);
		}

		[Token(Token = "0x6002913")]
		[Address(RVA = "0x11257F0", Offset = "0x11257F0", VA = "0x11257F0")]
		public void SetToolState(ToolState toolState)
		{
		}

		[Token(Token = "0x6002914")]
		[Address(RVA = "0x111C668", Offset = "0x111C668", VA = "0x111C668", Slot = "56")]
		public virtual void MarkAsDestroyed(float timestamp)
		{
		}

		[Token(Token = "0x6002915")]
		[Address(RVA = "0x1125874", Offset = "0x1125874", VA = "0x1125874")]
		public float GetDestroyedAt()
		{
			return default(float);
		}

		[Token(Token = "0x6002916")]
		[Address(RVA = "0x112587C", Offset = "0x112587C", VA = "0x112587C", Slot = "57")]
		public ToolReferences GetToolReference()
		{
			return null;
		}

		[Token(Token = "0x6002917")]
		public abstract void Trigger(Vector3 averageVelocity, GameMessageFactory messageFactory, int tetherNetworkId = 0);

		[Token(Token = "0x6002918")]
		public abstract bool AllowedToTrigger(float timestamp);

		[Token(Token = "0x6002919")]
		[Address(RVA = "0x1125884", Offset = "0x1125884", VA = "0x1125884", Slot = "50")]
		public int NetworkId()
		{
			return default(int);
		}

		[Token(Token = "0x600291A")]
		[Address(RVA = "0x1120764", Offset = "0x1120764", VA = "0x1120764", Slot = "60")]
		public virtual ImpactTypes ImpactType()
		{
			return default(ImpactTypes);
		}

		[Token(Token = "0x600291B")]
		[Address(RVA = "0x112588C", Offset = "0x112588C", VA = "0x112588C", Slot = "8")]
		public PlayerImpactTypes PlayerImpactType()
		{
			return default(PlayerImpactTypes);
		}

		[Token(Token = "0x600291C")]
		public abstract bool CanAutoTrigger();

		[Token(Token = "0x600291D")]
		[Address(RVA = "0x1125894", Offset = "0x1125894", VA = "0x1125894")]
		private void OnTriggerEnter(object sender, ColliderListenerEventArgs eventArgs)
		{
		}

		[Token(Token = "0x600291E")]
		[Address(RVA = "0x112589C", Offset = "0x112589C", VA = "0x112589C")]
		private void OnImpact(ColliderListenerEventArgs eventArgs)
		{
		}

		[Token(Token = "0x600291F")]
		[Address(RVA = "0x1120874", Offset = "0x1120874", VA = "0x1120874", Slot = "62")]
		public virtual float GetDamageProjectile()
		{
			return default(float);
		}

		[Token(Token = "0x6002920")]
		[Address(RVA = "0x11208C4", Offset = "0x11208C4", VA = "0x11208C4", Slot = "63")]
		public virtual float GetDamagePlayer()
		{
			return default(float);
		}

		[Token(Token = "0x6002921")]
		[Address(RVA = "0x1125928", Offset = "0x1125928", VA = "0x1125928", Slot = "64")]
		public virtual float GetProjectileRadius()
		{
			return default(float);
		}

		[Token(Token = "0x6002922")]
		[Address(RVA = "0x1125954", Offset = "0x1125954", VA = "0x1125954", Slot = "65")]
		public virtual float GetTotalPredictedPlayerDamage()
		{
			return default(float);
		}

		[Token(Token = "0x6002923")]
		[Address(RVA = "0x1125970", Offset = "0x1125970", VA = "0x1125970", Slot = "13")]
		public float GetSpeed()
		{
			return default(float);
		}

		[Token(Token = "0x6002924")]
		[Address(RVA = "0x1125978", Offset = "0x1125978", VA = "0x1125978", Slot = "14")]
		public bool IsHeld()
		{
			return default(bool);
		}

		[Token(Token = "0x6002925")]
		[Address(RVA = "0x1125988", Offset = "0x1125988", VA = "0x1125988", Slot = "17")]
		public ImpactSettings ImpactSettings()
		{
			return null;
		}

		[Token(Token = "0x6002926")]
		[Address(RVA = "0x1111ECC", Offset = "0x1111ECC", VA = "0x1111ECC", Slot = "39")]
		public bool IsDead()
		{
			return default(bool);
		}

		[Token(Token = "0x6002927")]
		[Address(RVA = "0x1111EBC", Offset = "0x1111EBC", VA = "0x1111EBC", Slot = "40")]
		public bool IsDestroyed()
		{
			return default(bool);
		}

		[Token(Token = "0x6002928")]
		[Address(RVA = "0x1120980", Offset = "0x1120980", VA = "0x1120980", Slot = "66")]
		public virtual float CurrentHealth()
		{
			return default(float);
		}

		[Token(Token = "0x6002929")]
		[Address(RVA = "0x11259A4", Offset = "0x11259A4", VA = "0x11259A4", Slot = "67")]
		public virtual float CurrentHealthWithLagCompensation()
		{
			return default(float);
		}

		[Token(Token = "0x600292A")]
		[Address(RVA = "0x112090C", Offset = "0x112090C", VA = "0x112090C", Slot = "68")]
		public virtual void Damage(float damage)
		{
		}

		[Token(Token = "0x600292B")]
		[Address(RVA = "0x11257F8", Offset = "0x11257F8", VA = "0x11257F8")]
		public void ClearEventhandlers()
		{
		}

		[Token(Token = "0x600292C")]
		[Address(RVA = "0x111C6B4", Offset = "0x111C6B4", VA = "0x111C6B4", Slot = "69")]
		public virtual void Recycle()
		{
		}

		[Token(Token = "0x600292D")]
		public abstract bool OutOfAmmo();

		[Token(Token = "0x600292E")]
		[Address(RVA = "0x1120674", Offset = "0x1120674", VA = "0x1120674")]
		protected void SetAmmoFillAmount(int current, int max)
		{
		}

		[Token(Token = "0x600292F")]
		[Address(RVA = "0x1120B34", Offset = "0x1120B34", VA = "0x1120B34", Slot = "71")]
		public virtual void TriggerDestroy()
		{
		}

		[Token(Token = "0x6002930")]
		[Address(RVA = "0x11259B4", Offset = "0x11259B4", VA = "0x11259B4")]
		public bool Equals(Tool t)
		{
			return default(bool);
		}

		[Token(Token = "0x6002931")]
		[Address(RVA = "0x11259D8", Offset = "0x11259D8", VA = "0x11259D8", Slot = "15")]
		public void SetThreatRay(BotUtils.ThreatRay ray)
		{
		}

		[Token(Token = "0x6002932")]
		[Address(RVA = "0x11259EC", Offset = "0x11259EC", VA = "0x11259EC", Slot = "16")]
		public BotUtils.ThreatRay GetThreatRay()
		{
			return default(BotUtils.ThreatRay);
		}
	}
	[Token(Token = "0x2000945")]
	public class ToolAttachmentsData
	{
		[Token(Token = "0x2000946")]
		public class ClaimableToolSet : ToolSet
		{
			[Token(Token = "0x4003B85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool claimed;

			[Token(Token = "0x6002939")]
			[Address(RVA = "0x113E9D4", Offset = "0x113E9D4", VA = "0x113E9D4")]
			public ClaimableToolSet(ToolName toolName, ToolConfigurationType toolAttachment)
			{
			}

			[Token(Token = "0x600293A")]
			[Address(RVA = "0x113E9DC", Offset = "0x113E9DC", VA = "0x113E9DC")]
			public ClaimableToolSet(ToolName toolName, ToolConfigurationType toolAttachment, bool claimed)
			{
			}
		}

		[Token(Token = "0x4003B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Queue<ToolSet> setAttachmentActive;

		[Token(Token = "0x4003B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Queue<ToolSet> claimAttachmentRequests;

		[Token(Token = "0x4003B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly List<ToolSet> allEquippedAttachments;

		[Token(Token = "0x4003B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly List<ClaimableToolSet> allOwnedAttachments;

		[Token(Token = "0x4003B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float latestToolAttachmentUpdateTime;

		[Token(Token = "0x4003B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public ToolName latestToolAttachmentUpdateTool;

		[Token(Token = "0x6002933")]
		[Address(RVA = "0x113E3A0", Offset = "0x113E3A0", VA = "0x113E3A0")]
		public ToolSet GetToolSetByToolName(ToolName toolName)
		{
			return null;
		}

		[Token(Token = "0x6002934")]
		[Address(RVA = "0x113E498", Offset = "0x113E498", VA = "0x113E498")]
		public ToolConfigurationType GetEquippedAttachment(ToolName toolName)
		{
			return default(ToolConfigurationType);
		}

		[Token(Token = "0x6002935")]
		[Address(RVA = "0x113E55C", Offset = "0x113E55C", VA = "0x113E55C")]
		public bool IsAttachmmentClaimed(ToolName toolName, ToolConfigurationType toolAttachment)
		{
			return default(bool);
		}

		[Token(Token = "0x6002936")]
		[Address(RVA = "0x113E650", Offset = "0x113E650", VA = "0x113E650")]
		public bool IsAttachmentOwned(ToolName toolName, ToolConfigurationType toolAttachment)
		{
			return default(bool);
		}

		[Token(Token = "0x6002937")]
		[Address(RVA = "0x113E724", Offset = "0x113E724", VA = "0x113E724")]
		public void SetAttachmentOwned(ToolName toolName, ToolConfigurationType toolAttachment)
		{
		}

		[Token(Token = "0x6002938")]
		[Address(RVA = "0x113E8AC", Offset = "0x113E8AC", VA = "0x113E8AC")]
		public ToolAttachmentsData()
		{
		}
	}
	[Token(Token = "0x2000947")]
	public class ToolAttachmentsHandler : ITickable
	{
		[Token(Token = "0x4003B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ToolAttachmentsData toolAttachmentsData;

		[Token(Token = "0x4003B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameData gameData;

		[Token(Token = "0x4003B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ToolViewData toolViewData;

		[Token(Token = "0x4003B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly FactoryData factoryData;

		[Token(Token = "0x4003B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ITimeProvider timeProvider;

		[Token(Token = "0x600293B")]
		[Address(RVA = "0x113EA04", Offset = "0x113EA04", VA = "0x113EA04")]
		public ToolAttachmentsHandler(ToolAttachmentsData toolAttachmentsData, GameData gameData, ToolViewData toolViewData, FactoryData factoryData, ITimeProvider timeProvider)
		{
		}

		[Token(Token = "0x600293C")]
		[Address(RVA = "0x113EA54", Offset = "0x113EA54", VA = "0x113EA54")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x600293D")]
		[Address(RVA = "0x113EA58", Offset = "0x113EA58", VA = "0x113EA58")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600293E")]
		[Address(RVA = "0x113EA5C", Offset = "0x113EA5C", VA = "0x113EA5C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x600293F")]
		[Address(RVA = "0x113EA60", Offset = "0x113EA60", VA = "0x113EA60")]
		private void HandleAttachmentSwitch()
		{
		}

		[Token(Token = "0x6002940")]
		[Address(RVA = "0x113EAEC", Offset = "0x113EAEC", VA = "0x113EAEC")]
		private void ChangeAttachmentForTool(ToolName toolName, ToolConfigurationType attachmentIndex)
		{
		}

		[Token(Token = "0x6002941")]
		[Address(RVA = "0x113EEE0", Offset = "0x113EEE0", VA = "0x113EEE0")]
		private void GrantOwnershipOfAttachmentForTool(ToolName toolName, ToolConfigurationType attachment)
		{
		}

		[Token(Token = "0x6002942")]
		[Address(RVA = "0x113EFD8", Offset = "0x113EFD8", VA = "0x113EFD8")]
		private void RevokeOwnershipOfAttachmentForTool(ToolName toolName, ToolConfigurationType attachment)
		{
		}

		[Token(Token = "0x6002943")]
		[Address(RVA = "0x113ED4C", Offset = "0x113ED4C", VA = "0x113ED4C")]
		private void UpdatedEquippedAttachments(ToolName toolName, ToolConfigurationType attachmentId)
		{
		}
	}
	[Token(Token = "0x2000949")]
	public enum ToolConfigurationType
	{
		[Token(Token = "0x4003B8E")]
		Default,
		[Token(Token = "0x4003B8F")]
		Attachment_1,
		[Token(Token = "0x4003B90")]
		Attachment_2,
		[Token(Token = "0x4003B91")]
		Attachment_3
	}
	[Serializable]
	[Token(Token = "0x200094A")]
	public struct ProejctilePoolDefention
	{
		[Token(Token = "0x4003B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ProjectileReference reference;

		[Token(Token = "0x4003B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int capacity;
	}
	[Serializable]
	[Token(Token = "0x200094B")]
	public class ToolSettingsData
	{
		[Token(Token = "0x4003B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public string name;

		[Token(Token = "0x4003B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ToolName toolName;

		[Token(Token = "0x4003B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ToolAttachment[] toolAttachments;

		[Token(Token = "0x6002946")]
		[Address(RVA = "0x113F104", Offset = "0x113F104", VA = "0x113F104")]
		public ToolSettingsData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200094C")]
	public struct ToolAttachment
	{
		[Token(Token = "0x4003B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[HideInInspector]
		public string name;

		[Token(Token = "0x4003B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ToolConfigurationType toolConfigurationType;

		[Token(Token = "0x4003B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ToolSetting toolSettings;

		[Token(Token = "0x4003B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ownedByDefault;

		[Token(Token = "0x4003B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<UnlockMissionSettings> unlockMasteryMissions;
	}
	[Serializable]
	[Token(Token = "0x200094D")]
	public class UnlockMissionSettings
	{
		[Token(Token = "0x4003B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MissionName missionId;

		[Token(Token = "0x4003B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int amountToComplete;

		[Token(Token = "0x4003B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> qualifier;

		[Token(Token = "0x6002947")]
		[Address(RVA = "0x113F15C", Offset = "0x113F15C", VA = "0x113F15C")]
		public UnlockMissionSettings()
		{
		}
	}
	[Token(Token = "0x200094E")]
	[CreateAssetMenu(menuName = "Settings/ToolDefinitionSettings")]
	public class ToolDefinitionSettings : ScriptableObject
	{
		[Token(Token = "0x4003B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ToolSettingsData[] toolDefinitions;

		[Token(Token = "0x4003BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ToolSettingsData[] toolDebugDefinitions;

		[Token(Token = "0x4003BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ProejctilePoolDefention[] projectilesToPool;

		[Token(Token = "0x4003BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BaseProjectileSettingsSet[] baseProjectileSettingsSets;

		[Token(Token = "0x4003BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SphereColliderReference sphereColliderReference;

		[Token(Token = "0x4003BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BoxColliderReference boxColliderReference;

		[Token(Token = "0x4003BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public DoubleBoxColliderReference doubleBoxColliderReference;

		[Token(Token = "0x4003BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ToolIconSettings toolIconSettings;

		[Token(Token = "0x4003BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BarrierGroupSlotReference playerBarrierSlots;

		[Token(Token = "0x4003BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public BarrierGroupSlotReference aiBarrierSlots;

		[Token(Token = "0x6002948")]
		[Address(RVA = "0x113F164", Offset = "0x113F164", VA = "0x113F164")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x6002949")]
		[Address(RVA = "0x113FCB0", Offset = "0x113FCB0", VA = "0x113FCB0")]
		public ToolDefinitionSettings()
		{
		}
	}
	[Token(Token = "0x2000950")]
	public enum ToolName
	{
		[Token(Token = "0x4003BB1")]
		None = 0,
		[Token(Token = "0x4003BB2")]
		Smg = 1,
		[Token(Token = "0x4003BB3")]
		Sniper = 2,
		[Token(Token = "0x4003BB4")]
		Shotgun = 3,
		[Token(Token = "0x4003BB5")]
		Laser = 4,
		[Token(Token = "0x4003BB6")]
		Shield = 5,
		[Token(Token = "0x4003BB7")]
		Grenade = 6,
		[Token(Token = "0x4003BB8")]
		BigOrbus = 7,
		[Token(Token = "0x4003BB9")]
		Barrier = 8,
		[Token(Token = "0x4003BBA")]
		Testing = 9,
		[Token(Token = "0x4003BBB")]
		FastLaser = 10,
		[Token(Token = "0x4003BBC")]
		BulletLauncherOrbus = 11,
		[Token(Token = "0x4003BBD")]
		CurvedShotgun = 14,
		[Token(Token = "0x4003BBE")]
		CurvedSniper = 15,
		[Token(Token = "0x4003BBF")]
		LaserGrenade = 16,
		[Token(Token = "0x4003BC0")]
		AoeGrenade = 19,
		[Token(Token = "0x4003BC1")]
		AoeBigOrb = 20,
		[Token(Token = "0x4003BC2")]
		AoeGrenadeTwo = 21,
		[Token(Token = "0x4003BC3")]
		Handgun = 22,
		[Token(Token = "0x4003BC4")]
		SpiritBomb = 23,
		[Token(Token = "0x4003BC5")]
		FastShield = 24,
		[Token(Token = "0x4003BC6")]
		CurvedHandgun = 25,
		[Token(Token = "0x4003BC7")]
		OrbusGrenade = 26,
		[Token(Token = "0x4003BC8")]
		Vandal = 27,
		[Token(Token = "0x4003BC9")]
		ThrowableBall = 28,
		[Token(Token = "0x4003BCA")]
		LobberLauncher = 29,
		[Token(Token = "0x4003BCB")]
		TetherProjectileSpeed = 30,
		[Token(Token = "0x4003BCC")]
		NovaHelix = 31,
		[Token(Token = "0x4003BCD")]
		Vector = 32,
		[Token(Token = "0x4003BCE")]
		Swarm = 33,
		[Token(Token = "0x4003BCF")]
		TuskinRaider = 34,
		[Token(Token = "0x4003BD0")]
		CrystalMask = 35,
		[Token(Token = "0x4003BD1")]
		Tauron = 36,
		[Token(Token = "0x4003BD2")]
		Spyke = 37,
		[Token(Token = "0x4003BD3")]
		Deadringer = 38,
		[Token(Token = "0x4003BD4")]
		Tundra = 39,
		[Token(Token = "0x4003BD5")]
		QuickdrawNova = 40,
		[Token(Token = "0x4003BD6")]
		Bow = 41,
		[Token(Token = "0x4003BD7")]
		LumaShootout = 42
	}
	[Token(Token = "0x2000951")]
	public struct RecycleRequest
	{
	}
	[Token(Token = "0x2000952")]
	public class RecycleData
	{
		[Token(Token = "0x4003BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<RecycleRequest> toolRecycleRequest;

		[Token(Token = "0x4003BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<RecycleRequest> projectileRecycleRequest;

		[Token(Token = "0x6002952")]
		[Address(RVA = "0x113FFDC", Offset = "0x113FFDC", VA = "0x113FFDC")]
		public void RequestRecycle()
		{
		}

		[Token(Token = "0x6002953")]
		[Address(RVA = "0x1140044", Offset = "0x1140044", VA = "0x1140044")]
		public RecycleData()
		{
		}
	}
	[Token(Token = "0x2000953")]
	public class ToolRecycleHandler
	{
		[Token(Token = "0x4003BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameData gameData;

		[Token(Token = "0x4003BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4003BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly NetworkIdAllocator networkIdAllocator;

		[Token(Token = "0x4003BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly FactoryData factoryData;

		[Token(Token = "0x4003BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly OwnershipHelper ownershipHelper;

		[Token(Token = "0x4003BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly RecycleData recycleData;

		[Token(Token = "0x4003BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Queue<Tool> destroyedTools;

		[Token(Token = "0x4003BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float TOOL_QUARANTEEN_TIME;

		[Token(Token = "0x6002954")]
		[Address(RVA = "0x11400EC", Offset = "0x11400EC", VA = "0x11400EC")]
		public ToolRecycleHandler(GameData gameData, IRoomTimeProvider roomTimeProvider, NetworkIdAllocator networkIdAllocator, FactoryData factoryData, OwnershipHelper ownershipHelper, RecycleData recycleData)
		{
		}

		[Token(Token = "0x6002955")]
		[Address(RVA = "0x11401B4", Offset = "0x11401B4", VA = "0x11401B4")]
		public void Destroy(Tool tool, float timestamp, bool resetPosition = true)
		{
		}

		[Token(Token = "0x6002956")]
		[Address(RVA = "0x11403B0", Offset = "0x11403B0", VA = "0x11403B0")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002957")]
		[Address(RVA = "0x1140440", Offset = "0x1140440", VA = "0x1140440")]
		private void TryToDestroyDeadTools()
		{
		}

		[Token(Token = "0x6002958")]
		[Address(RVA = "0x11405C8", Offset = "0x11405C8", VA = "0x11405C8")]
		private void CheckToolsToRecycle()
		{
		}

		[Token(Token = "0x6002959")]
		[Address(RVA = "0x1140548", Offset = "0x1140548", VA = "0x1140548")]
		private void RecycleAllTools()
		{
		}

		[Token(Token = "0x600295A")]
		[Address(RVA = "0x114070C", Offset = "0x114070C", VA = "0x114070C")]
		private void RecycleTool(Tool tool)
		{
		}
	}
	[Token(Token = "0x2000954")]
	public class ToolReferences : MonoBehaviour
	{
		[Token(Token = "0x4003BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform spawnPivot;

		[Token(Token = "0x4003BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[FormerlySerializedAs("chargedParticleEffect")]
		public ParticleSystem cooldownFinishedEffect;

		[Token(Token = "0x4003BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[FormerlySerializedAs("powerChargeParticleSystem")]
		public ParticleSystem chargingParticleSystemEffect;

		[Token(Token = "0x4003BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Renderer cooldownBar;

		[Token(Token = "0x4003BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MeshFilter[] meshFilters;

		[Token(Token = "0x4003BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Renderer[] toolRenderers;

		[Token(Token = "0x4003BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject skinPrefab;

		[Token(Token = "0x4003BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Canvas ammoCanvas;

		[Token(Token = "0x4003BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TextMeshPro ammoCount;

		[Token(Token = "0x4003BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Image ammoFill;

		[Token(Token = "0x4003BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform secondaryGrabTransform;

		[Token(Token = "0x4003BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public List<Material> materials;

		[Token(Token = "0x4003BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public int currentSkin;

		[Token(Token = "0x600295B")]
		[Address(RVA = "0x11408A0", Offset = "0x11408A0", VA = "0x11408A0")]
		public ToolReferences()
		{
		}
	}
	[Token(Token = "0x2000955")]
	public class ToolSetting : ScriptableObject
	{
		[Token(Token = "0x4003BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("General Tool Settings")]
		public ToolReferences references;

		[Token(Token = "0x4003BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 colliderSize;

		[Token(Token = "0x4003BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 colliderCenter;

		[Token(Token = "0x4003BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Two Handed Settings")]
		public bool isTwoHanded;

		[Token(Token = "0x4003BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float secondaryGrabColliderRadius;

		[Token(Token = "0x4003BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float secondaryGrabToleranceRadius;

		[Token(Token = "0x4003BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Selection")]
		public int iconSortingOrder;

		[Token(Token = "0x4003BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ToolInformationCategory[] categoriesToShow;

		[Token(Token = "0x4003BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ToolAttribute mainAttribute;

		[Token(Token = "0x4003BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public ToolAttribute secondaryAttribute;

		[Token(Token = "0x4003BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[FormerlySerializedAs("spawnSetting")]
		public SpawnSetting spawn;

		[Token(Token = "0x4003BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float health;

		[Token(Token = "0x4003BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("Throwing")]
		public float throwDamage;

		[Token(Token = "0x4003BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float throwDamagePlayer;

		[Token(Token = "0x4003BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[FormerlySerializedAs("throwPower")]
		public float throwSpeedMultiplier;

		[Token(Token = "0x4003BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float velocityTimePower;

		[Token(Token = "0x4003BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float throwGravityMultiplier;

		[Token(Token = "0x4003C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float gravityTimePower;

		[Token(Token = "0x4003C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float maxThrowSpeed;

		[Token(Token = "0x4003C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[FormerlySerializedAs("toolImpactSettings")]
		public ImpactSettings toolImpact;

		[Token(Token = "0x4003C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SoundGroup]
		public string[] outOfAmmoSound;

		[Token(Token = "0x4003C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public ToolGroupType botInteractionType;

		[Token(Token = "0x4003C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public ToolChargeSettings chargeSetting;

		[Token(Token = "0x4003C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public ToolBowPullbackSettings bowPullbackSetting;

		[Token(Token = "0x4003C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public ProjectileSettings projectileSettings;

		[Token(Token = "0x4003C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public List<EventTriggerEffectSettings> effectSettingsList;

		[Token(Token = "0x600295C")]
		[Address(RVA = "0x1140928", Offset = "0x1140928", VA = "0x1140928")]
		public ToolSetting()
		{
		}
	}
	[Token(Token = "0x2000956")]
	public interface IToolsFactory
	{
		[Token(Token = "0x600295D")]
		Tool Create(Transform parent, Vector3 position, Quaternion rotation, int toolNetworkId, int toolSkin);

		[Token(Token = "0x600295E")]
		void Recycle(Tool tool);

		[Token(Token = "0x600295F")]
		void RecycleCollider(Tool tool);
	}
	[Token(Token = "0x2000957")]
	public abstract class GenericToolFactory<T, TS> : IToolsFactory where T : Tool where TS : ToolSetting
	{
		[Token(Token = "0x4003C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected readonly ToolName name;

		[Token(Token = "0x4003C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected readonly TS toolSettings;

		[Token(Token = "0x4003C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ComponentPrefabPool<ToolReferences> referencePools;

		[Token(Token = "0x4003C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ComponentPrefabPool<BoxColliderReference> colliderReferencePool;

		[Token(Token = "0x4003C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ComponentPrefabPool<SphereColliderReference> sphereColliderReferencePool;

		[Token(Token = "0x4003C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly CSharpObjectPool<T> toolPool;

		[Token(Token = "0x4003C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ToolInitializationUtility initializationUtility;

		[Token(Token = "0x6002960")]
		protected GenericToolFactory(ToolName name, TS toolSettings, ComponentPrefabPool<ToolReferences> referencePools, ComponentPrefabPool<BoxColliderReference> colliderReferencePool, ComponentPrefabPool<SphereColliderReference> sphereColliderReferencePool, CSharpObjectPool<T> toolPool, ToolInitializationUtility initializationUtility)
		{
		}

		[Token(Token = "0x6002961")]
		public Tool Create(Transform parent, Vector3 position, Quaternion rotation, int toolNetworkId, int toolSkinId)
		{
			return null;
		}

		[Token(Token = "0x6002962")]
		protected abstract void InitializeTool(int toolNetworkId, T tool, ToolReferences references, BoxColliderReference colliderReference, SphereColliderReference secondaryGrabColliderReference, SphereColliderReference secondaryGrabToleranceColliderReference);

		[Token(Token = "0x6002963")]
		public void Recycle(Tool tool)
		{
		}

		[Token(Token = "0x6002964")]
		public void RecycleCollider(Tool tool)
		{
		}
	}
	[Token(Token = "0x2000958")]
	[CreateAssetMenu(menuName = "Settings/Tools/SpawnAnchor", fileName = "ToolSpawnAnchor")]
	public class ToolSpawnAnchor : ScriptableObject
	{
		[Token(Token = "0x4003C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float height;

		[Token(Token = "0x4003C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float depth;

		[Token(Token = "0x4003C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int initialSpawnPriority;

		[Token(Token = "0x6002965")]
		[Address(RVA = "0x1140A34", Offset = "0x1140A34", VA = "0x1140A34")]
		public ToolSpawnAnchor()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000959")]
	public struct ToolSpawnSide
	{
		[Token(Token = "0x4003C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool isActive;

		[Token(Token = "0x4003C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float angle;

		[Token(Token = "0x4003C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float distanceFromCenter;

		[Token(Token = "0x4003C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ToolSpawnAnchor[] anchors;

		[Token(Token = "0x6002966")]
		[Address(RVA = "0x1140A3C", Offset = "0x1140A3C", VA = "0x1140A3C")]
		public ToolSpawnSide(bool isActive, ToolSpawnAnchor[] anchors, float angle, float distanceFromCenter)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200095A")]
	public class GlobalToolsSpawnSettings
	{
		[Token(Token = "0x4003C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ToolSpawnSettings menuToolSpawnSettings;

		[Token(Token = "0x4003C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ToolSpawnSettings classicToolSpawnSettings;

		[Token(Token = "0x4003C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ToolSpawnSettings shootOutToolSpawnSettings;

		[Token(Token = "0x4003C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ToolSpawnSettings winterClassicToolSpawnSettings;

		[Token(Token = "0x4003C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ToolSpawnSettings scrapperShootoutToolSpawnSettings;

		[Token(Token = "0x6002967")]
		[Address(RVA = "0x1140A50", Offset = "0x1140A50", VA = "0x1140A50")]
		public GlobalToolsSpawnSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200095B")]
	public class ToolSpawnSettings
	{
		[Token(Token = "0x4003C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GamePlayRulesDeckSpawnSettings deckSpawnProperties;

		[Token(Token = "0x4003C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParticleEffectReference endSpawnEffect;

		[Token(Token = "0x4003C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ToolSpawnSide[] spawnSides;

		[Token(Token = "0x6002968")]
		[Address(RVA = "0x1140A58", Offset = "0x1140A58", VA = "0x1140A58")]
		public ToolSpawnSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200095C")]
	public class GamePlayRulesDeckSpawnSettings
	{
		[Token(Token = "0x4003C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DeckBasedToolSpawnRandomAlgorithmSettings randomDeckSettings;

		[Token(Token = "0x4003C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve spawnIndicatorFillCurve;

		[Token(Token = "0x4003C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float spawnIndicatorMargin;

		[Token(Token = "0x4003C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material toolSpawnMaterial;

		[Token(Token = "0x4003C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[ColorUsage(true, true)]
		public Color spawnColorAllowed;

		[Token(Token = "0x4003C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[ColorUsage(true, true)]
		public Color spawnColorReachedCap;

		[Token(Token = "0x6002969")]
		[Address(RVA = "0x1140A60", Offset = "0x1140A60", VA = "0x1140A60")]
		public GamePlayRulesDeckSpawnSettings()
		{
		}
	}
	[Token(Token = "0x200095D")]
	public class ToolSpawnData
	{
		[Token(Token = "0x4003C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DeckToolSpawnProgressData[][] deckSpawnProgressData;

		[Token(Token = "0x4003C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int numGamePlaySpawnPoints;

		[Token(Token = "0x4003C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Spawnpoint[] spawnpointsP1;

		[Token(Token = "0x4003C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Spawnpoint[] spawnpointsP2;

		[Token(Token = "0x4003C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<int> spawnPointsOrderedFrontToBack;

		[Token(Token = "0x4003C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool instantSpawnTools;

		[Token(Token = "0x4003C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool showToolSpawnEffects;

		[Token(Token = "0x4003C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<int> playersToSkip;

		[Token(Token = "0x600296A")]
		[Address(RVA = "0x1140AD4", Offset = "0x1140AD4", VA = "0x1140AD4")]
		public ToolSpawnData()
		{
		}
	}
	[Token(Token = "0x200095E")]
	public struct Spawnpoint
	{
		[Token(Token = "0x4003C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Vector3 position;

		[Token(Token = "0x4003C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly Vector3 direction;

		[Token(Token = "0x4003C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ToolSpawnAnchor toolSpawnAnchor;

		[Token(Token = "0x4003C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Vector3 platformPosition;

		[Token(Token = "0x600296B")]
		[Address(RVA = "0x1140B7C", Offset = "0x1140B7C", VA = "0x1140B7C")]
		public Spawnpoint(Vector3 position, Vector3 direction, Vector3 platformPosition, ToolSpawnAnchor toolSpawnAnchor)
		{
		}

		[Token(Token = "0x600296C")]
		[Address(RVA = "0x1140B9C", Offset = "0x1140B9C", VA = "0x1140B9C")]
		public Vector3 GetSpawnPosition()
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200095F")]
	public class ToolSpawnHandler : ITickable
	{
		[Token(Token = "0x4003C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly GameData gameData;

		[Token(Token = "0x4003C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Dictionary<ToolName, IToolsFactory[]> toolsFactories;

		[Token(Token = "0x4003C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Dictionary<int, Tool> toolsLookUp;

		[Token(Token = "0x4003C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<Tool> toolsList;

		[Token(Token = "0x4003C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4003C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ToolSpawnData toolSpawnData;

		[Token(Token = "0x4003C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly DeckSpawnSettings deckSpawnSettings;

		[Token(Token = "0x4003C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ParticleEffectData particleEffectData;

		[Token(Token = "0x4003C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ToolCustomizationSettings toolCustomizationSettings;

		[Token(Token = "0x4003C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4003C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly FactoryData factoryData;

		[Token(Token = "0x4003C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly ToolDefinitionSettings toolDefinitionSettings;

		[Token(Token = "0x4003C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly DeckData deckData;

		[Token(Token = "0x4003C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4003C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4003C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameplayRules previousGameplayRules;

		[Token(Token = "0x600296D")]
		[Address(RVA = "0x1140BF4", Offset = "0x1140BF4", VA = "0x1140BF4")]
		public ToolSpawnHandler(GameData gameData, Dictionary<ToolName, IToolsFactory[]> toolsFactories, IgnisSoundTriggerData ignisSoundTriggerData, ToolSpawnData toolSpawnData, DeckSpawnSettings deckSpawnSettings, ParticleEffectData particleEffectData, ToolCustomizationSettings toolCustomizationSettings, MenuStateData menuStateData, FactoryData factoryData, ToolDefinitionSettings toolDefinitionSettings, DeckData deckData, MatchHandlerData matchHandlerData, EntryPoint.EntryPointData entryPointData)
		{
		}

		[Token(Token = "0x600296E")]
		[Address(RVA = "0x1140C84", Offset = "0x1140C84", VA = "0x1140C84")]
		public void Initialize()
		{
		}

		[Token(Token = "0x600296F")]
		[Address(RVA = "0x11410E0", Offset = "0x11410E0", VA = "0x11410E0")]
		private void AssignSpawnPoints(Spawnpoint[] spawnpoints, Vector3 forwardDirection, Vector3 platformCenter)
		{
		}

		[Token(Token = "0x6002970")]
		[Address(RVA = "0x1141088", Offset = "0x1141088", VA = "0x1141088")]
		private ToolSpawnSettings GetToolSpawnSettings()
		{
			return null;
		}

		[Token(Token = "0x6002971")]
		[Address(RVA = "0x114127C", Offset = "0x114127C", VA = "0x114127C")]
		[Conditional("IGNIS_DEBUG")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6002972")]
		[Address(RVA = "0x1141280", Offset = "0x1141280", VA = "0x1141280")]
		public GameMessageInvokationResult OnToolSpawnMessage(ToolSpawnMessage toolSpawnMessage)
		{
			return default(GameMessageInvokationResult);
		}

		[Token(Token = "0x6002973")]
		[Address(RVA = "0x11419F4", Offset = "0x11419F4", VA = "0x11419F4")]
		private void TriggerSpawnEffect(ToolSpawnMessage toolSpawnMessage, ToolReferences toolRef)
		{
		}

		[Token(Token = "0x6002974")]
		[Address(RVA = "0x1141BC0", Offset = "0x1141BC0", VA = "0x1141BC0", Slot = "4")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x2000961")]
	public class ToolSpawnAlgorithmData
	{
		[Token(Token = "0x4003C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IToolSpawnAlgorithm toolSpawnAlgorithm;

		[Token(Token = "0x6002978")]
		[Address(RVA = "0x1141C78", Offset = "0x1141C78", VA = "0x1141C78")]
		public ToolSpawnAlgorithmData()
		{
		}
	}
	[Token(Token = "0x2000962")]
	public interface IToolSpawnAlgorithm
	{
		[Token(Token = "0x6002979")]
		void Initialize(float timestamp);

		[Token(Token = "0x600297A")]
		void Tick();

		[Token(Token = "0x600297B")]
		void OnGrabMessage(GrabMessage message);

		[Token(Token = "0x600297C")]
		void CleanUpRound();
	}
	[Token(Token = "0x2000963")]
	public struct ThrownToolData
	{
		[Token(Token = "0x4003C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Transform visualTransform;

		[Token(Token = "0x4003C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Transform colliderTransform;

		[Token(Token = "0x4003C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Vector3 startPosition;

		[Token(Token = "0x4003C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly Quaternion startRotation;

		[Token(Token = "0x4003C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public readonly Vector3 direction;

		[Token(Token = "0x4003C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly float speed;

		[Token(Token = "0x4003C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public readonly Vector3 gravity;

		[Token(Token = "0x4003C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly float spawnTime;

		[Token(Token = "0x4003C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public readonly Vector3 angularVelocity;

		[Token(Token = "0x4003C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public readonly Tool tool;

		[Token(Token = "0x4003C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public readonly float velocityTimePower;

		[Token(Token = "0x4003C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public readonly float gravityTimePower;

		[Token(Token = "0x4003C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public readonly float maxSpeed;

		[Token(Token = "0x600297D")]
		[Address(RVA = "0x1141C80", Offset = "0x1141C80", VA = "0x1141C80")]
		public ThrownToolData(Transform visualTransform, Transform colliderTransform, Vector3 startPosition, Vector3 direction, Vector3 gravity, float spawnTime, Vector3 angularVelocity, Tool tool, float velocityTimePower, float gravityTimePower, float maxSpeed, float speed)
		{
		}
	}
	[Token(Token = "0x2000964")]
	public class ToolThrownHandlerData
	{
		[Token(Token = "0x4003C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly List<ThrownToolData> thrownTools;

		[Token(Token = "0x600297E")]
		[Address(RVA = "0x1141D30", Offset = "0x1141D30", VA = "0x1141D30")]
		public ToolThrownHandlerData()
		{
		}
	}
	[Token(Token = "0x2000965")]
	public class ToolThrownMovementUtility
	{
		[Token(Token = "0x600297F")]
		[Address(RVA = "0x1141DAC", Offset = "0x1141DAC", VA = "0x1141DAC")]
		public Vector3 GetWorldPositionAtTime(float time, ThrownToolData toolData)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002980")]
		[Address(RVA = "0x1141E48", Offset = "0x1141E48", VA = "0x1141E48")]
		public ToolThrownMovementUtility()
		{
		}
	}
	[Token(Token = "0x2000966")]
	public class ToolThrownHandler : ThreatHandler, ITickable, IFixedTickable
	{
		[Token(Token = "0x4003C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly bool playingOnQuest;

		[Token(Token = "0x4003C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly ToolThrownHandlerData toolThrownHandlerData;

		[Token(Token = "0x4003C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4003C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly ThrowSettings throwSettings;

		[Token(Token = "0x4003C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly ToolThrownMovementUtility toolThrowMovementUtility;

		[Token(Token = "0x4003C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4003C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly FactoryData factoryData;

		[Token(Token = "0x6002981")]
		[Address(RVA = "0x1141E50", Offset = "0x1141E50", VA = "0x1141E50")]
		public ToolThrownHandler(ToolThrownHandlerData toolThrownHandlerData, IRoomTimeProvider roomTimeProvider, ThrowSettings throwSettings, ToolThrownMovementUtility toolThrowMovementUtility, ImpactHandlerData impactHandlerData, GameData gameData, DeterministicRandom deterministicRandom, IgnisSoundTriggerData ignisSoundTriggerData, FactoryData factoryData)
		{
		}

		[Token(Token = "0x6002982")]
		[Address(RVA = "0x1141EB4", Offset = "0x1141EB4", VA = "0x1141EB4", Slot = "5")]
		public void FixedTick()
		{
		}

		[Token(Token = "0x6002983")]
		[Address(RVA = "0x11425CC", Offset = "0x11425CC", VA = "0x11425CC", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002984")]
		[Address(RVA = "0x1142380", Offset = "0x1142380", VA = "0x1142380")]
		private void UpdatePredictionRay(ThrownToolData thrownToolData, float time)
		{
		}

		[Token(Token = "0x6002985")]
		[Address(RVA = "0x1142298", Offset = "0x1142298", VA = "0x1142298")]
		private Quaternion GetWorldRotationAtTime(float time, ThrownToolData toolData)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x2000968")]
	public class DamageParticleEffectReference : MonoBehaviour
	{
		[Token(Token = "0x4003C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int damage;

		[Token(Token = "0x600298A")]
		[Address(RVA = "0x1142938", Offset = "0x1142938", VA = "0x1142938")]
		public DamageParticleEffectReference()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000969")]
	public struct HapticEffect
	{
		[Token(Token = "0x4003C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x4003C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float frequency;

		[Token(Token = "0x4003C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float amplitude;

		[Token(Token = "0x4003C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float duration;

		[Token(Token = "0x4003C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int priority;

		[Token(Token = "0x4003C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float timeStamp;

		[Token(Token = "0x4003C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly ControllerHand hand;

		[Token(Token = "0x4003C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly float lastTriggeredTimeStamp;

		[Token(Token = "0x600298B")]
		[Address(RVA = "0x1142940", Offset = "0x1142940", VA = "0x1142940")]
		public HapticEffect(int priority, ControllerHand hand)
		{
		}

		[Token(Token = "0x600298C")]
		[Address(RVA = "0x11429A8", Offset = "0x11429A8", VA = "0x11429A8")]
		public HapticEffect(HapticEffect effect, float timeStamp, ControllerHand hand)
		{
		}

		[Token(Token = "0x600298D")]
		[Address(RVA = "0x11429E0", Offset = "0x11429E0", VA = "0x11429E0")]
		public HapticEffect(HapticEffect effect, float lastTriggeredTimeStamp)
		{
		}

		[Token(Token = "0x600298E")]
		[Address(RVA = "0x1142A20", Offset = "0x1142A20", VA = "0x1142A20")]
		public HapticEffect(string name, float frequency, float amplitude, float duration, int priority, float timeStamp, ControllerHand hand, float lastTriggeredTimeStamp)
		{
		}
	}
	[Token(Token = "0x200096A")]
	public class HapticData
	{
		[Token(Token = "0x4003C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<HapticEffect> hapticEffects;

		[Token(Token = "0x600298F")]
		[Address(RVA = "0x1142A40", Offset = "0x1142A40", VA = "0x1142A40")]
		public HapticData()
		{
		}
	}
	[Token(Token = "0x200096B")]
	public interface IHapticHandler : ITickable
	{
		[Token(Token = "0x6002990")]
		void SetupDebug();
	}
	[Token(Token = "0x200096C")]
	public class HapticsHandler : IHapticHandler, ITickable
	{
		[Token(Token = "0x4003C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly HapticData hapticData;

		[Token(Token = "0x4003C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4003C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IHapticFacade hapticFacade;

		[Token(Token = "0x4003C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<HapticEffect> currentEffects;

		[Token(Token = "0x4003C69")]
		private const float OculusHapticAutoStop = 2f;

		[Token(Token = "0x6002991")]
		[Address(RVA = "0x1142AC0", Offset = "0x1142AC0", VA = "0x1142AC0")]
		public HapticsHandler(HapticData hapticData, LocalPersistentData localPersistentData, IHapticFacade hapticFacade)
		{
		}

		[Token(Token = "0x6002992")]
		[Address(RVA = "0x1142B68", Offset = "0x1142B68", VA = "0x1142B68", Slot = "4")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6002993")]
		[Address(RVA = "0x1142B6C", Offset = "0x1142B6C", VA = "0x1142B6C")]
		private void TriggerDebugHapticLeft()
		{
		}

		[Token(Token = "0x6002994")]
		[Address(RVA = "0x1142C38", Offset = "0x1142C38", VA = "0x1142C38")]
		private void StopDebugHapticLeft()
		{
		}

		[Token(Token = "0x6002995")]
		[Address(RVA = "0x1142CFC", Offset = "0x1142CFC", VA = "0x1142CFC")]
		private void TriggerDebugHapticRight()
		{
		}

		[Token(Token = "0x6002996")]
		[Address(RVA = "0x1142DC4", Offset = "0x1142DC4", VA = "0x1142DC4")]
		private void StopDebugHapticRight()
		{
		}

		[Token(Token = "0x6002997")]
		[Address(RVA = "0x1142E84", Offset = "0x1142E84", VA = "0x1142E84", Slot = "5")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002998")]
		[Address(RVA = "0x11432D0", Offset = "0x11432D0", VA = "0x11432D0")]
		private void ChangeCurrentEffect(HapticEffect newEffect)
		{
		}

		[Token(Token = "0x6002999")]
		[Address(RVA = "0x1143134", Offset = "0x1143134", VA = "0x1143134")]
		private void StartHaptic(HapticEffect effect)
		{
		}

		[Token(Token = "0x600299A")]
		[Address(RVA = "0x1143088", Offset = "0x1143088", VA = "0x1143088")]
		private void StopHaptic(ControllerHand hand)
		{
		}
	}
	[Token(Token = "0x200096D")]
	public interface IHapticFacade
	{
		[Token(Token = "0x600299B")]
		void StartHaptic(HapticEffect effect);

		[Token(Token = "0x600299C")]
		void StopHaptic(ControllerHand hand);
	}
	[Token(Token = "0x200096E")]
	public class MockHapticFacade : IHapticFacade
	{
		[Token(Token = "0x600299D")]
		[Address(RVA = "0x1143414", Offset = "0x1143414", VA = "0x1143414", Slot = "4")]
		public void StartHaptic(HapticEffect effect)
		{
		}

		[Token(Token = "0x600299E")]
		[Address(RVA = "0x1143418", Offset = "0x1143418", VA = "0x1143418", Slot = "5")]
		public void StopHaptic(ControllerHand hand)
		{
		}

		[Token(Token = "0x600299F")]
		[Address(RVA = "0x114341C", Offset = "0x114341C", VA = "0x114341C")]
		public MockHapticFacade()
		{
		}
	}
	[Token(Token = "0x200096F")]
	public class OculusHapticFacade : IHapticFacade
	{
		[Token(Token = "0x4003C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<int, OVRInput.Controller> controllerMapping;

		[Token(Token = "0x60029A0")]
		[Address(RVA = "0x1143424", Offset = "0x1143424", VA = "0x1143424")]
		public OculusHapticFacade()
		{
		}

		[Token(Token = "0x60029A1")]
		[Address(RVA = "0x11434E4", Offset = "0x11434E4", VA = "0x11434E4", Slot = "4")]
		public void StartHaptic(HapticEffect effect)
		{
		}

		[Token(Token = "0x60029A2")]
		[Address(RVA = "0x1143588", Offset = "0x1143588", VA = "0x1143588", Slot = "5")]
		public void StopHaptic(ControllerHand hand)
		{
		}
	}
	[Token(Token = "0x2000970")]
	public class PicoHapticFacade : IHapticFacade
	{
		[Token(Token = "0x60029A3")]
		[Address(RVA = "0x1143620", Offset = "0x1143620", VA = "0x1143620")]
		public PicoHapticFacade()
		{
		}

		[Token(Token = "0x60029A4")]
		[Address(RVA = "0x1143628", Offset = "0x1143628", VA = "0x1143628", Slot = "4")]
		public void StartHaptic(HapticEffect effect)
		{
		}

		[Token(Token = "0x60029A5")]
		[Address(RVA = "0x114362C", Offset = "0x114362C", VA = "0x114362C", Slot = "5")]
		public void StopHaptic(ControllerHand hand)
		{
		}
	}
	[Token(Token = "0x2000971")]
	public class IgnisSoundTriggerData
	{
		[Token(Token = "0x4003C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Queue<SoundWithTransform> soundAtTransform;

		[Token(Token = "0x4003C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly Queue<SoundWithPosition> soundAtPosition;

		[Token(Token = "0x4003C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Queue<SoundWithTransform> customEvent;

		[Token(Token = "0x4003C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly Queue<MonoSound> monoSound;

		[Token(Token = "0x4003C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly Queue<LocalOrRemoteSoundWithTransform> localOrRemoteSoundAtTransform;

		[Token(Token = "0x4003C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly Queue<PlayerOrOtherImpactWithTransform> playerOrOtherSoundAtTransform;

		[Token(Token = "0x4003C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly Queue<LocalOrRemoteSoundWithTransform> startLocalOrRemoteSoundAtTransform;

		[Token(Token = "0x4003C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly Queue<PlayerOrOtherImpactWithTransform> startPlayerOrOtherSoundAtTransform;

		[Token(Token = "0x4003C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly Queue<LocalOrRemoteSoundWithTransform> stopLocalAndRemoteSoundAtTransform;

		[Token(Token = "0x4003C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public readonly Queue<SoundWithTransform> soundAtTransformAndFollow;

		[Token(Token = "0x4003C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public readonly Queue<ContinuesSoundWithTransform> continuesSoundWithTransforms;

		[Token(Token = "0x4003C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public readonly Queue<MatchHandlerState> matchHandlerStates;

		[Token(Token = "0x4003C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public readonly Queue<EnterScene> enterScene;

		[Token(Token = "0x4003C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public readonly Queue<ExitScene> exitScene;

		[Token(Token = "0x4003C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public readonly Queue<EnterOnboarding> enterOnboarding;

		[Token(Token = "0x4003C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public readonly Queue<string> triggerMatchEvents;

		[Token(Token = "0x4003C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly ParticleEffectData particleEffectData;

		[Token(Token = "0x60029A6")]
		[Address(RVA = "0x1143630", Offset = "0x1143630", VA = "0x1143630")]
		public IgnisSoundTriggerData(ParticleEffectData particleEffectData)
		{
		}

		[Token(Token = "0x60029A7")]
		[Address(RVA = "0x1143A40", Offset = "0x1143A40", VA = "0x1143A40")]
		public void StraightProjectileTriggered(FireableSettings fireableSettings, Transform transform, int triggeringPlayerNetworkId, Vector3 position, Quaternion rotation, float timeStamp)
		{
		}

		[Token(Token = "0x60029A8")]
		[Address(RVA = "0x1143B74", Offset = "0x1143B74", VA = "0x1143B74")]
		public void SoundTriggerCustomEvent(string[] sounds, Transform transform, float timeStamp)
		{
		}

		[Token(Token = "0x60029A9")]
		[Address(RVA = "0x1143C08", Offset = "0x1143C08", VA = "0x1143C08")]
		public void SoundTriggerCustomEvent(string sound, Transform transform, float timeStamp)
		{
		}

		[Token(Token = "0x60029AA")]
		[Address(RVA = "0x1141B1C", Offset = "0x1141B1C", VA = "0x1141B1C")]
		public void SoundTrigger(string[] sounds, Transform transform, float timeStamp)
		{
		}

		[Token(Token = "0x60029AB")]
		[Address(RVA = "0x1143CF0", Offset = "0x1143CF0", VA = "0x1143CF0")]
		public void SoundTrigger(string sounds, Transform transform, float timeStamp)
		{
		}

		[Token(Token = "0x60029AC")]
		[Address(RVA = "0x1143DD8", Offset = "0x1143DD8", VA = "0x1143DD8")]
		public void StopSoundAtTransform(string sounds, Transform transform)
		{
		}

		[Token(Token = "0x60029AD")]
		[Address(RVA = "0x1143E40", Offset = "0x1143E40", VA = "0x1143E40")]
		public void OnImpact(Transform transform, Vector3 impactPosition, string[] impactSounds, int particleToken, float timeStamp)
		{
		}

		[Token(Token = "0x60029AE")]
		[Address(RVA = "0x1143F4C", Offset = "0x1143F4C", VA = "0x1143F4C")]
		public void GrenadeActivationTrigger(string[] activationSound, Transform transform, ToolReferences toolReferences, float timeStamp)
		{
		}

		[Token(Token = "0x60029AF")]
		[Address(RVA = "0x1143FEC", Offset = "0x1143FEC", VA = "0x1143FEC")]
		public void SoundAndParticleTrigger(string[] sound, Transform transform, int particleToken, float timeStamp)
		{
		}

		[Token(Token = "0x60029B0")]
		[Address(RVA = "0x11440F4", Offset = "0x11440F4", VA = "0x11440F4")]
		public void OnProjectileAirSound(bool startSound, Transform transform, string[] airSounds)
		{
		}
	}
	[Token(Token = "0x2000972")]
	public struct LocalOrRemoteSoundWithTransform
	{
		[Token(Token = "0x4003C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string[] localSound;

		[Token(Token = "0x4003C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string[] remoteSound;

		[Token(Token = "0x4003C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Transform transform;

		[Token(Token = "0x4003C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly int triggeringPlayerNetworkId;

		[Token(Token = "0x4003C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float timeStamp;

		[Token(Token = "0x60029B1")]
		[Address(RVA = "0x1143B60", Offset = "0x1143B60", VA = "0x1143B60")]
		public LocalOrRemoteSoundWithTransform(string[] localSound, string[] remoteSound, Transform transform, int triggeringPlayerNetworkId, float timeStamp)
		{
		}
	}
	[Token(Token = "0x2000973")]
	public struct PlayerOrOtherImpactWithTransform
	{
		[Token(Token = "0x4003C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string[] playerSound;

		[Token(Token = "0x4003C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string[] otherSound;

		[Token(Token = "0x4003C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Transform transform;

		[Token(Token = "0x4003C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ImpactTypes impactTypes;

		[Token(Token = "0x4003C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float timeStmap;

		[Token(Token = "0x60029B2")]
		[Address(RVA = "0x114419C", Offset = "0x114419C", VA = "0x114419C")]
		public PlayerOrOtherImpactWithTransform(string[] playerSound, string[] otherSound, Transform transform, ImpactTypes impactTypes, float timeStmap)
		{
		}
	}
	[Token(Token = "0x2000974")]
	public struct SoundWithTransform
	{
		[Token(Token = "0x4003C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string[] sound;

		[Token(Token = "0x4003C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Transform transform;

		[Token(Token = "0x4003C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float timeStamp;

		[Token(Token = "0x60029B3")]
		[Address(RVA = "0x1143BFC", Offset = "0x1143BFC", VA = "0x1143BFC")]
		public SoundWithTransform(string[] sound, Transform transform, float timeStamp)
		{
		}
	}
	[Token(Token = "0x2000975")]
	public struct SoundWithPosition
	{
		[Token(Token = "0x4003C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string[] sound;

		[Token(Token = "0x4003C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Vector3 position;

		[Token(Token = "0x4003C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float timeStamp;

		[Token(Token = "0x60029B4")]
		[Address(RVA = "0x1143F3C", Offset = "0x1143F3C", VA = "0x1143F3C")]
		public SoundWithPosition(string[] sound, Vector3 position, float timeStamp)
		{
		}
	}
	[Token(Token = "0x2000976")]
	public struct MonoSound
	{
		[Token(Token = "0x4003C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string[] sounds;

		[Token(Token = "0x4003C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float timeStamp;

		[Token(Token = "0x60029B5")]
		[Address(RVA = "0x11441B0", Offset = "0x11441B0", VA = "0x11441B0")]
		public MonoSound(string[] sounds, float timeStamp)
		{
		}
	}
	[Token(Token = "0x2000977")]
	public struct EnterScene
	{
	}
	[Token(Token = "0x2000978")]
	public struct ExitScene
	{
	}
	[Token(Token = "0x2000979")]
	public struct EnterOnboarding
	{
	}
	[Token(Token = "0x200097A")]
	public struct ContinuesSoundWithTransform
	{
		[Token(Token = "0x4003C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool shouldContinueStartSound;

		[Token(Token = "0x4003C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string[] sounds;

		[Token(Token = "0x4003C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform target;

		[Token(Token = "0x60029B6")]
		[Address(RVA = "0x114418C", Offset = "0x114418C", VA = "0x114418C")]
		public ContinuesSoundWithTransform(bool shouldContinueStartSound, string[] sounds, Transform target)
		{
		}
	}
	[Token(Token = "0x200097B")]
	[DisallowMultipleComponent]
	public sealed class ParticleEffectReference : MonoBehaviour
	{
		[Token(Token = "0x4003C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public int prefabPoolToken;

		[Token(Token = "0x4003C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleEffectOneOff[] particleEffects;

		[Token(Token = "0x4003C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleEffectEmitOverDistanceDefinition[] particleEmitOverDistance;

		[Token(Token = "0x60029B7")]
		[Address(RVA = "0x11441BC", Offset = "0x11441BC", VA = "0x11441BC")]
		[ContextMenu("LoadParticles")]
		private void Load()
		{
		}

		[Token(Token = "0x60029B8")]
		[Address(RVA = "0x1144660", Offset = "0x1144660", VA = "0x1144660")]
		[ContextMenu("UppdateParticles")]
		public void UpdateEffectData()
		{
		}

		[Token(Token = "0x60029B9")]
		[Address(RVA = "0x1144980", Offset = "0x1144980", VA = "0x1144980")]
		public ParticleEffectReference()
		{
		}
	}
	[Token(Token = "0x200097C")]
	[CreateAssetMenu(menuName = "Settings/ParticleEffectSettings")]
	public class ParticleEffectSettings : ScriptableObject
	{
		[Token(Token = "0x4003C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParticleEffectReference[] particleEffectToPool;

		[Token(Token = "0x60029BA")]
		[Address(RVA = "0x1144A04", Offset = "0x1144A04", VA = "0x1144A04")]
		public ParticleEffectSettings()
		{
		}
	}
	[Token(Token = "0x200097D")]
	public enum CanvasAnimationState
	{
		[Token(Token = "0x4003C96")]
		Hidden,
		[Token(Token = "0x4003C97")]
		Shown,
		[Token(Token = "0x4003C98")]
		Hiding
	}
	[Token(Token = "0x200097E")]
	public interface IAnimatedCanvas
	{
		[Token(Token = "0x170001E2")]
		CanvasAnimationState AnimationState
		{
			[Token(Token = "0x60029BC")]
			get;
			[Token(Token = "0x60029BD")]
			set;
		}

		[Token(Token = "0x170001E3")]
		AnimatorStateData ShowAnimationState
		{
			[Token(Token = "0x60029BE")]
			get;
		}

		[Token(Token = "0x170001E4")]
		AnimatorStateData HideAnimationState
		{
			[Token(Token = "0x60029BF")]
			get;
		}

		[Token(Token = "0x60029BB")]
		void SetActive(bool isActive);
	}
	[Serializable]
	[Token(Token = "0x200097F")]
	public class AnimatedCanvas : IAnimatedCanvas
	{
		[Token(Token = "0x4003C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Canvas canvas;

		[Token(Token = "0x4003C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x4003C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Collider collider;

		[Token(Token = "0x4003C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimatorStateData showAnimationState;

		[Token(Token = "0x4003C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimatorStateData hideAnimationState;

		[Token(Token = "0x4003C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public CanvasAnimationState state;

		[Token(Token = "0x170001E5")]
		public CanvasAnimationState AnimationState
		{
			[Token(Token = "0x60029C2")]
			[Address(RVA = "0x1144B3C", Offset = "0x1144B3C", VA = "0x1144B3C", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return default(CanvasAnimationState);
			}
			[Token(Token = "0x60029C3")]
			[Address(RVA = "0x1144B44", Offset = "0x1144B44", VA = "0x1144B44", Slot = "6")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001E6")]
		public AnimatorStateData ShowAnimationState
		{
			[Token(Token = "0x60029C4")]
			[Address(RVA = "0x1144B4C", Offset = "0x1144B4C", VA = "0x1144B4C", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E7")]
		public AnimatorStateData HideAnimationState
		{
			[Token(Token = "0x60029C5")]
			[Address(RVA = "0x1144B54", Offset = "0x1144B54", VA = "0x1144B54", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60029C0")]
		[Address(RVA = "0x1144A5C", Offset = "0x1144A5C", VA = "0x1144A5C")]
		public AnimatedCanvas()
		{
		}

		[Token(Token = "0x60029C1")]
		[Address(RVA = "0x1144A78", Offset = "0x1144A78", VA = "0x1144A78", Slot = "4")]
		public void SetActive(bool isActive)
		{
		}
	}
	[Token(Token = "0x2000980")]
	public class AnimatedCanvasHandlerData
	{
		[Token(Token = "0x4003CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<IAnimatedCanvas> showCanvas;

		[Token(Token = "0x4003CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<IAnimatedCanvas> hideCanvas;

		[Token(Token = "0x60029C6")]
		[Address(RVA = "0x1144B5C", Offset = "0x1144B5C", VA = "0x1144B5C")]
		public AnimatedCanvasHandlerData()
		{
		}
	}
	[Token(Token = "0x2000981")]
	public class AnimatedCanvasHandler : ITickable
	{
		[Token(Token = "0x4003CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly AnimatedCanvasHandlerData animatedCanvasHandlerData;

		[Token(Token = "0x4003CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly AnimationStateHandlerData animationStateHandlerData;

		[Token(Token = "0x4003CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<IAnimatedCanvas> activeCanvases;

		[Token(Token = "0x60029C7")]
		[Address(RVA = "0x1144C04", Offset = "0x1144C04", VA = "0x1144C04")]
		public AnimatedCanvasHandler(AnimatedCanvasHandlerData animatedCanvasHandlerData, AnimationStateHandlerData animationStateHandlerData)
		{
		}

		[Token(Token = "0x60029C8")]
		[Address(RVA = "0x1144C98", Offset = "0x1144C98", VA = "0x1144C98", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60029C9")]
		[Address(RVA = "0x1144DE4", Offset = "0x1144DE4", VA = "0x1144DE4")]
		private void ShowCanvas(IAnimatedCanvas animatedCanvas)
		{
		}

		[Token(Token = "0x60029CA")]
		[Address(RVA = "0x1145074", Offset = "0x1145074", VA = "0x1145074")]
		private void HideCanvas(IAnimatedCanvas animatedCanvas)
		{
		}

		[Token(Token = "0x60029CB")]
		[Address(RVA = "0x1145230", Offset = "0x1145230", VA = "0x1145230")]
		private bool TryToRemove(IAnimatedCanvas animatedCanvas)
		{
			return default(bool);
		}

		[Token(Token = "0x60029CC")]
		[Address(RVA = "0x1145358", Offset = "0x1145358", VA = "0x1145358")]
		private void RemoveCanvas(IAnimatedCanvas animatedCanvas)
		{
		}
	}
	[Token(Token = "0x2000982")]
	public class AudioTriggerComponent : MonoBehaviour
	{
		[Token(Token = "0x4003CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4003CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4003CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4003CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string[] soundToPlay;

		[Token(Token = "0x60029CD")]
		[Address(RVA = "0x1145458", Offset = "0x1145458", VA = "0x1145458")]
		public static void SetTriggerData(IgnisSoundTriggerData soundTriggerData, IRoomTimeProvider TimeProvider)
		{
		}

		[Token(Token = "0x60029CE")]
		[Address(RVA = "0x11454BC", Offset = "0x11454BC", VA = "0x11454BC")]
		public void PlaySound(string sound)
		{
		}

		[Token(Token = "0x60029CF")]
		[Address(RVA = "0x11455DC", Offset = "0x11455DC", VA = "0x11455DC")]
		public void PlayCustomEvent(string sound)
		{
		}

		[Token(Token = "0x60029D0")]
		[Address(RVA = "0x11456FC", Offset = "0x11456FC", VA = "0x11456FC")]
		public AudioTriggerComponent()
		{
		}
	}
	[Token(Token = "0x2000983")]
	public class BuyButtonReference : MonoBehaviour
	{
		[Token(Token = "0x4003CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button button;

		[Token(Token = "0x4003CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RectTransform rectTransform;

		[Token(Token = "0x4003CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RectTransform textTransform;

		[Token(Token = "0x4003CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TextMeshProUGUI priceText;

		[Token(Token = "0x60029D1")]
		[Address(RVA = "0x11457AC", Offset = "0x11457AC", VA = "0x11457AC")]
		public void SetTextWithoutIcons(string newText)
		{
		}

		[Token(Token = "0x60029D2")]
		[Address(RVA = "0x11457D0", Offset = "0x11457D0", VA = "0x11457D0")]
		public void SetCurrency(string newPrice, bool isPremium)
		{
		}

		[Token(Token = "0x60029D3")]
		[Address(RVA = "0x11458B4", Offset = "0x11458B4", VA = "0x11458B4")]
		public BuyButtonReference()
		{
		}
	}
	[Token(Token = "0x2000984")]
	public class IgnisScrollRect : ScrollRect
	{
		[Token(Token = "0x4003CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public bool isAllowedToUpdate;

		[Token(Token = "0x60029D4")]
		[Address(RVA = "0x11458BC", Offset = "0x11458BC", VA = "0x11458BC", Slot = "48")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x60029D5")]
		[Address(RVA = "0x11458D0", Offset = "0x11458D0", VA = "0x11458D0")]
		public IgnisScrollRect()
		{
		}
	}
	[Token(Token = "0x2000985")]
	[CreateAssetMenu(menuName = "Settings/Interaction/InteractionSettings")]
	public class InteractionSettings : ScriptableObject
	{
		[Token(Token = "0x4003CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] onClickSound;

		[Token(Token = "0x4003CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] onHoverSound;

		[Token(Token = "0x4003CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HapticEffect onHoverHaptic;

		[Token(Token = "0x4003CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float scrollSensitivity;

		[Token(Token = "0x4003CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("URL Data")]
		public string twitterURL;

		[Token(Token = "0x4003CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string discordURL;

		[Token(Token = "0x4003CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string twitchURL;

		[Token(Token = "0x4003CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string youtubeURL;

		[Token(Token = "0x4003CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string wikiURL;

		[Token(Token = "0x4003CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string faqURL;

		[Token(Token = "0x4003CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string autoSpectatorFaqURL;

		[Token(Token = "0x60029D6")]
		[Address(RVA = "0x11458D8", Offset = "0x11458D8", VA = "0x11458D8")]
		public InteractionSettings()
		{
		}
	}
	[Token(Token = "0x2000986")]
	public readonly struct InteractionTriggerData
	{
		[Token(Token = "0x4003CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4003CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly HapticData hapticData;

		[Token(Token = "0x4003CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly InteractionSettings interactionSettings;

		[Token(Token = "0x4003CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly PointerData pointerData;

		[Token(Token = "0x4003CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x60029D7")]
		[Address(RVA = "0x11459D8", Offset = "0x11459D8", VA = "0x11459D8")]
		public InteractionTriggerData(IgnisSoundTriggerData ignisSoundTriggerData, HapticData hapticData, InteractionSettings interactionSettings, PointerData pointerData, IRoomTimeProvider roomTimeProvider)
		{
		}
	}
	[Token(Token = "0x2000987")]
	public class InteractionTrigger : MonoBehaviour
	{
		[Token(Token = "0x4003CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Color On Highlight")]
		public Image[] hoverHighlightImages;

		[Token(Token = "0x4003CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI[] hoverHighlightText;

		[Token(Token = "0x4003CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color hoverAdditiveColor;

		[Token(Token = "0x4003CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InteractionTriggerData interactionTriggerData;

		[Token(Token = "0x4003CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private IgnisButton ignisButton;

		[Token(Token = "0x4003CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Color[] defaultImageHoverColour;

		[Token(Token = "0x4003CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color[] defaultTextHoverColour;

		[Token(Token = "0x60029D8")]
		[Address(RVA = "0x11459E8", Offset = "0x11459E8", VA = "0x11459E8")]
		private void Start()
		{
		}

		[Token(Token = "0x60029D9")]
		[Address(RVA = "0x1145F7C", Offset = "0x1145F7C", VA = "0x1145F7C")]
		private void TriggerOnPointerEnter()
		{
		}

		[Token(Token = "0x60029DA")]
		[Address(RVA = "0x11460E8", Offset = "0x11460E8", VA = "0x11460E8")]
		private void TriggerOnPointerExit()
		{
		}

		[Token(Token = "0x60029DB")]
		[Address(RVA = "0x114629C", Offset = "0x114629C", VA = "0x114629C")]
		public static void SetTriggerData(InteractionTriggerData triggerData)
		{
		}

		[Token(Token = "0x60029DC")]
		[Address(RVA = "0x1146304", Offset = "0x1146304", VA = "0x1146304")]
		public void TriggerHover()
		{
		}

		[Token(Token = "0x60029DD")]
		[Address(RVA = "0x1146498", Offset = "0x1146498", VA = "0x1146498")]
		public void TriggerOnClick()
		{
		}

		[Token(Token = "0x60029DE")]
		[Address(RVA = "0x11465A8", Offset = "0x11465A8", VA = "0x11465A8")]
		public InteractionTrigger()
		{
		}
	}
	[Token(Token = "0x2000988")]
	public class InvisibleRayCastTarget : Graphic
	{
		[Token(Token = "0x60029DF")]
		[Address(RVA = "0x11465BC", Offset = "0x11465BC", VA = "0x11465BC", Slot = "29")]
		public override void SetMaterialDirty()
		{
		}

		[Token(Token = "0x60029E0")]
		[Address(RVA = "0x11465C0", Offset = "0x11465C0", VA = "0x11465C0", Slot = "28")]
		public override void SetVerticesDirty()
		{
		}

		[Token(Token = "0x60029E1")]
		[Address(RVA = "0x11465C4", Offset = "0x11465C4", VA = "0x11465C4", Slot = "44")]
		protected override void OnPopulateMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x60029E2")]
		[Address(RVA = "0x11465DC", Offset = "0x11465DC", VA = "0x11465DC")]
		public InvisibleRayCastTarget()
		{
		}
	}
	[Token(Token = "0x2000989")]
	public class ItemGridReference : MonoBehaviour
	{
		[Token(Token = "0x4003CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("ToolList")]
		public bool isVertical;

		[Token(Token = "0x4003CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RectTransform[] headers;

		[Token(Token = "0x4003CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RectTransform[] backgrounds;

		[Token(Token = "0x4003CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BuyButtonReference interactionButton;

		[Token(Token = "0x4003CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public RectTransform scrollContent;

		[Token(Token = "0x4003CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public RectMask2D mask2D;

		[Token(Token = "0x4003CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IgnisScrollRect scrollRect;

		[Token(Token = "0x4003CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public RectTransform scrollRectTransform;

		[Token(Token = "0x4003CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TextMeshProUGUI emptyGroupText;

		[Token(Token = "0x60029E3")]
		[Address(RVA = "0x1146634", Offset = "0x1146634", VA = "0x1146634")]
		public ItemGridReference()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200098A")]
	public class ItemGridSetting
	{
		[Token(Token = "0x4003CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool buyButtonRepositioning;

		[Token(Token = "0x4003CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float swapButtonOffset;

		[Token(Token = "0x4003CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int toolsPerRow;

		[Token(Token = "0x4003CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float spacingHeight;

		[Token(Token = "0x4003CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float spacingWidth;

		[Token(Token = "0x4003CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] localizationIdsForEmptyGroup;

		[Token(Token = "0x4003CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float autoScrollSpeed;

		[Token(Token = "0x4003CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float headerMargin;

		[Token(Token = "0x4003CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float iconSideMargin;

		[Token(Token = "0x60029E4")]
		[Address(RVA = "0x1146644", Offset = "0x1146644", VA = "0x1146644")]
		public ItemGridSetting()
		{
		}
	}
	[Token(Token = "0x200098B")]
	public class ItemGridData
	{
		[Token(Token = "0x4003CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ItemGridReference itemGridReference;

		[Token(Token = "0x4003CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<ItemIconReference> availableIcons;

		[Token(Token = "0x4003CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ItemIconReference selectedIcon;

		[Token(Token = "0x4003CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int selectedIndex;

		[Token(Token = "0x4003CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int localIndex;

		[Token(Token = "0x4003CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool showingUtilityButton;

		[Token(Token = "0x4003CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool allowedToShowUtilityButton;

		[Token(Token = "0x4003CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ItemGridSetting itemGridSetting;

		[Token(Token = "0x4003CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2 iconSize;

		[Token(Token = "0x4003CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int currentIconHovered;

		[Token(Token = "0x4003CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int[] numToolsInGroup;

		[Token(Token = "0x4003CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector2 headerSize;

		[Token(Token = "0x4003CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float scrollContentHeight;

		[Token(Token = "0x4003CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float heightVisibleInScrollContent;

		[Token(Token = "0x4003CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool moveTowardsTarget;

		[Token(Token = "0x4003CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float normalizedScrollTarget;

		[Token(Token = "0x4003CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool isDirty;

		[Token(Token = "0x4003CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float currentNormalizedScrollPosition;

		[Token(Token = "0x4003CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int buttonsRegistered;

		[Token(Token = "0x4003CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool isInteractable;

		[Token(Token = "0x4003CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		public bool isBlockingInput;

		[Token(Token = "0x4003CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
		public bool isScrollable;

		[Token(Token = "0x4003CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7F")]
		public bool isShowingUtillityButton;

		[Token(Token = "0x60029E5")]
		[Address(RVA = "0x1146668", Offset = "0x1146668", VA = "0x1146668")]
		public ItemGridData()
		{
		}
	}
	[Token(Token = "0x200098C")]
	public class ItemGridViewHandlerData
	{
		[Token(Token = "0x4003CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<ItemGridData> gridsToInitialize;

		[Token(Token = "0x4003CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<ItemGridData> startUpdating;

		[Token(Token = "0x4003CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Queue<ItemGridData> stopUpdating;

		[Token(Token = "0x60029E6")]
		[Address(RVA = "0x1146678", Offset = "0x1146678", VA = "0x1146678")]
		public ItemGridViewHandlerData()
		{
		}
	}
	[Token(Token = "0x200098D")]
	public class ItemGridViewHandler : ITickable
	{
		[Token(Token = "0x4003CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ItemGridViewHandlerData itemGridViewHandlerData;

		[Token(Token = "0x4003CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly InteractionSettings interactionSettings;

		[Token(Token = "0x4003CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<ItemGridData> activeGrids;

		[Token(Token = "0x60029E7")]
		[Address(RVA = "0x1146768", Offset = "0x1146768", VA = "0x1146768")]
		public ItemGridViewHandler(ItemGridViewHandlerData itemGridViewHandlerData, InteractionSettings interactionSettings)
		{
		}

		[Token(Token = "0x60029E8")]
		[Address(RVA = "0x1146800", Offset = "0x1146800", VA = "0x1146800")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60029E9")]
		[Address(RVA = "0x1146A40", Offset = "0x1146A40", VA = "0x1146A40")]
		private void RegisterButtonsToCallback(ItemGridData gridData)
		{
		}

		[Token(Token = "0x60029EA")]
		[Address(RVA = "0x114721C", Offset = "0x114721C", VA = "0x114721C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x60029EB")]
		[Address(RVA = "0x1147374", Offset = "0x1147374", VA = "0x1147374")]
		private void ActivateGrid(ItemGridData gridToActivate)
		{
		}

		[Token(Token = "0x60029EC")]
		[Address(RVA = "0x1147128", Offset = "0x1147128", VA = "0x1147128")]
		private void DeactivateGrid(ItemGridData gridToRemove)
		{
		}

		[Token(Token = "0x60029ED")]
		[Address(RVA = "0x1147550", Offset = "0x1147550", VA = "0x1147550")]
		private void UpdateGridInteractionBlock(ItemGridData gridData)
		{
		}

		[Token(Token = "0x60029EE")]
		[Address(RVA = "0x1147638", Offset = "0x1147638", VA = "0x1147638")]
		private void UpdateSelectButton(ItemGridData gridData)
		{
		}

		[Token(Token = "0x60029EF")]
		[Address(RVA = "0x114757C", Offset = "0x114757C", VA = "0x114757C")]
		private void UpdateGridOnSelection(ItemGridData gridData)
		{
		}

		[Token(Token = "0x60029F0")]
		[Address(RVA = "0x11475AC", Offset = "0x11475AC", VA = "0x11475AC")]
		private void ForceUpdateGrid(ItemGridData gridData)
		{
		}

		[Token(Token = "0x60029F1")]
		[Address(RVA = "0x1147664", Offset = "0x1147664", VA = "0x1147664")]
		private void MoveGridToTarget(ItemGridData gridData)
		{
		}

		[Token(Token = "0x60029F2")]
		[Address(RVA = "0x1147878", Offset = "0x1147878", VA = "0x1147878")]
		private void UpdateInteractionState(ItemGridData grid)
		{
		}

		[Token(Token = "0x60029F3")]
		[Address(RVA = "0x1147080", Offset = "0x1147080", VA = "0x1147080")]
		private void UpdateHeight(ItemGridData grid, float height)
		{
		}

		[Token(Token = "0x60029F4")]
		[Address(RVA = "0x11479C4", Offset = "0x11479C4", VA = "0x11479C4")]
		private void UpdateGrid(ItemGridData gridData)
		{
		}

		[Token(Token = "0x60029F5")]
		[Address(RVA = "0x1147AF4", Offset = "0x1147AF4", VA = "0x1147AF4")]
		private void SelectIcon(int selectedIndex, ItemGridData itemGridData)
		{
		}

		[Token(Token = "0x60029F6")]
		[Address(RVA = "0x1147930", Offset = "0x1147930", VA = "0x1147930")]
		private void UpdateUtilityObjects(ItemGridData itemGridData)
		{
		}

		[Token(Token = "0x60029F7")]
		[Address(RVA = "0x1147B0C", Offset = "0x1147B0C", VA = "0x1147B0C")]
		private void SetUtilityPosition(ItemIconReference target, Transform utility, ItemGridData itemGridData)
		{
		}

		[Token(Token = "0x60029F8")]
		[Address(RVA = "0x114777C", Offset = "0x114777C", VA = "0x114777C")]
		private void UpdateSelectedSprite(ItemIconReference icon, bool selected, ItemGridData itemGridData)
		{
		}

		[Token(Token = "0x60029F9")]
		[Address(RVA = "0x1146BD4", Offset = "0x1146BD4", VA = "0x1146BD4")]
		private float UpdateItemIconPosition(ItemGridData itemGridData)
		{
			return default(float);
		}

		[Token(Token = "0x60029FA")]
		[Address(RVA = "0x1147C08", Offset = "0x1147C08", VA = "0x1147C08")]
		private void SetIconStates(int group, ItemIconReference icon, ItemGridData itemGridData)
		{
		}

		[Token(Token = "0x60029FB")]
		[Address(RVA = "0x1147BD0", Offset = "0x1147BD0", VA = "0x1147BD0")]
		private float StepLocalHeight(RectTransform rectTransform, float height)
		{
			return default(float);
		}

		[Token(Token = "0x60029FC")]
		[Address(RVA = "0x1147B94", Offset = "0x1147B94", VA = "0x1147B94")]
		private void SetRectTransformYPosition(RectTransform rectTransform, float height)
		{
		}

		[Token(Token = "0x60029FD")]
		[Address(RVA = "0x1147A54", Offset = "0x1147A54", VA = "0x1147A54")]
		private void ScrollToIcon(ItemGridData itemGridData)
		{
		}

		[Token(Token = "0x60029FE")]
		[Address(RVA = "0x1147D94", Offset = "0x1147D94", VA = "0x1147D94")]
		private void ScrollToRange(float top, float bottom, ItemGridData itemGridData)
		{
		}
	}
	[Token(Token = "0x2000990")]
	public class ItemIconReference : MonoBehaviour
	{
		[Token(Token = "0x4003CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform rectTransform;

		[Token(Token = "0x4003CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IgnisButton button;

		[Token(Token = "0x4003CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image selectedFrame;

		[Token(Token = "0x4003CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject loadingIcon;

		[Token(Token = "0x4003CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Image icon;

		[Token(Token = "0x4003CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject lockImage;

		[Token(Token = "0x4003CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshProUGUI lockConditionText;

		[Token(Token = "0x4003CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject priceFrame;

		[Token(Token = "0x4003D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public TextMeshProUGUI priceText;

		[Token(Token = "0x4003D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Image masteryImage;

		[Token(Token = "0x4003D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public int id;

		[Token(Token = "0x4003D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public IconSpriteStateSettings iconStates;

		[Token(Token = "0x4003D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform rewardSource;

		[Token(Token = "0x4003D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Optional")]
		public Image[] otherIcons;

		[Token(Token = "0x6002A02")]
		[Address(RVA = "0x1147EB0", Offset = "0x1147EB0", VA = "0x1147EB0")]
		public void ApplyItem(Item item, bool showLock, string lockCondition, bool showPrice, bool showLoadingIcon, ItemOwnership ownership)
		{
		}

		[Token(Token = "0x6002A03")]
		[Address(RVA = "0x1147D38", Offset = "0x1147D38", VA = "0x1147D38")]
		public void SetButtonSpriteStates(IconSpriteStateSettings spriteState)
		{
		}

		[Token(Token = "0x6002A04")]
		[Address(RVA = "0x11480C4", Offset = "0x11480C4", VA = "0x11480C4")]
		public ItemIconReference()
		{
		}
	}
	[Token(Token = "0x2000991")]
	public class SliderReleaseInputEvent : MonoBehaviour, IPointerUpHandler, IEventSystemHandler
	{
		[Token(Token = "0x4003D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Slider slider;

		[Token(Token = "0x4003D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Slider.SliderEvent onReleaseSlider;

		[Token(Token = "0x6002A05")]
		[Address(RVA = "0x11480CC", Offset = "0x11480CC", VA = "0x11480CC", Slot = "4")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002A06")]
		[Address(RVA = "0x1148138", Offset = "0x1148138", VA = "0x1148138")]
		public SliderReleaseInputEvent()
		{
		}
	}
	[Token(Token = "0x2000992")]
	public class TextReference : MonoBehaviour
	{
		[Token(Token = "0x4003D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform rectTransform;

		[Token(Token = "0x4003D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI text;

		[Token(Token = "0x6002A07")]
		[Address(RVA = "0x11481A0", Offset = "0x11481A0", VA = "0x11481A0")]
		public TextReference()
		{
		}
	}
	[Token(Token = "0x2000993")]
	public class ToggleReference : MonoBehaviour
	{
		[Token(Token = "0x4003D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI label;

		[Token(Token = "0x4003D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Toggle toggle;

		[Token(Token = "0x6002A08")]
		[Address(RVA = "0x11481A8", Offset = "0x11481A8", VA = "0x11481A8")]
		public ToggleReference()
		{
		}
	}
	[Token(Token = "0x2000994")]
	[RequireComponent(typeof(RectTransform))]
	[AddComponentMenu("UI/Dropdown - Ignis", 35)]
	public class Dropdown : Selectable, IPointerClickHandler, IEventSystemHandler, ISubmitHandler, ICancelHandler
	{
		[Token(Token = "0x2000995")]
		protected internal class DropdownItem : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, ICancelHandler
		{
			[Token(Token = "0x4003D1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private LocalizedText m_Text;

			[Token(Token = "0x4003D1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private Image m_Image;

			[Token(Token = "0x4003D1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[SerializeField]
			private RectTransform m_RectTransform;

			[Token(Token = "0x4003D1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[SerializeField]
			private Toggle m_Toggle;

			[Token(Token = "0x170001F1")]
			public LocalizedText text
			{
				[Token(Token = "0x6002A3A")]
				[Address(RVA = "0x114ADAC", Offset = "0x114ADAC", VA = "0x114ADAC")]
				get
				{
					return null;
				}
				[Token(Token = "0x6002A3B")]
				[Address(RVA = "0x114ADB4", Offset = "0x114ADB4", VA = "0x114ADB4")]
				set
				{
				}
			}

			[Token(Token = "0x170001F2")]
			public Image image
			{
				[Token(Token = "0x6002A3C")]
				[Address(RVA = "0x114ADBC", Offset = "0x114ADBC", VA = "0x114ADBC")]
				get
				{
					return null;
				}
				[Token(Token = "0x6002A3D")]
				[Address(RVA = "0x114ADC4", Offset = "0x114ADC4", VA = "0x114ADC4")]
				set
				{
				}
			}

			[Token(Token = "0x170001F3")]
			public RectTransform rectTransform
			{
				[Token(Token = "0x6002A3E")]
				[Address(RVA = "0x114ADCC", Offset = "0x114ADCC", VA = "0x114ADCC")]
				get
				{
					return null;
				}
				[Token(Token = "0x6002A3F")]
				[Address(RVA = "0x114ADD4", Offset = "0x114ADD4", VA = "0x114ADD4")]
				set
				{
				}
			}

			[Token(Token = "0x170001F4")]
			public Toggle toggle
			{
				[Token(Token = "0x6002A40")]
				[Address(RVA = "0x114ADDC", Offset = "0x114ADDC", VA = "0x114ADDC")]
				get
				{
					return null;
				}
				[Token(Token = "0x6002A41")]
				[Address(RVA = "0x114ADE4", Offset = "0x114ADE4", VA = "0x114ADE4")]
				set
				{
				}
			}

			[Token(Token = "0x6002A42")]
			[Address(RVA = "0x114ADEC", Offset = "0x114ADEC", VA = "0x114ADEC", Slot = "6")]
			public virtual void OnPointerEnter(PointerEventData eventData)
			{
			}

			[Token(Token = "0x6002A43")]
			[Address(RVA = "0x114AE68", Offset = "0x114AE68", VA = "0x114AE68", Slot = "7")]
			public virtual void OnCancel(BaseEventData eventData)
			{
			}

			[Token(Token = "0x6002A44")]
			[Address(RVA = "0x114AF18", Offset = "0x114AF18", VA = "0x114AF18")]
			public DropdownItem()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000996")]
		public class OptionData
		{
			[Token(Token = "0x4003D20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private string m_Text;

			[Token(Token = "0x4003D21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private UnityEngine.Sprite m_Image;

			[Token(Token = "0x4003D22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private bool m_RawText;

			[Token(Token = "0x170001F5")]
			public string text
			{
				[Token(Token = "0x6002A45")]
				[Address(RVA = "0x114AF20", Offset = "0x114AF20", VA = "0x114AF20")]
				get
				{
					return null;
				}
				[Token(Token = "0x6002A46")]
				[Address(RVA = "0x114AF28", Offset = "0x114AF28", VA = "0x114AF28")]
				set
				{
				}
			}

			[Token(Token = "0x170001F6")]
			public UnityEngine.Sprite image
			{
				[Token(Token = "0x6002A47")]
				[Address(RVA = "0x114AF30", Offset = "0x114AF30", VA = "0x114AF30")]
				get
				{
					return null;
				}
				[Token(Token = "0x6002A48")]
				[Address(RVA = "0x114AF38", Offset = "0x114AF38", VA = "0x114AF38")]
				set
				{
				}
			}

			[Token(Token = "0x170001F7")]
			public bool rawText
			{
				[Token(Token = "0x6002A49")]
				[Address(RVA = "0x114AF40", Offset = "0x114AF40", VA = "0x114AF40")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6002A4A")]
				[Address(RVA = "0x114AF48", Offset = "0x114AF48", VA = "0x114AF48")]
				set
				{
				}
			}

			[Token(Token = "0x6002A4B")]
			[Address(RVA = "0x114ADA4", Offset = "0x114ADA4", VA = "0x114ADA4")]
			public OptionData()
			{
			}

			[Token(Token = "0x6002A4C")]
			[Address(RVA = "0x1148CB8", Offset = "0x1148CB8", VA = "0x1148CB8")]
			public OptionData(string text, bool showRawText = true)
			{
			}

			[Token(Token = "0x6002A4D")]
			[Address(RVA = "0x1148E44", Offset = "0x1148E44", VA = "0x1148E44")]
			public OptionData(UnityEngine.Sprite image)
			{
			}

			[Token(Token = "0x6002A4E")]
			[Address(RVA = "0x114AF54", Offset = "0x114AF54", VA = "0x114AF54")]
			public OptionData(string text, UnityEngine.Sprite image)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000997")]
		public class OptionDataList
		{
			[Token(Token = "0x4003D23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private List<OptionData> m_Options;

			[Token(Token = "0x170001F8")]
			public List<OptionData> options
			{
				[Token(Token = "0x6002A4F")]
				[Address(RVA = "0x114AF80", Offset = "0x114AF80", VA = "0x114AF80")]
				get
				{
					return null;
				}
				[Token(Token = "0x6002A50")]
				[Address(RVA = "0x114AF88", Offset = "0x114AF88", VA = "0x114AF88")]
				set
				{
				}
			}

			[Token(Token = "0x6002A51")]
			[Address(RVA = "0x11486B8", Offset = "0x11486B8", VA = "0x11486B8")]
			public OptionDataList()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000998")]
		public class DropdownEvent : UnityEvent<int>
		{
			[Token(Token = "0x6002A52")]
			[Address(RVA = "0x1148738", Offset = "0x1148738", VA = "0x1148738")]
			public DropdownEvent()
			{
			}
		}

		[Token(Token = "0x200099A")]
		[CompilerGenerated]
		private sealed class <DelayedDestroyDropdownList>d__74 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003D26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003D27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003D28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4003D29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Dropdown <>4__this;

			[Token(Token = "0x170001F9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002A58")]
				[Address(RVA = "0x114B064", Offset = "0x114B064", VA = "0x114B064", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001FA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A5A")]
				[Address(RVA = "0x114B0AC", Offset = "0x114B0AC", VA = "0x114B0AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A55")]
			[Address(RVA = "0x114ABD0", Offset = "0x114ABD0", VA = "0x114ABD0")]
			[DebuggerHidden]
			public <DelayedDestroyDropdownList>d__74(int <>1__state)
			{
			}

			[Token(Token = "0x6002A56")]
			[Address(RVA = "0x114AFB4", Offset = "0x114AFB4", VA = "0x114AFB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A57")]
			[Address(RVA = "0x114AFB8", Offset = "0x114AFB8", VA = "0x114AFB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A59")]
			[Address(RVA = "0x114B06C", Offset = "0x114B06C", VA = "0x114B06C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4003D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private RectTransform m_Template;

		[Token(Token = "0x4003D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private LocalizedText m_CaptionText;

		[Token(Token = "0x4003D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private Image m_CaptionImage;

		[Token(Token = "0x4003D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Space]
		[SerializeField]
		private LocalizedText m_ItemText;

		[Token(Token = "0x4003D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private Image m_ItemImage;

		[Token(Token = "0x4003D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[Space]
		private int m_Value;

		[Token(Token = "0x4003D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Space]
		[SerializeField]
		private OptionDataList m_Options;

		[Token(Token = "0x4003D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Space]
		[SerializeField]
		private int m_templateSortingOrder;

		[Token(Token = "0x4003D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[Space]
		[SerializeField]
		private bool m_overideTemplateSorting;

		[Token(Token = "0x4003D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[Space]
		[SerializeField]
		private DropdownEvent m_OnValueChanged;

		[Token(Token = "0x4003D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private GameObject m_Dropdown;

		[Token(Token = "0x4003D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private GameObject m_Blocker;

		[Token(Token = "0x4003D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private List<DropdownItem> m_Items;

		[Token(Token = "0x4003D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private TweenRunner<FloatTween> m_AlphaTweenRunner;

		[Token(Token = "0x4003D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private bool validTemplate;

		[Token(Token = "0x4003D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static OptionData s_NoOptionData;

		[Token(Token = "0x170001E8")]
		public RectTransform template
		{
			[Token(Token = "0x6002A09")]
			[Address(RVA = "0x11481B0", Offset = "0x11481B0", VA = "0x11481B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A0A")]
			[Address(RVA = "0x11481B8", Offset = "0x11481B8", VA = "0x11481B8")]
			set
			{
			}
		}

		[Token(Token = "0x170001E9")]
		public LocalizedText captionText
		{
			[Token(Token = "0x6002A0B")]
			[Address(RVA = "0x11483A8", Offset = "0x11483A8", VA = "0x11483A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A0C")]
			[Address(RVA = "0x11483B0", Offset = "0x11483B0", VA = "0x11483B0")]
			set
			{
			}
		}

		[Token(Token = "0x170001EA")]
		public Image captionImage
		{
			[Token(Token = "0x6002A0D")]
			[Address(RVA = "0x11483B8", Offset = "0x11483B8", VA = "0x11483B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A0E")]
			[Address(RVA = "0x11483C0", Offset = "0x11483C0", VA = "0x11483C0")]
			set
			{
			}
		}

		[Token(Token = "0x170001EB")]
		public LocalizedText itemText
		{
			[Token(Token = "0x6002A0F")]
			[Address(RVA = "0x11483C8", Offset = "0x11483C8", VA = "0x11483C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A10")]
			[Address(RVA = "0x11483D0", Offset = "0x11483D0", VA = "0x11483D0")]
			set
			{
			}
		}

		[Token(Token = "0x170001EC")]
		public Image itemImage
		{
			[Token(Token = "0x6002A11")]
			[Address(RVA = "0x11483D8", Offset = "0x11483D8", VA = "0x11483D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A12")]
			[Address(RVA = "0x11483E0", Offset = "0x11483E0", VA = "0x11483E0")]
			set
			{
			}
		}

		[Token(Token = "0x170001ED")]
		public List<OptionData> options
		{
			[Token(Token = "0x6002A13")]
			[Address(RVA = "0x11483E8", Offset = "0x11483E8", VA = "0x11483E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A14")]
			[Address(RVA = "0x1148404", Offset = "0x1148404", VA = "0x1148404")]
			set
			{
			}
		}

		[Token(Token = "0x170001EE")]
		public DropdownEvent onValueChanged
		{
			[Token(Token = "0x6002A15")]
			[Address(RVA = "0x1148420", Offset = "0x1148420", VA = "0x1148420")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002A16")]
			[Address(RVA = "0x1148428", Offset = "0x1148428", VA = "0x1148428")]
			set
			{
			}
		}

		[Token(Token = "0x170001EF")]
		public int value
		{
			[Token(Token = "0x6002A17")]
			[Address(RVA = "0x1148430", Offset = "0x1148430", VA = "0x1148430")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002A18")]
			[Address(RVA = "0x1148438", Offset = "0x1148438", VA = "0x1148438")]
			set
			{
			}
		}

		[Token(Token = "0x170001F0")]
		public bool IsExpanded
		{
			[Token(Token = "0x6002A1B")]
			[Address(RVA = "0x1148558", Offset = "0x1148558", VA = "0x1148558")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002A19")]
		[Address(RVA = "0x1148550", Offset = "0x1148550", VA = "0x1148550")]
		public void SetValueWithoutNotify(int input)
		{
		}

		[Token(Token = "0x6002A1A")]
		[Address(RVA = "0x1148440", Offset = "0x1148440", VA = "0x1148440")]
		private void SetValue(int value, bool sendCallback = true)
		{
		}

		[Token(Token = "0x6002A1C")]
		[Address(RVA = "0x11485B8", Offset = "0x11485B8", VA = "0x11485B8")]
		protected Dropdown()
		{
		}

		[Token(Token = "0x6002A1D")]
		[Address(RVA = "0x1148780", Offset = "0x1148780", VA = "0x1148780", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6002A1E")]
		[Address(RVA = "0x11488D0", Offset = "0x11488D0", VA = "0x11488D0", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6002A1F")]
		[Address(RVA = "0x11488EC", Offset = "0x11488EC", VA = "0x11488EC", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6002A20")]
		[Address(RVA = "0x11481C0", Offset = "0x11481C0", VA = "0x11481C0")]
		public void RefreshShownValue()
		{
		}

		[Token(Token = "0x6002A21")]
		[Address(RVA = "0x1148AE8", Offset = "0x1148AE8", VA = "0x1148AE8")]
		public void AddOptions(List<OptionData> options)
		{
		}

		[Token(Token = "0x6002A22")]
		[Address(RVA = "0x1148B50", Offset = "0x1148B50", VA = "0x1148B50")]
		public void AddOptions(List<string> options)
		{
		}

		[Token(Token = "0x6002A23")]
		[Address(RVA = "0x1148CEC", Offset = "0x1148CEC", VA = "0x1148CEC")]
		public void AddOptions(List<UnityEngine.Sprite> options)
		{
		}

		[Token(Token = "0x6002A24")]
		[Address(RVA = "0x1148E6C", Offset = "0x1148E6C", VA = "0x1148E6C")]
		public void ClearOptions()
		{
		}

		[Token(Token = "0x6002A25")]
		[Address(RVA = "0x1148EE4", Offset = "0x1148EE4", VA = "0x1148EE4")]
		private void SetupTemplate()
		{
		}

		[Token(Token = "0x6002A26")]
		private static T GetOrAddComponent<T>(GameObject go) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6002A27")]
		[Address(RVA = "0x1149394", Offset = "0x1149394", VA = "0x1149394", Slot = "42")]
		public virtual void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6002A28")]
		[Address(RVA = "0x1149FD8", Offset = "0x1149FD8", VA = "0x1149FD8", Slot = "43")]
		public virtual void OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6002A29")]
		[Address(RVA = "0x1149FDC", Offset = "0x1149FDC", VA = "0x1149FDC", Slot = "44")]
		public virtual void OnCancel(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6002A2A")]
		[Address(RVA = "0x1149398", Offset = "0x1149398", VA = "0x1149398")]
		public void Show()
		{
		}

		[Token(Token = "0x6002A2B")]
		[Address(RVA = "0x114A504", Offset = "0x114A504", VA = "0x114A504", Slot = "45")]
		protected virtual GameObject CreateBlocker(Canvas rootCanvas)
		{
			return null;
		}

		[Token(Token = "0x6002A2C")]
		[Address(RVA = "0x114A810", Offset = "0x114A810", VA = "0x114A810", Slot = "46")]
		protected virtual void DestroyBlocker(GameObject blocker)
		{
		}

		[Token(Token = "0x6002A2D")]
		[Address(RVA = "0x114A868", Offset = "0x114A868", VA = "0x114A868", Slot = "47")]
		protected virtual GameObject CreateDropdownList(GameObject template)
		{
			return null;
		}

		[Token(Token = "0x6002A2E")]
		[Address(RVA = "0x114A8D4", Offset = "0x114A8D4", VA = "0x114A8D4", Slot = "48")]
		protected virtual void DestroyDropdownList(GameObject dropdownList)
		{
		}

		[Token(Token = "0x6002A2F")]
		[Address(RVA = "0x114A92C", Offset = "0x114A92C", VA = "0x114A92C", Slot = "49")]
		protected virtual DropdownItem CreateItem(DropdownItem itemTemplate)
		{
			return null;
		}

		[Token(Token = "0x6002A30")]
		[Address(RVA = "0x114A998", Offset = "0x114A998", VA = "0x114A998", Slot = "50")]
		protected virtual void DestroyItem(DropdownItem item)
		{
		}

		[Token(Token = "0x6002A31")]
		[Address(RVA = "0x114A0F4", Offset = "0x114A0F4", VA = "0x114A0F4")]
		private DropdownItem AddItem(OptionData data, bool selected, DropdownItem itemTemplate, List<DropdownItem> items)
		{
			return null;
		}

		[Token(Token = "0x6002A32")]
		[Address(RVA = "0x114A99C", Offset = "0x114A99C", VA = "0x114A99C")]
		private void AlphaFadeList(float duration, float alpha)
		{
		}

		[Token(Token = "0x6002A33")]
		[Address(RVA = "0x114A3E0", Offset = "0x114A3E0", VA = "0x114A3E0")]
		private void AlphaFadeList(float duration, float start, float end)
		{
		}

		[Token(Token = "0x6002A34")]
		[Address(RVA = "0x114AAA4", Offset = "0x114AAA4", VA = "0x114AAA4")]
		private void SetAlpha(float alpha)
		{
		}

		[Token(Token = "0x6002A35")]
		[Address(RVA = "0x1149FE0", Offset = "0x1149FE0", VA = "0x1149FE0")]
		public void Hide()
		{
		}

		[Token(Token = "0x6002A36")]
		[Address(RVA = "0x114AB58", Offset = "0x114AB58", VA = "0x114AB58")]
		[IteratorStateMachine(typeof(<DelayedDestroyDropdownList>d__74))]
		private IEnumerator DelayedDestroyDropdownList(float delay)
		{
			return null;
		}

		[Token(Token = "0x6002A37")]
		[Address(RVA = "0x1148980", Offset = "0x1148980", VA = "0x1148980")]
		private void ImmediateDestroyDropdownList()
		{
		}

		[Token(Token = "0x6002A38")]
		[Address(RVA = "0x114ABF8", Offset = "0x114ABF8", VA = "0x114ABF8")]
		private void OnSelectItem(Toggle toggle)
		{
		}
	}
	[Token(Token = "0x200099B")]
	internal static class ListPool<T>
	{
		[Token(Token = "0x4003D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ObjectPool<List<T>> s_ListPool;

		[Token(Token = "0x6002A5B")]
		private static void Clear(List<T> l)
		{
		}

		[Token(Token = "0x6002A5C")]
		public static List<T> Get()
		{
			return null;
		}

		[Token(Token = "0x6002A5D")]
		public static void Release(List<T> toRelease)
		{
		}
	}
	[Token(Token = "0x200099C")]
	internal interface ITweenValue
	{
		[Token(Token = "0x170001FB")]
		bool ignoreTimeScale
		{
			[Token(Token = "0x6002A60")]
			get;
		}

		[Token(Token = "0x170001FC")]
		float duration
		{
			[Token(Token = "0x6002A61")]
			get;
		}

		[Token(Token = "0x6002A5F")]
		void TweenValue(float floatPercentage);

		[Token(Token = "0x6002A62")]
		bool ValidTarget();
	}
	[Token(Token = "0x200099D")]
	internal struct ColorTween : ITweenValue
	{
		[Token(Token = "0x200099E")]
		public enum ColorTweenMode
		{
			[Token(Token = "0x4003D32")]
			All,
			[Token(Token = "0x4003D33")]
			RGB,
			[Token(Token = "0x4003D34")]
			Alpha
		}

		[Token(Token = "0x200099F")]
		public class ColorTweenCallback : UnityEvent<Color>
		{
			[Token(Token = "0x6002A72")]
			[Address(RVA = "0x114B28C", Offset = "0x114B28C", VA = "0x114B28C")]
			public ColorTweenCallback()
			{
			}
		}

		[Token(Token = "0x4003D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ColorTweenCallback m_Target;

		[Token(Token = "0x4003D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Color m_StartColor;

		[Token(Token = "0x4003D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Color m_TargetColor;

		[Token(Token = "0x4003D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ColorTweenMode m_TweenMode;

		[Token(Token = "0x4003D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_Duration;

		[Token(Token = "0x4003D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool m_IgnoreTimeScale;

		[Token(Token = "0x170001FD")]
		public Color startColor
		{
			[Token(Token = "0x6002A63")]
			[Address(RVA = "0x114B0B4", Offset = "0x114B0B4", VA = "0x114B0B4")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6002A64")]
			[Address(RVA = "0x114B0C0", Offset = "0x114B0C0", VA = "0x114B0C0")]
			set
			{
			}
		}

		[Token(Token = "0x170001FE")]
		public Color targetColor
		{
			[Token(Token = "0x6002A65")]
			[Address(RVA = "0x114B0CC", Offset = "0x114B0CC", VA = "0x114B0CC")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6002A66")]
			[Address(RVA = "0x114B0D8", Offset = "0x114B0D8", VA = "0x114B0D8")]
			set
			{
			}
		}

		[Token(Token = "0x170001FF")]
		public ColorTweenMode tweenMode
		{
			[Token(Token = "0x6002A67")]
			[Address(RVA = "0x114B0E4", Offset = "0x114B0E4", VA = "0x114B0E4")]
			get
			{
				return default(ColorTweenMode);
			}
			[Token(Token = "0x6002A68")]
			[Address(RVA = "0x114B0EC", Offset = "0x114B0EC", VA = "0x114B0EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000200")]
		public float duration
		{
			[Token(Token = "0x6002A69")]
			[Address(RVA = "0x114B0F4", Offset = "0x114B0F4", VA = "0x114B0F4", Slot = "6")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002A6A")]
			[Address(RVA = "0x114B0FC", Offset = "0x114B0FC", VA = "0x114B0FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000201")]
		public bool ignoreTimeScale
		{
			[Token(Token = "0x6002A6B")]
			[Address(RVA = "0x114B104", Offset = "0x114B104", VA = "0x114B104", Slot = "5")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002A6C")]
			[Address(RVA = "0x114B10C", Offset = "0x114B10C", VA = "0x114B10C")]
			set
			{
			}
		}

		[Token(Token = "0x6002A6D")]
		[Address(RVA = "0x114B118", Offset = "0x114B118", VA = "0x114B118", Slot = "4")]
		public void TweenValue(float floatPercentage)
		{
		}

		[Token(Token = "0x6002A6E")]
		[Address(RVA = "0x114B204", Offset = "0x114B204", VA = "0x114B204")]
		public void AddOnChangedCallback(UnityAction<Color> callback)
		{
		}

		[Token(Token = "0x6002A6F")]
		[Address(RVA = "0x114B2D4", Offset = "0x114B2D4", VA = "0x114B2D4")]
		public bool GetIgnoreTimescale()
		{
			return default(bool);
		}

		[Token(Token = "0x6002A70")]
		[Address(RVA = "0x114B2DC", Offset = "0x114B2DC", VA = "0x114B2DC")]
		public float GetDuration()
		{
			return default(float);
		}

		[Token(Token = "0x6002A71")]
		[Address(RVA = "0x114B1F4", Offset = "0x114B1F4", VA = "0x114B1F4", Slot = "7")]
		public bool ValidTarget()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20009A0")]
	internal struct FloatTween : ITweenValue
	{
		[Token(Token = "0x20009A1")]
		public class FloatTweenCallback : UnityEvent<float>
		{
			[Token(Token = "0x6002A80")]
			[Address(RVA = "0x114B3C4", Offset = "0x114B3C4", VA = "0x114B3C4")]
			public FloatTweenCallback()
			{
			}
		}

		[Token(Token = "0x4003D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private FloatTweenCallback m_Target;

		[Token(Token = "0x4003D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float m_StartValue;

		[Token(Token = "0x4003D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float m_TargetValue;

		[Token(Token = "0x4003D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float m_Duration;

		[Token(Token = "0x4003D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool m_IgnoreTimeScale;

		[Token(Token = "0x17000202")]
		public float startValue
		{
			[Token(Token = "0x6002A73")]
			[Address(RVA = "0x114B2E4", Offset = "0x114B2E4", VA = "0x114B2E4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002A74")]
			[Address(RVA = "0x114B2EC", Offset = "0x114B2EC", VA = "0x114B2EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000203")]
		public float targetValue
		{
			[Token(Token = "0x6002A75")]
			[Address(RVA = "0x114B2F4", Offset = "0x114B2F4", VA = "0x114B2F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002A76")]
			[Address(RVA = "0x114B2FC", Offset = "0x114B2FC", VA = "0x114B2FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000204")]
		public float duration
		{
			[Token(Token = "0x6002A77")]
			[Address(RVA = "0x114B304", Offset = "0x114B304", VA = "0x114B304", Slot = "6")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002A78")]
			[Address(RVA = "0x114B30C", Offset = "0x114B30C", VA = "0x114B30C")]
			set
			{
			}
		}

		[Token(Token = "0x17000205")]
		public bool ignoreTimeScale
		{
			[Token(Token = "0x6002A79")]
			[Address(RVA = "0x114B314", Offset = "0x114B314", VA = "0x114B314", Slot = "5")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002A7A")]
			[Address(RVA = "0x114B31C", Offset = "0x114B31C", VA = "0x114B31C")]
			set
			{
			}
		}

		[Token(Token = "0x6002A7B")]
		[Address(RVA = "0x114B328", Offset = "0x114B328", VA = "0x114B328", Slot = "4")]
		public void TweenValue(float floatPercentage)
		{
		}

		[Token(Token = "0x6002A7C")]
		[Address(RVA = "0x114AA1C", Offset = "0x114AA1C", VA = "0x114AA1C")]
		public void AddOnChangedCallback(UnityAction<float> callback)
		{
		}

		[Token(Token = "0x6002A7D")]
		[Address(RVA = "0x114B40C", Offset = "0x114B40C", VA = "0x114B40C")]
		public bool GetIgnoreTimescale()
		{
			return default(bool);
		}

		[Token(Token = "0x6002A7E")]
		[Address(RVA = "0x114B414", Offset = "0x114B414", VA = "0x114B414")]
		public float GetDuration()
		{
			return default(float);
		}

		[Token(Token = "0x6002A7F")]
		[Address(RVA = "0x114B3B4", Offset = "0x114B3B4", VA = "0x114B3B4", Slot = "7")]
		public bool ValidTarget()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20009A2")]
	internal class TweenRunner<T> where T : struct, ITweenValue
	{
		[Token(Token = "0x20009A3")]
		[CompilerGenerated]
		private sealed class <Start>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003D3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4003D3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x4003D3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T tweenInfo;

			[Token(Token = "0x4003D3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private float <elapsedTime>5__2;

			[Token(Token = "0x17000206")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002A89")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000207")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002A8B")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002A86")]
			[DebuggerHidden]
			public <Start>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6002A87")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002A88")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002A8A")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4003D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected MonoBehaviour m_CoroutineContainer;

		[Token(Token = "0x4003D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected IEnumerator m_Tween;

		[Token(Token = "0x6002A81")]
		[IteratorStateMachine(typeof(TweenRunner<>.<Start>d__2))]
		private static IEnumerator Start(T tweenInfo)
		{
			return null;
		}

		[Token(Token = "0x6002A82")]
		public void Init(MonoBehaviour coroutineContainer)
		{
		}

		[Token(Token = "0x6002A83")]
		public void StartTween(T info)
		{
		}

		[Token(Token = "0x6002A84")]
		public void StopTween()
		{
		}

		[Token(Token = "0x6002A85")]
		public TweenRunner()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20009A4")]
	public struct Vector3Short
	{
		[Token(Token = "0x4003D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short x;

		[Token(Token = "0x4003D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public short y;

		[Token(Token = "0x4003D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public short z;

		[Token(Token = "0x6002A8C")]
		[Address(RVA = "0x114B41C", Offset = "0x114B41C", VA = "0x114B41C")]
		public Vector3Short(short x, short y, short z)
		{
		}

		[Token(Token = "0x6002A8D")]
		[Address(RVA = "0x114B42C", Offset = "0x114B42C", VA = "0x114B42C")]
		public static Vector3 ToVector3Sclaed(Vector3Short vector3Short, int margin)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002A8E")]
		[Address(RVA = "0x114B4F8", Offset = "0x114B4F8", VA = "0x114B4F8")]
		public static Vector3Short FromVector3ScaledClamped(Vector3 vector3, int margin)
		{
			return default(Vector3Short);
		}
	}
	[Serializable]
	[Token(Token = "0x20009A5")]
	public struct Vector3UShort
	{
		[Token(Token = "0x4003D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ushort x;

		[Token(Token = "0x4003D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public ushort y;

		[Token(Token = "0x4003D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ushort z;

		[Token(Token = "0x6002A8F")]
		[Address(RVA = "0x114B5FC", Offset = "0x114B5FC", VA = "0x114B5FC")]
		public Vector3UShort(ushort x, ushort y, ushort z)
		{
		}

		[Token(Token = "0x6002A90")]
		[Address(RVA = "0x114B60C", Offset = "0x114B60C", VA = "0x114B60C")]
		public static Vector3 ToVector3(Vector3UShort vector3UShort)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002A91")]
		[Address(RVA = "0x114B6D0", Offset = "0x114B6D0", VA = "0x114B6D0")]
		public static Vector3UShort FromVector3(Vector3 vector3)
		{
			return default(Vector3UShort);
		}
	}
	[Token(Token = "0x20009A6")]
	public enum SymbolToLocalization
	{
		[Token(Token = "0x4003D47")]
		Desktop,
		[Token(Token = "0x4003D48")]
		Quest,
		[Token(Token = "0x4003D49")]
		Steam,
		[Token(Token = "0x4003D4A")]
		Pico
	}
	[Serializable]
	[Token(Token = "0x20009A7")]
	public class SymbolSpecificLocalization
	{
		[Token(Token = "0x4003D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private SymbolLocalizationId[] platformLocalizationIds;

		[Token(Token = "0x6002A92")]
		[Address(RVA = "0x114B734", Offset = "0x114B734", VA = "0x114B734")]
		public string GetPlatformLocalizationId()
		{
			return null;
		}

		[Token(Token = "0x6002A93")]
		[Address(RVA = "0x114B768", Offset = "0x114B768", VA = "0x114B768")]
		private SymbolToLocalization GetPlatform()
		{
			return default(SymbolToLocalization);
		}

		[Token(Token = "0x6002A94")]
		[Address(RVA = "0x114B770", Offset = "0x114B770", VA = "0x114B770")]
		public SymbolSpecificLocalization()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20009A8")]
	public class SymbolLocalizationId
	{
		[Token(Token = "0x4003D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SymbolToLocalization symbol;

		[Token(Token = "0x4003D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string localizationId;

		[Token(Token = "0x6002A95")]
		[Address(RVA = "0x114B7C8", Offset = "0x114B7C8", VA = "0x114B7C8")]
		public SymbolLocalizationId()
		{
		}
	}
	[Token(Token = "0x20009A9")]
	[RequireComponent(typeof(Camera))]
	public class VrCameraInitializer : MonoBehaviour
	{
		[Token(Token = "0x6002A96")]
		[Address(RVA = "0x114B7D0", Offset = "0x114B7D0", VA = "0x114B7D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002A97")]
		[Address(RVA = "0x114B8AC", Offset = "0x114B8AC", VA = "0x114B8AC")]
		public VrCameraInitializer()
		{
		}
	}
	[Token(Token = "0x20009AA")]
	public class VisualQualityHandlerData
	{
		[Token(Token = "0x4003D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Queue qualityChangeRequest;

		[Token(Token = "0x4003D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool shouldEnablePostprocessing;

		[Token(Token = "0x4003D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SupportedPlatforms currentPlatform;

		[Token(Token = "0x4003D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public QualityPlatformSetting qualitySettings;

		[Token(Token = "0x6002A98")]
		[Address(RVA = "0x114B8B4", Offset = "0x114B8B4", VA = "0x114B8B4")]
		public VisualQualityHandlerData()
		{
		}
	}
	[Token(Token = "0x20009AB")]
	public class VisualQualityHandler : ITickable
	{
		[StructLayout(3)]
		[Token(Token = "0x20009AC")]
		[CompilerGenerated]
		private struct <LoadVisualSettings>d__10 : IAsyncStateMachine
		{
			[Token(Token = "0x4003D5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4003D5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4003D5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public VisualQualityHandler <>4__this;

			[Token(Token = "0x4003D5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private AsyncOperationHandle<IList<IResourceLocation>> <result>5__2;

			[Token(Token = "0x4003D5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private AsyncOperationHandle<VisualQualitySettings> <handle>5__3;

			[Token(Token = "0x4003D5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private TaskAwaiter<IList<IResourceLocation>> <>u__1;

			[Token(Token = "0x4003D60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private TaskAwaiter<VisualQualitySettings> <>u__2;

			[Token(Token = "0x6002AA0")]
			[Address(RVA = "0x114BDE0", Offset = "0x114BDE0", VA = "0x114BDE0", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6002AA1")]
			[Address(RVA = "0x114C2C8", Offset = "0x114C2C8", VA = "0x114C2C8", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4003D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly VisualQualityHandlerData visualQualityHandlerData;

		[Token(Token = "0x4003D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly TrailerData trailerData;

		[Token(Token = "0x4003D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly SceneHandlerData sceneHandlerData;

		[Token(Token = "0x4003D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int currentSceneIndex;

		[Token(Token = "0x4003D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private VisualQualitySettings visualQualitySettings;

		[Token(Token = "0x4003D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool shouldAllowPPDebug;

		[Token(Token = "0x4003D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool allowPP;

		[Token(Token = "0x4003D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private bool visualSettingsIntialized;

		[Token(Token = "0x6002A99")]
		[Address(RVA = "0x114B91C", Offset = "0x114B91C", VA = "0x114B91C")]
		public VisualQualityHandler(VisualQualityHandlerData visualQualityHandlerData, TrailerData trailerData, SceneHandlerData sceneHandlerData)
		{
		}

		[Token(Token = "0x6002A9A")]
		[Address(RVA = "0x114B958", Offset = "0x114B958", VA = "0x114B958")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6002A9B")]
		[Address(RVA = "0x114B95C", Offset = "0x114B95C", VA = "0x114B95C")]
		[AsyncStateMachine(typeof(<LoadVisualSettings>d__10))]
		private void LoadVisualSettings()
		{
		}

		[Token(Token = "0x6002A9C")]
		[Address(RVA = "0x114B9F4", Offset = "0x114B9F4", VA = "0x114B9F4")]
		private void SetupDebug()
		{
		}

		[Token(Token = "0x6002A9D")]
		[Address(RVA = "0x114B9F8", Offset = "0x114B9F8", VA = "0x114B9F8")]
		private void SelectVisualQuality(DefaultPlatformQuality quality)
		{
		}

		[Token(Token = "0x6002A9E")]
		[Address(RVA = "0x114BAA0", Offset = "0x114BAA0", VA = "0x114BAA0", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002A9F")]
		[Address(RVA = "0x114BBA0", Offset = "0x114BBA0", VA = "0x114BBA0")]
		private void ApplyQuality()
		{
		}
	}
	[Token(Token = "0x20009AE")]
	public enum DefaultPlatformQuality
	{
		[Token(Token = "0x4003D63")]
		VeryLow,
		[Token(Token = "0x4003D64")]
		Low,
		[Token(Token = "0x4003D65")]
		Medium,
		[Token(Token = "0x4003D66")]
		High,
		[Token(Token = "0x4003D67")]
		VeryHigh,
		[Token(Token = "0x4003D68")]
		Ultra
	}
	[Token(Token = "0x20009AF")]
	public enum SupportedPlatforms
	{
		[Token(Token = "0x4003D6A")]
		None = 0,
		[Token(Token = "0x4003D6B")]
		Editor = 1,
		[Token(Token = "0x4003D6C")]
		StandAloneDesktop = 2,
		[Token(Token = "0x4003D6D")]
		SteamVR = 3,
		[Token(Token = "0x4003D6E")]
		Arcades = 4,
		[Token(Token = "0x4003D6F")]
		LIV = 5,
		[Token(Token = "0x4003D70")]
		OculusQuest_1 = 10,
		[Token(Token = "0x4003D71")]
		OculusQuest_2 = 11,
		[Token(Token = "0x4003D72")]
		OculusQuest_3 = 12,
		[Token(Token = "0x4003D73")]
		Rift_S = 13,
		[Token(Token = "0x4003D74")]
		PicoNeo3 = 14,
		[Token(Token = "0x4003D75")]
		Pico4 = 15
	}
	[Serializable]
	[Token(Token = "0x20009B0")]
	[CreateAssetMenu(fileName = "VisualQualitySettings", menuName = "Settings/Performance/VisualQualitySettings", order = 1)]
	public class VisualQualitySettings : ScriptableObject
	{
		[Token(Token = "0x4003D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public QualityPlatformSetting[] visualPlatformSetting;

		[Token(Token = "0x6002AA4")]
		[Address(RVA = "0x114C2F8", Offset = "0x114C2F8", VA = "0x114C2F8")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6002AA5")]
		[Address(RVA = "0x114C3AC", Offset = "0x114C3AC", VA = "0x114C3AC")]
		public VisualQualitySettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20009B1")]
	public class QualityPlatformSetting
	{
		[Token(Token = "0x4003D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		[ReadOnly]
		public string name;

		[Token(Token = "0x4003D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SupportedPlatforms platform;

		[Token(Token = "0x4003D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public DefaultPlatformQuality defaultPlatformQuality;

		[Token(Token = "0x4003D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UniversalRenderPipelineAsset universalRenderPipelineAsset;

		[Token(Token = "0x4003D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool shouldEnablePostprocessing;

		[Token(Token = "0x6002AA6")]
		[Address(RVA = "0x114C3B4", Offset = "0x114C3B4", VA = "0x114C3B4")]
		public QualityPlatformSetting()
		{
		}
	}
	[Token(Token = "0x20009B2")]
	[CreateAssetMenu(menuName = "Settings/Editor/LocalizationSettings", fileName = "LocalizationSettings")]
	public class LocalizationSettings : ScriptableObject
	{
		[Token(Token = "0x4003D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TMP_FontAsset russianFont;

		[Token(Token = "0x4003D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TMP_FontAsset romanFont;

		[Token(Token = "0x4003D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TMP_FontAsset cjkFont;

		[Token(Token = "0x6002AA7")]
		[Address(RVA = "0x114C3BC", Offset = "0x114C3BC", VA = "0x114C3BC")]
		public LocalizationSettings()
		{
		}
	}
}
namespace Ignis.Utility
{
	[Token(Token = "0x20009B3")]
	public class AssetRequest<T>
	{
		[Token(Token = "0x4003D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T result;

		[Token(Token = "0x6002AA8")]
		public AssetRequest()
		{
		}
	}
	[Token(Token = "0x20009B4")]
	public static class AddressableUtility
	{
		[Token(Token = "0x20009B5")]
		[CompilerGenerated]
		private sealed class <GetAsset>d__0<T> : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003D80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4003D81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x4003D82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string id;

			[Token(Token = "0x4003D83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AssetRequest<T> request;

			[Token(Token = "0x4003D84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private AsyncOperationHandle<T> <handle>5__2;

			[Token(Token = "0x17000208")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002AAE")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000209")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002AB0")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002AAB")]
			[DebuggerHidden]
			public <GetAsset>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6002AAC")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002AAD")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002AAF")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20009B6")]
		[CompilerGenerated]
		private sealed class <GetKeyExist>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003D85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003D86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003D87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string id;

			[Token(Token = "0x4003D88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AssetRequest<bool> request;

			[Token(Token = "0x4003D89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private AsyncOperationHandle<IList<IResourceLocation>> <asyncKeyExists>5__2;

			[Token(Token = "0x1700020A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002AB4")]
				[Address(RVA = "0x114C6B4", Offset = "0x114C6B4", VA = "0x114C6B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700020B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002AB6")]
				[Address(RVA = "0x114C6FC", Offset = "0x114C6FC", VA = "0x114C6FC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002AB1")]
			[Address(RVA = "0x114C438", Offset = "0x114C438", VA = "0x114C438")]
			[DebuggerHidden]
			public <GetKeyExist>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6002AB2")]
			[Address(RVA = "0x114C460", Offset = "0x114C460", VA = "0x114C460", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002AB3")]
			[Address(RVA = "0x114C464", Offset = "0x114C464", VA = "0x114C464", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002AB5")]
			[Address(RVA = "0x114C6BC", Offset = "0x114C6BC", VA = "0x114C6BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6002AA9")]
		[IteratorStateMachine(typeof(<GetAsset>d__0<>))]
		public static IEnumerator GetAsset<T>(string id, AssetRequest<T> request)
		{
			return null;
		}

		[Token(Token = "0x6002AAA")]
		[Address(RVA = "0x114C3C4", Offset = "0x114C3C4", VA = "0x114C3C4")]
		[IteratorStateMachine(typeof(<GetKeyExist>d__1))]
		public static IEnumerator GetKeyExist(string id, AssetRequest<bool> request)
		{
			return null;
		}
	}
	[Token(Token = "0x20009B7")]
	public static class UiUtillity
	{
		[Token(Token = "0x6002AB7")]
		[Address(RVA = "0x114C704", Offset = "0x114C704", VA = "0x114C704")]
		public static float StepLocalHeight(RectTransform rectTransform, float height, float spacing)
		{
			return default(float);
		}

		[Token(Token = "0x6002AB8")]
		[Address(RVA = "0x114C744", Offset = "0x114C744", VA = "0x114C744")]
		public static void SetRectTransformHeight(RectTransform rectTransform, float height)
		{
		}

		[Token(Token = "0x6002AB9")]
		[Address(RVA = "0x114C77C", Offset = "0x114C77C", VA = "0x114C77C")]
		public static float StepLocalHeight(Transform transform, float height, float spacing)
		{
			return default(float);
		}

		[Token(Token = "0x6002ABA")]
		[Address(RVA = "0x114C7A0", Offset = "0x114C7A0", VA = "0x114C7A0")]
		public static void SetLocalTransformHeight(Transform transform, float height)
		{
		}

		[Token(Token = "0x6002ABB")]
		[Address(RVA = "0x114C7D8", Offset = "0x114C7D8", VA = "0x114C7D8")]
		public static float Remap(this float from, float fromMin, float fromMax, float toMin, float toMax)
		{
			return default(float);
		}

		[Token(Token = "0x6002ABC")]
		[Address(RVA = "0x114C7F4", Offset = "0x114C7F4", VA = "0x114C7F4")]
		public static void SetIconReward(MissionRewardIcon reference, PlayerMissionReward reward, CustomizationData customizationData, MissionSettings missionSettings)
		{
		}

		[Token(Token = "0x6002ABD")]
		[Address(RVA = "0x114C928", Offset = "0x114C928", VA = "0x114C928")]
		public static void AddEventTrigger(EventTrigger eventTrigger, EventTriggerType eventTriggerType, UnityAction<BaseEventData> unityAction)
		{
		}

		[Token(Token = "0x6002ABE")]
		[Address(RVA = "0x114CA44", Offset = "0x114CA44", VA = "0x114CA44")]
		public static bool IsOwningItemPack(Item item, CustomizationData customizationData)
		{
			return default(bool);
		}

		[Token(Token = "0x6002ABF")]
		[Address(RVA = "0x114CC40", Offset = "0x114CC40", VA = "0x114CC40")]
		public static bool IsItemPartOfPackHidden(Item item, CustomizationData customizationData)
		{
			return default(bool);
		}

		[Token(Token = "0x6002AC0")]
		[Address(RVA = "0x114CE68", Offset = "0x114CE68", VA = "0x114CE68")]
		public static void SetMissionDescriptionTemplateArguments(LocalizedText reference, MissionProgressBase progress, Mission mission, CustomizationData customizationData)
		{
		}

		[Token(Token = "0x6002AC1")]
		[Address(RVA = "0x114CFE4", Offset = "0x114CFE4", VA = "0x114CFE4")]
		public static bool SetProgressionBarMaterialColor(MissionProgressBase progress, Image barImage, Material barBlueMaterial, Material barGreenMaterial)
		{
			return default(bool);
		}
	}
}
namespace Ignis.Triggers
{
	[Token(Token = "0x20009B8")]
	public struct ContinousSoundData
	{
		[Token(Token = "0x4003D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string[] ids;

		[Token(Token = "0x4003D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Transform transform;

		[Token(Token = "0x6002AC2")]
		[Address(RVA = "0x114D194", Offset = "0x114D194", VA = "0x114D194")]
		public ContinousSoundData(string[] ids, Transform transform)
		{
		}
	}
	[Token(Token = "0x20009B9")]
	public class IgnisSoundTriggerHandler : ITickable
	{
		[Token(Token = "0x4003D8C")]
		private const string PLACEHOLDER = "Placeholder";

		[Token(Token = "0x4003D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<ContinousSoundData> continousSoundDataList;

		[Token(Token = "0x4003D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GameData gameData;

		[Token(Token = "0x4003D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Transform mainCamera;

		[Token(Token = "0x4003D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly DamageRecordKeeper damageRecordKeeper;

		[Token(Token = "0x4003D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4003D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4003D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4003D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4003D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly SceneHandlerData sceneHandlerData;

		[Token(Token = "0x4003D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly OnboardingGameStateData onboardingGameStateData;

		[Token(Token = "0x4003D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4003D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int currentMusicIntensity;

		[Token(Token = "0x4003D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool isPlayingArenaMusic;

		[Token(Token = "0x4003D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int randomizedSongID;

		[Token(Token = "0x4003D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float TimeToMarkAsOld;

		[Token(Token = "0x4003D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly EnvironmentSceneData environmentSceneData;

		[Token(Token = "0x4003D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly SoundTriggersList soundTriggersList;

		[Token(Token = "0x6002AC3")]
		[Address(RVA = "0x114D19C", Offset = "0x114D19C", VA = "0x114D19C")]
		public IgnisSoundTriggerHandler(GameData gameData, Transform mainCamera, DamageRecordKeeper damageRecordKeeper, IgnisSoundTriggerData ignisSoundTriggerData, IRoomTimeProvider roomTimeProvider, MatchHandlerData matchHandlerData, EntryPoint.EntryPointData entryPointData, SceneHandlerData sceneHandlerData, OnboardingGameStateData onboardingGameStateData, AutoSpectateData autoSpectateData, EnvironmentSceneData environmentSceneData, SoundTriggersList soundTriggersList)
		{
		}

		[Token(Token = "0x6002AC4")]
		[Address(RVA = "0x114D298", Offset = "0x114D298", VA = "0x114D298")]
		public void CleanUpRound()
		{
		}

		[Token(Token = "0x6002AC5")]
		[Address(RVA = "0x114D444", Offset = "0x114D444", VA = "0x114D444")]
		private void TriggerMatchHandlerStates(MatchHandlerState matchHandlerState)
		{
		}

		[Token(Token = "0x6002AC6")]
		[Address(RVA = "0x114D664", Offset = "0x114D664", VA = "0x114D664")]
		private bool IsThereAEnvironmentScene()
		{
			return default(bool);
		}

		[Token(Token = "0x6002AC7")]
		[Address(RVA = "0x114D754", Offset = "0x114D754", VA = "0x114D754")]
		private void SetMusicIntensityWhilePlaying(float intensity)
		{
		}

		[Token(Token = "0x6002AC8")]
		[Address(RVA = "0x114D89C", Offset = "0x114D89C", VA = "0x114D89C")]
		private void TriggerCrowdLowCustomEvent()
		{
		}

		[Token(Token = "0x6002AC9")]
		[Address(RVA = "0x114D8E0", Offset = "0x114D8E0", VA = "0x114D8E0")]
		private void TriggerLocalOrRemote(LocalOrRemoteSoundWithTransform triggerMessage)
		{
		}

		[Token(Token = "0x6002ACA")]
		[Address(RVA = "0x114DB58", Offset = "0x114DB58", VA = "0x114DB58")]
		private void StartLocalOrRemoteSound(LocalOrRemoteSoundWithTransform triggerMessage)
		{
		}

		[Token(Token = "0x6002ACB")]
		[Address(RVA = "0x114DC44", Offset = "0x114DC44", VA = "0x114DC44")]
		private void StopLocalAndRemoteSound(LocalOrRemoteSoundWithTransform triggerMessage)
		{
		}

		[Token(Token = "0x6002ACC")]
		[Address(RVA = "0x114DD60", Offset = "0x114DD60", VA = "0x114DD60")]
		private void TriggerCustomEvent(string[] events, Transform transform)
		{
		}

		[Token(Token = "0x6002ACD")]
		[Address(RVA = "0x114D680", Offset = "0x114D680", VA = "0x114D680")]
		private void TriggerCustomEvent(string eventToTrigger, Transform transform)
		{
		}

		[Token(Token = "0x6002ACE")]
		[Address(RVA = "0x114DE40", Offset = "0x114DE40", VA = "0x114DE40")]
		private bool TriggerEnterScene(EnterScene enterScene)
		{
			return default(bool);
		}

		[Token(Token = "0x6002ACF")]
		[Address(RVA = "0x114DF10", Offset = "0x114DF10", VA = "0x114DF10")]
		private void TriggerExitScene(ExitScene exitScene)
		{
		}

		[Token(Token = "0x6002AD0")]
		[Address(RVA = "0x114DF74", Offset = "0x114DF74", VA = "0x114DF74")]
		private void TriggerEnterOnboarding(EnterOnboarding enterOnboarding)
		{
		}

		[Token(Token = "0x6002AD1")]
		[Address(RVA = "0x114DF9C", Offset = "0x114DF9C", VA = "0x114DF9C")]
		private void TriggerContinuesSound(ContinuesSoundWithTransform continuesSoundWithTransform)
		{
		}

		[Token(Token = "0x6002AD2")]
		[Address(RVA = "0x114DFB8", Offset = "0x114DFB8", VA = "0x114DFB8")]
		private void StartPlayerOrOtherImpactSounds(PlayerOrOtherImpactWithTransform message)
		{
		}

		[Token(Token = "0x6002AD3")]
		[Address(RVA = "0x114DFD4", Offset = "0x114DFD4", VA = "0x114DFD4")]
		private void PlayPlayerOrOtherImpactSounds(PlayerOrOtherImpactWithTransform message)
		{
		}

		[Token(Token = "0x6002AD4")]
		[Address(RVA = "0x114DFF4", Offset = "0x114DFF4", VA = "0x114DFF4")]
		private void PlayArenaMusic()
		{
		}

		[Token(Token = "0x6002AD5")]
		[Address(RVA = "0x114E14C", Offset = "0x114E14C", VA = "0x114E14C", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002AD6")]
		[Address(RVA = "0x114E174", Offset = "0x114E174", VA = "0x114E174")]
		private void HandleSoundEvents()
		{
		}

		[Token(Token = "0x6002AD7")]
		[Address(RVA = "0x114E730", Offset = "0x114E730", VA = "0x114E730")]
		private void PlaySoundAtPosition(string[] ids, Vector3 p, float timeStamp)
		{
		}

		[Token(Token = "0x6002AD8")]
		[Address(RVA = "0x114DA34", Offset = "0x114DA34", VA = "0x114DA34")]
		private void PlaySoundAtTransform(string[] ids, Transform t, float timeStamp)
		{
		}

		[Token(Token = "0x6002AD9")]
		[Address(RVA = "0x114E86C", Offset = "0x114E86C", VA = "0x114E86C")]
		private void PlaySound(string[] ids, float timeStamp)
		{
		}

		[Token(Token = "0x6002ADA")]
		[Address(RVA = "0x114DB7C", Offset = "0x114DB7C", VA = "0x114DB7C")]
		private void PlayContinuousSound(string[] ids, Transform t)
		{
		}

		[Token(Token = "0x6002ADB")]
		[Address(RVA = "0x114D928", Offset = "0x114D928", VA = "0x114D928")]
		private void PlaySoundAndFollow(string[] ids, Transform t)
		{
		}

		[Token(Token = "0x6002ADC")]
		[Address(RVA = "0x114D35C", Offset = "0x114D35C", VA = "0x114D35C")]
		private void StopPlayingSound(string[] ids, Transform t)
		{
		}

		[Token(Token = "0x6002ADD")]
		[Address(RVA = "0x114DC74", Offset = "0x114DC74", VA = "0x114DC74")]
		private void StopPlayingContinousSound(string[] ids, Transform t)
		{
		}

		[Token(Token = "0x6002ADE")]
		[Address(RVA = "0x114E988", Offset = "0x114E988", VA = "0x114E988")]
		private bool IsEffectToOld(float timeStamp)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20009BB")]
	public struct PlayOneOffParticle
	{
		[Token(Token = "0x4003D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Vector3 position;

		[Token(Token = "0x4003DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly Quaternion rotation;

		[Token(Token = "0x4003DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly int token;

		[Token(Token = "0x4003DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly float timeStamp;

		[Token(Token = "0x6002AE1")]
		[Address(RVA = "0x1141BA4", Offset = "0x1141BA4", VA = "0x1141BA4")]
		public PlayOneOffParticle(Vector3 position, Quaternion rotation, int token, float timeStamp)
		{
		}
	}
	[Token(Token = "0x20009BC")]
	public struct PlayEmitOverDistanceParticle
	{
		[Token(Token = "0x4003DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Transform transform;

		[Token(Token = "0x4003DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int id;

		[Token(Token = "0x4003DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly int token;

		[Token(Token = "0x4003DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly float timeStamp;

		[Token(Token = "0x6002AE2")]
		[Address(RVA = "0x114EA94", Offset = "0x114EA94", VA = "0x114EA94")]
		public PlayEmitOverDistanceParticle(int id, Transform transform, int token, float timeStamp)
		{
		}
	}
	[Token(Token = "0x20009BD")]
	public struct PlayReferenceParticle
	{
		[Token(Token = "0x4003DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ParticleSystem particleSystem;

		[Token(Token = "0x4003DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly float timeStamp;

		[Token(Token = "0x6002AE3")]
		[Address(RVA = "0x114EAA4", Offset = "0x114EAA4", VA = "0x114EAA4")]
		public PlayReferenceParticle(ParticleSystem particleSystem, float timeStamp)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20009BE")]
	public struct ParticleEffectOneOff
	{
		[Token(Token = "0x4003DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ParticleSystem particleSystem;

		[Token(Token = "0x4003DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int burstCount;

		[Token(Token = "0x4003DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float interval;

		[Token(Token = "0x4003DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int cycles;

		[Token(Token = "0x4003DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float probability;
	}
	[Serializable]
	[Token(Token = "0x20009BF")]
	public struct ParticleEffectEmitOverDistanceDefinition
	{
		[Token(Token = "0x4003DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ParticleSystem particleSystem;

		[Token(Token = "0x4003DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float particleOverDistance;
	}
	[Token(Token = "0x20009C0")]
	public class ParticleEffectData
	{
		[Token(Token = "0x4003DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<PlayOneOffParticle> playOneOffParticles;

		[Token(Token = "0x4003DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<PlayOneOffParticle> playDamageParticles;

		[Token(Token = "0x4003DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Queue<PlayOneOffParticle> playReferenceEffects;

		[Token(Token = "0x4003DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Queue<PlayEmitOverDistanceParticle> playEmitOverDistanceParticles;

		[Token(Token = "0x4003DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Queue<int> stopEmitOverDistanceParticles;

		[Token(Token = "0x6002AE4")]
		[Address(RVA = "0x114EAB0", Offset = "0x114EAB0", VA = "0x114EAB0")]
		public ParticleEffectData()
		{
		}
	}
	[Token(Token = "0x20009C1")]
	public struct ParticelEffectBurst
	{
		[Token(Token = "0x4003DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float timer;

		[Token(Token = "0x4003DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int parentToken;

		[Token(Token = "0x4003DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Vector3 position;

		[Token(Token = "0x4003DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly Quaternion rotation;

		[Token(Token = "0x4003DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleEffectOneOff effectOneOff;

		[Token(Token = "0x6002AE5")]
		[Address(RVA = "0x114EC08", Offset = "0x114EC08", VA = "0x114EC08")]
		public ParticelEffectBurst(int parentToken, Vector3 position, Quaternion rotatin, ParticleEffectOneOff effectOneOff)
		{
		}
	}
	[Token(Token = "0x20009C2")]
	public struct ParticleEffectEmitOverDistance
	{
		[Token(Token = "0x4003DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int id;

		[Token(Token = "0x4003DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int parentToken;

		[Token(Token = "0x4003DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ParticleSystem particleSystem;

		[Token(Token = "0x4003DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Vector3 lastEmitPosition;

		[Token(Token = "0x4003DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly float distanceToEmitOn;

		[Token(Token = "0x4003DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Transform transform;

		[Token(Token = "0x6002AE6")]
		[Address(RVA = "0x114EC30", Offset = "0x114EC30", VA = "0x114EC30")]
		public ParticleEffectEmitOverDistance(int id, int parentToken, ParticleSystem particleSystem, float distanceToEmitOn, Transform transform, Vector3 lastEmitPosition)
		{
		}
	}
	[Token(Token = "0x20009C3")]
	public class ParticleEffectHandler : ITickable
	{
		[Token(Token = "0x4003DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ParticleEffectData particleEffectData;

		[Token(Token = "0x4003DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Transform mainCamera;

		[Token(Token = "0x4003DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Dictionary<int, int> damageToToken;

		[Token(Token = "0x4003DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4003DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly List<ParticelEffectBurst> activeBursts;

		[Token(Token = "0x4003DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly List<ParticleEffectEmitOverDistance> activeEmitOverDistance;

		[Token(Token = "0x4003DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ParticleEffectReference[] particleEffectPool;

		[Token(Token = "0x4003DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<int> availableDamageEffects;

		[Token(Token = "0x4003DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool disableParticles;

		[Token(Token = "0x4003DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly Predicate<ParticleEffectEmitOverDistance> removeEmitOverDistance;

		[Token(Token = "0x4003DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int emitOverDistanceIdToRemove;

		[Token(Token = "0x4003DCB")]
		private const float TimeToMarkAsOldContinues = 15f;

		[Token(Token = "0x4003DCC")]
		private const float TimeToMarkAsOld = 1f;

		[Token(Token = "0x4003DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ProfilerMarker profileTickMarker;

		[Token(Token = "0x4003DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ProfilerMarker profileStartEffectMarker;

		[Token(Token = "0x6002AE7")]
		[Address(RVA = "0x114EC48", Offset = "0x114EC48", VA = "0x114EC48")]
		public ParticleEffectHandler(ParticleEffectData particleEffectData, ParticleEffectReference[] particleEffectPool, Transform mainCamera, Dictionary<int, int> damageToToken, IRoomTimeProvider roomTimeProvider)
		{
		}

		[Token(Token = "0x6002AE8")]
		[Address(RVA = "0x114EFA8", Offset = "0x114EFA8", VA = "0x114EFA8")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6002AE9")]
		[Address(RVA = "0x114F0E8", Offset = "0x114F0E8", VA = "0x114F0E8")]
		private void ToggleParticleEffects(bool active)
		{
		}

		[Token(Token = "0x6002AEA")]
		[Address(RVA = "0x114F0F8", Offset = "0x114F0F8", VA = "0x114F0F8", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002AEB")]
		[Address(RVA = "0x114F97C", Offset = "0x114F97C", VA = "0x114F97C")]
		private void HandleBurtParticles()
		{
		}

		[Token(Token = "0x6002AEC")]
		[Address(RVA = "0x114FBE0", Offset = "0x114FBE0", VA = "0x114FBE0")]
		private void HandleEmitOverTimeParticles()
		{
		}

		[Token(Token = "0x6002AED")]
		[Address(RVA = "0x114F2F4", Offset = "0x114F2F4", VA = "0x114F2F4")]
		private void PlayParticle(PlayOneOffParticle toPlay)
		{
		}

		[Token(Token = "0x6002AEE")]
		[Address(RVA = "0x114FEA4", Offset = "0x114FEA4", VA = "0x114FEA4")]
		private void PlayParticleBurst(Vector3 position, Quaternion rotation, int particleToken, ParticleEffectOneOff effectOneOff)
		{
		}

		[Token(Token = "0x6002AEF")]
		[Address(RVA = "0x114F6E0", Offset = "0x114F6E0", VA = "0x114F6E0")]
		private void StartEmitOverDistanceParticle(PlayEmitOverDistanceParticle toPlay)
		{
		}

		[Token(Token = "0x6002AF0")]
		[Address(RVA = "0x114F920", Offset = "0x114F920", VA = "0x114F920")]
		private void StopEmitOverDistanceParticle(int id)
		{
		}

		[Token(Token = "0x6002AF1")]
		[Address(RVA = "0x1150248", Offset = "0x1150248", VA = "0x1150248")]
		private bool RemoveEmitOverDistance(ParticleEffectEmitOverDistance emitOverDistance)
		{
			return default(bool);
		}

		[Token(Token = "0x6002AF2")]
		[Address(RVA = "0x114FF70", Offset = "0x114FF70", VA = "0x114FF70")]
		private void PlayEmitOverDistance(int token, ParticleSystem particleSystem, Vector3 position, Quaternion rotation, int amountToEmit, Vector3 direction)
		{
		}

		[Token(Token = "0x6002AF3")]
		[Address(RVA = "0x114F52C", Offset = "0x114F52C", VA = "0x114F52C")]
		private void PlayNumberDamageParticle(PlayOneOffParticle toPlay)
		{
		}

		[Token(Token = "0x6002AF4")]
		[Address(RVA = "0x115025C", Offset = "0x115025C", VA = "0x115025C")]
		private void DebugParticle(int particle)
		{
		}

		[Token(Token = "0x6002AF5")]
		[Address(RVA = "0x1150460", Offset = "0x1150460", VA = "0x1150460")]
		private void DebugEmitOverDistanceParticle(int particle)
		{
		}

		[Token(Token = "0x6002AF6")]
		[Address(RVA = "0x11500C8", Offset = "0x11500C8", VA = "0x11500C8")]
		private bool IsEffectToOld(float timeStamp)
		{
			return default(bool);
		}

		[Token(Token = "0x6002AF7")]
		[Address(RVA = "0x1150188", Offset = "0x1150188", VA = "0x1150188")]
		private bool IsContinuesEffectToOld(float timeStamp)
		{
			return default(bool);
		}
	}
}
namespace Ignis.TournamentEvent
{
	[Token(Token = "0x20009C4")]
	public class TournamentEventMenuViewHandler : ITickable
	{
		[Token(Token = "0x4003DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4003DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly TournamentEventData tournamentEventData;

		[Token(Token = "0x4003DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MatchmakingData matchmakingData;

		[Token(Token = "0x4003DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayFabProgressionData playFabProgressionData;

		[Token(Token = "0x4003DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly InteractionSettings interactionSettings;

		[Token(Token = "0x4003DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ShopData shopData;

		[Token(Token = "0x4003DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly ServerTimeSyncData serverTimeSyncData;

		[Token(Token = "0x4003DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly BadPingDetectionData badPingDetectionData;

		[Token(Token = "0x4003DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4003DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4003DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly SoundTriggersList soundTriggersList;

		[Token(Token = "0x4003DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly LeagueTierSettings leagueTierSettings;

		[Token(Token = "0x4003DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly PlayFabTitleData playFabTitleData;

		[Token(Token = "0x4003DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly CurrentMatchRequestData currentMatchRequestData;

		[Token(Token = "0x4003DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly LoginData loginData;

		[Token(Token = "0x4003DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly GlobalMatchmakingStateData globalMatchmakingStateData;

		[Token(Token = "0x4003DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private TournamentEventMenuViewReference viewReference;

		[Token(Token = "0x4003DE0")]
		private const int maxLeaderBoardCount = 100;

		[Token(Token = "0x4003DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool showingTournamentEventView;

		[Token(Token = "0x4003DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float lastDataUpdateTimestamp;

		[Token(Token = "0x4003DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float lastCountdownUpdateTimestamp;

		[Token(Token = "0x4003DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool shouldReopenWhenReturningToLockerRoom;

		[Token(Token = "0x4003DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private TournamentState lastViewedTournamentState;

		[Token(Token = "0x4003DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private string currentInfoPanelText;

		[Token(Token = "0x4003DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private string expectedInfoPanelText;

		[Token(Token = "0x4003DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private BuyEntryFeeRequest currentBuyEntryFeeRequest;

		[Token(Token = "0x4003DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool infoIsShowingHighPingInfo;

		[Token(Token = "0x4003DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly List<LeaderBoardRowReference> leaderboardRows;

		[Token(Token = "0x4003DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool wasShowingProgress;

		[Token(Token = "0x4003DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		private bool wasShowingEntryPage;

		[Token(Token = "0x4003DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
		private bool wasShowingSummaryPage;

		[Token(Token = "0x4003DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private EventTournamentLeaderBoardRecord currentUserLeaderboardData;

		[Token(Token = "0x4003DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool shouldChangeButtonState;

		[Token(Token = "0x4003DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
		private bool shouldShowSummaryPage;

		[Token(Token = "0x4003DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEA")]
		private bool shouldShowProgressPage;

		[Token(Token = "0x4003DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEB")]
		private bool shouldShowEntryPage;

		[Token(Token = "0x4003DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private bool processingTransaction;

		[Token(Token = "0x6002AF9")]
		[Address(RVA = "0x11516B0", Offset = "0x11516B0", VA = "0x11516B0")]
		public TournamentEventMenuViewHandler(MenuStateData menuStateData, TournamentEventData tournamentEventData, MatchmakingData matchmakingData, PlayFabProgressionData playFabProgressionData, InteractionSettings interactionSettings, ShopData shopData, ServerTimeSyncData serverTimeSyncData, BadPingDetectionData badPingDetectionData, IgnisSoundTriggerData ignisSoundTriggerData, IRoomTimeProvider roomTimeProvider, SoundTriggersList soundTriggersList, LeagueTierSettings leagueTierSettings, PlayFabTitleData playFabTitleData, CurrentMatchRequestData currentMatchRequestData, LoginData loginData, GlobalMatchmakingStateData globalMatchmakingStateData)
		{
		}

		[Token(Token = "0x6002AFA")]
		[Address(RVA = "0x11517E8", Offset = "0x11517E8", VA = "0x11517E8")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6002AFB")]
		[Address(RVA = "0x1151BBC", Offset = "0x1151BBC", VA = "0x1151BBC")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6002AFC")]
		[Address(RVA = "0x1151C5C", Offset = "0x1151C5C", VA = "0x1151C5C")]
		private void OnBuyInClicked()
		{
		}

		[Token(Token = "0x6002AFD")]
		[Address(RVA = "0x1151E0C", Offset = "0x1151E0C", VA = "0x1151E0C")]
		private void OnDuelClicked()
		{
		}

		[Token(Token = "0x6002AFE")]
		[Address(RVA = "0x1151FB4", Offset = "0x1151FB4", VA = "0x1151FB4", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002AFF")]
		[Address(RVA = "0x1153134", Offset = "0x1153134", VA = "0x1153134")]
		private void UpdateInfoPanelText()
		{
		}

		[Token(Token = "0x6002B00")]
		[Address(RVA = "0x1151B94", Offset = "0x1151B94", VA = "0x1151B94")]
		private void ResetVisualsToDefault()
		{
		}

		[Token(Token = "0x6002B01")]
		[Address(RVA = "0x1152BBC", Offset = "0x1152BBC", VA = "0x1152BBC")]
		private void UpdateButtonsAndInfoPanelVisibility(TournamentState currentTournamentState, EventTournament currentTournament)
		{
		}

		[Token(Token = "0x6002B02")]
		[Address(RVA = "0x1151D38", Offset = "0x1151D38", VA = "0x1151D38")]
		private bool PurchasePending()
		{
			return default(bool);
		}

		[Token(Token = "0x6002B03")]
		[Address(RVA = "0x1152EE4", Offset = "0x1152EE4", VA = "0x1152EE4")]
		private void UpdateCountDowns(TournamentState currentTournamentState)
		{
		}

		[Token(Token = "0x6002B04")]
		[Address(RVA = "0x11531E0", Offset = "0x11531E0", VA = "0x11531E0")]
		private string GenerateCountDown(string prefixKey, string timestampAsIsoString)
		{
			return null;
		}

		[Token(Token = "0x6002B05")]
		[Address(RVA = "0x1152174", Offset = "0x1152174", VA = "0x1152174")]
		private void UpdateViewFromData(EventTournament currentTournament, TournamentState currentTournamentState)
		{
		}

		[Token(Token = "0x6002B06")]
		[Address(RVA = "0x1151A3C", Offset = "0x1151A3C", VA = "0x1151A3C")]
		private void PoolRows(int neededRows)
		{
		}

		[Token(Token = "0x6002B07")]
		[Address(RVA = "0x115366C", Offset = "0x115366C", VA = "0x115366C")]
		private int GetLeagueTierFromPoints(int points)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20009C5")]
	public class TournamentEventMenuViewReference : MonoBehaviour
	{
		[Token(Token = "0x4003DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas expandedContainer;

		[Token(Token = "0x4003DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject infoPanelContainer;

		[Token(Token = "0x4003DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LocalizedText infoPanelLocalizedText;

		[Token(Token = "0x4003DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Left Panel")]
		public LocalizedText infoContainerTitle;

		[Token(Token = "0x4003DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LocalizedText infoContainerDescription;

		[Token(Token = "0x4003DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI expandedCountdown;

		[Token(Token = "0x4003DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshProUGUI completedText;

		[Token(Token = "0x4003DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Central Panel")]
		public Canvas signUpPage;

		[Token(Token = "0x4003DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Canvas progressPage;

		[Token(Token = "0x4003DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Canvas summaryPage;

		[Token(Token = "0x4003DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<GameObject> expandedLossesIndicators;

		[Token(Token = "0x4003DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<GameObject> expandedLossesIndicatorBackgrounds;

		[Token(Token = "0x4003E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IgnisButton duelButton;

		[Token(Token = "0x4003E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public IgnisButton entryFeeButton;

		[Token(Token = "0x4003E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Canvas loadingIcon;

		[Token(Token = "0x4003E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TextMeshProUGUI signupTextContainer;

		[Token(Token = "0x4003E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private TextMeshProUGUI expandedWinsText;

		[Token(Token = "0x4003E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private TextMeshProUGUI winningsText;

		[Token(Token = "0x4003E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private TextMeshProUGUI summaryExpandedWinsText;

		[Token(Token = "0x4003E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private TextMeshProUGUI summaryWinningsText;

		[Token(Token = "0x4003E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public TextMeshProUGUI entryFeeText;

		[Token(Token = "0x4003E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public LocalizedText rulesText;

		[Token(Token = "0x4003E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public LocalizedText endResultText;

		[Token(Token = "0x4003E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Image entryRankIcon;

		[Token(Token = "0x4003E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public LocalizedText entryRankName;

		[Token(Token = "0x4003E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public TextMeshProUGUI entryCountDown;

		[Token(Token = "0x4003E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Header("Right Panel")]
		public Canvas leaderBoardsCanvas;

		[Token(Token = "0x4003E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Transform leaderBoardContainer;

		[Token(Token = "0x4003E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public GameObject leaderBoardPrefab;

		[Token(Token = "0x4003E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public IgnisScrollRect expandedContainerScrollRect;

		[Token(Token = "0x4003E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public RectMask2D rectMaskRankList;

		[Token(Token = "0x4003E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public LeaderBoardRowReference currentUserLeaderboardData;

		[Token(Token = "0x4003E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public GameObject noDataText;

		[Token(Token = "0x6002B09")]
		[Address(RVA = "0x115362C", Offset = "0x115362C", VA = "0x115362C")]
		public void SetWinValue(string text)
		{
		}

		[Token(Token = "0x6002B0A")]
		[Address(RVA = "0x11535EC", Offset = "0x11535EC", VA = "0x11535EC")]
		public void SetWiningsValue(string text)
		{
		}

		[Token(Token = "0x6002B0B")]
		[Address(RVA = "0x1153778", Offset = "0x1153778", VA = "0x1153778")]
		public void OpenUrl(string url)
		{
		}

		[Token(Token = "0x6002B0C")]
		[Address(RVA = "0x1153784", Offset = "0x1153784", VA = "0x1153784")]
		public TournamentEventMenuViewReference()
		{
		}
	}
	[Token(Token = "0x20009C6")]
	public class TournamentEventWidgetViewHandler : ITickable
	{
		[Token(Token = "0x20009C7")]
		private enum TournamentEventWidgetState
		{
			[Token(Token = "0x4003E23")]
			Idle,
			[Token(Token = "0x4003E24")]
			Active,
			[Token(Token = "0x4003E25")]
			Highlighted
		}

		[Token(Token = "0x4003E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DuelSettingsViewData duelSettingsViewData;

		[Token(Token = "0x4003E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4003E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly TournamentEventData tournamentEventData;

		[Token(Token = "0x4003E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ServerTimeSyncData serverTimeSyncData;

		[Token(Token = "0x4003E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TournamentEventWidgetViewReference widgetReference;

		[Token(Token = "0x4003E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool showingTournamentEventWidget;

		[Token(Token = "0x4003E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool interactionIsBlocked;

		[Token(Token = "0x4003E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float lastDataUpdateTimestamp;

		[Token(Token = "0x4003E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float lastCountdownUpdateTimestamp;

		[Token(Token = "0x4003E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private TournamentState lastViewedTournamentState;

		[Token(Token = "0x4003E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool lastSeenJoinedTournament;

		[Token(Token = "0x4003E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int lastSeenLosses;

		[Token(Token = "0x4003E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private TournamentEventWidgetState currentState;

		[Token(Token = "0x6002B0D")]
		[Address(RVA = "0x115378C", Offset = "0x115378C", VA = "0x115378C")]
		public TournamentEventWidgetViewHandler(DuelSettingsViewData duelSettingsViewData, MenuStateData menuStateData, TournamentEventData tournamentEventData, ServerTimeSyncData serverTimeSyncData)
		{
		}

		[Token(Token = "0x6002B0E")]
		[Address(RVA = "0x11537D4", Offset = "0x11537D4", VA = "0x11537D4")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6002B0F")]
		[Address(RVA = "0x11539A4", Offset = "0x11539A4", VA = "0x11539A4")]
		private void SetActive(bool isActive)
		{
		}

		[Token(Token = "0x6002B10")]
		[Address(RVA = "0x11539FC", Offset = "0x11539FC", VA = "0x11539FC")]
		private void ChangeState(TournamentEventWidgetState state)
		{
		}

		[Token(Token = "0x6002B11")]
		[Address(RVA = "0x1153B04", Offset = "0x1153B04", VA = "0x1153B04")]
		private void OnWidgetClicked()
		{
		}

		[Token(Token = "0x6002B12")]
		[Address(RVA = "0x1153B50", Offset = "0x1153B50", VA = "0x1153B50")]
		private void OnHoverEnter()
		{
		}

		[Token(Token = "0x6002B13")]
		[Address(RVA = "0x1153B58", Offset = "0x1153B58", VA = "0x1153B58")]
		private void OnHoverExit()
		{
		}

		[Token(Token = "0x6002B14")]
		[Address(RVA = "0x1153B90", Offset = "0x1153B90", VA = "0x1153B90", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002B15")]
		[Address(RVA = "0x1154070", Offset = "0x1154070", VA = "0x1154070")]
		private void UpdateCountDowns(TournamentState tournamentState)
		{
		}

		[Token(Token = "0x6002B16")]
		[Address(RVA = "0x1154210", Offset = "0x1154210", VA = "0x1154210")]
		private string GenerateCountDown(string prefixKey, string timestampAsIsoString)
		{
			return null;
		}

		[Token(Token = "0x6002B17")]
		[Address(RVA = "0x1153D5C", Offset = "0x1153D5C", VA = "0x1153D5C")]
		private void UpdateViewFromData()
		{
		}

		[Token(Token = "0x6002B18")]
		[Address(RVA = "0x1153D28", Offset = "0x1153D28", VA = "0x1153D28")]
		public bool IsVisibleTournamentState(EventTournament eventTournament)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20009C8")]
	public class TournamentEventWidgetViewReference : MonoBehaviour
	{
		[Token(Token = "0x4003E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas container;

		[Token(Token = "0x4003E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IgnisButton showButton;

		[Token(Token = "0x4003E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshProUGUI[] widgetCountdown;

		[Token(Token = "0x4003E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LocalizedText widgetTournamentTypeText;

		[Token(Token = "0x4003E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject idleView;

		[Token(Token = "0x4003E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject highlightedView;

		[Token(Token = "0x4003E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject activeView;

		[Token(Token = "0x4003E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject[] lossCheckboxes;

		[Token(Token = "0x4003E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject[] lossCrosses;

		[Token(Token = "0x6002B19")]
		[Address(RVA = "0x115461C", Offset = "0x115461C", VA = "0x115461C")]
		public TournamentEventWidgetViewReference()
		{
		}
	}
}
namespace Ignis.AlwaysQueue
{
	[Token(Token = "0x20009C9")]
	public class AlwaysQueueWidgetViewHandler : ITickable
	{
		[Token(Token = "0x4003E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly RatingMatchmakerSettingsData ratingMatchmakerSettingsData;

		[Token(Token = "0x4003E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly GlobalMatchmakingStateData globalMatchmakingStateData;

		[Token(Token = "0x4003E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MatchmakingData ratingMatchmakerData;

		[Token(Token = "0x4003E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4003E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IgnisSoundTriggerData ignisSoundTriggerData;

		[Token(Token = "0x4003E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AlwaysQueueWidgetViewReferences alwaysQueueWidgetViewReferences;

		[Token(Token = "0x4003E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool showingWidget;

		[Token(Token = "0x4003E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool showingFoundOpponent;

		[Token(Token = "0x6002B1A")]
		[Address(RVA = "0x1154624", Offset = "0x1154624", VA = "0x1154624")]
		public AlwaysQueueWidgetViewHandler(RatingMatchmakerSettingsData ratingMatchmakerSettingsData, GlobalMatchmakingStateData globalMatchmakingStateData, MatchmakingData ratingMatchmakerData, MenuStateData menuStateData, IgnisSoundTriggerData ignisSoundTriggerData)
		{
		}

		[Token(Token = "0x6002B1B")]
		[Address(RVA = "0x1154674", Offset = "0x1154674", VA = "0x1154674", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002B1C")]
		[Address(RVA = "0x1154848", Offset = "0x1154848", VA = "0x1154848")]
		public void Initialize(MenuStateSettings menuStateSettings)
		{
		}

		[Token(Token = "0x6002B1D")]
		[Address(RVA = "0x11549AC", Offset = "0x11549AC", VA = "0x11549AC")]
		private void CancelMatchmaking()
		{
		}
	}
	[Token(Token = "0x20009CA")]
	public class AlwaysQueueWidgetViewReferences : MonoBehaviour
	{
		[Token(Token = "0x4003E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Button cancelButton;

		[Token(Token = "0x4003E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject opponentFoundContainer;

		[Token(Token = "0x4003E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject searchingContainer;

		[Token(Token = "0x6002B1E")]
		[Address(RVA = "0x1154A08", Offset = "0x1154A08", VA = "0x1154A08")]
		public AlwaysQueueWidgetViewReferences()
		{
		}
	}
}
namespace Ignis.KockoutTournaments
{
	[Token(Token = "0x20009CB")]
	public class KnockoutTournamentData
	{
		[Token(Token = "0x4003E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Queue<TournamentMatchResultRequest> reportTournamentResultRequests;

		[Token(Token = "0x4003E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Queue<TournamentMatchStartRequest> reportTournamentMatchStartRequests;

		[Token(Token = "0x4003E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TournamentRequestBase pendingRequest;

		[Token(Token = "0x6002B1F")]
		[Address(RVA = "0x1154A10", Offset = "0x1154A10", VA = "0x1154A10")]
		public KnockoutTournamentData()
		{
		}
	}
	[Token(Token = "0x20009CC")]
	public abstract class TournamentRequestBase
	{
		[Token(Token = "0x4003E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Task webRequestTask;

		[Token(Token = "0x4003E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int tryCount;

		[Token(Token = "0x6002B20")]
		[Address(RVA = "0x1154AD0", Offset = "0x1154AD0", VA = "0x1154AD0")]
		public bool IsSuccessfull()
		{
			return default(bool);
		}

		[Token(Token = "0x6002B21")]
		[Address(RVA = "0x1154B18", Offset = "0x1154B18", VA = "0x1154B18")]
		public bool IsDone()
		{
			return default(bool);
		}

		[Token(Token = "0x6002B22")]
		public abstract void RetryQueue(KnockoutTournamentData knockoutTournamentData);

		[Token(Token = "0x6002B23")]
		[Address(RVA = "0x1154B2C", Offset = "0x1154B2C", VA = "0x1154B2C")]
		protected TournamentRequestBase()
		{
		}
	}
	[Token(Token = "0x20009CD")]
	public class TournamentMatchStartRequest : TournamentRequestBase
	{
		[Token(Token = "0x4003E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string tournamentId;

		[Token(Token = "0x4003E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string matchId;

		[Token(Token = "0x4003E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string roomCode;

		[Token(Token = "0x4003E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public NetworkingRegion networkingRegion;

		[Token(Token = "0x6002B24")]
		[Address(RVA = "0x1154B34", Offset = "0x1154B34", VA = "0x1154B34")]
		public TournamentMatchStartRequest(string tournamentId, string matchId, string roomCode, NetworkingRegion networkingRegion)
		{
		}

		[Token(Token = "0x6002B25")]
		[Address(RVA = "0x1154B78", Offset = "0x1154B78", VA = "0x1154B78", Slot = "4")]
		public override void RetryQueue(KnockoutTournamentData knockoutTournamentData)
		{
		}
	}
	[Token(Token = "0x20009CE")]
	public class TournamentMatchResultRequest : TournamentRequestBase
	{
		[Token(Token = "0x4003E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string tournamentId;

		[Token(Token = "0x4003E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string matchId;

		[Token(Token = "0x4003E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string playerOneId;

		[Token(Token = "0x4003E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly int playerOneScore;

		[Token(Token = "0x4003E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public readonly bool playerOneIsWinner;

		[Token(Token = "0x4003E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string playerOneReplayUri;

		[Token(Token = "0x4003E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly string playerTwoId;

		[Token(Token = "0x4003E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly int playerTwoScore;

		[Token(Token = "0x4003E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public readonly bool playerTwoIsWinner;

		[Token(Token = "0x4003E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string playerTwoReplayUri;

		[Token(Token = "0x6002B26")]
		[Address(RVA = "0x1154BD4", Offset = "0x1154BD4", VA = "0x1154BD4")]
		public TournamentMatchResultRequest(string tournamentId, string matchId, string playerOneId, int playerOneScore, bool playerOneIsWinner, string playerOneReplayUri, string playerTwoId, int playerTwoScore, bool playerTwoIsWinner, string playerTwoReplayUri)
		{
		}

		[Token(Token = "0x6002B27")]
		[Address(RVA = "0x1154C60", Offset = "0x1154C60", VA = "0x1154C60", Slot = "4")]
		public override void RetryQueue(KnockoutTournamentData knockoutTournamentData)
		{
		}
	}
	[Token(Token = "0x20009CF")]
	public class KnockoutTournamentHandler : ITickable
	{
		[Token(Token = "0x4003E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly KnockoutTournamentData knockoutTournamentData;

		[Token(Token = "0x4003E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IKnockoutTournamentClient knockoutTournamentClient;

		[Token(Token = "0x4003E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PlayFabLoginData playFabLoginData;

		[Token(Token = "0x4003E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly NetworkRegionProvider networkRegionProvider;

		[Token(Token = "0x4003E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly FindFriendData findFriendData;

		[Token(Token = "0x4003E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly GameMessageDownloadHandlerData gameMessageDownloadHandlerData;

		[Token(Token = "0x4003E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly BlastonApiTokenData blastonApiTokenData;

		[Token(Token = "0x4003E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly List<Task<KnockoutTournamentClient.CreateTournamentResponse>> pendingDebugCreateTournamentTasks;

		[Token(Token = "0x4003E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly List<Task<KnockoutTournamentClient.GetTournamentResponse>> pendingGetTournamentRequests;

		[Token(Token = "0x4003E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly List<Task<KnockoutTournamentClient.GetMyTournamentsResponse>> pendingGetMyTournamentRequests;

		[Token(Token = "0x4003E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly List<Task> pendingNoResponseTournamentRequests;

		[Token(Token = "0x4003E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string currentDebugTournamentId;

		[Token(Token = "0x4003E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private KnockoutTournamentClient.GetTournamentResponse currentDebugTournamentData;

		[Token(Token = "0x4003E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<TextElement> debugTextOutputs;

		[Token(Token = "0x4003E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private double logSpamPreventionTimestamp;

		[Token(Token = "0x6002B28")]
		[Address(RVA = "0x1154CBC", Offset = "0x1154CBC", VA = "0x1154CBC")]
		public KnockoutTournamentHandler(KnockoutTournamentData knockoutTournamentData, IKnockoutTournamentClient knockoutTournamentClient, PlayFabLoginData playFabLoginData, NetworkRegionProvider networkRegionProvider, FindFriendData findFriendData, GameMessageDownloadHandlerData gameMessageDownloadHandlerData, BlastonApiTokenData blastonApiTokenData)
		{
		}

		[Token(Token = "0x6002B29")]
		[Address(RVA = "0x1154E98", Offset = "0x1154E98", VA = "0x1154E98", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002B2A")]
		[Address(RVA = "0x1155234", Offset = "0x1155234", VA = "0x1155234")]
		private void CheckPendingRequest()
		{
		}

		[Token(Token = "0x6002B2B")]
		[Address(RVA = "0x1154EE4", Offset = "0x1154EE4", VA = "0x1154EE4")]
		private void CheckAndSendResultReports()
		{
		}

		[Token(Token = "0x6002B2C")]
		[Address(RVA = "0x1155074", Offset = "0x1155074", VA = "0x1155074")]
		private void CheckAndSendMatchStartReports()
		{
		}

		[Token(Token = "0x6002B2D")]
		[Address(RVA = "0x1155C48", Offset = "0x1155C48", VA = "0x1155C48")]
		private bool NoPendingReports()
		{
			return default(bool);
		}

		[Token(Token = "0x6002B2E")]
		[Address(RVA = "0x1155368", Offset = "0x1155368", VA = "0x1155368")]
		private void CheckDebug()
		{
		}

		[Token(Token = "0x6002B2F")]
		[Address(RVA = "0x1155D9C", Offset = "0x1155D9C", VA = "0x1155D9C")]
		public void SetupDebug(DebugMenu debugMenu)
		{
		}

		[Token(Token = "0x6002B30")]
		[Address(RVA = "0x11561AC", Offset = "0x11561AC", VA = "0x11561AC")]
		private Action GetDebugPlayMatchFunction(int i)
		{
			return null;
		}

		[Token(Token = "0x6002B31")]
		[Address(RVA = "0x1156268", Offset = "0x1156268", VA = "0x1156268")]
		private Action GetDebugSpectateMatchFunction(int i)
		{
			return null;
		}

		[Token(Token = "0x6002B32")]
		[Address(RVA = "0x1156324", Offset = "0x1156324", VA = "0x1156324")]
		private Action GetDebugReplayMatchFunction(int i)
		{
			return null;
		}

		[Token(Token = "0x6002B33")]
		[Address(RVA = "0x11563F8", Offset = "0x11563F8", VA = "0x11563F8")]
		private void DebugPlayMatch(int matchNumber)
		{
		}

		[Token(Token = "0x6002B34")]
		[Address(RVA = "0x11568B8", Offset = "0x11568B8", VA = "0x11568B8")]
		private void DebugReplayMatch(int matchNumber)
		{
		}

		[Token(Token = "0x6002B35")]
		[Address(RVA = "0x11569D0", Offset = "0x11569D0", VA = "0x11569D0")]
		private void DebugSpectateMatch(int matchNumber)
		{
		}

		[Token(Token = "0x6002B36")]
		[Address(RVA = "0x1156634", Offset = "0x1156634", VA = "0x1156634")]
		private KnockoutTournamentClient.TournamentRoundMatch GetDebugTournamentRoundMatch(int matchNumber)
		{
			return null;
		}

		[Token(Token = "0x6002B37")]
		[Address(RVA = "0x1156B20", Offset = "0x1156B20", VA = "0x1156B20")]
		private string GetParticipantsAsString()
		{
			return null;
		}

		[Token(Token = "0x6002B38")]
		[Address(RVA = "0x11560F0", Offset = "0x11560F0", VA = "0x11560F0")]
		private Func<string> GetGetMatchAsStringFunction(int matchNumber)
		{
			return null;
		}

		[Token(Token = "0x6002B39")]
		[Address(RVA = "0x1156CD0", Offset = "0x1156CD0", VA = "0x1156CD0")]
		private string GetMatchesAsString(int matchNumber)
		{
			return null;
		}

		[Token(Token = "0x6002B3A")]
		[Address(RVA = "0x115600C", Offset = "0x115600C", VA = "0x115600C")]
		private void CreateDebugText(DebugMenu debugMenu, string caption, Func<string> getTextFunction)
		{
		}

		[Token(Token = "0x6002B3B")]
		[Address(RVA = "0x1155D94", Offset = "0x1155D94", VA = "0x1155D94")]
		private void DebugRefreshTournament()
		{
		}

		[Token(Token = "0x6002B3C")]
		[Address(RVA = "0x1157314", Offset = "0x1157314", VA = "0x1157314")]
		private void DebugJoinTournament()
		{
		}

		[Token(Token = "0x6002B3D")]
		[Address(RVA = "0x1157460", Offset = "0x1157460", VA = "0x1157460")]
		private void DebugLeaveTournament()
		{
		}

		[Token(Token = "0x6002B3E")]
		[Address(RVA = "0x11575A4", Offset = "0x11575A4", VA = "0x11575A4")]
		private void DebugStartTournament()
		{
		}

		[Token(Token = "0x6002B3F")]
		[Address(RVA = "0x11576CC", Offset = "0x11576CC", VA = "0x11576CC")]
		private void GetTournamentByAccessCode(string accessCode)
		{
		}

		[Token(Token = "0x6002B40")]
		[Address(RVA = "0x1155C6C", Offset = "0x1155C6C", VA = "0x1155C6C")]
		private void GetTournamentById(string tournamentId)
		{
		}

		[Token(Token = "0x6002B41")]
		[Address(RVA = "0x11577F4", Offset = "0x11577F4", VA = "0x11577F4")]
		private void DebugCreateTournament()
		{
		}

		[Token(Token = "0x6002B42")]
		[Address(RVA = "0x11579DC", Offset = "0x11579DC", VA = "0x11579DC")]
		private void DebugGetMyTournaments()
		{
		}
	}
}
namespace Ignis.Keyboard
{
	[Token(Token = "0x20009D5")]
	public class KeyboardReference : MonoBehaviour
	{
		[Token(Token = "0x4003E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Canvas canvas;

		[Token(Token = "0x4003E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BoxCollider boxCollider;

		[Token(Token = "0x4003E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Animator animator;

		[Token(Token = "0x4003E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public KeyboardRow[] keyboardRow;

		[Token(Token = "0x4003E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public KeyReference deleteKey;

		[Token(Token = "0x4003E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI resultText;

		[Token(Token = "0x4003E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshProUGUI infoHeader;

		[Token(Token = "0x4003E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public KeyReference cancelKey;

		[Token(Token = "0x4003E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Optional")]
		public TextMeshProUGUI infoText;

		[Token(Token = "0x4003E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TextMeshProUGUI errorText;

		[Token(Token = "0x4003E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public KeyReference clearKey;

		[Token(Token = "0x4003E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public KeyReference shiftKey;

		[Token(Token = "0x4003E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public KeyReference spaceKey;

		[Token(Token = "0x4003E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public KeyReference submitKey;

		[Token(Token = "0x4003E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Animation")]
		public AnimatorStateData showKeyboardAnimation;

		[Token(Token = "0x4003E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public AnimatorStateData hideKeyboardAnimation;

		[Token(Token = "0x4003E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public List<TextMeshProUGUI> buttonTexts;

		[Token(Token = "0x4003E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public string currentText;

		[Token(Token = "0x4003E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public bool upperCaseSelected;

		[Token(Token = "0x4003E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		[HideInInspector]
		public bool isInteratable;

		[Token(Token = "0x4003E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public List<string> letterAsString;

		[Token(Token = "0x6002B55")]
		[Address(RVA = "0x1157DA4", Offset = "0x1157DA4", VA = "0x1157DA4")]
		public KeyboardReference()
		{
		}
	}
	[Token(Token = "0x20009D6")]
	[CreateAssetMenu(fileName = "KeyboardSettings", menuName = "Settings/Keyboard/KeyboardSettings", order = 1)]
	public class KeyboardSettings : ScriptableObject
	{
		[Token(Token = "0x4003E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> rows;

		[Token(Token = "0x4003E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KeyboardReference keyboardTemplate;

		[Token(Token = "0x6002B56")]
		[Address(RVA = "0x1157E98", Offset = "0x1157E98", VA = "0x1157E98")]
		public KeyboardSettings()
		{
		}
	}
}
namespace Ignis.DebugTools
{
	[Token(Token = "0x20009D7")]
	public class LogSender
	{
		[Token(Token = "0x4003E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string APPLICATION_QUIT_PROPERLY;

		[Token(Token = "0x4003E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string LAST_SEEN_ERROR;

		[Token(Token = "0x4003E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IRoomTimeProvider roomTimeProvider;

		[Token(Token = "0x4003E83")]
		private const int StreamBufferSize = 6291456;

		[Token(Token = "0x4003E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static byte[] buffer;

		[Token(Token = "0x4003E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static long bufferPosition;

		[Token(Token = "0x4003E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<LogType, string> logTypeToName;

		[Token(Token = "0x4003E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MemoryStream stream;

		[Token(Token = "0x4003E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private StreamWriter writer;

		[Token(Token = "0x4003E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool seenErrorSinceLastReset;

		[Token(Token = "0x4003E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string firstSeenError;

		[Token(Token = "0x4003E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool forceLogSendData;

		[Token(Token = "0x4003E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool initialized;

		[Token(Token = "0x4003E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		private bool lastRunSuccessful;

		[Token(Token = "0x4003E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static List<string> errorsNotTriggeringAutoUpload;

		[Token(Token = "0x6002B57")]
		[Address(RVA = "0x11580D4", Offset = "0x11580D4", VA = "0x11580D4")]
		public LogSender(IRoomTimeProvider roomTimeProvider)
		{
		}

		[Token(Token = "0x6002B58")]
		[Address(RVA = "0x115828C", Offset = "0x115828C", VA = "0x115828C")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6002B59")]
		[Address(RVA = "0x1158674", Offset = "0x1158674", VA = "0x1158674")]
		public void SetupDebug(DebugMenu debugMenu)
		{
		}

		[Token(Token = "0x6002B5A")]
		[Address(RVA = "0x1158404", Offset = "0x1158404", VA = "0x1158404")]
		private void SetupStream()
		{
		}

		[Token(Token = "0x6002B5B")]
		[Address(RVA = "0x11586D0", Offset = "0x11586D0", VA = "0x11586D0")]
		public void Clear()
		{
		}

		[Token(Token = "0x6002B5C")]
		[Address(RVA = "0x115871C", Offset = "0x115871C", VA = "0x115871C")]
		public void OnLogMessage(string condition, string stacktrace, LogType type)
		{
		}

		[Token(Token = "0x6002B5D")]
		[Address(RVA = "0x1158C04", Offset = "0x1158C04", VA = "0x1158C04")]
		private bool LogMessageShouldTriggerAnAutoUpload(string condition)
		{
			return default(bool);
		}

		[Token(Token = "0x6002B5E")]
		[Address(RVA = "0x1158D24", Offset = "0x1158D24", VA = "0x1158D24")]
		public byte[] GetByteBuffer()
		{
			return null;
		}

		[Token(Token = "0x6002B5F")]
		[Address(RVA = "0x1158528", Offset = "0x1158528", VA = "0x1158528")]
		private void TrackLatestSeenErrorAsCrashReport(string crashMessage)
		{
		}

		[Token(Token = "0x6002B60")]
		[Address(RVA = "0x1158E30", Offset = "0x1158E30", VA = "0x1158E30")]
		public void OnDestroy()
		{
		}
	}
	[Token(Token = "0x20009D8")]
	public class LogSenderComponent : MonoBehaviour
	{
		[Token(Token = "0x20009D9")]
		[CompilerGenerated]
		private sealed class <UploadEmote>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003E90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003E91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003E92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameMessageSerializer gameMessageSerializer;

			[Token(Token = "0x4003E93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Mtm[] emoteMessages;

			[Token(Token = "0x4003E94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public LogSenderComponent <>4__this;

			[Token(Token = "0x4003E95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string emoteName;

			[Token(Token = "0x4003E96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private MemoryStream <stream>5__2;

			[Token(Token = "0x4003E97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private UnityWebRequest <request>5__3;

			[Token(Token = "0x1700020C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002B6C")]
				[Address(RVA = "0x1159F94", Offset = "0x1159F94", VA = "0x1159F94", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700020D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B6E")]
				[Address(RVA = "0x1159FDC", Offset = "0x1159FDC", VA = "0x1159FDC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B67")]
			[Address(RVA = "0x1159960", Offset = "0x1159960", VA = "0x1159960")]
			[DebuggerHidden]
			public <UploadEmote>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6002B68")]
			[Address(RVA = "0x1159A00", Offset = "0x1159A00", VA = "0x1159A00", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B69")]
			[Address(RVA = "0x1159AB8", Offset = "0x1159AB8", VA = "0x1159AB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B6A")]
			[Address(RVA = "0x1159EE4", Offset = "0x1159EE4", VA = "0x1159EE4")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002B6B")]
			[Address(RVA = "0x1159E34", Offset = "0x1159E34", VA = "0x1159E34")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x6002B6D")]
			[Address(RVA = "0x1159F9C", Offset = "0x1159F9C", VA = "0x1159F9C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20009DA")]
		[CompilerGenerated]
		private sealed class <UploadApplicationLog>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003E98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003E99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003E9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LogSender logSender;

			[Token(Token = "0x4003E9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string fileName;

			[Token(Token = "0x4003E9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public LogSenderComponent <>4__this;

			[Token(Token = "0x4003E9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string category;

			[Token(Token = "0x4003E9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x1700020E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002B73")]
				[Address(RVA = "0x115A864", Offset = "0x115A864", VA = "0x115A864", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700020F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B75")]
				[Address(RVA = "0x115A8AC", Offset = "0x115A8AC", VA = "0x115A8AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B6F")]
			[Address(RVA = "0x1159988", Offset = "0x1159988", VA = "0x1159988")]
			[DebuggerHidden]
			public <UploadApplicationLog>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6002B70")]
			[Address(RVA = "0x1159FE4", Offset = "0x1159FE4", VA = "0x1159FE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B71")]
			[Address(RVA = "0x115A000", Offset = "0x115A000", VA = "0x115A000", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B72")]
			[Address(RVA = "0x115A7B4", Offset = "0x115A7B4", VA = "0x115A7B4")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002B74")]
			[Address(RVA = "0x115A86C", Offset = "0x115A86C", VA = "0x115A86C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4003E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string projectCode;

		[Token(Token = "0x6002B62")]
		[Address(RVA = "0x11594A0", Offset = "0x11594A0", VA = "0x11594A0")]
		public void SendEmoteToServer(BotEmoteRecordData botEmoteRecordData, GameMessageSerializer gameMessageSerializer)
		{
		}

		[Token(Token = "0x6002B63")]
		[Address(RVA = "0x1159640", Offset = "0x1159640", VA = "0x1159640")]
		public void SendLogsToLogStorage(string fileName, LogSender logSender, GameMessageSerializer gameMessageSerializer, string category = "app_log", string type = "automatic")
		{
		}

		[Token(Token = "0x6002B64")]
		[Address(RVA = "0x11595B8", Offset = "0x11595B8", VA = "0x11595B8")]
		[IteratorStateMachine(typeof(<UploadEmote>d__3))]
		private IEnumerator UploadEmote(Mtm[] emoteMessages, string emoteName, GameMessageSerializer gameMessageSerializer)
		{
			return null;
		}

		[Token(Token = "0x6002B65")]
		[Address(RVA = "0x11598D8", Offset = "0x11598D8", VA = "0x11598D8")]
		[IteratorStateMachine(typeof(<UploadApplicationLog>d__4))]
		private IEnumerator UploadApplicationLog(string fileName, LogSender logSender, string category)
		{
			return null;
		}

		[Token(Token = "0x6002B66")]
		[Address(RVA = "0x11599B0", Offset = "0x11599B0", VA = "0x11599B0")]
		public LogSenderComponent()
		{
		}
	}
}
namespace Ignis.Platform
{
	[Token(Token = "0x20009DB")]
	public class BayTekPlatformFactory : IPlatformFactory
	{
		[Token(Token = "0x20009DC")]
		[CompilerGenerated]
		private sealed class <Initialize>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003EB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003EB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003EB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BayTekPlatformFactory <>4__this;

			[Token(Token = "0x17000210")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002B8B")]
				[Address(RVA = "0x115B348", Offset = "0x115B348", VA = "0x115B348", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000211")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B8D")]
				[Address(RVA = "0x115B390", Offset = "0x115B390", VA = "0x115B390", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B88")]
			[Address(RVA = "0x115A998", Offset = "0x115A998", VA = "0x115A998")]
			[DebuggerHidden]
			public <Initialize>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6002B89")]
			[Address(RVA = "0x115B2A0", Offset = "0x115B2A0", VA = "0x115B2A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B8A")]
			[Address(RVA = "0x115B2A4", Offset = "0x115B2A4", VA = "0x115B2A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B8C")]
			[Address(RVA = "0x115B350", Offset = "0x115B350", VA = "0x115B350", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20009DD")]
		[CompilerGenerated]
		private sealed class <LoadSettings>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003EB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003EB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003EB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BayTekPlatformFactory <>4__this;

			[Token(Token = "0x4003EB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AssetRequest<SteamVrPlatformSettings> <request>5__2;

			[Token(Token = "0x17000212")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002B91")]
				[Address(RVA = "0x115B598", Offset = "0x115B598", VA = "0x115B598", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000213")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002B93")]
				[Address(RVA = "0x115B5E0", Offset = "0x115B5E0", VA = "0x115B5E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002B8E")]
			[Address(RVA = "0x115AA28", Offset = "0x115AA28", VA = "0x115AA28")]
			[DebuggerHidden]
			public <LoadSettings>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6002B8F")]
			[Address(RVA = "0x115B398", Offset = "0x115B398", VA = "0x115B398", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002B90")]
			[Address(RVA = "0x115B39C", Offset = "0x115B39C", VA = "0x115B39C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002B92")]
			[Address(RVA = "0x115B5A0", Offset = "0x115B5A0", VA = "0x115B5A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4003E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IPlatformFactory platformFactory;

		[Token(Token = "0x4003EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string bayTekSettingsKey;

		[Token(Token = "0x4003EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PlayFabLoginData playFabLoginData;

		[Token(Token = "0x4003EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ArcadeLoginHandler arcadeLoginHandler;

		[Token(Token = "0x4003EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4003EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4003EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PersistentPlatformData platformPersistentData;

		[Token(Token = "0x4003EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly InputData inputData;

		[Token(Token = "0x4003EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly DevicePlatform platform;

		[Token(Token = "0x4003EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ITimeSinceStartupTracking timeSinceStartupTracking;

		[Token(Token = "0x4003EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly VisualQualityHandlerData visualQualityHandlerData;

		[Token(Token = "0x4003EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IgnisNetworkConnectionData networkConnectionData;

		[Token(Token = "0x4003EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private XrPluginData xrPluginData;

		[Token(Token = "0x4003EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private XrPluginHandler xrPluginHandler;

		[Token(Token = "0x4003EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlatformLoginData loginData;

		[Token(Token = "0x4003EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ITickable platformLoginHandler;

		[Token(Token = "0x4003EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private HapticData hapticData;

		[Token(Token = "0x4003EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private IHapticHandler bayTekHapticHandler;

		[Token(Token = "0x4003EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private SteamVrPlatformSettings baytekPlatformSettings;

		[Token(Token = "0x4003EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private readonly BayTekData bayTekData;

		[Token(Token = "0x6002B76")]
		[Address(RVA = "0x115A8B4", Offset = "0x115A8B4", VA = "0x115A8B4")]
		public BayTekPlatformFactory(IPlatformFactory platformFactory, LocalPersistentData localPersistentData, PersistantDataUtility persistantDataUtility, BayTekData bayTekData, InputData inputData, IgnisNetworkConnectionData networkConnectionData, DevicePlatform platform, ITimeSinceStartupTracking timeSinceStartupTracking, VisualQualityHandlerData visualQualityHandlerData)
		{
		}

		[Token(Token = "0x6002B77")]
		[Address(RVA = "0x115A930", Offset = "0x115A930", VA = "0x115A930", Slot = "4")]
		[IteratorStateMachine(typeof(<Initialize>d__21))]
		public IEnumerator Initialize()
		{
			return null;
		}

		[Token(Token = "0x6002B78")]
		[Address(RVA = "0x115A9C0", Offset = "0x115A9C0", VA = "0x115A9C0", Slot = "5")]
		[IteratorStateMachine(typeof(<LoadSettings>d__22))]
		public IEnumerator LoadSettings()
		{
			return null;
		}

		[Token(Token = "0x6002B79")]
		[Address(RVA = "0x115AA50", Offset = "0x115AA50", VA = "0x115AA50", Slot = "6")]
		public CameraReference Camera()
		{
			return null;
		}

		[Token(Token = "0x6002B7A")]
		[Address(RVA = "0x115AACC", Offset = "0x115AACC", VA = "0x115AACC", Slot = "10")]
		public (ILoginHandler, LoginData) PlayerDatabaseLoginHandler(PlayFabConnectionSettings playFabConnectionSettings, IMultiplayerProtocolVersion multiplayerProtocolVersion)
		{
			return default((ILoginHandler, LoginData));
		}

		[Token(Token = "0x6002B7B")]
		[Address(RVA = "0x115ABE4", Offset = "0x115ABE4", VA = "0x115ABE4", Slot = "8")]
		public IInputHandler InputHandler(Transform cameraTransform)
		{
			return null;
		}

		[Token(Token = "0x6002B7C")]
		[Address(RVA = "0x115AC54", Offset = "0x115AC54", VA = "0x115AC54", Slot = "11")]
		public (IHapticHandler, HapticData) HapticHandler()
		{
			return default((IHapticHandler, HapticData));
		}

		[Token(Token = "0x6002B7D")]
		[Address(RVA = "0x115AD50", Offset = "0x115AD50", VA = "0x115AD50", Slot = "12")]
		public PlayerReferences LocalPlayer(PlayerSettings playerSettings, Transform worldParent)
		{
			return null;
		}

		[Token(Token = "0x6002B7E")]
		[Address(RVA = "0x115AE0C", Offset = "0x115AE0C", VA = "0x115AE0C", Slot = "13")]
		public (IXrPluginHandler, XrPluginData) XrPluginHandler()
		{
			return default((IXrPluginHandler, XrPluginData));
		}

		[Token(Token = "0x6002B7F")]
		[Address(RVA = "0x115AF14", Offset = "0x115AF14", VA = "0x115AF14", Slot = "14")]
		public ITickable PlatformLoginHandler()
		{
			return null;
		}

		[Token(Token = "0x6002B80")]
		[Address(RVA = "0x115AFB8", Offset = "0x115AFB8", VA = "0x115AFB8", Slot = "15")]
		public List<ITickable> AdditionalPreTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002B81")]
		[Address(RVA = "0x115B028", Offset = "0x115B028", VA = "0x115B028", Slot = "16")]
		public List<ITickable> AdditionalPostTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002B82")]
		[Address(RVA = "0x115B098", Offset = "0x115B098", VA = "0x115B098", Slot = "17")]
		public PersistentPlatformData CreateLocalPersistentPlatformData()
		{
			return null;
		}

		[Token(Token = "0x6002B83")]
		[Address(RVA = "0x115B184", Offset = "0x115B184", VA = "0x115B184", Slot = "18")]
		public string GetTrackingPlatform()
		{
			return null;
		}

		[Token(Token = "0x6002B84")]
		[Address(RVA = "0x115B1DC", Offset = "0x115B1DC", VA = "0x115B1DC", Slot = "19")]
		public string GetTrackingFlavor()
		{
			return null;
		}

		[Token(Token = "0x6002B85")]
		[Address(RVA = "0x115B21C", Offset = "0x115B21C", VA = "0x115B21C", Slot = "7")]
		public SceneHandlerSettings SceneSettings()
		{
			return null;
		}

		[Token(Token = "0x6002B86")]
		[Address(RVA = "0x115B238", Offset = "0x115B238", VA = "0x115B238", Slot = "9")]
		public bool IsSystemVoipActive()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20009DE")]
	public class AutoSpectatorPlatformFactory : IPlatformFactory
	{
		[Token(Token = "0x20009DF")]
		[CompilerGenerated]
		private sealed class <Initialize>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003EC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003EC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003EC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AutoSpectatorPlatformFactory <>4__this;

			[Token(Token = "0x4003EC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AssetRequest<bool> <internalSettingsExist>5__2;

			[Token(Token = "0x17000214")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002BA8")]
				[Address(RVA = "0x115C070", Offset = "0x115C070", VA = "0x115C070", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000215")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002BAA")]
				[Address(RVA = "0x115C0B8", Offset = "0x115C0B8", VA = "0x115C0B8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002BA5")]
			[Address(RVA = "0x115B6D0", Offset = "0x115B6D0", VA = "0x115B6D0")]
			[DebuggerHidden]
			public <Initialize>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6002BA6")]
			[Address(RVA = "0x115BDFC", Offset = "0x115BDFC", VA = "0x115BDFC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002BA7")]
			[Address(RVA = "0x115BE00", Offset = "0x115BE00", VA = "0x115BE00", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002BA9")]
			[Address(RVA = "0x115C078", Offset = "0x115C078", VA = "0x115C078", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20009E0")]
		[CompilerGenerated]
		private sealed class <LoadSettings>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003ECA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003ECB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003ECC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AutoSpectatorPlatformFactory <>4__this;

			[Token(Token = "0x4003ECD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AssetRequest<DesktopPlatformSettings> <request>5__2;

			[Token(Token = "0x4003ECE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private AssetRequest<TrailerSettings> <request>5__3;

			[Token(Token = "0x4003ECF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private AssetRequest<AutoSpectatorPlatformSettings> <request>5__4;

			[Token(Token = "0x17000216")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002BAE")]
				[Address(RVA = "0x115C474", Offset = "0x115C474", VA = "0x115C474", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000217")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002BB0")]
				[Address(RVA = "0x115C4BC", Offset = "0x115C4BC", VA = "0x115C4BC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002BAB")]
			[Address(RVA = "0x115B760", Offset = "0x115B760", VA = "0x115B760")]
			[DebuggerHidden]
			public <LoadSettings>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6002BAC")]
			[Address(RVA = "0x115C0C0", Offset = "0x115C0C0", VA = "0x115C0C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002BAD")]
			[Address(RVA = "0x115C0C4", Offset = "0x115C0C4", VA = "0x115C0C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002BAF")]
			[Address(RVA = "0x115C47C", Offset = "0x115C47C", VA = "0x115C47C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4003EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IPlatformFactory platformFactory;

		[Token(Token = "0x4003EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AutoSpectatorPlatformSettings platformSettings;

		[Token(Token = "0x4003EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CameraReference cameraReference;

		[Token(Token = "0x4003EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DesktopPlatformSettings desktopPlatformSettings;

		[Token(Token = "0x4003EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly AutoSpectateData autoSpectateData;

		[Token(Token = "0x4003EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly AutoSpectateSettings autoSpectateSettings;

		[Token(Token = "0x4003EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly PlayFabUserSettingsData playFabUserSettingsData;

		[Token(Token = "0x4003EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly InputData inputData;

		[Token(Token = "0x4003EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly VisualQualityHandlerData visualQualityHandlerData;

		[Token(Token = "0x4003EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly SpectatorCameraData spectatorCameraData;

		[Token(Token = "0x4003EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private TrailerSettings trailerSettings;

		[Token(Token = "0x4003EC5")]
		public const string INTERNAL_KEY = "AutoSpectateInternal";

		[Token(Token = "0x6002B94")]
		[Address(RVA = "0x115B5E8", Offset = "0x115B5E8", VA = "0x115B5E8")]
		public AutoSpectatorPlatformFactory(IPlatformFactory platformFactory, AutoSpectateSettings autoSpectateSettings, AutoSpectateData autoSpectateData, PlayFabUserSettingsData playFabUserSettingsData, InputData inputData, VisualQualityHandlerData visualQualityHandlerData, SpectatorCameraData spectatorCameraData)
		{
		}

		[Token(Token = "0x6002B95")]
		[Address(RVA = "0x115B668", Offset = "0x115B668", VA = "0x115B668", Slot = "4")]
		[IteratorStateMachine(typeof(<Initialize>d__13))]
		public IEnumerator Initialize()
		{
			return null;
		}

		[Token(Token = "0x6002B96")]
		[Address(RVA = "0x115B6F8", Offset = "0x115B6F8", VA = "0x115B6F8", Slot = "5")]
		[IteratorStateMachine(typeof(<LoadSettings>d__14))]
		public IEnumerator LoadSettings()
		{
			return null;
		}

		[Token(Token = "0x6002B97")]
		[Address(RVA = "0x115B788", Offset = "0x115B788", VA = "0x115B788", Slot = "6")]
		public CameraReference Camera()
		{
			return null;
		}

		[Token(Token = "0x6002B98")]
		[Address(RVA = "0x115B80C", Offset = "0x115B80C", VA = "0x115B80C", Slot = "7")]
		public SceneHandlerSettings SceneSettings()
		{
			return null;
		}

		[Token(Token = "0x6002B99")]
		[Address(RVA = "0x115B828", Offset = "0x115B828", VA = "0x115B828", Slot = "9")]
		public bool IsSystemVoipActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6002B9A")]
		[Address(RVA = "0x115B830", Offset = "0x115B830", VA = "0x115B830", Slot = "10")]
		public (ILoginHandler, LoginData) PlayerDatabaseLoginHandler(PlayFabConnectionSettings playFabConnectionSettings, IMultiplayerProtocolVersion multiplayerProtocolVersion)
		{
			return default((ILoginHandler, LoginData));
		}

		[Token(Token = "0x6002B9B")]
		[Address(RVA = "0x115B8EC", Offset = "0x115B8EC", VA = "0x115B8EC", Slot = "8")]
		public IInputHandler InputHandler(Transform cameraTransform)
		{
			return null;
		}

		[Token(Token = "0x6002B9C")]
		[Address(RVA = "0x115B980", Offset = "0x115B980", VA = "0x115B980", Slot = "11")]
		public (IHapticHandler, HapticData) HapticHandler()
		{
			return default((IHapticHandler, HapticData));
		}

		[Token(Token = "0x6002B9D")]
		[Address(RVA = "0x115BA24", Offset = "0x115BA24", VA = "0x115BA24", Slot = "12")]
		public PlayerReferences LocalPlayer(PlayerSettings playerSettings, Transform worldParent)
		{
			return null;
		}

		[Token(Token = "0x6002B9E")]
		[Address(RVA = "0x115BA30", Offset = "0x115BA30", VA = "0x115BA30", Slot = "13")]
		public (IXrPluginHandler, XrPluginData) XrPluginHandler()
		{
			return default((IXrPluginHandler, XrPluginData));
		}

		[Token(Token = "0x6002B9F")]
		[Address(RVA = "0x115BAD4", Offset = "0x115BAD4", VA = "0x115BAD4", Slot = "14")]
		public ITickable PlatformLoginHandler()
		{
			return null;
		}

		[Token(Token = "0x6002BA0")]
		[Address(RVA = "0x115BB78", Offset = "0x115BB78", VA = "0x115BB78", Slot = "15")]
		public List<ITickable> AdditionalPreTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002BA1")]
		[Address(RVA = "0x115BC1C", Offset = "0x115BC1C", VA = "0x115BC1C", Slot = "16")]
		public List<ITickable> AdditionalPostTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002BA2")]
		[Address(RVA = "0x115BCC0", Offset = "0x115BCC0", VA = "0x115BCC0", Slot = "17")]
		public PersistentPlatformData CreateLocalPersistentPlatformData()
		{
			return null;
		}

		[Token(Token = "0x6002BA3")]
		[Address(RVA = "0x115BD64", Offset = "0x115BD64", VA = "0x115BD64", Slot = "18")]
		public string GetTrackingPlatform()
		{
			return null;
		}

		[Token(Token = "0x6002BA4")]
		[Address(RVA = "0x115BDBC", Offset = "0x115BDBC", VA = "0x115BDBC", Slot = "19")]
		public string GetTrackingFlavor()
		{
			return null;
		}
	}
	[Token(Token = "0x20009E1")]
	[CreateAssetMenu(menuName = "Settings/Platform/AutoSpectatorPlatformSettings", fileName = "AutoSpectatorPlatformSettings")]
	public class AutoSpectatorPlatformSettings : PlatformSettings
	{
		[Token(Token = "0x6002BB1")]
		[Address(RVA = "0x115C4C4", Offset = "0x115C4C4", VA = "0x115C4C4")]
		public AutoSpectatorPlatformSettings()
		{
		}
	}
	[Token(Token = "0x20009E2")]
	public class DesktopPlatformFactory : IPlatformFactory
	{
		[Token(Token = "0x20009E3")]
		[CompilerGenerated]
		private sealed class <Initialize>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003EDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003EDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003EDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DesktopPlatformFactory <>4__this;

			[Token(Token = "0x17000218")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002BC6")]
				[Address(RVA = "0x115CF80", Offset = "0x115CF80", VA = "0x115CF80", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000219")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002BC8")]
				[Address(RVA = "0x115CFC8", Offset = "0x115CFC8", VA = "0x115CFC8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002BC3")]
			[Address(RVA = "0x115C594", Offset = "0x115C594", VA = "0x115C594")]
			[DebuggerHidden]
			public <Initialize>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6002BC4")]
			[Address(RVA = "0x115CE9C", Offset = "0x115CE9C", VA = "0x115CE9C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002BC5")]
			[Address(RVA = "0x115CEA0", Offset = "0x115CEA0", VA = "0x115CEA0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002BC7")]
			[Address(RVA = "0x115CF88", Offset = "0x115CF88", VA = "0x115CF88", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20009E4")]
		[CompilerGenerated]
		private sealed class <LoadSettings>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003EDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003EE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003EE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DesktopPlatformFactory <>4__this;

			[Token(Token = "0x4003EE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AssetRequest<DesktopPlatformSettings> <request>5__2;

			[Token(Token = "0x1700021A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002BCC")]
				[Address(RVA = "0x115D1CC", Offset = "0x115D1CC", VA = "0x115D1CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700021B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002BCE")]
				[Address(RVA = "0x115D214", Offset = "0x115D214", VA = "0x115D214", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002BC9")]
			[Address(RVA = "0x115C624", Offset = "0x115C624", VA = "0x115C624")]
			[DebuggerHidden]
			public <LoadSettings>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6002BCA")]
			[Address(RVA = "0x115CFD0", Offset = "0x115CFD0", VA = "0x115CFD0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002BCB")]
			[Address(RVA = "0x115CFD4", Offset = "0x115CFD4", VA = "0x115CFD4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002BCD")]
			[Address(RVA = "0x115D1D4", Offset = "0x115D1D4", VA = "0x115D1D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4003ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IPlatformFactory platformFactory;

		[Token(Token = "0x4003ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly InputData inputData;

		[Token(Token = "0x4003ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ReplayData replayData;

		[Token(Token = "0x4003ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DesktopPlatformSettings desktopPlatformSettings;

		[Token(Token = "0x4003ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PlayFabLoginHandler playFabLoginHandler;

		[Token(Token = "0x4003ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PlayFabLoginData loginData;

		[Token(Token = "0x4003ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PersistentPlatformData platformPersistentData;

		[Token(Token = "0x4003ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private HapticData hapticData;

		[Token(Token = "0x4003ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IHapticHandler hapticsHandler;

		[Token(Token = "0x4003ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private LocalPersistentData localPersistentData;

		[Token(Token = "0x4003EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AutoSpectateData autoSpectateData;

		[Token(Token = "0x4003EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly VisualQualityHandlerData visualQualityHandlerData;

		[Token(Token = "0x6002BB2")]
		[Address(RVA = "0x115C4D4", Offset = "0x115C4D4", VA = "0x115C4D4")]
		public DesktopPlatformFactory(IPlatformFactory platformFactory, InputData inputData, ReplayData replayData, LocalPersistentData localPersistentData, AutoSpectateData autoSpectateData, VisualQualityHandlerData visualQualityHandlerData)
		{
		}

		[Token(Token = "0x6002BB3")]
		[Address(RVA = "0x115C52C", Offset = "0x115C52C", VA = "0x115C52C", Slot = "4")]
		[IteratorStateMachine(typeof(<Initialize>d__13))]
		public IEnumerator Initialize()
		{
			return null;
		}

		[Token(Token = "0x6002BB4")]
		[Address(RVA = "0x115C5BC", Offset = "0x115C5BC", VA = "0x115C5BC", Slot = "5")]
		[IteratorStateMachine(typeof(<LoadSettings>d__14))]
		public IEnumerator LoadSettings()
		{
			return null;
		}

		[Token(Token = "0x6002BB5")]
		[Address(RVA = "0x115C64C", Offset = "0x115C64C", VA = "0x115C64C", Slot = "6")]
		public CameraReference Camera()
		{
			return null;
		}

		[Token(Token = "0x6002BB6")]
		[Address(RVA = "0x115C6F0", Offset = "0x115C6F0", VA = "0x115C6F0", Slot = "7")]
		public SceneHandlerSettings SceneSettings()
		{
			return null;
		}

		[Token(Token = "0x6002BB7")]
		[Address(RVA = "0x115C794", Offset = "0x115C794", VA = "0x115C794", Slot = "12")]
		public PlayerReferences LocalPlayer(PlayerSettings playerSettings, Transform worldParent)
		{
			return null;
		}

		[Token(Token = "0x6002BB8")]
		[Address(RVA = "0x115C850", Offset = "0x115C850", VA = "0x115C850", Slot = "9")]
		public bool IsSystemVoipActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6002BB9")]
		[Address(RVA = "0x115C858", Offset = "0x115C858", VA = "0x115C858", Slot = "10")]
		public (ILoginHandler, LoginData) PlayerDatabaseLoginHandler(PlayFabConnectionSettings playFabConnectionSettings, IMultiplayerProtocolVersion multiplayerProtocolVersion)
		{
			return default((ILoginHandler, LoginData));
		}

		[Token(Token = "0x6002BBA")]
		[Address(RVA = "0x115C914", Offset = "0x115C914", VA = "0x115C914", Slot = "8")]
		public IInputHandler InputHandler(Transform cameraTransform)
		{
			return null;
		}

		[Token(Token = "0x6002BBB")]
		[Address(RVA = "0x115C9A0", Offset = "0x115C9A0", VA = "0x115C9A0", Slot = "11")]
		public (IHapticHandler, HapticData) HapticHandler()
		{
			return default((IHapticHandler, HapticData));
		}

		[Token(Token = "0x6002BBC")]
		[Address(RVA = "0x115CAD0", Offset = "0x115CAD0", VA = "0x115CAD0", Slot = "13")]
		public (IXrPluginHandler, XrPluginData) XrPluginHandler()
		{
			return default((IXrPluginHandler, XrPluginData));
		}

		[Token(Token = "0x6002BBD")]
		[Address(RVA = "0x115CB74", Offset = "0x115CB74", VA = "0x115CB74", Slot = "14")]
		public ITickable PlatformLoginHandler()
		{
			return null;
		}

		[Token(Token = "0x6002BBE")]
		[Address(RVA = "0x115CC18", Offset = "0x115CC18", VA = "0x115CC18", Slot = "15")]
		public List<ITickable> AdditionalPreTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002BBF")]
		[Address(RVA = "0x115CCBC", Offset = "0x115CCBC", VA = "0x115CCBC", Slot = "16")]
		public List<ITickable> AdditionalPostTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002BC0")]
		[Address(RVA = "0x115CD60", Offset = "0x115CD60", VA = "0x115CD60", Slot = "17")]
		public PersistentPlatformData CreateLocalPersistentPlatformData()
		{
			return null;
		}

		[Token(Token = "0x6002BC1")]
		[Address(RVA = "0x115CE04", Offset = "0x115CE04", VA = "0x115CE04", Slot = "18")]
		public string GetTrackingPlatform()
		{
			return null;
		}

		[Token(Token = "0x6002BC2")]
		[Address(RVA = "0x115CE5C", Offset = "0x115CE5C", VA = "0x115CE5C", Slot = "19")]
		public string GetTrackingFlavor()
		{
			return null;
		}
	}
	[Token(Token = "0x20009E5")]
	[CreateAssetMenu(menuName = "Settings/Platform/DesktopPlatformSettings", fileName = "DesktopPlatformSettings")]
	public class DesktopPlatformSettings : PlatformSettings
	{
		[Token(Token = "0x4003EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InputDesktopSettings inputDesktopSettings;

		[Token(Token = "0x6002BCF")]
		[Address(RVA = "0x115D21C", Offset = "0x115D21C", VA = "0x115D21C")]
		public DesktopPlatformSettings()
		{
		}
	}
	[Token(Token = "0x20009E6")]
	public class DummyPlatformFactory : IPlatformFactory
	{
		[Token(Token = "0x20009E7")]
		[CompilerGenerated]
		private sealed class <Initialize>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003EF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003EF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x1700021C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002BE4")]
				[Address(RVA = "0x115DC94", Offset = "0x115DC94", VA = "0x115DC94", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700021D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002BE6")]
				[Address(RVA = "0x115DCDC", Offset = "0x115DCDC", VA = "0x115DCDC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002BE1")]
			[Address(RVA = "0x115D2C8", Offset = "0x115D2C8", VA = "0x115D2C8")]
			[DebuggerHidden]
			public <Initialize>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6002BE2")]
			[Address(RVA = "0x115DC5C", Offset = "0x115DC5C", VA = "0x115DC5C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002BE3")]
			[Address(RVA = "0x115DC60", Offset = "0x115DC60", VA = "0x115DC60", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002BE5")]
			[Address(RVA = "0x115DC9C", Offset = "0x115DC9C", VA = "0x115DC9C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20009E8")]
		[CompilerGenerated]
		private sealed class <LoadSettings>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003EF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003EF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DummyPlatformFactory <>4__this;

			[Token(Token = "0x4003EF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AssetRequest<DesktopPlatformSettings> <request>5__2;

			[Token(Token = "0x1700021E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002BEA")]
				[Address(RVA = "0x115DE34", Offset = "0x115DE34", VA = "0x115DE34", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700021F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002BEC")]
				[Address(RVA = "0x115DE7C", Offset = "0x115DE7C", VA = "0x115DE7C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002BE7")]
			[Address(RVA = "0x115D358", Offset = "0x115D358", VA = "0x115D358")]
			[DebuggerHidden]
			public <LoadSettings>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6002BE8")]
			[Address(RVA = "0x115DCE4", Offset = "0x115DCE4", VA = "0x115DCE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002BE9")]
			[Address(RVA = "0x115DCE8", Offset = "0x115DCE8", VA = "0x115DCE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002BEB")]
			[Address(RVA = "0x115DE3C", Offset = "0x115DE3C", VA = "0x115DE3C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4003EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly InputData inputData;

		[Token(Token = "0x4003EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ReplayData replayData;

		[Token(Token = "0x4003EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4003EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DesktopPlatformSettings desktopPlatformSettings;

		[Token(Token = "0x4003EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CameraReference camera;

		[Token(Token = "0x4003EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HapticData hapticData;

		[Token(Token = "0x4003EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private DummyHapticHandler dummyHapticHandler;

		[Token(Token = "0x4003EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private XrPluginData xrPluginData;

		[Token(Token = "0x4003EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IXrPluginHandler xrPluginHandler;

		[Token(Token = "0x4003EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PlatformLoginData loginData;

		[Token(Token = "0x4003EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ITickable platformLoginHandler;

		[Token(Token = "0x4003EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PlayFabLoginHandler playFabLoginHandler;

		[Token(Token = "0x4003EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private PlayFabLoginData playFaboginData;

		[Token(Token = "0x4003EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PersistentPlatformData platformPersistentData;

		[Token(Token = "0x6002BD0")]
		[Address(RVA = "0x115D224", Offset = "0x115D224", VA = "0x115D224")]
		public DummyPlatformFactory(InputData inputData, ReplayData replayData, PersistantDataUtility persistantDataUtility, PlatformLoginData loginData)
		{
		}

		[Token(Token = "0x6002BD1")]
		[Address(RVA = "0x115D268", Offset = "0x115D268", VA = "0x115D268", Slot = "4")]
		[IteratorStateMachine(typeof(<Initialize>d__15))]
		public IEnumerator Initialize()
		{
			return null;
		}

		[Token(Token = "0x6002BD2")]
		[Address(RVA = "0x115D2F0", Offset = "0x115D2F0", VA = "0x115D2F0", Slot = "5")]
		[IteratorStateMachine(typeof(<LoadSettings>d__16))]
		public IEnumerator LoadSettings()
		{
			return null;
		}

		[Token(Token = "0x6002BD3")]
		[Address(RVA = "0x115D380", Offset = "0x115D380", VA = "0x115D380", Slot = "6")]
		public CameraReference Camera()
		{
			return null;
		}

		[Token(Token = "0x6002BD4")]
		[Address(RVA = "0x115D404", Offset = "0x115D404", VA = "0x115D404", Slot = "7")]
		public SceneHandlerSettings SceneSettings()
		{
			return null;
		}

		[Token(Token = "0x6002BD5")]
		[Address(RVA = "0x115D420", Offset = "0x115D420", VA = "0x115D420", Slot = "9")]
		public bool IsSystemVoipActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6002BD6")]
		[Address(RVA = "0x115D428", Offset = "0x115D428", VA = "0x115D428", Slot = "10")]
		public (ILoginHandler, LoginData) PlayerDatabaseLoginHandler(PlayFabConnectionSettings playFabConnectionSettings, IMultiplayerProtocolVersion multiplayerProtocolVersion)
		{
			return default((ILoginHandler, LoginData));
		}

		[Token(Token = "0x6002BD7")]
		[Address(RVA = "0x115D6B4", Offset = "0x115D6B4", VA = "0x115D6B4", Slot = "8")]
		public IInputHandler InputHandler(Transform cameraTransform)
		{
			return null;
		}

		[Token(Token = "0x6002BD8")]
		[Address(RVA = "0x115D748", Offset = "0x115D748", VA = "0x115D748", Slot = "11")]
		public (IHapticHandler, HapticData) HapticHandler()
		{
			return default((IHapticHandler, HapticData));
		}

		[Token(Token = "0x6002BD9")]
		[Address(RVA = "0x115D860", Offset = "0x115D860", VA = "0x115D860", Slot = "12")]
		public PlayerReferences LocalPlayer(PlayerSettings playerSettings, Transform worldParent)
		{
			return null;
		}

		[Token(Token = "0x6002BDA")]
		[Address(RVA = "0x115D86C", Offset = "0x115D86C", VA = "0x115D86C", Slot = "13")]
		public (IXrPluginHandler, XrPluginData) XrPluginHandler()
		{
			return default((IXrPluginHandler, XrPluginData));
		}

		[Token(Token = "0x6002BDB")]
		[Address(RVA = "0x115D988", Offset = "0x115D988", VA = "0x115D988", Slot = "14")]
		public ITickable PlatformLoginHandler()
		{
			return null;
		}

		[Token(Token = "0x6002BDC")]
		[Address(RVA = "0x115DA38", Offset = "0x115DA38", VA = "0x115DA38", Slot = "15")]
		public List<ITickable> AdditionalPreTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002BDD")]
		[Address(RVA = "0x115DAA8", Offset = "0x115DAA8", VA = "0x115DAA8", Slot = "16")]
		public List<ITickable> AdditionalPostTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002BDE")]
		[Address(RVA = "0x115DB18", Offset = "0x115DB18", VA = "0x115DB18", Slot = "17")]
		public PersistentPlatformData CreateLocalPersistentPlatformData()
		{
			return null;
		}

		[Token(Token = "0x6002BDF")]
		[Address(RVA = "0x115DBC4", Offset = "0x115DBC4", VA = "0x115DBC4", Slot = "18")]
		public string GetTrackingPlatform()
		{
			return null;
		}

		[Token(Token = "0x6002BE0")]
		[Address(RVA = "0x115DC1C", Offset = "0x115DC1C", VA = "0x115DC1C", Slot = "19")]
		public string GetTrackingFlavor()
		{
			return null;
		}
	}
	[Token(Token = "0x20009E9")]
	public class DummyHapticHandler : IHapticHandler, ITickable
	{
		[Token(Token = "0x4003EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly HapticData hapticData;

		[Token(Token = "0x6002BED")]
		[Address(RVA = "0x115D838", Offset = "0x115D838", VA = "0x115D838")]
		public DummyHapticHandler(HapticData hapticData)
		{
		}

		[Token(Token = "0x6002BEE")]
		[Address(RVA = "0x115DE84", Offset = "0x115DE84", VA = "0x115DE84", Slot = "4")]
		public void SetupDebug()
		{
		}

		[Token(Token = "0x6002BEF")]
		[Address(RVA = "0x115DE88", Offset = "0x115DE88", VA = "0x115DE88", Slot = "5")]
		public void Tick()
		{
		}
	}
	[Token(Token = "0x20009EA")]
	public class DummyXrPluginHandler : IXrPluginHandler, ITickable
	{
		[Token(Token = "0x6002BF0")]
		[Address(RVA = "0x115D960", Offset = "0x115D960", VA = "0x115D960")]
		public DummyXrPluginHandler(XrPluginData xrPluginData)
		{
		}

		[Token(Token = "0x6002BF1")]
		[Address(RVA = "0x115DF10", Offset = "0x115DF10", VA = "0x115DF10", Slot = "5")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002BF2")]
		[Address(RVA = "0x115DF14", Offset = "0x115DF14", VA = "0x115DF14", Slot = "4")]
		public void StopXRPlugin()
		{
		}
	}
	[Token(Token = "0x20009EB")]
	public class DummyPlatformLoginHandler : ITickable
	{
		[Token(Token = "0x4003EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlatformLoginData loginData;

		[Token(Token = "0x4003EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool initailized;

		[Token(Token = "0x6002BF3")]
		[Address(RVA = "0x115DA04", Offset = "0x115DA04", VA = "0x115DA04")]
		public DummyPlatformLoginHandler(PlatformLoginData loginData)
		{
		}

		[Token(Token = "0x6002BF4")]
		[Address(RVA = "0x115DF18", Offset = "0x115DF18", VA = "0x115DF18", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002BF5")]
		[Address(RVA = "0x115DF74", Offset = "0x115DF74", VA = "0x115DF74")]
		public static string GenerateProjectUniqueString()
		{
			return null;
		}
	}
	[Token(Token = "0x20009EC")]
	public interface IPlatformFactory
	{
		[Token(Token = "0x6002BF6")]
		IEnumerator Initialize();

		[Token(Token = "0x6002BF7")]
		IEnumerator LoadSettings();

		[Token(Token = "0x6002BF8")]
		CameraReference Camera();

		[Token(Token = "0x6002BF9")]
		SceneHandlerSettings SceneSettings();

		[Token(Token = "0x6002BFA")]
		IInputHandler InputHandler(Transform cameraTransform);

		[Token(Token = "0x6002BFB")]
		bool IsSystemVoipActive();

		[Token(Token = "0x6002BFC")]
		(ILoginHandler, LoginData) PlayerDatabaseLoginHandler(PlayFabConnectionSettings playFabConnectionSettings, IMultiplayerProtocolVersion multiplayerProtocolVersion);

		[Token(Token = "0x6002BFD")]
		(IHapticHandler, HapticData) HapticHandler();

		[Token(Token = "0x6002BFE")]
		PlayerReferences LocalPlayer(PlayerSettings playerSettings, Transform worldParent);

		[Token(Token = "0x6002BFF")]
		(IXrPluginHandler, XrPluginData) XrPluginHandler();

		[Token(Token = "0x6002C00")]
		ITickable PlatformLoginHandler();

		[Token(Token = "0x6002C01")]
		List<ITickable> AdditionalPreTickHandler();

		[Token(Token = "0x6002C02")]
		List<ITickable> AdditionalPostTickHandler();

		[Token(Token = "0x6002C03")]
		PersistentPlatformData CreateLocalPersistentPlatformData();

		[Token(Token = "0x6002C04")]
		string GetTrackingPlatform();

		[Token(Token = "0x6002C05")]
		string GetTrackingFlavor();
	}
	[Token(Token = "0x20009ED")]
	public static class PlatformFactoryUtility
	{
		[Token(Token = "0x6002C06")]
		[Address(RVA = "0x115AD5C", Offset = "0x115AD5C", VA = "0x115AD5C")]
		public static PlayerReferences LocalPlayer(PlayerSettings playerSettings, Transform worldParent)
		{
			return null;
		}
	}
	[Token(Token = "0x20009EE")]
	public class LivPlatformFactory : IPlatformFactory
	{
		[Token(Token = "0x20009EF")]
		[CompilerGenerated]
		private sealed class <Initialize>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003F08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003F09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003F0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LivPlatformFactory <>4__this;

			[Token(Token = "0x17000220")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002C1B")]
				[Address(RVA = "0x115EA98", Offset = "0x115EA98", VA = "0x115EA98", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000221")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002C1D")]
				[Address(RVA = "0x115EAE0", Offset = "0x115EAE0", VA = "0x115EAE0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002C18")]
			[Address(RVA = "0x115E058", Offset = "0x115E058", VA = "0x115E058")]
			[DebuggerHidden]
			public <Initialize>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6002C19")]
			[Address(RVA = "0x115E9B4", Offset = "0x115E9B4", VA = "0x115E9B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002C1A")]
			[Address(RVA = "0x115E9B8", Offset = "0x115E9B8", VA = "0x115E9B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002C1C")]
			[Address(RVA = "0x115EAA0", Offset = "0x115EAA0", VA = "0x115EAA0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20009F0")]
		[CompilerGenerated]
		private sealed class <LoadSettings>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003F0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003F0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003F0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LivPlatformFactory <>4__this;

			[Token(Token = "0x4003F0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AssetRequest<LivPlatformSettings> <request>5__2;

			[Token(Token = "0x17000222")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002C21")]
				[Address(RVA = "0x115ECE8", Offset = "0x115ECE8", VA = "0x115ECE8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000223")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002C23")]
				[Address(RVA = "0x115ED30", Offset = "0x115ED30", VA = "0x115ED30", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002C1E")]
			[Address(RVA = "0x115E0E8", Offset = "0x115E0E8", VA = "0x115E0E8")]
			[DebuggerHidden]
			public <LoadSettings>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6002C1F")]
			[Address(RVA = "0x115EAE8", Offset = "0x115EAE8", VA = "0x115EAE8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002C20")]
			[Address(RVA = "0x115EAEC", Offset = "0x115EAEC", VA = "0x115EAEC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002C22")]
			[Address(RVA = "0x115ECF0", Offset = "0x115ECF0", VA = "0x115ECF0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4003EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IPlatformFactory baseFactory;

		[Token(Token = "0x4003EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly CameraFadeData cameraFadeData;

		[Token(Token = "0x4003EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MatchHandlerData matchHandlerData;

		[Token(Token = "0x4003EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly GameData gameData;

		[Token(Token = "0x4003EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly EntryPoint.EntryPointData entryPointData;

		[Token(Token = "0x4003F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly MenuStateData menuStateData;

		[Token(Token = "0x4003F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4003F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4003F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly VisualQualityHandlerData visualQualityHandlerData;

		[Token(Token = "0x4003F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private LivPlatformSettings platformSettings;

		[Token(Token = "0x4003F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CameraReference cameraReference;

		[Token(Token = "0x4003F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PlayerReferences playerReferences;

		[Token(Token = "0x4003F07")]
		public const string LIV_SETTINGS_KEY = "LivPlatformSettings";

		[Token(Token = "0x6002C07")]
		[Address(RVA = "0x115DF7C", Offset = "0x115DF7C", VA = "0x115DF7C")]
		public LivPlatformFactory(IPlatformFactory baseFactory, CameraFadeData cameraFadeData, MatchHandlerData matchHandlerData, GameData gameData, EntryPoint.EntryPointData entryPointData, MenuStateData menuStateData, PersistantDataUtility persistantDataUtility, LocalPersistentData localPersistentData, VisualQualityHandlerData visualQualityHandlerData)
		{
		}

		[Token(Token = "0x6002C08")]
		[Address(RVA = "0x115DFF0", Offset = "0x115DFF0", VA = "0x115DFF0", Slot = "4")]
		[IteratorStateMachine(typeof(<Initialize>d__14))]
		public IEnumerator Initialize()
		{
			return null;
		}

		[Token(Token = "0x6002C09")]
		[Address(RVA = "0x115E080", Offset = "0x115E080", VA = "0x115E080", Slot = "5")]
		[IteratorStateMachine(typeof(<LoadSettings>d__15))]
		public IEnumerator LoadSettings()
		{
			return null;
		}

		[Token(Token = "0x6002C0A")]
		[Address(RVA = "0x115E110", Offset = "0x115E110", VA = "0x115E110", Slot = "6")]
		public CameraReference Camera()
		{
			return null;
		}

		[Token(Token = "0x6002C0B")]
		[Address(RVA = "0x115E1BC", Offset = "0x115E1BC", VA = "0x115E1BC", Slot = "7")]
		public SceneHandlerSettings SceneSettings()
		{
			return null;
		}

		[Token(Token = "0x6002C0C")]
		[Address(RVA = "0x115E260", Offset = "0x115E260", VA = "0x115E260", Slot = "8")]
		public IInputHandler InputHandler(Transform cameraTransform)
		{
			return null;
		}

		[Token(Token = "0x6002C0D")]
		[Address(RVA = "0x115E30C", Offset = "0x115E30C", VA = "0x115E30C", Slot = "9")]
		public bool IsSystemVoipActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6002C0E")]
		[Address(RVA = "0x115E314", Offset = "0x115E314", VA = "0x115E314", Slot = "10")]
		public (ILoginHandler, LoginData) PlayerDatabaseLoginHandler(PlayFabConnectionSettings playFabConnectionSettings, IMultiplayerProtocolVersion multiplayerProtocolVersion)
		{
			return default((ILoginHandler, LoginData));
		}

		[Token(Token = "0x6002C0F")]
		[Address(RVA = "0x115E3D0", Offset = "0x115E3D0", VA = "0x115E3D0", Slot = "11")]
		public (IHapticHandler, HapticData) HapticHandler()
		{
			return default((IHapticHandler, HapticData));
		}

		[Token(Token = "0x6002C10")]
		[Address(RVA = "0x115E474", Offset = "0x115E474", VA = "0x115E474", Slot = "12")]
		public PlayerReferences LocalPlayer(PlayerSettings playerSettings, Transform worldParent)
		{
			return null;
		}

		[Token(Token = "0x6002C11")]
		[Address(RVA = "0x115E538", Offset = "0x115E538", VA = "0x115E538", Slot = "13")]
		public (IXrPluginHandler, XrPluginData) XrPluginHandler()
		{
			return default((IXrPluginHandler, XrPluginData));
		}

		[Token(Token = "0x6002C12")]
		[Address(RVA = "0x115E5DC", Offset = "0x115E5DC", VA = "0x115E5DC", Slot = "14")]
		public ITickable PlatformLoginHandler()
		{
			return null;
		}

		[Token(Token = "0x6002C13")]
		[Address(RVA = "0x115E680", Offset = "0x115E680", VA = "0x115E680", Slot = "15")]
		public List<ITickable> AdditionalPreTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002C14")]
		[Address(RVA = "0x115E724", Offset = "0x115E724", VA = "0x115E724", Slot = "16")]
		public List<ITickable> AdditionalPostTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002C15")]
		[Address(RVA = "0x115E7C8", Offset = "0x115E7C8", VA = "0x115E7C8", Slot = "17")]
		public PersistentPlatformData CreateLocalPersistentPlatformData()
		{
			return null;
		}

		[Token(Token = "0x6002C16")]
		[Address(RVA = "0x115E86C", Offset = "0x115E86C", VA = "0x115E86C", Slot = "18")]
		public string GetTrackingPlatform()
		{
			return null;
		}

		[Token(Token = "0x6002C17")]
		[Address(RVA = "0x115E910", Offset = "0x115E910", VA = "0x115E910", Slot = "19")]
		public string GetTrackingFlavor()
		{
			return null;
		}
	}
	[Token(Token = "0x20009F1")]
	[CreateAssetMenu(fileName = "LivPlatformSettings", menuName = "Settings/Platform/LivPlatformSettings")]
	public class LivPlatformSettings : ScriptableObject
	{
		[Token(Token = "0x4003F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LivSettingsViewReference livSettingsViewReference;

		[Token(Token = "0x4003F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LayerMask hidePLayerMask;

		[Token(Token = "0x4003F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public LayerMask showPlayerMask;

		[Token(Token = "0x4003F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameplayRulesLivShotsList gameplayRulesLivShotsList;

		[Token(Token = "0x6002C24")]
		[Address(RVA = "0x115ED38", Offset = "0x115ED38", VA = "0x115ED38")]
		public LivPlatformSettings()
		{
		}
	}
	[Token(Token = "0x20009F2")]
	[CreateAssetMenu(menuName = "Settings/Platform/BhapticsSettings", fileName = "BhapticsSettings")]
	public class BhapticsSettings : ScriptableObject
	{
		[Token(Token = "0x4003F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject bhapticsSetup;

		[Token(Token = "0x4003F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BhapticsSettingsViewReference bhapticsSettingsViewReference;

		[Token(Token = "0x4003F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Hit Patterns - Vest")]
		public HapticClipReference yellowHitClip;

		[Token(Token = "0x4003F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HapticClipReference orangeHitClip;

		[Token(Token = "0x4003F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public HapticClipReference novaHitClip;

		[Token(Token = "0x4003F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public HapticClipReference viperHitClip;

		[Token(Token = "0x4003F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public HapticClipReference laserHitClip;

		[Token(Token = "0x4003F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Interactions - Vest")]
		public HapticClipReference cageDamageClip;

		[Token(Token = "0x6002C25")]
		[Address(RVA = "0x115ED40", Offset = "0x115ED40", VA = "0x115ED40")]
		public BhapticsSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20009F3")]
	public class HapticClipReference
	{
		[Token(Token = "0x4003F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FileHapticClip hapticClip;

		[Token(Token = "0x4003F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 impactDirection;

		[Token(Token = "0x4003F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float offset;

		[Token(Token = "0x4003F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastPlayStartTime;

		[Token(Token = "0x4003F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int loopCount;

		[Token(Token = "0x4003F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool hasPostionData;

		[Token(Token = "0x6002C26")]
		[Address(RVA = "0x115ED48", Offset = "0x115ED48", VA = "0x115ED48")]
		public void Play(Vector3 impactDirection, float offset)
		{
		}

		[Token(Token = "0x6002C27")]
		[Address(RVA = "0x115EE18", Offset = "0x115EE18", VA = "0x115EE18")]
		public void StartLoop()
		{
		}

		[Token(Token = "0x6002C28")]
		[Address(RVA = "0x115EE34", Offset = "0x115EE34", VA = "0x115EE34")]
		public void StartLoop(Vector3 impactDirection, float offset)
		{
		}

		[Token(Token = "0x6002C29")]
		[Address(RVA = "0x115EE5C", Offset = "0x115EE5C", VA = "0x115EE5C")]
		public void ContinueLoop()
		{
		}

		[Token(Token = "0x6002C2A")]
		[Address(RVA = "0x115EEC4", Offset = "0x115EEC4", VA = "0x115EEC4")]
		public void Stop()
		{
		}

		[Token(Token = "0x6002C2B")]
		[Address(RVA = "0x115EF00", Offset = "0x115EF00", VA = "0x115EF00")]
		public void StopAll()
		{
		}

		[Token(Token = "0x6002C2C")]
		[Address(RVA = "0x115EF2C", Offset = "0x115EF2C", VA = "0x115EF2C")]
		public HapticClipReference()
		{
		}
	}
	[Token(Token = "0x20009F4")]
	public class OculusPlatformFactory : IPlatformFactory
	{
		[Token(Token = "0x20009F5")]
		[CompilerGenerated]
		private sealed class <Initialize>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003F32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003F33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x17000224")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002C41")]
				[Address(RVA = "0x115FA38", Offset = "0x115FA38", VA = "0x115FA38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000225")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002C43")]
				[Address(RVA = "0x115FA80", Offset = "0x115FA80", VA = "0x115FA80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002C3E")]
			[Address(RVA = "0x115F000", Offset = "0x115F000", VA = "0x115F000")]
			[DebuggerHidden]
			public <Initialize>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6002C3F")]
			[Address(RVA = "0x115FA00", Offset = "0x115FA00", VA = "0x115FA00", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002C40")]
			[Address(RVA = "0x115FA04", Offset = "0x115FA04", VA = "0x115FA04", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002C42")]
			[Address(RVA = "0x115FA40", Offset = "0x115FA40", VA = "0x115FA40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20009F6")]
		[CompilerGenerated]
		private sealed class <LoadSettings>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003F34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003F35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003F36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OculusPlatformFactory <>4__this;

			[Token(Token = "0x4003F37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AssetRequest<OculusPlatformSettings> <request>5__2;

			[Token(Token = "0x17000226")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002C47")]
				[Address(RVA = "0x115FCA4", Offset = "0x115FCA4", VA = "0x115FCA4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000227")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002C49")]
				[Address(RVA = "0x115FCEC", Offset = "0x115FCEC", VA = "0x115FCEC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002C44")]
			[Address(RVA = "0x115F090", Offset = "0x115F090", VA = "0x115F090")]
			[DebuggerHidden]
			public <LoadSettings>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6002C45")]
			[Address(RVA = "0x115FA88", Offset = "0x115FA88", VA = "0x115FA88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002C46")]
			[Address(RVA = "0x115FA8C", Offset = "0x115FA8C", VA = "0x115FA8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002C48")]
			[Address(RVA = "0x115FCAC", Offset = "0x115FCAC", VA = "0x115FCAC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4003F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly InputData inputData;

		[Token(Token = "0x4003F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DevicePlatform platform;

		[Token(Token = "0x4003F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x4003F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ITimeSinceStartupTracking timeSinceStartupTracking;

		[Token(Token = "0x4003F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4003F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4003F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PersistentPlatformData platformPersistentData;

		[Token(Token = "0x4003F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OculusPlatformSettings platformSettings;

		[Token(Token = "0x4003F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly PlatformLoginData platformLoginData;

		[Token(Token = "0x4003F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly VisualQualityHandlerData visualQualityHandlerData;

		[Token(Token = "0x4003F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ITickable platformLoginHandler;

		[Token(Token = "0x4003F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HapticData hapticData;

		[Token(Token = "0x4003F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private HapticsHandler hapticsHandler;

		[Token(Token = "0x4003F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private XrPluginData xrPluginData;

		[Token(Token = "0x4003F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private XrPluginHandler xrPluginHandler;

		[Token(Token = "0x4003F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayFabLoginHandler playFabLoginHandler;

		[Token(Token = "0x4003F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PlayFabLoginData loginData;

		[Token(Token = "0x6002C2D")]
		[Address(RVA = "0x115EF34", Offset = "0x115EF34", VA = "0x115EF34")]
		public OculusPlatformFactory(InputData inputData, DevicePlatform platform, ITimeProvider timeProvider, ITimeSinceStartupTracking timeSinceStartupTracking, LocalPersistentData localPersistentData, PersistantDataUtility persistantDataUtility, PlatformLoginData platformLoginData, VisualQualityHandlerData visualQualityHandlerData)
		{
		}

		[Token(Token = "0x6002C2E")]
		[Address(RVA = "0x115EFA0", Offset = "0x115EFA0", VA = "0x115EFA0", Slot = "4")]
		[IteratorStateMachine(typeof(<Initialize>d__18))]
		public IEnumerator Initialize()
		{
			return null;
		}

		[Token(Token = "0x6002C2F")]
		[Address(RVA = "0x115F028", Offset = "0x115F028", VA = "0x115F028", Slot = "5")]
		[IteratorStateMachine(typeof(<LoadSettings>d__19))]
		public IEnumerator LoadSettings()
		{
			return null;
		}

		[Token(Token = "0x6002C30")]
		[Address(RVA = "0x115F0B8", Offset = "0x115F0B8", VA = "0x115F0B8", Slot = "6")]
		public CameraReference Camera()
		{
			return null;
		}

		[Token(Token = "0x6002C31")]
		[Address(RVA = "0x115F134", Offset = "0x115F134", VA = "0x115F134", Slot = "7")]
		public SceneHandlerSettings SceneSettings()
		{
			return null;
		}

		[Token(Token = "0x6002C32")]
		[Address(RVA = "0x115F150", Offset = "0x115F150", VA = "0x115F150", Slot = "8")]
		public IInputHandler InputHandler(Transform cameraTransform)
		{
			return null;
		}

		[Token(Token = "0x6002C33")]
		[Address(RVA = "0x115F1C8", Offset = "0x115F1C8", VA = "0x115F1C8", Slot = "9")]
		public bool IsSystemVoipActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6002C34")]
		[Address(RVA = "0x115F1E4", Offset = "0x115F1E4", VA = "0x115F1E4", Slot = "10")]
		public (ILoginHandler, LoginData) PlayerDatabaseLoginHandler(PlayFabConnectionSettings playFabConnectionSettings, IMultiplayerProtocolVersion multiplayerProtocolVersion)
		{
			return default((ILoginHandler, LoginData));
		}

		[Token(Token = "0x6002C35")]
		[Address(RVA = "0x115F470", Offset = "0x115F470", VA = "0x115F470", Slot = "11")]
		public (IHapticHandler, HapticData) HapticHandler()
		{
			return default((IHapticHandler, HapticData));
		}

		[Token(Token = "0x6002C36")]
		[Address(RVA = "0x115F5A0", Offset = "0x115F5A0", VA = "0x115F5A0", Slot = "12")]
		public PlayerReferences LocalPlayer(PlayerSettings playerSettings, Transform worldParent)
		{
			return null;
		}

		[Token(Token = "0x6002C37")]
		[Address(RVA = "0x115F5AC", Offset = "0x115F5AC", VA = "0x115F5AC", Slot = "13")]
		public (IXrPluginHandler, XrPluginData) XrPluginHandler()
		{
			return default((IXrPluginHandler, XrPluginData));
		}

		[Token(Token = "0x6002C38")]
		[Address(RVA = "0x115F6B4", Offset = "0x115F6B4", VA = "0x115F6B4", Slot = "14")]
		public ITickable PlatformLoginHandler()
		{
			return null;
		}

		[Token(Token = "0x6002C39")]
		[Address(RVA = "0x115F78C", Offset = "0x115F78C", VA = "0x115F78C", Slot = "15")]
		public List<ITickable> AdditionalPreTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002C3A")]
		[Address(RVA = "0x115F7FC", Offset = "0x115F7FC", VA = "0x115F7FC", Slot = "16")]
		public List<ITickable> AdditionalPostTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002C3B")]
		[Address(RVA = "0x115F86C", Offset = "0x115F86C", VA = "0x115F86C", Slot = "17")]
		public PersistentPlatformData CreateLocalPersistentPlatformData()
		{
			return null;
		}

		[Token(Token = "0x6002C3C")]
		[Address(RVA = "0x115F91C", Offset = "0x115F91C", VA = "0x115F91C", Slot = "18")]
		public string GetTrackingPlatform()
		{
			return null;
		}

		[Token(Token = "0x6002C3D")]
		[Address(RVA = "0x115F9C0", Offset = "0x115F9C0", VA = "0x115F9C0", Slot = "19")]
		public string GetTrackingFlavor()
		{
			return null;
		}
	}
	[Token(Token = "0x20009F7")]
	[CreateAssetMenu(menuName = "Settings/Platform/OculusPlatformSettings", fileName = "OculusPlatformSettings")]
	public class OculusPlatformSettings : PlatformSettings
	{
		[Token(Token = "0x4003F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InputXrSettings inputXrSettings;

		[Token(Token = "0x4003F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public OculusLoginSettings oculusLoginSettings;

		[Token(Token = "0x6002C4A")]
		[Address(RVA = "0x115FCF4", Offset = "0x115FCF4", VA = "0x115FCF4")]
		public OculusPlatformSettings()
		{
		}
	}
	[Token(Token = "0x20009F8")]
	public class PicoEntitlementData
	{
		[Token(Token = "0x4003F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Entitlement entitlementStatus;

		[Token(Token = "0x4003F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int code;

		[Token(Token = "0x6002C4B")]
		[Address(RVA = "0x115FCFC", Offset = "0x115FCFC", VA = "0x115FCFC")]
		public PicoEntitlementData(Entitlement entitlementStatus)
		{
		}
	}
	[Token(Token = "0x20009F9")]
	public class PicoEntitlementHandler
	{
		[Token(Token = "0x4003F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PicoEntitlementData entitlementData;

		[Token(Token = "0x4003F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Action<PicoEntitlementData> entitlementCallback;

		[Token(Token = "0x6002C4C")]
		[Address(RVA = "0x115FD24", Offset = "0x115FD24", VA = "0x115FD24")]
		public PicoEntitlementHandler()
		{
		}

		[Token(Token = "0x6002C4D")]
		[Address(RVA = "0x115FD94", Offset = "0x115FD94", VA = "0x115FD94")]
		public void OnEntitlementComplete(Action<PicoEntitlementData> callback)
		{
		}

		[Token(Token = "0x6002C4E")]
		[Address(RVA = "0x115FDD4", Offset = "0x115FDD4", VA = "0x115FDD4")]
		private void OnEntitlementCheckResult(int code)
		{
		}
	}
	[Token(Token = "0x20009FA")]
	public class PicoPlatformFactory : IPlatformFactory
	{
		[Token(Token = "0x20009FB")]
		[CompilerGenerated]
		private sealed class <Initialize>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003F50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003F51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x17000228")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002C63")]
				[Address(RVA = "0x11609C0", Offset = "0x11609C0", VA = "0x11609C0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000229")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002C65")]
				[Address(RVA = "0x1160A08", Offset = "0x1160A08", VA = "0x1160A08", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002C60")]
			[Address(RVA = "0x115FFF4", Offset = "0x115FFF4", VA = "0x115FFF4")]
			[DebuggerHidden]
			public <Initialize>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6002C61")]
			[Address(RVA = "0x1160988", Offset = "0x1160988", VA = "0x1160988", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002C62")]
			[Address(RVA = "0x116098C", Offset = "0x116098C", VA = "0x116098C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002C64")]
			[Address(RVA = "0x11609C8", Offset = "0x11609C8", VA = "0x11609C8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20009FC")]
		[CompilerGenerated]
		private sealed class <LoadSettings>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003F52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003F53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003F54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PicoPlatformFactory <>4__this;

			[Token(Token = "0x1700022A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002C69")]
				[Address(RVA = "0x1160AB4", Offset = "0x1160AB4", VA = "0x1160AB4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700022B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002C6B")]
				[Address(RVA = "0x1160AFC", Offset = "0x1160AFC", VA = "0x1160AFC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002C66")]
			[Address(RVA = "0x1160084", Offset = "0x1160084", VA = "0x1160084")]
			[DebuggerHidden]
			public <LoadSettings>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x6002C67")]
			[Address(RVA = "0x1160A10", Offset = "0x1160A10", VA = "0x1160A10", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002C68")]
			[Address(RVA = "0x1160A14", Offset = "0x1160A14", VA = "0x1160A14", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002C6A")]
			[Address(RVA = "0x1160ABC", Offset = "0x1160ABC", VA = "0x1160ABC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4003F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private InputData inputData;

		[Token(Token = "0x4003F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly DevicePlatform platform;

		[Token(Token = "0x4003F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ITimeProvider timeProvider;

		[Token(Token = "0x4003F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ITimeSinceStartupTracking timeSinceStartupTracking;

		[Token(Token = "0x4003F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4003F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4003F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PersistentPlatformData platformPersistentData;

		[Token(Token = "0x4003F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PicoPlatformSettings platformSettings;

		[Token(Token = "0x4003F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly PlatformLoginData platformLoginData;

		[Token(Token = "0x4003F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly VisualQualityHandlerData visualQualityHandlerData;

		[Token(Token = "0x4003F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly PicoEntitlementHandler picoEntitlementHandler;

		[Token(Token = "0x4003F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ITickable platformLoginHandler;

		[Token(Token = "0x4003F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private HapticData hapticData;

		[Token(Token = "0x4003F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private HapticsHandler hapticsHandler;

		[Token(Token = "0x4003F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private XrPluginData xrPluginData;

		[Token(Token = "0x4003F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private XrPluginHandler xrPluginHandler;

		[Token(Token = "0x4003F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PlayFabLoginHandler playFabLoginHandler;

		[Token(Token = "0x4003F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private PlayFabLoginData loginData;

		[Token(Token = "0x6002C4F")]
		[Address(RVA = "0x115FED8", Offset = "0x115FED8", VA = "0x115FED8")]
		public PicoPlatformFactory(InputData inputData, DevicePlatform platform, ITimeProvider timeProvider, ITimeSinceStartupTracking timeSinceStartupTracking, LocalPersistentData localPersistentData, PersistantDataUtility persistantDataUtility, PlatformLoginData platformLoginData, VisualQualityHandlerData visualQualityHandlerData)
		{
		}

		[Token(Token = "0x6002C50")]
		[Address(RVA = "0x115FF94", Offset = "0x115FF94", VA = "0x115FF94", Slot = "4")]
		[IteratorStateMachine(typeof(<Initialize>d__19))]
		public IEnumerator Initialize()
		{
			return null;
		}

		[Token(Token = "0x6002C51")]
		[Address(RVA = "0x116001C", Offset = "0x116001C", VA = "0x116001C", Slot = "5")]
		[IteratorStateMachine(typeof(<LoadSettings>d__20))]
		public IEnumerator LoadSettings()
		{
			return null;
		}

		[Token(Token = "0x6002C52")]
		[Address(RVA = "0x11600AC", Offset = "0x11600AC", VA = "0x11600AC", Slot = "6")]
		public CameraReference Camera()
		{
			return null;
		}

		[Token(Token = "0x6002C53")]
		[Address(RVA = "0x1160128", Offset = "0x1160128", VA = "0x1160128", Slot = "7")]
		public SceneHandlerSettings SceneSettings()
		{
			return null;
		}

		[Token(Token = "0x6002C54")]
		[Address(RVA = "0x1160144", Offset = "0x1160144", VA = "0x1160144", Slot = "8")]
		public IInputHandler InputHandler(Transform cameraTransform)
		{
			return null;
		}

		[Token(Token = "0x6002C55")]
		[Address(RVA = "0x11601BC", Offset = "0x11601BC", VA = "0x11601BC", Slot = "9")]
		public bool IsSystemVoipActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6002C56")]
		[Address(RVA = "0x11601C4", Offset = "0x11601C4", VA = "0x11601C4", Slot = "10")]
		public (ILoginHandler, LoginData) PlayerDatabaseLoginHandler(PlayFabConnectionSettings playFabConnectionSettings, IMultiplayerProtocolVersion multiplayerProtocolVersion)
		{
			return default((ILoginHandler, LoginData));
		}

		[Token(Token = "0x6002C57")]
		[Address(RVA = "0x1160450", Offset = "0x1160450", VA = "0x1160450", Slot = "11")]
		public (IHapticHandler, HapticData) HapticHandler()
		{
			return default((IHapticHandler, HapticData));
		}

		[Token(Token = "0x6002C58")]
		[Address(RVA = "0x1160580", Offset = "0x1160580", VA = "0x1160580", Slot = "12")]
		public PlayerReferences LocalPlayer(PlayerSettings playerSettings, Transform worldParent)
		{
			return null;
		}

		[Token(Token = "0x6002C59")]
		[Address(RVA = "0x116058C", Offset = "0x116058C", VA = "0x116058C", Slot = "13")]
		public (IXrPluginHandler, XrPluginData) XrPluginHandler()
		{
			return default((IXrPluginHandler, XrPluginData));
		}

		[Token(Token = "0x6002C5A")]
		[Address(RVA = "0x1160694", Offset = "0x1160694", VA = "0x1160694", Slot = "14")]
		public ITickable PlatformLoginHandler()
		{
			return null;
		}

		[Token(Token = "0x6002C5B")]
		[Address(RVA = "0x1160774", Offset = "0x1160774", VA = "0x1160774", Slot = "16")]
		public List<ITickable> AdditionalPostTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002C5C")]
		[Address(RVA = "0x11607E4", Offset = "0x11607E4", VA = "0x11607E4", Slot = "15")]
		public List<ITickable> AdditionalPreTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002C5D")]
		[Address(RVA = "0x1160854", Offset = "0x1160854", VA = "0x1160854", Slot = "17")]
		public PersistentPlatformData CreateLocalPersistentPlatformData()
		{
			return null;
		}

		[Token(Token = "0x6002C5E")]
		[Address(RVA = "0x1160908", Offset = "0x1160908", VA = "0x1160908", Slot = "19")]
		public string GetTrackingFlavor()
		{
			return null;
		}

		[Token(Token = "0x6002C5F")]
		[Address(RVA = "0x1160948", Offset = "0x1160948", VA = "0x1160948", Slot = "18")]
		public string GetTrackingPlatform()
		{
			return null;
		}
	}
	[Token(Token = "0x20009FD")]
	[CreateAssetMenu(menuName = "Settings/Platform/PicoPlatformSettings", fileName = "PicoPlatformSettings")]
	public class PicoPlatformSettings : PlatformSettings
	{
		[Token(Token = "0x4003F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InputXrSettings inputXrSettings;

		[Token(Token = "0x4003F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PicoLoginSettings picoLoginSettings;

		[Token(Token = "0x6002C6C")]
		[Address(RVA = "0x1160B04", Offset = "0x1160B04", VA = "0x1160B04")]
		public PicoPlatformSettings()
		{
		}
	}
	[Token(Token = "0x20009FE")]
	[CreateAssetMenu(menuName = "Settings/Platform/PlatformSettings", fileName = "PlatformSettings")]
	public class PlatformSettings : ScriptableObject
	{
		[Token(Token = "0x4003F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CameraReference camera;

		[Token(Token = "0x4003F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SceneHandlerSettings sceneSettings;

		[Token(Token = "0x6002C6D")]
		[Address(RVA = "0x115C4CC", Offset = "0x115C4CC", VA = "0x115C4CC")]
		public PlatformSettings()
		{
		}
	}
	[Token(Token = "0x20009FF")]
	public class SteamPlatformFactory : IPlatformFactory
	{
		[Token(Token = "0x2000A00")]
		[CompilerGenerated]
		private sealed class <Initialize>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003F6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003F6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x1700022C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002C83")]
				[Address(RVA = "0x1161744", Offset = "0x1161744", VA = "0x1161744", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700022D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002C85")]
				[Address(RVA = "0x116178C", Offset = "0x116178C", VA = "0x116178C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002C80")]
			[Address(RVA = "0x1160BE4", Offset = "0x1160BE4", VA = "0x1160BE4")]
			[DebuggerHidden]
			public <Initialize>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6002C81")]
			[Address(RVA = "0x116170C", Offset = "0x116170C", VA = "0x116170C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002C82")]
			[Address(RVA = "0x1161710", Offset = "0x1161710", VA = "0x1161710", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002C84")]
			[Address(RVA = "0x116174C", Offset = "0x116174C", VA = "0x116174C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000A01")]
		[CompilerGenerated]
		private sealed class <LoadSettings>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003F6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003F70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003F71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SteamPlatformFactory <>4__this;

			[Token(Token = "0x4003F72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AssetRequest<SteamworksPlatformSettings> <steamworksrequest>5__2;

			[Token(Token = "0x4003F73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private AssetRequest<SteamVrPlatformSettings> <steamVrRequest>5__3;

			[Token(Token = "0x1700022E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002C89")]
				[Address(RVA = "0x1161A38", Offset = "0x1161A38", VA = "0x1161A38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700022F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002C8B")]
				[Address(RVA = "0x1161A80", Offset = "0x1161A80", VA = "0x1161A80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002C86")]
			[Address(RVA = "0x1160C74", Offset = "0x1160C74", VA = "0x1160C74")]
			[DebuggerHidden]
			public <LoadSettings>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6002C87")]
			[Address(RVA = "0x1161794", Offset = "0x1161794", VA = "0x1161794", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002C88")]
			[Address(RVA = "0x1161798", Offset = "0x1161798", VA = "0x1161798", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002C8A")]
			[Address(RVA = "0x1161A40", Offset = "0x1161A40", VA = "0x1161A40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4003F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SteamVrPlatformSettings steamVrPlatformSettings;

		[Token(Token = "0x4003F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SteamworksPlatformSettings steamworksPlatformSettings;

		[Token(Token = "0x4003F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DevicePlatform platform;

		[Token(Token = "0x4003F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InputData inputData;

		[Token(Token = "0x4003F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ITimeProvider realTimeProvider;

		[Token(Token = "0x4003F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ITimeSinceStartupTracking timeSinceStartupTracking;

		[Token(Token = "0x4003F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly LocalPersistentData localPersistentData;

		[Token(Token = "0x4003F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly PersistantDataUtility persistantDataUtility;

		[Token(Token = "0x4003F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ErrorMessageData errorMessageData;

		[Token(Token = "0x4003F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly VisualQualityHandlerData visualQualityHandlerData;

		[Token(Token = "0x4003F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SteamVrInputHandler steamVrInputHandler;

		[Token(Token = "0x4003F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly PlatformLoginData platformLoginData;

		[Token(Token = "0x4003F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SteamLoginHandler loginHandler;

		[Token(Token = "0x4003F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private XrPluginData xrPluginData;

		[Token(Token = "0x4003F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private XrPluginHandler xrPluginHandler;

		[Token(Token = "0x4003F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private HapticData hapticData;

		[Token(Token = "0x4003F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private IHapticHandler steamHapticHandler;

		[Token(Token = "0x4003F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private PlayFabLoginHandler playFabLoginHandler;

		[Token(Token = "0x4003F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private PlayFabLoginData playFaboginData;

		[Token(Token = "0x4003F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private PersistentPlatformData platformPersistentData;

		[Token(Token = "0x6002C6E")]
		[Address(RVA = "0x1160B0C", Offset = "0x1160B0C", VA = "0x1160B0C")]
		public SteamPlatformFactory(InputData inputData, DevicePlatform platform, ITimeProvider realTimeProvider, ITimeSinceStartupTracking timeSinceStartupTracking, LocalPersistentData localPersistentData, PersistantDataUtility persistantDataUtility, PlatformLoginData platformLoginData, ErrorMessageData errorMessageData, VisualQualityHandlerData visualQualityHandlerData)
		{
		}

		[Token(Token = "0x6002C6F")]
		[Address(RVA = "0x1160B84", Offset = "0x1160B84", VA = "0x1160B84", Slot = "4")]
		[IteratorStateMachine(typeof(<Initialize>d__21))]
		public IEnumerator Initialize()
		{
			return null;
		}

		[Token(Token = "0x6002C70")]
		[Address(RVA = "0x1160C0C", Offset = "0x1160C0C", VA = "0x1160C0C", Slot = "5")]
		[IteratorStateMachine(typeof(<LoadSettings>d__22))]
		public IEnumerator LoadSettings()
		{
			return null;
		}

		[Token(Token = "0x6002C71")]
		[Address(RVA = "0x1160C9C", Offset = "0x1160C9C", VA = "0x1160C9C")]
		private void DeleteSteamAppIDFile()
		{
		}

		[Token(Token = "0x6002C72")]
		[Address(RVA = "0x1160E18", Offset = "0x1160E18", VA = "0x1160E18", Slot = "6")]
		public CameraReference Camera()
		{
			return null;
		}

		[Token(Token = "0x6002C73")]
		[Address(RVA = "0x1160E94", Offset = "0x1160E94", VA = "0x1160E94", Slot = "7")]
		public SceneHandlerSettings SceneSettings()
		{
			return null;
		}

		[Token(Token = "0x6002C74")]
		[Address(RVA = "0x1160EB0", Offset = "0x1160EB0", VA = "0x1160EB0", Slot = "9")]
		public bool IsSystemVoipActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6002C75")]
		[Address(RVA = "0x1160EB8", Offset = "0x1160EB8", VA = "0x1160EB8", Slot = "10")]
		public (ILoginHandler, LoginData) PlayerDatabaseLoginHandler(PlayFabConnectionSettings playFabConnectionSettings, IMultiplayerProtocolVersion multiplayerProtocolVersion)
		{
			return default((ILoginHandler, LoginData));
		}

		[Token(Token = "0x6002C76")]
		[Address(RVA = "0x1161144", Offset = "0x1161144", VA = "0x1161144", Slot = "8")]
		public IInputHandler InputHandler(Transform cameraTransform)
		{
			return null;
		}

		[Token(Token = "0x6002C77")]
		[Address(RVA = "0x11611B4", Offset = "0x11611B4", VA = "0x11611B4", Slot = "11")]
		public (IHapticHandler, HapticData) HapticHandler()
		{
			return default((IHapticHandler, HapticData));
		}

		[Token(Token = "0x6002C78")]
		[Address(RVA = "0x11612B0", Offset = "0x11612B0", VA = "0x11612B0", Slot = "12")]
		public PlayerReferences LocalPlayer(PlayerSettings playerSettings, Transform worldParent)
		{
			return null;
		}

		[Token(Token = "0x6002C79")]
		[Address(RVA = "0x11612BC", Offset = "0x11612BC", VA = "0x11612BC", Slot = "13")]
		public (IXrPluginHandler, XrPluginData) XrPluginHandler()
		{
			return default((IXrPluginHandler, XrPluginData));
		}

		[Token(Token = "0x6002C7A")]
		[Address(RVA = "0x11613C4", Offset = "0x11613C4", VA = "0x11613C4", Slot = "14")]
		public ITickable PlatformLoginHandler()
		{
			return null;
		}

		[Token(Token = "0x6002C7B")]
		[Address(RVA = "0x1161490", Offset = "0x1161490", VA = "0x1161490", Slot = "15")]
		public List<ITickable> AdditionalPreTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002C7C")]
		[Address(RVA = "0x1161500", Offset = "0x1161500", VA = "0x1161500", Slot = "16")]
		public List<ITickable> AdditionalPostTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002C7D")]
		[Address(RVA = "0x1161570", Offset = "0x1161570", VA = "0x1161570", Slot = "17")]
		public PersistentPlatformData CreateLocalPersistentPlatformData()
		{
			return null;
		}

		[Token(Token = "0x6002C7E")]
		[Address(RVA = "0x116165C", Offset = "0x116165C", VA = "0x116165C", Slot = "18")]
		public string GetTrackingPlatform()
		{
			return null;
		}

		[Token(Token = "0x6002C7F")]
		[Address(RVA = "0x11616B4", Offset = "0x11616B4", VA = "0x11616B4", Slot = "19")]
		public string GetTrackingFlavor()
		{
			return null;
		}
	}
	[Token(Token = "0x2000A02")]
	public class DummyHandler : ITickable
	{
		[Token(Token = "0x6002C8C")]
		[Address(RVA = "0x1161A88", Offset = "0x1161A88", VA = "0x1161A88", Slot = "4")]
		public void Tick()
		{
		}

		[Token(Token = "0x6002C8D")]
		[Address(RVA = "0x1161A8C", Offset = "0x1161A8C", VA = "0x1161A8C")]
		public DummyHandler()
		{
		}
	}
	[Token(Token = "0x2000A03")]
	[CreateAssetMenu(menuName = "Settings/Platforms/SteamPlatformSettings", fileName = "SteamPlatformSettings")]
	public class SteamPlatformSettings : PlatformSettings
	{
		[Token(Token = "0x4003F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OculusLoginSettings platformLoginSettings;

		[Token(Token = "0x4003F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject steamManager;

		[Token(Token = "0x4003F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int averageVelocityOverNumFrames;

		[Token(Token = "0x6002C8E")]
		[Address(RVA = "0x1161A94", Offset = "0x1161A94", VA = "0x1161A94")]
		public SteamPlatformSettings()
		{
		}
	}
	[Token(Token = "0x2000A04")]
	[CreateAssetMenu(menuName = "Settings/Platform/SteamVrPlatformSettings", fileName = "SteamVrPlatformSettings")]
	public class SteamVrPlatformSettings : PlatformSettings
	{
		[Token(Token = "0x4003F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int averageVelocityOverNumFrames;

		[Token(Token = "0x6002C8F")]
		[Address(RVA = "0x1161AA4", Offset = "0x1161AA4", VA = "0x1161AA4")]
		public SteamVrPlatformSettings()
		{
		}
	}
	[Token(Token = "0x2000A05")]
	[CreateAssetMenu(menuName = "Settings/Platform/SteamworksPlatformSettings", fileName = "SteamworksPlatformSettings")]
	public class SteamworksPlatformSettings : PlatformSettings
	{
		[Token(Token = "0x4003F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OculusLoginSettings platformLoginSettings;

		[Token(Token = "0x4003F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject steamManager;

		[Token(Token = "0x6002C90")]
		[Address(RVA = "0x1161AB4", Offset = "0x1161AB4", VA = "0x1161AB4")]
		public SteamworksPlatformSettings()
		{
		}
	}
	[Token(Token = "0x2000A06")]
	public class TrailerPlatformFactory : IPlatformFactory
	{
		[Token(Token = "0x2000A07")]
		[CompilerGenerated]
		private sealed class <Initialize>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003F88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003F89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003F8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrailerPlatformFactory <>4__this;

			[Token(Token = "0x17000230")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002CA6")]
				[Address(RVA = "0x1162794", Offset = "0x1162794", VA = "0x1162794", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000231")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002CA8")]
				[Address(RVA = "0x11627DC", Offset = "0x11627DC", VA = "0x11627DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002CA3")]
			[Address(RVA = "0x1161B8C", Offset = "0x1161B8C", VA = "0x1161B8C")]
			[DebuggerHidden]
			public <Initialize>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6002CA4")]
			[Address(RVA = "0x11626B0", Offset = "0x11626B0", VA = "0x11626B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002CA5")]
			[Address(RVA = "0x11626B4", Offset = "0x11626B4", VA = "0x11626B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002CA7")]
			[Address(RVA = "0x116279C", Offset = "0x116279C", VA = "0x116279C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000A08")]
		[CompilerGenerated]
		private sealed class <LoadSettings>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4003F8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4003F8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4003F8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrailerPlatformFactory <>4__this;

			[Token(Token = "0x4003F8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AssetRequest<DesktopPlatformSettings> <request>5__2;

			[Token(Token = "0x4003F8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private AssetRequest<TrailerSettings> <request>5__3;

			[Token(Token = "0x17000232")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002CAC")]
				[Address(RVA = "0x1162AB4", Offset = "0x1162AB4", VA = "0x1162AB4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000233")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002CAE")]
				[Address(RVA = "0x1162AFC", Offset = "0x1162AFC", VA = "0x1162AFC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002CA9")]
			[Address(RVA = "0x1161C1C", Offset = "0x1161C1C", VA = "0x1161C1C")]
			[DebuggerHidden]
			public <LoadSettings>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6002CAA")]
			[Address(RVA = "0x11627E4", Offset = "0x11627E4", VA = "0x11627E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002CAB")]
			[Address(RVA = "0x11627E8", Offset = "0x11627E8", VA = "0x11627E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002CAD")]
			[Address(RVA = "0x1162ABC", Offset = "0x1162ABC", VA = "0x1162ABC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4003F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IPlatformFactory platformFactory;

		[Token(Token = "0x4003F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly TrailerData trailerData;

		[Token(Token = "0x4003F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MenuStateSettings menuStateSettings;

		[Token(Token = "0x4003F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ScoreBoardData scoreBoardData;

		[Token(Token = "0x4003F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly LocalPlayerData localPlayerData;

		[Token(Token = "0x4003F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly SceneHandlerData sceneHandlerData;

		[Token(Token = "0x4003F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CameraReference cameraReference;

		[Token(Token = "0x4003F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private DesktopPlatformSettings desktopPlatformSettings;

		[Token(Token = "0x4003F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private TrailerSettings trailerSettings;

		[Token(Token = "0x4003F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string trailerSettingKey;

		[Token(Token = "0x4003F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PlayFabLoginHandler playFabLoginHandler;

		[Token(Token = "0x4003F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PlayFabLoginData loginData;

		[Token(Token = "0x4003F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly DebugData debugData;

		[Token(Token = "0x4003F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly ReplayData replayData;

		[Token(Token = "0x6002C91")]
		[Address(RVA = "0x1161ABC", Offset = "0x1161ABC", VA = "0x1161ABC")]
		public TrailerPlatformFactory(IPlatformFactory platformFactory, TrailerData trailerData, MenuStateSettings menuStateSettings, ScoreBoardData scoreBoardData, LocalPlayerData localPlayerData, SceneHandlerData sceneHandlerData, DebugData debugData, ReplayData replayData)
		{
		}

		[Token(Token = "0x6002C92")]
		[Address(RVA = "0x1161B24", Offset = "0x1161B24", VA = "0x1161B24", Slot = "4")]
		[IteratorStateMachine(typeof(<Initialize>d__15))]
		public IEnumerator Initialize()
		{
			return null;
		}

		[Token(Token = "0x6002C93")]
		[Address(RVA = "0x1161BB4", Offset = "0x1161BB4", VA = "0x1161BB4", Slot = "5")]
		[IteratorStateMachine(typeof(<LoadSettings>d__16))]
		public IEnumerator LoadSettings()
		{
			return null;
		}

		[Token(Token = "0x6002C94")]
		[Address(RVA = "0x1161C44", Offset = "0x1161C44", VA = "0x1161C44", Slot = "6")]
		public CameraReference Camera()
		{
			return null;
		}

		[Token(Token = "0x6002C95")]
		[Address(RVA = "0x1161CF0", Offset = "0x1161CF0", VA = "0x1161CF0", Slot = "7")]
		public SceneHandlerSettings SceneSettings()
		{
			return null;
		}

		[Token(Token = "0x6002C96")]
		[Address(RVA = "0x1161D94", Offset = "0x1161D94", VA = "0x1161D94", Slot = "12")]
		public PlayerReferences LocalPlayer(PlayerSettings playerSettings, Transform worldParent)
		{
			return null;
		}

		[Token(Token = "0x6002C97")]
		[Address(RVA = "0x1161E50", Offset = "0x1161E50", VA = "0x1161E50", Slot = "9")]
		public bool IsSystemVoipActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6002C98")]
		[Address(RVA = "0x1161E58", Offset = "0x1161E58", VA = "0x1161E58", Slot = "10")]
		public (ILoginHandler, LoginData) PlayerDatabaseLoginHandler(PlayFabConnectionSettings playFabConnectionSettings, IMultiplayerProtocolVersion multiplayerProtocolVersion)
		{
			return default((ILoginHandler, LoginData));
		}

		[Token(Token = "0x6002C99")]
		[Address(RVA = "0x1161F14", Offset = "0x1161F14", VA = "0x1161F14", Slot = "8")]
		public IInputHandler InputHandler(Transform cameraTransform)
		{
			return null;
		}

		[Token(Token = "0x6002C9A")]
		[Address(RVA = "0x1161FC0", Offset = "0x1161FC0", VA = "0x1161FC0", Slot = "11")]
		public (IHapticHandler, HapticData) HapticHandler()
		{
			return default((IHapticHandler, HapticData));
		}

		[Token(Token = "0x6002C9B")]
		[Address(RVA = "0x1162064", Offset = "0x1162064", VA = "0x1162064", Slot = "13")]
		public (IXrPluginHandler, XrPluginData) XrPluginHandler()
		{
			return default((IXrPluginHandler, XrPluginData));
		}

		[Token(Token = "0x6002C9C")]
		[Address(RVA = "0x1162108", Offset = "0x1162108", VA = "0x1162108", Slot = "14")]
		public ITickable PlatformLoginHandler()
		{
			return null;
		}

		[Token(Token = "0x6002C9D")]
		[Address(RVA = "0x11621AC", Offset = "0x11621AC", VA = "0x11621AC", Slot = "15")]
		public List<ITickable> AdditionalPreTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002C9E")]
		[Address(RVA = "0x116238C", Offset = "0x116238C", VA = "0x116238C", Slot = "16")]
		public List<ITickable> AdditionalPostTickHandler()
		{
			return null;
		}

		[Token(Token = "0x6002C9F")]
		[Address(RVA = "0x1162430", Offset = "0x1162430", VA = "0x1162430", Slot = "17")]
		public PersistentPlatformData CreateLocalPersistentPlatformData()
		{
			return null;
		}

		[Token(Token = "0x6002CA0")]
		[Address(RVA = "0x11624D4", Offset = "0x11624D4", VA = "0x11624D4", Slot = "18")]
		public string GetTrackingPlatform()
		{
			return null;
		}

		[Token(Token = "0x6002CA1")]
		[Address(RVA = "0x1162610", Offset = "0x1162610", VA = "0x1162610", Slot = "19")]
		public string GetTrackingFlavor()
		{
			return null;
		}
	}
}
namespace ECE
{
	[Token(Token = "0x2000A09")]
	public class EasyColliderCreator
	{
		[Token(Token = "0x2000A0A")]
		private struct BestFitSphere
		{
			[Token(Token = "0x4003F90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 Center;

			[Token(Token = "0x4003F91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float Radius;

			[Token(Token = "0x6002CD0")]
			[Address(RVA = "0x1167ECC", Offset = "0x1167ECC", VA = "0x1167ECC")]
			public BestFitSphere(Vector3 center, float radius)
			{
			}
		}

		[Token(Token = "0x6002CAF")]
		[Address(RVA = "0x1162B04", Offset = "0x1162B04", VA = "0x1162B04")]
		private BestFitSphere CalculateBestFitSphere(List<Vector3> localVertices)
		{
			return default(BestFitSphere);
		}

		[Token(Token = "0x6002CB0")]
		[Address(RVA = "0x1163244", Offset = "0x1163244", VA = "0x1163244")]
		public BoxColliderData CalculateBox(List<Vector3> worldVertices, Transform attachTo, bool isRotated = false)
		{
			return null;
		}

		[Token(Token = "0x6002CB1")]
		[Address(RVA = "0x1163890", Offset = "0x1163890", VA = "0x1163890")]
		public BoxColliderData CalculateBoxLocal(List<Vector3> vertices)
		{
			return null;
		}

		[Token(Token = "0x6002CB2")]
		[Address(RVA = "0x1163AA8", Offset = "0x1163AA8", VA = "0x1163AA8")]
		public CapsuleColliderData CalculateCapsuleBestFit(List<Vector3> worldVertices, Transform attachTo, bool isRotated)
		{
			return null;
		}

		[Token(Token = "0x6002CB3")]
		[Address(RVA = "0x1163E9C", Offset = "0x1163E9C", VA = "0x1163E9C")]
		public CapsuleColliderData CalculateCapsuleBestFitLocal(List<Vector3> localVertices)
		{
			return null;
		}

		[Token(Token = "0x6002CB4")]
		[Address(RVA = "0x1164138", Offset = "0x1164138", VA = "0x1164138")]
		public CapsuleColliderData CalculateCapsuleMinMax(List<Vector3> worldVertices, Transform attachTo, CAPSULE_COLLIDER_METHOD method, bool isRotated)
		{
			return null;
		}

		[Token(Token = "0x6002CB5")]
		[Address(RVA = "0x1164544", Offset = "0x1164544", VA = "0x1164544")]
		public CapsuleColliderData CalculateCapsuleMinMaxLocal(List<Vector3> localVertices, CAPSULE_COLLIDER_METHOD method)
		{
			return null;
		}

		[Token(Token = "0x6002CB6")]
		[Address(RVA = "0x1164920", Offset = "0x1164920", VA = "0x1164920")]
		public MeshColliderData CalculateCylinderCollider(List<Vector3> worldVertices, Transform attachTo, int numberOfSides = 12, CYLINDER_ORIENTATION orientation = CYLINDER_ORIENTATION.Automatic, float cylinderOffset = 0f)
		{
			return null;
		}

		[Token(Token = "0x6002CB7")]
		[Address(RVA = "0x1165068", Offset = "0x1165068", VA = "0x1165068")]
		public MeshColliderData CalculateCylinderColliderLocal(List<Vector3> vertices, int numberOfSides = 12, CYLINDER_ORIENTATION orientation = CYLINDER_ORIENTATION.Automatic, float cylinderOffset = 0f)
		{
			return null;
		}

		[Token(Token = "0x6002CB8")]
		[Address(RVA = "0x1165168", Offset = "0x1165168", VA = "0x1165168")]
		public MeshColliderData CalculateMeshColliderQuickHull(List<Vector3> vertices, Transform attachTo)
		{
			return null;
		}

		[Token(Token = "0x6002CB9")]
		[Address(RVA = "0x1165200", Offset = "0x1165200", VA = "0x1165200")]
		public MeshColliderData CalculateMeshColliderQuickHullLocal(List<Vector3> localVertices)
		{
			return null;
		}

		[Token(Token = "0x6002CBA")]
		[Address(RVA = "0x11652C0", Offset = "0x11652C0", VA = "0x11652C0")]
		public SphereColliderData CalculateSphereBestFit(List<Vector3> worldVertices, Transform attachTo)
		{
			return null;
		}

		[Token(Token = "0x6002CBB")]
		[Address(RVA = "0x11653AC", Offset = "0x11653AC", VA = "0x11653AC")]
		public SphereColliderData CalculateSphereBestFitLocal(List<Vector3> localVertices)
		{
			return null;
		}

		[Token(Token = "0x6002CBC")]
		[Address(RVA = "0x116544C", Offset = "0x116544C", VA = "0x116544C")]
		public SphereColliderData CalculateSphereDistance(List<Vector3> worldVertices, Transform attachTo)
		{
			return null;
		}

		[Token(Token = "0x6002CBD")]
		[Address(RVA = "0x1165538", Offset = "0x1165538", VA = "0x1165538")]
		public SphereColliderData CalculateSphereDistanceLocal(List<Vector3> localVertices)
		{
			return null;
		}

		[Token(Token = "0x6002CBE")]
		[Address(RVA = "0x1165B94", Offset = "0x1165B94", VA = "0x1165B94")]
		public SphereColliderData CalculateSphereMinMax(List<Vector3> worldVertices, Transform attachTo)
		{
			return null;
		}

		[Token(Token = "0x6002CBF")]
		[Address(RVA = "0x1165C80", Offset = "0x1165C80", VA = "0x1165C80")]
		public SphereColliderData CalculateSphereMinMaxLocal(List<Vector3> localVertices)
		{
			return null;
		}

		[Token(Token = "0x6002CC0")]
		[Address(RVA = "0x116603C", Offset = "0x116603C", VA = "0x116603C")]
		private BoxCollider CreateBoxCollider(BoxColliderData data, EasyColliderProperties properties)
		{
			return null;
		}

		[Token(Token = "0x6002CC1")]
		[Address(RVA = "0x1166190", Offset = "0x1166190", VA = "0x1166190")]
		public BoxCollider CreateBoxCollider(List<Vector3> vertices, EasyColliderProperties properties, bool isLocal = false)
		{
			return null;
		}

		[Token(Token = "0x6002CC2")]
		[Address(RVA = "0x1166570", Offset = "0x1166570", VA = "0x1166570")]
		private CapsuleCollider CreateCapsuleCollider(CapsuleColliderData data, EasyColliderProperties properties)
		{
			return null;
		}

		[Token(Token = "0x6002CC3")]
		[Address(RVA = "0x1166638", Offset = "0x1166638", VA = "0x1166638")]
		public CapsuleCollider CreateCapsuleCollider_BestFit(List<Vector3> worldVertices, EasyColliderProperties properties)
		{
			return null;
		}

		[Token(Token = "0x6002CC4")]
		[Address(RVA = "0x11667A0", Offset = "0x11667A0", VA = "0x11667A0")]
		public CapsuleCollider CreateCapsuleCollider_MinMax(List<Vector3> worldVertices, EasyColliderProperties properties, CAPSULE_COLLIDER_METHOD method, bool isLocal = false)
		{
			return null;
		}

		[Token(Token = "0x6002CC5")]
		[Address(RVA = "0x1166920", Offset = "0x1166920", VA = "0x1166920")]
		public MeshCollider CreateConvexMeshCollider(Mesh mesh, GameObject attachToObject, EasyColliderProperties properties)
		{
			return null;
		}

		[Token(Token = "0x6002CC6")]
		[Address(RVA = "0x11669D8", Offset = "0x11669D8", VA = "0x11669D8")]
		private SphereCollider CreateSphereCollider(SphereColliderData data, EasyColliderProperties properties)
		{
			return null;
		}

		[Token(Token = "0x6002CC7")]
		[Address(RVA = "0x1166A80", Offset = "0x1166A80", VA = "0x1166A80")]
		public SphereCollider CreateSphereCollider_BestFit(List<Vector3> worldVertices, EasyColliderProperties properties)
		{
			return null;
		}

		[Token(Token = "0x6002CC8")]
		[Address(RVA = "0x1166B20", Offset = "0x1166B20", VA = "0x1166B20")]
		public SphereCollider CreateSphereCollider_Distance(List<Vector3> worldVertices, EasyColliderProperties properties)
		{
			return null;
		}

		[Token(Token = "0x6002CC9")]
		[Address(RVA = "0x1166BC0", Offset = "0x1166BC0", VA = "0x1166BC0")]
		public SphereCollider CreateSphereCollider_MinMax(List<Vector3> worldVertices, EasyColliderProperties properties, bool isLocal = false)
		{
			return null;
		}

		[Token(Token = "0x6002CCA")]
		[Address(RVA = "0x1164A6C", Offset = "0x1164A6C", VA = "0x1164A6C")]
		public List<Vector3> CalculateCylinderPointsLocal(List<Vector3> vertices, Transform attachTo, int numberOfSides, CYLINDER_ORIENTATION orientation, float cylinderOffset)
		{
			return null;
		}

		[Token(Token = "0x6002CCB")]
		[Address(RVA = "0x116634C", Offset = "0x116634C", VA = "0x116634C")]
		private GameObject CreateGameObjectOrientation(List<Vector3> worldVertices, GameObject parent, string name)
		{
			return null;
		}

		[Token(Token = "0x6002CCC")]
		[Address(RVA = "0x1166C80", Offset = "0x1166C80", VA = "0x1166C80")]
		private void DebugDrawPoint(Vector3 worldLoc, Color color)
		{
		}

		[Token(Token = "0x6002CCD")]
		[Address(RVA = "0x11660E8", Offset = "0x11660E8", VA = "0x11660E8")]
		private void SetPropertiesOnCollider(Collider collider, EasyColliderProperties properties)
		{
		}

		[Token(Token = "0x6002CCE")]
		[Address(RVA = "0x1163654", Offset = "0x1163654", VA = "0x1163654")]
		private List<Vector3> ToLocalVerts(Transform transform, List<Vector3> worldVertices)
		{
			return null;
		}

		[Token(Token = "0x6002CCF")]
		[Address(RVA = "0x1166EC4", Offset = "0x1166EC4", VA = "0x1166EC4")]
		public EasyColliderCreator()
		{
		}
	}
	[Token(Token = "0x2000A0B")]
	public class EasyColliderData
	{
		[Token(Token = "0x4003F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CREATE_COLLIDER_TYPE ColliderType;

		[Token(Token = "0x4003F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool IsValid;

		[Token(Token = "0x4003F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Matrix4x4 Matrix;

		[Token(Token = "0x6002CD1")]
		[Address(RVA = "0x1167ED8", Offset = "0x1167ED8", VA = "0x1167ED8")]
		public void Clone(EasyColliderData data)
		{
		}

		[Token(Token = "0x6002CD2")]
		[Address(RVA = "0x1167F1C", Offset = "0x1167F1C", VA = "0x1167F1C")]
		public EasyColliderData()
		{
		}
	}
	[Token(Token = "0x2000A0C")]
	public class SphereColliderData : EasyColliderData
	{
		[Token(Token = "0x4003F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float Radius;

		[Token(Token = "0x4003F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 Center;

		[Token(Token = "0x6002CD3")]
		[Address(RVA = "0x1167F24", Offset = "0x1167F24", VA = "0x1167F24")]
		public void Clone(SphereColliderData data)
		{
		}

		[Token(Token = "0x6002CD4")]
		[Address(RVA = "0x1167F80", Offset = "0x1167F80", VA = "0x1167F80")]
		public SphereColliderData()
		{
		}
	}
	[Token(Token = "0x2000A0D")]
	public class CapsuleColliderData : SphereColliderData
	{
		[Token(Token = "0x4003F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int Direction;

		[Token(Token = "0x4003F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float Height;

		[Token(Token = "0x6002CD5")]
		[Address(RVA = "0x1167F88", Offset = "0x1167F88", VA = "0x1167F88")]
		public void Clone(CapsuleColliderData data)
		{
		}

		[Token(Token = "0x6002CD6")]
		[Address(RVA = "0x1167FEC", Offset = "0x1167FEC", VA = "0x1167FEC")]
		public CapsuleColliderData()
		{
		}
	}
	[Token(Token = "0x2000A0E")]
	public class BoxColliderData : EasyColliderData
	{
		[Token(Token = "0x4003F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 Center;

		[Token(Token = "0x4003F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector3 Size;

		[Token(Token = "0x6002CD7")]
		[Address(RVA = "0x1167FF4", Offset = "0x1167FF4", VA = "0x1167FF4")]
		public void Clone(BoxColliderData data)
		{
		}

		[Token(Token = "0x6002CD8")]
		[Address(RVA = "0x1168058", Offset = "0x1168058", VA = "0x1168058")]
		public BoxColliderData()
		{
		}
	}
	[Token(Token = "0x2000A0F")]
	public class MeshColliderData : EasyColliderData
	{
		[Token(Token = "0x4003F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Mesh ConvexMesh;

		[Token(Token = "0x6002CD9")]
		[Address(RVA = "0x1168060", Offset = "0x1168060", VA = "0x1168060")]
		public void Clone(MeshColliderData data)
		{
		}

		[Token(Token = "0x6002CDA")]
		[Address(RVA = "0x11680AC", Offset = "0x11680AC", VA = "0x11680AC")]
		public MeshColliderData()
		{
		}
	}
	[Token(Token = "0x2000A10")]
	public enum CAPSULE_COLLIDER_METHOD
	{
		[Token(Token = "0x4003F9D")]
		BestFit,
		[Token(Token = "0x4003F9E")]
		MinMax,
		[Token(Token = "0x4003F9F")]
		MinMaxPlusRadius,
		[Token(Token = "0x4003FA0")]
		MinMaxPlusDiameter
	}
	[Token(Token = "0x2000A11")]
	public enum CREATE_COLLIDER_TYPE
	{
		[Token(Token = "0x4003FA2")]
		BOX,
		[Token(Token = "0x4003FA3")]
		ROTATED_BOX,
		[Token(Token = "0x4003FA4")]
		SPHERE,
		[Token(Token = "0x4003FA5")]
		CAPSULE,
		[Token(Token = "0x4003FA6")]
		ROTATED_CAPSULE,
		[Token(Token = "0x4003FA7")]
		CONVEX_MESH,
		[Token(Token = "0x4003FA8")]
		CYLINDER
	}
	[Token(Token = "0x2000A12")]
	public enum COLLIDER_ORIENTATION
	{
		[Token(Token = "0x4003FAA")]
		NORMAL,
		[Token(Token = "0x4003FAB")]
		ROTATED
	}
	[Token(Token = "0x2000A13")]
	public enum CYLINDER_ORIENTATION
	{
		[Token(Token = "0x4003FAD")]
		Automatic,
		[Token(Token = "0x4003FAE")]
		LocalX,
		[Token(Token = "0x4003FAF")]
		LocalY,
		[Token(Token = "0x4003FB0")]
		LocalZ
	}
	[Token(Token = "0x2000A14")]
	public enum GIZMO_TYPE
	{
		[Token(Token = "0x4003FB2")]
		CUBE,
		[Token(Token = "0x4003FB3")]
		SPHERE
	}
	[Token(Token = "0x2000A15")]
	public enum RENDER_POINT_TYPE
	{
		[Token(Token = "0x4003FB5")]
		SHADER,
		[Token(Token = "0x4003FB6")]
		GIZMOS
	}
	[Token(Token = "0x2000A16")]
	public enum SKINNED_MESH_COLLIDER_TYPE
	{
		[Token(Token = "0x4003FB8")]
		Box,
		[Token(Token = "0x4003FB9")]
		Capsule,
		[Token(Token = "0x4003FBA")]
		Sphere,
		[Token(Token = "0x4003FBB")]
		Convex_Mesh
	}
	[Token(Token = "0x2000A17")]
	public enum SPHERE_COLLIDER_METHOD
	{
		[Token(Token = "0x4003FBD")]
		BestFit,
		[Token(Token = "0x4003FBE")]
		Distance,
		[Token(Token = "0x4003FBF")]
		MinMax
	}
	[Token(Token = "0x2000A18")]
	public enum VHACD_CONVERSION
	{
		[Token(Token = "0x4003FC1")]
		None,
		[Token(Token = "0x4003FC2")]
		Boxes,
		[Token(Token = "0x4003FC3")]
		Spheres,
		[Token(Token = "0x4003FC4")]
		Capsules
	}
	[Token(Token = "0x2000A19")]
	public enum MESH_COLLIDER_METHOD
	{
		[Token(Token = "0x4003FC6")]
		QuickHull,
		[Token(Token = "0x4003FC7")]
		MessyHull
	}
	[Token(Token = "0x2000A1A")]
	public enum VERTEX_SNAP_METHOD
	{
		[Token(Token = "0x4003FC9")]
		Add,
		[Token(Token = "0x4003FCA")]
		Remove,
		[Token(Token = "0x4003FCB")]
		Both
	}
	[Token(Token = "0x2000A1B")]
	public enum VHACD_RESULT_METHOD
	{
		[Token(Token = "0x4003FCD")]
		AttachTo,
		[Token(Token = "0x4003FCE")]
		ChildObject,
		[Token(Token = "0x4003FCF")]
		IndividualChildObjects
	}
	[Token(Token = "0x2000A1C")]
	public enum ECE_WINDOW_TAB
	{
		[Token(Token = "0x4003FD1")]
		None = -1,
		[Token(Token = "0x4003FD2")]
		Creation,
		[Token(Token = "0x4003FD3")]
		Editing,
		[Token(Token = "0x4003FD4")]
		VHACD,
		[Token(Token = "0x4003FD5")]
		AutoSkinned
	}
	[Token(Token = "0x2000A1D")]
	public enum COLLIDER_HOLDER
	{
		[Token(Token = "0x4003FD7")]
		Default,
		[Token(Token = "0x4003FD8")]
		Once,
		[Token(Token = "0x4003FD9")]
		Always
	}
	[Token(Token = "0x2000A1E")]
	public struct EasyColliderProperties
	{
		[Token(Token = "0x4003FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool IsTrigger;

		[Token(Token = "0x4003FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Layer;

		[Token(Token = "0x4003FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PhysicMaterial PhysicMaterial;

		[Token(Token = "0x4003FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public COLLIDER_ORIENTATION Orientation;

		[Token(Token = "0x4003FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject AttachTo;

		[Token(Token = "0x6002CDB")]
		[Address(RVA = "0x11680B4", Offset = "0x11680B4", VA = "0x11680B4")]
		public EasyColliderProperties(bool isTrigger, int layer, PhysicMaterial physicMaterial, GameObject attachTo, COLLIDER_ORIENTATION orientation = COLLIDER_ORIENTATION.NORMAL)
		{
		}
	}
	[Token(Token = "0x2000A1F")]
	public class EasyColliderQuickHull
	{
		[Token(Token = "0x2000A20")]
		private class Face
		{
			[Token(Token = "0x4003FF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int F0;

			[Token(Token = "0x4003FF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int F1;

			[Token(Token = "0x4003FF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int F2;

			[Token(Token = "0x4003FF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 Normal;

			[Token(Token = "0x4003FF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool OnConvexHull;

			[Token(Token = "0x4003FF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public List<int> OutsideVertices;

			[Token(Token = "0x4003FF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int V0;

			[Token(Token = "0x4003FF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public int V1;

			[Token(Token = "0x4003FF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int V2;

			[Token(Token = "0x6002D04")]
			[Address(RVA = "0x116D474", Offset = "0x116D474", VA = "0x116D474")]
			public Face(int v0, int v1, int v2, Vector3 normal, int f0, int f1, int f2)
			{
			}
		}

		[Token(Token = "0x2000A21")]
		private class Horizon
		{
			[Token(Token = "0x4003FFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int Face;

			[Token(Token = "0x4003FFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int From;

			[Token(Token = "0x4003FFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool OnConvexHull;

			[Token(Token = "0x4003FFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int V0;

			[Token(Token = "0x4003FFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int V1;

			[Token(Token = "0x6002D05")]
			[Address(RVA = "0x116A78C", Offset = "0x116A78C", VA = "0x116A78C")]
			public Horizon(int v0, int v1, int face, int from)
			{
			}
		}

		[Token(Token = "0x4003FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool DebugHorizon;

		[Token(Token = "0x4003FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Color DebugHorizonColor;

		[Token(Token = "0x4003FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int DebugLoopNumber;

		[Token(Token = "0x4003FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int DebugMaxLoopNumber;

		[Token(Token = "0x4003FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool DebugNewFaces;

		[Token(Token = "0x4003FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool DebugNormals;

		[Token(Token = "0x4003FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool DebugOutsideSet;

		[Token(Token = "0x4003FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color DebugNormalColor;

		[Token(Token = "0x4003FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float DrawTime;

		[Token(Token = "0x4003FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private HashSet<int> AssignedVertices;

		[Token(Token = "0x4003FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HashSet<int> ClosedVertices;

		[Token(Token = "0x4003FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<Horizon> CurrentHorizon;

		[Token(Token = "0x4003FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float Epsilon;

		[Token(Token = "0x4003FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Face> Faces;

		[Token(Token = "0x4003FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<int> NewFaces;

		[Token(Token = "0x4003FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Mesh Result;

		[Token(Token = "0x4003FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private HashSet<int> UnAssignedVertices;

		[Token(Token = "0x4003FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Vector3> VerticesList;

		[Token(Token = "0x17000234")]
		public bool isFinished
		{
			[Token(Token = "0x6002CF0")]
			[Address(RVA = "0x116D57C", Offset = "0x116D57C", VA = "0x116D57C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002CDC")]
		[Address(RVA = "0x11680D0", Offset = "0x11680D0", VA = "0x11680D0")]
		public static EasyColliderQuickHull CalculateHull(List<Vector3> points)
		{
			return null;
		}

		[Token(Token = "0x6002CDD")]
		[Address(RVA = "0x1168A20", Offset = "0x1168A20", VA = "0x1168A20")]
		public static EasyColliderQuickHull CalculateHullWorld(List<Vector3> points, Transform attachTo)
		{
			return null;
		}

		[Token(Token = "0x6002CDE")]
		[Address(RVA = "0x1168C74", Offset = "0x1168C74", VA = "0x1168C74")]
		public static MeshColliderData CalculateHullData(List<Vector3> points, Transform attachTo)
		{
			return null;
		}

		[Token(Token = "0x6002CDF")]
		[Address(RVA = "0x1168D7C", Offset = "0x1168D7C", VA = "0x1168D7C")]
		public static MeshColliderData CalculateHullData(List<Vector3> points)
		{
			return null;
		}

		[Token(Token = "0x6002CE0")]
		[Address(RVA = "0x1168E08", Offset = "0x1168E08", VA = "0x1168E08")]
		private void AddToOutsideSet(Face face, HashSet<int> vertices)
		{
		}

		[Token(Token = "0x6002CE1")]
		[Address(RVA = "0x1169288", Offset = "0x1169288", VA = "0x1169288")]
		private bool AreVertsCoincident(Vector3 a, Vector3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CE2")]
		[Address(RVA = "0x11692BC", Offset = "0x11692BC", VA = "0x11692BC")]
		private bool AreVertsCoincident(int a, int b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CE3")]
		[Address(RVA = "0x11693D4", Offset = "0x11693D4", VA = "0x11693D4")]
		private void CloseUnAssignedVertsOnFaces()
		{
		}

		[Token(Token = "0x6002CE4")]
		[Address(RVA = "0x11691AC", Offset = "0x11691AC", VA = "0x11691AC")]
		private bool IsVertOnFace(int i, Face face)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CE5")]
		[Address(RVA = "0x11698EC", Offset = "0x11698EC", VA = "0x11698EC")]
		private Vector3 CalcNormal(Vector3 a, Vector3 b, Vector3 c)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002CE6")]
		[Address(RVA = "0x1169A04", Offset = "0x1169A04", VA = "0x1169A04")]
		private Vector3 CalcNormal(int a, int b, int c)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002CE7")]
		[Address(RVA = "0x116974C", Offset = "0x116974C", VA = "0x116974C")]
		private float CalcTriangleArea(int v0, int v1, int v2)
		{
			return default(float);
		}

		[Token(Token = "0x6002CE8")]
		[Address(RVA = "0x1169BE0", Offset = "0x1169BE0", VA = "0x1169BE0")]
		private void CalculateHorizon(int eyePoint, Horizon crossedEdge, int currFace, bool firstFace = true)
		{
		}

		[Token(Token = "0x6002CE9")]
		[Address(RVA = "0x116A7D4", Offset = "0x116A7D4", VA = "0x116A7D4")]
		private Mesh CreateMesh(List<Face> allFaces)
		{
			return null;
		}

		[Token(Token = "0x6002CEA")]
		[Address(RVA = "0x116B284", Offset = "0x116B284", VA = "0x116B284")]
		private float DistanceFromLine(Vector3 point, Vector3 line, Vector3 pointOnLine)
		{
			return default(float);
		}

		[Token(Token = "0x6002CEB")]
		[Address(RVA = "0x116B350", Offset = "0x116B350", VA = "0x116B350")]
		private float DistanceFromPlane(Vector3 point, Plane p)
		{
			return default(float);
		}

		[Token(Token = "0x6002CEC")]
		[Address(RVA = "0x116916C", Offset = "0x116916C", VA = "0x116916C")]
		private float DistanceFromPlane(Vector3 point, Vector3 normal, Vector3 pointOnPlane)
		{
			return default(float);
		}

		[Token(Token = "0x6002CED")]
		[Address(RVA = "0x116B378", Offset = "0x116B378", VA = "0x116B378")]
		private bool FindInitialHull(List<Vector3> points)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CEE")]
		[Address(RVA = "0x116C7E8", Offset = "0x116C7E8", VA = "0x116C7E8")]
		private bool FindInitialPointsFallBack(List<Vector3> points, out List<int> initialPoints)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CEF")]
		[Address(RVA = "0x116C130", Offset = "0x116C130", VA = "0x116C130")]
		private bool FindInitialPoints(List<Vector3> points, out List<int> initialPoints)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CF1")]
		[Address(RVA = "0x116D5DC", Offset = "0x116D5DC", VA = "0x116D5DC")]
		private void CalculateEpsilon(List<Vector3> points)
		{
		}

		[Token(Token = "0x6002CF2")]
		[Address(RVA = "0x1168330", Offset = "0x1168330", VA = "0x1168330")]
		public void GenerateHull(List<Vector3> points)
		{
		}

		[Token(Token = "0x6002CF3")]
		[Address(RVA = "0x116D89C", Offset = "0x116D89C", VA = "0x116D89C")]
		private int GetFurthestPointFromFace(int faceIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6002CF4")]
		[Address(RVA = "0x116D7F0", Offset = "0x116D7F0", VA = "0x116D7F0")]
		private int GetNonEmptyFaceIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6002CF5")]
		[Address(RVA = "0x116DC00", Offset = "0x116DC00", VA = "0x116DC00")]
		private bool HaveNonEmptyFaceSet()
		{
			return default(bool);
		}

		[Token(Token = "0x6002CF6")]
		[Address(RVA = "0x116D460", Offset = "0x116D460", VA = "0x116D460")]
		private bool isAGreaterThanB(float a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CF7")]
		[Address(RVA = "0x116D568", Offset = "0x116D568", VA = "0x116D568")]
		private bool isALessThanB(float a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CF8")]
		[Address(RVA = "0x11698D8", Offset = "0x11698D8", VA = "0x11698D8")]
		private bool isApproxEqual(float a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CF9")]
		[Address(RVA = "0x1169198", Offset = "0x1169198", VA = "0x1169198")]
		private bool IsApproxZero(float a)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CFA")]
		[Address(RVA = "0x116DADC", Offset = "0x116DADC", VA = "0x116DADC")]
		private void UpdateFace(Horizon horizon, int newFace)
		{
		}

		[Token(Token = "0x6002CFB")]
		[Address(RVA = "0x116DD8C", Offset = "0x116DD8C", VA = "0x116DD8C")]
		private Vector3 CalcFaceCenter(Face face)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002CFC")]
		[Address(RVA = "0x116DE58", Offset = "0x116DE58", VA = "0x116DE58")]
		private void DebugInitialPoints(List<Vector3> points, List<int> initialPoints)
		{
		}

		[Token(Token = "0x6002CFD")]
		[Address(RVA = "0x116E06C", Offset = "0x116E06C", VA = "0x116E06C")]
		private void DrawFace(int face, Color color, float size = 0.08f)
		{
		}

		[Token(Token = "0x6002CFE")]
		[Address(RVA = "0x116E3CC", Offset = "0x116E3CC", VA = "0x116E3CC")]
		private void DrawFaceConnections(int face)
		{
		}

		[Token(Token = "0x6002CFF")]
		[Address(RVA = "0x116E508", Offset = "0x116E508", VA = "0x116E508")]
		private void DrawFaceNormal(Face face, Color color, float distance = 1f)
		{
		}

		[Token(Token = "0x6002D00")]
		[Address(RVA = "0x116E610", Offset = "0x116E610", VA = "0x116E610")]
		private void ForceUpdateFace(int faceIndex)
		{
		}

		[Token(Token = "0x6002D01")]
		[Address(RVA = "0x116E7B4", Offset = "0x116E7B4", VA = "0x116E7B4")]
		private Color RandomColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6002D02")]
		[Address(RVA = "0x116E19C", Offset = "0x116E19C", VA = "0x116E19C")]
		private void DrawPoint(Vector3 point, Color color, float size = 0.05f)
		{
		}

		[Token(Token = "0x6002D03")]
		[Address(RVA = "0x1168138", Offset = "0x1168138", VA = "0x1168138")]
		public EasyColliderQuickHull()
		{
		}
	}
}
namespace Bhaptics.Tact.Unity
{
	[Token(Token = "0x2000A24")]
	public class AndroidHaptic : IHaptic
	{
		[Token(Token = "0x400400A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static AndroidJavaObject androidJavaObject;

		[Token(Token = "0x400400B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected List<HapticDevice> deviceList;

		[Token(Token = "0x400400C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<string> registeredCache;

		[Token(Token = "0x400400D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly object[] SubmitRegisteredParams;

		[Token(Token = "0x400400E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int[] Empty;

		[Token(Token = "0x400400F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly object[] EmptyParams;

		[Token(Token = "0x4004010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly RotationOption DefaultRotationOption;

		[Token(Token = "0x4004011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly object syncLock;

		[Token(Token = "0x4004012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<PositionType, int[]> updatedList;

		[Token(Token = "0x4004013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected IntPtr AndroidJavaObjectPtr;

		[Token(Token = "0x4004014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected IntPtr SubmitRegisteredPtr;

		[Token(Token = "0x4004015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected IntPtr SubmitRegisteredWithTimePtr;

		[Token(Token = "0x4004016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected IntPtr RegisterPtr;

		[Token(Token = "0x4004017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected IntPtr RegisterReflectedPtr;

		[Token(Token = "0x4004018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected IntPtr PingPtr;

		[Token(Token = "0x4004019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected IntPtr PingAllPtr;

		[Token(Token = "0x400401A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected IntPtr IsRegisteredPtr;

		[Token(Token = "0x400401B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected IntPtr IsPlayingPtr;

		[Token(Token = "0x400401C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected IntPtr IsPlayingAnythingPtr;

		[Token(Token = "0x400401D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected IntPtr ToggleStreamPtr;

		[Token(Token = "0x400401E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected IntPtr IsStreamingEnablePtr;

		[Token(Token = "0x400401F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected IntPtr GetStreamingHostsPtr;

		[Token(Token = "0x4004020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected IntPtr ShowBluetoothPtr;

		[Token(Token = "0x4004021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected IntPtr RefreshPairingInfoPtr;

		[Token(Token = "0x4004022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected IntPtr EnableDevicePtr;

		[Token(Token = "0x6002D12")]
		[Address(RVA = "0x116EB28", Offset = "0x116EB28", VA = "0x116EB28")]
		public AndroidHaptic()
		{
		}

		[Token(Token = "0x6002D13")]
		[Address(RVA = "0x116F4FC", Offset = "0x116F4FC", VA = "0x116F4FC")]
		public List<AndroidUtils.StreamHost> GetStreamingHosts()
		{
			return null;
		}

		[Token(Token = "0x6002D14")]
		[Address(RVA = "0x116F8E4", Offset = "0x116F8E4", VA = "0x116F8E4")]
		public bool IsStreamingEnable()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D15")]
		[Address(RVA = "0x116F9DC", Offset = "0x116F9DC", VA = "0x116F9DC")]
		public void ToggleStreaming()
		{
		}

		[Token(Token = "0x6002D16")]
		[Address(RVA = "0x116FAF8", Offset = "0x116FAF8", VA = "0x116FAF8", Slot = "4")]
		public bool IsConnect(PositionType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D17")]
		[Address(RVA = "0x116FC64", Offset = "0x116FC64", VA = "0x116FC64", Slot = "5")]
		public bool IsConnect(HapticDeviceType type, bool isLeft = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D18")]
		[Address(RVA = "0x116FEA0", Offset = "0x116FEA0", VA = "0x116FEA0", Slot = "6")]
		public bool IsPlaying(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D19")]
		[Address(RVA = "0x116FF90", Offset = "0x116FF90", VA = "0x116FF90", Slot = "7")]
		public bool IsFeedbackRegistered(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D1A")]
		[Address(RVA = "0x1170120", Offset = "0x1170120", VA = "0x1170120", Slot = "8")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D1B")]
		[Address(RVA = "0x11701B4", Offset = "0x11701B4", VA = "0x11701B4", Slot = "9")]
		public void RegisterTactFileStr(string key, string tactFileStr)
		{
		}

		[Token(Token = "0x6002D1C")]
		[Address(RVA = "0x11702CC", Offset = "0x11702CC", VA = "0x11702CC", Slot = "10")]
		public void RegisterTactFileStrReflected(string key, string tactFileStr)
		{
		}

		[Token(Token = "0x6002D1D")]
		[Address(RVA = "0x11703E4", Offset = "0x11703E4", VA = "0x11703E4", Slot = "11")]
		public void Submit(string key, PositionType position, List<DotPoint> points, int durationMillis)
		{
		}

		[Token(Token = "0x6002D1E")]
		[Address(RVA = "0x11708A4", Offset = "0x11708A4", VA = "0x11708A4", Slot = "12")]
		public void Submit(string key, PositionType position, List<PathPoint> points, int durationMillis)
		{
		}

		[Token(Token = "0x6002D1F")]
		[Address(RVA = "0x1170E1C", Offset = "0x1170E1C", VA = "0x1170E1C", Slot = "13")]
		public void SubmitRegistered(string key, string altKey, ScaleOption option)
		{
		}

		[Token(Token = "0x6002D20")]
		[Address(RVA = "0x1170EA4", Offset = "0x1170EA4", VA = "0x1170EA4", Slot = "14")]
		public void SubmitRegistered(string key, string altKey, RotationOption rOption, ScaleOption sOption)
		{
		}

		[Token(Token = "0x6002D21")]
		[Address(RVA = "0x1171144", Offset = "0x1171144", VA = "0x1171144", Slot = "15")]
		public void SubmitRegistered(string key)
		{
		}

		[Token(Token = "0x6002D22")]
		[Address(RVA = "0x117115C", Offset = "0x117115C", VA = "0x117115C", Slot = "16")]
		public void SubmitRegistered(string key, int startTimeMillis)
		{
		}

		[Token(Token = "0x6002D23")]
		[Address(RVA = "0x117126C", Offset = "0x117126C", VA = "0x117126C", Slot = "17")]
		public void TurnOff(string key)
		{
		}

		[Token(Token = "0x6002D24")]
		[Address(RVA = "0x1171490", Offset = "0x1171490", VA = "0x1171490", Slot = "18")]
		public void TurnOff()
		{
		}

		[Token(Token = "0x6002D25")]
		[Address(RVA = "0x117169C", Offset = "0x117169C", VA = "0x117169C", Slot = "19")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002D26")]
		[Address(RVA = "0x1170EC4", Offset = "0x1170EC4", VA = "0x1170EC4")]
		private void SubmitRequest(string key, string altKey, float intensity, float duration, float offsetAngleX, float offsetY)
		{
		}

		[Token(Token = "0x6002D27")]
		[Address(RVA = "0x117179C", Offset = "0x117179C", VA = "0x117179C", Slot = "20")]
		public int[] GetCurrentFeedback(PositionType pos)
		{
			return null;
		}

		[Token(Token = "0x6002D28")]
		[Address(RVA = "0x116F400", Offset = "0x116F400", VA = "0x116F400")]
		public List<HapticDevice> GetDevices()
		{
			return null;
		}

		[Token(Token = "0x6002D29")]
		[Address(RVA = "0x1171BD4", Offset = "0x1171BD4", VA = "0x1171BD4")]
		public void TogglePosition(string address)
		{
		}

		[Token(Token = "0x6002D2A")]
		[Address(RVA = "0x1171D08", Offset = "0x1171D08", VA = "0x1171D08")]
		public void PingAll()
		{
		}

		[Token(Token = "0x6002D2B")]
		[Address(RVA = "0x1171D98", Offset = "0x1171D98", VA = "0x1171D98")]
		public void Ping(string address)
		{
		}

		[Token(Token = "0x6002D2C")]
		[Address(RVA = "0x1171E84", Offset = "0x1171E84", VA = "0x1171E84")]
		public void ShowBluetoothSetting()
		{
		}

		[Token(Token = "0x6002D2D")]
		[Address(RVA = "0x1171F20", Offset = "0x1171F20", VA = "0x1171F20")]
		public void EnableDevice(string address, bool boo)
		{
		}

		[Token(Token = "0x6002D2E")]
		[Address(RVA = "0x1172060", Offset = "0x1172060", VA = "0x1172060")]
		public void RefreshPairingInfo()
		{
		}

		[Token(Token = "0x6002D2F")]
		[Address(RVA = "0x116FA6C", Offset = "0x116FA6C", VA = "0x116FA6C")]
		private void CallNativeVoidMethod(IntPtr methodPtr, object[] param)
		{
		}

		[Token(Token = "0x6002D30")]
		[Address(RVA = "0x116F94C", Offset = "0x116F94C", VA = "0x116F94C")]
		private bool CallNativeBoolMethod(IntPtr methodPtr, object[] param)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x2000A25")]
	public class HapticDevice
	{
		[Token(Token = "0x4004023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool IsPaired;

		[Token(Token = "0x4004024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool IsConnected;

		[Token(Token = "0x4004025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string DeviceName;

		[Token(Token = "0x4004026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PositionType Position;

		[Token(Token = "0x4004027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Address;

		[Token(Token = "0x4004028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PositionType[] Candidates;

		[Token(Token = "0x4004029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool IsEnable;

		[Token(Token = "0x400402A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool IsAudioJack;

		[Token(Token = "0x400402B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int Battery;

		[Token(Token = "0x6002D32")]
		[Address(RVA = "0x11725F4", Offset = "0x11725F4", VA = "0x11725F4")]
		public HapticDevice()
		{
		}
	}
	[Token(Token = "0x2000A26")]
	public static class AndroidUtils
	{
		[Serializable]
		[Token(Token = "0x2000A27")]
		private class Wrapper<T>
		{
			[Token(Token = "0x400402C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T[] array;

			[Token(Token = "0x6002D3C")]
			public Wrapper()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000A28")]
		private class Device
		{
			[Token(Token = "0x400402D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool paired;

			[Token(Token = "0x400402E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string deviceName;

			[Token(Token = "0x400402F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int position;

			[Token(Token = "0x4004030")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public bool connected;

			[Token(Token = "0x4004031")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string address;

			[Token(Token = "0x4004032")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int battery;

			[Token(Token = "0x4004033")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public bool enable;

			[Token(Token = "0x4004034")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
			public bool audioJackIn;

			[Token(Token = "0x6002D3D")]
			[Address(RVA = "0x1172878", Offset = "0x1172878", VA = "0x1172878")]
			public Device()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000A29")]
		public class StreamHost
		{
			[Token(Token = "0x4004035")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string ip;

			[Token(Token = "0x4004036")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool connected;

			[Token(Token = "0x6002D3E")]
			[Address(RVA = "0x1172880", Offset = "0x1172880", VA = "0x1172880")]
			public StreamHost()
			{
			}
		}

		[Token(Token = "0x6002D33")]
		[Address(RVA = "0x11725FC", Offset = "0x11725FC", VA = "0x11725FC")]
		private static PositionType ToDeviceType(int type)
		{
			return default(PositionType);
		}

		[Token(Token = "0x6002D34")]
		[Address(RVA = "0x1172620", Offset = "0x1172620", VA = "0x1172620")]
		private static PositionType[] ToCandidates(int type)
		{
			return null;
		}

		[Token(Token = "0x6002D35")]
		[Address(RVA = "0x1172774", Offset = "0x1172774", VA = "0x1172774")]
		public static bool IsLeft(PositionType pos)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D36")]
		[Address(RVA = "0x117279C", Offset = "0x117279C", VA = "0x117279C")]
		public static bool CanChangePosition(PositionType pos)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D37")]
		public static T[] GetJsonArray<T>(string json)
		{
			return null;
		}

		[Token(Token = "0x6002D38")]
		[Address(RVA = "0x11727AC", Offset = "0x11727AC", VA = "0x11727AC")]
		private static HapticDevice Convert(Device d)
		{
			return null;
		}

		[Token(Token = "0x6002D39")]
		[Address(RVA = "0x1171A88", Offset = "0x1171A88", VA = "0x1171A88")]
		public static List<HapticDevice> ConvertToBhapticsDevices(string[] deviceJson)
		{
			return null;
		}

		[Token(Token = "0x6002D3A")]
		[Address(RVA = "0x11720FC", Offset = "0x11720FC", VA = "0x11720FC")]
		public static void CallNativeVoidMethod(IntPtr androidObjPtr, IntPtr methodPtr, object[] param)
		{
		}

		[Token(Token = "0x6002D3B")]
		[Address(RVA = "0x11722F8", Offset = "0x11722F8", VA = "0x11722F8")]
		public static bool CallNativeBoolMethod(IntPtr androidObjPtr, IntPtr methodPtr, object[] param)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000A2A")]
	public class AndroidWidget_ControlButton : MonoBehaviour
	{
		[Token(Token = "0x4004037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private PositionType DeviceType;

		[Token(Token = "0x4004038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Images")]
		[SerializeField]
		private UnityEngine.Sprite defaultImage;

		[Token(Token = "0x4004039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private UnityEngine.Sprite pairImage;

		[Token(Token = "0x400403A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEngine.Sprite defaultHoverImage;

		[Token(Token = "0x400403B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private UnityEngine.Sprite pairHoverImage;

		[Token(Token = "0x400403C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform pairDeviceCount;

		[Token(Token = "0x400403D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Button button;

		[Token(Token = "0x6002D3F")]
		[Address(RVA = "0x1172888", Offset = "0x1172888", VA = "0x1172888")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002D40")]
		[Address(RVA = "0x117293C", Offset = "0x117293C", VA = "0x117293C")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6002D41")]
		[Address(RVA = "0x11730C0", Offset = "0x11730C0", VA = "0x11730C0")]
		public void OnPingDevice()
		{
		}

		[Token(Token = "0x6002D42")]
		[Address(RVA = "0x1173328", Offset = "0x1173328", VA = "0x1173328")]
		public void OnClickDevice()
		{
		}

		[Token(Token = "0x6002D43")]
		[Address(RVA = "0x11733B4", Offset = "0x11733B4", VA = "0x11733B4")]
		public AndroidWidget_ControlButton()
		{
		}
	}
	[Token(Token = "0x2000A2B")]
	public class AndroidWidget_ObjectPool : MonoBehaviour
	{
		[Token(Token = "0x400403E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ScrollRect pariedDeviceScrollrect;

		[Token(Token = "0x400403F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AndroidWidget_PairedDeviceUI pairedDeviceUIGameObject;

		[Token(Token = "0x4004040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private int objectCount;

		[Token(Token = "0x4004041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<AndroidWidget_PairedDeviceUI> pairedUIList;

		[Token(Token = "0x6002D44")]
		[Address(RVA = "0x11733BC", Offset = "0x11733BC", VA = "0x11733BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002D45")]
		[Address(RVA = "0x1173580", Offset = "0x1173580", VA = "0x1173580")]
		public AndroidWidget_PairedDeviceUI GetPairedDeviceUI()
		{
			return null;
		}

		[Token(Token = "0x6002D46")]
		[Address(RVA = "0x1173640", Offset = "0x1173640", VA = "0x1173640")]
		public void DisableAll()
		{
		}

		[Token(Token = "0x6002D47")]
		[Address(RVA = "0x11736DC", Offset = "0x11736DC", VA = "0x11736DC")]
		public AndroidWidget_ObjectPool()
		{
		}
	}
	[Token(Token = "0x2000A2C")]
	public class AndroidWidget_PairedDeviceUI : MonoBehaviour
	{
		[Token(Token = "0x4004042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("[UI]")]
		private Image deviceImage;

		[Token(Token = "0x4004043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Text deviceName;

		[Token(Token = "0x4004044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Button pingButton;

		[Token(Token = "0x4004045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Button toggleButton;

		[Token(Token = "0x4004046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("[Sprites]")]
		[SerializeField]
		private UnityEngine.Sprite leftSide;

		[Token(Token = "0x4004047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private UnityEngine.Sprite rightSide;

		[Token(Token = "0x4004048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private HapticDevice device;

		[Token(Token = "0x6002D48")]
		[Address(RVA = "0x11736E4", Offset = "0x11736E4", VA = "0x11736E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002D49")]
		[Address(RVA = "0x11737D4", Offset = "0x11737D4", VA = "0x11737D4")]
		public void Refresh(HapticDevice tactDevice, Bhaptics_Widget_Setting setting)
		{
		}

		[Token(Token = "0x6002D4A")]
		[Address(RVA = "0x1173AC0", Offset = "0x1173AC0", VA = "0x1173AC0")]
		private void OnPing()
		{
		}

		[Token(Token = "0x6002D4B")]
		[Address(RVA = "0x1173C9C", Offset = "0x1173C9C", VA = "0x1173C9C")]
		private void OnSwap()
		{
		}

		[Token(Token = "0x6002D4C")]
		[Address(RVA = "0x1173DF4", Offset = "0x1173DF4", VA = "0x1173DF4")]
		public AndroidWidget_PairedDeviceUI()
		{
		}
	}
	[Token(Token = "0x2000A2D")]
	public class AndroidWidget_SettingUIAnimation : MonoBehaviour
	{
		[Token(Token = "0x4004049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject SettingUI;

		[Token(Token = "0x400404A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x400404B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool settingPanelEnable;

		[Token(Token = "0x6002D4D")]
		[Address(RVA = "0x1173DFC", Offset = "0x1173DFC", VA = "0x1173DFC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002D4E")]
		[Address(RVA = "0x1173E64", Offset = "0x1173E64", VA = "0x1173E64")]
		public void Hide()
		{
		}

		[Token(Token = "0x6002D4F")]
		[Address(RVA = "0x1173E84", Offset = "0x1173E84", VA = "0x1173E84")]
		public void Show()
		{
		}

		[Token(Token = "0x6002D50")]
		[Address(RVA = "0x1173EA4", Offset = "0x1173EA4", VA = "0x1173EA4")]
		public void ToggleSettingButton()
		{
		}

		[Token(Token = "0x6002D51")]
		[Address(RVA = "0x1173FC4", Offset = "0x1173FC4", VA = "0x1173FC4")]
		public AndroidWidget_SettingUIAnimation()
		{
		}
	}
	[Token(Token = "0x2000A2E")]
	public class AndroidWidget_UI : MonoBehaviour
	{
		[Token(Token = "0x400404C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject uiContainer;

		[Token(Token = "0x400404D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Button pingAllButton;

		[Token(Token = "0x400404E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Header("DeviceImages")]
		private Bhaptics_Widget_Setting WidgetSetting;

		[Token(Token = "0x400404F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AndroidWidget_ObjectPool settingObjectPool;

		[Token(Token = "0x4004050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource buttonClickAudio;

		[Token(Token = "0x4004051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Animator animator;

		[Token(Token = "0x4004052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool widgetActive;

		[Token(Token = "0x4004053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AndroidWidget_ControlButton[] controllButtons;

		[Token(Token = "0x4004054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static AndroidWidget_UI Instance;

		[Token(Token = "0x6002D52")]
		[Address(RVA = "0x1173FCC", Offset = "0x1173FCC", VA = "0x1173FCC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002D53")]
		[Address(RVA = "0x117449C", Offset = "0x117449C", VA = "0x117449C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002D54")]
		[Address(RVA = "0x1174178", Offset = "0x1174178", VA = "0x1174178")]
		private void InitializeButtons()
		{
		}

		[Token(Token = "0x6002D55")]
		[Address(RVA = "0x11746A0", Offset = "0x11746A0", VA = "0x11746A0")]
		public void ToggleWidgetButton()
		{
		}

		[Token(Token = "0x6002D56")]
		[Address(RVA = "0x117473C", Offset = "0x117473C", VA = "0x117473C")]
		public void ShowWidget()
		{
		}

		[Token(Token = "0x6002D57")]
		[Address(RVA = "0x117475C", Offset = "0x117475C", VA = "0x117475C")]
		public void HideWidget()
		{
		}

		[Token(Token = "0x6002D58")]
		[Address(RVA = "0x117477C", Offset = "0x117477C", VA = "0x117477C")]
		public void ButtonClickSound()
		{
		}

		[Token(Token = "0x6002D59")]
		[Address(RVA = "0x1174798", Offset = "0x1174798", VA = "0x1174798")]
		private void RefreshPairedDevices(List<HapticDevice> devices)
		{
		}

		[Token(Token = "0x6002D5A")]
		[Address(RVA = "0x11745A8", Offset = "0x11745A8", VA = "0x11745A8")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6002D5B")]
		[Address(RVA = "0x1174A9C", Offset = "0x1174A9C", VA = "0x1174A9C")]
		public AndroidWidget_UI()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000A2F")]
	public class PositonIconSetting
	{
		[Token(Token = "0x4004055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityEngine.Sprite connect;

		[Token(Token = "0x4004056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Sprite disconnect;

		[Token(Token = "0x6002D5C")]
		[Address(RVA = "0x1174AAC", Offset = "0x1174AAC", VA = "0x1174AAC")]
		public PositonIconSetting()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000A30")]
	public class IconSetting
	{
		[Token(Token = "0x4004057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Header("[Setting Icons]")]
		public PositonIconSetting Vest;

		[Token(Token = "0x4004058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PositonIconSetting Head;

		[Token(Token = "0x4004059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PositonIconSetting Arm;

		[Token(Token = "0x400405A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PositonIconSetting Foot;

		[Token(Token = "0x400405B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PositonIconSetting Hand;

		[Token(Token = "0x6002D5D")]
		[Address(RVA = "0x1174AB4", Offset = "0x1174AB4", VA = "0x1174AB4")]
		public IconSetting()
		{
		}
	}
	[Token(Token = "0x2000A31")]
	public class Android_DeviceController : MonoBehaviour
	{
		[Token(Token = "0x400405C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("UI")]
		[SerializeField]
		private Image icon;

		[Token(Token = "0x400405D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private IconSetting widgetSetting;

		[Token(Token = "0x400405E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private UnityEngine.Sprite TactsuitWiredIcon;

		[Token(Token = "0x400405F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Image batteryLowImage;

		[Token(Token = "0x4004060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Connect Menu")]
		[SerializeField]
		private GameObject ConnectMenu;

		[Token(Token = "0x4004061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Button pingButton;

		[Token(Token = "0x4004062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Button lButton;

		[Token(Token = "0x4004063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Button rButton;

		[Token(Token = "0x4004064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject wiredNotification;

		[Token(Token = "0x4004065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Disconnect Menu")]
		[SerializeField]
		private GameObject DisconnectMenu;

		[Token(Token = "0x4004066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string SelectHexColor;

		[Token(Token = "0x4004067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string SelectHoverHexColor;

		[Token(Token = "0x4004068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string DisableHexColor;

		[Token(Token = "0x4004069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static string DisableHoverHexColor;

		[Token(Token = "0x400406A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HapticDevice device;

		[Token(Token = "0x6002D5E")]
		[Address(RVA = "0x1174ABC", Offset = "0x1174ABC", VA = "0x1174ABC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002D5F")]
		[Address(RVA = "0x1174C9C", Offset = "0x1174C9C", VA = "0x1174C9C")]
		public void RefreshDevice(HapticDevice d)
		{
		}

		[Token(Token = "0x6002D60")]
		[Address(RVA = "0x1174E3C", Offset = "0x1174E3C", VA = "0x1174E3C")]
		private void RenderConnectMenu()
		{
		}

		[Token(Token = "0x6002D61")]
		[Address(RVA = "0x1174EC4", Offset = "0x1174EC4", VA = "0x1174EC4")]
		private void RenderDisconnectMenu()
		{
		}

		[Token(Token = "0x6002D62")]
		[Address(RVA = "0x1174F34", Offset = "0x1174F34", VA = "0x1174F34")]
		private void UpdateButtons()
		{
		}

		[Token(Token = "0x6002D63")]
		[Address(RVA = "0x1174D34", Offset = "0x1174D34", VA = "0x1174D34")]
		private void UpdateIcon(HapticDevice d)
		{
		}

		[Token(Token = "0x6002D64")]
		[Address(RVA = "0x1175358", Offset = "0x1175358", VA = "0x1175358")]
		private UnityEngine.Sprite GetSprite(PositonIconSetting icon, bool connected)
		{
			return null;
		}

		[Token(Token = "0x6002D65")]
		[Address(RVA = "0x1175380", Offset = "0x1175380", VA = "0x1175380")]
		private void Ping()
		{
		}

		[Token(Token = "0x6002D66")]
		[Address(RVA = "0x11753E8", Offset = "0x11753E8", VA = "0x11753E8")]
		private void ToLeft()
		{
		}

		[Token(Token = "0x6002D67")]
		[Address(RVA = "0x11754BC", Offset = "0x11754BC", VA = "0x11754BC")]
		private void ToRight()
		{
		}

		[Token(Token = "0x6002D68")]
		[Address(RVA = "0x1175590", Offset = "0x1175590", VA = "0x1175590")]
		private Color ToColor(string hex)
		{
			return default(Color);
		}

		[Token(Token = "0x6002D69")]
		[Address(RVA = "0x1175224", Offset = "0x1175224", VA = "0x1175224")]
		private void ChangeButtonColor(Button targetButton, bool isSelect)
		{
		}

		[Token(Token = "0x6002D6A")]
		[Address(RVA = "0x11751BC", Offset = "0x11751BC", VA = "0x11751BC")]
		private static bool IsLeft(PositionType pos)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D6B")]
		[Address(RVA = "0x11751F0", Offset = "0x11751F0", VA = "0x11751F0")]
		private static bool IsRight(PositionType pos)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D6C")]
		[Address(RVA = "0x11755C4", Offset = "0x11755C4", VA = "0x11755C4")]
		public Android_DeviceController()
		{
		}
	}
	[Token(Token = "0x2000A32")]
	public class Android_UIController : MonoBehaviour
	{
		[Token(Token = "0x400406B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private RectTransform mainPanel;

		[Token(Token = "0x400406C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform devicesContainer;

		[Token(Token = "0x400406D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform deviceListPageUi;

		[Token(Token = "0x400406E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Button deviceListNextPageButton;

		[Token(Token = "0x400406F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Button deviceListBackPageButton;

		[Token(Token = "0x4004070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Text deviceListPageText;

		[Token(Token = "0x4004071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Android_DeviceController devicePrefab;

		[Token(Token = "0x4004072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("No Paired Device UI")]
		[SerializeField]
		private GameObject noPairedDeviceUi;

		[Token(Token = "0x4004073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Button helpButton;

		[Token(Token = "0x4004074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Button bHpaticsLinkButton;

		[Token(Token = "0x4004075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject helpUi;

		[Token(Token = "0x4004076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Button helpCloseButton;

		[Token(Token = "0x4004077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Android_DeviceController> controllers;

		[Token(Token = "0x4004078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private BoxCollider mainPanelCollider;

		[Token(Token = "0x4004079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector2 defaultMainPanelSize;

		[Token(Token = "0x400407A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector2 defaultDeviceContainerSize;

		[Token(Token = "0x400407B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int deviceListSize;

		[Token(Token = "0x400407C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int deviceListPageIndex;

		[Token(Token = "0x400407D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int expandHeight;

		[Token(Token = "0x400407E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private int expandDeviceCount;

		[Token(Token = "0x400407F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int pageActivateDeviceCount;

		[Token(Token = "0x4004080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private int pageExpandHeight;

		[Token(Token = "0x4004081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int maxPageIndex;

		[Token(Token = "0x6002D6E")]
		[Address(RVA = "0x1175698", Offset = "0x1175698", VA = "0x1175698")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002D6F")]
		[Address(RVA = "0x1175B60", Offset = "0x1175B60", VA = "0x1175B60")]
		private void Refresh()
		{
		}

		[Token(Token = "0x6002D70")]
		[Address(RVA = "0x11761BC", Offset = "0x11761BC", VA = "0x11761BC")]
		private void OnHelp()
		{
		}

		[Token(Token = "0x6002D71")]
		[Address(RVA = "0x1176244", Offset = "0x1176244", VA = "0x1176244")]
		private void CloseHelpNotification()
		{
		}

		[Token(Token = "0x6002D72")]
		[Address(RVA = "0x11762CC", Offset = "0x11762CC", VA = "0x11762CC")]
		private void OpenLink()
		{
		}

		[Token(Token = "0x6002D73")]
		[Address(RVA = "0x1176310", Offset = "0x1176310", VA = "0x1176310")]
		private void NextPage()
		{
		}

		[Token(Token = "0x6002D74")]
		[Address(RVA = "0x1176334", Offset = "0x1176334", VA = "0x1176334")]
		private void BackPage()
		{
		}

		[Token(Token = "0x6002D75")]
		[Address(RVA = "0x1176358", Offset = "0x1176358", VA = "0x1176358")]
		public Android_UIController()
		{
		}
	}
	[Token(Token = "0x2000A33")]
	public class BhapticsAndroidManager : MonoBehaviour
	{
		[Token(Token = "0x4004082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static BhapticsAndroidManager Instance;

		[Token(Token = "0x4004083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static bool pcAndoidTestMode;

		[Token(Token = "0x4004084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<HapticDevice> Devices;

		[Token(Token = "0x4004085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<UnityAction> refreshActions;

		[Token(Token = "0x6002D76")]
		[Address(RVA = "0x11763E8", Offset = "0x11763E8", VA = "0x11763E8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002D77")]
		[Address(RVA = "0x11764EC", Offset = "0x11764EC", VA = "0x11764EC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002D78")]
		[Address(RVA = "0x1176584", Offset = "0x1176584", VA = "0x1176584")]
		private void RefreshDevices()
		{
		}

		[Token(Token = "0x6002D79")]
		[Address(RVA = "0x1173118", Offset = "0x1173118", VA = "0x1173118")]
		public static void Ping(PositionType pos)
		{
		}

		[Token(Token = "0x6002D7A")]
		[Address(RVA = "0x1173D6C", Offset = "0x1173D6C", VA = "0x1173D6C")]
		public static void TogglePosition(string address)
		{
		}

		[Token(Token = "0x6002D7B")]
		[Address(RVA = "0x1173B34", Offset = "0x1173B34", VA = "0x1173B34")]
		public static void Ping(HapticDevice device)
		{
		}

		[Token(Token = "0x6002D7C")]
		[Address(RVA = "0x1176A1C", Offset = "0x1176A1C", VA = "0x1176A1C")]
		public static void PingAll()
		{
		}

		[Token(Token = "0x6002D7D")]
		[Address(RVA = "0x1174998", Offset = "0x1174998", VA = "0x1174998")]
		public static List<HapticDevice> GetDevices()
		{
			return null;
		}

		[Token(Token = "0x6002D7E")]
		[Address(RVA = "0x1172E70", Offset = "0x1172E70", VA = "0x1172E70")]
		public static List<HapticDevice> GetConnectedDevices(PositionType pos)
		{
			return null;
		}

		[Token(Token = "0x6002D7F")]
		[Address(RVA = "0x1176A9C", Offset = "0x1176A9C", VA = "0x1176A9C")]
		public static List<HapticDevice> GetPairedDevices(PositionType pos)
		{
			return null;
		}

		[Token(Token = "0x6002D80")]
		[Address(RVA = "0x11743CC", Offset = "0x11743CC", VA = "0x11743CC")]
		public static void AddRefreshAction(UnityAction action)
		{
		}

		[Token(Token = "0x6002D81")]
		[Address(RVA = "0x1176CE4", Offset = "0x1176CE4", VA = "0x1176CE4")]
		public static void RemoveRefreshAction()
		{
		}

		[Token(Token = "0x6002D82")]
		[Address(RVA = "0x1176D7C", Offset = "0x1176D7C", VA = "0x1176D7C")]
		public static bool IsStreaming()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D83")]
		[Address(RVA = "0x1176E00", Offset = "0x1176E00", VA = "0x1176E00")]
		public static void ToggleStreaming()
		{
		}

		[Token(Token = "0x6002D84")]
		[Address(RVA = "0x1176E80", Offset = "0x1176E80", VA = "0x1176E80")]
		public static List<AndroidUtils.StreamHost> GetStreamingHosts()
		{
			return null;
		}

		[Token(Token = "0x6002D85")]
		[Address(RVA = "0x1176F3C", Offset = "0x1176F3C", VA = "0x1176F3C")]
		public static void ShowBluetoothSetting()
		{
		}

		[Token(Token = "0x6002D86")]
		[Address(RVA = "0x1176FBC", Offset = "0x1176FBC", VA = "0x1176FBC")]
		public static void ToggleEnableDevice(HapticDevice device)
		{
		}

		[Token(Token = "0x6002D87")]
		[Address(RVA = "0x1177060", Offset = "0x1177060", VA = "0x1177060")]
		private void OnApplicationFocus(bool pauseStatus)
		{
		}

		[Token(Token = "0x6002D88")]
		[Address(RVA = "0x11770F4", Offset = "0x11770F4", VA = "0x11770F4")]
		public BhapticsAndroidManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000A34")]
	public class SettingDeviceIcon
	{
		[Token(Token = "0x4004086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityEngine.Sprite pairImage;

		[Token(Token = "0x4004087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Sprite unpairImage;

		[Token(Token = "0x6002D8A")]
		[Address(RVA = "0x1177208", Offset = "0x1177208", VA = "0x1177208")]
		public SettingDeviceIcon()
		{
		}
	}
	[Token(Token = "0x2000A35")]
	public class Bhaptics_Widget_Setting : ScriptableObject
	{
		[Token(Token = "0x4004088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("[Setting Icons]")]
		public SettingDeviceIcon SettingTactot;

		[Token(Token = "0x4004089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SettingDeviceIcon SettingTactal;

		[Token(Token = "0x400408A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SettingDeviceIcon SettingTactosyArm;

		[Token(Token = "0x400408B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SettingDeviceIcon SettingTactosyFoot;

		[Token(Token = "0x400408C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SettingDeviceIcon SettingTactosyHand;

		[Token(Token = "0x6002D8B")]
		[Address(RVA = "0x1173964", Offset = "0x1173964", VA = "0x1173964")]
		public UnityEngine.Sprite GetPairedDeviceSprite(HapticDevice device)
		{
			return null;
		}

		[Token(Token = "0x6002D8C")]
		[Address(RVA = "0x1177210", Offset = "0x1177210", VA = "0x1177210")]
		public Bhaptics_Widget_Setting()
		{
		}
	}
	[Token(Token = "0x2000A36")]
	public class HapticApi
	{
		[Token(Token = "0x2000A37")]
		public struct point
		{
			[Token(Token = "0x400408D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float x;

			[Token(Token = "0x400408E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float y;

			[Token(Token = "0x400408F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int intensity;

			[Token(Token = "0x4004090")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int motorCount;
		}

		[Token(Token = "0x2000A38")]
		public struct status
		{
			[Token(Token = "0x4004091")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int[] values;
		}

		[PreserveSig]
		[Token(Token = "0x6002D8D")]
		[Address(RVA = "0x1177218", Offset = "0x1177218", VA = "0x1177218")]
		public static extern bool TryGetExePath(byte[] buf, ref int size);

		[PreserveSig]
		[Token(Token = "0x6002D8E")]
		[Address(RVA = "0x11772AC", Offset = "0x11772AC", VA = "0x11772AC")]
		public static extern void Initialise(string appId, string appName);

		[PreserveSig]
		[Token(Token = "0x6002D8F")]
		[Address(RVA = "0x1177358", Offset = "0x1177358", VA = "0x1177358")]
		public static extern void Destroy();

		[PreserveSig]
		[Token(Token = "0x6002D90")]
		[Address(RVA = "0x11773BC", Offset = "0x11773BC", VA = "0x11773BC")]
		public static extern void RegisterFeedback(string str, string projectJson);

		[PreserveSig]
		[Token(Token = "0x6002D91")]
		[Address(RVA = "0x1177464", Offset = "0x1177464", VA = "0x1177464")]
		public static extern void RegisterFeedbackFromTactFile(string str, string tactFileStr);

		[PreserveSig]
		[Token(Token = "0x6002D92")]
		[Address(RVA = "0x1177510", Offset = "0x1177510", VA = "0x1177510")]
		public static extern void RegisterFeedbackFromTactFileReflected(string str, string tactFileStr);

		[PreserveSig]
		[Token(Token = "0x6002D93")]
		[Address(RVA = "0x11775BC", Offset = "0x11775BC", VA = "0x11775BC")]
		public static extern void SubmitRegistered(string key);

		[PreserveSig]
		[Token(Token = "0x6002D94")]
		[Address(RVA = "0x1177648", Offset = "0x1177648", VA = "0x1177648")]
		public static extern void SubmitRegisteredStartMillis(string key, int startTimeMillis);

		[PreserveSig]
		[Token(Token = "0x6002D95")]
		[Address(RVA = "0x11776DC", Offset = "0x11776DC", VA = "0x11776DC")]
		public static extern void SubmitRegisteredWithOption(string key, string altKey, float intensity, float duration, float offsetX, float offsetY);

		[PreserveSig]
		[Token(Token = "0x6002D96")]
		[Address(RVA = "0x11777B8", Offset = "0x11777B8", VA = "0x11777B8")]
		public static extern void SubmitByteArray(string key, PositionType pos, byte[] charPtr, int length, int durationMillis);

		[PreserveSig]
		[Token(Token = "0x6002D97")]
		[Address(RVA = "0x117787C", Offset = "0x117787C", VA = "0x117787C")]
		public static extern void SubmitPathArray(string key, PositionType pos, point[] charPtr, int length, int durationMillis);

		[PreserveSig]
		[Token(Token = "0x6002D98")]
		[Address(RVA = "0x1177940", Offset = "0x1177940", VA = "0x1177940")]
		public static extern bool IsFeedbackRegistered(string key);

		[PreserveSig]
		[Token(Token = "0x6002D99")]
		[Address(RVA = "0x11779D8", Offset = "0x11779D8", VA = "0x11779D8")]
		public static extern bool IsPlaying();

		[PreserveSig]
		[Token(Token = "0x6002D9A")]
		[Address(RVA = "0x1177A48", Offset = "0x1177A48", VA = "0x1177A48")]
		public static extern bool IsPlayingKey(string key);

		[PreserveSig]
		[Token(Token = "0x6002D9B")]
		[Address(RVA = "0x1177AE0", Offset = "0x1177AE0", VA = "0x1177AE0")]
		public static extern void TurnOff();

		[PreserveSig]
		[Token(Token = "0x6002D9C")]
		[Address(RVA = "0x1177B44", Offset = "0x1177B44", VA = "0x1177B44")]
		public static extern void TurnOffKey(string key);

		[PreserveSig]
		[Token(Token = "0x6002D9D")]
		[Address(RVA = "0x1177BD0", Offset = "0x1177BD0", VA = "0x1177BD0")]
		public static extern void EnableFeedback();

		[PreserveSig]
		[Token(Token = "0x6002D9E")]
		[Address(RVA = "0x1177C30", Offset = "0x1177C30", VA = "0x1177C30")]
		public static extern void DisableFeedback();

		[PreserveSig]
		[Token(Token = "0x6002D9F")]
		[Address(RVA = "0x1177C94", Offset = "0x1177C94", VA = "0x1177C94")]
		public static extern void ToggleFeedback();

		[PreserveSig]
		[Token(Token = "0x6002DA0")]
		[Address(RVA = "0x1177CF4", Offset = "0x1177CF4", VA = "0x1177CF4")]
		public static extern bool IsDevicePlaying(PositionType pos);

		[PreserveSig]
		[Token(Token = "0x6002DA1")]
		[Address(RVA = "0x1177D78", Offset = "0x1177D78", VA = "0x1177D78")]
		public static extern bool TryGetResponseForPosition(PositionType pos, out status status);

		[Token(Token = "0x6002DA2")]
		[Address(RVA = "0x1177E30", Offset = "0x1177E30", VA = "0x1177E30")]
		public HapticApi()
		{
		}
	}
	[Token(Token = "0x2000A39")]
	public class ArmsHapticClip : FileHapticClip
	{
		[Token(Token = "0x4004092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool IsReflect;

		[Token(Token = "0x6002DA3")]
		[Address(RVA = "0x1177E38", Offset = "0x1177E38", VA = "0x1177E38", Slot = "12")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, float vestRotationOffsetY, string identifier = "")
		{
		}

		[Token(Token = "0x6002DA4")]
		[Address(RVA = "0x11781E0", Offset = "0x11781E0", VA = "0x11781E0", Slot = "17")]
		public override void ResetValues()
		{
		}

		[Token(Token = "0x6002DA5")]
		[Address(RVA = "0x11781FC", Offset = "0x11781FC", VA = "0x11781FC")]
		public ArmsHapticClip()
		{
		}
	}
	[Token(Token = "0x2000A3A")]
	public class BhapticsHaptic : IHaptic
	{
		[Token(Token = "0x6002DA6")]
		[Address(RVA = "0x1178224", Offset = "0x1178224", VA = "0x1178224")]
		public BhapticsHaptic()
		{
		}

		[Token(Token = "0x6002DA7")]
		[Address(RVA = "0x1178254", Offset = "0x1178254", VA = "0x1178254", Slot = "4")]
		public bool IsConnect(PositionType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6002DA8")]
		[Address(RVA = "0x117825C", Offset = "0x117825C", VA = "0x117825C", Slot = "5")]
		public bool IsConnect(HapticDeviceType type, bool isLeft = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002DA9")]
		[Address(RVA = "0x11782B4", Offset = "0x11782B4", VA = "0x11782B4", Slot = "6")]
		public bool IsPlaying(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6002DAA")]
		[Address(RVA = "0x11782BC", Offset = "0x11782BC", VA = "0x11782BC", Slot = "7")]
		public bool IsFeedbackRegistered(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6002DAB")]
		[Address(RVA = "0x11782C4", Offset = "0x11782C4", VA = "0x11782C4", Slot = "8")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DAC")]
		[Address(RVA = "0x11782C8", Offset = "0x11782C8", VA = "0x11782C8", Slot = "9")]
		public void RegisterTactFileStr(string key, string tactFileStr)
		{
		}

		[Token(Token = "0x6002DAD")]
		[Address(RVA = "0x11782D4", Offset = "0x11782D4", VA = "0x11782D4", Slot = "10")]
		public void RegisterTactFileStrReflected(string key, string tactFileStr)
		{
		}

		[Token(Token = "0x6002DAE")]
		[Address(RVA = "0x11782E0", Offset = "0x11782E0", VA = "0x11782E0", Slot = "11")]
		public void Submit(string key, PositionType position, List<DotPoint> points, int durationMillis)
		{
		}

		[Token(Token = "0x6002DAF")]
		[Address(RVA = "0x11783E0", Offset = "0x11783E0", VA = "0x11783E0", Slot = "12")]
		public void Submit(string key, PositionType position, List<PathPoint> points, int durationMillis)
		{
		}

		[Token(Token = "0x6002DB0")]
		[Address(RVA = "0x1178560", Offset = "0x1178560", VA = "0x1178560", Slot = "13")]
		public void SubmitRegistered(string key, string altKey, ScaleOption option)
		{
		}

		[Token(Token = "0x6002DB1")]
		[Address(RVA = "0x1178588", Offset = "0x1178588", VA = "0x1178588", Slot = "14")]
		public void SubmitRegistered(string key, string altKey, RotationOption rOption, ScaleOption sOption)
		{
		}

		[Token(Token = "0x6002DB2")]
		[Address(RVA = "0x11785B0", Offset = "0x11785B0", VA = "0x11785B0", Slot = "15")]
		public void SubmitRegistered(string key)
		{
		}

		[Token(Token = "0x6002DB3")]
		[Address(RVA = "0x11785B8", Offset = "0x11785B8", VA = "0x11785B8", Slot = "16")]
		public void SubmitRegistered(string key, int startTimeMillis)
		{
		}

		[Token(Token = "0x6002DB4")]
		[Address(RVA = "0x11785C4", Offset = "0x11785C4", VA = "0x11785C4", Slot = "17")]
		public void TurnOff(string key)
		{
		}

		[Token(Token = "0x6002DB5")]
		[Address(RVA = "0x11785CC", Offset = "0x11785CC", VA = "0x11785CC", Slot = "18")]
		public void TurnOff()
		{
		}

		[Token(Token = "0x6002DB6")]
		[Address(RVA = "0x11785D0", Offset = "0x11785D0", VA = "0x11785D0", Slot = "19")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002DB7")]
		[Address(RVA = "0x11785D4", Offset = "0x11785D4", VA = "0x11785D4", Slot = "20")]
		public int[] GetCurrentFeedback(PositionType pos)
		{
			return null;
		}
	}
	[Token(Token = "0x2000A3B")]
	public class BhapticsProject
	{
		[Token(Token = "0x17000235")]
		public Track[] Tracks
		{
			[Token(Token = "0x6002DB8")]
			[Address(RVA = "0x11785F4", Offset = "0x11785F4", VA = "0x11785F4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DB9")]
			[Address(RVA = "0x11785FC", Offset = "0x11785FC", VA = "0x11785FC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000236")]
		public Layout Layout
		{
			[Token(Token = "0x6002DBA")]
			[Address(RVA = "0x1178604", Offset = "0x1178604", VA = "0x1178604")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DBB")]
			[Address(RVA = "0x117860C", Offset = "0x117860C", VA = "0x117860C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002DBC")]
		[Address(RVA = "0x1178614", Offset = "0x1178614", VA = "0x1178614")]
		public static BhapticsProject ToProject(JSONObject jsonObject)
		{
			return null;
		}

		[Token(Token = "0x6002DBD")]
		[Address(RVA = "0x1178E50", Offset = "0x1178E50", VA = "0x1178E50")]
		public JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002DBE")]
		[Address(RVA = "0x1178854", Offset = "0x1178854", VA = "0x1178854")]
		public BhapticsProject()
		{
		}
	}
	[Token(Token = "0x2000A3C")]
	public class HapticFeedbackFile
	{
		[Token(Token = "0x4004095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BhapticsProject Project;

		[Token(Token = "0x6002DBF")]
		[Address(RVA = "0x11793D0", Offset = "0x11793D0", VA = "0x11793D0")]
		public static HapticFeedbackFile ToHapticFeedbackFile(string jsonStr)
		{
			return null;
		}

		[Token(Token = "0x6002DC0")]
		[Address(RVA = "0x1179494", Offset = "0x1179494", VA = "0x1179494")]
		public HapticFeedbackFile()
		{
		}
	}
	[Token(Token = "0x2000A3D")]
	public class Track
	{
		[Token(Token = "0x17000237")]
		public HapticEffect[] Effects
		{
			[Token(Token = "0x6002DC1")]
			[Address(RVA = "0x117949C", Offset = "0x117949C", VA = "0x117949C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DC2")]
			[Address(RVA = "0x11794A4", Offset = "0x11794A4", VA = "0x11794A4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002DC3")]
		[Address(RVA = "0x11794AC", Offset = "0x11794AC", VA = "0x11794AC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002DC4")]
		[Address(RVA = "0x117885C", Offset = "0x117885C", VA = "0x117885C")]
		internal static Track ToTrack(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x6002DC5")]
		[Address(RVA = "0x1178FA4", Offset = "0x1178FA4", VA = "0x1178FA4")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002DC6")]
		[Address(RVA = "0x1179530", Offset = "0x1179530", VA = "0x1179530")]
		public Track()
		{
		}
	}
	[Token(Token = "0x2000A3E")]
	public class HapticEffect
	{
		[Token(Token = "0x17000238")]
		public int StartTime
		{
			[Token(Token = "0x6002DC7")]
			[Address(RVA = "0x1179A5C", Offset = "0x1179A5C", VA = "0x1179A5C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002DC8")]
			[Address(RVA = "0x1179A64", Offset = "0x1179A64", VA = "0x1179A64")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000239")]
		public int OffsetTime
		{
			[Token(Token = "0x6002DC9")]
			[Address(RVA = "0x1179A6C", Offset = "0x1179A6C", VA = "0x1179A6C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002DCA")]
			[Address(RVA = "0x1179A74", Offset = "0x1179A74", VA = "0x1179A74")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700023A")]
		public Dictionary<string, HapticEffectMode> Modes
		{
			[Token(Token = "0x6002DCB")]
			[Address(RVA = "0x1179A7C", Offset = "0x1179A7C", VA = "0x1179A7C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DCC")]
			[Address(RVA = "0x1179A84", Offset = "0x1179A84", VA = "0x1179A84")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002DCD")]
		[Address(RVA = "0x1179A8C", Offset = "0x1179A8C", VA = "0x1179A8C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002DCE")]
		[Address(RVA = "0x1179538", Offset = "0x1179538", VA = "0x1179538")]
		internal static HapticEffect ToEffect(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x6002DCF")]
		[Address(RVA = "0x11797D0", Offset = "0x11797D0", VA = "0x11797D0")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002DD0")]
		[Address(RVA = "0x1179CD0", Offset = "0x1179CD0", VA = "0x1179CD0")]
		public HapticEffect()
		{
		}
	}
	[Token(Token = "0x2000A3F")]
	public class Layout
	{
		[Token(Token = "0x1700023B")]
		public string Type
		{
			[Token(Token = "0x6002DD1")]
			[Address(RVA = "0x1179FB0", Offset = "0x1179FB0", VA = "0x1179FB0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DD2")]
			[Address(RVA = "0x1179FB8", Offset = "0x1179FB8", VA = "0x1179FB8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700023C")]
		public Dictionary<string, LayoutObject[]> Layouts
		{
			[Token(Token = "0x6002DD3")]
			[Address(RVA = "0x1179FC0", Offset = "0x1179FC0", VA = "0x1179FC0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DD4")]
			[Address(RVA = "0x1179FC8", Offset = "0x1179FC8", VA = "0x1179FC8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002DD5")]
		[Address(RVA = "0x1178A8C", Offset = "0x1178A8C", VA = "0x1178A8C")]
		internal static Layout ToLayout(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x6002DD6")]
		[Address(RVA = "0x11790C0", Offset = "0x11790C0", VA = "0x11790C0")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002DD7")]
		[Address(RVA = "0x1179FD0", Offset = "0x1179FD0", VA = "0x1179FD0")]
		public Layout()
		{
		}
	}
	[Token(Token = "0x2000A40")]
	public class LayoutObject
	{
		[Token(Token = "0x1700023D")]
		public int Index
		{
			[Token(Token = "0x6002DD8")]
			[Address(RVA = "0x117A250", Offset = "0x117A250", VA = "0x117A250")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002DD9")]
			[Address(RVA = "0x117A258", Offset = "0x117A258", VA = "0x117A258")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700023E")]
		public float X
		{
			[Token(Token = "0x6002DDA")]
			[Address(RVA = "0x117A260", Offset = "0x117A260", VA = "0x117A260")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002DDB")]
			[Address(RVA = "0x117A268", Offset = "0x117A268", VA = "0x117A268")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700023F")]
		public float Y
		{
			[Token(Token = "0x6002DDC")]
			[Address(RVA = "0x117A270", Offset = "0x117A270", VA = "0x117A270")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002DDD")]
			[Address(RVA = "0x117A278", Offset = "0x117A278", VA = "0x117A278")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002DDE")]
		[Address(RVA = "0x1179FD8", Offset = "0x1179FD8", VA = "0x1179FD8")]
		internal static LayoutObject ToLayoutObject(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x6002DDF")]
		[Address(RVA = "0x117A110", Offset = "0x117A110", VA = "0x117A110")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002DE0")]
		[Address(RVA = "0x117A280", Offset = "0x117A280", VA = "0x117A280")]
		public LayoutObject()
		{
		}
	}
	[Token(Token = "0x2000A41")]
	public class HapticEffectMode
	{
		[Token(Token = "0x17000240")]
		public FeedbackMode Mode
		{
			[Token(Token = "0x6002DE1")]
			[Address(RVA = "0x117A288", Offset = "0x117A288", VA = "0x117A288")]
			[CompilerGenerated]
			get
			{
				return default(FeedbackMode);
			}
			[Token(Token = "0x6002DE2")]
			[Address(RVA = "0x117A290", Offset = "0x117A290", VA = "0x117A290")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000241")]
		public DotMode DotMode
		{
			[Token(Token = "0x6002DE3")]
			[Address(RVA = "0x117A298", Offset = "0x117A298", VA = "0x117A298")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DE4")]
			[Address(RVA = "0x117A2A0", Offset = "0x117A2A0", VA = "0x117A2A0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000242")]
		public PathMode PathMode
		{
			[Token(Token = "0x6002DE5")]
			[Address(RVA = "0x117A2A8", Offset = "0x117A2A8", VA = "0x117A2A8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DE6")]
			[Address(RVA = "0x117A2B0", Offset = "0x117A2B0", VA = "0x117A2B0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002DE7")]
		[Address(RVA = "0x1179CD8", Offset = "0x1179CD8", VA = "0x1179CD8")]
		internal static HapticEffectMode ToMode(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x6002DE8")]
		[Address(RVA = "0x1179E38", Offset = "0x1179E38", VA = "0x1179E38")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002DE9")]
		[Address(RVA = "0x117A2B8", Offset = "0x117A2B8", VA = "0x117A2B8")]
		public HapticEffectMode()
		{
		}
	}
	[Token(Token = "0x2000A42")]
	public class DotMode
	{
		[Token(Token = "0x17000243")]
		public bool DotConnected
		{
			[Token(Token = "0x6002DEA")]
			[Address(RVA = "0x117A9C8", Offset = "0x117A9C8", VA = "0x117A9C8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002DEB")]
			[Address(RVA = "0x117A9D0", Offset = "0x117A9D0", VA = "0x117A9D0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000244")]
		public DotModeObjectCollection[] Feedback
		{
			[Token(Token = "0x6002DEC")]
			[Address(RVA = "0x117A9DC", Offset = "0x117A9DC", VA = "0x117A9DC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DED")]
			[Address(RVA = "0x117A9E4", Offset = "0x117A9E4", VA = "0x117A9E4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002DEE")]
		[Address(RVA = "0x117A2C0", Offset = "0x117A2C0", VA = "0x117A2C0")]
		internal static DotMode ToDotMode(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x6002DEF")]
		[Address(RVA = "0x117A72C", Offset = "0x117A72C", VA = "0x117A72C")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002DF0")]
		[Address(RVA = "0x117A9EC", Offset = "0x117A9EC", VA = "0x117A9EC")]
		public DotMode()
		{
		}
	}
	[Token(Token = "0x2000A43")]
	public class DotModeObjectCollection
	{
		[Token(Token = "0x40040A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlaybackType PlaybackType;

		[Token(Token = "0x17000245")]
		public int StartTime
		{
			[Token(Token = "0x6002DF1")]
			[Address(RVA = "0x117AF04", Offset = "0x117AF04", VA = "0x117AF04")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002DF2")]
			[Address(RVA = "0x117AF0C", Offset = "0x117AF0C", VA = "0x117AF0C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000246")]
		public int EndTime
		{
			[Token(Token = "0x6002DF3")]
			[Address(RVA = "0x117AF14", Offset = "0x117AF14", VA = "0x117AF14")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002DF4")]
			[Address(RVA = "0x117AF1C", Offset = "0x117AF1C", VA = "0x117AF1C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000247")]
		public DotModeObject[] PointList
		{
			[Token(Token = "0x6002DF5")]
			[Address(RVA = "0x117AF24", Offset = "0x117AF24", VA = "0x117AF24")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DF6")]
			[Address(RVA = "0x117AF2C", Offset = "0x117AF2C", VA = "0x117AF2C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002DF7")]
		[Address(RVA = "0x117A9F4", Offset = "0x117A9F4", VA = "0x117A9F4")]
		internal static DotModeObjectCollection ToObject(JSONObject val)
		{
			return null;
		}

		[Token(Token = "0x6002DF8")]
		[Address(RVA = "0x117ACD0", Offset = "0x117ACD0", VA = "0x117ACD0")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002DF9")]
		[Address(RVA = "0x117AF34", Offset = "0x117AF34", VA = "0x117AF34")]
		public DotModeObjectCollection()
		{
		}
	}
	[Token(Token = "0x2000A44")]
	public class DotModeObject
	{
		[Token(Token = "0x17000248")]
		public int Index
		{
			[Token(Token = "0x6002DFA")]
			[Address(RVA = "0x117B238", Offset = "0x117B238", VA = "0x117B238")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002DFB")]
			[Address(RVA = "0x117B240", Offset = "0x117B240", VA = "0x117B240")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000249")]
		public float Intensity
		{
			[Token(Token = "0x6002DFC")]
			[Address(RVA = "0x117B248", Offset = "0x117B248", VA = "0x117B248")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002DFD")]
			[Address(RVA = "0x117B250", Offset = "0x117B250", VA = "0x117B250")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002DFE")]
		[Address(RVA = "0x117B080", Offset = "0x117B080", VA = "0x117B080")]
		internal static DotModeObject ToObject(JSONObject jsonObject)
		{
			return null;
		}

		[Token(Token = "0x6002DFF")]
		[Address(RVA = "0x117B138", Offset = "0x117B138", VA = "0x117B138")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002E00")]
		[Address(RVA = "0x117B258", Offset = "0x117B258", VA = "0x117B258")]
		public DotModeObject()
		{
		}
	}
	[Token(Token = "0x2000A45")]
	public class PathMode
	{
		[Token(Token = "0x1700024A")]
		public PathModeObjectCollection[] Feedback
		{
			[Token(Token = "0x6002E01")]
			[Address(RVA = "0x117B3B4", Offset = "0x117B3B4", VA = "0x117B3B4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002E02")]
			[Address(RVA = "0x117B3BC", Offset = "0x117B3BC", VA = "0x117B3BC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002E03")]
		[Address(RVA = "0x117A524", Offset = "0x117A524", VA = "0x117A524")]
		internal static PathMode ToPathMode(JSONObject jsonObject)
		{
			return null;
		}

		[Token(Token = "0x6002E04")]
		[Address(RVA = "0x117A8AC", Offset = "0x117A8AC", VA = "0x117A8AC")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002E05")]
		[Address(RVA = "0x117B3C4", Offset = "0x117B3C4", VA = "0x117B3C4")]
		public PathMode()
		{
		}
	}
	[Token(Token = "0x2000A46")]
	public class PathModeObjectCollection
	{
		[Token(Token = "0x40040AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlaybackType PlaybackType;

		[Token(Token = "0x40040AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public PathMovingPattern MovingPattern;

		[Token(Token = "0x1700024B")]
		public PathModeObject[] PointList
		{
			[Token(Token = "0x6002E06")]
			[Address(RVA = "0x117B8F8", Offset = "0x117B8F8", VA = "0x117B8F8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002E07")]
			[Address(RVA = "0x117B900", Offset = "0x117B900", VA = "0x117B900")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002E08")]
		[Address(RVA = "0x117B3CC", Offset = "0x117B3CC", VA = "0x117B3CC")]
		internal static PathModeObjectCollection ToObject(JSONObject jsonObject)
		{
			return null;
		}

		[Token(Token = "0x6002E09")]
		[Address(RVA = "0x117B6C8", Offset = "0x117B6C8", VA = "0x117B6C8")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002E0A")]
		[Address(RVA = "0x117B908", Offset = "0x117B908", VA = "0x117B908")]
		public PathModeObjectCollection()
		{
		}
	}
	[Token(Token = "0x2000A47")]
	public class PathModeObject
	{
		[Token(Token = "0x1700024C")]
		public float X
		{
			[Token(Token = "0x6002E0B")]
			[Address(RVA = "0x117BBB4", Offset = "0x117BBB4", VA = "0x117BBB4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002E0C")]
			[Address(RVA = "0x117BBBC", Offset = "0x117BBBC", VA = "0x117BBBC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700024D")]
		public float Y
		{
			[Token(Token = "0x6002E0D")]
			[Address(RVA = "0x117BBC4", Offset = "0x117BBC4", VA = "0x117BBC4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002E0E")]
			[Address(RVA = "0x117BBCC", Offset = "0x117BBCC", VA = "0x117BBCC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700024E")]
		public float Intensity
		{
			[Token(Token = "0x6002E0F")]
			[Address(RVA = "0x117BBD4", Offset = "0x117BBD4", VA = "0x117BBD4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002E10")]
			[Address(RVA = "0x117BBDC", Offset = "0x117BBDC", VA = "0x117BBDC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700024F")]
		public int Time
		{
			[Token(Token = "0x6002E11")]
			[Address(RVA = "0x117BBE4", Offset = "0x117BBE4", VA = "0x117BBE4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002E12")]
			[Address(RVA = "0x117BBEC", Offset = "0x117BBEC", VA = "0x117BBEC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002E13")]
		[Address(RVA = "0x117B918", Offset = "0x117B918", VA = "0x117B918")]
		internal static PathModeObject ToObject(JSONObject jsonObject)
		{
			return null;
		}

		[Token(Token = "0x6002E14")]
		[Address(RVA = "0x117BA34", Offset = "0x117BA34", VA = "0x117BA34")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002E15")]
		[Address(RVA = "0x117BBF4", Offset = "0x117BBF4", VA = "0x117BBF4")]
		public PathModeObject()
		{
		}
	}
	[Token(Token = "0x2000A48")]
	internal class ParseUtil
	{
		[Token(Token = "0x6002E16")]
		[Address(RVA = "0x117B260", Offset = "0x117B260", VA = "0x117B260")]
		internal static float GetFloat(JSONObject obj, string key, float defaultValue = -1f)
		{
			return default(float);
		}

		[Token(Token = "0x6002E17")]
		[Address(RVA = "0x117AF3C", Offset = "0x117AF3C", VA = "0x117AF3C")]
		internal static int GetInt(JSONObject obj, string key, int defaultValue = -1)
		{
			return default(int);
		}

		[Token(Token = "0x6002E18")]
		[Address(RVA = "0x117BBFC", Offset = "0x117BBFC", VA = "0x117BBFC")]
		public ParseUtil()
		{
		}
	}
	[Token(Token = "0x2000A49")]
	public class BhapticsUtils
	{
		[Token(Token = "0x40040B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool isInit;

		[Token(Token = "0x40040B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string exeFilePath;

		[Token(Token = "0x40040B4")]
		public const string TypeHead = "Head";

		[Token(Token = "0x40040B5")]
		public const string TypeTactal = "Tactal";

		[Token(Token = "0x40040B6")]
		public const string TypeVest = "Vest";

		[Token(Token = "0x40040B7")]
		public const string TypeTactot = "Tactot";

		[Token(Token = "0x40040B8")]
		public const string TypeTactosy = "Tactosy";

		[Token(Token = "0x40040B9")]
		public const string TypeTactosy2 = "Tactosy2";

		[Token(Token = "0x40040BA")]
		public const string TypeHand = "Hand";

		[Token(Token = "0x40040BB")]
		public const string TypeFoot = "Foot";

		[Token(Token = "0x6002E19")]
		private static T[] SubArray<T>(T[] data, int index, int length)
		{
			return null;
		}

		[Token(Token = "0x6002E1A")]
		[Address(RVA = "0x117BC04", Offset = "0x117BC04", VA = "0x117BC04")]
		public static string GetExePath()
		{
			return null;
		}

		[Token(Token = "0x6002E1B")]
		[Address(RVA = "0x117BC44", Offset = "0x117BC44", VA = "0x117BC44")]
		public static bool IsPlayerInstalled()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E1C")]
		[Address(RVA = "0x117BC4C", Offset = "0x117BC4C", VA = "0x117BC4C")]
		public static bool IsPlayerRunning()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E1D")]
		[Address(RVA = "0x117BC54", Offset = "0x117BC54", VA = "0x117BC54")]
		private static bool Is64BitBuild()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E1E")]
		[Address(RVA = "0x117BC70", Offset = "0x117BC70", VA = "0x117BC70")]
		public static void LaunchPlayer(bool tryLaunch)
		{
		}

		[Token(Token = "0x6002E1F")]
		[Address(RVA = "0x117BC74", Offset = "0x117BC74", VA = "0x117BC74")]
		public static float Angle(Vector3 fwd, Vector3 targetDir)
		{
			return default(float);
		}

		[Token(Token = "0x6002E20")]
		[Address(RVA = "0x117BE18", Offset = "0x117BE18", VA = "0x117BE18")]
		private static int AngleDir(Vector3 fwd, Vector3 targetDir, Vector3 up)
		{
			return default(int);
		}

		[Token(Token = "0x6002E21")]
		[Address(RVA = "0x117BE70", Offset = "0x117BE70", VA = "0x117BE70")]
		public static PositionType ToPositionType(HapticClipPositionType pos)
		{
			return default(PositionType);
		}

		[Token(Token = "0x6002E22")]
		[Address(RVA = "0x116FE44", Offset = "0x116FE44", VA = "0x116FE44")]
		public static PositionType ToPositionType(HapticDeviceType pos, bool isLeft = true)
		{
			return default(PositionType);
		}

		[Token(Token = "0x6002E23")]
		[Address(RVA = "0x117BE90", Offset = "0x117BE90", VA = "0x117BE90")]
		public BhapticsUtils()
		{
		}
	}
	[Token(Token = "0x2000A4A")]
	public class FeetHapticClip : ArmsHapticClip
	{
		[Token(Token = "0x6002E24")]
		[Address(RVA = "0x117BE98", Offset = "0x117BE98", VA = "0x117BE98")]
		public FeetHapticClip()
		{
		}
	}
	[Token(Token = "0x2000A4B")]
	public class FileHapticClip : HapticClip
	{
		[Token(Token = "0x40040BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0.2f, 5f)]
		public float Intensity;

		[Token(Token = "0x40040BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0.2f, 5f)]
		public float Duration;

		[Token(Token = "0x40040BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HapticDeviceType ClipType;

		[Token(Token = "0x40040BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string JsonValue;

		[Token(Token = "0x40040C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected int _clipDurationTime;

		[Token(Token = "0x17000250")]
		public int ClipDurationTime
		{
			[Token(Token = "0x6002E25")]
			[Address(RVA = "0x117BEAC", Offset = "0x117BEAC", VA = "0x117BEAC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6002E26")]
		[Address(RVA = "0x117BF70", Offset = "0x117BF70", VA = "0x117BF70", Slot = "4")]
		public override void Play()
		{
		}

		[Token(Token = "0x6002E27")]
		[Address(RVA = "0x117BFCC", Offset = "0x117BFCC", VA = "0x117BFCC", Slot = "5")]
		public override void Play(string identifier)
		{
		}

		[Token(Token = "0x6002E28")]
		[Address(RVA = "0x117BFE4", Offset = "0x117BFE4", VA = "0x117BFE4", Slot = "6")]
		public override void Play(float intensity, string identifier = "")
		{
		}

		[Token(Token = "0x6002E29")]
		[Address(RVA = "0x117BFFC", Offset = "0x117BFFC", VA = "0x117BFFC", Slot = "7")]
		public override void Play(float intensity, float duration, string identifier = "")
		{
		}

		[Token(Token = "0x6002E2A")]
		[Address(RVA = "0x117C010", Offset = "0x117C010", VA = "0x117C010", Slot = "8")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, string identifier = "")
		{
		}

		[Token(Token = "0x6002E2B")]
		[Address(RVA = "0x117C020", Offset = "0x117C020", VA = "0x117C020", Slot = "9")]
		public override void Play(Vector3 contactPos, Collider targetCollider, string identifier = "")
		{
		}

		[Token(Token = "0x6002E2C")]
		[Address(RVA = "0x117C144", Offset = "0x117C144", VA = "0x117C144", Slot = "10")]
		public override void Play(Vector3 contactPos, Vector3 targetPos, Vector3 targetForward, float targetHeight, string identifier = "")
		{
		}

		[Token(Token = "0x6002E2D")]
		[Address(RVA = "0x117C1B8", Offset = "0x117C1B8", VA = "0x117C1B8", Slot = "12")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, float vestRotationOffsetY, string identifier = "")
		{
		}

		[Token(Token = "0x6002E2E")]
		[Address(RVA = "0x11781F0", Offset = "0x11781F0", VA = "0x11781F0", Slot = "17")]
		public override void ResetValues()
		{
		}

		[Token(Token = "0x6002E2F")]
		[Address(RVA = "0x117BED8", Offset = "0x117BED8", VA = "0x117BED8")]
		private int CalculateClipDutationTime(HapticFeedbackFile hapticFeedbackFile)
		{
			return default(int);
		}

		[Token(Token = "0x6002E30")]
		[Address(RVA = "0x1178210", Offset = "0x1178210", VA = "0x1178210")]
		public FileHapticClip()
		{
		}
	}
	[Token(Token = "0x2000A4C")]
	public class HandsHapticClip : ArmsHapticClip
	{
		[Token(Token = "0x6002E31")]
		[Address(RVA = "0x117C458", Offset = "0x117C458", VA = "0x117C458")]
		public HandsHapticClip()
		{
		}
	}
	[Token(Token = "0x2000A4D")]
	public enum HapticDeviceType
	{
		[Token(Token = "0x40040C2")]
		None,
		[Token(Token = "0x40040C3")]
		Tactal,
		[Token(Token = "0x40040C4")]
		TactSuit,
		[Token(Token = "0x40040C5")]
		Tactosy_arms,
		[Token(Token = "0x40040C6")]
		Tactosy_hands,
		[Token(Token = "0x40040C7")]
		Tactosy_feet
	}
	[Serializable]
	[Token(Token = "0x2000A4E")]
	public enum HapticClipPositionType
	{
		[Token(Token = "0x40040C9")]
		VestFront,
		[Token(Token = "0x40040CA")]
		VestBack,
		[Token(Token = "0x40040CB")]
		Head,
		[Token(Token = "0x40040CC")]
		RightForearm,
		[Token(Token = "0x40040CD")]
		LeftForearm,
		[Token(Token = "0x40040CE")]
		LeftHand,
		[Token(Token = "0x40040CF")]
		RightHand,
		[Token(Token = "0x40040D0")]
		LeftFoot,
		[Token(Token = "0x40040D1")]
		RightFoot
	}
	[Token(Token = "0x2000A4F")]
	public class HapticClip : ScriptableObject
	{
		[NonSerialized]
		[Token(Token = "0x40040D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected string assetId;

		[NonSerialized]
		[Token(Token = "0x40040D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string keyId;

		[Token(Token = "0x6002E32")]
		[Address(RVA = "0x117C46C", Offset = "0x117C46C", VA = "0x117C46C", Slot = "4")]
		public virtual void Play()
		{
		}

		[Token(Token = "0x6002E33")]
		[Address(RVA = "0x117C4CC", Offset = "0x117C4CC", VA = "0x117C4CC", Slot = "5")]
		public virtual void Play(string identifier)
		{
		}

		[Token(Token = "0x6002E34")]
		[Address(RVA = "0x117C4E8", Offset = "0x117C4E8", VA = "0x117C4E8", Slot = "6")]
		public virtual void Play(float intensity, string identifier = "")
		{
		}

		[Token(Token = "0x6002E35")]
		[Address(RVA = "0x117C500", Offset = "0x117C500", VA = "0x117C500", Slot = "7")]
		public virtual void Play(float intensity, float duration, string identifier = "")
		{
		}

		[Token(Token = "0x6002E36")]
		[Address(RVA = "0x117C514", Offset = "0x117C514", VA = "0x117C514", Slot = "8")]
		public virtual void Play(float intensity, float duration, float vestRotationAngleX, string identifier = "")
		{
		}

		[Token(Token = "0x6002E37")]
		[Address(RVA = "0x117C524", Offset = "0x117C524", VA = "0x117C524", Slot = "9")]
		public virtual void Play(Vector3 contactPos, Collider targetCollider, string identifier = "")
		{
		}

		[Token(Token = "0x6002E38")]
		[Address(RVA = "0x117C648", Offset = "0x117C648", VA = "0x117C648", Slot = "10")]
		public virtual void Play(Vector3 contactPos, Vector3 targetPos, Vector3 targetForward, float targetHeight, string identifier = "")
		{
		}

		[Token(Token = "0x6002E39")]
		[Address(RVA = "0x117C6B8", Offset = "0x117C6B8", VA = "0x117C6B8", Slot = "11")]
		public virtual void Play(float intensity, float duration, Vector3 contactPos, Vector3 targetPos, Vector3 targetForward, float targetHeight, string identifier = "")
		{
		}

		[Token(Token = "0x6002E3A")]
		[Address(RVA = "0x117C738", Offset = "0x117C738", VA = "0x117C738", Slot = "12")]
		public virtual void Play(float intensity, float duration, float vestRotationAngleX, float vestRotationOffsetY, string identifier = "")
		{
		}

		[Token(Token = "0x6002E3B")]
		[Address(RVA = "0x117C73C", Offset = "0x117C73C", VA = "0x117C73C", Slot = "13")]
		public virtual void Stop()
		{
		}

		[Token(Token = "0x6002E3C")]
		[Address(RVA = "0x117C7E0", Offset = "0x117C7E0", VA = "0x117C7E0", Slot = "14")]
		public virtual void Stop(string identifier)
		{
		}

		[Token(Token = "0x6002E3D")]
		[Address(RVA = "0x117C8B0", Offset = "0x117C8B0", VA = "0x117C8B0", Slot = "15")]
		public virtual bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E3E")]
		[Address(RVA = "0x117C96C", Offset = "0x117C96C", VA = "0x117C96C", Slot = "16")]
		public virtual bool IsPlaying(string identifier)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E3F")]
		[Address(RVA = "0x117C3F8", Offset = "0x117C3F8", VA = "0x117C3F8", Slot = "17")]
		public virtual void ResetValues()
		{
		}

		[Token(Token = "0x6002E40")]
		[Address(RVA = "0x117CA3C", Offset = "0x117CA3C", VA = "0x117CA3C")]
		public string GetAssetID()
		{
			return null;
		}

		[Token(Token = "0x6002E41")]
		[Address(RVA = "0x117C3FC", Offset = "0x117C3FC", VA = "0x117C3FC")]
		public HapticClip()
		{
		}
	}
	[Token(Token = "0x2000A50")]
	public class HapticReceiver : MonoBehaviour
	{
		[Token(Token = "0x40040D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsActive;

		[Token(Token = "0x40040D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public PositionTag PositionTag;

		[Token(Token = "0x6002E42")]
		[Address(RVA = "0x117CA44", Offset = "0x117CA44", VA = "0x117CA44")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002E43")]
		[Address(RVA = "0x117CB84", Offset = "0x117CB84", VA = "0x117CB84")]
		private void OnTriggerEnter(Collider bullet)
		{
		}

		[Token(Token = "0x6002E44")]
		[Address(RVA = "0x117CD24", Offset = "0x117CD24", VA = "0x117CD24")]
		private void OnCollisionEnter(Collision bullet)
		{
		}

		[Token(Token = "0x6002E45")]
		[Address(RVA = "0x117CC40", Offset = "0x117CC40", VA = "0x117CC40")]
		private void Handle(Vector3 contactPoint, HapticSender tactSender)
		{
		}

		[Token(Token = "0x6002E46")]
		[Address(RVA = "0x117CF08", Offset = "0x117CF08", VA = "0x117CF08")]
		public HapticReceiver()
		{
		}
	}
	[Token(Token = "0x2000A51")]
	public class HapticSender : MonoBehaviour
	{
		[Token(Token = "0x40040D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HapticClip[] DefaultClips;

		[Token(Token = "0x40040D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HeadHapticClip[] HeadClips;

		[Token(Token = "0x40040D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VestHapticClip[] BodyClips;

		[Token(Token = "0x40040D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ArmsHapticClip[] LeftArmClips;

		[Token(Token = "0x40040DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ArmsHapticClip[] RightArmClips;

		[Token(Token = "0x40040DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float yOffsetMultiplier;

		[Token(Token = "0x6002E47")]
		[Address(RVA = "0x117CF18", Offset = "0x117CF18", VA = "0x117CF18")]
		public void Play(PositionTag posTag = PositionTag.Default)
		{
		}

		[Token(Token = "0x6002E48")]
		[Address(RVA = "0x117CDFC", Offset = "0x117CDFC", VA = "0x117CDFC")]
		public void Play(PositionTag posTag, Vector3 contactPos, Collider targetCollider)
		{
		}

		[Token(Token = "0x6002E49")]
		[Address(RVA = "0x117D170", Offset = "0x117D170", VA = "0x117D170")]
		private void Play(PositionTag posTag, Vector3 contactPos, Vector3 targetPos, Vector3 targetForward, float targetHeight)
		{
		}

		[Token(Token = "0x6002E4A")]
		[Address(RVA = "0x117D1E4", Offset = "0x117D1E4", VA = "0x117D1E4")]
		public void Play(PositionTag posTag, RaycastHit hit)
		{
		}

		[Token(Token = "0x6002E4B")]
		[Address(RVA = "0x117D314", Offset = "0x117D314", VA = "0x117D314")]
		private HapticClip GetClip(PositionTag posTag)
		{
			return null;
		}

		[Token(Token = "0x6002E4C")]
		[Address(RVA = "0x117D42C", Offset = "0x117D42C", VA = "0x117D42C")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E4D")]
		[Address(RVA = "0x117CF24", Offset = "0x117CF24", VA = "0x117CF24")]
		public void Play(PositionTag posTag, float angleX, float offsetY)
		{
		}

		[Token(Token = "0x6002E4E")]
		[Address(RVA = "0x117D434", Offset = "0x117D434", VA = "0x117D434")]
		public HapticSender()
		{
		}
	}
	[Token(Token = "0x2000A52")]
	public enum PositionTag
	{
		[Token(Token = "0x40040DD")]
		Body,
		[Token(Token = "0x40040DE")]
		Head,
		[Token(Token = "0x40040DF")]
		LeftArm,
		[Token(Token = "0x40040E0")]
		RightArm,
		[Token(Token = "0x40040E1")]
		Default
	}
	[Token(Token = "0x2000A53")]
	public class HapticSource : MonoBehaviour
	{
		[Token(Token = "0x2000A54")]
		[CompilerGenerated]
		private sealed class <PlayCoroutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40040E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40040EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40040EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delaySecond;

			[Token(Token = "0x40040EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HapticSource <>4__this;

			[Token(Token = "0x17000251")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002E5C")]
				[Address(RVA = "0x117DDE4", Offset = "0x117DDE4", VA = "0x117DDE4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000252")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002E5E")]
				[Address(RVA = "0x117DE2C", Offset = "0x117DE2C", VA = "0x117DE2C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002E59")]
			[Address(RVA = "0x117DCC0", Offset = "0x117DCC0", VA = "0x117DCC0")]
			[DebuggerHidden]
			public <PlayCoroutine>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6002E5A")]
			[Address(RVA = "0x117DD18", Offset = "0x117DD18", VA = "0x117DD18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002E5B")]
			[Address(RVA = "0x117DD1C", Offset = "0x117DD1C", VA = "0x117DD1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002E5D")]
			[Address(RVA = "0x117DDEC", Offset = "0x117DDEC", VA = "0x117DDEC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000A55")]
		[CompilerGenerated]
		private sealed class <PlayLoopCoroutine>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40040ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40040EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40040EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HapticSource <>4__this;

			[Token(Token = "0x40040F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private WaitForSeconds <duration>5__2;

			[Token(Token = "0x17000253")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002E62")]
				[Address(RVA = "0x117E000", Offset = "0x117E000", VA = "0x117E000", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000254")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002E64")]
				[Address(RVA = "0x117E048", Offset = "0x117E048", VA = "0x117E048", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002E5F")]
			[Address(RVA = "0x117DCE8", Offset = "0x117DCE8", VA = "0x117DCE8")]
			[DebuggerHidden]
			public <PlayLoopCoroutine>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6002E60")]
			[Address(RVA = "0x117DE34", Offset = "0x117DE34", VA = "0x117DE34", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002E61")]
			[Address(RVA = "0x117DE38", Offset = "0x117DE38", VA = "0x117DE38", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002E63")]
			[Address(RVA = "0x117E008", Offset = "0x117E008", VA = "0x117E008", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40040E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HapticClip clip;

		[Token(Token = "0x40040E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool playOnAwake;

		[Token(Token = "0x40040E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool loop;

		[Token(Token = "0x40040E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float loopDelaySeconds;

		[Token(Token = "0x40040E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine currentCoroutine;

		[Token(Token = "0x40040E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Coroutine loopCoroutine;

		[Token(Token = "0x40040E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool isLooping;

		[Token(Token = "0x6002E4F")]
		[Address(RVA = "0x117D444", Offset = "0x117D444", VA = "0x117D444")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002E50")]
		[Address(RVA = "0x117D94C", Offset = "0x117D94C", VA = "0x117D94C")]
		public void Play()
		{
		}

		[Token(Token = "0x6002E51")]
		[Address(RVA = "0x117D6F4", Offset = "0x117D6F4", VA = "0x117D6F4")]
		public void PlayLoop()
		{
		}

		[Token(Token = "0x6002E52")]
		[Address(RVA = "0x117D9B8", Offset = "0x117D9B8", VA = "0x117D9B8")]
		public void PlayDelayed(float delaySecond = 0f)
		{
		}

		[Token(Token = "0x6002E53")]
		[Address(RVA = "0x117DB70", Offset = "0x117DB70", VA = "0x117DB70")]
		public void Stop()
		{
		}

		[Token(Token = "0x6002E54")]
		[Address(RVA = "0x117DC30", Offset = "0x117DC30", VA = "0x117DC30")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E55")]
		[Address(RVA = "0x117DAF8", Offset = "0x117DAF8", VA = "0x117DAF8")]
		[IteratorStateMachine(typeof(<PlayCoroutine>d__13))]
		private IEnumerator PlayCoroutine(float delaySecond)
		{
			return null;
		}

		[Token(Token = "0x6002E56")]
		[Address(RVA = "0x117D828", Offset = "0x117D828", VA = "0x117D828")]
		private void PlayHapticClip()
		{
		}

		[Token(Token = "0x6002E57")]
		[Address(RVA = "0x117D950", Offset = "0x117D950", VA = "0x117D950")]
		[IteratorStateMachine(typeof(<PlayLoopCoroutine>d__15))]
		private IEnumerator PlayLoopCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6002E58")]
		[Address(RVA = "0x117DD10", Offset = "0x117DD10", VA = "0x117DD10")]
		public HapticSource()
		{
		}
	}
	[Token(Token = "0x2000A56")]
	public class HeadHapticClip : FileHapticClip
	{
		[Token(Token = "0x6002E65")]
		[Address(RVA = "0x117E050", Offset = "0x117E050", VA = "0x117E050")]
		public HeadHapticClip()
		{
		}
	}
	[Token(Token = "0x2000A57")]
	public interface IHaptic
	{
		[Token(Token = "0x6002E66")]
		bool IsConnect(PositionType type);

		[Token(Token = "0x6002E67")]
		bool IsConnect(HapticDeviceType type, bool isLeft = true);

		[Token(Token = "0x6002E68")]
		bool IsPlaying(string key);

		[Token(Token = "0x6002E69")]
		bool IsFeedbackRegistered(string key);

		[Token(Token = "0x6002E6A")]
		bool IsPlaying();

		[Token(Token = "0x6002E6B")]
		void RegisterTactFileStr(string key, string tactFileStr);

		[Token(Token = "0x6002E6C")]
		void RegisterTactFileStrReflected(string key, string tactFileStr);

		[Token(Token = "0x6002E6D")]
		void Submit(string key, PositionType position, List<DotPoint> points, int durationMillis);

		[Token(Token = "0x6002E6E")]
		void Submit(string key, PositionType position, List<PathPoint> points, int durationMillis);

		[Token(Token = "0x6002E6F")]
		void SubmitRegistered(string key, string altKey, ScaleOption option);

		[Token(Token = "0x6002E70")]
		void SubmitRegistered(string key, string altKey, RotationOption rOption, ScaleOption sOption);

		[Token(Token = "0x6002E71")]
		void SubmitRegistered(string key);

		[Token(Token = "0x6002E72")]
		void SubmitRegistered(string key, int startTimeMillis);

		[Token(Token = "0x6002E73")]
		void TurnOff(string key);

		[Token(Token = "0x6002E74")]
		void TurnOff();

		[Token(Token = "0x6002E75")]
		void Dispose();

		[Token(Token = "0x6002E76")]
		int[] GetCurrentFeedback(PositionType pos);
	}
	[Token(Token = "0x2000A58")]
	[CreateAssetMenu(fileName = "SimpleHapticClip", menuName = "Bhaptics/Create Simple HapticClip")]
	public class SimpleHapticClip : HapticClip
	{
		[Token(Token = "0x40040F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Point[] DefaultPoints;

		[Token(Token = "0x40040F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HapticClipPositionType Position;

		[Token(Token = "0x40040F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private SimpleHapticType Mode;

		[Token(Token = "0x40040F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int[] DotPoints;

		[Token(Token = "0x40040F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Point[] Points;

		[Token(Token = "0x40040F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(20f, 10000f)]
		public int TimeMillis;

		[Token(Token = "0x6002E77")]
		[Address(RVA = "0x117E064", Offset = "0x117E064", VA = "0x117E064", Slot = "12")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, float vestRotationOffsetY, string identifier = "")
		{
		}

		[Token(Token = "0x6002E78")]
		[Address(RVA = "0x117E538", Offset = "0x117E538", VA = "0x117E538", Slot = "17")]
		public override void ResetValues()
		{
		}

		[Token(Token = "0x6002E79")]
		[Address(RVA = "0x117E250", Offset = "0x117E250", VA = "0x117E250")]
		private static List<DotPoint> Convert(int[] points)
		{
			return null;
		}

		[Token(Token = "0x6002E7A")]
		[Address(RVA = "0x117E3C0", Offset = "0x117E3C0", VA = "0x117E3C0")]
		private static List<PathPoint> Convert(Point[] points)
		{
			return null;
		}

		[Token(Token = "0x6002E7B")]
		[Address(RVA = "0x117E5C4", Offset = "0x117E5C4", VA = "0x117E5C4")]
		public SimpleHapticClip()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000A59")]
	public class Point
	{
		[Token(Token = "0x40040F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		public float X;

		[Token(Token = "0x40040F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 1f)]
		public float Y;

		[Token(Token = "0x40040F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 100f)]
		public int Intensity;

		[Token(Token = "0x6002E7D")]
		[Address(RVA = "0x117E6D0", Offset = "0x117E6D0", VA = "0x117E6D0")]
		public Point(float x, float y, int intensity)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000A5A")]
	public enum SimpleHapticType
	{
		[Token(Token = "0x40040FB")]
		DotMode = 1,
		[Token(Token = "0x40040FC")]
		PathMode
	}
	[Token(Token = "0x2000A5B")]
	public class VestHapticClip : FileHapticClip
	{
		[Token(Token = "0x40040FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 360f)]
		[SerializeField]
		protected float TactFileAngleX;

		[Token(Token = "0x40040FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[Range(-0.5f, 0.5f)]
		protected float TactFileOffsetY;

		[Token(Token = "0x40040FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RotationOption _rotationOption;

		[Token(Token = "0x4004100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ScaleOption _scaleOption;

		[Token(Token = "0x6002E7E")]
		[Address(RVA = "0x117E7F0", Offset = "0x117E7F0", VA = "0x117E7F0", Slot = "4")]
		public override void Play()
		{
		}

		[Token(Token = "0x6002E7F")]
		[Address(RVA = "0x117E848", Offset = "0x117E848", VA = "0x117E848", Slot = "5")]
		public override void Play(string identifier)
		{
		}

		[Token(Token = "0x6002E80")]
		[Address(RVA = "0x117E85C", Offset = "0x117E85C", VA = "0x117E85C", Slot = "6")]
		public override void Play(float intensity, string identifier = "")
		{
		}

		[Token(Token = "0x6002E81")]
		[Address(RVA = "0x117E870", Offset = "0x117E870", VA = "0x117E870", Slot = "7")]
		public override void Play(float intensity, float duration, string identifier = "")
		{
		}

		[Token(Token = "0x6002E82")]
		[Address(RVA = "0x117E880", Offset = "0x117E880", VA = "0x117E880", Slot = "8")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, string identifier = "")
		{
		}

		[Token(Token = "0x6002E83")]
		[Address(RVA = "0x117E890", Offset = "0x117E890", VA = "0x117E890", Slot = "12")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, float vestRotationOffsetY, string identifier = "")
		{
		}

		[Token(Token = "0x6002E84")]
		[Address(RVA = "0x117EADC", Offset = "0x117EADC", VA = "0x117EADC", Slot = "17")]
		public override void ResetValues()
		{
		}

		[Token(Token = "0x6002E85")]
		[Address(RVA = "0x117EAEC", Offset = "0x117EAEC", VA = "0x117EAEC")]
		public VestHapticClip()
		{
		}
	}
	[Token(Token = "0x2000A5C")]
	public class VisualFeedback : MonoBehaviour
	{
		[Token(Token = "0x4004101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HapticClipPositionType devicePos;

		[Token(Token = "0x4004102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform motorContainer;

		[Token(Token = "0x4004103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Gradient motorFeedbackGradient;

		[Token(Token = "0x4004104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform[] motors;

		[Token(Token = "0x4004105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float motorScaleOffset;

		[Token(Token = "0x6002E86")]
		[Address(RVA = "0x117EBA0", Offset = "0x117EBA0", VA = "0x117EBA0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002E87")]
		[Address(RVA = "0x117EF00", Offset = "0x117EF00", VA = "0x117EF00")]
		public void UpdateFeedback(HapticFeedback feedback)
		{
		}

		[Token(Token = "0x6002E88")]
		[Address(RVA = "0x117EFB8", Offset = "0x117EFB8", VA = "0x117EFB8")]
		public void UpdateFeedback(int[] feedbackValues)
		{
		}

		[Token(Token = "0x6002E89")]
		[Address(RVA = "0x117F198", Offset = "0x117F198", VA = "0x117F198")]
		public VisualFeedback()
		{
		}
	}
}
