using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using Common.Collections.Generic;
using Common.Noise;
using CoordinateSystems;
using Il2CppDummyDll;
using MarchingBytes;
using Messiers;
using Oculus.Platform;
using Oculus.Platform.Models;
using Oculus.Spatializer.Propagation;
using Planets;
using Planets.Atmosphere;
using Planets.DaylightSavings;
using SCKeyFrameSystem;
using StarChart;
using StarChartInput;
using Stars;
using TMPro;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
using UserInterface;
using UserInterface.Collidables;

[assembly: AssemblyVersion("0.0.0.0")]
namespace OVR
{
	[Token(Token = "0x2000002")]
	public class TestScript : MonoBehaviour
	{
		[Token(Token = "0x4000001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "InspectorNoteAttribute", RVA = "0xC2AE80", Offset = "0xC2AE80")]
		public SoundFXRef testSound1;

		[Token(Token = "0x4000002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SoundFXRef testSound2;

		[Token(Token = "0x6000001")]
		[Address(RVA = "0xC8BD64", Offset = "0xC8BD64", VA = "0xC8BD64")]
		public TestScript()
		{
		}

		[Token(Token = "0x6000002")]
		[Address(RVA = "0xC8BD6C", Offset = "0xC8BD6C", VA = "0xC8BD6C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000003")]
		[Address(RVA = "0xC8BD70", Offset = "0xC8BD70", VA = "0xC8BD70")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000003")]
	public class AmbienceEmitter : MonoBehaviour
	{
		[Token(Token = "0x4000003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public SoundFXRef[] ambientSounds;

		[Token(Token = "0x4000004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool autoActivate;

		[Token(Token = "0x4000005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2AECC", Offset = "0xC2AECC")]
		public bool autoRetrigger;

		[Token(Token = "0x4000006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0xC2AF00", Offset = "0xC2AF00")]
		public Vector2 randomRetriggerDelaySecs;

		[Token(Token = "0x4000007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2AF48", Offset = "0xC2AF48")]
		public Transform[] playPositions;

		[Token(Token = "0x4000008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool activated;

		[Token(Token = "0x4000009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int playingIdx;

		[Token(Token = "0x400000A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float nextPlayTime;

		[Token(Token = "0x400000B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float fadeTime;

		[Token(Token = "0x400000C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int lastPosIdx;

		[Token(Token = "0x6000004")]
		[Address(RVA = "0xC7EED8", Offset = "0xC7EED8", VA = "0xC7EED8")]
		public AmbienceEmitter()
		{
		}

		[Token(Token = "0x6000005")]
		[Address(RVA = "0xC7EFD4", Offset = "0xC7EFD4", VA = "0xC7EFD4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000006")]
		[Address(RVA = "0xC7F1B4", Offset = "0xC7F1B4", VA = "0xC7F1B4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000007")]
		[Address(RVA = "0xC7F468", Offset = "0xC7F468", VA = "0xC7F468")]
		public void OnTriggerEnter(Collider col)
		{
		}

		[Token(Token = "0x6000008")]
		[Address(RVA = "0xC7F220", Offset = "0xC7F220", VA = "0xC7F220")]
		public void Play()
		{
		}

		[Token(Token = "0x6000009")]
		[Address(RVA = "0xC7F5D8", Offset = "0xC7F5D8", VA = "0xC7F5D8")]
		public void EnableEmitter(bool enable)
		{
		}
	}
	[Token(Token = "0x2000004")]
	public enum PreloadSounds
	{
		[Token(Token = "0x400000E")]
		Default,
		[Token(Token = "0x400000F")]
		Preload,
		[Token(Token = "0x4000010")]
		ManualPreload
	}
	[Token(Token = "0x2000005")]
	public enum Fade
	{
		[Token(Token = "0x4000012")]
		In,
		[Token(Token = "0x4000013")]
		Out
	}
	[Serializable]
	[Token(Token = "0x2000006")]
	public class SoundGroup
	{
		[Token(Token = "0x4000014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string name;

		[Token(Token = "0x4000015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public SoundFX[] soundList;

		[Token(Token = "0x4000016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioMixerGroup mixerGroup;

		[Token(Token = "0x4000017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xC2AF7C", Offset = "0xC2AF7C")]
		public int maxPlayingSounds;

		[Token(Token = "0x4000018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PreloadSounds preloadAudio;

		[Token(Token = "0x4000019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float volumeOverride;

		[Token(Token = "0x400001A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public int playingSoundCount;

		[Token(Token = "0x600000A")]
		[Address(RVA = "0xC8BBA8", Offset = "0xC8BBA8", VA = "0xC8BBA8")]
		public SoundGroup(string name)
		{
		}

		[Token(Token = "0x600000B")]
		[Address(RVA = "0xC8BC80", Offset = "0xC8BC80", VA = "0xC8BC80")]
		public SoundGroup()
		{
		}

		[Token(Token = "0x600000C")]
		[Address(RVA = "0xC8A0E0", Offset = "0xC8A0E0", VA = "0xC8A0E0")]
		public void IncrementPlayCount()
		{
		}

		[Token(Token = "0x600000D")]
		[Address(RVA = "0xC8A238", Offset = "0xC8A238", VA = "0xC8A238")]
		public void DecrementPlayCount()
		{
		}

		[Token(Token = "0x600000E")]
		[Address(RVA = "0xC8B068", Offset = "0xC8B068", VA = "0xC8B068")]
		public bool CanPlaySound()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000007")]
	public class AudioManager : MonoBehaviour
	{
		[Token(Token = "0x200000A")]
		public enum Fade
		{
			[Token(Token = "0x4000042")]
			In,
			[Token(Token = "0x4000043")]
			Out
		}

		[Token(Token = "0x2000403")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2B204", Offset = "0xC2B204")]
		private sealed class <FindFreeEmitter>c__AnonStorey0
		{
			[Token(Token = "0x400168E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal SoundPriority priority;

			[Token(Token = "0x60019EE")]
			[Address(RVA = "0xC85E68", Offset = "0xC85E68", VA = "0xC85E68")]
			public <FindFreeEmitter>c__AnonStorey0()
			{
			}

			[Token(Token = "0x60019EF")]
			[Address(RVA = "0xC899E4", Offset = "0xC899E4", VA = "0xC899E4")]
			internal bool <>m__0(SoundEmitter item)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x400001B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2AFA8", Offset = "0xC2AFA8")]
		public bool makePersistent;

		[Token(Token = "0x400001C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2AFDC", Offset = "0xC2AFDC")]
		public bool enableSpatializedAudio;

		[Token(Token = "0x400001D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B010", Offset = "0xC2B010")]
		public bool enableSpatializedFastOverride;

		[Token(Token = "0x400001E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B044", Offset = "0xC2B044")]
		public AudioMixer audioMixer;

		[Token(Token = "0x400001F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B078", Offset = "0xC2B078")]
		public AudioMixerGroup defaultMixerGroup;

		[Token(Token = "0x4000020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B0AC", Offset = "0xC2B0AC")]
		public AudioMixerGroup reservedMixerGroup;

		[Token(Token = "0x4000021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B0E0", Offset = "0xC2B0E0")]
		public AudioMixerGroup voiceChatMixerGroup;

		[Token(Token = "0x4000022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B114", Offset = "0xC2B114")]
		public bool verboseLogging;

		[Token(Token = "0x4000023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B148", Offset = "0xC2B148")]
		public int maxSoundEmitters;

		[Token(Token = "0x4000024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B17C", Offset = "0xC2B17C")]
		public float volumeSoundFX;

		[Token(Token = "0x4000025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B1B0", Offset = "0xC2B1B0")]
		public float soundFxFadeSecs;

		[Token(Token = "0x4000026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float audioMinFallOffDistance;

		[Token(Token = "0x4000027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float audioMaxFallOffDistance;

		[Token(Token = "0x4000028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SoundGroup[] soundGroupings;

		[Token(Token = "0x4000029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Dictionary<string, SoundFX> soundFXCache;

		[Token(Token = "0x400002A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AudioManager theAudioManager;

		[Token(Token = "0x400002B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static FastList<string> names;

		[Token(Token = "0x400002C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string[] defaultSound;

		[Token(Token = "0x400002D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static SoundFX nullSound;

		[Token(Token = "0x400002E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static bool hideWarnings;

		[Token(Token = "0x400002F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float audioMaxFallOffDistanceSqr;

		[Token(Token = "0x4000030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private SoundEmitter[] soundEmitters;

		[Token(Token = "0x4000031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private FastList<SoundEmitter> playingEmitters;

		[Token(Token = "0x4000032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private FastList<SoundEmitter> nextFreeEmitters;

		[Token(Token = "0x4000033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MixerSnapshot currentSnapshot;

		[Token(Token = "0x4000034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static GameObject soundEmitterParent;

		[Token(Token = "0x4000035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Transform staticListenerPosition;

		[Token(Token = "0x4000036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static bool showPlayingEmitterCount;

		[Token(Token = "0x4000037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private static bool forceShowEmitterCount;

		[Token(Token = "0x4000038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		private static bool soundEnabled;

		[Token(Token = "0x4000039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly AnimationCurve defaultReverbZoneMix;

		[Token(Token = "0x400003A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2B1E4", Offset = "0xC2B1E4")]
		private static Predicate<SoundEmitter> <>f__am$cache0;

		[Token(Token = "0x17000001")]
		public static bool enableSpatialization
		{
			[Token(Token = "0x6000010")]
			[Address(RVA = "0xC7F888", Offset = "0xC7F888", VA = "0xC7F888")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000002")]
		public static AudioManager Instance
		{
			[Token(Token = "0x6000011")]
			[Address(RVA = "0xC7F9C0", Offset = "0xC7F9C0", VA = "0xC7F9C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000003")]
		public static float NearFallOff
		{
			[Token(Token = "0x6000012")]
			[Address(RVA = "0xC7FA4C", Offset = "0xC7FA4C", VA = "0xC7FA4C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000004")]
		public static float FarFallOff
		{
			[Token(Token = "0x6000013")]
			[Address(RVA = "0xC7FAE8", Offset = "0xC7FAE8", VA = "0xC7FAE8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000005")]
		public static AudioMixerGroup EmitterGroup
		{
			[Token(Token = "0x6000014")]
			[Address(RVA = "0xC7FB84", Offset = "0xC7FB84", VA = "0xC7FB84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000006")]
		public static AudioMixerGroup ReservedGroup
		{
			[Token(Token = "0x6000015")]
			[Address(RVA = "0xC7FC20", Offset = "0xC7FC20", VA = "0xC7FC20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000007")]
		public static AudioMixerGroup VoipGroup
		{
			[Token(Token = "0x6000016")]
			[Address(RVA = "0xC7FCBC", Offset = "0xC7FCBC", VA = "0xC7FCBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000008")]
		public static bool SoundEnabled
		{
			[Token(Token = "0x6000021")]
			[Address(RVA = "0xC82E20", Offset = "0xC82E20", VA = "0xC82E20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600000F")]
		[Address(RVA = "0xC7F780", Offset = "0xC7F780", VA = "0xC7F780")]
		public AudioManager()
		{
		}

		[Token(Token = "0x6000017")]
		[Address(RVA = "0xC7FD58", Offset = "0xC7FD58", VA = "0xC7FD58")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000018")]
		[Address(RVA = "0xC80058", Offset = "0xC80058", VA = "0xC80058")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000019")]
		[Address(RVA = "0xC7FD5C", Offset = "0xC7FD5C", VA = "0xC7FD5C")]
		private void Init()
		{
		}

		[Token(Token = "0x600001A")]
		[Address(RVA = "0xC81588", Offset = "0xC81588", VA = "0xC81588")]
		private void Update()
		{
		}

		[Token(Token = "0x600001B")]
		[Address(RVA = "0xC80240", Offset = "0xC80240", VA = "0xC80240")]
		private void RebuildSoundFXCache()
		{
		}

		[Token(Token = "0x600001C")]
		[Address(RVA = "0xC81F98", Offset = "0xC81F98", VA = "0xC81F98")]
		public static SoundFX FindSoundFX(string name, bool rebuildCache = false)
		{
			return null;
		}

		[Token(Token = "0x600001D")]
		[Address(RVA = "0xC8220C", Offset = "0xC8220C", VA = "0xC8220C")]
		private static bool FindAudioManager()
		{
			return default(bool);
		}

		[Token(Token = "0x600001E")]
		[Address(RVA = "0xC82458", Offset = "0xC82458", VA = "0xC82458")]
		public static GameObject GetGameObject()
		{
			return null;
		}

		[Token(Token = "0x600001F")]
		[Address(RVA = "0xC825C4", Offset = "0xC825C4", VA = "0xC825C4")]
		public static string NameMinusGroup(string name)
		{
			return null;
		}

		[Token(Token = "0x6000020")]
		[Address(RVA = "0xC826AC", Offset = "0xC826AC", VA = "0xC826AC")]
		public static string[] GetSoundFXNames(string currentValue, out int currentIdx)
		{
			return null;
		}

		[Token(Token = "0x6000022")]
		[Address(RVA = "0xC80AF4", Offset = "0xC80AF4", VA = "0xC80AF4")]
		private void InitializeSoundSystem()
		{
		}

		[Token(Token = "0x6000023")]
		[Address(RVA = "0xC8158C", Offset = "0xC8158C", VA = "0xC8158C")]
		private void UpdateFreeEmitters()
		{
		}

		[Token(Token = "0x6000024")]
		[Address(RVA = "0xC83198", Offset = "0xC83198", VA = "0xC83198")]
		private string Fmt(int count)
		{
			return null;
		}

		[Token(Token = "0x6000025")]
		[Address(RVA = "0xC833A0", Offset = "0xC833A0", VA = "0xC833A0")]
		private string FmtFree(int count)
		{
			return null;
		}

		[Token(Token = "0x6000026")]
		[Address(RVA = "0xC835A8", Offset = "0xC835A8", VA = "0xC835A8")]
		private void OnPreSceneLoad()
		{
		}

		[Token(Token = "0x6000027")]
		[Address(RVA = "0xC82FE4", Offset = "0xC82FE4", VA = "0xC82FE4")]
		private void ResetFreeEmitters()
		{
		}

		[Token(Token = "0x6000028")]
		[Address(RVA = "0xC8379C", Offset = "0xC8379C", VA = "0xC8379C")]
		public static void FadeOutSoundChannel(int channel, float delaySecs, float fadeTime)
		{
		}

		[Token(Token = "0x6000029")]
		[Address(RVA = "0xC8392C", Offset = "0xC8392C", VA = "0xC8392C")]
		public static bool StopSound(int idx, bool fadeOut = true, bool stopReserved = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600002A")]
		[Address(RVA = "0xC83B90", Offset = "0xC83B90", VA = "0xC83B90")]
		public static void FadeInSound(int idx, float fadeTime, float volume)
		{
		}

		[Token(Token = "0x600002B")]
		[Address(RVA = "0xC7F4F0", Offset = "0xC7F4F0", VA = "0xC7F4F0")]
		public static void FadeInSound(int idx, float fadeTime)
		{
		}

		[Token(Token = "0x600002C")]
		[Address(RVA = "0xC7F698", Offset = "0xC7F698", VA = "0xC7F698")]
		public static void FadeOutSound(int idx, float fadeTime)
		{
		}

		[Token(Token = "0x600002D")]
		[Address(RVA = "0xC83D80", Offset = "0xC83D80", VA = "0xC83D80")]
		public static void StopAllSounds(bool fadeOut, bool stopReserved = false)
		{
		}

		[Token(Token = "0x600002E")]
		[Address(RVA = "0xC83E90", Offset = "0xC83E90", VA = "0xC83E90")]
		public void MuteAllSounds(bool mute, bool muteReserved = false)
		{
		}

		[Token(Token = "0x600002F")]
		[Address(RVA = "0xC83F40", Offset = "0xC83F40", VA = "0xC83F40")]
		public void UnMuteAllSounds(bool unmute, bool unmuteReserved = false)
		{
		}

		[Token(Token = "0x6000030")]
		[Address(RVA = "0xC8404C", Offset = "0xC8404C", VA = "0xC8404C")]
		public static float GetEmitterEndTime(int idx)
		{
			return default(float);
		}

		[Token(Token = "0x6000031")]
		[Address(RVA = "0xC84128", Offset = "0xC84128", VA = "0xC84128")]
		public static float SetEmitterTime(int idx, float time)
		{
			return default(float);
		}

		[Token(Token = "0x6000032")]
		[Address(RVA = "0xC84258", Offset = "0xC84258", VA = "0xC84258")]
		public static int PlaySound(AudioClip clip, float volume, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float pitchVariance = 1f, bool loop = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000033")]
		[Address(RVA = "0xC8533C", Offset = "0xC8533C", VA = "0xC8533C")]
		private static int FindFreeEmitter(EmitterChannel src, SoundPriority priority)
		{
			return default(int);
		}

		[Token(Token = "0x6000034")]
		[Address(RVA = "0xC85E70", Offset = "0xC85E70", VA = "0xC85E70")]
		public static int PlaySound(SoundFX soundFX, EmitterChannel src = EmitterChannel.Any, float delay = 0f)
		{
			return default(int);
		}

		[Token(Token = "0x6000035")]
		[Address(RVA = "0xC860A0", Offset = "0xC860A0", VA = "0xC860A0")]
		public static int PlaySoundAt(Vector3 position, SoundFX soundFX, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float volumeOverride = 1f, float pitchMultiplier = 1f)
		{
			return default(int);
		}

		[Token(Token = "0x6000036")]
		[Address(RVA = "0xC876C0", Offset = "0xC876C0", VA = "0xC876C0")]
		public static int PlayRandomSoundAt(Vector3 position, AudioClip[] clips, float volume, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float pitch = 1f, bool loop = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000037")]
		[Address(RVA = "0xC844A0", Offset = "0xC844A0", VA = "0xC844A0")]
		public static int PlaySoundAt(Vector3 position, AudioClip clip, float volume = 1f, EmitterChannel src = EmitterChannel.Any, float delay = 0f, float pitch = 1f, bool loop = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000038")]
		[Address(RVA = "0xC877E4", Offset = "0xC877E4", VA = "0xC877E4")]
		public static void SetOnFinished(int emitterIdx, Action onFinished)
		{
		}

		[Token(Token = "0x6000039")]
		[Address(RVA = "0xC87930", Offset = "0xC87930", VA = "0xC87930")]
		public static void SetOnFinished(int emitterIdx, Action<object> onFinished, object obj)
		{
		}

		[Token(Token = "0x600003A")]
		[Address(RVA = "0xC87A88", Offset = "0xC87A88", VA = "0xC87A88")]
		public static void AttachSoundToParent(int idx, Transform parent)
		{
		}

		[Token(Token = "0x600003B")]
		[Address(RVA = "0xC88058", Offset = "0xC88058", VA = "0xC88058")]
		public static void DetachSoundFromParent(int idx)
		{
		}

		[Token(Token = "0x600003C")]
		[Address(RVA = "0xC88340", Offset = "0xC88340", VA = "0xC88340")]
		public static void DetachSoundsFromParent(SoundEmitter[] emitters, bool stopSounds = true)
		{
		}

		[Token(Token = "0x600003D")]
		[Address(RVA = "0xC884C0", Offset = "0xC884C0", VA = "0xC884C0")]
		public static void SetEmitterMixerGroup(int idx, AudioMixerGroup mixerGroup)
		{
		}

		[Token(Token = "0x600003E")]
		[Address(RVA = "0xC886FC", Offset = "0xC886FC", VA = "0xC886FC")]
		public static MixerSnapshot GetActiveSnapshot()
		{
			return null;
		}

		[Token(Token = "0x600003F")]
		[Address(RVA = "0xC8882C", Offset = "0xC8882C", VA = "0xC8882C")]
		public static void SetCurrentSnapshot(MixerSnapshot mixerSnapshot)
		{
		}

		[Token(Token = "0x6000040")]
		[Address(RVA = "0xC889E4", Offset = "0xC889E4", VA = "0xC889E4")]
		public static void BlendWithCurrentSnapshot(MixerSnapshot blendSnapshot, float weight, float blendTime = 0f)
		{
		}

		[Token(Token = "0x6000042")]
		[Address(RVA = "0xC8992C", Offset = "0xC8992C", VA = "0xC8992C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2B1F4", Offset = "0xC2B1F4")]
		private static bool <FindFreeEmitter>m__0(SoundEmitter item)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000008")]
	public enum EmitterChannel
	{
		[Token(Token = "0x400003C")]
		None = -1,
		[Token(Token = "0x400003D")]
		Reserved,
		[Token(Token = "0x400003E")]
		Any
	}
	[Serializable]
	[Token(Token = "0x2000009")]
	public class MixerSnapshot
	{
		[Token(Token = "0x400003F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AudioMixerSnapshot snapshot;

		[Token(Token = "0x4000040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float transitionTime;

		[Token(Token = "0x6000043")]
		[Address(RVA = "0xC89AF0", Offset = "0xC89AF0", VA = "0xC89AF0")]
		public MixerSnapshot()
		{
		}
	}
	[Token(Token = "0x200000B")]
	public class MinMaxAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float minDefaultVal;

		[Token(Token = "0x4000045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float maxDefaultVal;

		[Token(Token = "0x4000046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float min;

		[Token(Token = "0x4000047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float max;

		[Token(Token = "0x6000044")]
		[Address(RVA = "0xC89AA4", Offset = "0xC89AA4", VA = "0xC89AA4")]
		public MinMaxAttribute(float minDefaultVal, float maxDefaultVal, float min, float max)
		{
		}
	}
	[Token(Token = "0x200000C")]
	public class SoundEmitter : MonoBehaviour
	{
		[Token(Token = "0x200000D")]
		public enum FadeState
		{
			[Token(Token = "0x4000058")]
			Null,
			[Token(Token = "0x4000059")]
			FadingIn,
			[Token(Token = "0x400005A")]
			FadingOut,
			[Token(Token = "0x400005B")]
			Ducking
		}

		[Token(Token = "0x2000404")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2B2F4", Offset = "0xC2B2F4")]
		private sealed class <DelayedSyncTo>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400168F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal SoundEmitter other;

			[Token(Token = "0x4001690")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal float fadeTime;

			[Token(Token = "0x4001691")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal float toVolume;

			[Token(Token = "0x4001692")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal SoundEmitter $this;

			[Token(Token = "0x4001693")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal object $current;

			[Token(Token = "0x4001694")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal bool $disposing;

			[Token(Token = "0x4001695")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int $PC;

			[Token(Token = "0x1700046E")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60019F2")]
				[Address(RVA = "0xC8A7E8", Offset = "0xC8A7E8", VA = "0xC8A7E8", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700046F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60019F3")]
				[Address(RVA = "0xC8A7F0", Offset = "0xC8A7F0", VA = "0xC8A7F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60019F0")]
			[Address(RVA = "0xC8A450", Offset = "0xC8A450", VA = "0xC8A450")]
			[DebuggerHidden]
			public <DelayedSyncTo>c__Iterator0()
			{
			}

			[Token(Token = "0x60019F1")]
			[Address(RVA = "0xC8A660", Offset = "0xC8A660", VA = "0xC8A660", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60019F4")]
			[Address(RVA = "0xC8A7F8", Offset = "0xC8A7F8", VA = "0xC8A7F8", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60019F5")]
			[Address(RVA = "0xC8A80C", Offset = "0xC8A80C", VA = "0xC8A80C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000405")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2B354", Offset = "0xC2B354")]
		private sealed class <FadeSoundChannelTo>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001696")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <start>__0;

			[Token(Token = "0x4001697")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal float toVolume;

			[Token(Token = "0x4001698")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal float <end>__0;

			[Token(Token = "0x4001699")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal float <startTime>__0;

			[Token(Token = "0x400169A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal float <elapsedTime>__0;

			[Token(Token = "0x400169B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal float fadeTime;

			[Token(Token = "0x400169C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal float <t>__1;

			[Token(Token = "0x400169D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal SoundEmitter $this;

			[Token(Token = "0x400169E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal object $current;

			[Token(Token = "0x400169F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal bool $disposing;

			[Token(Token = "0x40016A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal int $PC;

			[Token(Token = "0x17000470")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60019F8")]
				[Address(RVA = "0xC8AEC8", Offset = "0xC8AEC8", VA = "0xC8AEC8", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000471")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60019F9")]
				[Address(RVA = "0xC8AED0", Offset = "0xC8AED0", VA = "0xC8AED0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60019F6")]
			[Address(RVA = "0xC8A650", Offset = "0xC8A650", VA = "0xC8A650")]
			[DebuggerHidden]
			public <FadeSoundChannelTo>c__Iterator1()
			{
			}

			[Token(Token = "0x60019F7")]
			[Address(RVA = "0xC8ACC0", Offset = "0xC8ACC0", VA = "0xC8ACC0", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60019FA")]
			[Address(RVA = "0xC8AED8", Offset = "0xC8AED8", VA = "0xC8AED8", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60019FB")]
			[Address(RVA = "0xC8AEEC", Offset = "0xC8AEEC", VA = "0xC8AEEC", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000406")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2B3B4", Offset = "0xC2B3B4")]
		private sealed class <FadeSoundChannel>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40016A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float delaySecs;

			[Token(Token = "0x40016A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal Fade fadeType;

			[Token(Token = "0x40016A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal float defaultVolume;

			[Token(Token = "0x40016A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal float <start>__0;

			[Token(Token = "0x40016A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal float <end>__0;

			[Token(Token = "0x40016A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal bool <restartPlay>__0;

			[Token(Token = "0x40016A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal float <startTime>__0;

			[Token(Token = "0x40016A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal float <elapsedTime>__0;

			[Token(Token = "0x40016A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal float fadeTime;

			[Token(Token = "0x40016AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal float <t>__1;

			[Token(Token = "0x40016AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal SoundEmitter $this;

			[Token(Token = "0x40016AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal object $current;

			[Token(Token = "0x40016AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal bool $disposing;

			[Token(Token = "0x40016AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal int $PC;

			[Token(Token = "0x17000472")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60019FE")]
				[Address(RVA = "0xC8AC18", Offset = "0xC8AC18", VA = "0xC8AC18", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000473")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60019FF")]
				[Address(RVA = "0xC8AC20", Offset = "0xC8AC20", VA = "0xC8AC20", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60019FC")]
			[Address(RVA = "0xC8A658", Offset = "0xC8A658", VA = "0xC8A658")]
			[DebuggerHidden]
			public <FadeSoundChannel>c__Iterator2()
			{
			}

			[Token(Token = "0x60019FD")]
			[Address(RVA = "0xC8A890", Offset = "0xC8A890", VA = "0xC8A890", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A00")]
			[Address(RVA = "0xC8AC28", Offset = "0xC8AC28", VA = "0xC8AC28", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001A01")]
			[Address(RVA = "0xC8AC3C", Offset = "0xC8AC3C", VA = "0xC8AC3C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4000048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EmitterChannel channel;

		[Token(Token = "0x4000049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool disableSpatialization;

		[Token(Token = "0x400004A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private FadeState state;

		[NonSerialized]
		[Token(Token = "0x400004B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public AudioSource audioSource;

		[NonSerialized]
		[Token(Token = "0x400004C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public SoundPriority priority;

		[NonSerialized]
		[Token(Token = "0x400004D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public ONSPAudioSource osp;

		[NonSerialized]
		[Token(Token = "0x400004E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public float endPlayTime;

		[Token(Token = "0x400004F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform lastParentTransform;

		[NonSerialized]
		[Token(Token = "0x4000050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		public float defaultVolume;

		[NonSerialized]
		[Token(Token = "0x4000051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public Transform defaultParent;

		[NonSerialized]
		[Token(Token = "0x4000052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public int originalIdx;

		[NonSerialized]
		[Token(Token = "0x4000053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public Action onFinished;

		[NonSerialized]
		[Token(Token = "0x4000054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[HideInInspector]
		public Action<object> onFinishedObject;

		[NonSerialized]
		[Token(Token = "0x4000055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public object onFinishedParam;

		[NonSerialized]
		[Token(Token = "0x4000056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		public SoundGroup playingSoundGroup;

		[Token(Token = "0x17000009")]
		public float volume
		{
			[Token(Token = "0x6000046")]
			[Address(RVA = "0xC87698", Offset = "0xC87698", VA = "0xC87698")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000047")]
			[Address(RVA = "0xC89BB0", Offset = "0xC89BB0", VA = "0xC89BB0")]
			set
			{
			}
		}

		[Token(Token = "0x1700000A")]
		public float pitch
		{
			[Token(Token = "0x6000048")]
			[Address(RVA = "0xC89BE0", Offset = "0xC89BE0", VA = "0xC89BE0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000049")]
			[Address(RVA = "0xC89C08", Offset = "0xC89C08", VA = "0xC89C08")]
			set
			{
			}
		}

		[Token(Token = "0x1700000B")]
		public AudioClip clip
		{
			[Token(Token = "0x600004A")]
			[Address(RVA = "0xC89C38", Offset = "0xC89C38", VA = "0xC89C38")]
			get
			{
				return null;
			}
			[Token(Token = "0x600004B")]
			[Address(RVA = "0xC89C60", Offset = "0xC89C60", VA = "0xC89C60")]
			set
			{
			}
		}

		[Token(Token = "0x1700000C")]
		public float time
		{
			[Token(Token = "0x600004C")]
			[Address(RVA = "0xC89C90", Offset = "0xC89C90", VA = "0xC89C90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600004D")]
			[Address(RVA = "0xC84228", Offset = "0xC84228", VA = "0xC84228")]
			set
			{
			}
		}

		[Token(Token = "0x1700000D")]
		public float length
		{
			[Token(Token = "0x600004E")]
			[Address(RVA = "0xC89CB8", Offset = "0xC89CB8", VA = "0xC89CB8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700000E")]
		public bool loop
		{
			[Token(Token = "0x600004F")]
			[Address(RVA = "0xC89DA8", Offset = "0xC89DA8", VA = "0xC89DA8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000050")]
			[Address(RVA = "0xC89DD0", Offset = "0xC89DD0", VA = "0xC89DD0")]
			set
			{
			}
		}

		[Token(Token = "0x1700000F")]
		public bool mute
		{
			[Token(Token = "0x6000051")]
			[Address(RVA = "0xC89E00", Offset = "0xC89E00", VA = "0xC89E00")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000052")]
			[Address(RVA = "0xC89E28", Offset = "0xC89E28", VA = "0xC89E28")]
			set
			{
			}
		}

		[Token(Token = "0x17000010")]
		public AudioVelocityUpdateMode velocityUpdateMode
		{
			[Token(Token = "0x6000053")]
			[Address(RVA = "0xC89E58", Offset = "0xC89E58", VA = "0xC89E58")]
			get
			{
				return default(AudioVelocityUpdateMode);
			}
			[Token(Token = "0x6000054")]
			[Address(RVA = "0xC89E80", Offset = "0xC89E80", VA = "0xC89E80")]
			set
			{
			}
		}

		[Token(Token = "0x17000011")]
		public bool isPlaying
		{
			[Token(Token = "0x6000055")]
			[Address(RVA = "0xC89EB0", Offset = "0xC89EB0", VA = "0xC89EB0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000045")]
		[Address(RVA = "0xC89B98", Offset = "0xC89B98", VA = "0xC89B98")]
		public SoundEmitter()
		{
		}

		[Token(Token = "0x6000056")]
		[Address(RVA = "0xC89ED8", Offset = "0xC89ED8", VA = "0xC89ED8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000057")]
		[Address(RVA = "0xC87684", Offset = "0xC87684", VA = "0xC87684")]
		public void SetPlayingSoundGroup(SoundGroup soundGroup)
		{
		}

		[Token(Token = "0x6000058")]
		[Address(RVA = "0xC87928", Offset = "0xC87928", VA = "0xC87928")]
		public void SetOnFinished(Action onFinished)
		{
		}

		[Token(Token = "0x6000059")]
		[Address(RVA = "0xC87A7C", Offset = "0xC87A7C", VA = "0xC87A7C")]
		public void SetOnFinished(Action<object> onFinished, object obj)
		{
		}

		[Token(Token = "0x600005A")]
		[Address(RVA = "0xC82EB4", Offset = "0xC82EB4", VA = "0xC82EB4")]
		public void SetChannel(int _channel)
		{
		}

		[Token(Token = "0x600005B")]
		[Address(RVA = "0xC82EAC", Offset = "0xC82EAC", VA = "0xC82EAC")]
		public void SetDefaultParent(Transform parent)
		{
		}

		[Token(Token = "0x600005C")]
		[Address(RVA = "0xC88640", Offset = "0xC88640", VA = "0xC88640")]
		public void SetAudioMixer(AudioMixerGroup _mixer)
		{
		}

		[Token(Token = "0x600005D")]
		[Address(RVA = "0xC83108", Offset = "0xC83108", VA = "0xC83108")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x600005E")]
		[Address(RVA = "0xC8A190", Offset = "0xC8A190", VA = "0xC8A190")]
		public void Play()
		{
		}

		[Token(Token = "0x600005F")]
		[Address(RVA = "0xC8A1F8", Offset = "0xC8A1F8", VA = "0xC8A1F8")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000060")]
		[Address(RVA = "0xC82EBC", Offset = "0xC82EBC", VA = "0xC82EBC")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000061")]
		[Address(RVA = "0xC8A2E8", Offset = "0xC8A2E8", VA = "0xC8A2E8")]
		private int GetSampleTime()
		{
			return default(int);
		}

		[Token(Token = "0x6000062")]
		[Address(RVA = "0xC87F18", Offset = "0xC87F18", VA = "0xC87F18")]
		public void ParentTo(Transform parent)
		{
		}

		[Token(Token = "0x6000063")]
		[Address(RVA = "0xC88248", Offset = "0xC88248", VA = "0xC88248")]
		public void DetachFromParent()
		{
		}

		[Token(Token = "0x6000064")]
		[Address(RVA = "0xC83758", Offset = "0xC83758", VA = "0xC83758")]
		public void ResetParent(Transform parent)
		{
		}

		[Token(Token = "0x6000065")]
		[Address(RVA = "0xC8A354", Offset = "0xC8A354", VA = "0xC8A354")]
		public void SyncTo(SoundEmitter other, float fadeTime, float toVolume)
		{
		}

		[Token(Token = "0x6000066")]
		[Address(RVA = "0xC8A380", Offset = "0xC8A380", VA = "0xC8A380")]
		[DebuggerHidden]
		private IEnumerator DelayedSyncTo(SoundEmitter other, float fadeTime, float toVolume)
		{
			return null;
		}

		[Token(Token = "0x6000067")]
		[Address(RVA = "0xC8A458", Offset = "0xC8A458", VA = "0xC8A458")]
		public void FadeTo(float fadeTime, float toVolume)
		{
		}

		[Token(Token = "0x6000068")]
		[Address(RVA = "0xC83C80", Offset = "0xC83C80", VA = "0xC83C80")]
		public void FadeIn(float fadeTime, float defaultVolume)
		{
		}

		[Token(Token = "0x6000069")]
		[Address(RVA = "0xC83D04", Offset = "0xC83D04", VA = "0xC83D04")]
		public void FadeIn(float fadeTime)
		{
		}

		[Token(Token = "0x600006A")]
		[Address(RVA = "0xC83AF4", Offset = "0xC83AF4", VA = "0xC83AF4")]
		public void FadeOut(float fadeTime)
		{
		}

		[Token(Token = "0x600006B")]
		[Address(RVA = "0xC8388C", Offset = "0xC8388C", VA = "0xC8388C")]
		public void FadeOutDelayed(float delayedSecs, float fadeTime)
		{
		}

		[Token(Token = "0x600006C")]
		[Address(RVA = "0xC8A4B0", Offset = "0xC8A4B0", VA = "0xC8A4B0")]
		[DebuggerHidden]
		private IEnumerator FadeSoundChannelTo(float fadeTime, float toVolume)
		{
			return null;
		}

		[Token(Token = "0x600006D")]
		[Address(RVA = "0xC8A56C", Offset = "0xC8A56C", VA = "0xC8A56C")]
		[DebuggerHidden]
		private IEnumerator FadeSoundChannel(float delaySecs, float fadeTime, Fade fadeType, float defaultVolume)
		{
			return null;
		}
	}
	[Token(Token = "0x200000E")]
	public enum SoundFXNext
	{
		[Token(Token = "0x400005D")]
		Random,
		[Token(Token = "0x400005E")]
		Sequential
	}
	[Token(Token = "0x200000F")]
	public enum FreqHint
	{
		[Token(Token = "0x4000060")]
		None,
		[Token(Token = "0x4000061")]
		Wide,
		[Token(Token = "0x4000062")]
		Narrow
	}
	[Token(Token = "0x2000010")]
	public enum SoundPriority
	{
		[Token(Token = "0x4000064")]
		VeryLow = -2,
		[Token(Token = "0x4000065")]
		Low,
		[Token(Token = "0x4000066")]
		Default,
		[Token(Token = "0x4000067")]
		High,
		[Token(Token = "0x4000068")]
		VeryHigh
	}
	[Serializable]
	[Token(Token = "0x2000011")]
	public class OSPProps
	{
		[Token(Token = "0x4000069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B414", Offset = "0xC2B414")]
		public bool enableSpatialization;

		[Token(Token = "0x400006A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B448", Offset = "0xC2B448")]
		public bool useFastOverride;

		[Token(Token = "0x400006B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B47C", Offset = "0xC2B47C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xC2B47C", Offset = "0xC2B47C")]
		public float gain;

		[Token(Token = "0x400006C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B4D0", Offset = "0xC2B4D0")]
		public bool enableInvSquare;

		[Token(Token = "0x400006D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B504", Offset = "0xC2B504")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xC2B504", Offset = "0xC2B504")]
		public float volumetric;

		[Token(Token = "0x400006E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B558", Offset = "0xC2B558")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0xC2B558", Offset = "0xC2B558")]
		public Vector2 invSquareFalloff;

		[Token(Token = "0x600006E")]
		[Address(RVA = "0xC89B00", Offset = "0xC89B00", VA = "0xC89B00")]
		public OSPProps()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000012")]
	public class SoundFX
	{
		[Token(Token = "0x400006F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B5C4", Offset = "0xC2B5C4")]
		public string name;

		[Token(Token = "0x4000070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B5F8", Offset = "0xC2B5F8")]
		public SoundFXNext playback;

		[Token(Token = "0x4000071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B62C", Offset = "0xC2B62C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xC2B62C", Offset = "0xC2B62C")]
		public float volume;

		[Token(Token = "0x4000072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B67C", Offset = "0xC2B67C")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0xC2B67C", Offset = "0xC2B67C")]
		public Vector2 pitchVariance;

		[Token(Token = "0x4000073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B6E0", Offset = "0xC2B6E0")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0xC2B6E0", Offset = "0xC2B6E0")]
		public Vector2 falloffDistance;

		[Token(Token = "0x4000074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B74C", Offset = "0xC2B74C")]
		public AudioRolloffMode falloffCurve;

		[Token(Token = "0x4000075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B780", Offset = "0xC2B780")]
		public AnimationCurve volumeFalloffCurve;

		[Token(Token = "0x4000076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B7B4", Offset = "0xC2B7B4")]
		public AnimationCurve reverbZoneMix;

		[Token(Token = "0x4000077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B7E8", Offset = "0xC2B7E8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xC2B7E8", Offset = "0xC2B7E8")]
		public float spread;

		[Token(Token = "0x4000078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B83C", Offset = "0xC2B83C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xC2B83C", Offset = "0xC2B83C")]
		public float pctChanceToPlay;

		[Token(Token = "0x4000079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B88C", Offset = "0xC2B88C")]
		public SoundPriority priority;

		[Token(Token = "0x400007A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B8C0", Offset = "0xC2B8C0")]
		[AttributeAttribute(Name = "MinMaxAttribute", RVA = "0xC2B8C0", Offset = "0xC2B8C0")]
		public Vector2 delay;

		[Token(Token = "0x400007B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B924", Offset = "0xC2B924")]
		public bool looping;

		[Token(Token = "0x400007C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public OSPProps ospProps;

		[Token(Token = "0x400007D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2B958", Offset = "0xC2B958")]
		public AudioClip[] soundClips;

		[Token(Token = "0x400007E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool visibilityToggle;

		[NonSerialized]
		[Token(Token = "0x400007F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private SoundGroup soundGroup;

		[Token(Token = "0x4000080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int lastIdx;

		[Token(Token = "0x4000081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int playingIdx;

		[Token(Token = "0x17000012")]
		public int Length
		{
			[Token(Token = "0x6000070")]
			[Address(RVA = "0xC8AF70", Offset = "0xC8AF70", VA = "0xC8AF70")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000013")]
		public bool IsValid
		{
			[Token(Token = "0x6000071")]
			[Address(RVA = "0xC8AF90", Offset = "0xC8AF90", VA = "0xC8AF90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000014")]
		public SoundGroup Group
		{
			[Token(Token = "0x6000072")]
			[Address(RVA = "0xC8767C", Offset = "0xC8767C", VA = "0xC8767C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000073")]
			[Address(RVA = "0xC81F90", Offset = "0xC81F90", VA = "0xC81F90")]
			set
			{
			}
		}

		[Token(Token = "0x17000015")]
		public float MaxFalloffDistSquared
		{
			[Token(Token = "0x6000074")]
			[Address(RVA = "0xC87550", Offset = "0xC87550", VA = "0xC87550")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000016")]
		public float GroupVolumeOverride
		{
			[Token(Token = "0x6000075")]
			[Address(RVA = "0xC8758C", Offset = "0xC8758C", VA = "0xC8758C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600006F")]
		[Address(RVA = "0xC892E8", Offset = "0xC892E8", VA = "0xC892E8")]
		public SoundFX()
		{
		}

		[Token(Token = "0x6000076")]
		[Address(RVA = "0xC87428", Offset = "0xC87428", VA = "0xC87428")]
		public AudioClip GetClip()
		{
			return null;
		}

		[Token(Token = "0x6000077")]
		[Address(RVA = "0xC875BC", Offset = "0xC875BC", VA = "0xC875BC")]
		public AudioMixerGroup GetMixerGroup(AudioMixerGroup defaultMixerGroup)
		{
			return null;
		}

		[Token(Token = "0x6000078")]
		[Address(RVA = "0xC87560", Offset = "0xC87560", VA = "0xC87560")]
		public bool ReachedGroupPlayLimit()
		{
			return default(bool);
		}

		[Token(Token = "0x6000079")]
		[Address(RVA = "0xC8B090", Offset = "0xC8B090", VA = "0xC8B090")]
		public float GetClipLength(int idx)
		{
			return default(float);
		}

		[Token(Token = "0x600007A")]
		[Address(RVA = "0xC875A8", Offset = "0xC875A8", VA = "0xC875A8")]
		public float GetPitch()
		{
			return default(float);
		}

		[Token(Token = "0x600007B")]
		[Address(RVA = "0xC8B1E8", Offset = "0xC8B1E8", VA = "0xC8B1E8")]
		public int PlaySound(float delaySecs = 0f)
		{
			return default(int);
		}

		[Token(Token = "0x600007C")]
		[Address(RVA = "0xC8B2FC", Offset = "0xC8B2FC", VA = "0xC8B2FC")]
		public int PlaySoundAt(Vector3 pos, float delaySecs = 0f, float volumeOverride = 1f, float pitchMultiplier = 1f)
		{
			return default(int);
		}

		[Token(Token = "0x600007D")]
		[Address(RVA = "0xC8B448", Offset = "0xC8B448", VA = "0xC8B448")]
		public void SetOnFinished(Action onFinished)
		{
		}

		[Token(Token = "0x600007E")]
		[Address(RVA = "0xC8B4DC", Offset = "0xC8B4DC", VA = "0xC8B4DC")]
		public void SetOnFinished(Action<object> onFinished, object obj)
		{
		}

		[Token(Token = "0x600007F")]
		[Address(RVA = "0xC8B580", Offset = "0xC8B580", VA = "0xC8B580")]
		public bool StopSound()
		{
			return default(bool);
		}

		[Token(Token = "0x6000080")]
		[Address(RVA = "0xC8B62C", Offset = "0xC8B62C", VA = "0xC8B62C")]
		public void AttachToParent(Transform parent)
		{
		}

		[Token(Token = "0x6000081")]
		[Address(RVA = "0xC8B6C0", Offset = "0xC8B6C0", VA = "0xC8B6C0")]
		public void DetachFromParent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000013")]
	public class SoundFXRef
	{
		[Token(Token = "0x4000082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string soundFXName;

		[Token(Token = "0x4000083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private bool initialized;

		[Token(Token = "0x4000084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SoundFX soundFXCached;

		[Token(Token = "0x17000017")]
		public SoundFX soundFX
		{
			[Token(Token = "0x6000083")]
			[Address(RVA = "0xC8B7EC", Offset = "0xC8B7EC", VA = "0xC8B7EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000018")]
		public string name
		{
			[Token(Token = "0x6000084")]
			[Address(RVA = "0xC8B92C", Offset = "0xC8B92C", VA = "0xC8B92C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000085")]
			[Address(RVA = "0xC8B934", Offset = "0xC8B934", VA = "0xC8B934")]
			set
			{
			}
		}

		[Token(Token = "0x17000019")]
		public int Length
		{
			[Token(Token = "0x6000087")]
			[Address(RVA = "0xC8B93C", Offset = "0xC8B93C", VA = "0xC8B93C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700001A")]
		public bool IsValid
		{
			[Token(Token = "0x6000088")]
			[Address(RVA = "0xC8B980", Offset = "0xC8B980", VA = "0xC8B980")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000082")]
		[Address(RVA = "0xC8B74C", Offset = "0xC8B74C", VA = "0xC8B74C")]
		public SoundFXRef()
		{
		}

		[Token(Token = "0x6000086")]
		[Address(RVA = "0xC8B810", Offset = "0xC8B810", VA = "0xC8B810")]
		private void Init()
		{
		}

		[Token(Token = "0x6000089")]
		[Address(RVA = "0xC8B9B8", Offset = "0xC8B9B8", VA = "0xC8B9B8")]
		public AudioClip GetClip()
		{
			return null;
		}

		[Token(Token = "0x600008A")]
		[Address(RVA = "0xC8B9F0", Offset = "0xC8B9F0", VA = "0xC8B9F0")]
		public float GetClipLength(int idx)
		{
			return default(float);
		}

		[Token(Token = "0x600008B")]
		[Address(RVA = "0xC8BA30", Offset = "0xC8BA30", VA = "0xC8BA30")]
		public int PlaySound(float delaySecs = 0f)
		{
			return default(int);
		}

		[Token(Token = "0x600008C")]
		[Address(RVA = "0xC7F478", Offset = "0xC7F478", VA = "0xC7F478")]
		public int PlaySoundAt(Vector3 pos, float delaySecs = 0f, float volume = 1f, float pitchMultiplier = 1f)
		{
			return default(int);
		}

		[Token(Token = "0x600008D")]
		[Address(RVA = "0xC8BA70", Offset = "0xC8BA70", VA = "0xC8BA70")]
		public void SetOnFinished(Action onFinished)
		{
		}

		[Token(Token = "0x600008E")]
		[Address(RVA = "0xC8BAB0", Offset = "0xC8BAB0", VA = "0xC8BAB0")]
		public void SetOnFinished(Action<object> onFinished, object obj)
		{
		}

		[Token(Token = "0x600008F")]
		[Address(RVA = "0xC8BAF8", Offset = "0xC8BAF8", VA = "0xC8BAF8")]
		public bool StopSound()
		{
			return default(bool);
		}

		[Token(Token = "0x6000090")]
		[Address(RVA = "0xC8BB30", Offset = "0xC8BB30", VA = "0xC8BB30")]
		public void AttachToParent(Transform parent)
		{
		}

		[Token(Token = "0x6000091")]
		[Address(RVA = "0xC8BB70", Offset = "0xC8BB70", VA = "0xC8BB70")]
		public void DetachFromParent()
		{
		}
	}
}
[Token(Token = "0x2000014")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xC2B98C", Offset = "0xC2B98C")]
public class FastList<T>
{
	[Token(Token = "0x2000015")]
	public delegate int CompareFunc(T left, T right);

	[Token(Token = "0x2000407")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2B9D0", Offset = "0xC2B9D0")]
	private sealed class <GetEnumerator>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<T>
	{
		[Token(Token = "0x40016AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int <i>__1;

		[Token(Token = "0x40016B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal FastList<T> $this;

		[Token(Token = "0x40016B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal T $current;

		[Token(Token = "0x40016B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal bool $disposing;

		[Token(Token = "0x40016B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int $PC;

		[Token(Token = "0x17000474")]
		private T System.Collections.Generic.IEnumerator<T>.Current
		{
			[Token(Token = "0x6001A04")]
			[DebuggerHidden]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x17000475")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A05")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A02")]
		[DebuggerHidden]
		public <GetEnumerator>c__Iterator0()
		{
		}

		[Token(Token = "0x6001A03")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A06")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A07")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public T[] array;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int size;

	[Token(Token = "0x1700001B")]
	public int Count
	{
		[Token(Token = "0x6000094")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000095")]
		set
		{
		}
	}

	[Token(Token = "0x1700001C")]
	public T Item
	{
		[Token(Token = "0x6000096")]
		get
		{
			return (T)null;
		}
		[Token(Token = "0x6000097")]
		set
		{
		}
	}

	[Token(Token = "0x6000092")]
	public FastList()
	{
	}

	[Token(Token = "0x6000093")]
	public FastList(int size)
	{
	}

	[Token(Token = "0x6000098")]
	public void Add(T item)
	{
	}

	[Token(Token = "0x6000099")]
	public void AddUnique(T item)
	{
	}

	[Token(Token = "0x600009A")]
	public void AddRange(IEnumerable<T> items)
	{
	}

	[Token(Token = "0x600009B")]
	public void Insert(int index, T item)
	{
	}

	[Token(Token = "0x600009C")]
	public bool Remove(T item)
	{
		return default(bool);
	}

	[Token(Token = "0x600009D")]
	public void RemoveAt(int index)
	{
	}

	[Token(Token = "0x600009E")]
	public bool RemoveFast(T item)
	{
		return default(bool);
	}

	[Token(Token = "0x600009F")]
	public void RemoveAtFast(int index)
	{
	}

	[Token(Token = "0x60000A0")]
	public bool Contains(T item)
	{
		return default(bool);
	}

	[Token(Token = "0x60000A1")]
	public int IndexOf(T item)
	{
		return default(int);
	}

	[Token(Token = "0x60000A2")]
	public T Pop()
	{
		return (T)null;
	}

	[Token(Token = "0x60000A3")]
	public T[] ToArray()
	{
		return null;
	}

	[Token(Token = "0x60000A4")]
	public void Sort(CompareFunc comparer)
	{
	}

	[Token(Token = "0x60000A5")]
	public void InsertionSort(CompareFunc comparer)
	{
	}

	[Token(Token = "0x60000A6")]
	[DebuggerHidden]
	public IEnumerator<T> GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x60000A7")]
	public T Find(Predicate<T> match)
	{
		return (T)null;
	}

	[Token(Token = "0x60000A8")]
	private void Allocate()
	{
	}

	[Token(Token = "0x60000A9")]
	private void Trim()
	{
	}

	[Token(Token = "0x60000AA")]
	public void Clear()
	{
	}

	[Token(Token = "0x60000AB")]
	public void Release()
	{
	}
}
[Token(Token = "0x2000016")]
public class InspectorNoteAttribute : PropertyAttribute
{
	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public readonly string header;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public readonly string message;

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xC464F8", Offset = "0xC464F8", VA = "0xC464F8")]
	public InspectorNoteAttribute(string header, string message = "")
	{
	}
}
[Token(Token = "0x2000017")]
public class InspectorCommentAttribute : PropertyAttribute
{
	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public readonly string message;

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xC464D8", Offset = "0xC464D8", VA = "0xC464D8")]
	public InspectorCommentAttribute(string message = "")
	{
	}
}
namespace Oculus.Platform.Samples.EntitlementCheck
{
	[Token(Token = "0x2000018")]
	public class EntitlementCheck : MonoBehaviour
	{
		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool exitAppOnFailure;

		[Token(Token = "0x14000001")]
		public static event Action UserFailedEntitlementCheck
		{
			[Token(Token = "0x60000B3")]
			[Address(RVA = "0x20E938", Offset = "0x20E938", VA = "0x20E938")]
			add
			{
			}
			[Token(Token = "0x60000B4")]
			[Address(RVA = "0x20EA50", Offset = "0x20EA50", VA = "0x20EA50")]
			remove
			{
			}
		}

		[Token(Token = "0x14000002")]
		public static event Action UserPassedEntitlementCheck
		{
			[Token(Token = "0x60000B5")]
			[Address(RVA = "0x20EB68", Offset = "0x20EB68", VA = "0x20EB68")]
			add
			{
			}
			[Token(Token = "0x60000B6")]
			[Address(RVA = "0x20EC80", Offset = "0x20EC80", VA = "0x20EC80")]
			remove
			{
			}
		}

		[Token(Token = "0x60000B2")]
		[Address(RVA = "0x20E928", Offset = "0x20E928", VA = "0x20E928")]
		public EntitlementCheck()
		{
		}

		[Token(Token = "0x60000B7")]
		[Address(RVA = "0x20ED98", Offset = "0x20ED98", VA = "0x20ED98")]
		private void Start()
		{
		}

		[Token(Token = "0x60000B8")]
		[Address(RVA = "0x20F250", Offset = "0x20F250", VA = "0x20F250")]
		private void EntitlementCheckCallback(Message msg)
		{
		}

		[Token(Token = "0x60000B9")]
		[Address(RVA = "0x20EF38", Offset = "0x20EF38", VA = "0x20EF38")]
		private void HandleEntitlementCheckResult(bool result)
		{
		}
	}
}
namespace Oculus.Platform.Samples.NetChat
{
	[Token(Token = "0x2000019")]
	internal enum states
	{
		[Token(Token = "0x400008E")]
		NOT_INIT,
		[Token(Token = "0x400008F")]
		IDLE,
		[Token(Token = "0x4000090")]
		REQUEST_FIND,
		[Token(Token = "0x4000091")]
		FINDING_ROOM,
		[Token(Token = "0x4000092")]
		REQUEST_CREATE,
		[Token(Token = "0x4000093")]
		REQUEST_JOIN,
		[Token(Token = "0x4000094")]
		REQUEST_LEAVE,
		[Token(Token = "0x4000095")]
		IN_EMPTY_ROOM,
		[Token(Token = "0x4000096")]
		IN_FULL_ROOM
	}
	[Token(Token = "0x200001A")]
	public static class Constants
	{
		[Token(Token = "0x4000097")]
		public const int BUFFER_SIZE = 512;

		[Token(Token = "0x4000098")]
		public const string BOUT_POOL = "bout_pool";

		[Token(Token = "0x4000099")]
		public const string FILTER_POOL = "filter_pool";
	}
	[Token(Token = "0x200001B")]
	public class chatPacket
	{
		[Token(Token = "0x400009A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2BA98", Offset = "0xC2BA98")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xC2BA98", Offset = "0xC2BA98")]
		private int <packetID>k__BackingField;

		[Token(Token = "0x400009B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2BACC", Offset = "0xC2BACC")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xC2BACC", Offset = "0xC2BACC")]
		private string <textString>k__BackingField;

		[Token(Token = "0x1700001D")]
		public int packetID
		{
			[Token(Token = "0x60000BB")]
			[Address(RVA = "0x20F290", Offset = "0x20F290", VA = "0x20F290")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2BB00", Offset = "0xC2BB00")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60000BC")]
			[Address(RVA = "0x20F298", Offset = "0x20F298", VA = "0x20F298")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2BB10", Offset = "0xC2BB10")]
			set
			{
			}
		}

		[Token(Token = "0x1700001E")]
		public string textString
		{
			[Token(Token = "0x60000BD")]
			[Address(RVA = "0x20F2A0", Offset = "0x20F2A0", VA = "0x20F2A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2BB20", Offset = "0xC2BB20")]
			get
			{
				return null;
			}
			[Token(Token = "0x60000BE")]
			[Address(RVA = "0x20F2A8", Offset = "0x20F2A8", VA = "0x20F2A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2BB30", Offset = "0xC2BB30")]
			set
			{
			}
		}

		[Token(Token = "0x60000BA")]
		[Address(RVA = "0x20F288", Offset = "0x20F288", VA = "0x20F288")]
		public chatPacket()
		{
		}

		[Token(Token = "0x60000BF")]
		[Address(RVA = "0x20F2B0", Offset = "0x20F2B0", VA = "0x20F2B0")]
		public byte[] Serialize()
		{
			return null;
		}

		[Token(Token = "0x60000C0")]
		[Address(RVA = "0x20F5E8", Offset = "0x20F5E8", VA = "0x20F5E8")]
		public static chatPacket Deserialize(byte[] data)
		{
			return null;
		}
	}
	[Token(Token = "0x200001C")]
	public class DataEntry : MonoBehaviour
	{
		[Token(Token = "0x400009C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Text dataOutput;

		[Token(Token = "0x400009D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private states currentState;

		[Token(Token = "0x400009E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private User localUser;

		[Token(Token = "0x400009F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private User remoteUser;

		[Token(Token = "0x40000A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Room currentRoom;

		[Token(Token = "0x40000A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int lastPacketID;

		[Token(Token = "0x40000A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool ratedMatchStarted;

		[Token(Token = "0x40000A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2BB40", Offset = "0xC2BB40")]
		private static Dictionary<string, int> <>f__switch$map0;

		[Token(Token = "0x60000C1")]
		[Address(RVA = "0x20F920", Offset = "0x20F920", VA = "0x20F920")]
		public DataEntry()
		{
		}

		[Token(Token = "0x60000C2")]
		[Address(RVA = "0x20F928", Offset = "0x20F928", VA = "0x20F928")]
		private void Start()
		{
		}

		[Token(Token = "0x60000C3")]
		[Address(RVA = "0x20FAE4", Offset = "0x20FAE4", VA = "0x20FAE4")]
		private void Update()
		{
		}

		[Token(Token = "0x60000C4")]
		[Address(RVA = "0x20FCA0", Offset = "0x20FCA0", VA = "0x20FCA0")]
		private void SubmitCommand(string command)
		{
		}

		[Token(Token = "0x60000C5")]
		[Address(RVA = "0x211898", Offset = "0x211898", VA = "0x211898")]
		private void printOutputLine(string newLine)
		{
		}

		[Token(Token = "0x60000C6")]
		[Address(RVA = "0x20FA40", Offset = "0x20FA40", VA = "0x20FA40")]
		private void checkEntitlement()
		{
		}

		[Token(Token = "0x60000C7")]
		[Address(RVA = "0x2119AC", Offset = "0x2119AC", VA = "0x2119AC")]
		private void getEntitlementCallback(Message msg)
		{
		}

		[Token(Token = "0x60000C8")]
		[Address(RVA = "0x211AC8", Offset = "0x211AC8", VA = "0x211AC8")]
		private void init(Message<User> msg)
		{
		}

		[Token(Token = "0x60000C9")]
		[Address(RVA = "0x210410", Offset = "0x210410", VA = "0x210410")]
		private void requestCreateRoom()
		{
		}

		[Token(Token = "0x60000CA")]
		[Address(RVA = "0x211C78", Offset = "0x211C78", VA = "0x211C78")]
		private void createRoomResponse(Message<MatchmakingEnqueueResultAndRoom> msg)
		{
		}

		[Token(Token = "0x60000CB")]
		[Address(RVA = "0x210614", Offset = "0x210614", VA = "0x210614")]
		private void requestCreateFilterRoom()
		{
		}

		[Token(Token = "0x60000CC")]
		[Address(RVA = "0x210B24", Offset = "0x210B24", VA = "0x210B24")]
		private void requestFindRoom()
		{
		}

		[Token(Token = "0x60000CD")]
		[Address(RVA = "0x210D10", Offset = "0x210D10", VA = "0x210D10")]
		private void requestFindFilteredRoom()
		{
		}

		[Token(Token = "0x60000CE")]
		[Address(RVA = "0x211E78", Offset = "0x211E78", VA = "0x211E78")]
		private void foundMatch(Message<Room> msg)
		{
		}

		[Token(Token = "0x60000CF")]
		[Address(RVA = "0x21205C", Offset = "0x21205C", VA = "0x21205C")]
		private void joinRoomResponse(Message<Room> msg)
		{
		}

		[Token(Token = "0x60000D0")]
		[Address(RVA = "0x210938", Offset = "0x210938", VA = "0x210938")]
		private void requestFindMatch()
		{
		}

		[Token(Token = "0x60000D1")]
		[Address(RVA = "0x212438", Offset = "0x212438", VA = "0x212438")]
		private void searchingStarted(Message msg)
		{
		}

		[Token(Token = "0x60000D2")]
		[Address(RVA = "0x21255C", Offset = "0x21255C", VA = "0x21255C")]
		private void updateRoom(Message<Room> msg)
		{
		}

		[Token(Token = "0x60000D3")]
		[Address(RVA = "0x21119C", Offset = "0x21119C", VA = "0x21119C")]
		private void sendChat(string chatMessage)
		{
		}

		[Token(Token = "0x60000D4")]
		[Address(RVA = "0x2101C8", Offset = "0x2101C8", VA = "0x2101C8")]
		private void processNetPackets()
		{
		}

		[Token(Token = "0x60000D5")]
		[Address(RVA = "0x211300", Offset = "0x211300", VA = "0x211300")]
		private void requestLeaveRoom()
		{
		}

		[Token(Token = "0x60000D6")]
		[Address(RVA = "0x2129C4", Offset = "0x2129C4", VA = "0x2129C4")]
		private void leaveRoomResponse(Message<Room> msg)
		{
		}

		[Token(Token = "0x60000D7")]
		[Address(RVA = "0x2114A8", Offset = "0x2114A8", VA = "0x2114A8")]
		private void requestStartRatedMatch()
		{
		}

		[Token(Token = "0x60000D8")]
		[Address(RVA = "0x212AF4", Offset = "0x212AF4", VA = "0x212AF4")]
		private void startRatedMatchResponse(Message msg)
		{
		}

		[Token(Token = "0x60000D9")]
		[Address(RVA = "0x21161C", Offset = "0x21161C", VA = "0x21161C")]
		private void requestReportResults()
		{
		}

		[Token(Token = "0x60000DA")]
		[Address(RVA = "0x212C18", Offset = "0x212C18", VA = "0x212C18")]
		private void reportResultsResponse(Message msg)
		{
		}
	}
}
namespace Oculus.Platform.Samples.SimplePlatformSample
{
	[Token(Token = "0x200001D")]
	public class DataEntry : MonoBehaviour
	{
		[Token(Token = "0x40000A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Text dataOutput;

		[Token(Token = "0x40000A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2BB50", Offset = "0xC2BB50")]
		private static Dictionary<string, int> <>f__switch$map1;

		[Token(Token = "0x60000DB")]
		[Address(RVA = "0x212D2C", Offset = "0x212D2C", VA = "0x212D2C")]
		public DataEntry()
		{
		}

		[Token(Token = "0x60000DC")]
		[Address(RVA = "0x212D34", Offset = "0x212D34", VA = "0x212D34")]
		private void Start()
		{
		}

		[Token(Token = "0x60000DD")]
		[Address(RVA = "0x212E60", Offset = "0x212E60", VA = "0x212E60")]
		private void Update()
		{
		}

		[Token(Token = "0x60000DE")]
		[Address(RVA = "0x213014", Offset = "0x213014", VA = "0x213014")]
		private void SubmitCommand(string command)
		{
		}

		[Token(Token = "0x60000DF")]
		[Address(RVA = "0x215654", Offset = "0x215654", VA = "0x215654")]
		private void getLeaderboardEntries(string leaderboardName)
		{
		}

		[Token(Token = "0x60000E0")]
		[Address(RVA = "0x2154E8", Offset = "0x2154E8", VA = "0x2154E8")]
		private void writeLeaderboardEntry(string leaderboardName, string value)
		{
		}

		[Token(Token = "0x60000E1")]
		[Address(RVA = "0x21540C", Offset = "0x21540C", VA = "0x21540C")]
		private void addFieldsAchievement(string achievementName, string fields)
		{
		}

		[Token(Token = "0x60000E2")]
		[Address(RVA = "0x2152E4", Offset = "0x2152E4", VA = "0x2152E4")]
		private void addCountAchievement(string achievementName, string count)
		{
		}

		[Token(Token = "0x60000E3")]
		[Address(RVA = "0x215210", Offset = "0x215210", VA = "0x215210")]
		private void unlockAchievement(string achievementName)
		{
		}

		[Token(Token = "0x60000E4")]
		[Address(RVA = "0x2150C0", Offset = "0x2150C0", VA = "0x2150C0")]
		private void getAchievementProgress(string achievementName)
		{
		}

		[Token(Token = "0x60000E5")]
		[Address(RVA = "0x214F70", Offset = "0x214F70", VA = "0x214F70")]
		private void getAchievementDefinition(string achievementName)
		{
		}

		[Token(Token = "0x60000E6")]
		[Address(RVA = "0x212DBC", Offset = "0x212DBC", VA = "0x212DBC")]
		private void checkEntitlement()
		{
		}

		[Token(Token = "0x60000E7")]
		[Address(RVA = "0x214E8C", Offset = "0x214E8C", VA = "0x214E8C")]
		private void getUserNonce()
		{
		}

		[Token(Token = "0x60000E8")]
		[Address(RVA = "0x213B44", Offset = "0x213B44", VA = "0x213B44")]
		private void createAndJoinPrivateRoom(string joinPolicy, string maxUsers)
		{
		}

		[Token(Token = "0x60000E9")]
		[Address(RVA = "0x213C8C", Offset = "0x213C8C", VA = "0x213C8C")]
		private void getCurrentRoom()
		{
		}

		[Token(Token = "0x60000EA")]
		[Address(RVA = "0x213D68", Offset = "0x213D68", VA = "0x213D68")]
		private void getRoom(string roomID)
		{
		}

		[Token(Token = "0x60000EB")]
		[Address(RVA = "0x213ED4", Offset = "0x213ED4", VA = "0x213ED4")]
		private void joinRoom(string roomID)
		{
		}

		[Token(Token = "0x60000EC")]
		[Address(RVA = "0x214048", Offset = "0x214048", VA = "0x214048")]
		private void leaveRoom(string roomID)
		{
		}

		[Token(Token = "0x60000ED")]
		[Address(RVA = "0x2141B4", Offset = "0x2141B4", VA = "0x2141B4")]
		private void kickUser(string roomID, string userID)
		{
		}

		[Token(Token = "0x60000EE")]
		[Address(RVA = "0x21435C", Offset = "0x21435C", VA = "0x21435C")]
		private void getLoggedInUser()
		{
		}

		[Token(Token = "0x60000EF")]
		[Address(RVA = "0x214440", Offset = "0x214440", VA = "0x214440")]
		private void getUser(string userID)
		{
		}

		[Token(Token = "0x60000F0")]
		[Address(RVA = "0x2145B8", Offset = "0x2145B8", VA = "0x2145B8")]
		private void getLoggedInFriends()
		{
		}

		[Token(Token = "0x60000F1")]
		[Address(RVA = "0x21469C", Offset = "0x21469C", VA = "0x21469C")]
		private void getInvitableUsers()
		{
		}

		[Token(Token = "0x60000F2")]
		[Address(RVA = "0x214778", Offset = "0x214778", VA = "0x214778")]
		private void inviteUser(string roomID, string inviteToken)
		{
		}

		[Token(Token = "0x60000F3")]
		[Address(RVA = "0x214904", Offset = "0x214904", VA = "0x214904")]
		private void setRoomDescription(string roomID, string description)
		{
		}

		[Token(Token = "0x60000F4")]
		[Address(RVA = "0x214A90", Offset = "0x214A90", VA = "0x214A90")]
		private void updateRoomDataStore(string roomID, string key, string value)
		{
		}

		[Token(Token = "0x60000F5")]
		[Address(RVA = "0x215738", Offset = "0x215738", VA = "0x215738")]
		private void printOutputLine(string newLine)
		{
		}

		[Token(Token = "0x60000F6")]
		[Address(RVA = "0x21584C", Offset = "0x21584C", VA = "0x21584C")]
		private void outputRoomDetails(Room room)
		{
		}

		[Token(Token = "0x60000F7")]
		[Address(RVA = "0x216230", Offset = "0x216230", VA = "0x216230")]
		private void outputUserArray(UserList users)
		{
		}

		[Token(Token = "0x60000F8")]
		[Address(RVA = "0x216868", Offset = "0x216868", VA = "0x216868")]
		private void userProofCallback(Message<UserProof> msg)
		{
		}

		[Token(Token = "0x60000F9")]
		[Address(RVA = "0x2169E8", Offset = "0x2169E8", VA = "0x2169E8")]
		private void getEntitlementCallback(Message msg)
		{
		}

		[Token(Token = "0x60000FA")]
		[Address(RVA = "0x216A78", Offset = "0x216A78", VA = "0x216A78")]
		private void leaderboardGetCallback(Message<LeaderboardEntryList> msg)
		{
		}

		[Token(Token = "0x60000FB")]
		[Address(RVA = "0x2171C4", Offset = "0x2171C4", VA = "0x2171C4")]
		private void leaderboardWriteCallback(Message msg)
		{
		}

		[Token(Token = "0x60000FC")]
		[Address(RVA = "0x2173B8", Offset = "0x2173B8", VA = "0x2173B8")]
		private void achievementFieldsCallback(Message msg)
		{
		}

		[Token(Token = "0x60000FD")]
		[Address(RVA = "0x2174CC", Offset = "0x2174CC", VA = "0x2174CC")]
		private void achievementCountCallback(Message msg)
		{
		}

		[Token(Token = "0x60000FE")]
		[Address(RVA = "0x2175E0", Offset = "0x2175E0", VA = "0x2175E0")]
		private void achievementUnlockCallback(Message msg)
		{
		}

		[Token(Token = "0x60000FF")]
		[Address(RVA = "0x2176F4", Offset = "0x2176F4", VA = "0x2176F4")]
		private void achievementProgressCallback(Message<AchievementProgressList> msg)
		{
		}

		[Token(Token = "0x6000100")]
		[Address(RVA = "0x217B74", Offset = "0x217B74", VA = "0x217B74")]
		private void achievementDefinitionCallback(Message<AchievementDefinitionList> msg)
		{
		}

		[Token(Token = "0x6000101")]
		[Address(RVA = "0x218108", Offset = "0x218108", VA = "0x218108")]
		private void createAndJoinPrivateRoomCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000102")]
		[Address(RVA = "0x218248", Offset = "0x218248", VA = "0x218248")]
		private void getCurrentRoomCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000103")]
		[Address(RVA = "0x218388", Offset = "0x218388", VA = "0x218388")]
		private void joinRoomCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000104")]
		[Address(RVA = "0x2184C8", Offset = "0x2184C8", VA = "0x2184C8")]
		private void leaveRoomCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000105")]
		[Address(RVA = "0x218608", Offset = "0x218608", VA = "0x218608")]
		private void getUserCallback(Message<User> msg)
		{
		}

		[Token(Token = "0x6000106")]
		[Address(RVA = "0x218AD8", Offset = "0x218AD8", VA = "0x218AD8")]
		private void getFriendsCallback(Message<UserList> msg)
		{
		}

		[Token(Token = "0x6000107")]
		[Address(RVA = "0x218C18", Offset = "0x218C18", VA = "0x218C18")]
		private void getInvitableUsersCallback(Message<UserList> msg)
		{
		}

		[Token(Token = "0x6000108")]
		[Address(RVA = "0x218D58", Offset = "0x218D58", VA = "0x218D58")]
		private void inviteUserCallback(Message msg)
		{
		}
	}
}
namespace Oculus.Platform.Samples.VrBoardGame
{
	[Token(Token = "0x200001E")]
	public class BoardPosition : MonoBehaviour
	{
		[Token(Token = "0x40000A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xC2BB60", Offset = "0xC2BB60")]
		public int x;

		[Token(Token = "0x40000A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xC2BB98", Offset = "0xC2BB98")]
		public int y;

		[Token(Token = "0x6000109")]
		[Address(RVA = "0x218E6C", Offset = "0x218E6C", VA = "0x218E6C")]
		public BoardPosition()
		{
		}
	}
	[Token(Token = "0x200001F")]
	public class EyeCamera : MonoBehaviour
	{
		[Token(Token = "0x40000A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private EventSystem m_eventSystem;

		[Token(Token = "0x40000A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private GameController m_gameController;

		[Token(Token = "0x40000AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private SphereCollider m_gazeTracker;

		[Token(Token = "0x40000AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Button m_currentButton;

		[Token(Token = "0x40000AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private GamePiece m_currentPiece;

		[Token(Token = "0x40000AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoardPosition m_boardPosition;

		[Token(Token = "0x600010A")]
		[Address(RVA = "0x218E74", Offset = "0x218E74", VA = "0x218E74")]
		public EyeCamera()
		{
		}

		[Token(Token = "0x600010B")]
		[Address(RVA = "0x218E7C", Offset = "0x218E7C", VA = "0x218E7C")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000020")]
	public class GameBoard : MonoBehaviour
	{
		[Token(Token = "0x2000021")]
		private struct PositionInfo
		{
			[Token(Token = "0x40000B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject piece;

			[Token(Token = "0x40000B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int pieceOwner;

			[Token(Token = "0x40000B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int powerPieceOwner;
		}

		[Token(Token = "0x40000AE")]
		public const int LENGTH_X = 3;

		[Token(Token = "0x40000AF")]
		public const int LENGTH_Y = 3;

		[Token(Token = "0x40000B0")]
		public const int MAX_PLAYERS = 2;

		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Color[] m_playerColors;

		[Token(Token = "0x40000B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Color m_proposedMoveColor;

		[Token(Token = "0x40000B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int[] m_scores;

		[Token(Token = "0x40000B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private BoardPosition[] m_positions;

		[Token(Token = "0x40000B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PositionInfo[,] m_pieces;

		[Token(Token = "0x600010C")]
		[Address(RVA = "0x219B4C", Offset = "0x219B4C", VA = "0x219B4C")]
		public GameBoard()
		{
		}

		[Token(Token = "0x600010D")]
		[Address(RVA = "0x219C70", Offset = "0x219C70", VA = "0x219C70")]
		public void Reset()
		{
		}

		[Token(Token = "0x600010E")]
		[Address(RVA = "0x219F34", Offset = "0x219F34", VA = "0x219F34")]
		public bool IsFull()
		{
			return default(bool);
		}

		[Token(Token = "0x600010F")]
		[Address(RVA = "0x21A054", Offset = "0x21A054", VA = "0x21A054")]
		public bool CanPlayerMoveToPostion(int x, int y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000110")]
		[Address(RVA = "0x21A140", Offset = "0x21A140", VA = "0x21A140")]
		public bool CanPlayerPowerUpPosition(int x, int y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000111")]
		[Address(RVA = "0x21A22C", Offset = "0x21A22C", VA = "0x21A22C")]
		public void AddPiece(int player, GameObject prefab, int x, int y)
		{
		}

		[Token(Token = "0x6000112")]
		[Address(RVA = "0x21AB20", Offset = "0x21AB20", VA = "0x21AB20")]
		public GamePiece AddProposedPiece(GameObject prefab, BoardPosition pos)
		{
			return null;
		}

		[Token(Token = "0x6000113")]
		[Address(RVA = "0x21AC78", Offset = "0x21AC78", VA = "0x21AC78")]
		public void AddPowerPiece(int player, GameObject prefab, int x, int y)
		{
		}

		[Token(Token = "0x6000114")]
		[Address(RVA = "0x21AEEC", Offset = "0x21AEEC", VA = "0x21AEEC")]
		public GamePiece AddProposedPowerPiece(GameObject prefab, BoardPosition pos)
		{
			return null;
		}

		[Token(Token = "0x6000115")]
		[Address(RVA = "0x21A508", Offset = "0x21A508", VA = "0x21A508")]
		private GamePiece Create(GameObject prefab, GameObject parent, BoardPosition pos, Vector3 off)
		{
			return null;
		}

		[Token(Token = "0x6000116")]
		[Address(RVA = "0x21B0D4", Offset = "0x21B0D4", VA = "0x21B0D4")]
		public int GetPlayerScore(int player)
		{
			return default(int);
		}

		[Token(Token = "0x6000117")]
		[Address(RVA = "0x21A708", Offset = "0x21A708", VA = "0x21A708")]
		private void UpdateScores()
		{
		}
	}
	[Token(Token = "0x2000022")]
	public class GameController : MonoBehaviour
	{
		[Token(Token = "0x2000023")]
		private enum GameState
		{
			[Token(Token = "0x40000CC")]
			None,
			[Token(Token = "0x40000CD")]
			PracticingMyTurn,
			[Token(Token = "0x40000CE")]
			PracticingAiTurn,
			[Token(Token = "0x40000CF")]
			OnlineMatchMyTurn,
			[Token(Token = "0x40000D0")]
			OnlineMatchRemoteTurn
		}

		[Token(Token = "0x40000B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private MatchmakingManager m_matchmaking;

		[Token(Token = "0x40000BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private GameBoard m_board;

		[Token(Token = "0x40000BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private GamePiece m_pieceA;

		[Token(Token = "0x40000BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GamePiece m_pieceB;

		[Token(Token = "0x40000BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private GamePiece m_powerPiece;

		[Token(Token = "0x40000BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Color m_unusableColor;

		[Token(Token = "0x40000BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color m_unselectedColor;

		[Token(Token = "0x40000C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color m_selectedColor;

		[Token(Token = "0x40000C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Color m_highlightedColor;

		[Token(Token = "0x40000C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Text m_ballCountText;

		[Token(Token = "0x40000C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private Text m_player0Text;

		[Token(Token = "0x40000C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Text m_player1Text;

		[Token(Token = "0x40000C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private GameState m_state;

		[Token(Token = "0x40000C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GamePiece m_interestedPiece;

		[Token(Token = "0x40000C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private GamePiece m_selectedPiece;

		[Token(Token = "0x40000C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GamePiece m_proposedPiece;

		[Token(Token = "0x40000C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private uint m_powerBallcount;

		[Token(Token = "0x40000CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string m_opponentName;

		[Token(Token = "0x6000118")]
		[Address(RVA = "0x21B168", Offset = "0x21B168", VA = "0x21B168")]
		public GameController()
		{
		}

		[Token(Token = "0x6000119")]
		[Address(RVA = "0x21B208", Offset = "0x21B208", VA = "0x21B208")]
		private void Start()
		{
		}

		[Token(Token = "0x600011A")]
		[Address(RVA = "0x21B3E0", Offset = "0x21B3E0", VA = "0x21B3E0")]
		private void Update()
		{
		}

		[Token(Token = "0x600011B")]
		[Address(RVA = "0x21B230", Offset = "0x21B230", VA = "0x21B230")]
		private void TransitionToState(GameState state)
		{
		}

		[Token(Token = "0x600011C")]
		[Address(RVA = "0x21BB40", Offset = "0x21BB40", VA = "0x21BB40")]
		private void TransitionToNextState()
		{
		}

		[Token(Token = "0x600011D")]
		[Address(RVA = "0x21B3E4", Offset = "0x21B3E4", VA = "0x21B3E4")]
		private void PerFrameStateUpdate()
		{
		}

		[Token(Token = "0x600011E")]
		[Address(RVA = "0x21C4F0", Offset = "0x21C4F0", VA = "0x21C4F0")]
		public void PracticeButtonPressed()
		{
		}

		[Token(Token = "0x600011F")]
		[Address(RVA = "0x21BEB4", Offset = "0x21BEB4", VA = "0x21BEB4")]
		private void MakeAIMove(int player)
		{
		}

		[Token(Token = "0x6000120")]
		[Address(RVA = "0x21C644", Offset = "0x21C644", VA = "0x21C644")]
		public void StartOnlineMatch(string opponentName, bool localUserGoesFirst)
		{
		}

		[Token(Token = "0x6000121")]
		[Address(RVA = "0x21C698", Offset = "0x21C698", VA = "0x21C698")]
		public void MakeRemoteMove(GamePiece.Piece piece, int x, int y)
		{
		}

		[Token(Token = "0x6000122")]
		[Address(RVA = "0x21C764", Offset = "0x21C764", VA = "0x21C764")]
		public void MarkRemoteTurnComplete()
		{
		}

		[Token(Token = "0x6000123")]
		[Address(RVA = "0x21C774", Offset = "0x21C774", VA = "0x21C774")]
		public void RemoteMatchEnded()
		{
		}

		[Token(Token = "0x6000124")]
		[Address(RVA = "0x2196B8", Offset = "0x2196B8", VA = "0x2196B8")]
		public void StartedLookingAtPiece(GamePiece piece)
		{
		}

		[Token(Token = "0x6000125")]
		[Address(RVA = "0x2196AC", Offset = "0x2196AC", VA = "0x2196AC")]
		public void StoppedLookingAtPiece()
		{
		}

		[Token(Token = "0x6000126")]
		[Address(RVA = "0x2196C0", Offset = "0x2196C0", VA = "0x2196C0")]
		public void StartedLookingAtPosition(BoardPosition position)
		{
		}

		[Token(Token = "0x6000127")]
		[Address(RVA = "0x219A58", Offset = "0x219A58", VA = "0x219A58")]
		public void ClearProposedMove()
		{
		}

		[Token(Token = "0x6000128")]
		[Address(RVA = "0x21C0D4", Offset = "0x21C0D4", VA = "0x21C0D4")]
		public void TrySelectPiece()
		{
		}

		[Token(Token = "0x6000129")]
		[Address(RVA = "0x21C238", Offset = "0x21C238", VA = "0x21C238")]
		public void TryPlacePiece()
		{
		}

		[Token(Token = "0x600012A")]
		[Address(RVA = "0x21CAF0", Offset = "0x21CAF0", VA = "0x21CAF0")]
		public void QuitButtonPressed()
		{
		}

		[Token(Token = "0x600012B")]
		[Address(RVA = "0x21CAFC", Offset = "0x21CAFC", VA = "0x21CAFC")]
		public void AddPowerballs(uint count)
		{
		}

		[Token(Token = "0x600012C")]
		[Address(RVA = "0x21B238", Offset = "0x21B238", VA = "0x21B238")]
		private void UpdateScores()
		{
		}

		[Token(Token = "0x600012D")]
		[Address(RVA = "0x21B4D8", Offset = "0x21B4D8", VA = "0x21B4D8")]
		private void UpdateGamePieceColors()
		{
		}
	}
	[Token(Token = "0x2000024")]
	public class GamePiece : MonoBehaviour
	{
		[Token(Token = "0x2000025")]
		public enum Piece
		{
			[Token(Token = "0x40000D7")]
			A,
			[Token(Token = "0x40000D8")]
			B,
			[Token(Token = "0x40000D9")]
			PowerBall
		}

		[Token(Token = "0x40000D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Piece m_type;

		[Token(Token = "0x40000D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private GameObject m_prefabA;

		[Token(Token = "0x40000D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private GameObject m_prefabB;

		[Token(Token = "0x40000D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject m_prefabPower;

		[Token(Token = "0x40000D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private BoardPosition m_position;

		[Token(Token = "0x1700001F")]
		public Piece Type
		{
			[Token(Token = "0x600012F")]
			[Address(RVA = "0x21C7EC", Offset = "0x21C7EC", VA = "0x21C7EC")]
			get
			{
				return default(Piece);
			}
		}

		[Token(Token = "0x17000020")]
		public BoardPosition Position
		{
			[Token(Token = "0x6000130")]
			[Address(RVA = "0x21C7E4", Offset = "0x21C7E4", VA = "0x21C7E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000131")]
			[Address(RVA = "0x21B0CC", Offset = "0x21B0CC", VA = "0x21B0CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000021")]
		public GameObject Prefab
		{
			[Token(Token = "0x6000132")]
			[Address(RVA = "0x21C61C", Offset = "0x21C61C", VA = "0x21C61C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600012E")]
		[Address(RVA = "0x21CD28", Offset = "0x21CD28", VA = "0x21CD28")]
		public GamePiece()
		{
		}

		[Token(Token = "0x6000133")]
		[Address(RVA = "0x21C740", Offset = "0x21C740", VA = "0x21C740")]
		public GameObject PrefabFor(Piece p)
		{
			return null;
		}
	}
	[Token(Token = "0x2000026")]
	public class IAPManager : MonoBehaviour
	{
		[Token(Token = "0x40000DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private GameController m_gameController;

		[Token(Token = "0x40000DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Text m_priceText;

		[Token(Token = "0x40000DC")]
		private const string CONSUMABLE_1 = "PowerballPack1";

		[Token(Token = "0x6000134")]
		[Address(RVA = "0x21CD30", Offset = "0x21CD30", VA = "0x21CD30")]
		public IAPManager()
		{
		}

		[Token(Token = "0x6000135")]
		[Address(RVA = "0x21CD38", Offset = "0x21CD38", VA = "0x21CD38")]
		private void Start()
		{
		}

		[Token(Token = "0x6000136")]
		[Address(RVA = "0x21CD54", Offset = "0x21CD54", VA = "0x21CD54")]
		public void FetchProductPrices()
		{
		}

		[Token(Token = "0x6000137")]
		[Address(RVA = "0x21CF78", Offset = "0x21CF78", VA = "0x21CF78")]
		private void GetProductsBySKUCallback(Message<ProductList> msg)
		{
		}

		[Token(Token = "0x6000138")]
		[Address(RVA = "0x21CEB4", Offset = "0x21CEB4", VA = "0x21CEB4")]
		public void FetchPurchasedProducts()
		{
		}

		[Token(Token = "0x6000139")]
		[Address(RVA = "0x21D570", Offset = "0x21D570", VA = "0x21D570")]
		private void GetViewerPurchasesCallback(Message<PurchaseList> msg)
		{
		}

		[Token(Token = "0x600013A")]
		[Address(RVA = "0x21DA10", Offset = "0x21DA10", VA = "0x21DA10")]
		public void BuyPowerBallsPressed()
		{
		}

		[Token(Token = "0x600013B")]
		[Address(RVA = "0x21DAE4", Offset = "0x21DAE4", VA = "0x21DAE4")]
		private void LaunchCheckoutFlowCallback(Message<Purchase> msg)
		{
		}
	}
	[Token(Token = "0x2000027")]
	public class MatchmakingManager : MonoBehaviour
	{
		[Token(Token = "0x2000028")]
		private enum MatchRoomState
		{
			[Token(Token = "0x40000E7")]
			None,
			[Token(Token = "0x40000E8")]
			Queued,
			[Token(Token = "0x40000E9")]
			Configuring,
			[Token(Token = "0x40000EA")]
			MyTurn,
			[Token(Token = "0x40000EB")]
			RemoteTurn
		}

		[Token(Token = "0x40000DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private GameController m_gameController;

		[Token(Token = "0x40000DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Text m_matchButtonText;

		[Token(Token = "0x40000DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Text m_infoText;

		[Token(Token = "0x40000E0")]
		private const string POOL = "VR_BOARD_GAME_POOL";

		[Token(Token = "0x40000E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ulong m_matchRoom;

		[Token(Token = "0x40000E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private User m_remotePlayer;

		[Token(Token = "0x40000E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_lastUpdateTime;

		[Token(Token = "0x40000E4")]
		private const float POLL_FREQUENCY = 30f;

		[Token(Token = "0x40000E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MatchRoomState m_state;

		[Token(Token = "0x600013C")]
		[Address(RVA = "0x21DC28", Offset = "0x21DC28", VA = "0x21DC28")]
		public MatchmakingManager()
		{
		}

		[Token(Token = "0x600013D")]
		[Address(RVA = "0x21DC30", Offset = "0x21DC30", VA = "0x21DC30")]
		private void Start()
		{
		}

		[Token(Token = "0x600013E")]
		[Address(RVA = "0x21DF30", Offset = "0x21DF30", VA = "0x21DF30")]
		private void Update()
		{
		}

		[Token(Token = "0x600013F")]
		[Address(RVA = "0x21E0A4", Offset = "0x21E0A4", VA = "0x21E0A4")]
		public void MatchButtonPressed()
		{
		}

		[Token(Token = "0x6000140")]
		[Address(RVA = "0x21BC48", Offset = "0x21BC48", VA = "0x21BC48")]
		public void EndMatch(int localScore, int remoteScore)
		{
		}

		[Token(Token = "0x6000141")]
		[Address(RVA = "0x21E1A0", Offset = "0x21E1A0", VA = "0x21E1A0")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000142")]
		[Address(RVA = "0x21DD0C", Offset = "0x21DD0C", VA = "0x21DD0C")]
		private void TransitionToState(MatchRoomState state)
		{
		}

		[Token(Token = "0x6000143")]
		[Address(RVA = "0x21E1D0", Offset = "0x21E1D0", VA = "0x21E1D0")]
		private void MatchmakingEnqueueCallback(Message untyped_msg)
		{
		}

		[Token(Token = "0x6000144")]
		[Address(RVA = "0x21E5D8", Offset = "0x21E5D8", VA = "0x21E5D8")]
		private void MatchFoundCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000145")]
		[Address(RVA = "0x21E7BC", Offset = "0x21E7BC", VA = "0x21E7BC")]
		private void MatchmakingJoinRoomCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000146")]
		[Address(RVA = "0x21F2F4", Offset = "0x21F2F4", VA = "0x21F2F4")]
		private void MatchmakingRoomUpdateCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000147")]
		[Address(RVA = "0x21EC78", Offset = "0x21EC78", VA = "0x21EC78")]
		private void ProcessRoomData(Room room)
		{
		}

		[Token(Token = "0x6000148")]
		[Address(RVA = "0x21F9C4", Offset = "0x21F9C4", VA = "0x21F9C4")]
		private void ProcessRemoteMove(string moveString)
		{
		}

		[Token(Token = "0x6000149")]
		[Address(RVA = "0x21C7F4", Offset = "0x21C7F4", VA = "0x21C7F4")]
		public void SendLocalMove(GamePiece.Piece piece, int boardX, int boardY)
		{
		}

		[Token(Token = "0x600014A")]
		[Address(RVA = "0x21FCD8", Offset = "0x21FCD8", VA = "0x21FCD8")]
		private void UpdateDataStoreCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x600014B")]
		[Address(RVA = "0x21F94C", Offset = "0x21F94C", VA = "0x21F94C")]
		private bool DoesLocalUserGoFirst()
		{
			return default(bool);
		}

		[Token(Token = "0x600014C")]
		[Address(RVA = "0x21FD20", Offset = "0x21FD20", VA = "0x21FD20")]
		private void GenericErrorCheckCallback(Message msg)
		{
		}
	}
	[Token(Token = "0x2000029")]
	public class PlatformManager : MonoBehaviour
	{
		[Token(Token = "0x40000EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PlatformManager s_instance;

		[Token(Token = "0x40000ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ulong m_myID;

		[Token(Token = "0x40000EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_myOculusID;

		[Token(Token = "0x17000022")]
		public static ulong MyID
		{
			[Token(Token = "0x6000153")]
			[Address(RVA = "0x21E0C0", Offset = "0x21E0C0", VA = "0x21E0C0")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x17000023")]
		public static string MyOculusID
		{
			[Token(Token = "0x6000154")]
			[Address(RVA = "0x21CBE0", Offset = "0x21CBE0", VA = "0x21CBE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600014D")]
		[Address(RVA = "0x21FDF8", Offset = "0x21FDF8", VA = "0x21FDF8")]
		public PlatformManager()
		{
		}

		[Token(Token = "0x600014E")]
		[Address(RVA = "0x21FE00", Offset = "0x21FE00", VA = "0x21FE00")]
		private void Awake()
		{
		}

		[Token(Token = "0x600014F")]
		[Address(RVA = "0x21FF94", Offset = "0x21FF94", VA = "0x21FF94")]
		private void Start()
		{
		}

		[Token(Token = "0x6000150")]
		[Address(RVA = "0x220038", Offset = "0x220038", VA = "0x220038")]
		private void IsEntitledCallback(Message msg)
		{
		}

		[Token(Token = "0x6000151")]
		[Address(RVA = "0x22012C", Offset = "0x22012C", VA = "0x22012C")]
		private void GetLoggedInUserCallback(Message<User> msg)
		{
		}

		[Token(Token = "0x6000152")]
		[Address(RVA = "0x21D458", Offset = "0x21D458", VA = "0x21D458")]
		public static void TerminateWithError(Message msg)
		{
		}
	}
}
namespace Oculus.Platform.Samples.VrHoops
{
	[Token(Token = "0x200002A")]
	public class AchievementsManager
	{
		[Token(Token = "0x40000EF")]
		private const string LIKES_TO_WIN = "LIKES_TO_WIN";

		[Token(Token = "0x40000F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool m_likesToWinUnlocked;

		[Token(Token = "0x17000024")]
		public bool LikesToWin
		{
			[Token(Token = "0x6000156")]
			[Address(RVA = "0x220294", Offset = "0x220294", VA = "0x220294")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000155")]
		[Address(RVA = "0x22028C", Offset = "0x22028C", VA = "0x22028C")]
		public AchievementsManager()
		{
		}

		[Token(Token = "0x6000157")]
		[Address(RVA = "0x22029C", Offset = "0x22029C", VA = "0x22029C")]
		public void CheckForAchievmentUpdates()
		{
		}

		[Token(Token = "0x6000158")]
		[Address(RVA = "0x220404", Offset = "0x220404", VA = "0x220404")]
		public void RecordWinForLocalUser()
		{
		}

		[Token(Token = "0x6000159")]
		[Address(RVA = "0x220488", Offset = "0x220488", VA = "0x220488")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2BD80", Offset = "0xC2BD80")]
		private void <CheckForAchievmentUpdates>m__0(Message<AchievementProgressList> msg)
		{
		}
	}
	[Token(Token = "0x200002B")]
	public class AIPlayer : Player
	{
		[Token(Token = "0x600015A")]
		[Address(RVA = "0x22078C", Offset = "0x22078C", VA = "0x22078C")]
		public AIPlayer()
		{
		}

		[Token(Token = "0x600015B")]
		[Address(RVA = "0x220794", Offset = "0x220794", VA = "0x220794")]
		private void FixedUpdate()
		{
		}
	}
	[Token(Token = "0x200002C")]
	public class BallEjector : MonoBehaviour
	{
		[Token(Token = "0x600015C")]
		[Address(RVA = "0x2207FC", Offset = "0x2207FC", VA = "0x2207FC")]
		public BallEjector()
		{
		}
	}
	[Token(Token = "0x200002D")]
	public class Camera2DController : MonoBehaviour
	{
		[Token(Token = "0x600015D")]
		[Address(RVA = "0x220804", Offset = "0x220804", VA = "0x220804")]
		public Camera2DController()
		{
		}

		[Token(Token = "0x600015E")]
		[Address(RVA = "0x22080C", Offset = "0x22080C", VA = "0x22080C")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x200002E")]
	public class DetectBasket : MonoBehaviour
	{
		[Token(Token = "0x200002F")]
		private enum BasketPhase
		{
			[Token(Token = "0x40000F4")]
			NONE,
			[Token(Token = "0x40000F5")]
			TOP,
			[Token(Token = "0x40000F6")]
			BOTH,
			[Token(Token = "0x40000F7")]
			BOTTOM
		}

		[Token(Token = "0x40000F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private BasketPhase m_phase;

		[Token(Token = "0x40000F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Player m_owningPlayer;

		[Token(Token = "0x17000025")]
		public Player Player
		{
			[Token(Token = "0x6000160")]
			[Address(RVA = "0x220B6C", Offset = "0x220B6C", VA = "0x220B6C")]
			set
			{
			}
		}

		[Token(Token = "0x600015F")]
		[Address(RVA = "0x220B64", Offset = "0x220B64", VA = "0x220B64")]
		public DetectBasket()
		{
		}

		[Token(Token = "0x6000161")]
		[Address(RVA = "0x220B74", Offset = "0x220B74", VA = "0x220B74")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000162")]
		[Address(RVA = "0x220D0C", Offset = "0x220D0C", VA = "0x220D0C")]
		private void OnTriggerExit(Collider other)
		{
		}
	}
	[Token(Token = "0x2000030")]
	public class FlyText : MonoBehaviour
	{
		[Token(Token = "0x40000F8")]
		private const float LIFESPAN = 3f;

		[Token(Token = "0x40000F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private readonly Vector3 m_movePerFrame;

		[Token(Token = "0x40000FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_eol;

		[Token(Token = "0x6000163")]
		[Address(RVA = "0x220F54", Offset = "0x220F54", VA = "0x220F54")]
		public FlyText()
		{
		}

		[Token(Token = "0x6000164")]
		[Address(RVA = "0x221024", Offset = "0x221024", VA = "0x221024")]
		private void Start()
		{
		}

		[Token(Token = "0x6000165")]
		[Address(RVA = "0x221104", Offset = "0x221104", VA = "0x221104")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000031")]
	public class GoalMover : MonoBehaviour
	{
		[Token(Token = "0x40000FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private float MAX_OFFSET;

		[Token(Token = "0x40000FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private float m_speed;

		[Token(Token = "0x40000FD")]
		private const float MOVE_TOLERANCE = 0.1f;

		[Token(Token = "0x40000FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Vector3 m_expectedPosition;

		[Token(Token = "0x40000FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 m_moveDirection;

		[Token(Token = "0x4000100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 m_nextMoveDirection;

		[Token(Token = "0x17000026")]
		public Vector3 ExpectedPosition
		{
			[Token(Token = "0x6000167")]
			[Address(RVA = "0x22129C", Offset = "0x22129C", VA = "0x22129C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000168")]
			[Address(RVA = "0x2212AC", Offset = "0x2212AC", VA = "0x2212AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000027")]
		public Vector3 MoveDirection
		{
			[Token(Token = "0x6000169")]
			[Address(RVA = "0x2212B8", Offset = "0x2212B8", VA = "0x2212B8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600016A")]
			[Address(RVA = "0x2212C8", Offset = "0x2212C8", VA = "0x2212C8")]
			set
			{
			}
		}

		[Token(Token = "0x17000028")]
		public Vector3 NextMoveDirection
		{
			[Token(Token = "0x600016B")]
			[Address(RVA = "0x2212D4", Offset = "0x2212D4", VA = "0x2212D4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600016C")]
			[Address(RVA = "0x2212E4", Offset = "0x2212E4", VA = "0x2212E4")]
			set
			{
			}
		}

		[Token(Token = "0x6000166")]
		[Address(RVA = "0x221280", Offset = "0x221280", VA = "0x221280")]
		public GoalMover()
		{
		}

		[Token(Token = "0x600016D")]
		[Address(RVA = "0x2212F0", Offset = "0x2212F0", VA = "0x2212F0")]
		private void Start()
		{
		}

		[Token(Token = "0x600016E")]
		[Address(RVA = "0x221508", Offset = "0x221508", VA = "0x221508")]
		private void FixedUpdate()
		{
		}
	}
	[Token(Token = "0x2000032")]
	public class LeaderboardManager
	{
		[Token(Token = "0x2000033")]
		public delegate void OnMostWinsLeaderboardUpdated(SortedDictionary<int, LeaderboardEntry> entries);

		[Token(Token = "0x2000034")]
		public delegate void OnHighScoreLeaderboardUpdated(SortedDictionary<int, LeaderboardEntry> entries);

		[Token(Token = "0x4000101")]
		private const string MOST_MATCHES_WON = "MOST_MATCHES_WON";

		[Token(Token = "0x4000102")]
		private const string HIGHEST_MATCH_SCORE = "HIGHEST_MATCH_SCORE";

		[Token(Token = "0x4000103")]
		private const int TOP_N_COUNT = 5;

		[Token(Token = "0x4000104")]
		private const float LEADERBOARD_POLL_FREQ = 30f;

		[Token(Token = "0x4000105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float m_nextCheckTime;

		[Token(Token = "0x4000106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private SortedDictionary<int, LeaderboardEntry> m_mostWins;

		[Token(Token = "0x4000107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool m_foundLocalUserMostWinsEntry;

		[Token(Token = "0x4000108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private long m_numWins;

		[Token(Token = "0x4000109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private OnMostWinsLeaderboardUpdated m_mostWinsCallback;

		[Token(Token = "0x400010A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private SortedDictionary<int, LeaderboardEntry> m_highScores;

		[Token(Token = "0x400010B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_foundLocalUserHighScore;

		[Token(Token = "0x400010C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private OnHighScoreLeaderboardUpdated m_highScoreCallback;

		[Token(Token = "0x17000029")]
		public OnMostWinsLeaderboardUpdated MostWinsLeaderboardUpdatedCallback
		{
			[Token(Token = "0x6000171")]
			[Address(RVA = "0x450010", Offset = "0x450010", VA = "0x450010")]
			set
			{
			}
		}

		[Token(Token = "0x1700002A")]
		public OnHighScoreLeaderboardUpdated HighScoreLeaderboardUpdatedCallback
		{
			[Token(Token = "0x6000174")]
			[Address(RVA = "0x4509C0", Offset = "0x4509C0", VA = "0x4509C0")]
			set
			{
			}
		}

		[Token(Token = "0x600016F")]
		[Address(RVA = "0x44FCA0", Offset = "0x44FCA0", VA = "0x44FCA0")]
		public LeaderboardManager()
		{
		}

		[Token(Token = "0x6000170")]
		[Address(RVA = "0x44FCA8", Offset = "0x44FCA8", VA = "0x44FCA8")]
		public void CheckForUpdates()
		{
		}

		[Token(Token = "0x6000172")]
		[Address(RVA = "0x44FD88", Offset = "0x44FD88", VA = "0x44FD88")]
		private void QueryMostWinsLeaderboard()
		{
		}

		[Token(Token = "0x6000173")]
		[Address(RVA = "0x450018", Offset = "0x450018", VA = "0x450018")]
		private void MostWinsGetEntriesCallback(Message<LeaderboardEntryList> msg)
		{
		}

		[Token(Token = "0x6000175")]
		[Address(RVA = "0x44FECC", Offset = "0x44FECC", VA = "0x44FECC")]
		private void QueryHighScoreLeaderboard()
		{
		}

		[Token(Token = "0x6000176")]
		[Address(RVA = "0x4509C8", Offset = "0x4509C8", VA = "0x4509C8")]
		private void HighestScoreGetEntriesCallback(Message<LeaderboardEntryList> msg)
		{
		}

		[Token(Token = "0x6000177")]
		[Address(RVA = "0x451270", Offset = "0x451270", VA = "0x451270")]
		public void SubmitMatchScores(bool wonMatch, uint score)
		{
		}
	}
	[Token(Token = "0x2000035")]
	public class LocalPlayer : Player
	{
		[Token(Token = "0x1700002B")]
		public override uint Score
		{
			[Token(Token = "0x6000181")]
			[Address(RVA = "0x45146C", Offset = "0x45146C", VA = "0x45146C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6000180")]
		[Address(RVA = "0x4513DC", Offset = "0x4513DC", VA = "0x4513DC")]
		public LocalPlayer()
		{
		}

		[Token(Token = "0x6000182")]
		[Address(RVA = "0x451858", Offset = "0x451858", VA = "0x451858")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000036")]
	public class MatchController : MonoBehaviour
	{
		[Token(Token = "0x2000037")]
		private enum State
		{
			[Token(Token = "0x400011E")]
			UNKNOWN,
			[Token(Token = "0x400011F")]
			NONE,
			[Token(Token = "0x4000120")]
			WAITING_TO_START_PRACTICE,
			[Token(Token = "0x4000121")]
			PRACTICING,
			[Token(Token = "0x4000122")]
			VIEWING_RESULTS_PRACTICE,
			[Token(Token = "0x4000123")]
			WAITING_FOR_MATCH,
			[Token(Token = "0x4000124")]
			WAITING_TO_SETUP_MATCH,
			[Token(Token = "0x4000125")]
			PLAYING_MATCH,
			[Token(Token = "0x4000126")]
			VIEWING_MATCH_RESULTS
		}

		[Token(Token = "0x400010D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Text m_timerText;

		[Token(Token = "0x400010E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Camera m_camera;

		[Token(Token = "0x400010F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Transform m_idleCameraTransform;

		[Token(Token = "0x4000110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text m_matchmakeButtonText;

		[Token(Token = "0x4000111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private PlayerArea[] m_playerAreas;

		[Token(Token = "0x4000112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private uint PRACTICE_WARMUP_TIME;

		[Token(Token = "0x4000113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private uint MATCH_WARMUP_TIME;

		[Token(Token = "0x4000114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private uint MATCH_TIME;

		[Token(Token = "0x4000115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private uint MATCH_COOLDOWN_TIME;

		[Token(Token = "0x4000116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_mostWinsLeaderboard;

		[Token(Token = "0x4000117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private GameObject m_highestScoresLeaderboard;

		[Token(Token = "0x4000118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject m_leaderboardEntryPrefab;

		[Token(Token = "0x4000119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private GameObject m_flytext;

		[Token(Token = "0x400011A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private State m_currentState;

		[Token(Token = "0x400011B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_nextStateTransitionTime;

		[Token(Token = "0x400011C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int m_localSlot;

		[Token(Token = "0x1700002C")]
		public float MatchStartTime
		{
			[Token(Token = "0x6000186")]
			[Address(RVA = "0x452950", Offset = "0x452950", VA = "0x452950")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000187")]
			[Address(RVA = "0x452970", Offset = "0x452970", VA = "0x452970")]
			private set
			{
			}
		}

		[Token(Token = "0x6000183")]
		[Address(RVA = "0x451E08", Offset = "0x451E08", VA = "0x451E08")]
		public MatchController()
		{
		}

		[Token(Token = "0x6000184")]
		[Address(RVA = "0x451E9C", Offset = "0x451E9C", VA = "0x451E9C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000185")]
		[Address(RVA = "0x452564", Offset = "0x452564", VA = "0x452564")]
		private void Update()
		{
		}

		[Token(Token = "0x6000188")]
		[Address(RVA = "0x4521B8", Offset = "0x4521B8", VA = "0x4521B8")]
		private void TransitionToState(State newState)
		{
		}

		[Token(Token = "0x6000189")]
		[Address(RVA = "0x452580", Offset = "0x452580", VA = "0x452580")]
		private void UpdateCheckForNextTimedTransition()
		{
		}

		[Token(Token = "0x600018A")]
		[Address(RVA = "0x45267C", Offset = "0x45267C", VA = "0x45267C")]
		private void UpdateMatchTimer()
		{
		}

		[Token(Token = "0x600018B")]
		[Address(RVA = "0x452978", Offset = "0x452978", VA = "0x452978")]
		private void SetupForIdle()
		{
		}

		[Token(Token = "0x600018C")]
		[Address(RVA = "0x452CE8", Offset = "0x452CE8", VA = "0x452CE8")]
		private void SetupForPractice()
		{
		}

		[Token(Token = "0x600018D")]
		[Address(RVA = "0x453664", Offset = "0x453664", VA = "0x453664")]
		private Player MatchPlayerAddedCallback(int slot, User user)
		{
			return null;
		}

		[Token(Token = "0x600018E")]
		[Address(RVA = "0x452A54", Offset = "0x452A54", VA = "0x452A54")]
		private void MoveCameraToIdlePosition()
		{
		}

		[Token(Token = "0x600018F")]
		[Address(RVA = "0x452E34", Offset = "0x452E34", VA = "0x452E34")]
		private void MoveCameraToMatchPosition()
		{
		}

		[Token(Token = "0x6000190")]
		[Address(RVA = "0x453A48", Offset = "0x453A48", VA = "0x453A48")]
		public void StartPracticeMatch()
		{
		}

		[Token(Token = "0x6000191")]
		[Address(RVA = "0x453A5C", Offset = "0x453A5C", VA = "0x453A5C")]
		public void PlayOnlineOrCancel()
		{
		}

		[Token(Token = "0x6000192")]
		[Address(RVA = "0x453C68", Offset = "0x453C68", VA = "0x453C68")]
		private void OnMatchFoundCallback(bool success)
		{
		}

		[Token(Token = "0x6000193")]
		[Address(RVA = "0x453C80", Offset = "0x453C80", VA = "0x453C80")]
		private float StartTimeOfferCallback(float remoteTime)
		{
			return default(float);
		}

		[Token(Token = "0x6000194")]
		[Address(RVA = "0x453DEC", Offset = "0x453DEC", VA = "0x453DEC")]
		private void MostWinsLeaderboardCallback(SortedDictionary<int, LeaderboardEntry> entries)
		{
		}

		[Token(Token = "0x6000195")]
		[Address(RVA = "0x4544A0", Offset = "0x4544A0", VA = "0x4544A0")]
		private void HighestScoreLeaderboardCallback(SortedDictionary<int, LeaderboardEntry> entries)
		{
		}

		[Token(Token = "0x6000196")]
		[Address(RVA = "0x45301C", Offset = "0x45301C", VA = "0x45301C")]
		private void CalculateMatchResults()
		{
		}

		[Token(Token = "0x6000197")]
		[Address(RVA = "0x4537E4", Offset = "0x4537E4", VA = "0x4537E4")]
		private void DisplayAchievementFlytext()
		{
		}
	}
	[Token(Token = "0x2000038")]
	public class MatchmakingManager
	{
		[Token(Token = "0x2000039")]
		public delegate void OnEnqueueResult(bool successful);

		[Token(Token = "0x200003A")]
		public delegate Player OnMatchPlayerAdded(int slot, User user);

		[Token(Token = "0x4000127")]
		private const string NORMAL_POOL = "NORMAL_QUICKMATCH";

		[Token(Token = "0x4000128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private ulong m_matchRoom;

		[Token(Token = "0x4000129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Dictionary<ulong, User> m_remotePlayers;

		[Token(Token = "0x400012A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private OnEnqueueResult m_enqueueCallback;

		[Token(Token = "0x400012B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private OnMatchPlayerAdded m_playerCallback;

		[Token(Token = "0x1700002D")]
		public OnEnqueueResult EnqueueResultCallback
		{
			[Token(Token = "0x6000199")]
			[Address(RVA = "0x454D60", Offset = "0x454D60", VA = "0x454D60")]
			private get
			{
				return null;
			}
			[Token(Token = "0x600019A")]
			[Address(RVA = "0x452108", Offset = "0x452108", VA = "0x452108")]
			set
			{
			}
		}

		[Token(Token = "0x1700002E")]
		public OnMatchPlayerAdded MatchPlayerAddedCallback
		{
			[Token(Token = "0x600019B")]
			[Address(RVA = "0x454D68", Offset = "0x454D68", VA = "0x454D68")]
			private get
			{
				return null;
			}
			[Token(Token = "0x600019C")]
			[Address(RVA = "0x452124", Offset = "0x452124", VA = "0x452124")]
			set
			{
			}
		}

		[Token(Token = "0x6000198")]
		[Address(RVA = "0x454C40", Offset = "0x454C40", VA = "0x454C40")]
		public MatchmakingManager()
		{
		}

		[Token(Token = "0x600019D")]
		[Address(RVA = "0x453B64", Offset = "0x453B64", VA = "0x453B64")]
		public void QueueForMatch()
		{
		}

		[Token(Token = "0x600019E")]
		[Address(RVA = "0x454D70", Offset = "0x454D70", VA = "0x454D70")]
		private void MatchmakingEnqueueCallback(Message msg)
		{
		}

		[Token(Token = "0x600019F")]
		[Address(RVA = "0x455080", Offset = "0x455080", VA = "0x455080")]
		private void MatchFoundCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x60001A0")]
		[Address(RVA = "0x4551D8", Offset = "0x4551D8", VA = "0x4551D8")]
		private void MatchmakingJoinRoomCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x60001A1")]
		[Address(RVA = "0x455CDC", Offset = "0x455CDC", VA = "0x455CDC")]
		private void MatchmakingRoomUpdateCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x60001A2")]
		[Address(RVA = "0x453454", Offset = "0x453454", VA = "0x453454")]
		public void EndMatch()
		{
		}

		[Token(Token = "0x60001A3")]
		[Address(RVA = "0x453C44", Offset = "0x453C44", VA = "0x453C44")]
		public void LeaveQueue()
		{
		}
	}
	[Token(Token = "0x200003B")]
	public class P2PManager
	{
		[Token(Token = "0x200003C")]
		private class RemotePlayerData
		{
			[Token(Token = "0x400013F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public PeerConnectionState state;

			[Token(Token = "0x4000140")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public RemotePlayer player;

			[Token(Token = "0x4000141")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float remoteTimeOffset;

			[Token(Token = "0x4000142")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float lastReceivedBallsTime;

			[Token(Token = "0x4000143")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public readonly Dictionary<int, P2PNetworkBall> activeBalls;

			[Token(Token = "0x60001CD")]
			[Address(RVA = "0x4580A8", Offset = "0x4580A8", VA = "0x4580A8")]
			public RemotePlayerData()
			{
			}
		}

		[Token(Token = "0x200003D")]
		public delegate float StartTimeOffer(float remoteTime);

		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly Dictionary<ulong, RemotePlayerData> m_remotePlayers;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float m_timeForNextBallUpdate;

		[Token(Token = "0x400012E")]
		private const byte TIME_SYNC_MESSAGE = 1;

		[Token(Token = "0x400012F")]
		private const uint TIME_SYNC_MESSAGE_SIZE = 5u;

		[Token(Token = "0x4000130")]
		private const int TIME_SYNC_MESSAGE_COUNT = 7;

		[Token(Token = "0x4000131")]
		private const byte START_TIME_MESSAGE = 2;

		[Token(Token = "0x4000132")]
		private const uint START_TIME_MESSAGE_SIZE = 5u;

		[Token(Token = "0x4000133")]
		private const byte BACKBOARD_UPDATE_MESSAGE = 3;

		[Token(Token = "0x4000134")]
		private const uint BACKBOARD_UPDATE_MESSAGE_SIZE = 41u;

		[Token(Token = "0x4000135")]
		private const byte LOCAL_BALLS_UPDATE_MESSAGE = 4;

		[Token(Token = "0x4000136")]
		private const uint LOCAL_BALLS_UPDATE_MESSATE_SIZE_MAX = 353u;

		[Token(Token = "0x4000137")]
		private const float LOCAL_BALLS_UPDATE_DELAY = 0.1f;

		[Token(Token = "0x4000138")]
		private const byte SCORE_UPDATE_MESSAGE = 5;

		[Token(Token = "0x4000139")]
		private const uint SCORE_UPDATE_MESSAGE_SIZE = 5u;

		[Token(Token = "0x400013A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Dictionary<int, P2PNetworkBall> m_localBalls;

		[Token(Token = "0x400013B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private readonly byte[] readBuffer;

		[Token(Token = "0x400013C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Dictionary<ulong, List<float>> m_remoteSyncTimeCache;

		[Token(Token = "0x400013D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly Dictionary<ulong, float> m_remoteSentTimeCache;

		[Token(Token = "0x400013E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private StartTimeOffer m_startTimeOfferCallback;

		[Token(Token = "0x1700002F")]
		public StartTimeOffer StartTimeOfferCallback
		{
			[Token(Token = "0x60001B5")]
			[Address(RVA = "0x4590F4", Offset = "0x4590F4", VA = "0x4590F4")]
			private get
			{
				return null;
			}
			[Token(Token = "0x60001B6")]
			[Address(RVA = "0x452140", Offset = "0x452140", VA = "0x452140")]
			set
			{
			}
		}

		[Token(Token = "0x60001AC")]
		[Address(RVA = "0x4565DC", Offset = "0x4565DC", VA = "0x4565DC")]
		public P2PManager()
		{
		}

		[Token(Token = "0x60001AD")]
		[Address(RVA = "0x4567C0", Offset = "0x4567C0", VA = "0x4567C0")]
		public void UpdateNetwork()
		{
		}

		[Token(Token = "0x60001AE")]
		[Address(RVA = "0x455988", Offset = "0x455988", VA = "0x455988")]
		public void AddRemotePlayer(RemotePlayer player)
		{
		}

		[Token(Token = "0x60001AF")]
		[Address(RVA = "0x4562F0", Offset = "0x4562F0", VA = "0x4562F0")]
		public void DisconnectAll()
		{
		}

		[Token(Token = "0x60001B0")]
		[Address(RVA = "0x458134", Offset = "0x458134", VA = "0x458134")]
		private void PeerConnectRequestCallback(Message<NetworkingPeer> msg)
		{
		}

		[Token(Token = "0x60001B1")]
		[Address(RVA = "0x458460", Offset = "0x458460", VA = "0x458460")]
		private void ConnectionStateChangedCallback(Message<NetworkingPeer> msg)
		{
		}

		[Token(Token = "0x60001B2")]
		[Address(RVA = "0x458A54", Offset = "0x458A54", VA = "0x458A54")]
		private void SendTimeSyncMessage(ulong remoteID)
		{
		}

		[Token(Token = "0x60001B3")]
		[Address(RVA = "0x456A98", Offset = "0x456A98", VA = "0x456A98")]
		private void ReadTimeSyncMessage(ulong remoteID, byte[] msg)
		{
		}

		[Token(Token = "0x60001B4")]
		[Address(RVA = "0x459000", Offset = "0x459000", VA = "0x459000")]
		private float ShiftRemoteTime(ulong remoteID, float remoteTime)
		{
			return default(float);
		}

		[Token(Token = "0x60001B7")]
		[Address(RVA = "0x458D9C", Offset = "0x458D9C", VA = "0x458D9C")]
		private void OfferMatchStartTime()
		{
		}

		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x457390", Offset = "0x457390", VA = "0x457390")]
		private void ReceiveMatchStartTimeOffer(ulong remoteID, byte[] msg)
		{
		}

		[Token(Token = "0x60001B9")]
		[Address(RVA = "0x45934C", Offset = "0x45934C", VA = "0x45934C")]
		public void SendBackboardUpdate(float time, Vector3 pos, Vector3 moveDir, Vector3 nextMoveDir)
		{
		}

		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x4573FC", Offset = "0x4573FC", VA = "0x4573FC")]
		private void ReceiveBackboardUpdate(ulong remoteID, byte[] msg)
		{
		}

		[Token(Token = "0x60001BB")]
		[Address(RVA = "0x451D38", Offset = "0x451D38", VA = "0x451D38")]
		public void AddNetworkBall(GameObject ball)
		{
		}

		[Token(Token = "0x60001BC")]
		[Address(RVA = "0x45992C", Offset = "0x45992C", VA = "0x45992C")]
		public void RemoveNetworkBall(GameObject ball)
		{
		}

		[Token(Token = "0x60001BD")]
		[Address(RVA = "0x457BB8", Offset = "0x457BB8", VA = "0x457BB8")]
		private void SendLocalBallTransforms()
		{
		}

		[Token(Token = "0x60001BE")]
		[Address(RVA = "0x457584", Offset = "0x457584", VA = "0x457584")]
		private void ReceiveBallTransforms(ulong remoteID, byte[] msg, ulong msgLength)
		{
		}

		[Token(Token = "0x60001BF")]
		[Address(RVA = "0x451600", Offset = "0x451600", VA = "0x451600")]
		public void SendScoreUpdate(uint score)
		{
		}

		[Token(Token = "0x60001C0")]
		[Address(RVA = "0x457AE0", Offset = "0x457AE0", VA = "0x457AE0")]
		private void ReceiveScoredUpdate(ulong remoteID, byte[] msg)
		{
		}

		[Token(Token = "0x60001C1")]
		[Address(RVA = "0x459600", Offset = "0x459600", VA = "0x459600")]
		private void PackVector3(Vector3 vec, byte[] buf, ref int offset)
		{
		}

		[Token(Token = "0x60001C2")]
		[Address(RVA = "0x459650", Offset = "0x459650", VA = "0x459650")]
		private Vector3 UnpackVector3(byte[] buf, ref int offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60001C3")]
		[Address(RVA = "0x45A22C", Offset = "0x45A22C", VA = "0x45A22C")]
		private void PackQuaternion(Quaternion quat, byte[] buf, ref int offset)
		{
		}

		[Token(Token = "0x60001C4")]
		[Address(RVA = "0x458C38", Offset = "0x458C38", VA = "0x458C38")]
		private void PackFloat(float value, byte[] buf, ref int offset)
		{
		}

		[Token(Token = "0x60001C5")]
		[Address(RVA = "0x458D00", Offset = "0x458D00", VA = "0x458D00")]
		private float UnpackFloat(byte[] buf, ref int offset)
		{
			return default(float);
		}

		[Token(Token = "0x60001C6")]
		[Address(RVA = "0x45930C", Offset = "0x45930C", VA = "0x45930C")]
		private float UnpackTime(ulong remoteID, byte[] buf, ref int offset)
		{
			return default(float);
		}

		[Token(Token = "0x60001C7")]
		[Address(RVA = "0x459A3C", Offset = "0x459A3C", VA = "0x459A3C")]
		private void PackInt32(int value, byte[] buf, ref int offset)
		{
		}

		[Token(Token = "0x60001C8")]
		[Address(RVA = "0x459B84", Offset = "0x459B84", VA = "0x459B84")]
		private int UnpackInt32(byte[] buf, ref int offset)
		{
			return default(int);
		}

		[Token(Token = "0x60001C9")]
		[Address(RVA = "0x45A0C4", Offset = "0x45A0C4", VA = "0x45A0C4")]
		private void PackUint32(uint value, byte[] buf, ref int offset)
		{
		}

		[Token(Token = "0x60001CA")]
		[Address(RVA = "0x45A18C", Offset = "0x45A18C", VA = "0x45A18C")]
		private uint UnpackUint32(byte[] buf, ref int offset)
		{
			return default(uint);
		}

		[Token(Token = "0x60001CB")]
		[Address(RVA = "0x4599F0", Offset = "0x4599F0", VA = "0x4599F0")]
		private void PackBool(bool value, byte[] buf, ref int offset)
		{
		}

		[Token(Token = "0x60001CC")]
		[Address(RVA = "0x459B34", Offset = "0x459B34", VA = "0x459B34")]
		private bool UnpackBool(byte[] buf, ref int offset)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200003E")]
	public class P2PNetworkBall : MonoBehaviour
	{
		[Token(Token = "0x4000144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float lastCollisionTime;

		[Token(Token = "0x4000145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Rigidbody rigidBody;

		[Token(Token = "0x17000030")]
		public Vector3 velocity
		{
			[Token(Token = "0x60001D4")]
			[Address(RVA = "0x459B04", Offset = "0x459B04", VA = "0x459B04")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60001D2")]
		[Address(RVA = "0x45A36C", Offset = "0x45A36C", VA = "0x45A36C")]
		public P2PNetworkBall()
		{
		}

		[Token(Token = "0x60001D3")]
		[Address(RVA = "0x45A374", Offset = "0x45A374", VA = "0x45A374")]
		private void Awake()
		{
		}

		[Token(Token = "0x60001D5")]
		[Address(RVA = "0x4599C4", Offset = "0x4599C4", VA = "0x4599C4")]
		public bool IsHeld()
		{
			return default(bool);
		}

		[Token(Token = "0x60001D6")]
		[Address(RVA = "0x459F2C", Offset = "0x459F2C", VA = "0x459F2C")]
		public void ProcessRemoteUpdate(float remoteTime, bool isHeld, Vector3 pos, Vector3 vel)
		{
		}

		[Token(Token = "0x60001D7")]
		[Address(RVA = "0x45A3F8", Offset = "0x45A3F8", VA = "0x45A3F8")]
		private Vector3 estimatePosition(Vector3 startPosition, Vector3 startVelocty, float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60001D8")]
		[Address(RVA = "0x45A594", Offset = "0x45A594", VA = "0x45A594")]
		private Vector3 estimateVelocity(Vector3 startVelocity, float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60001D9")]
		[Address(RVA = "0x45A720", Offset = "0x45A720", VA = "0x45A720")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60001DA")]
		[Address(RVA = "0x45A740", Offset = "0x45A740", VA = "0x45A740")]
		private void OnDestroy()
		{
		}
	}
	[Token(Token = "0x200003F")]
	public class P2PNetworkGoal : MonoBehaviour
	{
		[Token(Token = "0x4000146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private GoalMover m_goal;

		[Token(Token = "0x4000147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector3 m_lastSentMoveDirection;

		[Token(Token = "0x4000148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool m_sendUpdates;

		[Token(Token = "0x17000031")]
		public bool SendUpdates
		{
			[Token(Token = "0x60001DC")]
			[Address(RVA = "0x45A788", Offset = "0x45A788", VA = "0x45A788")]
			set
			{
			}
		}

		[Token(Token = "0x60001DB")]
		[Address(RVA = "0x45A780", Offset = "0x45A780", VA = "0x45A780")]
		public P2PNetworkGoal()
		{
		}

		[Token(Token = "0x60001DD")]
		[Address(RVA = "0x45A790", Offset = "0x45A790", VA = "0x45A790")]
		private void Awake()
		{
		}

		[Token(Token = "0x60001DE")]
		[Address(RVA = "0x45A814", Offset = "0x45A814", VA = "0x45A814")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60001DF")]
		[Address(RVA = "0x45A8F8", Offset = "0x45A8F8", VA = "0x45A8F8")]
		public void SendBackboardUpdate()
		{
		}

		[Token(Token = "0x60001E0")]
		[Address(RVA = "0x4596A8", Offset = "0x4596A8", VA = "0x4596A8")]
		public void RemoteBackboardUpdate(float remoteTime, Vector3 pos, Vector3 moveDir, Vector3 nextMoveDir)
		{
		}
	}
	[Token(Token = "0x2000040")]
	public class PlatformManager : MonoBehaviour
	{
		[Token(Token = "0x2000041")]
		public enum State
		{
			[Token(Token = "0x4000152")]
			INITIALIZING,
			[Token(Token = "0x4000153")]
			WAITING_TO_PRACTICE_OR_MATCHMAKE,
			[Token(Token = "0x4000154")]
			MATCH_TRANSITION,
			[Token(Token = "0x4000155")]
			PLAYING_A_LOCAL_MATCH,
			[Token(Token = "0x4000156")]
			PLAYING_A_NETWORKED_MATCH
		}

		[Token(Token = "0x4000149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PlatformManager s_instance;

		[Token(Token = "0x400014A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private MatchmakingManager m_matchmaking;

		[Token(Token = "0x400014B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private P2PManager m_p2p;

		[Token(Token = "0x400014C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private LeaderboardManager m_leaderboards;

		[Token(Token = "0x400014D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AchievementsManager m_achievements;

		[Token(Token = "0x400014E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private State m_currentState;

		[Token(Token = "0x400014F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ulong m_myID;

		[Token(Token = "0x4000150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string m_myOculusID;

		[Token(Token = "0x17000032")]
		public static MatchmakingManager Matchmaking
		{
			[Token(Token = "0x60001EA")]
			[Address(RVA = "0x452084", Offset = "0x452084", VA = "0x452084")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000033")]
		public static P2PManager P2P
		{
			[Token(Token = "0x60001EB")]
			[Address(RVA = "0x451588", Offset = "0x451588", VA = "0x451588")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000034")]
		public static LeaderboardManager Leaderboards
		{
			[Token(Token = "0x60001EC")]
			[Address(RVA = "0x452148", Offset = "0x452148", VA = "0x452148")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000035")]
		public static AchievementsManager Achievements
		{
			[Token(Token = "0x60001ED")]
			[Address(RVA = "0x454BC8", Offset = "0x454BC8", VA = "0x454BC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000036")]
		public static State CurrentState
		{
			[Token(Token = "0x60001EE")]
			[Address(RVA = "0x44FD18", Offset = "0x44FD18", VA = "0x44FD18")]
			get
			{
				return default(State);
			}
		}

		[Token(Token = "0x17000037")]
		public static ulong MyID
		{
			[Token(Token = "0x60001EF")]
			[Address(RVA = "0x450540", Offset = "0x450540", VA = "0x450540")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x17000038")]
		public static string MyOculusID
		{
			[Token(Token = "0x60001F0")]
			[Address(RVA = "0x45351C", Offset = "0x45351C", VA = "0x45351C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001E1")]
		[Address(RVA = "0x45AA0C", Offset = "0x45AA0C", VA = "0x45AA0C")]
		public PlatformManager()
		{
		}

		[Token(Token = "0x60001E2")]
		[Address(RVA = "0x45AA14", Offset = "0x45AA14", VA = "0x45AA14")]
		private void Update()
		{
		}

		[Token(Token = "0x60001E3")]
		[Address(RVA = "0x45AA54", Offset = "0x45AA54", VA = "0x45AA54")]
		private void Awake()
		{
		}

		[Token(Token = "0x60001E4")]
		[Address(RVA = "0x45AC78", Offset = "0x45AC78", VA = "0x45AC78")]
		private void Start()
		{
		}

		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x45AD28", Offset = "0x45AD28", VA = "0x45AD28")]
		private void IsEntitledCallback(Message msg)
		{
		}

		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x45AF30", Offset = "0x45AF30", VA = "0x45AF30")]
		private void GetLoggedInUserCallback(Message<User> msg)
		{
		}

		[Token(Token = "0x60001E7")]
		[Address(RVA = "0x4561D8", Offset = "0x4561D8", VA = "0x4561D8")]
		public static void TerminateWithError(Message msg)
		{
		}

		[Token(Token = "0x60001E8")]
		[Address(RVA = "0x45B04C", Offset = "0x45B04C", VA = "0x45B04C")]
		public void QuitButtonPressed()
		{
		}

		[Token(Token = "0x60001E9")]
		[Address(RVA = "0x45B058", Offset = "0x45B058", VA = "0x45B058")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60001F1")]
		[Address(RVA = "0x452BE8", Offset = "0x452BE8", VA = "0x452BE8")]
		public static void TransitionToState(State newState)
		{
		}
	}
	[Token(Token = "0x2000042")]
	public abstract class Player : MonoBehaviour
	{
		[Token(Token = "0x4000157")]
		public const uint MAX_BALLS = 6u;

		[Token(Token = "0x4000158")]
		private const float INITIAL_FORCE = 870f;

		[Token(Token = "0x4000159")]
		private const float RESPAWN_SECONDS = 2f;

		[Token(Token = "0x400015A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private uint m_score;

		[Token(Token = "0x400015B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Text m_scoreUI;

		[Token(Token = "0x400015C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private GameObject m_ballPrefab;

		[Token(Token = "0x400015D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BallEjector m_ballEjector;

		[Token(Token = "0x400015E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Queue<GameObject> m_balls;

		[Token(Token = "0x400015F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject m_heldBall;

		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_nextSpawnTime;

		[Token(Token = "0x17000039")]
		public virtual uint Score
		{
			[Token(Token = "0x60001F3")]
			[Address(RVA = "0x4515F8", Offset = "0x4515F8", VA = "0x4515F8", Slot = "4")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x60001F4")]
			[Address(RVA = "0x4514B0", Offset = "0x4514B0", VA = "0x4514B0", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x1700003A")]
		public GameObject BallPrefab
		{
			[Token(Token = "0x60001F5")]
			[Address(RVA = "0x45B08C", Offset = "0x45B08C", VA = "0x45B08C")]
			set
			{
			}
		}

		[Token(Token = "0x1700003B")]
		protected bool HasBall
		{
			[Token(Token = "0x60001F6")]
			[Address(RVA = "0x4519D8", Offset = "0x4519D8", VA = "0x4519D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x4513E0", Offset = "0x4513E0", VA = "0x4513E0")]
		protected Player()
		{
		}

		[Token(Token = "0x60001F7")]
		[Address(RVA = "0x45B094", Offset = "0x45B094", VA = "0x45B094")]
		private void Start()
		{
		}

		[Token(Token = "0x60001F8")]
		[Address(RVA = "0x459C20", Offset = "0x459C20", VA = "0x459C20")]
		public GameObject CreateBall()
		{
			return null;
		}

		[Token(Token = "0x60001F9")]
		[Address(RVA = "0x451CC0", Offset = "0x451CC0", VA = "0x451CC0")]
		protected GameObject CheckSpawnBall()
		{
			return null;
		}

		[Token(Token = "0x60001FA")]
		[Address(RVA = "0x451A68", Offset = "0x451A68", VA = "0x451A68")]
		protected GameObject ShootBall()
		{
			return null;
		}

		[Token(Token = "0x60001FB")]
		[Address(RVA = "0x45B1A0", Offset = "0x45B1A0", VA = "0x45B1A0")]
		private void OnDestroy()
		{
		}
	}
	[Token(Token = "0x2000043")]
	public class PlayerArea : MonoBehaviour
	{
		[Token(Token = "0x4000161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private GameObject m_ballPrefab;

		[Token(Token = "0x4000162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameObject m_playerHead;

		[Token(Token = "0x4000163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Text m_nameText;

		[Token(Token = "0x4000164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private P2PNetworkGoal m_p2pGoal;

		[Token(Token = "0x1700003C")]
		public Player Player
		{
			[Token(Token = "0x60001FD")]
			[Address(RVA = "0x454B54", Offset = "0x454B54", VA = "0x454B54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003D")]
		public Text NameText
		{
			[Token(Token = "0x60001FE")]
			[Address(RVA = "0x454C38", Offset = "0x454C38", VA = "0x454C38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x45B300", Offset = "0x45B300", VA = "0x45B300")]
		public PlayerArea()
		{
		}

		[Token(Token = "0x60001FF")]
		[Address(RVA = "0x45B308", Offset = "0x45B308", VA = "0x45B308")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000200")]
		public T SetupForPlayer<T>(string name) where T : Player
		{
			return null;
		}
	}
	[Token(Token = "0x2000044")]
	public class RemotePlayer : Player
	{
		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private User m_user;

		[Token(Token = "0x4000166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private P2PNetworkGoal m_goal;

		[Token(Token = "0x1700003E")]
		public User User
		{
			[Token(Token = "0x6000202")]
			[Address(RVA = "0x4537DC", Offset = "0x4537DC", VA = "0x4537DC")]
			set
			{
			}
		}

		[Token(Token = "0x1700003F")]
		public ulong ID
		{
			[Token(Token = "0x6000203")]
			[Address(RVA = "0x458088", Offset = "0x458088", VA = "0x458088")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x17000040")]
		public P2PNetworkGoal Goal
		{
			[Token(Token = "0x6000204")]
			[Address(RVA = "0x4596A0", Offset = "0x4596A0", VA = "0x4596A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000205")]
			[Address(RVA = "0x45B468", Offset = "0x45B468", VA = "0x45B468")]
			set
			{
			}
		}

		[Token(Token = "0x17000041")]
		public override uint Score
		{
			[Token(Token = "0x6000206")]
			[Address(RVA = "0x45B470", Offset = "0x45B470", VA = "0x45B470", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6000201")]
		[Address(RVA = "0x45B464", Offset = "0x45B464", VA = "0x45B464")]
		public RemotePlayer()
		{
		}

		[Token(Token = "0x6000207")]
		[Address(RVA = "0x45A228", Offset = "0x45A228", VA = "0x45A228")]
		public void ReceiveRemoteScore(uint score)
		{
		}
	}
	[Token(Token = "0x2000045")]
	public class VREyeRaycaster : MonoBehaviour
	{
		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private EventSystem m_eventSystem;

		[Token(Token = "0x4000168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Button m_currentButton;

		[Token(Token = "0x6000208")]
		[Address(RVA = "0x45B474", Offset = "0x45B474", VA = "0x45B474")]
		public VREyeRaycaster()
		{
		}

		[Token(Token = "0x6000209")]
		[Address(RVA = "0x45B47C", Offset = "0x45B47C", VA = "0x45B47C")]
		private void Update()
		{
		}
	}
}
namespace Oculus.Platform.Samples.VrVoiceChat
{
	[Token(Token = "0x2000046")]
	public class P2PManager
	{
		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float UPDATE_DELAY;

		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private ulong m_remoteID;

		[Token(Token = "0x400016B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PeerConnectionState m_state;

		[Token(Token = "0x400016C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float m_timeForNextUpdate;

		[Token(Token = "0x400016D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly byte PACKET_SIZE;

		[Token(Token = "0x400016E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		private static readonly byte PACKET_FORMAT;

		[Token(Token = "0x400016F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly byte[] sendTransformBuffer;

		[Token(Token = "0x4000170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly byte[] receiveTransformBuffer;

		[Token(Token = "0x4000171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 receivedPosition;

		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 receivedPositionPrior;

		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion receivedRotation;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion receivedRotationPrior;

		[Token(Token = "0x4000175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float receivedTime;

		[Token(Token = "0x17000042")]
		public bool Connected
		{
			[Token(Token = "0x600020D")]
			[Address(RVA = "0x45BB80", Offset = "0x45BB80", VA = "0x45BB80")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000043")]
		public bool ShouldSendHeadUpdate
		{
			[Token(Token = "0x6000210")]
			[Address(RVA = "0x45C59C", Offset = "0x45C59C", VA = "0x45C59C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600020A")]
		[Address(RVA = "0x45B728", Offset = "0x45B728", VA = "0x45B728")]
		public P2PManager(Transform initialHeadTransform)
		{
		}

		[Token(Token = "0x600020B")]
		[Address(RVA = "0x45B930", Offset = "0x45B930", VA = "0x45B930")]
		public void ConnectTo(ulong userID)
		{
		}

		[Token(Token = "0x600020C")]
		[Address(RVA = "0x45BB38", Offset = "0x45BB38", VA = "0x45BB38")]
		public void Disconnect()
		{
		}

		[Token(Token = "0x600020E")]
		[Address(RVA = "0x45BB90", Offset = "0x45BB90", VA = "0x45BB90")]
		private void PeerConnectRequestCallback(Message<NetworkingPeer> msg)
		{
		}

		[Token(Token = "0x600020F")]
		[Address(RVA = "0x45BE34", Offset = "0x45BE34", VA = "0x45BE34")]
		private void ConnectionStateChangedCallback(Message<NetworkingPeer> msg)
		{
		}

		[Token(Token = "0x6000211")]
		[Address(RVA = "0x45C5E0", Offset = "0x45C5E0", VA = "0x45C5E0")]
		public void SendHeadTransform(Transform headTransform)
		{
		}

		[Token(Token = "0x6000212")]
		[Address(RVA = "0x45C844", Offset = "0x45C844", VA = "0x45C844")]
		private void PackFloat(float f, byte[] buf, ref int offset)
		{
		}

		[Token(Token = "0x6000213")]
		[Address(RVA = "0x45C90C", Offset = "0x45C90C", VA = "0x45C90C")]
		public void GetRemoteHeadTransform(Transform headTransform)
		{
		}
	}
	[Token(Token = "0x2000047")]
	public class PlatformManager : MonoBehaviour
	{
		[Token(Token = "0x2000048")]
		public enum State
		{
			[Token(Token = "0x4000182")]
			INITIALIZING,
			[Token(Token = "0x4000183")]
			WAITING_TO_CALL_OR_ANSWER,
			[Token(Token = "0x4000184")]
			WAITING_FOR_ANSWER,
			[Token(Token = "0x4000185")]
			CONNECTED_IN_A_ROOM,
			[Token(Token = "0x4000186")]
			HANGUP
		}

		[Token(Token = "0x200040A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2BEE0", Offset = "0xC2BEE0")]
		private sealed class <SetActiveInvites>c__AnonStorey0
		{
			[Token(Token = "0x40016C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal RoomManager.Invite invite;

			[Token(Token = "0x6001A08")]
			[Address(RVA = "0x45F4C8", Offset = "0x45F4C8", VA = "0x45F4C8")]
			public <SetActiveInvites>c__AnonStorey0()
			{
			}

			[Token(Token = "0x6001A09")]
			[Address(RVA = "0x45F4D4", Offset = "0x45F4D4", VA = "0x45F4D4")]
			internal void <>m__0()
			{
			}
		}

		[Token(Token = "0x4000176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private GameObject m_invitesList;

		[Token(Token = "0x4000177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private GameObject m_invitePrefab;

		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Camera m_camera;

		[Token(Token = "0x4000179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject m_remoteHead;

		[Token(Token = "0x400017A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private State m_currentState;

		[Token(Token = "0x400017B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PlatformManager s_instance;

		[Token(Token = "0x400017C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RoomManager m_roomManager;

		[Token(Token = "0x400017D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private P2PManager m_p2pManager;

		[Token(Token = "0x400017E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VoipManager m_voipManager;

		[Token(Token = "0x400017F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ulong m_myID;

		[Token(Token = "0x4000180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string m_myOculusID;

		[Token(Token = "0x17000044")]
		public static State CurrentState
		{
			[Token(Token = "0x600021D")]
			[Address(RVA = "0x45E384", Offset = "0x45E384", VA = "0x45E384")]
			get
			{
				return default(State);
			}
		}

		[Token(Token = "0x17000045")]
		public static ulong MyID
		{
			[Token(Token = "0x600021E")]
			[Address(RVA = "0x45BA00", Offset = "0x45BA00", VA = "0x45BA00")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x17000046")]
		public static string MyOculusID
		{
			[Token(Token = "0x600021F")]
			[Address(RVA = "0x45E420", Offset = "0x45E420", VA = "0x45E420")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000215")]
		[Address(RVA = "0x45CFA8", Offset = "0x45CFA8", VA = "0x45CFA8")]
		public PlatformManager()
		{
		}

		[Token(Token = "0x6000216")]
		[Address(RVA = "0x45CFB0", Offset = "0x45CFB0", VA = "0x45CFB0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000217")]
		[Address(RVA = "0x45D2AC", Offset = "0x45D2AC", VA = "0x45D2AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000218")]
		[Address(RVA = "0x45DCB8", Offset = "0x45DCB8", VA = "0x45DCB8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000219")]
		[Address(RVA = "0x45DD68", Offset = "0x45DD68", VA = "0x45DD68")]
		private void IsEntitledCallback(Message msg)
		{
		}

		[Token(Token = "0x600021A")]
		[Address(RVA = "0x45DFA0", Offset = "0x45DFA0", VA = "0x45DFA0")]
		private void GetLoggedInUserCallback(Message<User> msg)
		{
		}

		[Token(Token = "0x600021B")]
		[Address(RVA = "0x45E15C", Offset = "0x45E15C", VA = "0x45E15C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600021C")]
		[Address(RVA = "0x45DE88", Offset = "0x45DE88", VA = "0x45DE88")]
		public static void TerminateWithError(Message msg)
		{
		}

		[Token(Token = "0x6000220")]
		[Address(RVA = "0x45E5EC", Offset = "0x45E5EC", VA = "0x45E5EC")]
		public void CallFriendOnClick()
		{
		}

		[Token(Token = "0x6000221")]
		[Address(RVA = "0x45E76C", Offset = "0x45E76C", VA = "0x45E76C")]
		public void HangupOnClick()
		{
		}

		[Token(Token = "0x6000222")]
		[Address(RVA = "0x45E790", Offset = "0x45E790", VA = "0x45E790")]
		public void QuitOnClick()
		{
		}

		[Token(Token = "0x6000223")]
		[Address(RVA = "0x45E79C", Offset = "0x45E79C", VA = "0x45E79C")]
		public static void AnswerCallOnClick(ulong roomID)
		{
		}

		[Token(Token = "0x6000224")]
		[Address(RVA = "0x45D534", Offset = "0x45D534", VA = "0x45D534")]
		public static void TransitionToState(State newState)
		{
		}

		[Token(Token = "0x6000225")]
		[Address(RVA = "0x45C1AC", Offset = "0x45C1AC", VA = "0x45C1AC")]
		public static void SetBackgroundColorForState()
		{
		}

		[Token(Token = "0x6000226")]
		[Address(RVA = "0x45EB14", Offset = "0x45EB14", VA = "0x45EB14")]
		public static void SetActiveInvites(List<RoomManager.Invite> invites)
		{
		}
	}
	[Token(Token = "0x2000049")]
	public class RoomManager
	{
		[Token(Token = "0x200004A")]
		public struct Invite
		{
			[Token(Token = "0x400018D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly ulong RoomID;

			[Token(Token = "0x400018E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly string OwnerID;

			[Token(Token = "0x6000239")]
			[Address(RVA = "0x461230", Offset = "0x461230", VA = "0x461230")]
			public Invite(ulong roomID, string owner)
			{
			}
		}

		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private ulong m_roomID;

		[Token(Token = "0x4000188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private User m_remoteUser;

		[Token(Token = "0x4000189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float INVITE_POLL_FREQ_SECONDS;

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float m_nextPollTime;

		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private HashSet<ulong> m_pendingRoomRequests;

		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private List<Invite> m_invites;

		[Token(Token = "0x17000047")]
		public ulong RemoteUserID
		{
			[Token(Token = "0x6000229")]
			[Address(RVA = "0x45E9DC", Offset = "0x45E9DC", VA = "0x45E9DC")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x17000048")]
		public string RemoteOculusID
		{
			[Token(Token = "0x600022A")]
			[Address(RVA = "0x45F564", Offset = "0x45F564", VA = "0x45F564")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000049")]
		public bool ShouldPollInviteList
		{
			[Token(Token = "0x6000230")]
			[Address(RVA = "0x45D0C8", Offset = "0x45D0C8", VA = "0x45D0C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000228")]
		[Address(RVA = "0x45DACC", Offset = "0x45DACC", VA = "0x45DACC")]
		public RoomManager()
		{
		}

		[Token(Token = "0x600022B")]
		[Address(RVA = "0x45F608", Offset = "0x45F608", VA = "0x45F608")]
		private void LaunchedFromAcceptingInviteCallback(Message<string> msg)
		{
		}

		[Token(Token = "0x600022C")]
		[Address(RVA = "0x45E128", Offset = "0x45E128", VA = "0x45E128")]
		public bool CheckForLaunchInvite()
		{
			return default(bool);
		}

		[Token(Token = "0x600022D")]
		[Address(RVA = "0x45E688", Offset = "0x45E688", VA = "0x45E688")]
		public void CreateRoomAndLaunchInviteMenu()
		{
		}

		[Token(Token = "0x600022E")]
		[Address(RVA = "0x45F7C8", Offset = "0x45F7C8", VA = "0x45F7C8")]
		private void CreateAndJoinPrivateRoomCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x600022F")]
		[Address(RVA = "0x45F960", Offset = "0x45F960", VA = "0x45F960")]
		private void OnLaunchInviteWorkflowComplete(Message msg)
		{
		}

		[Token(Token = "0x6000231")]
		[Address(RVA = "0x45D110", Offset = "0x45D110", VA = "0x45D110")]
		public void UpdateActiveInvitesList()
		{
		}

		[Token(Token = "0x6000232")]
		[Address(RVA = "0x45FA00", Offset = "0x45FA00", VA = "0x45FA00")]
		private void GetRoomInviteNotificationsCallback(Message msg_untyped)
		{
		}

		[Token(Token = "0x6000233")]
		[Address(RVA = "0x45FF08", Offset = "0x45FF08", VA = "0x45FF08")]
		private void GetRoomInfoCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000234")]
		[Address(RVA = "0x45E8EC", Offset = "0x45E8EC", VA = "0x45E8EC")]
		public void JoinExistingRoom(ulong roomID)
		{
		}

		[Token(Token = "0x6000235")]
		[Address(RVA = "0x460214", Offset = "0x460214", VA = "0x460214")]
		private void JoinRoomCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000236")]
		[Address(RVA = "0x4609C4", Offset = "0x4609C4", VA = "0x4609C4")]
		private void RoomUpdateCallback(Message<Room> msg)
		{
		}

		[Token(Token = "0x6000237")]
		[Address(RVA = "0x45E1E4", Offset = "0x45E1E4", VA = "0x45E1E4")]
		public void LeaveCurrentRoom()
		{
		}
	}
	[Token(Token = "0x200004B")]
	public class VoipManager
	{
		[Token(Token = "0x400018F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private ulong m_remoteID;

		[Token(Token = "0x4000190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PeerConnectionState m_state;

		[Token(Token = "0x4000191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private readonly GameObject m_remoteHead;

		[Token(Token = "0x1700004A")]
		public bool Connected
		{
			[Token(Token = "0x600023D")]
			[Address(RVA = "0x45EB04", Offset = "0x45EB04", VA = "0x45EB04")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600023A")]
		[Address(RVA = "0x45DBD4", Offset = "0x45DBD4", VA = "0x45DBD4")]
		public VoipManager(GameObject remoteHead)
		{
		}

		[Token(Token = "0x600023B")]
		[Address(RVA = "0x45E9F4", Offset = "0x45E9F4", VA = "0x45E9F4")]
		public void ConnectTo(ulong userID)
		{
		}

		[Token(Token = "0x600023C")]
		[Address(RVA = "0x45E29C", Offset = "0x45E29C", VA = "0x45E29C")]
		public void Disconnect()
		{
		}

		[Token(Token = "0x600023E")]
		[Address(RVA = "0x461624", Offset = "0x461624", VA = "0x461624")]
		private void VoipConnectRequestCallback(Message<NetworkingPeer> msg)
		{
		}

		[Token(Token = "0x600023F")]
		[Address(RVA = "0x461998", Offset = "0x461998", VA = "0x461998")]
		private void VoipStateChangedCallback(Message<NetworkingPeer> msg)
		{
		}
	}
	[Token(Token = "0x200004C")]
	public class VREyeRaycaster : MonoBehaviour
	{
		[Token(Token = "0x4000192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private EventSystem m_eventSystem;

		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Button m_currentButton;

		[Token(Token = "0x6000240")]
		[Address(RVA = "0x461D00", Offset = "0x461D00", VA = "0x461D00")]
		public VREyeRaycaster()
		{
		}

		[Token(Token = "0x6000241")]
		[Address(RVA = "0x461D08", Offset = "0x461D08", VA = "0x461D08")]
		private void Update()
		{
		}
	}
}
namespace Oculus.Platform
{
	[Token(Token = "0x200004D")]
	public class AbuseReportOptions
	{
		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr Handle;

		[Token(Token = "0x6000242")]
		[Address(RVA = "0xDC564C", Offset = "0xDC564C", VA = "0xDC564C")]
		public AbuseReportOptions()
		{
		}

		[Token(Token = "0x6000243")]
		[Address(RVA = "0xDC5788", Offset = "0xDC5788", VA = "0xDC5788")]
		public void SetPreventPeopleChooser(bool value)
		{
		}

		[Token(Token = "0x6000244")]
		[Address(RVA = "0xDC58DC", Offset = "0xDC58DC", VA = "0xDC58DC")]
		public void SetReportType(AbuseReportType value)
		{
		}

		[Token(Token = "0x6000245")]
		[Address(RVA = "0xDC5A30", Offset = "0xDC5A30", VA = "0xDC5A30")]
		public static explicit operator IntPtr(AbuseReportOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000246")]
		[Address(RVA = "0xDC5A88", Offset = "0xDC5A88", VA = "0xDC5A88", Slot = "1")]
		~AbuseReportOptions()
		{
		}
	}
	[Token(Token = "0x200004E")]
	public enum AbuseReportType
	{
		[Token(Token = "0x4000196")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2BF00", Offset = "0xC2BF00")]
		Unknown,
		[Token(Token = "0x4000197")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2BF34", Offset = "0xC2BF34")]
		Object,
		[Token(Token = "0x4000198")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2BF68", Offset = "0xC2BF68")]
		User
	}
	[Token(Token = "0x200004F")]
	public enum AchievementType
	{
		[Token(Token = "0x400019A")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2BF9C", Offset = "0xC2BF9C")]
		Unknown,
		[Token(Token = "0x400019B")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2BFD0", Offset = "0xC2BFD0")]
		Simple,
		[Token(Token = "0x400019C")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C004", Offset = "0xC2C004")]
		Bitfield,
		[Token(Token = "0x400019D")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C038", Offset = "0xC2C038")]
		Count
	}
	[Token(Token = "0x2000050")]
	public class AndroidPlatform
	{
		[Token(Token = "0x6000247")]
		[Address(RVA = "0xDC6FB0", Offset = "0xDC6FB0", VA = "0xDC6FB0")]
		public AndroidPlatform()
		{
		}

		[Token(Token = "0x6000248")]
		[Address(RVA = "0xDC6FB8", Offset = "0xDC6FB8", VA = "0xDC6FB8")]
		public bool Initialize(string appId)
		{
			return default(bool);
		}

		[Token(Token = "0x6000249")]
		[Address(RVA = "0xDC71BC", Offset = "0xDC71BC", VA = "0xDC71BC")]
		public Request<PlatformInitialize> AsyncInitialize(string appId)
		{
			return null;
		}
	}
	[Token(Token = "0x2000051")]
	public class ApplicationOptions
	{
		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr Handle;

		[Token(Token = "0x600024A")]
		[Address(RVA = "0xDC79B0", Offset = "0xDC79B0", VA = "0xDC79B0")]
		public ApplicationOptions()
		{
		}

		[Token(Token = "0x600024B")]
		[Address(RVA = "0xDC7AEC", Offset = "0xDC7AEC", VA = "0xDC7AEC")]
		public void SetDeeplinkMessage(string value)
		{
		}

		[Token(Token = "0x600024C")]
		[Address(RVA = "0xDC7738", Offset = "0xDC7738", VA = "0xDC7738")]
		public static explicit operator IntPtr(ApplicationOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600024D")]
		[Address(RVA = "0xDC7C48", Offset = "0xDC7C48", VA = "0xDC7C48", Slot = "1")]
		~ApplicationOptions()
		{
		}
	}
}
[Token(Token = "0x2000052")]
public class BufferedAudioStream
{
	[Token(Token = "0x400019F")]
	private const bool VerboseLogging = false;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private AudioSource audio;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float[] audioBuffer;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int writePos;

	[Token(Token = "0x40001A3")]
	private const float bufferLengthSeconds = 0.25f;

	[Token(Token = "0x40001A4")]
	private const int sampleRate = 48000;

	[Token(Token = "0x40001A5")]
	private const int bufferSize = 12000;

	[Token(Token = "0x40001A6")]
	private const float playbackDelayTimeSeconds = 0.05f;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float playbackDelayRemaining;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float remainingBufferTime;

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x16BEF4", Offset = "0x16BEF4", VA = "0x16BEF4")]
	public BufferedAudioStream(AudioSource audio)
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0x16C08C", Offset = "0x16C08C", VA = "0x16C08C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0x16C02C", Offset = "0x16C02C", VA = "0x16C02C")]
	private void Stop()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0x16C35C", Offset = "0x16C35C", VA = "0x16C35C")]
	public void AddData(float[] samples)
	{
	}
}
namespace Oculus.Platform
{
	[Token(Token = "0x2000053")]
	public static class Callback
	{
		[Token(Token = "0x2000054")]
		private class RequestCallback
		{
			[Token(Token = "0x40001AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private Message.Callback messageCallback;

			[Token(Token = "0x600025B")]
			[Address(RVA = "0xDCA0D8", Offset = "0xDCA0D8", VA = "0xDCA0D8")]
			public RequestCallback()
			{
			}

			[Token(Token = "0x600025C")]
			[Address(RVA = "0xDC983C", Offset = "0xDC983C", VA = "0xDC983C")]
			public RequestCallback(Message.Callback callback)
			{
			}

			[Token(Token = "0x600025D")]
			[Address(RVA = "0xDCA0E0", Offset = "0xDCA0E0", VA = "0xDCA0E0", Slot = "4")]
			public virtual void HandleMessage(Message msg)
			{
			}
		}

		[Token(Token = "0x2000055")]
		private sealed class RequestCallback<T> : RequestCallback
		{
			[Token(Token = "0x40001AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Message<T>.Callback callback;

			[Token(Token = "0x600025E")]
			public RequestCallback(Message<T>.Callback callback)
			{
			}

			[Token(Token = "0x600025F")]
			public override void HandleMessage(Message msg)
			{
			}
		}

		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<ulong, RequestCallback> requestIDsToCallbacks;

		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static Dictionary<Message.MessageType, RequestCallback> notificationCallbacks;

		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool hasRegisteredRoomInviteNotificationHandler;

		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static List<Message> pendingRoomInviteNotifications;

		[Token(Token = "0x6000252")]
		internal static void SetNotificationCallback<T>(Message.MessageType type, Message<T>.Callback callback)
		{
		}

		[Token(Token = "0x6000253")]
		[Address(RVA = "0xDC96FC", Offset = "0xDC96FC", VA = "0xDC96FC")]
		internal static void SetNotificationCallback(Message.MessageType type, Message.Callback callback)
		{
		}

		[Token(Token = "0x6000254")]
		internal static void OnComplete<T>(Request<T> request, Message<T>.Callback callback)
		{
		}

		[Token(Token = "0x6000255")]
		[Address(RVA = "0xDC985C", Offset = "0xDC985C", VA = "0xDC985C")]
		internal static void OnComplete(Request request, Message.Callback callback)
		{
		}

		[Token(Token = "0x6000256")]
		[Address(RVA = "0xDC9970", Offset = "0xDC9970", VA = "0xDC9970")]
		internal static void RunCallbacks()
		{
		}

		[Token(Token = "0x6000257")]
		[Address(RVA = "0xDC9CCC", Offset = "0xDC9CCC", VA = "0xDC9CCC")]
		internal static void RunLimitedCallbacks(uint limit)
		{
		}

		[Token(Token = "0x6000258")]
		[Address(RVA = "0xDC9DA4", Offset = "0xDC9DA4", VA = "0xDC9DA4")]
		private static void FlushRoomInviteNotificationQueue()
		{
		}

		[Token(Token = "0x6000259")]
		[Address(RVA = "0xDC9A1C", Offset = "0xDC9A1C", VA = "0xDC9A1C")]
		private static void HandleMessage(Message msg)
		{
		}
	}
	[Token(Token = "0x2000056")]
	public class CallbackRunner : MonoBehaviour
	{
		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool IsPersistantBetweenSceneLoads;

		[Token(Token = "0x6000260")]
		[Address(RVA = "0xDCA0F4", Offset = "0xDCA0F4", VA = "0xDCA0F4")]
		public CallbackRunner()
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000261")]
		[Address(RVA = "0xDCA104", Offset = "0xDCA104", VA = "0xDCA104")]
		private static extern void ovr_UnityResetTestPlatform();

		[Token(Token = "0x6000262")]
		[Address(RVA = "0xDCA1B4", Offset = "0xDCA1B4", VA = "0xDCA1B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000263")]
		[Address(RVA = "0xDCA300", Offset = "0xDCA300", VA = "0xDCA300")]
		private void Update()
		{
		}

		[Token(Token = "0x6000264")]
		[Address(RVA = "0xDCA310", Offset = "0xDCA310", VA = "0xDCA310")]
		private void OnDestroy()
		{
		}
	}
	[Token(Token = "0x2000057")]
	public class CAPI
	{
		[Token(Token = "0x2000058")]
		public struct ovrKeyValuePair
		{
			[Token(Token = "0x40001B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string key_;

			[Token(Token = "0x40001B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private KeyValuePairType valueType_;

			[Token(Token = "0x40001B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string stringValue_;

			[Token(Token = "0x40001B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int intValue_;

			[Token(Token = "0x40001B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public double doubleValue_;

			[Token(Token = "0x6000584")]
			[Address(RVA = "0x1F6220", Offset = "0x1F6220", VA = "0x1F6220")]
			public ovrKeyValuePair(string key, string value)
			{
			}

			[Token(Token = "0x6000585")]
			[Address(RVA = "0x1F6260", Offset = "0x1F6260", VA = "0x1F6260")]
			public ovrKeyValuePair(string key, int value)
			{
			}

			[Token(Token = "0x6000586")]
			[Address(RVA = "0x1F62A0", Offset = "0x1F62A0", VA = "0x1F62A0")]
			public ovrKeyValuePair(string key, double value)
			{
			}
		}

		[Token(Token = "0x2000059")]
		public struct ovrMatchmakingCriterion
		{
			[Token(Token = "0x40001B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string key_;

			[Token(Token = "0x40001B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public MatchmakingCriterionImportance importance_;

			[Token(Token = "0x40001BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public IntPtr parameterArray;

			[Token(Token = "0x40001BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public uint parameterArrayCount;

			[Token(Token = "0x6000587")]
			[Address(RVA = "0x1F6350", Offset = "0x1F6350", VA = "0x1F6350")]
			public ovrMatchmakingCriterion(string key, MatchmakingCriterionImportance importance)
			{
			}
		}

		[Token(Token = "0x200005A")]
		public struct ovrMatchmakingCustomQueryData
		{
			[Token(Token = "0x40001BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IntPtr dataArray;

			[Token(Token = "0x40001BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public uint dataArrayCount;

			[Token(Token = "0x40001BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public IntPtr criterionArray;

			[Token(Token = "0x40001BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public uint criterionArrayCount;
		}

		[Token(Token = "0x200005B")]
		public struct OculusInitParams
		{
			[Token(Token = "0x40001C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int sType;

			[Token(Token = "0x40001C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public string email;

			[Token(Token = "0x40001C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string password;

			[Token(Token = "0x40001C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ulong appId;

			[Token(Token = "0x40001C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string uriPrefixOverride;
		}

		[Token(Token = "0x200005C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xC2C06C", Offset = "0xC2C06C")]
		public delegate void FilterCallback([In][Out] short[] pcmData, UIntPtr pcmDataLength, int frequency, int numChannels);

		[Token(Token = "0x40001B0")]
		public const string DLL_NAME = "ovrplatformloader";

		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static UTF8Encoding nativeStringEncoding;

		[Token(Token = "0x40001B2")]
		public const int VoipFilterBufferSize = 480;

		[Token(Token = "0x6000265")]
		[Address(RVA = "0xDCA314", Offset = "0xDCA314", VA = "0xDCA314")]
		public CAPI()
		{
		}

		[Token(Token = "0x6000266")]
		[Address(RVA = "0xDCA31C", Offset = "0xDCA31C", VA = "0xDCA31C")]
		public static IntPtr ArrayOfStructsToIntPtr(Array ar)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000267")]
		[Address(RVA = "0xDCA544", Offset = "0xDCA544", VA = "0xDCA544")]
		public static ovrKeyValuePair[] DictionaryToOVRKeyValuePairs(Dictionary<string, object> dict)
		{
			return null;
		}

		[Token(Token = "0x6000268")]
		[Address(RVA = "0xDCACE0", Offset = "0xDCACE0", VA = "0xDCACE0")]
		public static byte[] IntPtrToByteArray(IntPtr data, ulong size)
		{
			return null;
		}

		[Token(Token = "0x6000269")]
		[Address(RVA = "0xDCAE00", Offset = "0xDCAE00", VA = "0xDCAE00")]
		public static Dictionary<string, string> DataStoreFromNative(IntPtr pointer)
		{
			return null;
		}

		[Token(Token = "0x600026A")]
		[Address(RVA = "0xDCB1C8", Offset = "0xDCB1C8", VA = "0xDCB1C8")]
		public static string StringFromNative(IntPtr pointer)
		{
			return null;
		}

		[Token(Token = "0x600026B")]
		[Address(RVA = "0xDCB32C", Offset = "0xDCB32C", VA = "0xDCB32C")]
		public static int GetNativeStringLengthNotIncludingNullTerminator(IntPtr pointer)
		{
			return default(int);
		}

		[Token(Token = "0x600026C")]
		[Address(RVA = "0xDCB3CC", Offset = "0xDCB3CC", VA = "0xDCB3CC")]
		public static DateTime DateTimeFromNative(ulong seconds_since_the_one_true_epoch)
		{
			return default(DateTime);
		}

		[Token(Token = "0x600026D")]
		[Address(RVA = "0xDCB480", Offset = "0xDCB480", VA = "0xDCB480")]
		public static byte[] BlobFromNative(uint size, IntPtr pointer)
		{
			return null;
		}

		[Token(Token = "0x600026E")]
		[Address(RVA = "0xDCB58C", Offset = "0xDCB58C", VA = "0xDCB58C")]
		public static byte[] FiledataFromNative(uint size, IntPtr pointer)
		{
			return null;
		}

		[Token(Token = "0x600026F")]
		[Address(RVA = "0xDCB65C", Offset = "0xDCB65C", VA = "0xDCB65C")]
		public static IntPtr StringToNative(string s)
		{
			return default(IntPtr);
		}

		[PreserveSig]
		[Token(Token = "0x6000270")]
		[Address(RVA = "0xDC70D0", Offset = "0xDC70D0", VA = "0xDC70D0")]
		public static extern bool ovr_UnityInitWrapper(string appId);

		[PreserveSig]
		[Token(Token = "0x6000271")]
		[Address(RVA = "0xDCB864", Offset = "0xDCB864", VA = "0xDCB864")]
		public static extern void ovr_UnityInitGlobals(IntPtr loggingCB);

		[PreserveSig]
		[Token(Token = "0x6000272")]
		[Address(RVA = "0xDC7324", Offset = "0xDC7324", VA = "0xDC7324")]
		public static extern ulong ovr_UnityInitWrapperAsynchronous(string appId);

		[PreserveSig]
		[Token(Token = "0x6000273")]
		[Address(RVA = "0xDCB924", Offset = "0xDCB924", VA = "0xDCB924")]
		public static extern bool ovr_UnityInitWrapperStandalone(string accessToken, IntPtr loggingCB);

		[PreserveSig]
		[Token(Token = "0x6000274")]
		[Address(RVA = "0xDCBA18", Offset = "0xDCBA18", VA = "0xDCBA18")]
		public static extern ulong ovr_Platform_InitializeStandaloneOculus(ref OculusInitParams init);

		[PreserveSig]
		[Token(Token = "0x6000275")]
		[Address(RVA = "0xDCBB40", Offset = "0xDCBB40", VA = "0xDCBB40")]
		public static extern ulong ovr_PlatformInitializeWithAccessToken(ulong appId, string accessToken);

		[PreserveSig]
		[Token(Token = "0x6000276")]
		[Address(RVA = "0xDCBC38", Offset = "0xDCBC38", VA = "0xDCBC38")]
		public static extern bool ovr_UnityInitWrapperWindows(string appId, IntPtr loggingCB);

		[PreserveSig]
		[Token(Token = "0x6000277")]
		[Address(RVA = "0xDCBD2C", Offset = "0xDCBD2C", VA = "0xDCBD2C")]
		public static extern ulong ovr_UnityInitWrapperWindowsAsynchronous(string appId, IntPtr loggingCB);

		[PreserveSig]
		[Token(Token = "0x6000278")]
		[Address(RVA = "0xDCBE20", Offset = "0xDCBE20", VA = "0xDCBE20")]
		public static extern bool ovr_SetDeveloperAccessToken(string accessToken);

		[Token(Token = "0x6000279")]
		[Address(RVA = "0xDCBF0C", Offset = "0xDCBF0C", VA = "0xDCBF0C")]
		public static string ovr_GetLoggedInUserLocale()
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600027A")]
		[Address(RVA = "0xDCBF8C", Offset = "0xDCBF8C", VA = "0xDCBF8C")]
		private static extern IntPtr ovr_GetLoggedInUserLocale_Native();

		[PreserveSig]
		[Token(Token = "0x600027B")]
		[Address(RVA = "0xDCC03C", Offset = "0xDCC03C", VA = "0xDCC03C")]
		public static extern IntPtr ovr_PopMessage();

		[PreserveSig]
		[Token(Token = "0x600027C")]
		[Address(RVA = "0xDCC0EC", Offset = "0xDCC0EC", VA = "0xDCC0EC")]
		public static extern void ovr_FreeMessage(IntPtr message);

		[PreserveSig]
		[Token(Token = "0x600027D")]
		[Address(RVA = "0xDCC1AC", Offset = "0xDCC1AC", VA = "0xDCC1AC")]
		public static extern uint ovr_NetworkingPeer_GetSendPolicy(IntPtr networkingPeer);

		[PreserveSig]
		[Token(Token = "0x600027E")]
		[Address(RVA = "0xDCC26C", Offset = "0xDCC26C", VA = "0xDCC26C")]
		public static extern IntPtr ovr_Voip_CreateEncoder();

		[PreserveSig]
		[Token(Token = "0x600027F")]
		[Address(RVA = "0xDCC31C", Offset = "0xDCC31C", VA = "0xDCC31C")]
		public static extern void ovr_Voip_DestroyEncoder(IntPtr encoder);

		[PreserveSig]
		[Token(Token = "0x6000280")]
		[Address(RVA = "0xDCC3DC", Offset = "0xDCC3DC", VA = "0xDCC3DC")]
		public static extern IntPtr ovr_Voip_CreateDecoder();

		[PreserveSig]
		[Token(Token = "0x6000281")]
		[Address(RVA = "0xDCC48C", Offset = "0xDCC48C", VA = "0xDCC48C")]
		public static extern void ovr_Voip_DestroyDecoder(IntPtr decoder);

		[PreserveSig]
		[Token(Token = "0x6000282")]
		[Address(RVA = "0xDCC54C", Offset = "0xDCC54C", VA = "0xDCC54C")]
		public static extern void ovr_VoipDecoder_Decode(IntPtr obj, byte[] compressedData, ulong compressedSize);

		[PreserveSig]
		[Token(Token = "0x6000283")]
		[Address(RVA = "0xDCC624", Offset = "0xDCC624", VA = "0xDCC624")]
		public static extern IntPtr ovr_Microphone_Create();

		[PreserveSig]
		[Token(Token = "0x6000284")]
		[Address(RVA = "0xDCC6D4", Offset = "0xDCC6D4", VA = "0xDCC6D4")]
		public static extern void ovr_Microphone_Destroy(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000285")]
		[Address(RVA = "0xDCC794", Offset = "0xDCC794", VA = "0xDCC794")]
		public static extern void ovr_Voip_SetSystemVoipPassthrough(bool passthrough);

		[PreserveSig]
		[Token(Token = "0x6000286")]
		[Address(RVA = "0xDCC854", Offset = "0xDCC854", VA = "0xDCC854")]
		public static extern void ovr_Voip_SetSystemVoipMicrophoneMuted(VoipMuteState muted);

		[PreserveSig]
		[Token(Token = "0x6000287")]
		[Address(RVA = "0xDCC914", Offset = "0xDCC914", VA = "0xDCC914")]
		public static extern void ovr_UnityResetTestPlatform();

		[PreserveSig]
		[Token(Token = "0x6000288")]
		[Address(RVA = "0xDC6CFC", Offset = "0xDC6CFC", VA = "0xDC6CFC")]
		public static extern ulong ovr_HTTP_GetWithMessageType(string url, int messageType);

		[PreserveSig]
		[Token(Token = "0x6000289")]
		[Address(RVA = "0xDCC9C4", Offset = "0xDCC9C4", VA = "0xDCC9C4")]
		public static extern void ovr_CrashApplication();

		[PreserveSig]
		[Token(Token = "0x600028A")]
		[Address(RVA = "0xDCCA74", Offset = "0xDCCA74", VA = "0xDCCA74")]
		public static extern void ovr_Voip_SetMicrophoneFilterCallback(FilterCallback cb);

		[PreserveSig]
		[Token(Token = "0x600028B")]
		[Address(RVA = "0xDCCB40", Offset = "0xDCCB40", VA = "0xDCCB40")]
		public static extern void ovr_Voip_SetMicrophoneFilterCallbackWithFixedSizeBuffer(FilterCallback cb, UIntPtr bufferSizeElements);

		[Token(Token = "0x600028C")]
		[Address(RVA = "0xDCCC14", Offset = "0xDCCC14", VA = "0xDCCC14")]
		public static void LogNewEvent(string eventName, Dictionary<string, string> values)
		{
		}

		[PreserveSig]
		[Token(Token = "0x600028D")]
		[Address(RVA = "0xDCD01C", Offset = "0xDCD01C", VA = "0xDCD01C")]
		public static extern void ovr_Log_NewEvent(IntPtr eventName, IntPtr[] values, UIntPtr length);

		[PreserveSig]
		[Token(Token = "0x600028E")]
		[Address(RVA = "0xDC7900", Offset = "0xDC7900", VA = "0xDC7900")]
		public static extern IntPtr ovr_ApplicationLifecycle_GetLaunchDetails();

		[Token(Token = "0x600028F")]
		[Address(RVA = "0xDCD0F4", Offset = "0xDCD0F4", VA = "0xDCD0F4")]
		public static ulong ovr_HTTP_StartTransfer(string url, ovrKeyValuePair[] headers)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000290")]
		[Address(RVA = "0xDCD230", Offset = "0xDCD230", VA = "0xDCD230")]
		private static extern ulong ovr_HTTP_StartTransfer_Native(IntPtr url, ovrKeyValuePair[] headers, UIntPtr numItems);

		[PreserveSig]
		[Token(Token = "0x6000291")]
		[Address(RVA = "0xDCD3E0", Offset = "0xDCD3E0", VA = "0xDCD3E0")]
		public static extern bool ovr_HTTP_Write(ulong transferId, byte[] bytes, UIntPtr length);

		[PreserveSig]
		[Token(Token = "0x6000292")]
		[Address(RVA = "0xDCD4C0", Offset = "0xDCD4C0", VA = "0xDCD4C0")]
		public static extern void ovr_HTTP_WriteEOM(ulong transferId);

		[Token(Token = "0x6000293")]
		[Address(RVA = "0xDCD584", Offset = "0xDCD584", VA = "0xDCD584")]
		public static string ovr_Message_GetStringForJavascript(IntPtr message)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000294")]
		[Address(RVA = "0xDCD60C", Offset = "0xDCD60C", VA = "0xDCD60C")]
		private static extern IntPtr ovr_Message_GetStringForJavascript_Native(IntPtr message);

		[PreserveSig]
		[Token(Token = "0x6000295")]
		[Address(RVA = "0xDCD6CC", Offset = "0xDCD6CC", VA = "0xDCD6CC")]
		public static extern void ovr_Net_Accept(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x6000296")]
		[Address(RVA = "0xDCD794", Offset = "0xDCD794", VA = "0xDCD794")]
		public static extern bool ovr_Net_AcceptForCurrentRoom();

		[PreserveSig]
		[Token(Token = "0x6000297")]
		[Address(RVA = "0xDCD84C", Offset = "0xDCD84C", VA = "0xDCD84C")]
		public static extern void ovr_Net_Close(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x6000298")]
		[Address(RVA = "0xDCD914", Offset = "0xDCD914", VA = "0xDCD914")]
		public static extern void ovr_Net_CloseForCurrentRoom();

		[PreserveSig]
		[Token(Token = "0x6000299")]
		[Address(RVA = "0xDCD9C4", Offset = "0xDCD9C4", VA = "0xDCD9C4")]
		public static extern void ovr_Net_Connect(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x600029A")]
		[Address(RVA = "0xDCDA8C", Offset = "0xDCDA8C", VA = "0xDCDA8C")]
		public static extern bool ovr_Net_IsConnected(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x600029B")]
		[Address(RVA = "0xDCDB5C", Offset = "0xDCDB5C", VA = "0xDCDB5C")]
		public static extern ulong ovr_Net_Ping(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x600029C")]
		[Address(RVA = "0xDCDC24", Offset = "0xDCDC24", VA = "0xDCDC24")]
		public static extern IntPtr ovr_Net_ReadPacket();

		[PreserveSig]
		[Token(Token = "0x600029D")]
		[Address(RVA = "0xDCDCD4", Offset = "0xDCDCD4", VA = "0xDCDCD4")]
		public static extern bool ovr_Net_SendPacket(ulong userID, UIntPtr length, byte[] bytes, SendPolicy policy);

		[PreserveSig]
		[Token(Token = "0x600029E")]
		[Address(RVA = "0xDCDDBC", Offset = "0xDCDDBC", VA = "0xDCDDBC")]
		public static extern bool ovr_Net_SendPacketToCurrentRoom(UIntPtr length, byte[] bytes, SendPolicy policy);

		[PreserveSig]
		[Token(Token = "0x600029F")]
		[Address(RVA = "0xDCDE9C", Offset = "0xDCDE9C", VA = "0xDCDE9C")]
		public static extern int ovr_Party_PluginGetSharedMemHandle();

		[PreserveSig]
		[Token(Token = "0x60002A0")]
		[Address(RVA = "0xDCDF4C", Offset = "0xDCDF4C", VA = "0xDCDF4C")]
		public static extern VoipMuteState ovr_Party_PluginGetVoipMicrophoneMuted();

		[PreserveSig]
		[Token(Token = "0x60002A1")]
		[Address(RVA = "0xDCDFFC", Offset = "0xDCDFFC", VA = "0xDCDFFC")]
		public static extern bool ovr_Party_PluginGetVoipPassthrough();

		[PreserveSig]
		[Token(Token = "0x60002A2")]
		[Address(RVA = "0xDCE0B4", Offset = "0xDCE0B4", VA = "0xDCE0B4")]
		public static extern SystemVoipStatus ovr_Party_PluginGetVoipStatus();

		[PreserveSig]
		[Token(Token = "0x60002A3")]
		[Address(RVA = "0xDCE164", Offset = "0xDCE164", VA = "0xDCE164")]
		public static extern void ovr_Voip_Accept(ulong userID);

		[PreserveSig]
		[Token(Token = "0x60002A4")]
		[Address(RVA = "0xDCE22C", Offset = "0xDCE22C", VA = "0xDCE22C")]
		public static extern VoipDtxState ovr_Voip_GetIsConnectionUsingDtx(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x60002A5")]
		[Address(RVA = "0xDCE2F4", Offset = "0xDCE2F4", VA = "0xDCE2F4")]
		public static extern VoipBitrate ovr_Voip_GetLocalBitrate(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x60002A6")]
		[Address(RVA = "0xDCE3BC", Offset = "0xDCE3BC", VA = "0xDCE3BC")]
		public static extern UIntPtr ovr_Voip_GetOutputBufferMaxSize();

		[PreserveSig]
		[Token(Token = "0x60002A7")]
		[Address(RVA = "0xDCE46C", Offset = "0xDCE46C", VA = "0xDCE46C")]
		public static extern UIntPtr ovr_Voip_GetPCM(ulong senderID, short[] outputBuffer, UIntPtr outputBufferNumElements);

		[PreserveSig]
		[Token(Token = "0x60002A8")]
		[Address(RVA = "0xDCE544", Offset = "0xDCE544", VA = "0xDCE544")]
		public static extern UIntPtr ovr_Voip_GetPCMFloat(ulong senderID, float[] outputBuffer, UIntPtr outputBufferNumElements);

		[PreserveSig]
		[Token(Token = "0x60002A9")]
		[Address(RVA = "0xDCE61C", Offset = "0xDCE61C", VA = "0xDCE61C")]
		public static extern UIntPtr ovr_Voip_GetPCMSize(ulong senderID);

		[PreserveSig]
		[Token(Token = "0x60002AA")]
		[Address(RVA = "0xDCE6E4", Offset = "0xDCE6E4", VA = "0xDCE6E4")]
		public static extern UIntPtr ovr_Voip_GetPCMWithTimestamp(ulong senderID, short[] outputBuffer, UIntPtr outputBufferNumElements, uint[] timestamp);

		[PreserveSig]
		[Token(Token = "0x60002AB")]
		[Address(RVA = "0xDCE7CC", Offset = "0xDCE7CC", VA = "0xDCE7CC")]
		public static extern UIntPtr ovr_Voip_GetPCMWithTimestampFloat(ulong senderID, float[] outputBuffer, UIntPtr outputBufferNumElements, uint[] timestamp);

		[PreserveSig]
		[Token(Token = "0x60002AC")]
		[Address(RVA = "0xDCE8B4", Offset = "0xDCE8B4", VA = "0xDCE8B4")]
		public static extern VoipBitrate ovr_Voip_GetRemoteBitrate(ulong peerID);

		[PreserveSig]
		[Token(Token = "0x60002AD")]
		[Address(RVA = "0xDCE97C", Offset = "0xDCE97C", VA = "0xDCE97C")]
		public static extern uint ovr_Voip_GetSyncTimestamp(ulong userID);

		[PreserveSig]
		[Token(Token = "0x60002AE")]
		[Address(RVA = "0xDCEA44", Offset = "0xDCEA44", VA = "0xDCEA44")]
		public static extern long ovr_Voip_GetSyncTimestampDifference(uint lhs, uint rhs);

		[PreserveSig]
		[Token(Token = "0x60002AF")]
		[Address(RVA = "0xDCEB0C", Offset = "0xDCEB0C", VA = "0xDCEB0C")]
		public static extern VoipMuteState ovr_Voip_GetSystemVoipMicrophoneMuted();

		[PreserveSig]
		[Token(Token = "0x60002B0")]
		[Address(RVA = "0xDCEBBC", Offset = "0xDCEBBC", VA = "0xDCEBBC")]
		public static extern SystemVoipStatus ovr_Voip_GetSystemVoipStatus();

		[PreserveSig]
		[Token(Token = "0x60002B1")]
		[Address(RVA = "0xDCEC6C", Offset = "0xDCEC6C", VA = "0xDCEC6C")]
		public static extern void ovr_Voip_SetMicrophoneMuted(VoipMuteState state);

		[PreserveSig]
		[Token(Token = "0x60002B2")]
		[Address(RVA = "0xDCED2C", Offset = "0xDCED2C", VA = "0xDCED2C")]
		public static extern void ovr_Voip_SetNewConnectionOptions(IntPtr voipOptions);

		[PreserveSig]
		[Token(Token = "0x60002B3")]
		[Address(RVA = "0xDCEDEC", Offset = "0xDCEDEC", VA = "0xDCEDEC")]
		public static extern void ovr_Voip_SetOutputSampleRate(VoipSampleRate rate);

		[PreserveSig]
		[Token(Token = "0x60002B4")]
		[Address(RVA = "0xDCEEAC", Offset = "0xDCEEAC", VA = "0xDCEEAC")]
		public static extern void ovr_Voip_Start(ulong userID);

		[PreserveSig]
		[Token(Token = "0x60002B5")]
		[Address(RVA = "0xDCEF74", Offset = "0xDCEF74", VA = "0xDCEF74")]
		public static extern void ovr_Voip_Stop(ulong userID);

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0xDC5D38", Offset = "0xDC5D38", VA = "0xDC5D38")]
		public static ulong ovr_Achievements_AddCount(string name, ulong count)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002B7")]
		[Address(RVA = "0xDCF03C", Offset = "0xDCF03C", VA = "0xDCF03C")]
		private static extern ulong ovr_Achievements_AddCount_Native(IntPtr name, ulong count);

		[Token(Token = "0x60002B8")]
		[Address(RVA = "0xDC5F44", Offset = "0xDC5F44", VA = "0xDC5F44")]
		public static ulong ovr_Achievements_AddFields(string name, string fields)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002B9")]
		[Address(RVA = "0xDCF10C", Offset = "0xDCF10C", VA = "0xDCF10C")]
		private static extern ulong ovr_Achievements_AddFields_Native(IntPtr name, IntPtr fields);

		[PreserveSig]
		[Token(Token = "0x60002BA")]
		[Address(RVA = "0xDC614C", Offset = "0xDC614C", VA = "0xDC614C")]
		public static extern ulong ovr_Achievements_GetAllDefinitions();

		[PreserveSig]
		[Token(Token = "0x60002BB")]
		[Address(RVA = "0xDC6308", Offset = "0xDC6308", VA = "0xDC6308")]
		public static extern ulong ovr_Achievements_GetAllProgress();

		[PreserveSig]
		[Token(Token = "0x60002BC")]
		[Address(RVA = "0xDC64E4", Offset = "0xDC64E4", VA = "0xDC64E4")]
		public static extern ulong ovr_Achievements_GetDefinitionsByName(string[] names, int count);

		[PreserveSig]
		[Token(Token = "0x60002BD")]
		[Address(RVA = "0xDC67B0", Offset = "0xDC67B0", VA = "0xDC67B0")]
		public static extern ulong ovr_Achievements_GetProgressByName(string[] names, int count);

		[Token(Token = "0x60002BE")]
		[Address(RVA = "0xDC6A64", Offset = "0xDC6A64", VA = "0xDC6A64")]
		public static ulong ovr_Achievements_Unlock(string name)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002BF")]
		[Address(RVA = "0xDCF1D4", Offset = "0xDCF1D4", VA = "0xDCF1D4")]
		private static extern ulong ovr_Achievements_Unlock_Native(IntPtr name);

		[PreserveSig]
		[Token(Token = "0x60002C0")]
		[Address(RVA = "0xDCF294", Offset = "0xDCF294", VA = "0xDCF294")]
		public static extern ulong ovr_Application_ExecuteCoordinatedLaunch(ulong appID, ulong roomID);

		[PreserveSig]
		[Token(Token = "0x60002C1")]
		[Address(RVA = "0xDCF364", Offset = "0xDCF364", VA = "0xDCF364")]
		public static extern ulong ovr_Application_GetInstalledApplications();

		[PreserveSig]
		[Token(Token = "0x60002C2")]
		[Address(RVA = "0xDC751C", Offset = "0xDC751C", VA = "0xDC751C")]
		public static extern ulong ovr_Application_GetVersion();

		[PreserveSig]
		[Token(Token = "0x60002C3")]
		[Address(RVA = "0xDC7790", Offset = "0xDC7790", VA = "0xDC7790")]
		public static extern ulong ovr_Application_LaunchOtherApp(ulong appID, IntPtr deeplink_options);

		[PreserveSig]
		[Token(Token = "0x60002C4")]
		[Address(RVA = "0xDCF414", Offset = "0xDCF414", VA = "0xDCF414")]
		public static extern ulong ovr_ApplicationLifecycle_GetRegisteredPIDs();

		[PreserveSig]
		[Token(Token = "0x60002C5")]
		[Address(RVA = "0xDCF4C4", Offset = "0xDCF4C4", VA = "0xDCF4C4")]
		public static extern ulong ovr_ApplicationLifecycle_GetSessionKey();

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0xDCF574", Offset = "0xDCF574", VA = "0xDCF574")]
		public static ulong ovr_ApplicationLifecycle_RegisterSessionKey(string sessionKey)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002C7")]
		[Address(RVA = "0xDCF64C", Offset = "0xDCF64C", VA = "0xDCF64C")]
		private static extern ulong ovr_ApplicationLifecycle_RegisterSessionKey_Native(IntPtr sessionKey);

		[PreserveSig]
		[Token(Token = "0x60002C8")]
		[Address(RVA = "0xDC7EF0", Offset = "0xDC7EF0", VA = "0xDC7EF0")]
		public static extern ulong ovr_AssetFile_Delete(ulong assetFileID);

		[PreserveSig]
		[Token(Token = "0x60002C9")]
		[Address(RVA = "0xDC80D4", Offset = "0xDC80D4", VA = "0xDC80D4")]
		public static extern ulong ovr_AssetFile_DeleteById(ulong assetFileID);

		[Token(Token = "0x60002CA")]
		[Address(RVA = "0xDC82B0", Offset = "0xDC82B0", VA = "0xDC82B0")]
		public static ulong ovr_AssetFile_DeleteByName(string assetFileName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002CB")]
		[Address(RVA = "0xDCF70C", Offset = "0xDCF70C", VA = "0xDCF70C")]
		private static extern ulong ovr_AssetFile_DeleteByName_Native(IntPtr assetFileName);

		[PreserveSig]
		[Token(Token = "0x60002CC")]
		[Address(RVA = "0xDC84A4", Offset = "0xDC84A4", VA = "0xDC84A4")]
		public static extern ulong ovr_AssetFile_Download(ulong assetFileID);

		[PreserveSig]
		[Token(Token = "0x60002CD")]
		[Address(RVA = "0xDC8688", Offset = "0xDC8688", VA = "0xDC8688")]
		public static extern ulong ovr_AssetFile_DownloadById(ulong assetFileID);

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0xDC8864", Offset = "0xDC8864", VA = "0xDC8864")]
		public static ulong ovr_AssetFile_DownloadByName(string assetFileName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002CF")]
		[Address(RVA = "0xDCF7CC", Offset = "0xDCF7CC", VA = "0xDCF7CC")]
		private static extern ulong ovr_AssetFile_DownloadByName_Native(IntPtr assetFileName);

		[PreserveSig]
		[Token(Token = "0x60002D0")]
		[Address(RVA = "0xDC8A58", Offset = "0xDC8A58", VA = "0xDC8A58")]
		public static extern ulong ovr_AssetFile_DownloadCancel(ulong assetFileID);

		[PreserveSig]
		[Token(Token = "0x60002D1")]
		[Address(RVA = "0xDC8C3C", Offset = "0xDC8C3C", VA = "0xDC8C3C")]
		public static extern ulong ovr_AssetFile_DownloadCancelById(ulong assetFileID);

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0xDC8E18", Offset = "0xDC8E18", VA = "0xDC8E18")]
		public static ulong ovr_AssetFile_DownloadCancelByName(string assetFileName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002D3")]
		[Address(RVA = "0xDCF88C", Offset = "0xDCF88C", VA = "0xDCF88C")]
		private static extern ulong ovr_AssetFile_DownloadCancelByName_Native(IntPtr assetFileName);

		[PreserveSig]
		[Token(Token = "0x60002D4")]
		[Address(RVA = "0xDC8FFC", Offset = "0xDC8FFC", VA = "0xDC8FFC")]
		public static extern ulong ovr_AssetFile_GetList();

		[PreserveSig]
		[Token(Token = "0x60002D5")]
		[Address(RVA = "0xDC91C8", Offset = "0xDC91C8", VA = "0xDC91C8")]
		public static extern ulong ovr_AssetFile_Status(ulong assetFileID);

		[PreserveSig]
		[Token(Token = "0x60002D6")]
		[Address(RVA = "0xDC93AC", Offset = "0xDC93AC", VA = "0xDC93AC")]
		public static extern ulong ovr_AssetFile_StatusById(ulong assetFileID);

		[Token(Token = "0x60002D7")]
		[Address(RVA = "0xDC9588", Offset = "0xDC9588", VA = "0xDC9588")]
		public static ulong ovr_AssetFile_StatusByName(string assetFileName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002D8")]
		[Address(RVA = "0xDCF94C", Offset = "0xDCF94C", VA = "0xDCF94C")]
		private static extern ulong ovr_AssetFile_StatusByName_Native(IntPtr assetFileName);

		[Token(Token = "0x60002D9")]
		[Address(RVA = "0xDCFA0C", Offset = "0xDCFA0C", VA = "0xDCFA0C")]
		public static ulong ovr_Avatar_UpdateMetaData(string avatarMetaData, string imageFilePath)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002DA")]
		[Address(RVA = "0xDCFB08", Offset = "0xDCFB08", VA = "0xDCFB08")]
		private static extern ulong ovr_Avatar_UpdateMetaData_Native(IntPtr avatarMetaData, IntPtr imageFilePath);

		[PreserveSig]
		[Token(Token = "0x60002DB")]
		[Address(RVA = "0xDCFBD0", Offset = "0xDCFBD0", VA = "0xDCFBD0")]
		public static extern ulong ovr_Cal_FinalizeApplication(ulong groupingObject, ulong[] userIDs, int numUserIDs, ulong finalized_application_ID);

		[PreserveSig]
		[Token(Token = "0x60002DC")]
		[Address(RVA = "0xDCFCB8", Offset = "0xDCFCB8", VA = "0xDCFCB8")]
		public static extern ulong ovr_Cal_GetSuggestedApplications(ulong groupingObject, ulong[] userIDs, int numUserIDs);

		[PreserveSig]
		[Token(Token = "0x60002DD")]
		[Address(RVA = "0xDCFD90", Offset = "0xDCFD90", VA = "0xDCFD90")]
		public static extern ulong ovr_Cal_ProposeApplication(ulong groupingObject, ulong[] userIDs, int numUserIDs, ulong proposed_application_ID);

		[Token(Token = "0x60002DE")]
		[Address(RVA = "0xDCFE78", Offset = "0xDCFE78", VA = "0xDCFE78")]
		public static ulong ovr_CloudStorage_Delete(string bucket, string key)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002DF")]
		[Address(RVA = "0xDCFF74", Offset = "0xDCFF74", VA = "0xDCFF74")]
		private static extern ulong ovr_CloudStorage_Delete_Native(IntPtr bucket, IntPtr key);

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0xDD003C", Offset = "0xDD003C", VA = "0xDD003C")]
		public static ulong ovr_CloudStorage_Load(string bucket, string key)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002E1")]
		[Address(RVA = "0xDD0138", Offset = "0xDD0138", VA = "0xDD0138")]
		private static extern ulong ovr_CloudStorage_Load_Native(IntPtr bucket, IntPtr key);

		[Token(Token = "0x60002E2")]
		[Address(RVA = "0xDD0200", Offset = "0xDD0200", VA = "0xDD0200")]
		public static ulong ovr_CloudStorage_LoadBucketMetadata(string bucket)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002E3")]
		[Address(RVA = "0xDD02D8", Offset = "0xDD02D8", VA = "0xDD02D8")]
		private static extern ulong ovr_CloudStorage_LoadBucketMetadata_Native(IntPtr bucket);

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0xDD0398", Offset = "0xDD0398", VA = "0xDD0398")]
		public static ulong ovr_CloudStorage_LoadConflictMetadata(string bucket, string key)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002E5")]
		[Address(RVA = "0xDD0494", Offset = "0xDD0494", VA = "0xDD0494")]
		private static extern ulong ovr_CloudStorage_LoadConflictMetadata_Native(IntPtr bucket, IntPtr key);

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0xDD055C", Offset = "0xDD055C", VA = "0xDD055C")]
		public static ulong ovr_CloudStorage_LoadHandle(string handle)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002E7")]
		[Address(RVA = "0xDD0634", Offset = "0xDD0634", VA = "0xDD0634")]
		private static extern ulong ovr_CloudStorage_LoadHandle_Native(IntPtr handle);

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0xDD06F4", Offset = "0xDD06F4", VA = "0xDD06F4")]
		public static ulong ovr_CloudStorage_LoadMetadata(string bucket, string key)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002E9")]
		[Address(RVA = "0xDD07F0", Offset = "0xDD07F0", VA = "0xDD07F0")]
		private static extern ulong ovr_CloudStorage_LoadMetadata_Native(IntPtr bucket, IntPtr key);

		[Token(Token = "0x60002EA")]
		[Address(RVA = "0xDD08B8", Offset = "0xDD08B8", VA = "0xDD08B8")]
		public static ulong ovr_CloudStorage_ResolveKeepLocal(string bucket, string key, string remoteHandle)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002EB")]
		[Address(RVA = "0xDD09E0", Offset = "0xDD09E0", VA = "0xDD09E0")]
		private static extern ulong ovr_CloudStorage_ResolveKeepLocal_Native(IntPtr bucket, IntPtr key, IntPtr remoteHandle);

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0xDD0AB0", Offset = "0xDD0AB0", VA = "0xDD0AB0")]
		public static ulong ovr_CloudStorage_ResolveKeepRemote(string bucket, string key, string remoteHandle)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002ED")]
		[Address(RVA = "0xDD0BD8", Offset = "0xDD0BD8", VA = "0xDD0BD8")]
		private static extern ulong ovr_CloudStorage_ResolveKeepRemote_Native(IntPtr bucket, IntPtr key, IntPtr remoteHandle);

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0xDD0CA8", Offset = "0xDD0CA8", VA = "0xDD0CA8")]
		public static ulong ovr_CloudStorage_Save(string bucket, string key, byte[] data, uint dataSize, long counter, string extraData)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002EF")]
		[Address(RVA = "0xDD0DF0", Offset = "0xDD0DF0", VA = "0xDD0DF0")]
		private static extern ulong ovr_CloudStorage_Save_Native(IntPtr bucket, IntPtr key, byte[] data, uint dataSize, long counter, IntPtr extraData);

		[PreserveSig]
		[Token(Token = "0x60002F0")]
		[Address(RVA = "0xDD0EE0", Offset = "0xDD0EE0", VA = "0xDD0EE0")]
		public static extern ulong ovr_CloudStorage2_GetUserDirectoryPath();

		[PreserveSig]
		[Token(Token = "0x60002F1")]
		[Address(RVA = "0xDD0F90", Offset = "0xDD0F90", VA = "0xDD0F90")]
		public static extern ulong ovr_Entitlement_GetIsViewerEntitled();

		[Token(Token = "0x60002F2")]
		[Address(RVA = "0xDD1040", Offset = "0xDD1040", VA = "0xDD1040")]
		public static ulong ovr_GraphAPI_Get(string url)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002F3")]
		[Address(RVA = "0xDD1118", Offset = "0xDD1118", VA = "0xDD1118")]
		private static extern ulong ovr_GraphAPI_Get_Native(IntPtr url);

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0xDD11D8", Offset = "0xDD11D8", VA = "0xDD11D8")]
		public static ulong ovr_GraphAPI_Post(string url)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002F5")]
		[Address(RVA = "0xDD12B0", Offset = "0xDD12B0", VA = "0xDD12B0")]
		private static extern ulong ovr_GraphAPI_Post_Native(IntPtr url);

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0xDD136C", Offset = "0xDD136C", VA = "0xDD136C")]
		public static ulong ovr_HTTP_Get(string url)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002F7")]
		[Address(RVA = "0xDD1444", Offset = "0xDD1444", VA = "0xDD1444")]
		private static extern ulong ovr_HTTP_Get_Native(IntPtr url);

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0xDD1504", Offset = "0xDD1504", VA = "0xDD1504")]
		public static ulong ovr_HTTP_GetToFile(string url, string diskFile)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002F9")]
		[Address(RVA = "0xDD1600", Offset = "0xDD1600", VA = "0xDD1600")]
		private static extern ulong ovr_HTTP_GetToFile_Native(IntPtr url, IntPtr diskFile);

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0xDD16C8", Offset = "0xDD16C8", VA = "0xDD16C8")]
		public static ulong ovr_HTTP_MultiPartPost(string url, string filepath_param_name, string filepath, string access_token, ovrKeyValuePair[] post_params)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002FB")]
		[Address(RVA = "0xDD186C", Offset = "0xDD186C", VA = "0xDD186C")]
		private static extern ulong ovr_HTTP_MultiPartPost_Native(IntPtr url, IntPtr filepath_param_name, IntPtr filepath, IntPtr access_token, ovrKeyValuePair[] post_params, UIntPtr numItems);

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0xDD1A3C", Offset = "0xDD1A3C", VA = "0xDD1A3C")]
		public static ulong ovr_HTTP_Post(string url)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002FD")]
		[Address(RVA = "0xDD1B14", Offset = "0xDD1B14", VA = "0xDD1B14")]
		private static extern ulong ovr_HTTP_Post_Native(IntPtr url);

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0xDD1BD4", Offset = "0xDD1BD4", VA = "0xDD1BD4")]
		public static ulong ovr_IAP_ConsumePurchase(string sku)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x60002FF")]
		[Address(RVA = "0xDD1CAC", Offset = "0xDD1CAC", VA = "0xDD1CAC")]
		private static extern ulong ovr_IAP_ConsumePurchase_Native(IntPtr sku);

		[PreserveSig]
		[Token(Token = "0x6000300")]
		[Address(RVA = "0xDD1D6C", Offset = "0xDD1D6C", VA = "0xDD1D6C")]
		public static extern ulong ovr_IAP_GetProductsBySKU(string[] skus, int count);

		[PreserveSig]
		[Token(Token = "0x6000301")]
		[Address(RVA = "0xDD1F0C", Offset = "0xDD1F0C", VA = "0xDD1F0C")]
		public static extern ulong ovr_IAP_GetViewerPurchases();

		[Token(Token = "0x6000302")]
		[Address(RVA = "0xDD1FBC", Offset = "0xDD1FBC", VA = "0xDD1FBC")]
		public static ulong ovr_IAP_LaunchCheckoutFlow(string sku)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000303")]
		[Address(RVA = "0xDD2094", Offset = "0xDD2094", VA = "0xDD2094")]
		private static extern ulong ovr_IAP_LaunchCheckoutFlow_Native(IntPtr sku);

		[PreserveSig]
		[Token(Token = "0x6000304")]
		[Address(RVA = "0xDD2154", Offset = "0xDD2154", VA = "0xDD2154")]
		public static extern ulong ovr_LanguagePack_GetCurrent();

		[Token(Token = "0x6000305")]
		[Address(RVA = "0xDD2204", Offset = "0xDD2204", VA = "0xDD2204")]
		public static ulong ovr_LanguagePack_SetCurrent(string tag)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000306")]
		[Address(RVA = "0xDD22DC", Offset = "0xDD22DC", VA = "0xDD22DC")]
		private static extern ulong ovr_LanguagePack_SetCurrent_Native(IntPtr tag);

		[Token(Token = "0x6000307")]
		[Address(RVA = "0xDD239C", Offset = "0xDD239C", VA = "0xDD239C")]
		public static ulong ovr_Leaderboard_GetEntries(string leaderboardName, int limit, LeaderboardFilterType filter, LeaderboardStartAt startAt)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000308")]
		[Address(RVA = "0xDD2494", Offset = "0xDD2494", VA = "0xDD2494")]
		private static extern ulong ovr_Leaderboard_GetEntries_Native(IntPtr leaderboardName, int limit, LeaderboardFilterType filter, LeaderboardStartAt startAt);

		[Token(Token = "0x6000309")]
		[Address(RVA = "0xDD2568", Offset = "0xDD2568", VA = "0xDD2568")]
		public static ulong ovr_Leaderboard_GetEntriesAfterRank(string leaderboardName, int limit, ulong afterRank)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600030A")]
		[Address(RVA = "0xDD2660", Offset = "0xDD2660", VA = "0xDD2660")]
		private static extern ulong ovr_Leaderboard_GetEntriesAfterRank_Native(IntPtr leaderboardName, int limit, ulong afterRank);

		[PreserveSig]
		[Token(Token = "0x600030B")]
		[Address(RVA = "0xDD2730", Offset = "0xDD2730", VA = "0xDD2730")]
		public static extern ulong ovr_Leaderboard_GetNextEntries(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x600030C")]
		[Address(RVA = "0xDD27F0", Offset = "0xDD27F0", VA = "0xDD27F0")]
		public static extern ulong ovr_Leaderboard_GetPreviousEntries(IntPtr handle);

		[Token(Token = "0x600030D")]
		[Address(RVA = "0xDD28B0", Offset = "0xDD28B0", VA = "0xDD28B0")]
		public static ulong ovr_Leaderboard_WriteEntry(string leaderboardName, long score, byte[] extraData, uint extraDataLength, bool forceUpdate)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600030E")]
		[Address(RVA = "0xDD29B4", Offset = "0xDD29B4", VA = "0xDD29B4")]
		private static extern ulong ovr_Leaderboard_WriteEntry_Native(IntPtr leaderboardName, long score, byte[] extraData, uint extraDataLength, bool forceUpdate);

		[PreserveSig]
		[Token(Token = "0x600030F")]
		[Address(RVA = "0xDD2AA4", Offset = "0xDD2AA4", VA = "0xDD2AA4")]
		public static extern ulong ovr_Livestreaming_GetStatus();

		[Token(Token = "0x6000310")]
		[Address(RVA = "0xDD2B54", Offset = "0xDD2B54", VA = "0xDD2B54")]
		public static ulong ovr_Livestreaming_IsAllowedForApplication(string packageName)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000311")]
		[Address(RVA = "0xDD2C2C", Offset = "0xDD2C2C", VA = "0xDD2C2C")]
		private static extern ulong ovr_Livestreaming_IsAllowedForApplication_Native(IntPtr packageName);

		[PreserveSig]
		[Token(Token = "0x6000312")]
		[Address(RVA = "0xDD2CEC", Offset = "0xDD2CEC", VA = "0xDD2CEC")]
		public static extern ulong ovr_Livestreaming_PauseStream();

		[PreserveSig]
		[Token(Token = "0x6000313")]
		[Address(RVA = "0xDD2D9C", Offset = "0xDD2D9C", VA = "0xDD2D9C")]
		public static extern ulong ovr_Livestreaming_ResumeStream();

		[PreserveSig]
		[Token(Token = "0x6000314")]
		[Address(RVA = "0xDD2E4C", Offset = "0xDD2E4C", VA = "0xDD2E4C")]
		public static extern ulong ovr_Livestreaming_StartPartyStream();

		[PreserveSig]
		[Token(Token = "0x6000315")]
		[Address(RVA = "0xDD2EFC", Offset = "0xDD2EFC", VA = "0xDD2EFC")]
		public static extern ulong ovr_Livestreaming_StartStream(LivestreamingAudience audience, LivestreamingMicrophoneStatus micStatus);

		[PreserveSig]
		[Token(Token = "0x6000316")]
		[Address(RVA = "0xDD2FC4", Offset = "0xDD2FC4", VA = "0xDD2FC4")]
		public static extern ulong ovr_Livestreaming_StopPartyStream();

		[PreserveSig]
		[Token(Token = "0x6000317")]
		[Address(RVA = "0xDD3074", Offset = "0xDD3074", VA = "0xDD3074")]
		public static extern ulong ovr_Livestreaming_StopStream();

		[PreserveSig]
		[Token(Token = "0x6000318")]
		[Address(RVA = "0xDD3124", Offset = "0xDD3124", VA = "0xDD3124")]
		public static extern ulong ovr_Livestreaming_UpdateCommentsOverlayVisibility(bool isVisible);

		[PreserveSig]
		[Token(Token = "0x6000319")]
		[Address(RVA = "0xDD31E4", Offset = "0xDD31E4", VA = "0xDD31E4")]
		public static extern ulong ovr_Livestreaming_UpdateMicStatus(LivestreamingMicrophoneStatus micStatus);

		[Token(Token = "0x600031A")]
		[Address(RVA = "0xDD32A4", Offset = "0xDD32A4", VA = "0xDD32A4")]
		public static ulong ovr_Matchmaking_Browse(string pool, IntPtr customQueryData)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600031B")]
		[Address(RVA = "0xDD3384", Offset = "0xDD3384", VA = "0xDD3384")]
		private static extern ulong ovr_Matchmaking_Browse_Native(IntPtr pool, IntPtr customQueryData);

		[Token(Token = "0x600031C")]
		[Address(RVA = "0xDD344C", Offset = "0xDD344C", VA = "0xDD344C")]
		public static ulong ovr_Matchmaking_Browse2(string pool, IntPtr matchmakingOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600031D")]
		[Address(RVA = "0xDD352C", Offset = "0xDD352C", VA = "0xDD352C")]
		private static extern ulong ovr_Matchmaking_Browse2_Native(IntPtr pool, IntPtr matchmakingOptions);

		[Token(Token = "0x600031E")]
		[Address(RVA = "0xDD35F4", Offset = "0xDD35F4", VA = "0xDD35F4")]
		public static ulong ovr_Matchmaking_Cancel(string pool, string requestHash)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600031F")]
		[Address(RVA = "0xDD36F0", Offset = "0xDD36F0", VA = "0xDD36F0")]
		private static extern ulong ovr_Matchmaking_Cancel_Native(IntPtr pool, IntPtr requestHash);

		[PreserveSig]
		[Token(Token = "0x6000320")]
		[Address(RVA = "0xDD37B8", Offset = "0xDD37B8", VA = "0xDD37B8")]
		public static extern ulong ovr_Matchmaking_Cancel2();

		[Token(Token = "0x6000321")]
		[Address(RVA = "0xDD3868", Offset = "0xDD3868", VA = "0xDD3868")]
		public static ulong ovr_Matchmaking_CreateAndEnqueueRoom(string pool, uint maxUsers, bool subscribeToUpdates, IntPtr customQueryData)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000322")]
		[Address(RVA = "0xDD3960", Offset = "0xDD3960", VA = "0xDD3960")]
		private static extern ulong ovr_Matchmaking_CreateAndEnqueueRoom_Native(IntPtr pool, uint maxUsers, bool subscribeToUpdates, IntPtr customQueryData);

		[Token(Token = "0x6000323")]
		[Address(RVA = "0xDD3A34", Offset = "0xDD3A34", VA = "0xDD3A34")]
		public static ulong ovr_Matchmaking_CreateAndEnqueueRoom2(string pool, IntPtr matchmakingOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000324")]
		[Address(RVA = "0xDD3B14", Offset = "0xDD3B14", VA = "0xDD3B14")]
		private static extern ulong ovr_Matchmaking_CreateAndEnqueueRoom2_Native(IntPtr pool, IntPtr matchmakingOptions);

		[Token(Token = "0x6000325")]
		[Address(RVA = "0xDD3BDC", Offset = "0xDD3BDC", VA = "0xDD3BDC")]
		public static ulong ovr_Matchmaking_CreateRoom(string pool, uint maxUsers, bool subscribeToUpdates)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000326")]
		[Address(RVA = "0xDD3CCC", Offset = "0xDD3CCC", VA = "0xDD3CCC")]
		private static extern ulong ovr_Matchmaking_CreateRoom_Native(IntPtr pool, uint maxUsers, bool subscribeToUpdates);

		[Token(Token = "0x6000327")]
		[Address(RVA = "0xDD3D9C", Offset = "0xDD3D9C", VA = "0xDD3D9C")]
		public static ulong ovr_Matchmaking_CreateRoom2(string pool, IntPtr matchmakingOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000328")]
		[Address(RVA = "0xDD3E7C", Offset = "0xDD3E7C", VA = "0xDD3E7C")]
		private static extern ulong ovr_Matchmaking_CreateRoom2_Native(IntPtr pool, IntPtr matchmakingOptions);

		[Token(Token = "0x6000329")]
		[Address(RVA = "0xDD3F44", Offset = "0xDD3F44", VA = "0xDD3F44")]
		public static ulong ovr_Matchmaking_Enqueue(string pool, IntPtr customQueryData)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600032A")]
		[Address(RVA = "0xDD4024", Offset = "0xDD4024", VA = "0xDD4024")]
		private static extern ulong ovr_Matchmaking_Enqueue_Native(IntPtr pool, IntPtr customQueryData);

		[Token(Token = "0x600032B")]
		[Address(RVA = "0xDD40EC", Offset = "0xDD40EC", VA = "0xDD40EC")]
		public static ulong ovr_Matchmaking_Enqueue2(string pool, IntPtr matchmakingOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600032C")]
		[Address(RVA = "0xDD41CC", Offset = "0xDD41CC", VA = "0xDD41CC")]
		private static extern ulong ovr_Matchmaking_Enqueue2_Native(IntPtr pool, IntPtr matchmakingOptions);

		[PreserveSig]
		[Token(Token = "0x600032D")]
		[Address(RVA = "0xDD4294", Offset = "0xDD4294", VA = "0xDD4294")]
		public static extern ulong ovr_Matchmaking_EnqueueRoom(ulong roomID, IntPtr customQueryData);

		[PreserveSig]
		[Token(Token = "0x600032E")]
		[Address(RVA = "0xDD4360", Offset = "0xDD4360", VA = "0xDD4360")]
		public static extern ulong ovr_Matchmaking_EnqueueRoom2(ulong roomID, IntPtr matchmakingOptions);

		[PreserveSig]
		[Token(Token = "0x600032F")]
		[Address(RVA = "0xDD442C", Offset = "0xDD442C", VA = "0xDD442C")]
		public static extern ulong ovr_Matchmaking_GetAdminSnapshot();

		[Token(Token = "0x6000330")]
		[Address(RVA = "0xDD44DC", Offset = "0xDD44DC", VA = "0xDD44DC")]
		public static ulong ovr_Matchmaking_GetStats(string pool, uint maxLevel, MatchmakingStatApproach approach)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000331")]
		[Address(RVA = "0xDD45CC", Offset = "0xDD45CC", VA = "0xDD45CC")]
		private static extern ulong ovr_Matchmaking_GetStats_Native(IntPtr pool, uint maxLevel, MatchmakingStatApproach approach);

		[PreserveSig]
		[Token(Token = "0x6000332")]
		[Address(RVA = "0xDD469C", Offset = "0xDD469C", VA = "0xDD469C")]
		public static extern ulong ovr_Matchmaking_JoinRoom(ulong roomID, bool subscribeToUpdates);

		[Token(Token = "0x6000333")]
		[Address(RVA = "0xDD4768", Offset = "0xDD4768", VA = "0xDD4768")]
		public static ulong ovr_Matchmaking_ReportResultInsecure(ulong roomID, ovrKeyValuePair[] data)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000334")]
		[Address(RVA = "0xDD4858", Offset = "0xDD4858", VA = "0xDD4858")]
		private static extern ulong ovr_Matchmaking_ReportResultInsecure_Native(ulong roomID, ovrKeyValuePair[] data, UIntPtr numItems);

		[PreserveSig]
		[Token(Token = "0x6000335")]
		[Address(RVA = "0xDD4A04", Offset = "0xDD4A04", VA = "0xDD4A04")]
		public static extern ulong ovr_Matchmaking_StartMatch(ulong roomID);

		[Token(Token = "0x6000336")]
		[Address(RVA = "0xDD4ACC", Offset = "0xDD4ACC", VA = "0xDD4ACC")]
		public static ulong ovr_Media_ShareToFacebook(string postTextSuggestion, string filePath, MediaContentType contentType)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000337")]
		[Address(RVA = "0xDD4BD8", Offset = "0xDD4BD8", VA = "0xDD4BD8")]
		private static extern ulong ovr_Media_ShareToFacebook_Native(IntPtr postTextSuggestion, IntPtr filePath, MediaContentType contentType);

		[PreserveSig]
		[Token(Token = "0x6000338")]
		[Address(RVA = "0xDD4CA8", Offset = "0xDD4CA8", VA = "0xDD4CA8")]
		public static extern ulong ovr_Notification_GetRoomInvites();

		[PreserveSig]
		[Token(Token = "0x6000339")]
		[Address(RVA = "0xDD4D58", Offset = "0xDD4D58", VA = "0xDD4D58")]
		public static extern ulong ovr_Notification_MarkAsRead(ulong notificationID);

		[PreserveSig]
		[Token(Token = "0x600033A")]
		[Address(RVA = "0xDD4E20", Offset = "0xDD4E20", VA = "0xDD4E20")]
		public static extern ulong ovr_Party_Create();

		[PreserveSig]
		[Token(Token = "0x600033B")]
		[Address(RVA = "0xDD4ED0", Offset = "0xDD4ED0", VA = "0xDD4ED0")]
		public static extern ulong ovr_Party_GatherInApplication(ulong partyID, ulong appID);

		[PreserveSig]
		[Token(Token = "0x600033C")]
		[Address(RVA = "0xDD4FA0", Offset = "0xDD4FA0", VA = "0xDD4FA0")]
		public static extern ulong ovr_Party_Get(ulong partyID);

		[PreserveSig]
		[Token(Token = "0x600033D")]
		[Address(RVA = "0xDD5068", Offset = "0xDD5068", VA = "0xDD5068")]
		public static extern ulong ovr_Party_GetCurrent();

		[PreserveSig]
		[Token(Token = "0x600033E")]
		[Address(RVA = "0xDD5118", Offset = "0xDD5118", VA = "0xDD5118")]
		public static extern ulong ovr_Party_GetCurrentForUser(ulong userID);

		[PreserveSig]
		[Token(Token = "0x600033F")]
		[Address(RVA = "0xDD51E0", Offset = "0xDD51E0", VA = "0xDD51E0")]
		public static extern ulong ovr_Party_Invite(ulong partyID, ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000340")]
		[Address(RVA = "0xDD52AC", Offset = "0xDD52AC", VA = "0xDD52AC")]
		public static extern ulong ovr_Party_Join(ulong partyID);

		[PreserveSig]
		[Token(Token = "0x6000341")]
		[Address(RVA = "0xDD5374", Offset = "0xDD5374", VA = "0xDD5374")]
		public static extern ulong ovr_Party_Leave(ulong partyID);

		[PreserveSig]
		[Token(Token = "0x6000342")]
		[Address(RVA = "0xDD543C", Offset = "0xDD543C", VA = "0xDD543C")]
		public static extern ulong ovr_Room_CreateAndJoinPrivate(RoomJoinPolicy joinPolicy, uint maxUsers, bool subscribeToUpdates);

		[PreserveSig]
		[Token(Token = "0x6000343")]
		[Address(RVA = "0xDD550C", Offset = "0xDD550C", VA = "0xDD550C")]
		public static extern ulong ovr_Room_CreateAndJoinPrivate2(RoomJoinPolicy joinPolicy, uint maxUsers, IntPtr roomOptions);

		[PreserveSig]
		[Token(Token = "0x6000344")]
		[Address(RVA = "0xDD55DC", Offset = "0xDD55DC", VA = "0xDD55DC")]
		public static extern ulong ovr_Room_Get(ulong roomID);

		[PreserveSig]
		[Token(Token = "0x6000345")]
		[Address(RVA = "0xDD56A4", Offset = "0xDD56A4", VA = "0xDD56A4")]
		public static extern ulong ovr_Room_GetCurrent();

		[PreserveSig]
		[Token(Token = "0x6000346")]
		[Address(RVA = "0xDD5754", Offset = "0xDD5754", VA = "0xDD5754")]
		public static extern ulong ovr_Room_GetCurrentForUser(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000347")]
		[Address(RVA = "0xDD581C", Offset = "0xDD581C", VA = "0xDD581C")]
		public static extern ulong ovr_Room_GetInvitableUsers();

		[PreserveSig]
		[Token(Token = "0x6000348")]
		[Address(RVA = "0xDD58CC", Offset = "0xDD58CC", VA = "0xDD58CC")]
		public static extern ulong ovr_Room_GetInvitableUsers2(IntPtr roomOptions);

		[PreserveSig]
		[Token(Token = "0x6000349")]
		[Address(RVA = "0xDD598C", Offset = "0xDD598C", VA = "0xDD598C")]
		public static extern ulong ovr_Room_GetModeratedRooms();

		[PreserveSig]
		[Token(Token = "0x600034A")]
		[Address(RVA = "0xDD5A3C", Offset = "0xDD5A3C", VA = "0xDD5A3C")]
		public static extern ulong ovr_Room_GetSocialRooms(ulong appID);

		[Token(Token = "0x600034B")]
		[Address(RVA = "0xDD5B04", Offset = "0xDD5B04", VA = "0xDD5B04")]
		public static ulong ovr_Room_InviteUser(ulong roomID, string inviteToken)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600034C")]
		[Address(RVA = "0xDD5BF4", Offset = "0xDD5BF4", VA = "0xDD5BF4")]
		private static extern ulong ovr_Room_InviteUser_Native(ulong roomID, IntPtr inviteToken);

		[PreserveSig]
		[Token(Token = "0x600034D")]
		[Address(RVA = "0xDD5CC0", Offset = "0xDD5CC0", VA = "0xDD5CC0")]
		public static extern ulong ovr_Room_Join(ulong roomID, bool subscribeToUpdates);

		[PreserveSig]
		[Token(Token = "0x600034E")]
		[Address(RVA = "0xDD5D8C", Offset = "0xDD5D8C", VA = "0xDD5D8C")]
		public static extern ulong ovr_Room_Join2(ulong roomID, IntPtr roomOptions);

		[PreserveSig]
		[Token(Token = "0x600034F")]
		[Address(RVA = "0xDD5E58", Offset = "0xDD5E58", VA = "0xDD5E58")]
		public static extern ulong ovr_Room_KickUser(ulong roomID, ulong userID, int kickDurationSeconds);

		[PreserveSig]
		[Token(Token = "0x6000350")]
		[Address(RVA = "0xDD5F2C", Offset = "0xDD5F2C", VA = "0xDD5F2C")]
		public static extern ulong ovr_Room_LaunchInvitableUserFlow(ulong roomID);

		[PreserveSig]
		[Token(Token = "0x6000351")]
		[Address(RVA = "0xDD5FF4", Offset = "0xDD5FF4", VA = "0xDD5FF4")]
		public static extern ulong ovr_Room_Leave(ulong roomID);

		[Token(Token = "0x6000352")]
		[Address(RVA = "0xDD60BC", Offset = "0xDD60BC", VA = "0xDD60BC")]
		public static ulong ovr_Room_SetDescription(ulong roomID, string description)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000353")]
		[Address(RVA = "0xDD61AC", Offset = "0xDD61AC", VA = "0xDD61AC")]
		private static extern ulong ovr_Room_SetDescription_Native(ulong roomID, IntPtr description);

		[Token(Token = "0x6000354")]
		[Address(RVA = "0xDD6278", Offset = "0xDD6278", VA = "0xDD6278")]
		public static ulong ovr_Room_UpdateDataStore(ulong roomID, ovrKeyValuePair[] data)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000355")]
		[Address(RVA = "0xDD6368", Offset = "0xDD6368", VA = "0xDD6368")]
		private static extern ulong ovr_Room_UpdateDataStore_Native(ulong roomID, ovrKeyValuePair[] data, UIntPtr numItems);

		[PreserveSig]
		[Token(Token = "0x6000356")]
		[Address(RVA = "0xDD6514", Offset = "0xDD6514", VA = "0xDD6514")]
		public static extern ulong ovr_Room_UpdateMembershipLockStatus(ulong roomID, RoomMembershipLockStatus membershipLockStatus);

		[PreserveSig]
		[Token(Token = "0x6000357")]
		[Address(RVA = "0xDD65E0", Offset = "0xDD65E0", VA = "0xDD65E0")]
		public static extern ulong ovr_Room_UpdateOwner(ulong roomID, ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000358")]
		[Address(RVA = "0xDD66B0", Offset = "0xDD66B0", VA = "0xDD66B0")]
		public static extern ulong ovr_Room_UpdatePrivateRoomJoinPolicy(ulong roomID, RoomJoinPolicy newJoinPolicy);

		[PreserveSig]
		[Token(Token = "0x6000359")]
		[Address(RVA = "0xDD677C", Offset = "0xDD677C", VA = "0xDD677C")]
		public static extern ulong ovr_SystemPermissions_GetStatus(PermissionType permType);

		[PreserveSig]
		[Token(Token = "0x600035A")]
		[Address(RVA = "0xDD683C", Offset = "0xDD683C", VA = "0xDD683C")]
		public static extern ulong ovr_SystemPermissions_LaunchDeeplink(PermissionType permType);

		[Token(Token = "0x600035B")]
		[Address(RVA = "0xDD68FC", Offset = "0xDD68FC", VA = "0xDD68FC")]
		public static ulong ovr_User_CancelRecordingForReportFlow(string recordingUUID)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x600035C")]
		[Address(RVA = "0xDD69D4", Offset = "0xDD69D4", VA = "0xDD69D4")]
		private static extern ulong ovr_User_CancelRecordingForReportFlow_Native(IntPtr recordingUUID);

		[PreserveSig]
		[Token(Token = "0x600035D")]
		[Address(RVA = "0xDD6A94", Offset = "0xDD6A94", VA = "0xDD6A94")]
		public static extern ulong ovr_User_Get(ulong userID);

		[PreserveSig]
		[Token(Token = "0x600035E")]
		[Address(RVA = "0xDD6B5C", Offset = "0xDD6B5C", VA = "0xDD6B5C")]
		public static extern ulong ovr_User_GetAccessToken();

		[PreserveSig]
		[Token(Token = "0x600035F")]
		[Address(RVA = "0xDD6C0C", Offset = "0xDD6C0C", VA = "0xDD6C0C")]
		public static extern ulong ovr_User_GetLinkedAccounts(IntPtr userOptions);

		[PreserveSig]
		[Token(Token = "0x6000360")]
		[Address(RVA = "0xDD6CCC", Offset = "0xDD6CCC", VA = "0xDD6CCC")]
		public static extern ulong ovr_User_GetLoggedInUser();

		[PreserveSig]
		[Token(Token = "0x6000361")]
		[Address(RVA = "0xDD6D7C", Offset = "0xDD6D7C", VA = "0xDD6D7C")]
		public static extern ulong ovr_User_GetLoggedInUserFriends();

		[PreserveSig]
		[Token(Token = "0x6000362")]
		[Address(RVA = "0xDD6E2C", Offset = "0xDD6E2C", VA = "0xDD6E2C")]
		public static extern ulong ovr_User_GetLoggedInUserFriendsAndRooms();

		[PreserveSig]
		[Token(Token = "0x6000363")]
		[Address(RVA = "0xDD6EDC", Offset = "0xDD6EDC", VA = "0xDD6EDC")]
		public static extern ulong ovr_User_GetLoggedInUserRecentlyMetUsersAndRooms(IntPtr userOptions);

		[PreserveSig]
		[Token(Token = "0x6000364")]
		[Address(RVA = "0xDD6F9C", Offset = "0xDD6F9C", VA = "0xDD6F9C")]
		public static extern ulong ovr_User_GetOrgScopedID(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000365")]
		[Address(RVA = "0xDD7064", Offset = "0xDD7064", VA = "0xDD7064")]
		public static extern ulong ovr_User_GetSdkAccounts();

		[PreserveSig]
		[Token(Token = "0x6000366")]
		[Address(RVA = "0xDD7114", Offset = "0xDD7114", VA = "0xDD7114")]
		public static extern ulong ovr_User_GetUserProof();

		[PreserveSig]
		[Token(Token = "0x6000367")]
		[Address(RVA = "0xDD71C4", Offset = "0xDD71C4", VA = "0xDD71C4")]
		public static extern ulong ovr_User_LaunchBlockFlow(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000368")]
		[Address(RVA = "0xDD728C", Offset = "0xDD728C", VA = "0xDD728C")]
		public static extern ulong ovr_User_LaunchFriendRequestFlow(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000369")]
		[Address(RVA = "0xDD7354", Offset = "0xDD7354", VA = "0xDD7354")]
		public static extern ulong ovr_User_LaunchProfile(ulong userID);

		[PreserveSig]
		[Token(Token = "0x600036A")]
		[Address(RVA = "0xDD741C", Offset = "0xDD741C", VA = "0xDD741C")]
		public static extern ulong ovr_User_LaunchReportFlow(ulong userID);

		[PreserveSig]
		[Token(Token = "0x600036B")]
		[Address(RVA = "0xDD74E4", Offset = "0xDD74E4", VA = "0xDD74E4")]
		public static extern ulong ovr_User_LaunchReportFlow2(ulong optionalUserID, IntPtr abuseReportOptions);

		[PreserveSig]
		[Token(Token = "0x600036C")]
		[Address(RVA = "0xDD75B0", Offset = "0xDD75B0", VA = "0xDD75B0")]
		public static extern ulong ovr_User_LaunchUnblockFlow(ulong userID);

		[PreserveSig]
		[Token(Token = "0x600036D")]
		[Address(RVA = "0xDD7678", Offset = "0xDD7678", VA = "0xDD7678")]
		public static extern ulong ovr_User_NewEntitledTestUser();

		[PreserveSig]
		[Token(Token = "0x600036E")]
		[Address(RVA = "0xDD7728", Offset = "0xDD7728", VA = "0xDD7728")]
		public static extern ulong ovr_User_NewTestUser();

		[PreserveSig]
		[Token(Token = "0x600036F")]
		[Address(RVA = "0xDD77D8", Offset = "0xDD77D8", VA = "0xDD77D8")]
		public static extern ulong ovr_User_NewTestUserFriends();

		[PreserveSig]
		[Token(Token = "0x6000370")]
		[Address(RVA = "0xDD7888", Offset = "0xDD7888", VA = "0xDD7888")]
		public static extern ulong ovr_User_StartRecordingForReportFlow();

		[Token(Token = "0x6000371")]
		[Address(RVA = "0xDD7938", Offset = "0xDD7938", VA = "0xDD7938")]
		public static ulong ovr_User_StopRecordingAndLaunchReportFlow(ulong optionalUserID, string optionalRecordingUUID)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000372")]
		[Address(RVA = "0xDD7A28", Offset = "0xDD7A28", VA = "0xDD7A28")]
		private static extern ulong ovr_User_StopRecordingAndLaunchReportFlow_Native(ulong optionalUserID, IntPtr optionalRecordingUUID);

		[Token(Token = "0x6000373")]
		[Address(RVA = "0xDD7AF4", Offset = "0xDD7AF4", VA = "0xDD7AF4")]
		public static ulong ovr_User_StopRecordingAndLaunchReportFlow2(ulong optionalUserID, string optionalRecordingUUID, IntPtr abuseReportOptions)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000374")]
		[Address(RVA = "0xDD7BE8", Offset = "0xDD7BE8", VA = "0xDD7BE8")]
		private static extern ulong ovr_User_StopRecordingAndLaunchReportFlow2_Native(ulong optionalUserID, IntPtr optionalRecordingUUID, IntPtr abuseReportOptions);

		[Token(Token = "0x6000375")]
		[Address(RVA = "0xDD7CB8", Offset = "0xDD7CB8", VA = "0xDD7CB8")]
		public static ulong ovr_User_TestUserCreateDeviceManifest(string deviceID, ulong[] appIDs, int numAppIDs)
		{
			return default(ulong);
		}

		[PreserveSig]
		[Token(Token = "0x6000376")]
		[Address(RVA = "0xDD7DA8", Offset = "0xDD7DA8", VA = "0xDD7DA8")]
		private static extern ulong ovr_User_TestUserCreateDeviceManifest_Native(IntPtr deviceID, ulong[] appIDs, int numAppIDs);

		[PreserveSig]
		[Token(Token = "0x6000377")]
		[Address(RVA = "0xDD7E80", Offset = "0xDD7E80", VA = "0xDD7E80")]
		public static extern ulong ovr_Voip_SetSystemVoipSuppressed(bool suppressed);

		[Token(Token = "0x6000378")]
		[Address(RVA = "0xDD7F40", Offset = "0xDD7F40", VA = "0xDD7F40")]
		public static string ovr_AbuseReportRecording_GetRecordingUuid(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000379")]
		[Address(RVA = "0xDD7FC8", Offset = "0xDD7FC8", VA = "0xDD7FC8")]
		private static extern IntPtr ovr_AbuseReportRecording_GetRecordingUuid_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600037A")]
		[Address(RVA = "0xDD8088", Offset = "0xDD8088", VA = "0xDD8088")]
		public static extern uint ovr_AchievementDefinition_GetBitfieldLength(IntPtr obj);

		[Token(Token = "0x600037B")]
		[Address(RVA = "0xDD8148", Offset = "0xDD8148", VA = "0xDD8148")]
		public static string ovr_AchievementDefinition_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600037C")]
		[Address(RVA = "0xDD81D0", Offset = "0xDD81D0", VA = "0xDD81D0")]
		private static extern IntPtr ovr_AchievementDefinition_GetName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600037D")]
		[Address(RVA = "0xDD8290", Offset = "0xDD8290", VA = "0xDD8290")]
		public static extern ulong ovr_AchievementDefinition_GetTarget(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600037E")]
		[Address(RVA = "0xDD8350", Offset = "0xDD8350", VA = "0xDD8350")]
		public static extern AchievementType ovr_AchievementDefinition_GetType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600037F")]
		[Address(RVA = "0xDD8410", Offset = "0xDD8410", VA = "0xDD8410")]
		public static extern IntPtr ovr_AchievementDefinitionArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x6000380")]
		[Address(RVA = "0xDD84D8", Offset = "0xDD84D8", VA = "0xDD84D8")]
		public static string ovr_AchievementDefinitionArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000381")]
		[Address(RVA = "0xDD8560", Offset = "0xDD8560", VA = "0xDD8560")]
		private static extern IntPtr ovr_AchievementDefinitionArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000382")]
		[Address(RVA = "0xDD8620", Offset = "0xDD8620", VA = "0xDD8620")]
		public static extern UIntPtr ovr_AchievementDefinitionArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000383")]
		[Address(RVA = "0xDD86E0", Offset = "0xDD86E0", VA = "0xDD86E0")]
		public static extern bool ovr_AchievementDefinitionArray_HasNextPage(IntPtr obj);

		[Token(Token = "0x6000384")]
		[Address(RVA = "0xDD87A8", Offset = "0xDD87A8", VA = "0xDD87A8")]
		public static string ovr_AchievementProgress_GetBitfield(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000385")]
		[Address(RVA = "0xDD8830", Offset = "0xDD8830", VA = "0xDD8830")]
		private static extern IntPtr ovr_AchievementProgress_GetBitfield_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000386")]
		[Address(RVA = "0xDD88F0", Offset = "0xDD88F0", VA = "0xDD88F0")]
		public static extern ulong ovr_AchievementProgress_GetCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000387")]
		[Address(RVA = "0xDD89B0", Offset = "0xDD89B0", VA = "0xDD89B0")]
		public static extern bool ovr_AchievementProgress_GetIsUnlocked(IntPtr obj);

		[Token(Token = "0x6000388")]
		[Address(RVA = "0xDD8A78", Offset = "0xDD8A78", VA = "0xDD8A78")]
		public static string ovr_AchievementProgress_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000389")]
		[Address(RVA = "0xDD8B00", Offset = "0xDD8B00", VA = "0xDD8B00")]
		private static extern IntPtr ovr_AchievementProgress_GetName_Native(IntPtr obj);

		[Token(Token = "0x600038A")]
		[Address(RVA = "0xDD8BC0", Offset = "0xDD8BC0", VA = "0xDD8BC0")]
		public static DateTime ovr_AchievementProgress_GetUnlockTime(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Token(Token = "0x600038B")]
		[Address(RVA = "0xDD8C68", Offset = "0xDD8C68", VA = "0xDD8C68")]
		private static extern ulong ovr_AchievementProgress_GetUnlockTime_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600038C")]
		[Address(RVA = "0xDD8D28", Offset = "0xDD8D28", VA = "0xDD8D28")]
		public static extern IntPtr ovr_AchievementProgressArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x600038D")]
		[Address(RVA = "0xDD8DF0", Offset = "0xDD8DF0", VA = "0xDD8DF0")]
		public static string ovr_AchievementProgressArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600038E")]
		[Address(RVA = "0xDD8E78", Offset = "0xDD8E78", VA = "0xDD8E78")]
		private static extern IntPtr ovr_AchievementProgressArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600038F")]
		[Address(RVA = "0xDD8F38", Offset = "0xDD8F38", VA = "0xDD8F38")]
		public static extern UIntPtr ovr_AchievementProgressArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000390")]
		[Address(RVA = "0xDD8FF8", Offset = "0xDD8FF8", VA = "0xDD8FF8")]
		public static extern bool ovr_AchievementProgressArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000391")]
		[Address(RVA = "0xDD90C0", Offset = "0xDD90C0", VA = "0xDD90C0")]
		public static extern bool ovr_AchievementUpdate_GetJustUnlocked(IntPtr obj);

		[Token(Token = "0x6000392")]
		[Address(RVA = "0xDD9188", Offset = "0xDD9188", VA = "0xDD9188")]
		public static string ovr_AchievementUpdate_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000393")]
		[Address(RVA = "0xDD9210", Offset = "0xDD9210", VA = "0xDD9210")]
		private static extern IntPtr ovr_AchievementUpdate_GetName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000394")]
		[Address(RVA = "0xDD92D0", Offset = "0xDD92D0", VA = "0xDD92D0")]
		public static extern ulong ovr_Application_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000395")]
		[Address(RVA = "0xDD9390", Offset = "0xDD9390", VA = "0xDD9390")]
		public static extern int ovr_ApplicationVersion_GetCurrentCode(IntPtr obj);

		[Token(Token = "0x6000396")]
		[Address(RVA = "0xDD9450", Offset = "0xDD9450", VA = "0xDD9450")]
		public static string ovr_ApplicationVersion_GetCurrentName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000397")]
		[Address(RVA = "0xDD94D8", Offset = "0xDD94D8", VA = "0xDD94D8")]
		private static extern IntPtr ovr_ApplicationVersion_GetCurrentName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000398")]
		[Address(RVA = "0xDD9598", Offset = "0xDD9598", VA = "0xDD9598")]
		public static extern int ovr_ApplicationVersion_GetLatestCode(IntPtr obj);

		[Token(Token = "0x6000399")]
		[Address(RVA = "0xDD9658", Offset = "0xDD9658", VA = "0xDD9658")]
		public static string ovr_ApplicationVersion_GetLatestName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600039A")]
		[Address(RVA = "0xDD96E0", Offset = "0xDD96E0", VA = "0xDD96E0")]
		private static extern IntPtr ovr_ApplicationVersion_GetLatestName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600039B")]
		[Address(RVA = "0xDD97A0", Offset = "0xDD97A0", VA = "0xDD97A0")]
		public static extern ulong ovr_AssetDetails_GetAssetId(IntPtr obj);

		[Token(Token = "0x600039C")]
		[Address(RVA = "0xDD9860", Offset = "0xDD9860", VA = "0xDD9860")]
		public static string ovr_AssetDetails_GetAssetType(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600039D")]
		[Address(RVA = "0xDD98E8", Offset = "0xDD98E8", VA = "0xDD98E8")]
		private static extern IntPtr ovr_AssetDetails_GetAssetType_Native(IntPtr obj);

		[Token(Token = "0x600039E")]
		[Address(RVA = "0xDD99A8", Offset = "0xDD99A8", VA = "0xDD99A8")]
		public static string ovr_AssetDetails_GetDownloadStatus(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600039F")]
		[Address(RVA = "0xDD9A30", Offset = "0xDD9A30", VA = "0xDD9A30")]
		private static extern IntPtr ovr_AssetDetails_GetDownloadStatus_Native(IntPtr obj);

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0xDD9AF0", Offset = "0xDD9AF0", VA = "0xDD9AF0")]
		public static string ovr_AssetDetails_GetFilepath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003A1")]
		[Address(RVA = "0xDD9B78", Offset = "0xDD9B78", VA = "0xDD9B78")]
		private static extern IntPtr ovr_AssetDetails_GetFilepath_Native(IntPtr obj);

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0xDD9C38", Offset = "0xDD9C38", VA = "0xDD9C38")]
		public static string ovr_AssetDetails_GetIapStatus(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003A3")]
		[Address(RVA = "0xDD9CC0", Offset = "0xDD9CC0", VA = "0xDD9CC0")]
		private static extern IntPtr ovr_AssetDetails_GetIapStatus_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003A4")]
		[Address(RVA = "0xDD9D80", Offset = "0xDD9D80", VA = "0xDD9D80")]
		public static extern IntPtr ovr_AssetDetails_GetLanguage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003A5")]
		[Address(RVA = "0xDD9E40", Offset = "0xDD9E40", VA = "0xDD9E40")]
		public static extern IntPtr ovr_AssetDetailsArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x60003A6")]
		[Address(RVA = "0xDD9F08", Offset = "0xDD9F08", VA = "0xDD9F08")]
		public static extern UIntPtr ovr_AssetDetailsArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003A7")]
		[Address(RVA = "0xDD9FC8", Offset = "0xDD9FC8", VA = "0xDD9FC8")]
		public static extern ulong ovr_AssetFileDeleteResult_GetAssetFileId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003A8")]
		[Address(RVA = "0xDDA088", Offset = "0xDDA088", VA = "0xDDA088")]
		public static extern ulong ovr_AssetFileDeleteResult_GetAssetId(IntPtr obj);

		[Token(Token = "0x60003A9")]
		[Address(RVA = "0xDDA148", Offset = "0xDDA148", VA = "0xDDA148")]
		public static string ovr_AssetFileDeleteResult_GetFilepath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003AA")]
		[Address(RVA = "0xDDA1D0", Offset = "0xDDA1D0", VA = "0xDDA1D0")]
		private static extern IntPtr ovr_AssetFileDeleteResult_GetFilepath_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003AB")]
		[Address(RVA = "0xDDA290", Offset = "0xDDA290", VA = "0xDDA290")]
		public static extern bool ovr_AssetFileDeleteResult_GetSuccess(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003AC")]
		[Address(RVA = "0xDDA358", Offset = "0xDDA358", VA = "0xDDA358")]
		public static extern ulong ovr_AssetFileDownloadCancelResult_GetAssetFileId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003AD")]
		[Address(RVA = "0xDDA418", Offset = "0xDDA418", VA = "0xDDA418")]
		public static extern ulong ovr_AssetFileDownloadCancelResult_GetAssetId(IntPtr obj);

		[Token(Token = "0x60003AE")]
		[Address(RVA = "0xDDA4D8", Offset = "0xDDA4D8", VA = "0xDDA4D8")]
		public static string ovr_AssetFileDownloadCancelResult_GetFilepath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003AF")]
		[Address(RVA = "0xDDA560", Offset = "0xDDA560", VA = "0xDDA560")]
		private static extern IntPtr ovr_AssetFileDownloadCancelResult_GetFilepath_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003B0")]
		[Address(RVA = "0xDDA620", Offset = "0xDDA620", VA = "0xDDA620")]
		public static extern bool ovr_AssetFileDownloadCancelResult_GetSuccess(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003B1")]
		[Address(RVA = "0xDDA6E8", Offset = "0xDDA6E8", VA = "0xDDA6E8")]
		public static extern ulong ovr_AssetFileDownloadResult_GetAssetId(IntPtr obj);

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0xDDA7A8", Offset = "0xDDA7A8", VA = "0xDDA7A8")]
		public static string ovr_AssetFileDownloadResult_GetFilepath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003B3")]
		[Address(RVA = "0xDDA830", Offset = "0xDDA830", VA = "0xDDA830")]
		private static extern IntPtr ovr_AssetFileDownloadResult_GetFilepath_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003B4")]
		[Address(RVA = "0xDDA8F0", Offset = "0xDDA8F0", VA = "0xDDA8F0")]
		public static extern ulong ovr_AssetFileDownloadUpdate_GetAssetFileId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003B5")]
		[Address(RVA = "0xDDA9B0", Offset = "0xDDA9B0", VA = "0xDDA9B0")]
		public static extern ulong ovr_AssetFileDownloadUpdate_GetAssetId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003B6")]
		[Address(RVA = "0xDDAA70", Offset = "0xDDAA70", VA = "0xDDAA70")]
		public static extern uint ovr_AssetFileDownloadUpdate_GetBytesTotal(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003B7")]
		[Address(RVA = "0xDDAB30", Offset = "0xDDAB30", VA = "0xDDAB30")]
		public static extern int ovr_AssetFileDownloadUpdate_GetBytesTransferred(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003B8")]
		[Address(RVA = "0xDDABF0", Offset = "0xDDABF0", VA = "0xDDABF0")]
		public static extern bool ovr_AssetFileDownloadUpdate_GetCompleted(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003B9")]
		[Address(RVA = "0xDDACB8", Offset = "0xDDACB8", VA = "0xDDACB8")]
		public static extern int ovr_CalApplicationFinalized_GetCountdownMS(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003BA")]
		[Address(RVA = "0xDDAD78", Offset = "0xDDAD78", VA = "0xDDAD78")]
		public static extern ulong ovr_CalApplicationFinalized_GetID(IntPtr obj);

		[Token(Token = "0x60003BB")]
		[Address(RVA = "0xDDAE38", Offset = "0xDDAE38", VA = "0xDDAE38")]
		public static string ovr_CalApplicationFinalized_GetLaunchDetails(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003BC")]
		[Address(RVA = "0xDDAEC0", Offset = "0xDDAEC0", VA = "0xDDAEC0")]
		private static extern IntPtr ovr_CalApplicationFinalized_GetLaunchDetails_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003BD")]
		[Address(RVA = "0xDDAF80", Offset = "0xDDAF80", VA = "0xDDAF80")]
		public static extern ulong ovr_CalApplicationProposed_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003BE")]
		[Address(RVA = "0xDDB040", Offset = "0xDDB040", VA = "0xDDB040")]
		public static extern ulong ovr_CalApplicationSuggestion_GetID(IntPtr obj);

		[Token(Token = "0x60003BF")]
		[Address(RVA = "0xDDB100", Offset = "0xDDB100", VA = "0xDDB100")]
		public static string ovr_CalApplicationSuggestion_GetSocialContext(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003C0")]
		[Address(RVA = "0xDDB188", Offset = "0xDDB188", VA = "0xDDB188")]
		private static extern IntPtr ovr_CalApplicationSuggestion_GetSocialContext_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003C1")]
		[Address(RVA = "0xDDB248", Offset = "0xDDB248", VA = "0xDDB248")]
		public static extern IntPtr ovr_CalApplicationSuggestionArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x60003C2")]
		[Address(RVA = "0xDDB310", Offset = "0xDDB310", VA = "0xDDB310")]
		public static extern UIntPtr ovr_CalApplicationSuggestionArray_GetSize(IntPtr obj);

		[Token(Token = "0x60003C3")]
		[Address(RVA = "0xDDB3D0", Offset = "0xDDB3D0", VA = "0xDDB3D0")]
		public static string ovr_CloudStorage2UserDirectoryPathResponse_GetPath(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003C4")]
		[Address(RVA = "0xDDB458", Offset = "0xDDB458", VA = "0xDDB458")]
		private static extern IntPtr ovr_CloudStorage2UserDirectoryPathResponse_GetPath_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003C5")]
		[Address(RVA = "0xDDB518", Offset = "0xDDB518", VA = "0xDDB518")]
		public static extern IntPtr ovr_CloudStorageConflictMetadata_GetLocal(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003C6")]
		[Address(RVA = "0xDDB5D8", Offset = "0xDDB5D8", VA = "0xDDB5D8")]
		public static extern IntPtr ovr_CloudStorageConflictMetadata_GetRemote(IntPtr obj);

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0xDDB698", Offset = "0xDDB698", VA = "0xDDB698")]
		public static string ovr_CloudStorageData_GetBucket(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003C8")]
		[Address(RVA = "0xDDB720", Offset = "0xDDB720", VA = "0xDDB720")]
		private static extern IntPtr ovr_CloudStorageData_GetBucket_Native(IntPtr obj);

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0xDDB7E0", Offset = "0xDDB7E0", VA = "0xDDB7E0")]
		public static byte[] ovr_CloudStorageData_GetData(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003CA")]
		[Address(RVA = "0xDDB938", Offset = "0xDDB938", VA = "0xDDB938")]
		private static extern IntPtr ovr_CloudStorageData_GetData_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003CB")]
		[Address(RVA = "0xDDB878", Offset = "0xDDB878", VA = "0xDDB878")]
		public static extern uint ovr_CloudStorageData_GetDataSize(IntPtr obj);

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0xDDB9F8", Offset = "0xDDB9F8", VA = "0xDDB9F8")]
		public static string ovr_CloudStorageData_GetKey(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003CD")]
		[Address(RVA = "0xDDBA80", Offset = "0xDDBA80", VA = "0xDDBA80")]
		private static extern IntPtr ovr_CloudStorageData_GetKey_Native(IntPtr obj);

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0xDDBB40", Offset = "0xDDBB40", VA = "0xDDBB40")]
		public static string ovr_CloudStorageMetadata_GetBucket(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003CF")]
		[Address(RVA = "0xDDBBC8", Offset = "0xDDBBC8", VA = "0xDDBBC8")]
		private static extern IntPtr ovr_CloudStorageMetadata_GetBucket_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003D0")]
		[Address(RVA = "0xDDBC88", Offset = "0xDDBC88", VA = "0xDDBC88")]
		public static extern long ovr_CloudStorageMetadata_GetCounter(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003D1")]
		[Address(RVA = "0xDDBD48", Offset = "0xDDBD48", VA = "0xDDBD48")]
		public static extern uint ovr_CloudStorageMetadata_GetDataSize(IntPtr obj);

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0xDDBE08", Offset = "0xDDBE08", VA = "0xDDBE08")]
		public static string ovr_CloudStorageMetadata_GetExtraData(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003D3")]
		[Address(RVA = "0xDDBE90", Offset = "0xDDBE90", VA = "0xDDBE90")]
		private static extern IntPtr ovr_CloudStorageMetadata_GetExtraData_Native(IntPtr obj);

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0xDDBF50", Offset = "0xDDBF50", VA = "0xDDBF50")]
		public static string ovr_CloudStorageMetadata_GetKey(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003D5")]
		[Address(RVA = "0xDDBFD8", Offset = "0xDDBFD8", VA = "0xDDBFD8")]
		private static extern IntPtr ovr_CloudStorageMetadata_GetKey_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003D6")]
		[Address(RVA = "0xDDC098", Offset = "0xDDC098", VA = "0xDDC098")]
		public static extern ulong ovr_CloudStorageMetadata_GetSaveTime(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003D7")]
		[Address(RVA = "0xDDC158", Offset = "0xDDC158", VA = "0xDDC158")]
		public static extern CloudStorageDataStatus ovr_CloudStorageMetadata_GetStatus(IntPtr obj);

		[Token(Token = "0x60003D8")]
		[Address(RVA = "0xDDC218", Offset = "0xDDC218", VA = "0xDDC218")]
		public static string ovr_CloudStorageMetadata_GetVersionHandle(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003D9")]
		[Address(RVA = "0xDDC2A0", Offset = "0xDDC2A0", VA = "0xDDC2A0")]
		private static extern IntPtr ovr_CloudStorageMetadata_GetVersionHandle_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003DA")]
		[Address(RVA = "0xDDC360", Offset = "0xDDC360", VA = "0xDDC360")]
		public static extern IntPtr ovr_CloudStorageMetadataArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x60003DB")]
		[Address(RVA = "0xDDC428", Offset = "0xDDC428", VA = "0xDDC428")]
		public static string ovr_CloudStorageMetadataArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003DC")]
		[Address(RVA = "0xDDC4B0", Offset = "0xDDC4B0", VA = "0xDDC4B0")]
		private static extern IntPtr ovr_CloudStorageMetadataArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003DD")]
		[Address(RVA = "0xDDC570", Offset = "0xDDC570", VA = "0xDDC570")]
		public static extern UIntPtr ovr_CloudStorageMetadataArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003DE")]
		[Address(RVA = "0xDDC630", Offset = "0xDDC630", VA = "0xDDC630")]
		public static extern bool ovr_CloudStorageMetadataArray_HasNextPage(IntPtr obj);

		[Token(Token = "0x60003DF")]
		[Address(RVA = "0xDDC6F8", Offset = "0xDDC6F8", VA = "0xDDC6F8")]
		public static string ovr_CloudStorageUpdateResponse_GetBucket(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003E0")]
		[Address(RVA = "0xDDC780", Offset = "0xDDC780", VA = "0xDDC780")]
		private static extern IntPtr ovr_CloudStorageUpdateResponse_GetBucket_Native(IntPtr obj);

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0xDDC840", Offset = "0xDDC840", VA = "0xDDC840")]
		public static string ovr_CloudStorageUpdateResponse_GetKey(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003E2")]
		[Address(RVA = "0xDDC8C8", Offset = "0xDDC8C8", VA = "0xDDC8C8")]
		private static extern IntPtr ovr_CloudStorageUpdateResponse_GetKey_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003E3")]
		[Address(RVA = "0xDDC988", Offset = "0xDDC988", VA = "0xDDC988")]
		public static extern CloudStorageUpdateStatus ovr_CloudStorageUpdateResponse_GetStatus(IntPtr obj);

		[Token(Token = "0x60003E4")]
		[Address(RVA = "0xDDCA48", Offset = "0xDDCA48", VA = "0xDDCA48")]
		public static string ovr_CloudStorageUpdateResponse_GetVersionHandle(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003E5")]
		[Address(RVA = "0xDDCAD0", Offset = "0xDDCAD0", VA = "0xDDCAD0")]
		private static extern IntPtr ovr_CloudStorageUpdateResponse_GetVersionHandle_Native(IntPtr obj);

		[Token(Token = "0x60003E6")]
		[Address(RVA = "0xDDCB90", Offset = "0xDDCB90", VA = "0xDDCB90")]
		public static uint ovr_DataStore_Contains(IntPtr obj, string key)
		{
			return default(uint);
		}

		[PreserveSig]
		[Token(Token = "0x60003E7")]
		[Address(RVA = "0xDDCC68", Offset = "0xDDCC68", VA = "0xDDCC68")]
		private static extern uint ovr_DataStore_Contains_Native(IntPtr obj, IntPtr key);

		[Token(Token = "0x60003E8")]
		[Address(RVA = "0xDCB058", Offset = "0xDCB058", VA = "0xDCB058")]
		public static string ovr_DataStore_GetKey(IntPtr obj, int index)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003E9")]
		[Address(RVA = "0xDDCD30", Offset = "0xDDCD30", VA = "0xDDCD30")]
		private static extern IntPtr ovr_DataStore_GetKey_Native(IntPtr obj, int index);

		[PreserveSig]
		[Token(Token = "0x60003EA")]
		[Address(RVA = "0xDCAF98", Offset = "0xDCAF98", VA = "0xDCAF98")]
		public static extern UIntPtr ovr_DataStore_GetNumKeys(IntPtr obj);

		[Token(Token = "0x60003EB")]
		[Address(RVA = "0xDCB0E8", Offset = "0xDCB0E8", VA = "0xDCB0E8")]
		public static string ovr_DataStore_GetValue(IntPtr obj, string key)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003EC")]
		[Address(RVA = "0xDDCDF8", Offset = "0xDDCDF8", VA = "0xDDCDF8")]
		private static extern IntPtr ovr_DataStore_GetValue_Native(IntPtr obj, IntPtr key);

		[PreserveSig]
		[Token(Token = "0x60003ED")]
		[Address(RVA = "0xDDCEC0", Offset = "0xDDCEC0", VA = "0xDDCEC0")]
		public static extern int ovr_Error_GetCode(IntPtr obj);

		[Token(Token = "0x60003EE")]
		[Address(RVA = "0xDDCF7C", Offset = "0xDDCF7C", VA = "0xDDCF7C")]
		public static string ovr_Error_GetDisplayableMessage(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003EF")]
		[Address(RVA = "0xDDD004", Offset = "0xDDD004", VA = "0xDDD004")]
		private static extern IntPtr ovr_Error_GetDisplayableMessage_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003F0")]
		[Address(RVA = "0xDDD0C4", Offset = "0xDDD0C4", VA = "0xDDD0C4")]
		public static extern int ovr_Error_GetHttpCode(IntPtr obj);

		[Token(Token = "0x60003F1")]
		[Address(RVA = "0xDDD184", Offset = "0xDDD184", VA = "0xDDD184")]
		public static string ovr_Error_GetMessage(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003F2")]
		[Address(RVA = "0xDDD20C", Offset = "0xDDD20C", VA = "0xDDD20C")]
		private static extern IntPtr ovr_Error_GetMessage_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003F3")]
		[Address(RVA = "0xDDD2CC", Offset = "0xDDD2CC", VA = "0xDDD2CC")]
		public static extern IntPtr ovr_HttpTransferUpdate_GetBytes(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003F4")]
		[Address(RVA = "0xDDD38C", Offset = "0xDDD38C", VA = "0xDDD38C")]
		public static extern ulong ovr_HttpTransferUpdate_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003F5")]
		[Address(RVA = "0xDDD44C", Offset = "0xDDD44C", VA = "0xDDD44C")]
		public static extern UIntPtr ovr_HttpTransferUpdate_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003F6")]
		[Address(RVA = "0xDDD50C", Offset = "0xDDD50C", VA = "0xDDD50C")]
		public static extern bool ovr_HttpTransferUpdate_IsCompleted(IntPtr obj);

		[Token(Token = "0x60003F7")]
		[Address(RVA = "0xDDD5D4", Offset = "0xDDD5D4", VA = "0xDDD5D4")]
		public static string ovr_InstalledApplication_GetApplicationId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003F8")]
		[Address(RVA = "0xDDD65C", Offset = "0xDDD65C", VA = "0xDDD65C")]
		private static extern IntPtr ovr_InstalledApplication_GetApplicationId_Native(IntPtr obj);

		[Token(Token = "0x60003F9")]
		[Address(RVA = "0xDDD71C", Offset = "0xDDD71C", VA = "0xDDD71C")]
		public static string ovr_InstalledApplication_GetPackageName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003FA")]
		[Address(RVA = "0xDDD7A4", Offset = "0xDDD7A4", VA = "0xDDD7A4")]
		private static extern IntPtr ovr_InstalledApplication_GetPackageName_Native(IntPtr obj);

		[Token(Token = "0x60003FB")]
		[Address(RVA = "0xDDD864", Offset = "0xDDD864", VA = "0xDDD864")]
		public static string ovr_InstalledApplication_GetStatus(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003FC")]
		[Address(RVA = "0xDDD8EC", Offset = "0xDDD8EC", VA = "0xDDD8EC")]
		private static extern IntPtr ovr_InstalledApplication_GetStatus_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60003FD")]
		[Address(RVA = "0xDDD9AC", Offset = "0xDDD9AC", VA = "0xDDD9AC")]
		public static extern int ovr_InstalledApplication_GetVersionCode(IntPtr obj);

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0xDDDA6C", Offset = "0xDDDA6C", VA = "0xDDDA6C")]
		public static string ovr_InstalledApplication_GetVersionName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60003FF")]
		[Address(RVA = "0xDDDAF4", Offset = "0xDDDAF4", VA = "0xDDDAF4")]
		private static extern IntPtr ovr_InstalledApplication_GetVersionName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000400")]
		[Address(RVA = "0xDDDBB4", Offset = "0xDDDBB4", VA = "0xDDDBB4")]
		public static extern IntPtr ovr_InstalledApplicationArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x6000401")]
		[Address(RVA = "0xDDDC7C", Offset = "0xDDDC7C", VA = "0xDDDC7C")]
		public static extern UIntPtr ovr_InstalledApplicationArray_GetSize(IntPtr obj);

		[Token(Token = "0x6000402")]
		[Address(RVA = "0xDDDD3C", Offset = "0xDDDD3C", VA = "0xDDDD3C")]
		public static string ovr_LanguagePackInfo_GetEnglishName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000403")]
		[Address(RVA = "0xDDDDC4", Offset = "0xDDDDC4", VA = "0xDDDDC4")]
		private static extern IntPtr ovr_LanguagePackInfo_GetEnglishName_Native(IntPtr obj);

		[Token(Token = "0x6000404")]
		[Address(RVA = "0xDDDE84", Offset = "0xDDDE84", VA = "0xDDDE84")]
		public static string ovr_LanguagePackInfo_GetNativeName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000405")]
		[Address(RVA = "0xDDDF0C", Offset = "0xDDDF0C", VA = "0xDDDF0C")]
		private static extern IntPtr ovr_LanguagePackInfo_GetNativeName_Native(IntPtr obj);

		[Token(Token = "0x6000406")]
		[Address(RVA = "0xDDDFCC", Offset = "0xDDDFCC", VA = "0xDDDFCC")]
		public static string ovr_LanguagePackInfo_GetTag(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000407")]
		[Address(RVA = "0xDDE054", Offset = "0xDDE054", VA = "0xDDE054")]
		private static extern IntPtr ovr_LanguagePackInfo_GetTag_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000408")]
		[Address(RVA = "0xDDE114", Offset = "0xDDE114", VA = "0xDDE114")]
		public static extern bool ovr_LaunchBlockFlowResult_GetDidBlock(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000409")]
		[Address(RVA = "0xDDE1DC", Offset = "0xDDE1DC", VA = "0xDDE1DC")]
		public static extern bool ovr_LaunchBlockFlowResult_GetDidCancel(IntPtr obj);

		[Token(Token = "0x600040A")]
		[Address(RVA = "0xDDE2A4", Offset = "0xDDE2A4", VA = "0xDDE2A4")]
		public static string ovr_LaunchDetails_GetDeeplinkMessage(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600040B")]
		[Address(RVA = "0xDDE32C", Offset = "0xDDE32C", VA = "0xDDE32C")]
		private static extern IntPtr ovr_LaunchDetails_GetDeeplinkMessage_Native(IntPtr obj);

		[Token(Token = "0x600040C")]
		[Address(RVA = "0xDDE3EC", Offset = "0xDDE3EC", VA = "0xDDE3EC")]
		public static string ovr_LaunchDetails_GetLaunchSource(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600040D")]
		[Address(RVA = "0xDDE474", Offset = "0xDDE474", VA = "0xDDE474")]
		private static extern IntPtr ovr_LaunchDetails_GetLaunchSource_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600040E")]
		[Address(RVA = "0xDDE534", Offset = "0xDDE534", VA = "0xDDE534")]
		public static extern LaunchType ovr_LaunchDetails_GetLaunchType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600040F")]
		[Address(RVA = "0xDDE5F4", Offset = "0xDDE5F4", VA = "0xDDE5F4")]
		public static extern ulong ovr_LaunchDetails_GetRoomID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000410")]
		[Address(RVA = "0xDDE6B4", Offset = "0xDDE6B4", VA = "0xDDE6B4")]
		public static extern IntPtr ovr_LaunchDetails_GetUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000411")]
		[Address(RVA = "0xDDE774", Offset = "0xDDE774", VA = "0xDDE774")]
		public static extern bool ovr_LaunchFriendRequestFlowResult_GetDidCancel(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000412")]
		[Address(RVA = "0xDDE83C", Offset = "0xDDE83C", VA = "0xDDE83C")]
		public static extern bool ovr_LaunchFriendRequestFlowResult_GetDidSendRequest(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000413")]
		[Address(RVA = "0xDDE904", Offset = "0xDDE904", VA = "0xDDE904")]
		public static extern bool ovr_LaunchReportFlowResult_GetDidCancel(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000414")]
		[Address(RVA = "0xDDE9CC", Offset = "0xDDE9CC", VA = "0xDDE9CC")]
		public static extern ulong ovr_LaunchReportFlowResult_GetUserReportId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000415")]
		[Address(RVA = "0xDDEA8C", Offset = "0xDDEA8C", VA = "0xDDEA8C")]
		public static extern bool ovr_LaunchUnblockFlowResult_GetDidCancel(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000416")]
		[Address(RVA = "0xDDEB54", Offset = "0xDDEB54", VA = "0xDDEB54")]
		public static extern bool ovr_LaunchUnblockFlowResult_GetDidUnblock(IntPtr obj);

		[Token(Token = "0x6000417")]
		[Address(RVA = "0xDDEC1C", Offset = "0xDDEC1C", VA = "0xDDEC1C")]
		public static byte[] ovr_LeaderboardEntry_GetExtraData(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000418")]
		[Address(RVA = "0xDDED74", Offset = "0xDDED74", VA = "0xDDED74")]
		private static extern IntPtr ovr_LeaderboardEntry_GetExtraData_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000419")]
		[Address(RVA = "0xDDECB4", Offset = "0xDDECB4", VA = "0xDDECB4")]
		public static extern uint ovr_LeaderboardEntry_GetExtraDataLength(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600041A")]
		[Address(RVA = "0xDDEE34", Offset = "0xDDEE34", VA = "0xDDEE34")]
		public static extern int ovr_LeaderboardEntry_GetRank(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600041B")]
		[Address(RVA = "0xDDEEF4", Offset = "0xDDEEF4", VA = "0xDDEEF4")]
		public static extern long ovr_LeaderboardEntry_GetScore(IntPtr obj);

		[Token(Token = "0x600041C")]
		[Address(RVA = "0xDDEFB4", Offset = "0xDDEFB4", VA = "0xDDEFB4")]
		public static DateTime ovr_LeaderboardEntry_GetTimestamp(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Token(Token = "0x600041D")]
		[Address(RVA = "0xDDF05C", Offset = "0xDDF05C", VA = "0xDDF05C")]
		private static extern ulong ovr_LeaderboardEntry_GetTimestamp_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600041E")]
		[Address(RVA = "0xDDF11C", Offset = "0xDDF11C", VA = "0xDDF11C")]
		public static extern IntPtr ovr_LeaderboardEntry_GetUser(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600041F")]
		[Address(RVA = "0xDDF1DC", Offset = "0xDDF1DC", VA = "0xDDF1DC")]
		public static extern IntPtr ovr_LeaderboardEntryArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x6000420")]
		[Address(RVA = "0xDDF2A4", Offset = "0xDDF2A4", VA = "0xDDF2A4")]
		public static string ovr_LeaderboardEntryArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000421")]
		[Address(RVA = "0xDDF32C", Offset = "0xDDF32C", VA = "0xDDF32C")]
		private static extern IntPtr ovr_LeaderboardEntryArray_GetNextUrl_Native(IntPtr obj);

		[Token(Token = "0x6000422")]
		[Address(RVA = "0xDDF3EC", Offset = "0xDDF3EC", VA = "0xDDF3EC")]
		public static string ovr_LeaderboardEntryArray_GetPreviousUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000423")]
		[Address(RVA = "0xDDF474", Offset = "0xDDF474", VA = "0xDDF474")]
		private static extern IntPtr ovr_LeaderboardEntryArray_GetPreviousUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000424")]
		[Address(RVA = "0xDDF534", Offset = "0xDDF534", VA = "0xDDF534")]
		public static extern UIntPtr ovr_LeaderboardEntryArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000425")]
		[Address(RVA = "0xDDF5F4", Offset = "0xDDF5F4", VA = "0xDDF5F4")]
		public static extern ulong ovr_LeaderboardEntryArray_GetTotalCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000426")]
		[Address(RVA = "0xDDF6B4", Offset = "0xDDF6B4", VA = "0xDDF6B4")]
		public static extern bool ovr_LeaderboardEntryArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000427")]
		[Address(RVA = "0xDDF77C", Offset = "0xDDF77C", VA = "0xDDF77C")]
		public static extern bool ovr_LeaderboardEntryArray_HasPreviousPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000428")]
		[Address(RVA = "0xDDF844", Offset = "0xDDF844", VA = "0xDDF844")]
		public static extern bool ovr_LeaderboardUpdateStatus_GetDidUpdate(IntPtr obj);

		[Token(Token = "0x6000429")]
		[Address(RVA = "0xDDF90C", Offset = "0xDDF90C", VA = "0xDDF90C")]
		public static string ovr_LinkedAccount_GetAccessToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600042A")]
		[Address(RVA = "0xDDF994", Offset = "0xDDF994", VA = "0xDDF994")]
		private static extern IntPtr ovr_LinkedAccount_GetAccessToken_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600042B")]
		[Address(RVA = "0xDDFA54", Offset = "0xDDFA54", VA = "0xDDFA54")]
		public static extern ServiceProvider ovr_LinkedAccount_GetServiceProvider(IntPtr obj);

		[Token(Token = "0x600042C")]
		[Address(RVA = "0xDDFB14", Offset = "0xDDFB14", VA = "0xDDFB14")]
		public static string ovr_LinkedAccount_GetUserId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600042D")]
		[Address(RVA = "0xDDFB9C", Offset = "0xDDFB9C", VA = "0xDDFB9C")]
		private static extern IntPtr ovr_LinkedAccount_GetUserId_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600042E")]
		[Address(RVA = "0xDDFC5C", Offset = "0xDDFC5C", VA = "0xDDFC5C")]
		public static extern IntPtr ovr_LinkedAccountArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x600042F")]
		[Address(RVA = "0xDDFD24", Offset = "0xDDFD24", VA = "0xDDFD24")]
		public static extern UIntPtr ovr_LinkedAccountArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000430")]
		[Address(RVA = "0xDDFDE4", Offset = "0xDDFDE4", VA = "0xDDFDE4")]
		public static extern bool ovr_LivestreamingApplicationStatus_GetStreamingEnabled(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000431")]
		[Address(RVA = "0xDDFEAC", Offset = "0xDDFEAC", VA = "0xDDFEAC")]
		public static extern LivestreamingStartStatus ovr_LivestreamingStartResult_GetStreamingResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000432")]
		[Address(RVA = "0xDDFF6C", Offset = "0xDDFF6C", VA = "0xDDFF6C")]
		public static extern bool ovr_LivestreamingStatus_GetCommentsVisible(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000433")]
		[Address(RVA = "0xDE0034", Offset = "0xDE0034", VA = "0xDE0034")]
		public static extern bool ovr_LivestreamingStatus_GetIsPaused(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000434")]
		[Address(RVA = "0xDE00FC", Offset = "0xDE00FC", VA = "0xDE00FC")]
		public static extern bool ovr_LivestreamingStatus_GetLivestreamingEnabled(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000435")]
		[Address(RVA = "0xDE01C4", Offset = "0xDE01C4", VA = "0xDE01C4")]
		public static extern int ovr_LivestreamingStatus_GetLivestreamingType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000436")]
		[Address(RVA = "0xDE0284", Offset = "0xDE0284", VA = "0xDE0284")]
		public static extern bool ovr_LivestreamingStatus_GetMicEnabled(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000437")]
		[Address(RVA = "0xDE034C", Offset = "0xDE034C", VA = "0xDE034C")]
		public static extern int ovr_LivestreamingVideoStats_GetCommentCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000438")]
		[Address(RVA = "0xDE040C", Offset = "0xDE040C", VA = "0xDE040C")]
		public static extern int ovr_LivestreamingVideoStats_GetReactionCount(IntPtr obj);

		[Token(Token = "0x6000439")]
		[Address(RVA = "0xDE04CC", Offset = "0xDE04CC", VA = "0xDE04CC")]
		public static string ovr_LivestreamingVideoStats_GetTotalViews(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600043A")]
		[Address(RVA = "0xDE0554", Offset = "0xDE0554", VA = "0xDE0554")]
		private static extern IntPtr ovr_LivestreamingVideoStats_GetTotalViews_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600043B")]
		[Address(RVA = "0xDE0614", Offset = "0xDE0614", VA = "0xDE0614")]
		public static extern IntPtr ovr_MatchmakingAdminSnapshot_GetCandidates(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600043C")]
		[Address(RVA = "0xDE06D4", Offset = "0xDE06D4", VA = "0xDE06D4")]
		public static extern double ovr_MatchmakingAdminSnapshot_GetMyCurrentThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600043D")]
		[Address(RVA = "0xDE0794", Offset = "0xDE0794", VA = "0xDE0794")]
		public static extern bool ovr_MatchmakingAdminSnapshotCandidate_GetCanMatch(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600043E")]
		[Address(RVA = "0xDE085C", Offset = "0xDE085C", VA = "0xDE085C")]
		public static extern double ovr_MatchmakingAdminSnapshotCandidate_GetMyTotalScore(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600043F")]
		[Address(RVA = "0xDE091C", Offset = "0xDE091C", VA = "0xDE091C")]
		public static extern double ovr_MatchmakingAdminSnapshotCandidate_GetTheirCurrentThreshold(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000440")]
		[Address(RVA = "0xDE09DC", Offset = "0xDE09DC", VA = "0xDE09DC")]
		public static extern double ovr_MatchmakingAdminSnapshotCandidate_GetTheirTotalScore(IntPtr obj);

		[Token(Token = "0x6000441")]
		[Address(RVA = "0xDE0A9C", Offset = "0xDE0A9C", VA = "0xDE0A9C")]
		public static string ovr_MatchmakingAdminSnapshotCandidate_GetTraceId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000442")]
		[Address(RVA = "0xDE0B24", Offset = "0xDE0B24", VA = "0xDE0B24")]
		private static extern IntPtr ovr_MatchmakingAdminSnapshotCandidate_GetTraceId_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000443")]
		[Address(RVA = "0xDE0BE4", Offset = "0xDE0BE4", VA = "0xDE0BE4")]
		public static extern IntPtr ovr_MatchmakingAdminSnapshotCandidateArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x6000444")]
		[Address(RVA = "0xDE0CAC", Offset = "0xDE0CAC", VA = "0xDE0CAC")]
		public static extern UIntPtr ovr_MatchmakingAdminSnapshotCandidateArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000445")]
		[Address(RVA = "0xDE0D6C", Offset = "0xDE0D6C", VA = "0xDE0D6C")]
		public static extern IntPtr ovr_MatchmakingBrowseResult_GetEnqueueResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000446")]
		[Address(RVA = "0xDE0E2C", Offset = "0xDE0E2C", VA = "0xDE0E2C")]
		public static extern IntPtr ovr_MatchmakingBrowseResult_GetRooms(IntPtr obj);

		[Token(Token = "0x6000447")]
		[Address(RVA = "0xDE0EEC", Offset = "0xDE0EEC", VA = "0xDE0EEC")]
		public static string ovr_MatchmakingCandidate_GetEntryHash(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000448")]
		[Address(RVA = "0xDE0F74", Offset = "0xDE0F74", VA = "0xDE0F74")]
		private static extern IntPtr ovr_MatchmakingCandidate_GetEntryHash_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000449")]
		[Address(RVA = "0xDE1034", Offset = "0xDE1034", VA = "0xDE1034")]
		public static extern ulong ovr_MatchmakingCandidate_GetUserId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600044A")]
		[Address(RVA = "0xDE10F4", Offset = "0xDE10F4", VA = "0xDE10F4")]
		public static extern IntPtr ovr_MatchmakingCandidateArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x600044B")]
		[Address(RVA = "0xDE11BC", Offset = "0xDE11BC", VA = "0xDE11BC")]
		public static string ovr_MatchmakingCandidateArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600044C")]
		[Address(RVA = "0xDE1244", Offset = "0xDE1244", VA = "0xDE1244")]
		private static extern IntPtr ovr_MatchmakingCandidateArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600044D")]
		[Address(RVA = "0xDE1304", Offset = "0xDE1304", VA = "0xDE1304")]
		public static extern UIntPtr ovr_MatchmakingCandidateArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600044E")]
		[Address(RVA = "0xDE13C4", Offset = "0xDE13C4", VA = "0xDE13C4")]
		public static extern bool ovr_MatchmakingCandidateArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600044F")]
		[Address(RVA = "0xDE148C", Offset = "0xDE148C", VA = "0xDE148C")]
		public static extern IntPtr ovr_MatchmakingEnqueueResult_GetAdminSnapshot(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000450")]
		[Address(RVA = "0xDE154C", Offset = "0xDE154C", VA = "0xDE154C")]
		public static extern uint ovr_MatchmakingEnqueueResult_GetAverageWait(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000451")]
		[Address(RVA = "0xDE160C", Offset = "0xDE160C", VA = "0xDE160C")]
		public static extern uint ovr_MatchmakingEnqueueResult_GetMatchesInLastHourCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000452")]
		[Address(RVA = "0xDE16CC", Offset = "0xDE16CC", VA = "0xDE16CC")]
		public static extern uint ovr_MatchmakingEnqueueResult_GetMaxExpectedWait(IntPtr obj);

		[Token(Token = "0x6000453")]
		[Address(RVA = "0xDE178C", Offset = "0xDE178C", VA = "0xDE178C")]
		public static string ovr_MatchmakingEnqueueResult_GetPool(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000454")]
		[Address(RVA = "0xDE1814", Offset = "0xDE1814", VA = "0xDE1814")]
		private static extern IntPtr ovr_MatchmakingEnqueueResult_GetPool_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000455")]
		[Address(RVA = "0xDE18D4", Offset = "0xDE18D4", VA = "0xDE18D4")]
		public static extern uint ovr_MatchmakingEnqueueResult_GetRecentMatchPercentage(IntPtr obj);

		[Token(Token = "0x6000456")]
		[Address(RVA = "0xDE1994", Offset = "0xDE1994", VA = "0xDE1994")]
		public static string ovr_MatchmakingEnqueueResult_GetRequestHash(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000457")]
		[Address(RVA = "0xDE1A1C", Offset = "0xDE1A1C", VA = "0xDE1A1C")]
		private static extern IntPtr ovr_MatchmakingEnqueueResult_GetRequestHash_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000458")]
		[Address(RVA = "0xDE1ADC", Offset = "0xDE1ADC", VA = "0xDE1ADC")]
		public static extern IntPtr ovr_MatchmakingEnqueueResultAndRoom_GetMatchmakingEnqueueResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000459")]
		[Address(RVA = "0xDE1B9C", Offset = "0xDE1B9C", VA = "0xDE1B9C")]
		public static extern IntPtr ovr_MatchmakingEnqueueResultAndRoom_GetRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600045A")]
		[Address(RVA = "0xDE1C5C", Offset = "0xDE1C5C", VA = "0xDE1C5C")]
		public static extern ulong ovr_MatchmakingEnqueuedUser_GetAdditionalUserID(IntPtr obj, uint index);

		[PreserveSig]
		[Token(Token = "0x600045B")]
		[Address(RVA = "0xDE1D24", Offset = "0xDE1D24", VA = "0xDE1D24")]
		public static extern uint ovr_MatchmakingEnqueuedUser_GetAdditionalUserIDsSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600045C")]
		[Address(RVA = "0xDE1DE4", Offset = "0xDE1DE4", VA = "0xDE1DE4")]
		public static extern IntPtr ovr_MatchmakingEnqueuedUser_GetCustomData(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600045D")]
		[Address(RVA = "0xDE1EA4", Offset = "0xDE1EA4", VA = "0xDE1EA4")]
		public static extern IntPtr ovr_MatchmakingEnqueuedUser_GetUser(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600045E")]
		[Address(RVA = "0xDE1F64", Offset = "0xDE1F64", VA = "0xDE1F64")]
		public static extern IntPtr ovr_MatchmakingEnqueuedUserArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x600045F")]
		[Address(RVA = "0xDE202C", Offset = "0xDE202C", VA = "0xDE202C")]
		public static extern UIntPtr ovr_MatchmakingEnqueuedUserArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000460")]
		[Address(RVA = "0xDE20EC", Offset = "0xDE20EC", VA = "0xDE20EC")]
		public static extern ulong ovr_MatchmakingNotification_GetAddedByUserId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000461")]
		[Address(RVA = "0xDE21AC", Offset = "0xDE21AC", VA = "0xDE21AC")]
		public static extern IntPtr ovr_MatchmakingNotification_GetRoom(IntPtr obj);

		[Token(Token = "0x6000462")]
		[Address(RVA = "0xDE226C", Offset = "0xDE226C", VA = "0xDE226C")]
		public static string ovr_MatchmakingNotification_GetTraceId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000463")]
		[Address(RVA = "0xDE22F4", Offset = "0xDE22F4", VA = "0xDE22F4")]
		private static extern IntPtr ovr_MatchmakingNotification_GetTraceId_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000464")]
		[Address(RVA = "0xDE23B4", Offset = "0xDE23B4", VA = "0xDE23B4")]
		public static extern uint ovr_MatchmakingRoom_GetPingTime(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000465")]
		[Address(RVA = "0xDE2474", Offset = "0xDE2474", VA = "0xDE2474")]
		public static extern IntPtr ovr_MatchmakingRoom_GetRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000466")]
		[Address(RVA = "0xDE2534", Offset = "0xDE2534", VA = "0xDE2534")]
		public static extern bool ovr_MatchmakingRoom_HasPingTime(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000467")]
		[Address(RVA = "0xDE25FC", Offset = "0xDE25FC", VA = "0xDE25FC")]
		public static extern IntPtr ovr_MatchmakingRoomArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x6000468")]
		[Address(RVA = "0xDE26C4", Offset = "0xDE26C4", VA = "0xDE26C4")]
		public static extern UIntPtr ovr_MatchmakingRoomArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000469")]
		[Address(RVA = "0xDE2784", Offset = "0xDE2784", VA = "0xDE2784")]
		public static extern uint ovr_MatchmakingStats_GetDrawCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600046A")]
		[Address(RVA = "0xDE2844", Offset = "0xDE2844", VA = "0xDE2844")]
		public static extern uint ovr_MatchmakingStats_GetLossCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600046B")]
		[Address(RVA = "0xDE2904", Offset = "0xDE2904", VA = "0xDE2904")]
		public static extern uint ovr_MatchmakingStats_GetSkillLevel(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600046C")]
		[Address(RVA = "0xDE29C4", Offset = "0xDE29C4", VA = "0xDE29C4")]
		public static extern uint ovr_MatchmakingStats_GetWinCount(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600046D")]
		[Address(RVA = "0xDE2A84", Offset = "0xDE2A84", VA = "0xDE2A84")]
		public static extern IntPtr ovr_Message_GetAbuseReportRecording(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600046E")]
		[Address(RVA = "0xDE2B44", Offset = "0xDE2B44", VA = "0xDE2B44")]
		public static extern IntPtr ovr_Message_GetAchievementDefinitionArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600046F")]
		[Address(RVA = "0xDE2C04", Offset = "0xDE2C04", VA = "0xDE2C04")]
		public static extern IntPtr ovr_Message_GetAchievementProgressArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000470")]
		[Address(RVA = "0xDE2CC4", Offset = "0xDE2CC4", VA = "0xDE2CC4")]
		public static extern IntPtr ovr_Message_GetAchievementUpdate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000471")]
		[Address(RVA = "0xDE2D84", Offset = "0xDE2D84", VA = "0xDE2D84")]
		public static extern IntPtr ovr_Message_GetApplicationVersion(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000472")]
		[Address(RVA = "0xDE2E44", Offset = "0xDE2E44", VA = "0xDE2E44")]
		public static extern IntPtr ovr_Message_GetAssetDetails(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000473")]
		[Address(RVA = "0xDE2F04", Offset = "0xDE2F04", VA = "0xDE2F04")]
		public static extern IntPtr ovr_Message_GetAssetDetailsArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000474")]
		[Address(RVA = "0xDE2FC4", Offset = "0xDE2FC4", VA = "0xDE2FC4")]
		public static extern IntPtr ovr_Message_GetAssetFileDeleteResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000475")]
		[Address(RVA = "0xDE3084", Offset = "0xDE3084", VA = "0xDE3084")]
		public static extern IntPtr ovr_Message_GetAssetFileDownloadCancelResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000476")]
		[Address(RVA = "0xDE3144", Offset = "0xDE3144", VA = "0xDE3144")]
		public static extern IntPtr ovr_Message_GetAssetFileDownloadResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000477")]
		[Address(RVA = "0xDE3204", Offset = "0xDE3204", VA = "0xDE3204")]
		public static extern IntPtr ovr_Message_GetAssetFileDownloadUpdate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000478")]
		[Address(RVA = "0xDE32C4", Offset = "0xDE32C4", VA = "0xDE32C4")]
		public static extern IntPtr ovr_Message_GetCalApplicationFinalized(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000479")]
		[Address(RVA = "0xDE3384", Offset = "0xDE3384", VA = "0xDE3384")]
		public static extern IntPtr ovr_Message_GetCalApplicationProposed(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600047A")]
		[Address(RVA = "0xDE3444", Offset = "0xDE3444", VA = "0xDE3444")]
		public static extern IntPtr ovr_Message_GetCalApplicationSuggestionArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600047B")]
		[Address(RVA = "0xDE3504", Offset = "0xDE3504", VA = "0xDE3504")]
		public static extern IntPtr ovr_Message_GetCloudStorageConflictMetadata(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600047C")]
		[Address(RVA = "0xDE35C4", Offset = "0xDE35C4", VA = "0xDE35C4")]
		public static extern IntPtr ovr_Message_GetCloudStorageData(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600047D")]
		[Address(RVA = "0xDE3684", Offset = "0xDE3684", VA = "0xDE3684")]
		public static extern IntPtr ovr_Message_GetCloudStorageMetadata(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600047E")]
		[Address(RVA = "0xDE3744", Offset = "0xDE3744", VA = "0xDE3744")]
		public static extern IntPtr ovr_Message_GetCloudStorageMetadataArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600047F")]
		[Address(RVA = "0xDE3804", Offset = "0xDE3804", VA = "0xDE3804")]
		public static extern IntPtr ovr_Message_GetCloudStorageUpdateResponse(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000480")]
		[Address(RVA = "0xDE38C4", Offset = "0xDE38C4", VA = "0xDE38C4")]
		public static extern IntPtr ovr_Message_GetError(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000481")]
		[Address(RVA = "0xDE3984", Offset = "0xDE3984", VA = "0xDE3984")]
		public static extern IntPtr ovr_Message_GetHttpTransferUpdate(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000482")]
		[Address(RVA = "0xDE3A44", Offset = "0xDE3A44", VA = "0xDE3A44")]
		public static extern IntPtr ovr_Message_GetInstalledApplicationArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000483")]
		[Address(RVA = "0xDE3B04", Offset = "0xDE3B04", VA = "0xDE3B04")]
		public static extern IntPtr ovr_Message_GetLaunchBlockFlowResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000484")]
		[Address(RVA = "0xDE3BC4", Offset = "0xDE3BC4", VA = "0xDE3BC4")]
		public static extern IntPtr ovr_Message_GetLaunchFriendRequestFlowResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000485")]
		[Address(RVA = "0xDE3C84", Offset = "0xDE3C84", VA = "0xDE3C84")]
		public static extern IntPtr ovr_Message_GetLaunchReportFlowResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000486")]
		[Address(RVA = "0xDE3D44", Offset = "0xDE3D44", VA = "0xDE3D44")]
		public static extern IntPtr ovr_Message_GetLaunchUnblockFlowResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000487")]
		[Address(RVA = "0xDE3E04", Offset = "0xDE3E04", VA = "0xDE3E04")]
		public static extern IntPtr ovr_Message_GetLeaderboardEntryArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000488")]
		[Address(RVA = "0xDE3EC4", Offset = "0xDE3EC4", VA = "0xDE3EC4")]
		public static extern IntPtr ovr_Message_GetLeaderboardUpdateStatus(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000489")]
		[Address(RVA = "0xDE3F84", Offset = "0xDE3F84", VA = "0xDE3F84")]
		public static extern IntPtr ovr_Message_GetLinkedAccountArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600048A")]
		[Address(RVA = "0xDE4044", Offset = "0xDE4044", VA = "0xDE4044")]
		public static extern IntPtr ovr_Message_GetLivestreamingApplicationStatus(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600048B")]
		[Address(RVA = "0xDE4104", Offset = "0xDE4104", VA = "0xDE4104")]
		public static extern IntPtr ovr_Message_GetLivestreamingStartResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600048C")]
		[Address(RVA = "0xDE41C4", Offset = "0xDE41C4", VA = "0xDE41C4")]
		public static extern IntPtr ovr_Message_GetLivestreamingStatus(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600048D")]
		[Address(RVA = "0xDE4284", Offset = "0xDE4284", VA = "0xDE4284")]
		public static extern IntPtr ovr_Message_GetLivestreamingVideoStats(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600048E")]
		[Address(RVA = "0xDE4344", Offset = "0xDE4344", VA = "0xDE4344")]
		public static extern IntPtr ovr_Message_GetMatchmakingAdminSnapshot(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600048F")]
		[Address(RVA = "0xDE4404", Offset = "0xDE4404", VA = "0xDE4404")]
		public static extern IntPtr ovr_Message_GetMatchmakingBrowseResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000490")]
		[Address(RVA = "0xDE44C4", Offset = "0xDE44C4", VA = "0xDE44C4")]
		public static extern IntPtr ovr_Message_GetMatchmakingEnqueueResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000491")]
		[Address(RVA = "0xDE4584", Offset = "0xDE4584", VA = "0xDE4584")]
		public static extern IntPtr ovr_Message_GetMatchmakingEnqueueResultAndRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000492")]
		[Address(RVA = "0xDE4644", Offset = "0xDE4644", VA = "0xDE4644")]
		public static extern IntPtr ovr_Message_GetMatchmakingRoomArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000493")]
		[Address(RVA = "0xDE4704", Offset = "0xDE4704", VA = "0xDE4704")]
		public static extern IntPtr ovr_Message_GetMatchmakingStats(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000494")]
		[Address(RVA = "0xDE47C4", Offset = "0xDE47C4", VA = "0xDE47C4")]
		public static extern IntPtr ovr_Message_GetNativeMessage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000495")]
		[Address(RVA = "0xDE4884", Offset = "0xDE4884", VA = "0xDE4884")]
		public static extern IntPtr ovr_Message_GetNetworkingPeer(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000496")]
		[Address(RVA = "0xDE4944", Offset = "0xDE4944", VA = "0xDE4944")]
		public static extern IntPtr ovr_Message_GetOrgScopedID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000497")]
		[Address(RVA = "0xDE4A04", Offset = "0xDE4A04", VA = "0xDE4A04")]
		public static extern IntPtr ovr_Message_GetParty(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000498")]
		[Address(RVA = "0xDE4AC4", Offset = "0xDE4AC4", VA = "0xDE4AC4")]
		public static extern IntPtr ovr_Message_GetPartyID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000499")]
		[Address(RVA = "0xDE4B84", Offset = "0xDE4B84", VA = "0xDE4B84")]
		public static extern IntPtr ovr_Message_GetPartyUpdateNotification(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600049A")]
		[Address(RVA = "0xDE4C44", Offset = "0xDE4C44", VA = "0xDE4C44")]
		public static extern IntPtr ovr_Message_GetPidArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600049B")]
		[Address(RVA = "0xDE4D04", Offset = "0xDE4D04", VA = "0xDE4D04")]
		public static extern IntPtr ovr_Message_GetPingResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600049C")]
		[Address(RVA = "0xDE4DC4", Offset = "0xDE4DC4", VA = "0xDE4DC4")]
		public static extern IntPtr ovr_Message_GetPlatformInitialize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600049D")]
		[Address(RVA = "0xDE4E84", Offset = "0xDE4E84", VA = "0xDE4E84")]
		public static extern IntPtr ovr_Message_GetProductArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600049E")]
		[Address(RVA = "0xDE4F44", Offset = "0xDE4F44", VA = "0xDE4F44")]
		public static extern IntPtr ovr_Message_GetPurchase(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600049F")]
		[Address(RVA = "0xDE5004", Offset = "0xDE5004", VA = "0xDE5004")]
		public static extern IntPtr ovr_Message_GetPurchaseArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004A0")]
		[Address(RVA = "0xDE50C4", Offset = "0xDE50C4", VA = "0xDE50C4")]
		public static extern ulong ovr_Message_GetRequestID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004A1")]
		[Address(RVA = "0xDE5184", Offset = "0xDE5184", VA = "0xDE5184")]
		public static extern IntPtr ovr_Message_GetRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004A2")]
		[Address(RVA = "0xDE5244", Offset = "0xDE5244", VA = "0xDE5244")]
		public static extern IntPtr ovr_Message_GetRoomArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004A3")]
		[Address(RVA = "0xDE5304", Offset = "0xDE5304", VA = "0xDE5304")]
		public static extern IntPtr ovr_Message_GetRoomInviteNotification(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004A4")]
		[Address(RVA = "0xDE53C4", Offset = "0xDE53C4", VA = "0xDE53C4")]
		public static extern IntPtr ovr_Message_GetRoomInviteNotificationArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004A5")]
		[Address(RVA = "0xDE5484", Offset = "0xDE5484", VA = "0xDE5484")]
		public static extern IntPtr ovr_Message_GetSdkAccountArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004A6")]
		[Address(RVA = "0xDE5544", Offset = "0xDE5544", VA = "0xDE5544")]
		public static extern IntPtr ovr_Message_GetShareMediaResult(IntPtr obj);

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0xDE5604", Offset = "0xDE5604", VA = "0xDE5604")]
		public static string ovr_Message_GetString(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60004A8")]
		[Address(RVA = "0xDE568C", Offset = "0xDE568C", VA = "0xDE568C")]
		private static extern IntPtr ovr_Message_GetString_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004A9")]
		[Address(RVA = "0xDE574C", Offset = "0xDE574C", VA = "0xDE574C")]
		public static extern IntPtr ovr_Message_GetSystemPermission(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004AA")]
		[Address(RVA = "0xDE580C", Offset = "0xDE580C", VA = "0xDE580C")]
		public static extern IntPtr ovr_Message_GetSystemVoipState(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004AB")]
		[Address(RVA = "0xDE58CC", Offset = "0xDE58CC", VA = "0xDE58CC")]
		public static extern Message.MessageType ovr_Message_GetType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004AC")]
		[Address(RVA = "0xDE598C", Offset = "0xDE598C", VA = "0xDE598C")]
		public static extern IntPtr ovr_Message_GetUser(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004AD")]
		[Address(RVA = "0xDE5A4C", Offset = "0xDE5A4C", VA = "0xDE5A4C")]
		public static extern IntPtr ovr_Message_GetUserAndRoomArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004AE")]
		[Address(RVA = "0xDE5B0C", Offset = "0xDE5B0C", VA = "0xDE5B0C")]
		public static extern IntPtr ovr_Message_GetUserArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004AF")]
		[Address(RVA = "0xDE5BCC", Offset = "0xDE5BCC", VA = "0xDE5BCC")]
		public static extern IntPtr ovr_Message_GetUserProof(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004B0")]
		[Address(RVA = "0xDE5C8C", Offset = "0xDE5C8C", VA = "0xDE5C8C")]
		public static extern IntPtr ovr_Message_GetUserReportID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004B1")]
		[Address(RVA = "0xDE5D4C", Offset = "0xDE5D4C", VA = "0xDE5D4C")]
		public static extern bool ovr_Message_IsError(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004B2")]
		[Address(RVA = "0xDE5E14", Offset = "0xDE5E14", VA = "0xDE5E14")]
		public static extern UIntPtr ovr_Microphone_GetNumSamplesAvailable(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004B3")]
		[Address(RVA = "0xDE5ED4", Offset = "0xDE5ED4", VA = "0xDE5ED4")]
		public static extern UIntPtr ovr_Microphone_GetOutputBufferMaxSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004B4")]
		[Address(RVA = "0xDE5F94", Offset = "0xDE5F94", VA = "0xDE5F94")]
		public static extern UIntPtr ovr_Microphone_GetPCM(IntPtr obj, short[] outputBuffer, UIntPtr outputBufferNumElements);

		[PreserveSig]
		[Token(Token = "0x60004B5")]
		[Address(RVA = "0xDE606C", Offset = "0xDE606C", VA = "0xDE606C")]
		public static extern UIntPtr ovr_Microphone_GetPCMFloat(IntPtr obj, float[] outputBuffer, UIntPtr outputBufferNumElements);

		[PreserveSig]
		[Token(Token = "0x60004B6")]
		[Address(RVA = "0xDE6144", Offset = "0xDE6144", VA = "0xDE6144")]
		public static extern UIntPtr ovr_Microphone_ReadData(IntPtr obj, float[] outputBuffer, UIntPtr outputBufferSize);

		[PreserveSig]
		[Token(Token = "0x60004B7")]
		[Address(RVA = "0xDE621C", Offset = "0xDE621C", VA = "0xDE621C")]
		public static extern void ovr_Microphone_SetAcceptableRecordingDelayHint(IntPtr obj, UIntPtr delayMs);

		[PreserveSig]
		[Token(Token = "0x60004B8")]
		[Address(RVA = "0xDE62E4", Offset = "0xDE62E4", VA = "0xDE62E4")]
		public static extern void ovr_Microphone_Start(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004B9")]
		[Address(RVA = "0xDE63A4", Offset = "0xDE63A4", VA = "0xDE63A4")]
		public static extern void ovr_Microphone_Stop(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004BA")]
		[Address(RVA = "0xDE6464", Offset = "0xDE6464", VA = "0xDE6464")]
		public static extern ulong ovr_NetworkingPeer_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004BB")]
		[Address(RVA = "0xDE6524", Offset = "0xDE6524", VA = "0xDE6524")]
		public static extern PeerConnectionState ovr_NetworkingPeer_GetState(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004BC")]
		[Address(RVA = "0xDE65E4", Offset = "0xDE65E4", VA = "0xDE65E4")]
		public static extern ulong ovr_OrgScopedID_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004BD")]
		[Address(RVA = "0xDE66A4", Offset = "0xDE66A4", VA = "0xDE66A4")]
		public static extern void ovr_Packet_Free(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004BE")]
		[Address(RVA = "0xDE6764", Offset = "0xDE6764", VA = "0xDE6764")]
		public static extern IntPtr ovr_Packet_GetBytes(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004BF")]
		[Address(RVA = "0xDE6824", Offset = "0xDE6824", VA = "0xDE6824")]
		public static extern SendPolicy ovr_Packet_GetSendPolicy(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004C0")]
		[Address(RVA = "0xDE68E4", Offset = "0xDE68E4", VA = "0xDE68E4")]
		public static extern ulong ovr_Packet_GetSenderID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004C1")]
		[Address(RVA = "0xDE69A4", Offset = "0xDE69A4", VA = "0xDE69A4")]
		public static extern UIntPtr ovr_Packet_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004C2")]
		[Address(RVA = "0xDE6A64", Offset = "0xDE6A64", VA = "0xDE6A64")]
		public static extern ulong ovr_Party_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004C3")]
		[Address(RVA = "0xDE6B24", Offset = "0xDE6B24", VA = "0xDE6B24")]
		public static extern IntPtr ovr_Party_GetInvitedUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004C4")]
		[Address(RVA = "0xDE6BE4", Offset = "0xDE6BE4", VA = "0xDE6BE4")]
		public static extern IntPtr ovr_Party_GetLeader(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004C5")]
		[Address(RVA = "0xDE6CA4", Offset = "0xDE6CA4", VA = "0xDE6CA4")]
		public static extern IntPtr ovr_Party_GetRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004C6")]
		[Address(RVA = "0xDE6D60", Offset = "0xDE6D60", VA = "0xDE6D60")]
		public static extern IntPtr ovr_Party_GetUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004C7")]
		[Address(RVA = "0xDE6E20", Offset = "0xDE6E20", VA = "0xDE6E20")]
		public static extern ulong ovr_PartyID_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004C8")]
		[Address(RVA = "0xDE6EDC", Offset = "0xDE6EDC", VA = "0xDE6EDC")]
		public static extern PartyUpdateAction ovr_PartyUpdateNotification_GetAction(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004C9")]
		[Address(RVA = "0xDE6F9C", Offset = "0xDE6F9C", VA = "0xDE6F9C")]
		public static extern ulong ovr_PartyUpdateNotification_GetPartyId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004CA")]
		[Address(RVA = "0xDE705C", Offset = "0xDE705C", VA = "0xDE705C")]
		public static extern ulong ovr_PartyUpdateNotification_GetSenderId(IntPtr obj);

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0xDE711C", Offset = "0xDE711C", VA = "0xDE711C")]
		public static string ovr_PartyUpdateNotification_GetUpdateTimestamp(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60004CC")]
		[Address(RVA = "0xDE71A4", Offset = "0xDE71A4", VA = "0xDE71A4")]
		private static extern IntPtr ovr_PartyUpdateNotification_GetUpdateTimestamp_Native(IntPtr obj);

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0xDE7264", Offset = "0xDE7264", VA = "0xDE7264")]
		public static string ovr_PartyUpdateNotification_GetUserAlias(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60004CE")]
		[Address(RVA = "0xDE72EC", Offset = "0xDE72EC", VA = "0xDE72EC")]
		private static extern IntPtr ovr_PartyUpdateNotification_GetUserAlias_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004CF")]
		[Address(RVA = "0xDE73AC", Offset = "0xDE73AC", VA = "0xDE73AC")]
		public static extern ulong ovr_PartyUpdateNotification_GetUserId(IntPtr obj);

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0xDE746C", Offset = "0xDE746C", VA = "0xDE746C")]
		public static string ovr_PartyUpdateNotification_GetUserName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60004D1")]
		[Address(RVA = "0xDE74F4", Offset = "0xDE74F4", VA = "0xDE74F4")]
		private static extern IntPtr ovr_PartyUpdateNotification_GetUserName_Native(IntPtr obj);

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0xDE75B4", Offset = "0xDE75B4", VA = "0xDE75B4")]
		public static string ovr_Pid_GetId(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60004D3")]
		[Address(RVA = "0xDE763C", Offset = "0xDE763C", VA = "0xDE763C")]
		private static extern IntPtr ovr_Pid_GetId_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004D4")]
		[Address(RVA = "0xDE76FC", Offset = "0xDE76FC", VA = "0xDE76FC")]
		public static extern IntPtr ovr_PidArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x60004D5")]
		[Address(RVA = "0xDE77C4", Offset = "0xDE77C4", VA = "0xDE77C4")]
		public static extern UIntPtr ovr_PidArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004D6")]
		[Address(RVA = "0xDE7884", Offset = "0xDE7884", VA = "0xDE7884")]
		public static extern ulong ovr_PingResult_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004D7")]
		[Address(RVA = "0xDE7944", Offset = "0xDE7944", VA = "0xDE7944")]
		public static extern ulong ovr_PingResult_GetPingTimeUsec(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004D8")]
		[Address(RVA = "0xDE7A04", Offset = "0xDE7A04", VA = "0xDE7A04")]
		public static extern bool ovr_PingResult_IsTimeout(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004D9")]
		[Address(RVA = "0xDE7ACC", Offset = "0xDE7ACC", VA = "0xDE7ACC")]
		public static extern PlatformInitializeResult ovr_PlatformInitialize_GetResult(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004DA")]
		[Address(RVA = "0xDE7B8C", Offset = "0xDE7B8C", VA = "0xDE7B8C")]
		public static extern uint ovr_Price_GetAmountInHundredths(IntPtr obj);

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0xDE7C4C", Offset = "0xDE7C4C", VA = "0xDE7C4C")]
		public static string ovr_Price_GetCurrency(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60004DC")]
		[Address(RVA = "0xDE7CD4", Offset = "0xDE7CD4", VA = "0xDE7CD4")]
		private static extern IntPtr ovr_Price_GetCurrency_Native(IntPtr obj);

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0xDE7D94", Offset = "0xDE7D94", VA = "0xDE7D94")]
		public static string ovr_Price_GetFormatted(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60004DE")]
		[Address(RVA = "0xDE7E1C", Offset = "0xDE7E1C", VA = "0xDE7E1C")]
		private static extern IntPtr ovr_Price_GetFormatted_Native(IntPtr obj);

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0xDE7EDC", Offset = "0xDE7EDC", VA = "0xDE7EDC")]
		public static string ovr_Product_GetDescription(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60004E0")]
		[Address(RVA = "0xDE7F64", Offset = "0xDE7F64", VA = "0xDE7F64")]
		private static extern IntPtr ovr_Product_GetDescription_Native(IntPtr obj);

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0xDE8024", Offset = "0xDE8024", VA = "0xDE8024")]
		public static string ovr_Product_GetFormattedPrice(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60004E2")]
		[Address(RVA = "0xDE80AC", Offset = "0xDE80AC", VA = "0xDE80AC")]
		private static extern IntPtr ovr_Product_GetFormattedPrice_Native(IntPtr obj);

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0xDE816C", Offset = "0xDE816C", VA = "0xDE816C")]
		public static string ovr_Product_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60004E4")]
		[Address(RVA = "0xDE81F4", Offset = "0xDE81F4", VA = "0xDE81F4")]
		private static extern IntPtr ovr_Product_GetName_Native(IntPtr obj);

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0xDE82B4", Offset = "0xDE82B4", VA = "0xDE82B4")]
		public static string ovr_Product_GetSKU(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60004E6")]
		[Address(RVA = "0xDE833C", Offset = "0xDE833C", VA = "0xDE833C")]
		private static extern IntPtr ovr_Product_GetSKU_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004E7")]
		[Address(RVA = "0xDE83FC", Offset = "0xDE83FC", VA = "0xDE83FC")]
		public static extern IntPtr ovr_ProductArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0xDE84C4", Offset = "0xDE84C4", VA = "0xDE84C4")]
		public static string ovr_ProductArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60004E9")]
		[Address(RVA = "0xDE854C", Offset = "0xDE854C", VA = "0xDE854C")]
		private static extern IntPtr ovr_ProductArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004EA")]
		[Address(RVA = "0xDE860C", Offset = "0xDE860C", VA = "0xDE860C")]
		public static extern UIntPtr ovr_ProductArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004EB")]
		[Address(RVA = "0xDE86CC", Offset = "0xDE86CC", VA = "0xDE86CC")]
		public static extern bool ovr_ProductArray_HasNextPage(IntPtr obj);

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0xDE8794", Offset = "0xDE8794", VA = "0xDE8794")]
		public static DateTime ovr_Purchase_GetExpirationTime(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Token(Token = "0x60004ED")]
		[Address(RVA = "0xDE883C", Offset = "0xDE883C", VA = "0xDE883C")]
		private static extern ulong ovr_Purchase_GetExpirationTime_Native(IntPtr obj);

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0xDE88FC", Offset = "0xDE88FC", VA = "0xDE88FC")]
		public static DateTime ovr_Purchase_GetGrantTime(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Token(Token = "0x60004EF")]
		[Address(RVA = "0xDE89A4", Offset = "0xDE89A4", VA = "0xDE89A4")]
		private static extern ulong ovr_Purchase_GetGrantTime_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004F0")]
		[Address(RVA = "0xDE8A64", Offset = "0xDE8A64", VA = "0xDE8A64")]
		public static extern ulong ovr_Purchase_GetPurchaseID(IntPtr obj);

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0xDE8B24", Offset = "0xDE8B24", VA = "0xDE8B24")]
		public static string ovr_Purchase_GetSKU(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60004F2")]
		[Address(RVA = "0xDE8BAC", Offset = "0xDE8BAC", VA = "0xDE8BAC")]
		private static extern IntPtr ovr_Purchase_GetSKU_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004F3")]
		[Address(RVA = "0xDE8C6C", Offset = "0xDE8C6C", VA = "0xDE8C6C")]
		public static extern IntPtr ovr_PurchaseArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0xDE8D34", Offset = "0xDE8D34", VA = "0xDE8D34")]
		public static string ovr_PurchaseArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60004F5")]
		[Address(RVA = "0xDE8DBC", Offset = "0xDE8DBC", VA = "0xDE8DBC")]
		private static extern IntPtr ovr_PurchaseArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004F6")]
		[Address(RVA = "0xDE8E7C", Offset = "0xDE8E7C", VA = "0xDE8E7C")]
		public static extern UIntPtr ovr_PurchaseArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004F7")]
		[Address(RVA = "0xDE8F3C", Offset = "0xDE8F3C", VA = "0xDE8F3C")]
		public static extern bool ovr_PurchaseArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004F8")]
		[Address(RVA = "0xDE9004", Offset = "0xDE9004", VA = "0xDE9004")]
		public static extern ulong ovr_Room_GetApplicationID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004F9")]
		[Address(RVA = "0xDE90C4", Offset = "0xDE90C4", VA = "0xDE90C4")]
		public static extern IntPtr ovr_Room_GetDataStore(IntPtr obj);

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0xDE9184", Offset = "0xDE9184", VA = "0xDE9184")]
		public static string ovr_Room_GetDescription(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60004FB")]
		[Address(RVA = "0xDE920C", Offset = "0xDE920C", VA = "0xDE920C")]
		private static extern IntPtr ovr_Room_GetDescription_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004FC")]
		[Address(RVA = "0xDE92CC", Offset = "0xDE92CC", VA = "0xDE92CC")]
		public static extern ulong ovr_Room_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004FD")]
		[Address(RVA = "0xDE938C", Offset = "0xDE938C", VA = "0xDE938C")]
		public static extern IntPtr ovr_Room_GetInvitedUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004FE")]
		[Address(RVA = "0xDE944C", Offset = "0xDE944C", VA = "0xDE944C")]
		public static extern bool ovr_Room_GetIsMembershipLocked(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x60004FF")]
		[Address(RVA = "0xDE9514", Offset = "0xDE9514", VA = "0xDE9514")]
		public static extern RoomJoinPolicy ovr_Room_GetJoinPolicy(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000500")]
		[Address(RVA = "0xDE95D4", Offset = "0xDE95D4", VA = "0xDE95D4")]
		public static extern RoomJoinability ovr_Room_GetJoinability(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000501")]
		[Address(RVA = "0xDE9694", Offset = "0xDE9694", VA = "0xDE9694")]
		public static extern IntPtr ovr_Room_GetMatchedUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000502")]
		[Address(RVA = "0xDE9754", Offset = "0xDE9754", VA = "0xDE9754")]
		public static extern uint ovr_Room_GetMaxUsers(IntPtr obj);

		[Token(Token = "0x6000503")]
		[Address(RVA = "0xDE9814", Offset = "0xDE9814", VA = "0xDE9814")]
		public static string ovr_Room_GetName(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000504")]
		[Address(RVA = "0xDE989C", Offset = "0xDE989C", VA = "0xDE989C")]
		private static extern IntPtr ovr_Room_GetName_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000505")]
		[Address(RVA = "0xDE995C", Offset = "0xDE995C", VA = "0xDE995C")]
		public static extern IntPtr ovr_Room_GetOwner(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000506")]
		[Address(RVA = "0xDE9A18", Offset = "0xDE9A18", VA = "0xDE9A18")]
		public static extern RoomType ovr_Room_GetType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000507")]
		[Address(RVA = "0xDE9AD8", Offset = "0xDE9AD8", VA = "0xDE9AD8")]
		public static extern IntPtr ovr_Room_GetUsers(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000508")]
		[Address(RVA = "0xDE9B94", Offset = "0xDE9B94", VA = "0xDE9B94")]
		public static extern uint ovr_Room_GetVersion(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000509")]
		[Address(RVA = "0xDE9C54", Offset = "0xDE9C54", VA = "0xDE9C54")]
		public static extern IntPtr ovr_RoomArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x600050A")]
		[Address(RVA = "0xDE9D1C", Offset = "0xDE9D1C", VA = "0xDE9D1C")]
		public static string ovr_RoomArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600050B")]
		[Address(RVA = "0xDE9DA4", Offset = "0xDE9DA4", VA = "0xDE9DA4")]
		private static extern IntPtr ovr_RoomArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600050C")]
		[Address(RVA = "0xDE9E64", Offset = "0xDE9E64", VA = "0xDE9E64")]
		public static extern UIntPtr ovr_RoomArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600050D")]
		[Address(RVA = "0xDE9F24", Offset = "0xDE9F24", VA = "0xDE9F24")]
		public static extern bool ovr_RoomArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600050E")]
		[Address(RVA = "0xDE9FEC", Offset = "0xDE9FEC", VA = "0xDE9FEC")]
		public static extern ulong ovr_RoomInviteNotification_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600050F")]
		[Address(RVA = "0xDEA0AC", Offset = "0xDEA0AC", VA = "0xDEA0AC")]
		public static extern ulong ovr_RoomInviteNotification_GetRoomID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000510")]
		[Address(RVA = "0xDEA16C", Offset = "0xDEA16C", VA = "0xDEA16C")]
		public static extern ulong ovr_RoomInviteNotification_GetSenderID(IntPtr obj);

		[Token(Token = "0x6000511")]
		[Address(RVA = "0xDEA22C", Offset = "0xDEA22C", VA = "0xDEA22C")]
		public static DateTime ovr_RoomInviteNotification_GetSentTime(IntPtr obj)
		{
			return default(DateTime);
		}

		[PreserveSig]
		[Token(Token = "0x6000512")]
		[Address(RVA = "0xDEA2D4", Offset = "0xDEA2D4", VA = "0xDEA2D4")]
		private static extern ulong ovr_RoomInviteNotification_GetSentTime_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000513")]
		[Address(RVA = "0xDEA394", Offset = "0xDEA394", VA = "0xDEA394")]
		public static extern IntPtr ovr_RoomInviteNotificationArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x6000514")]
		[Address(RVA = "0xDEA45C", Offset = "0xDEA45C", VA = "0xDEA45C")]
		public static string ovr_RoomInviteNotificationArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000515")]
		[Address(RVA = "0xDEA4E4", Offset = "0xDEA4E4", VA = "0xDEA4E4")]
		private static extern IntPtr ovr_RoomInviteNotificationArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000516")]
		[Address(RVA = "0xDEA5A4", Offset = "0xDEA5A4", VA = "0xDEA5A4")]
		public static extern UIntPtr ovr_RoomInviteNotificationArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000517")]
		[Address(RVA = "0xDEA664", Offset = "0xDEA664", VA = "0xDEA664")]
		public static extern bool ovr_RoomInviteNotificationArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000518")]
		[Address(RVA = "0xDEA72C", Offset = "0xDEA72C", VA = "0xDEA72C")]
		public static extern SdkAccountType ovr_SdkAccount_GetAccountType(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000519")]
		[Address(RVA = "0xDEA7EC", Offset = "0xDEA7EC", VA = "0xDEA7EC")]
		public static extern ulong ovr_SdkAccount_GetUserId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600051A")]
		[Address(RVA = "0xDEA8AC", Offset = "0xDEA8AC", VA = "0xDEA8AC")]
		public static extern IntPtr ovr_SdkAccountArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x600051B")]
		[Address(RVA = "0xDEA974", Offset = "0xDEA974", VA = "0xDEA974")]
		public static extern UIntPtr ovr_SdkAccountArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600051C")]
		[Address(RVA = "0xDEAA34", Offset = "0xDEAA34", VA = "0xDEAA34")]
		public static extern ShareMediaStatus ovr_ShareMediaResult_GetStatus(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600051D")]
		[Address(RVA = "0xDEAAF4", Offset = "0xDEAAF4", VA = "0xDEAAF4")]
		public static extern bool ovr_SystemPermission_GetHasPermission(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600051E")]
		[Address(RVA = "0xDEABBC", Offset = "0xDEABBC", VA = "0xDEABBC")]
		public static extern PermissionGrantStatus ovr_SystemPermission_GetPermissionGrantStatus(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600051F")]
		[Address(RVA = "0xDEAC7C", Offset = "0xDEAC7C", VA = "0xDEAC7C")]
		public static extern VoipMuteState ovr_SystemVoipState_GetMicrophoneMuted(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000520")]
		[Address(RVA = "0xDEAD3C", Offset = "0xDEAD3C", VA = "0xDEAD3C")]
		public static extern SystemVoipStatus ovr_SystemVoipState_GetStatus(IntPtr obj);

		[Token(Token = "0x6000521")]
		[Address(RVA = "0xDEADFC", Offset = "0xDEADFC", VA = "0xDEADFC")]
		public static string ovr_TestUser_GetAccessToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000522")]
		[Address(RVA = "0xDEAE84", Offset = "0xDEAE84", VA = "0xDEAE84")]
		private static extern IntPtr ovr_TestUser_GetAccessToken_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000523")]
		[Address(RVA = "0xDEAF44", Offset = "0xDEAF44", VA = "0xDEAF44")]
		public static extern IntPtr ovr_TestUser_GetAppAccessArray(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000524")]
		[Address(RVA = "0xDEB004", Offset = "0xDEB004", VA = "0xDEB004")]
		public static extern IntPtr ovr_TestUser_GetFbAppAccessArray(IntPtr obj);

		[Token(Token = "0x6000525")]
		[Address(RVA = "0xDEB0C4", Offset = "0xDEB0C4", VA = "0xDEB0C4")]
		public static string ovr_TestUser_GetFriendAccessToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000526")]
		[Address(RVA = "0xDEB14C", Offset = "0xDEB14C", VA = "0xDEB14C")]
		private static extern IntPtr ovr_TestUser_GetFriendAccessToken_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000527")]
		[Address(RVA = "0xDEB20C", Offset = "0xDEB20C", VA = "0xDEB20C")]
		public static extern IntPtr ovr_TestUser_GetFriendAppAccessArray(IntPtr obj);

		[Token(Token = "0x6000528")]
		[Address(RVA = "0xDEB2CC", Offset = "0xDEB2CC", VA = "0xDEB2CC")]
		public static string ovr_TestUser_GetUserAlias(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000529")]
		[Address(RVA = "0xDEB354", Offset = "0xDEB354", VA = "0xDEB354")]
		private static extern IntPtr ovr_TestUser_GetUserAlias_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600052A")]
		[Address(RVA = "0xDEB414", Offset = "0xDEB414", VA = "0xDEB414")]
		public static extern ulong ovr_TestUser_GetUserFbid(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600052B")]
		[Address(RVA = "0xDEB4D4", Offset = "0xDEB4D4", VA = "0xDEB4D4")]
		public static extern ulong ovr_TestUser_GetUserId(IntPtr obj);

		[Token(Token = "0x600052C")]
		[Address(RVA = "0xDEB594", Offset = "0xDEB594", VA = "0xDEB594")]
		public static string ovr_TestUserAppAccess_GetAccessToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600052D")]
		[Address(RVA = "0xDEB61C", Offset = "0xDEB61C", VA = "0xDEB61C")]
		private static extern IntPtr ovr_TestUserAppAccess_GetAccessToken_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600052E")]
		[Address(RVA = "0xDEB6DC", Offset = "0xDEB6DC", VA = "0xDEB6DC")]
		public static extern ulong ovr_TestUserAppAccess_GetAppId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600052F")]
		[Address(RVA = "0xDEB79C", Offset = "0xDEB79C", VA = "0xDEB79C")]
		public static extern ulong ovr_TestUserAppAccess_GetUserId(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000530")]
		[Address(RVA = "0xDEB85C", Offset = "0xDEB85C", VA = "0xDEB85C")]
		public static extern IntPtr ovr_TestUserAppAccessArray_GetElement(IntPtr obj, UIntPtr index);

		[PreserveSig]
		[Token(Token = "0x6000531")]
		[Address(RVA = "0xDEB924", Offset = "0xDEB924", VA = "0xDEB924")]
		public static extern UIntPtr ovr_TestUserAppAccessArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000532")]
		[Address(RVA = "0xDEB9E4", Offset = "0xDEB9E4", VA = "0xDEB9E4")]
		public static extern ulong ovr_User_GetID(IntPtr obj);

		[Token(Token = "0x6000533")]
		[Address(RVA = "0xDEBAA4", Offset = "0xDEBAA4", VA = "0xDEBAA4")]
		public static string ovr_User_GetImageUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000534")]
		[Address(RVA = "0xDEBB2C", Offset = "0xDEBB2C", VA = "0xDEBB2C")]
		private static extern IntPtr ovr_User_GetImageUrl_Native(IntPtr obj);

		[Token(Token = "0x6000535")]
		[Address(RVA = "0xDEBBEC", Offset = "0xDEBBEC", VA = "0xDEBBEC")]
		public static string ovr_User_GetInviteToken(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000536")]
		[Address(RVA = "0xDEBC74", Offset = "0xDEBC74", VA = "0xDEBC74")]
		private static extern IntPtr ovr_User_GetInviteToken_Native(IntPtr obj);

		[Token(Token = "0x6000537")]
		[Address(RVA = "0xDEBD34", Offset = "0xDEBD34", VA = "0xDEBD34")]
		public static string ovr_User_GetOculusID(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000538")]
		[Address(RVA = "0xDEBDBC", Offset = "0xDEBDBC", VA = "0xDEBDBC")]
		private static extern IntPtr ovr_User_GetOculusID_Native(IntPtr obj);

		[Token(Token = "0x6000539")]
		[Address(RVA = "0xDEBE7C", Offset = "0xDEBE7C", VA = "0xDEBE7C")]
		public static string ovr_User_GetPresence(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600053A")]
		[Address(RVA = "0xDEBF04", Offset = "0xDEBF04", VA = "0xDEBF04")]
		private static extern IntPtr ovr_User_GetPresence_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600053B")]
		[Address(RVA = "0xDEBFC4", Offset = "0xDEBFC4", VA = "0xDEBFC4")]
		public static extern UserPresenceStatus ovr_User_GetPresenceStatus(IntPtr obj);

		[Token(Token = "0x600053C")]
		[Address(RVA = "0xDEC084", Offset = "0xDEC084", VA = "0xDEC084")]
		public static string ovr_User_GetSmallImageUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600053D")]
		[Address(RVA = "0xDEC10C", Offset = "0xDEC10C", VA = "0xDEC10C")]
		private static extern IntPtr ovr_User_GetSmallImageUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600053E")]
		[Address(RVA = "0xDEC1CC", Offset = "0xDEC1CC", VA = "0xDEC1CC")]
		public static extern IntPtr ovr_UserAndRoom_GetRoom(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600053F")]
		[Address(RVA = "0xDEC28C", Offset = "0xDEC28C", VA = "0xDEC28C")]
		public static extern IntPtr ovr_UserAndRoom_GetUser(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000540")]
		[Address(RVA = "0xDEC34C", Offset = "0xDEC34C", VA = "0xDEC34C")]
		public static extern IntPtr ovr_UserAndRoomArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x6000541")]
		[Address(RVA = "0xDEC414", Offset = "0xDEC414", VA = "0xDEC414")]
		public static string ovr_UserAndRoomArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000542")]
		[Address(RVA = "0xDEC49C", Offset = "0xDEC49C", VA = "0xDEC49C")]
		private static extern IntPtr ovr_UserAndRoomArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000543")]
		[Address(RVA = "0xDEC55C", Offset = "0xDEC55C", VA = "0xDEC55C")]
		public static extern UIntPtr ovr_UserAndRoomArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000544")]
		[Address(RVA = "0xDEC61C", Offset = "0xDEC61C", VA = "0xDEC61C")]
		public static extern bool ovr_UserAndRoomArray_HasNextPage(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000545")]
		[Address(RVA = "0xDEC6E4", Offset = "0xDEC6E4", VA = "0xDEC6E4")]
		public static extern IntPtr ovr_UserArray_GetElement(IntPtr obj, UIntPtr index);

		[Token(Token = "0x6000546")]
		[Address(RVA = "0xDEC7AC", Offset = "0xDEC7AC", VA = "0xDEC7AC")]
		public static string ovr_UserArray_GetNextUrl(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000547")]
		[Address(RVA = "0xDEC834", Offset = "0xDEC834", VA = "0xDEC834")]
		private static extern IntPtr ovr_UserArray_GetNextUrl_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000548")]
		[Address(RVA = "0xDEC8F4", Offset = "0xDEC8F4", VA = "0xDEC8F4")]
		public static extern UIntPtr ovr_UserArray_GetSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000549")]
		[Address(RVA = "0xDEC9B4", Offset = "0xDEC9B4", VA = "0xDEC9B4")]
		public static extern bool ovr_UserArray_HasNextPage(IntPtr obj);

		[Token(Token = "0x600054A")]
		[Address(RVA = "0xDECA7C", Offset = "0xDECA7C", VA = "0xDECA7C")]
		public static string ovr_UserProof_GetNonce(IntPtr obj)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x600054B")]
		[Address(RVA = "0xDECB04", Offset = "0xDECB04", VA = "0xDECB04")]
		private static extern IntPtr ovr_UserProof_GetNonce_Native(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600054C")]
		[Address(RVA = "0xDECBC4", Offset = "0xDECBC4", VA = "0xDECBC4")]
		public static extern bool ovr_UserReportID_GetDidCancel(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600054D")]
		[Address(RVA = "0xDECC8C", Offset = "0xDECC8C", VA = "0xDECC8C")]
		public static extern ulong ovr_UserReportID_GetID(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x600054E")]
		[Address(RVA = "0xDECD4C", Offset = "0xDECD4C", VA = "0xDECD4C")]
		public static extern void ovr_VoipDecoder_Decode(IntPtr obj, byte[] compressedData, UIntPtr compressedSize);

		[PreserveSig]
		[Token(Token = "0x600054F")]
		[Address(RVA = "0xDECE24", Offset = "0xDECE24", VA = "0xDECE24")]
		public static extern UIntPtr ovr_VoipDecoder_GetDecodedPCM(IntPtr obj, float[] outputBuffer, UIntPtr outputBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000550")]
		[Address(RVA = "0xDECEFC", Offset = "0xDECEFC", VA = "0xDECEFC")]
		public static extern void ovr_VoipEncoder_AddPCM(IntPtr obj, float[] inputData, uint inputSize);

		[PreserveSig]
		[Token(Token = "0x6000551")]
		[Address(RVA = "0xDECFD4", Offset = "0xDECFD4", VA = "0xDECFD4")]
		public static extern UIntPtr ovr_VoipEncoder_GetCompressedData(IntPtr obj, byte[] outputBuffer, UIntPtr intputSize);

		[PreserveSig]
		[Token(Token = "0x6000552")]
		[Address(RVA = "0xDED0AC", Offset = "0xDED0AC", VA = "0xDED0AC")]
		public static extern UIntPtr ovr_VoipEncoder_GetCompressedDataSize(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6000553")]
		[Address(RVA = "0xDC56D8", Offset = "0xDC56D8", VA = "0xDC56D8")]
		public static extern IntPtr ovr_AbuseReportOptions_Create();

		[PreserveSig]
		[Token(Token = "0x6000554")]
		[Address(RVA = "0xDC5B54", Offset = "0xDC5B54", VA = "0xDC5B54")]
		public static extern void ovr_AbuseReportOptions_Destroy(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x6000555")]
		[Address(RVA = "0xDC5814", Offset = "0xDC5814", VA = "0xDC5814")]
		public static extern void ovr_AbuseReportOptions_SetPreventPeopleChooser(IntPtr handle, bool value);

		[PreserveSig]
		[Token(Token = "0x6000556")]
		[Address(RVA = "0xDC5968", Offset = "0xDC5968", VA = "0xDC5968")]
		public static extern void ovr_AbuseReportOptions_SetReportType(IntPtr handle, AbuseReportType value);

		[PreserveSig]
		[Token(Token = "0x6000557")]
		[Address(RVA = "0xDC7A3C", Offset = "0xDC7A3C", VA = "0xDC7A3C")]
		public static extern IntPtr ovr_ApplicationOptions_Create();

		[PreserveSig]
		[Token(Token = "0x6000558")]
		[Address(RVA = "0xDC7D14", Offset = "0xDC7D14", VA = "0xDC7D14")]
		public static extern void ovr_ApplicationOptions_Destroy(IntPtr handle);

		[Token(Token = "0x6000559")]
		[Address(RVA = "0xDC7B78", Offset = "0xDC7B78", VA = "0xDC7B78")]
		public static void ovr_ApplicationOptions_SetDeeplinkMessage(IntPtr handle, string value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x600055A")]
		[Address(RVA = "0xDED16C", Offset = "0xDED16C", VA = "0xDED16C")]
		private static extern void ovr_ApplicationOptions_SetDeeplinkMessage_Native(IntPtr handle, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x600055B")]
		[Address(RVA = "0xDED234", Offset = "0xDED234", VA = "0xDED234")]
		public static extern IntPtr ovr_MatchmakingOptions_Create();

		[PreserveSig]
		[Token(Token = "0x600055C")]
		[Address(RVA = "0xDED2E4", Offset = "0xDED2E4", VA = "0xDED2E4")]
		public static extern void ovr_MatchmakingOptions_Destroy(IntPtr handle);

		[Token(Token = "0x600055D")]
		[Address(RVA = "0xDED3A4", Offset = "0xDED3A4", VA = "0xDED3A4")]
		public static void ovr_MatchmakingOptions_SetCreateRoomDataStoreString(IntPtr handle, string key, string value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x600055E")]
		[Address(RVA = "0xDED4A0", Offset = "0xDED4A0", VA = "0xDED4A0")]
		private static extern void ovr_MatchmakingOptions_SetCreateRoomDataStoreString_Native(IntPtr handle, IntPtr key, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x600055F")]
		[Address(RVA = "0xDED570", Offset = "0xDED570", VA = "0xDED570")]
		public static extern void ovr_MatchmakingOptions_ClearCreateRoomDataStore(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x6000560")]
		[Address(RVA = "0xDED630", Offset = "0xDED630", VA = "0xDED630")]
		public static extern void ovr_MatchmakingOptions_SetCreateRoomJoinPolicy(IntPtr handle, RoomJoinPolicy value);

		[PreserveSig]
		[Token(Token = "0x6000561")]
		[Address(RVA = "0xDED6F8", Offset = "0xDED6F8", VA = "0xDED6F8")]
		public static extern void ovr_MatchmakingOptions_SetCreateRoomMaxUsers(IntPtr handle, uint value);

		[PreserveSig]
		[Token(Token = "0x6000562")]
		[Address(RVA = "0xDED7C0", Offset = "0xDED7C0", VA = "0xDED7C0")]
		public static extern void ovr_MatchmakingOptions_AddEnqueueAdditionalUser(IntPtr handle, ulong value);

		[PreserveSig]
		[Token(Token = "0x6000563")]
		[Address(RVA = "0xDED890", Offset = "0xDED890", VA = "0xDED890")]
		public static extern void ovr_MatchmakingOptions_ClearEnqueueAdditionalUsers(IntPtr handle);

		[Token(Token = "0x6000564")]
		[Address(RVA = "0xDED950", Offset = "0xDED950", VA = "0xDED950")]
		public static void ovr_MatchmakingOptions_SetEnqueueDataSettingsInt(IntPtr handle, string key, int value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000565")]
		[Address(RVA = "0xDEDA30", Offset = "0xDEDA30", VA = "0xDEDA30")]
		private static extern void ovr_MatchmakingOptions_SetEnqueueDataSettingsInt_Native(IntPtr handle, IntPtr key, int value);

		[Token(Token = "0x6000566")]
		[Address(RVA = "0xDEDB00", Offset = "0xDEDB00", VA = "0xDEDB00")]
		public static void ovr_MatchmakingOptions_SetEnqueueDataSettingsDouble(IntPtr handle, string key, double value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000567")]
		[Address(RVA = "0xDEDBE8", Offset = "0xDEDBE8", VA = "0xDEDBE8")]
		private static extern void ovr_MatchmakingOptions_SetEnqueueDataSettingsDouble_Native(IntPtr handle, IntPtr key, double value);

		[Token(Token = "0x6000568")]
		[Address(RVA = "0xDEDCB8", Offset = "0xDEDCB8", VA = "0xDEDCB8")]
		public static void ovr_MatchmakingOptions_SetEnqueueDataSettingsString(IntPtr handle, string key, string value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000569")]
		[Address(RVA = "0xDEDDB4", Offset = "0xDEDDB4", VA = "0xDEDDB4")]
		private static extern void ovr_MatchmakingOptions_SetEnqueueDataSettingsString_Native(IntPtr handle, IntPtr key, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x600056A")]
		[Address(RVA = "0xDEDE84", Offset = "0xDEDE84", VA = "0xDEDE84")]
		public static extern void ovr_MatchmakingOptions_ClearEnqueueDataSettings(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x600056B")]
		[Address(RVA = "0xDEDF44", Offset = "0xDEDF44", VA = "0xDEDF44")]
		public static extern void ovr_MatchmakingOptions_SetEnqueueIsDebug(IntPtr handle, bool value);

		[Token(Token = "0x600056C")]
		[Address(RVA = "0xDEE00C", Offset = "0xDEE00C", VA = "0xDEE00C")]
		public static void ovr_MatchmakingOptions_SetEnqueueQueryKey(IntPtr handle, string value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x600056D")]
		[Address(RVA = "0xDEE0DC", Offset = "0xDEE0DC", VA = "0xDEE0DC")]
		private static extern void ovr_MatchmakingOptions_SetEnqueueQueryKey_Native(IntPtr handle, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x600056E")]
		[Address(RVA = "0xDEE1A4", Offset = "0xDEE1A4", VA = "0xDEE1A4")]
		public static extern IntPtr ovr_RoomOptions_Create();

		[PreserveSig]
		[Token(Token = "0x600056F")]
		[Address(RVA = "0xDEE254", Offset = "0xDEE254", VA = "0xDEE254")]
		public static extern void ovr_RoomOptions_Destroy(IntPtr handle);

		[Token(Token = "0x6000570")]
		[Address(RVA = "0xDEE314", Offset = "0xDEE314", VA = "0xDEE314")]
		public static void ovr_RoomOptions_SetDataStoreString(IntPtr handle, string key, string value)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000571")]
		[Address(RVA = "0xDEE410", Offset = "0xDEE410", VA = "0xDEE410")]
		private static extern void ovr_RoomOptions_SetDataStoreString_Native(IntPtr handle, IntPtr key, IntPtr value);

		[PreserveSig]
		[Token(Token = "0x6000572")]
		[Address(RVA = "0xDEE4E0", Offset = "0xDEE4E0", VA = "0xDEE4E0")]
		public static extern void ovr_RoomOptions_ClearDataStore(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x6000573")]
		[Address(RVA = "0xDEE5A0", Offset = "0xDEE5A0", VA = "0xDEE5A0")]
		public static extern void ovr_RoomOptions_SetExcludeRecentlyMet(IntPtr handle, bool value);

		[PreserveSig]
		[Token(Token = "0x6000574")]
		[Address(RVA = "0xDEE668", Offset = "0xDEE668", VA = "0xDEE668")]
		public static extern void ovr_RoomOptions_SetMaxUserResults(IntPtr handle, uint value);

		[PreserveSig]
		[Token(Token = "0x6000575")]
		[Address(RVA = "0xDEE730", Offset = "0xDEE730", VA = "0xDEE730")]
		public static extern void ovr_RoomOptions_SetOrdering(IntPtr handle, UserOrdering value);

		[PreserveSig]
		[Token(Token = "0x6000576")]
		[Address(RVA = "0xDEE7F8", Offset = "0xDEE7F8", VA = "0xDEE7F8")]
		public static extern void ovr_RoomOptions_SetRecentlyMetTimeWindow(IntPtr handle, TimeWindow value);

		[PreserveSig]
		[Token(Token = "0x6000577")]
		[Address(RVA = "0xDEE8C0", Offset = "0xDEE8C0", VA = "0xDEE8C0")]
		public static extern void ovr_RoomOptions_SetRoomId(IntPtr handle, ulong value);

		[PreserveSig]
		[Token(Token = "0x6000578")]
		[Address(RVA = "0xDEE990", Offset = "0xDEE990", VA = "0xDEE990")]
		public static extern void ovr_RoomOptions_SetTurnOffUpdates(IntPtr handle, bool value);

		[PreserveSig]
		[Token(Token = "0x6000579")]
		[Address(RVA = "0xDEEA58", Offset = "0xDEEA58", VA = "0xDEEA58")]
		public static extern IntPtr ovr_UserOptions_Create();

		[PreserveSig]
		[Token(Token = "0x600057A")]
		[Address(RVA = "0xDEEB08", Offset = "0xDEEB08", VA = "0xDEEB08")]
		public static extern void ovr_UserOptions_Destroy(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x600057B")]
		[Address(RVA = "0xDEEBC8", Offset = "0xDEEBC8", VA = "0xDEEBC8")]
		public static extern void ovr_UserOptions_SetMaxUsers(IntPtr handle, uint value);

		[PreserveSig]
		[Token(Token = "0x600057C")]
		[Address(RVA = "0xDEEC90", Offset = "0xDEEC90", VA = "0xDEEC90")]
		public static extern void ovr_UserOptions_AddServiceProvider(IntPtr handle, ServiceProvider value);

		[PreserveSig]
		[Token(Token = "0x600057D")]
		[Address(RVA = "0xDEED58", Offset = "0xDEED58", VA = "0xDEED58")]
		public static extern void ovr_UserOptions_ClearServiceProviders(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x600057E")]
		[Address(RVA = "0xDEEE18", Offset = "0xDEEE18", VA = "0xDEEE18")]
		public static extern void ovr_UserOptions_SetTimeWindow(IntPtr handle, TimeWindow value);

		[PreserveSig]
		[Token(Token = "0x600057F")]
		[Address(RVA = "0xDEEEE0", Offset = "0xDEEEE0", VA = "0xDEEEE0")]
		public static extern IntPtr ovr_VoipOptions_Create();

		[PreserveSig]
		[Token(Token = "0x6000580")]
		[Address(RVA = "0xDEEF90", Offset = "0xDEEF90", VA = "0xDEEF90")]
		public static extern void ovr_VoipOptions_Destroy(IntPtr handle);

		[PreserveSig]
		[Token(Token = "0x6000581")]
		[Address(RVA = "0xDEF050", Offset = "0xDEF050", VA = "0xDEF050")]
		public static extern void ovr_VoipOptions_SetBitrateForNewConnections(IntPtr handle, VoipBitrate value);

		[PreserveSig]
		[Token(Token = "0x6000582")]
		[Address(RVA = "0xDEF118", Offset = "0xDEF118", VA = "0xDEF118")]
		public static extern void ovr_VoipOptions_SetCreateNewConnectionUseDtx(IntPtr handle, VoipDtxState value);
	}
	[Token(Token = "0x200005D")]
	public enum CloudStorageDataStatus
	{
		[Token(Token = "0x40001C6")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C080", Offset = "0xC2C080")]
		Unknown,
		[Token(Token = "0x40001C7")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C0B4", Offset = "0xC2C0B4")]
		InSync,
		[Token(Token = "0x40001C8")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C0E8", Offset = "0xC2C0E8")]
		NeedsDownload,
		[Token(Token = "0x40001C9")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C11C", Offset = "0xC2C11C")]
		RemoteDownloading,
		[Token(Token = "0x40001CA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C150", Offset = "0xC2C150")]
		NeedsUpload,
		[Token(Token = "0x40001CB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C184", Offset = "0xC2C184")]
		LocalUploading,
		[Token(Token = "0x40001CC")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C1B8", Offset = "0xC2C1B8")]
		InConflict
	}
	[Token(Token = "0x200005E")]
	public enum CloudStorageUpdateStatus
	{
		[Token(Token = "0x40001CE")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C1EC", Offset = "0xC2C1EC")]
		Unknown,
		[Token(Token = "0x40001CF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C220", Offset = "0xC2C220")]
		Ok,
		[Token(Token = "0x40001D0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C254", Offset = "0xC2C254")]
		BetterVersionStored,
		[Token(Token = "0x40001D1")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C288", Offset = "0xC2C288")]
		ManualMergeRequired
	}
	[Token(Token = "0x200005F")]
	public interface IMicrophone
	{
		[Token(Token = "0x600058C")]
		void Start();

		[Token(Token = "0x600058D")]
		void Stop();

		[Token(Token = "0x600058E")]
		float[] Update();
	}
	[Token(Token = "0x2000060")]
	public interface IVoipPCMSource
	{
		[Token(Token = "0x600058F")]
		int GetPCM(float[] dest, int length);

		[Token(Token = "0x6000590")]
		void SetSenderID(ulong senderID);

		[Token(Token = "0x6000591")]
		void Update();

		[Token(Token = "0x6000592")]
		int PeekSizeElements();
	}
	[Token(Token = "0x2000061")]
	public enum KeyValuePairType
	{
		[Token(Token = "0x40001D3")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C2BC", Offset = "0xC2C2BC")]
		String,
		[Token(Token = "0x40001D4")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C2F0", Offset = "0xC2C2F0")]
		Int,
		[Token(Token = "0x40001D5")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C324", Offset = "0xC2C324")]
		Double,
		[Token(Token = "0x40001D6")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C358", Offset = "0xC2C358")]
		Unknown
	}
	[Token(Token = "0x2000062")]
	public enum LaunchType
	{
		[Token(Token = "0x40001D8")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C38C", Offset = "0xC2C38C")]
		Unknown,
		[Token(Token = "0x40001D9")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C3C0", Offset = "0xC2C3C0")]
		Normal,
		[Token(Token = "0x40001DA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C3F4", Offset = "0xC2C3F4")]
		Invite,
		[Token(Token = "0x40001DB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C428", Offset = "0xC2C428")]
		Coordinated,
		[Token(Token = "0x40001DC")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C45C", Offset = "0xC2C45C")]
		Deeplink
	}
	[Token(Token = "0x2000063")]
	public enum LeaderboardFilterType
	{
		[Token(Token = "0x40001DE")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C490", Offset = "0xC2C490")]
		None,
		[Token(Token = "0x40001DF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C4C4", Offset = "0xC2C4C4")]
		Friends,
		[Token(Token = "0x40001E0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C4F8", Offset = "0xC2C4F8")]
		Unknown
	}
	[Token(Token = "0x2000064")]
	public enum LeaderboardStartAt
	{
		[Token(Token = "0x40001E2")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C52C", Offset = "0xC2C52C")]
		Top,
		[Token(Token = "0x40001E3")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C560", Offset = "0xC2C560")]
		CenteredOnViewer,
		[Token(Token = "0x40001E4")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C594", Offset = "0xC2C594")]
		CenteredOnViewerOrTop,
		[Token(Token = "0x40001E5")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C5C8", Offset = "0xC2C5C8")]
		Unknown
	}
	[Token(Token = "0x2000065")]
	public enum LivestreamingAudience
	{
		[Token(Token = "0x40001E7")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C5FC", Offset = "0xC2C5FC")]
		Unknown,
		[Token(Token = "0x40001E8")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C630", Offset = "0xC2C630")]
		Public,
		[Token(Token = "0x40001E9")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C664", Offset = "0xC2C664")]
		Friends,
		[Token(Token = "0x40001EA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C698", Offset = "0xC2C698")]
		OnlyMe
	}
	[Token(Token = "0x2000066")]
	public enum LivestreamingMicrophoneStatus
	{
		[Token(Token = "0x40001EC")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C6CC", Offset = "0xC2C6CC")]
		Unknown,
		[Token(Token = "0x40001ED")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C700", Offset = "0xC2C700")]
		MicrophoneOn,
		[Token(Token = "0x40001EE")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C734", Offset = "0xC2C734")]
		MicrophoneOff
	}
	[Token(Token = "0x2000067")]
	public enum LivestreamingStartStatus
	{
		[Token(Token = "0x40001F0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C768", Offset = "0xC2C768")]
		Success = 1,
		[Token(Token = "0x40001F1")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C79C", Offset = "0xC2C79C")]
		Unknown = 0,
		[Token(Token = "0x40001F2")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C7D0", Offset = "0xC2C7D0")]
		NoPackageSet = -1,
		[Token(Token = "0x40001F3")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C804", Offset = "0xC2C804")]
		NoFbConnect = -2,
		[Token(Token = "0x40001F4")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C838", Offset = "0xC2C838")]
		NoSessionId = -3,
		[Token(Token = "0x40001F5")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C86C", Offset = "0xC2C86C")]
		MissingParameters = -4
	}
	[Token(Token = "0x2000068")]
	public enum MatchmakingCriterionImportance
	{
		[Token(Token = "0x40001F7")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C8A0", Offset = "0xC2C8A0")]
		Required,
		[Token(Token = "0x40001F8")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C8D4", Offset = "0xC2C8D4")]
		High,
		[Token(Token = "0x40001F9")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C908", Offset = "0xC2C908")]
		Medium,
		[Token(Token = "0x40001FA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C93C", Offset = "0xC2C93C")]
		Low,
		[Token(Token = "0x40001FB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C970", Offset = "0xC2C970")]
		Unknown
	}
	[Token(Token = "0x2000069")]
	public class MatchmakingOptions
	{
		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr Handle;

		[Token(Token = "0x6000593")]
		[Address(RVA = "0x1FAE3C", Offset = "0x1FAE3C", VA = "0x1FAE3C")]
		public MatchmakingOptions()
		{
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0x1FAED0", Offset = "0x1FAED0", VA = "0x1FAED0")]
		public void SetCreateRoomDataStore(string key, string value)
		{
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0x1FAF78", Offset = "0x1FAF78", VA = "0x1FAF78")]
		public void ClearCreateRoomDataStore()
		{
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0x1FB004", Offset = "0x1FB004", VA = "0x1FB004")]
		public void SetCreateRoomJoinPolicy(RoomJoinPolicy value)
		{
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0x1FB098", Offset = "0x1FB098", VA = "0x1FB098")]
		public void SetCreateRoomMaxUsers(uint value)
		{
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0x1FB12C", Offset = "0x1FB12C", VA = "0x1FB12C")]
		public void AddEnqueueAdditionalUser(ulong userID)
		{
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0x1FB1D4", Offset = "0x1FB1D4", VA = "0x1FB1D4")]
		public void ClearEnqueueAdditionalUsers()
		{
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0x1FB260", Offset = "0x1FB260", VA = "0x1FB260")]
		public void SetEnqueueDataSettings(string key, int value)
		{
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0x1FB308", Offset = "0x1FB308", VA = "0x1FB308")]
		public void SetEnqueueDataSettings(string key, double value)
		{
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0x1FB3C0", Offset = "0x1FB3C0", VA = "0x1FB3C0")]
		public void SetEnqueueDataSettings(string key, string value)
		{
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x1FB468", Offset = "0x1FB468", VA = "0x1FB468")]
		public void ClearEnqueueDataSettings()
		{
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x1FB4F4", Offset = "0x1FB4F4", VA = "0x1FB4F4")]
		public void SetEnqueueIsDebug(bool value)
		{
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0x1FB588", Offset = "0x1FB588", VA = "0x1FB588")]
		public void SetEnqueueQueryKey(string value)
		{
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x1F9D40", Offset = "0x1F9D40", VA = "0x1F9D40")]
		public static explicit operator IntPtr(MatchmakingOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x1FB61C", Offset = "0x1FB61C", VA = "0x1FB61C", Slot = "1")]
		~MatchmakingOptions()
		{
		}
	}
	[Token(Token = "0x200006A")]
	public enum MatchmakingStatApproach
	{
		[Token(Token = "0x40001FE")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C9A4", Offset = "0xC2C9A4")]
		Unknown,
		[Token(Token = "0x40001FF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2C9D8", Offset = "0xC2C9D8")]
		Trailing,
		[Token(Token = "0x4000200")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2CA0C", Offset = "0xC2CA0C")]
		Swingy
	}
	[Token(Token = "0x200006B")]
	public enum MediaContentType
	{
		[Token(Token = "0x4000202")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2CA40", Offset = "0xC2CA40")]
		Unknown,
		[Token(Token = "0x4000203")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2CA74", Offset = "0xC2CA74")]
		Photo
	}
	[Token(Token = "0x200006C")]
	public abstract class Message<T> : Message
	{
		[Token(Token = "0x200006D")]
		public new delegate void Callback(Message<T> message);

		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T data;

		[Token(Token = "0x1700004B")]
		public T Data
		{
			[Token(Token = "0x60005A3")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x60005A2")]
		public Message(IntPtr c_message)
		{
		}

		[Token(Token = "0x60005A4")]
		protected abstract T GetDataFromMessage(IntPtr c_message);
	}
	[Token(Token = "0x200006E")]
	public class Message
	{
		[Token(Token = "0x200006F")]
		public delegate void Callback(Message message);

		[Token(Token = "0x2000070")]
		public enum MessageType : uint
		{
			[Token(Token = "0x400020A")]
			Unknown = 0u,
			[Token(Token = "0x400020B")]
			Achievements_AddCount = 65495601u,
			[Token(Token = "0x400020C")]
			Achievements_AddFields = 346693929u,
			[Token(Token = "0x400020D")]
			Achievements_GetAllDefinitions = 64177549u,
			[Token(Token = "0x400020E")]
			Achievements_GetAllProgress = 1335877149u,
			[Token(Token = "0x400020F")]
			Achievements_GetDefinitionsByName = 1653670332u,
			[Token(Token = "0x4000210")]
			Achievements_GetNextAchievementDefinitionArrayPage = 712888917u,
			[Token(Token = "0x4000211")]
			Achievements_GetNextAchievementProgressArrayPage = 792913703u,
			[Token(Token = "0x4000212")]
			Achievements_GetProgressByName = 354837425u,
			[Token(Token = "0x4000213")]
			Achievements_Unlock = 1497156573u,
			[Token(Token = "0x4000214")]
			ApplicationLifecycle_GetRegisteredPIDs = 82169698u,
			[Token(Token = "0x4000215")]
			ApplicationLifecycle_GetSessionKey = 984570141u,
			[Token(Token = "0x4000216")]
			ApplicationLifecycle_RegisterSessionKey = 1303818232u,
			[Token(Token = "0x4000217")]
			Application_GetVersion = 1751583246u,
			[Token(Token = "0x4000218")]
			Application_LaunchOtherApp = 1424151032u,
			[Token(Token = "0x4000219")]
			AssetFile_Delete = 1834842246u,
			[Token(Token = "0x400021A")]
			AssetFile_DeleteById = 1525206354u,
			[Token(Token = "0x400021B")]
			AssetFile_DeleteByName = 1108001231u,
			[Token(Token = "0x400021C")]
			AssetFile_Download = 289710021u,
			[Token(Token = "0x400021D")]
			AssetFile_DownloadById = 755009938u,
			[Token(Token = "0x400021E")]
			AssetFile_DownloadByName = 1664536314u,
			[Token(Token = "0x400021F")]
			AssetFile_DownloadCancel = 134927303u,
			[Token(Token = "0x4000220")]
			AssetFile_DownloadCancelById = 1365611796u,
			[Token(Token = "0x4000221")]
			AssetFile_DownloadCancelByName = 1147858170u,
			[Token(Token = "0x4000222")]
			AssetFile_GetList = 1258057588u,
			[Token(Token = "0x4000223")]
			AssetFile_Status = 47394656u,
			[Token(Token = "0x4000224")]
			AssetFile_StatusById = 1570069816u,
			[Token(Token = "0x4000225")]
			AssetFile_StatusByName = 1104140880u,
			[Token(Token = "0x4000226")]
			CloudStorage_Delete = 685393261u,
			[Token(Token = "0x4000227")]
			CloudStorage_GetNextCloudStorageMetadataArrayPage = 1544004335u,
			[Token(Token = "0x4000228")]
			CloudStorage_Load = 1082420033u,
			[Token(Token = "0x4000229")]
			CloudStorage_LoadBucketMetadata = 1931977997u,
			[Token(Token = "0x400022A")]
			CloudStorage_LoadConflictMetadata = 1146770162u,
			[Token(Token = "0x400022B")]
			CloudStorage_LoadHandle = 845863478u,
			[Token(Token = "0x400022C")]
			CloudStorage_LoadMetadata = 65446546u,
			[Token(Token = "0x400022D")]
			CloudStorage_ResolveKeepLocal = 811109637u,
			[Token(Token = "0x400022E")]
			CloudStorage_ResolveKeepRemote = 1965400838u,
			[Token(Token = "0x400022F")]
			CloudStorage_Save = 1270570030u,
			[Token(Token = "0x4000230")]
			Entitlement_GetIsViewerEntitled = 409688241u,
			[Token(Token = "0x4000231")]
			IAP_ConsumePurchase = 532378329u,
			[Token(Token = "0x4000232")]
			IAP_GetNextProductArrayPage = 467225263u,
			[Token(Token = "0x4000233")]
			IAP_GetNextPurchaseArrayPage = 1196886677u,
			[Token(Token = "0x4000234")]
			IAP_GetProductsBySKU = 2124073717u,
			[Token(Token = "0x4000235")]
			IAP_GetViewerPurchases = 974095385u,
			[Token(Token = "0x4000236")]
			IAP_LaunchCheckoutFlow = 1067126029u,
			[Token(Token = "0x4000237")]
			LanguagePack_GetCurrent = 529592533u,
			[Token(Token = "0x4000238")]
			LanguagePack_SetCurrent = 1531952096u,
			[Token(Token = "0x4000239")]
			Leaderboard_GetEntries = 1572030284u,
			[Token(Token = "0x400023A")]
			Leaderboard_GetEntriesAfterRank = 406293487u,
			[Token(Token = "0x400023B")]
			Leaderboard_GetNextEntries = 1310751961u,
			[Token(Token = "0x400023C")]
			Leaderboard_GetPreviousEntries = 1224858304u,
			[Token(Token = "0x400023D")]
			Leaderboard_WriteEntry = 293587198u,
			[Token(Token = "0x400023E")]
			Livestreaming_GetStatus = 1218079125u,
			[Token(Token = "0x400023F")]
			Livestreaming_PauseStream = 916223619u,
			[Token(Token = "0x4000240")]
			Livestreaming_ResumeStream = 575827343u,
			[Token(Token = "0x4000241")]
			Matchmaking_Browse = 509948616u,
			[Token(Token = "0x4000242")]
			Matchmaking_Browse2 = 1715641947u,
			[Token(Token = "0x4000243")]
			Matchmaking_Cancel = 543705519u,
			[Token(Token = "0x4000244")]
			Matchmaking_Cancel2 = 285117908u,
			[Token(Token = "0x4000245")]
			Matchmaking_CreateAndEnqueueRoom = 1615617480u,
			[Token(Token = "0x4000246")]
			Matchmaking_CreateAndEnqueueRoom2 = 693889755u,
			[Token(Token = "0x4000247")]
			Matchmaking_CreateRoom = 54203178u,
			[Token(Token = "0x4000248")]
			Matchmaking_CreateRoom2 = 1231922052u,
			[Token(Token = "0x4000249")]
			Matchmaking_Enqueue = 1086418033u,
			[Token(Token = "0x400024A")]
			Matchmaking_Enqueue2 = 303174325u,
			[Token(Token = "0x400024B")]
			Matchmaking_EnqueueRoom = 1888108644u,
			[Token(Token = "0x400024C")]
			Matchmaking_EnqueueRoom2 = 1428741028u,
			[Token(Token = "0x400024D")]
			Matchmaking_GetAdminSnapshot = 1008820116u,
			[Token(Token = "0x400024E")]
			Matchmaking_GetStats = 1123849272u,
			[Token(Token = "0x400024F")]
			Matchmaking_JoinRoom = 1295177725u,
			[Token(Token = "0x4000250")]
			Matchmaking_ReportResultInsecure = 439800205u,
			[Token(Token = "0x4000251")]
			Matchmaking_StartMatch = 1154746693u,
			[Token(Token = "0x4000252")]
			Media_ShareToFacebook = 14912239u,
			[Token(Token = "0x4000253")]
			Notification_GetNextRoomInviteNotificationArrayPage = 102890359u,
			[Token(Token = "0x4000254")]
			Notification_GetRoomInvites = 1871801234u,
			[Token(Token = "0x4000255")]
			Notification_MarkAsRead = 1903319523u,
			[Token(Token = "0x4000256")]
			Party_GetCurrent = 1200830304u,
			[Token(Token = "0x4000257")]
			Room_CreateAndJoinPrivate = 1977017207u,
			[Token(Token = "0x4000258")]
			Room_CreateAndJoinPrivate2 = 1513775683u,
			[Token(Token = "0x4000259")]
			Room_Get = 1704628152u,
			[Token(Token = "0x400025A")]
			Room_GetCurrent = 161916164u,
			[Token(Token = "0x400025B")]
			Room_GetCurrentForUser = 234887141u,
			[Token(Token = "0x400025C")]
			Room_GetInvitableUsers = 506615698u,
			[Token(Token = "0x400025D")]
			Room_GetInvitableUsers2 = 1330899120u,
			[Token(Token = "0x400025E")]
			Room_GetModeratedRooms = 159645047u,
			[Token(Token = "0x400025F")]
			Room_GetNextRoomArrayPage = 1317239238u,
			[Token(Token = "0x4000260")]
			Room_InviteUser = 1093266451u,
			[Token(Token = "0x4000261")]
			Room_Join = 382373641u,
			[Token(Token = "0x4000262")]
			Room_Join2 = 1303059522u,
			[Token(Token = "0x4000263")]
			Room_KickUser = 1233344310u,
			[Token(Token = "0x4000264")]
			Room_LaunchInvitableUserFlow = 843047539u,
			[Token(Token = "0x4000265")]
			Room_Leave = 1916281973u,
			[Token(Token = "0x4000266")]
			Room_SetDescription = 809796911u,
			[Token(Token = "0x4000267")]
			Room_UpdateDataStore = 40779816u,
			[Token(Token = "0x4000268")]
			Room_UpdateMembershipLockStatus = 923514796u,
			[Token(Token = "0x4000269")]
			Room_UpdateOwner = 850803997u,
			[Token(Token = "0x400026A")]
			Room_UpdatePrivateRoomJoinPolicy = 289473179u,
			[Token(Token = "0x400026B")]
			User_Get = 1808768583u,
			[Token(Token = "0x400026C")]
			User_GetAccessToken = 111696574u,
			[Token(Token = "0x400026D")]
			User_GetLoggedInUser = 1131361373u,
			[Token(Token = "0x400026E")]
			User_GetLoggedInUserFriends = 1484532365u,
			[Token(Token = "0x400026F")]
			User_GetLoggedInUserFriendsAndRooms = 1585908615u,
			[Token(Token = "0x4000270")]
			User_GetLoggedInUserRecentlyMetUsersAndRooms = 694139440u,
			[Token(Token = "0x4000271")]
			User_GetNextUserAndRoomArrayPage = 2143146719u,
			[Token(Token = "0x4000272")]
			User_GetNextUserArrayPage = 645723971u,
			[Token(Token = "0x4000273")]
			User_GetOrgScopedID = 418426907u,
			[Token(Token = "0x4000274")]
			User_GetSdkAccounts = 1733454467u,
			[Token(Token = "0x4000275")]
			User_GetUserProof = 578880643u,
			[Token(Token = "0x4000276")]
			User_LaunchFriendRequestFlow = 151303576u,
			[Token(Token = "0x4000277")]
			User_LaunchProfile = 171537047u,
			[Token(Token = "0x4000278")]
			Voip_SetSystemVoipSuppressed = 1161808298u,
			[Token(Token = "0x4000279")]
			Notification_ApplicationLifecycle_LaunchIntentChanged = 78859427u,
			[Token(Token = "0x400027A")]
			Notification_AssetFile_DownloadUpdate = 803015885u,
			[Token(Token = "0x400027B")]
			Notification_Cal_FinalizeApplication = 1963741337u,
			[Token(Token = "0x400027C")]
			Notification_Cal_ProposeApplication = 779375093u,
			[Token(Token = "0x400027D")]
			Notification_HTTP_Transfer = 2111073839u,
			[Token(Token = "0x400027E")]
			Notification_Livestreaming_StatusChange = 575101294u,
			[Token(Token = "0x400027F")]
			Notification_Matchmaking_MatchFound = 197393623u,
			[Token(Token = "0x4000280")]
			Notification_Networking_ConnectionStateChange = 1577243802u,
			[Token(Token = "0x4000281")]
			Notification_Networking_PeerConnectRequest = 1295114959u,
			[Token(Token = "0x4000282")]
			Notification_Networking_PingResult = 1360343058u,
			[Token(Token = "0x4000283")]
			Notification_Party_PartyUpdate = 487688882u,
			[Token(Token = "0x4000284")]
			Notification_Room_InviteAccepted = 1829794225u,
			[Token(Token = "0x4000285")]
			Notification_Room_InviteReceived = 1783209300u,
			[Token(Token = "0x4000286")]
			Notification_Room_RoomUpdate = 1626094639u,
			[Token(Token = "0x4000287")]
			Notification_Voip_ConnectRequest = 908343318u,
			[Token(Token = "0x4000288")]
			Notification_Voip_StateChange = 888120928u,
			[Token(Token = "0x4000289")]
			Notification_Voip_SystemVoipState = 1490179237u,
			[Token(Token = "0x400028A")]
			Platform_InitializeWithAccessToken = 896085803u,
			[Token(Token = "0x400028B")]
			Platform_InitializeStandaloneOculus = 1375260172u,
			[Token(Token = "0x400028C")]
			Platform_InitializeAndroidAsynchronous = 450037684u,
			[Token(Token = "0x400028D")]
			Platform_InitializeWindowsAsynchronous = 1839708815u
		}

		[Token(Token = "0x2000071")]
		internal delegate Message ExtraMessageTypesHandler(IntPtr messageHandle, MessageType message_type);

		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private MessageType type;

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ulong requestID;

		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Error error;

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2CAA8", Offset = "0xC2CAA8")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xC2CAA8", Offset = "0xC2CAA8")]
		private static ExtraMessageTypesHandler <HandleExtraMessageTypes>k__BackingField;

		[Token(Token = "0x1700004C")]
		public MessageType Type
		{
			[Token(Token = "0x60005AB")]
			[Address(RVA = "0x1FBB58", Offset = "0x1FBB58", VA = "0x1FBB58")]
			get
			{
				return default(MessageType);
			}
		}

		[Token(Token = "0x1700004D")]
		public bool IsError
		{
			[Token(Token = "0x60005AC")]
			[Address(RVA = "0x1FBB60", Offset = "0x1FBB60", VA = "0x1FBB60")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700004E")]
		public ulong RequestID
		{
			[Token(Token = "0x60005AD")]
			[Address(RVA = "0x1FBB70", Offset = "0x1FBB70", VA = "0x1FBB70")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x1700004F")]
		internal static ExtraMessageTypesHandler HandleExtraMessageTypes
		{
			[Token(Token = "0x60005F0")]
			[Address(RVA = "0x1FF098", Offset = "0x1FF098", VA = "0x1FF098")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2CAEC", Offset = "0xC2CAEC")]
			private get
			{
				return null;
			}
			[Token(Token = "0x60005EF")]
			[Address(RVA = "0x1FF034", Offset = "0x1FF034", VA = "0x1FF034")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2CADC", Offset = "0xC2CADC")]
			set
			{
			}
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x1FB818", Offset = "0x1FB818", VA = "0x1FB818")]
		public Message(IntPtr c_message)
		{
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x1FBB50", Offset = "0x1FBB50", VA = "0x1FBB50", Slot = "1")]
		~Message()
		{
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x1FBB78", Offset = "0x1FBB78", VA = "0x1FBB78", Slot = "4")]
		public virtual Error GetError()
		{
			return null;
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x1FBB80", Offset = "0x1FBB80", VA = "0x1FBB80", Slot = "5")]
		public virtual PingResult GetPingResult()
		{
			return null;
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x1FBB88", Offset = "0x1FBB88", VA = "0x1FBB88", Slot = "6")]
		public virtual NetworkingPeer GetNetworkingPeer()
		{
			return null;
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x1FBB90", Offset = "0x1FBB90", VA = "0x1FBB90", Slot = "7")]
		public virtual HttpTransferUpdate GetHttpTransferUpdate()
		{
			return null;
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x1FBB98", Offset = "0x1FBB98", VA = "0x1FBB98", Slot = "8")]
		public virtual PlatformInitialize GetPlatformInitialize()
		{
			return null;
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x1FBBA0", Offset = "0x1FBBA0", VA = "0x1FBBA0", Slot = "9")]
		public virtual AbuseReportRecording GetAbuseReportRecording()
		{
			return null;
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x1FBBA8", Offset = "0x1FBBA8", VA = "0x1FBBA8", Slot = "10")]
		public virtual AchievementDefinitionList GetAchievementDefinitions()
		{
			return null;
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x1FBBB0", Offset = "0x1FBBB0", VA = "0x1FBBB0", Slot = "11")]
		public virtual AchievementProgressList GetAchievementProgressList()
		{
			return null;
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x1FBBB8", Offset = "0x1FBBB8", VA = "0x1FBBB8", Slot = "12")]
		public virtual AchievementUpdate GetAchievementUpdate()
		{
			return null;
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x1FBBC0", Offset = "0x1FBBC0", VA = "0x1FBBC0", Slot = "13")]
		public virtual ApplicationVersion GetApplicationVersion()
		{
			return null;
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x1FBBC8", Offset = "0x1FBBC8", VA = "0x1FBBC8", Slot = "14")]
		public virtual AssetDetails GetAssetDetails()
		{
			return null;
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x1FBBD0", Offset = "0x1FBBD0", VA = "0x1FBBD0", Slot = "15")]
		public virtual AssetDetailsList GetAssetDetailsList()
		{
			return null;
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x1FBBD8", Offset = "0x1FBBD8", VA = "0x1FBBD8", Slot = "16")]
		public virtual AssetFileDeleteResult GetAssetFileDeleteResult()
		{
			return null;
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x1FBBE0", Offset = "0x1FBBE0", VA = "0x1FBBE0", Slot = "17")]
		public virtual AssetFileDownloadCancelResult GetAssetFileDownloadCancelResult()
		{
			return null;
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0x1FBBE8", Offset = "0x1FBBE8", VA = "0x1FBBE8", Slot = "18")]
		public virtual AssetFileDownloadResult GetAssetFileDownloadResult()
		{
			return null;
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x1FBBF0", Offset = "0x1FBBF0", VA = "0x1FBBF0", Slot = "19")]
		public virtual AssetFileDownloadUpdate GetAssetFileDownloadUpdate()
		{
			return null;
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x1FBBF8", Offset = "0x1FBBF8", VA = "0x1FBBF8", Slot = "20")]
		public virtual CalApplicationFinalized GetCalApplicationFinalized()
		{
			return null;
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x1FBC00", Offset = "0x1FBC00", VA = "0x1FBC00", Slot = "21")]
		public virtual CalApplicationProposed GetCalApplicationProposed()
		{
			return null;
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x1FBC08", Offset = "0x1FBC08", VA = "0x1FBC08", Slot = "22")]
		public virtual CalApplicationSuggestionList GetCalApplicationSuggestionList()
		{
			return null;
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x1FBC10", Offset = "0x1FBC10", VA = "0x1FBC10", Slot = "23")]
		public virtual CloudStorageConflictMetadata GetCloudStorageConflictMetadata()
		{
			return null;
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x1FBC18", Offset = "0x1FBC18", VA = "0x1FBC18", Slot = "24")]
		public virtual CloudStorageData GetCloudStorageData()
		{
			return null;
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x1FBC20", Offset = "0x1FBC20", VA = "0x1FBC20", Slot = "25")]
		public virtual CloudStorageMetadata GetCloudStorageMetadata()
		{
			return null;
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x1FBC28", Offset = "0x1FBC28", VA = "0x1FBC28", Slot = "26")]
		public virtual CloudStorageMetadataList GetCloudStorageMetadataList()
		{
			return null;
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x1FBC30", Offset = "0x1FBC30", VA = "0x1FBC30", Slot = "27")]
		public virtual CloudStorageUpdateResponse GetCloudStorageUpdateResponse()
		{
			return null;
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x1FBC38", Offset = "0x1FBC38", VA = "0x1FBC38", Slot = "28")]
		public virtual InstalledApplicationList GetInstalledApplicationList()
		{
			return null;
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x1FBC40", Offset = "0x1FBC40", VA = "0x1FBC40", Slot = "29")]
		public virtual LaunchBlockFlowResult GetLaunchBlockFlowResult()
		{
			return null;
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x1FBC48", Offset = "0x1FBC48", VA = "0x1FBC48", Slot = "30")]
		public virtual LaunchFriendRequestFlowResult GetLaunchFriendRequestFlowResult()
		{
			return null;
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x1FBC50", Offset = "0x1FBC50", VA = "0x1FBC50", Slot = "31")]
		public virtual LaunchReportFlowResult GetLaunchReportFlowResult()
		{
			return null;
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x1FBC58", Offset = "0x1FBC58", VA = "0x1FBC58", Slot = "32")]
		public virtual LaunchUnblockFlowResult GetLaunchUnblockFlowResult()
		{
			return null;
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x1FBC60", Offset = "0x1FBC60", VA = "0x1FBC60", Slot = "33")]
		public virtual bool GetLeaderboardDidUpdate()
		{
			return default(bool);
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x1FBC68", Offset = "0x1FBC68", VA = "0x1FBC68", Slot = "34")]
		public virtual LeaderboardEntryList GetLeaderboardEntryList()
		{
			return null;
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x1FBC70", Offset = "0x1FBC70", VA = "0x1FBC70", Slot = "35")]
		public virtual LinkedAccountList GetLinkedAccountList()
		{
			return null;
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x1FBC78", Offset = "0x1FBC78", VA = "0x1FBC78", Slot = "36")]
		public virtual LivestreamingApplicationStatus GetLivestreamingApplicationStatus()
		{
			return null;
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x1FBC80", Offset = "0x1FBC80", VA = "0x1FBC80", Slot = "37")]
		public virtual LivestreamingStartResult GetLivestreamingStartResult()
		{
			return null;
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x1FBC88", Offset = "0x1FBC88", VA = "0x1FBC88", Slot = "38")]
		public virtual LivestreamingStatus GetLivestreamingStatus()
		{
			return null;
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x1FBC90", Offset = "0x1FBC90", VA = "0x1FBC90", Slot = "39")]
		public virtual LivestreamingVideoStats GetLivestreamingVideoStats()
		{
			return null;
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x1FBC98", Offset = "0x1FBC98", VA = "0x1FBC98", Slot = "40")]
		public virtual MatchmakingAdminSnapshot GetMatchmakingAdminSnapshot()
		{
			return null;
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x1FBCA0", Offset = "0x1FBCA0", VA = "0x1FBCA0", Slot = "41")]
		public virtual MatchmakingBrowseResult GetMatchmakingBrowseResult()
		{
			return null;
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x1FBCA8", Offset = "0x1FBCA8", VA = "0x1FBCA8", Slot = "42")]
		public virtual MatchmakingEnqueueResult GetMatchmakingEnqueueResult()
		{
			return null;
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x1FBCB0", Offset = "0x1FBCB0", VA = "0x1FBCB0", Slot = "43")]
		public virtual MatchmakingEnqueueResultAndRoom GetMatchmakingEnqueueResultAndRoom()
		{
			return null;
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x1FBCB8", Offset = "0x1FBCB8", VA = "0x1FBCB8", Slot = "44")]
		public virtual MatchmakingStats GetMatchmakingStats()
		{
			return null;
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x1FBCC0", Offset = "0x1FBCC0", VA = "0x1FBCC0", Slot = "45")]
		public virtual OrgScopedID GetOrgScopedID()
		{
			return null;
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x1FBCC8", Offset = "0x1FBCC8", VA = "0x1FBCC8", Slot = "46")]
		public virtual Party GetParty()
		{
			return null;
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x1FBCD0", Offset = "0x1FBCD0", VA = "0x1FBCD0", Slot = "47")]
		public virtual PartyID GetPartyID()
		{
			return null;
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x1FBCD8", Offset = "0x1FBCD8", VA = "0x1FBCD8", Slot = "48")]
		public virtual PartyUpdateNotification GetPartyUpdateNotification()
		{
			return null;
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x1FBCE0", Offset = "0x1FBCE0", VA = "0x1FBCE0", Slot = "49")]
		public virtual PidList GetPidList()
		{
			return null;
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x1FBCE8", Offset = "0x1FBCE8", VA = "0x1FBCE8", Slot = "50")]
		public virtual ProductList GetProductList()
		{
			return null;
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x1FBCF0", Offset = "0x1FBCF0", VA = "0x1FBCF0", Slot = "51")]
		public virtual Purchase GetPurchase()
		{
			return null;
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x1FBCF8", Offset = "0x1FBCF8", VA = "0x1FBCF8", Slot = "52")]
		public virtual PurchaseList GetPurchaseList()
		{
			return null;
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x1FBD00", Offset = "0x1FBD00", VA = "0x1FBD00", Slot = "53")]
		public virtual Room GetRoom()
		{
			return null;
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x1FBD08", Offset = "0x1FBD08", VA = "0x1FBD08", Slot = "54")]
		public virtual RoomInviteNotification GetRoomInviteNotification()
		{
			return null;
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x1FBD10", Offset = "0x1FBD10", VA = "0x1FBD10", Slot = "55")]
		public virtual RoomInviteNotificationList GetRoomInviteNotificationList()
		{
			return null;
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x1FBD18", Offset = "0x1FBD18", VA = "0x1FBD18", Slot = "56")]
		public virtual RoomList GetRoomList()
		{
			return null;
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x1FBD20", Offset = "0x1FBD20", VA = "0x1FBD20", Slot = "57")]
		public virtual SdkAccountList GetSdkAccountList()
		{
			return null;
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x1FBD28", Offset = "0x1FBD28", VA = "0x1FBD28", Slot = "58")]
		public virtual ShareMediaResult GetShareMediaResult()
		{
			return null;
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x1FBD30", Offset = "0x1FBD30", VA = "0x1FBD30", Slot = "59")]
		public virtual string GetString()
		{
			return null;
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x1FBD38", Offset = "0x1FBD38", VA = "0x1FBD38", Slot = "60")]
		public virtual SystemPermission GetSystemPermission()
		{
			return null;
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x1FBD40", Offset = "0x1FBD40", VA = "0x1FBD40", Slot = "61")]
		public virtual SystemVoipState GetSystemVoipState()
		{
			return null;
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x1FBD48", Offset = "0x1FBD48", VA = "0x1FBD48", Slot = "62")]
		public virtual User GetUser()
		{
			return null;
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x1FBD50", Offset = "0x1FBD50", VA = "0x1FBD50", Slot = "63")]
		public virtual UserAndRoomList GetUserAndRoomList()
		{
			return null;
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x1FBD58", Offset = "0x1FBD58", VA = "0x1FBD58", Slot = "64")]
		public virtual UserList GetUserList()
		{
			return null;
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x1FBD60", Offset = "0x1FBD60", VA = "0x1FBD60", Slot = "65")]
		public virtual UserProof GetUserProof()
		{
			return null;
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x1FBD68", Offset = "0x1FBD68", VA = "0x1FBD68", Slot = "66")]
		public virtual UserReportID GetUserReportID()
		{
			return null;
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x1FBD70", Offset = "0x1FBD70", VA = "0x1FBD70")]
		internal static Message ParseMessageHandle(IntPtr messageHandle)
		{
			return null;
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x1FEF54", Offset = "0x1FEF54", VA = "0x1FEF54")]
		public static Message PopMessage()
		{
			return null;
		}
	}
	[Token(Token = "0x2000072")]
	public class MessageWithAbuseReportRecording : Message<AbuseReportRecording>
	{
		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x1FF7F0", Offset = "0x1FF7F0", VA = "0x1FF7F0")]
		public MessageWithAbuseReportRecording(IntPtr c_message)
		{
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x1FF85C", Offset = "0x1FF85C", VA = "0x1FF85C", Slot = "9")]
		public override AbuseReportRecording GetAbuseReportRecording()
		{
			return null;
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x1FF8C0", Offset = "0x1FF8C0", VA = "0x1FF8C0", Slot = "67")]
		protected override AbuseReportRecording GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000073")]
	public class MessageWithAchievementDefinitions : Message<AchievementDefinitionList>
	{
		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x1FD264", Offset = "0x1FD264", VA = "0x1FD264")]
		public MessageWithAchievementDefinitions(IntPtr c_message)
		{
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x1FFA1C", Offset = "0x1FFA1C", VA = "0x1FFA1C", Slot = "10")]
		public override AchievementDefinitionList GetAchievementDefinitions()
		{
			return null;
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x1FFA80", Offset = "0x1FFA80", VA = "0x1FFA80", Slot = "67")]
		protected override AchievementDefinitionList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000074")]
	public class MessageWithAchievementProgressList : Message<AchievementProgressList>
	{
		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x1FD2D0", Offset = "0x1FD2D0", VA = "0x1FD2D0")]
		public MessageWithAchievementProgressList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0x1FFDB8", Offset = "0x1FFDB8", VA = "0x1FFDB8", Slot = "11")]
		public override AchievementProgressList GetAchievementProgressList()
		{
			return null;
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0x1FFE1C", Offset = "0x1FFE1C", VA = "0x1FFE1C", Slot = "67")]
		protected override AchievementProgressList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000075")]
	public class MessageWithAchievementUpdate : Message<AchievementUpdate>
	{
		[Token(Token = "0x6000602")]
		[Address(RVA = "0x1FD33C", Offset = "0x1FD33C", VA = "0x1FD33C")]
		public MessageWithAchievementUpdate(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0x200154", Offset = "0x200154", VA = "0x200154", Slot = "12")]
		public override AchievementUpdate GetAchievementUpdate()
		{
			return null;
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0x2001B8", Offset = "0x2001B8", VA = "0x2001B8", Slot = "67")]
		protected override AchievementUpdate GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000076")]
	public class MessageWithApplicationVersion : Message<ApplicationVersion>
	{
		[Token(Token = "0x6000605")]
		[Address(RVA = "0x1FD3A8", Offset = "0x1FD3A8", VA = "0x1FD3A8")]
		public MessageWithApplicationVersion(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0x200328", Offset = "0x200328", VA = "0x200328", Slot = "13")]
		public override ApplicationVersion GetApplicationVersion()
		{
			return null;
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0x20038C", Offset = "0x20038C", VA = "0x20038C", Slot = "67")]
		protected override ApplicationVersion GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000077")]
	public class MessageWithAssetDetails : Message<AssetDetails>
	{
		[Token(Token = "0x6000608")]
		[Address(RVA = "0x1FD414", Offset = "0x1FD414", VA = "0x1FD414")]
		public MessageWithAssetDetails(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0x200524", Offset = "0x200524", VA = "0x200524", Slot = "14")]
		public override AssetDetails GetAssetDetails()
		{
			return null;
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0x200588", Offset = "0x200588", VA = "0x200588", Slot = "67")]
		protected override AssetDetails GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000078")]
	public class MessageWithAssetDetailsList : Message<AssetDetailsList>
	{
		[Token(Token = "0x600060B")]
		[Address(RVA = "0x1FD480", Offset = "0x1FD480", VA = "0x1FD480")]
		public MessageWithAssetDetailsList(IntPtr c_message)
		{
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0x200798", Offset = "0x200798", VA = "0x200798", Slot = "15")]
		public override AssetDetailsList GetAssetDetailsList()
		{
			return null;
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0x2007FC", Offset = "0x2007FC", VA = "0x2007FC", Slot = "67")]
		protected override AssetDetailsList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000079")]
	public class MessageWithAssetFileDeleteResult : Message<AssetFileDeleteResult>
	{
		[Token(Token = "0x600060E")]
		[Address(RVA = "0x1FD4EC", Offset = "0x1FD4EC", VA = "0x1FD4EC")]
		public MessageWithAssetFileDeleteResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0x200AF0", Offset = "0x200AF0", VA = "0x200AF0", Slot = "16")]
		public override AssetFileDeleteResult GetAssetFileDeleteResult()
		{
			return null;
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0x200B54", Offset = "0x200B54", VA = "0x200B54", Slot = "67")]
		protected override AssetFileDeleteResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200007A")]
	public class MessageWithAssetFileDownloadCancelResult : Message<AssetFileDownloadCancelResult>
	{
		[Token(Token = "0x6000611")]
		[Address(RVA = "0x1FD558", Offset = "0x1FD558", VA = "0x1FD558")]
		public MessageWithAssetFileDownloadCancelResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0x200CEC", Offset = "0x200CEC", VA = "0x200CEC", Slot = "17")]
		public override AssetFileDownloadCancelResult GetAssetFileDownloadCancelResult()
		{
			return null;
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0x200D50", Offset = "0x200D50", VA = "0x200D50", Slot = "67")]
		protected override AssetFileDownloadCancelResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200007B")]
	public class MessageWithAssetFileDownloadResult : Message<AssetFileDownloadResult>
	{
		[Token(Token = "0x6000614")]
		[Address(RVA = "0x1FD5C4", Offset = "0x1FD5C4", VA = "0x1FD5C4")]
		public MessageWithAssetFileDownloadResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0x200EE8", Offset = "0x200EE8", VA = "0x200EE8", Slot = "18")]
		public override AssetFileDownloadResult GetAssetFileDownloadResult()
		{
			return null;
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0x200F4C", Offset = "0x200F4C", VA = "0x200F4C", Slot = "67")]
		protected override AssetFileDownloadResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200007C")]
	public class MessageWithAssetFileDownloadUpdate : Message<AssetFileDownloadUpdate>
	{
		[Token(Token = "0x6000617")]
		[Address(RVA = "0x1FD630", Offset = "0x1FD630", VA = "0x1FD630")]
		public MessageWithAssetFileDownloadUpdate(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0x2010BC", Offset = "0x2010BC", VA = "0x2010BC", Slot = "19")]
		public override AssetFileDownloadUpdate GetAssetFileDownloadUpdate()
		{
			return null;
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0x201120", Offset = "0x201120", VA = "0x201120", Slot = "67")]
		protected override AssetFileDownloadUpdate GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200007D")]
	public class MessageWithCalApplicationFinalized : Message<CalApplicationFinalized>
	{
		[Token(Token = "0x600061A")]
		[Address(RVA = "0x1FD69C", Offset = "0x1FD69C", VA = "0x1FD69C")]
		public MessageWithCalApplicationFinalized(IntPtr c_message)
		{
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0x2012CC", Offset = "0x2012CC", VA = "0x2012CC", Slot = "20")]
		public override CalApplicationFinalized GetCalApplicationFinalized()
		{
			return null;
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0x201330", Offset = "0x201330", VA = "0x201330", Slot = "67")]
		protected override CalApplicationFinalized GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200007E")]
	public class MessageWithCalApplicationProposed : Message<CalApplicationProposed>
	{
		[Token(Token = "0x600061D")]
		[Address(RVA = "0x1FD708", Offset = "0x1FD708", VA = "0x1FD708")]
		public MessageWithCalApplicationProposed(IntPtr c_message)
		{
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0x2014B4", Offset = "0x2014B4", VA = "0x2014B4", Slot = "21")]
		public override CalApplicationProposed GetCalApplicationProposed()
		{
			return null;
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0x201518", Offset = "0x201518", VA = "0x201518", Slot = "67")]
		protected override CalApplicationProposed GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200007F")]
	public class MessageWithCalApplicationSuggestionList : Message<CalApplicationSuggestionList>
	{
		[Token(Token = "0x6000620")]
		[Address(RVA = "0x201674", Offset = "0x201674", VA = "0x201674")]
		public MessageWithCalApplicationSuggestionList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000621")]
		[Address(RVA = "0x2016E0", Offset = "0x2016E0", VA = "0x2016E0", Slot = "22")]
		public override CalApplicationSuggestionList GetCalApplicationSuggestionList()
		{
			return null;
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0x201744", Offset = "0x201744", VA = "0x201744", Slot = "67")]
		protected override CalApplicationSuggestionList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000080")]
	public class MessageWithCloudStorageConflictMetadata : Message<CloudStorageConflictMetadata>
	{
		[Token(Token = "0x6000623")]
		[Address(RVA = "0x1FD774", Offset = "0x1FD774", VA = "0x1FD774")]
		public MessageWithCloudStorageConflictMetadata(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0x201A38", Offset = "0x201A38", VA = "0x201A38", Slot = "23")]
		public override CloudStorageConflictMetadata GetCloudStorageConflictMetadata()
		{
			return null;
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0x201A9C", Offset = "0x201A9C", VA = "0x201A9C", Slot = "67")]
		protected override CloudStorageConflictMetadata GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000081")]
	public class MessageWithCloudStorageData : Message<CloudStorageData>
	{
		[Token(Token = "0x6000626")]
		[Address(RVA = "0x1FD7E0", Offset = "0x1FD7E0", VA = "0x1FD7E0")]
		public MessageWithCloudStorageData(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0x201C48", Offset = "0x201C48", VA = "0x201C48", Slot = "24")]
		public override CloudStorageData GetCloudStorageData()
		{
			return null;
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0x201CAC", Offset = "0x201CAC", VA = "0x201CAC", Slot = "67")]
		protected override CloudStorageData GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000082")]
	public class MessageWithCloudStorageMetadataUnderLocal : Message<CloudStorageMetadata>
	{
		[Token(Token = "0x6000629")]
		[Address(RVA = "0x1FD84C", Offset = "0x1FD84C", VA = "0x1FD84C")]
		public MessageWithCloudStorageMetadataUnderLocal(IntPtr c_message)
		{
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0x2021E0", Offset = "0x2021E0", VA = "0x2021E0", Slot = "25")]
		public override CloudStorageMetadata GetCloudStorageMetadata()
		{
			return null;
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0x202244", Offset = "0x202244", VA = "0x202244", Slot = "67")]
		protected override CloudStorageMetadata GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000083")]
	public class MessageWithCloudStorageMetadataList : Message<CloudStorageMetadataList>
	{
		[Token(Token = "0x600062C")]
		[Address(RVA = "0x1FD8B8", Offset = "0x1FD8B8", VA = "0x1FD8B8")]
		public MessageWithCloudStorageMetadataList(IntPtr c_message)
		{
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0x201E44", Offset = "0x201E44", VA = "0x201E44", Slot = "26")]
		public override CloudStorageMetadataList GetCloudStorageMetadataList()
		{
			return null;
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0x201EA8", Offset = "0x201EA8", VA = "0x201EA8", Slot = "67")]
		protected override CloudStorageMetadataList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000084")]
	public class MessageWithCloudStorageUpdateResponse : Message<CloudStorageUpdateResponse>
	{
		[Token(Token = "0x600062F")]
		[Address(RVA = "0x1FD924", Offset = "0x1FD924", VA = "0x1FD924")]
		public MessageWithCloudStorageUpdateResponse(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0x20242C", Offset = "0x20242C", VA = "0x20242C", Slot = "27")]
		public override CloudStorageUpdateResponse GetCloudStorageUpdateResponse()
		{
			return null;
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0x202490", Offset = "0x202490", VA = "0x202490", Slot = "67")]
		protected override CloudStorageUpdateResponse GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000085")]
	public class MessageWithInstalledApplicationList : Message<InstalledApplicationList>
	{
		[Token(Token = "0x6000632")]
		[Address(RVA = "0x202930", Offset = "0x202930", VA = "0x202930")]
		public MessageWithInstalledApplicationList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0x20299C", Offset = "0x20299C", VA = "0x20299C", Slot = "28")]
		public override InstalledApplicationList GetInstalledApplicationList()
		{
			return null;
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0x202A00", Offset = "0x202A00", VA = "0x202A00", Slot = "67")]
		protected override InstalledApplicationList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000086")]
	public class MessageWithLaunchBlockFlowResult : Message<LaunchBlockFlowResult>
	{
		[Token(Token = "0x6000635")]
		[Address(RVA = "0x202CF4", Offset = "0x202CF4", VA = "0x202CF4")]
		public MessageWithLaunchBlockFlowResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0x202D60", Offset = "0x202D60", VA = "0x202D60", Slot = "29")]
		public override LaunchBlockFlowResult GetLaunchBlockFlowResult()
		{
			return null;
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0x202DC4", Offset = "0x202DC4", VA = "0x202DC4", Slot = "67")]
		protected override LaunchBlockFlowResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000087")]
	public class MessageWithLaunchFriendRequestFlowResult : Message<LaunchFriendRequestFlowResult>
	{
		[Token(Token = "0x6000638")]
		[Address(RVA = "0x1FD990", Offset = "0x1FD990", VA = "0x1FD990")]
		public MessageWithLaunchFriendRequestFlowResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x202F34", Offset = "0x202F34", VA = "0x202F34", Slot = "30")]
		public override LaunchFriendRequestFlowResult GetLaunchFriendRequestFlowResult()
		{
			return null;
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x202F98", Offset = "0x202F98", VA = "0x202F98", Slot = "67")]
		protected override LaunchFriendRequestFlowResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000088")]
	public class MessageWithLaunchReportFlowResult : Message<LaunchReportFlowResult>
	{
		[Token(Token = "0x600063B")]
		[Address(RVA = "0x203108", Offset = "0x203108", VA = "0x203108")]
		public MessageWithLaunchReportFlowResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0x203174", Offset = "0x203174", VA = "0x203174", Slot = "31")]
		public override LaunchReportFlowResult GetLaunchReportFlowResult()
		{
			return null;
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x2031D8", Offset = "0x2031D8", VA = "0x2031D8", Slot = "67")]
		protected override LaunchReportFlowResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000089")]
	public class MessageWithLaunchUnblockFlowResult : Message<LaunchUnblockFlowResult>
	{
		[Token(Token = "0x600063E")]
		[Address(RVA = "0x203348", Offset = "0x203348", VA = "0x203348")]
		public MessageWithLaunchUnblockFlowResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0x2033B4", Offset = "0x2033B4", VA = "0x2033B4", Slot = "32")]
		public override LaunchUnblockFlowResult GetLaunchUnblockFlowResult()
		{
			return null;
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0x203418", Offset = "0x203418", VA = "0x203418", Slot = "67")]
		protected override LaunchUnblockFlowResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200008A")]
	public class MessageWithLeaderboardEntryList : Message<LeaderboardEntryList>
	{
		[Token(Token = "0x6000641")]
		[Address(RVA = "0x1FD9FC", Offset = "0x1FD9FC", VA = "0x1FD9FC")]
		public MessageWithLeaderboardEntryList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0x203694", Offset = "0x203694", VA = "0x203694", Slot = "34")]
		public override LeaderboardEntryList GetLeaderboardEntryList()
		{
			return null;
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0x2036F8", Offset = "0x2036F8", VA = "0x2036F8", Slot = "67")]
		protected override LeaderboardEntryList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200008B")]
	public class MessageWithLinkedAccountList : Message<LinkedAccountList>
	{
		[Token(Token = "0x6000644")]
		[Address(RVA = "0x203A5C", Offset = "0x203A5C", VA = "0x203A5C")]
		public MessageWithLinkedAccountList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000645")]
		[Address(RVA = "0x203AC8", Offset = "0x203AC8", VA = "0x203AC8", Slot = "35")]
		public override LinkedAccountList GetLinkedAccountList()
		{
			return null;
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0x203B2C", Offset = "0x203B2C", VA = "0x203B2C", Slot = "67")]
		protected override LinkedAccountList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200008C")]
	public class MessageWithLivestreamingApplicationStatus : Message<LivestreamingApplicationStatus>
	{
		[Token(Token = "0x6000647")]
		[Address(RVA = "0x203E20", Offset = "0x203E20", VA = "0x203E20")]
		public MessageWithLivestreamingApplicationStatus(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0x203E8C", Offset = "0x203E8C", VA = "0x203E8C", Slot = "36")]
		public override LivestreamingApplicationStatus GetLivestreamingApplicationStatus()
		{
			return null;
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0x203EF0", Offset = "0x203EF0", VA = "0x203EF0", Slot = "67")]
		protected override LivestreamingApplicationStatus GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200008D")]
	public class MessageWithLivestreamingStartResult : Message<LivestreamingStartResult>
	{
		[Token(Token = "0x600064A")]
		[Address(RVA = "0x20404C", Offset = "0x20404C", VA = "0x20404C")]
		public MessageWithLivestreamingStartResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0x2040B8", Offset = "0x2040B8", VA = "0x2040B8", Slot = "37")]
		public override LivestreamingStartResult GetLivestreamingStartResult()
		{
			return null;
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0x20411C", Offset = "0x20411C", VA = "0x20411C", Slot = "67")]
		protected override LivestreamingStartResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200008E")]
	public class MessageWithLivestreamingStatus : Message<LivestreamingStatus>
	{
		[Token(Token = "0x600064D")]
		[Address(RVA = "0x1FDAD4", Offset = "0x1FDAD4", VA = "0x1FDAD4")]
		public MessageWithLivestreamingStatus(IntPtr c_message)
		{
		}

		[Token(Token = "0x600064E")]
		[Address(RVA = "0x204278", Offset = "0x204278", VA = "0x204278", Slot = "38")]
		public override LivestreamingStatus GetLivestreamingStatus()
		{
			return null;
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0x2042DC", Offset = "0x2042DC", VA = "0x2042DC", Slot = "67")]
		protected override LivestreamingStatus GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200008F")]
	public class MessageWithLivestreamingVideoStats : Message<LivestreamingVideoStats>
	{
		[Token(Token = "0x6000650")]
		[Address(RVA = "0x204488", Offset = "0x204488", VA = "0x204488")]
		public MessageWithLivestreamingVideoStats(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0x2044F4", Offset = "0x2044F4", VA = "0x2044F4", Slot = "39")]
		public override LivestreamingVideoStats GetLivestreamingVideoStats()
		{
			return null;
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0x204558", Offset = "0x204558", VA = "0x204558", Slot = "67")]
		protected override LivestreamingVideoStats GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000090")]
	public class MessageWithMatchmakingAdminSnapshot : Message<MatchmakingAdminSnapshot>
	{
		[Token(Token = "0x6000653")]
		[Address(RVA = "0x1FDB40", Offset = "0x1FDB40", VA = "0x1FDB40")]
		public MessageWithMatchmakingAdminSnapshot(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0x2046DC", Offset = "0x2046DC", VA = "0x2046DC", Slot = "40")]
		public override MatchmakingAdminSnapshot GetMatchmakingAdminSnapshot()
		{
			return null;
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0x204740", Offset = "0x204740", VA = "0x204740", Slot = "67")]
		protected override MatchmakingAdminSnapshot GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000091")]
	public class MessageWithMatchmakingEnqueueResult : Message<MatchmakingEnqueueResult>
	{
		[Token(Token = "0x6000656")]
		[Address(RVA = "0x1FDC18", Offset = "0x1FDC18", VA = "0x1FDC18")]
		public MessageWithMatchmakingEnqueueResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0x204B80", Offset = "0x204B80", VA = "0x204B80", Slot = "42")]
		public override MatchmakingEnqueueResult GetMatchmakingEnqueueResult()
		{
			return null;
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0x204BE4", Offset = "0x204BE4", VA = "0x204BE4", Slot = "67")]
		protected override MatchmakingEnqueueResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000092")]
	public class MessageWithMatchmakingEnqueueResultAndRoom : Message<MatchmakingEnqueueResultAndRoom>
	{
		[Token(Token = "0x6000659")]
		[Address(RVA = "0x1FDC84", Offset = "0x1FDC84", VA = "0x1FDC84")]
		public MessageWithMatchmakingEnqueueResultAndRoom(IntPtr c_message)
		{
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0x204E30", Offset = "0x204E30", VA = "0x204E30", Slot = "43")]
		public override MatchmakingEnqueueResultAndRoom GetMatchmakingEnqueueResultAndRoom()
		{
			return null;
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0x204E94", Offset = "0x204E94", VA = "0x204E94", Slot = "67")]
		protected override MatchmakingEnqueueResultAndRoom GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000093")]
	public class MessageWithMatchmakingStatsUnderMatchmakingStats : Message<MatchmakingStats>
	{
		[Token(Token = "0x600065C")]
		[Address(RVA = "0x1FDCF0", Offset = "0x1FDCF0", VA = "0x1FDCF0")]
		public MessageWithMatchmakingStatsUnderMatchmakingStats(IntPtr c_message)
		{
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0x205514", Offset = "0x205514", VA = "0x205514", Slot = "44")]
		public override MatchmakingStats GetMatchmakingStats()
		{
			return null;
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0x205578", Offset = "0x205578", VA = "0x205578", Slot = "67")]
		protected override MatchmakingStats GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000094")]
	public class MessageWithOrgScopedID : Message<OrgScopedID>
	{
		[Token(Token = "0x600065F")]
		[Address(RVA = "0x1FDD5C", Offset = "0x1FDD5C", VA = "0x1FDD5C")]
		public MessageWithOrgScopedID(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0x20588C", Offset = "0x20588C", VA = "0x20588C", Slot = "45")]
		public override OrgScopedID GetOrgScopedID()
		{
			return null;
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0x2058F0", Offset = "0x2058F0", VA = "0x2058F0", Slot = "67")]
		protected override OrgScopedID GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000095")]
	public class MessageWithParty : Message<Party>
	{
		[Token(Token = "0x6000662")]
		[Address(RVA = "0x205A4C", Offset = "0x205A4C", VA = "0x205A4C")]
		public MessageWithParty(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0x205AB8", Offset = "0x205AB8", VA = "0x205AB8", Slot = "46")]
		public override Party GetParty()
		{
			return null;
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0x205B1C", Offset = "0x205B1C", VA = "0x205B1C", Slot = "67")]
		protected override Party GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000096")]
	public class MessageWithPartyUnderCurrentParty : Message<Party>
	{
		[Token(Token = "0x6000665")]
		[Address(RVA = "0x1FDDC8", Offset = "0x1FDDC8", VA = "0x1FDDC8")]
		public MessageWithPartyUnderCurrentParty(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0x2060B0", Offset = "0x2060B0", VA = "0x2060B0", Slot = "46")]
		public override Party GetParty()
		{
			return null;
		}

		[Token(Token = "0x6000667")]
		[Address(RVA = "0x206114", Offset = "0x206114", VA = "0x206114", Slot = "67")]
		protected override Party GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000097")]
	public class MessageWithPartyID : Message<PartyID>
	{
		[Token(Token = "0x6000668")]
		[Address(RVA = "0x205E84", Offset = "0x205E84", VA = "0x205E84")]
		public MessageWithPartyID(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0x205EF0", Offset = "0x205EF0", VA = "0x205EF0", Slot = "47")]
		public override PartyID GetPartyID()
		{
			return null;
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0x205F54", Offset = "0x205F54", VA = "0x205F54", Slot = "67")]
		protected override PartyID GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000098")]
	public class MessageWithPartyUpdateNotification : Message<PartyUpdateNotification>
	{
		[Token(Token = "0x600066B")]
		[Address(RVA = "0x1FDE34", Offset = "0x1FDE34", VA = "0x1FDE34")]
		public MessageWithPartyUpdateNotification(IntPtr c_message)
		{
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0x2061D4", Offset = "0x2061D4", VA = "0x2061D4", Slot = "48")]
		public override PartyUpdateNotification GetPartyUpdateNotification()
		{
			return null;
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0x206238", Offset = "0x206238", VA = "0x206238", Slot = "67")]
		protected override PartyUpdateNotification GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x2000099")]
	public class MessageWithPidList : Message<PidList>
	{
		[Token(Token = "0x600066E")]
		[Address(RVA = "0x1FDEA0", Offset = "0x1FDEA0", VA = "0x1FDEA0")]
		public MessageWithPidList(IntPtr c_message)
		{
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0x20640C", Offset = "0x20640C", VA = "0x20640C", Slot = "49")]
		public override PidList GetPidList()
		{
			return null;
		}

		[Token(Token = "0x6000670")]
		[Address(RVA = "0x206470", Offset = "0x206470", VA = "0x206470", Slot = "67")]
		protected override PidList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200009A")]
	public class MessageWithProductList : Message<ProductList>
	{
		[Token(Token = "0x6000671")]
		[Address(RVA = "0x1FDF0C", Offset = "0x1FDF0C", VA = "0x1FDF0C")]
		public MessageWithProductList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000672")]
		[Address(RVA = "0x206B78", Offset = "0x206B78", VA = "0x206B78", Slot = "50")]
		public override ProductList GetProductList()
		{
			return null;
		}

		[Token(Token = "0x6000673")]
		[Address(RVA = "0x206BDC", Offset = "0x206BDC", VA = "0x206BDC", Slot = "67")]
		protected override ProductList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200009B")]
	public class MessageWithPurchase : Message<Purchase>
	{
		[Token(Token = "0x6000674")]
		[Address(RVA = "0x1FDF78", Offset = "0x1FDF78", VA = "0x1FDF78")]
		public MessageWithPurchase(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0x206F14", Offset = "0x206F14", VA = "0x206F14", Slot = "51")]
		public override Purchase GetPurchase()
		{
			return null;
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0x206F78", Offset = "0x206F78", VA = "0x206F78", Slot = "67")]
		protected override Purchase GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200009C")]
	public class MessageWithPurchaseList : Message<PurchaseList>
	{
		[Token(Token = "0x6000677")]
		[Address(RVA = "0x1FDFE4", Offset = "0x1FDFE4", VA = "0x1FDFE4")]
		public MessageWithPurchaseList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0x207134", Offset = "0x207134", VA = "0x207134", Slot = "52")]
		public override PurchaseList GetPurchaseList()
		{
			return null;
		}

		[Token(Token = "0x6000679")]
		[Address(RVA = "0x207198", Offset = "0x207198", VA = "0x207198", Slot = "67")]
		protected override PurchaseList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200009D")]
	public class MessageWithRoom : Message<Room>
	{
		[Token(Token = "0x600067A")]
		[Address(RVA = "0x1FE050", Offset = "0x1FE050", VA = "0x1FE050")]
		public MessageWithRoom(IntPtr c_message)
		{
		}

		[Token(Token = "0x600067B")]
		[Address(RVA = "0x2074D0", Offset = "0x2074D0", VA = "0x2074D0", Slot = "53")]
		public override Room GetRoom()
		{
			return null;
		}

		[Token(Token = "0x600067C")]
		[Address(RVA = "0x207534", Offset = "0x207534", VA = "0x207534", Slot = "67")]
		protected override Room GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200009E")]
	public class MessageWithRoomUnderCurrentRoom : Message<Room>
	{
		[Token(Token = "0x600067D")]
		[Address(RVA = "0x1FE0BC", Offset = "0x1FE0BC", VA = "0x1FE0BC")]
		public MessageWithRoomUnderCurrentRoom(IntPtr c_message)
		{
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0x207F3C", Offset = "0x207F3C", VA = "0x207F3C", Slot = "53")]
		public override Room GetRoom()
		{
			return null;
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0x207FA0", Offset = "0x207FA0", VA = "0x207FA0", Slot = "67")]
		protected override Room GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x200009F")]
	public class MessageWithRoomUnderViewerRoom : Message<Room>
	{
		[Token(Token = "0x6000680")]
		[Address(RVA = "0x1FE128", Offset = "0x1FE128", VA = "0x1FE128")]
		public MessageWithRoomUnderViewerRoom(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000681")]
		[Address(RVA = "0x208060", Offset = "0x208060", VA = "0x208060", Slot = "53")]
		public override Room GetRoom()
		{
			return null;
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0x2080C4", Offset = "0x2080C4", VA = "0x2080C4", Slot = "67")]
		protected override Room GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000A0")]
	public class MessageWithRoomList : Message<RoomList>
	{
		[Token(Token = "0x6000683")]
		[Address(RVA = "0x1FE194", Offset = "0x1FE194", VA = "0x1FE194")]
		public MessageWithRoomList(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000684")]
		[Address(RVA = "0x207BA0", Offset = "0x207BA0", VA = "0x207BA0", Slot = "56")]
		public override RoomList GetRoomList()
		{
			return null;
		}

		[Token(Token = "0x6000685")]
		[Address(RVA = "0x207C04", Offset = "0x207C04", VA = "0x207C04", Slot = "67")]
		protected override RoomList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000A1")]
	public class MessageWithRoomInviteNotification : Message<RoomInviteNotification>
	{
		[Token(Token = "0x6000686")]
		[Address(RVA = "0x1FE200", Offset = "0x1FE200", VA = "0x1FE200")]
		public MessageWithRoomInviteNotification(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000687")]
		[Address(RVA = "0x2075F4", Offset = "0x2075F4", VA = "0x2075F4", Slot = "54")]
		public override RoomInviteNotification GetRoomInviteNotification()
		{
			return null;
		}

		[Token(Token = "0x6000688")]
		[Address(RVA = "0x207658", Offset = "0x207658", VA = "0x207658", Slot = "67")]
		protected override RoomInviteNotification GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000A2")]
	public class MessageWithRoomInviteNotificationList : Message<RoomInviteNotificationList>
	{
		[Token(Token = "0x6000689")]
		[Address(RVA = "0x1FE26C", Offset = "0x1FE26C", VA = "0x1FE26C")]
		public MessageWithRoomInviteNotificationList(IntPtr c_message)
		{
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0x207804", Offset = "0x207804", VA = "0x207804", Slot = "55")]
		public override RoomInviteNotificationList GetRoomInviteNotificationList()
		{
			return null;
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0x207868", Offset = "0x207868", VA = "0x207868", Slot = "67")]
		protected override RoomInviteNotificationList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000A3")]
	public class MessageWithSdkAccountList : Message<SdkAccountList>
	{
		[Token(Token = "0x600068C")]
		[Address(RVA = "0x1FE2D8", Offset = "0x1FE2D8", VA = "0x1FE2D8")]
		public MessageWithSdkAccountList(IntPtr c_message)
		{
		}

		[Token(Token = "0x600068D")]
		[Address(RVA = "0x208184", Offset = "0x208184", VA = "0x208184", Slot = "57")]
		public override SdkAccountList GetSdkAccountList()
		{
			return null;
		}

		[Token(Token = "0x600068E")]
		[Address(RVA = "0x2081E8", Offset = "0x2081E8", VA = "0x2081E8", Slot = "67")]
		protected override SdkAccountList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000A4")]
	public class MessageWithShareMediaResult : Message<ShareMediaResult>
	{
		[Token(Token = "0x600068F")]
		[Address(RVA = "0x1FE344", Offset = "0x1FE344", VA = "0x1FE344")]
		public MessageWithShareMediaResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0x2084DC", Offset = "0x2084DC", VA = "0x2084DC", Slot = "58")]
		public override ShareMediaResult GetShareMediaResult()
		{
			return null;
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0x208540", Offset = "0x208540", VA = "0x208540", Slot = "67")]
		protected override ShareMediaResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000A5")]
	public class MessageWithString : Message<string>
	{
		[Token(Token = "0x6000692")]
		[Address(RVA = "0x1FE3B0", Offset = "0x1FE3B0", VA = "0x1FE3B0")]
		public MessageWithString(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0x20869C", Offset = "0x20869C", VA = "0x20869C", Slot = "59")]
		public override string GetString()
		{
			return null;
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0x208700", Offset = "0x208700", VA = "0x208700", Slot = "67")]
		protected override string GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000A6")]
	public class MessageWithSystemPermission : Message<SystemPermission>
	{
		[Token(Token = "0x6000695")]
		[Address(RVA = "0x208788", Offset = "0x208788", VA = "0x208788")]
		public MessageWithSystemPermission(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0x2087F4", Offset = "0x2087F4", VA = "0x2087F4", Slot = "60")]
		public override SystemPermission GetSystemPermission()
		{
			return null;
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0x208858", Offset = "0x208858", VA = "0x208858", Slot = "67")]
		protected override SystemPermission GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000A7")]
	public class MessageWithSystemVoipState : Message<SystemVoipState>
	{
		[Token(Token = "0x6000698")]
		[Address(RVA = "0x1FE41C", Offset = "0x1FE41C", VA = "0x1FE41C")]
		public MessageWithSystemVoipState(IntPtr c_message)
		{
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0x2089C8", Offset = "0x2089C8", VA = "0x2089C8", Slot = "61")]
		public override SystemVoipState GetSystemVoipState()
		{
			return null;
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0x208A2C", Offset = "0x208A2C", VA = "0x208A2C", Slot = "67")]
		protected override SystemVoipState GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000A8")]
	public class MessageWithUser : Message<User>
	{
		[Token(Token = "0x600069B")]
		[Address(RVA = "0x1FE488", Offset = "0x1FE488", VA = "0x1FE488")]
		public MessageWithUser(IntPtr c_message)
		{
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0x208B9C", Offset = "0x208B9C", VA = "0x208B9C", Slot = "62")]
		public override User GetUser()
		{
			return null;
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0x208C00", Offset = "0x208C00", VA = "0x208C00", Slot = "67")]
		protected override User GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000A9")]
	public class MessageWithUserAndRoomList : Message<UserAndRoomList>
	{
		[Token(Token = "0x600069E")]
		[Address(RVA = "0x1FE4F4", Offset = "0x1FE4F4", VA = "0x1FE4F4")]
		public MessageWithUserAndRoomList(IntPtr c_message)
		{
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0x208DD4", Offset = "0x208DD4", VA = "0x208DD4", Slot = "63")]
		public override UserAndRoomList GetUserAndRoomList()
		{
			return null;
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x208E38", Offset = "0x208E38", VA = "0x208E38", Slot = "67")]
		protected override UserAndRoomList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000AA")]
	public class MessageWithUserList : Message<UserList>
	{
		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x1FE560", Offset = "0x1FE560", VA = "0x1FE560")]
		public MessageWithUserList(IntPtr c_message)
		{
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x209170", Offset = "0x209170", VA = "0x209170", Slot = "64")]
		public override UserList GetUserList()
		{
			return null;
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x2091D4", Offset = "0x2091D4", VA = "0x2091D4", Slot = "67")]
		protected override UserList GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000AB")]
	public class MessageWithUserProof : Message<UserProof>
	{
		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x1FE5CC", Offset = "0x1FE5CC", VA = "0x1FE5CC")]
		public MessageWithUserProof(IntPtr c_message)
		{
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x20950C", Offset = "0x20950C", VA = "0x20950C", Slot = "65")]
		public override UserProof GetUserProof()
		{
			return null;
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x209570", Offset = "0x209570", VA = "0x209570", Slot = "67")]
		protected override UserProof GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000AC")]
	public class MessageWithUserReportID : Message<UserReportID>
	{
		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x2096CC", Offset = "0x2096CC", VA = "0x2096CC")]
		public MessageWithUserReportID(IntPtr c_message)
		{
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x209738", Offset = "0x209738", VA = "0x209738", Slot = "66")]
		public override UserReportID GetUserReportID()
		{
			return null;
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x20979C", Offset = "0x20979C", VA = "0x20979C", Slot = "67")]
		protected override UserReportID GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000AD")]
	public class MessageWithNetworkingPeer : Message<NetworkingPeer>
	{
		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x1FE638", Offset = "0x1FE638", VA = "0x1FE638")]
		public MessageWithNetworkingPeer(IntPtr c_message)
		{
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x205710", Offset = "0x205710", VA = "0x205710", Slot = "6")]
		public override NetworkingPeer GetNetworkingPeer()
		{
			return null;
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x205774", Offset = "0x205774", VA = "0x205774", Slot = "67")]
		protected override NetworkingPeer GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000AE")]
	public class MessageWithPingResult : Message<PingResult>
	{
		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x1FE6A4", Offset = "0x1FE6A4", VA = "0x1FE6A4")]
		public MessageWithPingResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x206764", Offset = "0x206764", VA = "0x206764", Slot = "5")]
		public override PingResult GetPingResult()
		{
			return null;
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x2067C8", Offset = "0x2067C8", VA = "0x2067C8", Slot = "67")]
		protected override PingResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000AF")]
	public class MessageWithLeaderboardDidUpdate : Message<bool>
	{
		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x1FDA68", Offset = "0x1FDA68", VA = "0x1FDA68")]
		public MessageWithLeaderboardDidUpdate(IntPtr c_message)
		{
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x203588", Offset = "0x203588", VA = "0x203588", Slot = "33")]
		public override bool GetLeaderboardDidUpdate()
		{
			return default(bool);
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x2035EC", Offset = "0x2035EC", VA = "0x2035EC", Slot = "67")]
		protected override bool GetDataFromMessage(IntPtr c_message)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000B0")]
	public class MessageWithMatchmakingNotification : Message<Room>
	{
		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x1FE710", Offset = "0x1FE710", VA = "0x1FE710")]
		public MessageWithMatchmakingNotification(IntPtr c_message)
		{
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x20504C", Offset = "0x20504C", VA = "0x20504C", Slot = "53")]
		public override Room GetRoom()
		{
			return null;
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x2050B0", Offset = "0x2050B0", VA = "0x2050B0", Slot = "67")]
		protected override Room GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000B1")]
	public class MessageWithMatchmakingBrowseResult : Message<MatchmakingBrowseResult>
	{
		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x1FDBAC", Offset = "0x1FDBAC", VA = "0x1FDBAC")]
		public MessageWithMatchmakingBrowseResult(IntPtr c_message)
		{
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x2048D8", Offset = "0x2048D8", VA = "0x2048D8", Slot = "42")]
		public override MatchmakingEnqueueResult GetMatchmakingEnqueueResult()
		{
			return null;
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x204950", Offset = "0x204950", VA = "0x204950", Slot = "56")]
		public override RoomList GetRoomList()
		{
			return null;
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x2049C8", Offset = "0x2049C8", VA = "0x2049C8", Slot = "67")]
		protected override MatchmakingBrowseResult GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000B2")]
	public class MessageWithHttpTransferUpdate : Message<HttpTransferUpdate>
	{
		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x1FE77C", Offset = "0x1FE77C", VA = "0x1FE77C")]
		public MessageWithHttpTransferUpdate(IntPtr c_message)
		{
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x202628", Offset = "0x202628", VA = "0x202628", Slot = "7")]
		public override HttpTransferUpdate GetHttpTransferUpdate()
		{
			return null;
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x20268C", Offset = "0x20268C", VA = "0x20268C", Slot = "67")]
		protected override HttpTransferUpdate GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
	[Token(Token = "0x20000B3")]
	public class MessageWithPlatformInitialize : Message<PlatformInitialize>
	{
		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x1FE7E8", Offset = "0x1FE7E8", VA = "0x1FE7E8")]
		public MessageWithPlatformInitialize(IntPtr c_message)
		{
		}

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x2069B8", Offset = "0x2069B8", VA = "0x2069B8", Slot = "8")]
		public override PlatformInitialize GetPlatformInitialize()
		{
			return null;
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x206A1C", Offset = "0x206A1C", VA = "0x206A1C", Slot = "67")]
		protected override PlatformInitialize GetDataFromMessage(IntPtr c_message)
		{
			return null;
		}
	}
}
namespace Oculus.Platform.Models
{
	[Token(Token = "0x20000B4")]
	public class AbuseReportRecording
	{
		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string RecordingUuid;

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x1FF980", Offset = "0x1FF980", VA = "0x1FF980")]
		public AbuseReportRecording(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000B5")]
	public class AchievementDefinition
	{
		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly AchievementType Type;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string Name;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly uint BitfieldLength;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong Target;

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x20990C", Offset = "0x20990C", VA = "0x20990C")]
		public AchievementDefinition(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000B6")]
	public class AchievementDefinitionList : DeserializableList<AchievementDefinition>
	{
		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x1FFB40", Offset = "0x1FFB40", VA = "0x1FFB40")]
		public AchievementDefinitionList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20000B7")]
	public class AchievementProgress
	{
		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string Bitfield;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong Count;

		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly bool IsUnlocked;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly string Name;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly DateTime UnlockTime;

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x2099E4", Offset = "0x2099E4", VA = "0x2099E4")]
		public AchievementProgress(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000B8")]
	public class AchievementProgressList : DeserializableList<AchievementProgress>
	{
		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x1FFEDC", Offset = "0x1FFEDC", VA = "0x1FFEDC")]
		public AchievementProgressList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20000B9")]
	public class AchievementUpdate
	{
		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool JustUnlocked;

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string Name;

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x200278", Offset = "0x200278", VA = "0x200278")]
		public AchievementUpdate(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000BA")]
	public class ApplicationVersion
	{
		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int CurrentCode;

		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string CurrentName;

		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int LatestCode;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly string LatestName;

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x20044C", Offset = "0x20044C", VA = "0x20044C")]
		public ApplicationVersion(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000BB")]
	public class AssetDetails
	{
		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong AssetId;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string AssetType;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly string DownloadStatus;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Filepath;

		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly string IapStatus;

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly LanguagePackInfo LanguageOptional;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xC2CAFC", Offset = "0xC2CAFC")]
		public readonly LanguagePackInfo Language;

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x200648", Offset = "0x200648", VA = "0x200648")]
		public AssetDetails(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000BC")]
	public class AssetDetailsList : DeserializableList<AssetDetails>
	{
		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x2008BC", Offset = "0x2008BC", VA = "0x2008BC")]
		public AssetDetailsList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20000BD")]
	public class AssetFileDeleteResult
	{
		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong AssetFileId;

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong AssetId;

		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Filepath;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly bool Success;

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x200C14", Offset = "0x200C14", VA = "0x200C14")]
		public AssetFileDeleteResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000BE")]
	public class AssetFileDownloadCancelResult
	{
		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong AssetFileId;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong AssetId;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Filepath;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly bool Success;

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x200E10", Offset = "0x200E10", VA = "0x200E10")]
		public AssetFileDownloadCancelResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000BF")]
	public class AssetFileDownloadResult
	{
		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong AssetId;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Filepath;

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x20100C", Offset = "0x20100C", VA = "0x20100C")]
		public AssetFileDownloadResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000C0")]
	public class AssetFileDownloadUpdate
	{
		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong AssetFileId;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong AssetId;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly uint BytesTotal;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly int BytesTransferred;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly bool Completed;

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x2011E0", Offset = "0x2011E0", VA = "0x2011E0")]
		public AssetFileDownloadUpdate(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000C1")]
	public class CalApplicationFinalized
	{
		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int CountdownMS;

		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string LaunchDetails;

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x2013F0", Offset = "0x2013F0", VA = "0x2013F0")]
		public CalApplicationFinalized(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000C2")]
	public class CalApplicationProposed
	{
		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ID;

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x2015D8", Offset = "0x2015D8", VA = "0x2015D8")]
		public CalApplicationProposed(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000C3")]
	public class CalApplicationSuggestion
	{
		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ID;

		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string SocialContext;

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x209BA8", Offset = "0x209BA8", VA = "0x209BA8")]
		public CalApplicationSuggestion(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000C4")]
	public class CalApplicationSuggestionList : DeserializableList<CalApplicationSuggestion>
	{
		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x201804", Offset = "0x201804", VA = "0x201804")]
		public CalApplicationSuggestionList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20000C5")]
	public class CloudStorageConflictMetadata
	{
		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly CloudStorageMetadata Local;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly CloudStorageMetadata Remote;

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x201B5C", Offset = "0x201B5C", VA = "0x201B5C")]
		public CloudStorageConflictMetadata(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000C6")]
	public class CloudStorageData
	{
		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string Bucket;

		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly byte[] Data;

		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly uint DataSize;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly string Key;

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x201D6C", Offset = "0x201D6C", VA = "0x201D6C")]
		public CloudStorageData(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000C7")]
	public class CloudStorageMetadata
	{
		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string Bucket;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly long Counter;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly uint DataSize;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly string ExtraData;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string Key;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ulong SaveTime;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly CloudStorageDataStatus Status;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public readonly string VersionHandle;

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x202304", Offset = "0x202304", VA = "0x202304")]
		public CloudStorageMetadata(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000C8")]
	public class CloudStorageMetadataList : DeserializableList<CloudStorageMetadata>
	{
		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x201F68", Offset = "0x201F68", VA = "0x201F68")]
		public CloudStorageMetadataList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20000C9")]
	public class CloudStorageUpdateResponse
	{
		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string Bucket;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string Key;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly CloudStorageUpdateStatus Status;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly string VersionHandle;

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x202550", Offset = "0x202550", VA = "0x202550")]
		public CloudStorageUpdateResponse(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000CA")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xC2CB30", Offset = "0xC2CB30")]
	public class DeserializableList<T> : IList<T>, IEnumerable, ICollection<T>, IEnumerable<T>
	{
		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected List<T> _Data;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected string _NextUrl;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected string _PreviousUrl;

		[Token(Token = "0x17000050")]
		private bool System.Collections.Generic.ICollection<T>.IsReadOnly
		{
			[Token(Token = "0x60006D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000051")]
		public int Count
		{
			[Token(Token = "0x60006D7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000052")]
		public T Item
		{
			[Token(Token = "0x60006DA")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x60006DB")]
			set
			{
			}
		}

		[Token(Token = "0x17000053")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xC2CB64", Offset = "0xC2CB64")]
		public List<T> Data
		{
			[Token(Token = "0x60006E6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000054")]
		public bool HasNextPage
		{
			[Token(Token = "0x60006E7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000055")]
		public bool HasPreviousPage
		{
			[Token(Token = "0x60006E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000056")]
		public string NextUrl
		{
			[Token(Token = "0x60006E9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000057")]
		public string PreviousUrl
		{
			[Token(Token = "0x60006EA")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006D6")]
		public DeserializableList()
		{
		}

		[Token(Token = "0x60006D9")]
		public int IndexOf(T obj)
		{
			return default(int);
		}

		[Token(Token = "0x60006DC")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x60006DD")]
		public void Clear()
		{
		}

		[Token(Token = "0x60006DE")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x60006DF")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x60006E0")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60006E1")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x60006E2")]
		public bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x60006E3")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x60006E4")]
		private IEnumerator GetEnumerator1()
		{
			return null;
		}

		[Token(Token = "0x60006E5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x20000CB")]
	public class Error
	{
		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int Code;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly int HttpCode;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Message;

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x1FBB20", Offset = "0x1FBB20", VA = "0x1FBB20")]
		public Error(int code, string message, int httpCode)
		{
		}
	}
	[Token(Token = "0x20000CC")]
	public class HttpTransferUpdate
	{
		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ID;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly byte[] Payload;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly bool IsCompleted;

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x20274C", Offset = "0x20274C", VA = "0x20274C")]
		public HttpTransferUpdate(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000CD")]
	public class InstalledApplication
	{
		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string ApplicationId;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string PackageName;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Status;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly int VersionCode;

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string VersionName;

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x209C58", Offset = "0x209C58", VA = "0x209C58")]
		public InstalledApplication(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000CE")]
	public class InstalledApplicationList : DeserializableList<InstalledApplication>
	{
		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x202AC0", Offset = "0x202AC0", VA = "0x202AC0")]
		public InstalledApplicationList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20000CF")]
	public class LanguagePackInfo
	{
		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string EnglishName;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string NativeName;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Tag;

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x209AE4", Offset = "0x209AE4", VA = "0x209AE4")]
		public LanguagePackInfo(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000D0")]
	public class LaunchBlockFlowResult
	{
		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool DidBlock;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public readonly bool DidCancel;

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x202E84", Offset = "0x202E84", VA = "0x202E84")]
		public LaunchBlockFlowResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000D1")]
	public class LaunchDetails
	{
		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string DeeplinkMessage;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string LaunchSource;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly LaunchType LaunchType;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong RoomID;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly UserList UsersOptional;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xC2CB9C", Offset = "0xC2CB9C")]
		public readonly UserList Users;

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x209D44", Offset = "0x209D44", VA = "0x209D44")]
		public LaunchDetails(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000D2")]
	public class LaunchFriendRequestFlowResult
	{
		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool DidCancel;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public readonly bool DidSendRequest;

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x203058", Offset = "0x203058", VA = "0x203058")]
		public LaunchFriendRequestFlowResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000D3")]
	public class LaunchReportFlowResult
	{
		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool DidCancel;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong UserReportId;

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x203298", Offset = "0x203298", VA = "0x203298")]
		public LaunchReportFlowResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000D4")]
	public class LaunchUnblockFlowResult
	{
		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool DidCancel;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public readonly bool DidUnblock;

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x2034D8", Offset = "0x2034D8", VA = "0x2034D8")]
		public LaunchUnblockFlowResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000D5")]
	public class LeaderboardEntry
	{
		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly byte[] ExtraData;

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly int Rank;

		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly long Score;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly DateTime Timestamp;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly User User;

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x209E80", Offset = "0x209E80", VA = "0x209E80")]
		public LeaderboardEntry(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000D6")]
	public class LeaderboardEntryList : DeserializableList<LeaderboardEntry>
	{
		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong TotalCount;

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x2037B8", Offset = "0x2037B8", VA = "0x2037B8")]
		public LeaderboardEntryList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20000D7")]
	public class LinkedAccount
	{
		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string AccessToken;

		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly ServiceProvider ServiceProvider;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string UserId;

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x209FA4", Offset = "0x209FA4", VA = "0x209FA4")]
		public LinkedAccount(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000D8")]
	public class LinkedAccountList : DeserializableList<LinkedAccount>
	{
		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x203BEC", Offset = "0x203BEC", VA = "0x203BEC")]
		public LinkedAccountList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20000D9")]
	public class LivestreamingApplicationStatus
	{
		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool StreamingEnabled;

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x203FB0", Offset = "0x203FB0", VA = "0x203FB0")]
		public LivestreamingApplicationStatus(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000DA")]
	public class LivestreamingStartResult
	{
		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly LivestreamingStartStatus StreamingResult;

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x2041DC", Offset = "0x2041DC", VA = "0x2041DC")]
		public LivestreamingStartResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000DB")]
	public class LivestreamingStatus
	{
		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool CommentsVisible;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public readonly bool IsPaused;

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public readonly bool LivestreamingEnabled;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly int LivestreamingType;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly bool MicEnabled;

		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x20439C", Offset = "0x20439C", VA = "0x20439C")]
		public LivestreamingStatus(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000DC")]
	public class LivestreamingVideoStats
	{
		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int CommentCount;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly int ReactionCount;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string TotalViews;

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x204618", Offset = "0x204618", VA = "0x204618")]
		public LivestreamingVideoStats(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000DD")]
	public class MatchmakingAdminSnapshot
	{
		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly MatchmakingAdminSnapshotCandidateList Candidates;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly double MyCurrentThreshold;

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x204800", Offset = "0x204800", VA = "0x204800")]
		public MatchmakingAdminSnapshot(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000DE")]
	public class MatchmakingAdminSnapshotCandidate
	{
		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool CanMatch;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly double MyTotalScore;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly double TheirCurrentThreshold;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly double TheirTotalScore;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string TraceId;

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x20A29C", Offset = "0x20A29C", VA = "0x20A29C")]
		public MatchmakingAdminSnapshotCandidate(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000DF")]
	public class MatchmakingAdminSnapshotCandidateList : DeserializableList<MatchmakingAdminSnapshotCandidate>
	{
		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x20A068", Offset = "0x20A068", VA = "0x20A068")]
		public MatchmakingAdminSnapshotCandidateList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20000E0")]
	public class MatchmakingBrowseResult
	{
		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly MatchmakingEnqueueResult EnqueueResult;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly RoomList Rooms;

		[Token(Token = "0x6000700")]
		[Address(RVA = "0x204A88", Offset = "0x204A88", VA = "0x204A88")]
		public MatchmakingBrowseResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000E1")]
	public class MatchmakingEnqueuedUser
	{
		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Dictionary<string, string> CustomData;

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly User UserOptional;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xC2CBD0", Offset = "0xC2CBD0")]
		public readonly User User;

		[Token(Token = "0x6000701")]
		[Address(RVA = "0x20A394", Offset = "0x20A394", VA = "0x20A394")]
		public MatchmakingEnqueuedUser(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000E2")]
	public class MatchmakingEnqueuedUserList : DeserializableList<MatchmakingEnqueuedUser>
	{
		[Token(Token = "0x6000702")]
		[Address(RVA = "0x20A4A4", Offset = "0x20A4A4", VA = "0x20A4A4")]
		public MatchmakingEnqueuedUserList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20000E3")]
	public class MatchmakingEnqueueResult
	{
		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly MatchmakingAdminSnapshot AdminSnapshotOptional;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xC2CC04", Offset = "0xC2CC04")]
		public readonly MatchmakingAdminSnapshot AdminSnapshot;

		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly uint AverageWait;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly uint MatchesInLastHourCount;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly uint MaxExpectedWait;

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly string Pool;

		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly uint RecentMatchPercentage;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly string RequestHash;

		[Token(Token = "0x6000703")]
		[Address(RVA = "0x204CA4", Offset = "0x204CA4", VA = "0x204CA4")]
		public MatchmakingEnqueueResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000E4")]
	public class MatchmakingEnqueueResultAndRoom
	{
		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly MatchmakingEnqueueResult MatchmakingEnqueueResult;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly Room Room;

		[Token(Token = "0x6000704")]
		[Address(RVA = "0x204F54", Offset = "0x204F54", VA = "0x204F54")]
		public MatchmakingEnqueueResultAndRoom(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000E5")]
	public class MatchmakingStats
	{
		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly uint DrawCount;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly uint LossCount;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly uint SkillLevel;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly uint WinCount;

		[Token(Token = "0x6000705")]
		[Address(RVA = "0x205638", Offset = "0x205638", VA = "0x205638")]
		public MatchmakingStats(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000E6")]
	public class NetworkingPeer
	{
		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2CC38", Offset = "0xC2CC38")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xC2CC38", Offset = "0xC2CC38")]
		private ulong <ID>k__BackingField;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2CC6C", Offset = "0xC2CC6C")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xC2CC6C", Offset = "0xC2CC6C")]
		private PeerConnectionState <State>k__BackingField;

		[Token(Token = "0x17000058")]
		public ulong ID
		{
			[Token(Token = "0x6000707")]
			[Address(RVA = "0x20A6F0", Offset = "0x20A6F0", VA = "0x20A6F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2CCA0", Offset = "0xC2CCA0")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x6000708")]
			[Address(RVA = "0x20A6D8", Offset = "0x20A6D8", VA = "0x20A6D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2CCB0", Offset = "0xC2CCB0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000059")]
		public PeerConnectionState State
		{
			[Token(Token = "0x6000709")]
			[Address(RVA = "0x20A6F8", Offset = "0x20A6F8", VA = "0x20A6F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2CCC0", Offset = "0xC2CCC0")]
			get
			{
				return default(PeerConnectionState);
			}
			[Token(Token = "0x600070A")]
			[Address(RVA = "0x20A6E8", Offset = "0x20A6E8", VA = "0x20A6E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2CCD0", Offset = "0xC2CCD0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x20585C", Offset = "0x20585C", VA = "0x20585C")]
		public NetworkingPeer(ulong id, PeerConnectionState state)
		{
		}
	}
	[Token(Token = "0x20000E7")]
	public class OrgScopedID
	{
		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ID;

		[Token(Token = "0x600070B")]
		[Address(RVA = "0x2059B0", Offset = "0x2059B0", VA = "0x2059B0")]
		public OrgScopedID(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000E8")]
	public class Party
	{
		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ID;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly UserList InvitedUsersOptional;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xC2CCE0", Offset = "0xC2CCE0")]
		public readonly UserList InvitedUsers;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly User LeaderOptional;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xC2CD14", Offset = "0xC2CD14")]
		public readonly User Leader;

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Room RoomOptional;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xC2CD48", Offset = "0xC2CD48")]
		public readonly Room Room;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly UserList UsersOptional;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xC2CD7C", Offset = "0xC2CD7C")]
		public readonly UserList Users;

		[Token(Token = "0x600070C")]
		[Address(RVA = "0x205BDC", Offset = "0x205BDC", VA = "0x205BDC")]
		public Party(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000E9")]
	public class PartyID
	{
		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ID;

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x206014", Offset = "0x206014", VA = "0x206014")]
		public PartyID(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000EA")]
	public class PartyUpdateNotification
	{
		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly PartyUpdateAction Action;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong PartyId;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong SenderId;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string UpdateTimestamp;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly string UserAlias;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ulong UserId;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string UserName;

		[Token(Token = "0x600070E")]
		[Address(RVA = "0x2062F8", Offset = "0x2062F8", VA = "0x2062F8")]
		public PartyUpdateNotification(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000EB")]
	public class Pid
	{
		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string Id;

		[Token(Token = "0x600070F")]
		[Address(RVA = "0x20A700", Offset = "0x20A700", VA = "0x20A700")]
		public Pid(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000EC")]
	public class PidList : DeserializableList<Pid>
	{
		[Token(Token = "0x6000710")]
		[Address(RVA = "0x206530", Offset = "0x206530", VA = "0x206530")]
		public PidList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20000ED")]
	public class PingResult
	{
		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2CDB0", Offset = "0xC2CDB0")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xC2CDB0", Offset = "0xC2CDB0")]
		private ulong <ID>k__BackingField;

		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ulong? pingTimeUsec;

		[Token(Token = "0x1700005A")]
		public ulong ID
		{
			[Token(Token = "0x6000712")]
			[Address(RVA = "0x20A7AC", Offset = "0x20A7AC", VA = "0x20A7AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2CDE4", Offset = "0xC2CDE4")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x6000713")]
			[Address(RVA = "0x20A79C", Offset = "0x20A79C", VA = "0x20A79C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2CDF4", Offset = "0xC2CDF4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700005B")]
		public ulong PingTimeUsec
		{
			[Token(Token = "0x6000714")]
			[Address(RVA = "0x20A7B4", Offset = "0x20A7B4", VA = "0x20A7B4")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x1700005C")]
		public bool IsTimeout
		{
			[Token(Token = "0x6000715")]
			[Address(RVA = "0x20A848", Offset = "0x20A848", VA = "0x20A848")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x206970", Offset = "0x206970", VA = "0x206970")]
		public PingResult(ulong id, ulong? pingTimeUsec)
		{
		}
	}
	[Token(Token = "0x20000EE")]
	public class PlatformInitialize
	{
		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly PlatformInitializeResult Result;

		[Token(Token = "0x6000716")]
		[Address(RVA = "0x206ADC", Offset = "0x206ADC", VA = "0x206ADC")]
		public PlatformInitialize(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000EF")]
	public class Product
	{
		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string Description;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string FormattedPrice;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Name;

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly string Sku;

		[Token(Token = "0x6000717")]
		[Address(RVA = "0x20A8B0", Offset = "0x20A8B0", VA = "0x20A8B0")]
		public Product(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000F0")]
	public class ProductList : DeserializableList<Product>
	{
		[Token(Token = "0x6000718")]
		[Address(RVA = "0x206C9C", Offset = "0x206C9C", VA = "0x206C9C")]
		public ProductList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20000F1")]
	public class Purchase
	{
		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly DateTime ExpirationTime;

		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly DateTime GrantTime;

		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ulong ID;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string Sku;

		[Token(Token = "0x6000719")]
		[Address(RVA = "0x207038", Offset = "0x207038", VA = "0x207038")]
		public Purchase(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000F2")]
	public class PurchaseList : DeserializableList<Purchase>
	{
		[Token(Token = "0x600071A")]
		[Address(RVA = "0x207258", Offset = "0x207258", VA = "0x207258")]
		public PurchaseList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20000F3")]
	public class Room
	{
		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ApplicationID;

		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Dictionary<string, string> DataStore;

		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly string Description;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong ID;

		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly UserList InvitedUsersOptional;

		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xC2CE04", Offset = "0xC2CE04")]
		public readonly UserList InvitedUsers;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly bool IsMembershipLocked;

		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public readonly RoomJoinPolicy JoinPolicy;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly RoomJoinability Joinability;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public readonly MatchmakingEnqueuedUserList MatchedUsersOptional;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xC2CE38", Offset = "0xC2CE38")]
		public readonly MatchmakingEnqueuedUserList MatchedUsers;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public readonly uint MaxUsers;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly string Name;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public readonly User OwnerOptional;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xC2CE6C", Offset = "0xC2CE6C")]
		public readonly User Owner;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public readonly RoomType Type;

		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly UserList UsersOptional;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xC2CEA0", Offset = "0xC2CEA0")]
		public readonly UserList Users;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public readonly uint Version;

		[Token(Token = "0x600071B")]
		[Address(RVA = "0x205170", Offset = "0x205170", VA = "0x205170")]
		public Room(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000F4")]
	public class RoomList : DeserializableList<Room>
	{
		[Token(Token = "0x600071C")]
		[Address(RVA = "0x207CC4", Offset = "0x207CC4", VA = "0x207CC4")]
		public RoomList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20000F5")]
	public class RoomInviteNotification
	{
		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ID;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong RoomID;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly ulong SenderID;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly DateTime SentTime;

		[Token(Token = "0x600071D")]
		[Address(RVA = "0x207718", Offset = "0x207718", VA = "0x207718")]
		public RoomInviteNotification(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000F6")]
	public class RoomInviteNotificationList : DeserializableList<RoomInviteNotification>
	{
		[Token(Token = "0x600071E")]
		[Address(RVA = "0x207928", Offset = "0x207928", VA = "0x207928")]
		public RoomInviteNotificationList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20000F7")]
	public class SdkAccount
	{
		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly SdkAccountType AccountType;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong UserId;

		[Token(Token = "0x600071F")]
		[Address(RVA = "0x20A988", Offset = "0x20A988", VA = "0x20A988")]
		public SdkAccount(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000F8")]
	public class SdkAccountList : DeserializableList<SdkAccount>
	{
		[Token(Token = "0x6000720")]
		[Address(RVA = "0x2082A8", Offset = "0x2082A8", VA = "0x2082A8")]
		public SdkAccountList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20000F9")]
	public class ShareMediaResult
	{
		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ShareMediaStatus Status;

		[Token(Token = "0x6000721")]
		[Address(RVA = "0x208600", Offset = "0x208600", VA = "0x208600")]
		public ShareMediaResult(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000FA")]
	public class SystemPermission
	{
		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool HasPermission;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly PermissionGrantStatus PermissionGrantStatus;

		[Token(Token = "0x6000722")]
		[Address(RVA = "0x208918", Offset = "0x208918", VA = "0x208918")]
		public SystemPermission(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000FB")]
	public class SystemVoipState
	{
		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly VoipMuteState MicrophoneMuted;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly SystemVoipStatus Status;

		[Token(Token = "0x6000723")]
		[Address(RVA = "0x208AEC", Offset = "0x208AEC", VA = "0x208AEC")]
		public SystemVoipState(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000FC")]
	public class User
	{
		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ulong ID;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string ImageURL;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly string InviteToken;

		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string OculusID;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly string Presence;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly UserPresenceStatus PresenceStatus;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly string SmallImageUrl;

		[Token(Token = "0x6000724")]
		[Address(RVA = "0x208CC0", Offset = "0x208CC0", VA = "0x208CC0")]
		public User(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000FD")]
	public class UserList : DeserializableList<User>
	{
		[Token(Token = "0x6000725")]
		[Address(RVA = "0x209294", Offset = "0x209294", VA = "0x209294")]
		public UserList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x20000FE")]
	public class UserAndRoom
	{
		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Room RoomOptional;

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xC2CED4", Offset = "0xC2CED4")]
		public readonly Room Room;

		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly User User;

		[Token(Token = "0x6000726")]
		[Address(RVA = "0x20AA38", Offset = "0x20AA38", VA = "0x20AA38")]
		public UserAndRoom(IntPtr o)
		{
		}
	}
	[Token(Token = "0x20000FF")]
	public class UserAndRoomList : DeserializableList<UserAndRoom>
	{
		[Token(Token = "0x6000727")]
		[Address(RVA = "0x208EF8", Offset = "0x208EF8", VA = "0x208EF8")]
		public UserAndRoomList(IntPtr a)
		{
		}
	}
	[Token(Token = "0x2000100")]
	public class UserProof
	{
		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string Value;

		[Token(Token = "0x6000728")]
		[Address(RVA = "0x209630", Offset = "0x209630", VA = "0x209630")]
		public UserProof(IntPtr o)
		{
		}
	}
	[Token(Token = "0x2000101")]
	public class UserReportID
	{
		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly bool DidCancel;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ulong ID;

		[Token(Token = "0x6000729")]
		[Address(RVA = "0x20985C", Offset = "0x20985C", VA = "0x20985C")]
		public UserReportID(IntPtr o)
		{
		}
	}
}
namespace Oculus.Platform
{
	[Token(Token = "0x2000102")]
	public sealed class Packet : IDisposable
	{
		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly ulong size;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IntPtr packetHandle;

		[Token(Token = "0x1700005D")]
		public ulong SenderID
		{
			[Token(Token = "0x600072C")]
			[Address(RVA = "0x20BD54", Offset = "0x20BD54", VA = "0x20BD54")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x1700005E")]
		public ulong Size
		{
			[Token(Token = "0x600072D")]
			[Address(RVA = "0x20BDE0", Offset = "0x20BDE0", VA = "0x20BDE0")]
			get
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x1700005F")]
		public SendPolicy Policy
		{
			[Token(Token = "0x600072E")]
			[Address(RVA = "0x20BDE8", Offset = "0x20BDE8", VA = "0x20BDE8")]
			get
			{
				return default(SendPolicy);
			}
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0x20AC88", Offset = "0x20AC88", VA = "0x20AC88")]
		public Packet(IntPtr packetHandle)
		{
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0x20BB68", Offset = "0x20BB68", VA = "0x20BB68")]
		public ulong ReadBytes(byte[] destination)
		{
			return default(ulong);
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0x20BE74", Offset = "0x20BE74", VA = "0x20BE74", Slot = "1")]
		~Packet()
		{
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0x20BED0", Offset = "0x20BED0", VA = "0x20BED0", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x2000103")]
	public enum PartyUpdateAction
	{
		[Token(Token = "0x4000366")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2CF08", Offset = "0xC2CF08")]
		Unknown,
		[Token(Token = "0x4000367")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2CF3C", Offset = "0xC2CF3C")]
		Join,
		[Token(Token = "0x4000368")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2CF70", Offset = "0xC2CF70")]
		Leave,
		[Token(Token = "0x4000369")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2CFA4", Offset = "0xC2CFA4")]
		Invite,
		[Token(Token = "0x400036A")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2CFD8", Offset = "0xC2CFD8")]
		Uninvite
	}
	[Token(Token = "0x2000104")]
	public enum PeerConnectionState
	{
		[Token(Token = "0x400036C")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D00C", Offset = "0xC2D00C")]
		Unknown,
		[Token(Token = "0x400036D")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D040", Offset = "0xC2D040")]
		Connected,
		[Token(Token = "0x400036E")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D074", Offset = "0xC2D074")]
		Timeout,
		[Token(Token = "0x400036F")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D0A8", Offset = "0xC2D0A8")]
		Closed
	}
	[Token(Token = "0x2000105")]
	public enum PermissionGrantStatus
	{
		[Token(Token = "0x4000371")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D0DC", Offset = "0xC2D0DC")]
		Unknown,
		[Token(Token = "0x4000372")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D110", Offset = "0xC2D110")]
		Granted,
		[Token(Token = "0x4000373")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D144", Offset = "0xC2D144")]
		Denied,
		[Token(Token = "0x4000374")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D178", Offset = "0xC2D178")]
		Blocked
	}
	[Token(Token = "0x2000106")]
	public enum PermissionType
	{
		[Token(Token = "0x4000376")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D1AC", Offset = "0xC2D1AC")]
		Unknown,
		[Token(Token = "0x4000377")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D1E0", Offset = "0xC2D1E0")]
		Microphone,
		[Token(Token = "0x4000378")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D214", Offset = "0xC2D214")]
		WriteExternalStorage
	}
	[Token(Token = "0x2000107")]
	public sealed class Core
	{
		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool IsPlatformInitialized;

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static bool LogMessages;

		[Token(Token = "0x6000731")]
		[Address(RVA = "0x1F703C", Offset = "0x1F703C", VA = "0x1F703C")]
		public Core()
		{
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0x1F64D4", Offset = "0x1F64D4", VA = "0x1F64D4")]
		public static bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0x1F7044", Offset = "0x1F7044", VA = "0x1F7044")]
		internal static void ForceInitialized()
		{
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0x1F70D4", Offset = "0x1F70D4", VA = "0x1F70D4")]
		private static string getAppID([Optional] string appId)
		{
			return null;
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0x1F73DC", Offset = "0x1F73DC", VA = "0x1F73DC")]
		public static Request<PlatformInitialize> AsyncInitialize([Optional] string appId)
		{
			return null;
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0x1F7784", Offset = "0x1F7784", VA = "0x1F7784")]
		public static void Initialize([Optional] string appId)
		{
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0x1F7388", Offset = "0x1F7388", VA = "0x1F7388")]
		private static string GetAppIDFromConfig()
		{
			return null;
		}
	}
	[Token(Token = "0x2000108")]
	public static class ApplicationLifecycle
	{
		[Token(Token = "0x6000739")]
		[Address(RVA = "0xDC785C", Offset = "0xDC785C", VA = "0xDC785C")]
		public static LaunchDetails GetLaunchDetails()
		{
			return null;
		}
	}
	[Token(Token = "0x2000109")]
	public static class Rooms
	{
		[Token(Token = "0x600073A")]
		[Address(RVA = "0x20CD8C", Offset = "0x20CD8C", VA = "0x20CD8C")]
		public static Request<Room> UpdateDataStore(ulong roomID, Dictionary<string, string> data)
		{
			return null;
		}

		[Token(Token = "0x600073B")]
		[Address(RVA = "0x20D08C", Offset = "0x20D08C", VA = "0x20D08C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xC2D248", Offset = "0xC2D248")]
		public static void SetRoomInviteNotificationCallback(Message<string>.Callback callback)
		{
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0x20D12C", Offset = "0x20D12C", VA = "0x20D12C")]
		public static Request<Room> CreateAndJoinPrivate(RoomJoinPolicy joinPolicy, uint maxUsers, bool subscribeToUpdates = false)
		{
			return null;
		}

		[Token(Token = "0x600073D")]
		[Address(RVA = "0x20D254", Offset = "0x20D254", VA = "0x20D254")]
		public static Request<Room> CreateAndJoinPrivate2(RoomJoinPolicy joinPolicy, uint maxUsers, RoomOptions roomOptions)
		{
			return null;
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0x20D3C4", Offset = "0x20D3C4", VA = "0x20D3C4")]
		public static Request<Room> Get(ulong roomID)
		{
			return null;
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0x20D4E4", Offset = "0x20D4E4", VA = "0x20D4E4")]
		public static Request<Room> GetCurrent()
		{
			return null;
		}

		[Token(Token = "0x6000740")]
		[Address(RVA = "0x20D5F0", Offset = "0x20D5F0", VA = "0x20D5F0")]
		public static Request<Room> GetCurrentForUser(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x6000741")]
		[Address(RVA = "0x20D710", Offset = "0x20D710", VA = "0x20D710")]
		public static Request<UserList> GetInvitableUsers()
		{
			return null;
		}

		[Token(Token = "0x6000742")]
		[Address(RVA = "0x20D81C", Offset = "0x20D81C", VA = "0x20D81C")]
		public static Request<UserList> GetInvitableUsers2([Optional] RoomOptions roomOptions)
		{
			return null;
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0x20D978", Offset = "0x20D978", VA = "0x20D978")]
		public static Request<RoomList> GetModeratedRooms()
		{
			return null;
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0x20DA84", Offset = "0x20DA84", VA = "0x20DA84")]
		public static Request<Room> InviteUser(ulong roomID, string inviteToken)
		{
			return null;
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0x20DBAC", Offset = "0x20DBAC", VA = "0x20DBAC")]
		public static Request<Room> Join(ulong roomID, bool subscribeToUpdates = false)
		{
			return null;
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0x20DCD4", Offset = "0x20DCD4", VA = "0x20DCD4")]
		public static Request<Room> Join2(ulong roomID, RoomOptions roomOptions)
		{
			return null;
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0x20DE44", Offset = "0x20DE44", VA = "0x20DE44")]
		public static Request<Room> KickUser(ulong roomID, ulong userID, int kickDurationSeconds)
		{
			return null;
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0x20DF78", Offset = "0x20DF78", VA = "0x20DF78")]
		public static Request LaunchInvitableUserFlow(ulong roomID)
		{
			return null;
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0x20E080", Offset = "0x20E080", VA = "0x20E080")]
		public static Request<Room> Leave(ulong roomID)
		{
			return null;
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0x20E1A0", Offset = "0x20E1A0", VA = "0x20E1A0")]
		public static Request<Room> SetDescription(ulong roomID, string description)
		{
			return null;
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0x20E2C8", Offset = "0x20E2C8", VA = "0x20E2C8")]
		public static Request<Room> UpdateMembershipLockStatus(ulong roomID, RoomMembershipLockStatus membershipLockStatus)
		{
			return null;
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0x20E3F0", Offset = "0x20E3F0", VA = "0x20E3F0")]
		public static Request UpdateOwner(ulong roomID, ulong userID)
		{
			return null;
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0x20E508", Offset = "0x20E508", VA = "0x20E508")]
		public static Request<Room> UpdatePrivateRoomJoinPolicy(ulong roomID, RoomJoinPolicy newJoinPolicy)
		{
			return null;
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0x20D090", Offset = "0x20D090", VA = "0x20D090")]
		public static void SetRoomInviteAcceptedNotificationCallback(Message<string>.Callback callback)
		{
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0x20E630", Offset = "0x20E630", VA = "0x20E630")]
		public static void SetRoomInviteReceivedNotificationCallback(Message<RoomInviteNotification>.Callback callback)
		{
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0x20E6CC", Offset = "0x20E6CC", VA = "0x20E6CC")]
		public static void SetUpdateNotificationCallback(Message<Room>.Callback callback)
		{
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0x20E768", Offset = "0x20E768", VA = "0x20E768")]
		public static Request<RoomList> GetNextRoomListPage(RoomList list)
		{
			return null;
		}
	}
	[Token(Token = "0x200010A")]
	public static class Matchmaking
	{
		[Token(Token = "0x200010B")]
		public class CustomQuery
		{
			[Token(Token = "0x200010C")]
			public struct Criterion
			{
				[Token(Token = "0x400037D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public string key;

				[Token(Token = "0x400037E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
				public MatchmakingCriterionImportance importance;

				[Token(Token = "0x400037F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public Dictionary<string, object> parameters;

				[Token(Token = "0x6000766")]
				[Address(RVA = "0x1FAE2C", Offset = "0x1FAE2C", VA = "0x1FAE2C")]
				public Criterion(string key_, MatchmakingCriterionImportance importance_)
				{
				}
			}

			[Token(Token = "0x400037B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Dictionary<string, object> data;

			[Token(Token = "0x400037C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Criterion[] criteria;

			[Token(Token = "0x6000764")]
			[Address(RVA = "0x1FADD0", Offset = "0x1FADD0", VA = "0x1FADD0")]
			public CustomQuery()
			{
			}

			[Token(Token = "0x6000765")]
			[Address(RVA = "0x1F9694", Offset = "0x1F9694", VA = "0x1F9694")]
			public IntPtr ToUnmanaged()
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0x1F914C", Offset = "0x1F914C", VA = "0x1F914C")]
		public static Request ReportResultsInsecure(ulong roomID, Dictionary<string, int> data)
		{
			return null;
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0x1F9438", Offset = "0x1F9438", VA = "0x1F9438")]
		public static Request<MatchmakingStats> GetStats(string pool, uint maxLevel, MatchmakingStatApproach approach = MatchmakingStatApproach.Trailing)
		{
			return null;
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0x1F9560", Offset = "0x1F9560", VA = "0x1F9560")]
		public static Request<MatchmakingBrowseResult> Browse(string pool, [Optional] CustomQuery customQueryData)
		{
			return null;
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0x1F9BDC", Offset = "0x1F9BDC", VA = "0x1F9BDC")]
		public static Request<MatchmakingBrowseResult> Browse2(string pool, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0x1F9D98", Offset = "0x1F9D98", VA = "0x1F9D98")]
		public static Request Cancel(string pool, string requestHash)
		{
			return null;
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0x1F9E94", Offset = "0x1F9E94", VA = "0x1F9E94")]
		public static Request Cancel()
		{
			return null;
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0x1F9F80", Offset = "0x1F9F80", VA = "0x1F9F80")]
		public static Request<MatchmakingEnqueueResultAndRoom> CreateAndEnqueueRoom(string pool, uint maxUsers, bool subscribeToUpdates = false, [Optional] CustomQuery customQueryData)
		{
			return null;
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0x1FA0C4", Offset = "0x1FA0C4", VA = "0x1FA0C4")]
		public static Request<MatchmakingEnqueueResultAndRoom> CreateAndEnqueueRoom2(string pool, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0x1FA228", Offset = "0x1FA228", VA = "0x1FA228")]
		public static Request<Room> CreateRoom(string pool, uint maxUsers, bool subscribeToUpdates = false)
		{
			return null;
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0x1FA350", Offset = "0x1FA350", VA = "0x1FA350")]
		public static Request<Room> CreateRoom2(string pool, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0x1FA4B4", Offset = "0x1FA4B4", VA = "0x1FA4B4")]
		public static Request<MatchmakingEnqueueResult> Enqueue(string pool, [Optional] CustomQuery customQueryData)
		{
			return null;
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0x1FA5E8", Offset = "0x1FA5E8", VA = "0x1FA5E8")]
		public static Request<MatchmakingEnqueueResult> Enqueue2(string pool, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0x1FA74C", Offset = "0x1FA74C", VA = "0x1FA74C")]
		public static Request<MatchmakingEnqueueResult> EnqueueRoom(ulong roomID, [Optional] CustomQuery customQueryData)
		{
			return null;
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0x1FA888", Offset = "0x1FA888", VA = "0x1FA888")]
		public static Request<MatchmakingEnqueueResult> EnqueueRoom2(ulong roomID, [Optional] MatchmakingOptions matchmakingOptions)
		{
			return null;
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0x1FA9F8", Offset = "0x1FA9F8", VA = "0x1FA9F8")]
		public static Request<MatchmakingAdminSnapshot> GetAdminSnapshot()
		{
			return null;
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0x1FAB04", Offset = "0x1FAB04", VA = "0x1FAB04")]
		public static Request<Room> JoinRoom(ulong roomID, bool subscribeToUpdates = false)
		{
			return null;
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0x1FAC2C", Offset = "0x1FAC2C", VA = "0x1FAC2C")]
		public static Request StartMatch(ulong roomID)
		{
			return null;
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0x1FAD34", Offset = "0x1FAD34", VA = "0x1FAD34")]
		public static void SetMatchFoundNotificationCallback(Message<Room>.Callback callback)
		{
		}
	}
	[Token(Token = "0x200010D")]
	public static class Net
	{
		[Token(Token = "0x6000767")]
		[Address(RVA = "0x20AB84", Offset = "0x20AB84", VA = "0x20AB84")]
		public static Packet ReadPacket()
		{
			return null;
		}

		[Token(Token = "0x6000768")]
		[Address(RVA = "0x20AD68", Offset = "0x20AD68", VA = "0x20AD68")]
		public static bool SendPacket(ulong userID, byte[] bytes, SendPolicy policy)
		{
			return default(bool);
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0x20AEA0", Offset = "0x20AEA0", VA = "0x20AEA0")]
		public static void Connect(ulong userID)
		{
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0x20AF74", Offset = "0x20AF74", VA = "0x20AF74")]
		public static void Accept(ulong userID)
		{
		}

		[Token(Token = "0x600076B")]
		[Address(RVA = "0x20B048", Offset = "0x20B048", VA = "0x20B048")]
		public static void Close(ulong userID)
		{
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0x20B11C", Offset = "0x20B11C", VA = "0x20B11C")]
		public static bool IsConnected(ulong userID)
		{
			return default(bool);
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0x20B1F8", Offset = "0x20B1F8", VA = "0x20B1F8")]
		public static bool SendPacketToCurrentRoom(byte[] bytes, SendPolicy policy)
		{
			return default(bool);
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0x20B328", Offset = "0x20B328", VA = "0x20B328")]
		public static bool AcceptForCurrentRoom()
		{
			return default(bool);
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0x20B3E8", Offset = "0x20B3E8", VA = "0x20B3E8")]
		public static void CloseForCurrentRoom()
		{
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0x20B4A0", Offset = "0x20B4A0", VA = "0x20B4A0")]
		public static Request<PingResult> Ping(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0x20B5C0", Offset = "0x20B5C0", VA = "0x20B5C0")]
		public static void SetConnectionStateChangedCallback(Message<NetworkingPeer>.Callback callback)
		{
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0x20B65C", Offset = "0x20B65C", VA = "0x20B65C")]
		public static void SetPeerConnectRequestCallback(Message<NetworkingPeer>.Callback callback)
		{
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0x20B6F8", Offset = "0x20B6F8", VA = "0x20B6F8")]
		public static void SetPingResultNotificationCallback(Message<PingResult>.Callback callback)
		{
		}
	}
	[Token(Token = "0x200010E")]
	public static class Leaderboards
	{
		[Token(Token = "0x6000774")]
		[Address(RVA = "0x1F8758", Offset = "0x1F8758", VA = "0x1F8758")]
		public static Request<LeaderboardEntryList> GetNextEntries(LeaderboardEntryList list)
		{
			return null;
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0x1F889C", Offset = "0x1F889C", VA = "0x1F889C")]
		public static Request<LeaderboardEntryList> GetPreviousEntries(LeaderboardEntryList list)
		{
			return null;
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0x1F89E0", Offset = "0x1F89E0", VA = "0x1F89E0")]
		public static Request<LeaderboardEntryList> GetEntries(string leaderboardName, int limit, LeaderboardFilterType filter, LeaderboardStartAt startAt)
		{
			return null;
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0x1F8B10", Offset = "0x1F8B10", VA = "0x1F8B10")]
		public static Request<LeaderboardEntryList> GetEntriesAfterRank(string leaderboardName, int limit, ulong afterRank)
		{
			return null;
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0x1F8C40", Offset = "0x1F8C40", VA = "0x1F8C40")]
		public static Request<bool> WriteEntry(string leaderboardName, long score, [Optional] byte[] extraData, bool forceUpdate = false)
		{
			return null;
		}
	}
	[Token(Token = "0x200010F")]
	public static class Voip
	{
		[Token(Token = "0x6000779")]
		[Address(RVA = "0x46146C", Offset = "0x46146C", VA = "0x46146C")]
		public static void Start(ulong userID)
		{
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0x4618BC", Offset = "0x4618BC", VA = "0x4618BC")]
		public static void Accept(ulong userID)
		{
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0x461548", Offset = "0x461548", VA = "0x461548")]
		public static void Stop(ulong userID)
		{
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0x4639C8", Offset = "0x4639C8", VA = "0x4639C8")]
		public static void SetMicrophoneFilterCallback(CAPI.FilterCallback callback)
		{
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0x463AE8", Offset = "0x463AE8", VA = "0x463AE8")]
		public static void SetMicrophoneMuted(VoipMuteState state)
		{
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0x463BB0", Offset = "0x463BB0", VA = "0x463BB0")]
		public static VoipMuteState GetSystemVoipMicrophoneMuted()
		{
			return default(VoipMuteState);
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0x463C74", Offset = "0x463C74", VA = "0x463C74")]
		public static SystemVoipStatus GetSystemVoipStatus()
		{
			return default(SystemVoipStatus);
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0x463D38", Offset = "0x463D38", VA = "0x463D38")]
		public static VoipDtxState GetIsConnectionUsingDtx(ulong peerID)
		{
			return default(VoipDtxState);
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0x463E20", Offset = "0x463E20", VA = "0x463E20")]
		public static VoipBitrate GetLocalBitrate(ulong peerID)
		{
			return default(VoipBitrate);
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0x463F08", Offset = "0x463F08", VA = "0x463F08")]
		public static VoipBitrate GetRemoteBitrate(ulong peerID)
		{
			return default(VoipBitrate);
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0x463FF0", Offset = "0x463FF0", VA = "0x463FF0")]
		public static void SetNewConnectionOptions(VoipOptions voipOptions)
		{
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0x464158", Offset = "0x464158", VA = "0x464158")]
		public static Request<SystemVoipState> SetSystemVoipSuppressed(bool suppressed)
		{
			return null;
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0x461244", Offset = "0x461244", VA = "0x461244")]
		public static void SetVoipConnectRequestCallback(Message<NetworkingPeer>.Callback callback)
		{
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0x4612E0", Offset = "0x4612E0", VA = "0x4612E0")]
		public static void SetVoipStateChangeCallback(Message<NetworkingPeer>.Callback callback)
		{
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0x464274", Offset = "0x464274", VA = "0x464274")]
		public static void SetSystemVoipStateNotificationCallback(Message<SystemVoipState>.Callback callback)
		{
		}
	}
	[Token(Token = "0x2000110")]
	public static class Achievements
	{
		[Token(Token = "0x6000788")]
		[Address(RVA = "0xDC5C14", Offset = "0xDC5C14", VA = "0xDC5C14")]
		public static Request<AchievementUpdate> AddCount(string name, ulong count)
		{
			return null;
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0xDC5E28", Offset = "0xDC5E28", VA = "0xDC5E28")]
		public static Request<AchievementUpdate> AddFields(string name, string fields)
		{
			return null;
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0xDC6040", Offset = "0xDC6040", VA = "0xDC6040")]
		public static Request<AchievementDefinitionList> GetAllDefinitions()
		{
			return null;
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0xDC61FC", Offset = "0xDC61FC", VA = "0xDC61FC")]
		public static Request<AchievementProgressList> GetAllProgress()
		{
			return null;
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0xDC63B8", Offset = "0xDC63B8", VA = "0xDC63B8")]
		public static Request<AchievementDefinitionList> GetDefinitionsByName(string[] names)
		{
			return null;
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0xDC6684", Offset = "0xDC6684", VA = "0xDC6684")]
		public static Request<AchievementProgressList> GetProgressByName(string[] names)
		{
			return null;
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0xDC6950", Offset = "0xDC6950", VA = "0xDC6950")]
		public static Request<AchievementUpdate> Unlock(string name)
		{
			return null;
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0xDC6B3C", Offset = "0xDC6B3C", VA = "0xDC6B3C")]
		public static Request<AchievementDefinitionList> GetNextAchievementDefinitionListPage(AchievementDefinitionList list)
		{
			return null;
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0xDC6DF0", Offset = "0xDC6DF0", VA = "0xDC6DF0")]
		public static Request<AchievementProgressList> GetNextAchievementProgressListPage(AchievementProgressList list)
		{
			return null;
		}
	}
	[Token(Token = "0x2000111")]
	public static class Application
	{
		[Token(Token = "0x6000791")]
		[Address(RVA = "0xDC7410", Offset = "0xDC7410", VA = "0xDC7410")]
		public static Request<ApplicationVersion> GetVersion()
		{
			return null;
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0xDC75CC", Offset = "0xDC75CC", VA = "0xDC75CC")]
		public static Request<string> LaunchOtherApp(ulong appID, [Optional] ApplicationOptions deeplink_options)
		{
			return null;
		}
	}
	[Token(Token = "0x2000112")]
	public static class AssetFile
	{
		[Token(Token = "0x6000793")]
		[Address(RVA = "0xDC7DD4", Offset = "0xDC7DD4", VA = "0xDC7DD4")]
		public static Request<AssetFileDeleteResult> Delete(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0xDC7FB8", Offset = "0xDC7FB8", VA = "0xDC7FB8")]
		public static Request<AssetFileDeleteResult> DeleteById(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0xDC819C", Offset = "0xDC819C", VA = "0xDC819C")]
		public static Request<AssetFileDeleteResult> DeleteByName(string assetFileName)
		{
			return null;
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0xDC8388", Offset = "0xDC8388", VA = "0xDC8388")]
		public static Request<AssetFileDownloadResult> Download(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0xDC856C", Offset = "0xDC856C", VA = "0xDC856C")]
		public static Request<AssetFileDownloadResult> DownloadById(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0xDC8750", Offset = "0xDC8750", VA = "0xDC8750")]
		public static Request<AssetFileDownloadResult> DownloadByName(string assetFileName)
		{
			return null;
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0xDC893C", Offset = "0xDC893C", VA = "0xDC893C")]
		public static Request<AssetFileDownloadCancelResult> DownloadCancel(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0xDC8B20", Offset = "0xDC8B20", VA = "0xDC8B20")]
		public static Request<AssetFileDownloadCancelResult> DownloadCancelById(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0xDC8D04", Offset = "0xDC8D04", VA = "0xDC8D04")]
		public static Request<AssetFileDownloadCancelResult> DownloadCancelByName(string assetFileName)
		{
			return null;
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0xDC8EF0", Offset = "0xDC8EF0", VA = "0xDC8EF0")]
		public static Request<AssetDetailsList> GetList()
		{
			return null;
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0xDC90AC", Offset = "0xDC90AC", VA = "0xDC90AC")]
		public static Request<AssetDetails> Status(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0xDC9290", Offset = "0xDC9290", VA = "0xDC9290")]
		public static Request<AssetDetails> StatusById(ulong assetFileID)
		{
			return null;
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0xDC9474", Offset = "0xDC9474", VA = "0xDC9474")]
		public static Request<AssetDetails> StatusByName(string assetFileName)
		{
			return null;
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0xDC9660", Offset = "0xDC9660", VA = "0xDC9660")]
		public static void SetDownloadUpdateNotificationCallback(Message<AssetFileDownloadUpdate>.Callback callback)
		{
		}
	}
	[Token(Token = "0x2000113")]
	public static class Avatar
	{
	}
	[Token(Token = "0x2000114")]
	public static class Cal
	{
	}
	[Token(Token = "0x2000115")]
	public static class CloudStorage
	{
		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x1F63B8", Offset = "0x1F63B8", VA = "0x1F63B8")]
		public static Request<CloudStorageUpdateResponse> Delete(string bucket, string key)
		{
			return null;
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x1F6560", Offset = "0x1F6560", VA = "0x1F6560")]
		public static Request<CloudStorageData> Load(string bucket, string key)
		{
			return null;
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x1F667C", Offset = "0x1F667C", VA = "0x1F667C")]
		public static Request<CloudStorageMetadataList> LoadBucketMetadata(string bucket)
		{
			return null;
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x1F6790", Offset = "0x1F6790", VA = "0x1F6790")]
		public static Request<CloudStorageConflictMetadata> LoadConflictMetadata(string bucket, string key)
		{
			return null;
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x1F68AC", Offset = "0x1F68AC", VA = "0x1F68AC")]
		public static Request<CloudStorageData> LoadHandle(string handle)
		{
			return null;
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x1F69C0", Offset = "0x1F69C0", VA = "0x1F69C0")]
		public static Request<CloudStorageMetadata> LoadMetadata(string bucket, string key)
		{
			return null;
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x1F6ADC", Offset = "0x1F6ADC", VA = "0x1F6ADC")]
		public static Request<CloudStorageUpdateResponse> ResolveKeepLocal(string bucket, string key, string remoteHandle)
		{
			return null;
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x1F6C04", Offset = "0x1F6C04", VA = "0x1F6C04")]
		public static Request<CloudStorageUpdateResponse> ResolveKeepRemote(string bucket, string key, string remoteHandle)
		{
			return null;
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x1F6D2C", Offset = "0x1F6D2C", VA = "0x1F6D2C")]
		public static Request<CloudStorageUpdateResponse> Save(string bucket, string key, byte[] data, long counter, string extraData)
		{
			return null;
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x1F6E7C", Offset = "0x1F6E7C", VA = "0x1F6E7C")]
		public static Request<CloudStorageMetadataList> GetNextCloudStorageMetadataListPage(CloudStorageMetadataList list)
		{
			return null;
		}
	}
	[Token(Token = "0x2000116")]
	public static class CloudStorage2
	{
	}
	[Token(Token = "0x2000117")]
	public static class Entitlements
	{
		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x1F7BF8", Offset = "0x1F7BF8", VA = "0x1F7BF8")]
		public static Request IsUserEntitledToApplication()
		{
			return null;
		}
	}
	[Token(Token = "0x2000118")]
	public static class GraphAPI
	{
	}
	[Token(Token = "0x2000119")]
	public static class HTTP
	{
	}
	[Token(Token = "0x200011A")]
	public static class IAP
	{
		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x1F7D0C", Offset = "0x1F7D0C", VA = "0x1F7D0C")]
		public static Request ConsumePurchase(string sku)
		{
			return null;
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x1F7E04", Offset = "0x1F7E04", VA = "0x1F7E04")]
		public static Request<ProductList> GetProductsBySKU(string[] skus)
		{
			return null;
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x1F7F30", Offset = "0x1F7F30", VA = "0x1F7F30")]
		public static Request<PurchaseList> GetViewerPurchases()
		{
			return null;
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x1F803C", Offset = "0x1F803C", VA = "0x1F803C")]
		public static Request<Purchase> LaunchCheckoutFlow(string sku)
		{
			return null;
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x1F81B8", Offset = "0x1F81B8", VA = "0x1F81B8")]
		public static Request<ProductList> GetNextProductListPage(ProductList list)
		{
			return null;
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x1F8378", Offset = "0x1F8378", VA = "0x1F8378")]
		public static Request<PurchaseList> GetNextPurchaseListPage(PurchaseList list)
		{
			return null;
		}
	}
	[Token(Token = "0x200011B")]
	public static class LanguagePack
	{
		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x1F8538", Offset = "0x1F8538", VA = "0x1F8538")]
		public static Request<AssetDetails> GetCurrent()
		{
			return null;
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x1F8644", Offset = "0x1F8644", VA = "0x1F8644")]
		public static Request<AssetFileDownloadResult> SetCurrent(string tag)
		{
			return null;
		}
	}
	[Token(Token = "0x200011C")]
	public static class Livestreaming
	{
		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x1F8D8C", Offset = "0x1F8D8C", VA = "0x1F8D8C")]
		public static Request<LivestreamingStatus> GetStatus()
		{
			return null;
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x1F8E98", Offset = "0x1F8E98", VA = "0x1F8E98")]
		public static Request<LivestreamingStatus> PauseStream()
		{
			return null;
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x1F8FA4", Offset = "0x1F8FA4", VA = "0x1F8FA4")]
		public static Request<LivestreamingStatus> ResumeStream()
		{
			return null;
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x1F90B0", Offset = "0x1F90B0", VA = "0x1F90B0")]
		public static void SetStatusUpdateNotificationCallback(Message<LivestreamingStatus>.Callback callback)
		{
		}
	}
	[Token(Token = "0x200011D")]
	public static class Media
	{
		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x1FB6F0", Offset = "0x1FB6F0", VA = "0x1FB6F0")]
		public static Request<ShareMediaResult> ShareToFacebook(string postTextSuggestion, string filePath, MediaContentType contentType)
		{
			return null;
		}
	}
	[Token(Token = "0x200011E")]
	public static class Notifications
	{
		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x20B794", Offset = "0x20B794", VA = "0x20B794")]
		public static Request<RoomInviteNotificationList> GetRoomInviteNotifications()
		{
			return null;
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x20B8A0", Offset = "0x20B8A0", VA = "0x20B8A0")]
		public static Request MarkAsRead(ulong notificationID)
		{
			return null;
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x20B9A8", Offset = "0x20B9A8", VA = "0x20B9A8")]
		public static Request<RoomInviteNotificationList> GetNextRoomInviteNotificationListPage(RoomInviteNotificationList list)
		{
			return null;
		}
	}
	[Token(Token = "0x200011F")]
	public static class Parties
	{
		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x20BF6C", Offset = "0x20BF6C", VA = "0x20BF6C")]
		public static Request<Party> GetCurrent()
		{
			return null;
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x20C078", Offset = "0x20C078", VA = "0x20C078")]
		public static void SetPartyUpdateNotificationCallback(Message<PartyUpdateNotification>.Callback callback)
		{
		}
	}
	[Token(Token = "0x2000120")]
	public static class Users
	{
		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x462AE4", Offset = "0x462AE4", VA = "0x462AE4")]
		public static Request<User> Get(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x462C0C", Offset = "0x462C0C", VA = "0x462C0C")]
		public static Request<string> GetAccessToken()
		{
			return null;
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x45AE1C", Offset = "0x45AE1C", VA = "0x45AE1C")]
		public static Request<User> GetLoggedInUser()
		{
			return null;
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x462D20", Offset = "0x462D20", VA = "0x462D20")]
		public static Request<UserList> GetLoggedInUserFriends()
		{
			return null;
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x462E34", Offset = "0x462E34", VA = "0x462E34")]
		public static Request<UserAndRoomList> GetLoggedInUserFriendsAndRooms()
		{
			return null;
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x462F48", Offset = "0x462F48", VA = "0x462F48")]
		public static Request<UserAndRoomList> GetLoggedInUserRecentlyMetUsersAndRooms([Optional] UserOptions userOptions)
		{
			return null;
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x4630AC", Offset = "0x4630AC", VA = "0x4630AC")]
		public static Request<OrgScopedID> GetOrgScopedID(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x4631D4", Offset = "0x4631D4", VA = "0x4631D4")]
		public static Request<SdkAccountList> GetSdkAccounts()
		{
			return null;
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x4632E8", Offset = "0x4632E8", VA = "0x4632E8")]
		public static Request<UserProof> GetUserProof()
		{
			return null;
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x4633FC", Offset = "0x4633FC", VA = "0x4633FC")]
		public static Request<LaunchFriendRequestFlowResult> LaunchFriendRequestFlow(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x463524", Offset = "0x463524", VA = "0x463524")]
		public static Request LaunchProfile(ulong userID)
		{
			return null;
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x463638", Offset = "0x463638", VA = "0x463638")]
		public static Request<UserAndRoomList> GetNextUserAndRoomListPage(UserAndRoomList list)
		{
			return null;
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x463800", Offset = "0x463800", VA = "0x463800")]
		public static Request<UserList> GetNextUserListPage(UserList list)
		{
			return null;
		}
	}
	[Token(Token = "0x2000121")]
	public enum PlatformInitializeResult
	{
		[Token(Token = "0x4000381")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D27C", Offset = "0xC2D27C")]
		Success = 0,
		[Token(Token = "0x4000382")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D2B0", Offset = "0xC2D2B0")]
		Uninitialized = -1,
		[Token(Token = "0x4000383")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D2E4", Offset = "0xC2D2E4")]
		PreLoaded = -2,
		[Token(Token = "0x4000384")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D318", Offset = "0xC2D318")]
		FileInvalid = -3,
		[Token(Token = "0x4000385")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D34C", Offset = "0xC2D34C")]
		SignatureInvalid = -4,
		[Token(Token = "0x4000386")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D380", Offset = "0xC2D380")]
		UnableToVerify = -5,
		[Token(Token = "0x4000387")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D3B4", Offset = "0xC2D3B4")]
		VersionMismatch = -6,
		[Token(Token = "0x4000388")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D3E8", Offset = "0xC2D3E8")]
		Unknown = -7,
		[Token(Token = "0x4000389")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D41C", Offset = "0xC2D41C")]
		InvalidCredentials = -8,
		[Token(Token = "0x400038A")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D450", Offset = "0xC2D450")]
		NotEntitled = -9
	}
	[Token(Token = "0x2000122")]
	public static class PlatformInternal
	{
		[Token(Token = "0x2000123")]
		public enum MessageTypeInternal : uint
		{
			[Token(Token = "0x400038C")]
			Application_ExecuteCoordinatedLaunch = 645772532u,
			[Token(Token = "0x400038D")]
			Application_GetInstalledApplications = 1376744524u,
			[Token(Token = "0x400038E")]
			Avatar_UpdateMetaData = 2077219214u,
			[Token(Token = "0x400038F")]
			Cal_FinalizeApplication = 497667029u,
			[Token(Token = "0x4000390")]
			Cal_GetSuggestedApplications = 1450209301u,
			[Token(Token = "0x4000391")]
			Cal_ProposeApplication = 1317270237u,
			[Token(Token = "0x4000392")]
			CloudStorage2_GetUserDirectoryPath = 1990471406u,
			[Token(Token = "0x4000393")]
			GraphAPI_Get = 822018158u,
			[Token(Token = "0x4000394")]
			GraphAPI_Post = 1990567876u,
			[Token(Token = "0x4000395")]
			HTTP_Get = 1874211363u,
			[Token(Token = "0x4000396")]
			HTTP_GetToFile = 1317133401u,
			[Token(Token = "0x4000397")]
			HTTP_MultiPartPost = 1480774160u,
			[Token(Token = "0x4000398")]
			HTTP_Post = 1798743375u,
			[Token(Token = "0x4000399")]
			Livestreaming_IsAllowedForApplication = 191729014u,
			[Token(Token = "0x400039A")]
			Livestreaming_StartPartyStream = 2066701532u,
			[Token(Token = "0x400039B")]
			Livestreaming_StartStream = 1343932350u,
			[Token(Token = "0x400039C")]
			Livestreaming_StopPartyStream = 661065560u,
			[Token(Token = "0x400039D")]
			Livestreaming_StopStream = 1155796426u,
			[Token(Token = "0x400039E")]
			Livestreaming_UpdateCommentsOverlayVisibility = 528318516u,
			[Token(Token = "0x400039F")]
			Livestreaming_UpdateMicStatus = 475495815u,
			[Token(Token = "0x40003A0")]
			Party_Create = 450042703u,
			[Token(Token = "0x40003A1")]
			Party_GatherInApplication = 1921499523u,
			[Token(Token = "0x40003A2")]
			Party_Get = 1586058173u,
			[Token(Token = "0x40003A3")]
			Party_GetCurrentForUser = 1489764138u,
			[Token(Token = "0x40003A4")]
			Party_Invite = 901104867u,
			[Token(Token = "0x40003A5")]
			Party_Join = 1744993395u,
			[Token(Token = "0x40003A6")]
			Party_Leave = 848430801u,
			[Token(Token = "0x40003A7")]
			Room_CreateOrUpdateAndJoinNamed = 2089683601u,
			[Token(Token = "0x40003A8")]
			Room_GetNamedRooms = 125660812u,
			[Token(Token = "0x40003A9")]
			Room_GetSocialRooms = 1636310390u,
			[Token(Token = "0x40003AA")]
			SystemPermissions_GetStatus = 493497353u,
			[Token(Token = "0x40003AB")]
			SystemPermissions_LaunchDeeplink = 442139697u,
			[Token(Token = "0x40003AC")]
			User_CancelRecordingForReportFlow = 65065289u,
			[Token(Token = "0x40003AD")]
			User_GetLinkedAccounts = 1469314134u,
			[Token(Token = "0x40003AE")]
			User_LaunchBlockFlow = 1876305192u,
			[Token(Token = "0x40003AF")]
			User_LaunchReportFlow = 1449304081u,
			[Token(Token = "0x40003B0")]
			User_LaunchReportFlow2 = 2139314275u,
			[Token(Token = "0x40003B1")]
			User_LaunchUnblockFlow = 346172055u,
			[Token(Token = "0x40003B2")]
			User_NewEntitledTestUser = 292822787u,
			[Token(Token = "0x40003B3")]
			User_NewTestUser = 921194380u,
			[Token(Token = "0x40003B4")]
			User_NewTestUserFriends = 517416647u,
			[Token(Token = "0x40003B5")]
			User_StartRecordingForReportFlow = 1819161571u,
			[Token(Token = "0x40003B6")]
			User_StopRecordingAndLaunchReportFlow = 1618513035u,
			[Token(Token = "0x40003B7")]
			User_StopRecordingAndLaunchReportFlow2 = 432190251u,
			[Token(Token = "0x40003B8")]
			User_TestUserCreateDeviceManifest = 1701884605u
		}

		[Token(Token = "0x2000124")]
		public static class HTTP
		{
			[Token(Token = "0x60007CD")]
			[Address(RVA = "0x20C194", Offset = "0x20C194", VA = "0x20C194")]
			public static void SetHttpTransferUpdateCallback(Message<HttpTransferUpdate>.Callback callback)
			{
			}
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x20C114", Offset = "0x20C114", VA = "0x20C114")]
		public static void CrashApplication()
		{
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x1FE854", Offset = "0x1FE854", VA = "0x1FE854")]
		internal static Message ParseMessageHandle(IntPtr messageHandle, Message.MessageType messageType)
		{
			return null;
		}
	}
	[Token(Token = "0x2000125")]
	public sealed class PlatformSettings : ScriptableObject
	{
		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private string ovrAppID;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string ovrMobileAppID;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private bool ovrUseStandalonePlatform;

		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		[SerializeField]
		private bool ovrEnableARM64Support;

		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PlatformSettings instance;

		[Token(Token = "0x17000060")]
		public static string AppID
		{
			[Token(Token = "0x60007CF")]
			[Address(RVA = "0x1F7BD0", Offset = "0x1F7BD0", VA = "0x1F7BD0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007D0")]
			[Address(RVA = "0x20C478", Offset = "0x20C478", VA = "0x20C478")]
			set
			{
			}
		}

		[Token(Token = "0x17000061")]
		public static string MobileAppID
		{
			[Token(Token = "0x60007D1")]
			[Address(RVA = "0x1F7BAC", Offset = "0x1F7BAC", VA = "0x1F7BAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007D2")]
			[Address(RVA = "0x20C4A0", Offset = "0x20C4A0", VA = "0x20C4A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000062")]
		public static bool UseStandalonePlatform
		{
			[Token(Token = "0x60007D3")]
			[Address(RVA = "0x1F7760", Offset = "0x1F7760", VA = "0x1F7760")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007D4")]
			[Address(RVA = "0x20C4C8", Offset = "0x20C4C8", VA = "0x20C4C8")]
			set
			{
			}
		}

		[Token(Token = "0x17000063")]
		public static bool EnableARM64Support
		{
			[Token(Token = "0x60007D5")]
			[Address(RVA = "0x20C4F0", Offset = "0x20C4F0", VA = "0x20C4F0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007D6")]
			[Address(RVA = "0x20C514", Offset = "0x20C514", VA = "0x20C514")]
			set
			{
			}
		}

		[Token(Token = "0x17000064")]
		public static PlatformSettings Instance
		{
			[Token(Token = "0x60007D7")]
			[Address(RVA = "0x20C2F4", Offset = "0x20C2F4", VA = "0x20C2F4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007D8")]
			[Address(RVA = "0x20C53C", Offset = "0x20C53C", VA = "0x20C53C")]
			set
			{
			}
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x20C230", Offset = "0x20C230", VA = "0x20C230")]
		public PlatformSettings()
		{
		}
	}
	[Token(Token = "0x2000126")]
	public sealed class Request<T> : Request
	{
		[Token(Token = "0x60007D9")]
		public Request(ulong requestID)
		{
		}

		[Token(Token = "0x60007DA")]
		public Request<T> OnComplete(Message<T>.Callback callback)
		{
			return null;
		}
	}
	[Token(Token = "0x2000127")]
	public class Request
	{
		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2D4C4", Offset = "0xC2D4C4")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xC2D4C4", Offset = "0xC2D4C4")]
		private ulong <RequestID>k__BackingField;

		[Token(Token = "0x17000065")]
		public ulong RequestID
		{
			[Token(Token = "0x60007DC")]
			[Address(RVA = "0x20C5B0", Offset = "0x20C5B0", VA = "0x20C5B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2D4F8", Offset = "0xC2D4F8")]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x60007DD")]
			[Address(RVA = "0x20C5A0", Offset = "0x20C5A0", VA = "0x20C5A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2D508", Offset = "0xC2D508")]
			set
			{
			}
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x1F7CE4", Offset = "0x1F7CE4", VA = "0x1F7CE4")]
		public Request(ulong requestID)
		{
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x20C5B8", Offset = "0x20C5B8", VA = "0x20C5B8")]
		public Request OnComplete(Message.Callback callback)
		{
			return null;
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x20C64C", Offset = "0x20C64C", VA = "0x20C64C")]
		public static void RunCallbacks(uint limit = 0u)
		{
		}
	}
	[Token(Token = "0x2000128")]
	public enum RoomJoinability
	{
		[Token(Token = "0x40003C0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D518", Offset = "0xC2D518")]
		Unknown,
		[Token(Token = "0x40003C1")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D54C", Offset = "0xC2D54C")]
		AreIn,
		[Token(Token = "0x40003C2")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D580", Offset = "0xC2D580")]
		AreKicked,
		[Token(Token = "0x40003C3")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D5B4", Offset = "0xC2D5B4")]
		CanJoin,
		[Token(Token = "0x40003C4")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D5E8", Offset = "0xC2D5E8")]
		IsFull,
		[Token(Token = "0x40003C5")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D61C", Offset = "0xC2D61C")]
		NoViewer,
		[Token(Token = "0x40003C6")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D650", Offset = "0xC2D650")]
		PolicyPrevents
	}
	[Token(Token = "0x2000129")]
	public enum RoomJoinPolicy
	{
		[Token(Token = "0x40003C8")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D684", Offset = "0xC2D684")]
		None,
		[Token(Token = "0x40003C9")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D6B8", Offset = "0xC2D6B8")]
		Everyone,
		[Token(Token = "0x40003CA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D6EC", Offset = "0xC2D6EC")]
		FriendsOfMembers,
		[Token(Token = "0x40003CB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D720", Offset = "0xC2D720")]
		FriendsOfOwner,
		[Token(Token = "0x40003CC")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D754", Offset = "0xC2D754")]
		InvitedUsers,
		[Token(Token = "0x40003CD")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D788", Offset = "0xC2D788")]
		Unknown
	}
	[Token(Token = "0x200012A")]
	public enum RoomMembershipLockStatus
	{
		[Token(Token = "0x40003CF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D7BC", Offset = "0xC2D7BC")]
		Unknown,
		[Token(Token = "0x40003D0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D7F0", Offset = "0xC2D7F0")]
		Lock,
		[Token(Token = "0x40003D1")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D824", Offset = "0xC2D824")]
		Unlock
	}
	[Token(Token = "0x200012B")]
	public class RoomOptions
	{
		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr Handle;

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x20C70C", Offset = "0x20C70C", VA = "0x20C70C")]
		public RoomOptions()
		{
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x20C7A0", Offset = "0x20C7A0", VA = "0x20C7A0")]
		public void SetDataStore(string key, string value)
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x20C848", Offset = "0x20C848", VA = "0x20C848")]
		public void ClearDataStore()
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x20C8D4", Offset = "0x20C8D4", VA = "0x20C8D4")]
		public void SetExcludeRecentlyMet(bool value)
		{
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x20C968", Offset = "0x20C968", VA = "0x20C968")]
		public void SetMaxUserResults(uint value)
		{
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x20C9FC", Offset = "0x20C9FC", VA = "0x20C9FC")]
		public void SetOrdering(UserOrdering value)
		{
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x20CA90", Offset = "0x20CA90", VA = "0x20CA90")]
		public void SetRecentlyMetTimeWindow(TimeWindow value)
		{
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x20CB24", Offset = "0x20CB24", VA = "0x20CB24")]
		public void SetRoomId(ulong value)
		{
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x20CBCC", Offset = "0x20CBCC", VA = "0x20CBCC")]
		public void SetTurnOffUpdates(bool value)
		{
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x20CC60", Offset = "0x20CC60", VA = "0x20CC60")]
		public static explicit operator IntPtr(RoomOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x20CCB8", Offset = "0x20CCB8", VA = "0x20CCB8", Slot = "1")]
		~RoomOptions()
		{
		}
	}
	[Token(Token = "0x200012C")]
	public enum RoomType
	{
		[Token(Token = "0x40003D4")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D858", Offset = "0xC2D858")]
		Unknown,
		[Token(Token = "0x40003D5")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D88C", Offset = "0xC2D88C")]
		Matchmaking,
		[Token(Token = "0x40003D6")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D8C0", Offset = "0xC2D8C0")]
		Moderated,
		[Token(Token = "0x40003D7")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D8F4", Offset = "0xC2D8F4")]
		Private,
		[Token(Token = "0x40003D8")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D928", Offset = "0xC2D928")]
		Solo
	}
	[Token(Token = "0x200012D")]
	public enum SdkAccountType
	{
		[Token(Token = "0x40003DA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D95C", Offset = "0xC2D95C")]
		Unknown,
		[Token(Token = "0x40003DB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D990", Offset = "0xC2D990")]
		Oculus,
		[Token(Token = "0x40003DC")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D9C4", Offset = "0xC2D9C4")]
		FacebookGameroom
	}
	[Token(Token = "0x200012E")]
	public enum SendPolicy
	{
		[Token(Token = "0x40003DE")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2D9F8", Offset = "0xC2D9F8")]
		Unreliable,
		[Token(Token = "0x40003DF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DA2C", Offset = "0xC2DA2C")]
		Reliable,
		[Token(Token = "0x40003E0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DA60", Offset = "0xC2DA60")]
		Unknown
	}
	[Token(Token = "0x200012F")]
	public enum ServiceProvider
	{
		[Token(Token = "0x40003E2")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DA94", Offset = "0xC2DA94")]
		Unknown,
		[Token(Token = "0x40003E3")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DAC8", Offset = "0xC2DAC8")]
		Dropbox,
		[Token(Token = "0x40003E4")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DAFC", Offset = "0xC2DAFC")]
		Facebook,
		[Token(Token = "0x40003E5")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DB30", Offset = "0xC2DB30")]
		Google,
		[Token(Token = "0x40003E6")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DB64", Offset = "0xC2DB64")]
		Instagram,
		[Token(Token = "0x40003E7")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DB98", Offset = "0xC2DB98")]
		RemoteMedia
	}
	[Token(Token = "0x2000130")]
	public enum ShareMediaStatus
	{
		[Token(Token = "0x40003E9")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DBCC", Offset = "0xC2DBCC")]
		Unknown,
		[Token(Token = "0x40003EA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DC00", Offset = "0xC2DC00")]
		Shared,
		[Token(Token = "0x40003EB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DC34", Offset = "0xC2DC34")]
		Canceled
	}
	[Token(Token = "0x2000131")]
	public sealed class StandalonePlatform
	{
		[Token(Token = "0x2000132")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xC2DC68", Offset = "0xC2DC68")]
		public delegate void UnityLogDelegate(IntPtr tag, IntPtr msg);

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x461FB4", Offset = "0x461FB4", VA = "0x461FB4")]
		public StandalonePlatform()
		{
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x461FBC", Offset = "0x461FBC", VA = "0x461FBC")]
		public Request<PlatformInitialize> InitializeInEditor()
		{
			return null;
		}
	}
	[Token(Token = "0x2000133")]
	public sealed class StandalonePlatformSettings
	{
		[Token(Token = "0x17000066")]
		public static string OculusPlatformTestUserEmail
		{
			[Token(Token = "0x60007F2")]
			[Address(RVA = "0x4625B8", Offset = "0x4625B8", VA = "0x4625B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007F3")]
			[Address(RVA = "0x462644", Offset = "0x462644", VA = "0x462644")]
			set
			{
			}
		}

		[Token(Token = "0x17000067")]
		public static string OculusPlatformTestUserPassword
		{
			[Token(Token = "0x60007F4")]
			[Address(RVA = "0x462648", Offset = "0x462648", VA = "0x462648")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007F5")]
			[Address(RVA = "0x4626D4", Offset = "0x4626D4", VA = "0x4626D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000068")]
		public static string OculusPlatformTestUserAccessToken
		{
			[Token(Token = "0x60007F6")]
			[Address(RVA = "0x462214", Offset = "0x462214", VA = "0x462214")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007F7")]
			[Address(RVA = "0x4626D8", Offset = "0x4626D8", VA = "0x4626D8")]
			set
			{
			}
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x4625B0", Offset = "0x4625B0", VA = "0x4625B0")]
		public StandalonePlatformSettings()
		{
		}
	}
	[Token(Token = "0x2000134")]
	public enum SystemVoipStatus
	{
		[Token(Token = "0x40003ED")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DC7C", Offset = "0xC2DC7C")]
		Unknown,
		[Token(Token = "0x40003EE")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DCB0", Offset = "0xC2DCB0")]
		Unavailable,
		[Token(Token = "0x40003EF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DCE4", Offset = "0xC2DCE4")]
		Suppressed,
		[Token(Token = "0x40003F0")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DD18", Offset = "0xC2DD18")]
		Active
	}
	[Token(Token = "0x2000135")]
	public enum TimeWindow
	{
		[Token(Token = "0x40003F2")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DD4C", Offset = "0xC2DD4C")]
		Unknown,
		[Token(Token = "0x40003F3")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DD80", Offset = "0xC2DD80")]
		OneHour,
		[Token(Token = "0x40003F4")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DDB4", Offset = "0xC2DDB4")]
		OneDay,
		[Token(Token = "0x40003F5")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DDE8", Offset = "0xC2DDE8")]
		OneWeek,
		[Token(Token = "0x40003F6")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DE1C", Offset = "0xC2DE1C")]
		ThirtyDays,
		[Token(Token = "0x40003F7")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DE50", Offset = "0xC2DE50")]
		NinetyDays
	}
	[Token(Token = "0x2000136")]
	public class UserOptions
	{
		[Token(Token = "0x40003F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr Handle;

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x4626DC", Offset = "0x4626DC", VA = "0x4626DC")]
		public UserOptions()
		{
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x462770", Offset = "0x462770", VA = "0x462770")]
		public void SetMaxUsers(uint value)
		{
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x462804", Offset = "0x462804", VA = "0x462804")]
		public void AddServiceProvider(ServiceProvider value)
		{
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x462898", Offset = "0x462898", VA = "0x462898")]
		public void ClearServiceProviders()
		{
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x462924", Offset = "0x462924", VA = "0x462924")]
		public void SetTimeWindow(TimeWindow value)
		{
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x4629B8", Offset = "0x4629B8", VA = "0x4629B8")]
		public static explicit operator IntPtr(UserOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x462A10", Offset = "0x462A10", VA = "0x462A10", Slot = "1")]
		~UserOptions()
		{
		}
	}
	[Token(Token = "0x2000137")]
	public enum UserOrdering
	{
		[Token(Token = "0x40003FA")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DE84", Offset = "0xC2DE84")]
		Unknown,
		[Token(Token = "0x40003FB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DEB8", Offset = "0xC2DEB8")]
		None,
		[Token(Token = "0x40003FC")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DEEC", Offset = "0xC2DEEC")]
		PresenceAlphabetical
	}
	[Token(Token = "0x2000138")]
	public enum UserPresenceStatus
	{
		[Token(Token = "0x40003FE")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DF20", Offset = "0xC2DF20")]
		Unknown,
		[Token(Token = "0x40003FF")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DF54", Offset = "0xC2DF54")]
		Online,
		[Token(Token = "0x4000400")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DF88", Offset = "0xC2DF88")]
		Offline
	}
	[Token(Token = "0x2000139")]
	public class VoipAudioSourceHiLevel : MonoBehaviour
	{
		[Token(Token = "0x200013A")]
		public class FilterReadDelegate : MonoBehaviour
		{
			[Token(Token = "0x4000407")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public VoipAudioSourceHiLevel parent;

			[Token(Token = "0x4000408")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private float[] scratchBuffer;

			[Token(Token = "0x6000809")]
			[Address(RVA = "0x464BFC", Offset = "0x464BFC", VA = "0x464BFC")]
			public FilterReadDelegate()
			{
			}

			[Token(Token = "0x600080A")]
			[Address(RVA = "0x464C04", Offset = "0x464C04", VA = "0x464C04")]
			private void Awake()
			{
			}

			[Token(Token = "0x600080B")]
			[Address(RVA = "0x464CF4", Offset = "0x464CF4", VA = "0x464CF4")]
			private void OnAudioFilterRead(float[] data, int channels)
			{
			}
		}

		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int initialPlaybackDelayMS;

		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioSource audioSource;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float peakAmplitude;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected IVoipPCMSource pcmSource;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int audioSystemPlaybackFrequency;

		[Token(Token = "0x4000406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static bool verboseLogging;

		[Token(Token = "0x17000069")]
		public ulong senderID
		{
			[Token(Token = "0x6000800")]
			[Address(RVA = "0x46137C", Offset = "0x46137C", VA = "0x46137C")]
			set
			{
			}
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x464310", Offset = "0x464310", VA = "0x464310")]
		public VoipAudioSourceHiLevel()
		{
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0x464318", Offset = "0x464318", VA = "0x464318")]
		protected void Stop()
		{
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0x46431C", Offset = "0x46431C", VA = "0x46431C")]
		private VoipSampleRate SampleRateToEnum(int rate)
		{
			return default(VoipSampleRate);
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0x464350", Offset = "0x464350", VA = "0x464350")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0x46470C", Offset = "0x46470C", VA = "0x46470C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0x464734", Offset = "0x464734", VA = "0x464734", Slot = "4")]
		protected virtual void CreatePCMSource()
		{
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0x4647AC", Offset = "0x4647AC", VA = "0x4647AC")]
		protected static int MSToElements(int ms)
		{
			return default(int);
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0x464854", Offset = "0x464854", VA = "0x464854")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x200013B")]
	public enum VoipBitrate
	{
		[Token(Token = "0x400040A")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DFBC", Offset = "0xC2DFBC")]
		Unknown,
		[Token(Token = "0x400040B")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2DFF0", Offset = "0xC2DFF0")]
		B16000,
		[Token(Token = "0x400040C")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2E024", Offset = "0xC2E024")]
		B24000,
		[Token(Token = "0x400040D")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2E058", Offset = "0xC2E058")]
		B32000,
		[Token(Token = "0x400040E")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2E08C", Offset = "0xC2E08C")]
		B64000,
		[Token(Token = "0x400040F")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2E0C0", Offset = "0xC2E0C0")]
		B96000,
		[Token(Token = "0x4000410")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2E0F4", Offset = "0xC2E0F4")]
		B128000
	}
	[Token(Token = "0x200013C")]
	public enum VoipDtxState
	{
		[Token(Token = "0x4000412")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2E128", Offset = "0xC2E128")]
		Unknown,
		[Token(Token = "0x4000413")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2E15C", Offset = "0xC2E15C")]
		Enabled,
		[Token(Token = "0x4000414")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2E190", Offset = "0xC2E190")]
		Disabled
	}
	[Token(Token = "0x200013D")]
	public enum VoipMuteState
	{
		[Token(Token = "0x4000416")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2E1C4", Offset = "0xC2E1C4")]
		Unknown,
		[Token(Token = "0x4000417")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2E1F8", Offset = "0xC2E1F8")]
		Muted,
		[Token(Token = "0x4000418")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2E22C", Offset = "0xC2E22C")]
		Unmuted
	}
	[Token(Token = "0x200013E")]
	public class VoipOptions
	{
		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr Handle;

		[Token(Token = "0x600080C")]
		[Address(RVA = "0x465414", Offset = "0x465414", VA = "0x465414")]
		public VoipOptions()
		{
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0x4654A8", Offset = "0x4654A8", VA = "0x4654A8")]
		public void SetBitrateForNewConnections(VoipBitrate value)
		{
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0x46553C", Offset = "0x46553C", VA = "0x46553C")]
		public void SetCreateNewConnectionUseDtx(VoipDtxState value)
		{
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0x464100", Offset = "0x464100", VA = "0x464100")]
		public static explicit operator IntPtr(VoipOptions options)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0x4655D0", Offset = "0x4655D0", VA = "0x4655D0", Slot = "1")]
		~VoipOptions()
		{
		}
	}
	[Token(Token = "0x200013F")]
	public class VoipPCMSourceNative : IVoipPCMSource
	{
		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private ulong senderID;

		[Token(Token = "0x6000811")]
		[Address(RVA = "0x4647A4", Offset = "0x4647A4", VA = "0x4647A4")]
		public VoipPCMSourceNative()
		{
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0x4656A4", Offset = "0x4656A4", VA = "0x4656A4", Slot = "4")]
		public int GetPCM(float[] dest, int length)
		{
			return default(int);
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0x4657A4", Offset = "0x4657A4", VA = "0x4657A4", Slot = "5")]
		public void SetSenderID(ulong senderID)
		{
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0x4657B4", Offset = "0x4657B4", VA = "0x4657B4", Slot = "7")]
		public int PeekSizeElements()
		{
			return default(int);
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0x465890", Offset = "0x465890", VA = "0x465890", Slot = "6")]
		public void Update()
		{
		}
	}
	[Token(Token = "0x2000140")]
	public enum VoipSampleRate
	{
		[Token(Token = "0x400041C")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2E260", Offset = "0xC2E260")]
		Unknown,
		[Token(Token = "0x400041D")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2E294", Offset = "0xC2E294")]
		HZ24000,
		[Token(Token = "0x400041E")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2E2C8", Offset = "0xC2E2C8")]
		HZ44100,
		[Token(Token = "0x400041F")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0xC2E2FC", Offset = "0xC2E2FC")]
		HZ48000
	}
	[Token(Token = "0x2000141")]
	public class WindowsPlatform
	{
		[Token(Token = "0x2000142")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xC2E330", Offset = "0xC2E330")]
		public delegate void UnityLogDelegate(IntPtr tag, IntPtr msg);

		[Token(Token = "0x6000816")]
		[Address(RVA = "0x465894", Offset = "0x465894", VA = "0x465894")]
		public WindowsPlatform()
		{
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0x46589C", Offset = "0x46589C", VA = "0x46589C")]
		private void CPPLogCallback(IntPtr tag, IntPtr message)
		{
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0x4659DC", Offset = "0x4659DC", VA = "0x4659DC")]
		private IntPtr getCallbackPointer()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0x465A2C", Offset = "0x465A2C", VA = "0x465A2C")]
		public bool Initialize(string appId)
		{
			return default(bool);
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0x465B90", Offset = "0x465B90", VA = "0x465B90")]
		public Request<PlatformInitialize> AsyncInitialize(string appId)
		{
			return null;
		}
	}
}
[Token(Token = "0x2000143")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xC2E344", Offset = "0xC2E344")]
public class MouseLook : MonoBehaviour
{
	[Token(Token = "0x2000144")]
	public enum RotationAxes
	{
		[Token(Token = "0x4000429")]
		MouseXAndY,
		[Token(Token = "0x400042A")]
		MouseX,
		[Token(Token = "0x400042B")]
		MouseY
	}

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public RotationAxes axes;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float sensitivityX;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float sensitivityY;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float minimumX;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maximumX;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float minimumY;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maximumY;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float rotationY;

	[Token(Token = "0x600081F")]
	[Address(RVA = "0xDC24B4", Offset = "0xDC24B4", VA = "0xDC24B4")]
	public MouseLook()
	{
	}

	[Token(Token = "0x6000820")]
	[Address(RVA = "0xDC24F8", Offset = "0xDC24F8", VA = "0xDC24F8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000821")]
	[Address(RVA = "0xDC28A4", Offset = "0xDC28A4", VA = "0xDC28A4")]
	private void Start()
	{
	}
}
[Token(Token = "0x2000145")]
public struct ReflectionSnapshot
{
	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public AudioMixerSnapshot mixerSnapshot;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float fadeTime;
}
[Token(Token = "0x2000146")]
public class ONSPReflectionZone : MonoBehaviour
{
	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public AudioMixerSnapshot mixerSnapshot;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float fadeTime;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Stack<ReflectionSnapshot> snapshotList;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static ReflectionSnapshot currentSnapshot;

	[Token(Token = "0x6000822")]
	[Address(RVA = "0xC69B24", Offset = "0xC69B24", VA = "0xC69B24")]
	public ONSPReflectionZone()
	{
	}

	[Token(Token = "0x6000823")]
	[Address(RVA = "0xC69B2C", Offset = "0xC69B2C", VA = "0xC69B2C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000824")]
	[Address(RVA = "0xC69B30", Offset = "0xC69B30", VA = "0xC69B30")]
	private void Update()
	{
	}

	[Token(Token = "0x6000825")]
	[Address(RVA = "0xC69B34", Offset = "0xC69B34", VA = "0xC69B34")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0xC69CF4", Offset = "0xC69CF4", VA = "0xC69CF4")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000827")]
	[Address(RVA = "0xC69B78", Offset = "0xC69B78", VA = "0xC69B78")]
	private bool CheckForAudioListener(GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0xC69C2C", Offset = "0xC69C2C", VA = "0xC69C2C")]
	private void PushCurrentMixerShapshot()
	{
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0xC69D38", Offset = "0xC69D38", VA = "0xC69D38")]
	private void PopCurrentMixerSnapshot()
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0xC69E0C", Offset = "0xC69E0C", VA = "0xC69E0C")]
	private void SetReflectionValues()
	{
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0xC6A030", Offset = "0xC6A030", VA = "0xC6A030")]
	private void SetReflectionValues(ref ReflectionSnapshot mss)
	{
	}
}
[Token(Token = "0x2000147")]
public class OculusSpatializerUnity : MonoBehaviour
{
	[Token(Token = "0x2000148")]
	public delegate void AudioRaycastCallback(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data);

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public LayerMask layerMask;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool visualizeRoom;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private bool roomVisualizationInitialized;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int raysPerSecond;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float roomInterpSpeed;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxWallDistance;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int rayCacheSize;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool dynamicReflectionsEnabled;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AudioRaycastCallback _raycastCallback;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float particleSize;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float particleOffset;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private GameObject room;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Renderer[] wallRenderer;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float[] dims;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float[] coefs;

	[Token(Token = "0x4000441")]
	private const int HIT_COUNT = 2048;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3[] points;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3[] normals;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private ParticleSystem sys;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LayerMask gLayerMask;

	[Token(Token = "0x4000447")]
	private const string strOSP = "AudioPluginOculusSpatializer";

	[Token(Token = "0x600082D")]
	[Address(RVA = "0x466050", Offset = "0x466050", VA = "0x466050")]
	public OculusSpatializerUnity()
	{
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0x466204", Offset = "0x466204", VA = "0x466204")]
	private static Vector3 swapHandedness(Vector3 vec)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0x466244", Offset = "0x466244", VA = "0x466244")]
	private static void AudioRaycast(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data)
	{
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0x4664C8", Offset = "0x4664C8", VA = "0x4664C8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0x4665BC", Offset = "0x4665BC", VA = "0x4665BC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0x466704", Offset = "0x466704", VA = "0x466704")]
	private void Update()
	{
	}

	[Token(Token = "0x6000833")]
	[Address(RVA = "0x467524", Offset = "0x467524", VA = "0x467524")]
	private void inititalizeRoomVisualization()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000834")]
	[Address(RVA = "0x466594", Offset = "0x466594", VA = "0x466594")]
	private static extern int OSP_Unity_AssignRaycastCallback(MulticastDelegate callback, IntPtr data);

	[PreserveSig]
	[Token(Token = "0x6000835")]
	[Address(RVA = "0x46663C", Offset = "0x46663C", VA = "0x46663C")]
	private static extern int OSP_Unity_AssignRaycastCallback(IntPtr callback, IntPtr data);

	[PreserveSig]
	[Token(Token = "0x6000836")]
	[Address(RVA = "0x467164", Offset = "0x467164", VA = "0x467164")]
	private static extern int OSP_Unity_SetDynamicRoomRaysPerSecond(int RaysPerSecond);

	[PreserveSig]
	[Token(Token = "0x6000837")]
	[Address(RVA = "0x467224", Offset = "0x467224", VA = "0x467224")]
	private static extern int OSP_Unity_SetDynamicRoomInterpSpeed(float InterpSpeed);

	[PreserveSig]
	[Token(Token = "0x6000838")]
	[Address(RVA = "0x4672E4", Offset = "0x4672E4", VA = "0x4672E4")]
	private static extern int OSP_Unity_SetDynamicRoomMaxWallDistance(float MaxWallDistance);

	[PreserveSig]
	[Token(Token = "0x6000839")]
	[Address(RVA = "0x4673A4", Offset = "0x4673A4", VA = "0x4673A4")]
	private static extern int OSP_Unity_SetDynamicRoomRaysRayCacheSize(int RayCacheSize);

	[PreserveSig]
	[Token(Token = "0x600083A")]
	[Address(RVA = "0x467464", Offset = "0x467464", VA = "0x467464")]
	private static extern int OSP_Unity_UpdateRoomModel(float wetLevel);

	[PreserveSig]
	[Token(Token = "0x600083B")]
	[Address(RVA = "0x468BF8", Offset = "0x468BF8", VA = "0x468BF8")]
	private static extern int OSP_Unity_GetRoomDimensions(float[] roomDimensions, float[] reflectionsCoefs, out Vector3 position);

	[PreserveSig]
	[Token(Token = "0x600083C")]
	[Address(RVA = "0x468CF4", Offset = "0x468CF4", VA = "0x468CF4")]
	private static extern int OSP_Unity_GetRaycastHits(Vector3[] points, Vector3[] normals, int length);
}
[Token(Token = "0x2000149")]
public class ONSPAmbisonicsNative : MonoBehaviour
{
	[Token(Token = "0x200014A")]
	public enum ovrAmbisonicsNativeStatus
	{
		[Token(Token = "0x400044E")]
		Uninitialized = -1,
		[Token(Token = "0x400044F")]
		NotEnabled,
		[Token(Token = "0x4000450")]
		Success,
		[Token(Token = "0x4000451")]
		StreamError,
		[Token(Token = "0x4000452")]
		ProcessError,
		[Token(Token = "0x4000453")]
		MaxStatValue
	}

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int numFOAChannels;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int paramVSpeakerMode;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int paramAmbiStat;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private ovrAmbisonicsNativeStatus currentStatus;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private bool useVirtualSpeakers;

	[Token(Token = "0x1700006A")]
	public bool UseVirtualSpeakers
	{
		[Token(Token = "0x6000843")]
		[Address(RVA = "0x46A184", Offset = "0x46A184", VA = "0x46A184")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000844")]
		[Address(RVA = "0x46A18C", Offset = "0x46A18C", VA = "0x46A18C")]
		set
		{
		}
	}

	[Token(Token = "0x6000842")]
	[Address(RVA = "0x46A174", Offset = "0x46A174", VA = "0x46A174")]
	public ONSPAmbisonicsNative()
	{
	}

	[Token(Token = "0x6000845")]
	[Address(RVA = "0x46A194", Offset = "0x46A194", VA = "0x46A194")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000846")]
	[Address(RVA = "0x46A478", Offset = "0x46A478", VA = "0x46A478")]
	private void Update()
	{
	}
}
[Token(Token = "0x200014B")]
public class ONSPAudioSource : MonoBehaviour
{
	[Token(Token = "0x200014C")]
	private enum Parameters
	{
		[Token(Token = "0x400045F")]
		P_GAIN,
		[Token(Token = "0x4000460")]
		P_USEINVSQR,
		[Token(Token = "0x4000461")]
		P_NEAR,
		[Token(Token = "0x4000462")]
		P_FAR,
		[Token(Token = "0x4000463")]
		P_RADIUS,
		[Token(Token = "0x4000464")]
		P_DISABLE_RFL,
		[Token(Token = "0x4000465")]
		P_VSPEAKERMODE,
		[Token(Token = "0x4000466")]
		P_AMBISTAT,
		[Token(Token = "0x4000467")]
		P_READONLY_GLOBAL_RFL_ENABLED,
		[Token(Token = "0x4000468")]
		P_READONLY_NUM_VOICES,
		[Token(Token = "0x4000469")]
		P_SENDLEVEL,
		[Token(Token = "0x400046A")]
		P_NUM
	}

	[Token(Token = "0x4000454")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	private bool enableSpatialization;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private float gain;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	private bool useInvSqr;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float near;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float far;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float volumetricRadius;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float reverbSend;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool enableRfl;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ONSPAudioSource RoomReflectionGizmoAS;

	[Token(Token = "0x1700006B")]
	public bool EnableSpatialization
	{
		[Token(Token = "0x600084A")]
		[Address(RVA = "0x46A9C0", Offset = "0x46A9C0", VA = "0x46A9C0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600084B")]
		[Address(RVA = "0x46A9C8", Offset = "0x46A9C8", VA = "0x46A9C8")]
		set
		{
		}
	}

	[Token(Token = "0x1700006C")]
	public float Gain
	{
		[Token(Token = "0x600084C")]
		[Address(RVA = "0x46A9D0", Offset = "0x46A9D0", VA = "0x46A9D0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600084D")]
		[Address(RVA = "0x46A9D8", Offset = "0x46A9D8", VA = "0x46A9D8")]
		set
		{
		}
	}

	[Token(Token = "0x1700006D")]
	public bool UseInvSqr
	{
		[Token(Token = "0x600084E")]
		[Address(RVA = "0x46AA80", Offset = "0x46AA80", VA = "0x46AA80")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600084F")]
		[Address(RVA = "0x46AA88", Offset = "0x46AA88", VA = "0x46AA88")]
		set
		{
		}
	}

	[Token(Token = "0x1700006E")]
	public float Near
	{
		[Token(Token = "0x6000850")]
		[Address(RVA = "0x46AA90", Offset = "0x46AA90", VA = "0x46AA90")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000851")]
		[Address(RVA = "0x46AA98", Offset = "0x46AA98", VA = "0x46AA98")]
		set
		{
		}
	}

	[Token(Token = "0x1700006F")]
	public float Far
	{
		[Token(Token = "0x6000852")]
		[Address(RVA = "0x46AB40", Offset = "0x46AB40", VA = "0x46AB40")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000853")]
		[Address(RVA = "0x46AB48", Offset = "0x46AB48", VA = "0x46AB48")]
		set
		{
		}
	}

	[Token(Token = "0x17000070")]
	public float VolumetricRadius
	{
		[Token(Token = "0x6000854")]
		[Address(RVA = "0x46ABF0", Offset = "0x46ABF0", VA = "0x46ABF0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000855")]
		[Address(RVA = "0x46ABF8", Offset = "0x46ABF8", VA = "0x46ABF8")]
		set
		{
		}
	}

	[Token(Token = "0x17000071")]
	public float ReverbSend
	{
		[Token(Token = "0x6000856")]
		[Address(RVA = "0x46ACA0", Offset = "0x46ACA0", VA = "0x46ACA0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000857")]
		[Address(RVA = "0x46ACA8", Offset = "0x46ACA8", VA = "0x46ACA8")]
		set
		{
		}
	}

	[Token(Token = "0x17000072")]
	public bool EnableRfl
	{
		[Token(Token = "0x6000858")]
		[Address(RVA = "0x46AD54", Offset = "0x46AD54", VA = "0x46AD54")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000859")]
		[Address(RVA = "0x46AD5C", Offset = "0x46AD5C", VA = "0x46AD5C")]
		set
		{
		}
	}

	[Token(Token = "0x6000848")]
	[Address(RVA = "0x46A894", Offset = "0x46A894", VA = "0x46A894")]
	public ONSPAudioSource()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000849")]
	[Address(RVA = "0x46A8B8", Offset = "0x46A8B8", VA = "0x46A8B8")]
	private static extern void ONSP_GetGlobalRoomReflectionValues(ref bool reflOn, ref bool reverbOn, ref float width, ref float height, ref float length);

	[Token(Token = "0x600085A")]
	[Address(RVA = "0x46AD64", Offset = "0x46AD64", VA = "0x46AD64")]
	private void Awake()
	{
	}

	[Token(Token = "0x600085B")]
	[Address(RVA = "0x46AF50", Offset = "0x46AF50", VA = "0x46AF50")]
	private void Start()
	{
	}

	[Token(Token = "0x600085C")]
	[Address(RVA = "0x46AF54", Offset = "0x46AF54", VA = "0x46AF54")]
	private void Update()
	{
	}

	[Token(Token = "0x600085D")]
	[Address(RVA = "0x46ADE0", Offset = "0x46ADE0", VA = "0x46ADE0")]
	public void SetParameters(ref AudioSource source)
	{
	}

	[Token(Token = "0x600085E")]
	[Address(RVA = "0x46B05C", Offset = "0x46B05C", VA = "0x46B05C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600085F")]
	[Address(RVA = "0x46B718", Offset = "0x46B718", VA = "0x46B718")]
	private void OnDestroy()
	{
	}
}
[Token(Token = "0x200014D")]
public class ONSPProfiler : MonoBehaviour
{
	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool profilerEnabled;

	[Token(Token = "0x400046C")]
	private const int DEFAULT_PORT = 2121;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int port;

	[Token(Token = "0x400046E")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Token(Token = "0x6000861")]
	[Address(RVA = "0x46B83C", Offset = "0x46B83C", VA = "0x46B83C")]
	public ONSPProfiler()
	{
	}

	[Token(Token = "0x6000862")]
	[Address(RVA = "0x46B84C", Offset = "0x46B84C", VA = "0x46B84C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0x46B85C", Offset = "0x46B85C", VA = "0x46B85C")]
	private void Update()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000864")]
	[Address(RVA = "0x46B948", Offset = "0x46B948", VA = "0x46B948")]
	private static extern int ONSP_SetProfilerEnabled(bool enabled);

	[PreserveSig]
	[Token(Token = "0x6000865")]
	[Address(RVA = "0x46B888", Offset = "0x46B888", VA = "0x46B888")]
	private static extern int ONSP_SetProfilerPort(int port);
}
[Token(Token = "0x200014E")]
public class ONSPPropagationGeometry : MonoBehaviour
{
	[Token(Token = "0x200014F")]
	private struct MeshMaterial
	{
		[Token(Token = "0x4000476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MeshFilter meshFilter;

		[Token(Token = "0x4000477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ONSPPropagationMaterial[] materials;
	}

	[Token(Token = "0x2000150")]
	private struct TerrainMaterial
	{
		[Token(Token = "0x4000478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Terrain terrain;

		[Token(Token = "0x4000479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ONSPPropagationMaterial[] materials;
	}

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string GeometryAssetDirectory;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string filePathRelative;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool fileEnabled;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool includeChildMeshes;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private IntPtr geometryHandle;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int OSPSuccess;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int terrainDecimation;

	[Token(Token = "0x17000073")]
	public static string GeometryAssetPath
	{
		[Token(Token = "0x6000867")]
		[Address(RVA = "0x46EED4", Offset = "0x46EED4", VA = "0x46EED4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000074")]
	public string filePath
	{
		[Token(Token = "0x6000868")]
		[Address(RVA = "0x46EFCC", Offset = "0x46EFCC", VA = "0x46EFCC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000866")]
	[Address(RVA = "0x46EE24", Offset = "0x46EE24", VA = "0x46EE24")]
	public ONSPPropagationGeometry()
	{
	}

	[Token(Token = "0x6000869")]
	[Address(RVA = "0x46F0AC", Offset = "0x46F0AC", VA = "0x46F0AC")]
	public static string GetPath(Transform current)
	{
		return null;
	}

	[Token(Token = "0x600086A")]
	[Address(RVA = "0x46F2C4", Offset = "0x46F2C4", VA = "0x46F2C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600086B")]
	[Address(RVA = "0x46F2C8", Offset = "0x46F2C8", VA = "0x46F2C8")]
	private void CreatePropagationGeometry()
	{
	}

	[Token(Token = "0x600086C")]
	[Address(RVA = "0x46F96C", Offset = "0x46F96C", VA = "0x46F96C")]
	private void Update()
	{
	}

	[Token(Token = "0x600086D")]
	[Address(RVA = "0x46FE60", Offset = "0x46FE60", VA = "0x46FE60")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600086E")]
	[Address(RVA = "0x470010", Offset = "0x470010", VA = "0x470010")]
	private static void traverseMeshHierarchy(GameObject obj, ONSPPropagationMaterial[] currentMaterials, bool includeChildren, List<MeshMaterial> meshMaterials, List<TerrainMaterial> terrainMaterials, bool ignoreStatic)
	{
	}

	[Token(Token = "0x600086F")]
	[Address(RVA = "0x47092C", Offset = "0x47092C", VA = "0x47092C")]
	private int uploadMesh(IntPtr geometryHandle, GameObject meshObject, Matrix4x4 worldToLocal, bool ignoreStatic)
	{
		return default(int);
	}

	[Token(Token = "0x6000870")]
	[Address(RVA = "0x46F774", Offset = "0x46F774", VA = "0x46F774")]
	public void UploadGeometry()
	{
	}

	[Token(Token = "0x6000871")]
	[Address(RVA = "0x46F504", Offset = "0x46F504", VA = "0x46F504")]
	public bool ReadFile()
	{
		return default(bool);
	}
}
namespace Oculus.Spatializer.Propagation
{
	[Token(Token = "0x2000151")]
	public enum FaceType : uint
	{
		[Token(Token = "0x400047B")]
		TRIANGLES,
		[Token(Token = "0x400047C")]
		QUADS
	}
	[Token(Token = "0x2000152")]
	public enum MaterialProperty : uint
	{
		[Token(Token = "0x400047E")]
		ABSORPTION,
		[Token(Token = "0x400047F")]
		TRANSMISSION,
		[Token(Token = "0x4000480")]
		SCATTERING
	}
	[Token(Token = "0x2000153")]
	public struct MeshGroup
	{
		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UIntPtr indexOffset;

		[Token(Token = "0x4000482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public UIntPtr faceCount;

		[Token(Token = "0x4000483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public FaceType faceType;

		[Token(Token = "0x4000484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public IntPtr material;
	}
}
[Token(Token = "0x2000154")]
internal class ONSPPropagation
{
	[Token(Token = "0x2000155")]
	public enum ovrAudioScalarType : uint
	{
		[Token(Token = "0x4000487")]
		Int8,
		[Token(Token = "0x4000488")]
		UInt8,
		[Token(Token = "0x4000489")]
		Int16,
		[Token(Token = "0x400048A")]
		UInt16,
		[Token(Token = "0x400048B")]
		Int32,
		[Token(Token = "0x400048C")]
		UInt32,
		[Token(Token = "0x400048D")]
		Int64,
		[Token(Token = "0x400048E")]
		UInt64,
		[Token(Token = "0x400048F")]
		Float16,
		[Token(Token = "0x4000490")]
		Float32,
		[Token(Token = "0x4000491")]
		Float64
	}

	[Token(Token = "0x2000156")]
	public class ClientType
	{
		[Token(Token = "0x4000492")]
		public const uint OVRA_CLIENT_TYPE_NATIVE = 0u;

		[Token(Token = "0x4000493")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2016 = 1u;

		[Token(Token = "0x4000494")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2017_1 = 2u;

		[Token(Token = "0x4000495")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2017_2 = 3u;

		[Token(Token = "0x4000496")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2018_1 = 4u;

		[Token(Token = "0x4000497")]
		public const uint OVRA_CLIENT_TYPE_FMOD = 5u;

		[Token(Token = "0x4000498")]
		public const uint OVRA_CLIENT_TYPE_UNITY = 6u;

		[Token(Token = "0x4000499")]
		public const uint OVRA_CLIENT_TYPE_UE4 = 7u;

		[Token(Token = "0x400049A")]
		public const uint OVRA_CLIENT_TYPE_VST = 8u;

		[Token(Token = "0x400049B")]
		public const uint OVRA_CLIENT_TYPE_AAX = 9u;

		[Token(Token = "0x400049C")]
		public const uint OVRA_CLIENT_TYPE_TEST = 10u;

		[Token(Token = "0x400049D")]
		public const uint OVRA_CLIENT_TYPE_OTHER = 11u;

		[Token(Token = "0x400049E")]
		public const uint OVRA_CLIENT_TYPE_WWISE_UNKNOWN = 12u;

		[Token(Token = "0x6000876")]
		[Address(RVA = "0x46C01C", Offset = "0x46C01C", VA = "0x46C01C")]
		public ClientType()
		{
		}
	}

	[Token(Token = "0x2000157")]
	public interface PropagationInterface
	{
		[Token(Token = "0x6000877")]
		int SetPropagationQuality(float quality);

		[Token(Token = "0x6000878")]
		int SetPropagationThreadAffinity(ulong cpuMask);

		[Token(Token = "0x6000879")]
		int CreateAudioGeometry(out IntPtr geometry);

		[Token(Token = "0x600087A")]
		int DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x600087B")]
		int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount);

		[Token(Token = "0x600087C")]
		int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x600087D")]
		int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x600087E")]
		int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x600087F")]
		int AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6000880")]
		int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x6000881")]
		int CreateAudioMaterial(out IntPtr material);

		[Token(Token = "0x6000882")]
		int DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x6000883")]
		int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x6000884")]
		int AudioMaterialReset(IntPtr material, MaterialProperty property);
	}

	[Token(Token = "0x2000158")]
	public class UnityNativeInterface : PropagationInterface
	{
		[Token(Token = "0x400049F")]
		public const string strOSPS = "AudioPluginOculusSpatializer";

		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr context_;

		[Token(Token = "0x17000076")]
		private IntPtr context
		{
			[Token(Token = "0x6000886")]
			[Address(RVA = "0x46CF34", Offset = "0x46CF34", VA = "0x46CF34")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0x46BFBC", Offset = "0x46BFBC", VA = "0x46BFBC")]
		public UnityNativeInterface()
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000887")]
		[Address(RVA = "0x46CFAC", Offset = "0x46CFAC", VA = "0x46CFAC")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x6000888")]
		[Address(RVA = "0x46D084", Offset = "0x46D084", VA = "0x46D084")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x6000889")]
		[Address(RVA = "0x46D14C", Offset = "0x46D14C", VA = "0x46D14C", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600088A")]
		[Address(RVA = "0x46D16C", Offset = "0x46D16C", VA = "0x46D16C")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x600088B")]
		[Address(RVA = "0x46D23C", Offset = "0x46D23C", VA = "0x46D23C", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600088C")]
		[Address(RVA = "0x46D26C", Offset = "0x46D26C", VA = "0x46D26C")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x600088D")]
		[Address(RVA = "0x46D340", Offset = "0x46D340", VA = "0x46D340", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600088E")]
		[Address(RVA = "0x46D360", Offset = "0x46D360", VA = "0x46D360")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x600088F")]
		[Address(RVA = "0x46D420", Offset = "0x46D420", VA = "0x46D420", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000890")]
		[Address(RVA = "0x46D424", Offset = "0x46D424", VA = "0x46D424")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x6000891")]
		[Address(RVA = "0x46D52C", Offset = "0x46D52C", VA = "0x46D52C", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000892")]
		[Address(RVA = "0x46D648", Offset = "0x46D648", VA = "0x46D648")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x6000893")]
		[Address(RVA = "0x46D718", Offset = "0x46D718", VA = "0x46D718", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000894")]
		[Address(RVA = "0x46D71C", Offset = "0x46D71C", VA = "0x46D71C")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x6000895")]
		[Address(RVA = "0x46D8AC", Offset = "0x46D8AC", VA = "0x46D8AC", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000896")]
		[Address(RVA = "0x46D8B0", Offset = "0x46D8B0", VA = "0x46D8B0")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x46D99C", Offset = "0x46D99C", VA = "0x46D99C", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000898")]
		[Address(RVA = "0x46D9A0", Offset = "0x46D9A0", VA = "0x46D9A0")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x46DA8C", Offset = "0x46DA8C", VA = "0x46DA8C", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600089A")]
		[Address(RVA = "0x46DA90", Offset = "0x46DA90", VA = "0x46DA90")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x46DB64", Offset = "0x46DB64", VA = "0x46DB64", Slot = "14")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600089C")]
		[Address(RVA = "0x46DB84", Offset = "0x46DB84", VA = "0x46DB84")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x46DC44", Offset = "0x46DC44", VA = "0x46DC44", Slot = "15")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600089E")]
		[Address(RVA = "0x46DC48", Offset = "0x46DC48", VA = "0x46DC48")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x46DD20", Offset = "0x46DD20", VA = "0x46DD20", Slot = "16")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x46DD40", Offset = "0x46DD40", VA = "0x46DD40")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x46DE28", Offset = "0x46DE28", VA = "0x46DE28", Slot = "13")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x46DE48", Offset = "0x46DE48", VA = "0x46DE48")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x46DF10", Offset = "0x46DF10", VA = "0x46DF10", Slot = "17")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}
	}

	[Token(Token = "0x2000159")]
	public class WwisePluginInterface : PropagationInterface
	{
		[Token(Token = "0x40004A1")]
		public const string strOSPS = "OculusSpatializerWwise";

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr context_;

		[Token(Token = "0x17000077")]
		private IntPtr context
		{
			[Token(Token = "0x60008A5")]
			[Address(RVA = "0x46DF14", Offset = "0x46DF14", VA = "0x46DF14")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x46BE24", Offset = "0x46BE24", VA = "0x46BE24")]
		public WwisePluginInterface()
		{
		}

		[PreserveSig]
		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x46BD4C", Offset = "0x46BD4C", VA = "0x46BD4C")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x46DF8C", Offset = "0x46DF8C", VA = "0x46DF8C")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x46E054", Offset = "0x46E054", VA = "0x46E054", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x46E074", Offset = "0x46E074", VA = "0x46E074")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x46E144", Offset = "0x46E144", VA = "0x46E144", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x46E174", Offset = "0x46E174", VA = "0x46E174")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x46E24C", Offset = "0x46E24C", VA = "0x46E24C", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x46E26C", Offset = "0x46E26C", VA = "0x46E26C")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x46E32C", Offset = "0x46E32C", VA = "0x46E32C", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x46E330", Offset = "0x46E330", VA = "0x46E330")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x46E438", Offset = "0x46E438", VA = "0x46E438", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x46E554", Offset = "0x46E554", VA = "0x46E554")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x46E624", Offset = "0x46E624", VA = "0x46E624", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x46E628", Offset = "0x46E628", VA = "0x46E628")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x46E7B8", Offset = "0x46E7B8", VA = "0x46E7B8", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x46E7BC", Offset = "0x46E7BC", VA = "0x46E7BC")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x46E8A8", Offset = "0x46E8A8", VA = "0x46E8A8", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x46E8AC", Offset = "0x46E8AC", VA = "0x46E8AC")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x46E998", Offset = "0x46E998", VA = "0x46E998", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x46E99C", Offset = "0x46E99C", VA = "0x46E99C")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x46EA74", Offset = "0x46EA74", VA = "0x46EA74", Slot = "14")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x46EA94", Offset = "0x46EA94", VA = "0x46EA94")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x46EB54", Offset = "0x46EB54", VA = "0x46EB54", Slot = "15")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x46EB58", Offset = "0x46EB58", VA = "0x46EB58")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x46EC30", Offset = "0x46EC30", VA = "0x46EC30", Slot = "16")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x46EC50", Offset = "0x46EC50", VA = "0x46EC50")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x46ED38", Offset = "0x46ED38", VA = "0x46ED38", Slot = "13")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x46ED58", Offset = "0x46ED58", VA = "0x46ED58")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x46EE20", Offset = "0x46EE20", VA = "0x46EE20", Slot = "17")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}
	}

	[Token(Token = "0x200015A")]
	public class FMODPluginInterface : PropagationInterface
	{
		[Token(Token = "0x40004A3")]
		public const string strOSPS = "OculusSpatializerFMOD";

		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr context_;

		[Token(Token = "0x17000078")]
		private IntPtr context
		{
			[Token(Token = "0x60008C4")]
			[Address(RVA = "0x46C024", Offset = "0x46C024", VA = "0x46C024")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x46BF5C", Offset = "0x46BF5C", VA = "0x46BF5C")]
		public FMODPluginInterface()
		{
		}

		[PreserveSig]
		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x46BE84", Offset = "0x46BE84", VA = "0x46BE84")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x46C09C", Offset = "0x46C09C", VA = "0x46C09C")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x46C164", Offset = "0x46C164", VA = "0x46C164", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x46C184", Offset = "0x46C184", VA = "0x46C184")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x46C254", Offset = "0x46C254", VA = "0x46C254", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x46C284", Offset = "0x46C284", VA = "0x46C284")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x46C35C", Offset = "0x46C35C", VA = "0x46C35C", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x46C37C", Offset = "0x46C37C", VA = "0x46C37C")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x46C43C", Offset = "0x46C43C", VA = "0x46C43C", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x46C440", Offset = "0x46C440", VA = "0x46C440")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x46C548", Offset = "0x46C548", VA = "0x46C548", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x46C664", Offset = "0x46C664", VA = "0x46C664")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x46C734", Offset = "0x46C734", VA = "0x46C734", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x46C738", Offset = "0x46C738", VA = "0x46C738")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x46C8C8", Offset = "0x46C8C8", VA = "0x46C8C8", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x46C8CC", Offset = "0x46C8CC", VA = "0x46C8CC")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x46C9B8", Offset = "0x46C9B8", VA = "0x46C9B8", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x46C9BC", Offset = "0x46C9BC", VA = "0x46C9BC")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x46CAA8", Offset = "0x46CAA8", VA = "0x46CAA8", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x46CAAC", Offset = "0x46CAAC", VA = "0x46CAAC")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x46CB84", Offset = "0x46CB84", VA = "0x46CB84", Slot = "14")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x46CBA4", Offset = "0x46CBA4", VA = "0x46CBA4")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x46CC64", Offset = "0x46CC64", VA = "0x46CC64", Slot = "15")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x46CC68", Offset = "0x46CC68", VA = "0x46CC68")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x46CD40", Offset = "0x46CD40", VA = "0x46CD40", Slot = "16")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x46CD60", Offset = "0x46CD60", VA = "0x46CD60")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x46CE48", Offset = "0x46CE48", VA = "0x46CE48", Slot = "13")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x46CE68", Offset = "0x46CE68", VA = "0x46CE68")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x46CF30", Offset = "0x46CF30", VA = "0x46CF30", Slot = "17")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}
	}

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PropagationInterface CachedInterface;

	[Token(Token = "0x17000075")]
	public static PropagationInterface Interface
	{
		[Token(Token = "0x6000874")]
		[Address(RVA = "0x46BA10", Offset = "0x46BA10", VA = "0x46BA10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000873")]
	[Address(RVA = "0x46BA08", Offset = "0x46BA08", VA = "0x46BA08")]
	public ONSPPropagation()
	{
	}

	[Token(Token = "0x6000875")]
	[Address(RVA = "0x46BAA0", Offset = "0x46BAA0", VA = "0x46BAA0")]
	private static PropagationInterface FindInterface()
	{
		return null;
	}
}
[Token(Token = "0x200015B")]
public sealed class ONSPPropagationMaterial : MonoBehaviour
{
	[Token(Token = "0x200015C")]
	public enum Preset
	{
		[Token(Token = "0x40004AB")]
		Custom,
		[Token(Token = "0x40004AC")]
		AcousticTile,
		[Token(Token = "0x40004AD")]
		Brick,
		[Token(Token = "0x40004AE")]
		BrickPainted,
		[Token(Token = "0x40004AF")]
		Carpet,
		[Token(Token = "0x40004B0")]
		CarpetHeavy,
		[Token(Token = "0x40004B1")]
		CarpetHeavyPadded,
		[Token(Token = "0x40004B2")]
		CeramicTile,
		[Token(Token = "0x40004B3")]
		Concrete,
		[Token(Token = "0x40004B4")]
		ConcreteRough,
		[Token(Token = "0x40004B5")]
		ConcreteBlock,
		[Token(Token = "0x40004B6")]
		ConcreteBlockPainted,
		[Token(Token = "0x40004B7")]
		Curtain,
		[Token(Token = "0x40004B8")]
		Foliage,
		[Token(Token = "0x40004B9")]
		Glass,
		[Token(Token = "0x40004BA")]
		GlassHeavy,
		[Token(Token = "0x40004BB")]
		Grass,
		[Token(Token = "0x40004BC")]
		Gravel,
		[Token(Token = "0x40004BD")]
		GypsumBoard,
		[Token(Token = "0x40004BE")]
		PlasterOnBrick,
		[Token(Token = "0x40004BF")]
		PlasterOnConcreteBlock,
		[Token(Token = "0x40004C0")]
		Soil,
		[Token(Token = "0x40004C1")]
		SoundProof,
		[Token(Token = "0x40004C2")]
		Snow,
		[Token(Token = "0x40004C3")]
		Steel,
		[Token(Token = "0x40004C4")]
		Water,
		[Token(Token = "0x40004C5")]
		WoodThin,
		[Token(Token = "0x40004C6")]
		WoodThick,
		[Token(Token = "0x40004C7")]
		WoodFloor,
		[Token(Token = "0x40004C8")]
		WoodOnConcrete
	}

	[Serializable]
	[Token(Token = "0x200015D")]
	public sealed class Point
	{
		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float frequency;

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float data;

		[Token(Token = "0x6000908")]
		[Address(RVA = "0x48080C", Offset = "0x48080C", VA = "0x48080C")]
		public Point(float frequency = 0f, float data = 0f)
		{
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0x480834", Offset = "0x480834", VA = "0x480834")]
		public static implicit operator Point(Vector2 v)
		{
			return null;
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0x4808B0", Offset = "0x4808B0", VA = "0x4808B0")]
		public static implicit operator Vector2(Point point)
		{
			return default(Vector2);
		}
	}

	[Serializable]
	[Token(Token = "0x200015E")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xC2E4B4", Offset = "0xC2E4B4")]
	public sealed class Spectrum
	{
		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int selection;

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public List<Point> points;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2E4E8", Offset = "0xC2E4E8")]
		private static Func<Point, float> <>f__am$cache0;

		[Token(Token = "0x40004CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2E4F8", Offset = "0xC2E4F8")]
		private static Func<Point, float> <>f__am$cache1;

		[Token(Token = "0x1700007A")]
		public float Item
		{
			[Token(Token = "0x600090C")]
			[Address(RVA = "0x48090C", Offset = "0x48090C", VA = "0x48090C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0x472844", Offset = "0x472844", VA = "0x472844")]
		public Spectrum()
		{
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0x480DF0", Offset = "0x480DF0", VA = "0x480DF0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2E508", Offset = "0xC2E508")]
		private static float <get_Item>m__0(Point p)
		{
			return default(float);
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0x480E10", Offset = "0x480E10", VA = "0x480E10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2E518", Offset = "0xC2E518")]
		private static float <get_Item>m__1(Point p)
		{
			return default(float);
		}
	}

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public IntPtr materialHandle;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2E408", Offset = "0xC2E408")]
	public Spectrum absorption;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2E43C", Offset = "0xC2E43C")]
	public Spectrum transmission;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2E470", Offset = "0xC2E470")]
	public Spectrum scattering;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private Preset preset_;

	[Token(Token = "0x17000079")]
	public Preset preset
	{
		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x4728D8", Offset = "0x4728D8", VA = "0x4728D8")]
		get
		{
			return default(Preset);
		}
		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x4728E0", Offset = "0x4728E0", VA = "0x4728E0")]
		set
		{
		}
	}

	[Token(Token = "0x60008E2")]
	[Address(RVA = "0x47279C", Offset = "0x47279C", VA = "0x47279C")]
	public ONSPPropagationMaterial()
	{
	}

	[Token(Token = "0x60008E5")]
	[Address(RVA = "0x472B04", Offset = "0x472B04", VA = "0x472B04")]
	private void Start()
	{
	}

	[Token(Token = "0x60008E6")]
	[Address(RVA = "0x4724C8", Offset = "0x4724C8", VA = "0x4724C8")]
	public void StartInternal()
	{
	}

	[Token(Token = "0x60008E7")]
	[Address(RVA = "0x4732C8", Offset = "0x4732C8", VA = "0x4732C8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60008E8")]
	[Address(RVA = "0x4732CC", Offset = "0x4732CC", VA = "0x4732CC")]
	public void DestroyInternal()
	{
	}

	[Token(Token = "0x60008E9")]
	[Address(RVA = "0x472B08", Offset = "0x472B08", VA = "0x472B08")]
	public void UploadMaterial()
	{
	}

	[Token(Token = "0x60008EA")]
	[Address(RVA = "0x4728FC", Offset = "0x4728FC", VA = "0x4728FC")]
	public void SetPreset(Preset preset)
	{
	}

	[Token(Token = "0x60008EB")]
	[Address(RVA = "0x4733D0", Offset = "0x4733D0", VA = "0x4733D0")]
	private static void AcousticTile(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008EC")]
	[Address(RVA = "0x473BA4", Offset = "0x473BA4", VA = "0x473BA4")]
	private static void Brick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0x474380", Offset = "0x474380", VA = "0x474380")]
	private static void BrickPainted(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008EE")]
	[Address(RVA = "0x474B3C", Offset = "0x474B3C", VA = "0x474B3C")]
	private static void Carpet(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008EF")]
	[Address(RVA = "0x47531C", Offset = "0x47531C", VA = "0x47531C")]
	private static void CarpetHeavy(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008F0")]
	[Address(RVA = "0x475AFC", Offset = "0x475AFC", VA = "0x475AFC")]
	private static void CarpetHeavyPadded(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008F1")]
	[Address(RVA = "0x4762DC", Offset = "0x4762DC", VA = "0x4762DC")]
	private static void CeramicTile(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008F2")]
	[Address(RVA = "0x476AA4", Offset = "0x476AA4", VA = "0x476AA4")]
	private static void Concrete(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008F3")]
	[Address(RVA = "0x47726C", Offset = "0x47726C", VA = "0x47726C")]
	private static void ConcreteRough(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008F4")]
	[Address(RVA = "0x477A54", Offset = "0x477A54", VA = "0x477A54")]
	private static void ConcreteBlock(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0x47823C", Offset = "0x47823C", VA = "0x47823C")]
	private static void ConcreteBlockPainted(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008F6")]
	[Address(RVA = "0x478A1C", Offset = "0x478A1C", VA = "0x478A1C")]
	private static void Curtain(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0x4791FC", Offset = "0x4791FC", VA = "0x4791FC")]
	private static void Foliage(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0x4799CC", Offset = "0x4799CC", VA = "0x4799CC")]
	private static void Glass(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008F9")]
	[Address(RVA = "0x47A17C", Offset = "0x47A17C", VA = "0x47A17C")]
	private static void GlassHeavy(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0x47A944", Offset = "0x47A944", VA = "0x47A944")]
	private static void Grass(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0x47AEF8", Offset = "0x47AEF8", VA = "0x47AEF8")]
	private static void Gravel(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0x47B4AC", Offset = "0x47B4AC", VA = "0x47B4AC")]
	private static void GypsumBoard(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008FD")]
	[Address(RVA = "0x47BC94", Offset = "0x47BC94", VA = "0x47BC94")]
	private static void PlasterOnBrick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008FE")]
	[Address(RVA = "0x47C478", Offset = "0x47C478", VA = "0x47C478")]
	private static void PlasterOnConcreteBlock(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60008FF")]
	[Address(RVA = "0x47CC54", Offset = "0x47CC54", VA = "0x47CC54")]
	private static void Soil(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000900")]
	[Address(RVA = "0x47D204", Offset = "0x47D204", VA = "0x47D204")]
	private static void SoundProof(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000901")]
	[Address(RVA = "0x47D3FC", Offset = "0x47D3FC", VA = "0x47D3FC")]
	private static void Snow(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000902")]
	[Address(RVA = "0x47D9A0", Offset = "0x47D9A0", VA = "0x47D9A0")]
	private static void Steel(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000903")]
	[Address(RVA = "0x47E14C", Offset = "0x47E14C", VA = "0x47E14C")]
	private static void Water(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000904")]
	[Address(RVA = "0x47E90C", Offset = "0x47E90C", VA = "0x47E90C")]
	private static void WoodThin(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000905")]
	[Address(RVA = "0x47F0C8", Offset = "0x47F0C8", VA = "0x47F0C8")]
	private static void WoodThick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000906")]
	[Address(RVA = "0x47F888", Offset = "0x47F888", VA = "0x47F888")]
	private static void WoodFloor(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x6000907")]
	[Address(RVA = "0x48004C", Offset = "0x48004C", VA = "0x48004C")]
	private static void WoodOnConcrete(ref ONSPPropagationMaterial material)
	{
	}
}
[Token(Token = "0x200015F")]
public class ONSPPropagationSettings : MonoBehaviour
{
	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float quality;

	[Token(Token = "0x600090F")]
	[Address(RVA = "0xC69A14", Offset = "0xC69A14", VA = "0xC69A14")]
	public ONSPPropagationSettings()
	{
	}

	[Token(Token = "0x6000910")]
	[Address(RVA = "0xC69A28", Offset = "0xC69A28", VA = "0xC69A28")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000160")]
public class ONSPVersion : MonoBehaviour
{
	[Token(Token = "0x40004D0")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Token(Token = "0x6000911")]
	[Address(RVA = "0xC6A2F8", Offset = "0xC6A2F8", VA = "0xC6A2F8")]
	public ONSPVersion()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000912")]
	[Address(RVA = "0xC6A300", Offset = "0xC6A300", VA = "0xC6A300")]
	private static extern void ONSP_GetVersion(ref int Major, ref int Minor, ref int Patch);

	[Token(Token = "0x6000913")]
	[Address(RVA = "0xC6A3D0", Offset = "0xC6A3D0", VA = "0xC6A3D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000914")]
	[Address(RVA = "0xC6A524", Offset = "0xC6A524", VA = "0xC6A524")]
	private void Start()
	{
	}

	[Token(Token = "0x6000915")]
	[Address(RVA = "0xC6A528", Offset = "0xC6A528", VA = "0xC6A528")]
	private void Update()
	{
	}
}
namespace OVRTouchSample
{
	[Token(Token = "0x2000161")]
	public class TouchController : MonoBehaviour
	{
		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private OVRInput.Controller m_handedness;

		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private TrackedController m_trackedController;

		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private OVRHaptics.OVRHapticsChannel m_hapticsChannel;

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AudioClip m_buttonOneClip;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip m_buttonTwoClip;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private OVRHapticsClip m_buttonOneHC;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRHapticsClip m_buttonTwoHC;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool m_lastButtonOne;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		private bool m_lastButtonTwo;

		[Token(Token = "0x6000916")]
		[Address(RVA = "0xC906BC", Offset = "0xC906BC", VA = "0xC906BC")]
		public TouchController()
		{
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0xC906C4", Offset = "0xC906C4", VA = "0xC906C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0xC908F0", Offset = "0xC908F0", VA = "0xC908F0")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000162")]
	public class TrackedController : MonoBehaviour
	{
		[Token(Token = "0x40004DB")]
		public const float TRIGGER_DEBOUNCE_TIME = 0.05f;

		[Token(Token = "0x40004DC")]
		public const float THUMB_DEBOUNCE_TIME = 0.15f;

		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static TrackedController[] m_cachedControllers;

		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private OVRInput.Controller m_controllerType;

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool m_point;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool m_thumbsUp;

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float m_lastPoint;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_lastNonPoint;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_lastThumb;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_lastNonThumb;

		[Token(Token = "0x1700007B")]
		public bool IsLeft
		{
			[Token(Token = "0x600091B")]
			[Address(RVA = "0xC91194", Offset = "0xC91194", VA = "0xC91194")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700007C")]
		public bool IsPoint
		{
			[Token(Token = "0x600091C")]
			[Address(RVA = "0xC8D81C", Offset = "0xC8D81C", VA = "0xC8D81C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700007D")]
		public bool IsThumbsUp
		{
			[Token(Token = "0x600091D")]
			[Address(RVA = "0xC8D8F8", Offset = "0xC8D8F8", VA = "0xC8D8F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700007E")]
		public bool Button1
		{
			[Token(Token = "0x600091E")]
			[Address(RVA = "0xC90C58", Offset = "0xC90C58", VA = "0xC90C58")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700007F")]
		public bool Button2
		{
			[Token(Token = "0x600091F")]
			[Address(RVA = "0xC90CE8", Offset = "0xC90CE8", VA = "0xC90CE8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000080")]
		public bool ButtonJoystick
		{
			[Token(Token = "0x6000920")]
			[Address(RVA = "0xC910E4", Offset = "0xC910E4", VA = "0xC910E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000081")]
		public float Trigger
		{
			[Token(Token = "0x6000921")]
			[Address(RVA = "0xC90E1C", Offset = "0xC90E1C", VA = "0xC90E1C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000082")]
		public float GripTrigger
		{
			[Token(Token = "0x6000922")]
			[Address(RVA = "0xC8D78C", Offset = "0xC8D78C", VA = "0xC8D78C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000083")]
		public Vector2 Joystick
		{
			[Token(Token = "0x6000923")]
			[Address(RVA = "0xC90D78", Offset = "0xC90D78", VA = "0xC90D78")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0xC91174", Offset = "0xC91174", VA = "0xC91174")]
		public TrackedController()
		{
		}

		[Token(Token = "0x600091A")]
		[Address(RVA = "0xC8D48C", Offset = "0xC8D48C", VA = "0xC8D48C")]
		public static TrackedController GetController(OVRInput.Controller controller)
		{
			return null;
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0xC911A4", Offset = "0xC911A4", VA = "0xC911A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0xC9129C", Offset = "0xC9129C", VA = "0xC9129C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0xC912A0", Offset = "0xC912A0", VA = "0xC912A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0xC912A4", Offset = "0xC912A4", VA = "0xC912A4")]
		private void LateUpdate()
		{
		}
	}
	[Token(Token = "0x2000163")]
	public class Grabbable : MonoBehaviour
	{
		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private bool m_allowOffhandGrab;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Collider[] m_grabPoints;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private HandPose m_grabPose;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool m_grabbedKinematic;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Collider m_grabbedCollider;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Hand m_grabbedHand;

		[Token(Token = "0x17000084")]
		public bool AllowOffhandGrab
		{
			[Token(Token = "0x600092A")]
			[Address(RVA = "0xC8C700", Offset = "0xC8C700", VA = "0xC8C700")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000085")]
		public HandPose HandPose
		{
			[Token(Token = "0x600092B")]
			[Address(RVA = "0xC8C708", Offset = "0xC8C708", VA = "0xC8C708")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000086")]
		public bool IsGrabbed
		{
			[Token(Token = "0x600092C")]
			[Address(RVA = "0xC8C710", Offset = "0xC8C710", VA = "0xC8C710")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000087")]
		public Hand GrabbedHand
		{
			[Token(Token = "0x600092D")]
			[Address(RVA = "0xC8C7A0", Offset = "0xC8C7A0", VA = "0xC8C7A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000088")]
		public Transform GrabbedTransform
		{
			[Token(Token = "0x600092E")]
			[Address(RVA = "0xC8C7A8", Offset = "0xC8C7A8", VA = "0xC8C7A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000089")]
		public Rigidbody GrabbedRigidbody
		{
			[Token(Token = "0x600092F")]
			[Address(RVA = "0xC8C7D0", Offset = "0xC8C7D0", VA = "0xC8C7D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008A")]
		public Collider[] GrabPoints
		{
			[Token(Token = "0x6000930")]
			[Address(RVA = "0xC8C7F8", Offset = "0xC8C7F8", VA = "0xC8C7F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0xC8BF54", Offset = "0xC8BF54", VA = "0xC8BF54")]
		public Grabbable()
		{
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0xC8C024", Offset = "0xC8C024", VA = "0xC8C024", Slot = "4")]
		public virtual void GrabBegin(Hand hand, Collider grabPoint)
		{
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0xC8C25C", Offset = "0xC8C25C", VA = "0xC8C25C", Slot = "5")]
		public virtual void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0xC8C4BC", Offset = "0xC8C4BC", VA = "0xC8C4BC", Slot = "6")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0xC8C800", Offset = "0xC8C800", VA = "0xC8C800")]
		private void Start()
		{
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0xC8C884", Offset = "0xC8C884", VA = "0xC8C884")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0xC8CA2C", Offset = "0xC8CA2C", VA = "0xC8CA2C")]
		private void SendMsg(string msgName, object msg)
		{
		}
	}
	[Token(Token = "0x2000164")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xC2E588", Offset = "0xC2E588")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xC2E588", Offset = "0xC2E588")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xC2E588", Offset = "0xC2E588")]
	public class Hand : MonoBehaviour
	{
		[Token(Token = "0x40004EB")]
		public const string ANIM_LAYER_NAME_POINT = "Point Layer";

		[Token(Token = "0x40004EC")]
		public const string ANIM_LAYER_NAME_THUMB = "Thumb Layer";

		[Token(Token = "0x40004ED")]
		public const string ANIM_PARAM_NAME_FLEX = "Flex";

		[Token(Token = "0x40004EE")]
		public const string ANIM_PARAM_NAME_POSE = "Pose";

		[Token(Token = "0x40004EF")]
		public const int HMD_REFRESH_RATE = 90;

		[Token(Token = "0x40004F0")]
		public const float INPUT_RATE_CHANGE = 20f;

		[Token(Token = "0x40004F1")]
		public const float THRESH_COLLISION_FLEX = 0.9f;

		[Token(Token = "0x40004F2")]
		public const float THRESH_GRAB_BEGIN = 0.55f;

		[Token(Token = "0x40004F3")]
		public const float THRESH_GRAB_END = 0.35f;

		[Token(Token = "0x40004F4")]
		public const float THRESH_THROW_SPEED = 1f;

		[Token(Token = "0x40004F5")]
		public const float COLLIDER_SCALE_MIN = 0.01f;

		[Token(Token = "0x40004F6")]
		public const float COLLIDER_SCALE_MAX = 1f;

		[Token(Token = "0x40004F7")]
		public const float COLLIDER_SCALE_PER_SECOND = 1f;

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private bool m_useFixedJointForGrabbedObject;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		[SerializeField]
		private bool m_parentHeldObject;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private GameObject m_touchAnchor;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private OVRInput.Controller m_handedness;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform m_gripTransform;

		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_particleEmissionRateVelocityScale;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private Collider[] m_grabVolumes;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HandPose m_defaultGrabPose;

		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private ParticleSystem m_particles;

		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TrackedController m_trackedController;

		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private VelocityTracker m_velocityTracker;

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Collider[] m_colliders;

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_collisionEnabled;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool m_grabVolumeEnabled;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 m_lastPos;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion m_lastRot;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion m_anchorOffsetRotation;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 m_anchorOffsetPosition;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int m_animLayerIndexThumb;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int m_animLayerIndexPoint;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int m_animParamIndexFlex;

		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int m_animParamIndexPose;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float m_flex;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float m_point;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float m_thumbsUp;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private HandPose m_grabbedHandPose;

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Grabbable m_grabbedObj;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Dictionary<Grabbable, int> m_grabCandidates;

		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool m_handVisible;

		[Token(Token = "0x4000516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float m_collisionScaleCurrent;

		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2E6E8", Offset = "0xC2E6E8")]
		private static Func<Collider, bool> <>f__am$cache0;

		[Token(Token = "0x1700008B")]
		public bool HandVisible
		{
			[Token(Token = "0x6000939")]
			[Address(RVA = "0xC8CC54", Offset = "0xC8CC54", VA = "0xC8CC54")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000938")]
			[Address(RVA = "0xC8CB38", Offset = "0xC8CB38", VA = "0xC8CB38")]
			set
			{
			}
		}

		[Token(Token = "0x1700008C")]
		private HandPose GrabPose
		{
			[Token(Token = "0x600093A")]
			[Address(RVA = "0xC8CC5C", Offset = "0xC8CC5C", VA = "0xC8CC5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008D")]
		public OVRInput.Controller Handedness
		{
			[Token(Token = "0x600093B")]
			[Address(RVA = "0xC8CC70", Offset = "0xC8CC70", VA = "0xC8CC70")]
			get
			{
				return default(OVRInput.Controller);
			}
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0xC8CA7C", Offset = "0xC8CA7C", VA = "0xC8CA7C")]
		public Hand()
		{
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0xC8C938", Offset = "0xC8C938", VA = "0xC8C938")]
		public void ForceRelease(Grabbable grabbable)
		{
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0xC8CE64", Offset = "0xC8CE64", VA = "0xC8CE64")]
		private void Awake()
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0xC8CEEC", Offset = "0xC8CEEC", VA = "0xC8CEEC")]
		private void Start()
		{
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0xC8D554", Offset = "0xC8D554", VA = "0xC8D554")]
		private void Update()
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0xC8DB5C", Offset = "0xC8DB5C", VA = "0xC8DB5C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0xC8E54C", Offset = "0xC8E54C", VA = "0xC8E54C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0xC8E738", Offset = "0xC8E738", VA = "0xC8E738")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0xC8E7D8", Offset = "0xC8E7D8", VA = "0xC8E7D8")]
		private void OnTriggerEnter(Collider otherCollider)
		{
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0xC8E944", Offset = "0xC8E944", VA = "0xC8E944")]
		private void OnTriggerExit(Collider otherCollider)
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0xC8D824", Offset = "0xC8D824", VA = "0xC8D824")]
		private float InputValueRateChange(bool isDown, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0xC8D954", Offset = "0xC8D954", VA = "0xC8D954")]
		private void UpdateAnimStates()
		{
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xC8D26C", Offset = "0xC8D26C", VA = "0xC8D26C")]
		private void CollisionEnable(bool enabled)
		{
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0xC8D900", Offset = "0xC8D900", VA = "0xC8D900")]
		private void CheckForGrabOrRelease(float prevFlex)
		{
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0xC8EB04", Offset = "0xC8EB04", VA = "0xC8EB04")]
		private void GrabBegin()
		{
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0xC8DE58", Offset = "0xC8DE58", VA = "0xC8DE58")]
		private void MoveGrabbedObject(bool forceTeleport = false)
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0xC8CC78", Offset = "0xC8CC78", VA = "0xC8CC78")]
		private void GrabEnd()
		{
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0xC8F3B0", Offset = "0xC8F3B0", VA = "0xC8F3B0")]
		private void GrabbableRelease(Vector3 linearVelocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0xC8F140", Offset = "0xC8F140", VA = "0xC8F140")]
		private void GrabVolumeEnable(bool enabled)
		{
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0xC8F264", Offset = "0xC8F264", VA = "0xC8F264")]
		private void OffhandGrabbed(Grabbable grabbable)
		{
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0xC8F520", Offset = "0xC8F520", VA = "0xC8F520")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2E6F8", Offset = "0xC2E6F8")]
		private static bool <Start>m__0(Collider childCollider)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000165")]
	public enum HandPoseId
	{
		[Token(Token = "0x4000519")]
		Default,
		[Token(Token = "0x400051A")]
		Generic,
		[Token(Token = "0x400051B")]
		PingPongBall
	}
	[Token(Token = "0x2000166")]
	public enum HandPoseAttachType
	{
		[Token(Token = "0x400051D")]
		None,
		[Token(Token = "0x400051E")]
		Snap,
		[Token(Token = "0x400051F")]
		SnapPosition
	}
	[Token(Token = "0x2000167")]
	public class HandPose : MonoBehaviour
	{
		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private bool m_allowPointing;

		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		[SerializeField]
		private bool m_allowThumbsUp;

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private HandPoseId m_poseId;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private HandPoseAttachType m_attachType;

		[Token(Token = "0x1700008E")]
		public bool AllowPointing
		{
			[Token(Token = "0x6000951")]
			[Address(RVA = "0xC8EAF4", Offset = "0xC8EAF4", VA = "0xC8EAF4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008F")]
		public bool AllowThumbsUp
		{
			[Token(Token = "0x6000952")]
			[Address(RVA = "0xC8EAFC", Offset = "0xC8EAFC", VA = "0xC8EAFC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000090")]
		public HandPoseId PoseId
		{
			[Token(Token = "0x6000953")]
			[Address(RVA = "0xC8EAEC", Offset = "0xC8EAEC", VA = "0xC8EAEC")]
			get
			{
				return default(HandPoseId);
			}
		}

		[Token(Token = "0x17000091")]
		public HandPoseAttachType AttachType
		{
			[Token(Token = "0x6000954")]
			[Address(RVA = "0xC8F378", Offset = "0xC8F378", VA = "0xC8F378")]
			get
			{
				return default(HandPoseAttachType);
			}
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xC8F54C", Offset = "0xC8F54C", VA = "0xC8F54C")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x2000168")]
	public class VelocityTracker : MonoBehaviour
	{
		[Token(Token = "0x2000169")]
		private struct Sample
		{
			[Token(Token = "0x4000534")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float Time;

			[Token(Token = "0x4000535")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float SquaredLinearSpeed;

			[Token(Token = "0x4000536")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector3 LinearVelocity;

			[Token(Token = "0x4000537")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 AngularVelocity;
		}

		[Token(Token = "0x4000524")]
		public const float WINDOW_TIME = 1f / 90f;

		[Token(Token = "0x4000525")]
		public const float WINDOW_EPSILON = 0.0001f;

		[Token(Token = "0x4000526")]
		public const float LINEAR_SPEED_WINDOW = 4f / 45f;

		[Token(Token = "0x4000527")]
		public const float LINEAR_VELOCITY_WINDOW = 2f / 45f;

		[Token(Token = "0x4000528")]
		public const float ANGULAR_VELOCITY_WINDOW = 1f / 45f;

		[Token(Token = "0x4000529")]
		public const int MAX_SAMPLES = 45;

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private bool m_showGizmos;

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int m_index;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int m_count;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Sample[] m_samples;

		[Token(Token = "0x400052E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 m_position;

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion m_rotation;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_frameLinearVelocity;

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 m_frameAngularVelocity;

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 m_trackedLinearVelocity;

		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 m_trackedAngularVelocity;

		[Token(Token = "0x17000092")]
		public Vector3 FrameAngularVelocity
		{
			[Token(Token = "0x6000956")]
			[Address(RVA = "0xC8F3A0", Offset = "0xC8F3A0", VA = "0xC8F3A0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000093")]
		public Vector3 FrameLinearVelocity
		{
			[Token(Token = "0x6000957")]
			[Address(RVA = "0xC8F390", Offset = "0xC8F390", VA = "0xC8F390")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000094")]
		public Vector3 TrackedAngularVelocity
		{
			[Token(Token = "0x6000958")]
			[Address(RVA = "0xC8F380", Offset = "0xC8F380", VA = "0xC8F380")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000095")]
		public Vector3 TrackedLinearVelocity
		{
			[Token(Token = "0x6000959")]
			[Address(RVA = "0xC8D77C", Offset = "0xC8D77C", VA = "0xC8D77C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xC91510", Offset = "0xC91510", VA = "0xC91510")]
		public VelocityTracker()
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0xC916BC", Offset = "0xC916BC", VA = "0xC916BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0xC91744", Offset = "0xC91744", VA = "0xC91744")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0xC923F4", Offset = "0xC923F4", VA = "0xC923F4")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0xC91A04", Offset = "0xC91A04", VA = "0xC91A04")]
		private Vector3 DeltaRotation(Quaternion final, Quaternion initial)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0xC91B70", Offset = "0xC91B70", VA = "0xC91B70")]
		private void AddSample(Vector3 deltaPosition, Vector3 deltaRotation)
		{
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0xC92498", Offset = "0xC92498", VA = "0xC92498")]
		private int Count()
		{
			return default(int);
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0xC92538", Offset = "0xC92538", VA = "0xC92538")]
		private int IndexPrev(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0xC92548", Offset = "0xC92548", VA = "0xC92548")]
		private bool IsSampleValid(int index, float windowSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0xC921CC", Offset = "0xC921CC", VA = "0xC921CC")]
		private Vector3 ComputeAverageAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0xC91DE0", Offset = "0xC91DE0", VA = "0xC91DE0")]
		private Vector3 ComputeAverageLinearVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0xC92008", Offset = "0xC92008", VA = "0xC92008")]
		private float ComputeMaxLinearSpeed()
		{
			return default(float);
		}
	}
	[Token(Token = "0x200016A")]
	public class TapeMeasure : MonoBehaviour
	{
		[Token(Token = "0x200016B")]
		private enum TapeState
		{
			[Token(Token = "0x400054B")]
			Retracted,
			[Token(Token = "0x400054C")]
			Retracting,
			[Token(Token = "0x400054D")]
			Locked
		}

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public OVRInput.Controller controller;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject tapeAnchor;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GameObject tape;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject tapeBack;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public OVRCameraRig rig;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private OVRHapticsClip m_proceduralClip;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private TrackedController m_trackedController;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRHaptics.OVRHapticsChannel m_hapticsChannel;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public AudioClip m_clipA;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip m_clipB;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private OVRHapticsClip m_hapticsClipA;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OVRHapticsClip m_hapticsClipB;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_prevButton1;

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool m_prevButton2;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TapeState state;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float prevHapticsMag;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 lockedPos;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private System.Random rand;

		[Token(Token = "0x6000965")]
		[Address(RVA = "0xC8F554", Offset = "0xC8F554", VA = "0xC8F554")]
		public TapeMeasure()
		{
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0xC8F628", Offset = "0xC8F628", VA = "0xC8F628")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0xC8F698", Offset = "0xC8F698", VA = "0xC8F698")]
		private void Start()
		{
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0xC8F8C4", Offset = "0xC8F8C4", VA = "0xC8F8C4")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x200016C")]
	public class ColorGrabbable : Grabbable
	{
		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color COLOR_GRAB;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Color m_color;

		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private MeshRenderer[] m_meshRenderers;

		[Token(Token = "0x6000969")]
		[Address(RVA = "0xC8BF0C", Offset = "0xC8BF0C", VA = "0xC8BF0C")]
		public ColorGrabbable()
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xC8BF64", Offset = "0xC8BF64", VA = "0xC8BF64", Slot = "4")]
		public override void GrabBegin(Hand hand, Collider grabbableCollider)
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0xC8C218", Offset = "0xC8C218", VA = "0xC8C218", Slot = "5")]
		public override void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0xC8C398", Offset = "0xC8C398", VA = "0xC8C398", Slot = "6")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0xC8C0D4", Offset = "0xC8C0D4", VA = "0xC8C0D4")]
		private void SetColor(Color color)
		{
		}
	}
	[Token(Token = "0x200016D")]
	public class TouchVisualizer : MonoBehaviour
	{
		[Token(Token = "0x200016E")]
		private enum DisplayMode
		{
			[Token(Token = "0x4000556")]
			Hand,
			[Token(Token = "0x4000557")]
			Controller,
			[Token(Token = "0x4000558")]
			HandAndController,
			[Token(Token = "0x4000559")]
			Count
		}

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private DisplayMode m_displayMode;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Hand m_hand;

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private TouchController m_controller;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool m_wasButtonDown;

		[Token(Token = "0x600096F")]
		[Address(RVA = "0xC90EAC", Offset = "0xC90EAC", VA = "0xC90EAC")]
		public TouchVisualizer()
		{
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0xC90EBC", Offset = "0xC90EBC", VA = "0xC90EBC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0xC90F4C", Offset = "0xC90F4C", VA = "0xC90F4C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0xC90EC4", Offset = "0xC90EC4", VA = "0xC90EC4")]
		private void ModeChange(DisplayMode nextDisplayMode)
		{
		}
	}
}
[Token(Token = "0x200016F")]
public class AudioAmbience
{
	[Token(Token = "0x2000170")]
	public struct Properties
	{
		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AudioClip audioClip;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Range loopSegment;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float fadeDuration;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool loop;

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x1641EC", Offset = "0x1641EC", VA = "0x1641EC")]
		public Properties(string name, AudioClip audioClip, float loopStart, float loopEnd, float fadeDuration)
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x164284", Offset = "0x164284", VA = "0x164284")]
		public Properties(string name, AudioClip audioClip, bool loop)
		{
		}
	}

	[Token(Token = "0x2000171")]
	public enum State
	{
		[Token(Token = "0x400056B")]
		NotPlaying,
		[Token(Token = "0x400056C")]
		Playing,
		[Token(Token = "0x400056D")]
		FadingIn,
		[Token(Token = "0x400056E")]
		FadingOut
	}

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private State mState;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private State mStateCache;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Properties mProperties;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AudioSource mAudioSource;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int miChannel;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AudioMixer sAudioMixer;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float mfStateChangeTime;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool mbIsFinished;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool mbOverideFade;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float mfFadeDuration;

	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static string[] saMixerPropertyNames;

	[Token(Token = "0x17000096")]
	public Properties properties
	{
		[Token(Token = "0x6000974")]
		[Address(RVA = "0x163980", Offset = "0x163980", VA = "0x163980")]
		get
		{
			return default(Properties);
		}
	}

	[Token(Token = "0x17000097")]
	public AudioClip audioClip
	{
		[Token(Token = "0x6000975")]
		[Address(RVA = "0x163994", Offset = "0x163994", VA = "0x163994")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000098")]
	public static AudioMixer audioMixer
	{
		[Token(Token = "0x6000976")]
		[Address(RVA = "0x16399C", Offset = "0x16399C", VA = "0x16399C")]
		set
		{
		}
	}

	[Token(Token = "0x17000099")]
	public State state
	{
		[Token(Token = "0x6000979")]
		[Address(RVA = "0x163E80", Offset = "0x163E80", VA = "0x163E80")]
		get
		{
			return default(State);
		}
		[Token(Token = "0x600097A")]
		[Address(RVA = "0x163E18", Offset = "0x163E18", VA = "0x163E18")]
		set
		{
		}
	}

	[Token(Token = "0x1700009A")]
	public bool isApproachingEnd
	{
		[Token(Token = "0x600097B")]
		[Address(RVA = "0x163E88", Offset = "0x163E88", VA = "0x163E88")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700009B")]
	public bool isFinished
	{
		[Token(Token = "0x600097C")]
		[Address(RVA = "0x163EEC", Offset = "0x163EEC", VA = "0x163EEC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000973")]
	[Address(RVA = "0x1638D4", Offset = "0x1638D4", VA = "0x1638D4")]
	public AudioAmbience(Properties properties, AudioSource audioSource, int channel)
	{
	}

	[Token(Token = "0x6000977")]
	[Address(RVA = "0x163A2C", Offset = "0x163A2C", VA = "0x163A2C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000978")]
	[Address(RVA = "0x163DF0", Offset = "0x163DF0", VA = "0x163DF0")]
	public void FadeOutWithDuration(float duration)
	{
	}

	[Token(Token = "0x600097D")]
	[Address(RVA = "0x163EF4", Offset = "0x163EF4", VA = "0x163EF4")]
	public void StopPlaying()
	{
	}
}
namespace StarChart
{
	[Token(Token = "0x2000172")]
	public class AudioManager : MonoBehaviour
	{
		[Token(Token = "0x2000173")]
		public enum AudioClips
		{
			[Token(Token = "0x4000582")]
			TapForward,
			[Token(Token = "0x4000583")]
			TapBack,
			[Token(Token = "0x4000584")]
			InfoExpand,
			[Token(Token = "0x4000585")]
			PlanetSelected,
			[Token(Token = "0x4000586")]
			PlanetDeSelected,
			[Token(Token = "0x4000587")]
			TutorialStageSuccess,
			[Token(Token = "0x4000588")]
			SkyViewIntro,
			[Token(Token = "0x4000589")]
			ExploreIntro,
			[Token(Token = "0x400058A")]
			VO_Orrery_IntroBogus,
			[Token(Token = "0x400058B")]
			MIT_Apollo11,
			[Token(Token = "0x400058C")]
			MIT_MarsScienceLab,
			[Token(Token = "0x400058D")]
			MIT_NewHorizons,
			[Token(Token = "0x400058E")]
			MIT_ISS,
			[Token(Token = "0x400058F")]
			VO_Orrery_AsteroidBelt,
			[Token(Token = "0x4000590")]
			VO_Orrery_Earth,
			[Token(Token = "0x4000591")]
			VO_Orrery_Mars,
			[Token(Token = "0x4000592")]
			VO_Orrery_Mercury,
			[Token(Token = "0x4000593")]
			VO_Orrery_Moon,
			[Token(Token = "0x4000594")]
			VO_Orrery_Neptune,
			[Token(Token = "0x4000595")]
			VO_Orrery_Pluto,
			[Token(Token = "0x4000596")]
			VO_Orrery_Saturn,
			[Token(Token = "0x4000597")]
			VO_Orrery_Sun,
			[Token(Token = "0x4000598")]
			VO_Orrery_Uranus,
			[Token(Token = "0x4000599")]
			VO_Orrery_Venus,
			[Token(Token = "0x400059A")]
			VO_Orrery_Jupiter,
			[Token(Token = "0x400059B")]
			VO_Orrery_Intro
		}

		[Token(Token = "0x2000174")]
		public enum AudioSources
		{
			[Token(Token = "0x400059D")]
			UI,
			[Token(Token = "0x400059E")]
			VoiceOver
		}

		[Token(Token = "0x2000175")]
		public enum Ambiences
		{
			[Token(Token = "0x40005A0")]
			Travelling,
			[Token(Token = "0x40005A1")]
			Earth,
			[Token(Token = "0x40005A2")]
			TNO,
			[Token(Token = "0x40005A3")]
			IceGiants,
			[Token(Token = "0x40005A4")]
			Giants,
			[Token(Token = "0x40005A5")]
			CloseToTheIceGiants,
			[Token(Token = "0x40005A6")]
			NearEarth,
			[Token(Token = "0x40005A7")]
			NearSomethingBig
		}

		[Token(Token = "0x400056F")]
		private const float FADE_OUT_AMBIENT_FOR_TRAVEL_DURATION = 2f;

		[Token(Token = "0x4000570")]
		private const float FADE_OUT_TRAVEL_FOR_AMBIENT_DURATION = 2f;

		[Token(Token = "0x4000571")]
		private const float FADE_OUT_AMBIENT_FOR_AMBIENT_DURATION = 6f;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public AudioMixer audioMixer;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AudioManager sInstance;

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioSource[] audioSources;

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AudioClip[] interfaceAudioClips;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip[] ambientAudioClips;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AudioClip[] spotFXAudioClips;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSource[] ambientAudioSources;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int miActiveAmbientChannel;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioAmbience mAudioAmbienceActive;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private AudioAmbience mAudioAmbienceCache;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioAmbience.Properties[] maAmbienceProperties;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private AudioSource mCurrentPlanetSource;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float mfQueueStartTime;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int miQueueIndex;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<AudioQueueItem> maAudioQueue;

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xE187B4", Offset = "0xE187B4", VA = "0xE187B4")]
		public AudioManager()
		{
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0xE187BC", Offset = "0xE187BC", VA = "0xE187BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xE18D88", Offset = "0xE18D88", VA = "0xE18D88")]
		private void Update()
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0xE190E0", Offset = "0xE190E0", VA = "0xE190E0")]
		private static AudioAmbience.Properties getProperty(Ambiences ambience)
		{
			return default(AudioAmbience.Properties);
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0xE15348", Offset = "0xE15348", VA = "0xE15348")]
		public static void PlayAudioClip(AudioClips clipEnum, AudioSources sourceEnum, float volume = 1f)
		{
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0xE16384", Offset = "0xE16384", VA = "0xE16384")]
		public static void StopAudioClip(AudioSources sourceEnum)
		{
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0xE19190", Offset = "0xE19190", VA = "0xE19190")]
		public static void StopAllAudio()
		{
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0xE19390", Offset = "0xE19390", VA = "0xE19390")]
		public static void SetAmbienceForState(StateManager.AppState state)
		{
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0xE18FAC", Offset = "0xE18FAC", VA = "0xE18FAC")]
		private void startAmbientAudio(AudioAmbience.Properties ambienceProperties, AudioAmbience.State state)
		{
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0xE19F4C", Offset = "0xE19F4C", VA = "0xE19F4C")]
		public static void StartAmbience(Ambiences lAmbience)
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0xE19FFC", Offset = "0xE19FFC", VA = "0xE19FFC")]
		public static void FadeAmbience()
		{
		}
	}
}
[Token(Token = "0x2000176")]
public class AudioQueueItem
{
	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private AudioClip mAudioClip;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float mfStartTime;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float mfVolume;

	[Token(Token = "0x1700009C")]
	public float startTime
	{
		[Token(Token = "0x600098D")]
		[Address(RVA = "0x1642D0", Offset = "0x1642D0", VA = "0x1642D0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600098C")]
	[Address(RVA = "0x1642A0", Offset = "0x1642A0", VA = "0x1642A0")]
	public AudioQueueItem(AudioClip audioClip, float startTime, float volume = 1f)
	{
	}

	[Token(Token = "0x600098E")]
	[Address(RVA = "0x1642D8", Offset = "0x1642D8", VA = "0x1642D8")]
	public void PlayFromSource(AudioSource source)
	{
	}
}
[Token(Token = "0x2000177")]
public class AnchorController : CameraInputController
{
	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected CelestialObject mTarget;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Vector3Double mvOffset;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Vector2 mvRotationAround;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected double mdDistanceFromTargetMin;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected double mdDistanceFromTargetMax;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected double mdDistanceFromTarget;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected double mdDistanceToTrack;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected bool mbCameraPositionNeedsSetting;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	protected bool mbJustArrived;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	protected Bookmark mArrivalBookmark;

	[Token(Token = "0x40005B5")]
	private const float START_EARTH_ASPECT_ANGLE_OFFSET = 65f;

	[Token(Token = "0x40005B6")]
	private const float INITIAL_Y_ROTATION_NON_VR = 14f;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector2 mvRotation;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private TimerSimple mCameraRotationTimer;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool mbShownIntro;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private OrbitVignette mOrbitVignette;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float mfVignetteFactor;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector2 mvSmoothedOrbitAngleSpeed;

	[Token(Token = "0x40005BD")]
	private const float kfOrbitAngleAcc = 0.2f;

	[Token(Token = "0x40005BE")]
	private const float kfOrbitAngleDampening = 0.25f;

	[Token(Token = "0x40005BF")]
	private const float kfMaxOrbitingSpeed = 20f;

	[Token(Token = "0x40005C0")]
	private const float kfSwipePlanetOrbitAngleAcc = 30f;

	[Token(Token = "0x40005C1")]
	private const float kfSwipeSystemOrbitAngleAcc = 20f;

	[Token(Token = "0x40005C2")]
	private const float kfSwipeOrbitAngleDampening = 0.25f;

	[Token(Token = "0x40005C3")]
	private const float kfSwipeMaxOrbitingSpeed = 90f;

	[Token(Token = "0x40005C4")]
	private const float kfSwipeSlowOrbitAngleDampening = 0.025f;

	[Token(Token = "0x40005C5")]
	private const float kfMaxVerticalRotation = 45f;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool mbOrbitInput;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool mbUseSmoothedOrbiting;

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
	private bool mbUseSwipedOrbiting;

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float mfFlyToYaw;

	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected bool mbInitialPositionSuccesfullySet;

	[Token(Token = "0x1700009D")]
	public Vector2 rotationAround
	{
		[Token(Token = "0x6000990")]
		[Address(RVA = "0x160ECC", Offset = "0x160ECC", VA = "0x160ECC")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x1700009E")]
	public Vector2 eulerRotation
	{
		[Token(Token = "0x6000991")]
		[Address(RVA = "0x160EE0", Offset = "0x160EE0", VA = "0x160EE0")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x1700009F")]
	public bool isOrbiting
	{
		[Token(Token = "0x6000992")]
		[Address(RVA = "0x160EF4", Offset = "0x160EF4", VA = "0x160EF4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A0")]
	public CelestialObject target
	{
		[Token(Token = "0x6000993")]
		[Address(RVA = "0x160F24", Offset = "0x160F24", VA = "0x160F24")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A1")]
	public Vector3Double offset
	{
		[Token(Token = "0x6000994")]
		[Address(RVA = "0x160F2C", Offset = "0x160F2C", VA = "0x160F2C")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x170000A2")]
	public bool initialPositionSuccessfullySet
	{
		[Token(Token = "0x6000998")]
		[Address(RVA = "0x1615C0", Offset = "0x1615C0", VA = "0x1615C0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600098F")]
	[Address(RVA = "0x160EBC", Offset = "0x160EBC", VA = "0x160EBC")]
	public AnchorController()
	{
	}

	[Token(Token = "0x6000995")]
	[Address(RVA = "0x160F40", Offset = "0x160F40", VA = "0x160F40")]
	public void ResetOffset()
	{
	}

	[Token(Token = "0x6000996")]
	[Address(RVA = "0x160F74", Offset = "0x160F74", VA = "0x160F74", Slot = "8")]
	public virtual void Initialise(CelestialObject lTarget)
	{
	}

	[Token(Token = "0x6000997")]
	[Address(RVA = "0x161404", Offset = "0x161404", VA = "0x161404")]
	public void Arrive([Optional] Bookmark arrivalBookmark)
	{
	}

	[Token(Token = "0x6000999")]
	[Address(RVA = "0x1615C8", Offset = "0x1615C8", VA = "0x1615C8")]
	private Vector2 Damp(Vector2 source, float smoothing, float dt)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600099A")]
	[Address(RVA = "0x1616C0", Offset = "0x1616C0", VA = "0x1616C0", Slot = "4")]
	public override void UpdateCamera()
	{
	}

	[Token(Token = "0x600099B")]
	[Address(RVA = "0x162988", Offset = "0x162988", VA = "0x162988", Slot = "6")]
	public override void AdjustRotationAround(Vector3 eulerRotation)
	{
	}

	[Token(Token = "0x600099C")]
	[Address(RVA = "0x163008", Offset = "0x163008", VA = "0x163008", Slot = "5")]
	public override void AdjustRotation(Vector3 eulerRotation)
	{
	}

	[Token(Token = "0x600099D")]
	[Address(RVA = "0x16302C", Offset = "0x16302C", VA = "0x16302C", Slot = "7")]
	public override void AdjustZoom(float zoomAdjustment, Vector2 viewportPosition)
	{
	}
}
[Token(Token = "0x2000178")]
public class Bookmark
{
	[Token(Token = "0x2000179")]
	public enum Type
	{
		[Token(Token = "0x40005D6")]
		CurrentState,
		[Token(Token = "0x40005D7")]
		SkyViewDefault
	}

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private CelestialObject mCelestialObject;

	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3Double mvTargetRelativePosition;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Quaternion mqCameraRotation;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector2 mvCameraEulerRotation;

	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Quaternion mVROrbitRotation;

	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float mfCameraFov;

	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public StateManager.AppState meAppState;

	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool mbShowGridSphere;

	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool mbShowCompass;

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
	private bool mbShowSky;

	[Token(Token = "0x170000A3")]
	public Vector3Double targetRelativePosition
	{
		[Token(Token = "0x600099F")]
		[Address(RVA = "0x162818", Offset = "0x162818", VA = "0x162818")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x170000A4")]
	public Vector2 cameraEulerRotation
	{
		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x162864", Offset = "0x162864", VA = "0x162864")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x600099E")]
	[Address(RVA = "0x1684E4", Offset = "0x1684E4", VA = "0x1684E4")]
	public Bookmark(Type type)
	{
	}

	[Token(Token = "0x60009A1")]
	[Address(RVA = "0x168D14", Offset = "0x168D14", VA = "0x168D14")]
	public void Restore()
	{
	}

	[Token(Token = "0x60009A2")]
	[Address(RVA = "0x16904C", Offset = "0x16904C", VA = "0x16904C")]
	public CelestialObject GetSelectableObject()
	{
		return null;
	}
}
[Token(Token = "0x200017A")]
public class CameraClipPlaneController : MonoBehaviour
{
	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public StarRenderer starRenderer;

	[Token(Token = "0x40005D9")]
	private const float CLIP_DISTANCE_PUSH_OUT_FACTOR = 0.15f;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Camera mCamera;

	[Token(Token = "0x60009A3")]
	[Address(RVA = "0x16C56C", Offset = "0x16C56C", VA = "0x16C56C")]
	public CameraClipPlaneController()
	{
	}

	[Token(Token = "0x60009A4")]
	[Address(RVA = "0x16C574", Offset = "0x16C574", VA = "0x16C574")]
	private void Start()
	{
	}

	[Token(Token = "0x60009A5")]
	[Address(RVA = "0x16C5DC", Offset = "0x16C5DC", VA = "0x16C5DC")]
	private void Update()
	{
	}
}
[Token(Token = "0x200017B")]
public class CameraInputController : MonoBehaviour
{
	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	protected CameraWrapper mCameraWrapper;

	[Token(Token = "0x60009A6")]
	[Address(RVA = "0x160EC4", Offset = "0x160EC4", VA = "0x160EC4")]
	public CameraInputController()
	{
	}

	[Token(Token = "0x60009A7")]
	[Address(RVA = "0x16C644", Offset = "0x16C644", VA = "0x16C644")]
	protected void Awake()
	{
	}

	[Token(Token = "0x60009A8")]
	[Address(RVA = "0x16C6C4", Offset = "0x16C6C4", VA = "0x16C6C4")]
	protected void Start()
	{
	}

	[Token(Token = "0x60009A9")]
	[Address(RVA = "0x16C6C8", Offset = "0x16C6C8", VA = "0x16C6C8", Slot = "4")]
	public virtual void UpdateCamera()
	{
	}

	[Token(Token = "0x60009AA")]
	[Address(RVA = "0x16C6CC", Offset = "0x16C6CC", VA = "0x16C6CC", Slot = "5")]
	public virtual void AdjustRotation(Vector3 eulerRotation)
	{
	}

	[Token(Token = "0x60009AB")]
	[Address(RVA = "0x16C6D0", Offset = "0x16C6D0", VA = "0x16C6D0", Slot = "6")]
	public virtual void AdjustRotationAround(Vector3 eulerRotation)
	{
	}

	[Token(Token = "0x60009AC")]
	[Address(RVA = "0x16C6D4", Offset = "0x16C6D4", VA = "0x16C6D4", Slot = "7")]
	public virtual void AdjustZoom(float zoomAdjustment, Vector2 viewportPosition)
	{
	}
}
[Token(Token = "0x200017C")]
public class CameraRootController : MonoBehaviour
{
	[Token(Token = "0x200017D")]
	public enum States
	{
		[Token(Token = "0x40005E3")]
		None,
		[Token(Token = "0x40005E4")]
		ExploringInSpace,
		[Token(Token = "0x40005E5")]
		SkyView,
		[Token(Token = "0x40005E6")]
		OnPlanetSurface,
		[Token(Token = "0x40005E7")]
		HumanScaleInSpace
	}

	[Token(Token = "0x40005DC")]
	private const float START_ANGLE_OFFSET_TRACKED = 0f;

	[Token(Token = "0x40005DD")]
	private const float START_ANGLE_OFFSET_NON_TRACKED = 14f;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public CameraWrapper cameraWrapper;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Quaternion mqBaseRotation;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3Double mvOffset;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private States meState;

	[Token(Token = "0x170000A5")]
	public Quaternion baseRotation
	{
		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x16C86C", Offset = "0x16C86C", VA = "0x16C86C")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x170000A6")]
	public Vector3Double offset
	{
		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x16C880", Offset = "0x16C880", VA = "0x16C880")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x60009AD")]
	[Address(RVA = "0x16C864", Offset = "0x16C864", VA = "0x16C864")]
	public CameraRootController()
	{
	}

	[Token(Token = "0x60009B0")]
	[Address(RVA = "0x16C894", Offset = "0x16C894", VA = "0x16C894")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009B1")]
	[Address(RVA = "0x16C8A0", Offset = "0x16C8A0", VA = "0x16C8A0")]
	public void SetStateForMode(States leState)
	{
	}

	[Token(Token = "0x60009B2")]
	[Address(RVA = "0x16CBA4", Offset = "0x16CBA4", VA = "0x16CBA4")]
	public void UpdateManually()
	{
	}

	[Token(Token = "0x60009B3")]
	[Address(RVA = "0x16D128", Offset = "0x16D128", VA = "0x16D128")]
	private void rotateCameraToPointOnPlanet(Planet planet)
	{
	}

	[Token(Token = "0x60009B4")]
	[Address(RVA = "0x16D570", Offset = "0x16D570", VA = "0x16D570")]
	private void placeCameraOnPlanetSurface(Planet planet)
	{
	}
}
[Token(Token = "0x200017E")]
public class CameraWrapper : MonoBehaviour
{
	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Camera camera;

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public CameraRootController cameraRootController;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Transform mCameraRootTransform;

	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Ray mRay;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Quaternion mRotation;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Spherical mRaDec;

	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 mvUp;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3Double mvPositionFromTour;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Quaternion mqTourRotation;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3Double mvLocalOffset;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3Double mvPositionHeliocentric;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3Double mvWorldPosition;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CameraWrapper sInstance;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private CameraInputController mCameraInputController;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private LookAtController mLookAtController;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private FlyToController mFlyToController;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private bool mbAspectRatioIsOne;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Quaternion mqRotationDetachedOffset;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Quaternion mqRotationCached;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Quaternion mVROrbitRotation;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Plane[] sFrustumPlanes;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Planet mRelativeCelestialObject;

	[Token(Token = "0x170000A7")]
	public GameObject cameraGameObject
	{
		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x16E4F4", Offset = "0x16E4F4", VA = "0x16E4F4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A8")]
	public Transform cameraRootTransform
	{
		[Token(Token = "0x60009B7")]
		[Address(RVA = "0x16E51C", Offset = "0x16E51C", VA = "0x16E51C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A9")]
	public Vector3Double positionFromTour
	{
		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x16E524", Offset = "0x16E524", VA = "0x16E524")]
		set
		{
		}
	}

	[Token(Token = "0x170000AA")]
	public Quaternion tourRotation
	{
		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x16E54C", Offset = "0x16E54C", VA = "0x16E54C")]
		set
		{
		}
	}

	[Token(Token = "0x170000AB")]
	public Vector3Double localOffset
	{
		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x16E55C", Offset = "0x16E55C", VA = "0x16E55C")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x170000AC")]
	public FlyToController flyToController
	{
		[Token(Token = "0x60009BC")]
		[Address(RVA = "0x16E570", Offset = "0x16E570", VA = "0x16E570")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000AD")]
	public Ray ray
	{
		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x16FE8C", Offset = "0x16FE8C", VA = "0x16FE8C")]
		get
		{
			return default(Ray);
		}
	}

	[Token(Token = "0x170000AE")]
	public Quaternion rotation
	{
		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x16FEA0", Offset = "0x16FEA0", VA = "0x16FEA0")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x170000AF")]
	public Quaternion localRotation
	{
		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x168CAC", Offset = "0x168CAC", VA = "0x168CAC")]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x162878", Offset = "0x162878", VA = "0x162878")]
		set
		{
		}
	}

	[Token(Token = "0x170000B0")]
	public Vector3 up
	{
		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x17002C", Offset = "0x17002C", VA = "0x17002C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000B1")]
	public Spherical raDec
	{
		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x17003C", Offset = "0x17003C", VA = "0x17003C")]
		get
		{
			return default(Spherical);
		}
	}

	[Token(Token = "0x170000B2")]
	public bool selectionRayIsValid
	{
		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x170050", Offset = "0x170050", VA = "0x170050")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B3")]
	public Ray selectionRay
	{
		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x1701E4", Offset = "0x1701E4", VA = "0x1701E4")]
		get
		{
			return default(Ray);
		}
	}

	[Token(Token = "0x170000B4")]
	public Vector3Double positionHeliocentric
	{
		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x16283C", Offset = "0x16283C", VA = "0x16283C")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x170000B5")]
	public float verticalFOV
	{
		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x168ABC", Offset = "0x168ABC", VA = "0x168ABC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x168F9C", Offset = "0x168F9C", VA = "0x168F9C")]
		set
		{
		}
	}

	[Token(Token = "0x170000B6")]
	public float aspectRatio
	{
		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x1706A0", Offset = "0x1706A0", VA = "0x1706A0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000B7")]
	public bool isAttachedToCamera
	{
		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x17077C", Offset = "0x17077C", VA = "0x17077C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B8")]
	public Vector3 position
	{
		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x16FDF0", Offset = "0x16FDF0", VA = "0x16FDF0")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000B9")]
	public AnchorController anchorController
	{
		[Token(Token = "0x60009DF")]
		[Address(RVA = "0x168C14", Offset = "0x168C14", VA = "0x168C14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000BA")]
	public HumanScaleController humanScaleController
	{
		[Token(Token = "0x60009E0")]
		[Address(RVA = "0x16D8E8", Offset = "0x16D8E8", VA = "0x16D8E8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000BB")]
	public OrreryController orreryController
	{
		[Token(Token = "0x60009E1")]
		[Address(RVA = "0x16FD58", Offset = "0x16FD58", VA = "0x16FD58")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60009B5")]
	[Address(RVA = "0x16E4EC", Offset = "0x16E4EC", VA = "0x16E4EC")]
	public CameraWrapper()
	{
	}

	[Token(Token = "0x60009BB")]
	[Address(RVA = "0x168A30", Offset = "0x168A30", VA = "0x168A30")]
	public static CameraWrapper GetInstance()
	{
		return null;
	}

	[Token(Token = "0x60009BD")]
	[Address(RVA = "0x16DBB0", Offset = "0x16DBB0", VA = "0x16DBB0")]
	public void SetRelativeObject(Planet relativeObject)
	{
	}

	[Token(Token = "0x60009BE")]
	[Address(RVA = "0x16E578", Offset = "0x16E578", VA = "0x16E578")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009BF")]
	[Address(RVA = "0x16E57C", Offset = "0x16E57C", VA = "0x16E57C")]
	private void Start()
	{
	}

	[Token(Token = "0x60009C0")]
	[Address(RVA = "0x16EA48", Offset = "0x16EA48", VA = "0x16EA48")]
	private void Update()
	{
	}

	[Token(Token = "0x60009C1")]
	[Address(RVA = "0x16FE58", Offset = "0x16FE58", VA = "0x16FE58")]
	public Vector3Double OffsetVectorRotated()
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x60009C2")]
	[Address(RVA = "0x16E8E8", Offset = "0x16E8E8", VA = "0x16E8E8")]
	private void initialiseVR()
	{
	}

	[Token(Token = "0x60009C3")]
	[Address(RVA = "0x16FC60", Offset = "0x16FC60", VA = "0x16FC60")]
	public void UpdateCurrentPlanetPosition()
	{
	}

	[Token(Token = "0x60009C8")]
	[Address(RVA = "0x16282C", Offset = "0x16282C", VA = "0x16282C")]
	public void SetVROrbitRotation(Quaternion lRotation)
	{
	}

	[Token(Token = "0x60009C9")]
	[Address(RVA = "0x162850", Offset = "0x162850", VA = "0x162850")]
	public Quaternion GetVROrbitRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60009CA")]
	[Address(RVA = "0x16FEB4", Offset = "0x16FEB4", VA = "0x16FEB4")]
	public Vector3 WorldToViewportPoint(Vector3 position)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60009CB")]
	[Address(RVA = "0x16FF08", Offset = "0x16FF08", VA = "0x16FF08")]
	public Vector3 ScreenToViewportPoint(float x, float y)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60009CC")]
	[Address(RVA = "0x16FF84", Offset = "0x16FF84", VA = "0x16FF84")]
	public Vector3 ScreenToViewportPoint(Vector3 position)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60009CD")]
	[Address(RVA = "0x16FFD8", Offset = "0x16FFD8", VA = "0x16FFD8")]
	public Vector3 ViewportToWorldPoint(Vector3 position)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60009D2")]
	[Address(RVA = "0x170440", Offset = "0x170440", VA = "0x170440")]
	public float DotSelectionDirectionWithPosition(Vector3 position)
	{
		return default(float);
	}

	[Token(Token = "0x60009D3")]
	[Address(RVA = "0x1705D8", Offset = "0x1705D8", VA = "0x1705D8")]
	public double DistanceFromCelestialObjectSquared(CelestialObject celestialObject)
	{
		return default(double);
	}

	[Token(Token = "0x60009DA")]
	[Address(RVA = "0x17080C", Offset = "0x17080C", VA = "0x17080C")]
	private void removeExistingInputController()
	{
	}

	[Token(Token = "0x60009DB")]
	[Address(RVA = "0x1708E4", Offset = "0x1708E4", VA = "0x1708E4")]
	public CameraInputController SetControllerToAnchor(CelestialObject target)
	{
		return null;
	}

	[Token(Token = "0x60009DC")]
	[Address(RVA = "0x170AEC", Offset = "0x170AEC", VA = "0x170AEC")]
	public void SetControllerToSkyView()
	{
	}

	[Token(Token = "0x60009DD")]
	[Address(RVA = "0x170BA4", Offset = "0x170BA4", VA = "0x170BA4")]
	public void SetControllerToHumanScale(Transform lSceneObjectTransform, Planet host)
	{
	}

	[Token(Token = "0x60009DE")]
	[Address(RVA = "0x170DC0", Offset = "0x170DC0", VA = "0x170DC0")]
	public void SetControllerToOrrery()
	{
	}

	[Token(Token = "0x60009E2")]
	[Address(RVA = "0x170F9C", Offset = "0x170F9C", VA = "0x170F9C")]
	public void ResetOffset()
	{
	}

	[Token(Token = "0x60009E3")]
	[Address(RVA = "0x171088", Offset = "0x171088", VA = "0x171088")]
	public FlyToController AddFlyToControllerAndCreateTour(CelestialObject destination, StateManager.AppState previousState, bool lbShortcut)
	{
		return null;
	}

	[Token(Token = "0x60009E4")]
	[Address(RVA = "0x171A20", Offset = "0x171A20", VA = "0x171A20")]
	public void RemoveFlyToController()
	{
	}

	[Token(Token = "0x60009E5")]
	[Address(RVA = "0x171AB4", Offset = "0x171AB4", VA = "0x171AB4")]
	public void RotateAround(Vector3 eulerRotation)
	{
	}

	[Token(Token = "0x60009E6")]
	[Address(RVA = "0x171B2C", Offset = "0x171B2C", VA = "0x171B2C")]
	public void Rotate(Vector3 eulerRotation)
	{
	}

	[Token(Token = "0x60009E7")]
	[Address(RVA = "0x171D88", Offset = "0x171D88", VA = "0x171D88")]
	public void Zoom(float zoomAdjustment, Vector2 viewportPosition)
	{
	}

	[Token(Token = "0x60009E8")]
	[Address(RVA = "0x171DEC", Offset = "0x171DEC", VA = "0x171DEC")]
	public void LookAt(ICameraTrackable targetObject, bool frameObject)
	{
	}

	[Token(Token = "0x60009E9")]
	[Address(RVA = "0x171F34", Offset = "0x171F34", VA = "0x171F34")]
	public bool GetBoundsInFrustum(Bounds bounds)
	{
		return default(bool);
	}

	[Token(Token = "0x60009EA")]
	[Address(RVA = "0x172000", Offset = "0x172000", VA = "0x172000")]
	public float GetBoundsFractionInFrustum(Bounds bounds)
	{
		return default(float);
	}

	[Token(Token = "0x60009EB")]
	[Address(RVA = "0x172290", Offset = "0x172290", VA = "0x172290")]
	public bool IsPointCloserThanNearClipPlane(Vector3 lPoint)
	{
		return default(bool);
	}

	[Token(Token = "0x60009EC")]
	[Address(RVA = "0x172374", Offset = "0x172374", VA = "0x172374")]
	public bool IsSphereCloserThanNearClipPlane(Vector3 lPoint, float lfRadius)
	{
		return default(bool);
	}

	[Token(Token = "0x60009ED")]
	[Address(RVA = "0x172474", Offset = "0x172474", VA = "0x172474")]
	private void OnDrawGizmos()
	{
	}
}
[Token(Token = "0x200017F")]
public class EclipticRotation : MonoBehaviour
{
	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform eclipticTransform;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool debugRotationIsIdentity;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private CameraRootController mCameraRootController;

	[Token(Token = "0x60009EF")]
	[Address(RVA = "0x18959C", Offset = "0x18959C", VA = "0x18959C")]
	public EclipticRotation()
	{
	}

	[Token(Token = "0x60009F0")]
	[Address(RVA = "0x1895A4", Offset = "0x1895A4", VA = "0x1895A4")]
	private void Start()
	{
	}

	[Token(Token = "0x60009F1")]
	[Address(RVA = "0x18960C", Offset = "0x18960C", VA = "0x18960C")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000180")]
public class FlyToController : MonoBehaviour
{
	[Token(Token = "0x4000601")]
	public const float MIN_FLIGHT_TIME = 5f;

	[Token(Token = "0x4000602")]
	public const float MAX_FLIGHT_TIME = 15f;

	[Token(Token = "0x4000603")]
	public const float MIN_FLIGHT_TIME_VR = 15f;

	[Token(Token = "0x4000604")]
	public const float MAX_FLIGHT_TIME_VR = 30f;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float FLIGHT_TIME_BETWEEN_SYSTEM_AND_EXPLORE;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static Range sFlightTimeRange;

	[Token(Token = "0x4000607")]
	private const float LOOK_AT_TIME_MUL = 0.4f;

	[Token(Token = "0x4000608")]
	private const float DEP_DIST_MUL = 10f;

	[Token(Token = "0x4000609")]
	private const float DEST_DIST_MUL = 50f;

	[Token(Token = "0x400060A")]
	private const float DEP_TIME_MUL = 0.25f;

	[Token(Token = "0x400060B")]
	private const float DEP_BACK_TIME_MUL = 0.25f;

	[Token(Token = "0x400060C")]
	private const float ARR_TIME_MUL = 0.65f;

	[Token(Token = "0x400060D")]
	private const float DEST_ANGLE = 45f;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private CelestialObject mFlyToObject;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static float sfFlightTime;

	[Token(Token = "0x170000BC")]
	public CelestialObject flyToObject
	{
		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x1906F8", Offset = "0x1906F8", VA = "0x1906F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000BD")]
	public static float flightTime
	{
		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x190700", Offset = "0x190700", VA = "0x190700")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60009F2")]
	[Address(RVA = "0x190648", Offset = "0x190648", VA = "0x190648")]
	static FlyToController()
	{
	}

	[Token(Token = "0x60009F3")]
	[Address(RVA = "0x1906F0", Offset = "0x1906F0", VA = "0x1906F0")]
	public FlyToController()
	{
	}

	[Token(Token = "0x60009F6")]
	[Address(RVA = "0x19078C", Offset = "0x19078C", VA = "0x19078C")]
	private void Start()
	{
	}

	[Token(Token = "0x60009F7")]
	[Address(RVA = "0x190790", Offset = "0x190790", VA = "0x190790")]
	private void Update()
	{
	}

	[Token(Token = "0x60009F8")]
	[Address(RVA = "0x190794", Offset = "0x190794", VA = "0x190794")]
	private void setFlightTime(Planet departure, Planet destination)
	{
	}

	[Token(Token = "0x60009F9")]
	[Address(RVA = "0x171240", Offset = "0x171240", VA = "0x171240")]
	public void SetupFlyToAnimation(CameraWrapper cameraWrapper, Planet departure, Planet destination, StateManager.AppState previousAppState, bool lbShortcut = false)
	{
	}

	[Token(Token = "0x60009FA")]
	[Address(RVA = "0x1909F0", Offset = "0x1909F0", VA = "0x1909F0")]
	private void createVelocities(KeyFrameSystem lKFSystem, Planet departure, Planet destination, Vector3Double cameraPos, FlyToPositionEvaluator positionEvaluator)
	{
	}

	[Token(Token = "0x60009FB")]
	[Address(RVA = "0x190C70", Offset = "0x190C70", VA = "0x190C70")]
	private void createInterplanetaryVelocities(KeyFrameSystem lKFSystem, Planet departure, Planet destination, Vector3Double cameraPos, FlyToPositionEvaluator positionEvaluator)
	{
	}

	[Token(Token = "0x60009FC")]
	[Address(RVA = "0x1914A0", Offset = "0x1914A0", VA = "0x1914A0")]
	private Planet getPlanetSystemParent(Planet planet)
	{
		return null;
	}
}
[Token(Token = "0x2000181")]
public class FlyToPositionEvaluator
{
	[Token(Token = "0x4000610")]
	private const double DEFAULT_DISTANCE_SCALE_FACTOR = 2.8;

	[Token(Token = "0x4000611")]
	private const bool AJDUST_FOV = false;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private KeyFrameSystem mKFSystem;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Planet mDeparture;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Planet mDestination;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private CameraWrapper mCameraWrapper;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3Double mvCameraPosition;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private double mdDistanceFromCamera;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float mfRoll;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float mfFinalFOV;

	[Token(Token = "0x170000BE")]
	public float finalFOV
	{
		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xC34BF0", Offset = "0xC34BF0", VA = "0xC34BF0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000BF")]
	public float roll
	{
		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xC34BF8", Offset = "0xC34BF8", VA = "0xC34BF8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60009FD")]
	[Address(RVA = "0xC33468", Offset = "0xC33468", VA = "0xC33468")]
	public FlyToPositionEvaluator(KeyFrameSystem KFSystem, CelestialObject departure, CelestialObject destination, CameraWrapper cameraWrapper)
	{
	}

	[Token(Token = "0x60009FE")]
	[Address(RVA = "0xC33A28", Offset = "0xC33A28", VA = "0xC33A28")]
	private float calculateFOVFromOffset(double offset)
	{
		return default(float);
	}

	[Token(Token = "0x60009FF")]
	[Address(RVA = "0xC33AE8", Offset = "0xC33AE8", VA = "0xC33AE8")]
	public void CreatePositions(float flightTime)
	{
	}

	[Token(Token = "0x6000A02")]
	[Address(RVA = "0xC34640", Offset = "0xC34640", VA = "0xC34640")]
	private Vector3Double calculateDestinationOffset()
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000A03")]
	[Address(RVA = "0xC33904", Offset = "0xC33904", VA = "0xC33904")]
	public static double GetCameraDistanceOffset(Planet planet, StateManager.AppState state)
	{
		return default(double);
	}

	[Token(Token = "0x6000A04")]
	[Address(RVA = "0xC34DA0", Offset = "0xC34DA0", VA = "0xC34DA0")]
	public static double GetCameraDistanceForPlanet(Planet planet)
	{
		return default(double);
	}

	[Token(Token = "0x6000A05")]
	[Address(RVA = "0xC3500C", Offset = "0xC3500C", VA = "0xC3500C")]
	private static double systemDistanceMultipler(Planet planet)
	{
		return default(double);
	}

	[Token(Token = "0x6000A06")]
	[Address(RVA = "0xC34C00", Offset = "0xC34C00", VA = "0xC34C00")]
	public static double GetCameraDistanceForSystem(Planet planet)
	{
		return default(double);
	}
}
[Token(Token = "0x2000182")]
public class HDRManager : MonoBehaviour
{
	[Token(Token = "0x400061A")]
	private const float HDR_STAR_BRIGHTNESS = 60000f;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Lens mLens;

	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HDRManager sInstance;

	[Token(Token = "0x170000C0")]
	public static Lens lens
	{
		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xC3BE38", Offset = "0xC3BE38", VA = "0xC3BE38")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000A07")]
	[Address(RVA = "0xC3BE30", Offset = "0xC3BE30", VA = "0xC3BE30")]
	public HDRManager()
	{
	}

	[Token(Token = "0x6000A09")]
	[Address(RVA = "0xC3BED4", Offset = "0xC3BED4", VA = "0xC3BED4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A0A")]
	[Address(RVA = "0xC3BFE0", Offset = "0xC3BFE0", VA = "0xC3BFE0")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000183")]
public class HDRProperties
{
	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private string msMaterialPropertyName;

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Range mBrightnessRange;

	[Token(Token = "0x170000C1")]
	public Range range
	{
		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xC3C6B8", Offset = "0xC3C6B8", VA = "0xC3C6B8")]
		set
		{
		}
	}

	[Token(Token = "0x6000A0C")]
	[Address(RVA = "0xC3C65C", Offset = "0xC3C65C", VA = "0xC3C65C")]
	public HDRProperties(float minBrightness, float maxBrightness, string materialPropertyName = "exposure")
	{
	}

	[Token(Token = "0x6000A0E")]
	[Address(RVA = "0xC3C6C4", Offset = "0xC3C6C4", VA = "0xC3C6C4")]
	public void SetMaterialExposure(Material material)
	{
	}
}
[Token(Token = "0x2000184")]
public class Lens
{
	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private float mfLuminance;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Range mfLuminanceRange;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float mfIris;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float mfIrisAdjustmentSpeedPerSec;

	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float mfNormalisedIrisOpening;

	[Token(Token = "0x170000C2")]
	public float normalizedIrisOpening
	{
		[Token(Token = "0x6000A14")]
		[Address(RVA = "0xC3C7C0", Offset = "0xC3C7C0", VA = "0xC3C7C0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000A0F")]
	[Address(RVA = "0xC3BF84", Offset = "0xC3BF84", VA = "0xC3BF84")]
	public Lens()
	{
	}

	[Token(Token = "0x6000A10")]
	[Address(RVA = "0xC3C474", Offset = "0xC3C474", VA = "0xC3C474")]
	public void ClearSceneLuminance()
	{
	}

	[Token(Token = "0x6000A11")]
	[Address(RVA = "0xC3C49C", Offset = "0xC3C49C", VA = "0xC3C49C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000A12")]
	[Address(RVA = "0xC3C480", Offset = "0xC3C480", VA = "0xC3C480")]
	public void IncreaseLuminance(float ratio, float luminance)
	{
	}

	[Token(Token = "0x6000A13")]
	[Address(RVA = "0xC4DF98", Offset = "0xC4DF98", VA = "0xC4DF98")]
	private float getSaturatedSceneLuminance()
	{
		return default(float);
	}
}
[Token(Token = "0x2000185")]
public class SceneIlluminationController : MonoBehaviour
{
	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<Material> materials;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Range valueRange;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Color mcFogColor;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Color> mMatColors;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private List<bool> mHasColorProperty;

	[Token(Token = "0x6000A15")]
	[Address(RVA = "0xDF69A0", Offset = "0xDF69A0", VA = "0xDF69A0")]
	public SceneIlluminationController()
	{
	}

	[Token(Token = "0x6000A16")]
	[Address(RVA = "0xDF69A8", Offset = "0xDF69A8", VA = "0xDF69A8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A17")]
	[Address(RVA = "0xDF6CE8", Offset = "0xDF6CE8", VA = "0xDF6CE8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A18")]
	[Address(RVA = "0xDF6F80", Offset = "0xDF6F80", VA = "0xDF6F80")]
	private void OnDisable()
	{
	}
}
[Token(Token = "0x2000186")]
public class HumanScaleController : CameraInputController
{
	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected Vector2 mvRotationAround;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Vector3Double mvOffset;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private OrbitVignette mOrbitVignette;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float mfVignetteFactor;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector2 mvSmoothedOrbitAngleSpeed;

	[Token(Token = "0x400062E")]
	private const float kfOrbitAngleAcc = 0.2f;

	[Token(Token = "0x400062F")]
	private const float kfOrbitAngleDampening = 0.25f;

	[Token(Token = "0x4000630")]
	private const float kfMaxOrbitingSpeed = 20f;

	[Token(Token = "0x4000631")]
	private const float kfSwipeOrbitAngleAcc = 15f;

	[Token(Token = "0x4000632")]
	private const float kfSwipeOrbitAngleDampening = 0.25f;

	[Token(Token = "0x4000633")]
	private const float kfSwipeMaxOrbitingSpeed = 90f;

	[Token(Token = "0x4000634")]
	private const float kfSwipeSlowOrbitAngleDampening = 0.025f;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool mbOrbitInput;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool mbUseSmoothedOrbiting;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	private bool mbUseSwipedOrbiting;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
	private bool mbInSpace;

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float mfPlayerDistance;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform mPivotTransform;

	[Token(Token = "0x170000C3")]
	public Vector2 rotationAround
	{
		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xC3CF94", Offset = "0xC3CF94", VA = "0xC3CF94")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x170000C4")]
	public Vector3Double offset
	{
		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0xC3CFA8", Offset = "0xC3CFA8", VA = "0xC3CFA8")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x6000A19")]
	[Address(RVA = "0xC3CF8C", Offset = "0xC3CF8C", VA = "0xC3CF8C")]
	public HumanScaleController()
	{
	}

	[Token(Token = "0x6000A1C")]
	[Address(RVA = "0xC3CFBC", Offset = "0xC3CFBC", VA = "0xC3CFBC")]
	private Vector2 Damp(Vector2 source, float smoothing, float dt)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000A1D")]
	[Address(RVA = "0xC3D0B8", Offset = "0xC3D0B8", VA = "0xC3D0B8")]
	public void SetSceneObjectTransform(Transform lSceneObjectTransform)
	{
	}

	[Token(Token = "0x6000A1E")]
	[Address(RVA = "0xC3DB1C", Offset = "0xC3DB1C", VA = "0xC3DB1C")]
	private new void Start()
	{
	}

	[Token(Token = "0x6000A1F")]
	[Address(RVA = "0xC3DBD4", Offset = "0xC3DBD4", VA = "0xC3DBD4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A20")]
	[Address(RVA = "0xC3DC7C", Offset = "0xC3DC7C", VA = "0xC3DC7C", Slot = "4")]
	public override void UpdateCamera()
	{
	}

	[Token(Token = "0x6000A21")]
	[Address(RVA = "0xC3E328", Offset = "0xC3E328", VA = "0xC3E328")]
	public void SetLookRotation(float lfLookAngle)
	{
	}

	[Token(Token = "0x6000A22")]
	[Address(RVA = "0xC3E440", Offset = "0xC3E440", VA = "0xC3E440", Slot = "5")]
	public override void AdjustRotation(Vector3 eulerRotation)
	{
	}

	[Token(Token = "0x6000A23")]
	[Address(RVA = "0xC3E638", Offset = "0xC3E638", VA = "0xC3E638", Slot = "6")]
	public override void AdjustRotationAround(Vector3 eulerRotation)
	{
	}
}
[Token(Token = "0x2000187")]
public class LookAtController
{
	[Token(Token = "0x400063B")]
	private const float LOOK_AT_ROTATION_ANGLE_DELTA_MAX = 5f;

	[Token(Token = "0x400063C")]
	private const float EPSILON = 0.001f;

	[Token(Token = "0x400063D")]
	private const float ACCELERATION_DURATION = 1f;

	[Token(Token = "0x400063E")]
	private const float ZOOM_DELTA_PER_SECOND = 90f;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private ICameraTrackable mTargetObject;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Vector3 mvLookAtRotation;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool mbFrameObject;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float mfStartFOV;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float mfEndFOV;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float mfFov;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float mfStartTime;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool mbFinished;

	[Token(Token = "0x170000C5")]
	public Vector3 lookAtRotation
	{
		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xC54C3C", Offset = "0xC54C3C", VA = "0xC54C3C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000C6")]
	public float fov
	{
		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xC54C4C", Offset = "0xC54C4C", VA = "0xC54C4C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000C7")]
	public bool isFinished
	{
		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xC54C54", Offset = "0xC54C54", VA = "0xC54C54")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000A24")]
	[Address(RVA = "0xC54934", Offset = "0xC54934", VA = "0xC54934")]
	private LookAtController(ICameraTrackable targetObject, bool frameObject)
	{
	}

	[Token(Token = "0x6000A28")]
	[Address(RVA = "0xC54C5C", Offset = "0xC54C5C", VA = "0xC54C5C")]
	public static LookAtController Create(ICameraTrackable targetObject, bool frameObject)
	{
		return null;
	}

	[Token(Token = "0x6000A29")]
	[Address(RVA = "0xC54D18", Offset = "0xC54D18", VA = "0xC54D18")]
	public void Update(Quaternion cameraRotation, Vector3 cameraPosition)
	{
	}
}
[Token(Token = "0x2000188")]
public class KeyFrameActivation
{
	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private bool activated;

	[Token(Token = "0x170000C8")]
	public bool Activated
	{
		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xC48DE8", Offset = "0xC48DE8", VA = "0xC48DE8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xC48DF0", Offset = "0xC48DF0", VA = "0xC48DF0")]
		set
		{
		}
	}

	[Token(Token = "0x6000A2A")]
	[Address(RVA = "0xC48DE0", Offset = "0xC48DE0", VA = "0xC48DE0")]
	public KeyFrameActivation()
	{
	}
}
[Token(Token = "0x2000189")]
public class VOKeyFrame : KeyFrameActivation
{
	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public long mTimeStamp;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioManager.AudioClips mClip;

	[Token(Token = "0x6000A2D")]
	[Address(RVA = "0xD28A5C", Offset = "0xD28A5C", VA = "0xD28A5C")]
	public VOKeyFrame()
	{
	}
}
[Token(Token = "0x200018A")]
public class Text3DKeyFrame : KeyFrameActivation
{
	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public long mTimeStamp;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float mTimeDuration;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Planets.Names mPlanetTarget;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float mTiltAngle;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float mStartAngle;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float mExtraScale;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float mSpeed;

	[Token(Token = "0x6000A2E")]
	[Address(RVA = "0xC9BE54", Offset = "0xC9BE54", VA = "0xC9BE54")]
	public Text3DKeyFrame()
	{
	}
}
[Token(Token = "0x200018B")]
public class SpatialKeyFrame
{
	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public long mTimeStamp;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 mPosition;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector2 mAngle;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Planets.Names mPlanetTarget;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<VOKeyFrame> voKeyFrames;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public List<Text3DKeyFrame> text3DKeyFrames;

	[Token(Token = "0x6000A2F")]
	[Address(RVA = "0xE1643C", Offset = "0xE1643C", VA = "0xE1643C")]
	public SpatialKeyFrame()
	{
	}

	[Token(Token = "0x6000A30")]
	[Address(RVA = "0xE164FC", Offset = "0xE164FC", VA = "0xE164FC")]
	public void AddVOKey(VOKeyFrame _key)
	{
	}

	[Token(Token = "0x6000A31")]
	[Address(RVA = "0xE16578", Offset = "0xE16578", VA = "0xE16578")]
	public void Add3DTextKey(Text3DKeyFrame _key)
	{
	}
}
[Token(Token = "0x200018C")]
public class OrreryController : CameraInputController
{
	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<string, AudioManager.AudioClips> voMapping;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Vector3 mvIntroDirection;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 mvStartPos;

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3Double mvOffset;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 mvLookRotation;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int introStartIndex;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool mbIntroIsRunning;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float mfRotation;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float mDistCovered;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private long journeyTime;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<SpatialKeyFrame> introKeyFrames;

	[Token(Token = "0x170000C9")]
	public Vector3Double offset
	{
		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xC72394", Offset = "0xC72394", VA = "0xC72394")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x170000CA")]
	public bool startFadeOut
	{
		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xC723A8", Offset = "0xC723A8", VA = "0xC723A8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000A32")]
	[Address(RVA = "0xC722B0", Offset = "0xC722B0", VA = "0xC722B0")]
	public OrreryController()
	{
	}

	[Token(Token = "0x6000A35")]
	[Address(RVA = "0xC723E0", Offset = "0xC723E0", VA = "0xC723E0")]
	public void Initialise()
	{
	}

	[Token(Token = "0x6000A36")]
	[Address(RVA = "0xC728B8", Offset = "0xC728B8", VA = "0xC728B8")]
	public void setCameraOrientation()
	{
	}

	[Token(Token = "0x6000A37")]
	[Address(RVA = "0xC73608", Offset = "0xC73608", VA = "0xC73608")]
	public void ResetAfterIntro()
	{
	}

	[Token(Token = "0x6000A38")]
	[Address(RVA = "0xC73C8C", Offset = "0xC73C8C", VA = "0xC73C8C")]
	public void RestartTour()
	{
	}

	[Token(Token = "0x6000A39")]
	[Address(RVA = "0xC74148", Offset = "0xC74148", VA = "0xC74148")]
	private Planets.Names StringToPlanetEName(string ename)
	{
		return default(Planets.Names);
	}

	[Token(Token = "0x6000A3A")]
	[Address(RVA = "0xC72A74", Offset = "0xC72A74", VA = "0xC72A74")]
	public void LoadSequenceFromData(string[] dataLines)
	{
	}

	[Token(Token = "0x6000A3B")]
	[Address(RVA = "0xC73DA8", Offset = "0xC73DA8", VA = "0xC73DA8")]
	private void resetIntroSequenceData()
	{
	}

	[Token(Token = "0x6000A3C")]
	[Address(RVA = "0xC74A8C", Offset = "0xC74A8C", VA = "0xC74A8C", Slot = "4")]
	public override void UpdateCamera()
	{
	}

	[Token(Token = "0x6000A3D")]
	[Address(RVA = "0xC76294", Offset = "0xC76294", VA = "0xC76294", Slot = "5")]
	public override void AdjustRotation(Vector3 eulerRotation)
	{
	}

	[Token(Token = "0x6000A3E")]
	[Address(RVA = "0xC76348", Offset = "0xC76348", VA = "0xC76348")]
	public void Teleport(Vector3 lPosition, float lfAngle)
	{
	}
}
[Token(Token = "0x200018D")]
public class CameraMover : MonoBehaviour
{
	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float moveSpeed;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3 mvPosition;

	[Token(Token = "0x6000A3F")]
	[Address(RVA = "0x16C6D8", Offset = "0x16C6D8", VA = "0x16C6D8")]
	public CameraMover()
	{
	}

	[Token(Token = "0x6000A40")]
	[Address(RVA = "0x16C6EC", Offset = "0x16C6EC", VA = "0x16C6EC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A41")]
	[Address(RVA = "0x16C738", Offset = "0x16C738", VA = "0x16C738")]
	private void Update()
	{
	}
}
[Token(Token = "0x200018E")]
public class SkyViewController : CameraInputController
{
	[Token(Token = "0x4000664")]
	public const float FOV_MIN = 0.01f;

	[Token(Token = "0x4000665")]
	public const float FOV_MAX = 80f;

	[Token(Token = "0x4000666")]
	public const float MIN_ZOOM_FOR_ROTATION = 1f;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool mbRotateWithPlanet;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private bool mbRotateWithPlanetCache;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	private bool mbRotateWithPlanetValueHasChanged;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float mfRotationAround;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform mCompass;

	[Token(Token = "0x170000CB")]
	public bool rotateWithPlanet
	{
		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xE14EBC", Offset = "0xE14EBC", VA = "0xE14EBC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000CC")]
	public bool rotateWithPlanetValueHasChanged
	{
		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xE14EC4", Offset = "0xE14EC4", VA = "0xE14EC4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000A42")]
	[Address(RVA = "0xE14EAC", Offset = "0xE14EAC", VA = "0xE14EAC")]
	public SkyViewController()
	{
	}

	[Token(Token = "0x6000A45")]
	[Address(RVA = "0xE14ECC", Offset = "0xE14ECC", VA = "0xE14ECC")]
	private new void Start()
	{
	}

	[Token(Token = "0x6000A46")]
	[Address(RVA = "0xE14FD8", Offset = "0xE14FD8", VA = "0xE14FD8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A47")]
	[Address(RVA = "0xE154A8", Offset = "0xE154A8", VA = "0xE154A8", Slot = "5")]
	public override void AdjustRotation(Vector3 eulerRotation)
	{
	}

	[Token(Token = "0x6000A48")]
	[Address(RVA = "0xE156A0", Offset = "0xE156A0", VA = "0xE156A0", Slot = "6")]
	public override void AdjustRotationAround(Vector3 eulerRotation)
	{
	}

	[Token(Token = "0x6000A49")]
	[Address(RVA = "0xE156C8", Offset = "0xE156C8", VA = "0xE156C8", Slot = "7")]
	public override void AdjustZoom(float zoomAdjustment, Vector2 viewportPosition)
	{
	}
}
[Token(Token = "0x200018F")]
public class SystemRenderScale
{
	[Token(Token = "0x2000190")]
	public struct DistanceProperties
	{
		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Range renderRange;

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Range systemRange;

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xCFDF1C", Offset = "0xCFDF1C", VA = "0xCFDF1C")]
		public DistanceProperties(Range renderRange, Range systemRange)
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xCFE0A0", Offset = "0xCFE0A0", VA = "0xCFE0A0")]
		public double GetRenderDistance(double systemDistance)
		{
			return default(double);
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xCFE154", Offset = "0xCFE154", VA = "0xCFE154")]
		public double GetAUDistanceFromRenderDistance(double renderDistance)
		{
			return default(double);
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xCFE170", Offset = "0xCFE170", VA = "0xCFE170")]
		public Vector3 RemapPosition(Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xCFE470", Offset = "0xCFE470", VA = "0xCFE470")]
		private string rangeToString(Range range)
		{
			return null;
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xCFE474", Offset = "0xCFE474", VA = "0xCFE474", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}

	[Token(Token = "0x400066C")]
	private const float MAXIMUM_OBJECT_DISTANCE = 1000f;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private DistanceProperties mCloseDistances;

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private DistanceProperties mDistantDistances;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Range sDistantSystemRange;

	[Token(Token = "0x170000CD")]
	public DistanceProperties closeDistances
	{
		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xCFDD30", Offset = "0xCFDD30", VA = "0xCFDD30")]
		get
		{
			return default(DistanceProperties);
		}
		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xCFDD44", Offset = "0xCFDD44", VA = "0xCFDD44")]
		set
		{
		}
	}

	[Token(Token = "0x170000CE")]
	public DistanceProperties distantDistances
	{
		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xCFDD54", Offset = "0xCFDD54", VA = "0xCFDD54")]
		get
		{
			return default(DistanceProperties);
		}
		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xCFDD68", Offset = "0xCFDD68", VA = "0xCFDD68")]
		set
		{
		}
	}

	[Token(Token = "0x170000CF")]
	public static Range distantSystemRange
	{
		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xCEEE40", Offset = "0xCEEE40", VA = "0xCEEE40")]
		set
		{
		}
	}

	[Token(Token = "0x6000A4A")]
	[Address(RVA = "0xCFDC14", Offset = "0xCFDC14", VA = "0xCFDC14")]
	public SystemRenderScale(float closestRenderDistance, float closeRenderRadius, float closeSystemRadius, float distantRenderRadius)
	{
	}

	[Token(Token = "0x6000A50")]
	[Address(RVA = "0xCFDD78", Offset = "0xCFDD78", VA = "0xCFDD78", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000191")]
public static class SystemScaleManager
{
	[Token(Token = "0x4000672")]
	private const float SKYVIEW_CLOSEST_RENDER_DISTANCE = 110f;

	[Token(Token = "0x4000673")]
	private const float SKYVIEW_SYSTEM_RENDER_RADIUS = 130f;

	[Token(Token = "0x4000674")]
	private const float SKYVIEW_STARFIELD_RENDER_RADIUS = 500f;

	[Token(Token = "0x4000675")]
	private const float SOLARSYSTEMVIEW_RENDER_RADIUS = 20f;

	[Token(Token = "0x4000676")]
	private const float SYSTEM_VIEW_RENDER_RADIUS = 20f;

	[Token(Token = "0x4000677")]
	private const float SYSTEMVIEW_STARFIELD_RENDER_RADIUS = 600f;

	[Token(Token = "0x4000678")]
	private const float PLANETVIEW_STARFIELD_RENDER_RADIUS = 200f;

	[Token(Token = "0x4000679")]
	private const float SKYVIEW_SYSTEM_CLIP_RADIUS = 0.5f;

	[Token(Token = "0x400067A")]
	private const float SYSTEM_RADIUS_AU = 100f;

	[Token(Token = "0x400067B")]
	private const float INTERPOLATION_END = 0.5f;

	[Token(Token = "0x400067C")]
	private const float INTERPOLATION_BACK_START = 0.45f;

	[Token(Token = "0x400067D")]
	private const float INTERPOLATION_BACK_END = 0.8f;

	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SystemRenderScale sCurrentScale;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static SystemRenderScale sNextScale;

	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static float sfInterpolationValue;

	[Token(Token = "0x170000D0")]
	public static float interpolationValue
	{
		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xCFF84C", Offset = "0xCFF84C", VA = "0xCFF84C")]
		set
		{
		}
	}

	[Token(Token = "0x170000D1")]
	public static Range distantSystemRange
	{
		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xCED1F4", Offset = "0xCED1F4", VA = "0xCED1F4")]
		get
		{
			return default(Range);
		}
	}

	[Token(Token = "0x6000A57")]
	[Address(RVA = "0xCFE47C", Offset = "0xCFE47C", VA = "0xCFE47C")]
	static SystemScaleManager()
	{
	}

	[Token(Token = "0x6000A58")]
	[Address(RVA = "0xCFE480", Offset = "0xCFE480", VA = "0xCFE480")]
	private static SystemRenderScale createScaleForState(StateManager.AppState state, Planet destination)
	{
		return null;
	}

	[Token(Token = "0x6000A59")]
	[Address(RVA = "0xCF7A44", Offset = "0xCF7A44", VA = "0xCF7A44")]
	public static void SetCurrentScale(StateManager.AppState currentState, StateManager.AppState nextState = StateManager.AppState.NoState)
	{
	}

	[Token(Token = "0x6000A5A")]
	[Address(RVA = "0xCFEAEC", Offset = "0xCFEAEC", VA = "0xCFEAEC")]
	private static float getPlanetViewRadius(Planet planet)
	{
		return default(float);
	}

	[Token(Token = "0x6000A5B")]
	[Address(RVA = "0xCFEB58", Offset = "0xCFEB58", VA = "0xCFEB58")]
	private static float getPlanetSystemRadius(Planet planet)
	{
		return default(float);
	}

	[Token(Token = "0x6000A5C")]
	[Address(RVA = "0xCFE800", Offset = "0xCFE800", VA = "0xCFE800")]
	private static float getSystemRadius(Planet system)
	{
		return default(float);
	}

	[Token(Token = "0x6000A5D")]
	[Address(RVA = "0xCFEBC0", Offset = "0xCFEBC0", VA = "0xCFEBC0")]
	private static Range interpolatedRange(Range r1, Range r2, float mu)
	{
		return default(Range);
	}

	[Token(Token = "0x6000A5E")]
	[Address(RVA = "0xCFECF4", Offset = "0xCFECF4", VA = "0xCFECF4")]
	private static float interpolate(float interpolation)
	{
		return default(float);
	}

	[Token(Token = "0x6000A5F")]
	[Address(RVA = "0xCFEDF0", Offset = "0xCFEDF0", VA = "0xCFEDF0")]
	public static SystemRenderScale.DistanceProperties GetCloseScaleDistanceProperties()
	{
		return default(SystemRenderScale.DistanceProperties);
	}

	[Token(Token = "0x6000A60")]
	[Address(RVA = "0xCFF048", Offset = "0xCFF048", VA = "0xCFF048")]
	public static double GetOrreryPlanetDistannceFromItsOwnSun(Planets.Names planetName)
	{
		return default(double);
	}

	[Token(Token = "0x6000A61")]
	[Address(RVA = "0xCE1570", Offset = "0xCE1570", VA = "0xCE1570")]
	public static SystemRenderScale.DistanceProperties GetDistantScaleDistanceProperties()
	{
		return default(SystemRenderScale.DistanceProperties);
	}

	[Token(Token = "0x6000A62")]
	[Address(RVA = "0xCFF514", Offset = "0xCFF514", VA = "0xCFF514")]
	public static double GetCloseRenderDistance(double systemDistance)
	{
		return default(double);
	}

	[Token(Token = "0x6000A63")]
	[Address(RVA = "0xCFF5C8", Offset = "0xCFF5C8", VA = "0xCFF5C8")]
	public static double GetDistantRenderDistance(double distantDistance)
	{
		return default(double);
	}

	[Token(Token = "0x6000A64")]
	[Address(RVA = "0xCFF67C", Offset = "0xCFF67C", VA = "0xCFF67C")]
	public static Vector3Double GetSystemPositionFromCloseRenderPosition(Vector3Double renderPosition)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000A65")]
	[Address(RVA = "0xCFF798", Offset = "0xCFF798", VA = "0xCFF798")]
	public static double GetSystemDistanceFromCloseRenderDistance(double renderDistance)
	{
		return default(double);
	}

	[Token(Token = "0x6000A67")]
	[Address(RVA = "0xCED050", Offset = "0xCED050", VA = "0xCED050")]
	public static void SetMaterialProperties(Material material, bool useDistantProperties)
	{
	}

	[Token(Token = "0x6000A69")]
	[Address(RVA = "0xCFF8E8", Offset = "0xCFF8E8", VA = "0xCFF8E8")]
	public static double GetCloseRenderFinalDistance(double systemDistance)
	{
		return default(double);
	}

	[Token(Token = "0x6000A6A")]
	[Address(RVA = "0xCFF9C8", Offset = "0xCFF9C8", VA = "0xCFF9C8")]
	public static Vector3Double GetFinalSystemPositionFromCloseRenderPosition(Vector3Double renderPosition)
	{
		return default(Vector3Double);
	}
}
[Token(Token = "0x2000192")]
public class AnimatedValue
{
	[Token(Token = "0x2000193")]
	private enum AnimationType
	{
		[Token(Token = "0x4000688")]
		None,
		[Token(Token = "0x4000689")]
		Pulse,
		[Token(Token = "0x400068A")]
		Shrink
	}

	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private AnimationType mAnimationType;

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float mfTime;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float mfDuration;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float mfValue;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float mfScale;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float mfProgress;

	[Token(Token = "0x170000D2")]
	public float value
	{
		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0x163110", Offset = "0x163110", VA = "0x163110")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000D3")]
	public float Progress
	{
		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x163118", Offset = "0x163118", VA = "0x163118")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000D4")]
	public bool IsAnimating
	{
		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x1632A0", Offset = "0x1632A0", VA = "0x1632A0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000A6B")]
	[Address(RVA = "0x1630EC", Offset = "0x1630EC", VA = "0x1630EC")]
	public AnimatedValue()
	{
	}

	[Token(Token = "0x6000A6E")]
	[Address(RVA = "0x163120", Offset = "0x163120", VA = "0x163120")]
	public void Update()
	{
	}

	[Token(Token = "0x6000A6F")]
	[Address(RVA = "0x163248", Offset = "0x163248", VA = "0x163248")]
	private void activateAnimation(AnimationType animationType, float duration)
	{
	}

	[Token(Token = "0x6000A70")]
	[Address(RVA = "0x163260", Offset = "0x163260", VA = "0x163260")]
	public void Pulse(float scale, float duration)
	{
	}

	[Token(Token = "0x6000A71")]
	[Address(RVA = "0x163280", Offset = "0x163280", VA = "0x163280")]
	public void Shrink(float scale, float duration)
	{
	}
}
[Token(Token = "0x2000194")]
public class Bezier2
{
	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private int miCurrentPointCount;

	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Vector2Double[] maPoints;

	[Token(Token = "0x170000D5")]
	public int pointCount
	{
		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0x16789C", Offset = "0x16789C", VA = "0x16789C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000A73")]
	[Address(RVA = "0x1670B0", Offset = "0x1670B0", VA = "0x1670B0")]
	public Bezier2(int pointCount)
	{
	}

	[Token(Token = "0x6000A74")]
	[Address(RVA = "0x16713C", Offset = "0x16713C", VA = "0x16713C")]
	public bool AddControlPoint(Vector2Double point)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A75")]
	[Address(RVA = "0x1671CC", Offset = "0x1671CC", VA = "0x1671CC")]
	public void ClearAllControlPoints()
	{
	}

	[Token(Token = "0x6000A76")]
	[Address(RVA = "0x1671D8", Offset = "0x1671D8", VA = "0x1671D8")]
	public Vector2Double EvaluateFromMu(double mu)
	{
		return default(Vector2Double);
	}

	[Token(Token = "0x6000A77")]
	[Address(RVA = "0x1674B8", Offset = "0x1674B8", VA = "0x1674B8")]
	public Vector2Double EvaluateForX(double x, float tolerancePerc, int maxIterations)
	{
		return default(Vector2Double);
	}

	[Token(Token = "0x6000A78")]
	[Address(RVA = "0x167768", Offset = "0x167768", VA = "0x167768")]
	public Vector2Double GetPointAtIndex(int index)
	{
		return default(Vector2Double);
	}

	[Token(Token = "0x6000A79")]
	[Address(RVA = "0x1677D8", Offset = "0x1677D8", VA = "0x1677D8")]
	public bool EditPointAtIndex(int index, Vector2Double newPoint)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A7A")]
	[Address(RVA = "0x167858", Offset = "0x167858", VA = "0x167858")]
	public Vector2Double GetLastPoint()
	{
		return default(Vector2Double);
	}

	[Token(Token = "0x6000A7B")]
	[Address(RVA = "0x167870", Offset = "0x167870", VA = "0x167870")]
	public bool EditLastPoint(Vector2Double newLastPoint)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A7D")]
	[Address(RVA = "0x1678A4", Offset = "0x1678A4", VA = "0x1678A4")]
	public static void ColineateBeziers(ref Bezier2 bezier0, ref Bezier2 bezier1, RectDouble rect, float tension0 = 0.5f, float tension1 = 0.5f, bool constrain = false)
	{
	}

	[Token(Token = "0x6000A7E")]
	[Address(RVA = "0x168130", Offset = "0x168130", VA = "0x168130")]
	public static Vector2Double ClipToRect(RectDouble rect, Vector2Double pointToClip, Vector2Double origin)
	{
		return default(Vector2Double);
	}

	[Token(Token = "0x6000A7F")]
	[Address(RVA = "0x167270", Offset = "0x167270", VA = "0x167270")]
	private static Vector2Double evaluateNewPoint(Vector2Double[] points, int pointCount, double mu)
	{
		return default(Vector2Double);
	}

	[Token(Token = "0x6000A80")]
	[Address(RVA = "0x167FD0", Offset = "0x167FD0", VA = "0x167FD0")]
	private static void joinBeziers(Bezier2 bezier0, float weighting0, Bezier2 bezier1, float weighting1)
	{
	}
}
namespace ExtensionMethods
{
	[Token(Token = "0x2000195")]
	public static class BinaryReaderExtensionsEG
	{
		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x17C1C8", Offset = "0x17C1C8", VA = "0x17C1C8")]
		public static string ReadCString(this BinaryReader br)
		{
			return null;
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x17C0C0", Offset = "0x17C0C0", VA = "0x17C0C0")]
		public static BinaryReader BinaryReaderFromResource(string filename)
		{
			return null;
		}
	}
}
[Token(Token = "0x2000196")]
public struct Circle
{
	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Vector2 mvCenter;

	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private float mfRadius;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float mfSqrRadius;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector2 svClosestPoint;

	[Token(Token = "0x6000A83")]
	[Address(RVA = "0x173F8C", Offset = "0x173F8C", VA = "0x173F8C")]
	public Circle(Vector2 center, float radius)
	{
	}

	[Token(Token = "0x6000A84")]
	[Address(RVA = "0x17407C", Offset = "0x17407C", VA = "0x17407C")]
	public bool Contains(Vector2 point)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A85")]
	[Address(RVA = "0x17424C", Offset = "0x17424C", VA = "0x17424C")]
	public bool Overlaps(Rect rect, float aspectRatio = 1f)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A86")]
	[Address(RVA = "0x174544", Offset = "0x174544", VA = "0x174544", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000197")]
public class ColorHelper
{
	[Token(Token = "0x6000A88")]
	[Address(RVA = "0x1745B8", Offset = "0x1745B8", VA = "0x1745B8")]
	public ColorHelper()
	{
	}

	[Token(Token = "0x6000A89")]
	[Address(RVA = "0x1745C0", Offset = "0x1745C0", VA = "0x1745C0")]
	public static Color CreateColorFromBytes(byte red, byte green, byte blue)
	{
		return default(Color);
	}

	[Token(Token = "0x6000A8A")]
	[Address(RVA = "0x174634", Offset = "0x174634", VA = "0x174634")]
	public static Color CreateColorFromBytes(byte red, byte green, byte blue, byte alpha)
	{
		return default(Color);
	}
}
[Token(Token = "0x2000198")]
public static class Coordinates
{
	[Token(Token = "0x6000A8B")]
	[Address(RVA = "0x181AB8", Offset = "0x181AB8", VA = "0x181AB8")]
	private static double acose(double arg)
	{
		return default(double);
	}

	[Token(Token = "0x6000A8C")]
	[Address(RVA = "0x16DA50", Offset = "0x16DA50", VA = "0x16DA50")]
	public static void AltAz2RaDec(double latitude, double longitude, double gst, double alt, double az, out double RA, out double DEC)
	{
	}

	[Token(Token = "0x6000A8D")]
	[Address(RVA = "0x181D70", Offset = "0x181D70", VA = "0x181D70")]
	public static Horizontal RaDec2AltAz(GeoCoords geoCoords, double jdSince2000, Spherical position)
	{
		return default(Horizontal);
	}

	[Token(Token = "0x6000A8E")]
	[Address(RVA = "0x1820B8", Offset = "0x1820B8", VA = "0x1820B8")]
	private static double meanSiderealTime(double jdSince2000, double lon)
	{
		return default(double);
	}

	[Token(Token = "0x6000A8F")]
	[Address(RVA = "0x181B20", Offset = "0x181B20", VA = "0x181B20")]
	public static void Alt_az_to_hrAng_dec(double alt, double az, double lat, out double hr_ang, out double dec)
	{
	}

	[Token(Token = "0x6000A90")]
	[Address(RVA = "0x16D980", Offset = "0x16D980", VA = "0x16D980")]
	public static double JulianDateToGreenSiderealTime(double jd)
	{
		return default(double);
	}

	[Token(Token = "0x6000A91")]
	[Address(RVA = "0x182170", Offset = "0x182170", VA = "0x182170")]
	public static double SolarLongitudeToJD(double solLong, byte month, int year)
	{
		return default(double);
	}
}
namespace CoordinateSystems
{
	[Token(Token = "0x2000199")]
	public struct HMS
	{
		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int miHours;

		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private int miMinutes;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float mfSeconds;

		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private bool mbIsNegative;

		[Token(Token = "0x170000D6")]
		public int hours
		{
			[Token(Token = "0x6000A93")]
			[Address(RVA = "0x1828AC", Offset = "0x1828AC", VA = "0x1828AC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000D7")]
		public int minutes
		{
			[Token(Token = "0x6000A94")]
			[Address(RVA = "0x1828B4", Offset = "0x1828B4", VA = "0x1828B4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000D8")]
		public float seconds
		{
			[Token(Token = "0x6000A95")]
			[Address(RVA = "0x1828BC", Offset = "0x1828BC", VA = "0x1828BC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x182890", Offset = "0x182890", VA = "0x182890")]
		public HMS(float hours, float minutes, float seconds)
		{
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0x18291C", Offset = "0x18291C", VA = "0x18291C")]
		public float ToAngle()
		{
			return default(float);
		}
	}
	[Token(Token = "0x200019A")]
	public struct DMS
	{
		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int miDegrees;

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private int miMinutes;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float mfSeconds;

		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private bool mbIsNegative;

		[Token(Token = "0x170000D9")]
		public int degrees
		{
			[Token(Token = "0x6000A98")]
			[Address(RVA = "0x182638", Offset = "0x182638", VA = "0x182638")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000DA")]
		public int minutes
		{
			[Token(Token = "0x6000A99")]
			[Address(RVA = "0x182640", Offset = "0x182640", VA = "0x182640")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000DB")]
		public float seconds
		{
			[Token(Token = "0x6000A9A")]
			[Address(RVA = "0x182648", Offset = "0x182648", VA = "0x182648")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x18261C", Offset = "0x18261C", VA = "0x18261C")]
		public DMS(float degrees, float minutes, float seconds)
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x182650", Offset = "0x182650", VA = "0x182650")]
		public float ToAngle()
		{
			return default(float);
		}
	}
	[Token(Token = "0x200019B")]
	public struct Spherical
	{
		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float mfRA;

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private float mfDEC;

		[Token(Token = "0x170000DC")]
		public float ra
		{
			[Token(Token = "0x6000AA0")]
			[Address(RVA = "0x182CC0", Offset = "0x182CC0", VA = "0x182CC0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000DD")]
		public float dec
		{
			[Token(Token = "0x6000AA1")]
			[Address(RVA = "0x182CC8", Offset = "0x182CC8", VA = "0x182CC8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x182A8C", Offset = "0x182A8C", VA = "0x182A8C")]
		public Spherical(float ra, float dec)
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x182B28", Offset = "0x182B28", VA = "0x182B28")]
		public Spherical(HMS ra, DMS dec)
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x182B68", Offset = "0x182B68", VA = "0x182B68")]
		public Spherical(Vector3 position)
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x182C90", Offset = "0x182C90", VA = "0x182C90")]
		public Spherical(Vector3Double position)
		{
		}
	}
	[Token(Token = "0x200019C")]
	public struct Horizontal
	{
		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float mfAzimuth;

		[Token(Token = "0x400069C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private float mfAltitude;

		[Token(Token = "0x170000DE")]
		public float azimuth
		{
			[Token(Token = "0x6000AA3")]
			[Address(RVA = "0x182988", Offset = "0x182988", VA = "0x182988")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000DF")]
		public float altitude
		{
			[Token(Token = "0x6000AA4")]
			[Address(RVA = "0x182998", Offset = "0x182998", VA = "0x182998")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x182974", Offset = "0x182974", VA = "0x182974")]
		public Horizontal(float azimuth, float altitude)
		{
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0x182A84", Offset = "0x182A84", VA = "0x182A84", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
[Token(Token = "0x200019D")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xC2E7A8", Offset = "0xC2E7A8")]
public class DataString
{
	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private int miIndex;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private string[] msDataComponents;

	[Token(Token = "0x170000E0")]
	public string Item
	{
		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x18303C", Offset = "0x18303C", VA = "0x18303C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000E1")]
	public bool IsValid
	{
		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x18307C", Offset = "0x18307C", VA = "0x18307C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000AA6")]
	[Address(RVA = "0x182CD0", Offset = "0x182CD0", VA = "0x182CD0")]
	public DataString(string dataLine)
	{
	}

	[Token(Token = "0x6000AA7")]
	[Address(RVA = "0x182CD8", Offset = "0x182CD8", VA = "0x182CD8")]
	public DataString(string dataLine, char seperator)
	{
	}

	[Token(Token = "0x6000AA8")]
	[Address(RVA = "0x182DA8", Offset = "0x182DA8", VA = "0x182DA8")]
	public static explicit operator DataString(string s)
	{
		return null;
	}

	[Token(Token = "0x6000AA9")]
	[Address(RVA = "0x182E1C", Offset = "0x182E1C", VA = "0x182E1C")]
	public int Length()
	{
		return default(int);
	}

	[Token(Token = "0x6000AAA")]
	[Address(RVA = "0x182E3C", Offset = "0x182E3C", VA = "0x182E3C")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000AAB")]
	[Address(RVA = "0x182E48", Offset = "0x182E48", VA = "0x182E48")]
	public void SetIndex(int index)
	{
	}

	[Token(Token = "0x6000AAC")]
	[Address(RVA = "0x182E50", Offset = "0x182E50", VA = "0x182E50")]
	public double GetDouble()
	{
		return default(double);
	}

	[Token(Token = "0x6000AAD")]
	[Address(RVA = "0x182EB8", Offset = "0x182EB8", VA = "0x182EB8")]
	public float GetFloat()
	{
		return default(float);
	}

	[Token(Token = "0x6000AAE")]
	[Address(RVA = "0x182ED8", Offset = "0x182ED8", VA = "0x182ED8")]
	public int GetInt()
	{
		return default(int);
	}

	[Token(Token = "0x6000AAF")]
	[Address(RVA = "0x182EF8", Offset = "0x182EF8", VA = "0x182EF8")]
	public Vector3 GetVector3()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000AB0")]
	[Address(RVA = "0x182F8C", Offset = "0x182F8C", VA = "0x182F8C")]
	public Vector3Double GetVector3Double()
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000AB1")]
	[Address(RVA = "0x183038", Offset = "0x183038", VA = "0x183038")]
	public string GetString()
	{
		return null;
	}

	[Token(Token = "0x6000AB2")]
	[Address(RVA = "0x182E70", Offset = "0x182E70", VA = "0x182E70")]
	private string getNextComponent()
	{
		return null;
	}
}
[Token(Token = "0x200019E")]
public class DebugDistance : MonoBehaviour
{
	[Token(Token = "0x200019F")]
	public enum TargetMode
	{
		[Token(Token = "0x40006A7")]
		Transform,
		[Token(Token = "0x40006A8")]
		Position
	}

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public TargetMode targetMode;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform distanceTarget;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 worldPosition;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GUIStyle mLabelStyle;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool mbCanDraw;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 mvPos1;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 mvPos2;

	[Token(Token = "0x6000AB5")]
	[Address(RVA = "0x1837D0", Offset = "0x1837D0", VA = "0x1837D0")]
	public DebugDistance()
	{
	}

	[Token(Token = "0x6000AB6")]
	[Address(RVA = "0x1837D8", Offset = "0x1837D8", VA = "0x1837D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AB7")]
	[Address(RVA = "0x1838C4", Offset = "0x1838C4", VA = "0x1838C4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AB8")]
	[Address(RVA = "0x183A8C", Offset = "0x183A8C", VA = "0x183A8C")]
	private void OnGUI()
	{
	}
}
[Token(Token = "0x20001A0")]
public class DebugDrawing : MonoBehaviour
{
	[Token(Token = "0x20001A1")]
	private struct PointStruct
	{
		[Token(Token = "0x40006AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Vector3 center;

		[Token(Token = "0x40006AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private readonly float radius;

		[Token(Token = "0x40006AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Color color;

		[Token(Token = "0x170000E2")]
		public Vector3 Center
		{
			[Token(Token = "0x6000AC1")]
			[Address(RVA = "0x1846A0", Offset = "0x1846A0", VA = "0x1846A0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000E3")]
		public float Radius
		{
			[Token(Token = "0x6000AC2")]
			[Address(RVA = "0x1846B0", Offset = "0x1846B0", VA = "0x1846B0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000E4")]
		public Color Color
		{
			[Token(Token = "0x6000AC3")]
			[Address(RVA = "0x1846B8", Offset = "0x1846B8", VA = "0x1846B8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x184668", Offset = "0x184668", VA = "0x184668")]
		public PointStruct(Vector3 center, float radius, Color color)
		{
		}
	}

	[Token(Token = "0x20001A2")]
	private struct LineStruct
	{
		[Token(Token = "0x40006AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Vector3 start;

		[Token(Token = "0x40006AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private readonly Vector3 end;

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Color color;

		[Token(Token = "0x170000E5")]
		public Vector3 Start
		{
			[Token(Token = "0x6000AC5")]
			[Address(RVA = "0x184634", Offset = "0x184634", VA = "0x184634")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000E6")]
		public Vector3 End
		{
			[Token(Token = "0x6000AC6")]
			[Address(RVA = "0x184644", Offset = "0x184644", VA = "0x184644")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000E7")]
		public Color Color
		{
			[Token(Token = "0x6000AC7")]
			[Address(RVA = "0x184654", Offset = "0x184654", VA = "0x184654")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x1845F4", Offset = "0x1845F4", VA = "0x1845F4")]
		public LineStruct(Vector3 start, Vector3 end, Color color)
		{
		}
	}

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<LineStruct> saLines;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static List<PointStruct> saPoints;

	[Token(Token = "0x6000AB9")]
	[Address(RVA = "0x183D74", Offset = "0x183D74", VA = "0x183D74")]
	public DebugDrawing()
	{
	}

	[Token(Token = "0x6000ABA")]
	[Address(RVA = "0x183D7C", Offset = "0x183D7C", VA = "0x183D7C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000ABB")]
	[Address(RVA = "0x183D80", Offset = "0x183D80", VA = "0x183D80")]
	private void Update()
	{
	}

	[Token(Token = "0x6000ABC")]
	[Address(RVA = "0x183D84", Offset = "0x183D84", VA = "0x183D84")]
	public static void AddLine(Vector3 start, Vector3 end, Color color)
	{
	}

	[Token(Token = "0x6000ABD")]
	[Address(RVA = "0x183E94", Offset = "0x183E94", VA = "0x183E94")]
	public static void AddPoint(Vector3 center, float radius, Color color)
	{
	}

	[Token(Token = "0x6000ABE")]
	[Address(RVA = "0x183F9C", Offset = "0x183F9C", VA = "0x183F9C")]
	public void OnDrawGizmos()
	{
	}
}
[Token(Token = "0x20001A3")]
public class DebugLogging : MonoBehaviour
{
	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool logPosition;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	public bool logRotation;

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
	public bool local;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
	public bool logToConsole;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool eulerAnglesInConsole;

	[Token(Token = "0x40006B6")]
	public const int logSize = 256;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private List<Vector3> maLogOutput;

	[Token(Token = "0x170000E8")]
	public List<Vector3> logOutput
	{
		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x1846E4", Offset = "0x1846E4", VA = "0x1846E4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000AC8")]
	[Address(RVA = "0x1846CC", Offset = "0x1846CC", VA = "0x1846CC")]
	public DebugLogging()
	{
	}

	[Token(Token = "0x6000ACA")]
	[Address(RVA = "0x1846EC", Offset = "0x1846EC", VA = "0x1846EC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000ACB")]
	[Address(RVA = "0x184770", Offset = "0x184770", VA = "0x184770")]
	private void addToLog(Vector3 value)
	{
	}

	[Token(Token = "0x6000ACC")]
	[Address(RVA = "0x184864", Offset = "0x184864", VA = "0x184864")]
	private void Update()
	{
	}
}
[Token(Token = "0x20001A4")]
public class DebugMeshHelper : MonoBehaviour
{
	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool drawLabel;

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	public bool drawOnlyWhenSelected;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
	public bool cullBackFaces;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
	public bool showTriangles;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool showNormals;

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool showTangents;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool showBiTangents;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float normalsLength;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float drawVerticesPercentage;

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private GUIStyle mLabelStyle;

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Mesh mMesh;

	[Token(Token = "0x170000E9")]
	public Mesh mesh
	{
		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0x184D70", Offset = "0x184D70", VA = "0x184D70")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000ACD")]
	[Address(RVA = "0x184D48", Offset = "0x184D48", VA = "0x184D48")]
	public DebugMeshHelper()
	{
	}

	[Token(Token = "0x6000ACF")]
	[Address(RVA = "0x184D78", Offset = "0x184D78", VA = "0x184D78")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AD0")]
	[Address(RVA = "0x184E64", Offset = "0x184E64", VA = "0x184E64")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AD1")]
	[Address(RVA = "0x186574", Offset = "0x186574", VA = "0x186574")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000AD2")]
	[Address(RVA = "0x186738", Offset = "0x186738", VA = "0x186738")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000AD3")]
	[Address(RVA = "0x1856D8", Offset = "0x1856D8", VA = "0x1856D8")]
	private float getVertexStep()
	{
		return default(float);
	}

	[Token(Token = "0x6000AD4")]
	[Address(RVA = "0x184FE0", Offset = "0x184FE0", VA = "0x184FE0")]
	private void drawPolygons(int vertexCount = 3)
	{
	}

	[Token(Token = "0x6000AD5")]
	[Address(RVA = "0x186980", Offset = "0x186980", VA = "0x186980")]
	private bool isFacingCamera(Vector3 normal)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AD6")]
	[Address(RVA = "0x1857E8", Offset = "0x1857E8", VA = "0x1857E8")]
	private void drawNormals(float lfVertexStep)
	{
	}

	[Token(Token = "0x6000AD7")]
	[Address(RVA = "0x185BD4", Offset = "0x185BD4", VA = "0x185BD4")]
	private void drawTangents(float lfVertexStep)
	{
	}

	[Token(Token = "0x6000AD8")]
	[Address(RVA = "0x18605C", Offset = "0x18605C", VA = "0x18605C")]
	private void drawBiTangents(float lfVertexStep)
	{
	}
}
[Token(Token = "0x20001A5")]
public static class DebugUtils
{
	[Token(Token = "0x6000AD9")]
	[Address(RVA = "0x186C94", Offset = "0x186C94", VA = "0x186C94")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xC2E7DC", Offset = "0xC2E7DC")]
	public static void Assert(bool condition)
	{
	}

	[Token(Token = "0x6000ADA")]
	[Address(RVA = "0x186D24", Offset = "0x186D24", VA = "0x186D24")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xC2E810", Offset = "0xC2E810")]
	public static void Assert(bool condition, string comment)
	{
	}
}
[Token(Token = "0x20001A6")]
public class Distance
{
	[Token(Token = "0x20001A7")]
	public enum Units
	{
		[Token(Token = "0x40006C6")]
		Parsecs,
		[Token(Token = "0x40006C7")]
		Lightyears,
		[Token(Token = "0x40006C8")]
		AU,
		[Token(Token = "0x40006C9")]
		KM,
		[Token(Token = "0x40006CA")]
		Miles
	}

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private double mdMagnitude;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Units meUnits;

	[Token(Token = "0x6000ADB")]
	[Address(RVA = "0x187078", Offset = "0x187078", VA = "0x187078")]
	public Distance(double magnitude, Units units)
	{
	}

	[Token(Token = "0x6000ADC")]
	[Address(RVA = "0x1870A8", Offset = "0x1870A8", VA = "0x1870A8")]
	private static bool isBig(Units units)
	{
		return default(bool);
	}

	[Token(Token = "0x6000ADD")]
	[Address(RVA = "0x1870B8", Offset = "0x1870B8", VA = "0x1870B8")]
	public double GetMagnitude(Units outputUnits)
	{
		return default(double);
	}
}
namespace MarchingBytes
{
	[Serializable]
	[Token(Token = "0x20001A8")]
	public class PoolInfo
	{
		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string poolName;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public GameObject prefab;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int poolSize;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool fixedSize;

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0xC56D1C", Offset = "0xC56D1C", VA = "0xC56D1C")]
		public PoolInfo()
		{
		}
	}
	[Token(Token = "0x20001A9")]
	internal class Pool
	{
		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Stack<PoolObject> availableObjStack;

		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private bool fixedSize;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameObject poolObjectPrefab;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int poolSize;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string poolName;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Transform poolRoot;

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0xC55A94", Offset = "0xC55A94", VA = "0xC55A94")]
		public Pool(string poolName, GameObject poolObjectPrefab, int initialCount, bool fixedSize, Transform pool)
		{
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0xC56C0C", Offset = "0xC56C0C", VA = "0xC56C0C")]
		private void AddObjectToPool(PoolObject po)
		{
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0xC56AEC", Offset = "0xC56AEC", VA = "0xC56AEC")]
		private PoolObject NewObjectInstance()
		{
			return null;
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0xC55DE4", Offset = "0xC55DE4", VA = "0xC55DE4")]
		public GameObject NextAvailableObject(Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xC5639C", Offset = "0xC5639C", VA = "0xC5639C")]
		public GameObject NextAvailableObject()
		{
			return null;
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0xC568E0", Offset = "0xC568E0", VA = "0xC568E0")]
		public void ReturnObjectToPool(PoolObject po)
		{
		}
	}
	[Token(Token = "0x20001AA")]
	public class EasyObjectPool : MonoBehaviour
	{
		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static EasyObjectPool instance;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xC2E844", Offset = "0xC2E844")]
		public PoolInfo[] poolInfo;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, Pool> poolDictionary;

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0xC55420", Offset = "0xC55420", VA = "0xC55420")]
		public EasyObjectPool()
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0xC554AC", Offset = "0xC554AC", VA = "0xC554AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0xC55520", Offset = "0xC55520", VA = "0xC55520")]
		private void CheckForDuplicatePoolNames()
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0xC5584C", Offset = "0xC5584C", VA = "0xC5584C")]
		private void CreatePools()
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0xC55B74", Offset = "0xC55B74", VA = "0xC55B74")]
		public GameObject GetObjectFromPool(string poolName, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xC56164", Offset = "0xC56164", VA = "0xC56164")]
		public GameObject GetObjectFromPool(string poolName)
		{
			return null;
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0xC56668", Offset = "0xC56668", VA = "0xC56668")]
		public void ReturnObjectToPool(GameObject go)
		{
		}
	}
	[Token(Token = "0x20001AB")]
	public class PoolObject : MonoBehaviour
	{
		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string poolName;

		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isPooled;

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0xC56D24", Offset = "0xC56D24", VA = "0xC56D24")]
		public PoolObject()
		{
		}
	}
}
[Token(Token = "0x20001AC")]
public struct FuzzyFloat
{
	[Token(Token = "0x20001AD")]
	public enum Modifier
	{
		[Token(Token = "0x40006DE")]
		Exactly,
		[Token(Token = "0x40006DF")]
		Approximately,
		[Token(Token = "0x40006E0")]
		LessThan,
		[Token(Token = "0x40006E1")]
		GreaterThan,
		[Token(Token = "0x40006E2")]
		MuchLessThan,
		[Token(Token = "0x40006E3")]
		MuchGreaterThan
	}

	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string[] saModifiers;

	[Token(Token = "0x40006DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private readonly float mfValue;

	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private readonly Modifier meModifier;

	[Token(Token = "0x170000EA")]
	public float value
	{
		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0xC35604", Offset = "0xC35604", VA = "0xC35604")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000EB")]
	public Modifier modifier
	{
		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0xC3560C", Offset = "0xC3560C", VA = "0xC3560C")]
		get
		{
			return default(Modifier);
		}
	}

	[Token(Token = "0x6000AED")]
	[Address(RVA = "0xC355F8", Offset = "0xC355F8", VA = "0xC355F8")]
	public FuzzyFloat(float value, Modifier modifier = Modifier.Exactly)
	{
	}

	[Token(Token = "0x6000AF0")]
	[Address(RVA = "0xC35614", Offset = "0xC35614", VA = "0xC35614")]
	public static implicit operator FuzzyFloat(float value)
	{
		return default(FuzzyFloat);
	}

	[Token(Token = "0x6000AF1")]
	[Address(RVA = "0xC3562C", Offset = "0xC3562C", VA = "0xC3562C")]
	public static implicit operator float(FuzzyFloat fuzzyFloat)
	{
		return default(float);
	}

	[Token(Token = "0x6000AF2")]
	[Address(RVA = "0xC35634", Offset = "0xC35634", VA = "0xC35634")]
	public static FuzzyFloat operator *(FuzzyFloat fuzzyFloat, float operand)
	{
		return default(FuzzyFloat);
	}

	[Token(Token = "0x6000AF3")]
	[Address(RVA = "0xC35658", Offset = "0xC35658", VA = "0xC35658")]
	public static FuzzyFloat operator /(FuzzyFloat fuzzyFloat, float operand)
	{
		return default(FuzzyFloat);
	}

	[Token(Token = "0x6000AF4")]
	[Address(RVA = "0xC3567C", Offset = "0xC3567C", VA = "0xC3567C")]
	public static FuzzyFloat operator +(FuzzyFloat fuzzyFloat, float operand)
	{
		return default(FuzzyFloat);
	}

	[Token(Token = "0x6000AF5")]
	[Address(RVA = "0xC356A0", Offset = "0xC356A0", VA = "0xC356A0")]
	public static FuzzyFloat operator -(FuzzyFloat fuzzyFloat, float operand)
	{
		return default(FuzzyFloat);
	}

	[Token(Token = "0x6000AF6")]
	[Address(RVA = "0xC35804", Offset = "0xC35804", VA = "0xC35804", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000AF7")]
	[Address(RVA = "0xC358CC", Offset = "0xC358CC", VA = "0xC358CC")]
	public string ModiferToString()
	{
		return null;
	}
}
[Token(Token = "0x20001AE")]
public struct GeoCoords
{
	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private float mfLatitude;

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private float mfLongitude;

	[Token(Token = "0x170000EC")]
	public float latitude
	{
		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0xC3911C", Offset = "0xC3911C", VA = "0xC3911C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000ED")]
	public float longitude
	{
		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0xC3912C", Offset = "0xC3912C", VA = "0xC3912C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000EE")]
	public static GeoCoords Guildford
	{
		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0xC39134", Offset = "0xC39134", VA = "0xC39134")]
		get
		{
			return default(GeoCoords);
		}
	}

	[Token(Token = "0x170000EF")]
	public static GeoCoords NewYork
	{
		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0xC39158", Offset = "0xC39158", VA = "0xC39158")]
		get
		{
			return default(GeoCoords);
		}
	}

	[Token(Token = "0x170000F0")]
	public static GeoCoords Tokyo
	{
		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0xC3917C", Offset = "0xC3917C", VA = "0xC3917C")]
		get
		{
			return default(GeoCoords);
		}
	}

	[Token(Token = "0x170000F1")]
	public static GeoCoords Wellington
	{
		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xC391A0", Offset = "0xC391A0", VA = "0xC391A0")]
		get
		{
			return default(GeoCoords);
		}
	}

	[Token(Token = "0x170000F2")]
	public static GeoCoords SaharaISS
	{
		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xC391C4", Offset = "0xC391C4", VA = "0xC391C4")]
		get
		{
			return default(GeoCoords);
		}
	}

	[Token(Token = "0x170000F3")]
	public static GeoCoords NorthPole
	{
		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xC391E8", Offset = "0xC391E8", VA = "0xC391E8")]
		get
		{
			return default(GeoCoords);
		}
	}

	[Token(Token = "0x6000AF9")]
	[Address(RVA = "0xC38F30", Offset = "0xC38F30", VA = "0xC38F30")]
	public GeoCoords(float latitude, float longitude)
	{
	}

	[Token(Token = "0x6000AFA")]
	[Address(RVA = "0xC3910C", Offset = "0xC3910C", VA = "0xC3910C")]
	public GeoCoords(string location)
	{
	}

	[Token(Token = "0x6000B03")]
	[Address(RVA = "0xC392EC", Offset = "0xC392EC", VA = "0xC392EC", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000B04")]
	[Address(RVA = "0xC393D8", Offset = "0xC393D8", VA = "0xC393D8")]
	public string ToStringRoundTrip()
	{
		return null;
	}
}
[Token(Token = "0x20001AF")]
public static class GraphicsHelper
{
	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector2 svOldPoint;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Vector2 svNewPoint;

	[Token(Token = "0x6000B05")]
	[Address(RVA = "0xC393E0", Offset = "0xC393E0", VA = "0xC393E0")]
	public static bool IsPointInsidePolygon(Vector2 p, ref Vector2[] poly)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001B0")]
public static class Interpolation
{
	[Token(Token = "0x6000B07")]
	[Address(RVA = "0xC46520", Offset = "0xC46520", VA = "0xC46520")]
	public static double Ease(double mu)
	{
		return default(double);
	}

	[Token(Token = "0x6000B08")]
	[Address(RVA = "0xC46558", Offset = "0xC46558", VA = "0xC46558")]
	public static float Cosine(float from, float to, float mu)
	{
		return default(float);
	}

	[Token(Token = "0x6000B09")]
	[Address(RVA = "0xC46630", Offset = "0xC46630", VA = "0xC46630")]
	public static double EaseIn(double mu, int power = 3)
	{
		return default(double);
	}

	[Token(Token = "0x6000B0A")]
	[Address(RVA = "0xC46658", Offset = "0xC46658", VA = "0xC46658")]
	public static double EaseOut(double mu, int power = 3)
	{
		return default(double);
	}

	[Token(Token = "0x6000B0B")]
	[Address(RVA = "0xC466A0", Offset = "0xC466A0", VA = "0xC466A0")]
	public static float EaseInOutSine(float t)
	{
		return default(float);
	}

	[Token(Token = "0x6000B0C")]
	[Address(RVA = "0xC466C8", Offset = "0xC466C8", VA = "0xC466C8")]
	public static float EaseInOutSine(float t, float b, float c, float d)
	{
		return default(float);
	}

	[Token(Token = "0x6000B0D")]
	[Address(RVA = "0xC467A0", Offset = "0xC467A0", VA = "0xC467A0")]
	public static float EaseInOutExpf(float mu, int power = 3)
	{
		return default(float);
	}

	[Token(Token = "0x6000B0E")]
	[Address(RVA = "0xC46918", Offset = "0xC46918", VA = "0xC46918")]
	public static double EaseInOutExp(double mu, int power = 3)
	{
		return default(double);
	}

	[Token(Token = "0x6000B0F")]
	[Address(RVA = "0xC469B0", Offset = "0xC469B0", VA = "0xC469B0")]
	public static double Catmullrom(double t, double p0, double p1, double p2, double p3)
	{
		return default(double);
	}

	[Token(Token = "0x6000B10")]
	[Address(RVA = "0xC46A58", Offset = "0xC46A58", VA = "0xC46A58")]
	public static double EaseInExp(double t, double b, double c, double d, int pow)
	{
		return default(double);
	}

	[Token(Token = "0x6000B11")]
	[Address(RVA = "0xC467C8", Offset = "0xC467C8", VA = "0xC467C8")]
	public static float EaseInOutExpf(float t, float b, float c, float d, int pow)
	{
		return default(float);
	}

	[Token(Token = "0x6000B12")]
	[Address(RVA = "0xC46B18", Offset = "0xC46B18", VA = "0xC46B18")]
	public static double EaseInOutExp(double t, double b, double c, double d, int pow)
	{
		return default(double);
	}
}
namespace Common.Collections.Generic
{
	[Token(Token = "0x20001B1")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xC2E878", Offset = "0xC2E878")]
	public interface IOrderedDictionary<TKey, TValue> : IDictionary<TKey, TValue>, IOrderedDictionary, IEnumerable, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, ICollection, IDictionary
	{
		[Token(Token = "0x170000F4")]
		new TValue Item
		{
			[Token(Token = "0x6000B13")]
			get;
			[Token(Token = "0x6000B14")]
			set;
		}

		[Token(Token = "0x170000F5")]
		new TValue Item
		{
			[Token(Token = "0x6000B15")]
			get;
			[Token(Token = "0x6000B16")]
			set;
		}

		[Token(Token = "0x170000F6")]
		new int Count
		{
			[Token(Token = "0x6000B17")]
			get;
		}

		[Token(Token = "0x170000F7")]
		new ICollection<TKey> Keys
		{
			[Token(Token = "0x6000B18")]
			get;
		}

		[Token(Token = "0x170000F8")]
		new ICollection<TValue> Values
		{
			[Token(Token = "0x6000B19")]
			get;
		}

		[Token(Token = "0x6000B1A")]
		new void Add(TKey key, TValue value);

		[Token(Token = "0x6000B1B")]
		new void Clear();

		[Token(Token = "0x6000B1C")]
		void Insert(int index, TKey key, TValue value);

		[Token(Token = "0x6000B1D")]
		int IndexOf(TKey key);

		[Token(Token = "0x6000B1E")]
		bool ContainsValue(TValue value);

		[Token(Token = "0x6000B1F")]
		bool ContainsValue(TValue value, IEqualityComparer<TValue> comparer);

		[Token(Token = "0x6000B20")]
		new bool ContainsKey(TKey key);

		[Token(Token = "0x6000B21")]
		new IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator();

		[Token(Token = "0x6000B22")]
		new bool Remove(TKey key);

		[Token(Token = "0x6000B23")]
		new void RemoveAt(int index);

		[Token(Token = "0x6000B24")]
		new bool TryGetValue(TKey key, out TValue value);

		[Token(Token = "0x6000B25")]
		TValue GetValue(TKey key);

		[Token(Token = "0x6000B26")]
		void SetValue(TKey key, TValue value);

		[Token(Token = "0x6000B27")]
		KeyValuePair<TKey, TValue> GetItem(int index);

		[Token(Token = "0x6000B28")]
		void SetItem(int index, TValue value);
	}
}
[Token(Token = "0x20001B2")]
public class JulianDate : IComparable
{
	[Token(Token = "0x20001B3")]
	public enum Era
	{
		[Token(Token = "0x40006EB")]
		CE,
		[Token(Token = "0x40006EC")]
		BCE
	}

	[Token(Token = "0x40006E8")]
	public const double J2000 = 2451545.0;

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private double mdJD;

	[Token(Token = "0x6000B29")]
	[Address(RVA = "0xC48390", Offset = "0xC48390", VA = "0xC48390")]
	public JulianDate()
	{
	}

	[Token(Token = "0x6000B2A")]
	[Address(RVA = "0xC483B4", Offset = "0xC483B4", VA = "0xC483B4")]
	public JulianDate(double jd)
	{
	}

	[Token(Token = "0x6000B2B")]
	[Address(RVA = "0xC483DC", Offset = "0xC483DC", VA = "0xC483DC")]
	public JulianDate(DateTime dateTime)
	{
	}

	[Token(Token = "0x6000B2C")]
	[Address(RVA = "0xC484DC", Offset = "0xC484DC", VA = "0xC484DC")]
	public JulianDate(Era era, int year, int month, int day)
	{
	}

	[Token(Token = "0x6000B2D")]
	[Address(RVA = "0xC48750", Offset = "0xC48750", VA = "0xC48750")]
	public JulianDate(Era era, int year, int month, int day, int hour, int minute, int second, int millisecond)
	{
	}

	[Token(Token = "0x6000B2E")]
	[Address(RVA = "0xC487B8", Offset = "0xC487B8", VA = "0xC487B8")]
	public JulianDate(TimeComponents components)
	{
	}

	[Token(Token = "0x6000B2F")]
	[Address(RVA = "0xC488F8", Offset = "0xC488F8", VA = "0xC488F8")]
	public static implicit operator double(JulianDate julianDate)
	{
		return default(double);
	}

	[Token(Token = "0x6000B30")]
	[Address(RVA = "0xC4891C", Offset = "0xC4891C", VA = "0xC4891C")]
	public static implicit operator JulianDate(double d)
	{
		return null;
	}

	[Token(Token = "0x6000B31")]
	[Address(RVA = "0xC48998", Offset = "0xC48998", VA = "0xC48998")]
	public void Set(double jd)
	{
	}

	[Token(Token = "0x6000B32")]
	[Address(RVA = "0xC489A4", Offset = "0xC489A4", VA = "0xC489A4")]
	public void Set(JulianDate jd)
	{
	}

	[Token(Token = "0x6000B33")]
	[Address(RVA = "0xC48420", Offset = "0xC48420", VA = "0xC48420")]
	public void SetFromDateTime(DateTime dateTime)
	{
	}

	[Token(Token = "0x6000B34")]
	[Address(RVA = "0xC48538", Offset = "0xC48538", VA = "0xC48538")]
	public void SetFromComponents(Era era, int year, int month, int day, int hour, int minute, int second, int millisecond)
	{
	}

	[Token(Token = "0x6000B35")]
	[Address(RVA = "0xC489CC", Offset = "0xC489CC", VA = "0xC489CC")]
	public static bool operator <(JulianDate lhs, JulianDate rhs)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B36")]
	[Address(RVA = "0xC48A18", Offset = "0xC48A18", VA = "0xC48A18")]
	public static bool operator >(JulianDate lhs, JulianDate rhs)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B37")]
	[Address(RVA = "0xC48A68", Offset = "0xC48A68", VA = "0xC48A68")]
	public DateTime ConvertToUTCDateTime()
	{
		return default(DateTime);
	}

	[Token(Token = "0x6000B38")]
	[Address(RVA = "0xC48B18", Offset = "0xC48B18", VA = "0xC48B18")]
	public int GetYear()
	{
		return default(int);
	}

	[Token(Token = "0x6000B39")]
	[Address(RVA = "0xC48CD0", Offset = "0xC48CD0", VA = "0xC48CD0", Slot = "4")]
	public int CompareTo(object obj)
	{
		return default(int);
	}
}
[Token(Token = "0x20001B4")]
public static class ListExtensions
{
	[Token(Token = "0x6000B3A")]
	public static void Insert<T>(this List<T> @this, T item) where T : IComparable<T>
	{
	}
}
[Token(Token = "0x20001B5")]
public static class MathHelper
{
	[Token(Token = "0x40006ED")]
	public const double DegToRad = Math.PI / 180.0;

	[Token(Token = "0x40006EE")]
	public const double RadToDeg = 180.0 / Math.PI;

	[Token(Token = "0x40006EF")]
	public const double GOLDEN_RATIO = 1.618033988749895;

	[Token(Token = "0x40006F0")]
	public const double INVERSE_GOLDEN_RATIO = 0.6180339887498948;

	[Token(Token = "0x6000B3B")]
	[Address(RVA = "0xC574E0", Offset = "0xC574E0", VA = "0xC574E0")]
	public static float DampenWithLimit(float value, float dampenValue, float limit)
	{
		return default(float);
	}

	[Token(Token = "0x6000B3C")]
	[Address(RVA = "0xC575BC", Offset = "0xC575BC", VA = "0xC575BC")]
	public static float DampenWithLimitTested(float value, float dampenValue, float limit, float testValue)
	{
		return default(float);
	}

	[Token(Token = "0x6000B3D")]
	[Address(RVA = "0xC4EE10", Offset = "0xC4EE10", VA = "0xC4EE10")]
	public static double Remap(double x, double a, double b, double c, double d)
	{
		return default(double);
	}

	[Token(Token = "0x6000B3E")]
	[Address(RVA = "0xC34ECC", Offset = "0xC34ECC", VA = "0xC34ECC")]
	public static float Remapf(float x, float a, float b, float c, float d)
	{
		return default(float);
	}

	[Token(Token = "0x6000B3F")]
	[Address(RVA = "0xC576A8", Offset = "0xC576A8", VA = "0xC576A8")]
	public static float Remapf(float x, Range inputRange, Range outputRange)
	{
		return default(float);
	}

	[Token(Token = "0x6000B40")]
	[Address(RVA = "0xC57730", Offset = "0xC57730", VA = "0xC57730")]
	public static float CosineInterpolatef(float y1, float y2, float mu)
	{
		return default(float);
	}

	[Token(Token = "0x6000B41")]
	[Address(RVA = "0xC57814", Offset = "0xC57814", VA = "0xC57814")]
	public static float HermiteInterpolatef(float v0, float v1, float v2, float v3, float x)
	{
		return default(float);
	}

	[Token(Token = "0x6000B42")]
	[Address(RVA = "0xC57958", Offset = "0xC57958", VA = "0xC57958")]
	public static bool IsWithinTolerancef(float value1, float value2, float epsilon)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B43")]
	[Address(RVA = "0xC57A04", Offset = "0xC57A04", VA = "0xC57A04")]
	public static void Wrap(ref double value, double min, double max)
	{
	}

	[Token(Token = "0x6000B44")]
	[Address(RVA = "0xC57A58", Offset = "0xC57A58", VA = "0xC57A58")]
	public static double SizeFromAngularDiameterDegrees(double angularDiameter, double distance)
	{
		return default(double);
	}

	[Token(Token = "0x6000B45")]
	[Address(RVA = "0xC4243C", Offset = "0xC4243C", VA = "0xC4243C")]
	public static float SizeFromAngularDiameterDegreesf(float angularDiameter, float distance)
	{
		return default(float);
	}

	[Token(Token = "0x6000B46")]
	[Address(RVA = "0xC57AA8", Offset = "0xC57AA8", VA = "0xC57AA8")]
	public static double AngularDiameterDegrees(double diameter, double distance = 1.0)
	{
		return default(double);
	}

	[Token(Token = "0x6000B47")]
	[Address(RVA = "0xC57AE0", Offset = "0xC57AE0", VA = "0xC57AE0")]
	public static bool IsBetween(this double x, double a, double b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B48")]
	[Address(RVA = "0xC57B28", Offset = "0xC57B28", VA = "0xC57B28")]
	public static double Lerp(double from, double to, double t)
	{
		return default(double);
	}

	[Token(Token = "0x6000B49")]
	[Address(RVA = "0xC57B78", Offset = "0xC57B78", VA = "0xC57B78")]
	public static double Clamp(double value, double min, double max)
	{
		return default(double);
	}

	[Token(Token = "0x6000B4A")]
	[Address(RVA = "0xC57BA8", Offset = "0xC57BA8", VA = "0xC57BA8")]
	public static double DeltaAngleInDegreesAdjustInputs(ref double angleFrom, ref double angleTo)
	{
		return default(double);
	}
}
[Token(Token = "0x20001B6")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xC2E8EC", Offset = "0xC2E8EC")]
public struct Matrix4x4Double
{
	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public double m00;

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public double m01;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public double m02;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public double m03;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public double m10;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public double m11;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public double m12;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public double m13;

	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public double m20;

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public double m21;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public double m22;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public double m23;

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public double m30;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public double m31;

	[Token(Token = "0x40006FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public double m32;

	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public double m33;

	[Token(Token = "0x170000F9")]
	public static Matrix4x4Double identity
	{
		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0xC57CD0", Offset = "0xC57CD0", VA = "0xC57CD0")]
		get
		{
			return default(Matrix4x4Double);
		}
	}

	[Token(Token = "0x170000FA")]
	public static Matrix4x4Double zero
	{
		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0xC57D30", Offset = "0xC57D30", VA = "0xC57D30")]
		get
		{
			return default(Matrix4x4Double);
		}
	}

	[Token(Token = "0x170000FB")]
	public double Item
	{
		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0xC57EC4", Offset = "0xC57EC4", VA = "0xC57EC4")]
		get
		{
			return default(double);
		}
		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0xC5805C", Offset = "0xC5805C", VA = "0xC5805C")]
		set
		{
		}
	}

	[Token(Token = "0x170000FC")]
	public double Item
	{
		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0xC58088", Offset = "0xC58088", VA = "0xC58088")]
		get
		{
			return default(double);
		}
		[Token(Token = "0x6000B50")]
		[Address(RVA = "0xC58090", Offset = "0xC58090", VA = "0xC58090")]
		set
		{
		}
	}

	[Token(Token = "0x6000B51")]
	[Address(RVA = "0xC580B0", Offset = "0xC580B0", VA = "0xC580B0")]
	public static Matrix4x4Double CreateXRotation(double radians)
	{
		return default(Matrix4x4Double);
	}

	[Token(Token = "0x6000B52")]
	[Address(RVA = "0xC581A8", Offset = "0xC581A8", VA = "0xC581A8")]
	public static Matrix4x4Double CreateYRotation(double radians)
	{
		return default(Matrix4x4Double);
	}

	[Token(Token = "0x6000B53")]
	[Address(RVA = "0xC582A0", Offset = "0xC582A0", VA = "0xC582A0")]
	public static Matrix4x4Double CreateZRotation(double radians)
	{
		return default(Matrix4x4Double);
	}

	[Token(Token = "0x6000B54")]
	[Address(RVA = "0xC58398", Offset = "0xC58398", VA = "0xC58398")]
	public static Matrix4x4Double operator *(Matrix4x4Double lhs, Matrix4x4Double rhs)
	{
		return default(Matrix4x4Double);
	}

	[Token(Token = "0x6000B55")]
	[Address(RVA = "0xC59200", Offset = "0xC59200", VA = "0xC59200")]
	public static Vector3Double operator *(Matrix4x4Double lhs, Vector3Double v)
	{
		return default(Vector3Double);
	}
}
[Token(Token = "0x20001B7")]
public static class MatrixHelper
{
	[Token(Token = "0x6000B56")]
	[Address(RVA = "0xC59438", Offset = "0xC59438", VA = "0xC59438")]
	public static Matrix4x4 Translate(this Matrix4x4 matrix, float x, float y, float z)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000B57")]
	[Address(RVA = "0xC596F0", Offset = "0xC596F0", VA = "0xC596F0")]
	public static Matrix4x4 Translate(this Matrix4x4 matrix, Vector3 translate)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000B58")]
	[Address(RVA = "0xC59950", Offset = "0xC59950", VA = "0xC59950")]
	public static Matrix4x4 TranslateRotate(this Matrix4x4 matrix, Vector3 translate, Vector3 rotate)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000B59")]
	[Address(RVA = "0xC59BE4", Offset = "0xC59BE4", VA = "0xC59BE4")]
	public static Matrix4x4 TranslateRotate(this Matrix4x4 matrix, float x, float y, float z, float pitch, float yaw, float roll)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000B5A")]
	[Address(RVA = "0xC59EB4", Offset = "0xC59EB4", VA = "0xC59EB4")]
	public static Matrix4x4 Pitch(this Matrix4x4 matrix, float pitch)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000B5B")]
	[Address(RVA = "0xC5A15C", Offset = "0xC5A15C", VA = "0xC5A15C")]
	public static Matrix4x4 Yaw(this Matrix4x4 matrix, float yaw)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000B5C")]
	[Address(RVA = "0xC5A404", Offset = "0xC5A404", VA = "0xC5A404")]
	public static Matrix4x4 Roll(this Matrix4x4 matrix, float roll)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000B5D")]
	[Address(RVA = "0xC5A6AC", Offset = "0xC5A6AC", VA = "0xC5A6AC")]
	public static Vector3 Position(this Matrix4x4 matrix)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000B5E")]
	[Address(RVA = "0xC5A7CC", Offset = "0xC5A7CC", VA = "0xC5A7CC")]
	public static Matrix4x4 CreateXRotationUsingRadians(float radians)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000B5F")]
	[Address(RVA = "0xC5A954", Offset = "0xC5A954", VA = "0xC5A954")]
	public static Matrix4x4 CreateYRotationUsingRadians(float radians)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000B60")]
	[Address(RVA = "0xC5AADC", Offset = "0xC5AADC", VA = "0xC5AADC")]
	public static Matrix4x4 CreateZRotationUsingRadians(float radians)
	{
		return default(Matrix4x4);
	}
}
namespace Common.Noise
{
	[Token(Token = "0x20001B8")]
	public class Noise
	{
		[Token(Token = "0x20001B9")]
		private class NoiseTimer
		{
			[Token(Token = "0x4000707")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private float mfStartTime;

			[Token(Token = "0x4000708")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private float mfDuration;

			[Token(Token = "0x6000B6A")]
			[Address(RVA = "0x174794", Offset = "0x174794", VA = "0x174794")]
			public NoiseTimer(float duration)
			{
			}

			[Token(Token = "0x6000B6B")]
			[Address(RVA = "0x1748D4", Offset = "0x1748D4", VA = "0x1748D4")]
			public bool IsFinished(out float fractionComplete)
			{
				return default(bool);
			}

			[Token(Token = "0x6000B6C")]
			[Address(RVA = "0x174AB4", Offset = "0x174AB4", VA = "0x174AB4")]
			public bool IsFinished()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float mfOffset;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float mfFrequency;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float mfAmplitude;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float mfSamplePosition;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float mfY;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private NoiseTimer mTimer;

		[Token(Token = "0x170000FD")]
		public float frequency
		{
			[Token(Token = "0x6000B62")]
			[Address(RVA = "0x1747C4", Offset = "0x1747C4", VA = "0x1747C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B63")]
			[Address(RVA = "0x1747CC", Offset = "0x1747CC", VA = "0x1747CC")]
			set
			{
			}
		}

		[Token(Token = "0x170000FE")]
		public float value
		{
			[Token(Token = "0x6000B67")]
			[Address(RVA = "0x1749F0", Offset = "0x1749F0", VA = "0x1749F0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000FF")]
		public float amplitude
		{
			[Token(Token = "0x6000B69")]
			[Address(RVA = "0x174AAC", Offset = "0x174AAC", VA = "0x174AAC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B68")]
			[Address(RVA = "0x174AA4", Offset = "0x174AA4", VA = "0x174AA4")]
			set
			{
			}
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x1746B4", Offset = "0x1746B4", VA = "0x1746B4")]
		public Noise(float duration, float frequency, float amplitude)
		{
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x1747D4", Offset = "0x1747D4", VA = "0x1747D4")]
		public void Update()
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x17482C", Offset = "0x17482C", VA = "0x17482C")]
		public bool UpdateAndReturnFinished(out float progress)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x17493C", Offset = "0x17493C", VA = "0x17493C")]
		public float GetValueAt(float y)
		{
			return default(float);
		}
	}
	[Serializable]
	[Token(Token = "0x20001BA")]
	public class NoiseChannel
	{
		[Token(Token = "0x20001BB")]
		public enum Type
		{
			[Token(Token = "0x4000711")]
			TransformEnumStart,
			[Token(Token = "0x4000712")]
			Position_X,
			[Token(Token = "0x4000713")]
			Position_Y,
			[Token(Token = "0x4000714")]
			Position_Z,
			[Token(Token = "0x4000715")]
			Rotation_Pitch,
			[Token(Token = "0x4000716")]
			Rotation_Heading,
			[Token(Token = "0x4000717")]
			Rotation_Roll,
			[Token(Token = "0x4000718")]
			Scale_X,
			[Token(Token = "0x4000719")]
			Scale_Y,
			[Token(Token = "0x400071A")]
			Scale_Z,
			[Token(Token = "0x400071B")]
			TransformEnumEnd,
			[Token(Token = "0x400071C")]
			LightEnumStart,
			[Token(Token = "0x400071D")]
			Radius,
			[Token(Token = "0x400071E")]
			Intensity,
			[Token(Token = "0x400071F")]
			LightEnumEnd
		}

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		private Type meType;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Range mMagnitudeRange;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private float mfFrequency;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Noise mNoise;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float mfMagStartCache;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float mfMagEndCache;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float mfFrequencyCache;

		[Token(Token = "0x17000100")]
		public Type type
		{
			[Token(Token = "0x6000B6F")]
			[Address(RVA = "0x174B60", Offset = "0x174B60", VA = "0x174B60")]
			get
			{
				return default(Type);
			}
			[Token(Token = "0x6000B6E")]
			[Address(RVA = "0x174B58", Offset = "0x174B58", VA = "0x174B58")]
			set
			{
			}
		}

		[Token(Token = "0x17000101")]
		public Range magnitudeRange
		{
			[Token(Token = "0x6000B70")]
			[Address(RVA = "0x174B68", Offset = "0x174B68", VA = "0x174B68")]
			get
			{
				return default(Range);
			}
			[Token(Token = "0x6000B71")]
			[Address(RVA = "0x174B7C", Offset = "0x174B7C", VA = "0x174B7C")]
			set
			{
			}
		}

		[Token(Token = "0x17000102")]
		public float frequency
		{
			[Token(Token = "0x6000B73")]
			[Address(RVA = "0x174B90", Offset = "0x174B90", VA = "0x174B90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B72")]
			[Address(RVA = "0x174B88", Offset = "0x174B88", VA = "0x174B88")]
			set
			{
			}
		}

		[Token(Token = "0x17000103")]
		public float value
		{
			[Token(Token = "0x6000B75")]
			[Address(RVA = "0x174D50", Offset = "0x174D50", VA = "0x174D50")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x174AF4", Offset = "0x174AF4", VA = "0x174AF4")]
		public NoiseChannel(Type type, float startMag, float endMag, float frequency)
		{
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x174B98", Offset = "0x174B98", VA = "0x174B98")]
		public void Update()
		{
		}
	}
	[Token(Token = "0x20001BC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xC2E9E0", Offset = "0xC2E9E0")]
	public class NoiseController : MonoBehaviour
	{
		[Token(Token = "0x20001BD")]
		public enum Component
		{
			[Token(Token = "0x4000723")]
			Transform,
			[Token(Token = "0x4000724")]
			Light
		}

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private Component meComponentToAffect;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<NoiseChannel> maChannels;

		[Token(Token = "0x17000104")]
		public List<NoiseChannel> channels
		{
			[Token(Token = "0x6000B77")]
			[Address(RVA = "0x174DA4", Offset = "0x174DA4", VA = "0x174DA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000105")]
		public Component component
		{
			[Token(Token = "0x6000B79")]
			[Address(RVA = "0x174DB4", Offset = "0x174DB4", VA = "0x174DB4")]
			get
			{
				return default(Component);
			}
			[Token(Token = "0x6000B78")]
			[Address(RVA = "0x174DAC", Offset = "0x174DAC", VA = "0x174DAC")]
			set
			{
			}
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x174D9C", Offset = "0x174D9C", VA = "0x174D9C")]
		public NoiseController()
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x174DBC", Offset = "0x174DBC", VA = "0x174DBC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x174E4C", Offset = "0x174E4C", VA = "0x174E4C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x174E50", Offset = "0x174E50", VA = "0x174E50")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x1753A0", Offset = "0x1753A0", VA = "0x1753A0")]
		public void AddChannel(NoiseChannel channel)
		{
		}
	}
}
namespace Common.Collections.Generic
{
	[Token(Token = "0x20001BE")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xC2EA34", Offset = "0xC2EA34")]
	public class OrderedDictionary<TKey, TValue> : IOrderedDictionary<TKey, TValue>, IDictionary<TKey, TValue>, IOrderedDictionary, IEnumerable, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, ICollection, IDictionary
	{
		[Token(Token = "0x200040E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EB3C", Offset = "0xC2EB3C")]
		private sealed class <SortValues>c__AnonStorey0
		{
			[Token(Token = "0x40016C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal IComparer<TValue> comparer;

			[Token(Token = "0x6001A0A")]
			public <SortValues>c__AnonStorey0()
			{
			}

			[Token(Token = "0x6001A0B")]
			internal int <>m__0(KeyValuePair<TKey, TValue> x, KeyValuePair<TKey, TValue> y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x200040F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EB4C", Offset = "0xC2EB4C")]
		private sealed class <SortValues>c__AnonStorey1
		{
			[Token(Token = "0x40016C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal Comparison<TValue> comparison;

			[Token(Token = "0x6001A0C")]
			public <SortValues>c__AnonStorey1()
			{
			}

			[Token(Token = "0x6001A0D")]
			internal int <>m__0(KeyValuePair<TKey, TValue> x, KeyValuePair<TKey, TValue> y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4000725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private KeyedCollection2<TKey, KeyValuePair<TKey, TValue>> _keyedCollection;

		[Token(Token = "0x4000726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EA68", Offset = "0xC2EA68")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xC2EA68", Offset = "0xC2EA68")]
		private IEqualityComparer<TKey> <Comparer>k__BackingField;

		[Token(Token = "0x4000727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EA9C", Offset = "0xC2EA9C")]
		private static Func<KeyValuePair<TKey, TValue>, TKey> <>f__am$cache0;

		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EAAC", Offset = "0xC2EAAC")]
		private static Func<KeyValuePair<TKey, TValue>, TValue> <>f__am$cache1;

		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EABC", Offset = "0xC2EABC")]
		private static Func<KeyValuePair<TKey, TValue>, TKey> <>f__am$cache2;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EACC", Offset = "0xC2EACC")]
		private static Func<KeyValuePair<TKey, TValue>, TKey> <>f__am$cache3;

		[Token(Token = "0x17000106")]
		private ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys
		{
			[Token(Token = "0x6000BA3")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000107")]
		private ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values
		{
			[Token(Token = "0x6000BA6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000108")]
		private TValue System.Collections.Generic.IDictionary<TKey,TValue>.Item
		{
			[Token(Token = "0x6000BA7")]
			get
			{
				return (TValue)null;
			}
			[Token(Token = "0x6000BA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000109")]
		private int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Count
		{
			[Token(Token = "0x6000BAD")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700010A")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
		{
			[Token(Token = "0x6000BAE")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010B")]
		private object System.Collections.Specialized.IOrderedDictionary.Item
		{
			[Token(Token = "0x6000BB5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BB6")]
			set
			{
			}
		}

		[Token(Token = "0x1700010C")]
		private bool System.Collections.IDictionary.IsFixedSize
		{
			[Token(Token = "0x6000BBB")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010D")]
		private bool System.Collections.IDictionary.IsReadOnly
		{
			[Token(Token = "0x6000BBC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010E")]
		private ICollection System.Collections.IDictionary.Keys
		{
			[Token(Token = "0x6000BBD")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010F")]
		private ICollection System.Collections.IDictionary.Values
		{
			[Token(Token = "0x6000BBF")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000110")]
		private object System.Collections.IDictionary.Item
		{
			[Token(Token = "0x6000BC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BC1")]
			set
			{
			}
		}

		[Token(Token = "0x17000111")]
		private int System.Collections.ICollection.Count
		{
			[Token(Token = "0x6000BC3")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000112")]
		private bool System.Collections.ICollection.IsSynchronized
		{
			[Token(Token = "0x6000BC4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000113")]
		private object System.Collections.ICollection.SyncRoot
		{
			[Token(Token = "0x6000BC5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000114")]
		public TValue Item
		{
			[Token(Token = "0x6000B82")]
			get
			{
				return (TValue)null;
			}
			[Token(Token = "0x6000B83")]
			set
			{
			}
		}

		[Token(Token = "0x17000115")]
		public TValue Item
		{
			[Token(Token = "0x6000B84")]
			get
			{
				return (TValue)null;
			}
			[Token(Token = "0x6000B85")]
			set
			{
			}
		}

		[Token(Token = "0x17000116")]
		public int Count
		{
			[Token(Token = "0x6000B86")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000117")]
		public ICollection<TKey> Keys
		{
			[Token(Token = "0x6000B87")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000118")]
		public ICollection<TValue> Values
		{
			[Token(Token = "0x6000B88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000119")]
		public IEqualityComparer<TKey> Comparer
		{
			[Token(Token = "0x6000B89")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EADC", Offset = "0xC2EADC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B8A")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EAEC", Offset = "0xC2EAEC")]
			private set
			{
			}
		}

		[Token(Token = "0x6000B7E")]
		public OrderedDictionary()
		{
		}

		[Token(Token = "0x6000B7F")]
		public OrderedDictionary(IEqualityComparer<TKey> comparer)
		{
		}

		[Token(Token = "0x6000B80")]
		public OrderedDictionary(IOrderedDictionary<TKey, TValue> dictionary)
		{
		}

		[Token(Token = "0x6000B81")]
		public OrderedDictionary(IOrderedDictionary<TKey, TValue> dictionary, IEqualityComparer<TKey> comparer)
		{
		}

		[Token(Token = "0x6000B8B")]
		private void Initialize([Optional] IEqualityComparer<TKey> comparer)
		{
		}

		[Token(Token = "0x6000B8C")]
		public void Add(TKey key, TValue value)
		{
		}

		[Token(Token = "0x6000B8D")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000B8E")]
		public void Insert(int index, TKey key, TValue value)
		{
		}

		[Token(Token = "0x6000B8F")]
		public int IndexOf(TKey key)
		{
			return default(int);
		}

		[Token(Token = "0x6000B90")]
		public bool ContainsValue(TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B91")]
		public bool ContainsValue(TValue value, IEqualityComparer<TValue> comparer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B92")]
		public bool ContainsKey(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B93")]
		public KeyValuePair<TKey, TValue> GetItem(int index)
		{
			return default(KeyValuePair<TKey, TValue>);
		}

		[Token(Token = "0x6000B94")]
		public void SetItem(int index, TValue value)
		{
		}

		[Token(Token = "0x6000B95")]
		public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000B96")]
		public bool Remove(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B97")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000B98")]
		public TValue GetValue(TKey key)
		{
			return (TValue)null;
		}

		[Token(Token = "0x6000B99")]
		public void SetValue(TKey key, TValue value)
		{
		}

		[Token(Token = "0x6000B9A")]
		public bool TryGetValue(TKey key, out TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9B")]
		public void SortKeys()
		{
		}

		[Token(Token = "0x6000B9C")]
		public void SortKeys(IComparer<TKey> comparer)
		{
		}

		[Token(Token = "0x6000B9D")]
		public void SortKeys(Comparison<TKey> comparison)
		{
		}

		[Token(Token = "0x6000B9E")]
		public void SortValues()
		{
		}

		[Token(Token = "0x6000B9F")]
		public void SortValues(IComparer<TValue> comparer)
		{
		}

		[Token(Token = "0x6000BA0")]
		public void SortValues(Comparison<TValue> comparison)
		{
		}

		[Token(Token = "0x6000BA1")]
		private void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value)
		{
		}

		[Token(Token = "0x6000BA2")]
		private bool System.Collections.Generic.IDictionary<TKey,TValue>.ContainsKey(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA4")]
		private bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA5")]
		private bool System.Collections.Generic.IDictionary<TKey,TValue>.TryGetValue(TKey key, out TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA9")]
		private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey, TValue> item)
		{
		}

		[Token(Token = "0x6000BAA")]
		private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear()
		{
		}

		[Token(Token = "0x6000BAB")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAC")]
		private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000BAF")]
		private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey, TValue> item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB0")]
		private IEnumerator<KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000BB1")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000BB2")]
		private IDictionaryEnumerator System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000BB3")]
		private void System.Collections.Specialized.IOrderedDictionary.Insert(int index, object key, object value)
		{
		}

		[Token(Token = "0x6000BB4")]
		private void System.Collections.Specialized.IOrderedDictionary.RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000BB7")]
		private void System.Collections.IDictionary.Add(object key, object value)
		{
		}

		[Token(Token = "0x6000BB8")]
		private void System.Collections.IDictionary.Clear()
		{
		}

		[Token(Token = "0x6000BB9")]
		private bool System.Collections.IDictionary.Contains(object key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBA")]
		private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000BBE")]
		private void System.Collections.IDictionary.Remove(object key)
		{
		}

		[Token(Token = "0x6000BC2")]
		private void System.Collections.ICollection.CopyTo(Array array, int index)
		{
		}

		[Token(Token = "0x6000BC6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EAFC", Offset = "0xC2EAFC")]
		private static TKey <get_Keys>m__0(KeyValuePair<TKey, TValue> x)
		{
			return (TKey)null;
		}

		[Token(Token = "0x6000BC7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EB0C", Offset = "0xC2EB0C")]
		private static TValue <get_Values>m__1(KeyValuePair<TKey, TValue> x)
		{
			return (TValue)null;
		}

		[Token(Token = "0x6000BC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EB1C", Offset = "0xC2EB1C")]
		private static TKey <Initialize>m__2(KeyValuePair<TKey, TValue> x)
		{
			return (TKey)null;
		}

		[Token(Token = "0x6000BC9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EB2C", Offset = "0xC2EB2C")]
		private static TKey <Initialize>m__3(KeyValuePair<TKey, TValue> x)
		{
			return (TKey)null;
		}
	}
	[Token(Token = "0x20001BF")]
	public class KeyedCollection2<TKey, TItem> : KeyedCollection<TKey, TItem>
	{
		[Token(Token = "0x2000410")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EB5C", Offset = "0xC2EB5C")]
		private sealed class <SortByKeys>c__AnonStorey0
		{
			[Token(Token = "0x40016C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal IComparer<TKey> keyComparer;

			[Token(Token = "0x40016C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal KeyedCollection2<TKey, TItem> $this;

			[Token(Token = "0x6001A0E")]
			public <SortByKeys>c__AnonStorey0()
			{
			}

			[Token(Token = "0x6001A0F")]
			internal int <>m__0(TItem x, TItem y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000411")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EB6C", Offset = "0xC2EB6C")]
		private sealed class <SortByKeys>c__AnonStorey1
		{
			[Token(Token = "0x40016C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal Comparison<TKey> keyComparison;

			[Token(Token = "0x40016C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal KeyedCollection2<TKey, TItem> $this;

			[Token(Token = "0x6001A10")]
			public <SortByKeys>c__AnonStorey1()
			{
			}

			[Token(Token = "0x6001A11")]
			internal int <>m__0(TItem x, TItem y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x2000412")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EB7C", Offset = "0xC2EB7C")]
		private sealed class <Sort>c__AnonStorey2
		{
			[Token(Token = "0x40016CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal Comparison<TItem> comparison;

			[Token(Token = "0x6001A12")]
			public <Sort>c__AnonStorey2()
			{
			}

			[Token(Token = "0x6001A13")]
			internal int <>m__0(TItem x, TItem y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x400072B")]
		private const string DelegateNullExceptionMessage = "Delegate passed cannot be null";

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Func<TItem, TKey> _getKeyForItemDelegate;

		[Token(Token = "0x6000BCA")]
		public KeyedCollection2(Func<TItem, TKey> getKeyForItemDelegate)
		{
		}

		[Token(Token = "0x6000BCB")]
		public KeyedCollection2(Func<TItem, TKey> getKeyForItemDelegate, IEqualityComparer<TKey> comparer)
		{
		}

		[Token(Token = "0x6000BCC")]
		protected override TKey GetKeyForItem(TItem item)
		{
			return (TKey)null;
		}

		[Token(Token = "0x6000BCD")]
		public void SortByKeys()
		{
		}

		[Token(Token = "0x6000BCE")]
		public void SortByKeys(IComparer<TKey> keyComparer)
		{
		}

		[Token(Token = "0x6000BCF")]
		public void SortByKeys(Comparison<TKey> keyComparison)
		{
		}

		[Token(Token = "0x6000BD0")]
		public void Sort()
		{
		}

		[Token(Token = "0x6000BD1")]
		public void Sort(Comparison<TItem> comparison)
		{
		}

		[Token(Token = "0x6000BD2")]
		public void Sort(IComparer<TItem> comparer)
		{
		}
	}
	[Token(Token = "0x20001C0")]
	public class Comparer2<T> : Comparer<T>
	{
		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Comparison<T> _compareFunction;

		[Token(Token = "0x6000BD3")]
		public Comparer2(Comparison<T> comparison)
		{
		}

		[Token(Token = "0x6000BD4")]
		public override int Compare(T arg1, T arg2)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C1")]
	public class DictionaryEnumerator<TKey, TValue> : IDictionaryEnumerator, IDisposable, IEnumerator
	{
		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IEnumerator<KeyValuePair<TKey, TValue>> impl;

		[Token(Token = "0x1700011A")]
		public DictionaryEntry Entry
		{
			[Token(Token = "0x6000BD9")]
			get
			{
				return default(DictionaryEntry);
			}
		}

		[Token(Token = "0x1700011B")]
		public object Key
		{
			[Token(Token = "0x6000BDA")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011C")]
		public object Value
		{
			[Token(Token = "0x6000BDB")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011D")]
		public object Current
		{
			[Token(Token = "0x6000BDC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BD5")]
		public DictionaryEnumerator(IDictionary<TKey, TValue> value)
		{
		}

		[Token(Token = "0x6000BD6")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000BD7")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000BD8")]
		public bool MoveNext()
		{
			return default(bool);
		}
	}
}
[Serializable]
[Token(Token = "0x20001C2")]
public struct Range
{
	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	private float mfStart;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[SerializeField]
	private float mfEnd;

	[Token(Token = "0x1700011E")]
	public float start
	{
		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0xDF3EA0", Offset = "0xDF3EA0", VA = "0xDF3EA0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700011F")]
	public float end
	{
		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0xDF3EB0", Offset = "0xDF3EB0", VA = "0xDF3EB0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000120")]
	public float length
	{
		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0xDF3ECC", Offset = "0xDF3ECC", VA = "0xDF3ECC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000BDD")]
	[Address(RVA = "0xDF3E8C", Offset = "0xDF3E8C", VA = "0xDF3E8C")]
	public Range(float start, float end)
	{
	}

	[Token(Token = "0x6000BE1")]
	[Address(RVA = "0xDF3F14", Offset = "0xDF3F14", VA = "0xDF3F14")]
	public bool IsInside(float value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BE2")]
	[Address(RVA = "0xDF3FF0", Offset = "0xDF3FF0", VA = "0xDF3FF0")]
	public float GetValue(float mu)
	{
		return default(float);
	}

	[Token(Token = "0x6000BE3")]
	[Address(RVA = "0xDF4008", Offset = "0xDF4008", VA = "0xDF4008")]
	public float GetRandomValue()
	{
		return default(float);
	}
}
[Token(Token = "0x20001C3")]
public struct RangeDouble
{
	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private readonly double mdStart;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private readonly double mdEnd;

	[Token(Token = "0x17000121")]
	public double start
	{
		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0xDF404C", Offset = "0xDF404C", VA = "0xDF404C")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x17000122")]
	public double end
	{
		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0xDF4064", Offset = "0xDF4064", VA = "0xDF4064")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x17000123")]
	public double length
	{
		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0xDF4070", Offset = "0xDF4070", VA = "0xDF4070")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x6000BE4")]
	[Address(RVA = "0xDF402C", Offset = "0xDF402C", VA = "0xDF402C")]
	public RangeDouble(double start, double end)
	{
	}

	[Token(Token = "0x6000BE8")]
	[Address(RVA = "0xDF40B8", Offset = "0xDF40B8", VA = "0xDF40B8")]
	public bool IsInside(double value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BE9")]
	[Address(RVA = "0xDF40F0", Offset = "0xDF40F0", VA = "0xDF40F0")]
	public double GetValue(double mu)
	{
		return default(double);
	}
}
[Token(Token = "0x20001C4")]
public struct RangeInt
{
	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private readonly int miStart;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private readonly int miEnd;

	[Token(Token = "0x17000124")]
	public int start
	{
		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0xDF4194", Offset = "0xDF4194", VA = "0xDF4194")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000125")]
	public int end
	{
		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0xDF41A4", Offset = "0xDF41A4", VA = "0xDF41A4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000126")]
	public int length
	{
		[Token(Token = "0x6000BED")]
		[Address(RVA = "0xDF41AC", Offset = "0xDF41AC", VA = "0xDF41AC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000BEA")]
	[Address(RVA = "0xDF4180", Offset = "0xDF4180", VA = "0xDF4180")]
	public RangeInt(int start, int end)
	{
	}

	[Token(Token = "0x6000BEE")]
	[Address(RVA = "0xDF41BC", Offset = "0xDF41BC", VA = "0xDF41BC")]
	public bool IsInside(int value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BEF")]
	[Address(RVA = "0xDF4298", Offset = "0xDF4298", VA = "0xDF4298")]
	public float GetValue(float mu)
	{
		return default(float);
	}

	[Token(Token = "0x6000BF0")]
	[Address(RVA = "0xDF42A0", Offset = "0xDF42A0", VA = "0xDF42A0")]
	public float GetRandomValue()
	{
		return default(float);
	}
}
[Token(Token = "0x20001C5")]
public class RectDouble
{
	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public double x;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public double y;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public double width;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public double height;

	[Token(Token = "0x6000BF1")]
	[Address(RVA = "0xDF42CC", Offset = "0xDF42CC", VA = "0xDF42CC")]
	public RectDouble(double x, double y, double width, double height)
	{
	}

	[Token(Token = "0x6000BF2")]
	[Address(RVA = "0xDF430C", Offset = "0xDF430C", VA = "0xDF430C")]
	public bool ContainsPoint(double x, double y)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001C6")]
public static class GameObjectHelper
{
	[Token(Token = "0x6000BF3")]
	[Address(RVA = "0xC35BE8", Offset = "0xC35BE8", VA = "0xC35BE8")]
	public static GameObject CreateMeshRenderGameObject(string name, Mesh mesh, Material material)
	{
		return null;
	}

	[Token(Token = "0x6000BF4")]
	[Address(RVA = "0xC35CD0", Offset = "0xC35CD0", VA = "0xC35CD0")]
	public static void SetMeshRenderGameObjectProperties(GameObject gameObject, Mesh mesh, Material material, bool uniqueMaterial = false)
	{
	}

	[Token(Token = "0x6000BF5")]
	[Address(RVA = "0xC35DC8", Offset = "0xC35DC8", VA = "0xC35DC8")]
	public static void SetMeshRendererDefaults(MeshRenderer meshRenderer)
	{
	}

	[Token(Token = "0x6000BF6")]
	[Address(RVA = "0xC35E68", Offset = "0xC35E68", VA = "0xC35E68")]
	public static Vector2 GetTextMeshSize(TextMesh mesh)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000BF7")]
	[Address(RVA = "0xC361A0", Offset = "0xC361A0", VA = "0xC361A0")]
	public static Vector2 GetTextLineSize(TextMesh mesh, int lineIndex)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000BF8")]
	[Address(RVA = "0xC36524", Offset = "0xC36524", VA = "0xC36524")]
	public static float GetUITextLineWidth(Text text, int lineIndex)
	{
		return default(float);
	}

	[Token(Token = "0x6000BF9")]
	[Address(RVA = "0xC36770", Offset = "0xC36770", VA = "0xC36770")]
	public static float GetUITextLineWidth(TextMeshProUGUI text, int lineIndex)
	{
		return default(float);
	}

	[Token(Token = "0x6000BFA")]
	[Address(RVA = "0xC36950", Offset = "0xC36950", VA = "0xC36950")]
	public static Material AssignShaderToTextMeshMaterial(TextMesh textMesh, string shaderProgram)
	{
		return null;
	}

	[Token(Token = "0x6000BFB")]
	[Address(RVA = "0xC36A2C", Offset = "0xC36A2C", VA = "0xC36A2C")]
	public static TextMesh SetupTextMesh(GameObject textGameObject, TextAlignment textAlignment, TextAnchor textAnchor, int fontSize, float characterSize, Transform parent)
	{
		return null;
	}
}
[Token(Token = "0x20001C7")]
public class LineMesh
{
	[Token(Token = "0x20001C8")]
	private struct Line
	{
		[Token(Token = "0x4000742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 start;

		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 end;

		[Token(Token = "0x4000744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 direction;

		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color startColor;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color endColor;

		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3[] sQuadBuffer;

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0xC4F5C8", Offset = "0xC4F5C8", VA = "0xC4F5C8")]
		public Line(Vector3 start, Vector3 end)
		{
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0xC4F5F8", Offset = "0xC4F5F8", VA = "0xC4F5F8")]
		public Line(Vector3 start, Vector3 end, Color startColor, Color endColor)
		{
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0xC4F660", Offset = "0xC4F660", VA = "0xC4F660")]
		public Vector3[] ToQuad()
		{
			return null;
		}
	}

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private Mesh mMesh;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private List<Line> maLines;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool mbIsDynamic;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private bool mbArraysBuilt;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Vector3[] maVertices;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Color[] maColors;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int[] maTriangles;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector2[] maUVs;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector4[] maAux;

	[Token(Token = "0x17000127")]
	public Mesh mesh
	{
		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0xC3AF54", Offset = "0xC3AF54", VA = "0xC3AF54")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000BFC")]
	[Address(RVA = "0xC39ED8", Offset = "0xC39ED8", VA = "0xC39ED8")]
	public LineMesh(int lineCount = 0, bool isDynamic = false)
	{
	}

	[Token(Token = "0x6000BFE")]
	[Address(RVA = "0xC39FC4", Offset = "0xC39FC4", VA = "0xC39FC4")]
	public void AddLine(Vector3 s, Vector3 e)
	{
	}

	[Token(Token = "0x6000BFF")]
	[Address(RVA = "0xC4F008", Offset = "0xC4F008", VA = "0xC4F008")]
	public void AddLine(Vector3 s, Vector3 e, Color startColor, Color endColor)
	{
	}

	[Token(Token = "0x6000C00")]
	[Address(RVA = "0xC3A108", Offset = "0xC3A108", VA = "0xC3A108")]
	public void BuildMesh()
	{
	}

	[Token(Token = "0x6000C01")]
	[Address(RVA = "0xC4F4EC", Offset = "0xC4F4EC", VA = "0xC4F4EC")]
	public void Clear()
	{
	}
}
[Token(Token = "0x20001C9")]
public class LineMeshRenderer : MonoBehaviour
{
	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Material lineMaterial;

	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float lineWidth;

	[Token(Token = "0x6000C06")]
	[Address(RVA = "0xC4F6EC", Offset = "0xC4F6EC", VA = "0xC4F6EC")]
	public LineMeshRenderer()
	{
	}

	[Token(Token = "0x6000C07")]
	[Address(RVA = "0xC4F6F4", Offset = "0xC4F6F4", VA = "0xC4F6F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C08")]
	[Address(RVA = "0xC4FBEC", Offset = "0xC4FBEC", VA = "0xC4FBEC")]
	private void Update()
	{
	}
}
[Token(Token = "0x20001CA")]
public class LineRenderMesh
{
	[Token(Token = "0x20001CB")]
	private struct Line
	{
		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 start;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 end;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 normal;

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0xC50AA4", Offset = "0xC50AA4", VA = "0xC50AA4")]
		public Line(Vector3 start, Vector3 end, Vector3 normal)
		{
		}
	}

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private float mfLineWidth;

	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Mesh mMesh;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<Line> maLines;

	[Token(Token = "0x17000128")]
	public Mesh mesh
	{
		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0xC4FDC8", Offset = "0xC4FDC8", VA = "0xC4FDC8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000C09")]
	[Address(RVA = "0xC4FCD8", Offset = "0xC4FCD8", VA = "0xC4FCD8")]
	public LineRenderMesh(float lineWidth = 0.03f, int lineCount = -1)
	{
	}

	[Token(Token = "0x6000C0B")]
	[Address(RVA = "0xC4FDD0", Offset = "0xC4FDD0", VA = "0xC4FDD0")]
	private Vector3[] makeQuad(Vector3 s, Vector3 e, Vector3 normal, bool fixedLineWidth)
	{
		return null;
	}

	[Token(Token = "0x6000C0C")]
	[Address(RVA = "0xC501D0", Offset = "0xC501D0", VA = "0xC501D0")]
	public void AddLine(Vector3 s, Vector3 e)
	{
	}

	[Token(Token = "0x6000C0D")]
	[Address(RVA = "0xC502B8", Offset = "0xC502B8", VA = "0xC502B8")]
	public void AddLine(Vector3 s, Vector3 e, Vector3 normal)
	{
	}

	[Token(Token = "0x6000C0E")]
	[Address(RVA = "0xC5038C", Offset = "0xC5038C", VA = "0xC5038C")]
	public void BuildMesh(bool fixedLineWidth = true)
	{
	}
}
[Token(Token = "0x20001CC")]
public class MaterialLoader : MonoBehaviour
{
	[Token(Token = "0x20001CD")]
	internal class MipmapBias
	{
		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private string msTextureName;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float mfBias;

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0xC56EE4", Offset = "0xC56EE4", VA = "0xC56EE4")]
		internal MipmapBias(string textureName, float bias)
		{
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0xC570C4", Offset = "0xC570C4", VA = "0xC570C4")]
		internal void SetBiasForMaterial(Material material)
		{
		}
	}

	[Token(Token = "0x2000413")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EBBC", Offset = "0xC2EBBC")]
	private sealed class <loadMaterial>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal ResourceRequest <request>__0;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal MeshRenderer <lMeshRenderer>__0;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal MaterialLoader $this;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x17000476")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001A16")]
			[Address(RVA = "0xC57438", Offset = "0xC57438", VA = "0xC57438", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000477")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A17")]
			[Address(RVA = "0xC57440", Offset = "0xC57440", VA = "0xC57440", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A14")]
		[Address(RVA = "0xC57124", Offset = "0xC57124", VA = "0xC57124")]
		[DebuggerHidden]
		public <loadMaterial>c__Iterator0()
		{
		}

		[Token(Token = "0x6001A15")]
		[Address(RVA = "0xC5712C", Offset = "0xC5712C", VA = "0xC5712C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A18")]
		[Address(RVA = "0xC57448", Offset = "0xC57448", VA = "0xC57448", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A19")]
		[Address(RVA = "0xC5745C", Offset = "0xC5745C", VA = "0xC5745C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private string msFilepath;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int miPriority;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool mbIsLoaded;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<MipmapBias> maMipmapBiases;

	[Token(Token = "0x17000129")]
	public bool isLoaded
	{
		[Token(Token = "0x6000C11")]
		[Address(RVA = "0xC56D34", Offset = "0xC56D34", VA = "0xC56D34")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000C10")]
	[Address(RVA = "0xC56D2C", Offset = "0xC56D2C", VA = "0xC56D2C")]
	public MaterialLoader()
	{
	}

	[Token(Token = "0x6000C12")]
	[Address(RVA = "0xC56D3C", Offset = "0xC56D3C", VA = "0xC56D3C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C13")]
	[Address(RVA = "0xC56D48", Offset = "0xC56D48", VA = "0xC56D48")]
	public void LoadMaterial(string filepath, int priority = 1)
	{
	}

	[Token(Token = "0x6000C14")]
	[Address(RVA = "0xC56DF4", Offset = "0xC56DF4", VA = "0xC56DF4")]
	public void AddMipmapBias(string textureName, float bias)
	{
	}

	[Token(Token = "0x6000C15")]
	[Address(RVA = "0xC56F0C", Offset = "0xC56F0C", VA = "0xC56F0C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C16")]
	[Address(RVA = "0xC56F10", Offset = "0xC56F10", VA = "0xC56F10")]
	private void loadMaterialNow()
	{
	}

	[Token(Token = "0x6000C17")]
	[Address(RVA = "0xC56D74", Offset = "0xC56D74", VA = "0xC56D74")]
	[DebuggerHidden]
	private IEnumerator loadMaterial()
	{
		return null;
	}
}
[Token(Token = "0x20001CE")]
public class MeshBuilder
{
	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private Mesh mMesh;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private List<Vertex> maVertices;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<int> maIndices;

	[Token(Token = "0x1700012A")]
	public Mesh mesh
	{
		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0xC5C52C", Offset = "0xC5C52C", VA = "0xC5C52C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000C1A")]
	[Address(RVA = "0xC5C410", Offset = "0xC5C410", VA = "0xC5C410")]
	public MeshBuilder()
	{
	}

	[Token(Token = "0x6000C1C")]
	[Address(RVA = "0xC5C534", Offset = "0xC5C534", VA = "0xC5C534")]
	protected void AddVertex(Vertex vertex)
	{
	}

	[Token(Token = "0x6000C1D")]
	[Address(RVA = "0xC5C604", Offset = "0xC5C604", VA = "0xC5C604")]
	protected void AddTriangle(Triangle triangle)
	{
	}

	[Token(Token = "0x6000C1E")]
	[Address(RVA = "0xC5C6C4", Offset = "0xC5C6C4", VA = "0xC5C6C4")]
	protected void Build(bool clearMemory = true)
	{
	}
}
[Token(Token = "0x20001CF")]
public class QuadMesh
{
	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private Mesh mMesh;

	[Token(Token = "0x400075A")]
	private const int VERTEX_COUNT = 4;

	[Token(Token = "0x1700012B")]
	public Mesh mesh
	{
		[Token(Token = "0x6000C20")]
		[Address(RVA = "0xDF0820", Offset = "0xDF0820", VA = "0xDF0820")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000C1F")]
	[Address(RVA = "0xDF02D8", Offset = "0xDF02D8", VA = "0xDF02D8")]
	public QuadMesh(Rect rect)
	{
	}
}
[Token(Token = "0x20001D0")]
public class QuadSphereMesh : MeshBuilder
{
	[Token(Token = "0x20001D1")]
	private struct CubeFace
	{
		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 faceDirection;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 xDirection;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 yDirection;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Border border;

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0xDF2524", Offset = "0xDF2524", VA = "0xDF2524")]
		public CubeFace(Vector3 faceDirection, Vector3 xDirection, Vector3 yDirection, int segmentsPerSide)
		{
		}
	}

	[Token(Token = "0x20001D2")]
	private enum Edge
	{
		[Token(Token = "0x4000764")]
		Top,
		[Token(Token = "0x4000765")]
		Bottom,
		[Token(Token = "0x4000766")]
		Left,
		[Token(Token = "0x4000767")]
		Right
	}

	[Token(Token = "0x20001D3")]
	private class Border
	{
		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int[] topEdge;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int[] bottomEdge;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int[] leftEdge;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int[] rightEdge;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] directions;

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0xDF23B8", Offset = "0xDF23B8", VA = "0xDF23B8")]
		public Border(int count)
		{
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0xDF21B4", Offset = "0xDF21B4", VA = "0xDF21B4")]
		public Border(int[] topEdge, int[] bottomEdge, int[] leftEdge, int[] rightEdge)
		{
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0xDF2278", Offset = "0xDF2278", VA = "0xDF2278")]
		public void SetDirection(Edge edge, int direction)
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0xDF22BC", Offset = "0xDF22BC", VA = "0xDF22BC")]
		public int GetVertexIndex(Edge edge, int index)
		{
			return default(int);
		}
	}

	[Token(Token = "0x400075B")]
	private const int QUAD_VERTICES_COUNT = 4;

	[Token(Token = "0x400075C")]
	private const int QUAD_INDICES_COUNT = 6;

	[Token(Token = "0x400075D")]
	private const int CUBE_FACES = 6;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<CubeFace> saCubeFaces;

	[Token(Token = "0x6000C21")]
	[Address(RVA = "0xDF0828", Offset = "0xDF0828", VA = "0xDF0828")]
	public QuadSphereMesh(float size, int segmentsPerSide)
	{
	}

	[Token(Token = "0x6000C22")]
	[Address(RVA = "0xDF1940", Offset = "0xDF1940", VA = "0xDF1940")]
	private void createSubdividedQuad(CubeFace cubeFace, float scale, int numSubdivisions, Border border)
	{
	}
}
[Token(Token = "0x20001D4")]
[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xC2EC1C", Offset = "0xC2EC1C")]
public class QuadSphereMeshImproved
{
	[Token(Token = "0x20001D5")]
	private struct CubeFace
	{
		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 faceDirection;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 xDirection;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 yDirection;

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xDF3E5C", Offset = "0xDF3E5C", VA = "0xDF3E5C")]
		public CubeFace(Vector3 faceDirection, Vector3 xDirection, Vector3 yDirection)
		{
		}
	}

	[Token(Token = "0x400076D")]
	private const int QUAD_VERTICES_COUNT = 4;

	[Token(Token = "0x400076E")]
	private const int QUAD_INDICES_COUNT = 6;

	[Token(Token = "0x400076F")]
	private const int CUBE_FACES = 6;

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private Mesh mMesh;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private List<Vertex> maVertices;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<int> maIndices;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int miCurrentVertexIndex;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int[] indexOffsets;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int miFace;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<CubeFace> saCubeFaces;

	[Token(Token = "0x1700012C")]
	public Mesh mesh
	{
		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0xDF3E50", Offset = "0xDF3E50", VA = "0xDF3E50")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000C29")]
	[Address(RVA = "0xDF2578", Offset = "0xDF2578", VA = "0xDF2578")]
	public QuadSphereMeshImproved(float size, int segmentsPerSide, bool sphericalNormals = true)
	{
	}

	[Token(Token = "0x6000C2B")]
	[Address(RVA = "0xDF2FD8", Offset = "0xDF2FD8", VA = "0xDF2FD8")]
	private void createSubdividedQuad(CubeFace cubeFace, float scale, int numSubdivisions, bool sphericalNormals)
	{
	}
}
[Token(Token = "0x20001D6")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xC2EC54", Offset = "0xC2EC54")]
public class ReverseNormals : MonoBehaviour
{
	[Token(Token = "0x6000C2E")]
	[Address(RVA = "0xDF4CFC", Offset = "0xDF4CFC", VA = "0xDF4CFC")]
	public ReverseNormals()
	{
	}

	[Token(Token = "0x6000C2F")]
	[Address(RVA = "0xDF4D04", Offset = "0xDF4D04", VA = "0xDF4D04")]
	private void Start()
	{
	}
}
[Token(Token = "0x20001D7")]
public class RingMesh
{
	[Token(Token = "0x20001D8")]
	internal struct Triangle
	{
		[Token(Token = "0x4000783")]
		private const int TRIANGLE_INDEX_COUNT = 3;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int[] indices;

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xDF697C", Offset = "0xDF697C", VA = "0xDF697C")]
		public Triangle(int i1, int i2, int i3)
		{
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0xDF6998", Offset = "0xDF6998", VA = "0xDF6998")]
		public void addToIndices(List<int> triangleList)
		{
		}
	}

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private Mesh mMesh;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private int miSegments;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool mbIsDynamic;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Vector2[] maVertexPositions;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int[] maVerticesInner;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int[] maVerticesOuter;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int miVertexCount;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int[] maIndices;

	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool mbIsDrawingFraction;

	[Token(Token = "0x1700012D")]
	public Mesh mesh
	{
		[Token(Token = "0x6000C32")]
		[Address(RVA = "0xDF6318", Offset = "0xDF6318", VA = "0xDF6318")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000C30")]
	[Address(RVA = "0xDF4FC0", Offset = "0xDF4FC0", VA = "0xDF4FC0")]
	public RingMesh(float innerSize, float outerSize, int segments, bool createUnderside)
	{
	}

	[Token(Token = "0x6000C31")]
	[Address(RVA = "0xDF5050", Offset = "0xDF5050", VA = "0xDF5050")]
	public RingMesh(float innerSize, float outerSize, int segments, bool createUnderside, Color innerColor, Color outerColor, float startAngle = 0f, float sweepAngle = 360f, bool isDynamic = false)
	{
	}

	[Token(Token = "0x6000C33")]
	[Address(RVA = "0xDF6320", Offset = "0xDF6320", VA = "0xDF6320")]
	public void SetRingSize(float innerSize, float outerSize, bool recalculateBounds = true)
	{
	}

	[Token(Token = "0x6000C34")]
	[Address(RVA = "0xDF6664", Offset = "0xDF6664", VA = "0xDF6664")]
	public void SetRingDrawFraction(float fraction)
	{
	}

	[Token(Token = "0x6000C35")]
	[Address(RVA = "0xDF67AC", Offset = "0xDF67AC", VA = "0xDF67AC")]
	public void SetRingDrawAll()
	{
	}
}
[Token(Token = "0x20001D9")]
public class SurfacePatchMesh : MeshBuilder
{
	[Token(Token = "0x6000C38")]
	[Address(RVA = "0xCFC620", Offset = "0xCFC620", VA = "0xCFC620")]
	public SurfacePatchMesh(float lfMinLat, float lfMaxLat, float lfMinLong, float lfMaxLong, int liLatSegs, int liLongSegs)
	{
	}
}
[Token(Token = "0x20001DA")]
public static class Tangents
{
	[Token(Token = "0x20001DB")]
	private struct Triangle
	{
		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int[] index;

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0xC9B358", Offset = "0xC9B358", VA = "0xC9B358")]
		public Triangle(int v1, int v2, int v3)
		{
		}
	}

	[Token(Token = "0x6000C39")]
	[Address(RVA = "0xC9A410", Offset = "0xC9A410", VA = "0xC9A410")]
	public static Vector4[] Generate(ref Mesh mesh)
	{
		return null;
	}
}
[Token(Token = "0x20001DC")]
public class TextureLoader : MonoBehaviour
{
	[Token(Token = "0x2000415")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2ECDC", Offset = "0xC2ECDC")]
	private sealed class <loadTexture>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal ResourceRequest <request>__0;

		[Token(Token = "0x40016D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal MeshRenderer <lMeshRenderer>__0;

		[Token(Token = "0x40016D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal TextureLoader $this;

		[Token(Token = "0x40016D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x17000478")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001A1C")]
			[Address(RVA = "0xC9C120", Offset = "0xC9C120", VA = "0xC9C120", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000479")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A1D")]
			[Address(RVA = "0xC9C128", Offset = "0xC9C128", VA = "0xC9C128", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A1A")]
		[Address(RVA = "0xC9BF28", Offset = "0xC9BF28", VA = "0xC9BF28")]
		[DebuggerHidden]
		public <loadTexture>c__Iterator0()
		{
		}

		[Token(Token = "0x6001A1B")]
		[Address(RVA = "0xC9BF30", Offset = "0xC9BF30", VA = "0xC9BF30", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0xC9C130", Offset = "0xC9C130", VA = "0xC9C130", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A1F")]
		[Address(RVA = "0xC9C144", Offset = "0xC9C144", VA = "0xC9C144", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private string msFilepath;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int miPriority;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool mbIsLoaded;

	[Token(Token = "0x1700012E")]
	public bool isLoaded
	{
		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0xC9BE64", Offset = "0xC9BE64", VA = "0xC9BE64")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000C3B")]
	[Address(RVA = "0xC9BE5C", Offset = "0xC9BE5C", VA = "0xC9BE5C")]
	public TextureLoader()
	{
	}

	[Token(Token = "0x6000C3D")]
	[Address(RVA = "0xC9BE6C", Offset = "0xC9BE6C", VA = "0xC9BE6C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C3E")]
	[Address(RVA = "0xC9BE78", Offset = "0xC9BE78", VA = "0xC9BE78")]
	public void LoadTexture(string filepath, int priority = 1)
	{
	}

	[Token(Token = "0x6000C3F")]
	[Address(RVA = "0xC9BF24", Offset = "0xC9BF24", VA = "0xC9BF24")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C40")]
	[Address(RVA = "0xC9BEA4", Offset = "0xC9BEA4", VA = "0xC9BEA4")]
	[DebuggerHidden]
	private IEnumerator loadTexture()
	{
		return null;
	}
}
[Token(Token = "0x20001DD")]
public class NonDrawingGraphic : Graphic
{
	[Token(Token = "0x6000C41")]
	[Address(RVA = "0xDC5598", Offset = "0xDC5598", VA = "0xDC5598")]
	public NonDrawingGraphic()
	{
	}

	[Token(Token = "0x6000C42")]
	[Address(RVA = "0xDC561C", Offset = "0xDC561C", VA = "0xDC561C", Slot = "29")]
	public override void SetMaterialDirty()
	{
	}

	[Token(Token = "0x6000C43")]
	[Address(RVA = "0xDC5620", Offset = "0xDC5620", VA = "0xDC5620", Slot = "28")]
	public override void SetVerticesDirty()
	{
	}

	[Token(Token = "0x6000C44")]
	[Address(RVA = "0xDC5624", Offset = "0xDC5624", VA = "0xDC5624", Slot = "44")]
	protected override void OnPopulateMesh(VertexHelper vh)
	{
	}
}
[Serializable]
[Token(Token = "0x20001DE")]
[AttributeAttribute(Name = "DebuggerDisplayAttribute", RVA = "0xC2ED3C", Offset = "0xC2ED3C")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xC2ED3C", Offset = "0xC2ED3C")]
public class SerializableDictionary<TKey, TValue> : IDictionary<TKey, TValue>, IEnumerable, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>
{
	[Token(Token = "0x20001DF")]
	private static class PrimeHelper
	{
		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int[] Primes;

		[Token(Token = "0x6000C65")]
		public static bool IsPrime(int candidate)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C66")]
		public static int GetPrime(int min)
		{
			return default(int);
		}

		[Token(Token = "0x6000C67")]
		public static int ExpandPrime(int oldSize)
		{
			return default(int);
		}
	}

	[Token(Token = "0x20001E0")]
	public struct Enumerator : IEnumerator<KeyValuePair<TKey, TValue>>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly SerializableDictionary<TKey, TValue> _Dictionary;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _Version;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _Index;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private KeyValuePair<TKey, TValue> _Current;

		[Token(Token = "0x17000136")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C6D")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000137")]
		public KeyValuePair<TKey, TValue> Current
		{
			[Token(Token = "0x6000C6A")]
			get
			{
				return default(KeyValuePair<TKey, TValue>);
			}
		}

		[Token(Token = "0x6000C69")]
		internal Enumerator(SerializableDictionary<TKey, TValue> dictionary)
		{
		}

		[Token(Token = "0x6000C6B")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6C")]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x6000C6E")]
		public void Dispose()
		{
		}
	}

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[HideInInspector]
	private int[] _Buckets;

	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[HideInInspector]
	private int[] _HashCodes;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[HideInInspector]
	private int[] _Next;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[HideInInspector]
	private int _Count;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[HideInInspector]
	private int _Version;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[HideInInspector]
	private int _FreeList;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[HideInInspector]
	private int _FreeCount;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[HideInInspector]
	private TKey[] _Keys;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[HideInInspector]
	private TValue[] _Values;

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private readonly IEqualityComparer<TKey> _Comparer;

	[Token(Token = "0x1700012F")]
	public Dictionary<TKey, TValue> AsDictionary
	{
		[Token(Token = "0x6000C4B")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000130")]
	public int Count
	{
		[Token(Token = "0x6000C4C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000131")]
	public TValue Item
	{
		[Token(Token = "0x6000C4D")]
		get
		{
			return (TValue)null;
		}
	}

	[Token(Token = "0x17000132")]
	public TValue Item
	{
		[Token(Token = "0x6000C4E")]
		get
		{
			return (TValue)null;
		}
		[Token(Token = "0x6000C4F")]
		set
		{
		}
	}

	[Token(Token = "0x17000133")]
	public ICollection<TKey> Keys
	{
		[Token(Token = "0x6000C5B")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000134")]
	public ICollection<TValue> Values
	{
		[Token(Token = "0x6000C5C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000135")]
	public bool IsReadOnly
	{
		[Token(Token = "0x6000C60")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000C45")]
	public SerializableDictionary()
	{
	}

	[Token(Token = "0x6000C46")]
	public SerializableDictionary(int capacity)
	{
	}

	[Token(Token = "0x6000C47")]
	public SerializableDictionary(IEqualityComparer<TKey> comparer)
	{
	}

	[Token(Token = "0x6000C48")]
	public SerializableDictionary(int capacity, IEqualityComparer<TKey> comparer)
	{
	}

	[Token(Token = "0x6000C49")]
	public SerializableDictionary(IDictionary<TKey, TValue> dictionary)
	{
	}

	[Token(Token = "0x6000C4A")]
	public SerializableDictionary(IDictionary<TKey, TValue> dictionary, IEqualityComparer<TKey> comparer)
	{
	}

	[Token(Token = "0x6000C50")]
	public bool ContainsValue(TValue value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C51")]
	public bool ContainsKey(TKey key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C52")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000C53")]
	public void Add(TKey key, TValue value)
	{
	}

	[Token(Token = "0x6000C54")]
	private void Resize(int newSize, bool forceNewHashCodes)
	{
	}

	[Token(Token = "0x6000C55")]
	private void Resize()
	{
	}

	[Token(Token = "0x6000C56")]
	public bool Remove(TKey key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C57")]
	private void Insert(TKey key, TValue value, bool add)
	{
	}

	[Token(Token = "0x6000C58")]
	private void Initialize(int capacity)
	{
	}

	[Token(Token = "0x6000C59")]
	private int FindIndex(TKey key)
	{
		return default(int);
	}

	[Token(Token = "0x6000C5A")]
	public bool TryGetValue(TKey key, out TValue value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C5D")]
	public void Add(KeyValuePair<TKey, TValue> item)
	{
	}

	[Token(Token = "0x6000C5E")]
	public bool Contains(KeyValuePair<TKey, TValue> item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C5F")]
	public void CopyTo(KeyValuePair<TKey, TValue>[] array, int index)
	{
	}

	[Token(Token = "0x6000C61")]
	public bool Remove(KeyValuePair<TKey, TValue> item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C62")]
	public Enumerator GetEnumerator()
	{
		return default(Enumerator);
	}

	[Token(Token = "0x6000C63")]
	private IEnumerator System.Collections.IEnumerable.GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6000C64")]
	private IEnumerator<KeyValuePair<TKey, TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
	{
		return null;
	}
}
namespace SimpleJSON
{
	[Token(Token = "0x20001E1")]
	public enum JSONNodeType
	{
		[Token(Token = "0x4000799")]
		Array = 1,
		[Token(Token = "0x400079A")]
		Object = 2,
		[Token(Token = "0x400079B")]
		String = 3,
		[Token(Token = "0x400079C")]
		Number = 4,
		[Token(Token = "0x400079D")]
		NullValue = 5,
		[Token(Token = "0x400079E")]
		Boolean = 6,
		[Token(Token = "0x400079F")]
		None = 7,
		[Token(Token = "0x40007A0")]
		Custom = 255
	}
	[Token(Token = "0x20001E2")]
	public enum JSONTextMode
	{
		[Token(Token = "0x40007A2")]
		Compact,
		[Token(Token = "0x40007A3")]
		Indent
	}
	[Token(Token = "0x20001E3")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xC2EF4C", Offset = "0xC2EF4C")]
	public abstract class JSONNode
	{
		[Token(Token = "0x20001E4")]
		public struct Enumerator
		{
			[Token(Token = "0x20001E5")]
			private enum Type
			{
				[Token(Token = "0x40007AA")]
				None,
				[Token(Token = "0x40007AB")]
				Array,
				[Token(Token = "0x40007AC")]
				Object
			}

			[Token(Token = "0x40007A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Type type;

			[Token(Token = "0x40007A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private Dictionary<string, JSONNode>.Enumerator m_Object;

			[Token(Token = "0x40007A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private List<JSONNode>.Enumerator m_Array;

			[Token(Token = "0x17000150")]
			public bool IsValid
			{
				[Token(Token = "0x6000CAE")]
				[Address(RVA = "0xE0E7D8", Offset = "0xE0E7D8", VA = "0xE0E7D8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000151")]
			public KeyValuePair<string, JSONNode> Current
			{
				[Token(Token = "0x6000CAF")]
				[Address(RVA = "0xE0E964", Offset = "0xE0E964", VA = "0xE0E964")]
				get
				{
					return default(KeyValuePair<string, JSONNode>);
				}
			}

			[Token(Token = "0x6000CAC")]
			[Address(RVA = "0xE0E75C", Offset = "0xE0E75C", VA = "0xE0E75C")]
			public Enumerator(List<JSONNode>.Enumerator aArrayEnum)
			{
			}

			[Token(Token = "0x6000CAD")]
			[Address(RVA = "0xE0E7A0", Offset = "0xE0E7A0", VA = "0xE0E7A0")]
			public Enumerator(Dictionary<string, JSONNode>.Enumerator aDictEnum)
			{
			}

			[Token(Token = "0x6000CB0")]
			[Address(RVA = "0xE0EA10", Offset = "0xE0EA10", VA = "0xE0EA10")]
			public bool MoveNext()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001E6")]
		public struct ValueEnumerator
		{
			[Token(Token = "0x40007AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Enumerator m_Enumerator;

			[Token(Token = "0x17000152")]
			public JSONNode Current
			{
				[Token(Token = "0x6000CB4")]
				[Address(RVA = "0xE0F040", Offset = "0xE0F040", VA = "0xE0F040")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CB1")]
			[Address(RVA = "0xE0EEFC", Offset = "0xE0EEFC", VA = "0xE0EEFC")]
			public ValueEnumerator(List<JSONNode>.Enumerator aArrayEnum)
			{
			}

			[Token(Token = "0x6000CB2")]
			[Address(RVA = "0xE0EF40", Offset = "0xE0EF40", VA = "0xE0EF40")]
			public ValueEnumerator(Dictionary<string, JSONNode>.Enumerator aDictEnum)
			{
			}

			[Token(Token = "0x6000CB3")]
			[Address(RVA = "0xE0EF78", Offset = "0xE0EF78", VA = "0xE0EF78")]
			public ValueEnumerator(Enumerator aEnumerator)
			{
			}

			[Token(Token = "0x6000CB5")]
			[Address(RVA = "0xE0F048", Offset = "0xE0F048", VA = "0xE0F048")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CB6")]
			[Address(RVA = "0xE0F050", Offset = "0xE0F050", VA = "0xE0F050")]
			public ValueEnumerator GetEnumerator()
			{
				return default(ValueEnumerator);
			}
		}

		[Token(Token = "0x20001E7")]
		public struct KeyEnumerator
		{
			[Token(Token = "0x40007AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Enumerator m_Enumerator;

			[Token(Token = "0x17000153")]
			public JSONNode Current
			{
				[Token(Token = "0x6000CBA")]
				[Address(RVA = "0xE0EBE8", Offset = "0xE0EBE8", VA = "0xE0EBE8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CB7")]
			[Address(RVA = "0xE0EA6C", Offset = "0xE0EA6C", VA = "0xE0EA6C")]
			public KeyEnumerator(List<JSONNode>.Enumerator aArrayEnum)
			{
			}

			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0xE0EAB0", Offset = "0xE0EAB0", VA = "0xE0EAB0")]
			public KeyEnumerator(Dictionary<string, JSONNode>.Enumerator aDictEnum)
			{
			}

			[Token(Token = "0x6000CB9")]
			[Address(RVA = "0xE0EAE8", Offset = "0xE0EAE8", VA = "0xE0EAE8")]
			public KeyEnumerator(Enumerator aEnumerator)
			{
			}

			[Token(Token = "0x6000CBB")]
			[Address(RVA = "0xE0EBF0", Offset = "0xE0EBF0", VA = "0xE0EBF0")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CBC")]
			[Address(RVA = "0xE0EBF8", Offset = "0xE0EBF8", VA = "0xE0EBF8")]
			public KeyEnumerator GetEnumerator()
			{
				return default(KeyEnumerator);
			}
		}

		[Token(Token = "0x20001E8")]
		public class LinqEnumerator : IEnumerator<KeyValuePair<string, JSONNode>>, IEnumerable<KeyValuePair<string, JSONNode>>, IEnumerator, IDisposable, IEnumerable
		{
			[Token(Token = "0x40007AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private JSONNode m_Node;

			[Token(Token = "0x40007B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private Enumerator m_Enumerator;

			[Token(Token = "0x17000154")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CBF")]
				[Address(RVA = "0xE0EC28", Offset = "0xE0EC28", VA = "0xE0EC28", Slot = "5")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000155")]
			public KeyValuePair<string, JSONNode> Current
			{
				[Token(Token = "0x6000CBE")]
				[Address(RVA = "0xE0EC14", Offset = "0xE0EC14", VA = "0xE0EC14", Slot = "4")]
				get
				{
					return default(KeyValuePair<string, JSONNode>);
				}
			}

			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0xE0C660", Offset = "0xE0C660", VA = "0xE0C660")]
			internal LinqEnumerator(JSONNode aNode)
			{
			}

			[Token(Token = "0x6000CC0")]
			[Address(RVA = "0xE0ECAC", Offset = "0xE0ECAC", VA = "0xE0ECAC", Slot = "6")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CC1")]
			[Address(RVA = "0xE0ECB4", Offset = "0xE0ECB4", VA = "0xE0ECB4", Slot = "8")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6000CC2")]
			[Address(RVA = "0xE0ECCC", Offset = "0xE0ECCC", VA = "0xE0ECCC", Slot = "9")]
			public IEnumerator<KeyValuePair<string, JSONNode>> GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000CC3")]
			[Address(RVA = "0xE0ED40", Offset = "0xE0ED40", VA = "0xE0ED40", Slot = "7")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000CC4")]
			[Address(RVA = "0xE0EE34", Offset = "0xE0EE34", VA = "0xE0EE34", Slot = "10")]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000417")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2EF90", Offset = "0xC2EF90")]
		private sealed class <>c__Iterator0 : IEnumerable, IEnumerable<JSONNode>, IEnumerator, IDisposable, IEnumerator<JSONNode>
		{
			[Token(Token = "0x40016D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal JSONNode $current;

			[Token(Token = "0x40016D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal bool $disposing;

			[Token(Token = "0x40016D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int $PC;

			[Token(Token = "0x1700047A")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6001A22")]
				[Address(RVA = "0xE0DCA4", Offset = "0xE0DCA4", VA = "0xE0DCA4", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700047B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A23")]
				[Address(RVA = "0xE0DCAC", Offset = "0xE0DCAC", VA = "0xE0DCAC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A20")]
			[Address(RVA = "0xE0C3C4", Offset = "0xE0C3C4", VA = "0xE0C3C4")]
			[DebuggerHidden]
			public <>c__Iterator0()
			{
			}

			[Token(Token = "0x6001A21")]
			[Address(RVA = "0xE0DC94", Offset = "0xE0DC94", VA = "0xE0DC94", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A24")]
			[Address(RVA = "0xE0DCB4", Offset = "0xE0DCB4", VA = "0xE0DCB4", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001A25")]
			[Address(RVA = "0xE0DCB8", Offset = "0xE0DCB8", VA = "0xE0DCB8", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x6001A26")]
			[Address(RVA = "0xE0DD3C", Offset = "0xE0DD3C", VA = "0xE0DD3C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001A27")]
			[Address(RVA = "0xE0DD40", Offset = "0xE0DD40", VA = "0xE0DD40", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000418")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2F010", Offset = "0xC2F010")]
		private sealed class <>c__Iterator1 : IEnumerable, IEnumerable<JSONNode>, IEnumerator, IDisposable, IEnumerator<JSONNode>
		{
			[Token(Token = "0x40016DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal IEnumerator<JSONNode> $locvar0;

			[Token(Token = "0x40016DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal JSONNode <C>__1;

			[Token(Token = "0x40016DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal IEnumerator<JSONNode> $locvar1;

			[Token(Token = "0x40016DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal JSONNode <D>__2;

			[Token(Token = "0x40016DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal JSONNode $this;

			[Token(Token = "0x40016DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal JSONNode $current;

			[Token(Token = "0x40016E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal bool $disposing;

			[Token(Token = "0x40016E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int $PC;

			[Token(Token = "0x1700047C")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6001A2A")]
				[Address(RVA = "0xE0E410", Offset = "0xE0E410", VA = "0xE0E410", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700047D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A2B")]
				[Address(RVA = "0xE0E418", Offset = "0xE0E418", VA = "0xE0E418", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A28")]
			[Address(RVA = "0xE0C464", Offset = "0xE0C464", VA = "0xE0C464")]
			[DebuggerHidden]
			public <>c__Iterator1()
			{
			}

			[Token(Token = "0x6001A29")]
			[Address(RVA = "0xE0DDDC", Offset = "0xE0DDDC", VA = "0xE0DDDC", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A2C")]
			[Address(RVA = "0xE0E420", Offset = "0xE0E420", VA = "0xE0E420", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001A2D")]
			[Address(RVA = "0xE0E5C8", Offset = "0xE0E5C8", VA = "0xE0E5C8", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x6001A2E")]
			[Address(RVA = "0xE0E64C", Offset = "0xE0E64C", VA = "0xE0E64C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001A2F")]
			[Address(RVA = "0xE0E650", Offset = "0xE0E650", VA = "0xE0E650", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool forceASCII;

		[Token(Token = "0x40007A5")]
		[ThreadStatic]
		private static StringBuilder m_EscapeBuilder;

		[Token(Token = "0x17000138")]
		public abstract JSONNodeType Tag
		{
			[Token(Token = "0x6000C70")]
			get;
		}

		[Token(Token = "0x17000139")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x6000C71")]
			[Address(RVA = "0xE0C190", Offset = "0xE0C190", VA = "0xE0C190", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C72")]
			[Address(RVA = "0xE0C198", Offset = "0xE0C198", VA = "0xE0C198", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700013A")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x6000C73")]
			[Address(RVA = "0xE0C19C", Offset = "0xE0C19C", VA = "0xE0C19C", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C74")]
			[Address(RVA = "0xE0C1A4", Offset = "0xE0C1A4", VA = "0xE0C1A4", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700013B")]
		public virtual string Value
		{
			[Token(Token = "0x6000C75")]
			[Address(RVA = "0xE0C1A8", Offset = "0xE0C1A8", VA = "0xE0C1A8", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C76")]
			[Address(RVA = "0xE0C234", Offset = "0xE0C234", VA = "0xE0C234", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x1700013C")]
		public virtual int Count
		{
			[Token(Token = "0x6000C77")]
			[Address(RVA = "0xE0C238", Offset = "0xE0C238", VA = "0xE0C238", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700013D")]
		public virtual bool IsNumber
		{
			[Token(Token = "0x6000C78")]
			[Address(RVA = "0xE0C240", Offset = "0xE0C240", VA = "0xE0C240", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013E")]
		public virtual bool IsString
		{
			[Token(Token = "0x6000C79")]
			[Address(RVA = "0xE0C248", Offset = "0xE0C248", VA = "0xE0C248", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013F")]
		public virtual bool IsBoolean
		{
			[Token(Token = "0x6000C7A")]
			[Address(RVA = "0xE0C250", Offset = "0xE0C250", VA = "0xE0C250", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000140")]
		public virtual bool IsNull
		{
			[Token(Token = "0x6000C7B")]
			[Address(RVA = "0xE0C258", Offset = "0xE0C258", VA = "0xE0C258", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000141")]
		public virtual bool IsArray
		{
			[Token(Token = "0x6000C7C")]
			[Address(RVA = "0xE0C260", Offset = "0xE0C260", VA = "0xE0C260", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000142")]
		public virtual bool IsObject
		{
			[Token(Token = "0x6000C7D")]
			[Address(RVA = "0xE0C268", Offset = "0xE0C268", VA = "0xE0C268", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000143")]
		public virtual bool Inline
		{
			[Token(Token = "0x6000C7E")]
			[Address(RVA = "0xE0C270", Offset = "0xE0C270", VA = "0xE0C270", Slot = "18")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C7F")]
			[Address(RVA = "0xE0C278", Offset = "0xE0C278", VA = "0xE0C278", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000144")]
		public virtual IEnumerable<JSONNode> Children
		{
			[Token(Token = "0x6000C85")]
			[Address(RVA = "0xE0C344", Offset = "0xE0C344", VA = "0xE0C344", Slot = "25")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000145")]
		public IEnumerable<JSONNode> DeepChildren
		{
			[Token(Token = "0x6000C86")]
			[Address(RVA = "0xE0C3CC", Offset = "0xE0C3CC", VA = "0xE0C3CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000146")]
		public IEnumerable<KeyValuePair<string, JSONNode>> Linq
		{
			[Token(Token = "0x6000C8B")]
			[Address(RVA = "0xE0C5F0", Offset = "0xE0C5F0", VA = "0xE0C5F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000147")]
		public KeyEnumerator Keys
		{
			[Token(Token = "0x6000C8C")]
			[Address(RVA = "0xE0C764", Offset = "0xE0C764", VA = "0xE0C764")]
			get
			{
				return default(KeyEnumerator);
			}
		}

		[Token(Token = "0x17000148")]
		public ValueEnumerator Values
		{
			[Token(Token = "0x6000C8D")]
			[Address(RVA = "0xE0C7BC", Offset = "0xE0C7BC", VA = "0xE0C7BC")]
			get
			{
				return default(ValueEnumerator);
			}
		}

		[Token(Token = "0x17000149")]
		public virtual double AsDouble
		{
			[Token(Token = "0x6000C8E")]
			[Address(RVA = "0xE0C818", Offset = "0xE0C818", VA = "0xE0C818", Slot = "29")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000C8F")]
			[Address(RVA = "0xE0C878", Offset = "0xE0C878", VA = "0xE0C878", Slot = "30")]
			set
			{
			}
		}

		[Token(Token = "0x1700014A")]
		public virtual int AsInt
		{
			[Token(Token = "0x6000C90")]
			[Address(RVA = "0xE0C8BC", Offset = "0xE0C8BC", VA = "0xE0C8BC", Slot = "31")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C91")]
			[Address(RVA = "0xE0C8E4", Offset = "0xE0C8E4", VA = "0xE0C8E4", Slot = "32")]
			set
			{
			}
		}

		[Token(Token = "0x1700014B")]
		public virtual float AsFloat
		{
			[Token(Token = "0x6000C92")]
			[Address(RVA = "0xE0C918", Offset = "0xE0C918", VA = "0xE0C918", Slot = "33")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C93")]
			[Address(RVA = "0xE0C940", Offset = "0xE0C940", VA = "0xE0C940", Slot = "34")]
			set
			{
			}
		}

		[Token(Token = "0x1700014C")]
		public virtual bool AsBool
		{
			[Token(Token = "0x6000C94")]
			[Address(RVA = "0xE0C974", Offset = "0xE0C974", VA = "0xE0C974", Slot = "35")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C95")]
			[Address(RVA = "0xE0CA98", Offset = "0xE0CA98", VA = "0xE0CA98", Slot = "36")]
			set
			{
			}
		}

		[Token(Token = "0x1700014D")]
		public virtual JSONArray AsArray
		{
			[Token(Token = "0x6000C96")]
			[Address(RVA = "0xE0CB2C", Offset = "0xE0CB2C", VA = "0xE0CB2C", Slot = "37")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014E")]
		public virtual JSONObject AsObject
		{
			[Token(Token = "0x6000C97")]
			[Address(RVA = "0xE0CBC0", Offset = "0xE0CBC0", VA = "0xE0CBC0", Slot = "38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014F")]
		internal static StringBuilder EscapeBuilder
		{
			[Token(Token = "0x6000CA7")]
			[Address(RVA = "0xE0D3E0", Offset = "0xE0D3E0", VA = "0xE0D3E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0xE0A128", Offset = "0xE0A128", VA = "0xE0A128")]
		protected JSONNode()
		{
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0xE0C27C", Offset = "0xE0C27C", VA = "0xE0C27C", Slot = "20")]
		public virtual void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0xE0C280", Offset = "0xE0C280", VA = "0xE0C280", Slot = "21")]
		public virtual void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0xE0C32C", Offset = "0xE0C32C", VA = "0xE0C32C", Slot = "22")]
		public virtual JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xE0C334", Offset = "0xE0C334", VA = "0xE0C334", Slot = "23")]
		public virtual JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0xE0C33C", Offset = "0xE0C33C", VA = "0xE0C33C", Slot = "24")]
		public virtual JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xE0C46C", Offset = "0xE0C46C", VA = "0xE0C46C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xE0C52C", Offset = "0xE0C52C", VA = "0xE0C52C", Slot = "26")]
		public virtual string ToString(int aIndent)
		{
			return null;
		}

		[Token(Token = "0x6000C89")]
		internal abstract void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode);

		[Token(Token = "0x6000C8A")]
		public abstract Enumerator GetEnumerator();

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0xE0CC54", Offset = "0xE0CC54", VA = "0xE0CC54")]
		public static implicit operator JSONNode(string s)
		{
			return null;
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0xE0CD50", Offset = "0xE0CD50", VA = "0xE0CD50")]
		public static implicit operator string(JSONNode d)
		{
			return null;
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0xE0CE00", Offset = "0xE0CE00", VA = "0xE0CE00")]
		public static implicit operator JSONNode(double n)
		{
			return null;
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xE0CE80", Offset = "0xE0CE80", VA = "0xE0CE80")]
		public static implicit operator double(JSONNode d)
		{
			return default(double);
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0xE0CF40", Offset = "0xE0CF40", VA = "0xE0CF40")]
		public static implicit operator JSONNode(float n)
		{
			return null;
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0xE0CFC4", Offset = "0xE0CFC4", VA = "0xE0CFC4")]
		public static implicit operator float(JSONNode d)
		{
			return default(float);
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0xE0D074", Offset = "0xE0D074", VA = "0xE0D074")]
		public static implicit operator JSONNode(int n)
		{
			return null;
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0xE0D0F4", Offset = "0xE0D0F4", VA = "0xE0D0F4")]
		public static implicit operator int(JSONNode d)
		{
			return default(int);
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0xE0D1A4", Offset = "0xE0D1A4", VA = "0xE0D1A4")]
		public static implicit operator JSONNode(bool b)
		{
			return null;
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xE0D214", Offset = "0xE0D214", VA = "0xE0D214")]
		public static implicit operator bool(JSONNode d)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xE0D2CC", Offset = "0xE0D2CC", VA = "0xE0D2CC")]
		public static implicit operator JSONNode(KeyValuePair<string, JSONNode> aKeyValue)
		{
			return null;
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xE0A4D0", Offset = "0xE0A4D0", VA = "0xE0A4D0")]
		public static bool operator ==(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xE0D338", Offset = "0xE0D338", VA = "0xE0D338")]
		public static bool operator !=(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0xE0D3C4", Offset = "0xE0D3C4", VA = "0xE0D3C4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0xE0D3D8", Offset = "0xE0D3D8", VA = "0xE0D3D8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0xE0D528", Offset = "0xE0D528", VA = "0xE0D528")]
		internal static string Escape(string aText)
		{
			return null;
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0xE0D984", Offset = "0xE0D984", VA = "0xE0D984")]
		private static void ParseElement(JSONNode ctx, string token, string tokenName, bool quoted)
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xE09480", Offset = "0xE09480", VA = "0xE09480")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}
	}
	[Token(Token = "0x20001E9")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xC2F090", Offset = "0xC2F090")]
	public class JSONArray : JSONNode
	{
		[Token(Token = "0x2000419")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2F0C4", Offset = "0xC2F0C4")]
		private sealed class <>c__Iterator0 : IEnumerable, IEnumerable<JSONNode>, IEnumerator, IDisposable, IEnumerator<JSONNode>
		{
			[Token(Token = "0x40016E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal List<JSONNode>.Enumerator $locvar0;

			[Token(Token = "0x40016E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal JSONNode <N>__1;

			[Token(Token = "0x40016E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal JSONArray $this;

			[Token(Token = "0x40016E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal JSONNode $current;

			[Token(Token = "0x40016E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal bool $disposing;

			[Token(Token = "0x40016E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal int $PC;

			[Token(Token = "0x1700047E")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6001A32")]
				[Address(RVA = "0xE0B03C", Offset = "0xE0B03C", VA = "0xE0B03C", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700047F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A33")]
				[Address(RVA = "0xE0B044", Offset = "0xE0B044", VA = "0xE0B044", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A30")]
			[Address(RVA = "0xE0AC88", Offset = "0xE0AC88", VA = "0xE0AC88")]
			[DebuggerHidden]
			public <>c__Iterator0()
			{
			}

			[Token(Token = "0x6001A31")]
			[Address(RVA = "0xE0AEA8", Offset = "0xE0AEA8", VA = "0xE0AEA8", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A34")]
			[Address(RVA = "0xE0B04C", Offset = "0xE0B04C", VA = "0xE0B04C", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001A35")]
			[Address(RVA = "0xE0B0CC", Offset = "0xE0B0CC", VA = "0xE0B0CC", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x6001A36")]
			[Address(RVA = "0xE0B150", Offset = "0xE0B150", VA = "0xE0B150", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001A37")]
			[Address(RVA = "0xE0B154", Offset = "0xE0B154", VA = "0xE0B154", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private List<JSONNode> m_List;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private bool inline;

		[Token(Token = "0x17000156")]
		public override bool Inline
		{
			[Token(Token = "0x6000CC6")]
			[Address(RVA = "0xE0A130", Offset = "0xE0A130", VA = "0xE0A130", Slot = "18")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CC7")]
			[Address(RVA = "0xE0A138", Offset = "0xE0A138", VA = "0xE0A138", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000157")]
		public override JSONNodeType Tag
		{
			[Token(Token = "0x6000CC8")]
			[Address(RVA = "0xE0A140", Offset = "0xE0A140", VA = "0xE0A140", Slot = "4")]
			get
			{
				return default(JSONNodeType);
			}
		}

		[Token(Token = "0x17000158")]
		public override bool IsArray
		{
			[Token(Token = "0x6000CC9")]
			[Address(RVA = "0xE0A148", Offset = "0xE0A148", VA = "0xE0A148", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000159")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000CCB")]
			[Address(RVA = "0xE0A200", Offset = "0xE0A200", VA = "0xE0A200", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CCC")]
			[Address(RVA = "0xE0A370", Offset = "0xE0A370", VA = "0xE0A370", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x1700015A")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000CCD")]
			[Address(RVA = "0xE0A7BC", Offset = "0xE0A7BC", VA = "0xE0A7BC", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CCE")]
			[Address(RVA = "0xE0A82C", Offset = "0xE0A82C", VA = "0xE0A82C", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700015B")]
		public override int Count
		{
			[Token(Token = "0x6000CCF")]
			[Address(RVA = "0xE0A91C", Offset = "0xE0A91C", VA = "0xE0A91C", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700015C")]
		public override IEnumerable<JSONNode> Children
		{
			[Token(Token = "0x6000CD3")]
			[Address(RVA = "0xE0ABF0", Offset = "0xE0ABF0", VA = "0xE0ABF0", Slot = "25")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0xE0A070", Offset = "0xE0A070", VA = "0xE0A070")]
		public JSONArray()
		{
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0xE0A150", Offset = "0xE0A150", VA = "0xE0A150", Slot = "28")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xE0A990", Offset = "0xE0A990", VA = "0xE0A990", Slot = "20")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xE0AA80", Offset = "0xE0AA80", VA = "0xE0AA80", Slot = "23")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0xE0AB70", Offset = "0xE0AB70", VA = "0xE0AB70", Slot = "24")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0xE0AC90", Offset = "0xE0AC90", VA = "0xE0AC90", Slot = "27")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}
	}
	[Token(Token = "0x20001EA")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xC2F144", Offset = "0xC2F144")]
	public class JSONObject : JSONNode
	{
		[Token(Token = "0x200041A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2F178", Offset = "0xC2F178")]
		private sealed class <Remove>c__AnonStorey1
		{
			[Token(Token = "0x40016E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal JSONNode aNode;

			[Token(Token = "0x6001A38")]
			[Address(RVA = "0xE103FC", Offset = "0xE103FC", VA = "0xE103FC")]
			public <Remove>c__AnonStorey1()
			{
			}

			[Token(Token = "0x6001A39")]
			[Address(RVA = "0xE10C30", Offset = "0xE10C30", VA = "0xE10C30")]
			internal bool <>m__0(KeyValuePair<string, JSONNode> k)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200041B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2F188", Offset = "0xC2F188")]
		private sealed class <>c__Iterator0 : IEnumerable, IEnumerable<JSONNode>, IEnumerator, IDisposable, IEnumerator<JSONNode>
		{
			[Token(Token = "0x40016E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Dictionary<string, JSONNode>.Enumerator $locvar0;

			[Token(Token = "0x40016EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal KeyValuePair<string, JSONNode> <N>__1;

			[Token(Token = "0x40016EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal JSONObject $this;

			[Token(Token = "0x40016EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal JSONNode $current;

			[Token(Token = "0x40016ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal bool $disposing;

			[Token(Token = "0x40016EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal int $PC;

			[Token(Token = "0x17000480")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6001A3C")]
				[Address(RVA = "0xE10A60", Offset = "0xE10A60", VA = "0xE10A60", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000481")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001A3D")]
				[Address(RVA = "0xE10A68", Offset = "0xE10A68", VA = "0xE10A68", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001A3A")]
			[Address(RVA = "0xE1049C", Offset = "0xE1049C", VA = "0xE1049C")]
			[DebuggerHidden]
			public <>c__Iterator0()
			{
			}

			[Token(Token = "0x6001A3B")]
			[Address(RVA = "0xE108A4", Offset = "0xE108A4", VA = "0xE108A4", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001A3E")]
			[Address(RVA = "0xE10A70", Offset = "0xE10A70", VA = "0xE10A70", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001A3F")]
			[Address(RVA = "0xE10AF0", Offset = "0xE10AF0", VA = "0xE10AF0", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x6001A40")]
			[Address(RVA = "0xE10B74", Offset = "0xE10B74", VA = "0xE10B74", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001A41")]
			[Address(RVA = "0xE10B78", Offset = "0xE10B78", VA = "0xE10B78", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Dictionary<string, JSONNode> m_Dict;

		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private bool inline;

		[Token(Token = "0x1700015D")]
		public override bool Inline
		{
			[Token(Token = "0x6000CD6")]
			[Address(RVA = "0xE0F7A0", Offset = "0xE0F7A0", VA = "0xE0F7A0", Slot = "18")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CD7")]
			[Address(RVA = "0xE0F7A8", Offset = "0xE0F7A8", VA = "0xE0F7A8", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x1700015E")]
		public override JSONNodeType Tag
		{
			[Token(Token = "0x6000CD8")]
			[Address(RVA = "0xE0F7B0", Offset = "0xE0F7B0", VA = "0xE0F7B0", Slot = "4")]
			get
			{
				return default(JSONNodeType);
			}
		}

		[Token(Token = "0x1700015F")]
		public override bool IsObject
		{
			[Token(Token = "0x6000CD9")]
			[Address(RVA = "0xE0F7B8", Offset = "0xE0F7B8", VA = "0xE0F7B8", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000160")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000CDB")]
			[Address(RVA = "0xE0F880", Offset = "0xE0F880", VA = "0xE0F880", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CDC")]
			[Address(RVA = "0xE0F95C", Offset = "0xE0F95C", VA = "0xE0F95C", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000CDD")]
			[Address(RVA = "0xE0FAB0", Offset = "0xE0FAB0", VA = "0xE0FAB0", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CDE")]
			[Address(RVA = "0xE0FB9C", Offset = "0xE0FB9C", VA = "0xE0FB9C", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000162")]
		public override int Count
		{
			[Token(Token = "0x6000CDF")]
			[Address(RVA = "0xE0FD2C", Offset = "0xE0FD2C", VA = "0xE0FD2C", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000163")]
		public override IEnumerable<JSONNode> Children
		{
			[Token(Token = "0x6000CE4")]
			[Address(RVA = "0xE10404", Offset = "0xE10404", VA = "0xE10404", Slot = "25")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xE0B8A8", Offset = "0xE0B8A8", VA = "0xE0B8A8")]
		public JSONObject()
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xE0F7C0", Offset = "0xE0F7C0", VA = "0xE0F7C0", Slot = "28")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0xE0FDA0", Offset = "0xE0FDA0", VA = "0xE0FDA0", Slot = "20")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xE0FFD4", Offset = "0xE0FFD4", VA = "0xE0FFD4", Slot = "22")]
		public override JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0xE100BC", Offset = "0xE100BC", VA = "0xE100BC", Slot = "23")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xE101F0", Offset = "0xE101F0", VA = "0xE101F0", Slot = "24")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0xE104A4", Offset = "0xE104A4", VA = "0xE104A4", Slot = "27")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}
	}
	[Token(Token = "0x20001EB")]
	public class JSONString : JSONNode
	{
		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private string m_Data;

		[Token(Token = "0x17000164")]
		public override JSONNodeType Tag
		{
			[Token(Token = "0x6000CE7")]
			[Address(RVA = "0xE10CE0", Offset = "0xE10CE0", VA = "0xE10CE0", Slot = "4")]
			get
			{
				return default(JSONNodeType);
			}
		}

		[Token(Token = "0x17000165")]
		public override bool IsString
		{
			[Token(Token = "0x6000CE8")]
			[Address(RVA = "0xE10CE8", Offset = "0xE10CE8", VA = "0xE10CE8", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000166")]
		public override string Value
		{
			[Token(Token = "0x6000CEA")]
			[Address(RVA = "0xE10D04", Offset = "0xE10D04", VA = "0xE10D04", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CEB")]
			[Address(RVA = "0xE10D0C", Offset = "0xE10D0C", VA = "0xE10D0C", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0xE0CCC4", Offset = "0xE0CCC4", VA = "0xE0CCC4")]
		public JSONString(string aData)
		{
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0xE10CF0", Offset = "0xE10CF0", VA = "0xE10CF0", Slot = "28")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0xE10D14", Offset = "0xE10D14", VA = "0xE10D14", Slot = "27")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0xE10DFC", Offset = "0xE10DFC", VA = "0xE10DFC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0xE10F74", Offset = "0xE10F74", VA = "0xE10F74", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001EC")]
	public class JSONNumber : JSONNode
	{
		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private double m_Data;

		[Token(Token = "0x17000167")]
		public override JSONNodeType Tag
		{
			[Token(Token = "0x6000CF1")]
			[Address(RVA = "0xE0F3E0", Offset = "0xE0F3E0", VA = "0xE0F3E0", Slot = "4")]
			get
			{
				return default(JSONNodeType);
			}
		}

		[Token(Token = "0x17000168")]
		public override bool IsNumber
		{
			[Token(Token = "0x6000CF2")]
			[Address(RVA = "0xE0F3E8", Offset = "0xE0F3E8", VA = "0xE0F3E8", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000169")]
		public override string Value
		{
			[Token(Token = "0x6000CF4")]
			[Address(RVA = "0xE0F404", Offset = "0xE0F404", VA = "0xE0F404", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CF5")]
			[Address(RVA = "0xE0F410", Offset = "0xE0F410", VA = "0xE0F410", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x1700016A")]
		public override double AsDouble
		{
			[Token(Token = "0x6000CF6")]
			[Address(RVA = "0xE0F450", Offset = "0xE0F450", VA = "0xE0F450", Slot = "29")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000CF7")]
			[Address(RVA = "0xE0F45C", Offset = "0xE0F45C", VA = "0xE0F45C", Slot = "30")]
			set
			{
			}
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0xE0BBC0", Offset = "0xE0BBC0", VA = "0xE0BBC0")]
		public JSONNumber(double aData)
		{
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0xE0F340", Offset = "0xE0F340", VA = "0xE0F340")]
		public JSONNumber(string aData)
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xE0F3F0", Offset = "0xE0F3F0", VA = "0xE0F3F0", Slot = "28")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0xE0F468", Offset = "0xE0F468", VA = "0xE0F468", Slot = "27")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xE0F4AC", Offset = "0xE0F4AC", VA = "0xE0F4AC")]
		private static bool IsNumeric(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0xE0F604", Offset = "0xE0F604", VA = "0xE0F604", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xE0F794", Offset = "0xE0F794", VA = "0xE0F794", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001ED")]
	public class JSONBool : JSONNode
	{
		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool m_Data;

		[Token(Token = "0x1700016B")]
		public override JSONNodeType Tag
		{
			[Token(Token = "0x6000CFE")]
			[Address(RVA = "0xE0B338", Offset = "0xE0B338", VA = "0xE0B338", Slot = "4")]
			get
			{
				return default(JSONNodeType);
			}
		}

		[Token(Token = "0x1700016C")]
		public override bool IsBoolean
		{
			[Token(Token = "0x6000CFF")]
			[Address(RVA = "0xE0B340", Offset = "0xE0B340", VA = "0xE0B340", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700016D")]
		public override string Value
		{
			[Token(Token = "0x6000D01")]
			[Address(RVA = "0xE0B35C", Offset = "0xE0B35C", VA = "0xE0B35C", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D02")]
			[Address(RVA = "0xE0B368", Offset = "0xE0B368", VA = "0xE0B368", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x1700016E")]
		public override bool AsBool
		{
			[Token(Token = "0x6000D03")]
			[Address(RVA = "0xE0B414", Offset = "0xE0B414", VA = "0xE0B414", Slot = "35")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D04")]
			[Address(RVA = "0xE0B41C", Offset = "0xE0B41C", VA = "0xE0B41C", Slot = "36")]
			set
			{
			}
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0xE0B20C", Offset = "0xE0B20C", VA = "0xE0B20C")]
		public JSONBool(bool aData)
		{
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0xE0B298", Offset = "0xE0B298", VA = "0xE0B298")]
		public JSONBool(string aData)
		{
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0xE0B348", Offset = "0xE0B348", VA = "0xE0B348", Slot = "28")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0xE0B424", Offset = "0xE0B424", VA = "0xE0B424", Slot = "27")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0xE0B4B4", Offset = "0xE0B4B4", VA = "0xE0B4B4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0xE0B548", Offset = "0xE0B548", VA = "0xE0B548", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001EE")]
	public class JSONNull : JSONNode
	{
		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static JSONNull m_StaticInstance;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static bool reuseSameInstance;

		[Token(Token = "0x1700016F")]
		public override JSONNodeType Tag
		{
			[Token(Token = "0x6000D0A")]
			[Address(RVA = "0xE0F0F0", Offset = "0xE0F0F0", VA = "0xE0F0F0", Slot = "4")]
			get
			{
				return default(JSONNodeType);
			}
		}

		[Token(Token = "0x17000170")]
		public override bool IsNull
		{
			[Token(Token = "0x6000D0B")]
			[Address(RVA = "0xE0F0F8", Offset = "0xE0F0F8", VA = "0xE0F0F8", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000171")]
		public override string Value
		{
			[Token(Token = "0x6000D0D")]
			[Address(RVA = "0xE0F114", Offset = "0xE0F114", VA = "0xE0F114", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D0E")]
			[Address(RVA = "0xE0F170", Offset = "0xE0F170", VA = "0xE0F170", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x17000172")]
		public override bool AsBool
		{
			[Token(Token = "0x6000D0F")]
			[Address(RVA = "0xE0F174", Offset = "0xE0F174", VA = "0xE0F174", Slot = "35")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D10")]
			[Address(RVA = "0xE0F17C", Offset = "0xE0F17C", VA = "0xE0F17C", Slot = "36")]
			set
			{
			}
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0xE0F06C", Offset = "0xE0F06C", VA = "0xE0F06C")]
		private JSONNull()
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0xE0A6E0", Offset = "0xE0A6E0", VA = "0xE0A6E0")]
		public static JSONNull CreateOrGet()
		{
			return null;
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0xE0F100", Offset = "0xE0F100", VA = "0xE0F100", Slot = "28")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0xE0F180", Offset = "0xE0F180", VA = "0xE0F180", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0xE0F244", Offset = "0xE0F244", VA = "0xE0F244", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0xE0F24C", Offset = "0xE0F24C", VA = "0xE0F24C", Slot = "27")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}
	}
	[Token(Token = "0x20001EF")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xC2F208", Offset = "0xC2F208")]
	internal class JSONLazyCreator : JSONNode
	{
		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private JSONNode m_Node;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private string m_Key;

		[Token(Token = "0x17000173")]
		public override JSONNodeType Tag
		{
			[Token(Token = "0x6000D17")]
			[Address(RVA = "0xE0B5E8", Offset = "0xE0B5E8", VA = "0xE0B5E8", Slot = "4")]
			get
			{
				return default(JSONNodeType);
			}
		}

		[Token(Token = "0x17000174")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000D1A")]
			[Address(RVA = "0xE0B680", Offset = "0xE0B680", VA = "0xE0B680", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D1B")]
			[Address(RVA = "0xE0B6F0", Offset = "0xE0B6F0", VA = "0xE0B6F0", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000175")]
		public override JSONNode Item
		{
			[Token(Token = "0x6000D1C")]
			[Address(RVA = "0xE0B78C", Offset = "0xE0B78C", VA = "0xE0B78C", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0xE0B804", Offset = "0xE0B804", VA = "0xE0B804", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000176")]
		public override int AsInt
		{
			[Token(Token = "0x6000D24")]
			[Address(RVA = "0xE0BB30", Offset = "0xE0BB30", VA = "0xE0BB30", Slot = "31")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D25")]
			[Address(RVA = "0xE0BC5C", Offset = "0xE0BC5C", VA = "0xE0BC5C", Slot = "32")]
			set
			{
			}
		}

		[Token(Token = "0x17000177")]
		public override float AsFloat
		{
			[Token(Token = "0x6000D26")]
			[Address(RVA = "0xE0BCE8", Offset = "0xE0BCE8", VA = "0xE0BCE8", Slot = "33")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D27")]
			[Address(RVA = "0xE0BD78", Offset = "0xE0BD78", VA = "0xE0BD78", Slot = "34")]
			set
			{
			}
		}

		[Token(Token = "0x17000178")]
		public override double AsDouble
		{
			[Token(Token = "0x6000D28")]
			[Address(RVA = "0xE0BE08", Offset = "0xE0BE08", VA = "0xE0BE08", Slot = "29")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000D29")]
			[Address(RVA = "0xE0BEA8", Offset = "0xE0BEA8", VA = "0xE0BEA8", Slot = "30")]
			set
			{
			}
		}

		[Token(Token = "0x17000179")]
		public override bool AsBool
		{
			[Token(Token = "0x6000D2A")]
			[Address(RVA = "0xE0BF34", Offset = "0xE0BF34", VA = "0xE0BF34", Slot = "35")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D2B")]
			[Address(RVA = "0xE0BFB0", Offset = "0xE0BFB0", VA = "0xE0BFB0", Slot = "36")]
			set
			{
			}
		}

		[Token(Token = "0x1700017A")]
		public override JSONArray AsArray
		{
			[Token(Token = "0x6000D2C")]
			[Address(RVA = "0xE0C02C", Offset = "0xE0C02C", VA = "0xE0C02C", Slot = "37")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017B")]
		public override JSONObject AsObject
		{
			[Token(Token = "0x6000D2D")]
			[Address(RVA = "0xE0C0A4", Offset = "0xE0C0A4", VA = "0xE0C0A4", Slot = "38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0xE0A2DC", Offset = "0xE0A2DC", VA = "0xE0A2DC")]
		public JSONLazyCreator(JSONNode aNode)
		{
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0xE0B554", Offset = "0xE0B554", VA = "0xE0B554")]
		public JSONLazyCreator(JSONNode aNode, string aKey)
		{
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0xE0B5F0", Offset = "0xE0B5F0", VA = "0xE0B5F0", Slot = "28")]
		public override Enumerator GetEnumerator()
		{
			return default(Enumerator);
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0xE0B604", Offset = "0xE0B604", VA = "0xE0B604")]
		private void Set(JSONNode aVal)
		{
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0xE0B960", Offset = "0xE0B960", VA = "0xE0B960", Slot = "21")]
		public override void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0xE0B9FC", Offset = "0xE0B9FC", VA = "0xE0B9FC", Slot = "20")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0xE0BAA0", Offset = "0xE0BAA0", VA = "0xE0BAA0")]
		public static bool operator ==(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0xE0BAC8", Offset = "0xE0BAC8", VA = "0xE0BAC8")]
		public static bool operator !=(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0xE0BAF4", Offset = "0xE0BAF4", VA = "0xE0BAF4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0xE0BB24", Offset = "0xE0BB24", VA = "0xE0BB24", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xE0C11C", Offset = "0xE0C11C", VA = "0xE0C11C", Slot = "27")]
		internal override void WriteToStringBuilder(StringBuilder aSB, int aIndent, int aIndentInc, JSONTextMode aMode)
		{
		}
	}
	[Token(Token = "0x20001F0")]
	public static class JSON
	{
		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0xE09400", Offset = "0xE09400", VA = "0xE09400")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}
	}
}
[Token(Token = "0x20001F1")]
public class Spline
{
	[Token(Token = "0x6000D30")]
	[Address(RVA = "0xE17670", Offset = "0xE17670", VA = "0xE17670")]
	public Spline()
	{
	}

	[Token(Token = "0x6000D31")]
	[Address(RVA = "0xE04028", Offset = "0xE04028", VA = "0xE04028")]
	public static Vector3Double EvaluateSplineWithSeperateTensions(ref Vector3Double[] controlPoints, double tension1, double tension2, bool looped, bool autoTension, double parameter)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000D32")]
	[Address(RVA = "0xE17738", Offset = "0xE17738", VA = "0xE17738")]
	public static Vector3 EvaluateSplineWithSeperateTensions(ref Vector3[] controlPoints, int controlPointCount, float tension1, float tension2, bool looped, bool autoTension, float parameter)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D33")]
	[Address(RVA = "0xE03FE4", Offset = "0xE03FE4", VA = "0xE03FE4")]
	public static Vector3Double EvaluateSplineWithAutoTension(ref Vector3Double[] controlPoints, bool looped, double parameter)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000D34")]
	[Address(RVA = "0xE17F60", Offset = "0xE17F60", VA = "0xE17F60")]
	public static Vector3 EvaluateSplineWithAutoTension(ref Vector3[] controlPoints, bool looped, float parameter)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D35")]
	[Address(RVA = "0xE17FC4", Offset = "0xE17FC4", VA = "0xE17FC4")]
	public static Vector3 EvaluateSplineWithAutoTension(ref Vector3[] controlPoints, int controlPointCount, bool looped, float parameter)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D36")]
	[Address(RVA = "0xE17678", Offset = "0xE17678", VA = "0xE17678")]
	private static Vector3Double splineTangent(double fTension, Vector3Double pxNextPoint, Vector3Double pxPrevPoint)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000D37")]
	[Address(RVA = "0xE17E60", Offset = "0xE17E60", VA = "0xE17E60")]
	private static Vector3 splineTangent(float fTension, Vector3 pxNextPoint, Vector3 pxPrevPoint)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D38")]
	[Address(RVA = "0xE17FF8", Offset = "0xE17FF8", VA = "0xE17FF8")]
	public static Vector3 EvaluateCatmullRomSpline(ref Vector3[] controlPoints, int controlPointCount, bool looped, float parameter)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D39")]
	[Address(RVA = "0xE1802C", Offset = "0xE1802C", VA = "0xE1802C")]
	public static Vector3 EvaluateCubicSpline(ref Vector3[] controlPoints, bool looped, float parameter)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D3A")]
	[Address(RVA = "0xE18484", Offset = "0xE18484", VA = "0xE18484")]
	private static Vector3 cubicInterpolate(Vector3 y0, Vector3 y1, Vector3 y2, Vector3 y3, float mu)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x20001F2")]
public class StaticAccess<T> : MonoBehaviour where T : MonoBehaviour
{
	[Token(Token = "0x40007BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static StaticAccess<T> sInstance;

	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private float mfDuration;

	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private float mfStartTime;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private float mfAnimatedValue;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private bool mbShouldActivate;

	[Token(Token = "0x1700017C")]
	protected float animatedValue
	{
		[Token(Token = "0x6000D43")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000D3B")]
	public StaticAccess()
	{
	}

	[Token(Token = "0x6000D3C")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000D3D")]
	protected void Update()
	{
	}

	[Token(Token = "0x6000D3E")]
	private void SetActiveImmediately(bool value)
	{
	}

	[Token(Token = "0x6000D3F")]
	public static StaticAccess<T> GetInstance()
	{
		return null;
	}

	[Token(Token = "0x6000D40")]
	public static void SetActive(bool value, float duration = 0f)
	{
	}

	[Token(Token = "0x6000D41")]
	private void setActive(bool value, float duration)
	{
	}

	[Token(Token = "0x6000D42")]
	public static bool GetActive()
	{
		return default(bool);
	}
}
[Token(Token = "0x20001F3")]
public static class StringHelper
{
	[Token(Token = "0x6000D44")]
	[Address(RVA = "0xCF9DD8", Offset = "0xCF9DD8", VA = "0xCF9DD8")]
	public static string DegreesToHMS(float degrees)
	{
		return null;
	}

	[Token(Token = "0x6000D45")]
	[Address(RVA = "0xCE2D54", Offset = "0xCE2D54", VA = "0xCE2D54")]
	public static string FirstLetterToUpper(this string str)
	{
		return null;
	}

	[Token(Token = "0x6000D46")]
	[Address(RVA = "0xCFA0CC", Offset = "0xCFA0CC", VA = "0xCFA0CC")]
	public static string NumberToOrdinal(int num)
	{
		return null;
	}

	[Token(Token = "0x6000D47")]
	[Address(RVA = "0xCFA398", Offset = "0xCFA398", VA = "0xCFA398")]
	public static string DistanceInAUtoKM(double au)
	{
		return null;
	}

	[Token(Token = "0x6000D48")]
	[Address(RVA = "0xCFA470", Offset = "0xCFA470", VA = "0xCFA470")]
	public static string ToTitleCase(string stringToConvert)
	{
		return null;
	}
}
[Token(Token = "0x20001F4")]
public class TextureSheet
{
	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private int miXCells;

	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private int miYCells;

	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int miTotalCells;

	[Token(Token = "0x6000D49")]
	[Address(RVA = "0xC9C1C8", Offset = "0xC9C1C8", VA = "0xC9C1C8")]
	public TextureSheet(int xCells, int yCells)
	{
	}

	[Token(Token = "0x6000D4A")]
	[Address(RVA = "0xC9C1F8", Offset = "0xC9C1F8", VA = "0xC9C1F8")]
	public Vector2[] GetQuadUVs(int index)
	{
		return null;
	}
}
[Token(Token = "0x20001F5")]
public struct TimeComponents
{
	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private readonly int miYear;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private readonly int miMonth;

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private readonly int miDay;

	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private readonly int miHour;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly int miMinute;

	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly double mdSecond;

	[Token(Token = "0x1700017D")]
	public int year
	{
		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xC9C7EC", Offset = "0xC9C7EC", VA = "0xC9C7EC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700017E")]
	public int month
	{
		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xC9C7FC", Offset = "0xC9C7FC", VA = "0xC9C7FC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700017F")]
	public int day
	{
		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xC9C80C", Offset = "0xC9C80C", VA = "0xC9C80C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000180")]
	public int hour
	{
		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xC9C81C", Offset = "0xC9C81C", VA = "0xC9C81C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000181")]
	public int minute
	{
		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xC9C82C", Offset = "0xC9C82C", VA = "0xC9C82C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000182")]
	public double second
	{
		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xC9C840", Offset = "0xC9C840", VA = "0xC9C840")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x6000D4B")]
	[Address(RVA = "0xC9C7C8", Offset = "0xC9C7C8", VA = "0xC9C7C8")]
	public TimeComponents(double jd)
	{
	}

	[Token(Token = "0x6000D52")]
	[Address(RVA = "0xC9CBA8", Offset = "0xC9CBA8", VA = "0xC9CBA8", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x20001F6")]
public class Timer
{
	[Token(Token = "0x200041C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2F26C", Offset = "0xC2F26C")]
	private sealed class <coRoutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal Timer $this;

		[Token(Token = "0x40016F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal object $current;

		[Token(Token = "0x40016F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal bool $disposing;

		[Token(Token = "0x40016F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int $PC;

		[Token(Token = "0x17000482")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001A44")]
			[Address(RVA = "0xC9CFC4", Offset = "0xC9CFC4", VA = "0xC9CFC4", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000483")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A45")]
			[Address(RVA = "0xC9CFCC", Offset = "0xC9CFCC", VA = "0xC9CFCC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A42")]
		[Address(RVA = "0xC9CE38", Offset = "0xC9CE38", VA = "0xC9CE38")]
		[DebuggerHidden]
		public <coRoutine>c__Iterator0()
		{
		}

		[Token(Token = "0x6001A43")]
		[Address(RVA = "0xC9CE74", Offset = "0xC9CE74", VA = "0xC9CE74", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A46")]
		[Address(RVA = "0xC9CFD4", Offset = "0xC9CFD4", VA = "0xC9CFD4", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A47")]
		[Address(RVA = "0xC9CFE8", Offset = "0xC9CFE8", VA = "0xC9CFE8", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private float mfStartTime;

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float mfDuration;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool mbRepeat;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Action mCallback;

	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IEnumerator mCoroutine;

	[Token(Token = "0x17000183")]
	public float progress
	{
		[Token(Token = "0x6000D58")]
		[Address(RVA = "0xC9CE40", Offset = "0xC9CE40", VA = "0xC9CE40")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000D53")]
	[Address(RVA = "0xC9CBB0", Offset = "0xC9CBB0", VA = "0xC9CBB0")]
	public Timer(float duration, Action callback, bool repeat = false)
	{
	}

	[Token(Token = "0x6000D54")]
	[Address(RVA = "0xC9CBE0", Offset = "0xC9CBE0", VA = "0xC9CBE0")]
	public static void Start(float duration, Action callback, bool repeat = false)
	{
	}

	[Token(Token = "0x6000D55")]
	[Address(RVA = "0xC9CC7C", Offset = "0xC9CC7C", VA = "0xC9CC7C")]
	public void Start()
	{
	}

	[Token(Token = "0x6000D56")]
	[Address(RVA = "0xC9CDB0", Offset = "0xC9CDB0", VA = "0xC9CDB0")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000D57")]
	[Address(RVA = "0xC9CCB0", Offset = "0xC9CCB0", VA = "0xC9CCB0")]
	[DebuggerHidden]
	private IEnumerator coRoutine()
	{
		return null;
	}
}
[Token(Token = "0x20001F7")]
public class TimerManager : MonoBehaviour
{
	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static TimerManager sInstance;

	[Token(Token = "0x6000D59")]
	[Address(RVA = "0xC9D06C", Offset = "0xC9D06C", VA = "0xC9D06C")]
	public TimerManager()
	{
	}

	[Token(Token = "0x6000D5A")]
	[Address(RVA = "0xC9D074", Offset = "0xC9D074", VA = "0xC9D074")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D5B")]
	[Address(RVA = "0xC9CD30", Offset = "0xC9CD30", VA = "0xC9CD30")]
	public static void StartTimer(IEnumerator lCoRoutine)
	{
	}

	[Token(Token = "0x6000D5C")]
	[Address(RVA = "0xC9CDB8", Offset = "0xC9CDB8", VA = "0xC9CDB8")]
	public static void StopTimer(IEnumerator lCoRoutine)
	{
	}
}
[Token(Token = "0x20001F8")]
public class TimerSimple
{
	[Token(Token = "0x40007D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private float mfTimeMark;

	[Token(Token = "0x40007D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private bool mbHasDuration;

	[Token(Token = "0x40007D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float mfDuration;

	[Token(Token = "0x6000D5D")]
	[Address(RVA = "0xC9D0D8", Offset = "0xC9D0D8", VA = "0xC9D0D8")]
	public TimerSimple()
	{
	}

	[Token(Token = "0x6000D5E")]
	[Address(RVA = "0xC9D128", Offset = "0xC9D128", VA = "0xC9D128")]
	public TimerSimple(float duration)
	{
	}

	[Token(Token = "0x6000D5F")]
	[Address(RVA = "0xC9D108", Offset = "0xC9D108", VA = "0xC9D108")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000D60")]
	[Address(RVA = "0xC9D160", Offset = "0xC9D160", VA = "0xC9D160")]
	public bool IsFinished(float timeToCheck)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D61")]
	[Address(RVA = "0xC9D1A4", Offset = "0xC9D1A4", VA = "0xC9D1A4")]
	public bool IsFinished()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D62")]
	[Address(RVA = "0xC9D1EC", Offset = "0xC9D1EC", VA = "0xC9D1EC")]
	public float Progress(float timeToCheck)
	{
		return default(float);
	}

	[Token(Token = "0x6000D63")]
	[Address(RVA = "0xC9D2A4", Offset = "0xC9D2A4", VA = "0xC9D2A4")]
	public float Progress()
	{
		return default(float);
	}
}
[Token(Token = "0x20001F9")]
public struct Triangle
{
	[Token(Token = "0x40007D3")]
	public const int INDEX_COUNT = 3;

	[Token(Token = "0x40007D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int[] indices;

	[Token(Token = "0x6000D64")]
	[Address(RVA = "0xCBA150", Offset = "0xCBA150", VA = "0xCBA150")]
	public Triangle(int i1, int i2, int i3)
	{
	}

	[Token(Token = "0x6000D65")]
	[Address(RVA = "0xCBA29C", Offset = "0xCBA29C", VA = "0xCBA29C")]
	public Triangle(Vertex v1, Vertex v2, Vertex v3)
	{
	}
}
[Token(Token = "0x20001FA")]
public class UnitConversions
{
	[Token(Token = "0x40007D5")]
	public const double PARSEC_TO_AU = 206264.8062;

	[Token(Token = "0x40007D6")]
	public const double AU_TO_PARSEC = 4.848136812202333E-06;

	[Token(Token = "0x40007D7")]
	public const double PARSEC_TO_LY = 3.26156;

	[Token(Token = "0x40007D8")]
	public const double LY_TO_PARSEC = 0.3066017488563755;

	[Token(Token = "0x40007D9")]
	public const double EARTH_RADIUS_TO_KM = 6371.0;

	[Token(Token = "0x40007DA")]
	public const double AU_TO_KM = 149598000.0;

	[Token(Token = "0x40007DB")]
	public const double KM_TO_AU = 6.684581344670383E-09;

	[Token(Token = "0x40007DC")]
	public const double KM_TO_MILES = 0.621371;

	[Token(Token = "0x40007DD")]
	public const double MILES_TO_KM = 1.6093444978925633;

	[Token(Token = "0x40007DE")]
	public const float INCHES_TO_MM = 25.4f;

	[Token(Token = "0x40007DF")]
	public const double YEAR_TO_DAYS = 365.25;

	[Token(Token = "0x6000D66")]
	[Address(RVA = "0xCC4C78", Offset = "0xCC4C78", VA = "0xCC4C78")]
	public UnitConversions()
	{
	}
}
[Serializable]
[Token(Token = "0x20001FB")]
public struct Vector2Double
{
	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public double x;

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public double y;

	[Token(Token = "0x17000184")]
	public static Vector2Double zero
	{
		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xD25C1C", Offset = "0xD25C1C", VA = "0xD25C1C")]
		get
		{
			return default(Vector2Double);
		}
	}

	[Token(Token = "0x17000185")]
	public double magnitude
	{
		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0xD25D20", Offset = "0xD25D20", VA = "0xD25D20")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x6000D67")]
	[Address(RVA = "0xD25C08", Offset = "0xD25C08", VA = "0xD25C08")]
	public Vector2Double(double x, double y)
	{
	}

	[Token(Token = "0x6000D69")]
	[Address(RVA = "0xD25C34", Offset = "0xD25C34", VA = "0xD25C34")]
	public static Vector2Double operator +(Vector2Double v1, Vector2Double v2)
	{
		return default(Vector2Double);
	}

	[Token(Token = "0x6000D6A")]
	[Address(RVA = "0xD25C70", Offset = "0xD25C70", VA = "0xD25C70")]
	public static Vector2Double operator -(Vector2Double v1, Vector2Double v2)
	{
		return default(Vector2Double);
	}

	[Token(Token = "0x6000D6B")]
	[Address(RVA = "0xD25CAC", Offset = "0xD25CAC", VA = "0xD25CAC")]
	public static Vector2Double operator *(Vector2Double v1, double m)
	{
		return default(Vector2Double);
	}

	[Token(Token = "0x6000D6C")]
	[Address(RVA = "0xD25CD0", Offset = "0xD25CD0", VA = "0xD25CD0")]
	public static Vector2Double operator /(Vector2Double v1, double d)
	{
		return default(Vector2Double);
	}

	[Token(Token = "0x6000D6E")]
	[Address(RVA = "0xD25D50", Offset = "0xD25D50", VA = "0xD25D50")]
	public static Vector2Double Lerp(Vector2Double from, Vector2Double to, double t)
	{
		return default(Vector2Double);
	}

	[Token(Token = "0x6000D6F")]
	[Address(RVA = "0xD25DE8", Offset = "0xD25DE8", VA = "0xD25DE8")]
	public static bool Compare(Vector2Double v1, Vector2Double v2)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001FC")]
public static class Vector2Extensions
{
	[Token(Token = "0x6000D70")]
	[Address(RVA = "0xD25E34", Offset = "0xD25E34", VA = "0xD25E34")]
	public static Vector2 Rotate(this Vector2 v, float degrees)
	{
		return default(Vector2);
	}
}
[Serializable]
[Token(Token = "0x20001FD")]
public struct Vector3Double
{
	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public double x;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public double y;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public double z;

	[Token(Token = "0x17000186")]
	public static Vector3Double zero
	{
		[Token(Token = "0x6000D72")]
		[Address(RVA = "0xD25F48", Offset = "0xD25F48", VA = "0xD25F48")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x17000187")]
	public static Vector3Double right
	{
		[Token(Token = "0x6000D73")]
		[Address(RVA = "0xD25F5C", Offset = "0xD25F5C", VA = "0xD25F5C")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x17000188")]
	public static Vector3Double left
	{
		[Token(Token = "0x6000D74")]
		[Address(RVA = "0xD25F88", Offset = "0xD25F88", VA = "0xD25F88")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x17000189")]
	public static Vector3Double up
	{
		[Token(Token = "0x6000D75")]
		[Address(RVA = "0xD25FB4", Offset = "0xD25FB4", VA = "0xD25FB4")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x1700018A")]
	public static Vector3Double down
	{
		[Token(Token = "0x6000D76")]
		[Address(RVA = "0xD25FE4", Offset = "0xD25FE4", VA = "0xD25FE4")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x1700018B")]
	public static Vector3Double forward
	{
		[Token(Token = "0x6000D77")]
		[Address(RVA = "0xD26014", Offset = "0xD26014", VA = "0xD26014")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x1700018C")]
	public static Vector3Double back
	{
		[Token(Token = "0x6000D78")]
		[Address(RVA = "0xD2603C", Offset = "0xD2603C", VA = "0xD2603C")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x1700018D")]
	public double magnitude
	{
		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xD26A2C", Offset = "0xD26A2C", VA = "0xD26A2C")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x1700018E")]
	public double sqrMagnitude
	{
		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xD26A64", Offset = "0xD26A64", VA = "0xD26A64")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x1700018F")]
	public Vector3Double normalized
	{
		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0xD26BD0", Offset = "0xD26BD0", VA = "0xD26BD0")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x6000D71")]
	[Address(RVA = "0xD25F2C", Offset = "0xD25F2C", VA = "0xD25F2C")]
	public Vector3Double(double x, double y, double z)
	{
	}

	[Token(Token = "0x6000D79")]
	[Address(RVA = "0xD26064", Offset = "0xD26064", VA = "0xD26064")]
	public static Vector3Double operator +(Vector3Double v1, Vector3Double v2)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000D7A")]
	[Address(RVA = "0xD260BC", Offset = "0xD260BC", VA = "0xD260BC")]
	public static Vector3Double operator +(Vector3 v1, Vector3Double v2)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000D7B")]
	[Address(RVA = "0xD2610C", Offset = "0xD2610C", VA = "0xD2610C")]
	public static Vector3Double operator +(Vector3Double v1, Vector3 v2)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000D7C")]
	[Address(RVA = "0xD26150", Offset = "0xD26150", VA = "0xD26150")]
	public static Vector3Double operator -(Vector3Double v1, Vector3Double v2)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000D7D")]
	[Address(RVA = "0xD261A8", Offset = "0xD261A8", VA = "0xD261A8")]
	public static Vector3Double operator -(Vector3Double a)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000D7E")]
	[Address(RVA = "0xD261F0", Offset = "0xD261F0", VA = "0xD261F0")]
	public static Vector3Double operator *(Vector3Double v, double mu)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000D7F")]
	[Address(RVA = "0xD26230", Offset = "0xD26230", VA = "0xD26230")]
	public static Vector3Double operator /(Vector3Double v, double div)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000D80")]
	[Address(RVA = "0xD26270", Offset = "0xD26270", VA = "0xD26270")]
	public static bool operator ==(Vector3Double lhs, Vector3Double rhs)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D81")]
	[Address(RVA = "0xD26338", Offset = "0xD26338", VA = "0xD26338")]
	public static bool operator !=(Vector3Double lhs, Vector3Double rhs)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D82")]
	[Address(RVA = "0xD264B0", Offset = "0xD264B0", VA = "0xD264B0", Slot = "0")]
	public override bool Equals(object other)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D83")]
	[Address(RVA = "0xD264F4", Offset = "0xD264F4", VA = "0xD264F4", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000D84")]
	[Address(RVA = "0xD262F8", Offset = "0xD262F8", VA = "0xD262F8")]
	public static double SqrMagnitude(Vector3Double v)
	{
		return default(double);
	}

	[Token(Token = "0x6000D85")]
	[Address(RVA = "0xD26714", Offset = "0xD26714", VA = "0xD26714", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000D86")]
	[Address(RVA = "0xD26934", Offset = "0xD26934", VA = "0xD26934")]
	public string ToStringPrecise()
	{
		return null;
	}

	[Token(Token = "0x6000D87")]
	[Address(RVA = "0xD2693C", Offset = "0xD2693C", VA = "0xD2693C")]
	public static explicit operator Vector3(Vector3Double v)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D88")]
	[Address(RVA = "0xD2699C", Offset = "0xD2699C", VA = "0xD2699C")]
	public static explicit operator Vector3Double(Vector3 v)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000D8B")]
	[Address(RVA = "0xD26AF0", Offset = "0xD26AF0", VA = "0xD26AF0")]
	public void Normalize()
	{
	}

	[Token(Token = "0x6000D8D")]
	[Address(RVA = "0xD26C44", Offset = "0xD26C44", VA = "0xD26C44")]
	public static double Dot(Vector3Double lhs, Vector3Double rhs)
	{
		return default(double);
	}

	[Token(Token = "0x6000D8E")]
	[Address(RVA = "0xD26CA4", Offset = "0xD26CA4", VA = "0xD26CA4")]
	public static Vector3Double Cross(Vector3Double lhs, Vector3Double rhs)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000D8F")]
	[Address(RVA = "0xD26D30", Offset = "0xD26D30", VA = "0xD26D30")]
	public static Vector3Double Lerp(Vector3Double from, Vector3Double to, double t)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000D90")]
	[Address(RVA = "0xD26E38", Offset = "0xD26E38", VA = "0xD26E38")]
	public double ExtractYaw()
	{
		return default(double);
	}

	[Token(Token = "0x6000D91")]
	[Address(RVA = "0xD26F48", Offset = "0xD26F48", VA = "0xD26F48")]
	public double ExtractPitch()
	{
		return default(double);
	}

	[Token(Token = "0x6000D92")]
	[Address(RVA = "0xD26F50", Offset = "0xD26F50", VA = "0xD26F50")]
	public static Vector3Double MakeOnSphere(double ra, double dec)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000D93")]
	[Address(RVA = "0xD27010", Offset = "0xD27010", VA = "0xD27010")]
	public static Vector3Double operator *(Quaternion quat, Vector3Double vec)
	{
		return default(Vector3Double);
	}
}
[Token(Token = "0x20001FE")]
public static class Vector3Extensions
{
	[Token(Token = "0x6000D94")]
	[Address(RVA = "0xD27120", Offset = "0xD27120", VA = "0xD27120")]
	public static Vector3 SphericalToEuler(float ra, float dec)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D95")]
	[Address(RVA = "0xD27234", Offset = "0xD27234", VA = "0xD27234")]
	public static Vector3 MakeOnSphere(float ra, float dec)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D96")]
	[Address(RVA = "0xD27348", Offset = "0xD27348", VA = "0xD27348")]
	public static Vector3 MakeFromSpherical(float inRa, float inDec, float r)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D97")]
	[Address(RVA = "0xD27470", Offset = "0xD27470", VA = "0xD27470")]
	public static Vector3 SlerpNormalised(Vector3 v0, Vector3 v1, float mu)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D98")]
	[Address(RVA = "0xD277B8", Offset = "0xD277B8", VA = "0xD277B8")]
	public static float ExtractYaw(this Vector3 v)
	{
		return default(float);
	}

	[Token(Token = "0x6000D99")]
	[Address(RVA = "0xD27854", Offset = "0xD27854", VA = "0xD27854")]
	public static float ExtractPitch(this Vector3 v)
	{
		return default(float);
	}

	[Token(Token = "0x6000D9A")]
	[Address(RVA = "0xD27984", Offset = "0xD27984", VA = "0xD27984")]
	public static string ToString(this Vector3 v, int decimalPlaces)
	{
		return null;
	}

	[Token(Token = "0x6000D9B")]
	[Address(RVA = "0xD27E54", Offset = "0xD27E54", VA = "0xD27E54")]
	public static string ToStringPrecise(this Vector3 v)
	{
		return null;
	}

	[Token(Token = "0x6000D9C")]
	[Address(RVA = "0xD28068", Offset = "0xD28068", VA = "0xD28068")]
	public static bool IsValid(this Vector3 v)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001FF")]
public struct Vertex
{
	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private readonly Vector3 mvPosition;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private readonly Vector2 mvUV;

	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private readonly Vector3 mvNormal;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly Vector4 mvTangent;

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Vector3 mvBiTangent;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private readonly Color mcColor;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private readonly int miIndex;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int siIndex;

	[Token(Token = "0x17000190")]
	public Vector3 position
	{
		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0xD288E8", Offset = "0xD288E8", VA = "0xD288E8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000191")]
	public Vector2 uv
	{
		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0xD2890C", Offset = "0xD2890C", VA = "0xD2890C")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x17000192")]
	public Vector3 normal
	{
		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xD28930", Offset = "0xD28930", VA = "0xD28930")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000193")]
	public Vector4 tangent
	{
		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0xD28954", Offset = "0xD28954", VA = "0xD28954")]
		get
		{
			return default(Vector4);
		}
	}

	[Token(Token = "0x17000194")]
	public Vector3 biTangent
	{
		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0xD28978", Offset = "0xD28978", VA = "0xD28978")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000195")]
	public Color color
	{
		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0xD2899C", Offset = "0xD2899C", VA = "0xD2899C")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x17000196")]
	public int index
	{
		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0xD289B8", Offset = "0xD289B8", VA = "0xD289B8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000D9D")]
	[Address(RVA = "0xD282BC", Offset = "0xD282BC", VA = "0xD282BC")]
	public Vertex(Vector3 position, Vector2 uv, Vector3 normal)
	{
	}

	[Token(Token = "0x6000D9E")]
	[Address(RVA = "0xD2844C", Offset = "0xD2844C", VA = "0xD2844C")]
	public Vertex(Vector3 position, Vector2 uv, Vector3 normal, Vector4 tangent, Vector3 biTangent)
	{
	}

	[Token(Token = "0x6000D9F")]
	[Address(RVA = "0xD2865C", Offset = "0xD2865C", VA = "0xD2865C")]
	public Vertex(Vector3 position, Vector3 normal, Vector4 tangent)
	{
	}

	[Token(Token = "0x6000DA0")]
	[Address(RVA = "0xD28884", Offset = "0xD28884", VA = "0xD28884")]
	public Vertex(Vector3 position, Vector2 uv, Vector3 normal, Color color)
	{
	}

	[Token(Token = "0x6000DA8")]
	[Address(RVA = "0xD289C0", Offset = "0xD289C0", VA = "0xD289C0")]
	public static void ResetIndexCounter()
	{
	}
}
[Token(Token = "0x2000200")]
public abstract class BrowsableContainer : MonoBehaviour
{
	[Token(Token = "0x2000201")]
	public enum SortableProperties
	{
		[Token(Token = "0x40007F4")]
		Undefined,
		[Token(Token = "0x40007F5")]
		Name,
		[Token(Token = "0x40007F6")]
		Distance,
		[Token(Token = "0x40007F7")]
		Size,
		[Token(Token = "0x40007F8")]
		Brightness,
		[Token(Token = "0x40007F9")]
		Date
	}

	[Token(Token = "0x2000202")]
	public enum BrowseIconSize
	{
		[Token(Token = "0x40007FB")]
		Small,
		[Token(Token = "0x40007FC")]
		Medium,
		[Token(Token = "0x40007FD")]
		Large
	}

	[Token(Token = "0x200041D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2F34C", Offset = "0xC2F34C")]
	private sealed class <BuildBrowsableObjectList>c__AnonStorey0
	{
		[Token(Token = "0x40016F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal int liReverser;

		[Token(Token = "0x6001A48")]
		[Address(RVA = "0x169764", Offset = "0x169764", VA = "0x169764")]
		public <BuildBrowsableObjectList>c__AnonStorey0()
		{
		}

		[Token(Token = "0x6001A49")]
		[Address(RVA = "0x169EE0", Offset = "0x169EE0", VA = "0x169EE0")]
		internal int <>m__0(IFindableObject p1, IFindableObject p2)
		{
			return default(int);
		}

		[Token(Token = "0x6001A4A")]
		[Address(RVA = "0x169FC4", Offset = "0x169FC4", VA = "0x169FC4")]
		internal int <>m__1(IFindableObject p1, IFindableObject p2)
		{
			return default(int);
		}

		[Token(Token = "0x6001A4B")]
		[Address(RVA = "0x16A0A8", Offset = "0x16A0A8", VA = "0x16A0A8")]
		internal int <>m__2(IFindableObject p1, IFindableObject p2)
		{
			return default(int);
		}

		[Token(Token = "0x6001A4C")]
		[Address(RVA = "0x16A18C", Offset = "0x16A18C", VA = "0x16A18C")]
		internal int <>m__3(IFindableObject p1, IFindableObject p2)
		{
			return default(int);
		}

		[Token(Token = "0x6001A4D")]
		[Address(RVA = "0x16A270", Offset = "0x16A270", VA = "0x16A270")]
		internal int <>m__4(IFindableObject p1, IFindableObject p2)
		{
			return default(int);
		}
	}

	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string[] saSortablePropertyKeys;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	protected List<IFindableObject> maBrowsableObjects;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int miSortablePropertyIndex;

	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private List<SortableProperties> maSortablePropertyList;

	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	protected static string ssFilter;

	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool mbIsSortReversed;

	[Token(Token = "0x17000197")]
	public SortableProperties currentSortingMethod
	{
		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0x16905C", Offset = "0x16905C", VA = "0x16905C")]
		get
		{
			return default(SortableProperties);
		}
	}

	[Token(Token = "0x17000198")]
	public string currentSortablePropertyName
	{
		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x169100", Offset = "0x169100", VA = "0x169100")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000199")]
	public string filter
	{
		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0x169200", Offset = "0x169200", VA = "0x169200")]
		set
		{
		}
	}

	[Token(Token = "0x1700019A")]
	public bool isSortReversed
	{
		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0x1692AC", Offset = "0x1692AC", VA = "0x1692AC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700019B")]
	public List<IFindableObject> browsableObjects
	{
		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x169BAC", Offset = "0x169BAC", VA = "0x169BAC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000DAA")]
	[Address(RVA = "0x169054", Offset = "0x169054", VA = "0x169054")]
	protected BrowsableContainer()
	{
	}

	[Token(Token = "0x6000DAF")]
	protected abstract void buildBrowsableObjectListForClass();

	[Token(Token = "0x6000DB0")]
	protected abstract List<SortableProperties> getSortableProperties();

	[Token(Token = "0x6000DB1")]
	protected abstract bool allowFilterInSubheading();

	[Token(Token = "0x6000DB2")]
	[Address(RVA = "0x1692B4", Offset = "0x1692B4", VA = "0x1692B4")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000DB3")]
	[Address(RVA = "0x16934C", Offset = "0x16934C", VA = "0x16934C")]
	public void NextSortingMethod()
	{
	}

	[Token(Token = "0x6000DB4")]
	[Address(RVA = "0x1693D8", Offset = "0x1693D8", VA = "0x1693D8")]
	public void ReverseSortOrder()
	{
	}

	[Token(Token = "0x6000DB5")]
	[Address(RVA = "0x1693E8", Offset = "0x1693E8", VA = "0x1693E8")]
	public void BuildBrowsableObjectList()
	{
	}

	[Token(Token = "0x6000DB6")]
	[Address(RVA = "0x16976C", Offset = "0x16976C", VA = "0x16976C")]
	private void buildBrowsableObjectListOnDemand()
	{
	}

	[Token(Token = "0x6000DB7")]
	[Address(RVA = "0x169800", Offset = "0x169800", VA = "0x169800")]
	protected void addObjectToListWithFilter(IFindableObject findableObject)
	{
	}

	[Token(Token = "0x6000DB9")]
	[Address(RVA = "0x169BC4", Offset = "0x169BC4", VA = "0x169BC4")]
	public IFindableObject GetBrowsableObjectAtIndex(int index)
	{
		return null;
	}
}
[Token(Token = "0x2000203")]
public abstract class CelestialObject
{
	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	protected string msName;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	protected Bounds mBounds;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected bool mbIsSelected;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected double mdApparentDiameter;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool mbIsLifeTimeSet;

	[Token(Token = "0x4000803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected RangeDouble mLifeTime;

	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static CelestialObject sSelectedObjectCache;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool error;

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected Vector3Double mvPositionGeocentric;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected Vector3Double mvPositionHeliocentric;

	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected Vector3Double mvWorldPosition;

	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected Vector3Double mvPositionEquatorialHeliocentric;

	[Token(Token = "0x1700019C")]
	public bool isSelected
	{
		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0x172DCC", Offset = "0x172DCC", VA = "0x172DCC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700019D")]
	public string name
	{
		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0x162980", Offset = "0x162980", VA = "0x162980")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700019E")]
	public virtual Vector3 selectablePosition
	{
		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0x172DD4", Offset = "0x172DD4", VA = "0x172DD4", Slot = "4")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0x172DEC", Offset = "0x172DEC", VA = "0x172DEC", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x1700019F")]
	public Vector3 size
	{
		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0x172E10", Offset = "0x172E10", VA = "0x172E10")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0x172E28", Offset = "0x172E28", VA = "0x172E28")]
		set
		{
		}
	}

	[Token(Token = "0x170001A0")]
	public Bounds bounds
	{
		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0x172F0C", Offset = "0x172F0C", VA = "0x172F0C")]
		get
		{
			return default(Bounds);
		}
	}

	[Token(Token = "0x170001A1")]
	public float sizeScalar
	{
		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0x172F20", Offset = "0x172F20", VA = "0x172F20")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001A2")]
	public double apparentDiameter
	{
		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x173280", Offset = "0x173280", VA = "0x173280")]
		get
		{
			return default(double);
		}
		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x17328C", Offset = "0x17328C", VA = "0x17328C")]
		set
		{
		}
	}

	[Token(Token = "0x170001A3")]
	public float screenFraction
	{
		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x173298", Offset = "0x173298", VA = "0x173298")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001A4")]
	public abstract float selectionPriority
	{
		[Token(Token = "0x6000DCC")]
		get;
	}

	[Token(Token = "0x170001A5")]
	public Vector3Double positionGeocentric
	{
		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x17377C", Offset = "0x17377C", VA = "0x17377C")]
		get
		{
			return default(Vector3Double);
		}
		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x173790", Offset = "0x173790", VA = "0x173790")]
		set
		{
		}
	}

	[Token(Token = "0x170001A6")]
	public Vector3Double positionHeliocentric
	{
		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x1613F0", Offset = "0x1613F0", VA = "0x1613F0")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x170001A7")]
	public Vector3Double worldPosition
	{
		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0x1737B8", Offset = "0x1737B8", VA = "0x1737B8")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x170001A8")]
	public Vector3Double positionEquatorialHeliocentric
	{
		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x1737CC", Offset = "0x1737CC", VA = "0x1737CC")]
		get
		{
			return default(Vector3Double);
		}
	}

	[Token(Token = "0x6000DBB")]
	[Address(RVA = "0x172CD4", Offset = "0x172CD4", VA = "0x172CD4")]
	protected CelestialObject(string name, Vector3 position, float size)
	{
	}

	[Token(Token = "0x6000DBC")]
	[Address(RVA = "0x172D48", Offset = "0x172D48", VA = "0x172D48")]
	protected CelestialObject(string name, Vector3 position, Vector3 size)
	{
	}

	[Token(Token = "0x6000DC5")]
	[Address(RVA = "0x172F94", Offset = "0x172F94", VA = "0x172F94")]
	protected void SetLifeTime(double start, double end)
	{
	}

	[Token(Token = "0x6000DC6")]
	[Address(RVA = "0x172FEC", Offset = "0x172FEC", VA = "0x172FEC")]
	public bool isActiveAtJD(double jd)
	{
		return default(bool);
	}

	[Token(Token = "0x6000DC7")]
	[Address(RVA = "0x173028", Offset = "0x173028", VA = "0x173028")]
	public static void UnSelect()
	{
	}

	[Token(Token = "0x6000DC8")]
	[Address(RVA = "0x173148", Offset = "0x173148", VA = "0x173148", Slot = "6")]
	public virtual void SetSelected(bool selected)
	{
	}
}
[Token(Token = "0x2000204")]
public class Compass : StaticAccess<Compass>
{
	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public CameraWrapper cameraWrapper;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float radius;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float lineWidth;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float compassPointsHeight;

	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Material compassPointsMaterial;

	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color lineColor;

	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Color textColor;

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject[] maCompassPoints;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private string[] maCompassPointKeys;

	[Token(Token = "0x4000813")]
	private const int kiLineSegments = 36;

	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LineMesh sLineMesh;

	[Token(Token = "0x6000DD3")]
	[Address(RVA = "0x17545C", Offset = "0x17545C", VA = "0x17545C")]
	public Compass()
	{
	}

	[Token(Token = "0x6000DD4")]
	[Address(RVA = "0x175870", Offset = "0x175870", VA = "0x175870")]
	private new void Start()
	{
	}

	[Token(Token = "0x6000DD5")]
	[Address(RVA = "0x1761F8", Offset = "0x1761F8", VA = "0x1761F8")]
	private new void Update()
	{
	}
}
namespace Constellations
{
	[Token(Token = "0x2000205")]
	public class Asterism
	{
		[Token(Token = "0x2000206")]
		public struct StarIdPair
		{
			[Token(Token = "0x4000817")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly uint liStar1ID;

			[Token(Token = "0x4000818")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private readonly uint liStar2ID;

			[Token(Token = "0x170001AA")]
			public uint star1ID
			{
				[Token(Token = "0x6000DDA")]
				[Address(RVA = "0x176ECC", Offset = "0x176ECC", VA = "0x176ECC")]
				get
				{
					return default(uint);
				}
			}

			[Token(Token = "0x170001AB")]
			public uint star2ID
			{
				[Token(Token = "0x6000DDB")]
				[Address(RVA = "0x176ED4", Offset = "0x176ED4", VA = "0x176ED4")]
				get
				{
					return default(uint);
				}
			}

			[Token(Token = "0x6000DD9")]
			[Address(RVA = "0x176EC0", Offset = "0x176EC0", VA = "0x176EC0")]
			public StarIdPair(uint star1ID, uint star2ID)
			{
			}
		}

		[Token(Token = "0x4000815")]
		private const float LINE_GAP = 0.008f;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private LineMesh mLineMesh;

		[Token(Token = "0x170001A9")]
		public Mesh mesh
		{
			[Token(Token = "0x6000DD8")]
			[Address(RVA = "0x176E98", Offset = "0x176E98", VA = "0x176E98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x176A20", Offset = "0x176A20", VA = "0x176A20")]
		public Asterism(StarIdPair[] starIDpairs)
		{
		}
	}
	[Token(Token = "0x2000207")]
	public class Constellation : ICameraTrackable, IFindableObject
	{
		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private string msName;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Vector3 mvCenter;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Asterism mAsterism;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private List<Boundary> maBoundaries;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ConstellationImage mImage;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private ConstellationRenderable mConstellationRenderable;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<uint> maStarIDs;

		[Token(Token = "0x4000820")]
		private const string CONSTELLATION_ICONS_PATH = "Textures/UI/Browse/constellationsPage";

		[Token(Token = "0x4000821")]
		private const string ASTERISM_ICON_PATH = "Textures/UI/Browse/constellationAsterism";

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, Sprite> saSpriteDictionary;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static Sprite sDefaultIcon;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool mbIsBrowseExpanded;

		[Token(Token = "0x170001AC")]
		public string name
		{
			[Token(Token = "0x6000DDD")]
			[Address(RVA = "0x1788AC", Offset = "0x1788AC", VA = "0x1788AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AD")]
		public Asterism asterism
		{
			[Token(Token = "0x6000DDE")]
			[Address(RVA = "0x1788B4", Offset = "0x1788B4", VA = "0x1788B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AE")]
		public List<Boundary> boundaries
		{
			[Token(Token = "0x6000DE0")]
			[Address(RVA = "0x178B98", Offset = "0x178B98", VA = "0x178B98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AF")]
		public ConstellationImage image
		{
			[Token(Token = "0x6000DE1")]
			[Address(RVA = "0x178BA0", Offset = "0x178BA0", VA = "0x178BA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DE2")]
			[Address(RVA = "0x178BA8", Offset = "0x178BA8", VA = "0x178BA8")]
			set
			{
			}
		}

		[Token(Token = "0x170001B0")]
		public Vector3 center
		{
			[Token(Token = "0x6000DE3")]
			[Address(RVA = "0x178BB0", Offset = "0x178BB0", VA = "0x178BB0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001B1")]
		public ConstellationRenderable constellationRenderable
		{
			[Token(Token = "0x6000DE4")]
			[Address(RVA = "0x178BC0", Offset = "0x178BC0", VA = "0x178BC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DE5")]
			[Address(RVA = "0x178BC8", Offset = "0x178BC8", VA = "0x178BC8")]
			set
			{
			}
		}

		[Token(Token = "0x170001B2")]
		public bool isVisible
		{
			[Token(Token = "0x6000DE6")]
			[Address(RVA = "0x178BD0", Offset = "0x178BD0", VA = "0x178BD0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B3")]
		public Vector3 positionToTrack
		{
			[Token(Token = "0x6000DE9")]
			[Address(RVA = "0x17953C", Offset = "0x17953C", VA = "0x17953C", Slot = "4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001B4")]
		public float fovToFrame
		{
			[Token(Token = "0x6000DEA")]
			[Address(RVA = "0x17954C", Offset = "0x17954C", VA = "0x17954C", Slot = "5")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001B5")]
		public bool isBrowseExpanded
		{
			[Token(Token = "0x6000DEB")]
			[Address(RVA = "0x179554", Offset = "0x179554", VA = "0x179554", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B6")]
		public bool isEnabled
		{
			[Token(Token = "0x6000DEC")]
			[Address(RVA = "0x17955C", Offset = "0x17955C", VA = "0x17955C", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B7")]
		public Sprite icon
		{
			[Token(Token = "0x6000DED")]
			[Address(RVA = "0x179564", Offset = "0x179564", VA = "0x179564", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B8")]
		public BrowsableContainer.BrowseIconSize iconSize
		{
			[Token(Token = "0x6000DEE")]
			[Address(RVA = "0x179984", Offset = "0x179984", VA = "0x179984", Slot = "7")]
			get
			{
				return default(BrowsableContainer.BrowseIconSize);
			}
		}

		[Token(Token = "0x170001B9")]
		public string headingText
		{
			[Token(Token = "0x6000DEF")]
			[Address(RVA = "0x179998", Offset = "0x179998", VA = "0x179998", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BA")]
		public string subHeadingText
		{
			[Token(Token = "0x6000DF0")]
			[Address(RVA = "0x1799A0", Offset = "0x1799A0", VA = "0x1799A0", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BB")]
		public string expandableText
		{
			[Token(Token = "0x6000DF1")]
			[Address(RVA = "0x179A50", Offset = "0x179A50", VA = "0x179A50", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BC")]
		public Sprite expandableIcon
		{
			[Token(Token = "0x6000DF2")]
			[Address(RVA = "0x179A58", Offset = "0x179A58", VA = "0x179A58", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BD")]
		public List<IFindableObject> findableChildren
		{
			[Token(Token = "0x6000DF3")]
			[Address(RVA = "0x179A60", Offset = "0x179A60", VA = "0x179A60", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BE")]
		public bool isExpandable
		{
			[Token(Token = "0x6000DF4")]
			[Address(RVA = "0x179CB8", Offset = "0x179CB8", VA = "0x179CB8", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x178398", Offset = "0x178398", VA = "0x178398")]
		public Constellation(string name, int lineCount, BinaryReader reader)
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x1788BC", Offset = "0x1788BC", VA = "0x1788BC")]
		public void AddBoundary(Boundary constellationBoundary)
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x178BE0", Offset = "0x178BE0", VA = "0x178BE0")]
		public void Update(float deltaTime)
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x1794A4", Offset = "0x1794A4", VA = "0x1794A4")]
		public bool Contains(Star star)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0x179CC0", Offset = "0x179CC0", VA = "0x179CC0", Slot = "15")]
		public void OnBrowseTap()
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0x179DE4", Offset = "0x179DE4", VA = "0x179DE4", Slot = "16")]
		public void OnExpandTap()
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x179DF4", Offset = "0x179DF4", VA = "0x179DF4", Slot = "19")]
		public int CompareName(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x17A074", Offset = "0x17A074", VA = "0x17A074", Slot = "18")]
		public int CompareDistance(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x17A07C", Offset = "0x17A07C", VA = "0x17A07C", Slot = "20")]
		public int CompareSize(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x17A084", Offset = "0x17A084", VA = "0x17A084", Slot = "21")]
		public int CompareBrightness(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0x17A08C", Offset = "0x17A08C", VA = "0x17A08C", Slot = "22")]
		public int CompareDate(IFindableObject comparer)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000208")]
	public class Boundary
	{
		[Token(Token = "0x4000825")]
		private const int BOUNDARY_BUFFER_SIZE = 1024;

		[Token(Token = "0x4000826")]
		private const float DEC_TOLERANCE = 0.9f;

		[Token(Token = "0x4000827")]
		private const float MIN_RA_STEP_FOR_CURVE = 1f;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int miPointCount;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Vector2[] mvBoundary;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool mbCrossesRAZero;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Rect mBoundingRect;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private LineMesh mLineMesh;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector2 svCoordCache;

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Bounds mBounds;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int siBoundaryPointCount;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static Vector3[] svBoundaryBuffer;

		[Token(Token = "0x170001BF")]
		public Mesh mesh
		{
			[Token(Token = "0x6000E00")]
			[Address(RVA = "0x177FC4", Offset = "0x177FC4", VA = "0x177FC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C0")]
		public Bounds bounds
		{
			[Token(Token = "0x6000E03")]
			[Address(RVA = "0x178300", Offset = "0x178300", VA = "0x178300")]
			get
			{
				return default(Bounds);
			}
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x176EDC", Offset = "0x176EDC", VA = "0x176EDC")]
		public Boundary(float boundaryDistance, int pointCount, BinaryReader reader)
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x177D68", Offset = "0x177D68", VA = "0x177D68")]
		private static Vector3 addVertexToBoundary(Vector2 v, float radius)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x177AEC", Offset = "0x177AEC", VA = "0x177AEC")]
		private static void createCurvedPoints(Vector2 boundaryPoint, float radius)
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0x177FEC", Offset = "0x177FEC", VA = "0x177FEC")]
		public bool IntersectsCoordinate(Spherical spherical)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0x178120", Offset = "0x178120", VA = "0x178120")]
		public bool IntersectsRay(Ray ray)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000209")]
	public class ConstellationImage
	{
		[Token(Token = "0x4000831")]
		private const int X_SEGMENTS = 4;

		[Token(Token = "0x4000832")]
		private const int Y_SEGMENTS = 4;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private string msFileName;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Mesh mMesh;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Quaternion mRotation;

		[Token(Token = "0x170001C1")]
		public string fileName
		{
			[Token(Token = "0x6000E06")]
			[Address(RVA = "0x17997C", Offset = "0x17997C", VA = "0x17997C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C2")]
		public Mesh mesh
		{
			[Token(Token = "0x6000E08")]
			[Address(RVA = "0x17AB00", Offset = "0x17AB00", VA = "0x17AB00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C3")]
		public string texturePath
		{
			[Token(Token = "0x6000E09")]
			[Address(RVA = "0x17AB08", Offset = "0x17AB08", VA = "0x17AB08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C4")]
		public Quaternion rotation
		{
			[Token(Token = "0x6000E0A")]
			[Address(RVA = "0x17ABA4", Offset = "0x17ABA4", VA = "0x17ABA4")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0x17A098", Offset = "0x17A098", VA = "0x17A098")]
		public ConstellationImage(string filename, Vector2 position, float scale, float rotation, float widthFactor = 1f)
		{
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0x17A994", Offset = "0x17A994", VA = "0x17A994")]
		private Vector3 spherize(float x, float y, float z)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200020A")]
	public class ImagesFactory
	{
		[Token(Token = "0x200020B")]
		private struct ImageData
		{
			[Token(Token = "0x4000838")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly string name;

			[Token(Token = "0x4000839")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private readonly string textureName;

			[Token(Token = "0x400083A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly float x;

			[Token(Token = "0x400083B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private readonly float y;

			[Token(Token = "0x400083C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly float scale;

			[Token(Token = "0x400083D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private readonly float rotation;

			[Token(Token = "0x400083E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly float widthFactor;

			[Token(Token = "0x170001C5")]
			public string Name
			{
				[Token(Token = "0x6000E0F")]
				[Address(RVA = "0x18121C", Offset = "0x18121C", VA = "0x18121C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C6")]
			public string TextureName
			{
				[Token(Token = "0x6000E10")]
				[Address(RVA = "0x181224", Offset = "0x181224", VA = "0x181224")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C7")]
			public float X
			{
				[Token(Token = "0x6000E11")]
				[Address(RVA = "0x18122C", Offset = "0x18122C", VA = "0x18122C")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170001C8")]
			public float Y
			{
				[Token(Token = "0x6000E12")]
				[Address(RVA = "0x181234", Offset = "0x181234", VA = "0x181234")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170001C9")]
			public float Scale
			{
				[Token(Token = "0x6000E13")]
				[Address(RVA = "0x18123C", Offset = "0x18123C", VA = "0x18123C")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170001CA")]
			public float Rotation
			{
				[Token(Token = "0x6000E14")]
				[Address(RVA = "0x181244", Offset = "0x181244", VA = "0x181244")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170001CB")]
			public float WidthFactor
			{
				[Token(Token = "0x6000E15")]
				[Address(RVA = "0x18124C", Offset = "0x18124C", VA = "0x18124C")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0x1811F0", Offset = "0x1811F0", VA = "0x1811F0")]
			public ImageData(string name, string textureName, float x, float y, float scale, float rotation, float widthFactor)
			{
			}
		}

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IList<ImageData> saConstellationImageData;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Dictionary<string, ConstellationImage> maConstellationImages;

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0x17DC4C", Offset = "0x17DC4C", VA = "0x17DC4C")]
		public ImagesFactory()
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x17E0D8", Offset = "0x17E0D8", VA = "0x17E0D8")]
		public ConstellationImage GetConstellationImageForName(string name)
		{
			return null;
		}
	}
	[Token(Token = "0x200020C")]
	public class ConstellationRenderable
	{
		[Token(Token = "0x200020D")]
		private enum State
		{
			[Token(Token = "0x4000857")]
			Appearing,
			[Token(Token = "0x4000858")]
			Idle,
			[Token(Token = "0x4000859")]
			Disappearing,
			[Token(Token = "0x400085A")]
			NeedsDestroying
		}

		[Token(Token = "0x200020E")]
		private struct MaterialWithOpacity
		{
			[Token(Token = "0x400085B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Material mMaterial;

			[Token(Token = "0x400085C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private Color mDefaultColor;

			[Token(Token = "0x170001CD")]
			public Material material
			{
				[Token(Token = "0x6000E1F")]
				[Address(RVA = "0x17BB90", Offset = "0x17BB90", VA = "0x17BB90")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E1D")]
			[Address(RVA = "0x17BB10", Offset = "0x17BB10", VA = "0x17BB10")]
			public MaterialWithOpacity(Material material)
			{
			}

			[Token(Token = "0x6000E1E")]
			[Address(RVA = "0x17BB88", Offset = "0x17BB88", VA = "0x17BB88")]
			public MaterialWithOpacity(Material material, Texture texture)
			{
			}

			[Token(Token = "0x6000E20")]
			[Address(RVA = "0x17BB98", Offset = "0x17BB98", VA = "0x17BB98")]
			private void commonInit(Material material)
			{
			}

			[Token(Token = "0x6000E21")]
			[Address(RVA = "0x17BD54", Offset = "0x17BD54", VA = "0x17BD54")]
			private void setOpacity(float opacity)
			{
			}

			[Token(Token = "0x6000E22")]
			[Address(RVA = "0x17BD5C", Offset = "0x17BD5C", VA = "0x17BD5C")]
			public void Update(float opacity)
			{
			}

			[Token(Token = "0x6000E23")]
			[Address(RVA = "0x17BD64", Offset = "0x17BD64", VA = "0x17BD64")]
			public void Update(float opacity, float aspectRatio)
			{
			}
		}

		[Token(Token = "0x400083F")]
		private const float FADE_DURATION = 1.6f;

		[Token(Token = "0x4000840")]
		private const float CONSTELLATION_IMAGE_FADE_MAX = 10f;

		[Token(Token = "0x4000841")]
		private const float CONSTELLATION_IMAGE_FADE_MIN = 5f;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private GameObject mConstellationGameObject;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private GameObject mAsterismGameObject;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameObject[] maBoundaryGameObjects;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private GameObject mImageGameObject;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject mNameGameObject;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float mfFadeTime;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private State meState;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material sAsterismMaterial;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static Material sBoundaryMaterial;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material sImageMaterial;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static Material sTextMaterial;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Color sTextColor;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Transform sConstellationsTransform;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private MaterialWithOpacity mAsterismMaterial;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MaterialWithOpacity mBoundaryMaterial;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private MaterialWithOpacity mImageMaterial;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material mTextMaterial;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Color mTextColor;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private TextMesh mTextMesh;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 mTextNormal;

		[Token(Token = "0x170001CC")]
		public bool NeedsDestroying
		{
			[Token(Token = "0x6000E1B")]
			[Address(RVA = "0x179404", Offset = "0x179404", VA = "0x179404")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0x17ABB8", Offset = "0x17ABB8", VA = "0x17ABB8")]
		public ConstellationRenderable(Constellation constellation)
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0x17B898", Offset = "0x17B898", VA = "0x17B898")]
		public static void Initialise(Material asterismMaterial, Material boundaryMaterial, Material imageMaterial, Color textColor, Transform constellationsTransform)
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x178C3C", Offset = "0x178C3C", VA = "0x178C3C")]
		public void Update(float deltaTime)
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0x17B9F0", Offset = "0x17B9F0", VA = "0x17B9F0")]
		public void SetToAppear()
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0x17B9FC", Offset = "0x17B9FC", VA = "0x17B9FC")]
		public void SetToDisappear()
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0x179418", Offset = "0x179418", VA = "0x179418")]
		public void Destroy()
		{
		}
	}
	[Token(Token = "0x200020F")]
	public class Constellations : BrowsableContainer
	{
		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public global::Stars.Stars stars;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CameraWrapper cameraWrapper;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Material asterismLinesMaterial;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material boundaryLinesMaterial;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Material imageMaterial;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float boundayLinesDistance;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color textColor;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private List<Constellation> maConstellationsList;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<string, Constellation> maConstellationsDictionary;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Dictionary<uint, Constellation> maConstellationStarDictionary;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Constellation mActiveConstellation;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Constellation mActiveConstellationCache;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Constellations sInstance;

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0x17BD6C", Offset = "0x17BD6C", VA = "0x17BD6C")]
		public Constellations()
		{
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x16A804", Offset = "0x16A804", VA = "0x16A804")]
		public static Constellations GetInstance()
		{
			return null;
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0x17BDF0", Offset = "0x17BDF0", VA = "0x17BDF0")]
		private void createConstellationAsterisms()
		{
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0x17C230", Offset = "0x17C230", VA = "0x17C230")]
		private void createConstellationBoundaries()
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0x17C39C", Offset = "0x17C39C", VA = "0x17C39C")]
		private void createConstellationImages()
		{
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0x17E190", Offset = "0x17E190", VA = "0x17E190")]
		public Constellation GetConstellationFromPosition(Spherical spherical)
		{
			return null;
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0x17E4D4", Offset = "0x17E4D4", VA = "0x17E4D4")]
		private Constellation getConstellationFromRay(Ray ray)
		{
			return null;
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0x178704", Offset = "0x178704", VA = "0x178704")]
		public void AddStarsToConstellation(HashSet<uint> starIDs, Constellation constellation)
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x179FF8", Offset = "0x179FF8", VA = "0x179FF8")]
		public Constellation GetConstellationOfStarWithID(uint id)
		{
			return null;
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x17E690", Offset = "0x17E690", VA = "0x17E690")]
		private void Clear()
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x17E7DC", Offset = "0x17E7DC", VA = "0x17E7DC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x17E918", Offset = "0x17E918", VA = "0x17E918")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x17E91C", Offset = "0x17E91C", VA = "0x17E91C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x17E920", Offset = "0x17E920", VA = "0x17E920")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x17EC2C", Offset = "0x17EC2C", VA = "0x17EC2C", Slot = "4")]
		protected override void buildBrowsableObjectListForClass()
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x17EECC", Offset = "0x17EECC", VA = "0x17EECC", Slot = "5")]
		protected override List<SortableProperties> getSortableProperties()
		{
			return null;
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x17EFA0", Offset = "0x17EFA0", VA = "0x17EFA0", Slot = "6")]
		protected override bool allowFilterInSubheading()
		{
			return default(bool);
		}
	}
}
[Token(Token = "0x2000210")]
public class SpeedStreaks : MonoBehaviour
{
	[Token(Token = "0x400086A")]
	private const float BRIGHTNESS_MIN = 0.1f;

	[Token(Token = "0x400086B")]
	private const float BRIGHTNESS_MAX = 0.45f;

	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public CameraWrapper cameraWrapper;

	[Token(Token = "0x400086D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Material material;

	[Token(Token = "0x400086E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int particleCount;

	[Token(Token = "0x400086F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float volumeRadius;

	[Token(Token = "0x4000870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float starRenderSizeMin;

	[Token(Token = "0x4000871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float starRenderSizeMax;

	[Token(Token = "0x4000872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float speedMultiplier;

	[Token(Token = "0x4000873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maximumSpeed;

	[Token(Token = "0x4000874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float lineStretch;

	[Token(Token = "0x4000875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float lineStretchMax;

	[Token(Token = "0x4000876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private StreakMesh mStreakMesh;

	[Token(Token = "0x4000877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3Double mvOffsetVector;

	[Token(Token = "0x4000878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3Double mvPositionCache;

	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Vector3 delta;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool mbInitialised;

	[Token(Token = "0x6000E36")]
	[Address(RVA = "0xE165F4", Offset = "0xE165F4", VA = "0xE165F4")]
	public SpeedStreaks()
	{
	}

	[Token(Token = "0x6000E37")]
	[Address(RVA = "0xE165FC", Offset = "0xE165FC", VA = "0xE165FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E38")]
	[Address(RVA = "0xE168F0", Offset = "0xE168F0", VA = "0xE168F0")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000211")]
public class SpeedStreaksMeshRenderer : MonoBehaviour
{
	[Token(Token = "0x400087B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Material lineMaterial;

	[Token(Token = "0x400087C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float lineWidth;

	[Token(Token = "0x400087D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 velocityVector;

	[Token(Token = "0x400087E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private StreakMesh mStreakMesh;

	[Token(Token = "0x400087F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int miLineCount;

	[Token(Token = "0x4000880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3[] vertices;

	[Token(Token = "0x6000E39")]
	[Address(RVA = "0xE17194", Offset = "0xE17194", VA = "0xE17194")]
	public SpeedStreaksMeshRenderer()
	{
	}

	[Token(Token = "0x6000E3A")]
	[Address(RVA = "0xE1719C", Offset = "0xE1719C", VA = "0xE1719C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E3B")]
	[Address(RVA = "0xE174E4", Offset = "0xE174E4", VA = "0xE174E4")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000212")]
public class StreakMesh
{
	[Token(Token = "0x2000213")]
	private struct StreakParticle
	{
		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 position;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float brightness;

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0xCF9100", Offset = "0xCF9100", VA = "0xCF9100")]
		public StreakParticle(Vector3 position, float brightness)
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0xCF9114", Offset = "0xCF9114", VA = "0xCF9114")]
		public Vector3[] ToQuad()
		{
			return null;
		}
	}

	[Token(Token = "0x4000881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private Mesh mMesh;

	[Token(Token = "0x4000882")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private List<StreakParticle> maParticles;

	[Token(Token = "0x4000883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool mbIsDynamic;

	[Token(Token = "0x4000884")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private bool mbArraysBuilt;

	[Token(Token = "0x4000885")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Vector3[] maVertices;

	[Token(Token = "0x4000886")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Color[] maColors;

	[Token(Token = "0x4000887")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int[] maTriangles;

	[Token(Token = "0x4000888")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector2[] maUVs;

	[Token(Token = "0x4000889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector4[] maAux;

	[Token(Token = "0x400088A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector2[] quadDirections;

	[Token(Token = "0x170001CE")]
	public Mesh mesh
	{
		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0xCF8198", Offset = "0xCF8198", VA = "0xCF8198")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000E3C")]
	[Address(RVA = "0xCF7F4C", Offset = "0xCF7F4C", VA = "0xCF7F4C")]
	public StreakMesh(int lineCount = 0, bool isDynamic = false)
	{
	}

	[Token(Token = "0x6000E3E")]
	[Address(RVA = "0xCF81A0", Offset = "0xCF81A0", VA = "0xCF81A0")]
	public void AddParticle(Vector3 position, float brightness)
	{
	}

	[Token(Token = "0x6000E3F")]
	[Address(RVA = "0xCF824C", Offset = "0xCF824C", VA = "0xCF824C")]
	public void BuildMesh()
	{
	}

	[Token(Token = "0x6000E40")]
	[Address(RVA = "0xCF9024", Offset = "0xCF9024", VA = "0xCF9024")]
	public void Clear()
	{
	}
}
[Token(Token = "0x2000214")]
public class GridSphere : StaticAccess<GridSphere>
{
	[Token(Token = "0x400088D")]
	private const int DEC_LINES_COUNT = 17;

	[Token(Token = "0x400088E")]
	private const int DEC_LINE_SEGMENTS = 144;

	[Token(Token = "0x400088F")]
	private const int RA_LINE_COUNT = 36;

	[Token(Token = "0x4000890")]
	private const int RA_LINE_SEGMENTS = 34;

	[Token(Token = "0x4000891")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float radius;

	[Token(Token = "0x4000892")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lineWidth;

	[Token(Token = "0x4000893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LineMesh sLineMesh;

	[Token(Token = "0x4000894")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Material mGridSphereMaterial;

	[Token(Token = "0x6000E43")]
	[Address(RVA = "0xC3985C", Offset = "0xC3985C", VA = "0xC3985C")]
	public GridSphere()
	{
	}

	[Token(Token = "0x6000E44")]
	[Address(RVA = "0xC398D4", Offset = "0xC398D4", VA = "0xC398D4")]
	private new void Start()
	{
	}

	[Token(Token = "0x6000E45")]
	[Address(RVA = "0xC3AF5C", Offset = "0xC3AF5C", VA = "0xC3AF5C")]
	private new void Update()
	{
	}
}
[Token(Token = "0x2000215")]
public interface ICameraTrackable
{
	[Token(Token = "0x170001CF")]
	Vector3 positionToTrack
	{
		[Token(Token = "0x6000E47")]
		get;
	}

	[Token(Token = "0x170001D0")]
	float fovToFrame
	{
		[Token(Token = "0x6000E48")]
		get;
	}
}
[Token(Token = "0x2000216")]
public interface IFindableObject
{
	[Token(Token = "0x170001D1")]
	Sprite icon
	{
		[Token(Token = "0x6000E49")]
		get;
	}

	[Token(Token = "0x170001D2")]
	BrowsableContainer.BrowseIconSize iconSize
	{
		[Token(Token = "0x6000E4A")]
		get;
	}

	[Token(Token = "0x170001D3")]
	string headingText
	{
		[Token(Token = "0x6000E4B")]
		get;
	}

	[Token(Token = "0x170001D4")]
	string subHeadingText
	{
		[Token(Token = "0x6000E4C")]
		get;
	}

	[Token(Token = "0x170001D5")]
	string expandableText
	{
		[Token(Token = "0x6000E4D")]
		get;
	}

	[Token(Token = "0x170001D6")]
	Sprite expandableIcon
	{
		[Token(Token = "0x6000E4E")]
		get;
	}

	[Token(Token = "0x170001D7")]
	List<IFindableObject> findableChildren
	{
		[Token(Token = "0x6000E4F")]
		get;
	}

	[Token(Token = "0x170001D8")]
	bool isExpandable
	{
		[Token(Token = "0x6000E50")]
		get;
	}

	[Token(Token = "0x170001D9")]
	bool isEnabled
	{
		[Token(Token = "0x6000E51")]
		get;
	}

	[Token(Token = "0x170001DA")]
	bool isBrowseExpanded
	{
		[Token(Token = "0x6000E54")]
		get;
	}

	[Token(Token = "0x6000E52")]
	void OnBrowseTap();

	[Token(Token = "0x6000E53")]
	void OnExpandTap();

	[Token(Token = "0x6000E55")]
	int CompareDistance(IFindableObject comparer);

	[Token(Token = "0x6000E56")]
	int CompareName(IFindableObject comparer);

	[Token(Token = "0x6000E57")]
	int CompareSize(IFindableObject comparer);

	[Token(Token = "0x6000E58")]
	int CompareBrightness(IFindableObject comparer);

	[Token(Token = "0x6000E59")]
	int CompareDate(IFindableObject comparer);
}
[Token(Token = "0x2000217")]
public interface ISelectableCelestialObject
{
	[Token(Token = "0x6000E5A")]
	double GetDistanceFromCurrentPlanet(out Distance.Units distanceUnits);

	[Token(Token = "0x6000E5B")]
	float GetApparentMagnitude();

	[Token(Token = "0x6000E5C")]
	float GetAbsoluteMagnitude();

	[Token(Token = "0x6000E5D")]
	string GetConstellationName();

	[Token(Token = "0x6000E5E")]
	float GetRA();

	[Token(Token = "0x6000E5F")]
	float GetDEC();

	[Token(Token = "0x6000E60")]
	float GetAltitude();

	[Token(Token = "0x6000E61")]
	float GetAzimuth();
}
[Token(Token = "0x2000218")]
public interface ISelectableCity
{
	[Token(Token = "0x6000E62")]
	List<InformationElement.Types> InformationDisplayable();

	[Token(Token = "0x6000E63")]
	string GetCountryName();

	[Token(Token = "0x6000E64")]
	DateTime GetLocalTime();

	[Token(Token = "0x6000E65")]
	uint GetPopulation();
}
[Token(Token = "0x2000219")]
public interface ISelectableGeofeature
{
	[Token(Token = "0x6000E66")]
	List<InformationElement.Types> InformationDisplayable();

	[Token(Token = "0x6000E67")]
	string GetFeatureName();

	[Token(Token = "0x6000E68")]
	float GetDiameter();

	[Token(Token = "0x6000E69")]
	float GetElevation();
}
[Token(Token = "0x200021A")]
public interface ISelectableLandingSite
{
	[Token(Token = "0x6000E6A")]
	string GetCountryOfOrigin();

	[Token(Token = "0x6000E6B")]
	DateTime GetLaunchDate();

	[Token(Token = "0x6000E6C")]
	DateTime GetLandingDate();
}
[Token(Token = "0x200021B")]
public interface ISelectableLandingSiteManned
{
	[Token(Token = "0x6000E6D")]
	TimeSpan GetMissionDuration();

	[Token(Token = "0x6000E6E")]
	string GetCrewNames();
}
[Token(Token = "0x200021C")]
public interface ISelectableMessier
{
	[Token(Token = "0x6000E6F")]
	byte GetMessierNumber();

	[Token(Token = "0x6000E70")]
	ushort GetNGCnumber();

	[Token(Token = "0x6000E71")]
	float GetDiameter(out Distance.Units distanceUnits);
}
[Token(Token = "0x200021D")]
public interface ISelectableMeteorite
{
	[Token(Token = "0x6000E72")]
	string GetActiveDateRange();

	[Token(Token = "0x6000E73")]
	string GetPeakDate();

	[Token(Token = "0x6000E74")]
	byte GetSpeedKMS();

	[Token(Token = "0x6000E75")]
	byte GetHourlyRate();

	[Token(Token = "0x6000E76")]
	string GetIntensity();
}
[Token(Token = "0x200021E")]
public enum SelectableObjectActions
{
	[Token(Token = "0x4000896")]
	None,
	[Token(Token = "0x4000897")]
	TravelTo,
	[Token(Token = "0x4000898")]
	TravelBack,
	[Token(Token = "0x4000899")]
	LookAt,
	[Token(Token = "0x400089A")]
	VRMenu,
	[Token(Token = "0x400089B")]
	DataView
}
[Token(Token = "0x200021F")]
public enum BodyTypes
{
	[Token(Token = "0x400089D")]
	Rocky,
	[Token(Token = "0x400089E")]
	GasGiant,
	[Token(Token = "0x400089F")]
	Moon,
	[Token(Token = "0x40008A0")]
	Dwarf,
	[Token(Token = "0x40008A1")]
	Asteroid,
	[Token(Token = "0x40008A2")]
	Centaur,
	[Token(Token = "0x40008A3")]
	KBO,
	[Token(Token = "0x40008A4")]
	Star,
	[Token(Token = "0x40008A5")]
	Satellite,
	[Token(Token = "0x40008A6")]
	Comet,
	[Token(Token = "0x40008A7")]
	TNO,
	[Token(Token = "0x40008A8")]
	JupiterTrojan,
	[Token(Token = "0x40008A9")]
	SurfaceDetail,
	[Token(Token = "0x40008AA")]
	MessierObject,
	[Token(Token = "0x40008AB")]
	MeteorShower
}
[Token(Token = "0x2000220")]
public interface ISelectableObject
{
	[Token(Token = "0x6000E77")]
	SelectableObjectActions GetTapAction();

	[Token(Token = "0x6000E78")]
	void OnTap();

	[Token(Token = "0x6000E79")]
	List<InformationElement.Types> InformationDisplayable();

	[Token(Token = "0x6000E7A")]
	void UpdateInformation();

	[Token(Token = "0x6000E7B")]
	string GetBodyTypeString();

	[Token(Token = "0x6000E7C")]
	BodyTypes GetBodyType();
}
[Token(Token = "0x2000221")]
public interface ISelectablePlanet
{
	[Token(Token = "0x6000E7D")]
	ulong GetPopulation(double jd);

	[Token(Token = "0x6000E7E")]
	string GetParentName();

	[Token(Token = "0x6000E7F")]
	double GetDistanceFromParent(out Distance.Units distanceUnits);

	[Token(Token = "0x6000E80")]
	ushort GetSatelliteCount();

	[Token(Token = "0x6000E81")]
	ushort GetOrderByTypeInSystem();

	[Token(Token = "0x6000E82")]
	double GetOrbitalPeriodDays(double jd = 2451545.0);

	[Token(Token = "0x6000E83")]
	float GetRotationPeriodDays();

	[Token(Token = "0x6000E84")]
	Composition GetAtmosphericComposition();

	[Token(Token = "0x6000E85")]
	float GetRadius(out Distance.Units distanceUnits);

	[Token(Token = "0x6000E86")]
	float GetAxialTilt();
}
[Token(Token = "0x2000222")]
public interface ISelectableStar
{
	[Token(Token = "0x6000E87")]
	string GetBayerFlamsteedName();

	[Token(Token = "0x6000E88")]
	bool GetIsFlamsteedName();

	[Token(Token = "0x6000E89")]
	uint GetHip();

	[Token(Token = "0x6000E8A")]
	uint GetHD();

	[Token(Token = "0x6000E8B")]
	ushort GetHR();

	[Token(Token = "0x6000E8C")]
	string GetGliese();
}
[Token(Token = "0x2000223")]
public class LensFlareController : MonoBehaviour
{
	[Token(Token = "0x40008AC")]
	private const float MINIMUM_DOT_THRESHOLD = 0.95f;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public CameraWrapper cameraWrapper;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject lensFlareStripe;

	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private LensFlare mLensFlare;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material mLensFlareStripeMaterial;

	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 mvLocalPosition;

	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Bounds mSunBounds;

	[Token(Token = "0x40008B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool mbIsInFrustum;

	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool mbStripeEnabled;

	[Token(Token = "0x6000E8D")]
	[Address(RVA = "0xC4E064", Offset = "0xC4E064", VA = "0xC4E064")]
	public LensFlareController()
	{
	}

	[Token(Token = "0x6000E8E")]
	[Address(RVA = "0xC4CF10", Offset = "0xC4CF10", VA = "0xC4CF10")]
	public static void LensFlareStripeEnable(bool lbEnabled)
	{
	}

	[Token(Token = "0x6000E8F")]
	[Address(RVA = "0xC4E06C", Offset = "0xC4E06C", VA = "0xC4E06C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E90")]
	[Address(RVA = "0xC4E180", Offset = "0xC4E180", VA = "0xC4E180")]
	public void SetProperties(Vector3 localPosition, Bounds bounds, bool isInFrustum)
	{
	}

	[Token(Token = "0x6000E91")]
	[Address(RVA = "0xC4E1B4", Offset = "0xC4E1B4", VA = "0xC4E1B4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E92")]
	[Address(RVA = "0xC4E670", Offset = "0xC4E670", VA = "0xC4E670")]
	private void updateLensFlareStripe(Transform cameraTransform, Bounds sunBounds, float dot, float distance, bool sunIsOccluded)
	{
	}
}
namespace Messiers
{
	[Token(Token = "0x2000224")]
	public class Messier : CelestialObject, IFindableObject, ISelectableObject, ISelectableCelestialObject, ISelectableMessier, ICameraTrackable
	{
		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private MessierData mData;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector2 mvScaleAdjustment;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private MessierCluster mMessierCluster;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Quaternion sqRotationTemp;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion mqRotation;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private readonly Vector3 mvPosition;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static float sfFaintestMagnitude;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static float sfBrightestMagnitude;

		[Token(Token = "0x40008BD")]
		private const string CONSTELLATION_ICONS_PATH = "Textures/UI/Browse/messiersPage";

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Sprite[] saIconPage;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static string[] saBodyTypes;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool mbSphericalCoordinatesSet;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Spherical mSphericalCoordinates;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private Horizontal mHorizontalCoordinates;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Range TRACKING_FOV;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Range TRACKING_FOV_MULTIPLIER;

		[Token(Token = "0x170001DB")]
		public static Range appMagRange
		{
			[Token(Token = "0x6000E95")]
			[Address(RVA = "0xC5D360", Offset = "0xC5D360", VA = "0xC5D360")]
			get
			{
				return default(Range);
			}
		}

		[Token(Token = "0x170001DC")]
		public float diameterLY
		{
			[Token(Token = "0x6000E98")]
			[Address(RVA = "0xC5D40C", Offset = "0xC5D40C", VA = "0xC5D40C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001DD")]
		public float distanceLY
		{
			[Token(Token = "0x6000E99")]
			[Address(RVA = "0xC5D414", Offset = "0xC5D414", VA = "0xC5D414")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001DE")]
		public int number
		{
			[Token(Token = "0x6000E9A")]
			[Address(RVA = "0xC5D41C", Offset = "0xC5D41C", VA = "0xC5D41C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001DF")]
		public Vector2 positionAdjustment
		{
			[Token(Token = "0x6000E9B")]
			[Address(RVA = "0xC5D424", Offset = "0xC5D424", VA = "0xC5D424")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000E9C")]
			[Address(RVA = "0xC5D438", Offset = "0xC5D438", VA = "0xC5D438")]
			set
			{
			}
		}

		[Token(Token = "0x170001E0")]
		public float imageRotation
		{
			[Token(Token = "0x6000E9D")]
			[Address(RVA = "0xC5D668", Offset = "0xC5D668", VA = "0xC5D668")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E9E")]
			[Address(RVA = "0xC5D670", Offset = "0xC5D670", VA = "0xC5D670")]
			set
			{
			}
		}

		[Token(Token = "0x170001E1")]
		public Vector2 scaleAdjustment
		{
			[Token(Token = "0x6000EA0")]
			[Address(RVA = "0xC5D678", Offset = "0xC5D678", VA = "0xC5D678")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x170001E2")]
		public Quaternion rotation
		{
			[Token(Token = "0x6000EA1")]
			[Address(RVA = "0xC5D6C8", Offset = "0xC5D6C8", VA = "0xC5D6C8")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x170001E3")]
		public override float selectionPriority
		{
			[Token(Token = "0x6000EA4")]
			[Address(RVA = "0xC5D938", Offset = "0xC5D938", VA = "0xC5D938", Slot = "7")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E4")]
		public bool isBrowseExpanded
		{
			[Token(Token = "0x6000EA5")]
			[Address(RVA = "0xC5D940", Offset = "0xC5D940", VA = "0xC5D940", Slot = "19")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001E5")]
		public bool isEnabled
		{
			[Token(Token = "0x6000EA6")]
			[Address(RVA = "0xC5D948", Offset = "0xC5D948", VA = "0xC5D948", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001E6")]
		public Sprite icon
		{
			[Token(Token = "0x6000EA7")]
			[Address(RVA = "0xC5D950", Offset = "0xC5D950", VA = "0xC5D950", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E7")]
		public BrowsableContainer.BrowseIconSize iconSize
		{
			[Token(Token = "0x6000EA8")]
			[Address(RVA = "0xC5DAD0", Offset = "0xC5DAD0", VA = "0xC5DAD0", Slot = "9")]
			get
			{
				return default(BrowsableContainer.BrowseIconSize);
			}
		}

		[Token(Token = "0x170001E8")]
		public Texture zoomedTexture
		{
			[Token(Token = "0x6000EA9")]
			[Address(RVA = "0xC5DAD8", Offset = "0xC5DAD8", VA = "0xC5DAD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E9")]
		public string headingText
		{
			[Token(Token = "0x6000EAA")]
			[Address(RVA = "0xC5DCAC", Offset = "0xC5DCAC", VA = "0xC5DCAC", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EA")]
		public string subHeadingText
		{
			[Token(Token = "0x6000EAB")]
			[Address(RVA = "0xC5DF40", Offset = "0xC5DF40", VA = "0xC5DF40", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EB")]
		public string expandableText
		{
			[Token(Token = "0x6000EAC")]
			[Address(RVA = "0xC5E338", Offset = "0xC5E338", VA = "0xC5E338", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EC")]
		public Sprite expandableIcon
		{
			[Token(Token = "0x6000EAD")]
			[Address(RVA = "0xC5E340", Offset = "0xC5E340", VA = "0xC5E340", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001ED")]
		public List<IFindableObject> findableChildren
		{
			[Token(Token = "0x6000EAE")]
			[Address(RVA = "0xC5E348", Offset = "0xC5E348", VA = "0xC5E348", Slot = "14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EE")]
		public bool isExpandable
		{
			[Token(Token = "0x6000EAF")]
			[Address(RVA = "0xC5E350", Offset = "0xC5E350", VA = "0xC5E350", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001EF")]
		public Vector3 positionToTrack
		{
			[Token(Token = "0x6000EC8")]
			[Address(RVA = "0xC5EF88", Offset = "0xC5EF88", VA = "0xC5EF88", Slot = "42")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001F0")]
		public float fovToFrame
		{
			[Token(Token = "0x6000EC9")]
			[Address(RVA = "0xC5EFA0", Offset = "0xC5EFA0", VA = "0xC5EFA0", Slot = "43")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0xC5CCD0", Offset = "0xC5CCD0", VA = "0xC5CCD0")]
		public Messier(MessierData data)
		{
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0xC5CF70", Offset = "0xC5CF70", VA = "0xC5CF70")]
		private static string getName(byte number)
		{
			return null;
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0xC5D0B0", Offset = "0xC5D0B0", VA = "0xC5D0B0")]
		private static Vector3 calculate3DPositionAndRotation(Spherical sphericalCoordinates, float distance, Vector2 positionAdjustment, float imageRotation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0xC5D444", Offset = "0xC5D444", VA = "0xC5D444")]
		private void rebuildMesh()
		{
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0xC5D6DC", Offset = "0xC5D6DC", VA = "0xC5D6DC")]
		private static Vector3 remapRenderPosition(Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xC5D7B4", Offset = "0xC5D7B4", VA = "0xC5D7B4")]
		public void UpdateRenderPositionAndScale()
		{
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0xC5E358", Offset = "0xC5E358", VA = "0xC5E358", Slot = "17")]
		public void OnBrowseTap()
		{
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0xC5E4DC", Offset = "0xC5E4DC", VA = "0xC5E4DC", Slot = "18")]
		public void OnExpandTap()
		{
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0xC5E4E0", Offset = "0xC5E4E0", VA = "0xC5E4E0", Slot = "21")]
		public int CompareName(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0xC5E654", Offset = "0xC5E654", VA = "0xC5E654", Slot = "20")]
		public int CompareDistance(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0xC5E70C", Offset = "0xC5E70C", VA = "0xC5E70C", Slot = "22")]
		public int CompareSize(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0xC5E7C4", Offset = "0xC5E7C4", VA = "0xC5E7C4", Slot = "23")]
		public int CompareBrightness(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0xC5E87C", Offset = "0xC5E87C", VA = "0xC5E87C", Slot = "24")]
		public int CompareDate(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0xC5E884", Offset = "0xC5E884", VA = "0xC5E884", Slot = "25")]
		public SelectableObjectActions GetTapAction()
		{
			return default(SelectableObjectActions);
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0xC5E914", Offset = "0xC5E914", VA = "0xC5E914", Slot = "26")]
		public void OnTap()
		{
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0xC5E9B8", Offset = "0xC5E9B8", VA = "0xC5E9B8", Slot = "27")]
		public List<InformationElement.Types> InformationDisplayable()
		{
			return null;
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0xC5ECA4", Offset = "0xC5ECA4", VA = "0xC5ECA4", Slot = "28")]
		public void UpdateInformation()
		{
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0xC5E268", Offset = "0xC5E268", VA = "0xC5E268", Slot = "29")]
		public string GetBodyTypeString()
		{
			return null;
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0xC5EDF8", Offset = "0xC5EDF8", VA = "0xC5EDF8", Slot = "30")]
		public BodyTypes GetBodyType()
		{
			return default(BodyTypes);
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xC5EE00", Offset = "0xC5EE00", VA = "0xC5EE00", Slot = "31")]
		public double GetDistanceFromCurrentPlanet(out Distance.Units distanceUnits)
		{
			return default(double);
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xC5E330", Offset = "0xC5E330", VA = "0xC5E330", Slot = "32")]
		public float GetApparentMagnitude()
		{
			return default(float);
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0xC5EE64", Offset = "0xC5EE64", VA = "0xC5EE64", Slot = "33")]
		public float GetAbsoluteMagnitude()
		{
			return default(float);
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0xC5EE6C", Offset = "0xC5EE6C", VA = "0xC5EE6C", Slot = "34")]
		public string GetConstellationName()
		{
			return null;
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0xC5EF38", Offset = "0xC5EF38", VA = "0xC5EF38", Slot = "35")]
		public float GetRA()
		{
			return default(float);
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0xC5EF44", Offset = "0xC5EF44", VA = "0xC5EF44", Slot = "36")]
		public float GetDEC()
		{
			return default(float);
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0xC5EF50", Offset = "0xC5EF50", VA = "0xC5EF50", Slot = "38")]
		public float GetAzimuth()
		{
			return default(float);
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0xC5EF5C", Offset = "0xC5EF5C", VA = "0xC5EF5C", Slot = "37")]
		public float GetAltitude()
		{
			return default(float);
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0xC5EF68", Offset = "0xC5EF68", VA = "0xC5EF68", Slot = "39")]
		public byte GetMessierNumber()
		{
			return default(byte);
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0xC5EF70", Offset = "0xC5EF70", VA = "0xC5EF70", Slot = "40")]
		public ushort GetNGCnumber()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0xC5EF78", Offset = "0xC5EF78", VA = "0xC5EF78", Slot = "41")]
		public float GetDiameter(out Distance.Units distanceUnits)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000225")]
	public class MessierCluster
	{
		[Token(Token = "0x170001F1")]
		public float glowScale
		{
			[Token(Token = "0x6000ECC")]
			[Address(RVA = "0xC5D6C0", Offset = "0xC5D6C0", VA = "0xC5D6C0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0xC5F96C", Offset = "0xC5F96C", VA = "0xC5F96C")]
		public MessierCluster()
		{
		}
	}
	[Token(Token = "0x2000226")]
	public struct MessierData
	{
		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Spherical mPosition;

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly DrawStyle meDrawStyle;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Vector2 mvAdjustment;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private readonly byte miNumber;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		private readonly ushort miNGCnumber;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly float mfDiameterLY;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly float mfDistanceLY;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly float mfAppMagnitude;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private readonly float mfScaleAdjusted;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float mfImageRotation;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private readonly Type meType;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static byte siNumber;

		[Token(Token = "0x170001F2")]
		public Spherical position
		{
			[Token(Token = "0x6000ECE")]
			[Address(RVA = "0xC5FAE4", Offset = "0xC5FAE4", VA = "0xC5FAE4")]
			get
			{
				return default(Spherical);
			}
		}

		[Token(Token = "0x170001F3")]
		public DrawStyle drawStyle
		{
			[Token(Token = "0x6000ECF")]
			[Address(RVA = "0xC5FAF8", Offset = "0xC5FAF8", VA = "0xC5FAF8")]
			get
			{
				return default(DrawStyle);
			}
		}

		[Token(Token = "0x170001F4")]
		public Vector2 adjustment
		{
			[Token(Token = "0x6000ED1")]
			[Address(RVA = "0xC5FB0C", Offset = "0xC5FB0C", VA = "0xC5FB0C")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000ED0")]
			[Address(RVA = "0xC5FB00", Offset = "0xC5FB00", VA = "0xC5FB00")]
			set
			{
			}
		}

		[Token(Token = "0x170001F5")]
		public byte number
		{
			[Token(Token = "0x6000ED2")]
			[Address(RVA = "0xC5FB20", Offset = "0xC5FB20", VA = "0xC5FB20")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x170001F6")]
		public bool isInNGC
		{
			[Token(Token = "0x6000ED3")]
			[Address(RVA = "0xC5FB28", Offset = "0xC5FB28", VA = "0xC5FB28")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F7")]
		public ushort NGCnumber
		{
			[Token(Token = "0x6000ED4")]
			[Address(RVA = "0xC5FB38", Offset = "0xC5FB38", VA = "0xC5FB38")]
			get
			{
				return default(ushort);
			}
		}

		[Token(Token = "0x170001F8")]
		public float diameterLY
		{
			[Token(Token = "0x6000ED5")]
			[Address(RVA = "0xC5FB40", Offset = "0xC5FB40", VA = "0xC5FB40")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001F9")]
		public float distanceLY
		{
			[Token(Token = "0x6000ED6")]
			[Address(RVA = "0xC5FB48", Offset = "0xC5FB48", VA = "0xC5FB48")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001FA")]
		public float apparentMagnitude
		{
			[Token(Token = "0x6000ED7")]
			[Address(RVA = "0xC5FB50", Offset = "0xC5FB50", VA = "0xC5FB50")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001FB")]
		public float scaleAdjusted
		{
			[Token(Token = "0x6000ED8")]
			[Address(RVA = "0xC5FB58", Offset = "0xC5FB58", VA = "0xC5FB58")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001FC")]
		public float imageRotation
		{
			[Token(Token = "0x6000ED9")]
			[Address(RVA = "0xC5FB60", Offset = "0xC5FB60", VA = "0xC5FB60")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EDA")]
			[Address(RVA = "0xC5FB68", Offset = "0xC5FB68", VA = "0xC5FB68")]
			set
			{
			}
		}

		[Token(Token = "0x170001FD")]
		public Type type
		{
			[Token(Token = "0x6000EDB")]
			[Address(RVA = "0xC5FB70", Offset = "0xC5FB70", VA = "0xC5FB70")]
			get
			{
				return default(Type);
			}
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0xC5FA84", Offset = "0xC5FA84", VA = "0xC5FA84")]
		public MessierData(Type type, DrawStyle drawStyle, Spherical position, ushort ngc, float diameterLY, float distanceLY, float appMag, float imageRotation = 0f, [Optional] Vector2 adjustment, float scaleAdjusted = 1f)
		{
		}
	}
	[Token(Token = "0x2000227")]
	public class MessierFactory
	{
		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IList<MessierData> saMessierData;

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0xC5FB7C", Offset = "0xC5FB7C", VA = "0xC5FB7C")]
		public MessierFactory()
		{
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0xC5FB84", Offset = "0xC5FB84", VA = "0xC5FB84")]
		public static List<CelestialObject> BuildMessierObjects()
		{
			return null;
		}
	}
	[Token(Token = "0x2000228")]
	public class Names
	{
		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly HashSet<byte> saMessierNumbersWithNames;

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0xDB6C74", Offset = "0xDB6C74", VA = "0xDB6C74")]
		public Names()
		{
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0xDB6C7C", Offset = "0xDB6C7C", VA = "0xDB6C7C")]
		public static bool Exists(byte messierNumber)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0xDB6DC8", Offset = "0xDB6DC8", VA = "0xDB6DC8")]
		public static string GetNameForMessier(byte messierNumber)
		{
			return null;
		}
	}
	[Token(Token = "0x2000229")]
	public enum Type
	{
		[Token(Token = "0x40008D4")]
		Asterism,
		[Token(Token = "0x40008D5")]
		BarredSpiralGalaxy,
		[Token(Token = "0x40008D6")]
		ClusterHIIRegion,
		[Token(Token = "0x40008D7")]
		ClusterNebula,
		[Token(Token = "0x40008D8")]
		DiffuseNebula,
		[Token(Token = "0x40008D9")]
		DoubleStar,
		[Token(Token = "0x40008DA")]
		DwarfEllipticalGalaxy,
		[Token(Token = "0x40008DB")]
		EllipticalGalaxy,
		[Token(Token = "0x40008DC")]
		GlobularCluster,
		[Token(Token = "0x40008DD")]
		HIIRegion,
		[Token(Token = "0x40008DE")]
		LenticularGalaxy,
		[Token(Token = "0x40008DF")]
		MilkyWayStarCloud,
		[Token(Token = "0x40008E0")]
		OpenCluster,
		[Token(Token = "0x40008E1")]
		PlanetaryNebula,
		[Token(Token = "0x40008E2")]
		SpiralGalaxy,
		[Token(Token = "0x40008E3")]
		SupernovaRemnant
	}
	[Token(Token = "0x200022A")]
	public enum DrawStyle
	{
		[Token(Token = "0x40008E5")]
		ImageUnique = 1,
		[Token(Token = "0x40008E6")]
		ImageGeneric = 2,
		[Token(Token = "0x40008E7")]
		OpenCluster = 4,
		[Token(Token = "0x40008E8")]
		GlobularCluster = 8
	}
	[Token(Token = "0x200022B")]
	public class Messiers : BrowsableContainer
	{
		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Material messiersSheetMaterial;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<CelestialObject> maMessierObjects;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private MessiersRenderable mMessiersRenderable;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Messiers mInstance;

		[Token(Token = "0x170001FE")]
		public List<CelestialObject> messierObjects
		{
			[Token(Token = "0x6000EE5")]
			[Address(RVA = "0xDB53A4", Offset = "0xDB53A4", VA = "0xDB53A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0xDB5320", Offset = "0xDB5320", VA = "0xDB5320")]
		public Messiers()
		{
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0xDB53AC", Offset = "0xDB53AC", VA = "0xDB53AC")]
		public static Messiers GetInstance()
		{
			return null;
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0xDB5438", Offset = "0xDB5438", VA = "0xDB5438")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0xDB567C", Offset = "0xDB567C", VA = "0xDB567C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0xDB574C", Offset = "0xDB574C", VA = "0xDB574C")]
		public void SetOverallBrightness(float lfDimFactor)
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0xDB57CC", Offset = "0xDB57CC", VA = "0xDB57CC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0xDB589C", Offset = "0xDB589C", VA = "0xDB589C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0xDB5B88", Offset = "0xDB5B88", VA = "0xDB5B88")]
		public Messier GetMessier(int i)
		{
			return null;
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0xDB550C", Offset = "0xDB550C", VA = "0xDB550C")]
		public void BuildMesh()
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0xDB5DE4", Offset = "0xDB5DE4", VA = "0xDB5DE4", Slot = "4")]
		protected override void buildBrowsableObjectListForClass()
		{
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0xDB5FA8", Offset = "0xDB5FA8", VA = "0xDB5FA8", Slot = "5")]
		protected override List<SortableProperties> getSortableProperties()
		{
			return null;
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0xDB6070", Offset = "0xDB6070", VA = "0xDB6070", Slot = "6")]
		protected override bool allowFilterInSubheading()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200022C")]
	public class MessiersMesh : MeshBuilder
	{
		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0xDB607C", Offset = "0xDB607C", VA = "0xDB607C")]
		public MessiersMesh(List<CelestialObject> messierObjects)
		{
		}
	}
	[Token(Token = "0x200022D")]
	public class MessiersRenderable : MonoBehaviour
	{
		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Material mMessierSheetMaterial;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MessiersMesh mMessiersMesh;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private HDRProperties mHDRProperties;

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0xDB6A88", Offset = "0xDB6A88", VA = "0xDB6A88")]
		public MessiersRenderable()
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0xDB6A90", Offset = "0xDB6A90", VA = "0xDB6A90")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0xDB5778", Offset = "0xDB5778", VA = "0xDB5778")]
		public void SetBrightness(float lfMax)
		{
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0xDB6BC0", Offset = "0xDB6BC0", VA = "0xDB6BC0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0xDB5C90", Offset = "0xDB5C90", VA = "0xDB5C90")]
		public void BuildMesh()
		{
		}
	}
}
namespace Meteorites
{
	[Token(Token = "0x200022E")]
	public class Meteorite : CelestialObject, IFindableObject, ISelectableObject, ISelectableCelestialObject, ISelectableMeteorite, ICameraTrackable
	{
		[Token(Token = "0x40008F0")]
		private const float BOUNDING_BOX_DISTANCE = 100f;

		[Token(Token = "0x40008F1")]
		private const float BOUNDING_BOX_SIZE = 10f;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int siZHRmin;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int siZHRmax;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Data mData;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private JulianDate mPeakJD;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float mfActivityMultiplier;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool mbHasBeenCalculated;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private int miYearCache;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RangeInt mLifeTimeYears;

		[Token(Token = "0x40008FA")]
		private const string METEORITES_FAINT_ICON_PATH = "Textures/UI/Browse/meteorites_01_thm";

		[Token(Token = "0x40008FB")]
		private const string METEORITES_MEDIUM_ICON_PATH = "Textures/UI/Browse/meteorites_02_thm";

		[Token(Token = "0x40008FC")]
		private const string METEORITES_BRIGHT_ICON_PATH = "Textures/UI/Browse/meteorites_03_thm";

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Sprite[] sIcons;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static string[] saIntensities;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Horizontal mHorizontalCoordinates;

		[Token(Token = "0x170001FF")]
		public float activityMultiplier
		{
			[Token(Token = "0x6000EF9")]
			[Address(RVA = "0xDB822C", Offset = "0xDB822C", VA = "0xDB822C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000200")]
		public bool activeOverYearEnd
		{
			[Token(Token = "0x6000EFB")]
			[Address(RVA = "0xDB8598", Offset = "0xDB8598", VA = "0xDB8598")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000201")]
		public bool isActiveNow
		{
			[Token(Token = "0x6000EFC")]
			[Address(RVA = "0xDB85D4", Offset = "0xDB85D4", VA = "0xDB85D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000202")]
		public override float selectionPriority
		{
			[Token(Token = "0x6000EFD")]
			[Address(RVA = "0xDB8678", Offset = "0xDB8678", VA = "0xDB8678", Slot = "7")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000203")]
		public bool isBrowseExpanded
		{
			[Token(Token = "0x6000EFE")]
			[Address(RVA = "0xDB8680", Offset = "0xDB8680", VA = "0xDB8680", Slot = "19")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000204")]
		public bool isEnabled
		{
			[Token(Token = "0x6000EFF")]
			[Address(RVA = "0xDB8688", Offset = "0xDB8688", VA = "0xDB8688", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000205")]
		public Sprite icon
		{
			[Token(Token = "0x6000F00")]
			[Address(RVA = "0xDB868C", Offset = "0xDB868C", VA = "0xDB868C", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000206")]
		public BrowsableContainer.BrowseIconSize iconSize
		{
			[Token(Token = "0x6000F01")]
			[Address(RVA = "0xDB89B8", Offset = "0xDB89B8", VA = "0xDB89B8", Slot = "9")]
			get
			{
				return default(BrowsableContainer.BrowseIconSize);
			}
		}

		[Token(Token = "0x17000207")]
		public string headingText
		{
			[Token(Token = "0x6000F02")]
			[Address(RVA = "0xDB89C0", Offset = "0xDB89C0", VA = "0xDB89C0", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000208")]
		public string subHeadingText
		{
			[Token(Token = "0x6000F03")]
			[Address(RVA = "0xDB8AD8", Offset = "0xDB8AD8", VA = "0xDB8AD8", Slot = "11")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000209")]
		public string expandableText
		{
			[Token(Token = "0x6000F04")]
			[Address(RVA = "0xDB8DB8", Offset = "0xDB8DB8", VA = "0xDB8DB8", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020A")]
		public Sprite expandableIcon
		{
			[Token(Token = "0x6000F05")]
			[Address(RVA = "0xDB8DC0", Offset = "0xDB8DC0", VA = "0xDB8DC0", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020B")]
		public List<IFindableObject> findableChildren
		{
			[Token(Token = "0x6000F06")]
			[Address(RVA = "0xDB8DC8", Offset = "0xDB8DC8", VA = "0xDB8DC8", Slot = "14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020C")]
		public bool isExpandable
		{
			[Token(Token = "0x6000F07")]
			[Address(RVA = "0xDB8DD0", Offset = "0xDB8DD0", VA = "0xDB8DD0", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700020D")]
		public Vector3 positionToTrack
		{
			[Token(Token = "0x6000F22")]
			[Address(RVA = "0xDB9980", Offset = "0xDB9980", VA = "0xDB9980", Slot = "44")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700020E")]
		public float fovToFrame
		{
			[Token(Token = "0x6000F23")]
			[Address(RVA = "0xDB9998", Offset = "0xDB9998", VA = "0xDB9998", Slot = "45")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0xDB7F9C", Offset = "0xDB7F9C", VA = "0xDB7F9C")]
		public Meteorite(Data data)
		{
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0xDB8234", Offset = "0xDB8234", VA = "0xDB8234")]
		public void Update()
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xDB8DD8", Offset = "0xDB8DD8", VA = "0xDB8DD8", Slot = "17")]
		public void OnBrowseTap()
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0xDB8F5C", Offset = "0xDB8F5C", VA = "0xDB8F5C", Slot = "18")]
		public void OnExpandTap()
		{
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xDB8F60", Offset = "0xDB8F60", VA = "0xDB8F60", Slot = "21")]
		public int CompareName(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0xDB9060", Offset = "0xDB9060", VA = "0xDB9060", Slot = "20")]
		public int CompareDistance(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xDB9068", Offset = "0xDB9068", VA = "0xDB9068", Slot = "22")]
		public int CompareSize(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xDB9070", Offset = "0xDB9070", VA = "0xDB9070", Slot = "23")]
		public int CompareBrightness(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xDB9078", Offset = "0xDB9078", VA = "0xDB9078", Slot = "24")]
		public int CompareDate(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xDB9134", Offset = "0xDB9134", VA = "0xDB9134", Slot = "25")]
		public SelectableObjectActions GetTapAction()
		{
			return default(SelectableObjectActions);
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xDB91C4", Offset = "0xDB91C4", VA = "0xDB91C4", Slot = "26")]
		public void OnTap()
		{
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0xDB9268", Offset = "0xDB9268", VA = "0xDB9268", Slot = "27")]
		public List<InformationElement.Types> InformationDisplayable()
		{
			return null;
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0xDB9490", Offset = "0xDB9490", VA = "0xDB9490", Slot = "28")]
		public void UpdateInformation()
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0xDB9598", Offset = "0xDB9598", VA = "0xDB9598", Slot = "29")]
		public string GetBodyTypeString()
		{
			return null;
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0xDB9600", Offset = "0xDB9600", VA = "0xDB9600", Slot = "30")]
		public BodyTypes GetBodyType()
		{
			return default(BodyTypes);
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0xDB8B50", Offset = "0xDB8B50", VA = "0xDB8B50", Slot = "39")]
		public string GetActiveDateRange()
		{
			return null;
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0xDB9608", Offset = "0xDB9608", VA = "0xDB9608", Slot = "40")]
		public string GetPeakDate()
		{
			return null;
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0xDB9728", Offset = "0xDB9728", VA = "0xDB9728", Slot = "41")]
		public byte GetSpeedKMS()
		{
			return default(byte);
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0xDB9730", Offset = "0xDB9730", VA = "0xDB9730", Slot = "42")]
		public byte GetHourlyRate()
		{
			return default(byte);
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0xDB9738", Offset = "0xDB9738", VA = "0xDB9738", Slot = "43")]
		public string GetIntensity()
		{
			return null;
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0xDB9808", Offset = "0xDB9808", VA = "0xDB9808", Slot = "34")]
		public string GetConstellationName()
		{
			return null;
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0xDB98D4", Offset = "0xDB98D4", VA = "0xDB98D4", Slot = "35")]
		public float GetRA()
		{
			return default(float);
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0xDB9904", Offset = "0xDB9904", VA = "0xDB9904", Slot = "36")]
		public float GetDEC()
		{
			return default(float);
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0xDB9934", Offset = "0xDB9934", VA = "0xDB9934", Slot = "38")]
		public float GetAzimuth()
		{
			return default(float);
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0xDB9940", Offset = "0xDB9940", VA = "0xDB9940", Slot = "37")]
		public float GetAltitude()
		{
			return default(float);
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0xDB9950", Offset = "0xDB9950", VA = "0xDB9950", Slot = "31")]
		public double GetDistanceFromCurrentPlanet(out Distance.Units distanceUnits)
		{
			return default(double);
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0xDB9970", Offset = "0xDB9970", VA = "0xDB9970", Slot = "32")]
		public float GetApparentMagnitude()
		{
			return default(float);
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xDB9978", Offset = "0xDB9978", VA = "0xDB9978", Slot = "33")]
		public float GetAbsoluteMagnitude()
		{
			return default(float);
		}
	}
	[Token(Token = "0x200022F")]
	public class Meteorites : BrowsableContainer
	{
		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public GameObject meteoriteIconPrefab;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject meteorShowerPrefab;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private List<Meteorite> maMeteoritesList;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<CelestialObject> maMeteoritesActiveList;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Meteorites sInstance;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private MeteoritesRenderables mMeteoritesRenderables;

		[Token(Token = "0x1700020F")]
		public List<CelestialObject> activeMeteorites
		{
			[Token(Token = "0x6000F2B")]
			[Address(RVA = "0xDBB128", Offset = "0xDBB128", VA = "0xDBB128")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0xDB9B9C", Offset = "0xDB9B9C", VA = "0xDB9B9C")]
		public Meteorites()
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0xDB9C20", Offset = "0xDB9C20", VA = "0xDB9C20")]
		public static Meteorites GetInstance()
		{
			return null;
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0xDB9C84", Offset = "0xDB9C84", VA = "0xDB9C84")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0xDBA308", Offset = "0xDBA308", VA = "0xDBA308")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0xDBA478", Offset = "0xDBA478", VA = "0xDBA478")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0xDBA6E0", Offset = "0xDBA6E0", VA = "0xDBA6E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0xDBB130", Offset = "0xDBB130", VA = "0xDBB130", Slot = "4")]
		protected override void buildBrowsableObjectListForClass()
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0xDBB264", Offset = "0xDBB264", VA = "0xDBB264", Slot = "5")]
		protected override List<SortableProperties> getSortableProperties()
		{
			return null;
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0xDBB358", Offset = "0xDBB358", VA = "0xDBB358", Slot = "6")]
		protected override bool allowFilterInSubheading()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000230")]
	public enum Intensity
	{
		[Token(Token = "0x4000907")]
		Faint,
		[Token(Token = "0x4000908")]
		Medium,
		[Token(Token = "0x4000909")]
		Bright
	}
	[Token(Token = "0x2000231")]
	public struct Data
	{
		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly string msName;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private readonly float mfSolarLongitude;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly byte miMonth;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private readonly float mfDaysIncrease;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly float mfDaysDecline;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private readonly Spherical mPosition;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly byte miSpeedKms;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private readonly byte miZhr;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Intensity meIntensity;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private readonly bool mbIsInNextYear;

		[Token(Token = "0x17000210")]
		public string name
		{
			[Token(Token = "0x6000F30")]
			[Address(RVA = "0xDB7F40", Offset = "0xDB7F40", VA = "0xDB7F40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000211")]
		public float solarLongitude
		{
			[Token(Token = "0x6000F31")]
			[Address(RVA = "0xDB7F48", Offset = "0xDB7F48", VA = "0xDB7F48")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000212")]
		public byte month
		{
			[Token(Token = "0x6000F32")]
			[Address(RVA = "0xDB7F50", Offset = "0xDB7F50", VA = "0xDB7F50")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x17000213")]
		public float daysIncrease
		{
			[Token(Token = "0x6000F33")]
			[Address(RVA = "0xDB7F58", Offset = "0xDB7F58", VA = "0xDB7F58")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000214")]
		public float daysDecline
		{
			[Token(Token = "0x6000F34")]
			[Address(RVA = "0xDB7F60", Offset = "0xDB7F60", VA = "0xDB7F60")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000215")]
		public Spherical position
		{
			[Token(Token = "0x6000F35")]
			[Address(RVA = "0xDB7F68", Offset = "0xDB7F68", VA = "0xDB7F68")]
			get
			{
				return default(Spherical);
			}
		}

		[Token(Token = "0x17000216")]
		public byte speedKms
		{
			[Token(Token = "0x6000F36")]
			[Address(RVA = "0xDB7F7C", Offset = "0xDB7F7C", VA = "0xDB7F7C")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x17000217")]
		public byte zhr
		{
			[Token(Token = "0x6000F37")]
			[Address(RVA = "0xDB7F84", Offset = "0xDB7F84", VA = "0xDB7F84")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x17000218")]
		public Intensity intensity
		{
			[Token(Token = "0x6000F38")]
			[Address(RVA = "0xDB7F8C", Offset = "0xDB7F8C", VA = "0xDB7F8C")]
			get
			{
				return default(Intensity);
			}
		}

		[Token(Token = "0x17000219")]
		public bool isInNextYear
		{
			[Token(Token = "0x6000F39")]
			[Address(RVA = "0xDB7F94", Offset = "0xDB7F94", VA = "0xDB7F94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0xDB7ECC", Offset = "0xDB7ECC", VA = "0xDB7ECC")]
		public Data(string name, float solarLongitude, byte month, float daysIncrease, float daysDecline, HMS ra, float dec, byte speedKms, byte zhr, Intensity intensity, bool isInNextYear)
		{
		}
	}
	[Token(Token = "0x2000232")]
	public class MeteoritesData
	{
		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IList<Data> saMeteoritesData;

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0xDBB360", Offset = "0xDBB360", VA = "0xDBB360")]
		public MeteoritesData()
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0xDB9DD8", Offset = "0xDB9DD8", VA = "0xDB9DD8")]
		public static List<Meteorite> BuildMeteorites()
		{
			return null;
		}
	}
	[Token(Token = "0x2000233")]
	public class MeteoritesRenderables
	{
		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int miActiveMeteoritesCache;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private List<GameObject> maMeteorShowers;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameObject mMeteorShowerPrefab;

		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Transform mParentTransform;

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0xDBA264", Offset = "0xDBA264", VA = "0xDBA264")]
		public MeteoritesRenderables(GameObject meteorShowerPrefab, Transform parentTransform)
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0xDBA3DC", Offset = "0xDBA3DC", VA = "0xDBA3DC")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0xDBA54C", Offset = "0xDBA54C", VA = "0xDBA54C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0xDBA960", Offset = "0xDBA960", VA = "0xDBA960")]
		public void Update(List<CelestialObject> meteoritesActiveList)
		{
		}
	}
}
[Token(Token = "0x2000234")]
public class MeteorShowerParticleController : MonoBehaviour
{
	[Token(Token = "0x4000919")]
	private const float EMIT_TIME_MIN = 2f;

	[Token(Token = "0x400091A")]
	private const float EMIT_TIME_MAX = 8f;

	[Token(Token = "0x400091B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Range mEmitTimeRange;

	[Token(Token = "0x400091C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float mfTimeForNextParticle;

	[Token(Token = "0x400091D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem mParticleSystem;

	[Token(Token = "0x6000F41")]
	[Address(RVA = "0xDBD3FC", Offset = "0xDBD3FC", VA = "0xDBD3FC")]
	public MeteorShowerParticleController()
	{
	}

	[Token(Token = "0x6000F42")]
	[Address(RVA = "0xDBD404", Offset = "0xDBD404", VA = "0xDBD404")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F43")]
	[Address(RVA = "0xDBD50C", Offset = "0xDBD50C", VA = "0xDBD50C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F44")]
	[Address(RVA = "0xDBD4D0", Offset = "0xDBD4D0", VA = "0xDBD4D0")]
	private void resetTimer()
	{
	}
}
[Token(Token = "0x2000235")]
public static class Optics
{
	[Token(Token = "0x2000236")]
	public enum Model
	{
		[Token(Token = "0x4000922")]
		Eye,
		[Token(Token = "0x4000923")]
		ETX_90,
		[Token(Token = "0x4000924")]
		NexStar_8_SE,
		[Token(Token = "0x4000925")]
		Hubble_Space_Telescope
	}

	[Token(Token = "0x2000237")]
	public enum Manufacturer
	{
		[Token(Token = "0x4000927")]
		Evolution,
		[Token(Token = "0x4000928")]
		Meade,
		[Token(Token = "0x4000929")]
		Celestron,
		[Token(Token = "0x400092A")]
		NASA_ESA_STScI
	}

	[Token(Token = "0x2000238")]
	public struct Instrument
	{
		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Model meModel;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private Manufacturer meManufacturer;

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float mfLensDiameter;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float mfMagLimit;

		[Token(Token = "0x1700021B")]
		public Model model
		{
			[Token(Token = "0x6000F49")]
			[Address(RVA = "0xC6AE28", Offset = "0xC6AE28", VA = "0xC6AE28")]
			get
			{
				return default(Model);
			}
		}

		[Token(Token = "0x1700021C")]
		public Manufacturer manufacturer
		{
			[Token(Token = "0x6000F4A")]
			[Address(RVA = "0xC6AE30", Offset = "0xC6AE30", VA = "0xC6AE30")]
			get
			{
				return default(Manufacturer);
			}
		}

		[Token(Token = "0x1700021D")]
		public float lensDiameter
		{
			[Token(Token = "0x6000F4B")]
			[Address(RVA = "0xC6AE38", Offset = "0xC6AE38", VA = "0xC6AE38")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700021E")]
		public float magLimit
		{
			[Token(Token = "0x6000F4C")]
			[Address(RVA = "0xC6AE48", Offset = "0xC6AE48", VA = "0xC6AE48")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0xC6AE0C", Offset = "0xC6AE0C", VA = "0xC6AE0C")]
		public Instrument(Model model, Manufacturer manufacturer, float lensDiameter)
		{
		}
	}

	[Token(Token = "0x400091E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly IList<Instrument> saOpticalInstruments;

	[Token(Token = "0x400091F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Dictionary<Model, Instrument> saModelDictionary;

	[Token(Token = "0x4000920")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Instrument seCurrentInstrument;

	[Token(Token = "0x1700021A")]
	public static Instrument CurrentInstrument
	{
		[Token(Token = "0x6000F46")]
		[Address(RVA = "0xC6AA88", Offset = "0xC6AA88", VA = "0xC6AA88")]
		get
		{
			return default(Instrument);
		}
	}

	[Token(Token = "0x6000F45")]
	[Address(RVA = "0xC6A52C", Offset = "0xC6A52C", VA = "0xC6A52C")]
	public static void SetInstrument(Model model)
	{
	}
}
[Token(Token = "0x2000239")]
public class OrbitLine : MonoBehaviour
{
	[Token(Token = "0x400092F")]
	private const float ANIMATED_DRAW_DURATION = 1f;

	[Token(Token = "0x4000930")]
	private const int SPLINE_POINT_COUNT = 10;

	[Token(Token = "0x4000931")]
	private const int CONTROL_POINT_COUNT_MIN = 14;

	[Token(Token = "0x4000932")]
	public const int CONTROL_POINT_COUNT_MAX = 28;

	[Token(Token = "0x4000933")]
	private const float ECC_RANGE_MIN = 0.2f;

	[Token(Token = "0x4000934")]
	private const float ECC_RANGE_MAX = 0.8f;

	[Token(Token = "0x4000935")]
	private const float ECC_RANGE = 0.6f;

	[Token(Token = "0x4000936")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private CelestialObject mCelestialObject;

	[Token(Token = "0x4000937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int miControlPointCount;

	[Token(Token = "0x4000938")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Vector3[] maOrbitLinePositions;

	[Token(Token = "0x4000939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Bounds mBaseBounds;

	[Token(Token = "0x400093A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private LineMesh mLineMesh;

	[Token(Token = "0x400093B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool mbIsAnimating;

	[Token(Token = "0x400093C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool mbIsAppearing;

	[Token(Token = "0x400093D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float mfAnimationStartTime;

	[Token(Token = "0x400093E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool mbIsSelected;

	[Token(Token = "0x400093F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	private bool mbNeedsRemoving;

	[Token(Token = "0x4000940")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int miIndex;

	[Token(Token = "0x4000941")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int siMaxIndex;

	[Token(Token = "0x4000942")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int siIndexToCompute;

	[Token(Token = "0x4000943")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool mbIsBuilt;

	[Token(Token = "0x1700021F")]
	public bool isSelected
	{
		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xC6B678", Offset = "0xC6B678", VA = "0xC6B678")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xC6B680", Offset = "0xC6B680", VA = "0xC6B680")]
		set
		{
		}
	}

	[Token(Token = "0x17000220")]
	public bool needsRemoving
	{
		[Token(Token = "0x6000F50")]
		[Address(RVA = "0xC6B688", Offset = "0xC6B688", VA = "0xC6B688")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000221")]
	public int index
	{
		[Token(Token = "0x6000F51")]
		[Address(RVA = "0xC6B690", Offset = "0xC6B690", VA = "0xC6B690")]
		set
		{
		}
	}

	[Token(Token = "0x17000222")]
	public static int maxIndex
	{
		[Token(Token = "0x6000F52")]
		[Address(RVA = "0xC6B698", Offset = "0xC6B698", VA = "0xC6B698")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000F53")]
		[Address(RVA = "0xC6B724", Offset = "0xC6B724", VA = "0xC6B724")]
		set
		{
		}
	}

	[Token(Token = "0x17000223")]
	public static int indexToCompute
	{
		[Token(Token = "0x6000F54")]
		[Address(RVA = "0xC6B7B4", Offset = "0xC6B7B4", VA = "0xC6B7B4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000F55")]
		[Address(RVA = "0xC6B840", Offset = "0xC6B840", VA = "0xC6B840")]
		set
		{
		}
	}

	[Token(Token = "0x6000F4D")]
	[Address(RVA = "0xC6B670", Offset = "0xC6B670", VA = "0xC6B670")]
	public OrbitLine()
	{
	}

	[Token(Token = "0x6000F56")]
	[Address(RVA = "0xC6B8D0", Offset = "0xC6B8D0", VA = "0xC6B8D0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F57")]
	[Address(RVA = "0xC6B8E8", Offset = "0xC6B8E8", VA = "0xC6B8E8")]
	public void Initialise(CelestialObject celestialObject, Material material)
	{
	}

	[Token(Token = "0x6000F58")]
	[Address(RVA = "0xC6BB40", Offset = "0xC6BB40", VA = "0xC6BB40")]
	private void buildLineMesh(bool bDrawFullOrbit, bool bDrawHalfAlpha)
	{
	}

	[Token(Token = "0x6000F59")]
	[Address(RVA = "0xC6BF38", Offset = "0xC6BF38", VA = "0xC6BF38")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F5A")]
	[Address(RVA = "0xC6E3A4", Offset = "0xC6E3A4", VA = "0xC6E3A4")]
	private float getUpdatedStartTime()
	{
		return default(float);
	}

	[Token(Token = "0x6000F5B")]
	[Address(RVA = "0xC6E3F8", Offset = "0xC6E3F8", VA = "0xC6E3F8")]
	public void Remove()
	{
	}

	[Token(Token = "0x6000F5C")]
	[Address(RVA = "0xC6E478", Offset = "0xC6E478", VA = "0xC6E478")]
	public void CancelRemove()
	{
	}
}
[Token(Token = "0x200023A")]
public static class OrbitLineEvaluator
{
	[Token(Token = "0x4000944")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool sbStaticBufferInitialiased;

	[Token(Token = "0x4000945")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Vector3[] svCoarseControlPoints;

	[Token(Token = "0x6000F5E")]
	[Address(RVA = "0xC6D4E0", Offset = "0xC6D4E0", VA = "0xC6D4E0")]
	public static void CalculateControlPoints(Planet planet, ref Vector3[] orbitLinePoints, ref Bounds bounds, int controlPointCount, double julianTime, float orbitProportionToDisplay = 1f)
	{
	}

	[Token(Token = "0x6000F5F")]
	[Address(RVA = "0xC6CE38", Offset = "0xC6CE38", VA = "0xC6CE38")]
	public static void CalculateControlPointsCircleApprox(Planet planet, ref Vector3[] orbitLinePoints, ref Bounds bounds, int controlPointCount, double julianTime, float orbitProportionToDisplay = 1f)
	{
	}
}
[Token(Token = "0x200023B")]
public class OrbitLineManager : MonoBehaviour
{
	[Token(Token = "0x4000946")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Material orbitLineMaterial;

	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color orbitLineDefaultColor;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color orbitLineSelectedColor;

	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useSingleColor;

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool usePlanetTypeColor;

	[Token(Token = "0x400094B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool useSelectedColor;

	[Token(Token = "0x400094C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Color orbitLineOrrerySelectedColor;

	[Token(Token = "0x400094D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Color orbitLineOrreryPlanetsColor;

	[Token(Token = "0x400094E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Color orbitLineOrreryAsteroidsColor;

	[Token(Token = "0x400094F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Color orbitLineOrreryMoonsColor;

	[Token(Token = "0x4000950")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public Color orbitLineOrreryDwarfPlanetsColor;

	[Token(Token = "0x4000951")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public Color orbitLineOrreryMercuryColor;

	[Token(Token = "0x4000952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public Color orbitLineOrreryVenusColor;

	[Token(Token = "0x4000953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public Color orbitLineOrreryEarthColor;

	[Token(Token = "0x4000954")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public Color orbitLineOrreryMarsColor;

	[Token(Token = "0x4000955")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public Color orbitLineOrreryJupiterColor;

	[Token(Token = "0x4000956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public Color orbitLineOrrerySaturnColor;

	[Token(Token = "0x4000957")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public Color orbitLineOrreryUranusColor;

	[Token(Token = "0x4000958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public Color orbitLineOrreryNeptuneColor;

	[Token(Token = "0x4000959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public Color orbitLineOrreryPlutoColor;

	[Token(Token = "0x400095A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<CelestialObject, OrbitLine> saOrbitLineDictionary;

	[Token(Token = "0x400095B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static List<CelestialObject> saOrbitLinesKeysToRemove;

	[Token(Token = "0x400095C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static OrbitLineManager sInstance;

	[Token(Token = "0x17000224")]
	public static Color OrbitLineDefaultColor
	{
		[Token(Token = "0x6000F62")]
		[Address(RVA = "0xC6DC08", Offset = "0xC6DC08", VA = "0xC6DC08")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x17000225")]
	public static Color OrbitLineSelectedColor
	{
		[Token(Token = "0x6000F63")]
		[Address(RVA = "0xC6DB8C", Offset = "0xC6DB8C", VA = "0xC6DB8C")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x17000226")]
	public static Color OrbitLineOrreryMercuryColor
	{
		[Token(Token = "0x6000F64")]
		[Address(RVA = "0xC6DDD4", Offset = "0xC6DDD4", VA = "0xC6DDD4")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x17000227")]
	public static Color OrbitLineOrreryVenusColor
	{
		[Token(Token = "0x6000F65")]
		[Address(RVA = "0xC6DE50", Offset = "0xC6DE50", VA = "0xC6DE50")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x17000228")]
	public static Color OrbitLineOrreryEarthColor
	{
		[Token(Token = "0x6000F66")]
		[Address(RVA = "0xC6DECC", Offset = "0xC6DECC", VA = "0xC6DECC")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x17000229")]
	public static Color OrbitLineOrreryMarsColor
	{
		[Token(Token = "0x6000F67")]
		[Address(RVA = "0xC6DF48", Offset = "0xC6DF48", VA = "0xC6DF48")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x1700022A")]
	public static Color OrbitLineOrreryJupiterColor
	{
		[Token(Token = "0x6000F68")]
		[Address(RVA = "0xC6DFC4", Offset = "0xC6DFC4", VA = "0xC6DFC4")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x1700022B")]
	public static Color OrbitLineOrrerySaturnColor
	{
		[Token(Token = "0x6000F69")]
		[Address(RVA = "0xC6E040", Offset = "0xC6E040", VA = "0xC6E040")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x1700022C")]
	public static Color OrbitLineOrreryUranusColor
	{
		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0xC6E0BC", Offset = "0xC6E0BC", VA = "0xC6E0BC")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x1700022D")]
	public static Color OrbitLineOrreryNeptuneColor
	{
		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0xC6E138", Offset = "0xC6E138", VA = "0xC6E138")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x1700022E")]
	public static Color OrbitLineOrreryPlutoColor
	{
		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0xC6E1B4", Offset = "0xC6E1B4", VA = "0xC6E1B4")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x1700022F")]
	public static Color OrbitLineOrrerySelectedColor
	{
		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0xC6E4F8", Offset = "0xC6E4F8", VA = "0xC6E4F8")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x17000230")]
	public static Color OrbitLineOrreryPlanetsColor
	{
		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0xC6E574", Offset = "0xC6E574", VA = "0xC6E574")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x17000231")]
	public static Color OrbitLineOrreryAsteroidsColor
	{
		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0xC6E230", Offset = "0xC6E230", VA = "0xC6E230")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x17000232")]
	public static Color OrbitLineOrreryMoonsColor
	{
		[Token(Token = "0x6000F70")]
		[Address(RVA = "0xC6E2AC", Offset = "0xC6E2AC", VA = "0xC6E2AC")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x17000233")]
	public static Color OrbitLineOrreryDwarfPlanetsColor
	{
		[Token(Token = "0x6000F71")]
		[Address(RVA = "0xC6E328", Offset = "0xC6E328", VA = "0xC6E328")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x17000234")]
	public static bool UseSingleColor
	{
		[Token(Token = "0x6000F72")]
		[Address(RVA = "0xC6DC84", Offset = "0xC6DC84", VA = "0xC6DC84")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000235")]
	public static bool UsePlanetTypeColor
	{
		[Token(Token = "0x6000F73")]
		[Address(RVA = "0xC6DCF4", Offset = "0xC6DCF4", VA = "0xC6DCF4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000236")]
	public static bool UseSelectedColor
	{
		[Token(Token = "0x6000F74")]
		[Address(RVA = "0xC6DD64", Offset = "0xC6DD64", VA = "0xC6DD64")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000F61")]
	[Address(RVA = "0xC6E4E8", Offset = "0xC6E4E8", VA = "0xC6E4E8")]
	public OrbitLineManager()
	{
	}

	[Token(Token = "0x6000F75")]
	[Address(RVA = "0xC6E5F0", Offset = "0xC6E5F0", VA = "0xC6E5F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F76")]
	[Address(RVA = "0xC6E6CC", Offset = "0xC6E6CC", VA = "0xC6E6CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F77")]
	[Address(RVA = "0xC6EBA0", Offset = "0xC6EBA0", VA = "0xC6EBA0")]
	public static bool HasOrbitLine(CelestialObject celestialObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F78")]
	[Address(RVA = "0xC6EC2C", Offset = "0xC6EC2C", VA = "0xC6EC2C")]
	public static void SetSelected(CelestialObject celestialObject, bool selected)
	{
	}

	[Token(Token = "0x6000F79")]
	[Address(RVA = "0xC6ED88", Offset = "0xC6ED88", VA = "0xC6ED88")]
	public static void EnableOrbitLine(CelestialObject celestialObject, bool enabled, bool immediatelySelect = false)
	{
	}

	[Token(Token = "0x6000F7A")]
	[Address(RVA = "0xC6EF1C", Offset = "0xC6EF1C", VA = "0xC6EF1C")]
	public static OrbitLine AddOrbitLine(CelestialObject celestialObject)
	{
		return null;
	}

	[Token(Token = "0x6000F7B")]
	[Address(RVA = "0xC6F21C", Offset = "0xC6F21C", VA = "0xC6F21C")]
	public static void RemoveOrbitLine(CelestialObject celestialObject)
	{
	}

	[Token(Token = "0x6000F7C")]
	[Address(RVA = "0xC6F2C0", Offset = "0xC6F2C0", VA = "0xC6F2C0")]
	public static void RemoveAllOrbitLines()
	{
	}
}
namespace Planets.Atmosphere
{
	[Token(Token = "0x200023C")]
	public class Composition
	{
		[Token(Token = "0x200023D")]
		public enum Element
		{
			[Token(Token = "0x4000964")]
			Hydrogen,
			[Token(Token = "0x4000965")]
			Helium,
			[Token(Token = "0x4000966")]
			Nitrogen,
			[Token(Token = "0x4000967")]
			Oxygen,
			[Token(Token = "0x4000968")]
			CarbonDioxide,
			[Token(Token = "0x4000969")]
			Sodium,
			[Token(Token = "0x400096A")]
			Methane,
			[Token(Token = "0x400096B")]
			Argon,
			[Token(Token = "0x400096C")]
			Other
		}

		[Token(Token = "0x200023E")]
		public struct ElementAndAmount
		{
			[Token(Token = "0x400096D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Element meElement;

			[Token(Token = "0x400096E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private readonly FuzzyFloat mfAmount;

			[Token(Token = "0x6000F83")]
			[Address(RVA = "0xD30A00", Offset = "0xD30A00", VA = "0xD30A00")]
			public ElementAndAmount(Element element, FuzzyFloat amount)
			{
			}

			[Token(Token = "0x6000F84")]
			[Address(RVA = "0xD30A0C", Offset = "0xD30A0C", VA = "0xD30A0C")]
			public string ToString(bool languageIsEnglish)
			{
				return null;
			}
		}

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string[] saElementNames;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static string[] saElementSymbols;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private FuzzyFloat mfPressure;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ElementAndAmount[] maComposition;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private string msBuiltString;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<Names, Composition> saCompositionDictionary;

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0xD2EBCC", Offset = "0xD2EBCC", VA = "0xD2EBCC")]
		public Composition(FuzzyFloat presure, ElementAndAmount[] composition)
		{
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0xD2EBFC", Offset = "0xD2EBFC", VA = "0xD2EBFC")]
		static Composition()
		{
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0xD302B4", Offset = "0xD302B4", VA = "0xD302B4")]
		public static bool HasComposition(Names planetName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0xD3036C", Offset = "0xD3036C", VA = "0xD3036C")]
		public static Composition GetCompositionForPlanet(Names planetName)
		{
			return null;
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0xD30424", Offset = "0xD30424", VA = "0xD30424")]
		public string GetPressure()
		{
			return null;
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0xD305C0", Offset = "0xD305C0", VA = "0xD305C0")]
		public string GetComposition()
		{
			return null;
		}
	}
}
namespace Planets
{
	[Token(Token = "0x200023F")]
	public class AxialOrientor : MonoBehaviour
	{
		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double siderealRotationPeriod;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double jd;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AxialOrientation mAxialOrientation;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool overrideOrientation;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float tiltRa;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float tiltDec;

		[Token(Token = "0x17000237")]
		public AxialOrientation axialOrientation
		{
			[Token(Token = "0x6000F86")]
			[Address(RVA = "0xD30B10", Offset = "0xD30B10", VA = "0xD30B10")]
			set
			{
			}
		}

		[Token(Token = "0x17000238")]
		public double JulianDate
		{
			[Token(Token = "0x6000F87")]
			[Address(RVA = "0xD30B18", Offset = "0xD30B18", VA = "0xD30B18")]
			set
			{
			}
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0xD30B08", Offset = "0xD30B08", VA = "0xD30B08")]
		public AxialOrientor()
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xD30B24", Offset = "0xD30B24", VA = "0xD30B24")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0xD30B28", Offset = "0xD30B28", VA = "0xD30B28")]
		private void Update()
		{
		}
	}
}
[Token(Token = "0x2000240")]
public class EarthPopulation
{
	[Token(Token = "0x2000241")]
	internal struct PopulationSample
	{
		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal ulong population;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal JulianDate jd;

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0x189580", Offset = "0x189580", VA = "0x189580")]
		internal PopulationSample(int year, ulong population)
		{
		}
	}

	[Token(Token = "0x4000975")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	internal static double sValidJulianDateStart;

	[Token(Token = "0x4000976")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	internal static double sValidJulianDateEnd;

	[Token(Token = "0x4000977")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static PopulationSample[] saPopulationSamples;

	[Token(Token = "0x6000F8A")]
	[Address(RVA = "0x188CDC", Offset = "0x188CDC", VA = "0x188CDC")]
	static EarthPopulation()
	{
	}

	[Token(Token = "0x6000F8B")]
	[Address(RVA = "0x189140", Offset = "0x189140", VA = "0x189140")]
	public EarthPopulation()
	{
	}

	[Token(Token = "0x6000F8C")]
	[Address(RVA = "0x189148", Offset = "0x189148", VA = "0x189148")]
	public static ulong GetPopulationForDate(double jd)
	{
		return default(ulong);
	}
}
[Token(Token = "0x2000242")]
public struct Conic3
{
	[Token(Token = "0x400097A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private double mdSemiMajorAxis;

	[Token(Token = "0x400097B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private double mdEccentricity;

	[Token(Token = "0x400097C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private double mdArgumentOfPerifocusRadians;

	[Token(Token = "0x400097D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private double mdInclinationRadians;

	[Token(Token = "0x400097E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private double mdLongitudeOfAscendingNodeRadians;

	[Token(Token = "0x6000F8E")]
	[Address(RVA = "0x1764CC", Offset = "0x1764CC", VA = "0x1764CC")]
	public Conic3(double semiMajorAxis, double eccentricity, double argumentOfPerifocusRadians, double inclinationRadians, double longitudeOfAscendingNodeRadians)
	{
	}

	[Token(Token = "0x6000F8F")]
	[Address(RVA = "0x176874", Offset = "0x176874", VA = "0x176874")]
	public Vector3Double evaluatePositionRelativeToFocus(Vector3Double focus, double parameter)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000F90")]
	[Address(RVA = "0x1769E8", Offset = "0x1769E8", VA = "0x1769E8")]
	public Vector3Double evaluatePositionInLocalSpace(double parameter)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6000F91")]
	[Address(RVA = "0x176A04", Offset = "0x176A04", VA = "0x176A04")]
	public Vector2Double evaluatePositionInPlane(double parameter)
	{
		return default(Vector2Double);
	}
}
namespace Planets
{
	[Token(Token = "0x2000243")]
	public struct EarthOrbitVariables
	{
		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly double mdEcl;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly double mdLs;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly double mdSlon;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly double mdXs;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly double mdYs;

		[Token(Token = "0x17000239")]
		public double ecl
		{
			[Token(Token = "0x6000F93")]
			[Address(RVA = "0xD3D764", Offset = "0xD3D764", VA = "0xD3D764")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700023A")]
		public double ls
		{
			[Token(Token = "0x6000F94")]
			[Address(RVA = "0xD3D77C", Offset = "0xD3D77C", VA = "0xD3D77C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700023B")]
		public double slon
		{
			[Token(Token = "0x6000F95")]
			[Address(RVA = "0xD3D788", Offset = "0xD3D788", VA = "0xD3D788")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700023C")]
		public double xs
		{
			[Token(Token = "0x6000F96")]
			[Address(RVA = "0xD3D7A0", Offset = "0xD3D7A0", VA = "0xD3D7A0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700023D")]
		public double ys
		{
			[Token(Token = "0x6000F97")]
			[Address(RVA = "0xD3D7B8", Offset = "0xD3D7B8", VA = "0xD3D7B8")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0xD3D72C", Offset = "0xD3D72C", VA = "0xD3D72C")]
		public EarthOrbitVariables(double ecl, double ls, double slon, double xs, double ys)
		{
		}
	}
	[Token(Token = "0x2000244")]
	public class HorizonsOrbitSolver : OrbitSolver
	{
		[Token(Token = "0x4000984")]
		private const int ITERATION_COUNT_LOW = 1;

		[Token(Token = "0x4000985")]
		private const int ITERATION_COUNT_PARABOLIC_HIGH = 6;

		[Token(Token = "0x4000986")]
		private const int ITERATION_COUNT_HYPERBOLIC_HIGH = 30;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PlanetsHorizonsData.ProcessedHorizonsElements mElements;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private double mdX;

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xD61240", Offset = "0xD61240", VA = "0xD61240")]
		public HorizonsOrbitSolver(PlanetsHorizonsData.ProcessedHorizonsElements elements)
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xD612EC", Offset = "0xD612EC", VA = "0xD612EC")]
		public double getInclination()
		{
			return default(double);
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0xD612F8", Offset = "0xD612F8", VA = "0xD612F8")]
		private static double eccentricAnomalyRadians(double meanAnomalyRadians, double eccentricity, int iterationCount)
		{
			return default(double);
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xD613D0", Offset = "0xD613D0", VA = "0xD613D0")]
		private double eccentricAnomalyRadiansHyperbolic(double meanAnomalyRadians, double eccentricity, int iterationCount)
		{
			return default(double);
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xD61530", Offset = "0xD61530", VA = "0xD61530", Slot = "4")]
		public override Vector3Double CalculateEclipticRectangularCoordinates(Planet planet, double jd, Accuracy accuracy)
		{
			return default(Vector3Double);
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xD61944", Offset = "0xD61944", VA = "0xD61944", Slot = "5")]
		public override double CalculateAphelionOrApoapsis(double d)
		{
			return default(double);
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xD61950", Offset = "0xD61950", VA = "0xD61950", Slot = "6")]
		public override double CalculateMaxDistanceFromReferencePlane(double d)
		{
			return default(double);
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xD6195C", Offset = "0xD6195C", VA = "0xD6195C", Slot = "7")]
		public override double GetEccentricity(double jd)
		{
			return default(double);
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xD61968", Offset = "0xD61968", VA = "0xD61968", Slot = "8")]
		public override double GetOrbitalPeriodDays(double jd)
		{
			return default(double);
		}
	}
	[Token(Token = "0x2000245")]
	public struct OrbitalElements
	{
		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly double mdN;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly double mdN_rate;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly double mdI;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly double mdI_rate;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly double mdW;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly double mdW_rate;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly double mdA;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly double mdA_rate;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly double mdE;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly double mdE_rate;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly double mdM;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly double mdM_rate;

		[Token(Token = "0x1700023E")]
		public double N
		{
			[Token(Token = "0x6000FA2")]
			[Address(RVA = "0xE1C7A0", Offset = "0xE1C7A0", VA = "0xE1C7A0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700023F")]
		public double N_rate
		{
			[Token(Token = "0x6000FA3")]
			[Address(RVA = "0xE1C7AC", Offset = "0xE1C7AC", VA = "0xE1C7AC")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000240")]
		public double I
		{
			[Token(Token = "0x6000FA4")]
			[Address(RVA = "0xE1C7B8", Offset = "0xE1C7B8", VA = "0xE1C7B8")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000241")]
		public double I_rate
		{
			[Token(Token = "0x6000FA5")]
			[Address(RVA = "0xE1C7C4", Offset = "0xE1C7C4", VA = "0xE1C7C4")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000242")]
		public double W
		{
			[Token(Token = "0x6000FA6")]
			[Address(RVA = "0xE1C7D0", Offset = "0xE1C7D0", VA = "0xE1C7D0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000243")]
		public double W_rate
		{
			[Token(Token = "0x6000FA7")]
			[Address(RVA = "0xE1C7DC", Offset = "0xE1C7DC", VA = "0xE1C7DC")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000244")]
		public double A
		{
			[Token(Token = "0x6000FA8")]
			[Address(RVA = "0xE1C7E8", Offset = "0xE1C7E8", VA = "0xE1C7E8")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000245")]
		public double A_rate
		{
			[Token(Token = "0x6000FA9")]
			[Address(RVA = "0xE1C7F4", Offset = "0xE1C7F4", VA = "0xE1C7F4")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000246")]
		public double E
		{
			[Token(Token = "0x6000FAA")]
			[Address(RVA = "0xE1C800", Offset = "0xE1C800", VA = "0xE1C800")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000247")]
		public double E_rate
		{
			[Token(Token = "0x6000FAB")]
			[Address(RVA = "0xE1C80C", Offset = "0xE1C80C", VA = "0xE1C80C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000248")]
		public double M
		{
			[Token(Token = "0x6000FAC")]
			[Address(RVA = "0xE1C818", Offset = "0xE1C818", VA = "0xE1C818")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000249")]
		public double M_rate
		{
			[Token(Token = "0x6000FAD")]
			[Address(RVA = "0xE1C824", Offset = "0xE1C824", VA = "0xE1C824")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xE1C764", Offset = "0xE1C764", VA = "0xE1C764")]
		public OrbitalElements(double N, double N_rate, double i, double i_rate, double w, double w_rate, double a, double a_rate, double e, double e_rate, double M, double M_rate)
		{
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0xE1C830", Offset = "0xE1C830", VA = "0xE1C830")]
		public double GetOrbitalEccentricity(double jd)
		{
			return default(double);
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0xE1C850", Offset = "0xE1C850", VA = "0xE1C850")]
		public double GetOrbitalPeriodDays(double jd)
		{
			return default(double);
		}
	}
	[Token(Token = "0x2000246")]
	public abstract class OrbitSolver
	{
		[Token(Token = "0x2000247")]
		public enum Accuracy
		{
			[Token(Token = "0x400099A")]
			Low,
			[Token(Token = "0x400099B")]
			High
		}

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected bool mbIsCalculated;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int siCallCount;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static List<OrbitSolver> saOrbitSolvers;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Vector3Double mvEclipticPosition;

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0xE1C8A0", Offset = "0xE1C8A0", VA = "0xE1C8A0")]
		public OrbitSolver()
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0xE1C964", Offset = "0xE1C964", VA = "0xE1C964")]
		public static void Reset()
		{
		}

		[Token(Token = "0x6000FB2")]
		public abstract Vector3Double CalculateEclipticRectangularCoordinates(Planet planet, double jd, Accuracy accuracy = Accuracy.High);

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0xE1CAF8", Offset = "0xE1CAF8", VA = "0xE1CAF8")]
		protected bool SetCalculated()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0xE1CBA8", Offset = "0xE1CBA8", VA = "0xE1CBA8")]
		public Vector3Double setEclipticPosition(Names planetName, double xh, double yh, double zh)
		{
			return default(Vector3Double);
		}

		[Token(Token = "0x6000FB5")]
		public abstract double CalculateAphelionOrApoapsis(double d);

		[Token(Token = "0x6000FB6")]
		public abstract double CalculateMaxDistanceFromReferencePlane(double d);

		[Token(Token = "0x6000FB7")]
		public abstract double GetEccentricity(double jd);

		[Token(Token = "0x6000FB8")]
		public abstract double GetOrbitalPeriodDays(double jd);
	}
	[Token(Token = "0x2000248")]
	public class OriginalOrbitSolver : OrbitSolver
	{
		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool sbPlanetsAssigned;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static Planet sEarth;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Planet sJupiter;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static Planet sSaturn;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Planet sUranus;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static OrbitalElements sEarthOrbitalElements;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static EarthOrbitVariables sEarthOrbitVariables;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OrbitalElements mOrbitalElements;

		[Token(Token = "0x1700024A")]
		public OrbitalElements orbitalElements
		{
			[Token(Token = "0x6000FBB")]
			[Address(RVA = "0xE1E280", Offset = "0xE1E280", VA = "0xE1E280")]
			get
			{
				return default(OrbitalElements);
			}
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0xE1DD48", Offset = "0xE1DD48", VA = "0xE1DD48")]
		public OriginalOrbitSolver(OrbitalElements elements, bool assignToEarth)
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0xE1E298", Offset = "0xE1E298", VA = "0xE1E298", Slot = "7")]
		public override double GetEccentricity(double jd)
		{
			return default(double);
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0xE1E2B4", Offset = "0xE1E2B4", VA = "0xE1E2B4")]
		private double meanAnomaly(OrbitalElements orbitalElements, double daysSinceJ2000)
		{
			return default(double);
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0xE1E2D8", Offset = "0xE1E2D8", VA = "0xE1E2D8", Slot = "5")]
		public override double CalculateAphelionOrApoapsis(double d)
		{
			return default(double);
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0xE1E310", Offset = "0xE1E310", VA = "0xE1E310", Slot = "6")]
		public override double CalculateMaxDistanceFromReferencePlane(double d)
		{
			return default(double);
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0xE1E328", Offset = "0xE1E328", VA = "0xE1E328", Slot = "8")]
		public override double GetOrbitalPeriodDays(double jd)
		{
			return default(double);
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0xE1E378", Offset = "0xE1E378", VA = "0xE1E378", Slot = "4")]
		public override Vector3Double CalculateEclipticRectangularCoordinates(Planet planet, double jd, Accuracy accuracy = Accuracy.High)
		{
			return default(Vector3Double);
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0xE1FA08", Offset = "0xE1FA08", VA = "0xE1FA08")]
		public static Vector3Double TranslateByEarthPosition(Vector3Double eclipticRectCoords)
		{
			return default(Vector3Double);
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0xE1FB48", Offset = "0xE1FB48", VA = "0xE1FB48")]
		public static Vector3Double RotateToEquatorialCoordinates(Vector3Double v)
		{
			return default(Vector3Double);
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0xE1FD38", Offset = "0xE1FD38", VA = "0xE1FD38")]
		public static Vector3Double RotateFromEquatorialCoordinates(Vector3Double v)
		{
			return default(Vector3Double);
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0xE1FEE0", Offset = "0xE1FEE0", VA = "0xE1FEE0")]
		public static float SetEarthPosition(double d)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000249")]
	public class PlutoOrbitSolver : OrbitSolver
	{
		[Token(Token = "0x40009A4")]
		private const double INCLINATION_DEGREES = 17.16;

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0xE22644", Offset = "0xE22644", VA = "0xE22644")]
		public PlutoOrbitSolver()
		{
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0xE228D0", Offset = "0xE228D0", VA = "0xE228D0")]
		public double getInclination()
		{
			return default(double);
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0xE4E200", Offset = "0xE4E200", VA = "0xE4E200", Slot = "5")]
		public override double CalculateAphelionOrApoapsis(double d)
		{
			return default(double);
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0xE4E218", Offset = "0xE4E218", VA = "0xE4E218", Slot = "6")]
		public override double CalculateMaxDistanceFromReferencePlane(double d)
		{
			return default(double);
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0xE4E258", Offset = "0xE4E258", VA = "0xE4E258", Slot = "4")]
		public override Vector3Double CalculateEclipticRectangularCoordinates(Planet planet, double jd, Accuracy accuracy = Accuracy.High)
		{
			return default(Vector3Double);
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0xE4ED00", Offset = "0xE4ED00", VA = "0xE4ED00", Slot = "7")]
		public override double GetEccentricity(double jd)
		{
			return default(double);
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0xE4ED18", Offset = "0xE4ED18", VA = "0xE4ED18", Slot = "8")]
		public override double GetOrbitalPeriodDays(double jd)
		{
			return default(double);
		}
	}
	[Token(Token = "0x200024A")]
	public class OriginalOrbitalElementsData
	{
		[Token(Token = "0x200024B")]
		private struct OrbitalElementsInput
		{
			[Token(Token = "0x40009A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Names meName;

			[Token(Token = "0x40009A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private readonly Names meParentName;

			[Token(Token = "0x40009A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly OrbitalElements mElements;

			[Token(Token = "0x1700024B")]
			public Names name
			{
				[Token(Token = "0x6000FD2")]
				[Address(RVA = "0xE1DD20", Offset = "0xE1DD20", VA = "0xE1DD20")]
				get
				{
					return default(Names);
				}
			}

			[Token(Token = "0x1700024C")]
			public Names parentName
			{
				[Token(Token = "0x6000FD3")]
				[Address(RVA = "0xE1DD28", Offset = "0xE1DD28", VA = "0xE1DD28")]
				get
				{
					return default(Names);
				}
			}

			[Token(Token = "0x1700024D")]
			public OrbitalElements elements
			{
				[Token(Token = "0x6000FD4")]
				[Address(RVA = "0xE1DD30", Offset = "0xE1DD30", VA = "0xE1DD30")]
				get
				{
					return default(OrbitalElements);
				}
			}

			[Token(Token = "0x6000FD1")]
			[Address(RVA = "0xE1DCF8", Offset = "0xE1DCF8", VA = "0xE1DCF8")]
			public OrbitalElementsInput(Names name, Names parentName, OrbitalElements elements)
			{
			}
		}

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly OrbitalElements sEarthOrbitalElements;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static readonly IList<OrbitalElementsInput> saOrbitalElementsData;

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0xE1CC8C", Offset = "0xE1CC8C", VA = "0xE1CC8C")]
		public OriginalOrbitalElementsData()
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0xE1CC94", Offset = "0xE1CC94", VA = "0xE1CC94")]
		public static void AssignOrbitalElementsToPlanets(Dictionary<Names, Planet> planetsDictionary)
		{
		}
	}
	[Token(Token = "0x200024C")]
	public class Planet : CelestialObject, ICameraTrackable, IFindableObject, ISelectableObject, ISelectableCelestialObject, ISelectablePlanet
	{
		[Token(Token = "0x200024D")]
		public struct InstanceData
		{
			[Token(Token = "0x40009D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly string msName;

			[Token(Token = "0x40009D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private readonly Names meName;

			[Token(Token = "0x40009DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly BodyTypes meType;

			[Token(Token = "0x40009DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private readonly SpriteColors mSpriteColor;

			[Token(Token = "0x40009DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly float mfAbsMag;

			[Token(Token = "0x40009DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private readonly Vector3 mvDimensionsKM;

			[Token(Token = "0x40009DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private readonly double mdSiderealRotationPeriod;

			[Token(Token = "0x40009DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private readonly ushort miSatelliteCount;

			[Token(Token = "0x40009E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
			private readonly ushort miOrderByTypeInSystem;

			[Token(Token = "0x40009E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private readonly AxialOrientation mAxialOrientation;

			[Token(Token = "0x40009E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private readonly Ring mRing;

			[Token(Token = "0x40009E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private readonly MaterialProperties meMaterialProperties;

			[Token(Token = "0x40009E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private readonly bool mbHasAtmosphere;

			[Token(Token = "0x40009E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
			private readonly bool mbIsIrregular;

			[Token(Token = "0x17000283")]
			public string name
			{
				[Token(Token = "0x6001057")]
				[Address(RVA = "0xE2B124", Offset = "0xE2B124", VA = "0xE2B124")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000284")]
			public Names eName
			{
				[Token(Token = "0x6001058")]
				[Address(RVA = "0xE2B12C", Offset = "0xE2B12C", VA = "0xE2B12C")]
				get
				{
					return default(Names);
				}
			}

			[Token(Token = "0x17000285")]
			public BodyTypes type
			{
				[Token(Token = "0x6001059")]
				[Address(RVA = "0xE2B134", Offset = "0xE2B134", VA = "0xE2B134")]
				get
				{
					return default(BodyTypes);
				}
			}

			[Token(Token = "0x17000286")]
			public SpriteColors spriteColor
			{
				[Token(Token = "0x600105A")]
				[Address(RVA = "0xE2B13C", Offset = "0xE2B13C", VA = "0xE2B13C")]
				get
				{
					return default(SpriteColors);
				}
			}

			[Token(Token = "0x17000287")]
			public float absMag
			{
				[Token(Token = "0x600105B")]
				[Address(RVA = "0xE2B144", Offset = "0xE2B144", VA = "0xE2B144")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000288")]
			public Vector2 radiusKM
			{
				[Token(Token = "0x600105C")]
				[Address(RVA = "0xE2B14C", Offset = "0xE2B14C", VA = "0xE2B14C")]
				get
				{
					return default(Vector2);
				}
			}

			[Token(Token = "0x17000289")]
			public Vector3 dimensionsKM
			{
				[Token(Token = "0x600105D")]
				[Address(RVA = "0xE2B170", Offset = "0xE2B170", VA = "0xE2B170")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700028A")]
			public float meanRadiusKM
			{
				[Token(Token = "0x600105E")]
				[Address(RVA = "0xE2B180", Offset = "0xE2B180", VA = "0xE2B180")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700028B")]
			public double siderealRotationPeriod
			{
				[Token(Token = "0x600105F")]
				[Address(RVA = "0xE2B1C4", Offset = "0xE2B1C4", VA = "0xE2B1C4")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x1700028C")]
			public ushort satelliteCount
			{
				[Token(Token = "0x6001060")]
				[Address(RVA = "0xE2B1D0", Offset = "0xE2B1D0", VA = "0xE2B1D0")]
				get
				{
					return default(ushort);
				}
			}

			[Token(Token = "0x1700028D")]
			public ushort orderByTypeInSystem
			{
				[Token(Token = "0x6001061")]
				[Address(RVA = "0xE2B1D8", Offset = "0xE2B1D8", VA = "0xE2B1D8")]
				get
				{
					return default(ushort);
				}
			}

			[Token(Token = "0x1700028E")]
			public MaterialProperties materialProperties
			{
				[Token(Token = "0x6001062")]
				[Address(RVA = "0xE2B1E0", Offset = "0xE2B1E0", VA = "0xE2B1E0")]
				get
				{
					return default(MaterialProperties);
				}
			}

			[Token(Token = "0x1700028F")]
			public AxialOrientation axialOrientation
			{
				[Token(Token = "0x6001063")]
				[Address(RVA = "0xE2B1E8", Offset = "0xE2B1E8", VA = "0xE2B1E8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000290")]
			public Ring ring
			{
				[Token(Token = "0x6001064")]
				[Address(RVA = "0xE2B1F0", Offset = "0xE2B1F0", VA = "0xE2B1F0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000291")]
			public bool hasAtmosphere
			{
				[Token(Token = "0x6001065")]
				[Address(RVA = "0xE2B1F8", Offset = "0xE2B1F8", VA = "0xE2B1F8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000292")]
			public bool isIrregular
			{
				[Token(Token = "0x6001066")]
				[Address(RVA = "0xE2B208", Offset = "0xE2B208", VA = "0xE2B208")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000293")]
			public bool isTextured
			{
				[Token(Token = "0x6001067")]
				[Address(RVA = "0xE2B210", Offset = "0xE2B210", VA = "0xE2B210")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000294")]
			public bool isArtistTextured
			{
				[Token(Token = "0x6001068")]
				[Address(RVA = "0xE2B220", Offset = "0xE2B220", VA = "0xE2B220")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001056")]
			[Address(RVA = "0xE2B0A4", Offset = "0xE2B0A4", VA = "0xE2B0A4")]
			public InstanceData(string name, Names eName, BodyTypes type, float absMag, Dimensions dimensions, double siderealRotationPeriod, ushort orderByTypeInSystem = ushort.MaxValue, [Optional] AxialOrientation axialOrientation, SpriteColors spriteColor = SpriteColors.White, MaterialProperties materialProperties = MaterialProperties.NoMaterial, ushort satelliteCount = 0, bool hasAtmosphere = false, [Optional] Ring ring)
			{
			}
		}

		[Token(Token = "0x40009AA")]
		private const ushort PLANETS_IN_SOLARSYSTEM = 8;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public readonly InstanceData mInstanceData;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private OrbitSolver mOrbitSolver;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private readonly Color mSpriteColor;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private CelestialBodyRenderable mCelestialBodyRenderable;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool sbDrawHumanScale;

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Dictionary<string, SurfaceDetail> mSurfaceDetailsDictionary;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private SurfaceDetail[] maSurfaceDetails;

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int miSurfaceDetailRotationOffset;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private SurfaceDetail[] maPrimarySurfaceDetails;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private double mdSystemRadius;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private double mdSystemHeight;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Bounds mSystemBounds;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Bounds mSystemRenderBounds;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Planet mParent;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private List<Planet> maChildren;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private float mfAppMag;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private double mdAppDiameterAt1AU;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float mfPhase;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private bool mbRetainOrbitLine;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public Vector3Double originalOrreryEclipticPosition;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public bool bHasSetOrreryEclipticPosition;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public int bNeedsToRecalculateOrbitLines;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public double originalOrreryEclipticPositionAngle;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public float orreyOrbitRotation;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		public float lastRotationOrrerySpeed;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private bool mbIsCalculatingSystem;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A1")]
		private bool mbIsResolved;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A2")]
		private bool mbHasMaterialVariation;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A3")]
		private bool mbIsInFrustum;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private bool mbSystemIsInFrustum;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A5")]
		private bool mbIsVisible;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A6")]
		private bool mbIsRetained;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static List<Planet> saRetainedGameObjects;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A7")]
		private bool mbNeedsRemovingFromRetainList;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<Planet> laPlanetsToFlush;

		[Token(Token = "0x40009CE")]
		private const string PLANET_ICONS_PATH = "Textures/UI/Browse/SolarSystem/";

		[Token(Token = "0x40009CF")]
		private const string PLANET_UNKNOWN_ICON_PATH = "Textures/UI/Browse/SolarSystem/unknown_thm";

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private Sprite mIcon;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private Sprite mSystemIcon;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private Sprite mExpandableIcon;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private bool mbIsBrowseExpanded;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private List<IFindableObject> mFindableChildren;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private Spherical mSphericalCoordinates;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private Horizontal mHorizontalCoordinates;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static string[] saBodyTypes;

		[Token(Token = "0x1700024E")]
		public GameObject gameObject
		{
			[Token(Token = "0x6000FD6")]
			[Address(RVA = "0xE21378", Offset = "0xE21378", VA = "0xE21378")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700024F")]
		public static bool drawHumanScale
		{
			[Token(Token = "0x6000FD8")]
			[Address(RVA = "0xE21430", Offset = "0xE21430", VA = "0xE21430")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FD7")]
			[Address(RVA = "0xE213A0", Offset = "0xE213A0", VA = "0xE213A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000250")]
		public int surfaceDetailRotationOffset
		{
			[Token(Token = "0x6000FDA")]
			[Address(RVA = "0xE2169C", Offset = "0xE2169C", VA = "0xE2169C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000251")]
		public SurfaceDetail[] primarySurfaceDetails
		{
			[Token(Token = "0x6000FDB")]
			[Address(RVA = "0xE216A4", Offset = "0xE216A4", VA = "0xE216A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FDC")]
			[Address(RVA = "0xE216AC", Offset = "0xE216AC", VA = "0xE216AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000252")]
		public bool isCameraInside
		{
			[Token(Token = "0x6000FDE")]
			[Address(RVA = "0xE21730", Offset = "0xE21730", VA = "0xE21730")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000253")]
		public double systemRadius
		{
			[Token(Token = "0x6000FDF")]
			[Address(RVA = "0xE2175C", Offset = "0xE2175C", VA = "0xE2175C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000254")]
		public double systemHeight
		{
			[Token(Token = "0x6000FE0")]
			[Address(RVA = "0xE21768", Offset = "0xE21768", VA = "0xE21768")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000255")]
		public Bounds systemBounds
		{
			[Token(Token = "0x6000FE1")]
			[Address(RVA = "0xE21774", Offset = "0xE21774", VA = "0xE21774")]
			get
			{
				return default(Bounds);
			}
		}

		[Token(Token = "0x17000256")]
		public Bounds systemRenderBounds
		{
			[Token(Token = "0x6000FE2")]
			[Address(RVA = "0xE21788", Offset = "0xE21788", VA = "0xE21788")]
			get
			{
				return default(Bounds);
			}
		}

		[Token(Token = "0x17000257")]
		public List<Planet> children
		{
			[Token(Token = "0x6000FE3")]
			[Address(RVA = "0xE2179C", Offset = "0xE2179C", VA = "0xE2179C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000258")]
		public float phase
		{
			[Token(Token = "0x6000FE5")]
			[Address(RVA = "0xE21938", Offset = "0xE21938", VA = "0xE21938")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FE6")]
			[Address(RVA = "0xE21940", Offset = "0xE21940", VA = "0xE21940")]
			set
			{
			}
		}

		[Token(Token = "0x17000259")]
		public Planet system
		{
			[Token(Token = "0x6000FE7")]
			[Address(RVA = "0xE21948", Offset = "0xE21948", VA = "0xE21948")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025A")]
		public bool isCalculatingSystem
		{
			[Token(Token = "0x6000FE9")]
			[Address(RVA = "0xE21968", Offset = "0xE21968", VA = "0xE21968")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FEA")]
			[Address(RVA = "0xE21970", Offset = "0xE21970", VA = "0xE21970")]
			set
			{
			}
		}

		[Token(Token = "0x1700025B")]
		public bool isResolved
		{
			[Token(Token = "0x6000FEB")]
			[Address(RVA = "0xE21978", Offset = "0xE21978", VA = "0xE21978")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FEC")]
			[Address(RVA = "0xE21980", Offset = "0xE21980", VA = "0xE21980")]
			set
			{
			}
		}

		[Token(Token = "0x1700025C")]
		public bool hasMaterialVaration
		{
			[Token(Token = "0x6000FEE")]
			[Address(RVA = "0xE21990", Offset = "0xE21990", VA = "0xE21990")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FED")]
			[Address(RVA = "0xE21988", Offset = "0xE21988", VA = "0xE21988")]
			set
			{
			}
		}

		[Token(Token = "0x1700025D")]
		public Names ename
		{
			[Token(Token = "0x6000FEF")]
			[Address(RVA = "0xE1F710", Offset = "0xE1F710", VA = "0xE1F710")]
			get
			{
				return default(Names);
			}
		}

		[Token(Token = "0x1700025E")]
		public BodyTypes type
		{
			[Token(Token = "0x6000FF0")]
			[Address(RVA = "0xE21998", Offset = "0xE21998", VA = "0xE21998")]
			get
			{
				return default(BodyTypes);
			}
		}

		[Token(Token = "0x1700025F")]
		public float absMag
		{
			[Token(Token = "0x6000FF1")]
			[Address(RVA = "0xE219A0", Offset = "0xE219A0", VA = "0xE219A0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000260")]
		public Vector2 radiusKM
		{
			[Token(Token = "0x6000FF2")]
			[Address(RVA = "0xE219A8", Offset = "0xE219A8", VA = "0xE219A8")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000261")]
		public bool isTextured
		{
			[Token(Token = "0x6000FF3")]
			[Address(RVA = "0xE21A90", Offset = "0xE21A90", VA = "0xE21A90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000262")]
		public bool isInFrustum
		{
			[Token(Token = "0x6000FF4")]
			[Address(RVA = "0xE21AB0", Offset = "0xE21AB0", VA = "0xE21AB0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FF5")]
			[Address(RVA = "0xE21AB8", Offset = "0xE21AB8", VA = "0xE21AB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000263")]
		public bool systemIsInFrustum
		{
			[Token(Token = "0x6000FF6")]
			[Address(RVA = "0xE21AC0", Offset = "0xE21AC0", VA = "0xE21AC0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FF7")]
			[Address(RVA = "0xE21AC8", Offset = "0xE21AC8", VA = "0xE21AC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000264")]
		public bool isVisible
		{
			[Token(Token = "0x6000FF8")]
			[Address(RVA = "0xE21AD0", Offset = "0xE21AD0", VA = "0xE21AD0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FF9")]
			[Address(RVA = "0xE21AD8", Offset = "0xE21AD8", VA = "0xE21AD8")]
			set
			{
			}
		}

		[Token(Token = "0x17000265")]
		public bool isRetained
		{
			[Token(Token = "0x6000FFA")]
			[Address(RVA = "0xE21AE0", Offset = "0xE21AE0", VA = "0xE21AE0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000266")]
		public static List<Planet> RetainedGameObjects
		{
			[Token(Token = "0x6000FFB")]
			[Address(RVA = "0xE21AE8", Offset = "0xE21AE8", VA = "0xE21AE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000267")]
		public float appMag
		{
			[Token(Token = "0x6001000")]
			[Address(RVA = "0xE22384", Offset = "0xE22384", VA = "0xE22384")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001001")]
			[Address(RVA = "0xE2238C", Offset = "0xE2238C", VA = "0xE2238C")]
			set
			{
			}
		}

		[Token(Token = "0x17000268")]
		public double appDiameterAt1AU
		{
			[Token(Token = "0x6001002")]
			[Address(RVA = "0xE22394", Offset = "0xE22394", VA = "0xE22394")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001003")]
			[Address(RVA = "0xE223A0", Offset = "0xE223A0", VA = "0xE223A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000269")]
		public bool isPlanet
		{
			[Token(Token = "0x6001005")]
			[Address(RVA = "0xE223F8", Offset = "0xE223F8", VA = "0xE223F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700026A")]
		public Color spriteColor
		{
			[Token(Token = "0x6001006")]
			[Address(RVA = "0xE2241C", Offset = "0xE2241C", VA = "0xE2241C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700026B")]
		public float colorValue
		{
			[Token(Token = "0x6001008")]
			[Address(RVA = "0xE22430", Offset = "0xE22430", VA = "0xE22430")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700026C")]
		public OrbitalElements orbitalElements
		{
			[Token(Token = "0x600100D")]
			[Address(RVA = "0xE1F718", Offset = "0xE1F718", VA = "0xE1F718")]
			get
			{
				return default(OrbitalElements);
			}
		}

		[Token(Token = "0x1700026D")]
		public Planet parent
		{
			[Token(Token = "0x600100F")]
			[Address(RVA = "0xE21960", Offset = "0xE21960", VA = "0xE21960")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026E")]
		public bool hasGameObject
		{
			[Token(Token = "0x6001019")]
			[Address(RVA = "0xE25D64", Offset = "0xE25D64", VA = "0xE25D64")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700026F")]
		public bool hasSkyView
		{
			[Token(Token = "0x600101C")]
			[Address(RVA = "0xE268DC", Offset = "0xE268DC", VA = "0xE268DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000270")]
		public bool hasSurfaceDetails
		{
			[Token(Token = "0x600101D")]
			[Address(RVA = "0xE268F0", Offset = "0xE268F0", VA = "0xE268F0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000271")]
		public override Vector3 selectablePosition
		{
			[Token(Token = "0x6001023")]
			[Address(RVA = "0xE26FC8", Offset = "0xE26FC8", VA = "0xE26FC8", Slot = "4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001024")]
			[Address(RVA = "0xE26FE0", Offset = "0xE26FE0", VA = "0xE26FE0", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000272")]
		public float systemScale
		{
			[Token(Token = "0x6001025")]
			[Address(RVA = "0xE2702C", Offset = "0xE2702C", VA = "0xE2702C")]
			set
			{
			}
		}

		[Token(Token = "0x17000273")]
		public bool displayOrbitLine
		{
			[Token(Token = "0x6001026")]
			[Address(RVA = "0xE27184", Offset = "0xE27184", VA = "0xE27184")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000274")]
		public override float selectionPriority
		{
			[Token(Token = "0x6001029")]
			[Address(RVA = "0xE275C8", Offset = "0xE275C8", VA = "0xE275C8", Slot = "7")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000275")]
		public Vector3 positionToTrack
		{
			[Token(Token = "0x600102A")]
			[Address(RVA = "0xE275D4", Offset = "0xE275D4", VA = "0xE275D4", Slot = "8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000276")]
		public float fovToFrame
		{
			[Token(Token = "0x600102B")]
			[Address(RVA = "0xE275EC", Offset = "0xE275EC", VA = "0xE275EC", Slot = "9")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000277")]
		public bool isBrowseExpanded
		{
			[Token(Token = "0x600102C")]
			[Address(RVA = "0xE27608", Offset = "0xE27608", VA = "0xE27608", Slot = "21")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000278")]
		public bool isEnabled
		{
			[Token(Token = "0x600102D")]
			[Address(RVA = "0xE27610", Offset = "0xE27610", VA = "0xE27610", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000279")]
		public Sprite icon
		{
			[Token(Token = "0x600102E")]
			[Address(RVA = "0xE27618", Offset = "0xE27618", VA = "0xE27618", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027A")]
		public Sprite systemIcon
		{
			[Token(Token = "0x600102F")]
			[Address(RVA = "0xE278D8", Offset = "0xE278D8", VA = "0xE278D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027B")]
		public BrowsableContainer.BrowseIconSize iconSize
		{
			[Token(Token = "0x6001030")]
			[Address(RVA = "0xE27B08", Offset = "0xE27B08", VA = "0xE27B08", Slot = "11")]
			get
			{
				return default(BrowsableContainer.BrowseIconSize);
			}
		}

		[Token(Token = "0x1700027C")]
		public bool isSmallIcon
		{
			[Token(Token = "0x6001031")]
			[Address(RVA = "0xE27B64", Offset = "0xE27B64", VA = "0xE27B64")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700027D")]
		public string headingText
		{
			[Token(Token = "0x6001032")]
			[Address(RVA = "0xE27B78", Offset = "0xE27B78", VA = "0xE27B78", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027E")]
		public string subHeadingText
		{
			[Token(Token = "0x6001033")]
			[Address(RVA = "0xE27B8C", Offset = "0xE27B8C", VA = "0xE27B8C", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027F")]
		public Sprite expandableIcon
		{
			[Token(Token = "0x6001034")]
			[Address(RVA = "0xE2819C", Offset = "0xE2819C", VA = "0xE2819C", Slot = "15")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000280")]
		public string expandableText
		{
			[Token(Token = "0x6001035")]
			[Address(RVA = "0xE284B0", Offset = "0xE284B0", VA = "0xE284B0", Slot = "14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000281")]
		public bool isExpandable
		{
			[Token(Token = "0x6001036")]
			[Address(RVA = "0xE28568", Offset = "0xE28568", VA = "0xE28568", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000282")]
		public List<IFindableObject> findableChildren
		{
			[Token(Token = "0x600103E")]
			[Address(RVA = "0xE28FA8", Offset = "0xE28FA8", VA = "0xE28FA8", Slot = "16")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0xE21058", Offset = "0xE21058", VA = "0xE21058")]
		public Planet(InstanceData instanceData)
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0xE214BC", Offset = "0xE214BC", VA = "0xE214BC")]
		public void SetSurfaceDetails(SurfaceDetail[] surfaceDetails, int rotationOffset = 0)
		{
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0xE216B4", Offset = "0xE216B4", VA = "0xE216B4")]
		public SurfaceDetail GetSurfaceDetail(string name)
		{
			return null;
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xE217A8", Offset = "0xE217A8", VA = "0xE217A8")]
		private void addChild(Planet child)
		{
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xE1F878", Offset = "0xE1F878", VA = "0xE1F878")]
		public void setOriginalOrreryPos(double xh, double yh, double zh, float orbitCompensation)
		{
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0xE21B74", Offset = "0xE21B74", VA = "0xE21B74")]
		public void RetainGameObject(bool retain)
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0xE21D28", Offset = "0xE21D28", VA = "0xE21D28")]
		public void RetainOrbitLinesForSystem(bool retain)
		{
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0xE21E7C", Offset = "0xE21E7C", VA = "0xE21E7C")]
		public static void FlushRetainList()
		{
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0xE22214", Offset = "0xE22214", VA = "0xE22214")]
		public void RetainSystemGameObjects(bool retain)
		{
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0xE223AC", Offset = "0xE223AC", VA = "0xE223AC")]
		public double GetOrbitalEccentricity(double jd)
		{
			return default(double);
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0xE21238", Offset = "0xE21238", VA = "0xE21238")]
		private Color spriteColorToColor(SpriteColors spriteColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0xE22460", Offset = "0xE22460", VA = "0xE22460")]
		private void assignParentPlanetFromName(Names parentName)
		{
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0xE1D168", Offset = "0xE1D168", VA = "0xE1D168")]
		public void AssignOrbitalElements(Names parentName, OrbitalElements elements)
		{
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0xE22504", Offset = "0xE22504", VA = "0xE22504")]
		public void AssignHorizonsData(PlanetsHorizonsData.ProcessedHorizonsElements processedHorizonsElements)
		{
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0xE225C8", Offset = "0xE225C8", VA = "0xE225C8")]
		public void AssignPlutoOrbitSolver(Names parentName)
		{
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0xE226C4", Offset = "0xE226C4", VA = "0xE226C4")]
		public float orreryOrbitInclination()
		{
			return default(float);
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0xE228E8", Offset = "0xE228E8", VA = "0xE228E8")]
		public void SetEarthOrbitVariables(double jdSinceJ2000, out float ecclipticAngle)
		{
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0xE22A10", Offset = "0xE22A10", VA = "0xE22A10")]
		public void SolveOrbit(double jd)
		{
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0xE22A34", Offset = "0xE22A34", VA = "0xE22A34")]
		private void calculateGeocentricPosition(double jd, out Vector3Double positionEquatorialHeliocentric, out Vector3Double positionGeocentric)
		{
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0xE24574", Offset = "0xE24574", VA = "0xE24574")]
		public void CalculateHeliocentricPositionFromGeocentric(Vector3Double sunPositionGeocentric)
		{
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0xE246B0", Offset = "0xE246B0", VA = "0xE246B0")]
		public Vector3Double GetPositionHeliocentricAtTime(double jd)
		{
			return default(Vector3Double);
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0xE24880", Offset = "0xE24880", VA = "0xE24880")]
		public void CalculatePositionHeliocentricAtTime(double jd)
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0xE24A18", Offset = "0xE24A18", VA = "0xE24A18")]
		public double GetHeliocentricDistanceFrom(Vector3Double positionHeliocentric)
		{
			return default(double);
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0xE24AB0", Offset = "0xE24AB0", VA = "0xE24AB0")]
		public double GetHeliocentricDistanceFromParent()
		{
			return default(double);
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0xE24B18", Offset = "0xE24B18", VA = "0xE24B18")]
		public void GenerateGameObject(Transform ecliptic)
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0xE25D74", Offset = "0xE25D74", VA = "0xE25D74")]
		public void DestroyGameObject()
		{
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xE25DA8", Offset = "0xE25DA8", VA = "0xE25DA8")]
		public void UpdateGameObject(double jd, Transform ecclipticTransform, Vector3 sunLightDirection, CameraWrapper cameraWrapper, float screenPercentage)
		{
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0xE26900", Offset = "0xE26900", VA = "0xE26900")]
		public bool RayHit(Ray ray)
		{
			return default(bool);
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0xE26960", Offset = "0xE26960", VA = "0xE26960")]
		public void UpdateSurfaceDetailLabels(Ray ray)
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0xE26BE8", Offset = "0xE26BE8", VA = "0xE26BE8")]
		public bool GetSurfaceVectors(Vector3 normal, out Vector3 worldPosition, out Vector3 worldNormal)
		{
			return default(bool);
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0xE26CEC", Offset = "0xE26CEC", VA = "0xE26CEC", Slot = "27")]
		public SelectableObjectActions GetTapAction()
		{
			return default(SelectableObjectActions);
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0xE26F18", Offset = "0xE26F18", VA = "0xE26F18", Slot = "28")]
		public void OnTap()
		{
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0xE272D0", Offset = "0xE272D0", VA = "0xE272D0", Slot = "6")]
		public override void SetSelected(bool selected)
		{
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0xE275B0", Offset = "0xE275B0", VA = "0xE275B0")]
		public AudioSource AddAudioSource()
		{
			return null;
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xE28654", Offset = "0xE28654", VA = "0xE28654", Slot = "19")]
		public void OnBrowseTap()
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xE288DC", Offset = "0xE288DC", VA = "0xE288DC", Slot = "20")]
		public void OnExpandTap()
		{
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xE288F0", Offset = "0xE288F0", VA = "0xE288F0", Slot = "22")]
		public int CompareDistance(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xE28C90", Offset = "0xE28C90", VA = "0xE28C90", Slot = "23")]
		public int CompareName(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0xE28D9C", Offset = "0xE28D9C", VA = "0xE28D9C", Slot = "24")]
		public int CompareSize(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xE28EDC", Offset = "0xE28EDC", VA = "0xE28EDC", Slot = "25")]
		public int CompareBrightness(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0xE28FA0", Offset = "0xE28FA0", VA = "0xE28FA0", Slot = "26")]
		public int CompareDate(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0xE29C48", Offset = "0xE29C48", VA = "0xE29C48", Slot = "29")]
		public List<InformationElement.Types> InformationDisplayable()
		{
			return null;
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0xE2A230", Offset = "0xE2A230", VA = "0xE2A230", Slot = "30")]
		public void UpdateInformation()
		{
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0xE2A37C", Offset = "0xE2A37C", VA = "0xE2A37C", Slot = "31")]
		public string GetBodyTypeString()
		{
			return null;
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0xE28090", Offset = "0xE28090", VA = "0xE28090", Slot = "32")]
		public BodyTypes GetBodyType()
		{
			return default(BodyTypes);
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0xE2A484", Offset = "0xE2A484", VA = "0xE2A484", Slot = "41")]
		public ulong GetPopulation(double jd)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0xE2A540", Offset = "0xE2A540", VA = "0xE2A540", Slot = "33")]
		public double GetDistanceFromCurrentPlanet(out Distance.Units distanceUnits)
		{
			return default(double);
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0xE28154", Offset = "0xE28154", VA = "0xE28154", Slot = "42")]
		public string GetParentName()
		{
			return null;
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0xE2A620", Offset = "0xE2A620", VA = "0xE2A620", Slot = "43")]
		public double GetDistanceFromParent(out Distance.Units distanceUnits)
		{
			return default(double);
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0xE28184", Offset = "0xE28184", VA = "0xE28184", Slot = "44")]
		public ushort GetSatelliteCount()
		{
			return default(ushort);
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0xE2817C", Offset = "0xE2817C", VA = "0xE2817C", Slot = "45")]
		public ushort GetOrderByTypeInSystem()
		{
			return default(ushort);
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0xE2A768", Offset = "0xE2A768", VA = "0xE2A768", Slot = "46")]
		public double GetOrbitalPeriodDays(double jd)
		{
			return default(double);
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0xE2A7F0", Offset = "0xE2A7F0", VA = "0xE2A7F0", Slot = "47")]
		public float GetRotationPeriodDays()
		{
			return default(float);
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0xE2A800", Offset = "0xE2A800", VA = "0xE2A800", Slot = "48")]
		public Composition GetAtmosphericComposition()
		{
			return null;
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0xE2A88C", Offset = "0xE2A88C", VA = "0xE2A88C", Slot = "49")]
		public float GetRadius(out Distance.Units distanceUnits)
		{
			return default(float);
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0xE2A8D8", Offset = "0xE2A8D8", VA = "0xE2A8D8", Slot = "50")]
		public float GetAxialTilt()
		{
			return default(float);
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0xE2A8E0", Offset = "0xE2A8E0", VA = "0xE2A8E0", Slot = "34")]
		public float GetApparentMagnitude()
		{
			return default(float);
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0xE2A8E8", Offset = "0xE2A8E8", VA = "0xE2A8E8", Slot = "35")]
		public float GetAbsoluteMagnitude()
		{
			return default(float);
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0xE2A8F4", Offset = "0xE2A8F4", VA = "0xE2A8F4", Slot = "36")]
		public string GetConstellationName()
		{
			return null;
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0xE2A9C0", Offset = "0xE2A9C0", VA = "0xE2A9C0", Slot = "37")]
		public float GetRA()
		{
			return default(float);
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0xE2A9CC", Offset = "0xE2A9CC", VA = "0xE2A9CC", Slot = "38")]
		public float GetDEC()
		{
			return default(float);
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0xE2A9D8", Offset = "0xE2A9D8", VA = "0xE2A9D8", Slot = "40")]
		public float GetAzimuth()
		{
			return default(float);
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0xE2A9E4", Offset = "0xE2A9E4", VA = "0xE2A9E4", Slot = "39")]
		public float GetAltitude()
		{
			return default(float);
		}
	}
}
[Token(Token = "0x200024E")]
public class PlanetBlooms : SCParticles
{
	[Token(Token = "0x200024F")]
	public struct Bloom
	{
		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 position;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float size;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color color;

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xC9350C", Offset = "0xC9350C", VA = "0xC9350C")]
		public Bloom(Vector3 position, float size, Color color)
		{
		}
	}

	[Token(Token = "0x40009E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int bloomsMaximum;

	[Token(Token = "0x40009E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float bloomScaleFactor;

	[Token(Token = "0x40009E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Material material;

	[Token(Token = "0x40009E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Bloom[] maBlooms;

	[Token(Token = "0x40009EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int miBloomsCount;

	[Token(Token = "0x6001069")]
	[Address(RVA = "0xC93174", Offset = "0xC93174", VA = "0xC93174")]
	public PlanetBlooms()
	{
	}

	[Token(Token = "0x600106A")]
	[Address(RVA = "0xC93208", Offset = "0xC93208", VA = "0xC93208", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600106B")]
	[Address(RVA = "0xC932B4", Offset = "0xC932B4", VA = "0xC932B4")]
	public void AddBloom(Vector3 position, float size, Color color)
	{
	}

	[Token(Token = "0x600106C")]
	[Address(RVA = "0xC93370", Offset = "0xC93370", VA = "0xC93370")]
	private new void Update()
	{
	}
}
namespace Planets
{
	[Token(Token = "0x2000250")]
	public class Ring
	{
		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly float mfInnerRadiusInKm;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private readonly float mfOuterRadiusInKm;

		[Token(Token = "0x17000295")]
		public float innerRadiusInKm
		{
			[Token(Token = "0x600106F")]
			[Address(RVA = "0xE4FE2C", Offset = "0xE4FE2C", VA = "0xE4FE2C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000296")]
		public float outerRadiusInKm
		{
			[Token(Token = "0x6001070")]
			[Address(RVA = "0xE4FE34", Offset = "0xE4FE34", VA = "0xE4FE34")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0xE35880", Offset = "0xE35880", VA = "0xE35880")]
		public Ring(float innerRadiusInKm, float outerRadiusInKm)
		{
		}
	}
	[Token(Token = "0x2000251")]
	public class AxialOrientation
	{
		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly float mfTiltRA;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private readonly float mfTiltDec;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly float mfRotationOffset;

		[Token(Token = "0x17000297")]
		public float tiltRA
		{
			[Token(Token = "0x6001072")]
			[Address(RVA = "0xD30AF0", Offset = "0xD30AF0", VA = "0xD30AF0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000298")]
		public float tiltDec
		{
			[Token(Token = "0x6001073")]
			[Address(RVA = "0xD30AF8", Offset = "0xD30AF8", VA = "0xD30AF8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000299")]
		public float rotationOffset
		{
			[Token(Token = "0x6001074")]
			[Address(RVA = "0xD30B00", Offset = "0xD30B00", VA = "0xD30B00")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0xD30A14", Offset = "0xD30A14", VA = "0xD30A14")]
		public AxialOrientation(float tiltRA, float tiltDec, float rotationOffset = 0f)
		{
		}
	}
	[Token(Token = "0x2000252")]
	public enum Names
	{
		[Token(Token = "0x40009F4")]
		Null = 0,
		[Token(Token = "0x40009F5")]
		Sun = 1,
		[Token(Token = "0x40009F6")]
		Mercury = 2,
		[Token(Token = "0x40009F7")]
		Venus = 3,
		[Token(Token = "0x40009F8")]
		Earth = 4,
		[Token(Token = "0x40009F9")]
		Mars = 5,
		[Token(Token = "0x40009FA")]
		Jupiter = 6,
		[Token(Token = "0x40009FB")]
		Saturn = 7,
		[Token(Token = "0x40009FC")]
		Uranus = 8,
		[Token(Token = "0x40009FD")]
		Neptune = 9,
		[Token(Token = "0x40009FE")]
		Pluto = 10,
		[Token(Token = "0x40009FF")]
		Moon = 11,
		[Token(Token = "0x4000A00")]
		Phobos = 12,
		[Token(Token = "0x4000A01")]
		Deimos = 13,
		[Token(Token = "0x4000A02")]
		Io = 14,
		[Token(Token = "0x4000A03")]
		Europa = 15,
		[Token(Token = "0x4000A04")]
		Ganymede = 16,
		[Token(Token = "0x4000A05")]
		Callisto = 17,
		[Token(Token = "0x4000A06")]
		Amalthea = 18,
		[Token(Token = "0x4000A07")]
		Himalia = 19,
		[Token(Token = "0x4000A08")]
		Elara = 20,
		[Token(Token = "0x4000A09")]
		Pasiphae = 21,
		[Token(Token = "0x4000A0A")]
		Sinope = 22,
		[Token(Token = "0x4000A0B")]
		Lysithea = 23,
		[Token(Token = "0x4000A0C")]
		Carme = 24,
		[Token(Token = "0x4000A0D")]
		Ananke = 25,
		[Token(Token = "0x4000A0E")]
		Leda = 26,
		[Token(Token = "0x4000A0F")]
		Thebe = 27,
		[Token(Token = "0x4000A10")]
		Metis = 28,
		[Token(Token = "0x4000A11")]
		Adrastea = 29,
		[Token(Token = "0x4000A12")]
		Pan = 30,
		[Token(Token = "0x4000A13")]
		Daphnis = 31,
		[Token(Token = "0x4000A14")]
		Epimetheus = 32,
		[Token(Token = "0x4000A15")]
		Janus = 33,
		[Token(Token = "0x4000A16")]
		Pandora = 34,
		[Token(Token = "0x4000A17")]
		Prometheus = 35,
		[Token(Token = "0x4000A18")]
		Atlas = 36,
		[Token(Token = "0x4000A19")]
		Mimas = 37,
		[Token(Token = "0x4000A1A")]
		Enceladus = 38,
		[Token(Token = "0x4000A1B")]
		Tethys = 39,
		[Token(Token = "0x4000A1C")]
		Dione = 40,
		[Token(Token = "0x4000A1D")]
		Rhea = 41,
		[Token(Token = "0x4000A1E")]
		Titan = 42,
		[Token(Token = "0x4000A1F")]
		Hyperion = 43,
		[Token(Token = "0x4000A20")]
		Iapetus = 44,
		[Token(Token = "0x4000A21")]
		Phoebe = 45,
		[Token(Token = "0x4000A22")]
		Telesto = 46,
		[Token(Token = "0x4000A23")]
		Calypso = 47,
		[Token(Token = "0x4000A24")]
		Helene = 48,
		[Token(Token = "0x4000A25")]
		Polydeuces = 49,
		[Token(Token = "0x4000A26")]
		Fornjot = 50,
		[Token(Token = "0x4000A27")]
		Loge = 51,
		[Token(Token = "0x4000A28")]
		Ymir = 52,
		[Token(Token = "0x4000A29")]
		Kari = 53,
		[Token(Token = "0x4000A2A")]
		Surtur = 54,
		[Token(Token = "0x4000A2B")]
		Fenrir = 55,
		[Token(Token = "0x4000A2C")]
		Ariel = 56,
		[Token(Token = "0x4000A2D")]
		Umbriel = 57,
		[Token(Token = "0x4000A2E")]
		Titania = 58,
		[Token(Token = "0x4000A2F")]
		Oberon = 59,
		[Token(Token = "0x4000A30")]
		Miranda = 60,
		[Token(Token = "0x4000A31")]
		Puck = 61,
		[Token(Token = "0x4000A32")]
		Sycorax = 62,
		[Token(Token = "0x4000A33")]
		Belinda = 63,
		[Token(Token = "0x4000A34")]
		Juliet = 64,
		[Token(Token = "0x4000A35")]
		Cressida = 65,
		[Token(Token = "0x4000A36")]
		Caliban = 66,
		[Token(Token = "0x4000A37")]
		Portia = 67,
		[Token(Token = "0x4000A38")]
		Margaret = 68,
		[Token(Token = "0x4000A39")]
		Mab = 69,
		[Token(Token = "0x4000A3A")]
		Ferdinand = 70,
		[Token(Token = "0x4000A3B")]
		Triton = 71,
		[Token(Token = "0x4000A3C")]
		Nereid = 72,
		[Token(Token = "0x4000A3D")]
		Proteus = 73,
		[Token(Token = "0x4000A3E")]
		Larissa = 74,
		[Token(Token = "0x4000A3F")]
		Neso = 75,
		[Token(Token = "0x4000A40")]
		Laomedeia = 76,
		[Token(Token = "0x4000A41")]
		Sao = 77,
		[Token(Token = "0x4000A42")]
		Psamathe = 78,
		[Token(Token = "0x4000A43")]
		Halimede = 79,
		[Token(Token = "0x4000A44")]
		Naiad = 80,
		[Token(Token = "0x4000A45")]
		Galatea = 81,
		[Token(Token = "0x4000A46")]
		Despina = 82,
		[Token(Token = "0x4000A47")]
		Thalassa = 83,
		[Token(Token = "0x4000A48")]
		Charon = 84,
		[Token(Token = "0x4000A49")]
		Styx = 85,
		[Token(Token = "0x4000A4A")]
		Nix = 86,
		[Token(Token = "0x4000A4B")]
		Kerberos = 87,
		[Token(Token = "0x4000A4C")]
		Hydra = 88,
		[Token(Token = "0x4000A4D")]
		MainBodyCount = 89,
		[Token(Token = "0x4000A4E")]
		Ceres = 89,
		[Token(Token = "0x4000A4F")]
		Vesta = 90,
		[Token(Token = "0x4000A50")]
		Pallas = 91,
		[Token(Token = "0x4000A51")]
		Eris = 92,
		[Token(Token = "0x4000A52")]
		Chiron = 93,
		[Token(Token = "0x4000A53")]
		Sedna = 94,
		[Token(Token = "0x4000A54")]
		Hektor = 95,
		[Token(Token = "0x4000A55")]
		Gaspra = 96,
		[Token(Token = "0x4000A56")]
		Eros = 97,
		[Token(Token = "0x4000A57")]
		Lutetia = 98,
		[Token(Token = "0x4000A58")]
		Haumea = 99,
		[Token(Token = "0x4000A59")]
		Makemake = 100,
		[Token(Token = "0x4000A5A")]
		Orcus = 101,
		[Token(Token = "0x4000A5B")]
		Quaoar = 102,
		[Token(Token = "0x4000A5C")]
		_2007OR10 = 103,
		[Token(Token = "0x4000A5D")]
		_9Metis = 104,
		[Token(Token = "0x4000A5E")]
		_10Hygiea = 105,
		[Token(Token = "0x4000A5F")]
		_31Euphrosyne = 106,
		[Token(Token = "0x4000A60")]
		_52Europa = 107,
		[Token(Token = "0x4000A61")]
		_87Sylvia = 108,
		[Token(Token = "0x4000A62")]
		_253Mathilde = 109,
		[Token(Token = "0x4000A63")]
		_511Davida = 110,
		[Token(Token = "0x4000A64")]
		_532Herculina = 111,
		[Token(Token = "0x4000A65")]
		_704Interamnia = 112
	}
	[Token(Token = "0x2000253")]
	public enum SpriteColors
	{
		[Token(Token = "0x4000A67")]
		Blue,
		[Token(Token = "0x4000A68")]
		Cyan,
		[Token(Token = "0x4000A69")]
		White,
		[Token(Token = "0x4000A6A")]
		Beige,
		[Token(Token = "0x4000A6B")]
		Yellow,
		[Token(Token = "0x4000A6C")]
		Orange,
		[Token(Token = "0x4000A6D")]
		Red
	}
	[Token(Token = "0x2000254")]
	[Flags]
	public enum MaterialProperties
	{
		[Token(Token = "0x4000A6F")]
		NoMaterial = 0,
		[Token(Token = "0x4000A70")]
		NothingToPass = 1,
		[Token(Token = "0x4000A71")]
		LightDirection = 2,
		[Token(Token = "0x4000A72")]
		CameraDirection = 4,
		[Token(Token = "0x4000A73")]
		CameraWorldPosition = 8,
		[Token(Token = "0x4000A74")]
		CloudOpacity = 0x10,
		[Token(Token = "0x4000A75")]
		Generic = 0x20,
		[Token(Token = "0x4000A76")]
		Generic01 = 0x40,
		[Token(Token = "0x4000A77")]
		Generic02 = 0x80,
		[Token(Token = "0x4000A78")]
		Generic03 = 0x100,
		[Token(Token = "0x4000A79")]
		Generic04 = 0x200,
		[Token(Token = "0x4000A7A")]
		Generic05 = 0x400
	}
	[Token(Token = "0x2000255")]
	public struct Dimensions
	{
		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Vector3 mvDimensionsKM;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private readonly bool mbIsIrregular;

		[Token(Token = "0x1700029A")]
		public Vector3 dimensionsKM
		{
			[Token(Token = "0x6001076")]
			[Address(RVA = "0xD3A1B4", Offset = "0xD3A1B4", VA = "0xD3A1B4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700029B")]
		public bool isIrregular
		{
			[Token(Token = "0x6001077")]
			[Address(RVA = "0xD3A1CC", Offset = "0xD3A1CC", VA = "0xD3A1CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xD3A190", Offset = "0xD3A190", VA = "0xD3A190")]
		public Dimensions(Vector3 dimensionsKM, bool isIrregular)
		{
		}
	}
	[Token(Token = "0x2000256")]
	public class PlanetFactory
	{
		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AxialOrientation marsAxialOrientation;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static AxialOrientation jupiterAxialOrientation;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static AxialOrientation saturnAxialOrientation;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static AxialOrientation uranusAxialOrientation;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static AxialOrientation neptuneAxialOrientation;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static AxialOrientation plutoAxialOrientation;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly IList<Planet.InstanceData> saPlanetInstanceData;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static Names[] saPlanetNamesWithMaterialVariations;

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xE2B238", Offset = "0xE2B238", VA = "0xE2B238")]
		public PlanetFactory()
		{
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xE2B240", Offset = "0xE2B240", VA = "0xE2B240")]
		private static Dimensions createDimensions(float x, float z, float y)
		{
			return default(Dimensions);
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xE2B344", Offset = "0xE2B344", VA = "0xE2B344")]
		private static Dimensions createRadius(float equatorialRadius, float polarRadius)
		{
			return default(Dimensions);
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xE2B3AC", Offset = "0xE2B3AC", VA = "0xE2B3AC")]
		private static Dimensions createDiameter(float equatorialDiameter, float polarDiameter)
		{
			return default(Dimensions);
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xE2B42C", Offset = "0xE2B42C", VA = "0xE2B42C")]
		public static void BuildSolarSystemBodies(out Dictionary<Names, Planet> allObjectsDictionary, out List<Planet> asteroidsList, out List<Planet> kboList, out List<Planet> centaurList)
		{
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xE2C2B4", Offset = "0xE2C2B4", VA = "0xE2C2B4")]
		public static void SetPlanetsWithMaterialVariations()
		{
		}
	}
}
[Token(Token = "0x2000257")]
public static class PlanetGenericMesh
{
	[Token(Token = "0x4000A85")]
	private const int DEC_LINES_COUNT = 9;

	[Token(Token = "0x4000A86")]
	private const int DEC_LINE_SEGMENTS = 36;

	[Token(Token = "0x4000A87")]
	private const int RA_LINE_COUNT = 18;

	[Token(Token = "0x4000A88")]
	private const int RA_LINE_SEGMENTS = 34;

	[Token(Token = "0x4000A89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float RADIUS;

	[Token(Token = "0x4000A8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static float LINEWIDTH;

	[Token(Token = "0x4000A8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static LineRenderMesh sLineRenderMesh;

	[Token(Token = "0x600107F")]
	[Address(RVA = "0xC93544", Offset = "0xC93544", VA = "0xC93544")]
	public static void Assign(GameObject gameObject, Material inMaterial, out Material assignedMaterial)
	{
	}

	[Token(Token = "0x6001080")]
	[Address(RVA = "0xC937C0", Offset = "0xC937C0", VA = "0xC937C0")]
	private static LineRenderMesh createGridSphereMesh()
	{
		return null;
	}
}
namespace Planets
{
	[Token(Token = "0x2000258")]
	public class PlanetGroup : IFindableObject
	{
		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected Sprite mIcon;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected Sprite mExpandableIcon;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool mbIsBrowseExpanded;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected List<IFindableObject> mFindableChildren;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private HashSet<Names> maNames;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private string msHeading;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string msSubHeading;

		[Token(Token = "0x1700029C")]
		public bool isBrowseExpanded
		{
			[Token(Token = "0x6001083")]
			[Address(RVA = "0xE358A8", Offset = "0xE358A8", VA = "0xE358A8", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700029D")]
		public bool isEnabled
		{
			[Token(Token = "0x6001084")]
			[Address(RVA = "0xE358B0", Offset = "0xE358B0", VA = "0xE358B0", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700029E")]
		public bool isExpandable
		{
			[Token(Token = "0x6001085")]
			[Address(RVA = "0xE358B8", Offset = "0xE358B8", VA = "0xE358B8", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700029F")]
		public string expandableText
		{
			[Token(Token = "0x6001086")]
			[Address(RVA = "0xE358C0", Offset = "0xE358C0", VA = "0xE358C0", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A0")]
		public Sprite icon
		{
			[Token(Token = "0x6001087")]
			[Address(RVA = "0xE358C8", Offset = "0xE358C8", VA = "0xE358C8", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A1")]
		public Sprite expandableIcon
		{
			[Token(Token = "0x6001088")]
			[Address(RVA = "0xE358D0", Offset = "0xE358D0", VA = "0xE358D0", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A2")]
		public BrowsableContainer.BrowseIconSize iconSize
		{
			[Token(Token = "0x6001089")]
			[Address(RVA = "0xE358D8", Offset = "0xE358D8", VA = "0xE358D8", Slot = "5")]
			get
			{
				return default(BrowsableContainer.BrowseIconSize);
			}
		}

		[Token(Token = "0x170002A3")]
		public string headingText
		{
			[Token(Token = "0x600108A")]
			[Address(RVA = "0xE358E0", Offset = "0xE358E0", VA = "0xE358E0", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A4")]
		public string subHeadingText
		{
			[Token(Token = "0x600108B")]
			[Address(RVA = "0xE358E8", Offset = "0xE358E8", VA = "0xE358E8", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A5")]
		public List<IFindableObject> findableChildren
		{
			[Token(Token = "0x6001093")]
			[Address(RVA = "0xE28C88", Offset = "0xE28C88", VA = "0xE28C88", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0xE296E8", Offset = "0xE296E8", VA = "0xE296E8")]
		public PlanetGroup(string headingText, string subHeadingText, List<Planet> planetList, string iconPath, string expandableIconPath)
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0xE358F0", Offset = "0xE358F0", VA = "0xE358F0", Slot = "13")]
		public void OnBrowseTap()
		{
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0xE358F4", Offset = "0xE358F4", VA = "0xE358F4", Slot = "14")]
		public void OnExpandTap()
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0xE35998", Offset = "0xE35998", VA = "0xE35998", Slot = "16")]
		public int CompareDistance(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0xE35B0C", Offset = "0xE35B0C", VA = "0xE35B0C", Slot = "17")]
		public int CompareName(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0xE35C04", Offset = "0xE35C04", VA = "0xE35C04", Slot = "18")]
		public int CompareSize(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0xE35C0C", Offset = "0xE35C0C", VA = "0xE35C0C", Slot = "19")]
		public int CompareBrightness(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0xE35C14", Offset = "0xE35C14", VA = "0xE35C14", Slot = "20")]
		public int CompareDate(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xE28C0C", Offset = "0xE28C0C", VA = "0xE28C0C")]
		public bool ContainsBodyNamed(Names name)
		{
			return default(bool);
		}
	}
}
[Token(Token = "0x2000259")]
public static class PlanetMesh
{
	[Token(Token = "0x4000A93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static QuadSphereMesh sQuadSphereMesh;

	[Token(Token = "0x6001095")]
	[Address(RVA = "0xC99FA0", Offset = "0xC99FA0", VA = "0xC99FA0")]
	private static int segmentsPerSide()
	{
		return default(int);
	}

	[Token(Token = "0x6001096")]
	[Address(RVA = "0xC9A030", Offset = "0xC9A030", VA = "0xC9A030")]
	public static void Setup()
	{
	}

	[Token(Token = "0x6001097")]
	[Address(RVA = "0xC9A0C0", Offset = "0xC9A0C0", VA = "0xC9A0C0")]
	public static void Assign(GameObject gameObject, Material inMaterial, out Material assignedMaterial)
	{
	}

	[Token(Token = "0x6001098")]
	[Address(RVA = "0xC9A28C", Offset = "0xC9A28C", VA = "0xC9A28C")]
	public static MeshRenderer Assign(GameObject gameObject)
	{
		return null;
	}
}
[Token(Token = "0x200025A")]
public class AtmosphereRenderable : MonoBehaviour
{
	[Token(Token = "0x4000A94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform sunTransform;

	[Token(Token = "0x4000A95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float sunGlowSize;

	[Token(Token = "0x4000A96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private MeshRenderer mMeshRenderer;

	[Token(Token = "0x4000A97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 mvPlanetDimensions;

	[Token(Token = "0x4000A98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float atmosphereHeightFraction;

	[Token(Token = "0x4000A99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private PlanetRenderable mParent;

	[Token(Token = "0x170002A6")]
	public Vector3 planetDimensions
	{
		[Token(Token = "0x600109A")]
		[Address(RVA = "0x1633C8", Offset = "0x1633C8", VA = "0x1633C8")]
		set
		{
		}
	}

	[Token(Token = "0x170002A7")]
	public float heightFraction
	{
		[Token(Token = "0x600109B")]
		[Address(RVA = "0x1633D4", Offset = "0x1633D4", VA = "0x1633D4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6001099")]
	[Address(RVA = "0x1633B4", Offset = "0x1633B4", VA = "0x1633B4")]
	public AtmosphereRenderable()
	{
	}

	[Token(Token = "0x600109C")]
	[Address(RVA = "0x1633DC", Offset = "0x1633DC", VA = "0x1633DC")]
	private void Start()
	{
	}

	[Token(Token = "0x600109D")]
	[Address(RVA = "0x1633E0", Offset = "0x1633E0", VA = "0x1633E0")]
	private void Update()
	{
	}

	[Token(Token = "0x600109E")]
	[Address(RVA = "0x1634B0", Offset = "0x1634B0", VA = "0x1634B0")]
	public void Setup(string planetName, PlanetRenderable lParent)
	{
	}

	[Token(Token = "0x600109F")]
	[Address(RVA = "0x1635D0", Offset = "0x1635D0", VA = "0x1635D0")]
	public void SetProperties(Vector3 sunPositionWorld, Vector3 camPositionWorld, float planetRadiusKM)
	{
	}
}
namespace Planets
{
	[Token(Token = "0x200025B")]
	public abstract class CelestialBodyRenderable
	{
		[Token(Token = "0x4000A9A")]
		private const string PLANET_PROVISIONAL_TEXTURE_PATH = "Textures/PlanetTextures/Provisional/";

		[Token(Token = "0x4000A9B")]
		private const float SIZE_ON_SCREEN_FOR_LABEL_COLLISIONS = 0.05f;

		[Token(Token = "0x4000A9C")]
		private const string PLANET_PREFAB_PATH = "Prefabs/Planets/";

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected GameObject mGameObject;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private GameObject mInsideGameObject;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Material mPlanetMaterial;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Material mInsidePlanetMaterial;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool mbIsIrregular;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool mbCameraInside;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected string msName;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Collider mCollider;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected MaterialLoader mMaterialLoader;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material sProvisionalMaterial;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected bool mbPreview;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		protected bool mbArtistImpression;

		[Token(Token = "0x170002A8")]
		public GameObject gameObject
		{
			[Token(Token = "0x60010A2")]
			[Address(RVA = "0xD33924", Offset = "0xD33924", VA = "0xD33924")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A9")]
		public bool cameraInside
		{
			[Token(Token = "0x60010A3")]
			[Address(RVA = "0xD3392C", Offset = "0xD3392C", VA = "0xD3392C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002AA")]
		public bool materialIsLoading
		{
			[Token(Token = "0x60010A4")]
			[Address(RVA = "0xD33934", Offset = "0xD33934", VA = "0xD33934")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xD32DAC", Offset = "0xD32DAC", VA = "0xD32DAC")]
		static CelestialBodyRenderable()
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xD32EC0", Offset = "0xD32EC0", VA = "0xD32EC0")]
		protected CelestialBodyRenderable(string name, Transform ecliptic, bool isIrregular, bool enableCollider, string materialPath, MaterialProperties materialProperties, int loadPriority, bool addMipmapBias, bool isPreview)
		{
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xD339F4", Offset = "0xD339F4", VA = "0xD339F4")]
		protected void Update(Bounds bounds, float screenPercentage)
		{
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0xD336A8", Offset = "0xD336A8", VA = "0xD336A8")]
		private void createInsidePlanet(Transform parent)
		{
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0xD3447C", Offset = "0xD3447C", VA = "0xD3447C")]
		public bool RayCastSurface(Ray ray, out Vector3 normal)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0xD34654", Offset = "0xD34654", VA = "0xD34654")]
		public void GetSurfaceVectors(Vector3 normal, out Vector3 worldPosition, out Vector3 worldNormal)
		{
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0xD34730", Offset = "0xD34730", VA = "0xD34730")]
		public AudioSource AddAudioSource()
		{
			return null;
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xD347C8", Offset = "0xD347C8", VA = "0xD347C8")]
		public void Destroy()
		{
		}
	}
}
[Token(Token = "0x200025C")]
public struct AdvancedAtmosphere
{
	[Token(Token = "0x4000AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float hdrExposure;

	[Token(Token = "0x4000AAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public Vector3 waveLength;

	[Token(Token = "0x4000AAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ESun;

	[Token(Token = "0x4000AAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float kr;

	[Token(Token = "0x4000AAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float km;

	[Token(Token = "0x4000AAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float g;

	[Token(Token = "0x4000AAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float scaleDepth;

	[Token(Token = "0x60010AB")]
	[Address(RVA = "0x160E7C", Offset = "0x160E7C", VA = "0x160E7C")]
	public AdvancedAtmosphere(float hdrExposure, Vector3 waveLength, float ESun, float kr, float km, float g, float scaleDepth)
	{
	}
}
[Token(Token = "0x200025D")]
public class PlanetMeshTest : MonoBehaviour
{
	[Token(Token = "0x4000AB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Material material;

	[Token(Token = "0x4000AB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform light;

	[Token(Token = "0x4000AB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Transform camera;

	[Token(Token = "0x4000AB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float rotationSpeed;

	[Token(Token = "0x4000AB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float planetSize;

	[Token(Token = "0x4000AB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AtmosphereRenderable atmosphereRenderable;

	[Token(Token = "0x4000AB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool isRingedPlanet;

	[Token(Token = "0x60010AC")]
	[Address(RVA = "0xD2D820", Offset = "0xD2D820", VA = "0xD2D820")]
	public PlanetMeshTest()
	{
	}

	[Token(Token = "0x60010AD")]
	[Address(RVA = "0xD2D844", Offset = "0xD2D844", VA = "0xD2D844")]
	private void Start()
	{
	}

	[Token(Token = "0x60010AE")]
	[Address(RVA = "0xD2D9D4", Offset = "0xD2D9D4", VA = "0xD2D9D4")]
	private void Update()
	{
	}
}
namespace Planets
{
	[Token(Token = "0x200025E")]
	public class PlanetRenderable : CelestialBodyRenderable
	{
		[Token(Token = "0x4000AB7")]
		private const float CLOUD_OPACITY_MIN = 0.3f;

		[Token(Token = "0x4000AB8")]
		private const float CLOUD_OPACITY_MAX = 0.9f;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private AtmosphereRenderable mAtmosphereRenderable;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Planet.InstanceData mInstanceData;

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0xE25990", Offset = "0xE25990", VA = "0xE25990")]
		public PlanetRenderable(Planet.InstanceData instanceData, Transform ecliptic, bool enableCollider, string materialPath, bool lbPreview = false)
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0xE35C1C", Offset = "0xE35C1C", VA = "0xE35C1C", Slot = "4")]
		public virtual void Update(double jd, Bounds bounds, Transform ecclipticTransform, Vector3 sunLightDirection, CameraWrapper cameraWrapper, float screenPercentage, Vector3Double parentDelta, Planet planet)
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0xE363CC", Offset = "0xE363CC", VA = "0xE363CC")]
		private bool shaderHasFlag(MaterialProperties flag)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200025F")]
	public class RingedPlanetRenderable : PlanetRenderable
	{
		[Token(Token = "0x4000ABB")]
		private const int RING_SEGMENTS = 128;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject mRingGameObject;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Material mRingMaterial;

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0xE25484", Offset = "0xE25484", VA = "0xE25484")]
		public RingedPlanetRenderable(Planet.InstanceData instanceData, Transform ecliptic, bool enableCollider, string materialPath, bool lbPreview = false)
		{
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0xE4FE3C", Offset = "0xE4FE3C", VA = "0xE4FE3C", Slot = "4")]
		public override void Update(double jd, Bounds bounds, Transform ecclipticTransform, Vector3 sunLightDirection, CameraWrapper cameraWrapper, float screenPercentage, Vector3Double parentDelta, Planet planet)
		{
		}
	}
	[Token(Token = "0x2000260")]
	public class SolarProminences : MonoBehaviour
	{
		[Token(Token = "0x2000261")]
		public struct Vertex
		{
			[Token(Token = "0x4000AC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4000AC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector2 uv;

			[Token(Token = "0x4000ACA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Color color;

			[Token(Token = "0x4000ACB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int index;

			[Token(Token = "0x60010B7")]
			[Address(RVA = "0xE51524", Offset = "0xE51524", VA = "0xE51524")]
			public Vertex(Vector3 position, Vector2 uv, Color color)
			{
			}
		}

		[Token(Token = "0x4000ABE")]
		private const float SHADER_ANIMATION_SPEED = 0.05f;

		[Token(Token = "0x4000ABF")]
		private const float SIZE_MIN = 0.02f;

		[Token(Token = "0x4000AC0")]
		private const float SIZE_MAX = 0.03f;

		[Token(Token = "0x4000AC1")]
		private const int COUNT = 128;

		[Token(Token = "0x4000AC2")]
		private const float SPHERE_RADIUS = 0.5f;

		[Token(Token = "0x4000AC3")]
		private const int SEGMENTS_COUNT = 16;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private MeshRenderer mMeshRenderer;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float mfSpectralColor;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float mfTemperature;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int siIndex;

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0xE501D0", Offset = "0xE501D0", VA = "0xE501D0")]
		public SolarProminences()
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0xE501D8", Offset = "0xE501D8", VA = "0xE501D8")]
		private void Start()
		{
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xE51310", Offset = "0xE51310", VA = "0xE51310")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x2000262")]
	public class StarRenderable : CelestialBodyRenderable
	{
		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private GameObject mStarCoronaGameObject;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SunCorona mSunCorona;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float mfSpectralColor;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float mfTemperature;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float mfStarSize;

		[Token(Token = "0x170002AB")]
		public float starSize
		{
			[Token(Token = "0x60010B9")]
			[Address(RVA = "0xE5156C", Offset = "0xE5156C", VA = "0xE5156C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0xE24FE8", Offset = "0xE24FE8", VA = "0xE24FE8")]
		public StarRenderable(Planet.InstanceData instanceData, Transform ecliptic, bool enableCollider, string materialPath, string spectralClass, bool lbPreview = false)
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0xE2647C", Offset = "0xE2647C", VA = "0xE2647C")]
		public void Update(double jd, Bounds bounds, Transform ecclipticTransform, float screenPercentage, float width)
		{
		}
	}
	[Token(Token = "0x2000263")]
	public class StellarAtmosphere : MonoBehaviour
	{
		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static RingMesh sRingMesh;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float mfSpectralColor;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float mfTemperature;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Material mMaterial;

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0xE51574", Offset = "0xE51574", VA = "0xE51574")]
		public StellarAtmosphere()
		{
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0xE5157C", Offset = "0xE5157C", VA = "0xE5157C")]
		private void Start()
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xE519B0", Offset = "0xE519B0", VA = "0xE519B0")]
		private void Update()
		{
		}
	}
}
[Token(Token = "0x2000264")]
public class SunCorona : SCParticles
{
	[Token(Token = "0x4000AD5")]
	public const float VISIBILITY_MIN = 0.02f;

	[Token(Token = "0x4000AD6")]
	public const float VISIBILITY_MAX = 0.12f;

	[Token(Token = "0x4000AD7")]
	private const int CORONA_COUNT = 3;

	[Token(Token = "0x4000AD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float sizeVariation;

	[Token(Token = "0x4000AD9")]
	private const float ROTATION_SPEED = 18f;

	[Token(Token = "0x4000ADA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float mfSize;

	[Token(Token = "0x4000ADB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float mfSizeVariation;

	[Token(Token = "0x4000ADC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float mfOpacity;

	[Token(Token = "0x4000ADD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float mfRotation;

	[Token(Token = "0x4000ADE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Noise[] maNoise;

	[Token(Token = "0x4000ADF")]
	private const int NOISE_COUNT = 6;

	[Token(Token = "0x4000AE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Color mBloomColor;

	[Token(Token = "0x60010BF")]
	[Address(RVA = "0xCFA5BC", Offset = "0xCFA5BC", VA = "0xCFA5BC")]
	public SunCorona()
	{
	}

	[Token(Token = "0x60010C0")]
	[Address(RVA = "0xCFA6AC", Offset = "0xCFA6AC", VA = "0xCFA6AC", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60010C1")]
	[Address(RVA = "0xCFAAC0", Offset = "0xCFAAC0", VA = "0xCFAAC0", Slot = "5")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60010C2")]
	[Address(RVA = "0xCFB13C", Offset = "0xCFB13C", VA = "0xCFB13C")]
	public void UpdateParticles(float screenPercentage, float size)
	{
	}
}
namespace Planets
{
	[Token(Token = "0x2000265")]
	public class Planets : BrowsableContainer
	{
		[Token(Token = "0x4000AE1")]
		public const string MATERIAL_PATH = "Materials/Planets/";

		[Token(Token = "0x4000AE2")]
		private const double PLANET_EXTRA_SCALE_FACTOR = 5.0;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public double MINIMUM_VR_DISTANCE;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float SYSTEM_DRAW_FOV_THRESHOLD;

		[Token(Token = "0x4000AE5")]
		private const float PLANET_BRIGHTEST_APPMAG = -4.6f;

		[Token(Token = "0x4000AE6")]
		private const float BLOOM_FADE_MIN = 0.1f;

		[Token(Token = "0x4000AE7")]
		private const float BLOOM_FADE_MAX = 0.4f;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float brightnessForLabelLimit;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public StarRenderer starRenderer;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public CameraWrapper cameraWrapper;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Light sunLight;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private LensFlareController mLensFlareController;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PlanetBlooms planetBlooms;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public PlanetBlooms sunBlooms;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Planets sInstance;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<Names, Planet> maSolarSystemBodiesDictionary;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private List<Planet> maAsteroidBeltList;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Planet> maKBOList;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private List<Planet> maCentaurList;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Planet mEarth;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Planet mSun;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float sfEclipticAngle;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion mEclipticRotation;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private VisibilityManager mVisibilityManager;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Planet mPlanetOfInterest;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool sbDrawPlanetsBig;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		private static bool sbUpdateSim;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public double orreryMegaGlobalScale;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public double orreryStartDistanceAU;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public double orreryStartHeightAngle;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public double orreryControllerScale;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public double orreryDiameter;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private double orreryDiameterScaled;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public double orreryTimeShifVelocity;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float orreryInstantSpeed;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float orreryTimeShifMaxOrbitSpeed;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool orreryFlatEarthSociety;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		public bool orreryPause;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
		public bool orreryStartAtBigBen;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public double orreryTimeShifStartDate;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public double orreryIntroStartDate;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public double orreryTimeShifAccumulated;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public double orreryNumberOfPlanets;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float orreryOrbitLineAngle;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float orreryOrbitLineFadeDistanceMin;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float orreryOrbitLineFadeDistanceMax;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public double orreryMainPlanetDistance;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public float orreryMainPlanetScale;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float orreryMainPlanetScaleScaled;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public float orreryRelativeScaleOfSun;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public float orreryOffsetOfAsteroidBelts;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float orreryOffsetOfKuiperBelts;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public int orreryNumBodiesAsteroidBelt;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public int orreryNumBodiesKuiperBelt;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public double orrerySpreadOfAsteroidBelts;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float orreryMinAsteroidScale;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public float orreryMaxAsteroidScale;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public float orreryRelativeScaleOfMercury;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public float orreryRelativeScaleOfVenus;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public float orreryRelativeScaleOfEarth;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public float orreryRelativeScaleOfMars;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public float orreryRelativeScaleOfJupiter;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public float orreryRelativeScaleOfSaturn;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public float orreryRelativeScaleOfNeptune;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public float orreryRelativeScaleOfUranus;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public float orreryRelativeScaleOfPluto;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public float orreryRelativeDistanceOfMercury;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public float orreryRelativeDistanceOfVenus;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public float orreryRelativeDistanceOfEarth;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public float orreryRelativeDistanceOfMars;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public float orreryRelativeDistanceOfJupiter;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public float orreryRelativeDistanceOfSaturn;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public float orreryRelativeDistanceOfNeptune;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public float orreryRelativeDistanceOfUranus;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public float orreryRelativeDistanceOfPluto;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public float orreryRelativeScaleOfMoons;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public float orreryMoonEarthMoonOffset;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float orreryMoonEarthMoonScale;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public bool orreryMoonMarsPhobosDraw;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public float orreryMoonMarsPhobosOffset;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public float orreryMoonMarsPhobosScale;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public bool orreryMoonMarsDeimosDraw;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public float orreryMoonMarsDeimosOffset;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public float orreryMoonMarsDeimosScale;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public bool orreryMoonJupiterIoDraw;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public float orreryMoonJupiterIoOffset;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		public float orreryMoonJupiterIoScale;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public bool orreryMoonJupiterEuropaDraw;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		public float orreryMoonJupiterEuropaOffset;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public float orreryMoonJupiterEuropaScale;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		public bool orreryMoonJupiterGanymedeDraw;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public float orreryMoonJupiterGanymedeOffset;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public float orreryMoonJupiterGanymedeScale;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public bool orreryMoonJupiterCallistoDraw;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		public float orreryMoonJupiterCallistoOffset;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public float orreryMoonJupiterCallistoScale;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		public bool orreryMoonSaturnMimasDraw;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public float orreryMoonSaturnMimasOffset;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		public float orreryMoonSaturnMimasScale;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public bool orreryMoonSaturEnceladusDraw;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		public float orreryMoonSaturnEnceladusOffset;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public float orreryMoonSaturnEnceladusScale;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		public bool orreryMoonSaturnTethysDraw;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public float orreryMoonSaturnTethysOffset;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public float orreryMoonSaturnTethysScale;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public bool orreryMoonSaturnDioneDraw;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		public float orreryMoonSaturnDioneOffset;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public float orreryMoonSaturnDioneScale;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		public bool orreryMoonSaturnTitanDraw;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public float orreryMoonSaturnTitanOffset;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		public float orreryMoonSaturnTitanScale;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public bool orreryMoonSaturnRheaDraw;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		public float orreryMoonSaturnRheaOffset;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public float orreryMoonSaturnRheaScale;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		public bool orreryMoonSaturnHyperionDraw;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public float orreryMoonSaturnHyperionOffset;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		public float orreryMoonSaturnHyperionScale;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public bool orreryMoonSaturnIapetusDraw;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		public float orreryMoonSaturnIapetusOffset;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public float orreryMoonSaturnIapetusScale;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		public bool orreryMoonSaturnPhoebeDraw;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public float orreryMoonSaturnPhoebeOffset;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		public float orreryMoonSaturnPhoebeScale;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public bool orreryMoonUranusMirandaDraw;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		public float orreryMoonUranusMirandaOffset;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public float orreryMoonUranusMirandaScale;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		public bool orreryMoonUranusTitaniaDraw;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public float orreryMoonUranusTitaniaOffset;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		public float orreryMoonUranusTitaniaScale;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public bool orreryMoonNeptuneTritonDraw;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		public float orreryMoonNeptuneTritonOffset;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public float orreryMoonNeptuneTritonScale;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		public bool orreryMoonPlutoCharonDraw;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public float orreryMoonPlutoCharonOffset;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		public float orreryMoonPlutoCharonScale;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public float orreryRelativeScaleOfAsteroids;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		public float orreryAsteroidScaleEros;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public float orreryAsteroidScaleVesta;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		public float orreryAsteroidScaleGaspra;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public float orreryAsteroidScalePallas;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		public float orreryAsteroidScaleCeres;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public float orreryAsteroidScale_10Hygiea;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
		public float orreryAsteroidScaleQuaoar;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public float orreryAsteroidScaleOrcus;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		public float orreryAsteroidScaleHaumea;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public float orreryAsteroidScaleMakemake;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		public float orreryAsteroidScaleEris;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public float orreryAsteroidDistanceEros;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		public float orreryAsteroidDistanceVesta;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public float orreryAsteroidDistanceGaspra;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		public float orreryAsteroidDistancePallas;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public float orreryAsteroidDistanceCeres;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
		public float orreryAsteroidDistance_10Hygiea;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public float orreryAsteroidDistanceQuaoar;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		public float orreryAsteroidDistanceOrcus;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		public float orreryAsteroidDistanceHaumea;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
		public float orreryAsteroidDistanceMakemake;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		public float orreryAsteroidDistanceEris;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		public bool orreryAsteroidDrawEros;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BD")]
		public bool orreryAsteroidDrawVesta;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BE")]
		public bool orreryAsteroidDrawGaspra;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BF")]
		public bool orreryAsteroidDrawPallas;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public bool orreryAsteroidDrawCeres;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C1")]
		public bool orreryAsteroidDraw_10Hygiea;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C2")]
		public bool orreryAsteroidDrawQuaoar;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C3")]
		public bool orreryAsteroidDrawOrcus;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C4")]
		public bool orreryAsteroidDrawHaumea;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C5")]
		public bool orreryAsteroidDrawMakemake;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C6")]
		public bool orreryAsteroidDrawEris;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static string[] saBodyTypesSimple;

		[Token(Token = "0x170002AC")]
		public Dictionary<Names, Planet> solarSystemBodiesDictionary
		{
			[Token(Token = "0x60010C5")]
			[Address(RVA = "0xE36838", Offset = "0xE36838", VA = "0xE36838")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AD")]
		public List<Planet> asteroidBeltList
		{
			[Token(Token = "0x60010C6")]
			[Address(RVA = "0xE296E0", Offset = "0xE296E0", VA = "0xE296E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AE")]
		public List<Planet> kboList
		{
			[Token(Token = "0x60010C7")]
			[Address(RVA = "0xE29C40", Offset = "0xE29C40", VA = "0xE29C40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AF")]
		public List<Planet> centaurList
		{
			[Token(Token = "0x60010C8")]
			[Address(RVA = "0xE29C38", Offset = "0xE29C38", VA = "0xE29C38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B0")]
		public static Planet sun
		{
			[Token(Token = "0x60010C9")]
			[Address(RVA = "0xE36840", Offset = "0xE36840", VA = "0xE36840")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B1")]
		public VisibilityManager visibilityManager
		{
			[Token(Token = "0x60010CA")]
			[Address(RVA = "0xE368DC", Offset = "0xE368DC", VA = "0xE368DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B2")]
		public Planet planetOfInterest
		{
			[Token(Token = "0x60010CB")]
			[Address(RVA = "0xE368E4", Offset = "0xE368E4", VA = "0xE368E4")]
			set
			{
			}
		}

		[Token(Token = "0x170002B3")]
		public static bool drawPlanetsBig
		{
			[Token(Token = "0x60010CC")]
			[Address(RVA = "0xE368EC", Offset = "0xE368EC", VA = "0xE368EC")]
			set
			{
			}
		}

		[Token(Token = "0x170002B4")]
		public static bool enableSimUpdate
		{
			[Token(Token = "0x60010CD")]
			[Address(RVA = "0xE3697C", Offset = "0xE3697C", VA = "0xE3697C")]
			set
			{
			}
		}

		[Token(Token = "0x170002B5")]
		public static float ecclipticAngle
		{
			[Token(Token = "0x60010E3")]
			[Address(RVA = "0xE42234", Offset = "0xE42234", VA = "0xE42234")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002B6")]
		public static Quaternion ecclipticRotation
		{
			[Token(Token = "0x60010E4")]
			[Address(RVA = "0xE422C0", Offset = "0xE422C0", VA = "0xE422C0")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x170002B7")]
		public double OrreryTimeShifAccumulated
		{
			[Token(Token = "0x60010E5")]
			[Address(RVA = "0xE40FDC", Offset = "0xE40FDC", VA = "0xE40FDC")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60010E6")]
			[Address(RVA = "0xE40FE8", Offset = "0xE40FE8", VA = "0xE40FE8")]
			set
			{
			}
		}

		[Token(Token = "0x170002B8")]
		public JulianDate OrreryTime
		{
			[Token(Token = "0x60010E7")]
			[Address(RVA = "0xE42368", Offset = "0xE42368", VA = "0xE42368")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B9")]
		public double OrreryDiameterScaled
		{
			[Token(Token = "0x60010E8")]
			[Address(RVA = "0xE4239C", Offset = "0xE4239C", VA = "0xE4239C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60010E9")]
			[Address(RVA = "0xE40FD0", Offset = "0xE40FD0", VA = "0xE40FD0")]
			set
			{
			}
		}

		[Token(Token = "0x170002BA")]
		public float OrreryInstantSpeed
		{
			[Token(Token = "0x60010EA")]
			[Address(RVA = "0xE423A8", Offset = "0xE423A8", VA = "0xE423A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60010EB")]
			[Address(RVA = "0xE40FF4", Offset = "0xE40FF4", VA = "0xE40FF4")]
			set
			{
			}
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xE363E4", Offset = "0xE363E4", VA = "0xE363E4")]
		public Planets()
		{
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0xE244D4", Offset = "0xE244D4", VA = "0xE244D4")]
		public static Planets GetInstance()
		{
			return null;
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xE24560", Offset = "0xE24560", VA = "0xE24560")]
		public double OrreryCombinedScale()
		{
			return default(double);
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0xE36A0C", Offset = "0xE36A0C", VA = "0xE36A0C")]
		private bool orreryVisibilityTest(Names pname)
		{
			return default(bool);
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xE26458", Offset = "0xE26458", VA = "0xE26458")]
		public bool orrerySolarSystemPlanetsList(Names pname)
		{
			return default(bool);
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xE36C30", Offset = "0xE36C30", VA = "0xE36C30")]
		private void Start()
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xE3D738", Offset = "0xE3D738", VA = "0xE3D738")]
		public float getPlanetRelativeScale(Names name)
		{
			return default(float);
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xE1DF84", Offset = "0xE1DF84", VA = "0xE1DF84")]
		public static Planet GetPlanet(Names name)
		{
			return null;
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xE3DA98", Offset = "0xE3DA98", VA = "0xE3DA98")]
		private void updateBodyMetrics(Planet planet, bool isOnEarth)
		{
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xE3E2E0", Offset = "0xE3E2E0", VA = "0xE3E2E0")]
		private double nonZeroDistanceFromPlanet(double distance)
		{
			return default(double);
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0xE3E310", Offset = "0xE3E310", VA = "0xE3E310")]
		private void updateRenderPositionAndScale(Planet planet, Vector3 localPosition)
		{
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0xE3E6E4", Offset = "0xE3E6E4", VA = "0xE3E6E4")]
		private bool shouldCalculateSystemLogic(Planet planet)
		{
			return default(bool);
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0xE3E87C", Offset = "0xE3E87C", VA = "0xE3E87C")]
		private void resetOrreryTimeAfterIntroRec(Planet planet)
		{
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0xE3E9D0", Offset = "0xE3E9D0", VA = "0xE3E9D0")]
		public void ResetOrreryTimeAfterIntro()
		{
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0xE3E9D8", Offset = "0xE3E9D8", VA = "0xE3E9D8")]
		private void updateRenderPosition(Planet planet, double jd)
		{
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0xE3EEE0", Offset = "0xE3EEE0", VA = "0xE3EEE0")]
		private void updateRenderPositionsHierarchically(Planet planet, double jd)
		{
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0xE3EB88", Offset = "0xE3EB88", VA = "0xE3EB88")]
		public static Vector3 CameraRelativePosition(Vector3Double positionHeliocentric, Planet planet)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0xE3F838", Offset = "0xE3F838", VA = "0xE3F838")]
		private void Update()
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0xE414C0", Offset = "0xE414C0", VA = "0xE414C0")]
		private void updateLabel(Planet planet, float brightness)
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0xE419E0", Offset = "0xE419E0", VA = "0xE419E0")]
		private void updateBloom(Planet planet, Vector3 worldPosition, float size, float screenPercentage)
		{
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0xE41ED8", Offset = "0xE41ED8", VA = "0xE41ED8")]
		public static Vector3Double RotateVectorByInverseEcliptic(Vector3Double v)
		{
			return default(Vector3Double);
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0xE41FD4", Offset = "0xE41FD4", VA = "0xE41FD4")]
		public static Vector3 RotateVectorByInverseEcliptic(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0xE42118", Offset = "0xE42118", VA = "0xE42118")]
		public static Vector3 RotateVectorByEcliptic(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0xE423B0", Offset = "0xE423B0", VA = "0xE423B0")]
		public static void ResetOrrery()
		{
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0xE425D0", Offset = "0xE425D0", VA = "0xE425D0")]
		public static void SetSunIsOccluded(bool occluded)
		{
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0xE28098", Offset = "0xE28098", VA = "0xE28098")]
		public static string BodyTypeToSimpleString(BodyTypes bodyType)
		{
			return null;
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0xE4268C", Offset = "0xE4268C", VA = "0xE4268C", Slot = "4")]
		protected override void buildBrowsableObjectListForClass()
		{
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0xE42BAC", Offset = "0xE42BAC", VA = "0xE42BAC", Slot = "5")]
		protected override List<SortableProperties> getSortableProperties()
		{
			return null;
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0xE42C74", Offset = "0xE42C74", VA = "0xE42C74", Slot = "6")]
		protected override bool allowFilterInSubheading()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000266")]
	public class PlanetsDebugRendering : MonoBehaviour
	{
		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Planets mPlanets;

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xE431F8", Offset = "0xE431F8", VA = "0xE431F8")]
		public PlanetsDebugRendering()
		{
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0xE43200", Offset = "0xE43200", VA = "0xE43200")]
		private void Start()
		{
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0xE43280", Offset = "0xE43280", VA = "0xE43280")]
		private void Update()
		{
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0xE43284", Offset = "0xE43284", VA = "0xE43284")]
		private void OnDrawGizmosSelected()
		{
		}
	}
	[Token(Token = "0x2000267")]
	public class PlanetsHorizonsData
	{
		[Token(Token = "0x2000268")]
		public struct HorizonsInput
		{
			[Token(Token = "0x4000B8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Names meName;

			[Token(Token = "0x4000B8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly double mdEpochJDT;

			[Token(Token = "0x4000B8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Names meParentName;

			[Token(Token = "0x4000B90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly double mdEC;

			[Token(Token = "0x4000B91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private readonly double mdQR;

			[Token(Token = "0x4000B92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private readonly double mdIN;

			[Token(Token = "0x4000B93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private readonly double mdOM;

			[Token(Token = "0x4000B94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private readonly double mdW;

			[Token(Token = "0x4000B95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private readonly double mdTp;

			[Token(Token = "0x4000B96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private readonly double mdN;

			[Token(Token = "0x4000B97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private readonly double mdMA;

			[Token(Token = "0x4000B98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private readonly double mdTA;

			[Token(Token = "0x4000B99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private readonly double mdA;

			[Token(Token = "0x4000B9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private readonly double mdAD;

			[Token(Token = "0x4000B9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private readonly double mdPR;

			[Token(Token = "0x170002BB")]
			public Names name
			{
				[Token(Token = "0x60010FB")]
				[Address(RVA = "0xE4DF68", Offset = "0xE4DF68", VA = "0xE4DF68")]
				get
				{
					return default(Names);
				}
			}

			[Token(Token = "0x170002BC")]
			public double epochJDT
			{
				[Token(Token = "0x60010FC")]
				[Address(RVA = "0xE4DF70", Offset = "0xE4DF70", VA = "0xE4DF70")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002BD")]
			public Names parentName
			{
				[Token(Token = "0x60010FD")]
				[Address(RVA = "0xE4DF7C", Offset = "0xE4DF7C", VA = "0xE4DF7C")]
				get
				{
					return default(Names);
				}
			}

			[Token(Token = "0x170002BE")]
			public double EC
			{
				[Token(Token = "0x60010FE")]
				[Address(RVA = "0xE4DF84", Offset = "0xE4DF84", VA = "0xE4DF84")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002BF")]
			public double QR
			{
				[Token(Token = "0x60010FF")]
				[Address(RVA = "0xE4DF90", Offset = "0xE4DF90", VA = "0xE4DF90")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002C0")]
			public double IN
			{
				[Token(Token = "0x6001100")]
				[Address(RVA = "0xE4DF9C", Offset = "0xE4DF9C", VA = "0xE4DF9C")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002C1")]
			public double OM
			{
				[Token(Token = "0x6001101")]
				[Address(RVA = "0xE4DFA8", Offset = "0xE4DFA8", VA = "0xE4DFA8")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002C2")]
			public double W
			{
				[Token(Token = "0x6001102")]
				[Address(RVA = "0xE4DFB4", Offset = "0xE4DFB4", VA = "0xE4DFB4")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002C3")]
			public double Tp
			{
				[Token(Token = "0x6001103")]
				[Address(RVA = "0xE4DFC0", Offset = "0xE4DFC0", VA = "0xE4DFC0")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002C4")]
			public double N
			{
				[Token(Token = "0x6001104")]
				[Address(RVA = "0xE4DFCC", Offset = "0xE4DFCC", VA = "0xE4DFCC")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002C5")]
			public double MA
			{
				[Token(Token = "0x6001105")]
				[Address(RVA = "0xE4DFD8", Offset = "0xE4DFD8", VA = "0xE4DFD8")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002C6")]
			public double TA
			{
				[Token(Token = "0x6001106")]
				[Address(RVA = "0xE4DFE4", Offset = "0xE4DFE4", VA = "0xE4DFE4")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002C7")]
			public double A
			{
				[Token(Token = "0x6001107")]
				[Address(RVA = "0xE4DFF0", Offset = "0xE4DFF0", VA = "0xE4DFF0")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002C8")]
			public double AD
			{
				[Token(Token = "0x6001108")]
				[Address(RVA = "0xE4DFFC", Offset = "0xE4DFFC", VA = "0xE4DFFC")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002C9")]
			public double PR
			{
				[Token(Token = "0x6001109")]
				[Address(RVA = "0xE4E008", Offset = "0xE4E008", VA = "0xE4E008")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x60010FA")]
			[Address(RVA = "0xE4DF38", Offset = "0xE4DF38", VA = "0xE4DF38")]
			public HorizonsInput(Names name, double epochJDT, Names parentName, double EC, double QR, double IN, double OM, double W, double Tp, double N, double MA, double TA, double A, double AD, double PR)
			{
			}
		}

		[Token(Token = "0x2000269")]
		public struct ProcessedHorizonsElements
		{
			[Token(Token = "0x4000B9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly double mdEpochJDT;

			[Token(Token = "0x4000B9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly Names meParentName;

			[Token(Token = "0x4000B9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly double mdSemiMajorAxis;

			[Token(Token = "0x4000B9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly double mdEccentricity;

			[Token(Token = "0x4000BA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private readonly double mdArgumentOfPeriapsisRadians;

			[Token(Token = "0x4000BA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private readonly double mdMeanAnomalyRadians;

			[Token(Token = "0x4000BA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private readonly double mdInclinationRadians;

			[Token(Token = "0x4000BA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private readonly double mdLongitudeOfAscendingNodeRadians;

			[Token(Token = "0x4000BA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private readonly double mdLongitudeRateRadians;

			[Token(Token = "0x4000BA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private readonly double mdApoapsis;

			[Token(Token = "0x4000BA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private readonly double mdMaxDistanceFromReferencePlane;

			[Token(Token = "0x4000BA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private readonly double mdOrbitalPeriodDays;

			[Token(Token = "0x170002CA")]
			public double epochJDT
			{
				[Token(Token = "0x600110B")]
				[Address(RVA = "0xE4E0FC", Offset = "0xE4E0FC", VA = "0xE4E0FC")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002CB")]
			public Names parentName
			{
				[Token(Token = "0x600110C")]
				[Address(RVA = "0xE4E108", Offset = "0xE4E108", VA = "0xE4E108")]
				get
				{
					return default(Names);
				}
			}

			[Token(Token = "0x170002CC")]
			public double semiMajorAxis
			{
				[Token(Token = "0x600110D")]
				[Address(RVA = "0xE4E11C", Offset = "0xE4E11C", VA = "0xE4E11C")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002CD")]
			public double eccentricity
			{
				[Token(Token = "0x600110E")]
				[Address(RVA = "0xE4E134", Offset = "0xE4E134", VA = "0xE4E134")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002CE")]
			public double argumentOfPeriapsisRadians
			{
				[Token(Token = "0x600110F")]
				[Address(RVA = "0xE4E14C", Offset = "0xE4E14C", VA = "0xE4E14C")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002CF")]
			public double meanAnomalyRadians
			{
				[Token(Token = "0x6001110")]
				[Address(RVA = "0xE4E164", Offset = "0xE4E164", VA = "0xE4E164")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002D0")]
			public double inclinationRadians
			{
				[Token(Token = "0x6001111")]
				[Address(RVA = "0xE4E17C", Offset = "0xE4E17C", VA = "0xE4E17C")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002D1")]
			public double longitudeOfAscendingNodeRadians
			{
				[Token(Token = "0x6001112")]
				[Address(RVA = "0xE4E194", Offset = "0xE4E194", VA = "0xE4E194")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002D2")]
			public double longitudeRateRadians
			{
				[Token(Token = "0x6001113")]
				[Address(RVA = "0xE4E1AC", Offset = "0xE4E1AC", VA = "0xE4E1AC")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002D3")]
			public double apoapsis
			{
				[Token(Token = "0x6001114")]
				[Address(RVA = "0xE4E1C4", Offset = "0xE4E1C4", VA = "0xE4E1C4")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002D4")]
			public double maxDistanceFromReferencePlane
			{
				[Token(Token = "0x6001115")]
				[Address(RVA = "0xE4E1DC", Offset = "0xE4E1DC", VA = "0xE4E1DC")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x170002D5")]
			public double orbitalPeriodDays
			{
				[Token(Token = "0x6001116")]
				[Address(RVA = "0xE4E1F4", Offset = "0xE4E1F4", VA = "0xE4E1F4")]
				get
				{
					return default(double);
				}
			}

			[Token(Token = "0x600110A")]
			[Address(RVA = "0xE4E018", Offset = "0xE4E018", VA = "0xE4E018")]
			public ProcessedHorizonsElements(HorizonsInput input)
			{
			}
		}

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IList<HorizonsInput> saRawHorizonsData;

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0xE435FC", Offset = "0xE435FC", VA = "0xE435FC")]
		public PlanetsHorizonsData()
		{
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0xE3D258", Offset = "0xE3D258", VA = "0xE3D258")]
		public static void AssignHorizonsDataToPlanets(Dictionary<Names, Planet> planetsDictionary)
		{
		}
	}
}
[Token(Token = "0x200026A")]
public static class PlanetSurfacePatch
{
	[Token(Token = "0x4000BA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SurfacePatchMesh sPatchMesh;

	[Token(Token = "0x6001117")]
	[Address(RVA = "0xE581F4", Offset = "0xE581F4", VA = "0xE581F4")]
	private static int segmentsPerSide()
	{
		return default(int);
	}

	[Token(Token = "0x6001118")]
	[Address(RVA = "0xE5826C", Offset = "0xE5826C", VA = "0xE5826C")]
	public static void Setup(GeoCoords lCentre, float lfWidth, float lfHeight)
	{
	}

	[Token(Token = "0x6001119")]
	[Address(RVA = "0xE583A0", Offset = "0xE583A0", VA = "0xE583A0")]
	public static void Assign(GameObject gameObject, Material inMaterial, out Material assignedMaterial)
	{
	}

	[Token(Token = "0x600111A")]
	[Address(RVA = "0xE5856C", Offset = "0xE5856C", VA = "0xE5856C")]
	public static MeshRenderer Assign(GameObject gameObject)
	{
		return null;
	}
}
namespace Planets
{
	[Token(Token = "0x200026B")]
	public static class PlanetVisibility
	{
		[Token(Token = "0x4000BA9")]
		private const float CAMERA_FOV_RESOLVE_FACTOR_MIN = 0.01f;

		[Token(Token = "0x4000BAA")]
		private const float CAMERA_FOV_RESOLVE_FACTOR_MAX = 0.02f;

		[Token(Token = "0x4000BAB")]
		private const float RESOLVE_RANGE = 0.01f;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CameraWrapper sCameraWrapper;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float sfAppDiameterFraction;

		[Token(Token = "0x600111B")]
		[Address(RVA = "0xE3D6D4", Offset = "0xE3D6D4", VA = "0xE3D6D4")]
		public static void SetCameraWrapper(CameraWrapper cameraWrapper)
		{
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0xE3F494", Offset = "0xE3F494", VA = "0xE3F494")]
		public static bool IsSystemInFrustum(Planet planet)
		{
			return default(bool);
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0xE3F554", Offset = "0xE3F554", VA = "0xE3F554")]
		public static bool IsPlanetInFrustum(Planet planet)
		{
			return default(bool);
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0xE412E4", Offset = "0xE412E4", VA = "0xE412E4")]
		public static bool CanResolvePlanet(Planet planet)
		{
			return default(bool);
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0xE413D0", Offset = "0xE413D0", VA = "0xE413D0")]
		public static float PartiallyResolvedBrightness()
		{
			return default(float);
		}
	}
	[Token(Token = "0x200026C")]
	public class VisibilityManager
	{
		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private List<Planet> maVisiblePlanets;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private List<Planet> maVisiblePlanetsCache;

		[Token(Token = "0x170002D6")]
		public List<Planet> visiblePlanets
		{
			[Token(Token = "0x6001121")]
			[Address(RVA = "0xE412DC", Offset = "0xE412DC", VA = "0xE412DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0xE3D1A8", Offset = "0xE3D1A8", VA = "0xE3D1A8")]
		public VisibilityManager(int count)
		{
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0xE3F798", Offset = "0xE3F798", VA = "0xE3F798")]
		public void Add(Planet planet)
		{
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0xE40E6C", Offset = "0xE40E6C", VA = "0xE40E6C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0xE40FFC", Offset = "0xE40FFC", VA = "0xE40FFC")]
		public void Update()
		{
		}
	}
	[Token(Token = "0x200026D")]
	public class City : SurfaceDetail, ISelectableObject, ISelectableCity
	{
		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Countries meCountry;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float mfTimeOffset;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private uint miPopulation;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int miCensusYear;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float mfArea;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool mbIsLaunchSite;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Zones meZone;

		[Token(Token = "0x6001125")]
		[Address(RVA = "0xD38874", Offset = "0xD38874", VA = "0xD38874")]
		public City(string name, float latitude, float longitude, uint population, int censusYear, float area, bool launchSite, Countries country, float timeOffset, Zones zone = Zones.None)
		{
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0xD388D4", Offset = "0xD388D4", VA = "0xD388D4", Slot = "5")]
		public override string GetKey()
		{
			return null;
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0xD389E0", Offset = "0xD389E0", VA = "0xD389E0", Slot = "6")]
		public override string GetInfo()
		{
			return null;
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0xD38E94", Offset = "0xD38E94", VA = "0xD38E94", Slot = "7")]
		public SelectableObjectActions GetTapAction()
		{
			return default(SelectableObjectActions);
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0xD38E9C", Offset = "0xD38E9C", VA = "0xD38E9C", Slot = "8")]
		public void OnTap()
		{
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0xD38EA0", Offset = "0xD38EA0", VA = "0xD38EA0", Slot = "10")]
		public void UpdateInformation()
		{
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0xD38EA4", Offset = "0xD38EA4", VA = "0xD38EA4", Slot = "11")]
		public string GetBodyTypeString()
		{
			return null;
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0xD38F00", Offset = "0xD38F00", VA = "0xD38F00", Slot = "12")]
		public BodyTypes GetBodyType()
		{
			return default(BodyTypes);
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0xD38F08", Offset = "0xD38F08", VA = "0xD38F08", Slot = "13")]
		public List<InformationElement.Types> InformationDisplayable()
		{
			return null;
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0xD39010", Offset = "0xD39010", VA = "0xD39010", Slot = "14")]
		public string GetCountryName()
		{
			return null;
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0xD3911C", Offset = "0xD3911C", VA = "0xD3911C", Slot = "15")]
		public DateTime GetLocalTime()
		{
			return default(DateTime);
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0xD393EC", Offset = "0xD393EC", VA = "0xD393EC", Slot = "16")]
		public uint GetPopulation()
		{
			return default(uint);
		}
	}
}
namespace Planets.DaylightSavings
{
	[Token(Token = "0x200026E")]
	public class ComplexDate
	{
		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly JulianDate mJD;

		[Token(Token = "0x170002D7")]
		public JulianDate julianDate
		{
			[Token(Token = "0x6001132")]
			[Address(RVA = "0xD396BC", Offset = "0xD396BC", VA = "0xD396BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0xD393F4", Offset = "0xD393F4", VA = "0xD393F4")]
		public ComplexDate(Months month, Days day, int dayCountFromStartOrEnd, bool isCountedFromEnd, int hour)
		{
		}
	}
	[Token(Token = "0x200026F")]
	public enum Zones
	{
		[Token(Token = "0x4000BB9")]
		None,
		[Token(Token = "0x4000BBA")]
		AlaskaTime,
		[Token(Token = "0x4000BBB")]
		PacificTime,
		[Token(Token = "0x4000BBC")]
		MountainTime,
		[Token(Token = "0x4000BBD")]
		NACentralTime,
		[Token(Token = "0x4000BBE")]
		MexicanCentralTime,
		[Token(Token = "0x4000BBF")]
		EasternTime,
		[Token(Token = "0x4000BC0")]
		ChileTime,
		[Token(Token = "0x4000BC1")]
		Atlantic,
		[Token(Token = "0x4000BC2")]
		NewfoundlandTime,
		[Token(Token = "0x4000BC3")]
		EuropeanUnion,
		[Token(Token = "0x4000BC4")]
		AustralianWesternTime,
		[Token(Token = "0x4000BC5")]
		AustralianCentralTime,
		[Token(Token = "0x4000BC6")]
		AustralianEasternTime,
		[Token(Token = "0x4000BC7")]
		NewZealandTime
	}
	[Token(Token = "0x2000270")]
	public enum Months
	{
		[Token(Token = "0x4000BC9")]
		Jan,
		[Token(Token = "0x4000BCA")]
		Feb,
		[Token(Token = "0x4000BCB")]
		Mar,
		[Token(Token = "0x4000BCC")]
		Apr,
		[Token(Token = "0x4000BCD")]
		May,
		[Token(Token = "0x4000BCE")]
		June,
		[Token(Token = "0x4000BCF")]
		July,
		[Token(Token = "0x4000BD0")]
		Aug,
		[Token(Token = "0x4000BD1")]
		Sep,
		[Token(Token = "0x4000BD2")]
		Oct,
		[Token(Token = "0x4000BD3")]
		Nov,
		[Token(Token = "0x4000BD4")]
		Dec
	}
	[Token(Token = "0x2000271")]
	public enum Days
	{
		[Token(Token = "0x4000BD6")]
		Mon,
		[Token(Token = "0x4000BD7")]
		Tue,
		[Token(Token = "0x4000BD8")]
		Wed,
		[Token(Token = "0x4000BD9")]
		Thur,
		[Token(Token = "0x4000BDA")]
		Fri,
		[Token(Token = "0x4000BDB")]
		Sat,
		[Token(Token = "0x4000BDC")]
		Sun
	}
	[Token(Token = "0x2000272")]
	public class Rule
	{
		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Zones meZone;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int miTimeOffset;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ComplexDate mActiveFrom;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private ComplexDate mActiveUntil;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float mfApplicableZoneStart;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float mfApplicableZoneEnd;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Zones, Rule> saRules;

		[Token(Token = "0x170002D8")]
		public float applicableZoneStart
		{
			[Token(Token = "0x6001135")]
			[Address(RVA = "0xD39E54", Offset = "0xD39E54", VA = "0xD39E54")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002D9")]
		public float applicableZoneEnd
		{
			[Token(Token = "0x6001136")]
			[Address(RVA = "0xD39E5C", Offset = "0xD39E5C", VA = "0xD39E5C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0xD396C4", Offset = "0xD396C4", VA = "0xD396C4")]
		static Rule()
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0xD39D54", Offset = "0xD39D54", VA = "0xD39D54")]
		public Rule(Zones zone, int timeOffset, ComplexDate activeFrom, ComplexDate activeUntil, float applicableZoneStart, float applicableZoneEnd)
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0xD392B4", Offset = "0xD392B4", VA = "0xD392B4")]
		public static Rule GetFromZone(Zones zone)
		{
			return null;
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0xD39E64", Offset = "0xD39E64", VA = "0xD39E64")]
		public static Rule[] FindAllInZoneOffset(float zoneOffset)
		{
			return null;
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0xD3936C", Offset = "0xD3936C", VA = "0xD3936C")]
		public int OffsetAtJulianDate(JulianDate jd)
		{
			return default(int);
		}
	}
}
namespace Planets
{
	[Token(Token = "0x2000273")]
	public class GeoFeature : SurfaceDetail, ISelectableObject, ISelectableGeofeature
	{
		[Token(Token = "0x2000274")]
		public enum Types
		{
			[Token(Token = "0x4000BED")]
			Albedo,
			[Token(Token = "0x4000BEE")]
			CurvedFeature,
			[Token(Token = "0x4000BEF")]
			CraterChain,
			[Token(Token = "0x4000BF0")]
			Hollow,
			[Token(Token = "0x4000BF1")]
			BrokenTerrain,
			[Token(Token = "0x4000BF2")]
			Chasm,
			[Token(Token = "0x4000BF3")]
			SmallHill,
			[Token(Token = "0x4000BF4")]
			OvalFeature,
			[Token(Token = "0x4000BF5")]
			Crater,
			[Token(Token = "0x4000BF6")]
			Ridge,
			[Token(Token = "0x4000BF7")]
			Volcano,
			[Token(Token = "0x4000BF8")]
			BrightSpot,
			[Token(Token = "0x4000BF9")]
			Strait,
			[Token(Token = "0x4000BFA")]
			LowRidge,
			[Token(Token = "0x4000BFB")]
			WaveyTerrain,
			[Token(Token = "0x4000BFC")]
			Channel,
			[Token(Token = "0x4000BFD")]
			Trench,
			[Token(Token = "0x4000BFE")]
			LiquidStrait,
			[Token(Token = "0x4000BFF")]
			Island,
			[Token(Token = "0x4000C00")]
			Fault,
			[Token(Token = "0x4000C01")]
			ComplexRidge,
			[Token(Token = "0x4000C02")]
			Pond,
			[Token(Token = "0x4000C03")]
			Lake,
			[Token(Token = "0x4000C04")]
			RingedFeature,
			[Token(Token = "0x4000C05")]
			ElongatedMarking,
			[Token(Token = "0x4000C06")]
			Tongue,
			[Token(Token = "0x4000C07")]
			DarkSpot,
			[Token(Token = "0x4000C08")]
			Sea,
			[Token(Token = "0x4000C09")]
			Table,
			[Token(Token = "0x4000C0A")]
			Mountain,
			[Token(Token = "0x4000C0B")]
			DarkArea,
			[Token(Token = "0x4000C0C")]
			Marsh,
			[Token(Token = "0x4000C0D")]
			IrregularOrComplexCrater,
			[Token(Token = "0x4000C0E")]
			LowPlain,
			[Token(Token = "0x4000C0F")]
			Plateau,
			[Token(Token = "0x4000C10")]
			CryovolcanicFeature,
			[Token(Token = "0x4000C11")]
			Cape,
			[Token(Token = "0x4000C12")]
			Region,
			[Token(Token = "0x4000C13")]
			Fissure,
			[Token(Token = "0x4000C14")]
			Escarpment,
			[Token(Token = "0x4000C15")]
			IrregularScarp,
			[Token(Token = "0x4000C16")]
			SinuousFeature,
			[Token(Token = "0x4000C17")]
			Bay,
			[Token(Token = "0x4000C18")]
			Furrow,
			[Token(Token = "0x4000C19")]
			LandMass,
			[Token(Token = "0x4000C1A")]
			ComplexRidgedSurface,
			[Token(Token = "0x4000C1B")]
			DomedHill,
			[Token(Token = "0x4000C1C")]
			Dune,
			[Token(Token = "0x4000C1D")]
			Valley,
			[Token(Token = "0x4000C1E")]
			ExtensivePlain,
			[Token(Token = "0x4000C1F")]
			ColorStripe
		}

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string[] saLatinFeatureNamesSingular;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static string[] saLatinFeatureNamesPlural;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string[] saFeatureNamesSingular;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static string[] saFeatureNamesPlural;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Types meType;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float mfDiameterKM;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float mfHeightKM;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool mbIsPlural;

		[Token(Token = "0x600113A")]
		[Address(RVA = "0xD32CBC", Offset = "0xD32CBC", VA = "0xD32CBC")]
		public GeoFeature(string name, float latitude, float longitude, Types type, float diameterKM, float heightKM, bool plural = false, bool lbCanTravelTo = false)
		{
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0xD5BA4C", Offset = "0xD5BA4C", VA = "0xD5BA4C")]
		private static string typeToString(Types type, bool plural)
		{
			return null;
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0xD5B94C", Offset = "0xD5B94C", VA = "0xD5B94C")]
		private static string concatenateNameAndType(string name, Types type, bool plural)
		{
			return null;
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0xD5BB50", Offset = "0xD5BB50", VA = "0xD5BB50", Slot = "6")]
		public override string GetInfo()
		{
			return null;
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0xD5BD9C", Offset = "0xD5BD9C", VA = "0xD5BD9C", Slot = "7")]
		public SelectableObjectActions GetTapAction()
		{
			return default(SelectableObjectActions);
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0xD5BDA4", Offset = "0xD5BDA4", VA = "0xD5BDA4", Slot = "8")]
		public void OnTap()
		{
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0xD5BDA8", Offset = "0xD5BDA8", VA = "0xD5BDA8", Slot = "10")]
		public void UpdateInformation()
		{
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0xD5BDAC", Offset = "0xD5BDAC", VA = "0xD5BDAC", Slot = "11")]
		public string GetBodyTypeString()
		{
			return null;
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0xD5BE08", Offset = "0xD5BE08", VA = "0xD5BE08", Slot = "12")]
		public BodyTypes GetBodyType()
		{
			return default(BodyTypes);
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0xD5BE10", Offset = "0xD5BE10", VA = "0xD5BE10", Slot = "13")]
		public List<InformationElement.Types> InformationDisplayable()
		{
			return null;
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0xD5BF3C", Offset = "0xD5BF3C", VA = "0xD5BF3C", Slot = "14")]
		public string GetFeatureName()
		{
			return null;
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0xD5C050", Offset = "0xD5C050", VA = "0xD5C050", Slot = "15")]
		public float GetDiameter()
		{
			return default(float);
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0xD5C058", Offset = "0xD5C058", VA = "0xD5C058", Slot = "16")]
		public float GetElevation()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000275")]
	public class LandingSite : SurfaceDetail, ISelectableLandingSite, ISelectableObject
	{
		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Countries meCountry;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool mbMissionSuccessful;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected DateTime mLaunchDate;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected DateTime mLandingDate;

		[Token(Token = "0x170002DA")]
		public override string name
		{
			[Token(Token = "0x6001149")]
			[Address(RVA = "0xD6E1BC", Offset = "0xD6E1BC", VA = "0xD6E1BC", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0xD6E13C", Offset = "0xD6E13C", VA = "0xD6E13C")]
		public LandingSite(string name, float latitude, float longitude, Countries country, DateTime launchDate, DateTime landingDate, bool success, bool lbCanTravelTo = false)
		{
		}

		[Token(Token = "0x600114A")]
		[Address(RVA = "0xD6E2C4", Offset = "0xD6E2C4", VA = "0xD6E2C4", Slot = "6")]
		public override string GetInfo()
		{
			return null;
		}

		[Token(Token = "0x600114B")]
		[Address(RVA = "0xD6E460", Offset = "0xD6E460", VA = "0xD6E460", Slot = "10")]
		public SelectableObjectActions GetTapAction()
		{
			return default(SelectableObjectActions);
		}

		[Token(Token = "0x600114C")]
		[Address(RVA = "0xD6E468", Offset = "0xD6E468", VA = "0xD6E468", Slot = "11")]
		public void OnTap()
		{
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0xD6E46C", Offset = "0xD6E46C", VA = "0xD6E46C", Slot = "13")]
		public void UpdateInformation()
		{
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0xD6E470", Offset = "0xD6E470", VA = "0xD6E470", Slot = "14")]
		public string GetBodyTypeString()
		{
			return null;
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xD6E4CC", Offset = "0xD6E4CC", VA = "0xD6E4CC", Slot = "15")]
		public BodyTypes GetBodyType()
		{
			return default(BodyTypes);
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0xD6E4D4", Offset = "0xD6E4D4", VA = "0xD6E4D4", Slot = "7")]
		public string GetCountryOfOrigin()
		{
			return null;
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0xD6E5E0", Offset = "0xD6E5E0", VA = "0xD6E5E0", Slot = "8")]
		public DateTime GetLaunchDate()
		{
			return default(DateTime);
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0xD6E5F4", Offset = "0xD6E5F4", VA = "0xD6E5F4", Slot = "9")]
		public DateTime GetLandingDate()
		{
			return default(DateTime);
		}

		[Token(Token = "0x6001153")]
		[Address(RVA = "0xD6E608", Offset = "0xD6E608", VA = "0xD6E608", Slot = "16")]
		public virtual List<InformationElement.Types> InformationDisplayable()
		{
			return null;
		}
	}
	[Token(Token = "0x2000276")]
	public class LandingSiteManned : LandingSite, ISelectableLandingSiteManned
	{
		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string msLanderName;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private string[] maCrewNames;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private TimeSpan mMissionDuration;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int miEVAcount;

		[Token(Token = "0x6001154")]
		[Address(RVA = "0xD6E710", Offset = "0xD6E710", VA = "0xD6E710")]
		public LandingSiteManned(string name, float latitude, float longitude, Countries country, DateTime launchDate, DateTime landingDate, string landerName, string[] crewNames, TimeSpan missionDuration, int EVAcount, bool lbCanTravelTo = false)
		{
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0xD6E7B4", Offset = "0xD6E7B4", VA = "0xD6E7B4", Slot = "6")]
		public override string GetInfo()
		{
			return null;
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0xD6EA60", Offset = "0xD6EA60", VA = "0xD6EA60", Slot = "17")]
		public TimeSpan GetMissionDuration()
		{
			return default(TimeSpan);
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0xD6EA6C", Offset = "0xD6EA6C", VA = "0xD6EA6C", Slot = "18")]
		public string GetCrewNames()
		{
			return null;
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0xD6EBA0", Offset = "0xD6EBA0", VA = "0xD6EBA0", Slot = "16")]
		public override List<InformationElement.Types> InformationDisplayable()
		{
			return null;
		}
	}
	[Token(Token = "0x2000277")]
	public class SurfaceDetail
	{
		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected string msName;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected GeoCoords mCoordinates;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Vector3 mvNormal;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Planet mPlanet;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected bool mbCanTravelTo;

		[Token(Token = "0x170002DB")]
		public virtual string name
		{
			[Token(Token = "0x600115A")]
			[Address(RVA = "0xE51AE8", Offset = "0xE51AE8", VA = "0xE51AE8", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DC")]
		public Vector3 normal
		{
			[Token(Token = "0x600115B")]
			[Address(RVA = "0xE26BD8", Offset = "0xE26BD8", VA = "0xE26BD8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170002DD")]
		public Planet planet
		{
			[Token(Token = "0x600115C")]
			[Address(RVA = "0xE51AF0", Offset = "0xE51AF0", VA = "0xE51AF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600115D")]
			[Address(RVA = "0xE21614", Offset = "0xE21614", VA = "0xE21614")]
			set
			{
			}
		}

		[Token(Token = "0x170002DE")]
		public bool canTravelTo
		{
			[Token(Token = "0x600115E")]
			[Address(RVA = "0xE51AF8", Offset = "0xE51AF8", VA = "0xE51AF8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0xE51A88", Offset = "0xE51A88", VA = "0xE51A88")]
		public SurfaceDetail(string name, float latitude, float longitude)
		{
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0xE51B00", Offset = "0xE51B00", VA = "0xE51B00")]
		public bool GetSurfaceVectors(out Vector3 worldPosition, out Vector3 worldNormal)
		{
			return default(bool);
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0xE51BE0", Offset = "0xE51BE0", VA = "0xE51BE0")]
		public GeoCoords GetGeoCoords()
		{
			return default(GeoCoords);
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0xE51BF4", Offset = "0xE51BF4", VA = "0xE51BF4", Slot = "5")]
		public virtual string GetKey()
		{
			return null;
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0xE51BFC", Offset = "0xE51BFC", VA = "0xE51BFC", Slot = "6")]
		public virtual string GetInfo()
		{
			return null;
		}
	}
	[Token(Token = "0x2000278")]
	public class CallistoSurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x6001163")]
		[Address(RVA = "0xD30E14", Offset = "0xD30E14", VA = "0xD30E14")]
		public CallistoSurfaceDetails()
		{
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0xD30E1C", Offset = "0xD30E1C", VA = "0xD30E1C", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x2000279")]
	public class CeresSurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x6001165")]
		[Address(RVA = "0xD348C0", Offset = "0xD348C0", VA = "0xD348C0")]
		public CeresSurfaceDetails()
		{
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0xD348C8", Offset = "0xD348C8", VA = "0xD348C8", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x200027A")]
	public class CharonSurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x6001167")]
		[Address(RVA = "0xD37EF4", Offset = "0xD37EF4", VA = "0xD37EF4")]
		public CharonSurfaceDetails()
		{
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0xD37EFC", Offset = "0xD37EFC", VA = "0xD37EFC", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x200027B")]
	public class DioneSurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x6001169")]
		[Address(RVA = "0xD3A1D4", Offset = "0xD3A1D4", VA = "0xD3A1D4")]
		public DioneSurfaceDetails()
		{
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0xD3A1DC", Offset = "0xD3A1DC", VA = "0xD3A1DC", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x200027C")]
	public class EarthSurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x600116B")]
		[Address(RVA = "0xD3D7C4", Offset = "0xD3D7C4", VA = "0xD3D7C4")]
		public EarthSurfaceDetails()
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0xD3D840", Offset = "0xD3D840", VA = "0xD3D840", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x200027D")]
	public class EnceladusSurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x600116D")]
		[Address(RVA = "0xD4CDAC", Offset = "0xD4CDAC", VA = "0xD4CDAC")]
		public EnceladusSurfaceDetails()
		{
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0xD4CDB4", Offset = "0xD4CDB4", VA = "0xD4CDB4", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x200027E")]
	public class EuropaSurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x600116F")]
		[Address(RVA = "0xD507C4", Offset = "0xD507C4", VA = "0xD507C4")]
		public EuropaSurfaceDetails()
		{
		}

		[Token(Token = "0x6001170")]
		[Address(RVA = "0xD507CC", Offset = "0xD507CC", VA = "0xD507CC", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x200027F")]
	public class GanymedeSurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x6001171")]
		[Address(RVA = "0xD53308", Offset = "0xD53308", VA = "0xD53308")]
		public GanymedeSurfaceDetails()
		{
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0xD53310", Offset = "0xD53310", VA = "0xD53310", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x2000280")]
	public class IapetusSurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x6001173")]
		[Address(RVA = "0xD61974", Offset = "0xD61974", VA = "0xD61974")]
		public IapetusSurfaceDetails()
		{
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0xD6197C", Offset = "0xD6197C", VA = "0xD6197C", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x2000281")]
	public class IoSurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x6001175")]
		[Address(RVA = "0xD64860", Offset = "0xD64860", VA = "0xD64860")]
		public IoSurfaceDetails()
		{
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0xD64868", Offset = "0xD64868", VA = "0xD64868", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x2000282")]
	public interface ISurfaceDetailData
	{
		[Token(Token = "0x6001177")]
		SurfaceDetail[] GetData();
	}
	[Token(Token = "0x2000283")]
	public class MarsSurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x6001178")]
		[Address(RVA = "0xD6EC5C", Offset = "0xD6EC5C", VA = "0xD6EC5C")]
		public MarsSurfaceDetails()
		{
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0xD6EC64", Offset = "0xD6EC64", VA = "0xD6EC64", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x2000284")]
	public class MercurySurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x600117A")]
		[Address(RVA = "0xD741C8", Offset = "0xD741C8", VA = "0xD741C8")]
		public MercurySurfaceDetails()
		{
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0xD741D0", Offset = "0xD741D0", VA = "0xD741D0", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x2000285")]
	public class MimasSurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x600117C")]
		[Address(RVA = "0xD768CC", Offset = "0xD768CC", VA = "0xD768CC")]
		public MimasSurfaceDetails()
		{
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0xD768D4", Offset = "0xD768D4", VA = "0xD768D4", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x2000286")]
	public class MoonSurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x600117E")]
		[Address(RVA = "0xD78588", Offset = "0xD78588", VA = "0xD78588")]
		public MoonSurfaceDetails()
		{
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0xD78590", Offset = "0xD78590", VA = "0xD78590", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x2000287")]
	public class PhobosSurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x6001180")]
		[Address(RVA = "0xE2023C", Offset = "0xE2023C", VA = "0xE2023C")]
		public PhobosSurfaceDetails()
		{
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0xE20244", Offset = "0xE20244", VA = "0xE20244", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x2000288")]
	public class PlutoSurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x6001182")]
		[Address(RVA = "0xE4ED30", Offset = "0xE4ED30", VA = "0xE4ED30")]
		public PlutoSurfaceDetails()
		{
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0xE4ED38", Offset = "0xE4ED38", VA = "0xE4ED38", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x2000289")]
	public class ThebeSurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x6001184")]
		[Address(RVA = "0xE580B4", Offset = "0xE580B4", VA = "0xE580B4")]
		public ThebeSurfaceDetails()
		{
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0xE580BC", Offset = "0xE580BC", VA = "0xE580BC", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x200028A")]
	public class VenusSurfaceDetails : ISurfaceDetailData
	{
		[Token(Token = "0x6001186")]
		[Address(RVA = "0xE51DD4", Offset = "0xE51DD4", VA = "0xE51DD4")]
		public VenusSurfaceDetails()
		{
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0xE51DDC", Offset = "0xE51DDC", VA = "0xE51DDC", Slot = "4")]
		public SurfaceDetail[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x200028B")]
	public enum Countries
	{
		[Token(Token = "0x4000C2E")]
		Ascension_Island,
		[Token(Token = "0x4000C2F")]
		Andorra,
		[Token(Token = "0x4000C30")]
		United_Arab_Emirates,
		[Token(Token = "0x4000C31")]
		Afghanistan,
		[Token(Token = "0x4000C32")]
		Antigua_and_Barbuda,
		[Token(Token = "0x4000C33")]
		Anguilla,
		[Token(Token = "0x4000C34")]
		Albania,
		[Token(Token = "0x4000C35")]
		Armenia,
		[Token(Token = "0x4000C36")]
		Angola,
		[Token(Token = "0x4000C37")]
		Antarctica,
		[Token(Token = "0x4000C38")]
		Argentina,
		[Token(Token = "0x4000C39")]
		American_Samoa,
		[Token(Token = "0x4000C3A")]
		Austria,
		[Token(Token = "0x4000C3B")]
		Australia,
		[Token(Token = "0x4000C3C")]
		Aruba,
		[Token(Token = "0x4000C3D")]
		Åland_Islands,
		[Token(Token = "0x4000C3E")]
		Azerbaijan,
		[Token(Token = "0x4000C3F")]
		Bosnia_Herzegovina,
		[Token(Token = "0x4000C40")]
		Barbados,
		[Token(Token = "0x4000C41")]
		Bangladesh,
		[Token(Token = "0x4000C42")]
		Belgium,
		[Token(Token = "0x4000C43")]
		Burkina_Faso,
		[Token(Token = "0x4000C44")]
		Bulgaria,
		[Token(Token = "0x4000C45")]
		Bahrain,
		[Token(Token = "0x4000C46")]
		Burundi,
		[Token(Token = "0x4000C47")]
		Benin,
		[Token(Token = "0x4000C48")]
		St_Barthélemy,
		[Token(Token = "0x4000C49")]
		Bermuda,
		[Token(Token = "0x4000C4A")]
		Brunei_Darussalam,
		[Token(Token = "0x4000C4B")]
		Bolivia,
		[Token(Token = "0x4000C4C")]
		Caribbean_Netherlands,
		[Token(Token = "0x4000C4D")]
		Bouvet_Island,
		[Token(Token = "0x4000C4E")]
		Bahamas,
		[Token(Token = "0x4000C4F")]
		Bhutan,
		[Token(Token = "0x4000C50")]
		Botswana,
		[Token(Token = "0x4000C51")]
		Belarus,
		[Token(Token = "0x4000C52")]
		Belize,
		[Token(Token = "0x4000C53")]
		Canada,
		[Token(Token = "0x4000C54")]
		Cocos_Keeling_Islands,
		[Token(Token = "0x4000C55")]
		Congo_Kinshasa,
		[Token(Token = "0x4000C56")]
		Central_African_Republic,
		[Token(Token = "0x4000C57")]
		Congo_Brazzaville,
		[Token(Token = "0x4000C58")]
		Switzerland,
		[Token(Token = "0x4000C59")]
		Côte_Divoire,
		[Token(Token = "0x4000C5A")]
		Cook_Islands,
		[Token(Token = "0x4000C5B")]
		Chile,
		[Token(Token = "0x4000C5C")]
		Cameroon,
		[Token(Token = "0x4000C5D")]
		China,
		[Token(Token = "0x4000C5E")]
		Colombia,
		[Token(Token = "0x4000C5F")]
		Costa_Rica,
		[Token(Token = "0x4000C60")]
		Cuba,
		[Token(Token = "0x4000C61")]
		Cape_Verde,
		[Token(Token = "0x4000C62")]
		Curaçao,
		[Token(Token = "0x4000C63")]
		Christmas_Island,
		[Token(Token = "0x4000C64")]
		Cyprus,
		[Token(Token = "0x4000C65")]
		Czech_Republic,
		[Token(Token = "0x4000C66")]
		Germany,
		[Token(Token = "0x4000C67")]
		Diego_Garcia,
		[Token(Token = "0x4000C68")]
		Djibouti,
		[Token(Token = "0x4000C69")]
		Denmark,
		[Token(Token = "0x4000C6A")]
		Dominica,
		[Token(Token = "0x4000C6B")]
		Dominican_Republic,
		[Token(Token = "0x4000C6C")]
		Algeria,
		[Token(Token = "0x4000C6D")]
		Ceuta_and_Melilla,
		[Token(Token = "0x4000C6E")]
		Ecuador,
		[Token(Token = "0x4000C6F")]
		Estonia,
		[Token(Token = "0x4000C70")]
		Egypt,
		[Token(Token = "0x4000C71")]
		Western_Sahara,
		[Token(Token = "0x4000C72")]
		Eritrea,
		[Token(Token = "0x4000C73")]
		Spain,
		[Token(Token = "0x4000C74")]
		Ethiopia,
		[Token(Token = "0x4000C75")]
		Finland,
		[Token(Token = "0x4000C76")]
		Fiji,
		[Token(Token = "0x4000C77")]
		Falkland_Islands,
		[Token(Token = "0x4000C78")]
		Micronesia,
		[Token(Token = "0x4000C79")]
		Faroe_Islands,
		[Token(Token = "0x4000C7A")]
		France,
		[Token(Token = "0x4000C7B")]
		Gabon,
		[Token(Token = "0x4000C7C")]
		United_Kingdom,
		[Token(Token = "0x4000C7D")]
		Grenada,
		[Token(Token = "0x4000C7E")]
		Georgia,
		[Token(Token = "0x4000C7F")]
		French_Guiana,
		[Token(Token = "0x4000C80")]
		Guernsey,
		[Token(Token = "0x4000C81")]
		Ghana,
		[Token(Token = "0x4000C82")]
		Gibraltar,
		[Token(Token = "0x4000C83")]
		Greenland,
		[Token(Token = "0x4000C84")]
		Gambia,
		[Token(Token = "0x4000C85")]
		Guinea,
		[Token(Token = "0x4000C86")]
		Guadeloupe,
		[Token(Token = "0x4000C87")]
		Equatorial_Guinea,
		[Token(Token = "0x4000C88")]
		Greece,
		[Token(Token = "0x4000C89")]
		South_Georgia_and_The_South_Sandwich_Islands,
		[Token(Token = "0x4000C8A")]
		Guatemala,
		[Token(Token = "0x4000C8B")]
		Guam,
		[Token(Token = "0x4000C8C")]
		Guinea_Bissau,
		[Token(Token = "0x4000C8D")]
		Guyana,
		[Token(Token = "0x4000C8E")]
		Hong_Kong,
		[Token(Token = "0x4000C8F")]
		Honduras,
		[Token(Token = "0x4000C90")]
		Croatia,
		[Token(Token = "0x4000C91")]
		Haiti,
		[Token(Token = "0x4000C92")]
		Hungary,
		[Token(Token = "0x4000C93")]
		Canary_Islands,
		[Token(Token = "0x4000C94")]
		Indonesia,
		[Token(Token = "0x4000C95")]
		Ireland,
		[Token(Token = "0x4000C96")]
		Israel,
		[Token(Token = "0x4000C97")]
		Isle_Of_Man,
		[Token(Token = "0x4000C98")]
		India,
		[Token(Token = "0x4000C99")]
		Brazil,
		[Token(Token = "0x4000C9A")]
		Iraq,
		[Token(Token = "0x4000C9B")]
		Iran,
		[Token(Token = "0x4000C9C")]
		Iceland,
		[Token(Token = "0x4000C9D")]
		Italy,
		[Token(Token = "0x4000C9E")]
		Jersey,
		[Token(Token = "0x4000C9F")]
		Jamaica,
		[Token(Token = "0x4000CA0")]
		Jordan,
		[Token(Token = "0x4000CA1")]
		Japan,
		[Token(Token = "0x4000CA2")]
		Kenya,
		[Token(Token = "0x4000CA3")]
		Kyrgyzstan,
		[Token(Token = "0x4000CA4")]
		Cambodia,
		[Token(Token = "0x4000CA5")]
		Kiribati,
		[Token(Token = "0x4000CA6")]
		Comoros,
		[Token(Token = "0x4000CA7")]
		St_Kitts_and_Nevis,
		[Token(Token = "0x4000CA8")]
		Korea_North,
		[Token(Token = "0x4000CA9")]
		Korea_South,
		[Token(Token = "0x4000CAA")]
		Kuwait,
		[Token(Token = "0x4000CAB")]
		Cayman_Islands,
		[Token(Token = "0x4000CAC")]
		Kazakhstan,
		[Token(Token = "0x4000CAD")]
		Laos,
		[Token(Token = "0x4000CAE")]
		Lebanon,
		[Token(Token = "0x4000CAF")]
		St_Lucia,
		[Token(Token = "0x4000CB0")]
		Liechtenstein,
		[Token(Token = "0x4000CB1")]
		Sri_Lanka,
		[Token(Token = "0x4000CB2")]
		Liberia,
		[Token(Token = "0x4000CB3")]
		Lesotho,
		[Token(Token = "0x4000CB4")]
		Lithuania,
		[Token(Token = "0x4000CB5")]
		Luxembourg,
		[Token(Token = "0x4000CB6")]
		Latvia,
		[Token(Token = "0x4000CB7")]
		Libya,
		[Token(Token = "0x4000CB8")]
		Morocco,
		[Token(Token = "0x4000CB9")]
		Monaco,
		[Token(Token = "0x4000CBA")]
		Moldova,
		[Token(Token = "0x4000CBB")]
		Montenegro,
		[Token(Token = "0x4000CBC")]
		St_Martin,
		[Token(Token = "0x4000CBD")]
		Madagascar,
		[Token(Token = "0x4000CBE")]
		Marshall_Islands,
		[Token(Token = "0x4000CBF")]
		Macedonia,
		[Token(Token = "0x4000CC0")]
		Mali,
		[Token(Token = "0x4000CC1")]
		Myanmar,
		[Token(Token = "0x4000CC2")]
		Mongolia,
		[Token(Token = "0x4000CC3")]
		Macao,
		[Token(Token = "0x4000CC4")]
		Northern_Mariana_Islands,
		[Token(Token = "0x4000CC5")]
		Martinique,
		[Token(Token = "0x4000CC6")]
		Mauritania,
		[Token(Token = "0x4000CC7")]
		Montserrat,
		[Token(Token = "0x4000CC8")]
		Malta,
		[Token(Token = "0x4000CC9")]
		Mauritius,
		[Token(Token = "0x4000CCA")]
		Maldives,
		[Token(Token = "0x4000CCB")]
		Malawi,
		[Token(Token = "0x4000CCC")]
		Mexico,
		[Token(Token = "0x4000CCD")]
		Malaysia,
		[Token(Token = "0x4000CCE")]
		Mozambique,
		[Token(Token = "0x4000CCF")]
		Namibia,
		[Token(Token = "0x4000CD0")]
		New_Caledonia,
		[Token(Token = "0x4000CD1")]
		Niger,
		[Token(Token = "0x4000CD2")]
		Norfolk_Island,
		[Token(Token = "0x4000CD3")]
		Nigeria,
		[Token(Token = "0x4000CD4")]
		Nicaragua,
		[Token(Token = "0x4000CD5")]
		Netherlands,
		[Token(Token = "0x4000CD6")]
		Norway,
		[Token(Token = "0x4000CD7")]
		Nepal,
		[Token(Token = "0x4000CD8")]
		Nauru,
		[Token(Token = "0x4000CD9")]
		Niue,
		[Token(Token = "0x4000CDA")]
		New_Zealand,
		[Token(Token = "0x4000CDB")]
		Oman,
		[Token(Token = "0x4000CDC")]
		Panama,
		[Token(Token = "0x4000CDD")]
		Peru,
		[Token(Token = "0x4000CDE")]
		French_Polynesia,
		[Token(Token = "0x4000CDF")]
		Papua_New_Guinea,
		[Token(Token = "0x4000CE0")]
		Philippines,
		[Token(Token = "0x4000CE1")]
		Pakistan,
		[Token(Token = "0x4000CE2")]
		Poland,
		[Token(Token = "0x4000CE3")]
		St_Pierre_and_Miquelon,
		[Token(Token = "0x4000CE4")]
		Pitcairn,
		[Token(Token = "0x4000CE5")]
		Puerto_Rico,
		[Token(Token = "0x4000CE6")]
		Palestinian_Territory_Occupied,
		[Token(Token = "0x4000CE7")]
		Portugal,
		[Token(Token = "0x4000CE8")]
		Palau,
		[Token(Token = "0x4000CE9")]
		Paraguay,
		[Token(Token = "0x4000CEA")]
		Qatar,
		[Token(Token = "0x4000CEB")]
		Réunion,
		[Token(Token = "0x4000CEC")]
		Romania,
		[Token(Token = "0x4000CED")]
		Serbia,
		[Token(Token = "0x4000CEE")]
		Russian_Federation,
		[Token(Token = "0x4000CEF")]
		Rwanda,
		[Token(Token = "0x4000CF0")]
		Saudi_Arabia,
		[Token(Token = "0x4000CF1")]
		Solomon_Islands,
		[Token(Token = "0x4000CF2")]
		Seychelles,
		[Token(Token = "0x4000CF3")]
		Sudan,
		[Token(Token = "0x4000CF4")]
		Sweden,
		[Token(Token = "0x4000CF5")]
		Singapore,
		[Token(Token = "0x4000CF6")]
		St_Helena,
		[Token(Token = "0x4000CF7")]
		Slovenia,
		[Token(Token = "0x4000CF8")]
		Svalbard_and_Jan_Mayen,
		[Token(Token = "0x4000CF9")]
		Slovakia,
		[Token(Token = "0x4000CFA")]
		Sierra_Leone,
		[Token(Token = "0x4000CFB")]
		San_Marino,
		[Token(Token = "0x4000CFC")]
		Senegal,
		[Token(Token = "0x4000CFD")]
		Somalia,
		[Token(Token = "0x4000CFE")]
		Suriname,
		[Token(Token = "0x4000CFF")]
		South_Sudan,
		[Token(Token = "0x4000D00")]
		São_Tomé_and_Principe,
		[Token(Token = "0x4000D01")]
		El_Salvador,
		[Token(Token = "0x4000D02")]
		Sint_Maarten,
		[Token(Token = "0x4000D03")]
		Syria,
		[Token(Token = "0x4000D04")]
		Swaziland,
		[Token(Token = "0x4000D05")]
		Tristan_da_Cunha,
		[Token(Token = "0x4000D06")]
		Turks_and_Caicos_Islands,
		[Token(Token = "0x4000D07")]
		Chad,
		[Token(Token = "0x4000D08")]
		French_Southern_Territories,
		[Token(Token = "0x4000D09")]
		Togo,
		[Token(Token = "0x4000D0A")]
		Thailand,
		[Token(Token = "0x4000D0B")]
		Tajikistan,
		[Token(Token = "0x4000D0C")]
		Tokelau,
		[Token(Token = "0x4000D0D")]
		Timor_Leste,
		[Token(Token = "0x4000D0E")]
		Turkmenistan,
		[Token(Token = "0x4000D0F")]
		Tunisia,
		[Token(Token = "0x4000D10")]
		Tonga,
		[Token(Token = "0x4000D11")]
		Turkey,
		[Token(Token = "0x4000D12")]
		Trinidad_and_Tobago,
		[Token(Token = "0x4000D13")]
		Tuvalu,
		[Token(Token = "0x4000D14")]
		Taiwan,
		[Token(Token = "0x4000D15")]
		Tanzania,
		[Token(Token = "0x4000D16")]
		Ukraine,
		[Token(Token = "0x4000D17")]
		Uganda,
		[Token(Token = "0x4000D18")]
		US_Outlying_Islands,
		[Token(Token = "0x4000D19")]
		United_States,
		[Token(Token = "0x4000D1A")]
		Uruguay,
		[Token(Token = "0x4000D1B")]
		Uzbekistan,
		[Token(Token = "0x4000D1C")]
		Vatican_City,
		[Token(Token = "0x4000D1D")]
		St_Vincent_and_The_Grenadines,
		[Token(Token = "0x4000D1E")]
		Venezuela,
		[Token(Token = "0x4000D1F")]
		British_Virgin_Islands,
		[Token(Token = "0x4000D20")]
		US_Virgin_Islands,
		[Token(Token = "0x4000D21")]
		Vietnam,
		[Token(Token = "0x4000D22")]
		Vanuatu,
		[Token(Token = "0x4000D23")]
		Wallis_And_Futuna,
		[Token(Token = "0x4000D24")]
		Samoa,
		[Token(Token = "0x4000D25")]
		Kosovo,
		[Token(Token = "0x4000D26")]
		Yemen,
		[Token(Token = "0x4000D27")]
		Mayotte,
		[Token(Token = "0x4000D28")]
		South_Africa,
		[Token(Token = "0x4000D29")]
		Zambia,
		[Token(Token = "0x4000D2A")]
		Zimbabwe
	}
	[Token(Token = "0x200028C")]
	public static class SurfaceDetailFactory
	{
		[Token(Token = "0x6001188")]
		[Address(RVA = "0xE37024", Offset = "0xE37024", VA = "0xE37024")]
		public static void BuildSurfaceDetails()
		{
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0xE51C88", Offset = "0xE51C88", VA = "0xE51C88")]
		private static void makePrimaryDetails(string[] primaryKeys, Planet planet)
		{
		}
	}
}
[Token(Token = "0x200028D")]
public class SCLensFlare : SCParticles
{
	[Token(Token = "0x4000D2B")]
	private const int GLARE_COUNT = 6;

	[Token(Token = "0x600118A")]
	[Address(RVA = "0xE05C30", Offset = "0xE05C30", VA = "0xE05C30")]
	public SCLensFlare()
	{
	}

	[Token(Token = "0x600118B")]
	[Address(RVA = "0xE05CBC", Offset = "0xE05CBC", VA = "0xE05CBC", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600118C")]
	[Address(RVA = "0xE05EA0", Offset = "0xE05EA0", VA = "0xE05EA0", Slot = "5")]
	protected override void Update()
	{
	}
}
[Token(Token = "0x200028E")]
public class Sky : StaticAccess<Sky>
{
	[Token(Token = "0x4000D2C")]
	private const int X_VERTEX_COUNT = 36;

	[Token(Token = "0x4000D2D")]
	private const int Y_VERTEX_COUNT = 10;

	[Token(Token = "0x4000D2E")]
	private const float SUNSET_THRESHOLD = 8f;

	[Token(Token = "0x4000D2F")]
	private const float SKY_FADE_MIN_FOV = 10f;

	[Token(Token = "0x4000D30")]
	private const float SKY_FADE_MAX_FOV = 45f;

	[Token(Token = "0x4000D31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public CameraWrapper cameraWrapper;

	[Token(Token = "0x4000D32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float radius;

	[Token(Token = "0x4000D33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Transform sunTransform;

	[Token(Token = "0x4000D34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int miXCount;

	[Token(Token = "0x4000D35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int miYCount;

	[Token(Token = "0x4000D36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Mesh sMesh;

	[Token(Token = "0x4000D37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MeshRenderer mMeshRenderer;

	[Token(Token = "0x4000D38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 lvSunNormalCache;

	[Token(Token = "0x600118D")]
	[Address(RVA = "0xE135CC", Offset = "0xE135CC", VA = "0xE135CC")]
	public Sky()
	{
	}

	[Token(Token = "0x600118E")]
	[Address(RVA = "0xE1363C", Offset = "0xE1363C", VA = "0xE1363C")]
	public void SetSkyMaterials(Material[] laMats)
	{
	}

	[Token(Token = "0x600118F")]
	[Address(RVA = "0xE1366C", Offset = "0xE1366C", VA = "0xE1366C")]
	public Material[] GetSkyMaterials()
	{
		return null;
	}

	[Token(Token = "0x6001190")]
	[Address(RVA = "0xE13694", Offset = "0xE13694", VA = "0xE13694")]
	private new void Start()
	{
	}

	[Token(Token = "0x6001191")]
	[Address(RVA = "0xE14660", Offset = "0xE14660", VA = "0xE14660")]
	private new void Update()
	{
	}

	[Token(Token = "0x6001192")]
	[Address(RVA = "0xE13BB4", Offset = "0xE13BB4", VA = "0xE13BB4")]
	private void createSphere(ref List<Vector3> vertices, ref List<int> triangles, int indexStartOffset, float radius, Vector3 positionOffset, int liLon, int liLat, bool lbReverseWindingOrder = false, float startLat = 0f, float endLat = 180f)
	{
	}
}
[Token(Token = "0x200028F")]
public class SkyBoxRenderer : MonoBehaviour
{
	[Token(Token = "0x4000D39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Material skyBoxMaterial;

	[Token(Token = "0x4000D3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float mfDimFactor;

	[Token(Token = "0x6001194")]
	[Address(RVA = "0xE14AD8", Offset = "0xE14AD8", VA = "0xE14AD8")]
	public SkyBoxRenderer()
	{
	}

	[Token(Token = "0x6001195")]
	[Address(RVA = "0xE14AE0", Offset = "0xE14AE0", VA = "0xE14AE0")]
	public static void SetOverallBrightness(float lfDimFactor)
	{
	}

	[Token(Token = "0x6001196")]
	[Address(RVA = "0xE14B7C", Offset = "0xE14B7C", VA = "0xE14B7C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001197")]
	[Address(RVA = "0xE14C0C", Offset = "0xE14C0C", VA = "0xE14C0C")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000290")]
public static class BayerFlamsteed
{
	[Token(Token = "0x4000D3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<string, string> saConstellationNamesGenitive;

	[Token(Token = "0x4000D3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Dictionary<string, string> saGreekAlphabet;

	[Token(Token = "0x6001199")]
	[Address(RVA = "0x16436C", Offset = "0x16436C", VA = "0x16436C")]
	public static void GetFromAbreviation(string abreviation, out string bayerFlamsteed, out bool isFlamsteed)
	{
	}
}
namespace Stars
{
	[Token(Token = "0x2000291")]
	public class SelectableStar : CelestialObject, ISelectableObject, ISelectableCelestialObject, ISelectableStar, ICameraTrackable
	{
		[Token(Token = "0x2000292")]
		public enum StarTypes
		{
			[Token(Token = "0x4000D4C")]
			RedDwarf,
			[Token(Token = "0x4000D4D")]
			BrownDwarf,
			[Token(Token = "0x4000D4E")]
			YellowMainSequence,
			[Token(Token = "0x4000D4F")]
			RedGiant,
			[Token(Token = "0x4000D50")]
			BlueGiant,
			[Token(Token = "0x4000D51")]
			RedSuperGiant,
			[Token(Token = "0x4000D52")]
			BlueSuperGiant,
			[Token(Token = "0x4000D53")]
			RedHyperGiant,
			[Token(Token = "0x4000D54")]
			BlueHyperGiant
		}

		[Token(Token = "0x2000293")]
		private enum NameTypes
		{
			[Token(Token = "0x4000D56")]
			Arabic,
			[Token(Token = "0x4000D57")]
			Bayer,
			[Token(Token = "0x4000D58")]
			Hip
		}

		[Token(Token = "0x4000D3D")]
		private const string DEFAULT_OBJECT_DESCRIPTION = "Star";

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Star mStar;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool mbSphericalCoordinatesSet;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Spherical mSphericalCoordinates;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private double mdDistance;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float mfAppMag;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Horizontal mHorizontalCoordinates;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private string msBayerFlamsteed;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool mbIsFlamsteed;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private NameTypes meNameType;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static char[] saMainSpectralClasses;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static string[] saCategoryNumerals;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string[] saCategoryKeys;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static int[] saCategoryNumeralsToDecimal;

		[Token(Token = "0x170002DF")]
		public Star Star
		{
			[Token(Token = "0x600119D")]
			[Address(RVA = "0xCE18CC", Offset = "0xCE18CC", VA = "0xCE18CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E0")]
		public override float selectionPriority
		{
			[Token(Token = "0x600119E")]
			[Address(RVA = "0xCE18D4", Offset = "0xCE18D4", VA = "0xCE18D4", Slot = "7")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002E1")]
		public Vector3 positionToTrack
		{
			[Token(Token = "0x60011B6")]
			[Address(RVA = "0xCE3B3C", Offset = "0xCE3B3C", VA = "0xCE3B3C", Slot = "28")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170002E2")]
		public float fovToFrame
		{
			[Token(Token = "0x60011B7")]
			[Address(RVA = "0xCE3B54", Offset = "0xCE3B54", VA = "0xCE3B54", Slot = "29")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0xCE0EE0", Offset = "0xCE0EE0", VA = "0xCE0EE0")]
		public SelectableStar(Star star)
		{
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0xCE12E4", Offset = "0xCE12E4", VA = "0xCE12E4")]
		private static Vector3 remapRenderPosition(Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0xCE18E0", Offset = "0xCE18E0", VA = "0xCE18E0", Slot = "8")]
		public SelectableObjectActions GetTapAction()
		{
			return default(SelectableObjectActions);
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0xCE1970", Offset = "0xCE1970", VA = "0xCE1970", Slot = "9")]
		public void OnTap()
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0xCE1E30", Offset = "0xCE1E30", VA = "0xCE1E30", Slot = "10")]
		public List<InformationElement.Types> InformationDisplayable()
		{
			return null;
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0xCE2200", Offset = "0xCE2200", VA = "0xCE2200", Slot = "12")]
		public string GetBodyTypeString()
		{
			return null;
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0xCE2BB0", Offset = "0xCE2BB0", VA = "0xCE2BB0")]
		private static string colorDescriptionKeyFromClass(char spectralClass)
		{
			return null;
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0xCE22F0", Offset = "0xCE22F0", VA = "0xCE22F0")]
		private static string spectralClassDescription(string spectrum)
		{
			return null;
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0xCE2EA0", Offset = "0xCE2EA0", VA = "0xCE2EA0")]
		public static void GetVisualRanges(string spectrum, out float color, out float temperature, out float size)
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0xCE3590", Offset = "0xCE3590", VA = "0xCE3590", Slot = "11")]
		public void UpdateInformation()
		{
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0xCE394C", Offset = "0xCE394C", VA = "0xCE394C", Slot = "13")]
		public BodyTypes GetBodyType()
		{
			return default(BodyTypes);
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0xCE3954", Offset = "0xCE3954", VA = "0xCE3954", Slot = "14")]
		public double GetDistanceFromCurrentPlanet(out Distance.Units distanceUnits)
		{
			return default(double);
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0xCE3968", Offset = "0xCE3968", VA = "0xCE3968", Slot = "15")]
		public float GetApparentMagnitude()
		{
			return default(float);
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0xCE3970", Offset = "0xCE3970", VA = "0xCE3970", Slot = "16")]
		public float GetAbsoluteMagnitude()
		{
			return default(float);
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0xCE3998", Offset = "0xCE3998", VA = "0xCE3998", Slot = "22")]
		public string GetBayerFlamsteedName()
		{
			return null;
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0xCE39A0", Offset = "0xCE39A0", VA = "0xCE39A0", Slot = "23")]
		public bool GetIsFlamsteedName()
		{
			return default(bool);
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0xCE39A8", Offset = "0xCE39A8", VA = "0xCE39A8", Slot = "24")]
		public uint GetHip()
		{
			return default(uint);
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0xCE39C8", Offset = "0xCE39C8", VA = "0xCE39C8", Slot = "25")]
		public uint GetHD()
		{
			return default(uint);
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0xCE39F0", Offset = "0xCE39F0", VA = "0xCE39F0", Slot = "26")]
		public ushort GetHR()
		{
			return default(ushort);
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0xCE3A18", Offset = "0xCE3A18", VA = "0xCE3A18", Slot = "27")]
		public string GetGliese()
		{
			return null;
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0xCE3A38", Offset = "0xCE3A38", VA = "0xCE3A38", Slot = "17")]
		public string GetConstellationName()
		{
			return null;
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0xCE3B0C", Offset = "0xCE3B0C", VA = "0xCE3B0C", Slot = "18")]
		public float GetRA()
		{
			return default(float);
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xCE3B18", Offset = "0xCE3B18", VA = "0xCE3B18", Slot = "19")]
		public float GetDEC()
		{
			return default(float);
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xCE3B24", Offset = "0xCE3B24", VA = "0xCE3B24", Slot = "21")]
		public float GetAzimuth()
		{
			return default(float);
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0xCE3B30", Offset = "0xCE3B30", VA = "0xCE3B30", Slot = "20")]
		public float GetAltitude()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000294")]
	public class Star
	{
		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly uint miID;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private readonly uint miHip;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly uint miHD;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private readonly ushort miHR;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly string msGliese;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly string msBayerFlamsteedAbr;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly float mfAbsMag;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private readonly string msSpectrum;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Vector3 mvPosition;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float mfColorValue;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 mvRenderPosition;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float mfBrightness;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Star sNullStar;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static char[] chars;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<char, float> colorValueDictionary;

		[Token(Token = "0x170002E3")]
		public static Star NullStar
		{
			[Token(Token = "0x60011BB")]
			[Address(RVA = "0xCE4590", Offset = "0xCE4590", VA = "0xCE4590")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E4")]
		public uint id
		{
			[Token(Token = "0x60011BC")]
			[Address(RVA = "0xCE1198", Offset = "0xCE1198", VA = "0xCE1198")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x170002E5")]
		public uint hip
		{
			[Token(Token = "0x60011BD")]
			[Address(RVA = "0xCE1480", Offset = "0xCE1480", VA = "0xCE1480")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x170002E6")]
		public uint hd
		{
			[Token(Token = "0x60011BE")]
			[Address(RVA = "0xCE39E8", Offset = "0xCE39E8", VA = "0xCE39E8")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x170002E7")]
		public ushort hr
		{
			[Token(Token = "0x60011BF")]
			[Address(RVA = "0xCE3A10", Offset = "0xCE3A10", VA = "0xCE3A10")]
			get
			{
				return default(ushort);
			}
		}

		[Token(Token = "0x170002E8")]
		public string gliese
		{
			[Token(Token = "0x60011C0")]
			[Address(RVA = "0xCE216C", Offset = "0xCE216C", VA = "0xCE216C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E9")]
		public Vector3 position
		{
			[Token(Token = "0x60011C1")]
			[Address(RVA = "0xCE1488", Offset = "0xCE1488", VA = "0xCE1488")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170002EA")]
		public Vector3 renderPosition
		{
			[Token(Token = "0x60011C2")]
			[Address(RVA = "0xCE12D4", Offset = "0xCE12D4", VA = "0xCE12D4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60011C3")]
			[Address(RVA = "0xCE461C", Offset = "0xCE461C", VA = "0xCE461C")]
			set
			{
			}
		}

		[Token(Token = "0x170002EB")]
		public string spectrum
		{
			[Token(Token = "0x60011C4")]
			[Address(RVA = "0xCE22E8", Offset = "0xCE22E8", VA = "0xCE22E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EC")]
		public float absMag
		{
			[Token(Token = "0x60011C5")]
			[Address(RVA = "0xCE3990", Offset = "0xCE3990", VA = "0xCE3990")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002ED")]
		public float apparentMagnitude
		{
			[Token(Token = "0x60011C6")]
			[Address(RVA = "0xCE1498", Offset = "0xCE1498", VA = "0xCE1498")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002EE")]
		public float brightness
		{
			[Token(Token = "0x60011C7")]
			[Address(RVA = "0xCE4628", Offset = "0xCE4628", VA = "0xCE4628")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011C8")]
			[Address(RVA = "0xCE4630", Offset = "0xCE4630", VA = "0xCE4630")]
			set
			{
			}
		}

		[Token(Token = "0x170002EF")]
		public float dec
		{
			[Token(Token = "0x60011C9")]
			[Address(RVA = "0xCE386C", Offset = "0xCE386C", VA = "0xCE386C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002F0")]
		public float ra
		{
			[Token(Token = "0x60011CA")]
			[Address(RVA = "0xCE370C", Offset = "0xCE370C", VA = "0xCE370C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002F1")]
		public float distance
		{
			[Token(Token = "0x60011CB")]
			[Address(RVA = "0xCE4638", Offset = "0xCE4638", VA = "0xCE4638")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002F2")]
		public float distanceSquared
		{
			[Token(Token = "0x60011CC")]
			[Address(RVA = "0xCE4668", Offset = "0xCE4668", VA = "0xCE4668")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002F3")]
		public float colorValue
		{
			[Token(Token = "0x60011CE")]
			[Address(RVA = "0xCE4AA0", Offset = "0xCE4AA0", VA = "0xCE4AA0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0xCE4330", Offset = "0xCE4330", VA = "0xCE4330")]
		public Star()
		{
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0xCE4428", Offset = "0xCE4428", VA = "0xCE4428")]
		public Star(uint id, uint hip, uint hd, ushort hr, string gliese, string bayerFlamsteedAbr, float absMag, string spectrum, Vector3 rawPosition)
		{
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xCE4698", Offset = "0xCE4698", VA = "0xCE4698")]
		private float getColorValueFromSpectrum()
		{
			return default(float);
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xCE13A8", Offset = "0xCE13A8", VA = "0xCE13A8")]
		public void GetBayerFlamsteed(out string bayerFlamsteed, out bool isFlamsteed)
		{
		}
	}
	[Token(Token = "0x2000295")]
	public class StarCell
	{
		[Token(Token = "0x4000D68")]
		private const float CELL_DISTANCE = 800f;

		[Token(Token = "0x4000D69")]
		private const float CELL_EXTEND_BOUNDS = 160f;

		[Token(Token = "0x4000D6A")]
		private const float SELECTION_ANGLE_DEGREES_THRESHOLD = 10f;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float sfSelectionCos;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private List<Star> maStars;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private bool mbSelected;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Bounds mBounds;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 mvBoundsNormal;

		[Token(Token = "0x170002F4")]
		public List<Star> stars
		{
			[Token(Token = "0x60011D3")]
			[Address(RVA = "0xCE5298", Offset = "0xCE5298", VA = "0xCE5298")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F5")]
		public bool selected
		{
			[Token(Token = "0x60011D4")]
			[Address(RVA = "0xCE52A0", Offset = "0xCE52A0", VA = "0xCE52A0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011D5")]
			[Address(RVA = "0xCE52A8", Offset = "0xCE52A8", VA = "0xCE52A8")]
			set
			{
			}
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xCE4BA8", Offset = "0xCE4BA8", VA = "0xCE4BA8")]
		static StarCell()
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xCE4C3C", Offset = "0xCE4C3C", VA = "0xCE4C3C")]
		public StarCell(float ra1, float dec1, float xStep, float yStep, Transform transform)
		{
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0xCE52B0", Offset = "0xCE52B0", VA = "0xCE52B0")]
		public bool IsWithinDotThreshold(Ray ray)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000296")]
	public class StarIFindableObject : IFindableObject
	{
		[Token(Token = "0x4000D70")]
		private const string STAR_ICONS_PATH = "Textures/UI/Browse/starPage";

		[Token(Token = "0x4000D71")]
		private const float BRIGHTEST_STAR = -1.46f;

		[Token(Token = "0x4000D72")]
		private const float DIMMEST_STAR = 5f;

		[Token(Token = "0x4000D73")]
		private const int SPRITE_PAGE_COLUMNS = 7;

		[Token(Token = "0x4000D74")]
		private const int SPRITE_PAGE_ROWS = 6;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Star mStar;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Sprite[] saIconPage;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Sprite mIcon;

		[Token(Token = "0x170002F6")]
		public Star star
		{
			[Token(Token = "0x60011D8")]
			[Address(RVA = "0xCE5408", Offset = "0xCE5408", VA = "0xCE5408")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F7")]
		public bool isEnabled
		{
			[Token(Token = "0x60011D9")]
			[Address(RVA = "0xCE5410", Offset = "0xCE5410", VA = "0xCE5410", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002F8")]
		public Sprite icon
		{
			[Token(Token = "0x60011DA")]
			[Address(RVA = "0xCE5418", Offset = "0xCE5418", VA = "0xCE5418", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F9")]
		public BrowsableContainer.BrowseIconSize iconSize
		{
			[Token(Token = "0x60011DB")]
			[Address(RVA = "0xCE5720", Offset = "0xCE5720", VA = "0xCE5720", Slot = "5")]
			get
			{
				return default(BrowsableContainer.BrowseIconSize);
			}
		}

		[Token(Token = "0x170002FA")]
		public string headingText
		{
			[Token(Token = "0x60011DC")]
			[Address(RVA = "0xCE5728", Offset = "0xCE5728", VA = "0xCE5728", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FB")]
		public string subHeadingText
		{
			[Token(Token = "0x60011DD")]
			[Address(RVA = "0xCE5884", Offset = "0xCE5884", VA = "0xCE5884", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FC")]
		public string expandableText
		{
			[Token(Token = "0x60011DE")]
			[Address(RVA = "0xCE5E8C", Offset = "0xCE5E8C", VA = "0xCE5E8C", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FD")]
		public Sprite expandableIcon
		{
			[Token(Token = "0x60011DF")]
			[Address(RVA = "0xCE5E94", Offset = "0xCE5E94", VA = "0xCE5E94", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FE")]
		public List<IFindableObject> findableChildren
		{
			[Token(Token = "0x60011E0")]
			[Address(RVA = "0xCE5E9C", Offset = "0xCE5E9C", VA = "0xCE5E9C", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FF")]
		public bool isExpandable
		{
			[Token(Token = "0x60011E1")]
			[Address(RVA = "0xCE5EA4", Offset = "0xCE5EA4", VA = "0xCE5EA4", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000300")]
		public bool isBrowseExpanded
		{
			[Token(Token = "0x60011E4")]
			[Address(RVA = "0xCE6010", Offset = "0xCE6010", VA = "0xCE6010", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0xCE53E8", Offset = "0xCE53E8", VA = "0xCE53E8")]
		public StarIFindableObject(Star star)
		{
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xCE5EAC", Offset = "0xCE5EAC", VA = "0xCE5EAC", Slot = "13")]
		public void OnBrowseTap()
		{
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xCE600C", Offset = "0xCE600C", VA = "0xCE600C", Slot = "14")]
		public void OnExpandTap()
		{
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xCE6018", Offset = "0xCE6018", VA = "0xCE6018", Slot = "16")]
		public int CompareDistance(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xCE6144", Offset = "0xCE6144", VA = "0xCE6144", Slot = "17")]
		public int CompareName(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0xCE64F8", Offset = "0xCE64F8", VA = "0xCE64F8", Slot = "19")]
		public int CompareBrightness(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xCE65F8", Offset = "0xCE65F8", VA = "0xCE65F8", Slot = "18")]
		public int CompareSize(IFindableObject comparer)
		{
			return default(int);
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0xCE6600", Offset = "0xCE6600", VA = "0xCE6600", Slot = "20")]
		public int CompareDate(IFindableObject comparer)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000297")]
	public struct StarNames
	{
		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<uint, string> sStarNamesDictionary;

		[Token(Token = "0x17000301")]
		public static Dictionary<uint, string> dictionary
		{
			[Token(Token = "0x60011EB")]
			[Address(RVA = "0xCE660C", Offset = "0xCE660C", VA = "0xCE660C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xCE11A0", Offset = "0xCE11A0", VA = "0xCE11A0")]
		public static string GetNameForStarID(uint id)
		{
			return null;
		}
	}
	[Token(Token = "0x2000298")]
	public class StarRenderer : MonoBehaviour
	{
		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float starDistanceMin;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float starRenderSizeMin;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float starRenderSizeMax;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float starTwinkleSpeed;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float starTwinkleAmplitude;

		[Token(Token = "0x4000D7E")]
		private const float STAR_BRIGHTEST_APPMAG = -1.46f;

		[Token(Token = "0x4000D7F")]
		private const float BRIGHTEST_MAGNITUDE_FOR_SPRITE = -4f;

		[Token(Token = "0x4000D80")]
		private const int MAX_RENDERABLE_STARS = 6000;

		[Token(Token = "0x4000D81")]
		private const float STAR_DISTANCE_MAX = 999f;

		[Token(Token = "0x4000D82")]
		private const float STAR_DISTANCE_MULIPLIER = 1f;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material starMaterial;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Material planetMaterial;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CameraWrapper cameraWrapper;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private GameObject mStarsGameObject;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject mPlanetsGameObject;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private GameObject[] maStarRenderableGameObects;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private StarsMesh mStarsMesh;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private StarsMesh mPlanetsMesh;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private StarsMesh[] maStarMeshes;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float sfStarDistanceMin;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static bool sbTwinkle;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float mfStarRenderDistanceMax;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int siPlanetCount;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material[] maMaterials;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private HDRProperties mHDRProperties;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static Vector3[] saPlanetPositions;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Vector2[] saPlanetBrightnessAndColor;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int miPlanetIndex;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int miPlanetIndexCache;

		[Token(Token = "0x17000302")]
		public static bool twinkle
		{
			[Token(Token = "0x60011EF")]
			[Address(RVA = "0xCEBFDC", Offset = "0xCEBFDC", VA = "0xCEBFDC")]
			set
			{
			}
		}

		[Token(Token = "0x17000303")]
		public static int planetCount
		{
			[Token(Token = "0x60011F0")]
			[Address(RVA = "0xCEC06C", Offset = "0xCEC06C", VA = "0xCEC06C")]
			set
			{
			}
		}

		[Token(Token = "0x17000304")]
		public float starRenderDistanceMax
		{
			[Token(Token = "0x60011F9")]
			[Address(RVA = "0xCEE3C4", Offset = "0xCEE3C4", VA = "0xCEE3C4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0xCEBF9C", Offset = "0xCEBF9C", VA = "0xCEBF9C")]
		public StarRenderer()
		{
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0xCEC170", Offset = "0xCEC170", VA = "0xCEC170")]
		private void Start()
		{
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0xCECCB8", Offset = "0xCECCB8", VA = "0xCECCB8")]
		private void Update()
		{
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0xCED284", Offset = "0xCED284", VA = "0xCED284")]
		public void AddStar(ref Star star)
		{
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0xCED5BC", Offset = "0xCED5BC", VA = "0xCED5BC")]
		public void ClearPlanets()
		{
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0xCED5C8", Offset = "0xCED5C8", VA = "0xCED5C8")]
		public float AddPlanet(Planet planet, float brightnessMultiplier)
		{
			return default(float);
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0xCED920", Offset = "0xCED920", VA = "0xCED920")]
		public void BuildStars()
		{
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0xCEDDA8", Offset = "0xCEDDA8", VA = "0xCEDDA8")]
		public void SetOverallBrightness(float lfBrightness)
		{
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xCEDDD4", Offset = "0xCEDDD4", VA = "0xCEDDD4")]
		public void BuildPlanets()
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xCED400", Offset = "0xCED400", VA = "0xCED400")]
		private float getBrightnessFromAppMag(float appMag)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000299")]
	public class Stars : BrowsableContainer
	{
		[Token(Token = "0x200029A")]
		public enum SpriteColors
		{
			[Token(Token = "0x4000D9F")]
			Blue,
			[Token(Token = "0x4000DA0")]
			Cyan,
			[Token(Token = "0x4000DA1")]
			White,
			[Token(Token = "0x4000DA2")]
			Beige,
			[Token(Token = "0x4000DA3")]
			Yellow,
			[Token(Token = "0x4000DA4")]
			Orange,
			[Token(Token = "0x4000DA5")]
			Red,
			[Token(Token = "0x4000DA6")]
			Unknown
		}

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public CameraWrapper cameraWrapper;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StarRenderer starRenderer;

		[Token(Token = "0x4000D98")]
		private const float STAR_PRIORITY_MAX = 0.4999f;

		[Token(Token = "0x4000D99")]
		private const int STARCELLS_COUNTX = 36;

		[Token(Token = "0x4000D9A")]
		private const int STARCELLS_COUNTY = 18;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Dictionary<uint, Star> maStarDictionary;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private StarCell[,] maStarCells;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Stars sInstance;

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xCEE434", Offset = "0xCEE434", VA = "0xCEE434")]
		public Stars()
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0xCEE4B8", Offset = "0xCEE4B8", VA = "0xCEE4B8")]
		public static Stars GetInstance()
		{
			return null;
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0xCEE544", Offset = "0xCEE544", VA = "0xCEE544")]
		private void Start()
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0xCEEEAC", Offset = "0xCEEEAC", VA = "0xCEEEAC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0xCEEF7C", Offset = "0xCEEF7C", VA = "0xCEEF7C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0xCEF09C", Offset = "0xCEF09C", VA = "0xCEF09C")]
		public void SetOverallBrightness(float lfBrightness)
		{
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0xCEF0D8", Offset = "0xCEF0D8", VA = "0xCEF0D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0xCEF6D8", Offset = "0xCEF6D8", VA = "0xCEF6D8")]
		public Star GetStarFromID(uint id)
		{
			return null;
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0xCEF754", Offset = "0xCEF754", VA = "0xCEF754")]
		public Vector3 GetStarRenderPositionFromID(uint id)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0xCEEDC0", Offset = "0xCEEDC0", VA = "0xCEEDC0")]
		private void getStarCellIndex(float ra, float dec, out int cellX, out int cellY)
		{
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0xCEF098", Offset = "0xCEF098", VA = "0xCEF098")]
		private void Clear()
		{
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0xCEF7F0", Offset = "0xCEF7F0", VA = "0xCEF7F0", Slot = "4")]
		protected override void buildBrowsableObjectListForClass()
		{
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0xCEF9D4", Offset = "0xCEF9D4", VA = "0xCEF9D4", Slot = "5")]
		protected override List<SortableProperties> getSortableProperties()
		{
			return null;
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0xCEFA9C", Offset = "0xCEFA9C", VA = "0xCEFA9C", Slot = "6")]
		protected override bool allowFilterInSubheading()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200029B")]
	public class StarsMesh
	{
		[Token(Token = "0x200029C")]
		private struct StarVertex
		{
			[Token(Token = "0x4000DB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Vector3 mvPosition;

			[Token(Token = "0x4000DB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private float mfBrightness;

			[Token(Token = "0x4000DB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private float mfColor;

			[Token(Token = "0x17000306")]
			public Vector3 position
			{
				[Token(Token = "0x6001212")]
				[Address(RVA = "0xCEFAD4", Offset = "0xCEFAD4", VA = "0xCEFAD4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000307")]
			public float brightness
			{
				[Token(Token = "0x6001213")]
				[Address(RVA = "0xCEFAE4", Offset = "0xCEFAE4", VA = "0xCEFAE4")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000308")]
			public float color
			{
				[Token(Token = "0x6001214")]
				[Address(RVA = "0xCEFAEC", Offset = "0xCEFAEC", VA = "0xCEFAEC")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6001211")]
			[Address(RVA = "0xCEFAB8", Offset = "0xCEFAB8", VA = "0xCEFAB8")]
			public StarVertex(Vector3 position, float brightness, float color)
			{
			}
		}

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Mesh mMesh;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private StarVertex[] maStarVertices;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int miStarIndex;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int miStarCount;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int miMaxStarCount;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int[] indexOffsets;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3[] maVertices;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector4[] maAux;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mbMeshIsBuilt;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int[] maIndices;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2[] quadDirections;

		[Token(Token = "0x17000305")]
		public Mesh mesh
		{
			[Token(Token = "0x600120C")]
			[Address(RVA = "0xCECCB0", Offset = "0xCECCB0", VA = "0xCECCB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0xCEC834", Offset = "0xCEC834", VA = "0xCEC834")]
		public StarsMesh(int maxStars, bool isImmutableSize)
		{
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0xCED52C", Offset = "0xCED52C", VA = "0xCED52C")]
		public void AddStarRenderable(Vector3 position, float brightness, float colorValue)
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0xCED948", Offset = "0xCED948", VA = "0xCED948")]
		public void BuildMesh(float lfBrightnessFactor)
		{
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0xCEFAA8", Offset = "0xCEFAA8", VA = "0xCEFAA8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xCEDF40", Offset = "0xCEDF40", VA = "0xCEDF40")]
		public void SetArrays(ref Vector3[] positions, ref Vector2[] brightnessAndColor, int liNumValidEntries)
		{
		}
	}
}
[Token(Token = "0x200029D")]
public class DebugText : MonoBehaviour
{
	[Token(Token = "0x4000DB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private TextMesh mTextMesh;

	[Token(Token = "0x4000DB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string ssText;

	[Token(Token = "0x6001215")]
	[Address(RVA = "0x186B70", Offset = "0x186B70", VA = "0x186B70")]
	public DebugText()
	{
	}

	[Token(Token = "0x6001216")]
	[Address(RVA = "0x1736EC", Offset = "0x1736EC", VA = "0x1736EC")]
	public static void SetText(string text)
	{
	}

	[Token(Token = "0x6001217")]
	[Address(RVA = "0x186B78", Offset = "0x186B78", VA = "0x186B78")]
	private void Start()
	{
	}

	[Token(Token = "0x6001218")]
	[Address(RVA = "0x186BE0", Offset = "0x186BE0", VA = "0x186BE0")]
	private void Update()
	{
	}
}
[Token(Token = "0x200029E")]
public class FPSDisplay : MonoBehaviour
{
	[Token(Token = "0x4000DB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool enableTweaking;

	[Token(Token = "0x4000DB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float deltaTime;

	[Token(Token = "0x4000DB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Text fpsText;

	[Token(Token = "0x4000DBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text renderScale;

	[Token(Token = "0x4000DBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Text antiAliasing;

	[Token(Token = "0x4000DBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text foveated;

	[Token(Token = "0x4000DBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float mfRenderScale;

	[Token(Token = "0x4000DBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int miAntiAliasing;

	[Token(Token = "0x4000DBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int miFoveated;

	[Token(Token = "0x600121A")]
	[Address(RVA = "0xC35060", Offset = "0xC35060", VA = "0xC35060")]
	public FPSDisplay()
	{
	}

	[Token(Token = "0x600121B")]
	[Address(RVA = "0xC35068", Offset = "0xC35068", VA = "0xC35068")]
	private void Start()
	{
	}

	[Token(Token = "0x600121C")]
	[Address(RVA = "0xC35110", Offset = "0xC35110", VA = "0xC35110")]
	private void Update()
	{
	}
}
[Token(Token = "0x200029F")]
public class FlightPath
{
	[Token(Token = "0x4000DC0")]
	public const int DEFAULT_WAYPOINT_STEPS = 200;

	[Token(Token = "0x4000DC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private List<Waypoint> maWayPoints;

	[Token(Token = "0x4000DC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private bool mbIsLoop;

	[Token(Token = "0x4000DC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float mfLength;

	[Token(Token = "0x17000309")]
	public float length
	{
		[Token(Token = "0x6001220")]
		[Address(RVA = "0x18FF00", Offset = "0x18FF00", VA = "0x18FF00")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600121D")]
	[Address(RVA = "0x18F798", Offset = "0x18F798", VA = "0x18F798")]
	public FlightPath(Vector3[] vectors, bool isLoop, int steps)
	{
	}

	[Token(Token = "0x600121E")]
	[Address(RVA = "0x18FD38", Offset = "0x18FD38", VA = "0x18FD38")]
	public void GetPositionAndDirectionAtDistance(float distance, out Vector3 position, out Vector3 direction)
	{
	}

	[Token(Token = "0x600121F")]
	[Address(RVA = "0x18FE6C", Offset = "0x18FE6C", VA = "0x18FE6C")]
	public void PlaceOnPath(GameObject gameObject, float distance)
	{
	}
}
[Token(Token = "0x20002A0")]
public class Waypoint
{
	[Token(Token = "0x4000DC4")]
	private const int kiWaypointChords = 20;

	[Token(Token = "0x4000DC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private Vector3 mvPosition;

	[Token(Token = "0x4000DC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Vector3[] storedPos;

	[Token(Token = "0x4000DC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float[] storedLengths;

	[Token(Token = "0x4000DC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3[] chordPos;

	[Token(Token = "0x4000DC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float mfLength;

	[Token(Token = "0x4000DCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Range mLengthRangeAccumulated;

	[Token(Token = "0x4000DCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int miSteps;

	[Token(Token = "0x4000DCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private FlightPath mFlightPath;

	[Token(Token = "0x4000DCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 mvDirectionEnd;

	[Token(Token = "0x4000DCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool mbLastInChain;

	[Token(Token = "0x1700030A")]
	public Vector3 position
	{
		[Token(Token = "0x6001222")]
		[Address(RVA = "0xD2B968", Offset = "0xD2B968", VA = "0xD2B968")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700030B")]
	public FlightPath flightPath
	{
		[Token(Token = "0x6001223")]
		[Address(RVA = "0xD2B978", Offset = "0xD2B978", VA = "0xD2B978")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001224")]
		[Address(RVA = "0xD2B980", Offset = "0xD2B980", VA = "0xD2B980")]
		set
		{
		}
	}

	[Token(Token = "0x1700030C")]
	public int steps
	{
		[Token(Token = "0x6001225")]
		[Address(RVA = "0xD2B988", Offset = "0xD2B988", VA = "0xD2B988")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700030D")]
	public float length
	{
		[Token(Token = "0x6001226")]
		[Address(RVA = "0xD2B990", Offset = "0xD2B990", VA = "0xD2B990")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700030E")]
	public Range lengthRangeAccumulated
	{
		[Token(Token = "0x6001227")]
		[Address(RVA = "0xD2B998", Offset = "0xD2B998", VA = "0xD2B998")]
		get
		{
			return default(Range);
		}
	}

	[Token(Token = "0x6001221")]
	[Address(RVA = "0xD2B938", Offset = "0xD2B938", VA = "0xD2B938")]
	public Waypoint(Vector3 position)
	{
	}

	[Token(Token = "0x6001228")]
	[Address(RVA = "0xD2B9AC", Offset = "0xD2B9AC", VA = "0xD2B9AC")]
	public void ComputeHermitePath(Vector3[] vecInt, int steps, float lengthAccumulated)
	{
	}

	[Token(Token = "0x6001229")]
	[Address(RVA = "0xD2C424", Offset = "0xD2C424", VA = "0xD2C424")]
	public void GetPositionAndDirectionAtDistance(float distance, out Vector3 position, out Vector3 direction)
	{
	}
}
[Token(Token = "0x20002A1")]
[ExecuteInEditMode]
public class FlightPlan : MonoBehaviour
{
	[Token(Token = "0x4000DCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject DefaultFlightPlan;

	[Token(Token = "0x4000DD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float InitialPosition;

	[Token(Token = "0x4000DD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool UseSpeed;

	[Token(Token = "0x4000DD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Speed;

	[Token(Token = "0x4000DD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float Duration;

	[Token(Token = "0x4000DD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float mfSpeed;

	[Token(Token = "0x4000DD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float mfDistanceAlongPath;

	[Token(Token = "0x1700030F")]
	public Vector3[] getFlightPath
	{
		[Token(Token = "0x600122B")]
		[Address(RVA = "0x18FF20", Offset = "0x18FF20", VA = "0x18FF20")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000310")]
	public iTweenPath getITweenPath
	{
		[Token(Token = "0x600122C")]
		[Address(RVA = "0x18FFB0", Offset = "0x18FFB0", VA = "0x18FFB0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000311")]
	public bool isClosed
	{
		[Token(Token = "0x600122D")]
		[Address(RVA = "0x190024", Offset = "0x190024", VA = "0x190024")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600122A")]
	[Address(RVA = "0x18FF08", Offset = "0x18FF08", VA = "0x18FF08")]
	public FlightPlan()
	{
	}

	[Token(Token = "0x600122E")]
	[Address(RVA = "0x1900AC", Offset = "0x1900AC", VA = "0x1900AC")]
	private FlightPath getFlightPathObject()
	{
		return null;
	}

	[Token(Token = "0x600122F")]
	[Address(RVA = "0x19013C", Offset = "0x19013C", VA = "0x19013C")]
	private bool placeOnPath(float distance)
	{
		return default(bool);
	}

	[Token(Token = "0x6001230")]
	[Address(RVA = "0x1901F8", Offset = "0x1901F8", VA = "0x1901F8")]
	public void Start()
	{
	}

	[Token(Token = "0x6001231")]
	[Address(RVA = "0x1905C0", Offset = "0x1905C0", VA = "0x1905C0")]
	public void Update()
	{
	}
}
namespace StarChartInput
{
	[Token(Token = "0x20002A2")]
	internal class AppleTVRemoteDevice
	{
		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool useAsStick;

		[Token(Token = "0x4000DD7")]
		private const float ORBIT_INERTIA_MULTIPLIER = 0.95f;

		[Token(Token = "0x4000DD8")]
		private const float LOOK_INERTIA_MULTIPLIER = 0.98f;

		[Token(Token = "0x4000DD9")]
		private const float MIN_TOUCH_DEGREES_MAGNITUDE = 0.5f;

		[Token(Token = "0x4000DDA")]
		private const float kfDragInterp = 0.5f;

		[Token(Token = "0x4000DDB")]
		private const float kfLookMultiplier = 7f;

		[Token(Token = "0x4000DDC")]
		private const float kfOrbitMultiplier = 12f;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Vector2 mvDragPositionCache;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Vector2 mvCurrentPosition;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector2 mvDragInertia;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private AppRange2d meDragType;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 mvStartSwipePosition;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int miCurrentDeviceIndex;

		[Token(Token = "0x6001232")]
		[Address(RVA = "0xE1A4BC", Offset = "0xE1A4BC", VA = "0xE1A4BC")]
		public AppleTVRemoteDevice()
		{
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0xE1A56C", Offset = "0xE1A56C", VA = "0xE1A56C")]
		public bool Update()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002A3")]
	public abstract class BaseDevice
	{
		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public DeviceMapper mMapper;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected bool mbConnectedThisFrame;

		[Token(Token = "0x17000312")]
		public abstract DeviceClass deviceClass
		{
			[Token(Token = "0x6001235")]
			get;
		}

		[Token(Token = "0x17000313")]
		public virtual bool connectedThisFrame
		{
			[Token(Token = "0x6001238")]
			[Address(RVA = "0xE1C3E8", Offset = "0xE1C3E8", VA = "0xE1C3E8", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0xE1C36C", Offset = "0xE1C36C", VA = "0xE1C36C")]
		protected BaseDevice()
		{
		}

		[Token(Token = "0x6001236")]
		public abstract bool Update();

		[Token(Token = "0x6001237")]
		public abstract Ray GetSelectionRay();

		[Token(Token = "0x6001239")]
		[Address(RVA = "0xE1C3F0", Offset = "0xE1C3F0", VA = "0xE1C3F0", Slot = "8")]
		public virtual void ClearInputs()
		{
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0xE1C3F4", Offset = "0xE1C3F4", VA = "0xE1C3F4")]
		public void AddMapping(InputContext leContext, ButtonMap[] laMapping)
		{
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0xE1C4A4", Offset = "0xE1C4A4", VA = "0xE1C4A4")]
		public void AddMapping(InputContext leContext, ButtonStateMap[] laMapping)
		{
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0xE1C554", Offset = "0xE1C554", VA = "0xE1C554")]
		public void AddMapping(InputContext leContext, AxisMap[] laMapping)
		{
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0xE1C604", Offset = "0xE1C604", VA = "0xE1C604")]
		public void AddMapping(InputContext leContext, AxisMap2d[] laMapping)
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0xE1C6B4", Offset = "0xE1C6B4", VA = "0xE1C6B4")]
		public void AddMapping(InputContext leContext, AxisMap3d[] laMapping)
		{
		}
	}
	[Token(Token = "0x20002A4")]
	internal class DaydreamDevice : BaseDevice, TrackedDeviceInterface
	{
		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		private bool mbIsConnected;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameObject mDaydream;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Transform mRayTransform;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LaserPointerComponent mLaserPointer;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Ray mRay;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector2 mTouchDownPos;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool mbValidTouch;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector2 mLastTouchPos;

		[Token(Token = "0x4000DED")]
		private const float kfMinSwipeLength = 0.3f;

		[Token(Token = "0x4000DEE")]
		private const float kfMinDPadPos = 0.75f;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ControllerConnectPanel mConnectionPanel;

		[Token(Token = "0x17000314")]
		public override DeviceClass deviceClass
		{
			[Token(Token = "0x6001240")]
			[Address(RVA = "0xCCCB20", Offset = "0xCCCB20", VA = "0xCCCB20", Slot = "4")]
			get
			{
				return default(DeviceClass);
			}
		}

		[Token(Token = "0x17000315")]
		public bool isPrimary
		{
			[Token(Token = "0x6001242")]
			[Address(RVA = "0xCCCB28", Offset = "0xCCCB28", VA = "0xCCCB28", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000316")]
		public DeviceMapper Mapper
		{
			[Token(Token = "0x6001247")]
			[Address(RVA = "0xCCCCB8", Offset = "0xCCCCB8", VA = "0xCCCCB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0xCCC5DC", Offset = "0xCCC5DC", VA = "0xCCC5DC")]
		public DaydreamDevice()
		{
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0xCCC774", Offset = "0xCCC774", VA = "0xCCC774")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0xCCCB30", Offset = "0xCCCB30", VA = "0xCCCB30", Slot = "11")]
		public void MakePrimary(bool lbPrimary)
		{
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0xCCCB34", Offset = "0xCCCB34", VA = "0xCCCB34", Slot = "5")]
		public override bool Update()
		{
			return default(bool);
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0xCCCB44", Offset = "0xCCCB44", VA = "0xCCCB44", Slot = "6")]
		public override Ray GetSelectionRay()
		{
			return default(Ray);
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0xCCCB58", Offset = "0xCCCB58", VA = "0xCCCB58", Slot = "10")]
		public void SetRayEndPoint(Vector3 lEndPoint)
		{
		}
	}
	[Token(Token = "0x20002A5")]
	public class DeviceMapper
	{
		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Context mActiveContext;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Dictionary<InputContext, Context> maContexts;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private InputContext meBaseContext;

		[Token(Token = "0x6001248")]
		[Address(RVA = "0xCCD548", Offset = "0xCCD548", VA = "0xCCD548")]
		public DeviceMapper()
		{
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0xCCD5DC", Offset = "0xCCD5DC", VA = "0xCCD5DC")]
		public void CreateOrGetContext(InputContext leContext, ref Context lContext)
		{
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0xCCC60C", Offset = "0xCCC60C", VA = "0xCCC60C")]
		public void AddContext(InputContext leContext, Context lContext)
		{
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0xCCD6B4", Offset = "0xCCD6B4", VA = "0xCCD6B4")]
		public Context GetContext(InputContext leContext)
		{
			return null;
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0xCCD730", Offset = "0xCCD730", VA = "0xCCD730")]
		public void SetContext(InputContext leContext)
		{
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0xCCD7E0", Offset = "0xCCD7E0", VA = "0xCCD7E0")]
		public void ClearContext()
		{
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0xCCD7EC", Offset = "0xCCD7EC", VA = "0xCCD7EC")]
		public void PushContext(InputContext leContext)
		{
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0xCCD888", Offset = "0xCCD888", VA = "0xCCD888")]
		public void PopContext(InputContext leContext)
		{
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0xCCD93C", Offset = "0xCCD93C", VA = "0xCCD93C")]
		public bool SetRawButton(RawInputButton leButton)
		{
			return default(bool);
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0xCCD9FC", Offset = "0xCCD9FC", VA = "0xCCD9FC")]
		public bool SetRawButtonState(RawInputButton leButton, bool lbIsDown)
		{
			return default(bool);
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0xCCDBD0", Offset = "0xCCDBD0", VA = "0xCCDBD0")]
		public bool SetRawAxis(RawInputAxis leAxis, float lValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0xCCDD58", Offset = "0xCCDD58", VA = "0xCCDD58")]
		public bool SetRawAxis(RawInputAxis2d leAxis, Vector2 lValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0xCCE050", Offset = "0xCCE050", VA = "0xCCE050")]
		public bool SetRawAxis(RawInputAxis3d leAxis, Vector3 lValue)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002A6")]
	internal class DualShock4Device : BaseDevice, TrackedDeviceInterface
	{
		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<KeyCode, RawInputButton> mButtons;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Transform mRayTransform;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LaserPointerComponent mLaserPointer;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Ray mRay;

		[Token(Token = "0x4000DF7")]
		private const float kfDPadThreshold = 0.6f;

		[Token(Token = "0x4000DF8")]
		private const float kfLowerDPadThreshold = 0.3f;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool mbDPadXTriggered;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool mbDPadYTriggered;

		[Token(Token = "0x4000DFB")]
		private const float kfTriggerThreshold = 0.6f;

		[Token(Token = "0x4000DFC")]
		private const float kfLowerTriggerThreshold = 0.3f;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		private bool mbLeftTriggered;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		private bool mbRightTriggered;

		[Token(Token = "0x17000317")]
		public override DeviceClass deviceClass
		{
			[Token(Token = "0x6001256")]
			[Address(RVA = "0xCCE478", Offset = "0xCCE478", VA = "0xCCE478", Slot = "4")]
			get
			{
				return default(DeviceClass);
			}
		}

		[Token(Token = "0x17000318")]
		public bool isPrimary
		{
			[Token(Token = "0x6001257")]
			[Address(RVA = "0xCCE480", Offset = "0xCCE480", VA = "0xCCE480", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0xCCE204", Offset = "0xCCE204", VA = "0xCCE204")]
		public DualShock4Device()
		{
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0xCCE488", Offset = "0xCCE488", VA = "0xCCE488", Slot = "11")]
		public void MakePrimary(bool lbPrimary)
		{
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0xCCE48C", Offset = "0xCCE48C", VA = "0xCCE48C", Slot = "5")]
		public override bool Update()
		{
			return default(bool);
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0xCCF028", Offset = "0xCCF028", VA = "0xCCF028", Slot = "6")]
		public override Ray GetSelectionRay()
		{
			return default(Ray);
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0xCCF03C", Offset = "0xCCF03C", VA = "0xCCF03C", Slot = "10")]
		public void SetRayEndPoint(Vector3 lEndPoint)
		{
		}
	}
	[Token(Token = "0x20002A7")]
	internal class DualShock4Updater : MonoBehaviour
	{
		[Token(Token = "0x600125C")]
		[Address(RVA = "0xCCF19C", Offset = "0xCCF19C", VA = "0xCCF19C")]
		public DualShock4Updater()
		{
		}
	}
	[Token(Token = "0x20002A8")]
	internal class GamepadDevice : BaseDevice
	{
		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<OVRInput.Button, RawInputButton> mButtons;

		[Token(Token = "0x4000E00")]
		private const float kfDPadThreshold = 0.6f;

		[Token(Token = "0x4000E01")]
		private const float kfLowerDPadThreshold = 0.3f;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool mbDPadTriggered;

		[Token(Token = "0x17000319")]
		public override DeviceClass deviceClass
		{
			[Token(Token = "0x600125E")]
			[Address(RVA = "0xCCF4CC", Offset = "0xCCF4CC", VA = "0xCCF4CC", Slot = "4")]
			get
			{
				return default(DeviceClass);
			}
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0xCCF1A4", Offset = "0xCCF1A4", VA = "0xCCF1A4")]
		public GamepadDevice()
		{
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0xCCF4D4", Offset = "0xCCF4D4", VA = "0xCCF4D4", Slot = "6")]
		public override Ray GetSelectionRay()
		{
			return default(Ray);
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0xCCF578", Offset = "0xCCF578", VA = "0xCCF578", Slot = "5")]
		public override bool Update()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002A9")]
	internal class GearVRControllerDevice : BaseDevice, TrackedDeviceInterface
	{
		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		private bool mbIsConnected;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private OVRInput.Controller meController;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Transform mRayTransform;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LaserPointerComponent mLaserPointer;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Ray mRay;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool mbIsPrimaryController;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform mTrackedRemote;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector2 mTouchDownPos;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool mbValidTouch;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector2 mLastTouchPos;

		[Token(Token = "0x4000E0D")]
		private const float kfMinSwipeLength = 0.3f;

		[Token(Token = "0x4000E0E")]
		private const float kfMinDPadPos = 0.75f;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject mLaserObject;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private GameObject mMessierObject;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject mUIScalar;

		[Token(Token = "0x1700031A")]
		public override DeviceClass deviceClass
		{
			[Token(Token = "0x6001262")]
			[Address(RVA = "0xCD10F8", Offset = "0xCD10F8", VA = "0xCD10F8", Slot = "4")]
			get
			{
				return default(DeviceClass);
			}
		}

		[Token(Token = "0x1700031B")]
		public bool isConnected
		{
			[Token(Token = "0x6001263")]
			[Address(RVA = "0xCD1100", Offset = "0xCD1100", VA = "0xCD1100")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700031C")]
		public bool isPrimary
		{
			[Token(Token = "0x6001264")]
			[Address(RVA = "0xCD1108", Offset = "0xCD1108", VA = "0xCD1108", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700031D")]
		public override bool connectedThisFrame
		{
			[Token(Token = "0x6001266")]
			[Address(RVA = "0xCD141C", Offset = "0xCD141C", VA = "0xCD141C", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700031E")]
		public DeviceMapper Mapper
		{
			[Token(Token = "0x600126B")]
			[Address(RVA = "0xCD2C50", Offset = "0xCD2C50", VA = "0xCD2C50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0xCD0F7C", Offset = "0xCD0F7C", VA = "0xCD0F7C")]
		public GearVRControllerDevice(bool lbRightHand)
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0xCD1110", Offset = "0xCD1110", VA = "0xCD1110", Slot = "11")]
		public void MakePrimary(bool lbPrimary)
		{
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0xCD1424", Offset = "0xCD1424", VA = "0xCD1424", Slot = "5")]
		public override bool Update()
		{
			return default(bool);
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0xCD2BA0", Offset = "0xCD2BA0", VA = "0xCD2BA0")]
		private Vector2 GetMappedTouchPad()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0xCD2C58", Offset = "0xCD2C58", VA = "0xCD2C58", Slot = "6")]
		public override Ray GetSelectionRay()
		{
			return default(Ray);
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0xCD2C6C", Offset = "0xCD2C6C", VA = "0xCD2C6C", Slot = "10")]
		public void SetRayEndPoint(Vector3 lEndPoint)
		{
		}
	}
	[Token(Token = "0x20002AA")]
	internal class GearVRDevice : BaseDevice
	{
		[Token(Token = "0x4000E12")]
		private const float MIN_TOUCH_MAGNITUDE = 0.01f;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		private bool mbIsTapValid;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector2 mvDragPositionCache;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector2 mvCurrentPosition;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private OVRInput.Controller meController;

		[Token(Token = "0x1700031F")]
		public override DeviceClass deviceClass
		{
			[Token(Token = "0x600126D")]
			[Address(RVA = "0xCD2DCC", Offset = "0xCD2DCC", VA = "0xCD2DCC", Slot = "4")]
			get
			{
				return default(DeviceClass);
			}
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0xCD0F6C", Offset = "0xCD0F6C", VA = "0xCD0F6C")]
		public GearVRDevice()
		{
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0xCD2DD4", Offset = "0xCD2DD4", VA = "0xCD2DD4", Slot = "6")]
		public override Ray GetSelectionRay()
		{
			return default(Ray);
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0xCD2E78", Offset = "0xCD2E78", VA = "0xCD2E78", Slot = "5")]
		public override bool Update()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002AB")]
	internal class KeyboardDevice : BaseDevice
	{
		[Token(Token = "0x17000320")]
		public override DeviceClass deviceClass
		{
			[Token(Token = "0x6001271")]
			[Address(RVA = "0xCD3390", Offset = "0xCD3390", VA = "0xCD3390", Slot = "4")]
			get
			{
				return default(DeviceClass);
			}
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xCCD540", Offset = "0xCCD540", VA = "0xCCD540")]
		public KeyboardDevice()
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0xCD3398", Offset = "0xCD3398", VA = "0xCD3398", Slot = "5")]
		public override bool Update()
		{
			return default(bool);
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0xCD3F78", Offset = "0xCD3F78", VA = "0xCD3F78", Slot = "6")]
		public override Ray GetSelectionRay()
		{
			return default(Ray);
		}
	}
	[Token(Token = "0x20002AC")]
	public class MouseDevice : BaseDevice
	{
		[Token(Token = "0x4000E17")]
		private const float SCROLL_INERTIA_MULTIPLIER = 0.92f;

		[Token(Token = "0x4000E18")]
		private const float MIN_TOUCH_DEGREES_MAGNITUDE = 0.5f;

		[Token(Token = "0x4000E19")]
		private const float MOUSE_DELTA_BREAKS_SELECTION_PIXELS = 4f;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		private bool mbIsDragging;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector2 mvDragPositionCache;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector2 mvCurrentPosition;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector2 mvDragInertia;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RawInputAxis2d meDragType;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector2 mvTapPositionCache;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Ray mRay;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static MouseDevice sInstance;

		[Token(Token = "0x17000321")]
		public override DeviceClass deviceClass
		{
			[Token(Token = "0x6001275")]
			[Address(RVA = "0xCD6AE0", Offset = "0xCD6AE0", VA = "0xCD6AE0", Slot = "4")]
			get
			{
				return default(DeviceClass);
			}
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0xCCD428", Offset = "0xCCD428", VA = "0xCCD428")]
		public MouseDevice()
		{
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0xCD6AE8", Offset = "0xCD6AE8", VA = "0xCD6AE8", Slot = "5")]
		public override bool Update()
		{
			return default(bool);
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0xCD797C", Offset = "0xCD797C", VA = "0xCD797C")]
		public static void ResetPositionDelta()
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0xCD7A7C", Offset = "0xCD7A7C", VA = "0xCD7A7C", Slot = "6")]
		public override Ray GetSelectionRay()
		{
			return default(Ray);
		}
	}
	[Token(Token = "0x20002AD")]
	internal class OculusGamepadDevice
	{
		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float kfDPadRotateScalar;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Dictionary<OVRInput.Button, RawInputButton> mButtons;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Dictionary<OVRInput.Axis2D, RawInputAxis2d> mAxes2d;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float kfStickRotateScalar;

		[Token(Token = "0x600127A")]
		[Address(RVA = "0xCD7A94", Offset = "0xCD7A94", VA = "0xCD7A94")]
		public OculusGamepadDevice()
		{
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0xCD7CCC", Offset = "0xCD7CCC", VA = "0xCD7CCC")]
		public bool Update()
		{
			return default(bool);
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0xCD81CC", Offset = "0xCD81CC", VA = "0xCD81CC")]
		private static Vector2 ProcessRange(RawInputAxis2d lRange, Vector2 lAxis)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x20002AE")]
	internal class OculusRemoteDevice : BaseDevice
	{
		[Token(Token = "0x17000322")]
		public override DeviceClass deviceClass
		{
			[Token(Token = "0x600127F")]
			[Address(RVA = "0xCD8440", Offset = "0xCD8440", VA = "0xCD8440", Slot = "4")]
			get
			{
				return default(DeviceClass);
			}
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0xCD8438", Offset = "0xCD8438", VA = "0xCD8438")]
		public OculusRemoteDevice()
		{
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0xCD8448", Offset = "0xCD8448", VA = "0xCD8448", Slot = "6")]
		public override Ray GetSelectionRay()
		{
			return default(Ray);
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0xCD84EC", Offset = "0xCD84EC", VA = "0xCD84EC", Slot = "5")]
		public override bool Update()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002AF")]
	internal class OculusTouchDevice : BaseDevice, TrackedDeviceInterface
	{
		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float kfDPadRotateScalar;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform mRayTransform;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private LaserPointerComponent mLaserPointer;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Ray mRay;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool mbIsPrimaryController;

		[Token(Token = "0x4000E2B")]
		private const float kfDPadThreshold = 0.6f;

		[Token(Token = "0x4000E2C")]
		private const float kfLowerDPadThreshold = 0.3f;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool mbDPadTriggered;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector2 mLastTouchPos;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private OVRInput.Controller meHandedDevice;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool mbIsConnected;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool mbFirstConnected;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private GameObject mControllerObject;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float mfActuallyDisconnectedTimer;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private GameObject mLaserObject;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject mMessierObject;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private GameObject mUIScalar;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float kfStickRotateScalar;

		[Token(Token = "0x17000323")]
		public override DeviceClass deviceClass
		{
			[Token(Token = "0x6001283")]
			[Address(RVA = "0xCD9FF0", Offset = "0xCD9FF0", VA = "0xCD9FF0", Slot = "4")]
			get
			{
				return default(DeviceClass);
			}
		}

		[Token(Token = "0x17000324")]
		public bool isPrimary
		{
			[Token(Token = "0x6001284")]
			[Address(RVA = "0xCD9FF8", Offset = "0xCD9FF8", VA = "0xCD9FF8", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001282")]
		[Address(RVA = "0xCD9E3C", Offset = "0xCD9E3C", VA = "0xCD9E3C")]
		public OculusTouchDevice(bool lbRightHand)
		{
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0xCDA000", Offset = "0xCDA000", VA = "0xCDA000", Slot = "11")]
		public void MakePrimary(bool lbPrimary)
		{
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0xCDA30C", Offset = "0xCDA30C", VA = "0xCDA30C", Slot = "5")]
		public override bool Update()
		{
			return default(bool);
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0xCDB1B4", Offset = "0xCDB1B4", VA = "0xCDB1B4")]
		private static Vector2 ProcessRange(RawInputAxis2d lRange, Vector2 lAxis)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0xCDB2AC", Offset = "0xCDB2AC", VA = "0xCDB2AC", Slot = "6")]
		public override Ray GetSelectionRay()
		{
			return default(Ray);
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0xCDB2C0", Offset = "0xCDB2C0", VA = "0xCDB2C0", Slot = "10")]
		public void SetRayEndPoint(Vector3 lEndPoint)
		{
		}
	}
	[Token(Token = "0x20002B0")]
	internal class OculusTouchUpdater : MonoBehaviour
	{
		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Transform mLeftController;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform mRightController;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool mbLeftConnected;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		private bool mbRightConnected;

		[Token(Token = "0x600128B")]
		[Address(RVA = "0xCDB49C", Offset = "0xCDB49C", VA = "0xCDB49C")]
		public OculusTouchUpdater()
		{
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0xCDB4A4", Offset = "0xCDB4A4", VA = "0xCDB4A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0xCDB568", Offset = "0xCDB568", VA = "0xCDB568")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x20002B1")]
	internal class TouchScreenDevice : BaseDevice
	{
		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector2 mvDragDelta;

		[Token(Token = "0x4000E3D")]
		private const float kfInertia = 0.125f;

		[Token(Token = "0x4000E3E")]
		private const float kfHaltInertia = 0.01f;

		[Token(Token = "0x4000E3F")]
		private const float kfHaltThreshold = 0.1f;

		[Token(Token = "0x4000E40")]
		private const float kfMaxTapTime = 0.5f;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Ray mRay;

		[Token(Token = "0x4000E42")]
		private const int kMaxTouches = 5;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2[] maTouchDownPos;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool[] mabValidTap;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool[] mabValidSwipe;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool[] mabValidLongPress;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float[] mafTapTimer;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool mbIsPinching;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float kfEdgeDeadZone;

		[Token(Token = "0x17000325")]
		public override DeviceClass deviceClass
		{
			[Token(Token = "0x600128F")]
			[Address(RVA = "0xCDC808", Offset = "0xCDC808", VA = "0xCDC808", Slot = "4")]
			get
			{
				return default(DeviceClass);
			}
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0xCDBE84", Offset = "0xCDBE84", VA = "0xCDBE84")]
		public TouchScreenDevice()
		{
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0xCDC810", Offset = "0xCDC810", VA = "0xCDC810", Slot = "5")]
		public override bool Update()
		{
			return default(bool);
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0xCDE084", Offset = "0xCDE084", VA = "0xCDE084")]
		private bool InDeadZone(Vector2 lScreenPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0xCDE1EC", Offset = "0xCDE1EC", VA = "0xCDE1EC")]
		private int GetValidTaps()
		{
			return default(int);
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0xCDE248", Offset = "0xCDE248", VA = "0xCDE248")]
		private void ClearAllTaps()
		{
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0xCDE394", Offset = "0xCDE394", VA = "0xCDE394", Slot = "6")]
		public override Ray GetSelectionRay()
		{
			return default(Ray);
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0xCDE29C", Offset = "0xCDE29C", VA = "0xCDE29C")]
		private Vector2 Damp(Vector2 source, float smoothing, float dt)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0xCDE3A8", Offset = "0xCDE3A8", VA = "0xCDE3A8", Slot = "8")]
		public override void ClearInputs()
		{
		}
	}
	[Token(Token = "0x20002B2")]
	public interface TrackedDeviceInterface
	{
		[Token(Token = "0x17000326")]
		bool isPrimary
		{
			[Token(Token = "0x600129A")]
			get;
		}

		[Token(Token = "0x6001297")]
		Ray GetSelectionRay();

		[Token(Token = "0x6001298")]
		void SetRayEndPoint(Vector3 lEndPoint);

		[Token(Token = "0x6001299")]
		void MakePrimary(bool lbPrimary);
	}
	[Token(Token = "0x20002B3")]
	internal class ViveDevice : BaseDevice, TrackedDeviceInterface
	{
		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector2 mTouchDownPos;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool mbValidTouch;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector2 mLastTouchPos;

		[Token(Token = "0x4000E4D")]
		private const float kfMinDPadPos = 0.5f;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int miCurrentDeviceIndex;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool mbIsPrimaryController;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Transform mRayTransform;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LaserPointerComponent mLaserPointer;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Ray mRay;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private GameObject mLaserObject;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject mMessierObject;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private GameObject mUIScalar;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool mbIsRightHand;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool mbIsConnected;

		[Token(Token = "0x17000327")]
		public override DeviceClass deviceClass
		{
			[Token(Token = "0x600129C")]
			[Address(RVA = "0xCDEF68", Offset = "0xCDEF68", VA = "0xCDEF68", Slot = "4")]
			get
			{
				return default(DeviceClass);
			}
		}

		[Token(Token = "0x17000328")]
		public bool isPrimary
		{
			[Token(Token = "0x600129D")]
			[Address(RVA = "0xCDEF5C", Offset = "0xCDEF5C", VA = "0xCDEF5C", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0xCDEEF8", Offset = "0xCDEEF8", VA = "0xCDEEF8")]
		public ViveDevice(bool lbRightHand)
		{
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0xCDEF70", Offset = "0xCDEF70", VA = "0xCDEF70")]
		public void SetIndex(int liIndex)
		{
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0xCDEF78", Offset = "0xCDEF78", VA = "0xCDEF78", Slot = "11")]
		public void MakePrimary(bool lbPrimary)
		{
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0xCDF124", Offset = "0xCDF124", VA = "0xCDF124")]
		public bool IsConnected()
		{
			return default(bool);
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0xCDF12C", Offset = "0xCDF12C", VA = "0xCDF12C", Slot = "5")]
		public override bool Update()
		{
			return default(bool);
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0xCDF134", Offset = "0xCDF134", VA = "0xCDF134", Slot = "6")]
		public override Ray GetSelectionRay()
		{
			return default(Ray);
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0xCDF148", Offset = "0xCDF148", VA = "0xCDF148", Slot = "10")]
		public void SetRayEndPoint(Vector3 lEndPoint)
		{
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0xCDF2A8", Offset = "0xCDF2A8", VA = "0xCDF2A8")]
		public void TriggerFeedback(float lfStrength)
		{
		}
	}
	[Token(Token = "0x20002B4")]
	internal class WaveVRDevice : BaseDevice, TrackedDeviceInterface
	{
		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		private bool mbIsConnected;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform mRayTransform;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private LaserPointerComponent mLaserPointer;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Ray mRay;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool mbIsPrimaryController;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Transform mTrackedRemote;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 mTouchDownPos;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool mbValidTouch;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector2 mLastTouchPos;

		[Token(Token = "0x4000E61")]
		private const float kfMinSwipeLength = 0.3f;

		[Token(Token = "0x4000E62")]
		private const float kfMinDPadPos = 0.75f;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private GameObject mLaserObject;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject mMessierObject;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private GameObject mUIScalar;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject mWaveVRBeam;

		[Token(Token = "0x17000329")]
		public override DeviceClass deviceClass
		{
			[Token(Token = "0x60012A6")]
			[Address(RVA = "0xCDFFB8", Offset = "0xCDFFB8", VA = "0xCDFFB8", Slot = "4")]
			get
			{
				return default(DeviceClass);
			}
		}

		[Token(Token = "0x1700032A")]
		public bool isConnected
		{
			[Token(Token = "0x60012A7")]
			[Address(RVA = "0xCDFFC0", Offset = "0xCDFFC0", VA = "0xCDFFC0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700032B")]
		public bool isPrimary
		{
			[Token(Token = "0x60012A8")]
			[Address(RVA = "0xCDFFC8", Offset = "0xCDFFC8", VA = "0xCDFFC8", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700032C")]
		public override bool connectedThisFrame
		{
			[Token(Token = "0x60012AA")]
			[Address(RVA = "0xCE0048", Offset = "0xCE0048", VA = "0xCE0048", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0xCDFE58", Offset = "0xCDFE58", VA = "0xCDFE58")]
		public WaveVRDevice(bool lbRightHand)
		{
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0xCDFFD0", Offset = "0xCDFFD0", VA = "0xCDFFD0", Slot = "11")]
		public void MakePrimary(bool lbPrimary)
		{
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0xCE0050", Offset = "0xCE0050", VA = "0xCE0050", Slot = "5")]
		public override bool Update()
		{
			return default(bool);
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0xCE0060", Offset = "0xCE0060", VA = "0xCE0060", Slot = "6")]
		public override Ray GetSelectionRay()
		{
			return default(Ray);
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0xCE0074", Offset = "0xCE0074", VA = "0xCE0074", Slot = "10")]
		public void SetRayEndPoint(Vector3 lEndPoint)
		{
		}
	}
}
[Token(Token = "0x20002B5")]
public class TouchCreator
{
	[Token(Token = "0x4000E67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static BindingFlags flag;

	[Token(Token = "0x4000E68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Dictionary<string, FieldInfo> fields;

	[Token(Token = "0x4000E69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private object touch;

	[Token(Token = "0x1700032D")]
	public float deltaTime
	{
		[Token(Token = "0x60012B0")]
		[Address(RVA = "0xCB7AD8", Offset = "0xCB7AD8", VA = "0xCB7AD8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60012B1")]
		[Address(RVA = "0xCB7BD8", Offset = "0xCB7BD8", VA = "0xCB7BD8")]
		set
		{
		}
	}

	[Token(Token = "0x1700032E")]
	public int tapCount
	{
		[Token(Token = "0x60012B2")]
		[Address(RVA = "0xCB7CFC", Offset = "0xCB7CFC", VA = "0xCB7CFC")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60012B3")]
		[Address(RVA = "0xCB7DFC", Offset = "0xCB7DFC", VA = "0xCB7DFC")]
		set
		{
		}
	}

	[Token(Token = "0x1700032F")]
	public TouchPhase phase
	{
		[Token(Token = "0x60012B4")]
		[Address(RVA = "0xCB7F14", Offset = "0xCB7F14", VA = "0xCB7F14")]
		get
		{
			return default(TouchPhase);
		}
		[Token(Token = "0x60012B5")]
		[Address(RVA = "0xCB8014", Offset = "0xCB8014", VA = "0xCB8014")]
		set
		{
		}
	}

	[Token(Token = "0x17000330")]
	public Vector2 deltaPosition
	{
		[Token(Token = "0x60012B6")]
		[Address(RVA = "0xCB812C", Offset = "0xCB812C", VA = "0xCB812C")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x60012B7")]
		[Address(RVA = "0xCB8234", Offset = "0xCB8234", VA = "0xCB8234")]
		set
		{
		}
	}

	[Token(Token = "0x17000331")]
	public int fingerId
	{
		[Token(Token = "0x60012B8")]
		[Address(RVA = "0xCB8354", Offset = "0xCB8354", VA = "0xCB8354")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60012B9")]
		[Address(RVA = "0xCB8454", Offset = "0xCB8454", VA = "0xCB8454")]
		set
		{
		}
	}

	[Token(Token = "0x17000332")]
	public Vector2 position
	{
		[Token(Token = "0x60012BA")]
		[Address(RVA = "0xCB856C", Offset = "0xCB856C", VA = "0xCB856C")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x60012BB")]
		[Address(RVA = "0xCB8674", Offset = "0xCB8674", VA = "0xCB8674")]
		set
		{
		}
	}

	[Token(Token = "0x17000333")]
	public Vector2 rawPosition
	{
		[Token(Token = "0x60012BC")]
		[Address(RVA = "0xCB8794", Offset = "0xCB8794", VA = "0xCB8794")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x60012BD")]
		[Address(RVA = "0xCB889C", Offset = "0xCB889C", VA = "0xCB889C")]
		set
		{
		}
	}

	[Token(Token = "0x60012AE")]
	[Address(RVA = "0xCB77BC", Offset = "0xCB77BC", VA = "0xCB77BC")]
	public TouchCreator()
	{
	}

	[Token(Token = "0x60012AF")]
	[Address(RVA = "0xCB7848", Offset = "0xCB7848", VA = "0xCB7848")]
	static TouchCreator()
	{
	}

	[Token(Token = "0x60012BE")]
	[Address(RVA = "0xCB89BC", Offset = "0xCB89BC", VA = "0xCB89BC")]
	public Touch Create()
	{
		return default(Touch);
	}
}
[Token(Token = "0x20002B6")]
public class EditorTouchInput : MonoBehaviour
{
	[Token(Token = "0x4000E6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static TouchCreator[] lastFakeTouch;

	[Token(Token = "0x60012BF")]
	[Address(RVA = "0x1897C0", Offset = "0x1897C0", VA = "0x1897C0")]
	public EditorTouchInput()
	{
	}

	[Token(Token = "0x60012C0")]
	[Address(RVA = "0x1897C8", Offset = "0x1897C8", VA = "0x1897C8")]
	public static List<Touch> GetTouches()
	{
		return null;
	}
}
[Token(Token = "0x20002B7")]
public class InputManager : MonoBehaviour
{
	[Token(Token = "0x4000E6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public CameraWrapper cameraWrapper;

	[Token(Token = "0x4000E6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static BaseController mInputController;

	[Token(Token = "0x4000E6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static GameObject mGameObject;

	[Token(Token = "0x4000E6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static bool sbDelayingInputResponse;

	[Token(Token = "0x4000E6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool mbBrowseMenuHasFocus;

	[Token(Token = "0x17000334")]
	public static bool usingLaserPointer
	{
		[Token(Token = "0x60012D2")]
		[Address(RVA = "0xC38A0C", Offset = "0xC38A0C", VA = "0xC38A0C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000335")]
	public static bool swappableControllerConnected
	{
		[Token(Token = "0x60012D3")]
		[Address(RVA = "0xC3F858", Offset = "0xC3F858", VA = "0xC3F858")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000336")]
	public static bool trackedControllersConnected
	{
		[Token(Token = "0x60012D8")]
		[Address(RVA = "0xC44D0C", Offset = "0xC44D0C", VA = "0xC44D0C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000337")]
	public static bool singleTrackedControllerConnected
	{
		[Token(Token = "0x60012D9")]
		[Address(RVA = "0xC42390", Offset = "0xC42390", VA = "0xC42390")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000338")]
	public static bool singleControllerLeftHandedness
	{
		[Token(Token = "0x60012DA")]
		[Address(RVA = "0xC3F904", Offset = "0xC3F904", VA = "0xC3F904")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60012C2")]
	[Address(RVA = "0xC43384", Offset = "0xC43384", VA = "0xC43384")]
	public InputManager()
	{
	}

	[Token(Token = "0x60012C3")]
	[Address(RVA = "0xC4338C", Offset = "0xC4338C", VA = "0xC4338C")]
	public static void DelayInputResponse()
	{
	}

	[Token(Token = "0x60012C4")]
	[Address(RVA = "0xC4341C", Offset = "0xC4341C", VA = "0xC4341C")]
	private void Start()
	{
	}

	[Token(Token = "0x60012C5")]
	[Address(RVA = "0xC43C68", Offset = "0xC43C68", VA = "0xC43C68")]
	public static void SetDeviceContext(InputContext leContext, bool lbPrimary)
	{
	}

	[Token(Token = "0x60012C6")]
	[Address(RVA = "0xC43D24", Offset = "0xC43D24", VA = "0xC43D24")]
	public static void PushDeviceContext(InputContext lePushContext)
	{
	}

	[Token(Token = "0x60012C7")]
	[Address(RVA = "0xC43DD8", Offset = "0xC43DD8", VA = "0xC43DD8")]
	public static void PopDeviceContext(InputContext lePopContext)
	{
	}

	[Token(Token = "0x60012C8")]
	[Address(RVA = "0xC43E8C", Offset = "0xC43E8C", VA = "0xC43E8C")]
	public static void ClearDeviceInputs()
	{
	}

	[Token(Token = "0x60012C9")]
	[Address(RVA = "0xC43F38", Offset = "0xC43F38", VA = "0xC43F38")]
	public static bool ShouldForwardButtonOpenMenu()
	{
		return default(bool);
	}

	[Token(Token = "0x60012CA")]
	[Address(RVA = "0xC4412C", Offset = "0xC4412C", VA = "0xC4412C")]
	public static string GetTapIcon()
	{
		return null;
	}

	[Token(Token = "0x60012CB")]
	[Address(RVA = "0xC441D8", Offset = "0xC441D8", VA = "0xC441D8")]
	public static string GetTapText()
	{
		return null;
	}

	[Token(Token = "0x60012CC")]
	[Address(RVA = "0xC44284", Offset = "0xC44284", VA = "0xC44284")]
	public static bool UseMouseSelection()
	{
		return default(bool);
	}

	[Token(Token = "0x60012CD")]
	[Address(RVA = "0xC44080", Offset = "0xC44080", VA = "0xC44080")]
	public static DeviceClass GetLastUsedDevice()
	{
		return default(DeviceClass);
	}

	[Token(Token = "0x60012CE")]
	[Address(RVA = "0xC3E2A0", Offset = "0xC3E2A0", VA = "0xC3E2A0")]
	public static bool GetAction(AppAction leAction)
	{
		return default(bool);
	}

	[Token(Token = "0x60012CF")]
	[Address(RVA = "0xC443B4", Offset = "0xC443B4", VA = "0xC443B4")]
	public static bool GetRange(AppRange2d leRange2d)
	{
		return default(bool);
	}

	[Token(Token = "0x60012D0")]
	[Address(RVA = "0xC44480", Offset = "0xC44480", VA = "0xC44480")]
	public static Ray GetSelectionRay()
	{
		return default(Ray);
	}

	[Token(Token = "0x60012D1")]
	[Address(RVA = "0xC44534", Offset = "0xC44534", VA = "0xC44534")]
	public static void SetRayEndPoint(Vector3 lEndPoint)
	{
	}

	[Token(Token = "0x60012D4")]
	[Address(RVA = "0xC37CCC", Offset = "0xC37CCC", VA = "0xC37CCC")]
	public static bool SelectionRayActive()
	{
		return default(bool);
	}

	[Token(Token = "0x60012D5")]
	[Address(RVA = "0xC44604", Offset = "0xC44604", VA = "0xC44604")]
	public static bool SelectionRayActive(bool lbPrimary)
	{
		return default(bool);
	}

	[Token(Token = "0x60012D6")]
	[Address(RVA = "0xC44884", Offset = "0xC44884", VA = "0xC44884")]
	public static void TriggerFeedback(float lfLength, float lfStrength, bool lbPrimary = true)
	{
	}

	[Token(Token = "0x60012D7")]
	[Address(RVA = "0xC44954", Offset = "0xC44954", VA = "0xC44954")]
	public static void OnControllerConnected()
	{
	}

	[Token(Token = "0x60012DB")]
	[Address(RVA = "0xC44DB8", Offset = "0xC44DB8", VA = "0xC44DB8")]
	private void Update()
	{
	}
}
namespace StarChart
{
	[Token(Token = "0x20002B8")]
	public class NativeSensors : MonoBehaviour
	{
		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AndroidJavaObject sActivityContext;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static AndroidJavaObject sJavaObject;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static AndroidJavaClass sActivityClass;

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0xE1A088", Offset = "0xE1A088", VA = "0xE1A088")]
		public NativeSensors()
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0xE1A090", Offset = "0xE1A090", VA = "0xE1A090")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0xE1A2E0", Offset = "0xE1A2E0", VA = "0xE1A2E0")]
		public static float[] GetOrientationMatrix()
		{
			return null;
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0xE1A3CC", Offset = "0xE1A3CC", VA = "0xE1A3CC")]
		public static float GetLux()
		{
			return default(float);
		}
	}
}
namespace StarChartInput
{
	[Token(Token = "0x20002B9")]
	public class BaseControlScheme : BaseController
	{
		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected List<BaseDevice> maDevices;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected BaseDevice mPrimaryDevice;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected TrackedDeviceInterface mRightHandDevice;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected TrackedDeviceInterface mLeftHandDevice;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected bool mbSupportsTwoHands;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		protected bool mbSingleTrackedControllerConnected;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		protected bool mbSwappableControllerConnected;

		[Token(Token = "0x17000339")]
		public override bool singleTrackedControllerConnected
		{
			[Token(Token = "0x60012E3")]
			[Address(RVA = "0xE1B1D4", Offset = "0xE1B1D4", VA = "0xE1B1D4", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700033A")]
		public override bool swappableControllerConnected
		{
			[Token(Token = "0x60012E4")]
			[Address(RVA = "0xE1B1DC", Offset = "0xE1B1DC", VA = "0xE1B1DC", Slot = "19")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700033B")]
		public override bool singleControllerLeftHandedness
		{
			[Token(Token = "0x60012E5")]
			[Address(RVA = "0xE1B1E4", Offset = "0xE1B1E4", VA = "0xE1B1E4", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0xE1B140", Offset = "0xE1B140", VA = "0xE1B140")]
		public BaseControlScheme()
		{
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0xE1B1EC", Offset = "0xE1B1EC", VA = "0xE1B1EC", Slot = "4")]
		public override void UpdateDevices()
		{
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0xE1BA08", Offset = "0xE1BA08", VA = "0xE1BA08", Slot = "12")]
		public override Ray GetSelectionRay()
		{
			return default(Ray);
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0xE1BAD4", Offset = "0xE1BAD4", VA = "0xE1BAD4", Slot = "14")]
		public override void SetRayEndPoint(Vector3 lEndPoint)
		{
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0xE1BC1C", Offset = "0xE1BC1C", VA = "0xE1BC1C", Slot = "13")]
		public override bool IsSelectionRaySwitchable()
		{
			return default(bool);
		}

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0xE1BC60", Offset = "0xE1BC60", VA = "0xE1BC60", Slot = "6")]
		public override void SetDeviceContext(InputContext leContext, bool lbPrimary)
		{
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0xE1BDB8", Offset = "0xE1BDB8", VA = "0xE1BDB8", Slot = "7")]
		public override void PushDeviceContext(InputContext lePushContext)
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0xE1BF10", Offset = "0xE1BF10", VA = "0xE1BF10", Slot = "8")]
		public override void PopDeviceContext(InputContext lePopContext)
		{
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0xE1C068", Offset = "0xE1C068", VA = "0xE1C068", Slot = "9")]
		public override void ClearDeviceInputs()
		{
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0xE1C1B0", Offset = "0xE1C1B0", VA = "0xE1C1B0", Slot = "5")]
		public override DeviceClass LastUsedDeviceClass()
		{
			return default(DeviceClass);
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0xE1C1B8", Offset = "0xE1C1B8", VA = "0xE1C1B8", Slot = "10")]
		public override string GetTapIcon()
		{
			return null;
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0xE1C2A8", Offset = "0xE1C2A8", VA = "0xE1C2A8", Slot = "11")]
		public override string GetTapText()
		{
			return null;
		}
	}
	[Token(Token = "0x20002BA")]
	internal class DaydreamControlScheme : BaseControlScheme
	{
		[Token(Token = "0x60012F1")]
		[Address(RVA = "0xCCBE34", Offset = "0xCCBE34", VA = "0xCCBE34")]
		public DaydreamControlScheme()
		{
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0xCCC690", Offset = "0xCCC690", VA = "0xCCC690")]
		private void Start()
		{
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0xCCC87C", Offset = "0xCCC87C", VA = "0xCCC87C", Slot = "4")]
		public override void UpdateDevices()
		{
		}
	}
	[Token(Token = "0x20002BB")]
	public class DesktopControlScheme : BaseControlScheme
	{
		[Token(Token = "0x60012F4")]
		[Address(RVA = "0xCCCCC0", Offset = "0xCCCCC0", VA = "0xCCCCC0")]
		public DesktopControlScheme()
		{
		}
	}
	[Token(Token = "0x20002BC")]
	internal class GearBaseControlScheme : BaseControlScheme
	{
		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		private bool mbRightHandConnected;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private GearVRControllerDevice lGearVRControllerR;

		[Token(Token = "0x1700033C")]
		public override bool singleControllerLeftHandedness
		{
			[Token(Token = "0x60012F6")]
			[Address(RVA = "0xCD0FD8", Offset = "0xCD0FD8", VA = "0xCD0FD8", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0xCCF9A8", Offset = "0xCCF9A8", VA = "0xCCF9A8")]
		public GearBaseControlScheme()
		{
		}
	}
	[Token(Token = "0x20002BD")]
	internal class OculusRiftControlScheme : BaseControlScheme
	{
		[Token(Token = "0x1700033D")]
		public override bool singleControllerLeftHandedness
		{
			[Token(Token = "0x60012F8")]
			[Address(RVA = "0xCD9F1C", Offset = "0xCD9F1C", VA = "0xCD9F1C", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0xCD896C", Offset = "0xCD896C", VA = "0xCD896C")]
		public OculusRiftControlScheme()
		{
		}
	}
	[Token(Token = "0x20002BE")]
	internal class PhabletControlScheme : BaseControlScheme
	{
		[Token(Token = "0x60012F9")]
		[Address(RVA = "0xCDB874", Offset = "0xCDB874", VA = "0xCDB874")]
		public PhabletControlScheme()
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0xCDBFA4", Offset = "0xCDBFA4", VA = "0xCDBFA4", Slot = "12")]
		public override Ray GetSelectionRay()
		{
			return default(Ray);
		}
	}
	[Token(Token = "0x20002BF")]
	internal class PSVRControlScheme : BaseControlScheme
	{
		[Token(Token = "0x60012FB")]
		[Address(RVA = "0xCDBFDC", Offset = "0xCDBFDC", VA = "0xCDBFDC")]
		public PSVRControlScheme()
		{
		}
	}
	[Token(Token = "0x20002C0")]
	internal class ViveControlScheme : BaseControlScheme
	{
		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private ViveDevice mRightHandViveDevice;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ViveDevice mLeftHandViveDevice;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int miPrimaryIndex;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int miSecondaryIndex;

		[Token(Token = "0x1700033E")]
		public override bool singleControllerLeftHandedness
		{
			[Token(Token = "0x60012FD")]
			[Address(RVA = "0xCDEF3C", Offset = "0xCDEF3C", VA = "0xCDEF3C", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xCDE4E4", Offset = "0xCDE4E4", VA = "0xCDE4E4")]
		public ViveControlScheme()
		{
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0xCDEF64", Offset = "0xCDEF64", VA = "0xCDEF64", Slot = "4")]
		public override void UpdateDevices()
		{
		}
	}
	[Token(Token = "0x20002C1")]
	internal class WaveVRControlScheme : BaseControlScheme
	{
		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		private bool mbRightHandConnected;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private WaveVRDevice lGearVRControllerR;

		[Token(Token = "0x1700033F")]
		public override bool singleControllerLeftHandedness
		{
			[Token(Token = "0x6001300")]
			[Address(RVA = "0xCDFE98", Offset = "0xCDFE98", VA = "0xCDFE98", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0xCDF2AC", Offset = "0xCDF2AC", VA = "0xCDF2AC")]
		public WaveVRControlScheme()
		{
		}
	}
	[Token(Token = "0x20002C2")]
	public abstract class BaseController : MonoBehaviour
	{
		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected DeviceClass meLastUsedDevice;

		[Token(Token = "0x17000340")]
		public virtual bool singleTrackedControllerConnected
		{
			[Token(Token = "0x600130E")]
			[Address(RVA = "0xE1B120", Offset = "0xE1B120", VA = "0xE1B120", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000341")]
		public virtual bool trackedControllersConnected
		{
			[Token(Token = "0x600130F")]
			[Address(RVA = "0xE1B128", Offset = "0xE1B128", VA = "0xE1B128", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000342")]
		public virtual bool singleControllerLeftHandedness
		{
			[Token(Token = "0x6001310")]
			[Address(RVA = "0xE1B130", Offset = "0xE1B130", VA = "0xE1B130", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000343")]
		public virtual bool swappableControllerConnected
		{
			[Token(Token = "0x6001311")]
			[Address(RVA = "0xE1B138", Offset = "0xE1B138", VA = "0xE1B138", Slot = "19")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0xE1AFF4", Offset = "0xE1AFF4", VA = "0xE1AFF4")]
		protected BaseController()
		{
		}

		[Token(Token = "0x6001302")]
		public abstract void UpdateDevices();

		[Token(Token = "0x6001303")]
		public abstract DeviceClass LastUsedDeviceClass();

		[Token(Token = "0x6001304")]
		public abstract void SetDeviceContext(InputContext leContext, bool lbPrimary);

		[Token(Token = "0x6001305")]
		[Address(RVA = "0xE1B004", Offset = "0xE1B004", VA = "0xE1B004", Slot = "7")]
		public virtual void PushDeviceContext(InputContext lePushContext)
		{
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0xE1B008", Offset = "0xE1B008", VA = "0xE1B008", Slot = "8")]
		public virtual void PopDeviceContext(InputContext lePopContext)
		{
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0xE1B00C", Offset = "0xE1B00C", VA = "0xE1B00C", Slot = "9")]
		public virtual void ClearDeviceInputs()
		{
		}

		[Token(Token = "0x6001308")]
		public abstract string GetTapIcon();

		[Token(Token = "0x6001309")]
		[Address(RVA = "0xE1B010", Offset = "0xE1B010", VA = "0xE1B010", Slot = "11")]
		public virtual string GetTapText()
		{
			return null;
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0xE1B06C", Offset = "0xE1B06C", VA = "0xE1B06C", Slot = "12")]
		public virtual Ray GetSelectionRay()
		{
			return default(Ray);
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0xE1B110", Offset = "0xE1B110", VA = "0xE1B110", Slot = "13")]
		public virtual bool IsSelectionRaySwitchable()
		{
			return default(bool);
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0xE1B118", Offset = "0xE1B118", VA = "0xE1B118", Slot = "14")]
		public virtual void SetRayEndPoint(Vector3 lEndPoint)
		{
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0xE1B11C", Offset = "0xE1B11C", VA = "0xE1B11C", Slot = "15")]
		public virtual void TriggerFeedback(float lfLength, float lfStrength, bool lbPrimary = true)
		{
		}
	}
	[Token(Token = "0x20002C3")]
	internal class Constants
	{
		[Token(Token = "0x4000E83")]
		public const float kfActiveAxisThreshold = 0.0001f;

		[Token(Token = "0x6001312")]
		[Address(RVA = "0xCCB6A0", Offset = "0xCCB6A0", VA = "0xCCB6A0")]
		public Constants()
		{
		}
	}
	[Token(Token = "0x20002C4")]
	public enum DeviceClass
	{
		[Token(Token = "0x4000E85")]
		Keyboard,
		[Token(Token = "0x4000E86")]
		Mouse,
		[Token(Token = "0x4000E87")]
		TouchScreen,
		[Token(Token = "0x4000E88")]
		MicroController,
		[Token(Token = "0x4000E89")]
		GamePad,
		[Token(Token = "0x4000E8A")]
		GamePadExtended,
		[Token(Token = "0x4000E8B")]
		TrackedController
	}
	[Token(Token = "0x20002C5")]
	public enum InputContext
	{
		[Token(Token = "0x4000E8D")]
		Null,
		[Token(Token = "0x4000E8E")]
		LaunchRoom,
		[Token(Token = "0x4000E8F")]
		MomentInTime,
		[Token(Token = "0x4000E90")]
		Flying,
		[Token(Token = "0x4000E91")]
		Exploring,
		[Token(Token = "0x4000E92")]
		PlanetMenu,
		[Token(Token = "0x4000E93")]
		OrbitPlanetMode,
		[Token(Token = "0x4000E94")]
		PlanetPreviewMode,
		[Token(Token = "0x4000E95")]
		NavigationMenu,
		[Token(Token = "0x4000E96")]
		OverlayMenus,
		[Token(Token = "0x4000E97")]
		VrMessageBox,
		[Token(Token = "0x4000E98")]
		Orrery,
		[Token(Token = "0x4000E99")]
		NumContexts
	}
	[Token(Token = "0x20002C6")]
	public enum RawInputButton
	{
		[Token(Token = "0x4000E9B")]
		A,
		[Token(Token = "0x4000E9C")]
		B,
		[Token(Token = "0x4000E9D")]
		X,
		[Token(Token = "0x4000E9E")]
		Y,
		[Token(Token = "0x4000E9F")]
		dPad_Left,
		[Token(Token = "0x4000EA0")]
		dPad_Right,
		[Token(Token = "0x4000EA1")]
		dPad_Up,
		[Token(Token = "0x4000EA2")]
		dPad_Down,
		[Token(Token = "0x4000EA3")]
		Menu,
		[Token(Token = "0x4000EA4")]
		Start,
		[Token(Token = "0x4000EA5")]
		LeftShoulder,
		[Token(Token = "0x4000EA6")]
		RightShoulder,
		[Token(Token = "0x4000EA7")]
		LeftTrigger,
		[Token(Token = "0x4000EA8")]
		RightTrigger,
		[Token(Token = "0x4000EA9")]
		LeftTriggerRelease,
		[Token(Token = "0x4000EAA")]
		RightTriggerRelease,
		[Token(Token = "0x4000EAB")]
		LeftStick,
		[Token(Token = "0x4000EAC")]
		RightStick,
		[Token(Token = "0x4000EAD")]
		key0,
		[Token(Token = "0x4000EAE")]
		key1,
		[Token(Token = "0x4000EAF")]
		key2,
		[Token(Token = "0x4000EB0")]
		key3,
		[Token(Token = "0x4000EB1")]
		key4,
		[Token(Token = "0x4000EB2")]
		key5,
		[Token(Token = "0x4000EB3")]
		key6,
		[Token(Token = "0x4000EB4")]
		key7,
		[Token(Token = "0x4000EB5")]
		key8,
		[Token(Token = "0x4000EB6")]
		key9,
		[Token(Token = "0x4000EB7")]
		keyS,
		[Token(Token = "0x4000EB8")]
		keyD,
		[Token(Token = "0x4000EB9")]
		keyH,
		[Token(Token = "0x4000EBA")]
		keyP,
		[Token(Token = "0x4000EBB")]
		ArrowRight,
		[Token(Token = "0x4000EBC")]
		ArrowLeft,
		[Token(Token = "0x4000EBD")]
		ArrowDown,
		[Token(Token = "0x4000EBE")]
		ArrowUp,
		[Token(Token = "0x4000EBF")]
		Esc,
		[Token(Token = "0x4000EC0")]
		LongPressA
	}
	[Token(Token = "0x20002C7")]
	public enum RawInputAxis
	{
		[Token(Token = "0x4000EC2")]
		Primary_X,
		[Token(Token = "0x4000EC3")]
		Primary_Y,
		[Token(Token = "0x4000EC4")]
		Secondary_X,
		[Token(Token = "0x4000EC5")]
		Secondary_Y
	}
	[Token(Token = "0x20002C8")]
	public enum RawInputAxis2d
	{
		[Token(Token = "0x4000EC7")]
		Primary,
		[Token(Token = "0x4000EC8")]
		Secondary,
		[Token(Token = "0x4000EC9")]
		Tertiary,
		[Token(Token = "0x4000ECA")]
		PrimarySwipe,
		[Token(Token = "0x4000ECB")]
		Touchpad,
		[Token(Token = "0x4000ECC")]
		TouchScreen
	}
	[Token(Token = "0x20002C9")]
	public enum RawInputAxis3d
	{
		[Token(Token = "0x4000ECE")]
		Position,
		[Token(Token = "0x4000ECF")]
		Direction
	}
	[Token(Token = "0x20002CA")]
	public enum AppAction
	{
		[Token(Token = "0x4000ED1")]
		NoAction,
		[Token(Token = "0x4000ED2")]
		NavigateForward,
		[Token(Token = "0x4000ED3")]
		NavigateBack,
		[Token(Token = "0x4000ED4")]
		ShowPlanetMenu,
		[Token(Token = "0x4000ED5")]
		ToggleSurfaceDetails,
		[Token(Token = "0x4000ED6")]
		GoHome,
		[Token(Token = "0x4000ED7")]
		OculusSystemMenu,
		[Token(Token = "0x4000ED8")]
		DebugToggleLabels,
		[Token(Token = "0x4000ED9")]
		SkyViewQuit,
		[Token(Token = "0x4000EDA")]
		ApplicationQuit,
		[Token(Token = "0x4000EDB")]
		MenuSelect,
		[Token(Token = "0x4000EDC")]
		MenuQuit,
		[Token(Token = "0x4000EDD")]
		MenuLeft,
		[Token(Token = "0x4000EDE")]
		MenuRight,
		[Token(Token = "0x4000EDF")]
		TravelToSun,
		[Token(Token = "0x4000EE0")]
		TravelToMercury,
		[Token(Token = "0x4000EE1")]
		TravelToVenus,
		[Token(Token = "0x4000EE2")]
		TravelToEarth,
		[Token(Token = "0x4000EE3")]
		TravelToMars,
		[Token(Token = "0x4000EE4")]
		TravelToJupiter,
		[Token(Token = "0x4000EE5")]
		TravelToSaturn,
		[Token(Token = "0x4000EE6")]
		TravelToUranus,
		[Token(Token = "0x4000EE7")]
		TravelToNeptune,
		[Token(Token = "0x4000EE8")]
		TravelToPluto,
		[Token(Token = "0x4000EE9")]
		InfoCategoryNext,
		[Token(Token = "0x4000EEA")]
		InfoCategoryPrevious,
		[Token(Token = "0x4000EEB")]
		InfoCategoryHold,
		[Token(Token = "0x4000EEC")]
		Pause,
		[Token(Token = "0x4000EED")]
		ShowSearch,
		[Token(Token = "0x4000EEE")]
		ShowPlanetPreview,
		[Token(Token = "0x4000EEF")]
		ShowNavigationMenu,
		[Token(Token = "0x4000EF0")]
		ShowSelectionMenu,
		[Token(Token = "0x4000EF1")]
		NavMenuSelect,
		[Token(Token = "0x4000EF2")]
		NavMenuQuit,
		[Token(Token = "0x4000EF3")]
		NavMenuLeft,
		[Token(Token = "0x4000EF4")]
		NavMenuRight,
		[Token(Token = "0x4000EF5")]
		SelectInfo,
		[Token(Token = "0x4000EF6")]
		Teleport,
		[Token(Token = "0x4000EF7")]
		TriggerSelection,
		[Token(Token = "0x4000EF8")]
		UnSelectPreview,
		[Token(Token = "0x4000EF9")]
		TravelToPreview
	}
	[Token(Token = "0x20002CB")]
	public enum AppState
	{
		[Token(Token = "0x4000EFB")]
		NoState,
		[Token(Token = "0x4000EFC")]
		ZoomIn,
		[Token(Token = "0x4000EFD")]
		ZoomOut,
		[Token(Token = "0x4000EFE")]
		PrimaryRay,
		[Token(Token = "0x4000EFF")]
		SecondaryRay,
		[Token(Token = "0x4000F00")]
		TriggerHeld
	}
	[Token(Token = "0x20002CC")]
	public enum AppRange
	{
		[Token(Token = "0x4000F02")]
		NoRange,
		[Token(Token = "0x4000F03")]
		Zoom
	}
	[Token(Token = "0x20002CD")]
	public enum AppRange2d
	{
		[Token(Token = "0x4000F05")]
		NoRange,
		[Token(Token = "0x4000F06")]
		LookAround,
		[Token(Token = "0x4000F07")]
		RotateAround,
		[Token(Token = "0x4000F08")]
		OrbitAround,
		[Token(Token = "0x4000F09")]
		ZoomPoint,
		[Token(Token = "0x4000F0A")]
		PrimaryTouchPad,
		[Token(Token = "0x4000F0B")]
		SecondaryTouchPad,
		[Token(Token = "0x4000F0C")]
		NavigationTouchPad,
		[Token(Token = "0x4000F0D")]
		PreviewTouchPad,
		[Token(Token = "0x4000F0E")]
		ScreenPointer
	}
	[Token(Token = "0x20002CE")]
	public enum AppRange3d
	{
		[Token(Token = "0x4000F10")]
		NoRange,
		[Token(Token = "0x4000F11")]
		HandPosition
	}
	[Token(Token = "0x20002CF")]
	public struct ButtonMap
	{
		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public RawInputButton leButton;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppAction leAction;
	}
	[Token(Token = "0x20002D0")]
	public struct ButtonStateMap
	{
		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public RawInputButton leButton;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppState leAction;
	}
	[Token(Token = "0x20002D1")]
	public struct AxisMap
	{
		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public RawInputAxis leAxis;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppRange leRange;
	}
	[Token(Token = "0x20002D2")]
	public struct AxisMap2d
	{
		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public RawInputAxis2d leAxis;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppRange2d leRange;
	}
	[Token(Token = "0x20002D3")]
	public struct AxisMap3d
	{
		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public RawInputAxis3d leAxis;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppRange3d leRange;
	}
	[Serializable]
	[Token(Token = "0x20002D4")]
	public class Context
	{
		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public InputContext meInputContext;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Dictionary<RawInputButton, AppAction> mActionMap;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<RawInputButton, AppState> mStateMap;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Dictionary<RawInputAxis, AppRange> mRangeMap;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<RawInputAxis2d, AppRange2d> mRangeMap2d;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Dictionary<RawInputAxis3d, AppRange3d> mRangeMap3d;

		[Token(Token = "0x6001313")]
		[Address(RVA = "0xCCB6A8", Offset = "0xCCB6A8", VA = "0xCCB6A8")]
		public Context()
		{
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0xCCB804", Offset = "0xCCB804", VA = "0xCCB804")]
		public void Add(RawInputButton button, AppAction action)
		{
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0xCCB888", Offset = "0xCCB888", VA = "0xCCB888")]
		public void Replace(RawInputButton button, AppAction action)
		{
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0xCCB90C", Offset = "0xCCB90C", VA = "0xCCB90C")]
		public void Add(RawInputButton button, AppState state)
		{
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0xCCB990", Offset = "0xCCB990", VA = "0xCCB990")]
		public void Add(RawInputAxis axis, AppRange range)
		{
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0xCCBA14", Offset = "0xCCBA14", VA = "0xCCBA14")]
		public void Add(RawInputAxis2d axis, AppRange2d range)
		{
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0xCCBA98", Offset = "0xCCBA98", VA = "0xCCBA98")]
		public void Replace(RawInputAxis2d axis, AppRange2d range)
		{
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0xCCBB1C", Offset = "0xCCBB1C", VA = "0xCCBB1C")]
		public void Add(RawInputAxis3d axis, AppRange3d range)
		{
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0xCCBBA0", Offset = "0xCCBBA0", VA = "0xCCBBA0")]
		public bool MapButtonToAction(RawInputButton button, out AppAction action)
		{
			return default(bool);
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0xCCBC24", Offset = "0xCCBC24", VA = "0xCCBC24")]
		public bool MapButtonToState(RawInputButton button, out AppState state)
		{
			return default(bool);
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0xCCBCA8", Offset = "0xCCBCA8", VA = "0xCCBCA8")]
		public bool MapAxisToRange(RawInputAxis axis, out AppRange range)
		{
			return default(bool);
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0xCCBD2C", Offset = "0xCCBD2C", VA = "0xCCBD2C")]
		public bool MapAxisToRange(RawInputAxis2d axis, out AppRange2d range)
		{
			return default(bool);
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0xCCBDB0", Offset = "0xCCBDB0", VA = "0xCCBDB0")]
		public bool MapAxisToRange(RawInputAxis3d axis, out AppRange3d range)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002D5")]
	internal struct MappedInput
	{
		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HashSet<AppAction> Actions;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Dictionary<AppState, bool> States;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Dictionary<AppRange, float> Ranges;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Dictionary<AppRange2d, Vector2> Ranges2d;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<AppRange3d, Vector3> Ranges3d;

		[Token(Token = "0x6001320")]
		[Address(RVA = "0xCD40EC", Offset = "0xCD40EC", VA = "0xCD40EC")]
		public bool GetAndEatAction(AppAction action)
		{
			return default(bool);
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0xCD4170", Offset = "0xCD4170", VA = "0xCD4170")]
		public bool GetAndEatState(AppState state)
		{
			return default(bool);
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0xCD4240", Offset = "0xCD4240", VA = "0xCD4240")]
		public float GetAndEatRange(AppRange range)
		{
			return default(float);
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0xCD4358", Offset = "0xCD4358", VA = "0xCD4358")]
		public Vector2 GetAndEatRange(AppRange2d range)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0xCD4494", Offset = "0xCD4494", VA = "0xCD4494")]
		public Vector3 GetAndEatRange(AppRange3d range)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0xCD4584", Offset = "0xCD4584", VA = "0xCD4584")]
		public Vector2 GetRange(AppRange2d range)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x20002D6")]
	internal static class Mapper
	{
		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static MappedInput mCurrentMappedInput;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static Stack<Context> mContextStack;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Dictionary<InputContext, Context> maContexts;

		[Token(Token = "0x17000344")]
		public static MappedInput currentMappedInput
		{
			[Token(Token = "0x6001327")]
			[Address(RVA = "0xCD47A0", Offset = "0xCD47A0", VA = "0xCD47A0")]
			get
			{
				return default(MappedInput);
			}
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0xCD4598", Offset = "0xCD4598", VA = "0xCD4598")]
		static Mapper()
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xCD4834", Offset = "0xCD4834", VA = "0xCD4834")]
		public static void Clear()
		{
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0xCD4998", Offset = "0xCD4998", VA = "0xCD4998")]
		public static void ClearStates()
		{
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0xCCC94C", Offset = "0xCCC94C", VA = "0xCCC94C")]
		public static void AddAction(AppAction lAction)
		{
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0xCD4A48", Offset = "0xCD4A48", VA = "0xCD4A48")]
		public static bool GetAction(AppAction lAction)
		{
			return default(bool);
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0xCD4B00", Offset = "0xCD4B00", VA = "0xCD4B00")]
		public static bool ConsumeAction(AppAction lAction)
		{
			return default(bool);
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0xCCDAC4", Offset = "0xCCDAC4", VA = "0xCCDAC4")]
		public static void SetState(AppState lState, bool lbIsDown)
		{
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0xCD4B94", Offset = "0xCD4B94", VA = "0xCD4B94")]
		public static bool GetState(AppState lState)
		{
			return default(bool);
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0xCCDC98", Offset = "0xCCDC98", VA = "0xCCDC98")]
		public static void AddRange(AppRange lRange, float lValue)
		{
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0xCCDE28", Offset = "0xCCDE28", VA = "0xCCDE28")]
		public static void AddRange(AppRange2d lRange, Vector2 lValue)
		{
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0xCCE128", Offset = "0xCCE128", VA = "0xCCE128")]
		public static void AddRange(AppRange3d lRange, Vector3 lValue)
		{
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0xCD4C70", Offset = "0xCD4C70", VA = "0xCD4C70")]
		public static float GetRange(AppRange lRange)
		{
			return default(float);
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0xCD4D04", Offset = "0xCD4D04", VA = "0xCD4D04")]
		public static Vector2 GetRange(AppRange2d lRange)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0xCD4DA0", Offset = "0xCD4DA0", VA = "0xCD4DA0")]
		public static Vector3 GetRange(AppRange3d lRange)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0xCD4E3C", Offset = "0xCD4E3C", VA = "0xCD4E3C")]
		public static void AddContext(InputContext leContext, Context lContext)
		{
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0xCD4EFC", Offset = "0xCD4EFC", VA = "0xCD4EFC")]
		public static Context GetContext(InputContext leContext)
		{
			return null;
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0xCD4FB4", Offset = "0xCD4FB4", VA = "0xCD4FB4")]
		public static void PushContext(InputContext leContext)
		{
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0xCD546C", Offset = "0xCD546C", VA = "0xCD546C")]
		private static void DebugShowCurrentContext()
		{
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0xCD577C", Offset = "0xCD577C", VA = "0xCD577C")]
		public static void PopContext()
		{
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0xCD59D0", Offset = "0xCD59D0", VA = "0xCD59D0")]
		public static void PopContext(InputContext leContext)
		{
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0xCD5F98", Offset = "0xCD5F98", VA = "0xCD5F98")]
		public static void PopContextsToDefault()
		{
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0xCD6084", Offset = "0xCD6084", VA = "0xCD6084")]
		public static bool SetRawButton(RawInputButton leButton)
		{
			return default(bool);
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0xCD6280", Offset = "0xCD6280", VA = "0xCD6280")]
		public static bool SetRawButtonState(RawInputButton leButton, bool lbIsDown)
		{
			return default(bool);
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0xCD64BC", Offset = "0xCD64BC", VA = "0xCD64BC")]
		public static bool SetRawAxis(RawInputAxis leAxis, float lValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0xCD66C0", Offset = "0xCD66C0", VA = "0xCD66C0")]
		public static bool SetRawAxis(RawInputAxis2d leAxis, Vector2 lValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0xCD68CC", Offset = "0xCD68CC", VA = "0xCD68CC")]
		public static bool SetRawAxis(RawInputAxis3d leAxis, Vector3 lValue)
		{
			return default(bool);
		}
	}
}
namespace SCKeyFrameSystem
{
	[Token(Token = "0x20002D7")]
	public class CameraShot : IComparable<CameraShot>
	{
		[Token(Token = "0x20002D8")]
		public enum TransitionType
		{
			[Token(Token = "0x4000F35")]
			Cut,
			[Token(Token = "0x4000F36")]
			XFade,
			[Token(Token = "0x4000F37")]
			FadeToBlack,
			[Token(Token = "0x4000F38")]
			FadeToWhite
		}

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private TransitionType meTransitionInType;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private TransitionType meTransitionOutType;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float mfTransitionInTime;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float mfTransitionOutTime;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float mfTransitionInTimeStart;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float mfTransitionOutTimeStartFromEnd;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<KeyFrame> maKeyFrameList;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private List<KeyFrame> maPositionKeyFrameList;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int miShotIndex;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private double mdShotDuration;

		[Token(Token = "0x17000345")]
		public TransitionType transitionInType
		{
			[Token(Token = "0x6001342")]
			[Address(RVA = "0xDF7250", Offset = "0xDF7250", VA = "0xDF7250")]
			get
			{
				return default(TransitionType);
			}
		}

		[Token(Token = "0x17000346")]
		public TransitionType transitionOutType
		{
			[Token(Token = "0x6001343")]
			[Address(RVA = "0xDF7258", Offset = "0xDF7258", VA = "0xDF7258")]
			get
			{
				return default(TransitionType);
			}
		}

		[Token(Token = "0x17000347")]
		public float transitionInTime
		{
			[Token(Token = "0x6001344")]
			[Address(RVA = "0xDF7260", Offset = "0xDF7260", VA = "0xDF7260")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000348")]
		public float transitionOutTime
		{
			[Token(Token = "0x6001345")]
			[Address(RVA = "0xDF7268", Offset = "0xDF7268", VA = "0xDF7268")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000349")]
		public List<KeyFrame> keyframeList
		{
			[Token(Token = "0x6001349")]
			[Address(RVA = "0xDF75CC", Offset = "0xDF75CC", VA = "0xDF75CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700034A")]
		public List<KeyFrame> positionKeyframeList
		{
			[Token(Token = "0x600134A")]
			[Address(RVA = "0xDF75D4", Offset = "0xDF75D4", VA = "0xDF75D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700034B")]
		public int shotIndex
		{
			[Token(Token = "0x600134B")]
			[Address(RVA = "0xDF75DC", Offset = "0xDF75DC", VA = "0xDF75DC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700034C")]
		public double shotDuration
		{
			[Token(Token = "0x600134C")]
			[Address(RVA = "0xDF75E4", Offset = "0xDF75E4", VA = "0xDF75E4")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700034D")]
		public float transitionInTimeStart
		{
			[Token(Token = "0x600134D")]
			[Address(RVA = "0xDF75F0", Offset = "0xDF75F0", VA = "0xDF75F0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700034E")]
		public int keyFrameCount
		{
			[Token(Token = "0x600134E")]
			[Address(RVA = "0xDF75F8", Offset = "0xDF75F8", VA = "0xDF75F8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0xDF717C", Offset = "0xDF717C", VA = "0xDF717C")]
		public CameraShot(int index)
		{
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0xDF7270", Offset = "0xDF7270", VA = "0xDF7270")]
		public void AddKeyFrame(KeyFrame keyFrame)
		{
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0xDF732C", Offset = "0xDF732C", VA = "0xDF732C")]
		public void RefreshShotDuration()
		{
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0xDF7468", Offset = "0xDF7468", VA = "0xDF7468")]
		private void SetShotIndex(int index)
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0xDF769C", Offset = "0xDF769C", VA = "0xDF769C")]
		public string GetDataAsString()
		{
			return null;
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0xDF7D8C", Offset = "0xDF7D8C", VA = "0xDF7D8C")]
		public void SetMetaData(DataString data)
		{
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0xDF7E98", Offset = "0xDF7E98", VA = "0xDF7E98", Slot = "4")]
		public int CompareTo(CameraShot otherCameraShot)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002D9")]
	public class CameraShotManager
	{
		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private List<CameraShot> maShotList;

		[Token(Token = "0x1700034F")]
		public int shotCount
		{
			[Token(Token = "0x6001353")]
			[Address(RVA = "0xDF7F40", Offset = "0xDF7F40", VA = "0xDF7F40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0xDF7EB4", Offset = "0xDF7EB4", VA = "0xDF7EB4")]
		public CameraShotManager()
		{
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0xDF7FB4", Offset = "0xDF7FB4", VA = "0xDF7FB4")]
		public void LoadSequenceFromData(string[] dataLines)
		{
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0xDF8C28", Offset = "0xDF8C28", VA = "0xDF8C28")]
		public void SetShotMetaData(DataString dataString)
		{
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0xDF847C", Offset = "0xDF847C", VA = "0xDF847C")]
		public void AddKeyFrame(KeyFrame keyFrame)
		{
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0xDF8230", Offset = "0xDF8230", VA = "0xDF8230")]
		public void DeleteAll()
		{
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0xDF8C94", Offset = "0xDF8C94", VA = "0xDF8C94")]
		public CameraShot GetShotAtIndex(int index)
		{
			return null;
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0xDF8D40", Offset = "0xDF8D40", VA = "0xDF8D40")]
		public int GetShotIndexAtTimeElapsed(double timeElapsed)
		{
			return default(int);
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0xDF8DE8", Offset = "0xDF8DE8", VA = "0xDF8DE8")]
		public double CurrentShotTimeAtTimeElapsed(int index, double timeElapsed)
		{
			return default(double);
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0xDF8EA8", Offset = "0xDF8EA8", VA = "0xDF8EA8")]
		public double GlobalTimeOfShot(int shotIndex)
		{
			return default(double);
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0xDF8F20", Offset = "0xDF8F20", VA = "0xDF8F20")]
		public string GetDataAsString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002DA")]
	public class DateTimeManager : KeyFrameManager
	{
		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double mdDateTime;

		[Token(Token = "0x600135D")]
		[Address(RVA = "0xDF90D0", Offset = "0xDF90D0", VA = "0xDF90D0")]
		public DateTimeManager()
		{
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0xDF91E0", Offset = "0xDF91E0", VA = "0xDF91E0")]
		public double Update(double timeElapsed)
		{
			return default(double);
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0xDF97BC", Offset = "0xDF97BC", VA = "0xDF97BC")]
		private Bezier2 createBezier2D(KFDateTime thisKeyFrame)
		{
			return null;
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0xDFA92C", Offset = "0xDFA92C", VA = "0xDFA92C")]
		public void RestoreDefaults()
		{
		}
	}
	[Token(Token = "0x20002DB")]
	public class FOVManager : KeyFrameManager
	{
		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float mfFOV;

		[Token(Token = "0x6001361")]
		[Address(RVA = "0xDFA93C", Offset = "0xDFA93C", VA = "0xDFA93C")]
		public FOVManager()
		{
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0xDFA960", Offset = "0xDFA960", VA = "0xDFA960")]
		public float Update(double timeElapsed, Vector3Double position)
		{
			return default(float);
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0xDFADAC", Offset = "0xDFADAC", VA = "0xDFADAC")]
		private float calculateFrameFOV(KFFov keyFrame, Vector3Double position)
		{
			return default(float);
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0xDFADF8", Offset = "0xDFADF8", VA = "0xDFADF8")]
		private float calculateFrameFromPixelWidth(KFFov keyFrame, Vector3Double position)
		{
			return default(float);
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xDFAE30", Offset = "0xDFAE30", VA = "0xDFAE30")]
		public void RestoreDefaults()
		{
		}
	}
	[Token(Token = "0x20002DC")]
	public class KeyFrameManager
	{
		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Bezier2 bezier0;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Bezier2 bezier1;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Bezier2 bezier2;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected List<KeyFrame> maKeyFrameList;

		[Token(Token = "0x17000350")]
		public int KeyFrameCount
		{
			[Token(Token = "0x600136B")]
			[Address(RVA = "0xDFBC7C", Offset = "0xDFBC7C", VA = "0xDFBC7C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0xDF90F0", Offset = "0xDF90F0", VA = "0xDF90F0")]
		public KeyFrameManager()
		{
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xDFBB1C", Offset = "0xDFBB1C", VA = "0xDFBB1C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0xDFBB90", Offset = "0xDFBB90", VA = "0xDFBB90")]
		public void AddKeyFrame(KeyFrame keyFrame)
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0xDF9D7C", Offset = "0xDF9D7C", VA = "0xDF9D7C")]
		public int GetIndexOfKeyFrame(KeyFrame keyFrame)
		{
			return default(int);
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0xDFBC00", Offset = "0xDFBC00", VA = "0xDFBC00")]
		public KeyFrame GetKeyFrameAtIndex(int index)
		{
			return null;
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0xDF95F8", Offset = "0xDF95F8", VA = "0xDF95F8")]
		public int GetKeyframesAtTimeElapsed(double timeElapsed, out KeyFrame thisKeyFrame, out KeyFrame nextKeyFrame)
		{
			return default(int);
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0xDF9738", Offset = "0xDF9738", VA = "0xDF9738")]
		protected double GetMu(double elapsedTime, KeyFrame thisKeyFrame, KeyFrame nextKeyFrame)
		{
			return default(double);
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0xDFBCF0", Offset = "0xDFBCF0", VA = "0xDFBCF0")]
		public int GetKeyFrameCount()
		{
			return default(int);
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xDF9DF8", Offset = "0xDF9DF8", VA = "0xDF9DF8")]
		public Bezier2 CreateTimeBezier(Vector2Double[] points)
		{
			return null;
		}
	}
	[Token(Token = "0x20002DD")]
	public class KeyFrame : IComparable<KeyFrame>
	{
		[Token(Token = "0x20002DE")]
		public enum Type
		{
			[Token(Token = "0x4000F49")]
			NoType,
			[Token(Token = "0x4000F4A")]
			Position,
			[Token(Token = "0x4000F4B")]
			LookAt,
			[Token(Token = "0x4000F4C")]
			Velocity,
			[Token(Token = "0x4000F4D")]
			FOV,
			[Token(Token = "0x4000F4E")]
			DateTime,
			[Token(Token = "0x4000F4F")]
			Settings,
			[Token(Token = "0x4000F50")]
			ShotMetaData,
			[Token(Token = "0x4000F51")]
			NumberOfTypes
		}

		[Token(Token = "0x20002DF")]
		public enum InterpolationStyle
		{
			[Token(Token = "0x4000F53")]
			Step,
			[Token(Token = "0x4000F54")]
			Linear,
			[Token(Token = "0x4000F55")]
			Bezier,
			[Token(Token = "0x4000F56")]
			Catmull,
			[Token(Token = "0x4000F57")]
			Ease,
			[Token(Token = "0x4000F58")]
			Quadratic,
			[Token(Token = "0x4000F59")]
			Cubic,
			[Token(Token = "0x4000F5A")]
			Quartic,
			[Token(Token = "0x4000F5B")]
			Quintic,
			[Token(Token = "0x4000F5C")]
			Slerp,
			[Token(Token = "0x4000F5D")]
			Slease
		}

		[Token(Token = "0x20002E0")]
		public enum PointType
		{
			[Token(Token = "0x4000F5F")]
			Start,
			[Token(Token = "0x4000F60")]
			Middle,
			[Token(Token = "0x4000F61")]
			End
		}

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected Vector3Double mvSplineTerminatePointOffset;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Vector3 mvSplineTensionValues;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected Type meType;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private InterpolationStyle meInterpolationStyle;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private PointType mePointType;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected double mdTime;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected int miShotIndex;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected int miGroupIndex;

		[Token(Token = "0x17000351")]
		public Vector3Double splineTerminatePointOffset
		{
			[Token(Token = "0x6001372")]
			[Address(RVA = "0xDFB070", Offset = "0xDFB070", VA = "0xDFB070")]
			set
			{
			}
		}

		[Token(Token = "0x17000352")]
		public Vector3 splineTensionValues
		{
			[Token(Token = "0x6001373")]
			[Address(RVA = "0xDFB098", Offset = "0xDFB098", VA = "0xDFB098")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000353")]
		public float splineTensionValuesX
		{
			[Token(Token = "0x6001374")]
			[Address(RVA = "0xDFB0A8", Offset = "0xDFB0A8", VA = "0xDFB0A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000354")]
		public Type type
		{
			[Token(Token = "0x6001375")]
			[Address(RVA = "0xDF7324", Offset = "0xDF7324", VA = "0xDF7324")]
			get
			{
				return default(Type);
			}
		}

		[Token(Token = "0x17000355")]
		public InterpolationStyle interpolationStyle
		{
			[Token(Token = "0x6001376")]
			[Address(RVA = "0xDF97A8", Offset = "0xDF97A8", VA = "0xDF97A8")]
			get
			{
				return default(InterpolationStyle);
			}
		}

		[Token(Token = "0x17000356")]
		public PointType pointType
		{
			[Token(Token = "0x6001377")]
			[Address(RVA = "0xDFB0B0", Offset = "0xDFB0B0", VA = "0xDFB0B0")]
			get
			{
				return default(PointType);
			}
		}

		[Token(Token = "0x17000357")]
		public double time
		{
			[Token(Token = "0x6001378")]
			[Address(RVA = "0xDF745C", Offset = "0xDF745C", VA = "0xDF745C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001379")]
			[Address(RVA = "0xDFB0B8", Offset = "0xDFB0B8", VA = "0xDFB0B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000358")]
		public int shotIndex
		{
			[Token(Token = "0x600137A")]
			[Address(RVA = "0xDF8D34", Offset = "0xDF8D34", VA = "0xDF8D34")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600137B")]
			[Address(RVA = "0xDF75C4", Offset = "0xDF75C4", VA = "0xDF75C4")]
			set
			{
			}
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xDFAE40", Offset = "0xDFAE40", VA = "0xDFAE40")]
		public KeyFrame(DataString data)
		{
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0xDFAFC4", Offset = "0xDFAFC4", VA = "0xDFAFC4")]
		public KeyFrame(Type keyFrameType, InterpolationStyle interpolationType, PointType pointType, double timeStamp)
		{
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0xDFB0C4", Offset = "0xDFB0C4", VA = "0xDFB0C4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0xDFB214", Offset = "0xDFB214", VA = "0xDFB214", Slot = "5")]
		public virtual string GetDataAsString()
		{
			return null;
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0xDFB7F8", Offset = "0xDFB7F8", VA = "0xDFB7F8")]
		protected CelestialObject getPlanetFromString(string planetString)
		{
			return null;
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0xDFB99C", Offset = "0xDFB99C", VA = "0xDFB99C")]
		protected string getEnumFromPlanetAsString(CelestialObject celestialObject)
		{
			return null;
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0xDFBAE4", Offset = "0xDFBAE4", VA = "0xDFBAE4", Slot = "4")]
		public int CompareTo(KeyFrame otherKeyFrame)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002E1")]
	public class KFDateTime : KeyFrame
	{
		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private double mdDateTime;

		[Token(Token = "0x17000359")]
		public double dateTime
		{
			[Token(Token = "0x6001383")]
			[Address(RVA = "0xDF97B0", Offset = "0xDF97B0", VA = "0xDF97B0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0xDFE200", Offset = "0xDFE200", VA = "0xDFE200")]
		public KFDateTime(InterpolationStyle interpolation, PointType pointType, double time, double dateTime)
		{
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0xDF8BBC", Offset = "0xDF8BBC", VA = "0xDF8BBC")]
		public KFDateTime(DataString data)
		{
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0xDFE238", Offset = "0xDFE238", VA = "0xDFE238", Slot = "5")]
		public override string GetDataAsString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002E2")]
	public class KFFov : KeyFrame
	{
		[Token(Token = "0x20002E3")]
		public enum FovType
		{
			[Token(Token = "0x4000F68")]
			FOV,
			[Token(Token = "0x4000F69")]
			PixelWidth
		}

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private FovType meFOVType;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private CelestialObject mObjectToFollow;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float mfTargetFOV;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float mfTargetPixelWidth;

		[Token(Token = "0x1700035A")]
		public FovType FOVType
		{
			[Token(Token = "0x6001387")]
			[Address(RVA = "0xDFADF0", Offset = "0xDFADF0", VA = "0xDFADF0")]
			get
			{
				return default(FovType);
			}
		}

		[Token(Token = "0x1700035B")]
		public float targetFOV
		{
			[Token(Token = "0x6001388")]
			[Address(RVA = "0xDFADA4", Offset = "0xDFADA4", VA = "0xDFADA4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700035C")]
		public float targetPixelWidth
		{
			[Token(Token = "0x6001389")]
			[Address(RVA = "0xDFAE28", Offset = "0xDFAE28", VA = "0xDFAE28")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0xDFE310", Offset = "0xDFE310", VA = "0xDFE310")]
		public KFFov(InterpolationStyle interpolation, PointType pointType, double time, FovType fovType, float targetParameter, [Optional] CelestialObject objectToFollow)
		{
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0xDF8AF0", Offset = "0xDF8AF0", VA = "0xDF8AF0")]
		public KFFov(DataString data)
		{
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0xDFE37C", Offset = "0xDFE37C", VA = "0xDFE37C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0xDFE494", Offset = "0xDFE494", VA = "0xDFE494", Slot = "5")]
		public override string GetDataAsString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002E4")]
	public class KFLookAt : KeyFrame
	{
		[Token(Token = "0x20002E5")]
		public enum LookAtType
		{
			[Token(Token = "0x4000F72")]
			Point,
			[Token(Token = "0x4000F73")]
			Angle,
			[Token(Token = "0x4000F74")]
			Planet,
			[Token(Token = "0x4000F75")]
			Ahead
		}

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private LookAtType meLookAtType;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3Double mvTargetPoint;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Quaternion mqTargetAngle;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3Double mvFollowOffset;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float mfTimeAheadToLookAt;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float mfRollOffset;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private CelestialObject mObjectToFollow;

		[Token(Token = "0x1700035D")]
		public LookAtType lookAtType
		{
			[Token(Token = "0x6001390")]
			[Address(RVA = "0xDFEC4C", Offset = "0xDFEC4C", VA = "0xDFEC4C")]
			get
			{
				return default(LookAtType);
			}
		}

		[Token(Token = "0x1700035E")]
		public float timeAheadToLookAt
		{
			[Token(Token = "0x6001391")]
			[Address(RVA = "0xDFEC54", Offset = "0xDFEC54", VA = "0xDFEC54")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700035F")]
		public float rollOffset
		{
			[Token(Token = "0x6001392")]
			[Address(RVA = "0xDFEC5C", Offset = "0xDFEC5C", VA = "0xDFEC5C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001393")]
			[Address(RVA = "0xDFEC64", Offset = "0xDFEC64", VA = "0xDFEC64")]
			set
			{
			}
		}

		[Token(Token = "0x17000360")]
		public Vector3Double point
		{
			[Token(Token = "0x6001396")]
			[Address(RVA = "0xE00584", Offset = "0xE00584", VA = "0xE00584")]
			get
			{
				return default(Vector3Double);
			}
		}

		[Token(Token = "0x17000361")]
		public Quaternion angle
		{
			[Token(Token = "0x6001397")]
			[Address(RVA = "0xE0070C", Offset = "0xE0070C", VA = "0xE0070C")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0xDFE794", Offset = "0xDFE794", VA = "0xDFE794")]
		public KFLookAt(InterpolationStyle interpolation, PointType pointType, double time, CelestialObject objectToFollow, float roll = 0f)
		{
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0xDFE8E0", Offset = "0xDFE8E0", VA = "0xDFE8E0")]
		public KFLookAt(InterpolationStyle interpolation, PointType pointType, double time, Quaternion rotation)
		{
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0xDFEA3C", Offset = "0xDFEA3C", VA = "0xDFEA3C")]
		public KFLookAt(InterpolationStyle interpolation, PointType pointType, double time, LookAtType lookAtType, Quaternion rotation, Vector3Double targetVector, [Optional] CelestialObject objectToFollow)
		{
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0xDF85FC", Offset = "0xDF85FC", VA = "0xDF85FC")]
		public KFLookAt(DataString data)
		{
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0xDFEC6C", Offset = "0xDFEC6C", VA = "0xDFEC6C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0xDFF85C", Offset = "0xDFF85C", VA = "0xDFF85C", Slot = "5")]
		public override string GetDataAsString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002E6")]
	public class KFPosition : KeyFrame
	{
		[Token(Token = "0x20002E7")]
		public enum PositionType
		{
			[Token(Token = "0x4000F7C")]
			Travel,
			[Token(Token = "0x4000F7D")]
			FollowPlanet
		}

		[Token(Token = "0x4000F76")]
		public const double POSITION_SCALE = 5000.0;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PositionType mePositionType;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3Double mvTargetPosition;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3Double mvFollowOffset;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private CelestialObject mObjectToFollow;

		[Token(Token = "0x17000362")]
		public Vector3Double position
		{
			[Token(Token = "0x600139B")]
			[Address(RVA = "0xE008D4", Offset = "0xE008D4", VA = "0xE008D4")]
			get
			{
				return default(Vector3Double);
			}
		}

		[Token(Token = "0x17000363")]
		public Vector3Double splineTerminator
		{
			[Token(Token = "0x600139C")]
			[Address(RVA = "0xE00A7C", Offset = "0xE00A7C", VA = "0xE00A7C")]
			get
			{
				return default(Vector3Double);
			}
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0xE007B4", Offset = "0xE007B4", VA = "0xE007B4")]
		public KFPosition(InterpolationStyle interpolation, PointType pointType, double time, Vector3Double targetPosition)
		{
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xE0083C", Offset = "0xE0083C", VA = "0xE0083C")]
		public KFPosition(InterpolationStyle interpolation, PointType pointType, double time, CelestialObject followPlanet, Vector3Double offsetPosition)
		{
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0xDF82A4", Offset = "0xDF82A4", VA = "0xDF82A4")]
		public KFPosition(DataString data)
		{
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0xE00AF0", Offset = "0xE00AF0", VA = "0xE00AF0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0xE00C1C", Offset = "0xE00C1C", VA = "0xE00C1C", Slot = "5")]
		public override string GetDataAsString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002E8")]
	public class KFPreferences : KeyFrame
	{
		[Token(Token = "0x20002E9")]
		public enum PreferenceType
		{
			[Token(Token = "0x4000F80")]
			EqGrid = 1,
			[Token(Token = "0x4000F81")]
			Atmosphere = 2,
			[Token(Token = "0x4000F82")]
			OrbitLines = 4,
			[Token(Token = "0x4000F83")]
			Ecliptic = 8,
			[Token(Token = "0x4000F84")]
			Constellations_Lines = 0x10,
			[Token(Token = "0x4000F85")]
			Constellations_Images = 0x20,
			[Token(Token = "0x4000F86")]
			Constellations_Latin = 0x40,
			[Token(Token = "0x4000F87")]
			Labels_Stars = 0x80,
			[Token(Token = "0x4000F88")]
			Labels_Planets = 0x100,
			[Token(Token = "0x4000F89")]
			Labels_Constellations = 0x200,
			[Token(Token = "0x4000F8A")]
			Labels_Messiers = 0x400,
			[Token(Token = "0x4000F8B")]
			Labels_Satellites = 0x800,
			[Token(Token = "0x4000F8C")]
			Lens_Effects = 0x1000,
			[Token(Token = "0x4000F8D")]
			Labels_Comets = 0x2000,
			[Token(Token = "0x4000F8E")]
			Labels_MeteorShowers = 0x4000
		}

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int miPreferences;

		[Token(Token = "0x17000364")]
		public int preferences
		{
			[Token(Token = "0x60013A1")]
			[Address(RVA = "0xE01204", Offset = "0xE01204", VA = "0xE01204")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0xE011CC", Offset = "0xE011CC", VA = "0xE011CC")]
		public KFPreferences(InterpolationStyle interpolation, PointType pointType, double time, int preferences)
		{
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0xDF8BF4", Offset = "0xDF8BF4", VA = "0xDF8BF4")]
		public KFPreferences(DataString data)
		{
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0xE0120C", Offset = "0xE0120C", VA = "0xE0120C", Slot = "5")]
		public override string GetDataAsString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002EA")]
	public class KFVelocity : KeyFrame
	{
		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float mfPositionIndex;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 mvVelocityParameters;

		[Token(Token = "0x17000365")]
		public float positionIndex
		{
			[Token(Token = "0x60013A5")]
			[Address(RVA = "0xE0135C", Offset = "0xE0135C", VA = "0xE0135C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60013A6")]
			[Address(RVA = "0xE01364", Offset = "0xE01364", VA = "0xE01364")]
			set
			{
			}
		}

		[Token(Token = "0x17000366")]
		public Vector3 velocityParameters
		{
			[Token(Token = "0x60013A7")]
			[Address(RVA = "0xE0136C", Offset = "0xE0136C", VA = "0xE0136C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60013A8")]
			[Address(RVA = "0xE0137C", Offset = "0xE0137C", VA = "0xE0137C")]
			set
			{
			}
		}

		[Token(Token = "0x17000367")]
		public float velocityParametersX
		{
			[Token(Token = "0x60013A9")]
			[Address(RVA = "0xE01388", Offset = "0xE01388", VA = "0xE01388")]
			set
			{
			}
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0xE012E4", Offset = "0xE012E4", VA = "0xE012E4")]
		public KFVelocity(InterpolationStyle interpolation, PointType pointType, double time, float positionIndex)
		{
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0xDF858C", Offset = "0xDF858C", VA = "0xDF858C")]
		public KFVelocity(DataString data)
		{
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xE01390", Offset = "0xE01390", VA = "0xE01390", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xE0161C", Offset = "0xE0161C", VA = "0xE0161C", Slot = "5")]
		public override string GetDataAsString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002EB")]
	public class KeyFrameSystem
	{
		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private CameraShotManager mShotManager;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private TransitionManager mTransitionManager;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PositionManager mPositionManager;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private VelocityManager mVelocityManager;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LookAtManager mLookAtManager;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private FOVManager mFOVManager;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DateTimeManager mDateTimeManager;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private PreferencesManager mPreferencesManager;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CameraShot mCurrentShot;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int miCurrentShotIndex;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private double mdTimeElapsed;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double mdShotTimeElapsed;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool mbIsFinished;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool mbFirstUpdate;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		private bool mbAboutToFinish;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		private bool mbShotChangedThisFrame;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float mfSpeed;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TransitionManager.TransitionInfo mTransitionInfo;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3Double mvPosition;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion mvLookAtAngle;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private double mdWorldTime;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float mfFOV;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int miPreferences;

		[Token(Token = "0x17000368")]
		public PositionManager positionManager
		{
			[Token(Token = "0x60013AD")]
			[Address(RVA = "0xDFC194", Offset = "0xDFC194", VA = "0xDFC194")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000369")]
		public VelocityManager velocityManager
		{
			[Token(Token = "0x60013AE")]
			[Address(RVA = "0xDFC19C", Offset = "0xDFC19C", VA = "0xDFC19C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036A")]
		public bool isFinished
		{
			[Token(Token = "0x60013AF")]
			[Address(RVA = "0xDFC1A4", Offset = "0xDFC1A4", VA = "0xDFC1A4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700036B")]
		public Vector3Double position
		{
			[Token(Token = "0x60013B0")]
			[Address(RVA = "0xDFC1AC", Offset = "0xDFC1AC", VA = "0xDFC1AC")]
			get
			{
				return default(Vector3Double);
			}
		}

		[Token(Token = "0x1700036C")]
		public Quaternion lookAtAngle
		{
			[Token(Token = "0x60013B1")]
			[Address(RVA = "0xDFC1C0", Offset = "0xDFC1C0", VA = "0xDFC1C0")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x1700036D")]
		public double worldTime
		{
			[Token(Token = "0x60013B2")]
			[Address(RVA = "0xDFC1D4", Offset = "0xDFC1D4", VA = "0xDFC1D4")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700036E")]
		public double shotProgress
		{
			[Token(Token = "0x60013B3")]
			[Address(RVA = "0xDFC1E0", Offset = "0xDFC1E0", VA = "0xDFC1E0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700036F")]
		public float fov
		{
			[Token(Token = "0x60013B4")]
			[Address(RVA = "0xDFC214", Offset = "0xDFC214", VA = "0xDFC214")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000370")]
		public int currentShotIndex
		{
			[Token(Token = "0x60013C4")]
			[Address(RVA = "0xDFE1D4", Offset = "0xDFE1D4", VA = "0xDFE1D4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000371")]
		public int shotTotal
		{
			[Token(Token = "0x60013C5")]
			[Address(RVA = "0xDFE1DC", Offset = "0xDFE1DC", VA = "0xDFE1DC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xDFBD64", Offset = "0xDFBD64", VA = "0xDFBD64")]
		public KeyFrameSystem()
		{
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0xDFC21C", Offset = "0xDFC21C", VA = "0xDFC21C")]
		private void clearPath()
		{
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0xDFC150", Offset = "0xDFC150", VA = "0xDFC150")]
		public void Reset()
		{
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0xDFC3C4", Offset = "0xDFC3C4", VA = "0xDFC3C4")]
		public void SkipToEnd()
		{
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0xDFC278", Offset = "0xDFC278", VA = "0xDFC278")]
		private void restoreDefaultSettings()
		{
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0xDFC324", Offset = "0xDFC324", VA = "0xDFC324")]
		private void emptyKeyFrameManagers()
		{
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0xDFC4BC", Offset = "0xDFC4BC", VA = "0xDFC4BC")]
		private bool loadShot(int shotIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0xDFCDA8", Offset = "0xDFCDA8", VA = "0xDFCDA8")]
		private void updateShot()
		{
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0xDFCE44", Offset = "0xDFCE44", VA = "0xDFCE44")]
		private void setShotTimeElapsed(double shotTimeElapsed)
		{
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0xDFCED4", Offset = "0xDFCED4", VA = "0xDFCED4")]
		public void UpdateState(double advanceTime)
		{
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0xDFD210", Offset = "0xDFD210", VA = "0xDFD210")]
		public void UpdateValues()
		{
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0xDFE138", Offset = "0xDFE138", VA = "0xDFE138")]
		public void PrepareForManualSetup()
		{
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xDFE13C", Offset = "0xDFE13C", VA = "0xDFE13C")]
		public void FinaliseManualSetup()
		{
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0xDFE144", Offset = "0xDFE144", VA = "0xDFE144")]
		public void AddKeyFrame(KeyFrame keyFrame)
		{
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0xDFE170", Offset = "0xDFE170", VA = "0xDFE170")]
		public void LoadData(string[] dataLines)
		{
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0xDFE1B0", Offset = "0xDFE1B0", VA = "0xDFE1B0")]
		public string GetDataAsString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002EC")]
	public class LookAtManager : KeyFrameManager
	{
		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PositionManager mPositionManager;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Quaternion mvRotation;

		[Token(Token = "0x17000372")]
		public Quaternion rotation
		{
			[Token(Token = "0x60013C7")]
			[Address(RVA = "0xE018F4", Offset = "0xE018F4", VA = "0xE018F4")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0xDFC088", Offset = "0xDFC088", VA = "0xDFC088")]
		public LookAtManager(PositionManager positionManager)
		{
		}

		[Token(Token = "0x60013C8")]
		[Address(RVA = "0xDFD604", Offset = "0xDFD604", VA = "0xDFD604")]
		public Quaternion Update(double timeElapsed, Vector3Double position)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60013C9")]
		[Address(RVA = "0xDFC414", Offset = "0xDFC414", VA = "0xDFC414")]
		public void RestoreDefaults()
		{
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0xE01B5C", Offset = "0xE01B5C", VA = "0xE01B5C")]
		private Quaternion calculateAngleAtLookAheadKeyFrame(KFLookAt keyFrame)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0xE01908", Offset = "0xE01908", VA = "0xE01908")]
		private Quaternion calculateAngleAtLookAheadKeyFrame(KFLookAt keyFrame, double timeElapsed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0xE019F8", Offset = "0xE019F8", VA = "0xE019F8")]
		private Quaternion calculateAngleBetweenPositionAndKeyFrame(KFLookAt keyFrame, Vector3Double position)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0xE01D48", Offset = "0xE01D48", VA = "0xE01D48")]
		private Quaternion calculateAngleFromPosition(Vector3Double position, Vector3Double lookAtPoint)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x20002ED")]
	public class PositionManager : KeyFrameManager
	{
		[Token(Token = "0x4000FAA")]
		public const bool USE_IMPROVED_ALGORITHM = false;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3Double mvPosition;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private VelocityManager mpVelocityManager;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private VelocityManager mVelocityManager;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double mdSplineLength;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private double[] maPositionDistances;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float mfSplineProgress;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3Double[] saPointArrayBufferForHermiteSpline;

		[Token(Token = "0x17000373")]
		public Vector3Double position
		{
			[Token(Token = "0x60013CF")]
			[Address(RVA = "0xE01EA8", Offset = "0xE01EA8", VA = "0xE01EA8")]
			get
			{
				return default(Vector3Double);
			}
		}

		[Token(Token = "0x17000374")]
		public VelocityManager velocityManager
		{
			[Token(Token = "0x60013D0")]
			[Address(RVA = "0xDFC080", Offset = "0xDFC080", VA = "0xDFC080")]
			set
			{
			}
		}

		[Token(Token = "0x17000375")]
		public float splineProgress
		{
			[Token(Token = "0x60013D1")]
			[Address(RVA = "0xE01EBC", Offset = "0xE01EBC", VA = "0xE01EBC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0xDFBF7C", Offset = "0xDFBF7C", VA = "0xDFBF7C")]
		public PositionManager()
		{
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0xDFD3DC", Offset = "0xDFD3DC", VA = "0xDFD3DC")]
		public Vector3Double Update(double timeElapsed)
		{
			return default(Vector3Double);
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0xE01EC4", Offset = "0xE01EC4", VA = "0xE01EC4")]
		public Bounds GetSplineBounds()
		{
			return default(Bounds);
		}

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0xE01BA0", Offset = "0xE01BA0", VA = "0xE01BA0")]
		public Vector3Double GetPositionAtTimeElapsed(double timeElapsed, ref float returnIndex)
		{
			return default(Vector3Double);
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0xDFC914", Offset = "0xDFC914", VA = "0xDFC914")]
		public void CalculateDistancesBetweenPositions()
		{
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0xE02BE4", Offset = "0xE02BE4", VA = "0xE02BE4")]
		public Vector3Double GetPositionAtDistance(double distance, float index0, float index1, int arcResolution, ref float retIndex)
		{
			return default(Vector3Double);
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0xE02CF8", Offset = "0xE02CF8", VA = "0xE02CF8")]
		public double GetMuAtDistance(double distance, float index0, float index1, int arcResolution)
		{
			return default(double);
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0xE027F8", Offset = "0xE027F8", VA = "0xE027F8")]
		public double CalculateArcLengthFromIndex(float index0, float index1, int arcResolution)
		{
			return default(double);
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0xE02F70", Offset = "0xE02F70", VA = "0xE02F70")]
		public Vector3Double GetPositionAtIndexF(double index)
		{
			return default(Vector3Double);
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0xE03420", Offset = "0xE03420", VA = "0xE03420")]
		private Vector3Double CalculateHermitePosition(KFPosition keyFrame, double mu)
		{
			return default(Vector3Double);
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0xDFC3E0", Offset = "0xDFC3E0", VA = "0xDFC3E0")]
		public void RestoreDefaults()
		{
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xE04930", Offset = "0xE04930", VA = "0xE04930")]
		public void CalculatePositionSplineLength(int segmentCount, ref Vector2Double[] returnArray)
		{
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0xE04CC0", Offset = "0xE04CC0", VA = "0xE04CC0")]
		public double GetDistanceFromIndexF(float index0, float index1, ref Vector2Double[] cachedDistances, ref int piStartIndex, ref double pxDistance)
		{
			return default(double);
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0xE04F20", Offset = "0xE04F20", VA = "0xE04F20")]
		public float GetIndexFAtDistance(double distance, ref Vector2Double[] cachedDistance, int seekOffset)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20002EE")]
	public class PreferencesManager : KeyFrameManager
	{
		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int miPreferences;

		[Token(Token = "0x17000376")]
		public int preferences
		{
			[Token(Token = "0x60013E1")]
			[Address(RVA = "0xE05124", Offset = "0xE05124", VA = "0xE05124")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0xDFC134", Offset = "0xDFC134", VA = "0xDFC134")]
		public PreferencesManager()
		{
		}

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0xDFDF20", Offset = "0xDFDF20", VA = "0xDFDF20")]
		public int Update(double timeElapsed)
		{
			return default(int);
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0xDFC4B0", Offset = "0xDFC4B0", VA = "0xDFC4B0")]
		public void RestoreDefaults()
		{
		}
	}
	[Token(Token = "0x20002EF")]
	public class TransitionManager
	{
		[Token(Token = "0x20002F0")]
		public struct TransitionInfo
		{
			[Token(Token = "0x4000FB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CameraShot.TransitionType transitionType;

			[Token(Token = "0x4000FB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public double mix;

			[Token(Token = "0x4000FB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool shotChangedThisFrame;
		}

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private CameraShotManager mShotManager;

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0xDFBF5C", Offset = "0xDFBF5C", VA = "0xDFBF5C")]
		public TransitionManager(CameraShotManager shotManager)
		{
		}

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0xDFCFD8", Offset = "0xDFCFD8", VA = "0xDFCFD8")]
		public TransitionInfo Update(double timeElapsed, bool shotChangedThisFrame)
		{
			return default(TransitionInfo);
		}
	}
	[Token(Token = "0x20002F1")]
	public class VelocityManager : KeyFrameManager
	{
		[Token(Token = "0x20002F2")]
		private enum InterpolationDirection
		{
			[Token(Token = "0x4000FBC")]
			In,
			[Token(Token = "0x4000FBD")]
			Out,
			[Token(Token = "0x4000FBE")]
			InOut
		}

		[Token(Token = "0x4000FB7")]
		public const int POSITION_SEGMENT_RESOLUTION = 100;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PositionManager mPositionManager;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private KFVelocity mDummyKeyFrame;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Bezier2 mTimeDistanceBezier;

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0xDFBFB4", Offset = "0xDFBFB4", VA = "0xDFBFB4")]
		public VelocityManager(PositionManager positionManager)
		{
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0xE02308", Offset = "0xE02308", VA = "0xE02308")]
		public Vector3Double Update(double timeElapsed, ref float returnIndex)
		{
			return default(Vector3Double);
		}

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0xE05170", Offset = "0xE05170", VA = "0xE05170")]
		private double interpolatedValue(KeyFrame.InterpolationStyle interpolation, double t, InterpolationDirection direction)
		{
			return default(double);
		}

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0xE05298", Offset = "0xE05298", VA = "0xE05298")]
		private int getPowerForInterpolation(KeyFrame.InterpolationStyle interpolation)
		{
			return default(int);
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0xE052C0", Offset = "0xE052C0", VA = "0xE052C0")]
		private double getDistanceFromBezierInterpolation(KFVelocity thisFrame, KFVelocity nextFrame, double timeBetweenPoints, double distanceBetweenPoints, double timeElapsed)
		{
			return default(double);
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0xE056EC", Offset = "0xE056EC", VA = "0xE056EC")]
		public void ApplySmoothing(KFVelocity keyFrame0, bool smoothNeighbours, ref Vector2Double[] cachedDistances)
		{
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0xE05978", Offset = "0xE05978", VA = "0xE05978")]
		private double smoothingAngleAtIndex(int index, ref Vector2Double[] cachedDistances)
		{
			return default(double);
		}
	}
}
[Token(Token = "0x20002F3")]
public class SunAnimator : MonoBehaviour
{
	[Token(Token = "0x4000FBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float degreesPerSecond;

	[Token(Token = "0x60013ED")]
	[Address(RVA = "0xCFA538", Offset = "0xCFA538", VA = "0xCFA538")]
	public SunAnimator()
	{
	}

	[Token(Token = "0x60013EE")]
	[Address(RVA = "0xCFA54C", Offset = "0xCFA54C", VA = "0xCFA54C")]
	private void Start()
	{
	}

	[Token(Token = "0x60013EF")]
	[Address(RVA = "0xCFA550", Offset = "0xCFA550", VA = "0xCFA550")]
	private void Update()
	{
	}
}
[Serializable]
[Token(Token = "0x20002F4")]
public class LocalisationDictionary : SerializableDictionary<string, string>
{
	[Token(Token = "0x4000FC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string lastUsedFilename;

	[Token(Token = "0x60013F0")]
	[Address(RVA = "0xC51908", Offset = "0xC51908", VA = "0xC51908")]
	public LocalisationDictionary()
	{
	}
}
[Token(Token = "0x20002F5")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0xC2F37C", Offset = "0xC2F37C")]
public class Language : ScriptableObject
{
	[Token(Token = "0x4000FC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public LocalisationDictionary localisationDictionary;

	[Token(Token = "0x60013F1")]
	[Address(RVA = "0xC48DF8", Offset = "0xC48DF8", VA = "0xC48DF8")]
	public Language()
	{
	}
}
[Token(Token = "0x20002F6")]
public class LocalisationManager : MonoBehaviour
{
	[Token(Token = "0x20002F7")]
	internal class SupportedLanguage
	{
		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Language maLanguage;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private string msFilename;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string msISOcode;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private string msRegion;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SystemLanguage meSystemLanguage;

		[Token(Token = "0x17000378")]
		internal Language language
		{
			[Token(Token = "0x60013FD")]
			[Address(RVA = "0xC527AC", Offset = "0xC527AC", VA = "0xC527AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000379")]
		internal string filename
		{
			[Token(Token = "0x60013FE")]
			[Address(RVA = "0xC525BC", Offset = "0xC525BC", VA = "0xC525BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037A")]
		internal string ISOcode
		{
			[Token(Token = "0x60013FF")]
			[Address(RVA = "0xC528F8", Offset = "0xC528F8", VA = "0xC528F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037B")]
		internal string region
		{
			[Token(Token = "0x6001400")]
			[Address(RVA = "0xC52AEC", Offset = "0xC52AEC", VA = "0xC52AEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037C")]
		internal string languageID
		{
			[Token(Token = "0x6001401")]
			[Address(RVA = "0xC52974", Offset = "0xC52974", VA = "0xC52974")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037D")]
		internal SystemLanguage systemLanguage
		{
			[Token(Token = "0x6001402")]
			[Address(RVA = "0xC52AE4", Offset = "0xC52AE4", VA = "0xC52AE4")]
			get
			{
				return default(SystemLanguage);
			}
			[Token(Token = "0x6001403")]
			[Address(RVA = "0xC52404", Offset = "0xC52404", VA = "0xC52404")]
			set
			{
			}
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0xC523CC", Offset = "0xC523CC", VA = "0xC523CC")]
		internal SupportedLanguage(string filename, string ISOcode, string region)
		{
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0xC525C4", Offset = "0xC525C4", VA = "0xC525C4")]
		internal void Load()
		{
		}
	}

	[Token(Token = "0x4000FC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SupportedLanguage sCurrentLanguage;

	[Token(Token = "0x4000FC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Dictionary<SystemLanguage, SupportedLanguage> saSupportedLanguages;

	[Token(Token = "0x4000FC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool overrideLanguage;

	[Token(Token = "0x4000FC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public SystemLanguage systemLanguageToTest;

	[Token(Token = "0x17000377")]
	public static bool IsEnglish
	{
		[Token(Token = "0x60013FB")]
		[Address(RVA = "0xC52A68", Offset = "0xC52A68", VA = "0xC52A68")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60013F2")]
	[Address(RVA = "0xC5196C", Offset = "0xC5196C", VA = "0xC5196C")]
	public LocalisationManager()
	{
	}

	[Token(Token = "0x60013F3")]
	[Address(RVA = "0xC51974", Offset = "0xC51974", VA = "0xC51974")]
	private void Awake()
	{
	}

	[Token(Token = "0x60013F4")]
	[Address(RVA = "0xC5240C", Offset = "0xC5240C", VA = "0xC5240C")]
	public static void SetLanguage(SystemLanguage systemLanguage)
	{
	}

	[Token(Token = "0x60013F5")]
	[Address(RVA = "0xC52700", Offset = "0xC52700", VA = "0xC52700")]
	public static bool GetKeyExists(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x60013F6")]
	[Address(RVA = "0xC408FC", Offset = "0xC408FC", VA = "0xC408FC")]
	public static string GetString(string key, bool strict = true)
	{
		return null;
	}

	[Token(Token = "0x60013F7")]
	[Address(RVA = "0xC402B0", Offset = "0xC402B0", VA = "0xC402B0")]
	public static string GetFormattedString(string lKey, string lParam0)
	{
		return null;
	}

	[Token(Token = "0x60013F8")]
	[Address(RVA = "0xC527B4", Offset = "0xC527B4", VA = "0xC527B4")]
	public static string GetFormattedString(string lKey, string lParam0, string lParam1)
	{
		return null;
	}

	[Token(Token = "0x60013F9")]
	[Address(RVA = "0xC52888", Offset = "0xC52888", VA = "0xC52888")]
	public static string GetISO()
	{
		return null;
	}

	[Token(Token = "0x60013FA")]
	[Address(RVA = "0xC52900", Offset = "0xC52900", VA = "0xC52900")]
	public static string GetLanguageID()
	{
		return null;
	}
}
[Token(Token = "0x20002F8")]
public class NewHorizonsController : MonoBehaviour
{
	[Token(Token = "0x4000FCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float lfRotationSpeed;

	[Token(Token = "0x6001405")]
	[Address(RVA = "0xDC5504", Offset = "0xDC5504", VA = "0xDC5504")]
	public NewHorizonsController()
	{
	}

	[Token(Token = "0x6001406")]
	[Address(RVA = "0xDC5518", Offset = "0xDC5518", VA = "0xDC5518")]
	private void Start()
	{
	}

	[Token(Token = "0x6001407")]
	[Address(RVA = "0xDC551C", Offset = "0xDC551C", VA = "0xDC551C")]
	private void Update()
	{
	}
}
[Token(Token = "0x20002F9")]
public class OrbitController : MonoBehaviour
{
	[Token(Token = "0x4000FCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float OrbitalPeriodDays;

	[Token(Token = "0x4000FCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float lfTimeFactor;

	[Token(Token = "0x6001408")]
	[Address(RVA = "0xC6B5D4", Offset = "0xC6B5D4", VA = "0xC6B5D4")]
	public OrbitController()
	{
	}

	[Token(Token = "0x6001409")]
	[Address(RVA = "0xC6B5E8", Offset = "0xC6B5E8", VA = "0xC6B5E8")]
	private void Start()
	{
	}

	[Token(Token = "0x600140A")]
	[Address(RVA = "0xC6B5EC", Offset = "0xC6B5EC", VA = "0xC6B5EC")]
	private void Update()
	{
	}
}
[Token(Token = "0x20002FA")]
public class OrreryAsteroidBelt
{
	[Token(Token = "0x20002FB")]
	public class OrreryAsteroid
	{
		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private GameObject asteroid;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Vector3 startRandCoeff;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3Double sunPos;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float heightDelta;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float leng;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 startPos;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion startRot;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 startScale;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material mMaterial;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private MeshRenderer mMeshRenderer;

		[Token(Token = "0x1700037E")]
		public GameObject Asteroid
		{
			[Token(Token = "0x6001413")]
			[Address(RVA = "0xC722A0", Offset = "0xC722A0", VA = "0xC722A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001414")]
			[Address(RVA = "0xC722A8", Offset = "0xC722A8", VA = "0xC722A8")]
			set
			{
			}
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0xC71718", Offset = "0xC71718", VA = "0xC71718")]
		public OrreryAsteroid(ref GameObject beltObject, ref Mesh mesh, float asteroidBeltDistance, System.Random rnd)
		{
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0xC7208C", Offset = "0xC7208C", VA = "0xC7208C")]
		public float randomRange(System.Random rnd, float minValue, float maxValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0xC72160", Offset = "0xC72160", VA = "0xC72160")]
		public void calcPos(float s)
		{
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0xC7229C", Offset = "0xC7229C", VA = "0xC7229C")]
		public void Update()
		{
		}
	}

	[Token(Token = "0x4000FCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector3 sSunPos;

	[Token(Token = "0x4000FCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static MaterialPropertyBlock props;

	[Token(Token = "0x4000FD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private int numAsteroids;

	[Token(Token = "0x4000FD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string name;

	[Token(Token = "0x4000FD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float asteroidBeltDistance;

	[Token(Token = "0x4000FD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject beltObject;

	[Token(Token = "0x4000FD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<OrreryAsteroid> asteroidBeltObjects;

	[Token(Token = "0x600140B")]
	[Address(RVA = "0xC713D0", Offset = "0xC713D0", VA = "0xC713D0")]
	public OrreryAsteroidBelt(string _name, int _num, float _distance, ref Mesh mesh)
	{
	}

	[Token(Token = "0x600140C")]
	[Address(RVA = "0xC71D1C", Offset = "0xC71D1C", VA = "0xC71D1C")]
	public void Clear()
	{
	}

	[Token(Token = "0x600140D")]
	[Address(RVA = "0xC71DD0", Offset = "0xC71DD0", VA = "0xC71DD0")]
	public void Update()
	{
	}
}
[Token(Token = "0x20002FC")]
public class OrreryPlanet3dName
{
	[Token(Token = "0x20002FD")]
	public class OrreryPlanet3DLetter
	{
		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float xAxisAngle;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float startAngle;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float aSpeed;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float timeOut;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float currTimeOut;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private GameObject letter;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private char asciiValue;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float scale;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float extraScale;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 startRandCoeff;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float leng;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 startPos;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion startRot;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 startScale;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 centerPivot;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float clampedScale;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float nominalSpeed;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float halfLetterSize;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public int frameCounter;

		[Token(Token = "0x1700037F")]
		public GameObject Letter
		{
			[Token(Token = "0x6001420")]
			[Address(RVA = "0xC792D4", Offset = "0xC792D4", VA = "0xC792D4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001421")]
			[Address(RVA = "0xC79FA8", Offset = "0xC79FA8", VA = "0xC79FA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000380")]
		public float StartAngle
		{
			[Token(Token = "0x6001422")]
			[Address(RVA = "0xC7A240", Offset = "0xC7A240", VA = "0xC7A240")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001423")]
			[Address(RVA = "0xC792B0", Offset = "0xC792B0", VA = "0xC792B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000381")]
		public float ASpeed
		{
			[Token(Token = "0x6001424")]
			[Address(RVA = "0xC7A248", Offset = "0xC7A248", VA = "0xC7A248")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001425")]
			[Address(RVA = "0xC7A258", Offset = "0xC7A258", VA = "0xC7A258")]
			set
			{
			}
		}

		[Token(Token = "0x17000382")]
		public float TimeOut
		{
			[Token(Token = "0x6001426")]
			[Address(RVA = "0xC7A260", Offset = "0xC7A260", VA = "0xC7A260")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001427")]
			[Address(RVA = "0xC792B8", Offset = "0xC792B8", VA = "0xC792B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000383")]
		public float ExtraScale
		{
			[Token(Token = "0x6001428")]
			[Address(RVA = "0xC7A268", Offset = "0xC7A268", VA = "0xC7A268")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001429")]
			[Address(RVA = "0xC792C4", Offset = "0xC792C4", VA = "0xC792C4")]
			set
			{
			}
		}

		[Token(Token = "0x17000384")]
		public float NominalSpeed
		{
			[Token(Token = "0x600142A")]
			[Address(RVA = "0xC7A250", Offset = "0xC7A250", VA = "0xC7A250")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600142B")]
			[Address(RVA = "0xC792CC", Offset = "0xC792CC", VA = "0xC792CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000385")]
		public char AsciiValue
		{
			[Token(Token = "0x600142C")]
			[Address(RVA = "0xC79B84", Offset = "0xC79B84", VA = "0xC79B84")]
			get
			{
				return default(char);
			}
			[Token(Token = "0x600142D")]
			[Address(RVA = "0xC79FA0", Offset = "0xC79FA0", VA = "0xC79FA0")]
			set
			{
			}
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0xC7909C", Offset = "0xC7909C", VA = "0xC7909C")]
		public OrreryPlanet3DLetter(ref GameObject prefab, float asteroidBeltDistance, float _scale, float angle, float xAA, char _aciiValue)
		{
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0xC79FB0", Offset = "0xC79FB0", VA = "0xC79FB0")]
		public void calcPos(float s, float combinedScale, float extraS, float kernOffset)
		{
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0xC79B8C", Offset = "0xC79B8C", VA = "0xC79B8C")]
		public void Update(Vector3 _pv, float kernOffset, float timeLapse)
		{
		}
	}

	[Token(Token = "0x4000FDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private float MANUAL_I_FONT_KERN_TO_BE_DONE_PROPERLY;

	[Token(Token = "0x4000FE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private int numLetters;

	[Token(Token = "0x4000FE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000FE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float pivotDistance;

	[Token(Token = "0x4000FE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float orbitDistance;

	[Token(Token = "0x4000FE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float angleLetterInc;

	[Token(Token = "0x4000FE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Planets.Names planetEName;

	[Token(Token = "0x4000FE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool enableNames;

	[Token(Token = "0x4000FE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	private bool enableOrbitNames;

	[Token(Token = "0x4000FE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<OrreryPlanet3DLetter> letters;

	[Token(Token = "0x4000FE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public List<OrreryPlanet3DLetter> orbitLetters;

	[Token(Token = "0x6001415")]
	[Address(RVA = "0xC78C38", Offset = "0xC78C38", VA = "0xC78C38")]
	public OrreryPlanet3dName(Planets.Names _planetEName)
	{
	}

	[Token(Token = "0x6001416")]
	[Address(RVA = "0xC78F78", Offset = "0xC78F78", VA = "0xC78F78")]
	public float planetScale3dText(Planets.Names planetName)
	{
		return default(float);
	}

	[Token(Token = "0x6001417")]
	[Address(RVA = "0xC760C0", Offset = "0xC760C0", VA = "0xC760C0")]
	public void ShowPlanetName(float _startAngle, float _timeOut, float _extraScale, float _speed)
	{
	}

	[Token(Token = "0x6001418")]
	[Address(RVA = "0xC739DC", Offset = "0xC739DC", VA = "0xC739DC")]
	public void HidePlanetName()
	{
	}

	[Token(Token = "0x6001419")]
	[Address(RVA = "0xC792DC", Offset = "0xC792DC", VA = "0xC792DC")]
	public void ShowPlanetOrbitName()
	{
	}

	[Token(Token = "0x600141A")]
	[Address(RVA = "0xC73B34", Offset = "0xC73B34", VA = "0xC73B34")]
	public void HidePlanetOrbitName()
	{
	}

	[Token(Token = "0x600141B")]
	[Address(RVA = "0xC79438", Offset = "0xC79438", VA = "0xC79438")]
	public void Clear()
	{
	}

	[Token(Token = "0x600141C")]
	[Address(RVA = "0xC79754", Offset = "0xC79754", VA = "0xC79754")]
	public void Update(float timeStep)
	{
	}
}
[Token(Token = "0x20002FE")]
public class Platform : MonoBehaviour
{
	[Token(Token = "0x20002FF")]
	internal struct MacModel
	{
		[Token(Token = "0x2000300")]
		internal enum Types
		{
			[Token(Token = "0x4001009")]
			Undetermined,
			[Token(Token = "0x400100A")]
			PowerMac,
			[Token(Token = "0x400100B")]
			PowerBook,
			[Token(Token = "0x400100C")]
			iMac,
			[Token(Token = "0x400100D")]
			Macmini,
			[Token(Token = "0x400100E")]
			MacPro,
			[Token(Token = "0x400100F")]
			MacBook,
			[Token(Token = "0x4001010")]
			MacBookAir,
			[Token(Token = "0x4001011")]
			MacBookPro,
			[Token(Token = "0x4001012")]
			RackMac,
			[Token(Token = "0x4001013")]
			Xserve
		}

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Types meModelType;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private readonly int miMajorModelNumber;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly int miMinorModelNumber;

		[Token(Token = "0x170003A2")]
		public Types type
		{
			[Token(Token = "0x600144F")]
			[Address(RVA = "0xE5A574", Offset = "0xE5A574", VA = "0xE5A574")]
			get
			{
				return default(Types);
			}
		}

		[Token(Token = "0x170003A3")]
		public int majorModelNumber
		{
			[Token(Token = "0x6001450")]
			[Address(RVA = "0xE5A57C", Offset = "0xE5A57C", VA = "0xE5A57C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003A4")]
		public int minorModelNumber
		{
			[Token(Token = "0x6001451")]
			[Address(RVA = "0xE5A584", Offset = "0xE5A584", VA = "0xE5A584")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0xE5A56C", Offset = "0xE5A56C", VA = "0xE5A56C")]
		public MacModel(string lsDeviceModel)
		{
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0xE5A698", Offset = "0xE5A698", VA = "0xE5A698", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}

	[Token(Token = "0x2000420")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2F3CC", Offset = "0xC2F3CC")]
	private sealed class <LoadAssetBundleAsync>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string <lBundleName>__0;

		[Token(Token = "0x40016F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal Stopwatch <lStopWatch>__0;

		[Token(Token = "0x40016F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal AssetBundleCreateRequest <lBundleLoadRequest>__0;

		[Token(Token = "0x40016F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x40016F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x40016F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x17000484")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001A50")]
			[Address(RVA = "0xE59F54", Offset = "0xE59F54", VA = "0xE59F54", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000485")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A51")]
			[Address(RVA = "0xE59F5C", Offset = "0xE59F5C", VA = "0xE59F5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A4E")]
		[Address(RVA = "0xE58764", Offset = "0xE58764", VA = "0xE58764")]
		[DebuggerHidden]
		public <LoadAssetBundleAsync>c__Iterator0()
		{
		}

		[Token(Token = "0x6001A4F")]
		[Address(RVA = "0xE59B28", Offset = "0xE59B28", VA = "0xE59B28", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A52")]
		[Address(RVA = "0xE59F64", Offset = "0xE59F64", VA = "0xE59F64", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A53")]
		[Address(RVA = "0xE59F78", Offset = "0xE59F78", VA = "0xE59F78", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000FFD")]
	private const float SCREEN_HEIGHT_THRESHOLD_FOR_TABLET = 7f;

	[Token(Token = "0x4000FFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool sbApplicationIsEditor;

	[Token(Token = "0x4000FFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static AssetBundle platformAssetBundle;

	[Token(Token = "0x4001000")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static bool sbIsRetinaDetermined;

	[Token(Token = "0x4001001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	private static bool sbIsRetina;

	[Token(Token = "0x4001002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
	private static bool sbIsDpiDetermined;

	[Token(Token = "0x4001003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static float sfScreenDPI;

	[Token(Token = "0x4001004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static float MAC_27_5K_DPI;

	[Token(Token = "0x17000386")]
	public static bool isDesktop
	{
		[Token(Token = "0x6001431")]
		[Address(RVA = "0xE58958", Offset = "0xE58958", VA = "0xE58958")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000387")]
	public static bool isWindowsPC
	{
		[Token(Token = "0x6001432")]
		[Address(RVA = "0xE58A40", Offset = "0xE58A40", VA = "0xE58A40")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000388")]
	public static bool isMacOSX
	{
		[Token(Token = "0x6001433")]
		[Address(RVA = "0xE58A48", Offset = "0xE58A48", VA = "0xE58A48")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000389")]
	public static bool isTVOS
	{
		[Token(Token = "0x6001434")]
		[Address(RVA = "0xE58A50", Offset = "0xE58A50", VA = "0xE58A50")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700038A")]
	public static bool isPlaystation
	{
		[Token(Token = "0x6001435")]
		[Address(RVA = "0xE58A58", Offset = "0xE58A58", VA = "0xE58A58")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700038B")]
	public static bool isMobile
	{
		[Token(Token = "0x6001436")]
		[Address(RVA = "0xE24FD8", Offset = "0xE24FD8", VA = "0xE24FD8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700038C")]
	public static bool isTablet
	{
		[Token(Token = "0x6001437")]
		[Address(RVA = "0xE58A60", Offset = "0xE58A60", VA = "0xE58A60")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700038D")]
	public static bool isAndroid
	{
		[Token(Token = "0x6001438")]
		[Address(RVA = "0xE58B1C", Offset = "0xE58B1C", VA = "0xE58B1C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700038E")]
	public static bool isIOS
	{
		[Token(Token = "0x6001439")]
		[Address(RVA = "0xE58B24", Offset = "0xE58B24", VA = "0xE58B24")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700038F")]
	public static bool isVR
	{
		[Token(Token = "0x600143A")]
		[Address(RVA = "0xE2881C", Offset = "0xE2881C", VA = "0xE2881C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000390")]
	public static bool isVRTrueOrbit
	{
		[Token(Token = "0x600143B")]
		[Address(RVA = "0xE58B34", Offset = "0xE58B34", VA = "0xE58B34")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000391")]
	public static bool isDesktopVR
	{
		[Token(Token = "0x600143C")]
		[Address(RVA = "0xE58B3C", Offset = "0xE58B3C", VA = "0xE58B3C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000392")]
	public static bool supportsPositionalTracking
	{
		[Token(Token = "0x600143D")]
		[Address(RVA = "0xE58BF4", Offset = "0xE58BF4", VA = "0xE58BF4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000393")]
	public static bool supportsFloorLevelTracking
	{
		[Token(Token = "0x600143E")]
		[Address(RVA = "0xE58E1C", Offset = "0xE58E1C", VA = "0xE58E1C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000394")]
	public static bool isViveVR
	{
		[Token(Token = "0x600143F")]
		[Address(RVA = "0xE58F6C", Offset = "0xE58F6C", VA = "0xE58F6C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000395")]
	public static bool isOculusRift
	{
		[Token(Token = "0x6001440")]
		[Address(RVA = "0xE58F64", Offset = "0xE58F64", VA = "0xE58F64")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000396")]
	public static bool isOculusGearVR
	{
		[Token(Token = "0x6001441")]
		[Address(RVA = "0xE58F74", Offset = "0xE58F74", VA = "0xE58F74")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000397")]
	public static bool IsOculusGo
	{
		[Token(Token = "0x6001442")]
		[Address(RVA = "0xE59050", Offset = "0xE59050", VA = "0xE59050")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000398")]
	public static bool IsOculusQuest
	{
		[Token(Token = "0x6001443")]
		[Address(RVA = "0xE58CE4", Offset = "0xE58CE4", VA = "0xE58CE4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000399")]
	public static bool isViveFocus
	{
		[Token(Token = "0x6001444")]
		[Address(RVA = "0xE58D7C", Offset = "0xE58D7C", VA = "0xE58D7C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700039A")]
	public static bool isViveFocus3Dof
	{
		[Token(Token = "0x6001445")]
		[Address(RVA = "0xE58E14", Offset = "0xE58E14", VA = "0xE58E14")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700039B")]
	public static bool isCardboardVR
	{
		[Token(Token = "0x6001446")]
		[Address(RVA = "0xE58B2C", Offset = "0xE58B2C", VA = "0xE58B2C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700039C")]
	public static bool isDaydreamVR
	{
		[Token(Token = "0x6001447")]
		[Address(RVA = "0xE590E8", Offset = "0xE590E8", VA = "0xE590E8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700039D")]
	public static bool isSteamStore
	{
		[Token(Token = "0x6001448")]
		[Address(RVA = "0xE590F0", Offset = "0xE590F0", VA = "0xE590F0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700039E")]
	public static bool isViveport
	{
		[Token(Token = "0x6001449")]
		[Address(RVA = "0xE590F8", Offset = "0xE590F8", VA = "0xE590F8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700039F")]
	public static bool isOculusStore
	{
		[Token(Token = "0x600144A")]
		[Address(RVA = "0xE59100", Offset = "0xE59100", VA = "0xE59100")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003A0")]
	public static bool isRetina
	{
		[Token(Token = "0x600144B")]
		[Address(RVA = "0xE59108", Offset = "0xE59108", VA = "0xE59108")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003A1")]
	public static float ScreenDPI
	{
		[Token(Token = "0x600144C")]
		[Address(RVA = "0xE59228", Offset = "0xE59228", VA = "0xE59228")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600142E")]
	[Address(RVA = "0xE586F0", Offset = "0xE586F0", VA = "0xE586F0")]
	public Platform()
	{
	}

	[Token(Token = "0x600142F")]
	[Address(RVA = "0xE586F8", Offset = "0xE586F8", VA = "0xE586F8")]
	[DebuggerHidden]
	public static IEnumerator LoadAssetBundleAsync()
	{
		return null;
	}

	[Token(Token = "0x6001430")]
	[Address(RVA = "0xE5876C", Offset = "0xE5876C", VA = "0xE5876C")]
	public static void LoadAssetBundle()
	{
	}
}
[Token(Token = "0x2000301")]
public class OrreryTeleportCylinder : MonoBehaviour
{
	[Token(Token = "0x4001014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public MeshFilter meshFilter;

	[Token(Token = "0x6001453")]
	[Address(RVA = "0xC7E0B8", Offset = "0xC7E0B8", VA = "0xC7E0B8")]
	public OrreryTeleportCylinder()
	{
	}

	[Token(Token = "0x6001454")]
	[Address(RVA = "0xC7E0C0", Offset = "0xC7E0C0", VA = "0xC7E0C0")]
	private void Awake()
	{
	}
}
[Token(Token = "0x2000302")]
public class ParticleTransformRenderer : MonoBehaviour
{
	[Token(Token = "0x4001015")]
	private const float PARTICLE_TRANSFORM_PUSHOUT = 0.35f;

	[Token(Token = "0x4001016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public CameraWrapper cameraWrapper;

	[Token(Token = "0x4001017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected ParticleSystem mParticleSystem;

	[Token(Token = "0x4001018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	protected ParticleSystem.Particle[] maParticles;

	[Token(Token = "0x4001019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Vector3 mvParticleOffset;

	[Token(Token = "0x6001455")]
	[Address(RVA = "0xC92F68", Offset = "0xC92F68", VA = "0xC92F68")]
	public ParticleTransformRenderer()
	{
	}

	[Token(Token = "0x6001456")]
	[Address(RVA = "0xC92F70", Offset = "0xC92F70", VA = "0xC92F70")]
	protected void Start()
	{
	}

	[Token(Token = "0x6001457")]
	[Address(RVA = "0xC92FD8", Offset = "0xC92FD8", VA = "0xC92FD8")]
	protected void Update()
	{
	}
}
[Token(Token = "0x2000303")]
public class PrefabLightmapData : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000304")]
	private struct RendererInfo
	{
		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Renderer renderer;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int lightmapIndex;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector4 lightmapOffsetScale;
	}

	[Token(Token = "0x400101A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	private RendererInfo[] m_RendererInfo;

	[Token(Token = "0x400101B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private Texture2D[] m_Lightmaps;

	[Token(Token = "0x400101C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	private Texture2D[] m_DirLightmaps;

	[Token(Token = "0x400101D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LightmapsMode m_LightmapsMode;

	[Token(Token = "0x6001458")]
	[Address(RVA = "0xE5B8E8", Offset = "0xE5B8E8", VA = "0xE5B8E8")]
	public PrefabLightmapData()
	{
	}

	[Token(Token = "0x6001459")]
	[Address(RVA = "0xE5B8F0", Offset = "0xE5B8F0", VA = "0xE5B8F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600145A")]
	[Address(RVA = "0xE5BBD0", Offset = "0xE5BBD0", VA = "0xE5BBD0")]
	private static void ApplyRendererInfo(RendererInfo[] infos, int lightmapOffsetIndex)
	{
	}
}
[Token(Token = "0x2000305")]
public class ReflectionProbeDataLoader : MonoBehaviour
{
	[Token(Token = "0x4001021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private ReflectionProbe mProbe;

	[Token(Token = "0x4001022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private Texture bakedTexture;

	[Token(Token = "0x600145B")]
	[Address(RVA = "0xDF436C", Offset = "0xDF436C", VA = "0xDF436C")]
	public ReflectionProbeDataLoader()
	{
	}

	[Token(Token = "0x600145C")]
	[Address(RVA = "0xDF4374", Offset = "0xDF4374", VA = "0xDF4374")]
	private void Awake()
	{
	}

	[Token(Token = "0x600145D")]
	[Address(RVA = "0xDF470C", Offset = "0xDF470C", VA = "0xDF470C")]
	public void OnBake()
	{
	}
}
[Token(Token = "0x2000306")]
public struct SCParticle
{
	[Token(Token = "0x4001023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private Vector3 mvPosition;

	[Token(Token = "0x4001024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float mfRotation;

	[Token(Token = "0x4001025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float mfSize;

	[Token(Token = "0x4001026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Color mColor;

	[Token(Token = "0x170003A5")]
	public Vector3 position
	{
		[Token(Token = "0x600145F")]
		[Address(RVA = "0xE05F24", Offset = "0xE05F24", VA = "0xE05F24")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170003A6")]
	public float rotation
	{
		[Token(Token = "0x6001460")]
		[Address(RVA = "0xE05F34", Offset = "0xE05F34", VA = "0xE05F34")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170003A7")]
	public float size
	{
		[Token(Token = "0x6001461")]
		[Address(RVA = "0xE05F3C", Offset = "0xE05F3C", VA = "0xE05F3C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170003A8")]
	public Color color
	{
		[Token(Token = "0x6001462")]
		[Address(RVA = "0xE05F44", Offset = "0xE05F44", VA = "0xE05F44")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x600145E")]
	[Address(RVA = "0xE05EE4", Offset = "0xE05EE4", VA = "0xE05EE4")]
	public SCParticle(Vector3 position, float rotation, float size, Color color)
	{
	}
}
[Token(Token = "0x2000307")]
public class SCParticles : MonoBehaviour
{
	[Token(Token = "0x4001027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private SCParticle[] maParticles;

	[Token(Token = "0x4001028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int vertexCount;

	[Token(Token = "0x4001029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Vector3[] vs;

	[Token(Token = "0x400102A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector4[] aux;

	[Token(Token = "0x400102B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Color[] colors;

	[Token(Token = "0x400102C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int[] indices;

	[Token(Token = "0x400102D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Mesh mMesh;

	[Token(Token = "0x400102E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material mMaterial;

	[Token(Token = "0x400102F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int[] indexOffsets;

	[Token(Token = "0x4001030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Vector2[] quadDirections;

	[Token(Token = "0x170003A9")]
	protected SCParticle[] particles
	{
		[Token(Token = "0x6001464")]
		[Address(RVA = "0xE05F58", Offset = "0xE05F58", VA = "0xE05F58")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003AA")]
	protected int particleCount
	{
		[Token(Token = "0x6001465")]
		[Address(RVA = "0xE05D4C", Offset = "0xE05D4C", VA = "0xE05D4C")]
		set
		{
		}
	}

	[Token(Token = "0x6001463")]
	[Address(RVA = "0xE05CB4", Offset = "0xE05CB4", VA = "0xE05CB4")]
	public SCParticles()
	{
	}

	[Token(Token = "0x6001466")]
	[Address(RVA = "0xE05CDC", Offset = "0xE05CDC", VA = "0xE05CDC", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6001467")]
	[Address(RVA = "0xE05EA4", Offset = "0xE05EA4", VA = "0xE05EA4", Slot = "5")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6001468")]
	[Address(RVA = "0xE05F60", Offset = "0xE05F60", VA = "0xE05F60")]
	protected void SetParticle(int index, SCParticle particle)
	{
	}

	[Token(Token = "0x6001469")]
	[Address(RVA = "0xE06010", Offset = "0xE06010", VA = "0xE06010")]
	protected void BuildParticleMesh(int actualCount)
	{
	}

	[Token(Token = "0x600146A")]
	[Address(RVA = "0xE066FC", Offset = "0xE066FC", VA = "0xE066FC")]
	protected void AssignMaterial(string materialPath)
	{
	}

	[Token(Token = "0x600146B")]
	[Address(RVA = "0xE067A0", Offset = "0xE067A0", VA = "0xE067A0")]
	protected void AssignMaterial(Material material)
	{
	}

	[Token(Token = "0x600146C")]
	[Address(RVA = "0xE067E4", Offset = "0xE067E4", VA = "0xE067E4")]
	private void LateUpdate()
	{
	}
}
[Token(Token = "0x2000308")]
public class GazeSelectionManager : SelectionManager
{
	[Token(Token = "0x2000309")]
	private struct SelectableWrapper
	{
		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Star mStar;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private CelestialObject mSelectableObject;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float mfDot;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private float mfPriority;

		[Token(Token = "0x170003AB")]
		public float suitability
		{
			[Token(Token = "0x6001483")]
			[Address(RVA = "0xC38F10", Offset = "0xC38F10", VA = "0xC38F10")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003AC")]
		public Star star
		{
			[Token(Token = "0x6001484")]
			[Address(RVA = "0xC38F18", Offset = "0xC38F18", VA = "0xC38F18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003AD")]
		public CelestialObject selectableObject
		{
			[Token(Token = "0x6001485")]
			[Address(RVA = "0xC38F20", Offset = "0xC38F20", VA = "0xC38F20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0xC38EFC", Offset = "0xC38EFC", VA = "0xC38EFC")]
		public SelectableWrapper(Star star, CelestialObject selectableObject, float dot, float priority)
		{
		}
	}

	[Token(Token = "0x4001031")]
	private const float CAMERA_SELECTION_ANGLE_FACTOR = 0.1f;

	[Token(Token = "0x4001032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float sfCameraThresholdAngle;

	[Token(Token = "0x4001033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static float sfCameraThresholdAngleCos;

	[Token(Token = "0x4001034")]
	private const float SELECTION_DELAY = 0.4f;

	[Token(Token = "0x4001035")]
	private const float SELECTION_TIMER_DURATION = 0.3f;

	[Token(Token = "0x4001036")]
	private const float STICKY_SELECTION_ANGLE_FACTOR = 0.01f;

	[Token(Token = "0x4001037")]
	private const float STICKY_SELECTION_ANGLE_FACTOR_POINTER = 0.01f;

	[Token(Token = "0x4001038")]
	private const float GAZE_HOLDING_DURATION = 1f;

	[Token(Token = "0x4001039")]
	private const float GAZE_HOLDING_DURATION_POINTER = 0.1f;

	[Token(Token = "0x400103A")]
	private const float GAZE_HOLDING_ANGLE_FACTOR = 0.1f;

	[Token(Token = "0x400103B")]
	private const float GAZE_HOLDING_ANGLE_FACTOR_POINTER = 0.01f;

	[Token(Token = "0x400103C")]
	private const int CANDIDATE_OBJECT_BUFFER_SIZE = 256;

	[Token(Token = "0x400103D")]
	private const float NAME_TEXT_PADDING = 0.03f;

	[Token(Token = "0x400103E")]
	private const float MINIMUM_CURSOR_SIZE_FACTOR = 0.1f;

	[Token(Token = "0x400103F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private CelestialObject mSelectedCache;

	[Token(Token = "0x4001040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CelestialObject mActiveSelection;

	[Token(Token = "0x4001041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private CelestialObject mSelectionOverride;

	[Token(Token = "0x4001042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float mfSelectionTimer;

	[Token(Token = "0x4001043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool mbTimerActive;

	[Token(Token = "0x4001044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Timer mSelectionDelayTimer;

	[Token(Token = "0x4001045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Timer mGazeHeldTimer;

	[Token(Token = "0x4001046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 mvGazeDirection;

	[Token(Token = "0x4001047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool mbGazeIsHeld;

	[Token(Token = "0x4001048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	private bool mbIsUsingPointer;

	[Token(Token = "0x4001049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	private bool mbQuickSelection;

	[Token(Token = "0x400104A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
	private bool mbSelectionTimerIsFinished;

	[Token(Token = "0x400104B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SelectableWrapper[] maCandidateObjects;

	[Token(Token = "0x400104C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int miCandidateObjectCount;

	[Token(Token = "0x400104D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool mbPointerPositionIsValid;

	[Token(Token = "0x600146E")]
	[Address(RVA = "0xC36C9C", Offset = "0xC36C9C", VA = "0xC36C9C")]
	public GazeSelectionManager()
	{
	}

	[Token(Token = "0x600146F")]
	[Address(RVA = "0xC36D20", Offset = "0xC36D20", VA = "0xC36D20", Slot = "4")]
	public override bool IsWithinDotThreshold(float dot)
	{
		return default(bool);
	}

	[Token(Token = "0x6001470")]
	[Address(RVA = "0xC36D9C", Offset = "0xC36D9C", VA = "0xC36D9C", Slot = "5")]
	public override bool IsWithinDotThreshold(float dot, float objectRadiusDegrees)
	{
		return default(bool);
	}

	[Token(Token = "0x6001471")]
	[Address(RVA = "0xC36E50", Offset = "0xC36E50", VA = "0xC36E50")]
	private new void Start()
	{
	}

	[Token(Token = "0x6001472")]
	[Address(RVA = "0xC36FD8", Offset = "0xC36FD8", VA = "0xC36FD8")]
	private void setGazeDirectionAndTimer()
	{
	}

	[Token(Token = "0x6001473")]
	[Address(RVA = "0xC37138", Offset = "0xC37138", VA = "0xC37138")]
	private void selectItem()
	{
	}

	[Token(Token = "0x6001474")]
	[Address(RVA = "0xC3720C", Offset = "0xC3720C", VA = "0xC3720C")]
	private float radiusCos(double radiusDegrees)
	{
		return default(float);
	}

	[Token(Token = "0x6001475")]
	[Address(RVA = "0xC372AC", Offset = "0xC372AC", VA = "0xC372AC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001476")]
	[Address(RVA = "0xC38060", Offset = "0xC38060", VA = "0xC38060", Slot = "6")]
	public override bool selectionTimerHasFinished()
	{
		return default(bool);
	}

	[Token(Token = "0x6001477")]
	[Address(RVA = "0xC36FCC", Offset = "0xC36FCC", VA = "0xC36FCC")]
	private void resetSelection()
	{
	}

	[Token(Token = "0x6001478")]
	[Address(RVA = "0xC38068", Offset = "0xC38068", VA = "0xC38068", Slot = "7")]
	public override void AddCelestialObjectForConsideration(CelestialObject celestialObject, float dot, float priority)
	{
	}

	[Token(Token = "0x6001479")]
	[Address(RVA = "0xC38338", Offset = "0xC38338", VA = "0xC38338", Slot = "8")]
	public override void AddStarForConsideration(Star star, float dot, float priority)
	{
	}

	[Token(Token = "0x600147A")]
	[Address(RVA = "0xC385D0", Offset = "0xC385D0", VA = "0xC385D0", Slot = "13")]
	public override void DetermineSelection(List<CelestialObject> objectsToConsider)
	{
	}

	[Token(Token = "0x600147B")]
	[Address(RVA = "0xC38AB8", Offset = "0xC38AB8", VA = "0xC38AB8")]
	private void performTapIfISelectableObject(CelestialObject selectableObject)
	{
	}

	[Token(Token = "0x600147C")]
	[Address(RVA = "0xC38BA0", Offset = "0xC38BA0", VA = "0xC38BA0", Slot = "9")]
	public override void Tap()
	{
	}

	[Token(Token = "0x600147D")]
	[Address(RVA = "0xC38BB0", Offset = "0xC38BB0", VA = "0xC38BB0", Slot = "10")]
	public override void TapAtPosition(Vector2 screenSpaceTapPosition)
	{
	}

	[Token(Token = "0x600147E")]
	[Address(RVA = "0xC38C54", Offset = "0xC38C54", VA = "0xC38C54", Slot = "11")]
	public override void SetSelectableObject(CelestialObject selectableObject)
	{
	}

	[Token(Token = "0x600147F")]
	[Address(RVA = "0xC38D44", Offset = "0xC38D44", VA = "0xC38D44", Slot = "12")]
	public override void ClearSelection()
	{
	}

	[Token(Token = "0x6001480")]
	[Address(RVA = "0xC38E90", Offset = "0xC38E90", VA = "0xC38E90")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2F47C", Offset = "0xC2F47C")]
	private void <setGazeDirectionAndTimer>m__0()
	{
	}

	[Token(Token = "0x6001481")]
	[Address(RVA = "0xC38EA4", Offset = "0xC38EA4", VA = "0xC38EA4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2F48C", Offset = "0xC2F48C")]
	private void <Update>m__1()
	{
	}
}
[Token(Token = "0x200030A")]
public class InfoPoint : SelectableSceneObject
{
	[Token(Token = "0x200030B")]
	private enum State
	{
		[Token(Token = "0x4001063")]
		None,
		[Token(Token = "0x4001064")]
		Selecting,
		[Token(Token = "0x4001065")]
		Clickable,
		[Token(Token = "0x4001066")]
		Active
	}

	[Token(Token = "0x4001052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string title;

	[Token(Token = "0x4001053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0xC2F49C", Offset = "0xC2F49C")]
	public string info;

	[Token(Token = "0x4001054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Sprite image;

	[Token(Token = "0x4001055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public GameObject infoPrefab;

	[Token(Token = "0x4001056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BoxCollider exclusionZone;

	[Token(Token = "0x4001057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Planets.Names parentBody;

	[Token(Token = "0x4001058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject mSelectionIcon;

	[Token(Token = "0x4001059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Text mSelectionText;

	[Token(Token = "0x400105A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float mfPortalScale;

	[Token(Token = "0x400105B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float mfPortalSize;

	[Token(Token = "0x400105C")]
	private const float kfMinPortalScale = 0.2f;

	[Token(Token = "0x400105D")]
	private const float kfScaleTime = 3f;

	[Token(Token = "0x400105E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CameraWrapper mCameraWrapper;

	[Token(Token = "0x400105F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private HumanScaleInfoState mInfoState;

	[Token(Token = "0x4001060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private State meState;

	[Token(Token = "0x4001061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private GameObject mInfoPanel;

	[Token(Token = "0x170003AE")]
	public override bool isSelected
	{
		[Token(Token = "0x6001488")]
		[Address(RVA = "0xC40AAC", Offset = "0xC40AAC", VA = "0xC40AAC", Slot = "4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001489")]
		[Address(RVA = "0xC40AB4", Offset = "0xC40AB4", VA = "0xC40AB4", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x170003AF")]
	public override bool isActive
	{
		[Token(Token = "0x600148A")]
		[Address(RVA = "0xC42850", Offset = "0xC42850", VA = "0xC42850", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001486")]
	[Address(RVA = "0xC406F8", Offset = "0xC406F8", VA = "0xC406F8")]
	public InfoPoint()
	{
	}

	[Token(Token = "0x6001487")]
	[Address(RVA = "0xC40700", Offset = "0xC40700", VA = "0xC40700")]
	private void Awake()
	{
	}

	[Token(Token = "0x600148B")]
	[Address(RVA = "0xC42864", Offset = "0xC42864", VA = "0xC42864")]
	public void SetIsActive()
	{
	}

	[Token(Token = "0x600148C")]
	[Address(RVA = "0xC4298C", Offset = "0xC4298C", VA = "0xC4298C")]
	private void Update()
	{
	}

	[Token(Token = "0x600148D")]
	[Address(RVA = "0xC42CA4", Offset = "0xC42CA4", VA = "0xC42CA4", Slot = "6")]
	public override void UpdateFromHit(RaycastHit lHit, Ray lRay)
	{
	}

	[Token(Token = "0x600148E")]
	[Address(RVA = "0xC42FE8", Offset = "0xC42FE8", VA = "0xC42FE8")]
	private Vector3 GetClosestColliderPoint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600148F")]
	[Address(RVA = "0xC424F8", Offset = "0xC424F8", VA = "0xC424F8")]
	private void UpdateSelectionIcon()
	{
	}
}
[Token(Token = "0x200030C")]
public abstract class SelectableSceneObject : MonoBehaviour
{
	[Token(Token = "0x4001067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	protected bool mbIsSelected;

	[Token(Token = "0x170003B0")]
	public abstract bool isSelected
	{
		[Token(Token = "0x6001491")]
		get;
		[Token(Token = "0x6001492")]
		set;
	}

	[Token(Token = "0x170003B1")]
	public abstract bool isActive
	{
		[Token(Token = "0x6001494")]
		get;
	}

	[Token(Token = "0x6001490")]
	[Address(RVA = "0xE07E24", Offset = "0xE07E24", VA = "0xE07E24")]
	protected SelectableSceneObject()
	{
	}

	[Token(Token = "0x6001493")]
	public abstract void UpdateFromHit(RaycastHit lHit, Ray lRay);
}
[Token(Token = "0x200030D")]
public class TeleportArea : SelectableSceneObject
{
	[Token(Token = "0x4001068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject mSurfacePortalIcon;

	[Token(Token = "0x4001069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float mfPortalScale;

	[Token(Token = "0x400106A")]
	private const float kfMinPortalScale = 0.5f;

	[Token(Token = "0x400106B")]
	private const float kfScaleTime = 0.75f;

	[Token(Token = "0x400106C")]
	private const float kfSurfaceScale = 4f;

	[Token(Token = "0x400106D")]
	private const float kfSurfaceOffset = 0.025f;

	[Token(Token = "0x400106E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float mfLookAtRotation;

	[Token(Token = "0x400106F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Canvas mCanvas;

	[Token(Token = "0x170003B2")]
	public override bool isSelected
	{
		[Token(Token = "0x6001496")]
		[Address(RVA = "0xC9B45C", Offset = "0xC9B45C", VA = "0xC9B45C", Slot = "4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001497")]
		[Address(RVA = "0xC9B464", Offset = "0xC9B464", VA = "0xC9B464", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x170003B3")]
	public override bool isActive
	{
		[Token(Token = "0x6001498")]
		[Address(RVA = "0xC9B498", Offset = "0xC9B498", VA = "0xC9B498", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003B4")]
	public float lookRotation
	{
		[Token(Token = "0x6001499")]
		[Address(RVA = "0xC9B4A0", Offset = "0xC9B4A0", VA = "0xC9B4A0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6001495")]
	[Address(RVA = "0xC9B454", Offset = "0xC9B454", VA = "0xC9B454")]
	public TeleportArea()
	{
	}

	[Token(Token = "0x600149A")]
	[Address(RVA = "0xC9B4A8", Offset = "0xC9B4A8", VA = "0xC9B4A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600149B")]
	[Address(RVA = "0xC9B718", Offset = "0xC9B718", VA = "0xC9B718")]
	private void Update()
	{
	}

	[Token(Token = "0x600149C")]
	[Address(RVA = "0xC9BB44", Offset = "0xC9BB44", VA = "0xC9BB44", Slot = "6")]
	public override void UpdateFromHit(RaycastHit lHit, Ray lRay)
	{
	}

	[Token(Token = "0x600149D")]
	[Address(RVA = "0xC9B8F8", Offset = "0xC9B8F8", VA = "0xC9B8F8")]
	private void UpdateSurfacePortalIcon()
	{
	}
}
[Token(Token = "0x200030E")]
public class LaserPointerComponent : MonoBehaviour
{
	[Token(Token = "0x200030F")]
	public struct PointerEventArgs
	{
		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint controllerIndex;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint flags;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float distance;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Transform target;
	}

	[Token(Token = "0x2000310")]
	public delegate void PointerEventHandler(object sender, PointerEventArgs e);

	[Serializable]
	[Token(Token = "0x2000311")]
	public class PointerEvent : UnityEvent<PointerEventArgs>
	{
		[Token(Token = "0x60014B0")]
		[Address(RVA = "0xC48F30", Offset = "0xC48F30", VA = "0xC48F30")]
		public PointerEvent()
		{
		}
	}

	[Token(Token = "0x4001070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Color color;

	[Token(Token = "0x4001071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color negativeColor;

	[Token(Token = "0x4001072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float thickness;

	[Token(Token = "0x4001073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float thicknessPressed;

	[Token(Token = "0x4001074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public GameObject holder;

	[Token(Token = "0x4001075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject pointer;

	[Token(Token = "0x4001076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool addRigidBody;

	[Token(Token = "0x4001079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PointerEvent unityPointerIn;

	[Token(Token = "0x400107A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public PointerEvent unityPointerOut;

	[Token(Token = "0x400107B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected Transform previousContact;

	[Token(Token = "0x400107C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float mfOverrideDistance;

	[Token(Token = "0x14000003")]
	public event PointerEventHandler PointerIn
	{
		[Token(Token = "0x600149F")]
		[Address(RVA = "0xC48F94", Offset = "0xC48F94", VA = "0xC48F94")]
		add
		{
		}
		[Token(Token = "0x60014A0")]
		[Address(RVA = "0xC49088", Offset = "0xC49088", VA = "0xC49088")]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event PointerEventHandler PointerOut
	{
		[Token(Token = "0x60014A1")]
		[Address(RVA = "0xC4917C", Offset = "0xC4917C", VA = "0xC4917C")]
		add
		{
		}
		[Token(Token = "0x60014A2")]
		[Address(RVA = "0xC49270", Offset = "0xC49270", VA = "0xC49270")]
		remove
		{
		}
	}

	[Token(Token = "0x600149E")]
	[Address(RVA = "0xC48E00", Offset = "0xC48E00", VA = "0xC48E00")]
	public LaserPointerComponent()
	{
	}

	[Token(Token = "0x60014A3")]
	[Address(RVA = "0xC49364", Offset = "0xC49364", VA = "0xC49364")]
	public void SetDistance(float lfDistance)
	{
	}

	[Token(Token = "0x60014A4")]
	[Address(RVA = "0xC4936C", Offset = "0xC4936C", VA = "0xC4936C")]
	public void Awake()
	{
	}

	[Token(Token = "0x60014A5")]
	[Address(RVA = "0xC49A88", Offset = "0xC49A88", VA = "0xC49A88")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60014A6")]
	[Address(RVA = "0xC49AD0", Offset = "0xC49AD0", VA = "0xC49AD0")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60014A7")]
	[Address(RVA = "0xC49B18", Offset = "0xC49B18", VA = "0xC49B18")]
	private void OnInputFocus(int i, bool connected)
	{
	}

	[Token(Token = "0x60014A8")]
	[Address(RVA = "0xC49B98", Offset = "0xC49B98", VA = "0xC49B98")]
	public void SetColour(bool lbSelected)
	{
	}

	[Token(Token = "0x60014A9")]
	[Address(RVA = "0xC49CB8", Offset = "0xC49CB8", VA = "0xC49CB8")]
	private void Update()
	{
	}

	[Token(Token = "0x60014AA")]
	[Address(RVA = "0xC4A0A8", Offset = "0xC4A0A8", VA = "0xC4A0A8", Slot = "4")]
	public virtual void OnPointerIn(PointerEventArgs e)
	{
	}

	[Token(Token = "0x60014AB")]
	[Address(RVA = "0xC4A5AC", Offset = "0xC4A5AC", VA = "0xC4A5AC", Slot = "5")]
	public virtual void OnPointerOut(PointerEventArgs e)
	{
	}
}
[Token(Token = "0x2000312")]
public class LaserSelectionManager : SelectionManager
{
	[Token(Token = "0x2000313")]
	private struct SelectableStarWrapper
	{
		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Star star;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private float priority;

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0xC4C0A8", Offset = "0xC4C0A8", VA = "0xC4C0A8")]
		public SelectableStarWrapper(Star star, float priority)
		{
		}
	}

	[Token(Token = "0x4001081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private CelestialObject mSelectionOverride;

	[Token(Token = "0x4001082")]
	private const int CANDIDATE_OBJECT_BUFFER_SIZE = 256;

	[Token(Token = "0x4001083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SelectableStarWrapper[] maCandidateStars;

	[Token(Token = "0x4001084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int miCandidateStarCount;

	[Token(Token = "0x4001085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<CelestialObject> maCandidateObjects;

	[Token(Token = "0x4001086")]
	private const float CAMERA_SELECTION_ANGLE_FACTOR = 0.1f;

	[Token(Token = "0x4001087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float sfCameraThresholdAngle;

	[Token(Token = "0x4001088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static float sfCameraThresholdAngleCos;

	[Token(Token = "0x4001089")]
	private const float kfStickyDelay = 0.5f;

	[Token(Token = "0x400108A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float mfStickyTimer;

	[Token(Token = "0x60014B1")]
	[Address(RVA = "0xC4A79C", Offset = "0xC4A79C", VA = "0xC4A79C")]
	public LaserSelectionManager()
	{
	}

	[Token(Token = "0x60014B2")]
	[Address(RVA = "0xC4A820", Offset = "0xC4A820", VA = "0xC4A820", Slot = "4")]
	public override bool IsWithinDotThreshold(float dot)
	{
		return default(bool);
	}

	[Token(Token = "0x60014B3")]
	[Address(RVA = "0xC4A89C", Offset = "0xC4A89C", VA = "0xC4A89C", Slot = "5")]
	public override bool IsWithinDotThreshold(float dot, float objectRadiusDegrees)
	{
		return default(bool);
	}

	[Token(Token = "0x60014B4")]
	[Address(RVA = "0xC4A950", Offset = "0xC4A950", VA = "0xC4A950")]
	private new void Start()
	{
	}

	[Token(Token = "0x60014B5")]
	[Address(RVA = "0xC4AA14", Offset = "0xC4AA14", VA = "0xC4AA14")]
	private void Update()
	{
	}

	[Token(Token = "0x60014B6")]
	[Address(RVA = "0xC4B89C", Offset = "0xC4B89C", VA = "0xC4B89C", Slot = "6")]
	public override bool selectionTimerHasFinished()
	{
		return default(bool);
	}

	[Token(Token = "0x60014B7")]
	[Address(RVA = "0xC4B8A4", Offset = "0xC4B8A4", VA = "0xC4B8A4", Slot = "8")]
	public override void AddStarForConsideration(Star star, float dot, float priority)
	{
	}

	[Token(Token = "0x60014B8")]
	[Address(RVA = "0xC4BB1C", Offset = "0xC4BB1C", VA = "0xC4BB1C", Slot = "13")]
	public override void DetermineSelection(List<CelestialObject> objectsToConsider)
	{
	}

	[Token(Token = "0x60014B9")]
	[Address(RVA = "0xC4BC5C", Offset = "0xC4BC5C", VA = "0xC4BC5C", Slot = "9")]
	public override void Tap()
	{
	}

	[Token(Token = "0x60014BA")]
	[Address(RVA = "0xC4BD50", Offset = "0xC4BD50", VA = "0xC4BD50", Slot = "10")]
	public override void TapAtPosition(Vector2 screenSpaceTapPosition)
	{
	}

	[Token(Token = "0x60014BB")]
	[Address(RVA = "0xC4BDD0", Offset = "0xC4BDD0", VA = "0xC4BDD0", Slot = "11")]
	public override void SetSelectableObject(CelestialObject selectableObject)
	{
	}

	[Token(Token = "0x60014BC")]
	[Address(RVA = "0xC4BDDC", Offset = "0xC4BDDC", VA = "0xC4BDDC", Slot = "12")]
	public override void ClearSelection()
	{
	}

	[Token(Token = "0x60014BD")]
	[Address(RVA = "0xC4BEA8", Offset = "0xC4BEA8", VA = "0xC4BEA8")]
	private float DistanceToLine(Ray ray, Vector3 point)
	{
		return default(float);
	}

	[Token(Token = "0x60014BE")]
	[Address(RVA = "0xC4AE10", Offset = "0xC4AE10", VA = "0xC4AE10")]
	public CelestialObject IntersectPlanets(Ray ray)
	{
		return null;
	}
}
[Token(Token = "0x2000314")]
public abstract class SelectionManager : MonoBehaviour
{
	[Token(Token = "0x400108D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SelectionManager sComponent;

	[Token(Token = "0x400108E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public CameraWrapper cameraWrapper;

	[Token(Token = "0x400108F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected CelestialObject mSelected;

	[Token(Token = "0x4001090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	protected CelestialObject mSelectedFromBrowse;

	[Token(Token = "0x4001091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool mbPreventSelection;

	[Token(Token = "0x4001092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	protected static bool sbAllowNewSelection;

	[Token(Token = "0x60014C0")]
	[Address(RVA = "0xE07E2C", Offset = "0xE07E2C", VA = "0xE07E2C")]
	protected SelectionManager()
	{
	}

	[Token(Token = "0x60014C1")]
	[Address(RVA = "0xDF4B60", Offset = "0xDF4B60", VA = "0xDF4B60")]
	public static SelectionManager GetInstance()
	{
		return null;
	}

	[Token(Token = "0x60014C2")]
	[Address(RVA = "0xE07E34", Offset = "0xE07E34", VA = "0xE07E34")]
	protected void Start()
	{
	}

	[Token(Token = "0x60014C3")]
	[Address(RVA = "0xE07EE0", Offset = "0xE07EE0", VA = "0xE07EE0")]
	public CelestialObject selectedObject()
	{
		return null;
	}

	[Token(Token = "0x60014C4")]
	public abstract bool IsWithinDotThreshold(float dot);

	[Token(Token = "0x60014C5")]
	public abstract bool IsWithinDotThreshold(float dot, float objectRadiusDegrees);

	[Token(Token = "0x60014C6")]
	public abstract bool selectionTimerHasFinished();

	[Token(Token = "0x60014C7")]
	[Address(RVA = "0xE07EE8", Offset = "0xE07EE8", VA = "0xE07EE8", Slot = "7")]
	public virtual void AddCelestialObjectForConsideration(CelestialObject celestialObject, float dot, float priority)
	{
	}

	[Token(Token = "0x60014C8")]
	public abstract void AddStarForConsideration(Star star, float dot, float priority);

	[Token(Token = "0x60014C9")]
	public abstract void Tap();

	[Token(Token = "0x60014CA")]
	public abstract void TapAtPosition(Vector2 screenSpaceTapPosition);

	[Token(Token = "0x60014CB")]
	public abstract void SetSelectableObject(CelestialObject selectableObject);

	[Token(Token = "0x60014CC")]
	[Address(RVA = "0xE07EEC", Offset = "0xE07EEC", VA = "0xE07EEC")]
	public void SetSelectableObjectFromBrowse(CelestialObject selectableObject)
	{
	}

	[Token(Token = "0x60014CD")]
	public abstract void ClearSelection();

	[Token(Token = "0x60014CE")]
	[Address(RVA = "0xE0800C", Offset = "0xE0800C", VA = "0xE0800C")]
	public void PreventSelection(bool prevent)
	{
	}

	[Token(Token = "0x60014CF")]
	[Address(RVA = "0xE08014", Offset = "0xE08014", VA = "0xE08014")]
	public static void AllowNewSelection(bool allow)
	{
	}

	[Token(Token = "0x60014D0")]
	public abstract void DetermineSelection(List<CelestialObject> objectsToConsider);
}
[Token(Token = "0x2000315")]
public class SurfaceSelectionManager : MonoBehaviour
{
	[Token(Token = "0x4001093")]
	private const float LOOK_DURATION_NON_LASER = 0.5f;

	[Token(Token = "0x4001094")]
	private const float LOOK_DURATION_LASER = 0.25f;

	[Token(Token = "0x4001095")]
	private const float CIRCLE_SELECTOR_ANIM_DURATION = 0.5f;

	[Token(Token = "0x4001096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SurfaceDetail sSelectedSurfaceDetail;

	[Token(Token = "0x4001097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static SurfaceDetail sSelectedSurfaceDetailCache;

	[Token(Token = "0x4001098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static SurfaceDetail sLookingAtSurfaceDetail;

	[Token(Token = "0x4001099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static SurfaceDetail sLookingAtSurfaceDetailCache;

	[Token(Token = "0x400109A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool mbLockedSelection;

	[Token(Token = "0x400109B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float mfNewLookStartTimer;

	[Token(Token = "0x400109C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool mbPointerPositionIsValid;

	[Token(Token = "0x170003B5")]
	public static SurfaceDetail lookingAtSurfaceDetail
	{
		[Token(Token = "0x60014D3")]
		[Address(RVA = "0xCFCFA0", Offset = "0xCFCFA0", VA = "0xCFCFA0")]
		set
		{
		}
	}

	[Token(Token = "0x170003B6")]
	public static SurfaceDetail selectedDetail
	{
		[Token(Token = "0x60014D4")]
		[Address(RVA = "0xCFD06C", Offset = "0xCFD06C", VA = "0xCFD06C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003B7")]
	public static bool lockSelection
	{
		[Token(Token = "0x60014D6")]
		[Address(RVA = "0xCFC590", Offset = "0xCFC590", VA = "0xCFC590")]
		set
		{
		}
	}

	[Token(Token = "0x60014D2")]
	[Address(RVA = "0xCFCF98", Offset = "0xCFCF98", VA = "0xCFCF98")]
	public SurfaceSelectionManager()
	{
	}

	[Token(Token = "0x60014D5")]
	[Address(RVA = "0xCFC2A4", Offset = "0xCFC2A4", VA = "0xCFC2A4")]
	public static void ClearSelection()
	{
	}

	[Token(Token = "0x60014D7")]
	[Address(RVA = "0xCFD0F8", Offset = "0xCFD0F8", VA = "0xCFD0F8")]
	private void Start()
	{
	}

	[Token(Token = "0x60014D8")]
	[Address(RVA = "0xCFD0FC", Offset = "0xCFD0FC", VA = "0xCFD0FC")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000316")]
[ExecuteInEditMode]
public class ShadersSetup : MonoBehaviour
{
	[Token(Token = "0x400109D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool sbShadersSetup;

	[Token(Token = "0x60014DA")]
	[Address(RVA = "0xE081C0", Offset = "0xE081C0", VA = "0xE081C0")]
	public ShadersSetup()
	{
	}

	[Token(Token = "0x60014DB")]
	[Address(RVA = "0xE081C8", Offset = "0xE081C8", VA = "0xE081C8")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000317")]
public abstract class AppStateBase : BaseState
{
	[Token(Token = "0x400109E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
	public bool shouldStartLeaving;

	[Token(Token = "0x400109F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected Bookmark mBookmark;

	[Token(Token = "0x40010A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	protected StateManager.AppState meNextState;

	[Token(Token = "0x170003B8")]
	public StateManager.AppState nextState
	{
		[Token(Token = "0x60014DE")]
		[Address(RVA = "0x1632C0", Offset = "0x1632C0", VA = "0x1632C0")]
		get
		{
			return default(StateManager.AppState);
		}
	}

	[Token(Token = "0x60014DD")]
	[Address(RVA = "0x1632B0", Offset = "0x1632B0", VA = "0x1632B0")]
	protected AppStateBase()
	{
	}

	[Token(Token = "0x60014DF")]
	[Address(RVA = "0x1632C8", Offset = "0x1632C8", VA = "0x1632C8", Slot = "7")]
	public virtual void GoHome()
	{
	}
}
[Token(Token = "0x2000318")]
public class ExploringState : AppStateBase
{
	[Token(Token = "0x2000319")]
	private enum State
	{
		[Token(Token = "0x40010A6")]
		Intro,
		[Token(Token = "0x40010A7")]
		Interactive,
		[Token(Token = "0x40010A8")]
		Outro
	}

	[Token(Token = "0x40010A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject mIntroPrefab;

	[Token(Token = "0x40010A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private VrIntroPanel mVrIntroPanel;

	[Token(Token = "0x40010A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ExploringState sInstance;

	[Token(Token = "0x40010A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private State meState;

	[Token(Token = "0x60014E0")]
	[Address(RVA = "0x18BF9C", Offset = "0x18BF9C", VA = "0x18BF9C")]
	public ExploringState()
	{
	}

	[Token(Token = "0x60014E1")]
	[Address(RVA = "0x18BFA4", Offset = "0x18BFA4", VA = "0x18BFA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60014E2")]
	[Address(RVA = "0x18C074", Offset = "0x18C074", VA = "0x18C074", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60014E3")]
	[Address(RVA = "0x18C664", Offset = "0x18C664", VA = "0x18C664")]
	private void Update()
	{
	}

	[Token(Token = "0x60014E4")]
	[Address(RVA = "0x18C96C", Offset = "0x18C96C", VA = "0x18C96C", Slot = "5")]
	public override void OnLeave()
	{
	}

	[Token(Token = "0x60014E5")]
	[Address(RVA = "0x18CA94", Offset = "0x18CA94", VA = "0x18CA94")]
	public static void TravelToSurface(SurfaceDetail lSurfaceDetail)
	{
	}

	[Token(Token = "0x60014E6")]
	[Address(RVA = "0x18CC80", Offset = "0x18CC80", VA = "0x18CC80")]
	public static void SkyView()
	{
	}
}
[Token(Token = "0x200031A")]
public class HumanScaleDataManager : MonoBehaviour
{
	[Token(Token = "0x40010A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<HumanScaleSceneData> scenes;

	[Token(Token = "0x40010AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int miIndex;

	[Token(Token = "0x40010AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static HumanScaleDataManager mInstance;

	[Token(Token = "0x60014E8")]
	[Address(RVA = "0xC3EB54", Offset = "0xC3EB54", VA = "0xC3EB54")]
	public HumanScaleDataManager()
	{
	}

	[Token(Token = "0x60014E9")]
	[Address(RVA = "0xC3EB5C", Offset = "0xC3EB5C", VA = "0xC3EB5C")]
	public static void SetCurrentData(int liIndex)
	{
	}

	[Token(Token = "0x60014EA")]
	[Address(RVA = "0xC3EBEC", Offset = "0xC3EBEC", VA = "0xC3EBEC")]
	public static void SetCurrentData(Planets.Names lePlanet, string lSurfaceDetail)
	{
	}

	[Token(Token = "0x60014EB")]
	[Address(RVA = "0xC3EE44", Offset = "0xC3EE44", VA = "0xC3EE44")]
	public static bool IsSurfaceDetailTeleport(Planets.Names lePlanet, string lSurfaceDetail)
	{
		return default(bool);
	}

	[Token(Token = "0x60014EC")]
	[Address(RVA = "0xC3F054", Offset = "0xC3F054", VA = "0xC3F054")]
	public static Sprite GetSpriteForSurfaceDetail(Planets.Names lePlanet, string lSurfaceDetail)
	{
		return null;
	}

	[Token(Token = "0x60014ED")]
	[Address(RVA = "0xC3D9F8", Offset = "0xC3D9F8", VA = "0xC3D9F8")]
	public static HumanScaleSceneData GetCurrentData()
	{
		return null;
	}

	[Token(Token = "0x60014EE")]
	[Address(RVA = "0xC3F274", Offset = "0xC3F274", VA = "0xC3F274")]
	public static int GetCurrentIndex()
	{
		return default(int);
	}

	[Token(Token = "0x60014EF")]
	[Address(RVA = "0xC3F300", Offset = "0xC3F300", VA = "0xC3F300")]
	private void Awake()
	{
	}
}
[Serializable]
[Token(Token = "0x200031B")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0xC2F524", Offset = "0xC2F524")]
public class HumanScaleSceneData : ScriptableObject
{
	[Token(Token = "0x40010AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xC2F594", Offset = "0xC2F594")]
	public string titleKey;

	[Token(Token = "0x40010AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0xC2F5C8", Offset = "0xC2F5C8")]
	public string introKey;

	[Token(Token = "0x40010AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Sprite introSprite;

	[Token(Token = "0x40010AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xC2F5D8", Offset = "0xC2F5D8")]
	public Planets.Names hostPlanet;

	[Token(Token = "0x40010B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2F60C", Offset = "0xC2F60C")]
	public string surfaceDetail;

	[Token(Token = "0x40010B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject scenePrefab;

	[Token(Token = "0x40010B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool bigPlanets;

	[Token(Token = "0x40010B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xC2F640", Offset = "0xC2F640")]
	public float orbitHeightKM;

	[Token(Token = "0x40010B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xC2F674", Offset = "0xC2F674")]
	[SerializeField]
	private int mYear;

	[Token(Token = "0x40010B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private int mMonth;

	[Token(Token = "0x40010B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private int mDay;

	[Token(Token = "0x40010B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private int mHour;

	[Token(Token = "0x40010B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private int mMinute;

	[Token(Token = "0x170003B9")]
	public DateTime dateTime
	{
		[Token(Token = "0x60014F2")]
		[Address(RVA = "0xC3FEAC", Offset = "0xC3FEAC", VA = "0xC3FEAC")]
		get
		{
			return default(DateTime);
		}
	}

	[Token(Token = "0x60014F1")]
	[Address(RVA = "0xC3FEA4", Offset = "0xC3FEA4", VA = "0xC3FEA4")]
	public HumanScaleSceneData()
	{
	}
}
[Token(Token = "0x200031C")]
public class LaunchRoomState : AppStateBase
{
	[Token(Token = "0x200031D")]
	private enum MenuType
	{
		[Token(Token = "0x40010C3")]
		MainMenu,
		[Token(Token = "0x40010C4")]
		MomentsInTimeMenu
	}

	[Token(Token = "0x40010B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject mScenePrefab;

	[Token(Token = "0x40010BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private GameObject mSceneObject;

	[Token(Token = "0x40010BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private DaydreamPermissionsState mVrPermissions;

	[Token(Token = "0x40010BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool mbTestPermissionsRequest;

	[Token(Token = "0x40010BD")]
	private const float kfDefaultFloorLevel = -1.5f;

	[Token(Token = "0x40010BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MenuType meCurrentMenu;

	[Token(Token = "0x40010BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private List<GameObject> maMenuObjects;

	[Token(Token = "0x40010C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool mbTimed;

	[Token(Token = "0x40010C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int gbTickFirst;

	[Token(Token = "0x60014F3")]
	[Address(RVA = "0xC4C0B4", Offset = "0xC4C0B4", VA = "0xC4C0B4")]
	public LaunchRoomState()
	{
	}

	[Token(Token = "0x60014F4")]
	[Address(RVA = "0xC4C148", Offset = "0xC4C148", VA = "0xC4C148")]
	private void Awake()
	{
	}

	[Token(Token = "0x60014F5")]
	[Address(RVA = "0xC4C364", Offset = "0xC4C364", VA = "0xC4C364", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60014F6")]
	[Address(RVA = "0xC4CFA0", Offset = "0xC4CFA0", VA = "0xC4CFA0")]
	private void Update()
	{
	}

	[Token(Token = "0x60014F7")]
	[Address(RVA = "0xC4D410", Offset = "0xC4D410", VA = "0xC4D410")]
	private void GoBackToMainMenu()
	{
	}

	[Token(Token = "0x60014F8")]
	[Address(RVA = "0xC4D4FC", Offset = "0xC4D4FC", VA = "0xC4D4FC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60014F9")]
	[Address(RVA = "0xC4D500", Offset = "0xC4D500", VA = "0xC4D500")]
	private void OnMainMenuItemSelected(ItemController.MenuItemType lSelected)
	{
	}

	[Token(Token = "0x60014FA")]
	[Address(RVA = "0xC4D898", Offset = "0xC4D898", VA = "0xC4D898")]
	private void OnSubMenuItemSelected(ItemController.MenuItemType lSelected)
	{
	}

	[Token(Token = "0x60014FB")]
	[Address(RVA = "0xC4DAA4", Offset = "0xC4DAA4", VA = "0xC4DAA4", Slot = "5")]
	public override void OnLeave()
	{
	}
}
[Token(Token = "0x200031E")]
public class MomentInTimeState : AppStateBase
{
	[Token(Token = "0x200031F")]
	private enum State
	{
		[Token(Token = "0x40010E0")]
		Intro,
		[Token(Token = "0x40010E1")]
		Instructions,
		[Token(Token = "0x40010E2")]
		Interactive,
		[Token(Token = "0x40010E3")]
		TeleportingFadeToBlack,
		[Token(Token = "0x40010E4")]
		TeleportingFadeFromBlack,
		[Token(Token = "0x40010E5")]
		Outro
	}

	[Token(Token = "0x2000421")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2F70C", Offset = "0xC2F70C")]
	private sealed class <FadeIn>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40016FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfFadeSpeed>__0;

		[Token(Token = "0x40016FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfAlpha>__0;

		[Token(Token = "0x40016FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal MomentInTimeState $this;

		[Token(Token = "0x40016FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x40016FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x17000486")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001A56")]
			[Address(RVA = "0xDC240C", Offset = "0xDC240C", VA = "0xDC240C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000487")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A57")]
			[Address(RVA = "0xDC2414", Offset = "0xDC2414", VA = "0xDC2414", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A54")]
		[Address(RVA = "0xDC1F18", Offset = "0xDC1F18", VA = "0xDC1F18")]
		[DebuggerHidden]
		public <FadeIn>c__Iterator0()
		{
		}

		[Token(Token = "0x6001A55")]
		[Address(RVA = "0xDC2284", Offset = "0xDC2284", VA = "0xDC2284", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A58")]
		[Address(RVA = "0xDC241C", Offset = "0xDC241C", VA = "0xDC241C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A59")]
		[Address(RVA = "0xDC2430", Offset = "0xDC2430", VA = "0xDC2430", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40010C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject mSceneObject;

	[Token(Token = "0x40010C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private GameObject mIntroPrefab;

	[Token(Token = "0x40010C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VrIntroPanel mVrIntroPanel;

	[Token(Token = "0x40010C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private GameObject mScreenFader;

	[Token(Token = "0x40010C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private CanvasGroup mCanvas;

	[Token(Token = "0x40010CA")]
	private const float mfFadeOutTime = 0.5f;

	[Token(Token = "0x40010CB")]
	private const float kfStartAlpha = 0.85f;

	[Token(Token = "0x40010CC")]
	private const float kfDaydreamStartAlpha = 0.75f;

	[Token(Token = "0x40010CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float mfStartAlpha;

	[Token(Token = "0x40010CE")]
	private const float mfTeleportFadeTime = 0.15f;

	[Token(Token = "0x40010CF")]
	private const float kfDefaultFloorLevel = -1.5f;

	[Token(Token = "0x40010D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float mfFloorLevel;

	[Token(Token = "0x40010D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool mbTutorialTeleport;

	[Token(Token = "0x40010D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float mfAutoDismissTimer;

	[Token(Token = "0x40010D3")]
	private const float kfAutoDismissTime = 10f;

	[Token(Token = "0x40010D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private StateManager.AppState mBackToState;

	[Token(Token = "0x40010D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private SelectableSceneObject mCurrentlySelectedObject;

	[Token(Token = "0x40010D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private SelectableSceneObject mCurrentlyActiveObject;

	[Token(Token = "0x40010D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 mTeleportPoint;

	[Token(Token = "0x40010D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float mfTeleportRotateAngle;

	[Token(Token = "0x40010D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool mbIsInSpace;

	[Token(Token = "0x40010DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool mbTryToAttachEarthPatch;

	[Token(Token = "0x40010DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static MomentInTimeState instance;

	[Token(Token = "0x40010DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Material mEarthPatchMat;

	[Token(Token = "0x40010DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameObject mEarthPatch;

	[Token(Token = "0x40010DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private State meState;

	[Token(Token = "0x170003BA")]
	public static float dimFactor
	{
		[Token(Token = "0x60014FD")]
		[Address(RVA = "0xDBD590", Offset = "0xDBD590", VA = "0xDBD590")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170003BB")]
	public static bool objectActive
	{
		[Token(Token = "0x60014FE")]
		[Address(RVA = "0xDBD59C", Offset = "0xDBD59C", VA = "0xDBD59C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003BC")]
	public static bool inIntro
	{
		[Token(Token = "0x60014FF")]
		[Address(RVA = "0xDBD64C", Offset = "0xDBD64C", VA = "0xDBD64C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003BD")]
	public static bool objectSelected
	{
		[Token(Token = "0x6001500")]
		[Address(RVA = "0xDBD6C8", Offset = "0xDBD6C8", VA = "0xDBD6C8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003BE")]
	public static bool backToPlanetAvailable
	{
		[Token(Token = "0x6001501")]
		[Address(RVA = "0xDBD778", Offset = "0xDBD778", VA = "0xDBD778")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003BF")]
	public static bool teleportAvailable
	{
		[Token(Token = "0x6001502")]
		[Address(RVA = "0xDBD7F0", Offset = "0xDBD7F0", VA = "0xDBD7F0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003C0")]
	public static bool isTeleporting
	{
		[Token(Token = "0x6001503")]
		[Address(RVA = "0xDBD91C", Offset = "0xDBD91C", VA = "0xDBD91C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003C1")]
	public static bool isInSpace
	{
		[Token(Token = "0x6001504")]
		[Address(RVA = "0xDBD998", Offset = "0xDBD998", VA = "0xDBD998")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003C2")]
	public static bool inInstructions
	{
		[Token(Token = "0x6001505")]
		[Address(RVA = "0xDBDA08", Offset = "0xDBDA08", VA = "0xDBDA08")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003C3")]
	public static bool setTeleportAvailable
	{
		[Token(Token = "0x6001506")]
		[Address(RVA = "0xDBDA80", Offset = "0xDBDA80", VA = "0xDBDA80")]
		set
		{
		}
	}

	[Token(Token = "0x60014FC")]
	[Address(RVA = "0xDBD588", Offset = "0xDBD588", VA = "0xDBD588")]
	public MomentInTimeState()
	{
	}

	[Token(Token = "0x6001507")]
	[Address(RVA = "0xDBDAF4", Offset = "0xDBDAF4", VA = "0xDBDAF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001508")]
	[Address(RVA = "0xDBDD20", Offset = "0xDBDD20", VA = "0xDBDD20", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6001509")]
	[Address(RVA = "0xDBF4C8", Offset = "0xDBF4C8", VA = "0xDBF4C8")]
	private void AttachEarthPatch()
	{
	}

	[Token(Token = "0x600150A")]
	[Address(RVA = "0xDBFA70", Offset = "0xDBFA70", VA = "0xDBFA70")]
	private void Update()
	{
	}

	[Token(Token = "0x600150B")]
	[Address(RVA = "0xDC15F4", Offset = "0xDC15F4", VA = "0xDC15F4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600150C")]
	[Address(RVA = "0xDC040C", Offset = "0xDC040C", VA = "0xDC040C")]
	private void UpdateSelections()
	{
	}

	[Token(Token = "0x600150D")]
	[Address(RVA = "0xDC15F8", Offset = "0xDC15F8", VA = "0xDC15F8")]
	public static void ForceDeselection()
	{
	}

	[Token(Token = "0x600150E")]
	[Address(RVA = "0xDC0E7C", Offset = "0xDC0E7C", VA = "0xDC0E7C")]
	private void UpdateDeselections()
	{
	}

	[Token(Token = "0x600150F")]
	[Address(RVA = "0xDC12F8", Offset = "0xDC12F8", VA = "0xDC12F8")]
	private void PerformTeleport()
	{
	}

	[Token(Token = "0x6001510")]
	[Address(RVA = "0xDC17F0", Offset = "0xDC17F0", VA = "0xDC17F0", Slot = "5")]
	public override void OnLeave()
	{
	}

	[Token(Token = "0x6001511")]
	[Address(RVA = "0xDC1E98", Offset = "0xDC1E98", VA = "0xDC1E98")]
	[DebuggerHidden]
	public IEnumerator FadeIn()
	{
		return null;
	}

	[Token(Token = "0x6001512")]
	[Address(RVA = "0xDC1F20", Offset = "0xDC1F20", VA = "0xDC1F20", Slot = "7")]
	public override void GoHome()
	{
	}

	[Token(Token = "0x6001513")]
	[Address(RVA = "0xDC203C", Offset = "0xDC203C", VA = "0xDC203C")]
	public static void GoBack()
	{
	}

	[Token(Token = "0x6001514")]
	[Address(RVA = "0xDC2168", Offset = "0xDC2168", VA = "0xDC2168")]
	public static void GoToExplore()
	{
	}
}
[Token(Token = "0x2000320")]
public class OrreryState : AppStateBase
{
	[Token(Token = "0x2000321")]
	private enum State
	{
		[Token(Token = "0x40010FC")]
		Intro,
		[Token(Token = "0x40010FD")]
		IntroFadeOut,
		[Token(Token = "0x40010FE")]
		FadeIn,
		[Token(Token = "0x40010FF")]
		Interactive,
		[Token(Token = "0x4001100")]
		FadeOutRestartTour,
		[Token(Token = "0x4001101")]
		TourFadeIn,
		[Token(Token = "0x4001102")]
		FadeOutReset
	}

	[Token(Token = "0x40010E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject mIntroPrefab;

	[Token(Token = "0x40010E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Light sunPointLight;

	[Token(Token = "0x40010E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VrIntroPanel mVrIntroPanel;

	[Token(Token = "0x40010E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private GameObject mScreenFader;

	[Token(Token = "0x40010EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private CanvasGroup mCanvas;

	[Token(Token = "0x40010EB")]
	private const float kfFadeTime = 0.5f;

	[Token(Token = "0x40010EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float mfStartAlpha;

	[Token(Token = "0x40010ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<OrreryAsteroidBelt> belts;

	[Token(Token = "0x40010EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Dictionary<Planets.Names, OrreryPlanet3dName> planet3dNames;

	[Token(Token = "0x40010EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static bool bNeedsUpdateBelt;

	[Token(Token = "0x40010F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
	public static bool bFirstPlanetsUpdate;

	[Token(Token = "0x40010F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static OrreryState sInstance;

	[Token(Token = "0x40010F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static GameObject[] allLetters;

	[Token(Token = "0x40010F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private GameObject mOrreryInfo;

	[Token(Token = "0x40010F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject mTeleportArea;

	[Token(Token = "0x40010F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private SelectableSceneObject mCurrentlySelectedObject;

	[Token(Token = "0x40010F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 mTeleportPoint;

	[Token(Token = "0x40010F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float mfTeleportRotateAngle;

	[Token(Token = "0x40010F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool mbIsTeleporting;

	[Token(Token = "0x40010F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool mbTutorialTeleport;

	[Token(Token = "0x40010FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private State meState;

	[Token(Token = "0x170003C4")]
	public static bool teleportAvailable
	{
		[Token(Token = "0x6001516")]
		[Address(RVA = "0xC78658", Offset = "0xC78658", VA = "0xC78658")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003C5")]
	public static bool isTeleporting
	{
		[Token(Token = "0x6001517")]
		[Address(RVA = "0xC7A278", Offset = "0xC7A278", VA = "0xC7A278")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003C6")]
	public static bool isInteractive
	{
		[Token(Token = "0x6001518")]
		[Address(RVA = "0xC7A314", Offset = "0xC7A314", VA = "0xC7A314")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003C7")]
	public static bool setTutorialTeleportAvailable
	{
		[Token(Token = "0x6001519")]
		[Address(RVA = "0xC7A3BC", Offset = "0xC7A3BC", VA = "0xC7A3BC")]
		set
		{
		}
	}

	[Token(Token = "0x170003C8")]
	public static PanelController panelController
	{
		[Token(Token = "0x600151D")]
		[Address(RVA = "0xC78070", Offset = "0xC78070", VA = "0xC78070")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001515")]
	[Address(RVA = "0xC7A270", Offset = "0xC7A270", VA = "0xC7A270")]
	public OrreryState()
	{
	}

	[Token(Token = "0x600151A")]
	[Address(RVA = "0xC7735C", Offset = "0xC7735C", VA = "0xC7735C")]
	public static void Reset()
	{
	}

	[Token(Token = "0x600151B")]
	[Address(RVA = "0xC773FC", Offset = "0xC773FC", VA = "0xC773FC")]
	public static void StartTour()
	{
	}

	[Token(Token = "0x600151C")]
	[Address(RVA = "0xC78830", Offset = "0xC78830", VA = "0xC78830")]
	public static void ToggleUIPanel()
	{
	}

	[Token(Token = "0x600151E")]
	[Address(RVA = "0xC7A63C", Offset = "0xC7A63C", VA = "0xC7A63C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600151F")]
	[Address(RVA = "0xC7A70C", Offset = "0xC7A70C", VA = "0xC7A70C")]
	public void UpdateBelts()
	{
	}

	[Token(Token = "0x6001520")]
	[Address(RVA = "0xC7AAB8", Offset = "0xC7AAB8", VA = "0xC7AAB8")]
	private static Vector3Double CalculateOrreryHeliocentricCompensation(double xh, double yh, double zh, double offset)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6001521")]
	[Address(RVA = "0xC7AB58", Offset = "0xC7AB58", VA = "0xC7AB58")]
	public static Vector3Double UpdateOrbits(Planet planet, double jd)
	{
		return default(Vector3Double);
	}

	[Token(Token = "0x6001522")]
	[Address(RVA = "0xC7AFC4", Offset = "0xC7AFC4", VA = "0xC7AFC4", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6001523")]
	[Address(RVA = "0xC7C470", Offset = "0xC7C470", VA = "0xC7C470")]
	private void Update()
	{
	}

	[Token(Token = "0x6001524")]
	[Address(RVA = "0xC7A54C", Offset = "0xC7A54C", VA = "0xC7A54C")]
	private void RestartTour()
	{
	}

	[Token(Token = "0x6001525")]
	[Address(RVA = "0xC7A45C", Offset = "0xC7A45C", VA = "0xC7A45C")]
	private void ResetOrrery()
	{
	}

	[Token(Token = "0x6001526")]
	[Address(RVA = "0xC7CF4C", Offset = "0xC7CF4C", VA = "0xC7CF4C")]
	private void UpdateSelections()
	{
	}

	[Token(Token = "0x6001527")]
	[Address(RVA = "0xC7D9B0", Offset = "0xC7D9B0", VA = "0xC7D9B0", Slot = "5")]
	public override void OnLeave()
	{
	}
}
[Token(Token = "0x2000322")]
public class PrefabSceneOverrides : MonoBehaviour
{
	[Token(Token = "0x4001103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool enableFog;

	[Token(Token = "0x4001104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color fogColor;

	[Token(Token = "0x4001105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fogDensity;

	[Token(Token = "0x4001106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool enableSky;

	[Token(Token = "0x4001107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material[] skyMats;

	[Token(Token = "0x4001108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool mbWasEnableFog;

	[Token(Token = "0x4001109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Color mWasFogColor;

	[Token(Token = "0x400110A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float mfWasFogDensity;

	[Token(Token = "0x400110B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Material[] mWasSkyMats;

	[Token(Token = "0x6001529")]
	[Address(RVA = "0xE5BD00", Offset = "0xE5BD00", VA = "0xE5BD00")]
	public PrefabSceneOverrides()
	{
	}

	[Token(Token = "0x600152A")]
	[Address(RVA = "0xE5BD48", Offset = "0xE5BD48", VA = "0xE5BD48")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600152B")]
	[Address(RVA = "0xE5BEFC", Offset = "0xE5BEFC", VA = "0xE5BEFC")]
	private void OnDisable()
	{
	}
}
[Token(Token = "0x2000323")]
public class SkyViewState : AppStateBase
{
	[Token(Token = "0x600152C")]
	[Address(RVA = "0xE15D10", Offset = "0xE15D10", VA = "0xE15D10")]
	public SkyViewState()
	{
	}

	[Token(Token = "0x600152D")]
	[Address(RVA = "0xE15D18", Offset = "0xE15D18", VA = "0xE15D18")]
	private void Awake()
	{
	}

	[Token(Token = "0x600152E")]
	[Address(RVA = "0xE15D30", Offset = "0xE15D30", VA = "0xE15D30", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600152F")]
	[Address(RVA = "0xE160F8", Offset = "0xE160F8", VA = "0xE160F8")]
	private void Update()
	{
	}

	[Token(Token = "0x6001530")]
	[Address(RVA = "0xE160FC", Offset = "0xE160FC", VA = "0xE160FC", Slot = "5")]
	public override void OnLeave()
	{
	}
}
[Token(Token = "0x2000324")]
public abstract class BaseState : MonoBehaviour
{
	[Token(Token = "0x400110C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	protected bool mbShouldLeave;

	[Token(Token = "0x400110D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	protected bool mbIsActive;

	[Token(Token = "0x170003C9")]
	public bool shouldLeave
	{
		[Token(Token = "0x6001532")]
		[Address(RVA = "0x164358", Offset = "0x164358", VA = "0x164358")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003CA")]
	public bool isActive
	{
		[Token(Token = "0x6001533")]
		[Address(RVA = "0x164360", Offset = "0x164360", VA = "0x164360")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001531")]
	[Address(RVA = "0x1632B8", Offset = "0x1632B8", VA = "0x1632B8")]
	protected BaseState()
	{
	}

	[Token(Token = "0x6001534")]
	public abstract void OnEnter();

	[Token(Token = "0x6001535")]
	public abstract void OnLeave();

	[Token(Token = "0x6001536")]
	[Address(RVA = "0x164368", Offset = "0x164368", VA = "0x164368", Slot = "6")]
	public virtual void StartLeave()
	{
	}
}
[Token(Token = "0x2000325")]
internal class DaydreamPermissionsState : VrMessageBoxState
{
	[Token(Token = "0x2000326")]
	private enum State
	{
		[Token(Token = "0x4001112")]
		PreMessage,
		[Token(Token = "0x4001113")]
		PostMessage
	}

	[Token(Token = "0x400110E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool mbPermissionGranted;

	[Token(Token = "0x400110F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private string[] kPermissions;

	[Token(Token = "0x4001110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private State meState;

	[Token(Token = "0x6001537")]
	[Address(RVA = "0x1830A8", Offset = "0x1830A8", VA = "0x1830A8")]
	public DaydreamPermissionsState()
	{
	}

	[Token(Token = "0x6001538")]
	[Address(RVA = "0x18319C", Offset = "0x18319C", VA = "0x18319C", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6001539")]
	[Address(RVA = "0x183248", Offset = "0x183248", VA = "0x183248")]
	private void Update()
	{
	}

	[Token(Token = "0x600153A")]
	[Address(RVA = "0x18343C", Offset = "0x18343C", VA = "0x18343C")]
	private void RequestPermissions()
	{
	}

	[Token(Token = "0x600153B")]
	[Address(RVA = "0x1834CC", Offset = "0x1834CC", VA = "0x1834CC")]
	public void OnResume()
	{
	}

	[Token(Token = "0x600153C")]
	[Address(RVA = "0x183574", Offset = "0x183574", VA = "0x183574")]
	private void SetDefaultLocationMessage()
	{
	}

	[Token(Token = "0x600153D")]
	[Address(RVA = "0x18364C", Offset = "0x18364C", VA = "0x18364C", Slot = "5")]
	public override void OnLeave()
	{
	}
}
[Token(Token = "0x2000327")]
internal class DualOnDeviceState : BaseState
{
	[Token(Token = "0x4001114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private PlanetInfoState mPlanetInfo;

	[Token(Token = "0x4001115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private SurfaceDetailInfoState mSurfaceDetailInfo;

	[Token(Token = "0x4001116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MenuBarState mMenuBar;

	[Token(Token = "0x4001117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private OptionsMenuState mOptionsMenu;

	[Token(Token = "0x4001118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ShortcutMenuState mShortcutMenu;

	[Token(Token = "0x4001119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private LaserPointerComponent mLaserPointer;

	[Token(Token = "0x400111A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject mTriggerIconPrefab;

	[Token(Token = "0x400111B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private GameObject mTriggerIcon;

	[Token(Token = "0x400111C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool mbLaserWasOn;

	[Token(Token = "0x400111D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private NavigationMenuState mNavigationMenu;

	[Token(Token = "0x400111E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private TravelToState mTravelInfo;

	[Token(Token = "0x400111F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private OrbitModeState mOrbitMode;

	[Token(Token = "0x4001120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private BaseState mActivePrimary;

	[Token(Token = "0x4001121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private BaseState mActiveSecondary;

	[Token(Token = "0x600153E")]
	[Address(RVA = "0x1872EC", Offset = "0x1872EC", VA = "0x1872EC")]
	public DualOnDeviceState()
	{
	}

	[Token(Token = "0x600153F")]
	[Address(RVA = "0x1872F4", Offset = "0x1872F4", VA = "0x1872F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001540")]
	[Address(RVA = "0x187564", Offset = "0x187564", VA = "0x187564", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6001541")]
	[Address(RVA = "0x187B54", Offset = "0x187B54", VA = "0x187B54")]
	private void Update()
	{
	}

	[Token(Token = "0x6001542")]
	[Address(RVA = "0x1887B0", Offset = "0x1887B0", VA = "0x1887B0")]
	private void ShowPreview()
	{
	}

	[Token(Token = "0x6001543")]
	[Address(RVA = "0x1887EC", Offset = "0x1887EC", VA = "0x1887EC")]
	private void ShowNavigationMenu()
	{
	}

	[Token(Token = "0x6001544")]
	[Address(RVA = "0x188844", Offset = "0x188844", VA = "0x188844")]
	public void OnDeparture()
	{
	}

	[Token(Token = "0x6001545")]
	[Address(RVA = "0x1889CC", Offset = "0x1889CC", VA = "0x1889CC")]
	public void OnArrival()
	{
	}

	[Token(Token = "0x6001546")]
	[Address(RVA = "0x188C70", Offset = "0x188C70", VA = "0x188C70", Slot = "5")]
	public override void OnLeave()
	{
	}

	[Token(Token = "0x6001547")]
	[Address(RVA = "0x188C7C", Offset = "0x188C7C", VA = "0x188C7C")]
	public bool inPlanetPreviewMode()
	{
		return default(bool);
	}

	[Token(Token = "0x6001548")]
	[Address(RVA = "0x188C9C", Offset = "0x188C9C", VA = "0x188C9C")]
	public bool inSurfaceDetailMode()
	{
		return default(bool);
	}

	[Token(Token = "0x6001549")]
	[Address(RVA = "0x188CBC", Offset = "0x188CBC", VA = "0x188CBC")]
	public bool inOrbitMode()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000328")]
public class FadeTransitionState : BaseState
{
	[Token(Token = "0x2000422")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2F78C", Offset = "0xC2F78C")]
	private sealed class <FadeOut>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfFadeSpeed>__0;

		[Token(Token = "0x4001701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfAlpha>__0;

		[Token(Token = "0x4001702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal FadeTransitionState $this;

		[Token(Token = "0x4001703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x4001704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4001705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x17000488")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001A5C")]
			[Address(RVA = "0x18E5A4", Offset = "0x18E5A4", VA = "0x18E5A4", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000489")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A5D")]
			[Address(RVA = "0x18E5AC", Offset = "0x18E5AC", VA = "0x18E5AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A5A")]
		[Address(RVA = "0x18E168", Offset = "0x18E168", VA = "0x18E168")]
		[DebuggerHidden]
		public <FadeOut>c__Iterator0()
		{
		}

		[Token(Token = "0x6001A5B")]
		[Address(RVA = "0x18E3A4", Offset = "0x18E3A4", VA = "0x18E3A4", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A5E")]
		[Address(RVA = "0x18E5B4", Offset = "0x18E5B4", VA = "0x18E5B4", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A5F")]
		[Address(RVA = "0x18E5C8", Offset = "0x18E5C8", VA = "0x18E5C8", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000423")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2F7EC", Offset = "0xC2F7EC")]
	private sealed class <FadeIn>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfFadeSpeed>__0;

		[Token(Token = "0x4001707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfAlpha>__0;

		[Token(Token = "0x4001708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal FadeTransitionState $this;

		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x400170A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x400170B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x1700048A")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001A62")]
			[Address(RVA = "0x18E2FC", Offset = "0x18E2FC", VA = "0x18E2FC", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700048B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A63")]
			[Address(RVA = "0x18E304", Offset = "0x18E304", VA = "0x18E304", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A60")]
		[Address(RVA = "0x18E170", Offset = "0x18E170", VA = "0x18E170")]
		[DebuggerHidden]
		public <FadeIn>c__Iterator1()
		{
		}

		[Token(Token = "0x6001A61")]
		[Address(RVA = "0x18E178", Offset = "0x18E178", VA = "0x18E178", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A64")]
		[Address(RVA = "0x18E30C", Offset = "0x18E30C", VA = "0x18E30C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A65")]
		[Address(RVA = "0x18E320", Offset = "0x18E320", VA = "0x18E320", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4001122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float mfFadeInTime;

	[Token(Token = "0x4001123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float mfFadeOutTime;

	[Token(Token = "0x4001124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject mScreenFaderPrefab;

	[Token(Token = "0x4001125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private GameObject mScreenFader;

	[Token(Token = "0x4001126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CanvasGroup mCanvas;

	[Token(Token = "0x4001127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Action mTransitionCallback;

	[Token(Token = "0x4001128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool mbMessageActive;

	[Token(Token = "0x600154A")]
	[Address(RVA = "0x18D84C", Offset = "0x18D84C", VA = "0x18D84C")]
	public FadeTransitionState()
	{
	}

	[Token(Token = "0x600154B")]
	[Address(RVA = "0x18D868", Offset = "0x18D868", VA = "0x18D868")]
	private void Awake()
	{
	}

	[Token(Token = "0x600154C")]
	[Address(RVA = "0x18D918", Offset = "0x18D918", VA = "0x18D918")]
	public void SetTransitionCallback(Action lTransitionCallback, float lfFadeOutTime = 1.25f, float lfFadeInTime = 1.25f)
	{
	}

	[Token(Token = "0x600154D")]
	[Address(RVA = "0x18D928", Offset = "0x18D928", VA = "0x18D928")]
	public void SetWaitForIntro(bool lbWait)
	{
	}

	[Token(Token = "0x600154E")]
	[Address(RVA = "0x18D930", Offset = "0x18D930", VA = "0x18D930", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600154F")]
	[Address(RVA = "0x18DC7C", Offset = "0x18DC7C", VA = "0x18DC7C")]
	public void OnEnterAtLaunch()
	{
	}

	[Token(Token = "0x6001550")]
	[Address(RVA = "0x18DF94", Offset = "0x18DF94", VA = "0x18DF94")]
	private void Update()
	{
	}

	[Token(Token = "0x6001551")]
	[Address(RVA = "0x18E054", Offset = "0x18E054", VA = "0x18E054", Slot = "5")]
	public override void OnLeave()
	{
	}

	[Token(Token = "0x6001552")]
	[Address(RVA = "0x18DBFC", Offset = "0x18DBFC", VA = "0x18DBFC")]
	[DebuggerHidden]
	public IEnumerator FadeOut()
	{
		return null;
	}

	[Token(Token = "0x6001553")]
	[Address(RVA = "0x18DF14", Offset = "0x18DF14", VA = "0x18DF14")]
	[DebuggerHidden]
	public IEnumerator FadeIn()
	{
		return null;
	}
}
[Token(Token = "0x2000329")]
public class InWorldUIState : BaseState
{
	[Token(Token = "0x2000424")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2F86C", Offset = "0xC2F86C")]
	private sealed class <PopIn>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400170C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfPopSpeed>__0;

		[Token(Token = "0x400170D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfScale>__0;

		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 <lScale>__0;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal InWorldUIState $this;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x1700048C")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001A68")]
			[Address(RVA = "0xC4780C", Offset = "0xC4780C", VA = "0xC4780C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700048D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A69")]
			[Address(RVA = "0xC47814", Offset = "0xC47814", VA = "0xC47814", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A66")]
		[Address(RVA = "0xC47338", Offset = "0xC47338", VA = "0xC47338")]
		[DebuggerHidden]
		public <PopIn>c__Iterator0()
		{
		}

		[Token(Token = "0x6001A67")]
		[Address(RVA = "0xC473C8", Offset = "0xC473C8", VA = "0xC473C8", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A6A")]
		[Address(RVA = "0xC4781C", Offset = "0xC4781C", VA = "0xC4781C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A6B")]
		[Address(RVA = "0xC47830", Offset = "0xC47830", VA = "0xC47830", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000425")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2F8CC", Offset = "0xC2F8CC")]
	private sealed class <PopOut>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfPopSpeed>__0;

		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfScale>__0;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 <lScale>__0;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal InWorldUIState $this;

		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x4001718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x1700048E")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001A6E")]
			[Address(RVA = "0xC47CEC", Offset = "0xC47CEC", VA = "0xC47CEC", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700048F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A6F")]
			[Address(RVA = "0xC47CF4", Offset = "0xC47CF4", VA = "0xC47CF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A6C")]
		[Address(RVA = "0xC473C0", Offset = "0xC473C0", VA = "0xC473C0")]
		[DebuggerHidden]
		public <PopOut>c__Iterator1()
		{
		}

		[Token(Token = "0x6001A6D")]
		[Address(RVA = "0xC478B4", Offset = "0xC478B4", VA = "0xC478B4", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A70")]
		[Address(RVA = "0xC47CFC", Offset = "0xC47CFC", VA = "0xC47CFC", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A71")]
		[Address(RVA = "0xC47D10", Offset = "0xC47D10", VA = "0xC47D10", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4001129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected GameObject mPanel;

	[Token(Token = "0x400112A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	protected ControlHintsState mControlHints;

	[Token(Token = "0x400112B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected InputContext meInputContext;

	[Token(Token = "0x400112C")]
	private const float kfPopInTime = 0.25f;

	[Token(Token = "0x400112D")]
	private const float kfPopOutTime = 0.25f;

	[Token(Token = "0x6001554")]
	[Address(RVA = "0xC470F4", Offset = "0xC470F4", VA = "0xC470F4")]
	public InWorldUIState()
	{
	}

	[Token(Token = "0x6001555")]
	[Address(RVA = "0xC470FC", Offset = "0xC470FC", VA = "0xC470FC", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6001556")]
	[Address(RVA = "0xC47100", Offset = "0xC47100", VA = "0xC47100", Slot = "5")]
	public override void OnLeave()
	{
	}

	[Token(Token = "0x6001557")]
	[Address(RVA = "0xC47104", Offset = "0xC47104", VA = "0xC47104")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001558")]
	[Address(RVA = "0xC472B8", Offset = "0xC472B8", VA = "0xC472B8")]
	[DebuggerHidden]
	public IEnumerator PopIn()
	{
		return null;
	}

	[Token(Token = "0x6001559")]
	[Address(RVA = "0xC47340", Offset = "0xC47340", VA = "0xC47340")]
	[DebuggerHidden]
	public IEnumerator PopOut()
	{
		return null;
	}
}
[Token(Token = "0x200032A")]
public class ControlHintsState : MonoBehaviour
{
	[Token(Token = "0x200032B")]
	public enum ControlHint
	{
		[Token(Token = "0x4001132")]
		MenuBar,
		[Token(Token = "0x4001133")]
		Laser,
		[Token(Token = "0x4001134")]
		BackButton,
		[Token(Token = "0x4001135")]
		Swipe,
		[Token(Token = "0x4001136")]
		MITMenu,
		[Token(Token = "0x4001137")]
		Teleport,
		[Token(Token = "0x4001138")]
		OrreryPad,
		[Token(Token = "0x4001139")]
		Count
	}

	[Token(Token = "0x400112E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject[] controlHints;

	[Token(Token = "0x400112F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject backButtonGo;

	[Token(Token = "0x4001130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject MITMenuGo;

	[Token(Token = "0x600155A")]
	[Address(RVA = "0x181254", Offset = "0x181254", VA = "0x181254")]
	public ControlHintsState()
	{
	}

	[Token(Token = "0x600155B")]
	[Address(RVA = "0x1812D4", Offset = "0x1812D4", VA = "0x1812D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600155C")]
	[Address(RVA = "0x181460", Offset = "0x181460", VA = "0x181460")]
	public void SetHints(ControlHint[] laHints)
	{
	}

	[Token(Token = "0x600155D")]
	[Address(RVA = "0x181598", Offset = "0x181598", VA = "0x181598")]
	public void ClearHints()
	{
	}
}
[Token(Token = "0x200032C")]
public class HomeAndBackMenuState : OnDeviceUIState
{
	[Token(Token = "0x200032D")]
	public enum LeaveReason
	{
		[Token(Token = "0x400113E")]
		None,
		[Token(Token = "0x400113F")]
		NavMenu,
		[Token(Token = "0x4001140")]
		Quit
	}

	[Token(Token = "0x400113A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public LeaveReason meLeaveReason;

	[Token(Token = "0x400113B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool mbMenuHint;

	[Token(Token = "0x400113C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool mbTeleportHint;

	[Token(Token = "0x600155E")]
	[Address(RVA = "0xC3C7C8", Offset = "0xC3C7C8", VA = "0xC3C7C8")]
	public HomeAndBackMenuState()
	{
	}

	[Token(Token = "0x600155F")]
	[Address(RVA = "0xC3C7D8", Offset = "0xC3C7D8", VA = "0xC3C7D8", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6001560")]
	[Address(RVA = "0xC3C994", Offset = "0xC3C994", VA = "0xC3C994")]
	private void Update()
	{
	}

	[Token(Token = "0x6001561")]
	[Address(RVA = "0xC3CE94", Offset = "0xC3CE94", VA = "0xC3CE94", Slot = "6")]
	public override void StartLeave()
	{
	}

	[Token(Token = "0x6001562")]
	[Address(RVA = "0xC3CECC", Offset = "0xC3CECC", VA = "0xC3CECC", Slot = "5")]
	public override void OnLeave()
	{
	}
}
[Token(Token = "0x200032E")]
public class HumanScaleInfoState : OnDeviceUIState
{
	[Token(Token = "0x200032F")]
	public enum LeaveReason
	{
		[Token(Token = "0x4001143")]
		None,
		[Token(Token = "0x4001144")]
		Deselect
	}

	[Token(Token = "0x4001141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public LeaveReason meLeaveReason;

	[Token(Token = "0x6001563")]
	[Address(RVA = "0xC3F3F8", Offset = "0xC3F3F8", VA = "0xC3F3F8")]
	public HumanScaleInfoState()
	{
	}

	[Token(Token = "0x6001564")]
	[Address(RVA = "0xC3F400", Offset = "0xC3F400", VA = "0xC3F400", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6001565")]
	[Address(RVA = "0xC3F9B0", Offset = "0xC3F9B0", VA = "0xC3F9B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6001566")]
	[Address(RVA = "0xC3FDAC", Offset = "0xC3FDAC", VA = "0xC3FDAC", Slot = "6")]
	public override void StartLeave()
	{
	}

	[Token(Token = "0x6001567")]
	[Address(RVA = "0xC3FDE4", Offset = "0xC3FDE4", VA = "0xC3FDE4", Slot = "5")]
	public override void OnLeave()
	{
	}
}
[Token(Token = "0x2000330")]
public class MenuBarState : BaseState
{
	[Token(Token = "0x2000331")]
	private enum PopState
	{
		[Token(Token = "0x4001155")]
		None,
		[Token(Token = "0x4001156")]
		Popin,
		[Token(Token = "0x4001157")]
		Popout
	}

	[Token(Token = "0x2000426")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2F94C", Offset = "0xC2F94C")]
	private sealed class <PopIn>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfPopSpeed>__0;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfScale>__0;

		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 <lScale>__0;

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal MenuBarState $this;

		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x400171F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x4001720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x17000490")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001A74")]
			[Address(RVA = "0xC5BF40", Offset = "0xC5BF40", VA = "0xC5BF40", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000491")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A75")]
			[Address(RVA = "0xC5BF48", Offset = "0xC5BF48", VA = "0xC5BF48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A72")]
		[Address(RVA = "0xC5BB98", Offset = "0xC5BB98", VA = "0xC5BB98")]
		[DebuggerHidden]
		public <PopIn>c__Iterator0()
		{
		}

		[Token(Token = "0x6001A73")]
		[Address(RVA = "0xC5BBA8", Offset = "0xC5BBA8", VA = "0xC5BBA8", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A76")]
		[Address(RVA = "0xC5BF50", Offset = "0xC5BF50", VA = "0xC5BF50", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A77")]
		[Address(RVA = "0xC5BF64", Offset = "0xC5BF64", VA = "0xC5BF64", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000427")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2F9AC", Offset = "0xC2F9AC")]
	private sealed class <PopOut>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfPopSpeed>__0;

		[Token(Token = "0x4001722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfScale>__0;

		[Token(Token = "0x4001723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 <lScale>__0;

		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal MenuBarState $this;

		[Token(Token = "0x4001725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x17000492")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001A7A")]
			[Address(RVA = "0xC5C368", Offset = "0xC5C368", VA = "0xC5C368", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000493")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A7B")]
			[Address(RVA = "0xC5C370", Offset = "0xC5C370", VA = "0xC5C370", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A78")]
		[Address(RVA = "0xC5BBA0", Offset = "0xC5BBA0", VA = "0xC5BBA0")]
		[DebuggerHidden]
		public <PopOut>c__Iterator1()
		{
		}

		[Token(Token = "0x6001A79")]
		[Address(RVA = "0xC5BFE8", Offset = "0xC5BFE8", VA = "0xC5BFE8", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A7C")]
		[Address(RVA = "0xC5C378", Offset = "0xC5C378", VA = "0xC5C378", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A7D")]
		[Address(RVA = "0xC5C38C", Offset = "0xC5C38C", VA = "0xC5C38C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4001145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject mPanel;

	[Token(Token = "0x4001146")]
	private const float kfPopInTime = 0.25f;

	[Token(Token = "0x4001147")]
	private const float kfPopOutTime = 0.25f;

	[Token(Token = "0x4001148")]
	private const float kfMaxClickTime = 0.25f;

	[Token(Token = "0x4001149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float mfClickTime;

	[Token(Token = "0x400114A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool mbMenuSelected;

	[Token(Token = "0x400114B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool mbQuitSkyView;

	[Token(Token = "0x400114C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public CelestialObject mPreviewSelection;

	[Token(Token = "0x400114D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SurfaceDetail mSurfaceDetailsSelection;

	[Token(Token = "0x400114E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool mbOrbiting;

	[Token(Token = "0x400114F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	private bool mbPadDown;

	[Token(Token = "0x4001150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator mRoutine;

	[Token(Token = "0x4001151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private PopState mePopState;

	[Token(Token = "0x4001152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ControlHintsState mControlHints;

	[Token(Token = "0x4001153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private GameObject mOrreryInfo;

	[Token(Token = "0x170003CB")]
	public bool isOrbiting
	{
		[Token(Token = "0x600156B")]
		[Address(RVA = "0xC5B318", Offset = "0xC5B318", VA = "0xC5B318")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001568")]
	[Address(RVA = "0xC5AC64", Offset = "0xC5AC64", VA = "0xC5AC64")]
	public MenuBarState()
	{
	}

	[Token(Token = "0x6001569")]
	[Address(RVA = "0xC5AC6C", Offset = "0xC5AC6C", VA = "0xC5AC6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600156A")]
	[Address(RVA = "0xC5AD8C", Offset = "0xC5AD8C", VA = "0xC5AD8C", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600156C")]
	[Address(RVA = "0xC5B33C", Offset = "0xC5B33C", VA = "0xC5B33C")]
	private void Update()
	{
	}

	[Token(Token = "0x600156D")]
	[Address(RVA = "0xC5B93C", Offset = "0xC5B93C", VA = "0xC5B93C", Slot = "6")]
	public override void StartLeave()
	{
	}

	[Token(Token = "0x600156E")]
	[Address(RVA = "0xC5BAD0", Offset = "0xC5BAD0", VA = "0xC5BAD0", Slot = "5")]
	public override void OnLeave()
	{
	}

	[Token(Token = "0x600156F")]
	[Address(RVA = "0xC5B298", Offset = "0xC5B298", VA = "0xC5B298")]
	[DebuggerHidden]
	public IEnumerator PopIn()
	{
		return null;
	}

	[Token(Token = "0x6001570")]
	[Address(RVA = "0xC5BA50", Offset = "0xC5BA50", VA = "0xC5BA50")]
	[DebuggerHidden]
	public IEnumerator PopOut()
	{
		return null;
	}
}
[Token(Token = "0x2000332")]
public class NavigationMenuState : BaseState
{
	[Token(Token = "0x2000333")]
	public enum MenuItemType
	{
		[Token(Token = "0x400115F")]
		GoHome = -3,
		[Token(Token = "0x4001160")]
		Quit,
		[Token(Token = "0x4001161")]
		None,
		[Token(Token = "0x4001162")]
		TravelToSystem,
		[Token(Token = "0x4001163")]
		OrbitMode,
		[Token(Token = "0x4001164")]
		TravelBack,
		[Token(Token = "0x4001165")]
		SkyView,
		[Token(Token = "0x4001166")]
		BrowsePlanets,
		[Token(Token = "0x4001167")]
		Home,
		[Token(Token = "0x4001168")]
		Zoom,
		[Token(Token = "0x4001169")]
		ResetOrrery,
		[Token(Token = "0x400116A")]
		OrreryTour
	}

	[Token(Token = "0x2000428")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2FA2C", Offset = "0xC2FA2C")]
	private sealed class <PopIn>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfPopSpeed>__0;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfScale>__0;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 <lScale>__0;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal NavigationMenuState $this;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x17000494")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001A80")]
			[Address(RVA = "0xDC4D10", Offset = "0xDC4D10", VA = "0xDC4D10", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000495")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A81")]
			[Address(RVA = "0xDC4D18", Offset = "0xDC4D18", VA = "0xDC4D18", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A7E")]
		[Address(RVA = "0xDC4AA8", Offset = "0xDC4AA8", VA = "0xDC4AA8")]
		[DebuggerHidden]
		public <PopIn>c__Iterator0()
		{
		}

		[Token(Token = "0x6001A7F")]
		[Address(RVA = "0xDC4AB8", Offset = "0xDC4AB8", VA = "0xDC4AB8", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A82")]
		[Address(RVA = "0xDC4D20", Offset = "0xDC4D20", VA = "0xDC4D20", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A83")]
		[Address(RVA = "0xDC4D34", Offset = "0xDC4D34", VA = "0xDC4D34", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000429")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2FA8C", Offset = "0xC2FA8C")]
	private sealed class <PopOut>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfPopSpeed>__0;

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfScale>__0;

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 <lScale>__0;

		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal NavigationMenuState $this;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x4001735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x17000496")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001A86")]
			[Address(RVA = "0xDC5004", Offset = "0xDC5004", VA = "0xDC5004", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000497")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A87")]
			[Address(RVA = "0xDC500C", Offset = "0xDC500C", VA = "0xDC500C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A84")]
		[Address(RVA = "0xDC4AB0", Offset = "0xDC4AB0", VA = "0xDC4AB0")]
		[DebuggerHidden]
		public <PopOut>c__Iterator1()
		{
		}

		[Token(Token = "0x6001A85")]
		[Address(RVA = "0xDC4DB8", Offset = "0xDC4DB8", VA = "0xDC4DB8", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A88")]
		[Address(RVA = "0xDC5014", Offset = "0xDC5014", VA = "0xDC5014", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A89")]
		[Address(RVA = "0xDC5028", Offset = "0xDC5028", VA = "0xDC5028", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4001158")]
	private const float kfPopInTime = 0.25f;

	[Token(Token = "0x4001159")]
	private const float kfPopOutTime = 0.25f;

	[Token(Token = "0x400115A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject mMenu;

	[Token(Token = "0x400115B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private CelestialObject mSelectedObject;

	[Token(Token = "0x400115C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MenuItemType mSelectedMenuType;

	[Token(Token = "0x400115D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private ControlHintsState mControlHints;

	[Token(Token = "0x6001571")]
	[Address(RVA = "0xDC2D3C", Offset = "0xDC2D3C", VA = "0xDC2D3C")]
	public NavigationMenuState()
	{
	}

	[Token(Token = "0x6001572")]
	[Address(RVA = "0xDC2D44", Offset = "0xDC2D44", VA = "0xDC2D44")]
	private void Start()
	{
	}

	[Token(Token = "0x6001573")]
	[Address(RVA = "0xDC2E64", Offset = "0xDC2E64", VA = "0xDC2E64", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6001574")]
	[Address(RVA = "0xDC43C8", Offset = "0xDC43C8", VA = "0xDC43C8")]
	private void Update()
	{
	}

	[Token(Token = "0x6001575")]
	[Address(RVA = "0xDC43CC", Offset = "0xDC43CC", VA = "0xDC43CC", Slot = "6")]
	public override void StartLeave()
	{
	}

	[Token(Token = "0x6001576")]
	[Address(RVA = "0xDC4468", Offset = "0xDC4468", VA = "0xDC4468", Slot = "5")]
	public override void OnLeave()
	{
	}

	[Token(Token = "0x6001577")]
	[Address(RVA = "0xDC4524", Offset = "0xDC4524", VA = "0xDC4524")]
	private void OnMenuWillExit(int lSelectedValue)
	{
	}

	[Token(Token = "0x6001578")]
	[Address(RVA = "0xDC4684", Offset = "0xDC4684", VA = "0xDC4684")]
	private void OnMenuItemSelected(int lSelectedValue)
	{
	}

	[Token(Token = "0x6001579")]
	[Address(RVA = "0xDC4348", Offset = "0xDC4348", VA = "0xDC4348")]
	[DebuggerHidden]
	public IEnumerator PopIn()
	{
		return null;
	}

	[Token(Token = "0x600157A")]
	[Address(RVA = "0xDC4604", Offset = "0xDC4604", VA = "0xDC4604")]
	[DebuggerHidden]
	public IEnumerator PopOut()
	{
		return null;
	}
}
[Token(Token = "0x2000334")]
public class OnDeviceAnchor : MonoBehaviour
{
	[Token(Token = "0x400116B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject menuPrefab;

	[Token(Token = "0x400116C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject mInstantiated;

	[Token(Token = "0x600157B")]
	[Address(RVA = "0x469364", Offset = "0x469364", VA = "0x469364")]
	public OnDeviceAnchor()
	{
	}

	[Token(Token = "0x600157C")]
	[Address(RVA = "0x46936C", Offset = "0x46936C", VA = "0x46936C")]
	private void Awake()
	{
	}
}
[Token(Token = "0x2000335")]
public class OnDeviceUIState : BaseState
{
	[Token(Token = "0x200042A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2FB0C", Offset = "0xC2FB0C")]
	private sealed class <PopIn>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfPopSpeed>__0;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfScale>__0;

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 <lScale>__0;

		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal OnDeviceUIState $this;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x17000498")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001A8C")]
			[Address(RVA = "0x469B74", Offset = "0x469B74", VA = "0x469B74", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000499")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A8D")]
			[Address(RVA = "0x469B7C", Offset = "0x469B7C", VA = "0x469B7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A8A")]
		[Address(RVA = "0x4695D8", Offset = "0x4695D8", VA = "0x4695D8")]
		[DebuggerHidden]
		public <PopIn>c__Iterator0()
		{
		}

		[Token(Token = "0x6001A8B")]
		[Address(RVA = "0x469668", Offset = "0x469668", VA = "0x469668", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A8E")]
		[Address(RVA = "0x469B84", Offset = "0x469B84", VA = "0x469B84", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A8F")]
		[Address(RVA = "0x469B98", Offset = "0x469B98", VA = "0x469B98", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200042B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2FB6C", Offset = "0xC2FB6C")]
	private sealed class <PopOut>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfPopSpeed>__0;

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfScale>__0;

		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 <lScale>__0;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal OnDeviceUIState $this;

		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x4001742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x4001743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x1700049A")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001A92")]
			[Address(RVA = "0x46A0CC", Offset = "0x46A0CC", VA = "0x46A0CC", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700049B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A93")]
			[Address(RVA = "0x46A0D4", Offset = "0x46A0D4", VA = "0x46A0D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A90")]
		[Address(RVA = "0x469660", Offset = "0x469660", VA = "0x469660")]
		[DebuggerHidden]
		public <PopOut>c__Iterator1()
		{
		}

		[Token(Token = "0x6001A91")]
		[Address(RVA = "0x469C1C", Offset = "0x469C1C", VA = "0x469C1C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A94")]
		[Address(RVA = "0x46A0DC", Offset = "0x46A0DC", VA = "0x46A0DC", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A95")]
		[Address(RVA = "0x46A0F0", Offset = "0x46A0F0", VA = "0x46A0F0", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x400116D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected GameObject mPanel;

	[Token(Token = "0x400116E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	protected ControlHintsState mControlHints;

	[Token(Token = "0x400116F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected InputContext meInputContext;

	[Token(Token = "0x4001170")]
	private const float kfPopInTime = 0.25f;

	[Token(Token = "0x4001171")]
	private const float kfPopOutTime = 0.25f;

	[Token(Token = "0x600157D")]
	[Address(RVA = "0x46942C", Offset = "0x46942C", VA = "0x46942C")]
	public OnDeviceUIState()
	{
	}

	[Token(Token = "0x600157E")]
	[Address(RVA = "0x469434", Offset = "0x469434", VA = "0x469434", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600157F")]
	[Address(RVA = "0x469438", Offset = "0x469438", VA = "0x469438", Slot = "5")]
	public override void OnLeave()
	{
	}

	[Token(Token = "0x6001580")]
	[Address(RVA = "0x46943C", Offset = "0x46943C", VA = "0x46943C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001581")]
	[Address(RVA = "0x469558", Offset = "0x469558", VA = "0x469558")]
	[DebuggerHidden]
	public IEnumerator PopIn()
	{
		return null;
	}

	[Token(Token = "0x6001582")]
	[Address(RVA = "0x4695E0", Offset = "0x4695E0", VA = "0x4695E0")]
	[DebuggerHidden]
	public IEnumerator PopOut()
	{
		return null;
	}
}
[Token(Token = "0x2000336")]
public class OptionsMenuState : BaseState
{
	[Token(Token = "0x2000337")]
	public enum OptionsMenuType
	{
		[Token(Token = "0x4001176")]
		Quit = -2,
		[Token(Token = "0x4001177")]
		None,
		[Token(Token = "0x4001178")]
		BrowsePlanets,
		[Token(Token = "0x4001179")]
		Unused1,
		[Token(Token = "0x400117A")]
		Home,
		[Token(Token = "0x400117B")]
		Unused2
	}

	[Token(Token = "0x4001172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject mMenuPrefab;

	[Token(Token = "0x4001173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private GameObject mMenu;

	[Token(Token = "0x4001174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OptionsMenuType meSelectedOption;

	[Token(Token = "0x6001583")]
	[Address(RVA = "0xC6AE50", Offset = "0xC6AE50", VA = "0xC6AE50")]
	public OptionsMenuState()
	{
	}

	[Token(Token = "0x6001584")]
	[Address(RVA = "0xC6AE58", Offset = "0xC6AE58", VA = "0xC6AE58")]
	public void SetPrefabUIObject(GameObject lObject)
	{
	}

	[Token(Token = "0x6001585")]
	[Address(RVA = "0xC6AE60", Offset = "0xC6AE60", VA = "0xC6AE60")]
	private void Start()
	{
	}

	[Token(Token = "0x6001586")]
	[Address(RVA = "0xC6AF10", Offset = "0xC6AF10", VA = "0xC6AF10", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6001587")]
	[Address(RVA = "0xC6B374", Offset = "0xC6B374", VA = "0xC6B374")]
	private void Update()
	{
	}

	[Token(Token = "0x6001588")]
	[Address(RVA = "0xC6B378", Offset = "0xC6B378", VA = "0xC6B378", Slot = "5")]
	public override void OnLeave()
	{
	}

	[Token(Token = "0x6001589")]
	[Address(RVA = "0xC6B4C0", Offset = "0xC6B4C0", VA = "0xC6B4C0")]
	private void OnMenuWillExit(int lSelectedValue)
	{
	}

	[Token(Token = "0x600158A")]
	[Address(RVA = "0xC6B4C4", Offset = "0xC6B4C4", VA = "0xC6B4C4")]
	private void OnMenuItemSelected(int lSelectedValue)
	{
	}
}
[Token(Token = "0x2000338")]
public class OrbitModeState : BaseState
{
	[Token(Token = "0x200042C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2FBEC", Offset = "0xC2FBEC")]
	private sealed class <PopIn>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfPopSpeed>__0;

		[Token(Token = "0x4001745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfScale>__0;

		[Token(Token = "0x4001746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 <lScale>__0;

		[Token(Token = "0x4001747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal OrbitModeState $this;

		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x1700049C")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001A98")]
			[Address(RVA = "0xC6FE64", Offset = "0xC6FE64", VA = "0xC6FE64", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700049D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A99")]
			[Address(RVA = "0xC6FE6C", Offset = "0xC6FE6C", VA = "0xC6FE6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A96")]
		[Address(RVA = "0xC6FBFC", Offset = "0xC6FBFC", VA = "0xC6FBFC")]
		[DebuggerHidden]
		public <PopIn>c__Iterator0()
		{
		}

		[Token(Token = "0x6001A97")]
		[Address(RVA = "0xC6FC0C", Offset = "0xC6FC0C", VA = "0xC6FC0C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A9A")]
		[Address(RVA = "0xC6FE74", Offset = "0xC6FE74", VA = "0xC6FE74", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001A9B")]
		[Address(RVA = "0xC6FE88", Offset = "0xC6FE88", VA = "0xC6FE88", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200042D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2FC4C", Offset = "0xC2FC4C")]
	private sealed class <PopOut>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfPopSpeed>__0;

		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfScale>__0;

		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 <lScale>__0;

		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal OrbitModeState $this;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x4001751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x1700049E")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001A9E")]
			[Address(RVA = "0xC70188", Offset = "0xC70188", VA = "0xC70188", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700049F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001A9F")]
			[Address(RVA = "0xC70190", Offset = "0xC70190", VA = "0xC70190", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A9C")]
		[Address(RVA = "0xC6FC04", Offset = "0xC6FC04", VA = "0xC6FC04")]
		[DebuggerHidden]
		public <PopOut>c__Iterator1()
		{
		}

		[Token(Token = "0x6001A9D")]
		[Address(RVA = "0xC6FF0C", Offset = "0xC6FF0C", VA = "0xC6FF0C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AA0")]
		[Address(RVA = "0xC70198", Offset = "0xC70198", VA = "0xC70198", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001AA1")]
		[Address(RVA = "0xC701AC", Offset = "0xC701AC", VA = "0xC701AC", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x400117C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject mPrefab;

	[Token(Token = "0x400117D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private GameObject mPanel;

	[Token(Token = "0x400117E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CelestialObject mCurrentPlanet;

	[Token(Token = "0x400117F")]
	private const float kfPopInTime = 0.25f;

	[Token(Token = "0x4001180")]
	private const float kfPopOutTime = 0.25f;

	[Token(Token = "0x4001181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool mbUserQuit;

	[Token(Token = "0x600158B")]
	[Address(RVA = "0xC6F440", Offset = "0xC6F440", VA = "0xC6F440")]
	public OrbitModeState()
	{
	}

	[Token(Token = "0x600158C")]
	[Address(RVA = "0xC6F448", Offset = "0xC6F448", VA = "0xC6F448")]
	private void Start()
	{
	}

	[Token(Token = "0x600158D")]
	[Address(RVA = "0xC6F4F0", Offset = "0xC6F4F0", VA = "0xC6F4F0")]
	public void SetPrefabUIObject(GameObject lObject)
	{
	}

	[Token(Token = "0x600158E")]
	[Address(RVA = "0xC6F4F8", Offset = "0xC6F4F8", VA = "0xC6F4F8", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600158F")]
	[Address(RVA = "0xC6F8C8", Offset = "0xC6F8C8", VA = "0xC6F8C8")]
	private void Update()
	{
	}

	[Token(Token = "0x6001590")]
	[Address(RVA = "0xC6FA74", Offset = "0xC6FA74", VA = "0xC6FA74", Slot = "6")]
	public override void StartLeave()
	{
	}

	[Token(Token = "0x6001591")]
	[Address(RVA = "0xC6FAB0", Offset = "0xC6FAB0", VA = "0xC6FAB0", Slot = "5")]
	public override void OnLeave()
	{
	}

	[Token(Token = "0x6001592")]
	[Address(RVA = "0xC6F848", Offset = "0xC6F848", VA = "0xC6F848")]
	[DebuggerHidden]
	public IEnumerator PopIn()
	{
		return null;
	}

	[Token(Token = "0x6001593")]
	[Address(RVA = "0xC6F9F4", Offset = "0xC6F9F4", VA = "0xC6F9F4")]
	[DebuggerHidden]
	public IEnumerator PopOut()
	{
		return null;
	}
}
[Token(Token = "0x2000339")]
public class OrreryMenuState : OnDeviceUIState
{
	[Token(Token = "0x200033A")]
	public enum LeaveReason
	{
		[Token(Token = "0x4001187")]
		None,
		[Token(Token = "0x4001188")]
		PlanetSelected,
		[Token(Token = "0x4001189")]
		RestartTour,
		[Token(Token = "0x400118A")]
		Home
	}

	[Token(Token = "0x4001182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public LeaveReason meLeaveReason;

	[Token(Token = "0x4001183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CelestialObject mPreviewSelection;

	[Token(Token = "0x4001184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool mbTeleportHint;

	[Token(Token = "0x4001185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private PanelController mPanelController;

	[Token(Token = "0x6001594")]
	[Address(RVA = "0xC77E9C", Offset = "0xC77E9C", VA = "0xC77E9C")]
	public OrreryMenuState()
	{
	}

	[Token(Token = "0x6001595")]
	[Address(RVA = "0xC77EA4", Offset = "0xC77EA4", VA = "0xC77EA4", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6001596")]
	[Address(RVA = "0xC78130", Offset = "0xC78130", VA = "0xC78130")]
	private void Update()
	{
	}

	[Token(Token = "0x6001597")]
	[Address(RVA = "0xC78A00", Offset = "0xC78A00", VA = "0xC78A00")]
	private void OnItemSelected(PanelItemController.PanelItemType lSelected)
	{
	}

	[Token(Token = "0x6001598")]
	[Address(RVA = "0xC78AD0", Offset = "0xC78AD0", VA = "0xC78AD0", Slot = "5")]
	public override void OnLeave()
	{
	}
}
[Token(Token = "0x200033B")]
public class PlanetInfoState : BaseState
{
	[Token(Token = "0x200033C")]
	public enum LeaveReason
	{
		[Token(Token = "0x400119E")]
		UserUnselected,
		[Token(Token = "0x400119F")]
		TravellingTo,
		[Token(Token = "0x40011A0")]
		LaserTriggered,
		[Token(Token = "0x40011A1")]
		GoHome
	}

	[Token(Token = "0x200033D")]
	private enum PopState
	{
		[Token(Token = "0x40011A3")]
		None,
		[Token(Token = "0x40011A4")]
		Popin,
		[Token(Token = "0x40011A5")]
		Popout
	}

	[Token(Token = "0x200042E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2FCCC", Offset = "0xC2FCCC")]
	private sealed class <PopIn>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfPopSpeed>__0;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfScale>__0;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 <lScale>__0;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal PlanetInfoState $this;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x170004A0")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001AA4")]
			[Address(RVA = "0xC97DA4", Offset = "0xC97DA4", VA = "0xC97DA4", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004A1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001AA5")]
			[Address(RVA = "0xC97DAC", Offset = "0xC97DAC", VA = "0xC97DAC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001AA2")]
		[Address(RVA = "0xC976B8", Offset = "0xC976B8", VA = "0xC976B8")]
		[DebuggerHidden]
		public <PopIn>c__Iterator0()
		{
		}

		[Token(Token = "0x6001AA3")]
		[Address(RVA = "0xC976C8", Offset = "0xC976C8", VA = "0xC976C8", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AA6")]
		[Address(RVA = "0xC97DB4", Offset = "0xC97DB4", VA = "0xC97DB4", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001AA7")]
		[Address(RVA = "0xC97DC8", Offset = "0xC97DC8", VA = "0xC97DC8", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200042F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2FD2C", Offset = "0xC2FD2C")]
	private sealed class <PopOut>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfPopSpeed>__0;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfScale>__0;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 <lScale>__0;

		[Token(Token = "0x400175C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal PlanetInfoState $this;

		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x400175E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x170004A2")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001AAA")]
			[Address(RVA = "0xC984BC", Offset = "0xC984BC", VA = "0xC984BC", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004A3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001AAB")]
			[Address(RVA = "0xC984C4", Offset = "0xC984C4", VA = "0xC984C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0xC976C0", Offset = "0xC976C0", VA = "0xC976C0")]
		[DebuggerHidden]
		public <PopOut>c__Iterator1()
		{
		}

		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0xC97E4C", Offset = "0xC97E4C", VA = "0xC97E4C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0xC984CC", Offset = "0xC984CC", VA = "0xC984CC", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0xC984E0", Offset = "0xC984E0", VA = "0xC984E0", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x400118B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject mMenuAnchor;

	[Token(Token = "0x400118C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private CelestialLabel mLabel;

	[Token(Token = "0x400118D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CelestialObject mCelestialObject;

	[Token(Token = "0x400118E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private GameObject mTravelArrow;

	[Token(Token = "0x400118F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float mfTravelArrowOffset;

	[Token(Token = "0x4001190")]
	private const float kfPopInTime = 0.25f;

	[Token(Token = "0x4001191")]
	private const float kfPopOutTime = 0.25f;

	[Token(Token = "0x4001192")]
	private const float kfPlanetRotationSpeed = -3f;

	[Token(Token = "0x4001193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LeaveReason meLeaveReason;

	[Token(Token = "0x4001194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private CelestialBodyRenderable mPlanetRenderable;

	[Token(Token = "0x4001195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private GameObject mPlanetAnchor;

	[Token(Token = "0x4001196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float mfFinalPlanetScale;

	[Token(Token = "0x4001197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float mfPlanetScale;

	[Token(Token = "0x4001198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform mEcliptic;

	[Token(Token = "0x4001199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private GameObject mMessierPrefab;

	[Token(Token = "0x400119A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject mMessierZoomed;

	[Token(Token = "0x400119B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private PopState mePopState;

	[Token(Token = "0x400119C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ControlHintsState mControlHints;

	[Token(Token = "0x6001599")]
	[Address(RVA = "0xC93E54", Offset = "0xC93E54", VA = "0xC93E54")]
	public PlanetInfoState()
	{
	}

	[Token(Token = "0x600159A")]
	[Address(RVA = "0xC93E5C", Offset = "0xC93E5C", VA = "0xC93E5C")]
	private void Start()
	{
	}

	[Token(Token = "0x600159B")]
	[Address(RVA = "0xC94144", Offset = "0xC94144", VA = "0xC94144", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600159C")]
	[Address(RVA = "0xC941D4", Offset = "0xC941D4", VA = "0xC941D4")]
	public void OnEnter(CelestialObject lObject)
	{
	}

	[Token(Token = "0x600159D")]
	[Address(RVA = "0xC962A0", Offset = "0xC962A0", VA = "0xC962A0")]
	private void Update()
	{
	}

	[Token(Token = "0x600159E")]
	[Address(RVA = "0xC973EC", Offset = "0xC973EC", VA = "0xC973EC", Slot = "5")]
	public override void OnLeave()
	{
	}

	[Token(Token = "0x600159F")]
	[Address(RVA = "0xC95BF0", Offset = "0xC95BF0", VA = "0xC95BF0")]
	private void AddLabel(CelestialObject celestialObject, float priority, bool fadeAtEdges)
	{
	}

	[Token(Token = "0x60015A0")]
	[Address(RVA = "0xC953B0", Offset = "0xC953B0", VA = "0xC953B0")]
	private void GenerateGameObject()
	{
	}

	[Token(Token = "0x60015A1")]
	[Address(RVA = "0xC968D0", Offset = "0xC968D0", VA = "0xC968D0")]
	private void UpdatePlanetRenderable(float lfModScale)
	{
	}

	[Token(Token = "0x60015A2")]
	[Address(RVA = "0xC96220", Offset = "0xC96220", VA = "0xC96220")]
	[DebuggerHidden]
	public IEnumerator PopIn()
	{
		return null;
	}

	[Token(Token = "0x60015A3")]
	[Address(RVA = "0xC9736C", Offset = "0xC9736C", VA = "0xC9736C")]
	[DebuggerHidden]
	public IEnumerator PopOut()
	{
		return null;
	}
}
[Token(Token = "0x200033E")]
public class ShortcutMenuState : BaseState
{
	[Token(Token = "0x200033F")]
	public enum LeaveReason
	{
		[Token(Token = "0x40011AC")]
		None,
		[Token(Token = "0x40011AD")]
		Quit,
		[Token(Token = "0x40011AE")]
		PlanetSelected,
		[Token(Token = "0x40011AF")]
		GoHome
	}

	[Token(Token = "0x2000430")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2FDAC", Offset = "0xC2FDAC")]
	private sealed class <PopIn>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfPopSpeed>__0;

		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfScale>__0;

		[Token(Token = "0x4001762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 <lScale>__0;

		[Token(Token = "0x4001763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal ShortcutMenuState $this;

		[Token(Token = "0x4001764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x4001765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x170004A4")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001AB0")]
			[Address(RVA = "0xE09064", Offset = "0xE09064", VA = "0xE09064", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004A5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001AB1")]
			[Address(RVA = "0xE0906C", Offset = "0xE0906C", VA = "0xE0906C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0xE08DFC", Offset = "0xE08DFC", VA = "0xE08DFC")]
		[DebuggerHidden]
		public <PopIn>c__Iterator0()
		{
		}

		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0xE08E0C", Offset = "0xE08E0C", VA = "0xE08E0C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AB2")]
		[Address(RVA = "0xE09074", Offset = "0xE09074", VA = "0xE09074", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001AB3")]
		[Address(RVA = "0xE09088", Offset = "0xE09088", VA = "0xE09088", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000431")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2FE0C", Offset = "0xC2FE0C")]
	private sealed class <PopOut>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfPopSpeed>__0;

		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfScale>__0;

		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 <lScale>__0;

		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal ShortcutMenuState $this;

		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x170004A6")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001AB6")]
			[Address(RVA = "0xE09358", Offset = "0xE09358", VA = "0xE09358", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004A7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001AB7")]
			[Address(RVA = "0xE09360", Offset = "0xE09360", VA = "0xE09360", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001AB4")]
		[Address(RVA = "0xE08E04", Offset = "0xE08E04", VA = "0xE08E04")]
		[DebuggerHidden]
		public <PopOut>c__Iterator1()
		{
		}

		[Token(Token = "0x6001AB5")]
		[Address(RVA = "0xE0910C", Offset = "0xE0910C", VA = "0xE0910C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AB8")]
		[Address(RVA = "0xE09368", Offset = "0xE09368", VA = "0xE09368", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001AB9")]
		[Address(RVA = "0xE0937C", Offset = "0xE0937C", VA = "0xE0937C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40011A6")]
	private const float kfPopInTime = 0.25f;

	[Token(Token = "0x40011A7")]
	private const float kfPopOutTime = 0.25f;

	[Token(Token = "0x40011A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject mMenu;

	[Token(Token = "0x40011A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public LeaveReason meLeaveReason;

	[Token(Token = "0x40011AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ControlHintsState mControlHints;

	[Token(Token = "0x60015A4")]
	[Address(RVA = "0xE08370", Offset = "0xE08370", VA = "0xE08370")]
	public ShortcutMenuState()
	{
	}

	[Token(Token = "0x60015A5")]
	[Address(RVA = "0xE08378", Offset = "0xE08378", VA = "0xE08378")]
	private void Start()
	{
	}

	[Token(Token = "0x60015A6")]
	[Address(RVA = "0xE08494", Offset = "0xE08494", VA = "0xE08494", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60015A7")]
	[Address(RVA = "0xE088A8", Offset = "0xE088A8", VA = "0xE088A8")]
	private void Update()
	{
	}

	[Token(Token = "0x60015A8")]
	[Address(RVA = "0xE088AC", Offset = "0xE088AC", VA = "0xE088AC", Slot = "5")]
	public override void OnLeave()
	{
	}

	[Token(Token = "0x60015A9")]
	[Address(RVA = "0xE08970", Offset = "0xE08970", VA = "0xE08970")]
	private void OnMenuWillExit(int lSelectedValue)
	{
	}

	[Token(Token = "0x60015AA")]
	[Address(RVA = "0xE08A94", Offset = "0xE08A94", VA = "0xE08A94")]
	private void OnMenuItemSelected(int lSelectedValue)
	{
	}

	[Token(Token = "0x60015AB")]
	[Address(RVA = "0xE08828", Offset = "0xE08828", VA = "0xE08828")]
	[DebuggerHidden]
	public IEnumerator PopIn()
	{
		return null;
	}

	[Token(Token = "0x60015AC")]
	[Address(RVA = "0xE08A14", Offset = "0xE08A14", VA = "0xE08A14")]
	[DebuggerHidden]
	public IEnumerator PopOut()
	{
		return null;
	}
}
[Token(Token = "0x2000340")]
public class SurfaceDetailInfoState : BaseState
{
	[Token(Token = "0x40011B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject mMenuAnchor;

	[Token(Token = "0x40011B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private SurfaceDetail mCurrentSurfaceInfo;

	[Token(Token = "0x40011B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SurfaceLabel mLabel;

	[Token(Token = "0x40011B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private GameObject mTravelArrow;

	[Token(Token = "0x40011B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject mSurfaceImage;

	[Token(Token = "0x40011B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float mfTravelArrowOffset;

	[Token(Token = "0x40011B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool mbAllowTravel;

	[Token(Token = "0x40011B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private ControlHintsState mControlHints;

	[Token(Token = "0x40011B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool mbUnselected;

	[Token(Token = "0x40011B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool mbGoHome;

	[Token(Token = "0x60015AD")]
	[Address(RVA = "0xCFB388", Offset = "0xCFB388", VA = "0xCFB388")]
	public SurfaceDetailInfoState()
	{
	}

	[Token(Token = "0x60015AE")]
	[Address(RVA = "0xCFB390", Offset = "0xCFB390", VA = "0xCFB390")]
	private void Start()
	{
	}

	[Token(Token = "0x60015AF")]
	[Address(RVA = "0xCFB680", Offset = "0xCFB680", VA = "0xCFB680", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60015B0")]
	[Address(RVA = "0xCFB710", Offset = "0xCFB710", VA = "0xCFB710")]
	public void OnEnter(SurfaceDetail lSurfaceDetail)
	{
	}

	[Token(Token = "0x60015B1")]
	[Address(RVA = "0xCFBE88", Offset = "0xCFBE88", VA = "0xCFBE88")]
	private void Update()
	{
	}

	[Token(Token = "0x60015B2")]
	[Address(RVA = "0xCFC3C8", Offset = "0xCFC3C8", VA = "0xCFC3C8", Slot = "5")]
	public override void OnLeave()
	{
	}

	[Token(Token = "0x60015B3")]
	[Address(RVA = "0xCFBBB4", Offset = "0xCFBBB4", VA = "0xCFBBB4")]
	private void createLabel(SurfaceDetail surfaceDetail, float priority)
	{
	}
}
[Token(Token = "0x2000341")]
internal class SwapControllerState : OnDeviceUIState
{
	[Token(Token = "0x60015B4")]
	[Address(RVA = "0xCFD8CC", Offset = "0xCFD8CC", VA = "0xCFD8CC")]
	public SwapControllerState()
	{
	}

	[Token(Token = "0x60015B5")]
	[Address(RVA = "0xCFD8D4", Offset = "0xCFD8D4", VA = "0xCFD8D4", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60015B6")]
	[Address(RVA = "0xCFDA34", Offset = "0xCFDA34", VA = "0xCFDA34")]
	private void Update()
	{
	}

	[Token(Token = "0x60015B7")]
	[Address(RVA = "0xCFDB1C", Offset = "0xCFDB1C", VA = "0xCFDB1C", Slot = "6")]
	public override void StartLeave()
	{
	}

	[Token(Token = "0x60015B8")]
	[Address(RVA = "0xCFDB54", Offset = "0xCFDB54", VA = "0xCFDB54", Slot = "5")]
	public override void OnLeave()
	{
	}
}
[Token(Token = "0x2000342")]
public class TravelToState : OnDeviceUIState
{
	[Token(Token = "0x40011BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private CelestialObject mCurrentPlanet;

	[Token(Token = "0x60015B9")]
	[Address(RVA = "0xCB9750", Offset = "0xCB9750", VA = "0xCB9750")]
	public TravelToState()
	{
	}

	[Token(Token = "0x60015BA")]
	[Address(RVA = "0xCB9758", Offset = "0xCB9758", VA = "0xCB9758", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60015BB")]
	[Address(RVA = "0xCB9C9C", Offset = "0xCB9C9C", VA = "0xCB9C9C")]
	private void Update()
	{
	}

	[Token(Token = "0x60015BC")]
	[Address(RVA = "0xCB9E18", Offset = "0xCB9E18", VA = "0xCB9E18", Slot = "5")]
	public override void OnLeave()
	{
	}
}
[Token(Token = "0x2000343")]
internal class OrbitVignette : MonoBehaviour
{
	[Token(Token = "0x40011BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float mfAngularVelocityRatio;

	[Token(Token = "0x40011BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool mbIsActive;

	[Token(Token = "0x40011BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float mfDimFactor;

	[Token(Token = "0x40011BE")]
	private const float kfDimDownSpeed = 4f;

	[Token(Token = "0x40011BF")]
	private const float kfDimUpSpeed = 2f;

	[Token(Token = "0x60015BD")]
	[Address(RVA = "0xC70B8C", Offset = "0xC70B8C", VA = "0xC70B8C")]
	public OrbitVignette()
	{
	}

	[Token(Token = "0x60015BE")]
	[Address(RVA = "0xC70B94", Offset = "0xC70B94", VA = "0xC70B94")]
	private void Awake()
	{
	}

	[Token(Token = "0x60015BF")]
	[Address(RVA = "0xC70BAC", Offset = "0xC70BAC", VA = "0xC70BAC")]
	private void Update()
	{
	}

	[Token(Token = "0x60015C0")]
	[Address(RVA = "0xC70E7C", Offset = "0xC70E7C", VA = "0xC70E7C")]
	public void SetRatio(float lfRatio)
	{
	}
}
[Token(Token = "0x2000344")]
public class OverlayMenuState : BaseState
{
	[Token(Token = "0x40011C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject browsePrefab;

	[Token(Token = "0x40011C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject globalMenuPrefab;

	[Token(Token = "0x40011C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject mGlobalMenu;

	[Token(Token = "0x40011C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private GameObject mBrowseGameObject;

	[Token(Token = "0x40011C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MenuController overlayMenuController;

	[Token(Token = "0x60015C1")]
	[Address(RVA = "0xC7E63C", Offset = "0xC7E63C", VA = "0xC7E63C")]
	public OverlayMenuState()
	{
	}

	[Token(Token = "0x60015C2")]
	[Address(RVA = "0xC7E644", Offset = "0xC7E644", VA = "0xC7E644")]
	private void Start()
	{
	}

	[Token(Token = "0x60015C3")]
	[Address(RVA = "0xC7E648", Offset = "0xC7E648", VA = "0xC7E648")]
	private void instantiate()
	{
	}

	[Token(Token = "0x60015C4")]
	[Address(RVA = "0xC7E890", Offset = "0xC7E890", VA = "0xC7E890")]
	private void Update()
	{
	}

	[Token(Token = "0x60015C5")]
	[Address(RVA = "0xC7E894", Offset = "0xC7E894", VA = "0xC7E894", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60015C6")]
	[Address(RVA = "0xC7E898", Offset = "0xC7E898", VA = "0xC7E898", Slot = "5")]
	public override void OnLeave()
	{
	}

	[Token(Token = "0x60015C7")]
	[Address(RVA = "0xC7E92C", Offset = "0xC7E92C", VA = "0xC7E92C")]
	public void OnArrival()
	{
	}

	[Token(Token = "0x60015C8")]
	[Address(RVA = "0xC7E930", Offset = "0xC7E930", VA = "0xC7E930")]
	public void OnDeparture()
	{
	}

	[Token(Token = "0x60015C9")]
	[Address(RVA = "0xC7EB50", Offset = "0xC7EB50", VA = "0xC7EB50")]
	private void OnMenuItemSelected(ItemController.MenuItemType lSelected)
	{
	}

	[Token(Token = "0x60015CA")]
	[Address(RVA = "0xC7ED60", Offset = "0xC7ED60", VA = "0xC7ED60")]
	private void OnMenuFocusChange(bool lbHasFocus)
	{
	}

	[Token(Token = "0x60015CB")]
	[Address(RVA = "0xC7EA48", Offset = "0xC7EA48", VA = "0xC7EA48")]
	public void CloseSearch()
	{
	}
}
[Token(Token = "0x2000345")]
public class PlanetMenuState : BaseState
{
	[Token(Token = "0x40011C5")]
	private const float kfSurfaceOffset = 0.5f;

	[Token(Token = "0x40011C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Planet mPlanet;

	[Token(Token = "0x40011C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private GameObject mPlanetMenuPrefab;

	[Token(Token = "0x40011C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject mPlanetMenu;

	[Token(Token = "0x40011C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Transform mEcliptic;

	[Token(Token = "0x60015CC")]
	[Address(RVA = "0xC98E50", Offset = "0xC98E50", VA = "0xC98E50")]
	public PlanetMenuState()
	{
	}

	[Token(Token = "0x60015CD")]
	[Address(RVA = "0xC98E58", Offset = "0xC98E58", VA = "0xC98E58")]
	private void Start()
	{
	}

	[Token(Token = "0x60015CE")]
	[Address(RVA = "0xC98F38", Offset = "0xC98F38", VA = "0xC98F38", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60015CF")]
	[Address(RVA = "0xC9967C", Offset = "0xC9967C", VA = "0xC9967C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60015D0")]
	[Address(RVA = "0xC9971C", Offset = "0xC9971C", VA = "0xC9971C", Slot = "5")]
	public override void OnLeave()
	{
	}

	[Token(Token = "0x60015D1")]
	[Address(RVA = "0xC997C8", Offset = "0xC997C8", VA = "0xC997C8")]
	private void OnMenuItemSelected(ItemController.MenuItemType lSelected)
	{
	}

	[Token(Token = "0x60015D2")]
	[Address(RVA = "0xC991D8", Offset = "0xC991D8", VA = "0xC991D8")]
	private void SetPosition()
	{
	}
}
[Token(Token = "0x2000346")]
public class SingleOnDeviceState : BaseState
{
	[Token(Token = "0x2000347")]
	public enum State
	{
		[Token(Token = "0x40011DA")]
		Null,
		[Token(Token = "0x40011DB")]
		HumanScaleMenu,
		[Token(Token = "0x40011DC")]
		SelectionAndMenuBar,
		[Token(Token = "0x40011DD")]
		OrreryIntro,
		[Token(Token = "0x40011DE")]
		OrreryMenu,
		[Token(Token = "0x40011DF")]
		NavMenu,
		[Token(Token = "0x40011E0")]
		ShortcutMenu,
		[Token(Token = "0x40011E1")]
		SurfaceDetail,
		[Token(Token = "0x40011E2")]
		PlanetInfo,
		[Token(Token = "0x40011E3")]
		TravelTo
	}

	[Token(Token = "0x40011CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private PlanetInfoState mPlanetInfo;

	[Token(Token = "0x40011CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private SurfaceDetailInfoState mSurfaceDetailInfo;

	[Token(Token = "0x40011CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MenuBarState mMenuBar;

	[Token(Token = "0x40011CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private ShortcutMenuState mShortcutMenu;

	[Token(Token = "0x40011CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private NavigationMenuState mNavigationMenu;

	[Token(Token = "0x40011CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private TravelToState mTravelInfo;

	[Token(Token = "0x40011D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private HomeAndBackMenuState mHumanScaleMenu;

	[Token(Token = "0x40011D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private OrreryMenuState mOrreryMenu;

	[Token(Token = "0x40011D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SwapControllerState mSwapController;

	[Token(Token = "0x40011D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private LaserPointerComponent mLaserPointer;

	[Token(Token = "0x40011D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject mDaydreamPrefab;

	[Token(Token = "0x40011D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private State meState;

	[Token(Token = "0x40011D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool mbLaserWasOn;

	[Token(Token = "0x40011D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool mbTutorialRunningWhenDisconnected;

	[Token(Token = "0x40011D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	private bool mbWaitingForControllerFirstConnection;

	[Token(Token = "0x170003CC")]
	public State state
	{
		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xE10FAC", Offset = "0xE10FAC", VA = "0xE10FAC")]
		get
		{
			return default(State);
		}
	}

	[Token(Token = "0x170003CD")]
	public bool isLaserOn
	{
		[Token(Token = "0x60015DA")]
		[Address(RVA = "0xE13238", Offset = "0xE13238", VA = "0xE13238")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60015D3")]
	[Address(RVA = "0xE10FA4", Offset = "0xE10FA4", VA = "0xE10FA4")]
	public SingleOnDeviceState()
	{
	}

	[Token(Token = "0x60015D5")]
	[Address(RVA = "0xE10FB4", Offset = "0xE10FB4", VA = "0xE10FB4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60015D6")]
	[Address(RVA = "0xE116D4", Offset = "0xE116D4", VA = "0xE116D4", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60015D7")]
	[Address(RVA = "0xE11CC0", Offset = "0xE11CC0", VA = "0xE11CC0")]
	public void OnControllerConnected()
	{
	}

	[Token(Token = "0x60015D8")]
	[Address(RVA = "0xE12208", Offset = "0xE12208", VA = "0xE12208")]
	public void OnControllerDisconnected()
	{
	}

	[Token(Token = "0x60015D9")]
	[Address(RVA = "0xE1220C", Offset = "0xE1220C", VA = "0xE1220C")]
	private void Update()
	{
	}

	[Token(Token = "0x60015DB")]
	[Address(RVA = "0xE13240", Offset = "0xE13240", VA = "0xE13240")]
	public void OnDeparture()
	{
	}

	[Token(Token = "0x60015DC")]
	[Address(RVA = "0xE11E14", Offset = "0xE11E14", VA = "0xE11E14")]
	public void OnArrival()
	{
	}

	[Token(Token = "0x60015DD")]
	[Address(RVA = "0xE13370", Offset = "0xE13370", VA = "0xE13370", Slot = "5")]
	public override void OnLeave()
	{
	}

	[Token(Token = "0x60015DE")]
	[Address(RVA = "0xE1359C", Offset = "0xE1359C", VA = "0xE1359C")]
	public bool inPlanetPreviewMode()
	{
		return default(bool);
	}

	[Token(Token = "0x60015DF")]
	[Address(RVA = "0xE135A4", Offset = "0xE135A4", VA = "0xE135A4")]
	public bool inSurfaceDetailMode()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000348")]
internal class VrMessageBoxState : BaseState
{
	[Token(Token = "0x40011E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected GameObject mPrefab;

	[Token(Token = "0x40011E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	protected VrMessageBox mVrMessageBox;

	[Token(Token = "0x60015E0")]
	[Address(RVA = "0xD2B5B4", Offset = "0xD2B5B4", VA = "0xD2B5B4")]
	public VrMessageBoxState()
	{
	}

	[Token(Token = "0x60015E1")]
	[Address(RVA = "0xD2B5BC", Offset = "0xD2B5BC", VA = "0xD2B5BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60015E2")]
	[Address(RVA = "0xD2B634", Offset = "0xD2B634", VA = "0xD2B634", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60015E3")]
	[Address(RVA = "0xD2B6D0", Offset = "0xD2B6D0", VA = "0xD2B6D0")]
	private void Update()
	{
	}

	[Token(Token = "0x60015E4")]
	[Address(RVA = "0xD2B7B4", Offset = "0xD2B7B4", VA = "0xD2B7B4", Slot = "5")]
	public override void OnLeave()
	{
	}
}
[Token(Token = "0x2000349")]
public class WorldSpaceUIState : BaseState
{
	[Token(Token = "0x200034A")]
	public enum State
	{
		[Token(Token = "0x40011F0")]
		Null,
		[Token(Token = "0x40011F1")]
		HomeAndBackMenu,
		[Token(Token = "0x40011F2")]
		SelectionAndMenuBar,
		[Token(Token = "0x40011F3")]
		NavMenu,
		[Token(Token = "0x40011F4")]
		ShortcutMenu,
		[Token(Token = "0x40011F5")]
		SurfaceDetail,
		[Token(Token = "0x40011F6")]
		PlanetInfo,
		[Token(Token = "0x40011F7")]
		TravelTo
	}

	[Token(Token = "0x40011E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private PlanetInfoState mPlanetInfo;

	[Token(Token = "0x40011E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private SurfaceDetailInfoState mSurfaceDetailInfo;

	[Token(Token = "0x40011E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MenuBarState mMenuBar;

	[Token(Token = "0x40011E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private ShortcutMenuState mShortcutMenu;

	[Token(Token = "0x40011EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private NavigationMenuState mNavigationMenu;

	[Token(Token = "0x40011EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private TravelToState mTravelInfo;

	[Token(Token = "0x40011EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private HomeAndBackMenuState mHomeAndBackMenu;

	[Token(Token = "0x40011ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private GameObject mDaydreamPrefab;

	[Token(Token = "0x40011EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private State meState;

	[Token(Token = "0x170003CE")]
	public State state
	{
		[Token(Token = "0x60015E6")]
		[Address(RVA = "0xD2C724", Offset = "0xD2C724", VA = "0xD2C724")]
		get
		{
			return default(State);
		}
	}

	[Token(Token = "0x60015E5")]
	[Address(RVA = "0xD2C71C", Offset = "0xD2C71C", VA = "0xD2C71C")]
	public WorldSpaceUIState()
	{
	}

	[Token(Token = "0x60015E7")]
	[Address(RVA = "0xD2C72C", Offset = "0xD2C72C", VA = "0xD2C72C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60015E8")]
	[Address(RVA = "0xD2CA78", Offset = "0xD2CA78", VA = "0xD2CA78", Slot = "4")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x60015E9")]
	[Address(RVA = "0xD2CB20", Offset = "0xD2CB20", VA = "0xD2CB20")]
	private void Update()
	{
	}

	[Token(Token = "0x60015EA")]
	[Address(RVA = "0xD2D238", Offset = "0xD2D238", VA = "0xD2D238")]
	public void OnDeparture()
	{
	}

	[Token(Token = "0x60015EB")]
	[Address(RVA = "0xD2D2F8", Offset = "0xD2D2F8", VA = "0xD2D2F8")]
	public void OnArrival()
	{
	}

	[Token(Token = "0x60015EC")]
	[Address(RVA = "0xD2D658", Offset = "0xD2D658", VA = "0xD2D658", Slot = "5")]
	public override void OnLeave()
	{
	}

	[Token(Token = "0x60015ED")]
	[Address(RVA = "0xD2D7F0", Offset = "0xD2D7F0", VA = "0xD2D7F0")]
	public bool inPlanetPreviewMode()
	{
		return default(bool);
	}

	[Token(Token = "0x60015EE")]
	[Address(RVA = "0xD2D7F8", Offset = "0xD2D7F8", VA = "0xD2D7F8")]
	public bool inSurfaceDetailMode()
	{
		return default(bool);
	}
}
[Token(Token = "0x200034B")]
public class ErrorMessageHandler : MonoBehaviour
{
	[Token(Token = "0x60015EF")]
	[Address(RVA = "0x189DBC", Offset = "0x189DBC", VA = "0x189DBC")]
	public ErrorMessageHandler()
	{
	}

	[Token(Token = "0x60015F0")]
	[Address(RVA = "0x189DC4", Offset = "0x189DC4", VA = "0x189DC4")]
	private void Start()
	{
	}

	[Token(Token = "0x60015F1")]
	[Address(RVA = "0x189F28", Offset = "0x189F28", VA = "0x189F28")]
	private void Update()
	{
	}

	[Token(Token = "0x60015F2")]
	[Address(RVA = "0x18A044", Offset = "0x18A044", VA = "0x18A044")]
	public void OnErrorMessageClick()
	{
	}
}
[Token(Token = "0x200034C")]
public class LoadingScreenManager : MonoBehaviour
{
	[Token(Token = "0x2000432")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2FF4C", Offset = "0xC2FF4C")]
	private sealed class <LoadAsync>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string levelNum;

		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lastProgress>__0;

		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal LoadingScreenManager $this;

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x170004A8")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001ABC")]
			[Address(RVA = "0xC51860", Offset = "0xC51860", VA = "0xC51860", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004A9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001ABD")]
			[Address(RVA = "0xC51868", Offset = "0xC51868", VA = "0xC51868", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001ABA")]
		[Address(RVA = "0xC51010", Offset = "0xC51010", VA = "0xC51010")]
		[DebuggerHidden]
		public <LoadAsync>c__Iterator0()
		{
		}

		[Token(Token = "0x6001ABB")]
		[Address(RVA = "0xC51344", Offset = "0xC51344", VA = "0xC51344", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0xC51870", Offset = "0xC51870", VA = "0xC51870", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001ABF")]
		[Address(RVA = "0xC51884", Offset = "0xC51884", VA = "0xC51884", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40011F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xC2FE6C", Offset = "0xC2FE6C")]
	public Image loadingIcon;

	[Token(Token = "0x40011F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Image fadeOverlay;

	[Token(Token = "0x40011FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xC2FEA0", Offset = "0xC2FEA0")]
	public float waitOnLoadEnd;

	[Token(Token = "0x40011FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float fadeDuration;

	[Token(Token = "0x40011FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xC2FED4", Offset = "0xC2FED4")]
	public LoadSceneMode loadSceneMode;

	[Token(Token = "0x40011FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ThreadPriority loadThreadPriority;

	[Token(Token = "0x40011FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xC2FF08", Offset = "0xC2FF08")]
	public AudioListener audioListener;

	[Token(Token = "0x40011FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AsyncOperation operation;

	[Token(Token = "0x4001200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Scene currentScene;

	[Token(Token = "0x4001201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Stopwatch mStopWatch;

	[Token(Token = "0x4001202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string sceneToLoad;

	[Token(Token = "0x4001203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static string loadingSceneName;

	[Token(Token = "0x60015F3")]
	[Address(RVA = "0xC50ACC", Offset = "0xC50ACC", VA = "0xC50ACC")]
	public LoadingScreenManager()
	{
	}

	[Token(Token = "0x60015F4")]
	[Address(RVA = "0xC50AE0", Offset = "0xC50AE0", VA = "0xC50AE0")]
	public static void LoadScene(string levelNum)
	{
	}

	[Token(Token = "0x60015F5")]
	[Address(RVA = "0xC50BA4", Offset = "0xC50BA4", VA = "0xC50BA4")]
	private void Start()
	{
	}

	[Token(Token = "0x60015F6")]
	[Address(RVA = "0xC50F0C", Offset = "0xC50F0C", VA = "0xC50F0C")]
	private void Update()
	{
	}

	[Token(Token = "0x60015F7")]
	[Address(RVA = "0xC50E74", Offset = "0xC50E74", VA = "0xC50E74")]
	[DebuggerHidden]
	private IEnumerator LoadAsync(string levelNum)
	{
		return null;
	}

	[Token(Token = "0x60015F8")]
	[Address(RVA = "0xC51018", Offset = "0xC51018", VA = "0xC51018")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60015F9")]
	[Address(RVA = "0xC51168", Offset = "0xC51168", VA = "0xC51168")]
	private void StartOperation(string levelNum)
	{
	}

	[Token(Token = "0x60015FA")]
	[Address(RVA = "0xC511D0", Offset = "0xC511D0", VA = "0xC511D0")]
	private bool DoneLoading()
	{
		return default(bool);
	}

	[Token(Token = "0x60015FB")]
	[Address(RVA = "0xC51260", Offset = "0xC51260", VA = "0xC51260")]
	private void FadeIn()
	{
	}

	[Token(Token = "0x60015FC")]
	[Address(RVA = "0xC51264", Offset = "0xC51264", VA = "0xC51264")]
	private void FadeOut()
	{
	}

	[Token(Token = "0x60015FD")]
	[Address(RVA = "0xC512B8", Offset = "0xC512B8", VA = "0xC512B8")]
	private void ShowLoadingVisuals()
	{
	}

	[Token(Token = "0x60015FE")]
	[Address(RVA = "0xC512BC", Offset = "0xC512BC", VA = "0xC512BC")]
	private void ShowCompletionVisuals()
	{
	}
}
[Token(Token = "0x200034D")]
public class LocationManager : MonoBehaviour
{
	[Token(Token = "0x200034E")]
	public enum LocationStatus
	{
		[Token(Token = "0x400120F")]
		Invalid,
		[Token(Token = "0x4001210")]
		Valid_GPS,
		[Token(Token = "0x4001211")]
		Valid_IPLookup,
		[Token(Token = "0x4001212")]
		Valid_UserEntered,
		[Token(Token = "0x4001213")]
		Valid_Cached
	}

	[Token(Token = "0x200034F")]
	private class LocationAnimator
	{
		[Token(Token = "0x4001214")]
		private const float TRANSITION_DURATION = 0.4f;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private float mfTransitionStartTime;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private GeoCoords mGeoCoordsCache;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private GeoCoords mGeoCoordsTarget;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private GeoCoords mGeoCoordsAnimated;

		[Token(Token = "0x170003D5")]
		public GeoCoords geocoords
		{
			[Token(Token = "0x6001614")]
			[Address(RVA = "0xC52C2C", Offset = "0xC52C2C", VA = "0xC52C2C")]
			get
			{
				return default(GeoCoords);
			}
		}

		[Token(Token = "0x6001613")]
		[Address(RVA = "0xC52B74", Offset = "0xC52B74", VA = "0xC52B74")]
		public LocationAnimator()
		{
		}

		[Token(Token = "0x6001615")]
		[Address(RVA = "0xC53FD8", Offset = "0xC53FD8", VA = "0xC53FD8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001616")]
		[Address(RVA = "0xC53B44", Offset = "0xC53B44", VA = "0xC53B44")]
		public void Update()
		{
		}
	}

	[Token(Token = "0x2000433")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC2FFBC", Offset = "0xC2FFBC")]
	private sealed class <getLocationFromGPS>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal bool <lbSuccess>__0;

		[Token(Token = "0x4001775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal WWW <lIPresponse>__1;

		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal bool animated;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal LocationManager $this;

		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal bool $disposing;

		[Token(Token = "0x400177A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int $PC;

		[Token(Token = "0x170004AA")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001AC2")]
			[Address(RVA = "0xC5488C", Offset = "0xC5488C", VA = "0xC5488C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004AB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001AC3")]
			[Address(RVA = "0xC54894", Offset = "0xC54894", VA = "0xC54894", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001AC0")]
		[Address(RVA = "0xC53474", Offset = "0xC53474", VA = "0xC53474")]
		[DebuggerHidden]
		public <getLocationFromGPS>c__Iterator0()
		{
		}

		[Token(Token = "0x6001AC1")]
		[Address(RVA = "0xC541B0", Offset = "0xC541B0", VA = "0xC541B0", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AC4")]
		[Address(RVA = "0xC5489C", Offset = "0xC5489C", VA = "0xC5489C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001AC5")]
		[Address(RVA = "0xC548B0", Offset = "0xC548B0", VA = "0xC548B0", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4001204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LocationStatus seLocationStatus;

	[Token(Token = "0x4001205")]
	private const int TIME_OUT = 10;

	[Token(Token = "0x4001206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool sbValidUserLocation;

	[Token(Token = "0x4001207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
	private static bool sbUseModeCoordinates;

	[Token(Token = "0x4001208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
	private static bool sbUserEnteredLocation;

	[Token(Token = "0x4001209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static GeoCoords sUserLocationCoordinates;

	[Token(Token = "0x400120A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static GeoCoords sModeLocationCoordinates;

	[Token(Token = "0x400120B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static LocationAnimator sLocationAnimator;

	[Token(Token = "0x400120C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private static bool mbIsUpdating;

	[Token(Token = "0x400120D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static LocationManager sInstance;

	[Token(Token = "0x170003CF")]
	public static GeoCoords Geocoords
	{
		[Token(Token = "0x6001602")]
		[Address(RVA = "0xC52B84", Offset = "0xC52B84", VA = "0xC52B84")]
		get
		{
			return default(GeoCoords);
		}
	}

	[Token(Token = "0x170003D0")]
	public static bool validUserLocation
	{
		[Token(Token = "0x6001603")]
		[Address(RVA = "0xC52C40", Offset = "0xC52C40", VA = "0xC52C40")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003D1")]
	public static GeoCoords geocoordsUser
	{
		[Token(Token = "0x6001604")]
		[Address(RVA = "0xC52CCC", Offset = "0xC52CCC", VA = "0xC52CCC")]
		get
		{
			return default(GeoCoords);
		}
	}

	[Token(Token = "0x170003D2")]
	public static LocationStatus locationStatus
	{
		[Token(Token = "0x6001605")]
		[Address(RVA = "0xC52D68", Offset = "0xC52D68", VA = "0xC52D68")]
		get
		{
			return default(LocationStatus);
		}
	}

	[Token(Token = "0x170003D3")]
	public static bool isUpdating
	{
		[Token(Token = "0x6001606")]
		[Address(RVA = "0xC52DF4", Offset = "0xC52DF4", VA = "0xC52DF4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003D4")]
	private static GeoCoords geocoordsRaw
	{
		[Token(Token = "0x600160E")]
		[Address(RVA = "0xC53DDC", Offset = "0xC53DDC", VA = "0xC53DDC")]
		get
		{
			return default(GeoCoords);
		}
	}

	[Token(Token = "0x6001600")]
	[Address(RVA = "0xC52AF4", Offset = "0xC52AF4", VA = "0xC52AF4")]
	static LocationManager()
	{
	}

	[Token(Token = "0x6001601")]
	[Address(RVA = "0xC52B7C", Offset = "0xC52B7C", VA = "0xC52B7C")]
	public LocationManager()
	{
	}

	[Token(Token = "0x6001607")]
	[Address(RVA = "0xC52E80", Offset = "0xC52E80", VA = "0xC52E80")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001608")]
	[Address(RVA = "0xC52F10", Offset = "0xC52F10", VA = "0xC52F10")]
	private void Start()
	{
	}

	[Token(Token = "0x6001609")]
	[Address(RVA = "0xC533DC", Offset = "0xC533DC", VA = "0xC533DC")]
	[DebuggerHidden]
	private IEnumerator getLocationFromGPS(bool animated)
	{
		return null;
	}

	[Token(Token = "0x600160A")]
	[Address(RVA = "0xC5347C", Offset = "0xC5347C", VA = "0xC5347C")]
	private static void storeLocationInPreferences(GeoCoords location)
	{
	}

	[Token(Token = "0x600160B")]
	[Address(RVA = "0xC53570", Offset = "0xC53570", VA = "0xC53570")]
	private void failedToDetermineLocation()
	{
	}

	[Token(Token = "0x600160C")]
	[Address(RVA = "0xC53754", Offset = "0xC53754", VA = "0xC53754")]
	private void setUserLocationAuto(GeoCoords location)
	{
	}

	[Token(Token = "0x600160D")]
	[Address(RVA = "0xC53AA4", Offset = "0xC53AA4", VA = "0xC53AA4")]
	private void Update()
	{
	}

	[Token(Token = "0x600160F")]
	[Address(RVA = "0xC53F04", Offset = "0xC53F04", VA = "0xC53F04")]
	public static void UpdateCoordinates(bool animated = false)
	{
	}

	[Token(Token = "0x6001610")]
	[Address(RVA = "0xC4CE3C", Offset = "0xC4CE3C", VA = "0xC4CE3C")]
	public static void UseModeLocation(GeoCoords geocoords)
	{
	}

	[Token(Token = "0x6001611")]
	[Address(RVA = "0xC4DEA4", Offset = "0xC4DEA4", VA = "0xC4DEA4")]
	public static void UseUserLocation(bool animated = false)
	{
	}

	[Token(Token = "0x6001612")]
	[Address(RVA = "0xC5407C", Offset = "0xC5407C", VA = "0xC5407C")]
	public static void UserEnteredCoordinates(GeoCoords geocoords, bool animated = false)
	{
	}
}
[Token(Token = "0x2000350")]
public class OrientationManager : MonoBehaviour
{
	[Token(Token = "0x4001219")]
	private const float HEADING_DELTA_THRESHOLD = 30f;

	[Token(Token = "0x400121A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float mfCompassHeading;

	[Token(Token = "0x400121B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float miTrackingCount;

	[Token(Token = "0x400121C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private GameObject mCameraRoot;

	[Token(Token = "0x400121D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float mfRotationDeltaCache;

	[Token(Token = "0x400121E")]
	private const int HEADINGS_QUEUE_SIZE = 16;

	[Token(Token = "0x400121F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Queue<float> maHeadings;

	[Token(Token = "0x4001220")]
	private const int HEADINGS_OVER_THRESHOLD_DELAY = 32;

	[Token(Token = "0x4001221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int miHeadingsOverThresholdCount;

	[Token(Token = "0x6001617")]
	[Address(RVA = "0xC71004", Offset = "0xC71004", VA = "0xC71004")]
	public OrientationManager()
	{
	}

	[Token(Token = "0x6001618")]
	[Address(RVA = "0xC71094", Offset = "0xC71094", VA = "0xC71094")]
	private void Start()
	{
	}

	[Token(Token = "0x6001619")]
	[Address(RVA = "0xC71100", Offset = "0xC71100", VA = "0xC71100")]
	private void Update()
	{
	}

	[Token(Token = "0x600161A")]
	[Address(RVA = "0xC713CC", Offset = "0xC713CC", VA = "0xC713CC")]
	private void DebugTrackingAcquired()
	{
	}
}
[Token(Token = "0x2000351")]
public enum PreferenceNames
{
	[Token(Token = "0x4001223")]
	GridSphereEnabled,
	[Token(Token = "0x4001224")]
	NightModeEnabled,
	[Token(Token = "0x4001225")]
	SurfaceDetailsEnabled,
	[Token(Token = "0x4001226")]
	TutorialCompleted,
	[Token(Token = "0x4001227")]
	MITControlsSeen,
	[Token(Token = "0x4001228")]
	UserEnteredGPSCoordinates,
	[Token(Token = "0x4001229")]
	CachedGPSCoordinates
}
[Token(Token = "0x2000352")]
public struct Preference
{
	[Token(Token = "0x400122A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private PreferenceNames msName;

	[Token(Token = "0x400122B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private System.Type mType;

	[Token(Token = "0x170003D6")]
	public PreferenceNames name
	{
		[Token(Token = "0x600161C")]
		[Address(RVA = "0xE5C0A8", Offset = "0xE5C0A8", VA = "0xE5C0A8")]
		get
		{
			return default(PreferenceNames);
		}
	}

	[Token(Token = "0x170003D7")]
	public System.Type type
	{
		[Token(Token = "0x600161D")]
		[Address(RVA = "0xE5C0B8", Offset = "0xE5C0B8", VA = "0xE5C0B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600161B")]
	[Address(RVA = "0xE5C094", Offset = "0xE5C094", VA = "0xE5C094")]
	public Preference(PreferenceNames name, System.Type type)
	{
	}
}
[Token(Token = "0x2000353")]
public class PreferencesManager : MonoBehaviour
{
	[Token(Token = "0x400122C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly IList<Preference> saPreferences;

	[Token(Token = "0x400122D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Dictionary<PreferenceNames, System.Type> saPreferenceDictionary;

	[Token(Token = "0x600161E")]
	[Address(RVA = "0xDEF264", Offset = "0xDEF264", VA = "0xDEF264")]
	public PreferencesManager()
	{
	}

	[Token(Token = "0x600161F")]
	[Address(RVA = "0xDEF26C", Offset = "0xDEF26C", VA = "0xDEF26C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001620")]
	[Address(RVA = "0xDEF658", Offset = "0xDEF658", VA = "0xDEF658")]
	private void Start()
	{
	}

	[Token(Token = "0x6001621")]
	[Address(RVA = "0xDEF76C", Offset = "0xDEF76C", VA = "0xDEF76C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001622")]
	[Address(RVA = "0xDEF6D0", Offset = "0xDEF6D0", VA = "0xDEF6D0")]
	public static void Implement()
	{
	}

	[Token(Token = "0x6001623")]
	[Address(RVA = "0xDEF914", Offset = "0xDEF914", VA = "0xDEF914")]
	private static void checkPreferenceTypeIsValid(PreferenceNames preference, System.Type type)
	{
	}

	[Token(Token = "0x6001624")]
	[Address(RVA = "0xDEF918", Offset = "0xDEF918", VA = "0xDEF918")]
	public static void Toggle(PreferenceNames preference)
	{
	}

	[Token(Token = "0x6001625")]
	[Address(RVA = "0xDEFA94", Offset = "0xDEFA94", VA = "0xDEFA94")]
	public static void SetBool(PreferenceNames preference, bool value)
	{
	}

	[Token(Token = "0x6001626")]
	[Address(RVA = "0xDEF770", Offset = "0xDEF770", VA = "0xDEF770")]
	public static bool GetBool(PreferenceNames preference)
	{
		return default(bool);
	}

	[Token(Token = "0x6001627")]
	[Address(RVA = "0xDEFC10", Offset = "0xDEFC10", VA = "0xDEFC10")]
	public static void SetString(PreferenceNames preference, string value)
	{
	}

	[Token(Token = "0x6001628")]
	[Address(RVA = "0xDEFD60", Offset = "0xDEFD60", VA = "0xDEFD60")]
	public static string GetString(PreferenceNames preference)
	{
		return null;
	}

	[Token(Token = "0x6001629")]
	[Address(RVA = "0xDEFE98", Offset = "0xDEFE98", VA = "0xDEFE98")]
	public static IList<Preference> GetPreferences()
	{
		return null;
	}
}
[Token(Token = "0x2000354")]
public class PSVRManager : MonoBehaviour
{
	[Token(Token = "0x600162B")]
	[Address(RVA = "0xDF02D0", Offset = "0xDF02D0", VA = "0xDF02D0")]
	public PSVRManager()
	{
	}
}
[Token(Token = "0x2000355")]
public class StateManager : MonoBehaviour
{
	[Token(Token = "0x2000356")]
	public enum AppState
	{
		[Token(Token = "0x400124E")]
		LaunchRoom,
		[Token(Token = "0x400124F")]
		MomentInTime,
		[Token(Token = "0x4001250")]
		SkyView,
		[Token(Token = "0x4001251")]
		ExploringSystem,
		[Token(Token = "0x4001252")]
		Orrery,
		[Token(Token = "0x4001253")]
		ExploringPlanet,
		[Token(Token = "0x4001254")]
		Flying,
		[Token(Token = "0x4001255")]
		TourMode,
		[Token(Token = "0x4001256")]
		ActionMenu,
		[Token(Token = "0x4001257")]
		SettingsMenu,
		[Token(Token = "0x4001258")]
		NoState
	}

	[Token(Token = "0x2000357")]
	internal class Interactivity
	{
		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool mbEnabled;

		[Token(Token = "0x170003F1")]
		internal bool enabled
		{
			[Token(Token = "0x600166A")]
			[Address(RVA = "0xCF557C", Offset = "0xCF557C", VA = "0xCF557C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600166B")]
			[Address(RVA = "0xCF26BC", Offset = "0xCF26BC", VA = "0xCF26BC")]
			set
			{
			}
		}

		[Token(Token = "0x6001669")]
		[Address(RVA = "0xCF26B4", Offset = "0xCF26B4", VA = "0xCF26B4")]
		public Interactivity()
		{
		}
	}

	[Token(Token = "0x400122E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AppState seAppState;

	[Token(Token = "0x400122F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static AppState seCachedState;

	[Token(Token = "0x4001230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static AppState seNextAppState;

	[Token(Token = "0x4001231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static Planet sPreviousPlanet;

	[Token(Token = "0x4001232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Planet sCurrentPlanet;

	[Token(Token = "0x4001233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static StateManager sInstance;

	[Token(Token = "0x4001234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Planet sDestinationPlanet;

	[Token(Token = "0x4001235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private static Bookmark sSkyViewBookmark;

	[Token(Token = "0x4001236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Bookmark sPreTourBookmark;

	[Token(Token = "0x4001237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static Bookmark sExploreBookmark;

	[Token(Token = "0x4001238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static bool sbIsNavigatingBack;

	[Token(Token = "0x4001239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Interactivity mInteractivity;

	[Token(Token = "0x400123A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public SpeedStreaks speedStreaks;

	[Token(Token = "0x400123B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private PlanetMenuState mPlanetMenuState;

	[Token(Token = "0x400123C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool mbInPlanetMenu;

	[Token(Token = "0x400123D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private FadeTransitionState mFadeTransition;

	[Token(Token = "0x400123E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private DualOnDeviceState mDualDeviceState;

	[Token(Token = "0x400123F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private SingleOnDeviceState mSingleOnDeviceState;

	[Token(Token = "0x4001240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private WorldSpaceUIState mWorldSpaceState;

	[Token(Token = "0x4001241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private LaunchRoomState mLaunchRoom;

	[Token(Token = "0x4001242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<AppStateBase> maAppStates;

	[Token(Token = "0x4001243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private AppStateBase mActiveAppState;

	[Token(Token = "0x4001244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OverlayMenuState mOverlayMenuState;

	[Token(Token = "0x4001245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private static bool _gbAutoTestFlying;

	[Token(Token = "0x4001246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	private static bool _gbRestartingTutorial;

	[Token(Token = "0x4001247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	private static bool _sbStraightToPlanet;

	[Token(Token = "0x4001248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private static CelestialObject mTransitionFlyToObject;

	[Token(Token = "0x4001249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC3001C", Offset = "0xC3001C")]
	private static Action <>f__mg$cache0;

	[Token(Token = "0x400124A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC3002C", Offset = "0xC3002C")]
	private static Action <>f__mg$cache1;

	[Token(Token = "0x400124B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC3003C", Offset = "0xC3003C")]
	private static Action <>f__mg$cache2;

	[Token(Token = "0x400124C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC3004C", Offset = "0xC3004C")]
	private static Action <>f__mg$cache3;

	[Token(Token = "0x170003D8")]
	public static AppState state
	{
		[Token(Token = "0x600162D")]
		[Address(RVA = "0xCE2174", Offset = "0xCE2174", VA = "0xCE2174")]
		get
		{
			return default(AppState);
		}
	}

	[Token(Token = "0x170003D9")]
	public static AppState cachedState
	{
		[Token(Token = "0x600162E")]
		[Address(RVA = "0xCEFAFC", Offset = "0xCEFAFC", VA = "0xCEFAFC")]
		get
		{
			return default(AppState);
		}
	}

	[Token(Token = "0x170003DA")]
	public static AppState nextState
	{
		[Token(Token = "0x600162F")]
		[Address(RVA = "0xCEFB88", Offset = "0xCEFB88", VA = "0xCEFB88")]
		get
		{
			return default(AppState);
		}
	}

	[Token(Token = "0x170003DB")]
	public static Planet currentPlanet
	{
		[Token(Token = "0x6001630")]
		[Address(RVA = "0xCEFC14", Offset = "0xCEFC14", VA = "0xCEFC14")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001631")]
		[Address(RVA = "0xCEFCA0", Offset = "0xCEFCA0", VA = "0xCEFCA0")]
		set
		{
		}
	}

	[Token(Token = "0x170003DC")]
	public static Planet destinationPlanet
	{
		[Token(Token = "0x6001632")]
		[Address(RVA = "0xCF00E8", Offset = "0xCF00E8", VA = "0xCF00E8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003DD")]
	public static bool isScreenFading
	{
		[Token(Token = "0x6001633")]
		[Address(RVA = "0xCF0174", Offset = "0xCF0174", VA = "0xCF0174")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003DE")]
	public static bool isSelectionAllowed
	{
		[Token(Token = "0x6001634")]
		[Address(RVA = "0xCF0228", Offset = "0xCF0228", VA = "0xCF0228")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003DF")]
	public static bool isExploringInSpace
	{
		[Token(Token = "0x6001635")]
		[Address(RVA = "0xCF04E8", Offset = "0xCF04E8", VA = "0xCF04E8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003E0")]
	public static bool isOnEarth
	{
		[Token(Token = "0x6001636")]
		[Address(RVA = "0xCEF5E4", Offset = "0xCEF5E4", VA = "0xCEF5E4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003E1")]
	public static bool isOnMoon
	{
		[Token(Token = "0x6001637")]
		[Address(RVA = "0xCF0600", Offset = "0xCF0600", VA = "0xCF0600")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003E2")]
	public static bool isLeavingEarth
	{
		[Token(Token = "0x6001638")]
		[Address(RVA = "0xCF06F4", Offset = "0xCF06F4", VA = "0xCF06F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003E3")]
	public static bool isFlyingToSolarSystemView
	{
		[Token(Token = "0x6001639")]
		[Address(RVA = "0xCF0808", Offset = "0xCF0808", VA = "0xCF0808")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003E4")]
	public static bool isLaserOn
	{
		[Token(Token = "0x600163A")]
		[Address(RVA = "0xCF08FC", Offset = "0xCF08FC", VA = "0xCF08FC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003E5")]
	public static Planet previousPlanet
	{
		[Token(Token = "0x600163B")]
		[Address(RVA = "0xCF0A58", Offset = "0xCF0A58", VA = "0xCF0A58")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003E6")]
	public static bool isNavigatingBack
	{
		[Token(Token = "0x600163C")]
		[Address(RVA = "0xCF0AE4", Offset = "0xCF0AE4", VA = "0xCF0AE4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003E7")]
	public static AppState nextAppState
	{
		[Token(Token = "0x600163D")]
		[Address(RVA = "0xCF0B70", Offset = "0xCF0B70", VA = "0xCF0B70")]
		get
		{
			return default(AppState);
		}
	}

	[Token(Token = "0x170003E8")]
	public static bool isLaunchRoomActive
	{
		[Token(Token = "0x6001640")]
		[Address(RVA = "0xCF10D0", Offset = "0xCF10D0", VA = "0xCF10D0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003E9")]
	public static bool isLaunchRoomInteractive
	{
		[Token(Token = "0x6001641")]
		[Address(RVA = "0xCF16C8", Offset = "0xCF16C8", VA = "0xCF16C8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003EA")]
	public static bool isMomentInTimeActive
	{
		[Token(Token = "0x6001642")]
		[Address(RVA = "0xCF17FC", Offset = "0xCF17FC", VA = "0xCF17FC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003EB")]
	public static bool isOrreryActive
	{
		[Token(Token = "0x6001643")]
		[Address(RVA = "0xCF18DC", Offset = "0xCF18DC", VA = "0xCF18DC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003EC")]
	public static bool isInteractive
	{
		[Token(Token = "0x6001651")]
		[Address(RVA = "0xCF03EC", Offset = "0xCF03EC", VA = "0xCF03EC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003ED")]
	public static bool isPlanetMenuActive
	{
		[Token(Token = "0x6001655")]
		[Address(RVA = "0xCF6064", Offset = "0xCF6064", VA = "0xCF6064")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003EE")]
	public static bool isInOrbitMode
	{
		[Token(Token = "0x6001656")]
		[Address(RVA = "0xCF6100", Offset = "0xCF6100", VA = "0xCF6100")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003EF")]
	public static bool isInPlanetPreviewMode
	{
		[Token(Token = "0x6001657")]
		[Address(RVA = "0xCF61B4", Offset = "0xCF61B4", VA = "0xCF61B4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003F0")]
	public static bool isInSurfacePreviewMode
	{
		[Token(Token = "0x6001658")]
		[Address(RVA = "0xCF6278", Offset = "0xCF6278", VA = "0xCF6278")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600162C")]
	[Address(RVA = "0xCEFAF4", Offset = "0xCEFAF4", VA = "0xCEFAF4")]
	public StateManager()
	{
	}

	[Token(Token = "0x600163E")]
	[Address(RVA = "0xCF0C24", Offset = "0xCF0C24", VA = "0xCF0C24")]
	public static void OnControllerConnected()
	{
	}

	[Token(Token = "0x600163F")]
	[Address(RVA = "0xCF15D4", Offset = "0xCF15D4", VA = "0xCF15D4")]
	public static void OnControllerDisconnected()
	{
	}

	[Token(Token = "0x6001644")]
	[Address(RVA = "0xCF19BC", Offset = "0xCF19BC", VA = "0xCF19BC")]
	public static void SetSkyViewState(Planets.Names lPlanet = Planets.Names.Earth)
	{
	}

	[Token(Token = "0x6001645")]
	[Address(RVA = "0xCF1ADC", Offset = "0xCF1ADC", VA = "0xCF1ADC")]
	public static void SetStateAndPlanet(AppState leState, Planets.Names lPlanet)
	{
	}

	[Token(Token = "0x6001646")]
	[Address(RVA = "0xCF1D6C", Offset = "0xCF1D6C", VA = "0xCF1D6C")]
	public static void SkipFlying()
	{
	}

	[Token(Token = "0x6001647")]
	[Address(RVA = "0xCF1F60", Offset = "0xCF1F60", VA = "0xCF1F60")]
	private static void SkipFlyingCallback()
	{
	}

	[Token(Token = "0x6001648")]
	[Address(RVA = "0xCF1FE0", Offset = "0xCF1FE0", VA = "0xCF1FE0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001649")]
	[Address(RVA = "0xCF27F0", Offset = "0xCF27F0", VA = "0xCF27F0")]
	public static void ShowDesktopSearchButton()
	{
	}

	[Token(Token = "0x600164A")]
	[Address(RVA = "0xCF2BF0", Offset = "0xCF2BF0", VA = "0xCF2BF0")]
	public static void HideDesktopSearchButton()
	{
	}

	[Token(Token = "0x600164B")]
	[Address(RVA = "0xCF2D30", Offset = "0xCF2D30", VA = "0xCF2D30")]
	public static void RepositionAtEarth()
	{
	}

	[Token(Token = "0x600164C")]
	[Address(RVA = "0xCF2F28", Offset = "0xCF2F28", VA = "0xCF2F28")]
	public static void AutoTestFlyToObject(CelestialObject flyToObject)
	{
	}

	[Token(Token = "0x600164D")]
	[Address(RVA = "0xCF5264", Offset = "0xCF5264", VA = "0xCF5264")]
	private static void RepositionAtEarthCallback()
	{
	}

	[Token(Token = "0x600164E")]
	[Address(RVA = "0xCF5368", Offset = "0xCF5368", VA = "0xCF5368")]
	public static void ShowNavigationMenu()
	{
	}

	[Token(Token = "0x600164F")]
	[Address(RVA = "0xCF1184", Offset = "0xCF1184", VA = "0xCF1184")]
	public static void ShowOnDeviceMenus()
	{
	}

	[Token(Token = "0x6001650")]
	[Address(RVA = "0xCF53E8", Offset = "0xCF53E8", VA = "0xCF53E8")]
	public static void SwapHands()
	{
	}

	[Token(Token = "0x6001652")]
	[Address(RVA = "0xCF55E0", Offset = "0xCF55E0", VA = "0xCF55E0")]
	public static void setInteractive(bool lbInteractive)
	{
	}

	[Token(Token = "0x6001653")]
	[Address(RVA = "0xCF5694", Offset = "0xCF5694", VA = "0xCF5694")]
	private void Update()
	{
	}

	[Token(Token = "0x6001654")]
	[Address(RVA = "0xCF6060", Offset = "0xCF6060", VA = "0xCF6060")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6001659")]
	[Address(RVA = "0xCF63EC", Offset = "0xCF63EC", VA = "0xCF63EC")]
	public static SingleOnDeviceState.State GetDaydreamOnDeviceState()
	{
		return default(SingleOnDeviceState.State);
	}

	[Token(Token = "0x600165A")]
	[Address(RVA = "0xCF64A0", Offset = "0xCF64A0", VA = "0xCF64A0")]
	public static void GoHome()
	{
	}

	[Token(Token = "0x600165B")]
	[Address(RVA = "0xCF65A4", Offset = "0xCF65A4", VA = "0xCF65A4")]
	private static void TransitionToSkyView()
	{
	}

	[Token(Token = "0x600165C")]
	[Address(RVA = "0xCF6694", Offset = "0xCF6694", VA = "0xCF6694")]
	private static void TransitionFromSkyView()
	{
	}

	[Token(Token = "0x600165D")]
	[Address(RVA = "0xCF6B4C", Offset = "0xCF6B4C", VA = "0xCF6B4C")]
	private static void TransitionWithStateSwitch()
	{
	}

	[Token(Token = "0x600165E")]
	[Address(RVA = "0xCF6D54", Offset = "0xCF6D54", VA = "0xCF6D54")]
	private static void TransitionFromLaunchRoom()
	{
	}

	[Token(Token = "0x600165F")]
	[Address(RVA = "0xCF6E8C", Offset = "0xCF6E8C", VA = "0xCF6E8C")]
	public static Planet GetExploreBookmark(out bool lbWasSystem)
	{
		return null;
	}

	[Token(Token = "0x6001660")]
	[Address(RVA = "0xCF7064", Offset = "0xCF7064", VA = "0xCF7064")]
	public static void NavigateBack()
	{
	}

	[Token(Token = "0x6001661")]
	[Address(RVA = "0xCE1A08", Offset = "0xCE1A08", VA = "0xCE1A08")]
	public static void PerformActionOnObject(SelectableObjectActions action, CelestialObject selectableObject, bool lbStraightToPlanet = false)
	{
	}

	[Token(Token = "0x6001662")]
	[Address(RVA = "0xCF74F8", Offset = "0xCF74F8", VA = "0xCF74F8")]
	public static void FlyToObject(CelestialObject flyToObject, bool isNavigatingBack = false)
	{
	}

	[Token(Token = "0x6001663")]
	[Address(RVA = "0xCF778C", Offset = "0xCF778C", VA = "0xCF778C")]
	public static void TransitionFromSkyViewToFlyTo()
	{
	}

	[Token(Token = "0x6001664")]
	[Address(RVA = "0xCF790C", Offset = "0xCF790C", VA = "0xCF790C")]
	public static void PlayTour(Tours tour)
	{
	}

	[Token(Token = "0x6001665")]
	[Address(RVA = "0xCF79A4", Offset = "0xCF79A4", VA = "0xCF79A4")]
	public static void SetStateFromBookmark(Bookmark lBookmark)
	{
	}

	[Token(Token = "0x6001666")]
	[Address(RVA = "0xCF2FF4", Offset = "0xCF2FF4", VA = "0xCF2FF4")]
	private static void setState(AppState newState, CelestialObject flyToObject, Tours tourToPlay, bool isNavigatingBack = false)
	{
	}

	[Token(Token = "0x6001667")]
	[Address(RVA = "0xCF7ED0", Offset = "0xCF7ED0", VA = "0xCF7ED0")]
	private static void enableSkyViewComponents(bool enable, float duration = 0f)
	{
	}
}
[Token(Token = "0x2000358")]
public enum Tours
{
	[Token(Token = "0x400125B")]
	SolarSystem,
	[Token(Token = "0x400125C")]
	Mercury,
	[Token(Token = "0x400125D")]
	Venus,
	[Token(Token = "0x400125E")]
	Earth,
	[Token(Token = "0x400125F")]
	Mars,
	[Token(Token = "0x4001260")]
	Jupiter,
	[Token(Token = "0x4001261")]
	Saturn,
	[Token(Token = "0x4001262")]
	Uranus,
	[Token(Token = "0x4001263")]
	Neptune,
	[Token(Token = "0x4001264")]
	Pluto,
	[Token(Token = "0x4001265")]
	None
}
[Token(Token = "0x2000359")]
public class TourManager : MonoBehaviour
{
	[Token(Token = "0x4001266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool showPathInEditor;

	[Token(Token = "0x4001267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public CameraWrapper cameraWrapper;

	[Token(Token = "0x4001268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private KeyFrameSystem mKeyFrameSystem;

	[Token(Token = "0x4001269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool mbIsPlaying;

	[Token(Token = "0x400126A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static TourManager sInstance;

	[Token(Token = "0x170003F2")]
	public static bool isPlaying
	{
		[Token(Token = "0x6001670")]
		[Address(RVA = "0xCB8EE8", Offset = "0xCB8EE8", VA = "0xCB8EE8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003F3")]
	public static KeyFrameSystem keyFrameSystem
	{
		[Token(Token = "0x6001676")]
		[Address(RVA = "0xCB9608", Offset = "0xCB9608", VA = "0xCB9608")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003F4")]
	public static bool isLastTourAtEnd
	{
		[Token(Token = "0x6001677")]
		[Address(RVA = "0xCB96A4", Offset = "0xCB96A4", VA = "0xCB96A4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600166C")]
	[Address(RVA = "0xCB8AA4", Offset = "0xCB8AA4", VA = "0xCB8AA4")]
	public TourManager()
	{
	}

	[Token(Token = "0x600166D")]
	[Address(RVA = "0xCB8AB4", Offset = "0xCB8AB4", VA = "0xCB8AB4")]
	private void Start()
	{
	}

	[Token(Token = "0x600166E")]
	[Address(RVA = "0xCB8B68", Offset = "0xCB8B68", VA = "0xCB8B68")]
	public static void StartLoadedTour(bool useTourTime)
	{
	}

	[Token(Token = "0x600166F")]
	[Address(RVA = "0xCB8C50", Offset = "0xCB8C50", VA = "0xCB8C50")]
	public static void PlayTour(Tours tour)
	{
	}

	[Token(Token = "0x6001671")]
	[Address(RVA = "0xCB8F84", Offset = "0xCB8F84", VA = "0xCB8F84")]
	public static void StopTour()
	{
	}

	[Token(Token = "0x6001672")]
	[Address(RVA = "0xCB9024", Offset = "0xCB9024", VA = "0xCB9024")]
	public static float GetProgress()
	{
		return default(float);
	}

	[Token(Token = "0x6001673")]
	[Address(RVA = "0xCB914C", Offset = "0xCB914C", VA = "0xCB914C")]
	public static void HackUpdate()
	{
	}

	[Token(Token = "0x6001674")]
	[Address(RVA = "0xCB9554", Offset = "0xCB9554", VA = "0xCB9554")]
	public static void SkipToEnd()
	{
	}

	[Token(Token = "0x6001675")]
	[Address(RVA = "0xCB91EC", Offset = "0xCB91EC", VA = "0xCB91EC")]
	private void Update()
	{
	}
}
[Token(Token = "0x200035A")]
internal class TutorialManager : MonoBehaviour
{
	[Token(Token = "0x200035B")]
	private enum State
	{
		[Token(Token = "0x4001285")]
		AwaitingStart,
		[Token(Token = "0x4001286")]
		AwaitingCompletion,
		[Token(Token = "0x4001287")]
		None
	}

	[Token(Token = "0x400126B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool mbOrreryIsTimeShifting;

	[Token(Token = "0x400126C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool mbOrreyIsScaling;

	[Token(Token = "0x400126D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private State meState;

	[Token(Token = "0x400126E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool mbShouldStartTutorial;

	[Token(Token = "0x400126F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static TutorialManager sInstance;

	[Token(Token = "0x4001270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int miCurrent;

	[Token(Token = "0x4001271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private TutorialBase mCurrentScript;

	[Token(Token = "0x4001272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string mTutorialPrefab;

	[Token(Token = "0x4001273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private TutorialBase[] mScriptList;

	[Token(Token = "0x4001274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TutorialBase.AppMode meAppMode;

	[Token(Token = "0x4001275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private GameObject mPrefab;

	[Token(Token = "0x4001276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject mPrefabObject;

	[Token(Token = "0x4001277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static CelestialObject mRestrictedSelection;

	[Token(Token = "0x4001278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static BodyTypes mRestrictedBodyType;

	[Token(Token = "0x4001279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static bool mbBodyTypeRestricted;

	[Token(Token = "0x400127A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static AppAction meRestrictedInputAction;

	[Token(Token = "0x400127B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static AppAction meRestrictedInputActionTwo;

	[Token(Token = "0x400127C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static AppAction meRestrictedInputActionThree;

	[Token(Token = "0x400127D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public static AppRange2d meRestrictedInputRange2d;

	[Token(Token = "0x400127E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static AppState meRestrictedState;

	[Token(Token = "0x400127F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public static bool mbInputRestricted;

	[Token(Token = "0x4001280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public static bool mbInputStateRestricted;

	[Token(Token = "0x4001281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public static bool mbAllowNavMenu;

	[Token(Token = "0x4001282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
	public static bool mbMenuRestricted;

	[Token(Token = "0x4001283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static NavigationMenuState.MenuItemType meRestrictedMenuType;

	[Token(Token = "0x170003F5")]
	public static CelestialObject restrictedSelection
	{
		[Token(Token = "0x600167A")]
		[Address(RVA = "0xCBCDE0", Offset = "0xCBCDE0", VA = "0xCBCDE0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003F6")]
	public static bool isBodyTypeRestricted
	{
		[Token(Token = "0x600167B")]
		[Address(RVA = "0xCBCE6C", Offset = "0xCBCE6C", VA = "0xCBCE6C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003F7")]
	public static BodyTypes restrictedBodyType
	{
		[Token(Token = "0x600167C")]
		[Address(RVA = "0xCBCEF8", Offset = "0xCBCEF8", VA = "0xCBCEF8")]
		get
		{
			return default(BodyTypes);
		}
	}

	[Token(Token = "0x170003F8")]
	public static bool isRunning
	{
		[Token(Token = "0x600167D")]
		[Address(RVA = "0xCBCF84", Offset = "0xCBCF84", VA = "0xCBCF84")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003F9")]
	public static bool isIntro
	{
		[Token(Token = "0x600167E")]
		[Address(RVA = "0xCBD01C", Offset = "0xCBD01C", VA = "0xCBD01C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003FA")]
	public static bool allowOrbiting
	{
		[Token(Token = "0x600167F")]
		[Address(RVA = "0xCBD0B4", Offset = "0xCBD0B4", VA = "0xCBD0B4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003FB")]
	public static bool disallowSelection
	{
		[Token(Token = "0x6001680")]
		[Address(RVA = "0xCBD18C", Offset = "0xCBD18C", VA = "0xCBD18C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001679")]
	[Address(RVA = "0xCBCDD8", Offset = "0xCBCDD8", VA = "0xCBCDD8")]
	public TutorialManager()
	{
	}

	[Token(Token = "0x6001681")]
	[Address(RVA = "0xCBA450", Offset = "0xCBA450", VA = "0xCBA450")]
	public static void RestrictSelection(CelestialObject lObject)
	{
	}

	[Token(Token = "0x6001682")]
	[Address(RVA = "0xCBD264", Offset = "0xCBD264", VA = "0xCBD264")]
	public static void RestrictBodyType(BodyTypes leType)
	{
	}

	[Token(Token = "0x6001683")]
	[Address(RVA = "0xCBCC58", Offset = "0xCBCC58", VA = "0xCBCC58")]
	public static void RestrictInput(AppAction leAction, AppRange2d leRange)
	{
	}

	[Token(Token = "0x6001684")]
	[Address(RVA = "0xCBD36C", Offset = "0xCBD36C", VA = "0xCBD36C")]
	public static void RestrictInputState()
	{
	}

	[Token(Token = "0x6001685")]
	[Address(RVA = "0xCBD3FC", Offset = "0xCBD3FC", VA = "0xCBD3FC")]
	public static void RestrictNavMenu(NavigationMenuState.MenuItemType leMenuType)
	{
	}

	[Token(Token = "0x6001686")]
	[Address(RVA = "0xCBD4A8", Offset = "0xCBD4A8", VA = "0xCBD4A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001687")]
	[Address(RVA = "0xCBD668", Offset = "0xCBD668", VA = "0xCBD668")]
	private void StartTutorialSequence(TutorialBase.AppMode leAppMode)
	{
	}

	[Token(Token = "0x6001688")]
	[Address(RVA = "0xCBE258", Offset = "0xCBE258", VA = "0xCBE258")]
	private void Update()
	{
	}

	[Token(Token = "0x6001689")]
	[Address(RVA = "0xCBE6F8", Offset = "0xCBE6F8", VA = "0xCBE6F8")]
	public static void EnableModeTutorial()
	{
	}

	[Token(Token = "0x600168A")]
	[Address(RVA = "0xCBE798", Offset = "0xCBE798", VA = "0xCBE798")]
	public static void EnteringMode(TutorialBase.AppMode leAppMode)
	{
	}

	[Token(Token = "0x600168B")]
	[Address(RVA = "0xCBE9B4", Offset = "0xCBE9B4", VA = "0xCBE9B4")]
	private void GetScriptsForMode(TutorialBase.AppMode leMode)
	{
	}

	[Token(Token = "0x600168C")]
	[Address(RVA = "0xCBDFE4", Offset = "0xCBDFE4", VA = "0xCBDFE4")]
	private void InstantiateNext()
	{
	}
}
[Token(Token = "0x200035C")]
public class ViveportDRM : MonoBehaviour
{
	[Token(Token = "0x600168E")]
	[Address(RVA = "0xD28A54", Offset = "0xD28A54", VA = "0xD28A54")]
	public ViveportDRM()
	{
	}
}
[Token(Token = "0x200035D")]
public class VRManager : MonoBehaviour
{
	[Token(Token = "0x200035E")]
	public enum VRHeadsetType
	{
		[Token(Token = "0x400128B")]
		None,
		[Token(Token = "0x400128C")]
		OculusRift,
		[Token(Token = "0x400128D")]
		HTCVive,
		[Token(Token = "0x400128E")]
		OculusGearVR,
		[Token(Token = "0x400128F")]
		Cardboard,
		[Token(Token = "0x4001290")]
		DayDream,
		[Token(Token = "0x4001291")]
		PSVR,
		[Token(Token = "0x4001292")]
		OculusGo,
		[Token(Token = "0x4001293")]
		OculusQuest,
		[Token(Token = "0x4001294")]
		HTCViveFocus
	}

	[Token(Token = "0x4001288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VRManager sInstance;

	[Token(Token = "0x4001289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static VRHeadsetType connectedHeadset;

	[Token(Token = "0x170003FC")]
	public static VRManager instance
	{
		[Token(Token = "0x6001690")]
		[Address(RVA = "0xD29250", Offset = "0xD29250", VA = "0xD29250")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600168F")]
	[Address(RVA = "0xD29248", Offset = "0xD29248", VA = "0xD29248")]
	public VRManager()
	{
	}

	[Token(Token = "0x6001691")]
	[Address(RVA = "0xD29434", Offset = "0xD29434", VA = "0xD29434")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001692")]
	[Address(RVA = "0xD2AC3C", Offset = "0xD2AC3C", VA = "0xD2AC3C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001693")]
	[Address(RVA = "0xD2ACEC", Offset = "0xD2ACEC", VA = "0xD2ACEC")]
	private void callbackMethod(Message msg)
	{
	}
}
[Token(Token = "0x200035F")]
public class CameraRotationController : MonoBehaviour
{
	[Token(Token = "0x2000360")]
	private enum State
	{
		[Token(Token = "0x400129F")]
		Started,
		[Token(Token = "0x40012A0")]
		Testing,
		[Token(Token = "0x40012A1")]
		Finished
	}

	[Token(Token = "0x4001295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform offsetTransform;

	[Token(Token = "0x4001296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform spatialTrackingTransform;

	[Token(Token = "0x4001297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Transform cameraTransform;

	[Token(Token = "0x4001298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 rotation;

	[Token(Token = "0x4001299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector2 mvRotationCache;

	[Token(Token = "0x400129A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Quaternion mqRotationCache;

	[Token(Token = "0x400129B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3Double offsetPosition;

	[Token(Token = "0x400129C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3Double cameraPosition;

	[Token(Token = "0x400129D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private State meState;

	[Token(Token = "0x6001695")]
	[Address(RVA = "0x16DBB8", Offset = "0x16DBB8", VA = "0x16DBB8")]
	public CameraRotationController()
	{
	}

	[Token(Token = "0x6001696")]
	[Address(RVA = "0x16DBC0", Offset = "0x16DBC0", VA = "0x16DBC0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001697")]
	[Address(RVA = "0x16DCC0", Offset = "0x16DCC0", VA = "0x16DCC0")]
	private void Update()
	{
	}
}
namespace StarChartTime
{
	[Token(Token = "0x2000361")]
	public class TimeManager : MonoBehaviour
	{
		[Token(Token = "0x2000362")]
		public enum State
		{
			[Token(Token = "0x40012AC")]
			RealTime,
			[Token(Token = "0x40012AD")]
			TimeShift,
			[Token(Token = "0x40012AE")]
			Tour,
			[Token(Token = "0x40012AF")]
			LaunchMenu
		}

		[Token(Token = "0x2000363")]
		private enum PlayBack
		{
			[Token(Token = "0x40012B1")]
			Rewind64X,
			[Token(Token = "0x40012B2")]
			Rewind32X,
			[Token(Token = "0x40012B3")]
			Rewind16X,
			[Token(Token = "0x40012B4")]
			Rewind8X,
			[Token(Token = "0x40012B5")]
			Rewind4X,
			[Token(Token = "0x40012B6")]
			Rewind2X,
			[Token(Token = "0x40012B7")]
			Rewind,
			[Token(Token = "0x40012B8")]
			Paused,
			[Token(Token = "0x40012B9")]
			Play,
			[Token(Token = "0x40012BA")]
			Forward2X,
			[Token(Token = "0x40012BB")]
			Forward4X,
			[Token(Token = "0x40012BC")]
			Forward8X,
			[Token(Token = "0x40012BD")]
			Forward16X,
			[Token(Token = "0x40012BE")]
			Forward32X,
			[Token(Token = "0x40012BF")]
			Forward64X
		}

		[Token(Token = "0x40012A2")]
		private const double LAUNCH_TIME = 2397165.80416667;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static PlayBack sePlayBack;

		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static State seState;

		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static State seStateCache;

		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double timeShiftJD;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool mbUseTimeShiftCache;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool useTimeShift;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static JulianDate sdJD;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static JulianDate sdTourJD;

		[Token(Token = "0x170003FD")]
		public static string playBackDescription
		{
			[Token(Token = "0x600169A")]
			[Address(RVA = "0xCE02D4", Offset = "0xCE02D4", VA = "0xCE02D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003FE")]
		public static State state
		{
			[Token(Token = "0x600169B")]
			[Address(RVA = "0xCE03D0", Offset = "0xCE03D0", VA = "0xCE03D0")]
			set
			{
			}
		}

		[Token(Token = "0x170003FF")]
		public static DateTime momentInTime
		{
			[Token(Token = "0x600169C")]
			[Address(RVA = "0xCE0538", Offset = "0xCE0538", VA = "0xCE0538")]
			set
			{
			}
		}

		[Token(Token = "0x17000400")]
		public static double julianDate
		{
			[Token(Token = "0x600169F")]
			[Address(RVA = "0xCE0ACC", Offset = "0xCE0ACC", VA = "0xCE0ACC")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000401")]
		public static double julianDaysSinceJ2000
		{
			[Token(Token = "0x60016A0")]
			[Address(RVA = "0xCE0B68", Offset = "0xCE0B68", VA = "0xCE0B68")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000402")]
		public static double tourTime
		{
			[Token(Token = "0x60016A1")]
			[Address(RVA = "0xCE0BF8", Offset = "0xCE0BF8", VA = "0xCE0BF8")]
			set
			{
			}
		}

		[Token(Token = "0x6001698")]
		[Address(RVA = "0xCE01D4", Offset = "0xCE01D4", VA = "0xCE01D4")]
		static TimeManager()
		{
		}

		[Token(Token = "0x6001699")]
		[Address(RVA = "0xCE02CC", Offset = "0xCE02CC", VA = "0xCE02CC")]
		public TimeManager()
		{
		}

		[Token(Token = "0x600169D")]
		[Address(RVA = "0xCE0610", Offset = "0xCE0610", VA = "0xCE0610")]
		private void Start()
		{
		}

		[Token(Token = "0x600169E")]
		[Address(RVA = "0xCE0620", Offset = "0xCE0620", VA = "0xCE0620")]
		private void Update()
		{
		}

		[Token(Token = "0x60016A2")]
		[Address(RVA = "0xCE0CB0", Offset = "0xCE0CB0", VA = "0xCE0CB0")]
		public static void IncreasePlaybackSpeed()
		{
		}

		[Token(Token = "0x60016A3")]
		[Address(RVA = "0xCE0D80", Offset = "0xCE0D80", VA = "0xCE0D80")]
		public static void DecreasePlaybackSpeed()
		{
		}

		[Token(Token = "0x60016A4")]
		[Address(RVA = "0xCE0E50", Offset = "0xCE0E50", VA = "0xCE0E50")]
		public static void PausePlayback()
		{
		}
	}
}
namespace Tutorials.Daydream
{
	[Token(Token = "0x2000364")]
	public class DeselectTutorial : TutorialBase
	{
		[Token(Token = "0x60016A5")]
		[Address(RVA = "0xCBED08", Offset = "0xCBED08", VA = "0xCBED08")]
		public DeselectTutorial()
		{
		}

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0xCBED20", Offset = "0xCBED20", VA = "0xCBED20", Slot = "4")]
		public override bool StartTutorial(GameObject lTutorialPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016A7")]
		[Address(RVA = "0xCBEFB0", Offset = "0xCBEFB0", VA = "0xCBEFB0", Slot = "5")]
		public override bool UpdateAndCheckCompletion()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000365")]
	public class ExploreEarthTutorial : TutorialBase
	{
		[Token(Token = "0x60016A8")]
		[Address(RVA = "0xCBF14C", Offset = "0xCBF14C", VA = "0xCBF14C")]
		public ExploreEarthTutorial()
		{
		}

		[Token(Token = "0x60016A9")]
		[Address(RVA = "0xCBF164", Offset = "0xCBF164", VA = "0xCBF164", Slot = "4")]
		public override bool StartTutorial(GameObject lTutorialPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016AA")]
		[Address(RVA = "0xCBF56C", Offset = "0xCBF56C", VA = "0xCBF56C", Slot = "5")]
		public override bool UpdateAndCheckCompletion()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000366")]
	public class ExploreMoonTutorial : TutorialBase
	{
		[Token(Token = "0x60016AB")]
		[Address(RVA = "0xCBF630", Offset = "0xCBF630", VA = "0xCBF630")]
		public ExploreMoonTutorial()
		{
		}

		[Token(Token = "0x60016AC")]
		[Address(RVA = "0xCBF648", Offset = "0xCBF648", VA = "0xCBF648", Slot = "4")]
		public override bool StartTutorial(GameObject lTutorialPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016AD")]
		[Address(RVA = "0xCBFA58", Offset = "0xCBFA58", VA = "0xCBFA58", Slot = "5")]
		public override bool UpdateAndCheckCompletion()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000367")]
	public class FindMoonTutorial : TutorialBase
	{
		[Token(Token = "0x40012C0")]
		private const float ARROW_OFFSET = 100f;

		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform mArrowTrans;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private GameObject mArrowAnchor;

		[Token(Token = "0x60016AE")]
		[Address(RVA = "0xCBFB60", Offset = "0xCBFB60", VA = "0xCBFB60")]
		public FindMoonTutorial()
		{
		}

		[Token(Token = "0x60016AF")]
		[Address(RVA = "0xCBFB78", Offset = "0xCBFB78", VA = "0xCBFB78", Slot = "4")]
		public override bool StartTutorial(GameObject lTutorialPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016B0")]
		[Address(RVA = "0xCC0408", Offset = "0xCC0408", VA = "0xCC0408")]
		private void UpdateArrowTrackedPosition()
		{
		}

		[Token(Token = "0x60016B1")]
		[Address(RVA = "0xCC0740", Offset = "0xCC0740", VA = "0xCC0740", Slot = "5")]
		public override bool UpdateAndCheckCompletion()
		{
			return default(bool);
		}

		[Token(Token = "0x60016B2")]
		[Address(RVA = "0xCC0C24", Offset = "0xCC0C24", VA = "0xCC0C24", Slot = "6")]
		public override void EndTutorial()
		{
		}
	}
	[Token(Token = "0x2000368")]
	public class MITDeselectTutorial : TutorialBase
	{
		[Token(Token = "0x60016B3")]
		[Address(RVA = "0xCC0D14", Offset = "0xCC0D14", VA = "0xCC0D14")]
		public MITDeselectTutorial()
		{
		}

		[Token(Token = "0x60016B4")]
		[Address(RVA = "0xCC0D2C", Offset = "0xCC0D2C", VA = "0xCC0D2C", Slot = "4")]
		public override bool StartTutorial(GameObject lTutorialPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016B5")]
		[Address(RVA = "0xCC106C", Offset = "0xCC106C", VA = "0xCC106C", Slot = "5")]
		public override bool UpdateAndCheckCompletion()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000369")]
	public class MITSelectTutorial : TutorialBase
	{
		[Token(Token = "0x60016B6")]
		[Address(RVA = "0xCC1188", Offset = "0xCC1188", VA = "0xCC1188")]
		public MITSelectTutorial()
		{
		}

		[Token(Token = "0x60016B7")]
		[Address(RVA = "0xCC11A0", Offset = "0xCC11A0", VA = "0xCC11A0", Slot = "4")]
		public override bool StartTutorial(GameObject lTutorialPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016B8")]
		[Address(RVA = "0xCC1494", Offset = "0xCC1494", VA = "0xCC1494", Slot = "5")]
		public override bool UpdateAndCheckCompletion()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200036A")]
	public class MITTeleportTutorial : TutorialBase
	{
		[Token(Token = "0x60016B9")]
		[Address(RVA = "0xCC15AC", Offset = "0xCC15AC", VA = "0xCC15AC")]
		public MITTeleportTutorial()
		{
		}

		[Token(Token = "0x60016BA")]
		[Address(RVA = "0xCC15C4", Offset = "0xCC15C4", VA = "0xCC15C4", Slot = "4")]
		public override bool StartTutorial(GameObject lTutorialPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016BB")]
		[Address(RVA = "0xCC1BAC", Offset = "0xCC1BAC", VA = "0xCC1BAC", Slot = "5")]
		public override bool UpdateAndCheckCompletion()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200036B")]
	public class NavMenuTutorial : TutorialBase
	{
		[Token(Token = "0x60016BC")]
		[Address(RVA = "0xCC1E2C", Offset = "0xCC1E2C", VA = "0xCC1E2C")]
		public NavMenuTutorial()
		{
		}

		[Token(Token = "0x60016BD")]
		[Address(RVA = "0xCC1E44", Offset = "0xCC1E44", VA = "0xCC1E44", Slot = "4")]
		public override bool StartTutorial(GameObject lTutorialPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016BE")]
		[Address(RVA = "0xCC2308", Offset = "0xCC2308", VA = "0xCC2308", Slot = "5")]
		public override bool UpdateAndCheckCompletion()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200036C")]
	public class OrbitPlanetTutorial : TutorialBase
	{
		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool mbHasOrbited;

		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float mfTicker;

		[Token(Token = "0x40012C5")]
		private const float kfPauseTime = 0.1f;

		[Token(Token = "0x60016BF")]
		[Address(RVA = "0xCC244C", Offset = "0xCC244C", VA = "0xCC244C")]
		public OrbitPlanetTutorial()
		{
		}

		[Token(Token = "0x60016C0")]
		[Address(RVA = "0xCC2464", Offset = "0xCC2464", VA = "0xCC2464", Slot = "4")]
		public override bool StartTutorial(GameObject lTutorialPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016C1")]
		[Address(RVA = "0xCC28BC", Offset = "0xCC28BC", VA = "0xCC28BC", Slot = "5")]
		public override bool UpdateAndCheckCompletion()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200036D")]
	public class OrreryScaleTutorial : TutorialBase
	{
		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool mbPadTouched;

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float mfTimer;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float kfTouchPauseTime;

		[Token(Token = "0x60016C2")]
		[Address(RVA = "0xCC2A28", Offset = "0xCC2A28", VA = "0xCC2A28")]
		public OrreryScaleTutorial()
		{
		}

		[Token(Token = "0x60016C3")]
		[Address(RVA = "0xCC2A4C", Offset = "0xCC2A4C", VA = "0xCC2A4C", Slot = "4")]
		public override bool StartTutorial(GameObject lTutorialPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016C4")]
		[Address(RVA = "0xCC2C90", Offset = "0xCC2C90", VA = "0xCC2C90", Slot = "5")]
		public override bool UpdateAndCheckCompletion()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200036E")]
	public class OrreryTimeshiftTutorial : TutorialBase
	{
		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool mbPadTouched;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float mfTimer;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float kfTouchPauseTime;

		[Token(Token = "0x60016C5")]
		[Address(RVA = "0xCC2E08", Offset = "0xCC2E08", VA = "0xCC2E08")]
		public OrreryTimeshiftTutorial()
		{
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0xCC2E2C", Offset = "0xCC2E2C", VA = "0xCC2E2C", Slot = "4")]
		public override bool StartTutorial(GameObject lTutorialPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0xCC3070", Offset = "0xCC3070", VA = "0xCC3070", Slot = "5")]
		public override bool UpdateAndCheckCompletion()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200036F")]
	public class PlanetInfoTutorial : TutorialBase
	{
		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool mbPadTouched;

		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float mfTimer;

		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float kfTouchPauseTime;

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0xCC31EC", Offset = "0xCC31EC", VA = "0xCC31EC")]
		public PlanetInfoTutorial()
		{
		}

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0xCC3210", Offset = "0xCC3210", VA = "0xCC3210", Slot = "4")]
		public override bool StartTutorial(GameObject lTutorialPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0xCC3608", Offset = "0xCC3608", VA = "0xCC3608", Slot = "5")]
		public override bool UpdateAndCheckCompletion()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000370")]
	public class SelectEarthTutorial : TutorialBase
	{
		[Token(Token = "0x60016CB")]
		[Address(RVA = "0xCC3724", Offset = "0xCC3724", VA = "0xCC3724")]
		public SelectEarthTutorial()
		{
		}

		[Token(Token = "0x60016CC")]
		[Address(RVA = "0xCC373C", Offset = "0xCC373C", VA = "0xCC373C", Slot = "4")]
		public override bool StartTutorial(GameObject lTutorialPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016CD")]
		[Address(RVA = "0xCC3AE0", Offset = "0xCC3AE0", VA = "0xCC3AE0", Slot = "5")]
		public override bool UpdateAndCheckCompletion()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000371")]
	public class SkyViewRotateTutorial : TutorialBase
	{
		[Token(Token = "0x60016CE")]
		[Address(RVA = "0xCC3C40", Offset = "0xCC3C40", VA = "0xCC3C40")]
		public SkyViewRotateTutorial()
		{
		}

		[Token(Token = "0x60016CF")]
		[Address(RVA = "0xCC3C58", Offset = "0xCC3C58", VA = "0xCC3C58", Slot = "4")]
		public override bool StartTutorial(GameObject lTutorialPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016D0")]
		[Address(RVA = "0xCC4070", Offset = "0xCC4070", VA = "0xCC4070", Slot = "5")]
		public override bool UpdateAndCheckCompletion()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000372")]
	public class SkyViewSelectStarTutorial : TutorialBase
	{
		[Token(Token = "0x60016D1")]
		[Address(RVA = "0xCC41C4", Offset = "0xCC41C4", VA = "0xCC41C4")]
		public SkyViewSelectStarTutorial()
		{
		}

		[Token(Token = "0x60016D2")]
		[Address(RVA = "0xCC41DC", Offset = "0xCC41DC", VA = "0xCC41DC", Slot = "4")]
		public override bool StartTutorial(GameObject lTutorialPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016D3")]
		[Address(RVA = "0xCC4420", Offset = "0xCC4420", VA = "0xCC4420", Slot = "5")]
		public override bool UpdateAndCheckCompletion()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000373")]
	public class SurfaceDetailTutorial : TutorialBase
	{
		[Token(Token = "0x60016D4")]
		[Address(RVA = "0xCC451C", Offset = "0xCC451C", VA = "0xCC451C")]
		public SurfaceDetailTutorial()
		{
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0xCC4534", Offset = "0xCC4534", VA = "0xCC4534", Slot = "4")]
		public override bool StartTutorial(GameObject lTutorialPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0xCC47C8", Offset = "0xCC47C8", VA = "0xCC47C8", Slot = "5")]
		public override bool UpdateAndCheckCompletion()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000374")]
	public class TravelBackTutorial : TutorialBase
	{
		[Token(Token = "0x60016D7")]
		[Address(RVA = "0xCC48E8", Offset = "0xCC48E8", VA = "0xCC48E8")]
		public TravelBackTutorial()
		{
		}

		[Token(Token = "0x60016D8")]
		[Address(RVA = "0xCC4900", Offset = "0xCC4900", VA = "0xCC4900", Slot = "4")]
		public override bool StartTutorial(GameObject lTutorialPrefab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016D9")]
		[Address(RVA = "0xCC4BB8", Offset = "0xCC4BB8", VA = "0xCC4BB8", Slot = "5")]
		public override bool UpdateAndCheckCompletion()
		{
			return default(bool);
		}
	}
}
[Token(Token = "0x2000375")]
public class ExploreMoonTutorial : TutorialBase
{
	[Token(Token = "0x60016DA")]
	[Address(RVA = "0x18A0E0", Offset = "0x18A0E0", VA = "0x18A0E0")]
	public ExploreMoonTutorial()
	{
	}

	[Token(Token = "0x60016DB")]
	[Address(RVA = "0x18A0E8", Offset = "0x18A0E8", VA = "0x18A0E8", Slot = "4")]
	public override bool StartTutorial(GameObject lTutorialPrefab)
	{
		return default(bool);
	}

	[Token(Token = "0x60016DC")]
	[Address(RVA = "0x18A990", Offset = "0x18A990", VA = "0x18A990", Slot = "5")]
	public override bool UpdateAndCheckCompletion()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000376")]
public class ExplorePlanetBackTutorial : TutorialBase
{
	[Token(Token = "0x60016DD")]
	[Address(RVA = "0x18AC64", Offset = "0x18AC64", VA = "0x18AC64")]
	public ExplorePlanetBackTutorial()
	{
	}

	[Token(Token = "0x60016DE")]
	[Address(RVA = "0x18AC6C", Offset = "0x18AC6C", VA = "0x18AC6C", Slot = "4")]
	public override bool StartTutorial(GameObject lTutorialPrefab)
	{
		return default(bool);
	}

	[Token(Token = "0x60016DF")]
	[Address(RVA = "0x18B398", Offset = "0x18B398", VA = "0x18B398", Slot = "5")]
	public override bool UpdateAndCheckCompletion()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000377")]
public class ExplorePlanetTutorial : TutorialBase
{
	[Token(Token = "0x60016E0")]
	[Address(RVA = "0x18B5BC", Offset = "0x18B5BC", VA = "0x18B5BC")]
	public ExplorePlanetTutorial()
	{
	}

	[Token(Token = "0x60016E1")]
	[Address(RVA = "0x18B5C4", Offset = "0x18B5C4", VA = "0x18B5C4", Slot = "4")]
	public override bool StartTutorial(GameObject lTutorialPrefab)
	{
		return default(bool);
	}

	[Token(Token = "0x60016E2")]
	[Address(RVA = "0x18BD20", Offset = "0x18BD20", VA = "0x18BD20", Slot = "5")]
	public override bool UpdateAndCheckCompletion()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000378")]
public class FindMoonTutorial : TutorialBase
{
	[Token(Token = "0x40012CF")]
	private const float ARROW_OFFSET = 100f;

	[Token(Token = "0x40012D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform mArrowTrans;

	[Token(Token = "0x60016E3")]
	[Address(RVA = "0x18E64C", Offset = "0x18E64C", VA = "0x18E64C")]
	public FindMoonTutorial()
	{
	}

	[Token(Token = "0x60016E4")]
	[Address(RVA = "0x18E654", Offset = "0x18E654", VA = "0x18E654", Slot = "4")]
	public override bool StartTutorial(GameObject lTutorialPrefab)
	{
		return default(bool);
	}

	[Token(Token = "0x60016E5")]
	[Address(RVA = "0x18F0E8", Offset = "0x18F0E8", VA = "0x18F0E8", Slot = "5")]
	public override bool UpdateAndCheckCompletion()
	{
		return default(bool);
	}

	[Token(Token = "0x60016E6")]
	[Address(RVA = "0x18F6A8", Offset = "0x18F6A8", VA = "0x18F6A8", Slot = "6")]
	public override void EndTutorial()
	{
	}
}
[Token(Token = "0x2000379")]
public class IntroTutorial : TutorialBase
{
	[Token(Token = "0x40012D1")]
	private const float kfViewTime = 5f;

	[Token(Token = "0x40012D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float mfTimer;

	[Token(Token = "0x60016E7")]
	[Address(RVA = "0xC46BD8", Offset = "0xC46BD8", VA = "0xC46BD8")]
	public IntroTutorial()
	{
	}

	[Token(Token = "0x60016E8")]
	[Address(RVA = "0xC46BE0", Offset = "0xC46BE0", VA = "0xC46BE0", Slot = "4")]
	public override bool StartTutorial(GameObject lTutorialPrefab)
	{
		return default(bool);
	}

	[Token(Token = "0x60016E9")]
	[Address(RVA = "0xC46F3C", Offset = "0xC46F3C", VA = "0xC46F3C", Slot = "5")]
	public override bool UpdateAndCheckCompletion()
	{
		return default(bool);
	}
}
[Token(Token = "0x200037A")]
public class NavigationMenuOrbitTutorial : TutorialBase
{
	[Token(Token = "0x60016EA")]
	[Address(RVA = "0xDC2988", Offset = "0xDC2988", VA = "0xDC2988")]
	public NavigationMenuOrbitTutorial()
	{
	}

	[Token(Token = "0x60016EB")]
	[Address(RVA = "0xDC2990", Offset = "0xDC2990", VA = "0xDC2990", Slot = "4")]
	public override bool StartTutorial(GameObject lTutorialPrefab)
	{
		return default(bool);
	}

	[Token(Token = "0x60016EC")]
	[Address(RVA = "0xDC2C74", Offset = "0xDC2C74", VA = "0xDC2C74", Slot = "5")]
	public override bool UpdateAndCheckCompletion()
	{
		return default(bool);
	}
}
[Token(Token = "0x200037B")]
public class NavigationMenuTutorial : TutorialBase
{
	[Token(Token = "0x60016ED")]
	[Address(RVA = "0xDC50AC", Offset = "0xDC50AC", VA = "0xDC50AC")]
	public NavigationMenuTutorial()
	{
	}

	[Token(Token = "0x60016EE")]
	[Address(RVA = "0xDC50B4", Offset = "0xDC50B4", VA = "0xDC50B4", Slot = "4")]
	public override bool StartTutorial(GameObject lTutorialPrefab)
	{
		return default(bool);
	}

	[Token(Token = "0x60016EF")]
	[Address(RVA = "0xDC5394", Offset = "0xDC5394", VA = "0xDC5394", Slot = "5")]
	public override bool UpdateAndCheckCompletion()
	{
		return default(bool);
	}
}
[Token(Token = "0x200037C")]
public class OrbitPlanetTutorial : TutorialBase
{
	[Token(Token = "0x40012D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool mbHasOrbited;

	[Token(Token = "0x40012D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float mfTicker;

	[Token(Token = "0x40012D5")]
	private const float kfPauseTime = 0.1f;

	[Token(Token = "0x60016F0")]
	[Address(RVA = "0xC70230", Offset = "0xC70230", VA = "0xC70230")]
	public OrbitPlanetTutorial()
	{
	}

	[Token(Token = "0x60016F1")]
	[Address(RVA = "0xC70238", Offset = "0xC70238", VA = "0xC70238", Slot = "4")]
	public override bool StartTutorial(GameObject lTutorialPrefab)
	{
		return default(bool);
	}

	[Token(Token = "0x60016F2")]
	[Address(RVA = "0xC708C0", Offset = "0xC708C0", VA = "0xC708C0", Slot = "5")]
	public override bool UpdateAndCheckCompletion()
	{
		return default(bool);
	}
}
[Token(Token = "0x200037D")]
public class OrreryIntroTutorial : TutorialBase
{
	[Token(Token = "0x40012D6")]
	private const float kfViewTime = 5f;

	[Token(Token = "0x40012D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float mfTimer;

	[Token(Token = "0x60016F3")]
	[Address(RVA = "0xC77A34", Offset = "0xC77A34", VA = "0xC77A34")]
	public OrreryIntroTutorial()
	{
	}

	[Token(Token = "0x60016F4")]
	[Address(RVA = "0xC77A3C", Offset = "0xC77A3C", VA = "0xC77A3C", Slot = "4")]
	public override bool StartTutorial(GameObject lTutorialPrefab)
	{
		return default(bool);
	}

	[Token(Token = "0x60016F5")]
	[Address(RVA = "0xC77CE0", Offset = "0xC77CE0", VA = "0xC77CE0", Slot = "5")]
	public override bool UpdateAndCheckCompletion()
	{
		return default(bool);
	}
}
[Token(Token = "0x200037E")]
public class OutroTutorial : TutorialBase
{
	[Token(Token = "0x40012D8")]
	private const float kfViewTime = 5f;

	[Token(Token = "0x40012D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float mfTimer;

	[Token(Token = "0x60016F6")]
	[Address(RVA = "0xC7E198", Offset = "0xC7E198", VA = "0xC7E198")]
	public OutroTutorial()
	{
	}

	[Token(Token = "0x60016F7")]
	[Address(RVA = "0xC7E1A0", Offset = "0xC7E1A0", VA = "0xC7E1A0", Slot = "4")]
	public override bool StartTutorial(GameObject lTutorialPrefab)
	{
		return default(bool);
	}

	[Token(Token = "0x60016F8")]
	[Address(RVA = "0xC7E470", Offset = "0xC7E470", VA = "0xC7E470", Slot = "5")]
	public override bool UpdateAndCheckCompletion()
	{
		return default(bool);
	}
}
[Token(Token = "0x200037F")]
public class PlanetMenuTutorial : TutorialBase
{
	[Token(Token = "0x60016F9")]
	[Address(RVA = "0xC99974", Offset = "0xC99974", VA = "0xC99974")]
	public PlanetMenuTutorial()
	{
	}

	[Token(Token = "0x60016FA")]
	[Address(RVA = "0xC9997C", Offset = "0xC9997C", VA = "0xC9997C", Slot = "4")]
	public override bool StartTutorial(GameObject lTutorialPrefab)
	{
		return default(bool);
	}

	[Token(Token = "0x60016FB")]
	[Address(RVA = "0xC99DD8", Offset = "0xC99DD8", VA = "0xC99DD8", Slot = "5")]
	public override bool UpdateAndCheckCompletion()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000380")]
public class PlanetPreviewDismissTutorial : TutorialBase
{
	[Token(Token = "0x40012DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float mfTimer;

	[Token(Token = "0x40012DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float kfTouchPauseTime;

	[Token(Token = "0x60016FC")]
	[Address(RVA = "0xD2DEC8", Offset = "0xD2DEC8", VA = "0xD2DEC8")]
	public PlanetPreviewDismissTutorial()
	{
	}

	[Token(Token = "0x60016FD")]
	[Address(RVA = "0xD2DEDC", Offset = "0xD2DEDC", VA = "0xD2DEDC", Slot = "4")]
	public override bool StartTutorial(GameObject lTutorialPrefab)
	{
		return default(bool);
	}

	[Token(Token = "0x60016FE")]
	[Address(RVA = "0xD2E1D4", Offset = "0xD2E1D4", VA = "0xD2E1D4", Slot = "5")]
	public override bool UpdateAndCheckCompletion()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000381")]
public class PlanetPreviewSelectTutorial : TutorialBase
{
	[Token(Token = "0x60016FF")]
	[Address(RVA = "0xD2E29C", Offset = "0xD2E29C", VA = "0xD2E29C")]
	public PlanetPreviewSelectTutorial()
	{
	}

	[Token(Token = "0x6001700")]
	[Address(RVA = "0xD2E2A4", Offset = "0xD2E2A4", VA = "0xD2E2A4", Slot = "4")]
	public override bool StartTutorial(GameObject lTutorialPrefab)
	{
		return default(bool);
	}

	[Token(Token = "0x6001701")]
	[Address(RVA = "0xD2E690", Offset = "0xD2E690", VA = "0xD2E690", Slot = "5")]
	public override bool UpdateAndCheckCompletion()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000382")]
public class PlanetPreviewTutorial : TutorialBase
{
	[Token(Token = "0x40012DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool mbPadTouched;

	[Token(Token = "0x40012DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float mfTimer;

	[Token(Token = "0x40012DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float kfTouchPauseTime;

	[Token(Token = "0x6001702")]
	[Address(RVA = "0xD2E7A4", Offset = "0xD2E7A4", VA = "0xD2E7A4")]
	public PlanetPreviewTutorial()
	{
	}

	[Token(Token = "0x6001703")]
	[Address(RVA = "0xD2E7B4", Offset = "0xD2E7B4", VA = "0xD2E7B4", Slot = "4")]
	public override bool StartTutorial(GameObject lTutorialPrefab)
	{
		return default(bool);
	}

	[Token(Token = "0x6001704")]
	[Address(RVA = "0xD2EAAC", Offset = "0xD2EAAC", VA = "0xD2EAAC", Slot = "5")]
	public override bool UpdateAndCheckCompletion()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000383")]
public class RestartingTutorial : TutorialBase
{
	[Token(Token = "0x40012DF")]
	private const float kfViewTime = 3f;

	[Token(Token = "0x40012E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float mfTimer;

	[Token(Token = "0x40012E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool mbNeedsToTravel;

	[Token(Token = "0x40012E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool mbIsPrimary;

	[Token(Token = "0x6001705")]
	[Address(RVA = "0xDF4948", Offset = "0xDF4948", VA = "0xDF4948")]
	public RestartingTutorial()
	{
	}

	[Token(Token = "0x6001706")]
	[Address(RVA = "0xDF4958", Offset = "0xDF4958", VA = "0xDF4958", Slot = "4")]
	public override bool StartTutorial(GameObject lTutorialPrefab)
	{
		return default(bool);
	}

	[Token(Token = "0x6001707")]
	[Address(RVA = "0xDF4BEC", Offset = "0xDF4BEC", VA = "0xDF4BEC", Slot = "5")]
	public override bool UpdateAndCheckCompletion()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000384")]
public class SkyViewIntroTutorial : TutorialBase
{
	[Token(Token = "0x40012E3")]
	private const float kfViewTime = 5f;

	[Token(Token = "0x40012E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float mfTimer;

	[Token(Token = "0x6001708")]
	[Address(RVA = "0xE158D8", Offset = "0xE158D8", VA = "0xE158D8")]
	public SkyViewIntroTutorial()
	{
	}

	[Token(Token = "0x6001709")]
	[Address(RVA = "0xE158E0", Offset = "0xE158E0", VA = "0xE158E0", Slot = "4")]
	public override bool StartTutorial(GameObject lTutorialPrefab)
	{
		return default(bool);
	}

	[Token(Token = "0x600170A")]
	[Address(RVA = "0xE15B48", Offset = "0xE15B48", VA = "0xE15B48", Slot = "5")]
	public override bool UpdateAndCheckCompletion()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000385")]
public class SurfacePreviewSelectTutorial : TutorialBase
{
	[Token(Token = "0x600170B")]
	[Address(RVA = "0xCFCC10", Offset = "0xCFCC10", VA = "0xCFCC10")]
	public SurfacePreviewSelectTutorial()
	{
	}

	[Token(Token = "0x600170C")]
	[Address(RVA = "0xCFCC18", Offset = "0xCFCC18", VA = "0xCFCC18", Slot = "4")]
	public override bool StartTutorial(GameObject lTutorialPrefab)
	{
		return default(bool);
	}

	[Token(Token = "0x600170D")]
	[Address(RVA = "0xCFCED8", Offset = "0xCFCED8", VA = "0xCFCED8", Slot = "5")]
	public override bool UpdateAndCheckCompletion()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000386")]
public abstract class TutorialBase : MonoBehaviour
{
	[Token(Token = "0x2000387")]
	public enum AppMode
	{
		[Token(Token = "0x40012F4")]
		Exploring,
		[Token(Token = "0x40012F5")]
		MomentInTime,
		[Token(Token = "0x40012F6")]
		SkyView,
		[Token(Token = "0x40012F7")]
		Orrery
	}

	[Token(Token = "0x2000434")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC3007C", Offset = "0xC3007C")]
	private sealed class <FadeIn>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400177B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfAlpha>__0;

		[Token(Token = "0x400177C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal CanvasRenderer[] $locvar0;

		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int $locvar1;

		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal CanvasRenderer[] $locvar2;

		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int $locvar3;

		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal TutorialBase $this;

		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x170004AC")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001AC8")]
			[Address(RVA = "0xCBC76C", Offset = "0xCBC76C", VA = "0xCBC76C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004AD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001AC9")]
			[Address(RVA = "0xCBC774", Offset = "0xCBC774", VA = "0xCBC774", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001AC6")]
		[Address(RVA = "0xCBC394", Offset = "0xCBC394", VA = "0xCBC394")]
		[DebuggerHidden]
		public <FadeIn>c__Iterator0()
		{
		}

		[Token(Token = "0x6001AC7")]
		[Address(RVA = "0xCBC494", Offset = "0xCBC494", VA = "0xCBC494", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001ACA")]
		[Address(RVA = "0xCBC77C", Offset = "0xCBC77C", VA = "0xCBC77C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001ACB")]
		[Address(RVA = "0xCBC790", Offset = "0xCBC790", VA = "0xCBC790", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000435")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC300DC", Offset = "0xC300DC")]
	private sealed class <FadeOut>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <lfAlpha>__0;

		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <lfTime>__1;

		[Token(Token = "0x4001786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float <mu>__1;

		[Token(Token = "0x4001787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal CanvasRenderer[] $locvar0;

		[Token(Token = "0x4001788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int $locvar1;

		[Token(Token = "0x4001789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal CanvasRenderer[] $locvar2;

		[Token(Token = "0x400178A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int $locvar3;

		[Token(Token = "0x400178B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal TutorialBase $this;

		[Token(Token = "0x400178C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal object $current;

		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal bool $disposing;

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int $PC;

		[Token(Token = "0x170004AE")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001ACE")]
			[Address(RVA = "0xCBCD30", Offset = "0xCBCD30", VA = "0xCBCD30", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004AF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001ACF")]
			[Address(RVA = "0xCBCD38", Offset = "0xCBCD38", VA = "0xCBCD38", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001ACC")]
		[Address(RVA = "0xCBC41C", Offset = "0xCBC41C", VA = "0xCBC41C")]
		[DebuggerHidden]
		public <FadeOut>c__Iterator1()
		{
		}

		[Token(Token = "0x6001ACD")]
		[Address(RVA = "0xCBC814", Offset = "0xCBC814", VA = "0xCBC814", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AD0")]
		[Address(RVA = "0xCBCD40", Offset = "0xCBCD40", VA = "0xCBCD40", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001AD1")]
		[Address(RVA = "0xCBCD54", Offset = "0xCBCD54", VA = "0xCBCD54", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40012E5")]
	private const float SUCCESS_AUDIO_DELAY = 0.1f;

	[Token(Token = "0x40012E6")]
	private const float COMPLETION_TIME = 0.5f;

	[Token(Token = "0x40012E7")]
	private const float FADE_OUT_DURATION = 0.5f;

	[Token(Token = "0x40012E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public AppMode mode;

	[Token(Token = "0x40012E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected GameObject mCanvas;

	[Token(Token = "0x40012EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	protected GameObject mAnchor;

	[Token(Token = "0x40012EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool mbIsCompletable;

	[Token(Token = "0x40012EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_fadeSpeed;

	[Token(Token = "0x40012ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected bool mbCompleted;

	[Token(Token = "0x40012EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	protected bool mbIsCompleting;

	[Token(Token = "0x40012EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	private bool mbCompletionSoundPlayed;

	[Token(Token = "0x40012F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float mfCompletionStartTimer;

	[Token(Token = "0x40012F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected Transform mRootTransform;

	[Token(Token = "0x40012F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected Transform mRightController;

	[Token(Token = "0x17000403")]
	protected bool isCompleting
	{
		[Token(Token = "0x600171E")]
		[Address(RVA = "0xCBC424", Offset = "0xCBC424", VA = "0xCBC424")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000404")]
	protected bool hasCompleted
	{
		[Token(Token = "0x600171F")]
		[Address(RVA = "0xCBC43C", Offset = "0xCBC43C", VA = "0xCBC43C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600170E")]
	[Address(RVA = "0xCBA32C", Offset = "0xCBA32C", VA = "0xCBA32C")]
	protected TutorialBase()
	{
	}

	[Token(Token = "0x600170F")]
	public abstract bool StartTutorial(GameObject lTutorialPrefab);

	[Token(Token = "0x6001710")]
	public abstract bool UpdateAndCheckCompletion();

	[Token(Token = "0x6001711")]
	[Address(RVA = "0xCBA344", Offset = "0xCBA344", VA = "0xCBA344", Slot = "6")]
	public virtual void EndTutorial()
	{
	}

	[Token(Token = "0x6001712")]
	[Address(RVA = "0xCBA630", Offset = "0xCBA630", VA = "0xCBA630")]
	protected void ActivatePrefab(GameObject lPrefab)
	{
	}

	[Token(Token = "0x6001713")]
	[Address(RVA = "0xCBA660", Offset = "0xCBA660", VA = "0xCBA660")]
	protected void SetPositionWithAnchor(CelestialObject lObject, float scale = 1f)
	{
	}

	[Token(Token = "0x6001714")]
	[Address(RVA = "0xCBABF8", Offset = "0xCBABF8", VA = "0xCBABF8")]
	protected void SetPositionWithCamera(Vector3 offset)
	{
	}

	[Token(Token = "0x6001715")]
	[Address(RVA = "0xCBAD5C", Offset = "0xCBAD5C", VA = "0xCBAD5C")]
	protected bool SetPositionWithTrackedController(bool lbRightController, float lfScale = 0.75f)
	{
		return default(bool);
	}

	[Token(Token = "0x6001716")]
	[Address(RVA = "0xCBB1E0", Offset = "0xCBB1E0", VA = "0xCBB1E0")]
	protected bool SetPositionWithHeadTrackedController(float lfScale = 1f)
	{
		return default(bool);
	}

	[Token(Token = "0x6001717")]
	[Address(RVA = "0xCBB600", Offset = "0xCBB600", VA = "0xCBB600")]
	protected void UpdatePosition(CelestialObject lObject)
	{
	}

	[Token(Token = "0x6001718")]
	[Address(RVA = "0xCBBE74", Offset = "0xCBBE74", VA = "0xCBBE74")]
	protected void UpdatePosition(CelestialObject lObject, Vector3 relativeOffset)
	{
	}

	[Token(Token = "0x6001719")]
	[Address(RVA = "0xCBB6B4", Offset = "0xCBB6B4", VA = "0xCBB6B4")]
	protected void UpdatePosition(CelestialObject lObject, Vector3 relativeOffset, float screenOffsetX)
	{
	}

	[Token(Token = "0x600171A")]
	[Address(RVA = "0xCBBE98", Offset = "0xCBBE98", VA = "0xCBBE98")]
	protected void UpdateTrackedPosition(float lfVerticalOffset = 0f)
	{
	}

	[Token(Token = "0x600171B")]
	[Address(RVA = "0xCBC1F0", Offset = "0xCBC1F0", VA = "0xCBC1F0")]
	protected void UpdateHeadTrackedPosition()
	{
	}

	[Token(Token = "0x600171C")]
	[Address(RVA = "0xCBC314", Offset = "0xCBC314", VA = "0xCBC314")]
	[DebuggerHidden]
	public IEnumerator FadeIn()
	{
		return null;
	}

	[Token(Token = "0x600171D")]
	[Address(RVA = "0xCBC39C", Offset = "0xCBC39C", VA = "0xCBC39C")]
	[DebuggerHidden]
	public IEnumerator FadeOut()
	{
		return null;
	}
}
[Token(Token = "0x2000388")]
public class BrowseController : MonoBehaviour
{
	[Token(Token = "0x2000389")]
	private enum BrowseContainerType
	{
		[Token(Token = "0x400130C")]
		Planets,
		[Token(Token = "0x400130D")]
		Stars,
		[Token(Token = "0x400130E")]
		Constellations,
		[Token(Token = "0x400130F")]
		Messiers,
		[Token(Token = "0x4001310")]
		Meteorites
	}

	[Token(Token = "0x2000436")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC3013C", Offset = "0xC3013C")]
	private sealed class <buildTogglePanel>c__AnonStorey0
	{
		[Token(Token = "0x400178F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal BrowseContainerType lBrowseContainerType;

		[Token(Token = "0x4001790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal BrowseController $this;

		[Token(Token = "0x6001AD2")]
		[Address(RVA = "0x16AF8C", Offset = "0x16AF8C", VA = "0x16AF8C")]
		public <buildTogglePanel>c__AnonStorey0()
		{
		}

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0x16BEC8", Offset = "0x16BEC8", VA = "0x16BEC8")]
		internal void <>m__0(bool value)
		{
		}
	}

	[Token(Token = "0x40012F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static BrowseContainerType seBrowseType;

	[Token(Token = "0x40012F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Text titleText;

	[Token(Token = "0x40012FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject searchPanel;

	[Token(Token = "0x40012FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject sortPanel;

	[Token(Token = "0x40012FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InputField inputField;

	[Token(Token = "0x40012FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Text placeHolderSearchText;

	[Token(Token = "0x40012FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LoopScrollRect loopScrollRect;

	[Token(Token = "0x40012FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Text sortButtonText;

	[Token(Token = "0x4001300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Button clearSearchTextButton;

	[Token(Token = "0x4001301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Toggle[] browsableContainerToggles;

	[Token(Token = "0x4001302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Sprite[] sortButtonSprites;

	[Token(Token = "0x4001303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Button sortReverseButton;

	[Token(Token = "0x4001304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject togglePanel;

	[Token(Token = "0x4001305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static LoopScrollRect sLoopScrollRect;

	[Token(Token = "0x4001306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static bool sbSearchActive;

	[Token(Token = "0x4001307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static BrowseController sInstance;

	[Token(Token = "0x4001308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static BrowsableContainer sBrowsableContainer;

	[Token(Token = "0x4001309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private OverlayMenuState mOverlayMenuState;

	[Token(Token = "0x400130A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<BrowseContainerType, BrowsableContainer> maBrowsableContainerDictionary;

	[Token(Token = "0x17000405")]
	public static BrowsableContainer browsableContainer
	{
		[Token(Token = "0x6001721")]
		[Address(RVA = "0x16A35C", Offset = "0x16A35C", VA = "0x16A35C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001720")]
	[Address(RVA = "0x16A354", Offset = "0x16A354", VA = "0x16A354")]
	public BrowseController()
	{
	}

	[Token(Token = "0x6001722")]
	[Address(RVA = "0x16A3E8", Offset = "0x16A3E8", VA = "0x16A3E8")]
	private BrowsableContainer getBrowsableContainer(BrowseContainerType type)
	{
		return null;
	}

	[Token(Token = "0x6001723")]
	[Address(RVA = "0x16A4A8", Offset = "0x16A4A8", VA = "0x16A4A8")]
	public void Initialise(OverlayMenuState overlayMenuState)
	{
	}

	[Token(Token = "0x6001724")]
	[Address(RVA = "0x16A4B0", Offset = "0x16A4B0", VA = "0x16A4B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001725")]
	[Address(RVA = "0x16A890", Offset = "0x16A890", VA = "0x16A890")]
	private void buildTogglePanel()
	{
	}

	[Token(Token = "0x6001726")]
	[Address(RVA = "0x16AF94", Offset = "0x16AF94", VA = "0x16AF94")]
	private void Update()
	{
	}

	[Token(Token = "0x6001727")]
	[Address(RVA = "0x16AF98", Offset = "0x16AF98", VA = "0x16AF98")]
	public static void RebuildContents()
	{
	}

	[Token(Token = "0x6001728")]
	[Address(RVA = "0x16B0D8", Offset = "0x16B0D8", VA = "0x16B0D8")]
	public void TextFieldValueChanged()
	{
	}

	[Token(Token = "0x6001729")]
	[Address(RVA = "0x16B294", Offset = "0x16B294", VA = "0x16B294")]
	private void updateInterfaceState()
	{
	}

	[Token(Token = "0x600172A")]
	[Address(RVA = "0x16B514", Offset = "0x16B514", VA = "0x16B514")]
	private void switchToBrowseType(BrowseContainerType type)
	{
	}

	[Token(Token = "0x600172B")]
	[Address(RVA = "0x16B654", Offset = "0x16B654", VA = "0x16B654")]
	public void SearchButtonPressed()
	{
	}

	[Token(Token = "0x600172C")]
	[Address(RVA = "0x16B758", Offset = "0x16B758", VA = "0x16B758")]
	public void TextClearButtonPressed()
	{
	}

	[Token(Token = "0x600172D")]
	[Address(RVA = "0x16B810", Offset = "0x16B810", VA = "0x16B810")]
	public void SortButtonPressed()
	{
	}

	[Token(Token = "0x600172E")]
	[Address(RVA = "0x16B8C0", Offset = "0x16B8C0", VA = "0x16B8C0")]
	public void SortReverseButtonPressed()
	{
	}

	[Token(Token = "0x600172F")]
	[Address(RVA = "0x16B974", Offset = "0x16B974", VA = "0x16B974")]
	public void CloseButtonPressed()
	{
	}

	[Token(Token = "0x6001730")]
	[Address(RVA = "0x16B99C", Offset = "0x16B99C", VA = "0x16B99C")]
	public static void HandleDesktopInput()
	{
	}

	[Token(Token = "0x6001731")]
	[Address(RVA = "0x16BA3C", Offset = "0x16BA3C", VA = "0x16BA3C")]
	private void handleDesktopInput()
	{
	}
}
namespace UnityEngine.UI
{
	[Token(Token = "0x200038A")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xC3014C", Offset = "0xC3014C")]
	[SelectionBase]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xC3014C", Offset = "0xC3014C")]
	public abstract class LoopScrollRect : UIBehaviour, IInitializePotentialDragHandler, IBeginDragHandler, IEndDragHandler, IDragHandler, IScrollHandler, ICanvasElement, ILayoutElement, ILayoutGroup, IEventSystemHandler, ILayoutController
	{
		[Token(Token = "0x200038B")]
		public enum MovementType
		{
			[Token(Token = "0x4001344")]
			Unrestricted,
			[Token(Token = "0x4001345")]
			Elastic,
			[Token(Token = "0x4001346")]
			Clamped
		}

		[Token(Token = "0x200038C")]
		public enum ScrollbarVisibility
		{
			[Token(Token = "0x4001348")]
			Permanent,
			[Token(Token = "0x4001349")]
			AutoHide,
			[Token(Token = "0x400134A")]
			AutoHideAndExpandViewport
		}

		[Serializable]
		[Token(Token = "0x200038D")]
		public class ScrollRectEvent : UnityEvent<Vector2>
		{
			[Token(Token = "0x600179A")]
			[Address(RVA = "0xCFFB3C", Offset = "0xCFFB3C", VA = "0xCFFB3C")]
			public ScrollRectEvent()
			{
			}
		}

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[HideInInspector]
		public EasyObjectPool prefabPool;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public string prefabPoolName;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[HideInInspector]
		public int totalCount;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public bool initInStart;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public float threshold;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool reverseDirection;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected int itemTypeStart;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected int itemTypeEnd;

		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected int directionSign;

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float m_ContentSpacing;

		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int m_ContentConstraintCount;

		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private RectTransform m_Content;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private bool m_Horizontal;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[SerializeField]
		private bool m_Vertical;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private MovementType m_MovementType;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float m_Elasticity;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private bool m_Inertia;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float m_DecelerationRate;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float m_ScrollSensitivity;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private RectTransform m_Viewport;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Scrollbar m_HorizontalScrollbar;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private Scrollbar m_VerticalScrollbar;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private ScrollbarVisibility m_HorizontalScrollbarVisibility;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private ScrollbarVisibility m_VerticalScrollbarVisibility;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float m_HorizontalScrollbarSpacing;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private float m_VerticalScrollbarSpacing;

		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private ScrollRectEvent m_OnValueChanged;

		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector2 m_PointerStartLocalCursor;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector2 m_ContentStartPosition;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private RectTransform m_ViewRect;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Bounds m_ContentBounds;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Bounds m_ViewBounds;

		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector2 m_Velocity;

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool m_Dragging;

		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int miIgnoreOffsetCount;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector2 mvPosAbsolute;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector2 m_PrevPosition;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Bounds m_PrevContentBounds;

		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Bounds m_PrevViewBounds;

		[NonSerialized]
		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private bool m_HasRebuiltLayout;

		[Token(Token = "0x4001339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
		private bool m_HSliderExpand;

		[Token(Token = "0x400133A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10A")]
		private bool m_VSliderExpand;

		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private float m_HSliderHeight;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float m_VSliderWidth;

		[NonSerialized]
		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private RectTransform m_Rect;

		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private RectTransform m_HorizontalScrollbarRect;

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private RectTransform m_VerticalScrollbarRect;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private DrivenRectTransformTracker m_Tracker;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC30380", Offset = "0xC30380")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xC30380", Offset = "0xC30380")]
		private float <flexibleWidth>k__BackingField;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private readonly Vector3[] m_Corners;

		[Token(Token = "0x17000406")]
		protected float contentSpacing
		{
			[Token(Token = "0x6001737")]
			[Address(RVA = "0xCC4E30", Offset = "0xCC4E30", VA = "0xCC4E30")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000407")]
		protected int contentConstraintCount
		{
			[Token(Token = "0x6001738")]
			[Address(RVA = "0xCC5034", Offset = "0xCC5034", VA = "0xCC5034")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000408")]
		public RectTransform content
		{
			[Token(Token = "0x600173A")]
			[Address(RVA = "0xCC502C", Offset = "0xCC502C", VA = "0xCC502C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600173B")]
			[Address(RVA = "0xCC51E4", Offset = "0xCC51E4", VA = "0xCC51E4")]
			set
			{
			}
		}

		[Token(Token = "0x17000409")]
		public bool horizontal
		{
			[Token(Token = "0x600173C")]
			[Address(RVA = "0xCC51EC", Offset = "0xCC51EC", VA = "0xCC51EC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600173D")]
			[Address(RVA = "0xCC51F4", Offset = "0xCC51F4", VA = "0xCC51F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700040A")]
		public bool vertical
		{
			[Token(Token = "0x600173E")]
			[Address(RVA = "0xCC51FC", Offset = "0xCC51FC", VA = "0xCC51FC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600173F")]
			[Address(RVA = "0xCC5204", Offset = "0xCC5204", VA = "0xCC5204")]
			set
			{
			}
		}

		[Token(Token = "0x1700040B")]
		public MovementType movementType
		{
			[Token(Token = "0x6001740")]
			[Address(RVA = "0xCC520C", Offset = "0xCC520C", VA = "0xCC520C")]
			get
			{
				return default(MovementType);
			}
			[Token(Token = "0x6001741")]
			[Address(RVA = "0xCC5214", Offset = "0xCC5214", VA = "0xCC5214")]
			set
			{
			}
		}

		[Token(Token = "0x1700040C")]
		public float elasticity
		{
			[Token(Token = "0x6001742")]
			[Address(RVA = "0xCC521C", Offset = "0xCC521C", VA = "0xCC521C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001743")]
			[Address(RVA = "0xCC5224", Offset = "0xCC5224", VA = "0xCC5224")]
			set
			{
			}
		}

		[Token(Token = "0x1700040D")]
		public bool inertia
		{
			[Token(Token = "0x6001744")]
			[Address(RVA = "0xCC522C", Offset = "0xCC522C", VA = "0xCC522C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001745")]
			[Address(RVA = "0xCC5234", Offset = "0xCC5234", VA = "0xCC5234")]
			set
			{
			}
		}

		[Token(Token = "0x1700040E")]
		public float decelerationRate
		{
			[Token(Token = "0x6001746")]
			[Address(RVA = "0xCC523C", Offset = "0xCC523C", VA = "0xCC523C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001747")]
			[Address(RVA = "0xCC5244", Offset = "0xCC5244", VA = "0xCC5244")]
			set
			{
			}
		}

		[Token(Token = "0x1700040F")]
		public float scrollSensitivity
		{
			[Token(Token = "0x6001748")]
			[Address(RVA = "0xCC524C", Offset = "0xCC524C", VA = "0xCC524C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001749")]
			[Address(RVA = "0xCC5254", Offset = "0xCC5254", VA = "0xCC5254")]
			set
			{
			}
		}

		[Token(Token = "0x17000410")]
		public RectTransform viewport
		{
			[Token(Token = "0x600174A")]
			[Address(RVA = "0xCC525C", Offset = "0xCC525C", VA = "0xCC525C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600174B")]
			[Address(RVA = "0xCC5264", Offset = "0xCC5264", VA = "0xCC5264")]
			set
			{
			}
		}

		[Token(Token = "0x17000411")]
		public Scrollbar horizontalScrollbar
		{
			[Token(Token = "0x600174C")]
			[Address(RVA = "0xCC5358", Offset = "0xCC5358", VA = "0xCC5358")]
			get
			{
				return null;
			}
			[Token(Token = "0x600174D")]
			[Address(RVA = "0xCC5360", Offset = "0xCC5360", VA = "0xCC5360")]
			set
			{
			}
		}

		[Token(Token = "0x17000412")]
		public Scrollbar verticalScrollbar
		{
			[Token(Token = "0x600174E")]
			[Address(RVA = "0xCC5568", Offset = "0xCC5568", VA = "0xCC5568")]
			get
			{
				return null;
			}
			[Token(Token = "0x600174F")]
			[Address(RVA = "0xCC5570", Offset = "0xCC5570", VA = "0xCC5570")]
			set
			{
			}
		}

		[Token(Token = "0x17000413")]
		public ScrollbarVisibility horizontalScrollbarVisibility
		{
			[Token(Token = "0x6001750")]
			[Address(RVA = "0xCC5778", Offset = "0xCC5778", VA = "0xCC5778")]
			get
			{
				return default(ScrollbarVisibility);
			}
			[Token(Token = "0x6001751")]
			[Address(RVA = "0xCC5780", Offset = "0xCC5780", VA = "0xCC5780")]
			set
			{
			}
		}

		[Token(Token = "0x17000414")]
		public ScrollbarVisibility verticalScrollbarVisibility
		{
			[Token(Token = "0x6001752")]
			[Address(RVA = "0xCC5788", Offset = "0xCC5788", VA = "0xCC5788")]
			get
			{
				return default(ScrollbarVisibility);
			}
			[Token(Token = "0x6001753")]
			[Address(RVA = "0xCC5790", Offset = "0xCC5790", VA = "0xCC5790")]
			set
			{
			}
		}

		[Token(Token = "0x17000415")]
		public float horizontalScrollbarSpacing
		{
			[Token(Token = "0x6001754")]
			[Address(RVA = "0xCC5798", Offset = "0xCC5798", VA = "0xCC5798")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001755")]
			[Address(RVA = "0xCC57A0", Offset = "0xCC57A0", VA = "0xCC57A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000416")]
		public float verticalScrollbarSpacing
		{
			[Token(Token = "0x6001756")]
			[Address(RVA = "0xCC5858", Offset = "0xCC5858", VA = "0xCC5858")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001757")]
			[Address(RVA = "0xCC5860", Offset = "0xCC5860", VA = "0xCC5860")]
			set
			{
			}
		}

		[Token(Token = "0x17000417")]
		public ScrollRectEvent onValueChanged
		{
			[Token(Token = "0x6001758")]
			[Address(RVA = "0xCC5868", Offset = "0xCC5868", VA = "0xCC5868")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001759")]
			[Address(RVA = "0xCC5870", Offset = "0xCC5870", VA = "0xCC5870")]
			set
			{
			}
		}

		[Token(Token = "0x17000418")]
		protected RectTransform viewRect
		{
			[Token(Token = "0x600175A")]
			[Address(RVA = "0xCC5878", Offset = "0xCC5878", VA = "0xCC5878")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000419")]
		public Vector2 velocity
		{
			[Token(Token = "0x600175B")]
			[Address(RVA = "0xCC59EC", Offset = "0xCC59EC", VA = "0xCC59EC")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x600175C")]
			[Address(RVA = "0xCC5A00", Offset = "0xCC5A00", VA = "0xCC5A00")]
			set
			{
			}
		}

		[Token(Token = "0x1700041A")]
		private RectTransform rectTransform
		{
			[Token(Token = "0x600175D")]
			[Address(RVA = "0xCC5A0C", Offset = "0xCC5A0C", VA = "0xCC5A0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700041B")]
		public Vector2 normalizedPosition
		{
			[Token(Token = "0x6001778")]
			[Address(RVA = "0xCC9C9C", Offset = "0xCC9C9C", VA = "0xCC9C9C")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001779")]
			[Address(RVA = "0xCC9EF4", Offset = "0xCC9EF4", VA = "0xCC9EF4")]
			set
			{
			}
		}

		[Token(Token = "0x1700041C")]
		public float horizontalNormalizedPosition
		{
			[Token(Token = "0x600177A")]
			[Address(RVA = "0xCC9CE4", Offset = "0xCC9CE4", VA = "0xCC9CE4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600177B")]
			[Address(RVA = "0xCCA220", Offset = "0xCCA220", VA = "0xCCA220")]
			set
			{
			}
		}

		[Token(Token = "0x1700041D")]
		public float verticalNormalizedPosition
		{
			[Token(Token = "0x600177C")]
			[Address(RVA = "0xCC9DEC", Offset = "0xCC9DEC", VA = "0xCC9DEC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600177D")]
			[Address(RVA = "0xCCA228", Offset = "0xCCA228", VA = "0xCCA228")]
			set
			{
			}
		}

		[Token(Token = "0x1700041E")]
		private bool hScrollingNeeded
		{
			[Token(Token = "0x6001783")]
			[Address(RVA = "0xCCA244", Offset = "0xCCA244", VA = "0xCCA244")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700041F")]
		private bool vScrollingNeeded
		{
			[Token(Token = "0x6001784")]
			[Address(RVA = "0xCCA2C8", Offset = "0xCCA2C8", VA = "0xCCA2C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000420")]
		public virtual float minWidth
		{
			[Token(Token = "0x6001787")]
			[Address(RVA = "0xCCA354", Offset = "0xCCA354", VA = "0xCCA354", Slot = "55")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000421")]
		public virtual float preferredWidth
		{
			[Token(Token = "0x6001788")]
			[Address(RVA = "0xCCA360", Offset = "0xCCA360", VA = "0xCCA360", Slot = "56")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000422")]
		public virtual float flexibleWidth
		{
			[Token(Token = "0x6001789")]
			[Address(RVA = "0xCCA36C", Offset = "0xCCA36C", VA = "0xCCA36C", Slot = "57")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC303B4", Offset = "0xC303B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600178A")]
			[Address(RVA = "0xCC4E28", Offset = "0xCC4E28", VA = "0xCC4E28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC303C4", Offset = "0xC303C4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000423")]
		public virtual float minHeight
		{
			[Token(Token = "0x600178B")]
			[Address(RVA = "0xCCA374", Offset = "0xCCA374", VA = "0xCCA374", Slot = "58")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000424")]
		public virtual float preferredHeight
		{
			[Token(Token = "0x600178C")]
			[Address(RVA = "0xCCA380", Offset = "0xCCA380", VA = "0xCCA380", Slot = "59")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000425")]
		public virtual float flexibleHeight
		{
			[Token(Token = "0x600178D")]
			[Address(RVA = "0xCCA38C", Offset = "0xCCA38C", VA = "0xCCA38C", Slot = "60")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000426")]
		public virtual int layoutPriority
		{
			[Token(Token = "0x600178E")]
			[Address(RVA = "0xCCA398", Offset = "0xCCA398", VA = "0xCCA398", Slot = "61")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001733")]
		[Address(RVA = "0xCC4C80", Offset = "0xCC4C80", VA = "0xCC4C80")]
		protected LoopScrollRect()
		{
		}

		[Token(Token = "0x6001734")]
		protected abstract float GetSize(RectTransform item);

		[Token(Token = "0x6001735")]
		protected abstract float GetDimension(Vector2 vector);

		[Token(Token = "0x6001736")]
		protected abstract Vector2 GetVector(float value);

		[Token(Token = "0x6001739")]
		[Address(RVA = "0xCC51DC", Offset = "0xCC51DC", VA = "0xCC51DC", Slot = "41")]
		protected virtual bool UpdateItems(Bounds viewBounds, Bounds contentBounds)
		{
			return default(bool);
		}

		[Token(Token = "0x600175E")]
		[Address(RVA = "0xCC5AC4", Offset = "0xCC5AC4", VA = "0xCC5AC4", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600175F")]
		[Address(RVA = "0xCC5D3C", Offset = "0xCC5D3C", VA = "0xCC5D3C")]
		public void ClearCells()
		{
		}

		[Token(Token = "0x6001760")]
		[Address(RVA = "0xCC5AF4", Offset = "0xCC5AF4", VA = "0xCC5AF4")]
		public void RefillCells(int startIdx = 0)
		{
		}

		[Token(Token = "0x6001761")]
		[Address(RVA = "0xCC62C8", Offset = "0xCC62C8", VA = "0xCC62C8")]
		protected float NewItemAtStart()
		{
			return default(float);
		}

		[Token(Token = "0x6001762")]
		[Address(RVA = "0xCC6690", Offset = "0xCC6690", VA = "0xCC6690")]
		protected float DeleteItemAtStart()
		{
			return default(float);
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0xCC6998", Offset = "0xCC6998", VA = "0xCC6998")]
		protected float NewItemAtEnd()
		{
			return default(float);
		}

		[Token(Token = "0x6001764")]
		[Address(RVA = "0xCC6BD8", Offset = "0xCC6BD8", VA = "0xCC6BD8")]
		protected float DeleteItemAtEnd()
		{
			return default(float);
		}

		[Token(Token = "0x6001765")]
		[Address(RVA = "0xCC6520", Offset = "0xCC6520", VA = "0xCC6520")]
		private RectTransform InstantiateNextItem(int itemIdx)
		{
			return null;
		}

		[Token(Token = "0x6001766")]
		[Address(RVA = "0xCC6F8C", Offset = "0xCC6F8C", VA = "0xCC6F8C", Slot = "42")]
		public virtual void Rebuild(CanvasUpdate executing)
		{
		}

		[Token(Token = "0x6001767")]
		[Address(RVA = "0xCC7AA8", Offset = "0xCC7AA8", VA = "0xCC7AA8", Slot = "43")]
		public virtual void LayoutComplete()
		{
		}

		[Token(Token = "0x6001768")]
		[Address(RVA = "0xCC7AAC", Offset = "0xCC7AAC", VA = "0xCC7AAC", Slot = "44")]
		public virtual void GraphicUpdateComplete()
		{
		}

		[Token(Token = "0x6001769")]
		[Address(RVA = "0xCC7068", Offset = "0xCC7068", VA = "0xCC7068")]
		private void UpdateCachedData()
		{
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0xCC7AB0", Offset = "0xCC7AB0", VA = "0xCC7AB0", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600176B")]
		[Address(RVA = "0xCC7CF4", Offset = "0xCC7CF4", VA = "0xCC7CF4", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x600176C")]
		[Address(RVA = "0xCC7FE4", Offset = "0xCC7FE4", VA = "0xCC7FE4", Slot = "9")]
		public override bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0xCC8094", Offset = "0xCC8094", VA = "0xCC8094")]
		private void EnsureLayoutHasRebuilt()
		{
		}

		[Token(Token = "0x600176E")]
		[Address(RVA = "0xCC813C", Offset = "0xCC813C", VA = "0xCC813C", Slot = "45")]
		public virtual void StopMovement()
		{
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0xCC81D8", Offset = "0xCC81D8", VA = "0xCC81D8", Slot = "46")]
		public virtual void OnScroll(PointerEventData data)
		{
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0xCC8800", Offset = "0xCC8800", VA = "0xCC8800", Slot = "47")]
		public virtual void OnInitializePotentialDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001771")]
		[Address(RVA = "0xCC88C0", Offset = "0xCC88C0", VA = "0xCC88C0", Slot = "48")]
		public virtual void OnBeginDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0xCC8A80", Offset = "0xCC8A80", VA = "0xCC8A80", Slot = "49")]
		public virtual void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0xCC8AB8", Offset = "0xCC8AB8", VA = "0xCC8AB8", Slot = "50")]
		public virtual void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001774")]
		[Address(RVA = "0xCC8EE8", Offset = "0xCC8EE8", VA = "0xCC8EE8", Slot = "51")]
		protected virtual void SetContentAnchoredPosition(Vector2 position)
		{
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0xCC9050", Offset = "0xCC9050", VA = "0xCC9050", Slot = "52")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0xCC7978", Offset = "0xCC7978", VA = "0xCC7978")]
		private void UpdatePrevData()
		{
		}

		[Token(Token = "0x6001777")]
		[Address(RVA = "0xCC7684", Offset = "0xCC7684", VA = "0xCC7684")]
		private void UpdateScrollbars(Vector2 offset)
		{
		}

		[Token(Token = "0x600177E")]
		[Address(RVA = "0xCCA230", Offset = "0xCCA230", VA = "0xCCA230")]
		private void SetHorizontalNormalizedPosition(float value)
		{
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0xCCA238", Offset = "0xCCA238", VA = "0xCCA238")]
		private void SetVerticalNormalizedPosition(float value)
		{
		}

		[Token(Token = "0x6001780")]
		[Address(RVA = "0xCC9F20", Offset = "0xCC9F20", VA = "0xCC9F20")]
		private void SetNormalizedPosition(float value, int axis)
		{
		}

		[Token(Token = "0x6001781")]
		[Address(RVA = "0xCC8E14", Offset = "0xCC8E14", VA = "0xCC8E14")]
		private static float RubberDelta(float overStretching, float viewSize)
		{
			return default(float);
		}

		[Token(Token = "0x6001782")]
		[Address(RVA = "0xCCA240", Offset = "0xCCA240", VA = "0xCCA240", Slot = "10")]
		protected override void OnRectTransformDimensionsChange()
		{
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0xCCA34C", Offset = "0xCCA34C", VA = "0xCCA34C", Slot = "53")]
		public virtual void CalculateLayoutInputHorizontal()
		{
		}

		[Token(Token = "0x6001786")]
		[Address(RVA = "0xCCA350", Offset = "0xCCA350", VA = "0xCCA350", Slot = "54")]
		public virtual void CalculateLayoutInputVertical()
		{
		}

		[Token(Token = "0x600178F")]
		[Address(RVA = "0xCCA3A0", Offset = "0xCCA3A0", VA = "0xCCA3A0", Slot = "62")]
		public virtual void SetLayoutHorizontal()
		{
		}

		[Token(Token = "0x6001790")]
		[Address(RVA = "0xCCAFD8", Offset = "0xCCAFD8", VA = "0xCCAFD8", Slot = "63")]
		public virtual void SetLayoutVertical()
		{
		}

		[Token(Token = "0x6001791")]
		[Address(RVA = "0xCC9A74", Offset = "0xCC9A74", VA = "0xCC9A74")]
		private void UpdateScrollbarVisibility()
		{
		}

		[Token(Token = "0x6001792")]
		[Address(RVA = "0xCCB1B0", Offset = "0xCCB1B0", VA = "0xCCB1B0")]
		private void UpdateScrollbarLayout()
		{
		}

		[Token(Token = "0x6001793")]
		[Address(RVA = "0xCC5E04", Offset = "0xCC5E04", VA = "0xCC5E04")]
		private void UpdateBounds(bool updateItems = true)
		{
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0xCCAC84", Offset = "0xCCAC84", VA = "0xCCAC84")]
		private Bounds GetBounds()
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001795")]
		[Address(RVA = "0xCC857C", Offset = "0xCC857C", VA = "0xCC857C")]
		private Vector2 CalculateOffset(Vector2 delta)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001796")]
		[Address(RVA = "0xCC57A8", Offset = "0xCC57A8", VA = "0xCC57A8")]
		protected void SetDirty()
		{
		}

		[Token(Token = "0x6001797")]
		[Address(RVA = "0xCC526C", Offset = "0xCC526C", VA = "0xCC526C")]
		protected void SetDirtyCaching()
		{
		}

		[Token(Token = "0x6001798")]
		[Address(RVA = "0xCCB690", Offset = "0xCCB690", VA = "0xCCB690", Slot = "23")]
		private Transform UnityEngine.UI.ICanvasElement.get_transform()
		{
			return null;
		}

		[Token(Token = "0x6001799")]
		[Address(RVA = "0xCCB698", Offset = "0xCCB698", VA = "0xCCB698", Slot = "26")]
		private bool UnityEngine.UI.ICanvasElement.IsDestroyed()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200038E")]
	public class LoopVerticalScrollRect : LoopScrollRect
	{
		[Token(Token = "0x600179B")]
		[Address(RVA = "0xCFFBA0", Offset = "0xCFFBA0", VA = "0xCFFBA0")]
		public LoopVerticalScrollRect()
		{
		}

		[Token(Token = "0x600179C")]
		[Address(RVA = "0xCFFBA8", Offset = "0xCFFBA8", VA = "0xCFFBA8", Slot = "38")]
		protected override float GetSize(RectTransform item)
		{
			return default(float);
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0xCFFBE8", Offset = "0xCFFBE8", VA = "0xCFFBE8", Slot = "39")]
		protected override float GetDimension(Vector2 vector)
		{
			return default(float);
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0xCFFBF0", Offset = "0xCFFBF0", VA = "0xCFFBF0", Slot = "40")]
		protected override Vector2 GetVector(float value)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600179F")]
		[Address(RVA = "0xCFFC14", Offset = "0xCFFC14", VA = "0xCFFC14", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60017A0")]
		[Address(RVA = "0xCFFD60", Offset = "0xCFFD60", VA = "0xCFFD60", Slot = "41")]
		protected override bool UpdateItems(Bounds viewBounds, Bounds contentBounds)
		{
			return default(bool);
		}
	}
}
[Token(Token = "0x200038F")]
public class ScrollIndexCallback1 : MonoBehaviour
{
	[Token(Token = "0x400134B")]
	private const int ICON_SIZE_LARGE = 48;

	[Token(Token = "0x400134C")]
	private const int ICON_SIZE_DEFAULT = 32;

	[Token(Token = "0x400134D")]
	private const int ICON_SIZE_SMALL = 16;

	[Token(Token = "0x400134E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Image image;

	[Token(Token = "0x400134F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Text heading;

	[Token(Token = "0x4001350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Text subHeading;

	[Token(Token = "0x4001351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Button expandableButton;

	[Token(Token = "0x4001352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Image expandableImage;

	[Token(Token = "0x4001353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image collapseImage;

	[Token(Token = "0x4001354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Image expandImageDefault;

	[Token(Token = "0x4001355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int miIndex;

	[Token(Token = "0x60017A1")]
	[Address(RVA = "0xE06E5C", Offset = "0xE06E5C", VA = "0xE06E5C")]
	public ScrollIndexCallback1()
	{
	}

	[Token(Token = "0x60017A2")]
	[Address(RVA = "0xE06E64", Offset = "0xE06E64", VA = "0xE06E64")]
	private void ScrollCellIndex(int index)
	{
	}

	[Token(Token = "0x60017A3")]
	[Address(RVA = "0xE07BB8", Offset = "0xE07BB8", VA = "0xE07BB8")]
	public void OnButtonPress()
	{
	}

	[Token(Token = "0x60017A4")]
	[Address(RVA = "0xE07D14", Offset = "0xE07D14", VA = "0xE07D14")]
	public void OnExpandButtonPress()
	{
	}

	[Token(Token = "0x60017A5")]
	[Address(RVA = "0xE07AC4", Offset = "0xE07AC4", VA = "0xE07AC4")]
	private IFindableObject getFindableObject()
	{
		return null;
	}
}
namespace UserInterface.Collidables
{
	[Token(Token = "0x2000390")]
	public class Manager : MonoBehaviour
	{
		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected List<UIElement> maCollidableUIElements;

		[Token(Token = "0x60017A6")]
		[Address(RVA = "0xD03724", Offset = "0xD03724", VA = "0xD03724")]
		public Manager()
		{
		}

		[Token(Token = "0x60017A7")]
		[Address(RVA = "0xD0372C", Offset = "0xD0372C", VA = "0xD0372C")]
		protected void Start()
		{
		}

		[Token(Token = "0x60017A8")]
		[Address(RVA = "0xD037AC", Offset = "0xD037AC", VA = "0xD037AC")]
		protected void Update()
		{
		}

		[Token(Token = "0x60017A9")]
		[Address(RVA = "0xD037B0", Offset = "0xD037B0", VA = "0xD037B0")]
		protected void LateUpdate()
		{
		}
	}
	[Token(Token = "0x2000391")]
	public class UIElement : MonoBehaviour
	{
		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected Rect mObjectCollisionRect;

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float mfCollisionDepthOffset;

		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool mbCollisionIntersectsViewport;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3[] maCollisionCorners;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rect mViewCollisionRect;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool mbIsCollidingWithCircle;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private List<UIElement> maElementsColliding;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform mCollisionTransform;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float mfPriority;

		[Token(Token = "0x17000427")]
		public float collisionDepthOffset
		{
			[Token(Token = "0x60017AB")]
			[Address(RVA = "0xD01BC8", Offset = "0xD01BC8", VA = "0xD01BC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000428")]
		public bool collisionIntersectsViewport
		{
			[Token(Token = "0x60017AC")]
			[Address(RVA = "0xD038D8", Offset = "0xD038D8", VA = "0xD038D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000429")]
		public Rect viewCollisionRect
		{
			[Token(Token = "0x60017AD")]
			[Address(RVA = "0xD038E0", Offset = "0xD038E0", VA = "0xD038E0")]
			get
			{
				return default(Rect);
			}
		}

		[Token(Token = "0x1700042A")]
		public Transform collisionTransform
		{
			[Token(Token = "0x60017AE")]
			[Address(RVA = "0xD021C4", Offset = "0xD021C4", VA = "0xD021C4")]
			set
			{
			}
		}

		[Token(Token = "0x1700042B")]
		public float priority
		{
			[Token(Token = "0x60017AF")]
			[Address(RVA = "0xD0102C", Offset = "0xD0102C", VA = "0xD0102C")]
			set
			{
			}
		}

		[Token(Token = "0x60017AA")]
		[Address(RVA = "0xD03824", Offset = "0xD03824", VA = "0xD03824")]
		public UIElement()
		{
		}

		[Token(Token = "0x60017B0")]
		[Address(RVA = "0xD038F4", Offset = "0xD038F4", VA = "0xD038F4")]
		protected void Start()
		{
		}

		[Token(Token = "0x60017B1")]
		[Address(RVA = "0xD03924", Offset = "0xD03924", VA = "0xD03924")]
		public void UpdateManually()
		{
		}

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0xD04010", Offset = "0xD04010", VA = "0xD04010")]
		public void SetCollision(Rect rect)
		{
		}

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0xD04020", Offset = "0xD04020", VA = "0xD04020")]
		public void AppendToCollision(Rect rect)
		{
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0xD041C8", Offset = "0xD041C8", VA = "0xD041C8")]
		public void ClearCollisions()
		{
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0xD0423C", Offset = "0xD0423C", VA = "0xD0423C")]
		public void AddCollision(UIElement collidingElement)
		{
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0xD042B8", Offset = "0xD042B8", VA = "0xD042B8")]
		public void SetCollidingWithCircle(bool colliding)
		{
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0xD0348C", Offset = "0xD0348C", VA = "0xD0348C")]
		protected bool CompareCollisions()
		{
			return default(bool);
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0xD042C0", Offset = "0xD042C0", VA = "0xD042C0")]
		public void RemoveFromCollision(UIElement element)
		{
		}
	}
}
[Token(Token = "0x2000392")]
public class ControllerConnectPanel : MonoBehaviour
{
	[Token(Token = "0x4001360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Text mStatusText;

	[Token(Token = "0x4001361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Transform mRootTransform;

	[Token(Token = "0x60017B9")]
	[Address(RVA = "0x181690", Offset = "0x181690", VA = "0x181690")]
	public ControllerConnectPanel()
	{
	}

	[Token(Token = "0x60017BA")]
	[Address(RVA = "0x181698", Offset = "0x181698", VA = "0x181698")]
	private void Awake()
	{
	}

	[Token(Token = "0x60017BB")]
	[Address(RVA = "0x181794", Offset = "0x181794", VA = "0x181794")]
	public void SetStatusText(string lText)
	{
	}

	[Token(Token = "0x60017BC")]
	[Address(RVA = "0x1817CC", Offset = "0x1817CC", VA = "0x1817CC")]
	private void Update()
	{
	}

	[Token(Token = "0x60017BD")]
	[Address(RVA = "0x1817D0", Offset = "0x1817D0", VA = "0x1817D0")]
	private void UpdateHeadTrackedPosition()
	{
	}
}
namespace UserInterface
{
	[Token(Token = "0x2000393")]
	public class InformationCategory
	{
		[Token(Token = "0x2000394")]
		public enum Types
		{
			[Token(Token = "0x4001366")]
			None,
			[Token(Token = "0x4001367")]
			Classification,
			[Token(Token = "0x4001368")]
			Characteristics,
			[Token(Token = "0x4001369")]
			AtmosphericComposition,
			[Token(Token = "0x400136A")]
			System,
			[Token(Token = "0x400136B")]
			Distance,
			[Token(Token = "0x400136C")]
			Metrics,
			[Token(Token = "0x400136D")]
			Position
		}

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string[] saNameKeys;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Types meType;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private List<InformationElement.Types> maInformationElementTypes;

		[Token(Token = "0x1700042C")]
		public Types type
		{
			[Token(Token = "0x60017BF")]
			[Address(RVA = "0xD05BDC", Offset = "0xD05BDC", VA = "0xD05BDC")]
			get
			{
				return default(Types);
			}
		}

		[Token(Token = "0x1700042D")]
		public List<InformationElement.Types> informationElementTypes
		{
			[Token(Token = "0x60017C0")]
			[Address(RVA = "0xD05BE4", Offset = "0xD05BE4", VA = "0xD05BE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700042E")]
		public string name
		{
			[Token(Token = "0x60017C2")]
			[Address(RVA = "0xD05C68", Offset = "0xD05C68", VA = "0xD05C68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0xD05B48", Offset = "0xD05B48", VA = "0xD05B48")]
		public InformationCategory(Types type)
		{
		}

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0xD05BEC", Offset = "0xD05BEC", VA = "0xD05BEC")]
		public void Add(InformationElement.Types informationElement)
		{
		}
	}
	[Token(Token = "0x2000395")]
	public class InformationElement
	{
		[Token(Token = "0x2000396")]
		public enum Types
		{
			[Token(Token = "0x4001375")]
			BodyType,
			[Token(Token = "0x4001376")]
			BayerFlamsteedName,
			[Token(Token = "0x4001377")]
			HIP,
			[Token(Token = "0x4001378")]
			HD,
			[Token(Token = "0x4001379")]
			HR,
			[Token(Token = "0x400137A")]
			Gliese,
			[Token(Token = "0x400137B")]
			Population,
			[Token(Token = "0x400137C")]
			DistanceFromCurrentPlanet,
			[Token(Token = "0x400137D")]
			DistanceFromParent,
			[Token(Token = "0x400137E")]
			SatelliteCount,
			[Token(Token = "0x400137F")]
			OrderInSystem,
			[Token(Token = "0x4001380")]
			UnknownSurface,
			[Token(Token = "0x4001381")]
			OrbitalPeriod,
			[Token(Token = "0x4001382")]
			RotationPeriod,
			[Token(Token = "0x4001383")]
			AtmosphericPressure,
			[Token(Token = "0x4001384")]
			AtmosphericComposition,
			[Token(Token = "0x4001385")]
			Diameter,
			[Token(Token = "0x4001386")]
			AxialTilt,
			[Token(Token = "0x4001387")]
			ApparentMagnitude,
			[Token(Token = "0x4001388")]
			AbsoluteMagnitude,
			[Token(Token = "0x4001389")]
			Constellation,
			[Token(Token = "0x400138A")]
			RA,
			[Token(Token = "0x400138B")]
			DEC,
			[Token(Token = "0x400138C")]
			Altitude,
			[Token(Token = "0x400138D")]
			Azimuth,
			[Token(Token = "0x400138E")]
			Country,
			[Token(Token = "0x400138F")]
			LocalTime,
			[Token(Token = "0x4001390")]
			LocalPopulation,
			[Token(Token = "0x4001391")]
			GeoFeatureType,
			[Token(Token = "0x4001392")]
			GeoFeatureDiameter,
			[Token(Token = "0x4001393")]
			GeoFeatureElevation,
			[Token(Token = "0x4001394")]
			CountryOfOrigin,
			[Token(Token = "0x4001395")]
			LaunchDate,
			[Token(Token = "0x4001396")]
			LandingDate,
			[Token(Token = "0x4001397")]
			MissionDuration,
			[Token(Token = "0x4001398")]
			Crew,
			[Token(Token = "0x4001399")]
			MessierNumber,
			[Token(Token = "0x400139A")]
			NGCnumber,
			[Token(Token = "0x400139B")]
			ActiveDates,
			[Token(Token = "0x400139C")]
			PeakDate,
			[Token(Token = "0x400139D")]
			SpeedKMS,
			[Token(Token = "0x400139E")]
			HourlyRate,
			[Token(Token = "0x400139F")]
			Intensity
		}

		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string[] saHeadingKeys;

		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private ISelectableObject mSelectableObject;

		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Types mCurrentElement;

		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool mbIsLive;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private string msHeading;

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string msData;

		[Token(Token = "0x1700042F")]
		public bool isLive
		{
			[Token(Token = "0x60017C5")]
			[Address(RVA = "0xD08928", Offset = "0xD08928", VA = "0xD08928")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000430")]
		public string heading
		{
			[Token(Token = "0x60017C6")]
			[Address(RVA = "0xD08930", Offset = "0xD08930", VA = "0xD08930")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000431")]
		public string data
		{
			[Token(Token = "0x60017C7")]
			[Address(RVA = "0xD08938", Offset = "0xD08938", VA = "0xD08938")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0xD06088", Offset = "0xD06088", VA = "0xD06088")]
		public InformationElement(ISelectableObject selectableObject, Types currentElement)
		{
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0xD08940", Offset = "0xD08940", VA = "0xD08940")]
		public void Update()
		{
		}

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0xD06738", Offset = "0xD06738", VA = "0xD06738")]
		private string getData()
		{
			return null;
		}
	}
	[Token(Token = "0x2000397")]
	public class PanelController : MonoBehaviour
	{
		[Token(Token = "0x2000398")]
		public delegate void OnPanelItemSelectedEvent(PanelItemController.PanelItemType lSelected);

		[Token(Token = "0x2000399")]
		public delegate void OnPanelItemHeldEvent(PanelItemController.PanelItemType lSelected);

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected PanelItemController[] maItems;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected int miCurrentItem;

		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected PanelItemController mHitItem;

		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected int miStickyHeldItem;

		[Token(Token = "0x14000005")]
		public event OnPanelItemSelectedEvent OnPanelItemSelected
		{
			[Token(Token = "0x60017CC")]
			[Address(RVA = "0xD1B284", Offset = "0xD1B284", VA = "0xD1B284")]
			add
			{
			}
			[Token(Token = "0x60017CD")]
			[Address(RVA = "0xD1B378", Offset = "0xD1B378", VA = "0xD1B378")]
			remove
			{
			}
		}

		[Token(Token = "0x14000006")]
		public event OnPanelItemHeldEvent OnPanelItemHeld
		{
			[Token(Token = "0x60017CE")]
			[Address(RVA = "0xD1B46C", Offset = "0xD1B46C", VA = "0xD1B46C")]
			add
			{
			}
			[Token(Token = "0x60017CF")]
			[Address(RVA = "0xD1B560", Offset = "0xD1B560", VA = "0xD1B560")]
			remove
			{
			}
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0xD1B27C", Offset = "0xD1B27C", VA = "0xD1B27C")]
		public PanelController()
		{
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0xD1B654", Offset = "0xD1B654", VA = "0xD1B654", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0xD1B6C8", Offset = "0xD1B6C8", VA = "0xD1B6C8")]
		private void Update()
		{
		}

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0xD1BCF4", Offset = "0xD1BCF4", VA = "0xD1BCF4")]
		private void updateFromHits()
		{
		}
	}
	[Token(Token = "0x200039A")]
	public class PanelItemController : MonoBehaviour
	{
		[Token(Token = "0x200039B")]
		public enum PanelItemType
		{
			[Token(Token = "0x40013BA")]
			OrreryPauseButton,
			[Token(Token = "0x40013BB")]
			OrreryResetButton,
			[Token(Token = "0x40013BC")]
			OrreryForwardButton,
			[Token(Token = "0x40013BD")]
			OrreryBackwardButton,
			[Token(Token = "0x40013BE")]
			OrreryUpButton,
			[Token(Token = "0x40013BF")]
			OrreryDownButton,
			[Token(Token = "0x40013C0")]
			NavHomeButton,
			[Token(Token = "0x40013C1")]
			NavTourButton,
			[Token(Token = "0x40013C2")]
			None
		}

		[Token(Token = "0x200039C")]
		private enum State
		{
			[Token(Token = "0x40013C4")]
			Idle,
			[Token(Token = "0x40013C5")]
			GainingFocus,
			[Token(Token = "0x40013C6")]
			Focussed,
			[Token(Token = "0x40013C7")]
			LosingFocus
		}

		[Token(Token = "0x2000437")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC3046C", Offset = "0xC3046C")]
		private sealed class <GainingFocus>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001791")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <lfFocusSpeed>__0;

			[Token(Token = "0x4001792")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal PanelItemController $this;

			[Token(Token = "0x4001793")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal object $current;

			[Token(Token = "0x4001794")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal bool $disposing;

			[Token(Token = "0x4001795")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int $PC;

			[Token(Token = "0x170004B0")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001AD6")]
				[Address(RVA = "0xD1CDD8", Offset = "0xD1CDD8", VA = "0xD1CDD8", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004B1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AD7")]
				[Address(RVA = "0xD1CDE0", Offset = "0xD1CDE0", VA = "0xD1CDE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AD4")]
			[Address(RVA = "0xD1C96C", Offset = "0xD1C96C", VA = "0xD1C96C")]
			[DebuggerHidden]
			public <GainingFocus>c__Iterator0()
			{
			}

			[Token(Token = "0x6001AD5")]
			[Address(RVA = "0xD1C984", Offset = "0xD1C984", VA = "0xD1C984", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AD8")]
			[Address(RVA = "0xD1CDE8", Offset = "0xD1CDE8", VA = "0xD1CDE8", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001AD9")]
			[Address(RVA = "0xD1CDFC", Offset = "0xD1CDFC", VA = "0xD1CDFC", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000438")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC304CC", Offset = "0xC304CC")]
		private sealed class <LosingFocus>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001796")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <lfFocusSpeed>__0;

			[Token(Token = "0x4001797")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal PanelItemController $this;

			[Token(Token = "0x4001798")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal object $current;

			[Token(Token = "0x4001799")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal bool $disposing;

			[Token(Token = "0x400179A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int $PC;

			[Token(Token = "0x170004B2")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001ADC")]
				[Address(RVA = "0xD1D2B4", Offset = "0xD1D2B4", VA = "0xD1D2B4", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004B3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001ADD")]
				[Address(RVA = "0xD1D2BC", Offset = "0xD1D2BC", VA = "0xD1D2BC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001ADA")]
			[Address(RVA = "0xD1C974", Offset = "0xD1C974", VA = "0xD1C974")]
			[DebuggerHidden]
			public <LosingFocus>c__Iterator1()
			{
			}

			[Token(Token = "0x6001ADB")]
			[Address(RVA = "0xD1CE80", Offset = "0xD1CE80", VA = "0xD1CE80", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001ADE")]
			[Address(RVA = "0xD1D2C4", Offset = "0xD1D2C4", VA = "0xD1D2C4", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001ADF")]
			[Address(RVA = "0xD1D2D8", Offset = "0xD1D2D8", VA = "0xD1D2D8", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000439")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC3052C", Offset = "0xC3052C")]
		private sealed class <SelectPulse>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400179B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal PanelItemController $this;

			[Token(Token = "0x400179C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal object $current;

			[Token(Token = "0x400179D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal bool $disposing;

			[Token(Token = "0x400179E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int $PC;

			[Token(Token = "0x170004B4")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001AE2")]
				[Address(RVA = "0xD1D858", Offset = "0xD1D858", VA = "0xD1D858", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004B5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AE3")]
				[Address(RVA = "0xD1D860", Offset = "0xD1D860", VA = "0xD1D860", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AE0")]
			[Address(RVA = "0xD1C97C", Offset = "0xD1C97C", VA = "0xD1C97C")]
			[DebuggerHidden]
			public <SelectPulse>c__Iterator2()
			{
			}

			[Token(Token = "0x6001AE1")]
			[Address(RVA = "0xD1D35C", Offset = "0xD1D35C", VA = "0xD1D35C", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AE4")]
			[Address(RVA = "0xD1D868", Offset = "0xD1D868", VA = "0xD1D868", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001AE5")]
			[Address(RVA = "0xD1D87C", Offset = "0xD1D87C", VA = "0xD1D87C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public GameObject mImage;

		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Sprite mToggleImage;

		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GameObject mTitleText;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject mEnableText;

		[Token(Token = "0x40013AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public PanelItemType panelItemType;

		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isToggleSwitch;

		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool closeMenuOnTap;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private State meState;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float kfIdleScale;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float kfFocusScale;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float kfFocusTime;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float kfPulseTime;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float kfPulseScalar;

		[Token(Token = "0x40013B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float mfScale;

		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private IEnumerator mRoutine;

		[Token(Token = "0x40013B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float mfPulseTime;

		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool mbShowEnableText;

		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool mbToggled;

		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Sprite mDefaultImage;

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0xD1C360", Offset = "0xD1C360", VA = "0xD1C360")]
		public PanelItemController()
		{
		}

		[Token(Token = "0x60017DC")]
		[Address(RVA = "0xD1C398", Offset = "0xD1C398", VA = "0xD1C398")]
		public void Awake()
		{
		}

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0xD1C508", Offset = "0xD1C508", VA = "0xD1C508")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0xD1C5BC", Offset = "0xD1C5BC", VA = "0xD1C5BC")]
		public void SetEnableText(bool lbEnable)
		{
		}

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0xD1C5C4", Offset = "0xD1C5C4", VA = "0xD1C5C4")]
		public void SetToggle(bool lbToggled)
		{
		}

		[Token(Token = "0x60017E0")]
		[Address(RVA = "0xD1C678", Offset = "0xD1C678", VA = "0xD1C678")]
		public void SetContextText(string lContextText)
		{
		}

		[Token(Token = "0x60017E1")]
		[Address(RVA = "0xD1C5E0", Offset = "0xD1C5E0", VA = "0xD1C5E0")]
		public void SetIcon(Sprite lIcon)
		{
		}

		[Token(Token = "0x60017E2")]
		[Address(RVA = "0xD1BEF0", Offset = "0xD1BEF0", VA = "0xD1BEF0")]
		public void Select()
		{
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0xD1C7B8", Offset = "0xD1C7B8", VA = "0xD1C7B8")]
		private void Update()
		{
		}

		[Token(Token = "0x60017E4")]
		[Address(RVA = "0xD1C124", Offset = "0xD1C124", VA = "0xD1C124")]
		public void GainFocus()
		{
		}

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0xD1C178", Offset = "0xD1C178", VA = "0xD1C178")]
		public void LoseFocus()
		{
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0xD1C53C", Offset = "0xD1C53C", VA = "0xD1C53C")]
		[DebuggerHidden]
		private IEnumerator GainingFocus()
		{
			return null;
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0xD1C8EC", Offset = "0xD1C8EC", VA = "0xD1C8EC")]
		[DebuggerHidden]
		private IEnumerator LosingFocus()
		{
			return null;
		}

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0xD1C738", Offset = "0xD1C738", VA = "0xD1C738")]
		[DebuggerHidden]
		private IEnumerator SelectPulse()
		{
			return null;
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0xD1C7BC", Offset = "0xD1C7BC", VA = "0xD1C7BC")]
		private void SetText()
		{
		}
	}
}
[Token(Token = "0x200039D")]
public class CategoryLabel : MonoBehaviour
{
	[Token(Token = "0x200039E")]
	private enum States
	{
		[Token(Token = "0x40013D4")]
		Uninitialised,
		[Token(Token = "0x40013D5")]
		FadingOut,
		[Token(Token = "0x40013D6")]
		FadingIn,
		[Token(Token = "0x40013D7")]
		Displaying
	}

	[Token(Token = "0x40013C8")]
	private const float TEXT_FADE_DURATION = 0.5f;

	[Token(Token = "0x40013C9")]
	private const float PREVIEW_TEXT_FADE_DURATION = 0.1f;

	[Token(Token = "0x40013CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float mfFadeDuration;

	[Token(Token = "0x40013CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private TextMeshProUGUI mTextVR;

	[Token(Token = "0x40013CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Text mText;

	[Token(Token = "0x40013CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform mLabelTransform;

	[Token(Token = "0x40013CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector2 mvLabelTextSize;

	[Token(Token = "0x40013CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private TimerSimple mStateTimer;

	[Token(Token = "0x40013D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string msNextText;

	[Token(Token = "0x40013D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool mbTextSet;

	[Token(Token = "0x40013D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private States meState;

	[Token(Token = "0x60017EA")]
	[Address(RVA = "0x172574", Offset = "0x172574", VA = "0x172574")]
	public CategoryLabel()
	{
	}

	[Token(Token = "0x60017EB")]
	[Address(RVA = "0x172584", Offset = "0x172584", VA = "0x172584")]
	public void Setup(Transform labelTransform, Vector2 labelTextSize, bool lbIsPreview)
	{
	}

	[Token(Token = "0x60017EC")]
	[Address(RVA = "0x1725D0", Offset = "0x1725D0", VA = "0x1725D0")]
	private void Start()
	{
	}

	[Token(Token = "0x60017ED")]
	[Address(RVA = "0x1728D4", Offset = "0x1728D4", VA = "0x1728D4")]
	private void Update()
	{
	}

	[Token(Token = "0x60017EE")]
	[Address(RVA = "0x172CA8", Offset = "0x172CA8", VA = "0x172CA8")]
	public void SetText(string text)
	{
	}
}
namespace UserInterface
{
	[Token(Token = "0x200039F")]
	public class CelestialLabel : Label
	{
		[Token(Token = "0x20003A0")]
		private enum OrientationStyle
		{
			[Token(Token = "0x40013FE")]
			TopLeft,
			[Token(Token = "0x40013FF")]
			TopRight,
			[Token(Token = "0x4001400")]
			BottomRight,
			[Token(Token = "0x4001401")]
			BottomLeft
		}

		[Token(Token = "0x40013D8")]
		private const float SELECTED_PRIORITY = 10f;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float sfScale;

		[Token(Token = "0x40013DA")]
		private const float PADDING = 10f;

		[Token(Token = "0x40013DB")]
		private const float PREVIEW_PADDING = 300f;

		[Token(Token = "0x40013DC")]
		private const float PREVIEW_Z_OFFSET = 50f;

		[Token(Token = "0x40013DD")]
		private const float TARGET_GAP_FACTOR = 0.2f;

		[Token(Token = "0x40013DE")]
		public const float LINE_POINTER_WIDTH = 128f;

		[Token(Token = "0x40013DF")]
		private const float LINE_POINTER_HEIGHT = 64f;

		[Token(Token = "0x40013E0")]
		private const float CENTER_DISTANCE_ORIENTATION_LIMIT = 0.2f;

		[Token(Token = "0x40013E1")]
		private const float CENTER_DISTANCE_FADE_LIMIT = 0.8f;

		[Token(Token = "0x40013E2")]
		private const float FADE_DURATION = 1f;

		[Token(Token = "0x40013E3")]
		private const float HANDEDNESS_FADE_DURATION = 0.15f;

		[Token(Token = "0x40013E4")]
		private const float MIN_SELECTION_SIZE = 50f;

		[Token(Token = "0x40013E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool mbFadeAtEdges;

		[Token(Token = "0x40013E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private GameObject mLabelScaled;

		[Token(Token = "0x40013E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private SelectionRingController mSelectionRingController;

		[Token(Token = "0x40013E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Color mLineColor;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float mfDirectionX;

		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float mfMinOffsetX;

		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float mfOffsetScaled;

		[Token(Token = "0x40013EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float mfTargetRadius;

		[Token(Token = "0x40013ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool mbIsInitialized;

		[Token(Token = "0x40013EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float mfSelectionRingProgress;

		[Token(Token = "0x40013EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool mbNeedsDestroying;

		[Token(Token = "0x40013F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		private bool mbIsNearCenter;

		[Token(Token = "0x40013F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float mfOpacity;

		[Token(Token = "0x40013F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float mfVerticalOffsetMu;

		[Token(Token = "0x40013F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float mfHandednessMu;

		[Token(Token = "0x40013F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Vector2 mvOffsetFromCenter;

		[Token(Token = "0x40013F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float mfDistanceFromCenter;

		[Token(Token = "0x40013F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float mfScale;

		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 mvTextPositionLocal;

		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool mbIsSelected;

		[Token(Token = "0x40013F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
		private bool mbNeedsSelecting;

		[Token(Token = "0x40013FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private OrientationStyle meOrientationStyle;

		[Token(Token = "0x40013FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector2[] maOrientationDirections;

		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Vector2 mvDirection;

		[Token(Token = "0x17000432")]
		public SelectionRingController selectionRingController
		{
			[Token(Token = "0x60017F1")]
			[Address(RVA = "0xD002EC", Offset = "0xD002EC", VA = "0xD002EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000433")]
		public Color lineColor
		{
			[Token(Token = "0x60017F2")]
			[Address(RVA = "0xD002F4", Offset = "0xD002F4", VA = "0xD002F4")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000434")]
		public float directionX
		{
			[Token(Token = "0x60017F3")]
			[Address(RVA = "0xD00308", Offset = "0xD00308", VA = "0xD00308")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000435")]
		public float minOffsetX
		{
			[Token(Token = "0x60017F4")]
			[Address(RVA = "0xD00310", Offset = "0xD00310", VA = "0xD00310")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000436")]
		public float offsetScaled
		{
			[Token(Token = "0x60017F5")]
			[Address(RVA = "0xD00318", Offset = "0xD00318", VA = "0xD00318")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000437")]
		public float targetRadius
		{
			[Token(Token = "0x60017F6")]
			[Address(RVA = "0xD00320", Offset = "0xD00320", VA = "0xD00320")]
			set
			{
			}
		}

		[Token(Token = "0x17000438")]
		public bool needsDestroying
		{
			[Token(Token = "0x60017F7")]
			[Address(RVA = "0xD00328", Offset = "0xD00328", VA = "0xD00328")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60017F8")]
			[Address(RVA = "0xD00330", Offset = "0xD00330", VA = "0xD00330")]
			set
			{
			}
		}

		[Token(Token = "0x17000439")]
		public bool canBeDestroyed
		{
			[Token(Token = "0x60017F9")]
			[Address(RVA = "0xD00338", Offset = "0xD00338", VA = "0xD00338")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700043A")]
		public float scale
		{
			[Token(Token = "0x60017FA")]
			[Address(RVA = "0xD00340", Offset = "0xD00340", VA = "0xD00340")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700043B")]
		public bool isSelected
		{
			[Token(Token = "0x60017FB")]
			[Address(RVA = "0xD00348", Offset = "0xD00348", VA = "0xD00348")]
			set
			{
			}
		}

		[Token(Token = "0x1700043C")]
		public float selectionProgress
		{
			[Token(Token = "0x60017FD")]
			[Address(RVA = "0xD00FA8", Offset = "0xD00FA8", VA = "0xD00FA8")]
			set
			{
			}
		}

		[Token(Token = "0x1700043D")]
		public Vector2 direction
		{
			[Token(Token = "0x60017FE")]
			[Address(RVA = "0xD00FB0", Offset = "0xD00FB0", VA = "0xD00FB0")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x1700043E")]
		public float handednessOpacity
		{
			[Token(Token = "0x6001803")]
			[Address(RVA = "0xD01C60", Offset = "0xD01C60", VA = "0xD01C60")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0xCFFFBC", Offset = "0xCFFFBC", VA = "0xCFFFBC")]
		static CelestialLabel()
		{
		}

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0xD00134", Offset = "0xD00134", VA = "0xD00134")]
		public CelestialLabel()
		{
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0xD00474", Offset = "0xD00474", VA = "0xD00474")]
		private void setupSelectionRing()
		{
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0xD00FC4", Offset = "0xD00FC4", VA = "0xD00FC4")]
		public void SetValues(string text, Color color, float priority, bool fadeAtEdges, bool isPreview)
		{
		}

		[Token(Token = "0x6001800")]
		[Address(RVA = "0xD01034", Offset = "0xD01034", VA = "0xD01034")]
		private void updateOrientation(float angle, float magnitude)
		{
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0xD0180C", Offset = "0xD0180C", VA = "0xD0180C")]
		private void updateCollider(float cameraFov)
		{
		}

		[Token(Token = "0x6001802")]
		[Address(RVA = "0xD01BD0", Offset = "0xD01BD0", VA = "0xD01BD0")]
		private float opacity(bool isEnabled)
		{
			return default(float);
		}

		[Token(Token = "0x6001804")]
		[Address(RVA = "0xD01CEC", Offset = "0xD01CEC", VA = "0xD01CEC")]
		private new void Start()
		{
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0xD021CC", Offset = "0xD021CC", VA = "0xD021CC")]
		private new void Update()
		{
		}

		[Token(Token = "0x6001806")]
		[Address(RVA = "0xD02E28", Offset = "0xD02E28", VA = "0xD02E28")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0xD036F4", Offset = "0xD036F4", VA = "0xD036F4")]
		private bool isOrientatedLeft(OrientationStyle orientationStyle)
		{
			return default(bool);
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0xD03714", Offset = "0xD03714", VA = "0xD03714")]
		private bool isOrientatedUp(OrientationStyle orientationStyle)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003A1")]
	public class DataCursor : MonoBehaviour
	{
		[Token(Token = "0x4001402")]
		private const float CURSOR_WIDTH = 32f;

		[Token(Token = "0x4001403")]
		private const float CURSOR_HEIGHT = 38f;

		[Token(Token = "0x4001404")]
		private const float BLINK_DURATION = 0.2f;

		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Transform mParentTransform;

		[Token(Token = "0x4001406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Material mMaterial;

		[Token(Token = "0x4001407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float mfTimeMark;

		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool mbIsBlinking;

		[Token(Token = "0x4001409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool mbBlinkOn;

		[Token(Token = "0x1700043F")]
		public bool isBlinking
		{
			[Token(Token = "0x600180A")]
			[Address(RVA = "0xD04378", Offset = "0xD04378", VA = "0xD04378")]
			set
			{
			}
		}

		[Token(Token = "0x6001809")]
		[Address(RVA = "0xD04370", Offset = "0xD04370", VA = "0xD04370")]
		public DataCursor()
		{
		}

		[Token(Token = "0x600180B")]
		[Address(RVA = "0xD04380", Offset = "0xD04380", VA = "0xD04380")]
		public void Initialise(Transform parentTransform)
		{
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0xD04388", Offset = "0xD04388", VA = "0xD04388")]
		private void Start()
		{
		}

		[Token(Token = "0x600180D")]
		[Address(RVA = "0xD047A8", Offset = "0xD047A8", VA = "0xD047A8")]
		private void Update()
		{
		}

		[Token(Token = "0x600180E")]
		[Address(RVA = "0xD04968", Offset = "0xD04968", VA = "0xD04968")]
		public void SetPosition(float x, float y)
		{
		}

		[Token(Token = "0x600180F")]
		[Address(RVA = "0xD04788", Offset = "0xD04788", VA = "0xD04788")]
		private void resetTimeMark()
		{
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0xD04924", Offset = "0xD04924", VA = "0xD04924")]
		private bool checkTime(float timeToCheck)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003A2")]
	public class Label : UIElement
	{
		[Token(Token = "0x400140A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected GameObject mTextGameObject;

		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected TextMeshProUGUI mTextVR;

		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Text mText;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected string msText;

		[Token(Token = "0x400140E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected GameObject mLinePointerGameObject;

		[Token(Token = "0x400140F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		protected LineMesh mLineMesh;

		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Color mDefaultLabelColor;

		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Material mLineMaterial;

		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected Vector3 mvPosition;

		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected LabelDataManager mLabelDataManager;

		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected ISelectableObject mSelectableObject;

		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool mbIsPreviewLabel;

		[Token(Token = "0x17000440")]
		public Vector3 position
		{
			[Token(Token = "0x6001812")]
			[Address(RVA = "0xD0B04C", Offset = "0xD0B04C", VA = "0xD0B04C")]
			set
			{
			}
		}

		[Token(Token = "0x17000441")]
		protected Vector2 textSize
		{
			[Token(Token = "0x6001815")]
			[Address(RVA = "0xD00B0C", Offset = "0xD00B0C", VA = "0xD00B0C")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0xD002E8", Offset = "0xD002E8", VA = "0xD002E8")]
		public Label()
		{
		}

		[Token(Token = "0x6001813")]
		[Address(RVA = "0xD01FB8", Offset = "0xD01FB8", VA = "0xD01FB8")]
		protected new void Start()
		{
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0xD02E00", Offset = "0xD02E00", VA = "0xD02E00")]
		protected void Update()
		{
		}
	}
	[Token(Token = "0x20003A3")]
	public class LabelData : MonoBehaviour
	{
		[Token(Token = "0x20003A4")]
		private enum State
		{
			[Token(Token = "0x4001437")]
			Initial,
			[Token(Token = "0x4001438")]
			DrawCursor,
			[Token(Token = "0x4001439")]
			DrawData,
			[Token(Token = "0x400143A")]
			DrawInstantData,
			[Token(Token = "0x400143B")]
			DisplayData,
			[Token(Token = "0x400143C")]
			ClearData,
			[Token(Token = "0x400143D")]
			NeedsDestroying
		}

		[Token(Token = "0x4001416")]
		private const float TIME_UNTIL_START = 1.5f;

		[Token(Token = "0x4001417")]
		private const float TIME_DRAW_CURSOR = 0.9f;

		[Token(Token = "0x4001418")]
		private const float TIME_PER_CHARACTER = 0.02f;

		[Token(Token = "0x4001419")]
		private const float TIME_DATA_CLEAR = 2f;

		[Token(Token = "0x400141A")]
		private const float PREVIEW_TIME_UNTIL_START = 0f;

		[Token(Token = "0x400141B")]
		private const float HEADING_DATA_GAP = 16f;

		[Token(Token = "0x400141C")]
		private const int HEADING_TEXT_SIZE = 16;

		[Token(Token = "0x400141D")]
		private const int DATA_TEXT_SIZE = 20;

		[Token(Token = "0x400141E")]
		private const float CHARACTER_SIZE = 20f;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private TextMeshProUGUI mDataTextVR;

		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TextMeshProUGUI mHeadingTextVR;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Text mDataText;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text mHeadingText;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Color mHeadingColor;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float mfDataLineHeight;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform mLabelTransform;

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector2 mvLabelTextSize;

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private GameObject mHeadingGameObject;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int miCurrentCharacterIndex;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int miCurrentLineIndex;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float mfCurrentLineWidth;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private StringBuilder mHeadingBuilder;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private StringBuilder mDataBuilder;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private TimerSimple mStateTimer;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private State meState;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Rect mRect;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private InformationElement mInformationElement;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 mvHeadingPosition;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 mvDataPosition;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float mfYOffset;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float mfYPadding;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float mfY;

		[Token(Token = "0x17000442")]
		public bool isDisplayingData
		{
			[Token(Token = "0x6001817")]
			[Address(RVA = "0xD0C53C", Offset = "0xD0C53C", VA = "0xD0C53C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000443")]
		public bool readyForNext
		{
			[Token(Token = "0x6001818")]
			[Address(RVA = "0xD0C550", Offset = "0xD0C550", VA = "0xD0C550")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000444")]
		public bool needsDestroying
		{
			[Token(Token = "0x600181A")]
			[Address(RVA = "0xD0C598", Offset = "0xD0C598", VA = "0xD0C598")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000445")]
		public float y
		{
			[Token(Token = "0x600181B")]
			[Address(RVA = "0xD0C5AC", Offset = "0xD0C5AC", VA = "0xD0C5AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600181C")]
			[Address(RVA = "0xD0C5B4", Offset = "0xD0C5B4", VA = "0xD0C5B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000446")]
		private Vector2 headingSize
		{
			[Token(Token = "0x6001821")]
			[Address(RVA = "0xD0EDF8", Offset = "0xD0EDF8", VA = "0xD0EDF8")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000447")]
		public Vector2 dataSize
		{
			[Token(Token = "0x6001822")]
			[Address(RVA = "0xD0ED34", Offset = "0xD0ED34", VA = "0xD0ED34")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000448")]
		public Rect rect
		{
			[Token(Token = "0x6001823")]
			[Address(RVA = "0xD0EF58", Offset = "0xD0EF58", VA = "0xD0EF58")]
			get
			{
				return default(Rect);
			}
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0xD0C534", Offset = "0xD0C534", VA = "0xD0C534")]
		public LabelData()
		{
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0xD0C564", Offset = "0xD0C564", VA = "0xD0C564")]
		public void ClearData()
		{
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0xD0C5BC", Offset = "0xD0C5BC", VA = "0xD0C5BC")]
		public void Initialise(Transform labelTransform, Vector2 labelTextSize, float yPadding, InformationElement informationElement)
		{
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0xD0CCCC", Offset = "0xD0CCCC", VA = "0xD0CCCC")]
		private void Update()
		{
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0xD0ECF0", Offset = "0xD0ECF0", VA = "0xD0ECF0")]
		private void checkForNewLine(char character)
		{
		}

		[Token(Token = "0x6001820")]
		[Address(RVA = "0xD0EECC", Offset = "0xD0EECC", VA = "0xD0EECC")]
		public void Destroy()
		{
		}
	}
	[Token(Token = "0x20003A5")]
	public class LabelDataManager
	{
		[Token(Token = "0x20003A6")]
		private enum States
		{
			[Token(Token = "0x4001461")]
			NewObject,
			[Token(Token = "0x4001462")]
			WaitingToDisplay,
			[Token(Token = "0x4001463")]
			DrawingCategory,
			[Token(Token = "0x4001464")]
			InstantDrawCategory,
			[Token(Token = "0x4001465")]
			DisplayingCategory,
			[Token(Token = "0x4001466")]
			ChangingCategory,
			[Token(Token = "0x4001467")]
			ClearingCategory,
			[Token(Token = "0x4001468")]
			WaitingForValidObject
		}

		[Token(Token = "0x400143E")]
		private const int MAX_LABELS_TO_REMOVE = 8;

		[Token(Token = "0x400143F")]
		private const int DATA_LINE_GAP = 20;

		[Token(Token = "0x4001440")]
		private const float CATEGORY_DISPLAY_DURATION_MIN = 4f;

		[Token(Token = "0x4001441")]
		private const float CATEGORY_DISPLAY_DURATION_PER_LINE = 2f;

		[Token(Token = "0x4001442")]
		private const float DATA_DISPLAY_DELAY = 1f;

		[Token(Token = "0x4001443")]
		private const float PREVIEW_DATA_DISPLAY_DELAY = 0.1f;

		[Token(Token = "0x4001444")]
		private const float LABEL_DATA_PADDING_Y = 78f;

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private List<LabelData> maLabelData;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private List<LabelData> maLabelDataToRemove;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform mLabelTransform;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Vector2 mvLabelTextSize;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private SelectionRingController mSelectionRingController;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DataCursor mDataCursor;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private GameObject mCategoryTextGameObject;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CategoryLabel mCategoryLabel;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private GameObject mCollidableGameOject;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UIElement mCollidableUIElement;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private ISelectableObject mSelectedObjectCache;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int siInformationCategoryIndex;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int miInformationItemIndex;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static InformationCategory.Types seInformationCategory;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool mbInitialised;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OrderedDictionary<InformationCategory.Types, InformationCategory> maCategoriesDictionary;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static LabelDataManager sInstance;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float mfYPosition;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float mfYShift;

		[Token(Token = "0x4001458")]
		private const float SHIFT_Y_PER_SECOND = 200f;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float mfCategoryDisplayDuration;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private TimerSimple mStateTimer;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool mbIsSurfaceLabel;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static bool sbCategoryLocked;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		private bool mbIsPreview;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private States meState;

		[Token(Token = "0x400145F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Dictionary<InformationElement.Types, InformationCategory.Types> saElementTypeToCategoryDictionary;

		[Token(Token = "0x17000449")]
		public static bool isPrevew
		{
			[Token(Token = "0x6001825")]
			[Address(RVA = "0xD0E470", Offset = "0xD0E470", VA = "0xD0E470")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700044A")]
		public static int currentInformationCategoryIndex
		{
			[Token(Token = "0x6001827")]
			[Address(RVA = "0xD0F010", Offset = "0xD0F010", VA = "0xD0F010")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700044B")]
		public static int categoriesCount
		{
			[Token(Token = "0x600182C")]
			[Address(RVA = "0xD0F468", Offset = "0xD0F468", VA = "0xD0F468")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700044C")]
		public static bool cursorBlink
		{
			[Token(Token = "0x600182F")]
			[Address(RVA = "0xD0EBA4", Offset = "0xD0EBA4", VA = "0xD0EBA4")]
			set
			{
			}
		}

		[Token(Token = "0x1700044D")]
		private InformationCategory currentCategory
		{
			[Token(Token = "0x6001832")]
			[Address(RVA = "0xD0F62C", Offset = "0xD0F62C", VA = "0xD0F62C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0xD00C80", Offset = "0xD00C80", VA = "0xD00C80")]
		public LabelDataManager(Transform labelTransform, Vector2 labelTextSize, float collisionDepthOffset, SelectionRingController selectionRingController, bool isPreview, bool isSurfaceLabel)
		{
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0xD0EA48", Offset = "0xD0EA48", VA = "0xD0EA48")]
		public static void SetCursorPosition(float x, float y)
		{
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0xD0F09C", Offset = "0xD0F09C", VA = "0xD0F09C")]
		public static void SetCategoryIndex(int index)
		{
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0xD0F3A0", Offset = "0xD0F3A0", VA = "0xD0F3A0")]
		private void setCurrentCategory(int categoryIndex)
		{
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0xD0F6E8", Offset = "0xD0F6E8", VA = "0xD0F6E8")]
		public static void SetCategoryNext()
		{
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0xD0F7AC", Offset = "0xD0F7AC", VA = "0xD0F7AC")]
		public static void SetCategoryPrevious()
		{
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0xD0F898", Offset = "0xD0F898", VA = "0xD0F898")]
		public static void ToggleLockCategory()
		{
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0xD0FA58", Offset = "0xD0FA58", VA = "0xD0FA58")]
		public static void LockCategory()
		{
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0xD0B0F4", Offset = "0xD0B0F4", VA = "0xD0B0F4")]
		public void Update(ISelectableObject selectableObject)
		{
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0xD10AC0", Offset = "0xD10AC0", VA = "0xD10AC0")]
		private void reset(ISelectableObject selectableObject)
		{
		}

		[Token(Token = "0x6001833")]
		[Address(RVA = "0xD0EF6C", Offset = "0xD0EF6C", VA = "0xD0EF6C")]
		private void setState(States state)
		{
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0xD0FD60", Offset = "0xD0FD60", VA = "0xD0FD60")]
		private OrderedDictionary<InformationCategory.Types, InformationCategory> populateCategories(ISelectableObject lSelectableObject)
		{
			return null;
		}

		[Token(Token = "0x6001835")]
		[Address(RVA = "0xD105A0", Offset = "0xD105A0", VA = "0xD105A0")]
		private void createLabelData(ISelectableObject lSelectableObject)
		{
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0xD0E50C", Offset = "0xD0E50C", VA = "0xD0E50C")]
		public static void CursorEnable(bool enable)
		{
		}

		[Token(Token = "0x6001837")]
		[Address(RVA = "0xD10A04", Offset = "0xD10A04", VA = "0xD10A04")]
		private void destroy(LabelData labelData)
		{
		}

		[Token(Token = "0x6001838")]
		[Address(RVA = "0xD008E8", Offset = "0xD008E8", VA = "0xD008E8")]
		public void DestroyAll()
		{
		}
	}
	[Token(Token = "0x20003A7")]
	public class LabelManager : Manager
	{
		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject labelPrefab;

		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GameObject categoryLabelPrefab;

		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject headingLabelPrefab;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public GameObject dataLabelPrefab;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject labelPrefabVR;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public GameObject categoryLabelPrefabVR;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject headingLabelPrefabVR;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public GameObject dataLabelPrefabVR;

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material lineMaterial;

		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Material lineMaterialVR;

		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material selectionRingMaterial;

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Material informationIndicatorMaterial;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material cursorMaterial;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Color planetLabelColor;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Color naturalPrimarySatellitesColor;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Color naturalSecondarySatellitesColor;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Color starLabelColor;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Color selectedLabelColor;

		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool mbDrawLabels;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static Dictionary<CelestialObject, CelestialLabel> saLabelDictionary;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static LabelManager sInstance;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static CelestialLabel sSelectedLabel;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<Circle> saCollisionCircles;

		[Token(Token = "0x1700044E")]
		public static bool drawLabels
		{
			[Token(Token = "0x600183C")]
			[Address(RVA = "0xD1184C", Offset = "0xD1184C", VA = "0xD1184C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600183B")]
			[Address(RVA = "0xD11424", Offset = "0xD11424", VA = "0xD11424")]
			set
			{
			}
		}

		[Token(Token = "0x1700044F")]
		public static CelestialLabel selectedLabel
		{
			[Token(Token = "0x600183D")]
			[Address(RVA = "0xD118D8", Offset = "0xD118D8", VA = "0xD118D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000450")]
		public static GameObject LabelPrefab
		{
			[Token(Token = "0x600184A")]
			[Address(RVA = "0xD0B058", Offset = "0xD0B058", VA = "0xD0B058")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000451")]
		public static GameObject CategoryLabelPrefab
		{
			[Token(Token = "0x600184B")]
			[Address(RVA = "0xD0EF74", Offset = "0xD0EF74", VA = "0xD0EF74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000452")]
		public static GameObject HeadingLabelPrefab
		{
			[Token(Token = "0x600184C")]
			[Address(RVA = "0xD0CC30", Offset = "0xD0CC30", VA = "0xD0CC30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000453")]
		public static GameObject DataLabelPrefab
		{
			[Token(Token = "0x600184D")]
			[Address(RVA = "0xD10B54", Offset = "0xD10B54", VA = "0xD10B54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000454")]
		public static Color SelectedColor
		{
			[Token(Token = "0x600184E")]
			[Address(RVA = "0xD0363C", Offset = "0xD0363C", VA = "0xD0363C")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000455")]
		public static Material LineMaterial
		{
			[Token(Token = "0x600184F")]
			[Address(RVA = "0xD02CC4", Offset = "0xD02CC4", VA = "0xD02CC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000456")]
		public static Material SelectionRingMaterial
		{
			[Token(Token = "0x6001850")]
			[Address(RVA = "0xD13974", Offset = "0xD13974", VA = "0xD13974")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000457")]
		public static Material InformationIndicatorMaterial
		{
			[Token(Token = "0x6001851")]
			[Address(RVA = "0xD13A10", Offset = "0xD13A10", VA = "0xD13A10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000458")]
		public static Material CursorMaterial
		{
			[Token(Token = "0x6001852")]
			[Address(RVA = "0xD046EC", Offset = "0xD046EC", VA = "0xD046EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600183A")]
		[Address(RVA = "0xD1141C", Offset = "0xD1141C", VA = "0xD1141C")]
		public LabelManager()
		{
		}

		[Token(Token = "0x600183E")]
		[Address(RVA = "0xD11964", Offset = "0xD11964", VA = "0xD11964")]
		private new void Start()
		{
		}

		[Token(Token = "0x600183F")]
		[Address(RVA = "0xD11A90", Offset = "0xD11A90", VA = "0xD11A90")]
		private new void Update()
		{
		}

		[Token(Token = "0x6001840")]
		[Address(RVA = "0xD11FFC", Offset = "0xD11FFC", VA = "0xD11FFC")]
		private new void LateUpdate()
		{
		}

		[Token(Token = "0x6001841")]
		[Address(RVA = "0xD12874", Offset = "0xD12874", VA = "0xD12874")]
		public static void AddPlanetCollisionCircle(Vector3 viewportCenter, float viewPortRadius)
		{
		}

		[Token(Token = "0x6001842")]
		[Address(RVA = "0xD129AC", Offset = "0xD129AC", VA = "0xD129AC")]
		public static Label AddLabel(CelestialObject selectableObject, float priority, bool fadeAtEdges)
		{
			return null;
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0xD12F78", Offset = "0xD12F78", VA = "0xD12F78")]
		public static void SetLabelPriority(CelestialObject selectableObject, float priority)
		{
		}

		[Token(Token = "0x6001844")]
		[Address(RVA = "0xD130C8", Offset = "0xD130C8", VA = "0xD130C8")]
		public static void SetLabelSelected(CelestialObject selectableObject, bool selected)
		{
		}

		[Token(Token = "0x6001845")]
		[Address(RVA = "0xD133D4", Offset = "0xD133D4", VA = "0xD133D4")]
		public static bool HasLabel(CelestialObject selectableObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0xD11528", Offset = "0xD11528", VA = "0xD11528")]
		public static void RemoveAll()
		{
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0xD1348C", Offset = "0xD1348C", VA = "0xD1348C")]
		public static void RemoveLabel(CelestialObject selectableObject)
		{
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0xD1383C", Offset = "0xD1383C", VA = "0xD1383C")]
		public static void SetSelectionProgress(float progress)
		{
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0xD0FC98", Offset = "0xD0FC98", VA = "0xD0FC98")]
		public static void AddCollidableElement(UIElement uiElement)
		{
		}
	}
	[Token(Token = "0x20003A8")]
	public class MeteoriteIconsManager : MonoBehaviour
	{
		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float meteorDurationFast;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float meteorDurationSlow;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float iconScaleMultiplier;

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject meteoriteIconPrefab;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int miActiveMeteoritesCache;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<GameObject> maMeteoriteIcons;

		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static MeteoriteIconsManager sInstance;

		[Token(Token = "0x17000459")]
		public static MeteoriteIconsManager Instance
		{
			[Token(Token = "0x6001855")]
			[Address(RVA = "0xD16C0C", Offset = "0xD16C0C", VA = "0xD16C0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0xD16BF0", Offset = "0xD16BF0", VA = "0xD16BF0")]
		public MeteoriteIconsManager()
		{
		}

		[Token(Token = "0x6001856")]
		[Address(RVA = "0xD16C70", Offset = "0xD16C70", VA = "0xD16C70")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001857")]
		[Address(RVA = "0xD16D08", Offset = "0xD16D08", VA = "0xD16D08")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0xD16D98", Offset = "0xD16D98", VA = "0xD16D98")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0xD16F28", Offset = "0xD16F28", VA = "0xD16F28")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x20003A9")]
	public class SurfaceCircleSelector : MonoBehaviour
	{
		[Token(Token = "0x4001487")]
		private const float VISIBILITY_THRESHOLD = 0.5f;

		[Token(Token = "0x4001488")]
		private const int LINE_SEGMENTS = 16;

		[Token(Token = "0x4001489")]
		private const float SCALE = 0.06f;

		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Material mLineMaterial;

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool mbIsPreview;

		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool mbMeshBuilt;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private SurfaceDetail mSurfaceDetail;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float mfProgress;

		[Token(Token = "0x1700045A")]
		public SurfaceDetail surfaceDetail
		{
			[Token(Token = "0x600185E")]
			[Address(RVA = "0xD1F440", Offset = "0xD1F440", VA = "0xD1F440")]
			set
			{
			}
		}

		[Token(Token = "0x1700045B")]
		public float progress
		{
			[Token(Token = "0x600185F")]
			[Address(RVA = "0xD1F448", Offset = "0xD1F448", VA = "0xD1F448")]
			set
			{
			}
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0xD1F128", Offset = "0xD1F128", VA = "0xD1F128")]
		public SurfaceCircleSelector()
		{
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0xD1F130", Offset = "0xD1F130", VA = "0xD1F130")]
		private void buildMesh()
		{
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0xD1F43C", Offset = "0xD1F43C", VA = "0xD1F43C")]
		private void Start()
		{
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0xD1F364", Offset = "0xD1F364", VA = "0xD1F364")]
		private Vector3 vertexPos(float degrees)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0xD1F450", Offset = "0xD1F450", VA = "0xD1F450")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x20003AA")]
	public class SurfaceLabel : Label
	{
		[Token(Token = "0x400148F")]
		private const float VISIBILITY_THRESHOLD = 0.8f;

		[Token(Token = "0x4001490")]
		private const float LINE_LENGTH = 0.1f;

		[Token(Token = "0x4001491")]
		private const float APPEAR_DURATION = 0.35f;

		[Token(Token = "0x4001492")]
		private const float RELATIVE_LABEL_SIZE = 0.035f;

		[Token(Token = "0x4001493")]
		private const float TEXT_SCALE = 0.0025f;

		[Token(Token = "0x4001494")]
		private const float PREVIEW_OFFSET = 100f;

		[Token(Token = "0x4001495")]
		private const float PREVIEW_Z_OFFSET = -50f;

		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 mvNormal;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private SurfaceDetail mSurfaceDetail;

		[Token(Token = "0x4001498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private SurfaceDetail mSurfaceDetailCache;

		[Token(Token = "0x4001499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float mfAnimPhase;

		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float mfCollisionOpacity;

		[Token(Token = "0x400149B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float mfHighlightOpacity;

		[Token(Token = "0x400149C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float mfScale;

		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool mbIsHighlighted;

		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float mfBasePriority;

		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private GameObject mPortalImage;

		[Token(Token = "0x1700045C")]
		public SurfaceDetail surfaceDetail
		{
			[Token(Token = "0x6001862")]
			[Address(RVA = "0xD1F8E4", Offset = "0xD1F8E4", VA = "0xD1F8E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700045D")]
		public bool isHighlighted
		{
			[Token(Token = "0x6001863")]
			[Address(RVA = "0xD1F8EC", Offset = "0xD1F8EC", VA = "0xD1F8EC")]
			set
			{
			}
		}

		[Token(Token = "0x1700045E")]
		public float basePriority
		{
			[Token(Token = "0x6001864")]
			[Address(RVA = "0xD1F8F4", Offset = "0xD1F8F4", VA = "0xD1F8F4")]
			set
			{
			}
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0xD1F8E0", Offset = "0xD1F8E0", VA = "0xD1F8E0")]
		public SurfaceLabel()
		{
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0xD1F8FC", Offset = "0xD1F8FC", VA = "0xD1F8FC")]
		public void Initialise(SurfaceDetail surfaceDetail)
		{
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0xD1FCE8", Offset = "0xD1FCE8", VA = "0xD1FCE8")]
		private new void Start()
		{
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0xD20674", Offset = "0xD20674", VA = "0xD20674")]
		private new void Update()
		{
		}

		[Token(Token = "0x6001868")]
		[Address(RVA = "0xD214DC", Offset = "0xD214DC", VA = "0xD214DC")]
		private void LateUpdate()
		{
		}
	}
	[Token(Token = "0x20003AB")]
	public class SurfaceLabelManager : Manager
	{
		[Token(Token = "0x40014A0")]
		private const float PRIORITY_PRIMARIES = 0.5f;

		[Token(Token = "0x40014A1")]
		private const float PRIORITY_SELECTION = 1f;

		[Token(Token = "0x40014A2")]
		private const float PRIORITY_USERLOCATION = 0.75f;

		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color surfaceLabelColor;

		[Token(Token = "0x40014A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SurfaceLabelManager sInstance;

		[Token(Token = "0x40014A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static Dictionary<SurfaceDetail, SurfaceLabel> saSurfaceLabelDictionary;

		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static SurfaceLabel sSelectedSurfaceLabel;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static SurfaceLabel sUserLocationLabel;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static bool sbCachedShowData;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UIElement mDataCollidable;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static SurfaceCircleSelector sSurfaceCircleSelector;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static GameObject mSurfacePortalIcon;

		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static SurfaceDetail mPortalSurfaceDetail;

		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float mfPortalScale;

		[Token(Token = "0x40014AE")]
		private const float kfMinPortalScale = 0.2f;

		[Token(Token = "0x40014AF")]
		private const float kfScaleTime = 0.75f;

		[Token(Token = "0x1700045F")]
		public static SurfaceCircleSelector surfaceCircleSelector
		{
			[Token(Token = "0x600186A")]
			[Address(RVA = "0xD21A60", Offset = "0xD21A60", VA = "0xD21A60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000460")]
		public static Color LabelColor
		{
			[Token(Token = "0x6001875")]
			[Address(RVA = "0xD1F838", Offset = "0xD1F838", VA = "0xD1F838")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x6001869")]
		[Address(RVA = "0xD21A58", Offset = "0xD21A58", VA = "0xD21A58")]
		public SurfaceLabelManager()
		{
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0xD21AEC", Offset = "0xD21AEC", VA = "0xD21AEC")]
		private void Awake()
		{
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0xD21CC4", Offset = "0xD21CC4", VA = "0xD21CC4")]
		private new void Start()
		{
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0xD21EC0", Offset = "0xD21EC0", VA = "0xD21EC0")]
		private new void Update()
		{
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0xD23280", Offset = "0xD23280", VA = "0xD23280")]
		private static void destroySelectedLabel()
		{
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0xD23478", Offset = "0xD23478", VA = "0xD23478")]
		public static void ClearSelectedLabel()
		{
		}

		[Token(Token = "0x6001870")]
		[Address(RVA = "0xD235C0", Offset = "0xD235C0", VA = "0xD235C0")]
		private new void LateUpdate()
		{
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0xD23EA0", Offset = "0xD23EA0", VA = "0xD23EA0")]
		public static void SetSelectedLabel(SurfaceDetail surfaceDetail)
		{
		}

		[Token(Token = "0x6001872")]
		[Address(RVA = "0xD24240", Offset = "0xD24240", VA = "0xD24240")]
		public static void SetSelectedLabelHighlighted(bool isHighlighted)
		{
		}

		[Token(Token = "0x6001873")]
		[Address(RVA = "0xD22B70", Offset = "0xD22B70", VA = "0xD22B70")]
		private static SurfaceLabel createLabel(SurfaceDetail surfaceDetail, float priority)
		{
			return null;
		}

		[Token(Token = "0x6001874")]
		[Address(RVA = "0xD2436C", Offset = "0xD2436C", VA = "0xD2436C")]
		public static void SetSelectionRingProperties(bool active, SurfaceDetail surfaceDetail)
		{
		}

		[Token(Token = "0x6001876")]
		[Address(RVA = "0xD0FBF8", Offset = "0xD0FBF8", VA = "0xD0FBF8")]
		public static void SetDataCollidableElement(UIElement uiElement)
		{
		}

		[Token(Token = "0x6001877")]
		[Address(RVA = "0xD22DB8", Offset = "0xD22DB8", VA = "0xD22DB8")]
		private void UpdateSurfacePortalIcon()
		{
		}
	}
	[Token(Token = "0x20003AC")]
	public class GlobalMenuController : MenuController
	{
		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<RaycastResult> maRayCastHits;

		[Token(Token = "0x6001879")]
		[Address(RVA = "0xD049F8", Offset = "0xD049F8", VA = "0xD049F8")]
		public GlobalMenuController()
		{
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0xD04A08", Offset = "0xD04A08", VA = "0xD04A08", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600187B")]
		[Address(RVA = "0xD04BCC", Offset = "0xD04BCC", VA = "0xD04BCC")]
		public void DisableSearchButton()
		{
		}

		[Token(Token = "0x600187C")]
		[Address(RVA = "0xD04C80", Offset = "0xD04C80", VA = "0xD04C80", Slot = "6")]
		protected override void Update()
		{
		}
	}
	[Token(Token = "0x20003AD")]
	public class ItemController : MonoBehaviour
	{
		[Token(Token = "0x20003AE")]
		public enum MenuItemType
		{
			[Token(Token = "0x40014C3")]
			SurfaceData,
			[Token(Token = "0x40014C4")]
			OrbitMode,
			[Token(Token = "0x40014C5")]
			SkyView,
			[Token(Token = "0x40014C6")]
			Search,
			[Token(Token = "0x40014C7")]
			Settings,
			[Token(Token = "0x40014C8")]
			ExploreMode,
			[Token(Token = "0x40014C9")]
			Tutorial,
			[Token(Token = "0x40014CA")]
			MomentsInTime,
			[Token(Token = "0x40014CB")]
			MomentsInTimeTutorial,
			[Token(Token = "0x40014CC")]
			Apollo11MoonLanding,
			[Token(Token = "0x40014CD")]
			MarsScienceLab,
			[Token(Token = "0x40014CE")]
			NewHorizons,
			[Token(Token = "0x40014CF")]
			ISS,
			[Token(Token = "0x40014D0")]
			SkyViewTutorial,
			[Token(Token = "0x40014D1")]
			BackButton,
			[Token(Token = "0x40014D2")]
			OrreryMode,
			[Token(Token = "0x40014D3")]
			OrreryTutorial,
			[Token(Token = "0x40014D4")]
			None
		}

		[Token(Token = "0x20003AF")]
		private enum State
		{
			[Token(Token = "0x40014D6")]
			Idle,
			[Token(Token = "0x40014D7")]
			GainingFocus,
			[Token(Token = "0x40014D8")]
			Focussed,
			[Token(Token = "0x40014D9")]
			LosingFocus
		}

		[Token(Token = "0x200043A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC305BC", Offset = "0xC305BC")]
		private sealed class <GainingFocus>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400179F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <lfFocusSpeed>__0;

			[Token(Token = "0x40017A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal ItemController $this;

			[Token(Token = "0x40017A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal object $current;

			[Token(Token = "0x40017A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal bool $disposing;

			[Token(Token = "0x40017A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int $PC;

			[Token(Token = "0x170004B6")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001AE8")]
				[Address(RVA = "0xD0A37C", Offset = "0xD0A37C", VA = "0xD0A37C", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004B7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AE9")]
				[Address(RVA = "0xD0A384", Offset = "0xD0A384", VA = "0xD0A384", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AE6")]
			[Address(RVA = "0xD09F6C", Offset = "0xD09F6C", VA = "0xD09F6C")]
			[DebuggerHidden]
			public <GainingFocus>c__Iterator0()
			{
			}

			[Token(Token = "0x6001AE7")]
			[Address(RVA = "0xD09F84", Offset = "0xD09F84", VA = "0xD09F84", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AEA")]
			[Address(RVA = "0xD0A38C", Offset = "0xD0A38C", VA = "0xD0A38C", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001AEB")]
			[Address(RVA = "0xD0A3A0", Offset = "0xD0A3A0", VA = "0xD0A3A0", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x200043B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC3061C", Offset = "0xC3061C")]
		private sealed class <LosingFocus>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <lfFocusSpeed>__0;

			[Token(Token = "0x40017A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal ItemController $this;

			[Token(Token = "0x40017A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal object $current;

			[Token(Token = "0x40017A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal bool $disposing;

			[Token(Token = "0x40017A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int $PC;

			[Token(Token = "0x170004B8")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001AEE")]
				[Address(RVA = "0xD0A7FC", Offset = "0xD0A7FC", VA = "0xD0A7FC", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004B9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AEF")]
				[Address(RVA = "0xD0A804", Offset = "0xD0A804", VA = "0xD0A804", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AEC")]
			[Address(RVA = "0xD09F74", Offset = "0xD09F74", VA = "0xD09F74")]
			[DebuggerHidden]
			public <LosingFocus>c__Iterator1()
			{
			}

			[Token(Token = "0x6001AED")]
			[Address(RVA = "0xD0A424", Offset = "0xD0A424", VA = "0xD0A424", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AF0")]
			[Address(RVA = "0xD0A80C", Offset = "0xD0A80C", VA = "0xD0A80C", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001AF1")]
			[Address(RVA = "0xD0A820", Offset = "0xD0A820", VA = "0xD0A820", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x200043C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC3067C", Offset = "0xC3067C")]
		private sealed class <SelectPulse>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal MenuController <lMenu>__0;

			[Token(Token = "0x40017AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal ItemController $this;

			[Token(Token = "0x40017AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal object $current;

			[Token(Token = "0x40017AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal bool $disposing;

			[Token(Token = "0x40017AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int $PC;

			[Token(Token = "0x170004BA")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001AF4")]
				[Address(RVA = "0xD0AFA4", Offset = "0xD0AFA4", VA = "0xD0AFA4", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004BB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AF5")]
				[Address(RVA = "0xD0AFAC", Offset = "0xD0AFAC", VA = "0xD0AFAC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AF2")]
			[Address(RVA = "0xD09F7C", Offset = "0xD09F7C", VA = "0xD09F7C")]
			[DebuggerHidden]
			public <SelectPulse>c__Iterator2()
			{
			}

			[Token(Token = "0x6001AF3")]
			[Address(RVA = "0xD0A8A4", Offset = "0xD0A8A4", VA = "0xD0A8A4", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AF6")]
			[Address(RVA = "0xD0AFB4", Offset = "0xD0AFB4", VA = "0xD0AFB4", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001AF7")]
			[Address(RVA = "0xD0AFC8", Offset = "0xD0AFC8", VA = "0xD0AFC8", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float kfIdleScale;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float kfFocusScale;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float kfFocusTime;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float kfPulseTime;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float kfPulseScalar;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isToggleSwitch;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool closeMenuOnTap;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool shouldPopContextOnExit;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public MenuItemType menuItemType;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private State meState;

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private GameObject mImage;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject mTitleText;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private GameObject mEnableText;

		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float mfScale;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private IEnumerator mRoutine;

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float mfPulseTime;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool mbShowEnableText;

		[Token(Token = "0x600187D")]
		[Address(RVA = "0xD0980C", Offset = "0xD0980C", VA = "0xD0980C")]
		public ItemController()
		{
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0xD09854", Offset = "0xD09854", VA = "0xD09854")]
		public void Awake()
		{
		}

		[Token(Token = "0x600187F")]
		[Address(RVA = "0xD09A80", Offset = "0xD09A80", VA = "0xD09A80")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001880")]
		[Address(RVA = "0xD09B84", Offset = "0xD09B84", VA = "0xD09B84")]
		public void SetEnableText(bool lbEnable)
		{
		}

		[Token(Token = "0x6001881")]
		[Address(RVA = "0xD09B8C", Offset = "0xD09B8C", VA = "0xD09B8C")]
		public void SetContextText(string lContextText)
		{
		}

		[Token(Token = "0x6001882")]
		[Address(RVA = "0xD09C4C", Offset = "0xD09C4C", VA = "0xD09C4C")]
		public void SetIcon(Sprite lIcon)
		{
		}

		[Token(Token = "0x6001883")]
		[Address(RVA = "0xD05520", Offset = "0xD05520", VA = "0xD05520")]
		public void Select()
		{
		}

		[Token(Token = "0x6001884")]
		[Address(RVA = "0xD09D64", Offset = "0xD09D64", VA = "0xD09D64")]
		private void Update()
		{
		}

		[Token(Token = "0x6001885")]
		[Address(RVA = "0xD09D68", Offset = "0xD09D68", VA = "0xD09D68")]
		public void GainFocus()
		{
		}

		[Token(Token = "0x6001886")]
		[Address(RVA = "0xD09B34", Offset = "0xD09B34", VA = "0xD09B34")]
		public void LoseFocus()
		{
		}

		[Token(Token = "0x6001887")]
		[Address(RVA = "0xD09AB4", Offset = "0xD09AB4", VA = "0xD09AB4")]
		[DebuggerHidden]
		private IEnumerator GainingFocus()
		{
			return null;
		}

		[Token(Token = "0x6001888")]
		[Address(RVA = "0xD09EEC", Offset = "0xD09EEC", VA = "0xD09EEC")]
		[DebuggerHidden]
		private IEnumerator LosingFocus()
		{
			return null;
		}

		[Token(Token = "0x6001889")]
		[Address(RVA = "0xD09CE4", Offset = "0xD09CE4", VA = "0xD09CE4")]
		[DebuggerHidden]
		private IEnumerator SelectPulse()
		{
			return null;
		}

		[Token(Token = "0x600188A")]
		[Address(RVA = "0xD09DBC", Offset = "0xD09DBC", VA = "0xD09DBC")]
		private void SetText()
		{
		}
	}
	[Token(Token = "0x20003B0")]
	public class LaunchRoomMenuController : MenuController
	{
		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		private bool mbTutorialOnly;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int liTutorialIndex;

		[Token(Token = "0x600188B")]
		[Address(RVA = "0xD13B14", Offset = "0xD13B14", VA = "0xD13B14")]
		public LaunchRoomMenuController()
		{
		}

		[Token(Token = "0x600188C")]
		[Address(RVA = "0xD13B1C", Offset = "0xD13B1C", VA = "0xD13B1C", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600188D")]
		[Address(RVA = "0xD13BEC", Offset = "0xD13BEC", VA = "0xD13BEC")]
		private void Start()
		{
		}

		[Token(Token = "0x600188E")]
		[Address(RVA = "0xD13DE8", Offset = "0xD13DE8", VA = "0xD13DE8", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x600188F")]
		[Address(RVA = "0xD1436C", Offset = "0xD1436C", VA = "0xD1436C")]
		private void onDisable()
		{
		}
	}
	[Token(Token = "0x20003B1")]
	public class LaunchRoomSubMenuController : MenuController
	{
		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		private bool mbTutorialOnly;

		[Token(Token = "0x6001890")]
		[Address(RVA = "0xD144C4", Offset = "0xD144C4", VA = "0xD144C4")]
		public LaunchRoomSubMenuController()
		{
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0xD144CC", Offset = "0xD144CC", VA = "0xD144CC", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001892")]
		[Address(RVA = "0xD1476C", Offset = "0xD1476C", VA = "0xD1476C", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001893")]
		[Address(RVA = "0xD14C30", Offset = "0xD14C30", VA = "0xD14C30")]
		private void onDisable()
		{
		}
	}
	[Token(Token = "0x20003B2")]
	public struct AvailableItem
	{
		[Token(Token = "0x40014DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ItemController.MenuItemType meItem;

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool mbShowEnable;
	}
	[Token(Token = "0x20003B3")]
	public class MenuController : MonoBehaviour
	{
		[Token(Token = "0x20003B4")]
		public delegate void OnMenuItemSelectedEvent(ItemController.MenuItemType lSelected);

		[Token(Token = "0x20003B5")]
		public delegate void OnMenuFocusChangeEvent(bool lbHasFocus);

		[Token(Token = "0x200043D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC30784", Offset = "0xC30784")]
		private sealed class <FadeIn>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <lfFadeSpeed>__0;

			[Token(Token = "0x40017AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal float <lfAlpha>__0;

			[Token(Token = "0x40017B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal CanvasRenderer[] $locvar0;

			[Token(Token = "0x40017B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int $locvar1;

			[Token(Token = "0x40017B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal CanvasRenderer[] $locvar2;

			[Token(Token = "0x40017B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int $locvar3;

			[Token(Token = "0x40017B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal MenuController $this;

			[Token(Token = "0x40017B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal object $current;

			[Token(Token = "0x40017B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool $disposing;

			[Token(Token = "0x40017B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int $PC;

			[Token(Token = "0x170004BC")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001AFA")]
				[Address(RVA = "0xD15F24", Offset = "0xD15F24", VA = "0xD15F24", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004BD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AFB")]
				[Address(RVA = "0xD15F2C", Offset = "0xD15F2C", VA = "0xD15F2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AF8")]
			[Address(RVA = "0xD159EC", Offset = "0xD159EC", VA = "0xD159EC")]
			[DebuggerHidden]
			public <FadeIn>c__Iterator0()
			{
			}

			[Token(Token = "0x6001AF9")]
			[Address(RVA = "0xD15C9C", Offset = "0xD15C9C", VA = "0xD15C9C", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AFC")]
			[Address(RVA = "0xD15F34", Offset = "0xD15F34", VA = "0xD15F34", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001AFD")]
			[Address(RVA = "0xD15F48", Offset = "0xD15F48", VA = "0xD15F48", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x200043E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC307E4", Offset = "0xC307E4")]
		private sealed class <FadeOut>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <lfFadeSpeed>__0;

			[Token(Token = "0x40017B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal float <lfAlpha>__0;

			[Token(Token = "0x40017BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal CanvasRenderer[] $locvar0;

			[Token(Token = "0x40017BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int $locvar1;

			[Token(Token = "0x40017BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal CanvasRenderer[] $locvar2;

			[Token(Token = "0x40017BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int $locvar3;

			[Token(Token = "0x40017BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal MenuController $this;

			[Token(Token = "0x40017BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal object $current;

			[Token(Token = "0x40017C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool $disposing;

			[Token(Token = "0x40017C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int $PC;

			[Token(Token = "0x170004BE")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B00")]
				[Address(RVA = "0xD16378", Offset = "0xD16378", VA = "0xD16378", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004BF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B01")]
				[Address(RVA = "0xD16380", Offset = "0xD16380", VA = "0xD16380", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AFE")]
			[Address(RVA = "0xD15A74", Offset = "0xD15A74", VA = "0xD15A74")]
			[DebuggerHidden]
			public <FadeOut>c__Iterator1()
			{
			}

			[Token(Token = "0x6001AFF")]
			[Address(RVA = "0xD15FCC", Offset = "0xD15FCC", VA = "0xD15FCC", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B02")]
			[Address(RVA = "0xD16388", Offset = "0xD16388", VA = "0xD16388", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B03")]
			[Address(RVA = "0xD1639C", Offset = "0xD1639C", VA = "0xD1639C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x200043F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC30844", Offset = "0xC30844")]
		private sealed class <PopIn>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <lfPopSpeed>__0;

			[Token(Token = "0x40017C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal float <lfScale>__0;

			[Token(Token = "0x40017C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal MenuController $this;

			[Token(Token = "0x40017C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal object $current;

			[Token(Token = "0x40017C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal bool $disposing;

			[Token(Token = "0x40017C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int $PC;

			[Token(Token = "0x170004C0")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B06")]
				[Address(RVA = "0xD165D4", Offset = "0xD165D4", VA = "0xD165D4", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004C1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B07")]
				[Address(RVA = "0xD165DC", Offset = "0xD165DC", VA = "0xD165DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B04")]
			[Address(RVA = "0xD15A7C", Offset = "0xD15A7C", VA = "0xD15A7C")]
			[DebuggerHidden]
			public <PopIn>c__Iterator2()
			{
			}

			[Token(Token = "0x6001B05")]
			[Address(RVA = "0xD16420", Offset = "0xD16420", VA = "0xD16420", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B08")]
			[Address(RVA = "0xD165E4", Offset = "0xD165E4", VA = "0xD165E4", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B09")]
			[Address(RVA = "0xD165F8", Offset = "0xD165F8", VA = "0xD165F8", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000440")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC308A4", Offset = "0xC308A4")]
		private sealed class <PopOut>c__Iterator3 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <lfPopSpeed>__0;

			[Token(Token = "0x40017C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal float <lfScale>__0;

			[Token(Token = "0x40017CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal bool shouldActivateSelectedButton;

			[Token(Token = "0x40017CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			internal bool shouldPopContext;

			[Token(Token = "0x40017CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal MenuController $this;

			[Token(Token = "0x40017CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal object $current;

			[Token(Token = "0x40017CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal bool $disposing;

			[Token(Token = "0x40017CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int $PC;

			[Token(Token = "0x170004C2")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B0C")]
				[Address(RVA = "0xD169B0", Offset = "0xD169B0", VA = "0xD169B0", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004C3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B0D")]
				[Address(RVA = "0xD169B8", Offset = "0xD169B8", VA = "0xD169B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B0A")]
			[Address(RVA = "0xD15A84", Offset = "0xD15A84", VA = "0xD15A84")]
			[DebuggerHidden]
			public <PopOut>c__Iterator3()
			{
			}

			[Token(Token = "0x6001B0B")]
			[Address(RVA = "0xD1667C", Offset = "0xD1667C", VA = "0xD1667C", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B0E")]
			[Address(RVA = "0xD169C0", Offset = "0xD169C0", VA = "0xD169C0", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B0F")]
			[Address(RVA = "0xD169D4", Offset = "0xD169D4", VA = "0xD169D4", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40014DF")]
		public const float kfFadeInTime = 0.5f;

		[Token(Token = "0x40014E0")]
		public const float kfFadeOutTime = 0.25f;

		[Token(Token = "0x40014E1")]
		public const float kfPopInTime = 0.5f;

		[Token(Token = "0x40014E2")]
		public const float kfPopOutTime = 0.25f;

		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected ItemController[] maAllItems;

		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected int miCurrentItem;

		[Token(Token = "0x40014E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected bool mbUseDPad;

		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected List<ItemController> maItems;

		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected ItemController.MenuItemType meSelectedItem;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected List<ItemController> maHitItems;

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected bool mbInactive;

		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		private bool mbHasFocus;

		[Token(Token = "0x14000007")]
		public event OnMenuItemSelectedEvent OnMenuItemSelected
		{
			[Token(Token = "0x6001895")]
			[Address(RVA = "0xD14D88", Offset = "0xD14D88", VA = "0xD14D88")]
			add
			{
			}
			[Token(Token = "0x6001896")]
			[Address(RVA = "0xD14E7C", Offset = "0xD14E7C", VA = "0xD14E7C")]
			remove
			{
			}
		}

		[Token(Token = "0x14000008")]
		public event OnMenuFocusChangeEvent OnMenuFocusChange
		{
			[Token(Token = "0x6001897")]
			[Address(RVA = "0xD14F70", Offset = "0xD14F70", VA = "0xD14F70")]
			add
			{
			}
			[Token(Token = "0x6001898")]
			[Address(RVA = "0xD15064", Offset = "0xD15064", VA = "0xD15064")]
			remove
			{
			}
		}

		[Token(Token = "0x6001894")]
		[Address(RVA = "0xD04A00", Offset = "0xD04A00", VA = "0xD04A00")]
		public MenuController()
		{
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0xD04B0C", Offset = "0xD04B0C", VA = "0xD04B0C", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600189A")]
		[Address(RVA = "0xD15158", Offset = "0xD15158", VA = "0xD15158", Slot = "5")]
		public virtual void SetAvailableItems(List<AvailableItem> lAvailableItems)
		{
		}

		[Token(Token = "0x600189B")]
		[Address(RVA = "0xD052B0", Offset = "0xD052B0", VA = "0xD052B0", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x600189C")]
		[Address(RVA = "0xD05544", Offset = "0xD05544", VA = "0xD05544")]
		protected void updateFromHits()
		{
		}

		[Token(Token = "0x600189D")]
		[Address(RVA = "0xD0AEF8", Offset = "0xD0AEF8", VA = "0xD0AEF8")]
		public void ExitMenu(bool shouldPopContextOnExit, bool shouldActivateSelectedButton = true)
		{
		}

		[Token(Token = "0x600189E")]
		[Address(RVA = "0xD1596C", Offset = "0xD1596C", VA = "0xD1596C")]
		[DebuggerHidden]
		protected IEnumerator FadeIn()
		{
			return null;
		}

		[Token(Token = "0x600189F")]
		[Address(RVA = "0xD159F4", Offset = "0xD159F4", VA = "0xD159F4")]
		[DebuggerHidden]
		protected IEnumerator FadeOut()
		{
			return null;
		}

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0xD15634", Offset = "0xD15634", VA = "0xD15634")]
		[DebuggerHidden]
		protected IEnumerator PopIn()
		{
			return null;
		}

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0xD158C4", Offset = "0xD158C4", VA = "0xD158C4")]
		[DebuggerHidden]
		protected IEnumerator PopOut(bool shouldPopContext, bool shouldActivateSelectedButton)
		{
			return null;
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0xD0AF28", Offset = "0xD0AF28", VA = "0xD0AF28")]
		public void ActivateMenuItemSelected()
		{
		}
	}
	[Token(Token = "0x20003B6")]
	public class PlanetMenuController : MenuController
	{
		[Token(Token = "0x60018AB")]
		[Address(RVA = "0xD1D900", Offset = "0xD1D900", VA = "0xD1D900")]
		public PlanetMenuController()
		{
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0xD1D908", Offset = "0xD1D908", VA = "0xD1D908", Slot = "4")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0xD1DA18", Offset = "0xD1DA18", VA = "0xD1DA18", Slot = "6")]
		protected override void Update()
		{
		}
	}
}
[Token(Token = "0x20003B7")]
public class MeteoriteIconController : MonoBehaviour
{
	[Token(Token = "0x20003B8")]
	public struct ArrowIcon
	{
		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GameObject mGameObject;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private Vector2 mvDirection;

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private SpriteRenderer mSpriteRenderer;

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0xDB7D04", Offset = "0xDB7D04", VA = "0xDB7D04")]
		public ArrowIcon(Sprite sprite, int index, Transform parentTransform)
		{
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0xDB7D20", Offset = "0xDB7D20", VA = "0xDB7D20")]
		public void Update(float distance, float alpha)
		{
		}
	}

	[Token(Token = "0x40014ED")]
	private const int ARROWS_COUNT = 8;

	[Token(Token = "0x40014EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Sprite arrowSprite;

	[Token(Token = "0x40014EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float animationDuration;

	[Token(Token = "0x40014F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float arrowStartDistance;

	[Token(Token = "0x40014F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float arrowEndDistance;

	[Token(Token = "0x40014F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private ArrowIcon[] maArrowIcons;

	[Token(Token = "0x40014F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float mfAnimationPhase;

	[Token(Token = "0x40014F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float mfPhaseOffset;

	[Token(Token = "0x60018AE")]
	[Address(RVA = "0xDB753C", Offset = "0xDB753C", VA = "0xDB753C")]
	public MeteoriteIconController()
	{
	}

	[Token(Token = "0x60018AF")]
	[Address(RVA = "0xDB755C", Offset = "0xDB755C", VA = "0xDB755C")]
	private void Start()
	{
	}

	[Token(Token = "0x60018B0")]
	[Address(RVA = "0xDB7980", Offset = "0xDB7980", VA = "0xDB7980")]
	private void Update()
	{
	}
}
[Token(Token = "0x20003B9")]
internal class InfoPanelController : MonoBehaviour
{
	[Token(Token = "0x40014F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Text mText;

	[Token(Token = "0x40014F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Text mDistance;

	[Token(Token = "0x40014FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Image mPoint;

	[Token(Token = "0x40014FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Image mDestination;

	[Token(Token = "0x40014FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Image mOrigin;

	[Token(Token = "0x40014FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float mfBarStart;

	[Token(Token = "0x40014FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float mfBarWidth;

	[Token(Token = "0x60018B3")]
	[Address(RVA = "0xC3FEF8", Offset = "0xC3FEF8", VA = "0xC3FEF8")]
	public InfoPanelController()
	{
	}

	[Token(Token = "0x60018B4")]
	[Address(RVA = "0xC3FF00", Offset = "0xC3FF00", VA = "0xC3FF00")]
	private void Awake()
	{
	}

	[Token(Token = "0x60018B5")]
	[Address(RVA = "0xC401C0", Offset = "0xC401C0", VA = "0xC401C0")]
	public void SetTravelToText(string lDestination, bool lbIsSystem)
	{
	}

	[Token(Token = "0x60018B6")]
	[Address(RVA = "0xC40360", Offset = "0xC40360", VA = "0xC40360")]
	public void SetOriginDestination(Planet lOriginPlanet, bool lbIsOriginSystem, Planet lDestinationPlanet, bool lbIsDestinationSystem)
	{
	}

	[Token(Token = "0x60018B7")]
	[Address(RVA = "0xC40418", Offset = "0xC40418", VA = "0xC40418")]
	public void SetDistanceText(double lDistance, Distance.Units lDistanceUnits)
	{
	}

	[Token(Token = "0x60018B8")]
	[Address(RVA = "0xC40598", Offset = "0xC40598", VA = "0xC40598")]
	public void SetProgress(float lfProgress)
	{
	}
}
[Token(Token = "0x20003BA")]
internal class MessierZoomedController : MonoBehaviour
{
	[Token(Token = "0x40014FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private RawImage mMessierTexture;

	[Token(Token = "0x60018B9")]
	[Address(RVA = "0xDB7480", Offset = "0xDB7480", VA = "0xDB7480")]
	public MessierZoomedController()
	{
	}

	[Token(Token = "0x60018BA")]
	[Address(RVA = "0xDB7488", Offset = "0xDB7488", VA = "0xDB7488")]
	private void Awake()
	{
	}

	[Token(Token = "0x60018BB")]
	[Address(RVA = "0xDB74F0", Offset = "0xDB74F0", VA = "0xDB74F0")]
	public void SetTexture(Messier lMessier)
	{
	}
}
namespace UserInterface
{
	[Token(Token = "0x20003BB")]
	public class NavigationMenuController : MonoBehaviour
	{
		[Token(Token = "0x20003BC")]
		public struct AvailableItem
		{
			[Token(Token = "0x4001516")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int miItemValue;

			[Token(Token = "0x4001517")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public bool mbShowEnable;

			[Token(Token = "0x4001518")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string mContextText;
		}

		[Token(Token = "0x20003BD")]
		public delegate void OnMenuItemSelectedEvent(int lSelectedValue);

		[Token(Token = "0x20003BE")]
		public delegate void OnMenuWillExitEvent(int lSelectedValue);

		[Token(Token = "0x2000441")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC309CC", Offset = "0xC309CC")]
		private sealed class <FadeIn>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <lfFadeSpeed>__0;

			[Token(Token = "0x40017D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal float <lfAlpha>__0;

			[Token(Token = "0x40017D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal CanvasRenderer[] $locvar0;

			[Token(Token = "0x40017D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int $locvar1;

			[Token(Token = "0x40017D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal CanvasRenderer[] $locvar2;

			[Token(Token = "0x40017D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int $locvar3;

			[Token(Token = "0x40017D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal NavigationMenuController $this;

			[Token(Token = "0x40017D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal object $current;

			[Token(Token = "0x40017D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool $disposing;

			[Token(Token = "0x40017D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int $PC;

			[Token(Token = "0x170004C4")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B12")]
				[Address(RVA = "0xD19D58", Offset = "0xD19D58", VA = "0xD19D58", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004C5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B13")]
				[Address(RVA = "0xD19D60", Offset = "0xD19D60", VA = "0xD19D60", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B10")]
			[Address(RVA = "0xD19A08", Offset = "0xD19A08", VA = "0xD19A08")]
			[DebuggerHidden]
			public <FadeIn>c__Iterator0()
			{
			}

			[Token(Token = "0x6001B11")]
			[Address(RVA = "0xD19AB8", Offset = "0xD19AB8", VA = "0xD19AB8", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B14")]
			[Address(RVA = "0xD19D68", Offset = "0xD19D68", VA = "0xD19D68", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B15")]
			[Address(RVA = "0xD19D7C", Offset = "0xD19D7C", VA = "0xD19D7C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000442")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC30A2C", Offset = "0xC30A2C")]
		private sealed class <FadeOut>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <lfFadeSpeed>__0;

			[Token(Token = "0x40017DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal float <lfAlpha>__0;

			[Token(Token = "0x40017DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal CanvasRenderer[] $locvar0;

			[Token(Token = "0x40017DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int $locvar1;

			[Token(Token = "0x40017DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal CanvasRenderer[] $locvar2;

			[Token(Token = "0x40017DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int $locvar3;

			[Token(Token = "0x40017E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal NavigationMenuController $this;

			[Token(Token = "0x40017E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal object $current;

			[Token(Token = "0x40017E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool $disposing;

			[Token(Token = "0x40017E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int $PC;

			[Token(Token = "0x170004C6")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B18")]
				[Address(RVA = "0xD1A2EC", Offset = "0xD1A2EC", VA = "0xD1A2EC", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004C7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B19")]
				[Address(RVA = "0xD1A2F4", Offset = "0xD1A2F4", VA = "0xD1A2F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B16")]
			[Address(RVA = "0xD19A90", Offset = "0xD19A90", VA = "0xD19A90")]
			[DebuggerHidden]
			public <FadeOut>c__Iterator1()
			{
			}

			[Token(Token = "0x6001B17")]
			[Address(RVA = "0xD19E00", Offset = "0xD19E00", VA = "0xD19E00", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B1A")]
			[Address(RVA = "0xD1A2FC", Offset = "0xD1A2FC", VA = "0xD1A2FC", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B1B")]
			[Address(RVA = "0xD1A310", Offset = "0xD1A310", VA = "0xD1A310", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000443")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC30A8C", Offset = "0xC30A8C")]
		private sealed class <PopIn>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <lfPopSpeed>__0;

			[Token(Token = "0x40017E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal float <lfScale>__0;

			[Token(Token = "0x40017E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal NavigationMenuController $this;

			[Token(Token = "0x40017E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal object $current;

			[Token(Token = "0x40017E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal bool $disposing;

			[Token(Token = "0x40017E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int $PC;

			[Token(Token = "0x170004C8")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B1E")]
				[Address(RVA = "0xD1A560", Offset = "0xD1A560", VA = "0xD1A560", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004C9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B1F")]
				[Address(RVA = "0xD1A568", Offset = "0xD1A568", VA = "0xD1A568", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B1C")]
			[Address(RVA = "0xD19A98", Offset = "0xD19A98", VA = "0xD19A98")]
			[DebuggerHidden]
			public <PopIn>c__Iterator2()
			{
			}

			[Token(Token = "0x6001B1D")]
			[Address(RVA = "0xD1A394", Offset = "0xD1A394", VA = "0xD1A394", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B20")]
			[Address(RVA = "0xD1A570", Offset = "0xD1A570", VA = "0xD1A570", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B21")]
			[Address(RVA = "0xD1A584", Offset = "0xD1A584", VA = "0xD1A584", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000444")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC30AEC", Offset = "0xC30AEC")]
		private sealed class <PopOut>c__Iterator3 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <lfPopSpeed>__0;

			[Token(Token = "0x40017EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal float <lfScale>__0;

			[Token(Token = "0x40017EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal NavigationMenuController $this;

			[Token(Token = "0x40017ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal object $current;

			[Token(Token = "0x40017EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal bool $disposing;

			[Token(Token = "0x40017EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int $PC;

			[Token(Token = "0x170004CA")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B24")]
				[Address(RVA = "0xD1A814", Offset = "0xD1A814", VA = "0xD1A814", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004CB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B25")]
				[Address(RVA = "0xD1A81C", Offset = "0xD1A81C", VA = "0xD1A81C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B22")]
			[Address(RVA = "0xD19AA0", Offset = "0xD19AA0", VA = "0xD19AA0")]
			[DebuggerHidden]
			public <PopOut>c__Iterator3()
			{
			}

			[Token(Token = "0x6001B23")]
			[Address(RVA = "0xD1A608", Offset = "0xD1A608", VA = "0xD1A608", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B26")]
			[Address(RVA = "0xD1A824", Offset = "0xD1A824", VA = "0xD1A824", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B27")]
			[Address(RVA = "0xD1A838", Offset = "0xD1A838", VA = "0xD1A838", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000445")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC30B4C", Offset = "0xC30B4C")]
		private sealed class <RotateLeft>c__Iterator4 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Vector3 <lAngles>__0;

			[Token(Token = "0x40017F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal float <lfRotateBy>__0;

			[Token(Token = "0x40017F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal float <lfTarget>__0;

			[Token(Token = "0x40017F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal float <lfRotateSpeed>__0;

			[Token(Token = "0x40017F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal NavigationMenuController $this;

			[Token(Token = "0x40017F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal object $current;

			[Token(Token = "0x40017F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool $disposing;

			[Token(Token = "0x40017F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int $PC;

			[Token(Token = "0x170004CC")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B2A")]
				[Address(RVA = "0xD1AC08", Offset = "0xD1AC08", VA = "0xD1AC08", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004CD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B2B")]
				[Address(RVA = "0xD1AC10", Offset = "0xD1AC10", VA = "0xD1AC10", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B28")]
			[Address(RVA = "0xD19AA8", Offset = "0xD19AA8", VA = "0xD19AA8")]
			[DebuggerHidden]
			public <RotateLeft>c__Iterator4()
			{
			}

			[Token(Token = "0x6001B29")]
			[Address(RVA = "0xD1A8BC", Offset = "0xD1A8BC", VA = "0xD1A8BC", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B2C")]
			[Address(RVA = "0xD1AC18", Offset = "0xD1AC18", VA = "0xD1AC18", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B2D")]
			[Address(RVA = "0xD1AC2C", Offset = "0xD1AC2C", VA = "0xD1AC2C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000446")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC30BAC", Offset = "0xC30BAC")]
		private sealed class <RotateRight>c__Iterator5 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x40017F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Vector3 <lAngles>__0;

			[Token(Token = "0x40017F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal float <lfRotateBy>__0;

			[Token(Token = "0x40017FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal float <lfTarget>__0;

			[Token(Token = "0x40017FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal float <lfRotateSpeed>__0;

			[Token(Token = "0x40017FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal NavigationMenuController $this;

			[Token(Token = "0x40017FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal object $current;

			[Token(Token = "0x40017FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal bool $disposing;

			[Token(Token = "0x40017FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal int $PC;

			[Token(Token = "0x170004CE")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B30")]
				[Address(RVA = "0xD1AFBC", Offset = "0xD1AFBC", VA = "0xD1AFBC", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004CF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B31")]
				[Address(RVA = "0xD1AFC4", Offset = "0xD1AFC4", VA = "0xD1AFC4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B2E")]
			[Address(RVA = "0xD19AB0", Offset = "0xD19AB0", VA = "0xD19AB0")]
			[DebuggerHidden]
			public <RotateRight>c__Iterator5()
			{
			}

			[Token(Token = "0x6001B2F")]
			[Address(RVA = "0xD1ACB0", Offset = "0xD1ACB0", VA = "0xD1ACB0", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B32")]
			[Address(RVA = "0xD1AFCC", Offset = "0xD1AFCC", VA = "0xD1AFCC", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B33")]
			[Address(RVA = "0xD1AFE0", Offset = "0xD1AFE0", VA = "0xD1AFE0", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4001500")]
		public const int kiNoValue = -1;

		[Token(Token = "0x4001501")]
		public const int kiQuitValue = -2;

		[Token(Token = "0x4001502")]
		public const int kiGoHomeValue = -3;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float kfFadeInTime;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float kfFadeOutTime;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float kfPopInTime;

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float kfPopOutTime;

		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float kfRotateTime;

		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ItemController[] maAllItems;

		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int miCurrentItem;

		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ItemController> maItems;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private List<int> maItemTypes;

		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int meSelectedItem;

		[Token(Token = "0x400150D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool mbAllowQuit;

		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private IEnumerator mRotateRoutine;

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool mbUseTouchSelection;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool mbOnPrimaryController;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform mControlHint;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Transform mBackHint;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 mBackPos;

		[Token(Token = "0x14000009")]
		public event OnMenuItemSelectedEvent OnMenuItemSelected
		{
			[Token(Token = "0x60018BD")]
			[Address(RVA = "0xD1761C", Offset = "0xD1761C", VA = "0xD1761C")]
			add
			{
			}
			[Token(Token = "0x60018BE")]
			[Address(RVA = "0xD17710", Offset = "0xD17710", VA = "0xD17710")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000A")]
		public event OnMenuWillExitEvent OnMenuWillExit
		{
			[Token(Token = "0x60018BF")]
			[Address(RVA = "0xD17804", Offset = "0xD17804", VA = "0xD17804")]
			add
			{
			}
			[Token(Token = "0x60018C0")]
			[Address(RVA = "0xD178F8", Offset = "0xD178F8", VA = "0xD178F8")]
			remove
			{
			}
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0xD175F0", Offset = "0xD175F0", VA = "0xD175F0")]
		public NavigationMenuController()
		{
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0xD179EC", Offset = "0xD179EC", VA = "0xD179EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60018C2")]
		[Address(RVA = "0xD17B4C", Offset = "0xD17B4C", VA = "0xD17B4C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60018C3")]
		[Address(RVA = "0xD17CE8", Offset = "0xD17CE8", VA = "0xD17CE8")]
		public void SetAvailableItems(List<AvailableItem> lAvailableItems, bool lbAllowQuit, bool lbResetCurrent)
		{
		}

		[Token(Token = "0x60018C4")]
		[Address(RVA = "0xD18880", Offset = "0xD18880", VA = "0xD18880")]
		public void ReplaceIcon(int liItemIndex, Sprite lIcon)
		{
		}

		[Token(Token = "0x60018C5")]
		[Address(RVA = "0xD0AF58", Offset = "0xD0AF58", VA = "0xD0AF58")]
		public void ExitMenu()
		{
		}

		[Token(Token = "0x60018C6")]
		[Address(RVA = "0xD18BAC", Offset = "0xD18BAC", VA = "0xD18BAC")]
		private void Update()
		{
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0xD19988", Offset = "0xD19988", VA = "0xD19988")]
		[DebuggerHidden]
		public IEnumerator FadeIn()
		{
			return null;
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0xD19A10", Offset = "0xD19A10", VA = "0xD19A10")]
		[DebuggerHidden]
		public IEnumerator FadeOut()
		{
			return null;
		}

		[Token(Token = "0x60018C9")]
		[Address(RVA = "0xD18800", Offset = "0xD18800", VA = "0xD18800")]
		[DebuggerHidden]
		public IEnumerator PopIn()
		{
			return null;
		}

		[Token(Token = "0x60018CA")]
		[Address(RVA = "0xD18B2C", Offset = "0xD18B2C", VA = "0xD18B2C")]
		[DebuggerHidden]
		public IEnumerator PopOut()
		{
			return null;
		}

		[Token(Token = "0x60018CB")]
		[Address(RVA = "0xD19888", Offset = "0xD19888", VA = "0xD19888")]
		[DebuggerHidden]
		public IEnumerator RotateLeft()
		{
			return null;
		}

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0xD19908", Offset = "0xD19908", VA = "0xD19908")]
		[DebuggerHidden]
		public IEnumerator RotateRight()
		{
			return null;
		}

		[Token(Token = "0x60018CD")]
		[Address(RVA = "0xD18398", Offset = "0xD18398", VA = "0xD18398")]
		private void UprightChildren()
		{
		}
	}
}
[Token(Token = "0x20003BF")]
public class OrreryInfoPanelController : MonoBehaviour
{
	[Token(Token = "0x4001519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Text dateText;

	[Token(Token = "0x400151A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Image bar;

	[Token(Token = "0x400151B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Image point;

	[Token(Token = "0x400151C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image scaleBar;

	[Token(Token = "0x400151D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Image scalePoint;

	[Token(Token = "0x400151E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image scaleOrrey;

	[Token(Token = "0x400151F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public PanelItemController pauseButton;

	[Token(Token = "0x4001520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float mfHalfBarWidth;

	[Token(Token = "0x4001521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float mfHalfScaleBarWidth;

	[Token(Token = "0x60018D6")]
	[Address(RVA = "0xC766DC", Offset = "0xC766DC", VA = "0xC766DC")]
	public OrreryInfoPanelController()
	{
	}

	[Token(Token = "0x60018D7")]
	[Address(RVA = "0xC766E4", Offset = "0xC766E4", VA = "0xC766E4")]
	private void Start()
	{
	}

	[Token(Token = "0x60018D8")]
	[Address(RVA = "0xC76BC4", Offset = "0xC76BC4", VA = "0xC76BC4")]
	private void Update()
	{
	}

	[Token(Token = "0x60018D9")]
	[Address(RVA = "0xC76E68", Offset = "0xC76E68", VA = "0xC76E68")]
	private void SetTimeShift(float lfProgress)
	{
	}

	[Token(Token = "0x60018DA")]
	[Address(RVA = "0xC76FC0", Offset = "0xC76FC0", VA = "0xC76FC0")]
	private void SetScale(float lfScale)
	{
	}

	[Token(Token = "0x60018DB")]
	[Address(RVA = "0xC7719C", Offset = "0xC7719C", VA = "0xC7719C")]
	private void OnItemSelected(PanelItemController.PanelItemType lSelected)
	{
	}

	[Token(Token = "0x60018DC")]
	[Address(RVA = "0xC7749C", Offset = "0xC7749C", VA = "0xC7749C")]
	private void OnItemHeld(PanelItemController.PanelItemType lSelected)
	{
	}
}
[Token(Token = "0x20003C0")]
public class SurfaceDetailInfoController : MonoBehaviour
{
	[Token(Token = "0x4001522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Text mTitle;

	[Token(Token = "0x4001523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Text mInfo;

	[Token(Token = "0x60018DD")]
	[Address(RVA = "0xCFB200", Offset = "0xCFB200", VA = "0xCFB200")]
	public SurfaceDetailInfoController()
	{
	}

	[Token(Token = "0x60018DE")]
	[Address(RVA = "0xCFB208", Offset = "0xCFB208", VA = "0xCFB208")]
	private void Awake()
	{
	}

	[Token(Token = "0x60018DF")]
	[Address(RVA = "0xCFB2E4", Offset = "0xCFB2E4", VA = "0xCFB2E4")]
	public void SetInfo(SurfaceDetail lDetail)
	{
	}

	[Token(Token = "0x60018E0")]
	[Address(RVA = "0xCFB384", Offset = "0xCFB384", VA = "0xCFB384")]
	private void Update()
	{
	}
}
namespace PlanetMenu
{
	[Token(Token = "0x20003C1")]
	public class TestController : MonoBehaviour
	{
		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private BaseController mInput;

		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameObject mPlanetMenu;

		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private GameObject mPlanetMenuPrefab;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int options;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private List<AvailableItem>[] maAvailables;

		[Token(Token = "0x60018E1")]
		[Address(RVA = "0xC98564", Offset = "0xC98564", VA = "0xC98564")]
		public TestController()
		{
		}

		[Token(Token = "0x60018E2")]
		[Address(RVA = "0xC985E4", Offset = "0xC985E4", VA = "0xC985E4")]
		private void Start()
		{
		}

		[Token(Token = "0x60018E3")]
		[Address(RVA = "0xC98A54", Offset = "0xC98A54", VA = "0xC98A54")]
		private void Update()
		{
		}

		[Token(Token = "0x60018E4")]
		[Address(RVA = "0xC98D50", Offset = "0xC98D50", VA = "0xC98D50")]
		private void OnMenuItemSelected(ItemController.MenuItemType lSelected)
		{
		}
	}
}
[Token(Token = "0x20003C2")]
public static class PointerIntersectionHandler
{
	[Token(Token = "0x20003C3")]
	public enum ScreenAreas
	{
		[Token(Token = "0x400152B")]
		None,
		[Token(Token = "0x400152C")]
		Offscreen,
		[Token(Token = "0x400152D")]
		BrowsePane
	}

	[Token(Token = "0x4001529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<ScreenAreas, RectTransform> saRectDictionary;

	[Token(Token = "0x60018E5")]
	[Address(RVA = "0xE5A6A0", Offset = "0xE5A6A0", VA = "0xE5A6A0")]
	static PointerIntersectionHandler()
	{
	}

	[Token(Token = "0x60018E6")]
	[Address(RVA = "0xE5A734", Offset = "0xE5A734", VA = "0xE5A734")]
	public static void AddRectTransform(ScreenAreas rectKey, RectTransform rect)
	{
	}

	[Token(Token = "0x60018E7")]
	[Address(RVA = "0xE5A7F4", Offset = "0xE5A7F4", VA = "0xE5A7F4")]
	public static void RemoveRect(ScreenAreas rectKey)
	{
	}

	[Token(Token = "0x60018E8")]
	[Address(RVA = "0xE5A8AC", Offset = "0xE5A8AC", VA = "0xE5A8AC")]
	public static void ClearAllRects()
	{
	}

	[Token(Token = "0x60018E9")]
	[Address(RVA = "0xE5A95C", Offset = "0xE5A95C", VA = "0xE5A95C")]
	public static ScreenAreas GetAreaForPointerPosition()
	{
		return default(ScreenAreas);
	}

	[Token(Token = "0x60018EA")]
	[Address(RVA = "0xE5ACB4", Offset = "0xE5ACB4", VA = "0xE5ACB4")]
	public static bool IsPointerOverScreenArea(ScreenAreas area)
	{
		return default(bool);
	}
}
[Token(Token = "0x20003C4")]
public class ScreenRelativeUI : MonoBehaviour
{
	[Token(Token = "0x400152E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public CameraWrapper cameraWrapper;

	[Token(Token = "0x400152F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public TextMesh textMesh;

	[Token(Token = "0x4001530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ScreenRelativeUI sInstance;

	[Token(Token = "0x60018EB")]
	[Address(RVA = "0xE06BCC", Offset = "0xE06BCC", VA = "0xE06BCC")]
	public ScreenRelativeUI()
	{
	}

	[Token(Token = "0x60018EC")]
	[Address(RVA = "0xE06BD4", Offset = "0xE06BD4", VA = "0xE06BD4")]
	private void Start()
	{
	}

	[Token(Token = "0x60018ED")]
	[Address(RVA = "0xE06C38", Offset = "0xE06C38", VA = "0xE06C38")]
	private void Update()
	{
	}

	[Token(Token = "0x60018EE")]
	[Address(RVA = "0xE06CA4", Offset = "0xE06CA4", VA = "0xE06CA4")]
	public static void SetText(string text)
	{
	}
}
namespace UserInterface
{
	[Token(Token = "0x20003C5")]
	public class SelectionRingController : MonoBehaviour
	{
		[Token(Token = "0x4001531")]
		private const int SELECTED_LINE_SEGMENTS = 72;

		[Token(Token = "0x4001532")]
		private const float SELECTED_ANGLE_START = 30f;

		[Token(Token = "0x4001533")]
		private const float SELECTED_PULSE_SCALE = 0.4f;

		[Token(Token = "0x4001534")]
		private const float DESELECT_DURATION = 0.2f;

		[Token(Token = "0x4001535")]
		private const float BACKING_RING_PUSH_BACK = 0.01f;

		[Token(Token = "0x4001536")]
		private const float INFORMATION_CHANGE_DURATION = 2f;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Material mSelectedCircleMaterial;

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Material mSelectedRingMaterial;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Material mInformationIndicatorMaterial;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LineMesh mSelectedCircleLineMesh;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private GameObject mSelectedRingGameObject;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RingMesh mSelectedRingMesh;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private GameObject mInformationIndicatorGameObject;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RingMesh mInformationIndicatorMesh;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Color mSelectedRingMeshColor;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Color mInformationIndicatorColor;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatedValue mSelectionCircleAnimation;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float mfOffsetScaled;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float mfSelectionProgress;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private CelestialLabel mLabel;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Transform mLabelScaledTransform;

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool mbNeedsDestroying;

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private GameObject mTapActionIcon;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool mbDisplayInformationIndicator;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool mbIsLocked;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float mfInformationChangeStartTime;

		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int miInformationElements;

		[Token(Token = "0x400154C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int miInformationItemIndex;

		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool mbIsDeselecting;

		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float mfDeselectionStartTime;

		[Token(Token = "0x17000461")]
		public float offsetScaled
		{
			[Token(Token = "0x60018F0")]
			[Address(RVA = "0xD036EC", Offset = "0xD036EC", VA = "0xD036EC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000462")]
		public float selectionProgress
		{
			[Token(Token = "0x60018F1")]
			[Address(RVA = "0xD02DF8", Offset = "0xD02DF8", VA = "0xD02DF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000463")]
		public bool needsDestroying
		{
			[Token(Token = "0x60018F2")]
			[Address(RVA = "0xD036E4", Offset = "0xD036E4", VA = "0xD036E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000464")]
		public bool displayInformationIndicator
		{
			[Token(Token = "0x60018F3")]
			[Address(RVA = "0xD109BC", Offset = "0xD109BC", VA = "0xD109BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000465")]
		public bool isLocked
		{
			[Token(Token = "0x60018F4")]
			[Address(RVA = "0xD0FA50", Offset = "0xD0FA50", VA = "0xD0FA50")]
			set
			{
			}
		}

		[Token(Token = "0x17000466")]
		public int informationItemIndex
		{
			[Token(Token = "0x60018F5")]
			[Address(RVA = "0xD0F5C8", Offset = "0xD0F5C8", VA = "0xD0F5C8")]
			set
			{
			}
		}

		[Token(Token = "0x60018EF")]
		[Address(RVA = "0xD1DFE4", Offset = "0xD1DFE4", VA = "0xD1DFE4")]
		public SelectionRingController()
		{
		}

		[Token(Token = "0x60018F6")]
		[Address(RVA = "0xD0F5F8", Offset = "0xD0F5F8", VA = "0xD0F5F8")]
		public void ForceSetInformationItemIndex(int liInformationItemIndex)
		{
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0xD00B00", Offset = "0xD00B00", VA = "0xD00B00")]
		public void Initialise(CelestialLabel label, Transform labelScaledTransform)
		{
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0xD1DFEC", Offset = "0xD1DFEC", VA = "0xD1DFEC")]
		private void Start()
		{
		}

		[Token(Token = "0x60018F9")]
		[Address(RVA = "0xD10140", Offset = "0xD10140", VA = "0xD10140")]
		public void SetupInformationElements(int count)
		{
		}

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0xD1E810", Offset = "0xD1E810", VA = "0xD1E810")]
		private void Update()
		{
		}

		[Token(Token = "0x60018FB")]
		[Address(RVA = "0xD00A64", Offset = "0xD00A64", VA = "0xD00A64")]
		public void Destroy()
		{
		}

		[Token(Token = "0x60018FC")]
		[Address(RVA = "0xD1F0F0", Offset = "0xD1F0F0", VA = "0xD1F0F0")]
		private float deSelectProgress()
		{
			return default(float);
		}

		[Token(Token = "0x60018FD")]
		[Address(RVA = "0xD008B4", Offset = "0xD008B4", VA = "0xD008B4")]
		public void DeSelect()
		{
		}
	}
}
[Token(Token = "0x20003C6")]
public static class StringFormatter
{
	[Token(Token = "0x400154F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string[] saTimeUnitKeysSingular;

	[Token(Token = "0x4001550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static string[] saTimeUnitKeysPlural;

	[Token(Token = "0x60018FE")]
	[Address(RVA = "0xCE5BF0", Offset = "0xCE5BF0", VA = "0xCE5BF0")]
	public static string Distance(Distance distance, Distance.Units outputUnits, bool abbreviate = true)
	{
		return null;
	}

	[Token(Token = "0x60018FF")]
	[Address(RVA = "0xCF911C", Offset = "0xCF911C", VA = "0xCF911C")]
	public static string TimeSpan(TimeSpan timeSpan)
	{
		return null;
	}

	[Token(Token = "0x6001900")]
	[Address(RVA = "0xCF9550", Offset = "0xCF9550", VA = "0xCF9550")]
	public static string TimeSpan(double days)
	{
		return null;
	}

	[Token(Token = "0x6001901")]
	[Address(RVA = "0xCF91F8", Offset = "0xCF91F8", VA = "0xCF91F8")]
	public static string TimeSpan(int days, int hours, int minutes, int seconds)
	{
		return null;
	}

	[Token(Token = "0x6001902")]
	[Address(RVA = "0xCF96A0", Offset = "0xCF96A0", VA = "0xCF96A0")]
	public static string HMS(float number, bool decimalSeconds = false)
	{
		return null;
	}

	[Token(Token = "0x6001903")]
	[Address(RVA = "0xCF97DC", Offset = "0xCF97DC", VA = "0xCF97DC")]
	public static string DMS(float number, bool decimalSeconds = false)
	{
		return null;
	}

	[Token(Token = "0x6001904")]
	[Address(RVA = "0xCE5DC4", Offset = "0xCE5DC4", VA = "0xCE5DC4")]
	public static string StellarMagnitude(float magnitude)
	{
		return null;
	}
}
namespace UserInterface
{
	[Token(Token = "0x20003C7")]
	public class TapIconController : MonoBehaviour
	{
		[Token(Token = "0x4001551")]
		private const float ARROW_X_ROTATION = 70f;

		[Token(Token = "0x4001552")]
		private const float FADE_DURATION = 1f;

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public GameObject arrowGameObject;

		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject tapTextGameObject;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public GameObject tapInputButtonGameObject;

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture travelArrowToTexture;

		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Texture travelArrowBackTexture;

		[Token(Token = "0x4001558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Texture lookAtIcon;

		[Token(Token = "0x4001559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Texture tapButtonIcon;

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material mTapActionIconContainerMaterial;

		[Token(Token = "0x400155B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Material mTravelArrowMaterial;

		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material mTapTextMaterial;

		[Token(Token = "0x400155D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Material mTapInputButtonMaterial;

		[Token(Token = "0x400155E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CelestialObject mSelectableObjectCache;

		[Token(Token = "0x400155F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private SelectableObjectActions mAction;

		[Token(Token = "0x4001560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float mfOpacity;

		[Token(Token = "0x4001561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool mbIsEnabled;

		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		private bool mbIsFlatIcon;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float mfHandednessCache;

		[Token(Token = "0x4001564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Canvas mTravelSurface;

		[Token(Token = "0x4001565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool mbCanTravelToSurface;

		[Token(Token = "0x6001906")]
		[Address(RVA = "0xD24464", Offset = "0xD24464", VA = "0xD24464")]
		public TapIconController()
		{
		}

		[Token(Token = "0x6001907")]
		[Address(RVA = "0xD2446C", Offset = "0xD2446C", VA = "0xD2446C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001908")]
		[Address(RVA = "0xD246A8", Offset = "0xD246A8", VA = "0xD246A8")]
		private void hideUI()
		{
		}

		[Token(Token = "0x6001909")]
		[Address(RVA = "0xD249B4", Offset = "0xD249B4", VA = "0xD249B4")]
		private void Update()
		{
		}

		[Token(Token = "0x600190A")]
		[Address(RVA = "0xD250D0", Offset = "0xD250D0", VA = "0xD250D0")]
		private void setIconPosition()
		{
		}

		[Token(Token = "0x600190B")]
		[Address(RVA = "0xD246E0", Offset = "0xD246E0", VA = "0xD246E0")]
		private void setMaterialOpacities()
		{
		}

		[Token(Token = "0x600190C")]
		[Address(RVA = "0xD25934", Offset = "0xD25934", VA = "0xD25934")]
		private void updateOpacity()
		{
		}
	}
	[Token(Token = "0x20003C8")]
	public class TapIconManager : MonoBehaviour
	{
		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public GameObject tapIconPrefab;

		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TapIconController mTapIconController;

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private CelestialObject mSelectableObjectCache;

		[Token(Token = "0x600190D")]
		[Address(RVA = "0xD25998", Offset = "0xD25998", VA = "0xD25998")]
		public TapIconManager()
		{
		}

		[Token(Token = "0x600190E")]
		[Address(RVA = "0xD259A0", Offset = "0xD259A0", VA = "0xD259A0")]
		private void Start()
		{
		}

		[Token(Token = "0x600190F")]
		[Address(RVA = "0xD259A4", Offset = "0xD259A4", VA = "0xD259A4")]
		private void Update()
		{
		}
	}
}
[Token(Token = "0x20003C9")]
public class TapTextController : MonoBehaviour
{
	[Token(Token = "0x6001910")]
	[Address(RVA = "0xC9B374", Offset = "0xC9B374", VA = "0xC9B374")]
	public TapTextController()
	{
	}

	[Token(Token = "0x6001911")]
	[Address(RVA = "0xC9B37C", Offset = "0xC9B37C", VA = "0xC9B37C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001912")]
	[Address(RVA = "0xC9B450", Offset = "0xC9B450", VA = "0xC9B450")]
	private void Update()
	{
	}
}
namespace UserInterface
{
	[Token(Token = "0x20003CA")]
	public class UIManager
	{
		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static LabelManager sLabelManager;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static TapIconController sTapIconController;

		[Token(Token = "0x6001913")]
		[Address(RVA = "0xD25BE8", Offset = "0xD25BE8", VA = "0xD25BE8")]
		public UIManager()
		{
		}

		[Token(Token = "0x6001914")]
		[Address(RVA = "0xD25BF0", Offset = "0xD25BF0", VA = "0xD25BF0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001915")]
		[Address(RVA = "0xD25BF4", Offset = "0xD25BF4", VA = "0xD25BF4")]
		private void Update()
		{
		}
	}
}
[Token(Token = "0x20003CB")]
public class VrIntroPanel : MonoBehaviour
{
	[Token(Token = "0x400156B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Image mImage;

	[Token(Token = "0x400156C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Text mTitle;

	[Token(Token = "0x400156D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Text mMessage;

	[Token(Token = "0x400156E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text mPrompt;

	[Token(Token = "0x400156F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Transform mRootTransform;

	[Token(Token = "0x6001916")]
	[Address(RVA = "0xD28A64", Offset = "0xD28A64", VA = "0xD28A64")]
	public VrIntroPanel()
	{
	}

	[Token(Token = "0x6001917")]
	[Address(RVA = "0xD28A6C", Offset = "0xD28A6C", VA = "0xD28A6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001918")]
	[Address(RVA = "0xD28B60", Offset = "0xD28B60", VA = "0xD28B60")]
	public void Prepare(string lTitle, string lMessage, string lPrompt, string lImage)
	{
	}

	[Token(Token = "0x6001919")]
	[Address(RVA = "0xD28CC0", Offset = "0xD28CC0", VA = "0xD28CC0")]
	public void Prepare(string lTitle, string lMessage, string lPrompt, Sprite lImage)
	{
	}

	[Token(Token = "0x600191A")]
	[Address(RVA = "0xD28D78", Offset = "0xD28D78", VA = "0xD28D78")]
	public void Prepare(string lTitle, string lMessage, Sprite lImage)
	{
	}

	[Token(Token = "0x600191B")]
	[Address(RVA = "0xD28EEC", Offset = "0xD28EEC", VA = "0xD28EEC")]
	private void Start()
	{
	}

	[Token(Token = "0x600191C")]
	[Address(RVA = "0xD28EF0", Offset = "0xD28EF0", VA = "0xD28EF0")]
	private void Update()
	{
	}

	[Token(Token = "0x600191D")]
	[Address(RVA = "0xD28EF4", Offset = "0xD28EF4", VA = "0xD28EF4")]
	private void UpdateTrackedPosition()
	{
	}
}
[Token(Token = "0x20003CC")]
public class VrMessageBox : MonoBehaviour
{
	[Token(Token = "0x4001570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Text mMessage;

	[Token(Token = "0x4001571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Text mPrompt;

	[Token(Token = "0x4001572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Transform mRootTransform;

	[Token(Token = "0x4001573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 mOffset;

	[Token(Token = "0x600191E")]
	[Address(RVA = "0xD2AEC4", Offset = "0xD2AEC4", VA = "0xD2AEC4")]
	public VrMessageBox()
	{
	}

	[Token(Token = "0x600191F")]
	[Address(RVA = "0xD2AECC", Offset = "0xD2AECC", VA = "0xD2AECC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001920")]
	[Address(RVA = "0xD2B090", Offset = "0xD2B090", VA = "0xD2B090")]
	public void SetMessageWithPrompt(string lMessage, string lPrompt)
	{
	}

	[Token(Token = "0x6001921")]
	[Address(RVA = "0xD2B0F8", Offset = "0xD2B0F8", VA = "0xD2B0F8")]
	public void SetMessage(string lMessage)
	{
	}

	[Token(Token = "0x6001922")]
	[Address(RVA = "0xD2B130", Offset = "0xD2B130", VA = "0xD2B130")]
	private void Start()
	{
	}

	[Token(Token = "0x6001923")]
	[Address(RVA = "0xD2B5B0", Offset = "0xD2B5B0", VA = "0xD2B5B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6001924")]
	[Address(RVA = "0xD2B134", Offset = "0xD2B134", VA = "0xD2B134")]
	private void UpdateTrackedPosition()
	{
	}
}
namespace TMPro.Examples
{
	[Token(Token = "0x20003CD")]
	public class Benchmark01 : MonoBehaviour
	{
		[Token(Token = "0x2000447")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC30C1C", Offset = "0xC30C1C")]
		private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001800")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal int <i>__1;

			[Token(Token = "0x4001801")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal Benchmark01 $this;

			[Token(Token = "0x4001802")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal object $current;

			[Token(Token = "0x4001803")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal bool $disposing;

			[Token(Token = "0x4001804")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int $PC;

			[Token(Token = "0x170004D0")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B36")]
				[Address(RVA = "0xC9DD54", Offset = "0xC9DD54", VA = "0xC9DD54", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004D1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B37")]
				[Address(RVA = "0xC9DD5C", Offset = "0xC9DD5C", VA = "0xC9DD5C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B34")]
			[Address(RVA = "0xC9D334", Offset = "0xC9D334", VA = "0xC9D334")]
			[DebuggerHidden]
			public <Start>c__Iterator0()
			{
			}

			[Token(Token = "0x6001B35")]
			[Address(RVA = "0xC9D33C", Offset = "0xC9D33C", VA = "0xC9D33C", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B38")]
			[Address(RVA = "0xC9DD64", Offset = "0xC9DD64", VA = "0xC9DD64", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B39")]
			[Address(RVA = "0xC9DD78", Offset = "0xC9DD78", VA = "0xC9DD78", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4001574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int BenchmarkType;

		[Token(Token = "0x4001575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TMP_FontAsset TMProFont;

		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Font TextMeshFont;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextMeshPro m_textMeshPro;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private TextContainer m_textContainer;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMesh m_textMesh;

		[Token(Token = "0x400157A")]
		private const string label01 = "The <#0050FF>count is: </color>{0}";

		[Token(Token = "0x400157B")]
		private const string label02 = "The <color=#0050FF>count is: </color>";

		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Material m_material01;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material m_material02;

		[Token(Token = "0x6001925")]
		[Address(RVA = "0xC9D2AC", Offset = "0xC9D2AC", VA = "0xC9D2AC")]
		public Benchmark01()
		{
		}

		[Token(Token = "0x6001926")]
		[Address(RVA = "0xC9D2B4", Offset = "0xC9D2B4", VA = "0xC9D2B4")]
		[DebuggerHidden]
		private IEnumerator Start()
		{
			return null;
		}
	}
	[Token(Token = "0x20003CE")]
	public class Benchmark01_UGUI : MonoBehaviour
	{
		[Token(Token = "0x2000448")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC30C8C", Offset = "0xC30C8C")]
		private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001805")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal int <i>__1;

			[Token(Token = "0x4001806")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal Benchmark01_UGUI $this;

			[Token(Token = "0x4001807")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal object $current;

			[Token(Token = "0x4001808")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal bool $disposing;

			[Token(Token = "0x4001809")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int $PC;

			[Token(Token = "0x170004D2")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B3C")]
				[Address(RVA = "0xC9E70C", Offset = "0xC9E70C", VA = "0xC9E70C", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004D3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B3D")]
				[Address(RVA = "0xC9E714", Offset = "0xC9E714", VA = "0xC9E714", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B3A")]
			[Address(RVA = "0xC9DE84", Offset = "0xC9DE84", VA = "0xC9DE84")]
			[DebuggerHidden]
			public <Start>c__Iterator0()
			{
			}

			[Token(Token = "0x6001B3B")]
			[Address(RVA = "0xC9DE8C", Offset = "0xC9DE8C", VA = "0xC9DE8C", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B3E")]
			[Address(RVA = "0xC9E71C", Offset = "0xC9E71C", VA = "0xC9E71C", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B3F")]
			[Address(RVA = "0xC9E730", Offset = "0xC9E730", VA = "0xC9E730", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int BenchmarkType;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Canvas canvas;

		[Token(Token = "0x4001580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TMP_FontAsset TMProFont;

		[Token(Token = "0x4001581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Font TextMeshFont;

		[Token(Token = "0x4001582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private TextMeshProUGUI m_textMeshPro;

		[Token(Token = "0x4001583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text m_textMesh;

		[Token(Token = "0x4001584")]
		private const string label01 = "The <#0050FF>count is: </color>";

		[Token(Token = "0x4001585")]
		private const string label02 = "The <color=#0050FF>count is: </color>";

		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Material m_material01;

		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material m_material02;

		[Token(Token = "0x6001927")]
		[Address(RVA = "0xC9DDFC", Offset = "0xC9DDFC", VA = "0xC9DDFC")]
		public Benchmark01_UGUI()
		{
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0xC9DE04", Offset = "0xC9DE04", VA = "0xC9DE04")]
		[DebuggerHidden]
		private IEnumerator Start()
		{
			return null;
		}
	}
	[Token(Token = "0x20003CF")]
	public class Benchmark02 : MonoBehaviour
	{
		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int SpawnType;

		[Token(Token = "0x4001589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int NumberOfNPC;

		[Token(Token = "0x400158A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private TextMeshProFloatingText floatingText_Script;

		[Token(Token = "0x6001929")]
		[Address(RVA = "0xC9E7B4", Offset = "0xC9E7B4", VA = "0xC9E7B4")]
		public Benchmark02()
		{
		}

		[Token(Token = "0x600192A")]
		[Address(RVA = "0xC9E7C4", Offset = "0xC9E7C4", VA = "0xC9E7C4")]
		private void Start()
		{
		}
	}
	[Token(Token = "0x20003D0")]
	public class Benchmark03 : MonoBehaviour
	{
		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int SpawnType;

		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int NumberOfNPC;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Font TheFont;

		[Token(Token = "0x600192B")]
		[Address(RVA = "0xC9F208", Offset = "0xC9F208", VA = "0xC9F208")]
		public Benchmark03()
		{
		}

		[Token(Token = "0x600192C")]
		[Address(RVA = "0xC9F218", Offset = "0xC9F218", VA = "0xC9F218")]
		private void Awake()
		{
		}

		[Token(Token = "0x600192D")]
		[Address(RVA = "0xC9F21C", Offset = "0xC9F21C", VA = "0xC9F21C")]
		private void Start()
		{
		}
	}
	[Token(Token = "0x20003D1")]
	public class Benchmark04 : MonoBehaviour
	{
		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int SpawnType;

		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int MinPointSize;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int MaxPointSize;

		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Steps;

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Transform m_Transform;

		[Token(Token = "0x600192E")]
		[Address(RVA = "0xC9F634", Offset = "0xC9F634", VA = "0xC9F634")]
		public Benchmark04()
		{
		}

		[Token(Token = "0x600192F")]
		[Address(RVA = "0xC9F650", Offset = "0xC9F650", VA = "0xC9F650")]
		private void Start()
		{
		}
	}
	[Token(Token = "0x20003D2")]
	public class CameraController : MonoBehaviour
	{
		[Token(Token = "0x20003D3")]
		public enum CameraModes
		{
			[Token(Token = "0x40015AD")]
			Follow,
			[Token(Token = "0x40015AE")]
			Isometric,
			[Token(Token = "0x40015AF")]
			Free
		}

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Transform cameraTransform;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform dummyTarget;

		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Transform CameraTarget;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float FollowDistance;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MaxFollowDistance;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MinFollowDistance;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float ElevationAngle;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MaxElevationAngle;

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float MinElevationAngle;

		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float OrbitalAngle;

		[Token(Token = "0x400159D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public CameraModes CameraMode;

		[Token(Token = "0x400159E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool MovementSmoothing;

		[Token(Token = "0x400159F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool RotationSmoothing;

		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private bool previousSmoothing;

		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float MovementSmoothingValue;

		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float RotationSmoothingValue;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MoveSensitivity;

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 currentVelocity;

		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 desiredPosition;

		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float mouseX;

		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float mouseY;

		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 moveVector;

		[Token(Token = "0x40015A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float mouseWheel;

		[Token(Token = "0x40015AA")]
		private const string event_SmoothingValue = "Slider - Smoothing Value";

		[Token(Token = "0x40015AB")]
		private const string event_FollowDistance = "Slider - Camera Zoom";

		[Token(Token = "0x6001930")]
		[Address(RVA = "0xC9FBCC", Offset = "0xC9FBCC", VA = "0xC9FBCC")]
		public CameraController()
		{
		}

		[Token(Token = "0x6001931")]
		[Address(RVA = "0xC9FCC8", Offset = "0xC9FCC8", VA = "0xC9FCC8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001932")]
		[Address(RVA = "0xC9FDB4", Offset = "0xC9FDB4", VA = "0xC9FDB4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001933")]
		[Address(RVA = "0xC9FEA0", Offset = "0xC9FEA0", VA = "0xC9FEA0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001934")]
		[Address(RVA = "0xCA04CC", Offset = "0xCA04CC", VA = "0xCA04CC")]
		private void GetPlayerInput()
		{
		}
	}
}
[Token(Token = "0x20003D4")]
public class ChatController : MonoBehaviour
{
	[Token(Token = "0x40015B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public TMP_InputField TMP_ChatInput;

	[Token(Token = "0x40015B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public TMP_Text TMP_ChatOutput;

	[Token(Token = "0x40015B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Scrollbar ChatScrollbar;

	[Token(Token = "0x6001935")]
	[Address(RVA = "0x1737E4", Offset = "0x1737E4", VA = "0x1737E4")]
	public ChatController()
	{
	}

	[Token(Token = "0x6001936")]
	[Address(RVA = "0x1737EC", Offset = "0x1737EC", VA = "0x1737EC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001937")]
	[Address(RVA = "0x1738C8", Offset = "0x1738C8", VA = "0x1738C8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001938")]
	[Address(RVA = "0x1739A4", Offset = "0x1739A4", VA = "0x1739A4")]
	private void AddToChatOutput(string newText)
	{
	}
}
[Token(Token = "0x20003D5")]
public class EnvMapAnimator : MonoBehaviour
{
	[Token(Token = "0x2000449")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC30CFC", Offset = "0xC30CFC")]
	private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal Matrix4x4 <matrix>__0;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal EnvMapAnimator $this;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal object $current;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal bool $disposing;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal int $PC;

		[Token(Token = "0x170004D4")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001B42")]
			[Address(RVA = "0x189D14", Offset = "0x189D14", VA = "0x189D14", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004D5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001B43")]
			[Address(RVA = "0x189D1C", Offset = "0x189D1C", VA = "0x189D1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B40")]
		[Address(RVA = "0x1899E0", Offset = "0x1899E0", VA = "0x1899E0")]
		[DebuggerHidden]
		public <Start>c__Iterator0()
		{
		}

		[Token(Token = "0x6001B41")]
		[Address(RVA = "0x1899E8", Offset = "0x1899E8", VA = "0x1899E8", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B44")]
		[Address(RVA = "0x189D24", Offset = "0x189D24", VA = "0x189D24", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001B45")]
		[Address(RVA = "0x189D38", Offset = "0x189D38", VA = "0x189D38", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40015B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 RotationSpeeds;

	[Token(Token = "0x40015B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TMP_Text m_textMeshPro;

	[Token(Token = "0x40015B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Material m_material;

	[Token(Token = "0x6001939")]
	[Address(RVA = "0x1898C8", Offset = "0x1898C8", VA = "0x1898C8")]
	public EnvMapAnimator()
	{
	}

	[Token(Token = "0x600193A")]
	[Address(RVA = "0x1898D0", Offset = "0x1898D0", VA = "0x1898D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600193B")]
	[Address(RVA = "0x189960", Offset = "0x189960", VA = "0x189960")]
	[DebuggerHidden]
	private IEnumerator Start()
	{
		return null;
	}
}
namespace TMPro.Examples
{
	[Token(Token = "0x20003D6")]
	public class ObjectSpin : MonoBehaviour
	{
		[Token(Token = "0x20003D7")]
		public enum MotionType
		{
			[Token(Token = "0x40015C1")]
			Rotation,
			[Token(Token = "0x40015C2")]
			BackAndForth,
			[Token(Token = "0x40015C3")]
			Translation
		}

		[Token(Token = "0x40015B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float SpinSpeed;

		[Token(Token = "0x40015B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int RotationRange;

		[Token(Token = "0x40015B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Transform m_transform;

		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_time;

		[Token(Token = "0x40015BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 m_prevPOS;

		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 m_initial_Rotation;

		[Token(Token = "0x40015BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 m_initial_Position;

		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Color32 m_lightColor;

		[Token(Token = "0x40015BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int frames;

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MotionType Motion;

		[Token(Token = "0x600193C")]
		[Address(RVA = "0xCA1270", Offset = "0xCA1270", VA = "0xCA1270")]
		public ObjectSpin()
		{
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0xCA128C", Offset = "0xCA128C", VA = "0xCA128C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600193E")]
		[Address(RVA = "0xCA144C", Offset = "0xCA144C", VA = "0xCA144C")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x20003D8")]
	public class ShaderPropAnimator : MonoBehaviour
	{
		[Token(Token = "0x200044A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC30D6C", Offset = "0xC30D6C")]
		private sealed class <AnimateProperties>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400180F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <glowPower>__1;

			[Token(Token = "0x4001810")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal ShaderPropAnimator $this;

			[Token(Token = "0x4001811")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal object $current;

			[Token(Token = "0x4001812")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal bool $disposing;

			[Token(Token = "0x4001813")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int $PC;

			[Token(Token = "0x170004D6")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B48")]
				[Address(RVA = "0xCA1A94", Offset = "0xCA1A94", VA = "0xCA1A94", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004D7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B49")]
				[Address(RVA = "0xCA1A9C", Offset = "0xCA1A9C", VA = "0xCA1A9C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B46")]
			[Address(RVA = "0xCA186C", Offset = "0xCA186C", VA = "0xCA186C")]
			[DebuggerHidden]
			public <AnimateProperties>c__Iterator0()
			{
			}

			[Token(Token = "0x6001B47")]
			[Address(RVA = "0xCA1874", Offset = "0xCA1874", VA = "0xCA1874", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B4A")]
			[Address(RVA = "0xCA1AA4", Offset = "0xCA1AA4", VA = "0xCA1AA4", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B4B")]
			[Address(RVA = "0xCA1AB8", Offset = "0xCA1AB8", VA = "0xCA1AB8", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Renderer m_Renderer;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Material m_Material;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AnimationCurve GlowCurve;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m_frame;

		[Token(Token = "0x600193F")]
		[Address(RVA = "0xCA1738", Offset = "0xCA1738", VA = "0xCA1738")]
		public ShaderPropAnimator()
		{
		}

		[Token(Token = "0x6001940")]
		[Address(RVA = "0xCA1740", Offset = "0xCA1740", VA = "0xCA1740")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001941")]
		[Address(RVA = "0xCA17C8", Offset = "0xCA17C8", VA = "0xCA17C8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001942")]
		[Address(RVA = "0xCA17EC", Offset = "0xCA17EC", VA = "0xCA17EC")]
		[DebuggerHidden]
		private IEnumerator AnimateProperties()
		{
			return null;
		}
	}
	[Token(Token = "0x20003D9")]
	public class SimpleScript : MonoBehaviour
	{
		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private TextMeshPro m_textMeshPro;

		[Token(Token = "0x40015C9")]
		private const string label = "The <#0050FF>count is: </color>{0:2}";

		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float m_frame;

		[Token(Token = "0x6001943")]
		[Address(RVA = "0xCA1B3C", Offset = "0xCA1B3C", VA = "0xCA1B3C")]
		public SimpleScript()
		{
		}

		[Token(Token = "0x6001944")]
		[Address(RVA = "0xCA1B44", Offset = "0xCA1B44", VA = "0xCA1B44")]
		private void Start()
		{
		}

		[Token(Token = "0x6001945")]
		[Address(RVA = "0xCA1C54", Offset = "0xCA1C54", VA = "0xCA1C54")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x20003DA")]
	public class SkewTextExample : MonoBehaviour
	{
		[Token(Token = "0x200044B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC30DDC", Offset = "0xC30DDC")]
		private sealed class <WarpText>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001814")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <old_CurveScale>__0;

			[Token(Token = "0x4001815")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal float <old_ShearValue>__0;

			[Token(Token = "0x4001816")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal AnimationCurve <old_curve>__0;

			[Token(Token = "0x4001817")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal TMP_TextInfo <textInfo>__1;

			[Token(Token = "0x4001818")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int <characterCount>__1;

			[Token(Token = "0x4001819")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal float <boundsMinX>__1;

			[Token(Token = "0x400181A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal float <boundsMaxX>__1;

			[Token(Token = "0x400181B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal Vector3[] <vertices>__2;

			[Token(Token = "0x400181C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Matrix4x4 <matrix>__2;

			[Token(Token = "0x400181D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal SkewTextExample $this;

			[Token(Token = "0x400181E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			internal object $current;

			[Token(Token = "0x400181F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal bool $disposing;

			[Token(Token = "0x4001820")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			internal int $PC;

			[Token(Token = "0x170004D8")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B4E")]
				[Address(RVA = "0xCA37A8", Offset = "0xCA37A8", VA = "0xCA37A8", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004D9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B4F")]
				[Address(RVA = "0xCA37B0", Offset = "0xCA37B0", VA = "0xCA37B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B4C")]
			[Address(RVA = "0xCA212C", Offset = "0xCA212C", VA = "0xCA212C")]
			[DebuggerHidden]
			public <WarpText>c__Iterator0()
			{
			}

			[Token(Token = "0x6001B4D")]
			[Address(RVA = "0xCA2134", Offset = "0xCA2134", VA = "0xCA2134", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B50")]
			[Address(RVA = "0xCA37B8", Offset = "0xCA37B8", VA = "0xCA37B8", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B51")]
			[Address(RVA = "0xCA37CC", Offset = "0xCA37CC", VA = "0xCA37CC", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve VertexCurve;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float CurveScale;

		[Token(Token = "0x40015CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float ShearAmount;

		[Token(Token = "0x6001946")]
		[Address(RVA = "0xCA1D0C", Offset = "0xCA1D0C", VA = "0xCA1D0C")]
		public SkewTextExample()
		{
		}

		[Token(Token = "0x6001947")]
		[Address(RVA = "0xCA1F5C", Offset = "0xCA1F5C", VA = "0xCA1F5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001948")]
		[Address(RVA = "0xCA1FE0", Offset = "0xCA1FE0", VA = "0xCA1FE0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001949")]
		[Address(RVA = "0xCA2084", Offset = "0xCA2084", VA = "0xCA2084")]
		private AnimationCurve CopyAnimationCurve(AnimationCurve curve)
		{
			return null;
		}

		[Token(Token = "0x600194A")]
		[Address(RVA = "0xCA2004", Offset = "0xCA2004", VA = "0xCA2004")]
		[DebuggerHidden]
		private IEnumerator WarpText()
		{
			return null;
		}
	}
	[Token(Token = "0x20003DB")]
	public class TeleType : MonoBehaviour
	{
		[Token(Token = "0x200044C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC30E4C", Offset = "0xC30E4C")]
		private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001821")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal int <totalVisibleCharacters>__0;

			[Token(Token = "0x4001822")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal int <counter>__0;

			[Token(Token = "0x4001823")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int <visibleCount>__0;

			[Token(Token = "0x4001824")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal TeleType $this;

			[Token(Token = "0x4001825")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal object $current;

			[Token(Token = "0x4001826")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal bool $disposing;

			[Token(Token = "0x4001827")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int $PC;

			[Token(Token = "0x170004DA")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B54")]
				[Address(RVA = "0xCA3D58", Offset = "0xCA3D58", VA = "0xCA3D58", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004DB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B55")]
				[Address(RVA = "0xCA3D60", Offset = "0xCA3D60", VA = "0xCA3D60", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B52")]
			[Address(RVA = "0xCA3A1C", Offset = "0xCA3A1C", VA = "0xCA3A1C")]
			[DebuggerHidden]
			public <Start>c__Iterator0()
			{
			}

			[Token(Token = "0x6001B53")]
			[Address(RVA = "0xCA3A24", Offset = "0xCA3A24", VA = "0xCA3A24", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B56")]
			[Address(RVA = "0xCA3D68", Offset = "0xCA3D68", VA = "0xCA3D68", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B57")]
			[Address(RVA = "0xCA3D7C", Offset = "0xCA3D7C", VA = "0xCA3D7C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40015CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private string label01;

		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string label02;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private TMP_Text m_textMeshPro;

		[Token(Token = "0x600194B")]
		[Address(RVA = "0xCA3850", Offset = "0xCA3850", VA = "0xCA3850")]
		public TeleType()
		{
		}

		[Token(Token = "0x600194C")]
		[Address(RVA = "0xCA38D0", Offset = "0xCA38D0", VA = "0xCA38D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600194D")]
		[Address(RVA = "0xCA399C", Offset = "0xCA399C", VA = "0xCA399C")]
		[DebuggerHidden]
		private IEnumerator Start()
		{
			return null;
		}
	}
	[Token(Token = "0x20003DC")]
	public class TextConsoleSimulator : MonoBehaviour
	{
		[Token(Token = "0x200044D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC30ECC", Offset = "0xC30ECC")]
		private sealed class <RevealCharacters>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001828")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal TMP_Text textComponent;

			[Token(Token = "0x4001829")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal TMP_TextInfo <textInfo>__0;

			[Token(Token = "0x400182A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int <totalVisibleCharacters>__0;

			[Token(Token = "0x400182B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int <visibleCount>__0;

			[Token(Token = "0x400182C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal TextConsoleSimulator $this;

			[Token(Token = "0x400182D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal object $current;

			[Token(Token = "0x400182E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal bool $disposing;

			[Token(Token = "0x400182F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int $PC;

			[Token(Token = "0x170004DC")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B5A")]
				[Address(RVA = "0xCA43DC", Offset = "0xCA43DC", VA = "0xCA43DC", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004DD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B5B")]
				[Address(RVA = "0xCA43E4", Offset = "0xCA43E4", VA = "0xCA43E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B58")]
			[Address(RVA = "0xCA4158", Offset = "0xCA4158", VA = "0xCA4158")]
			[DebuggerHidden]
			public <RevealCharacters>c__Iterator0()
			{
			}

			[Token(Token = "0x6001B59")]
			[Address(RVA = "0xCA41E8", Offset = "0xCA41E8", VA = "0xCA41E8", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B5C")]
			[Address(RVA = "0xCA43EC", Offset = "0xCA43EC", VA = "0xCA43EC", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B5D")]
			[Address(RVA = "0xCA4400", Offset = "0xCA4400", VA = "0xCA4400", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x200044E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC30F2C", Offset = "0xC30F2C")]
		private sealed class <RevealWords>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001830")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal TMP_Text textComponent;

			[Token(Token = "0x4001831")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal int <totalWordCount>__0;

			[Token(Token = "0x4001832")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int <totalVisibleCharacters>__0;

			[Token(Token = "0x4001833")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int <counter>__0;

			[Token(Token = "0x4001834")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int <currentWord>__0;

			[Token(Token = "0x4001835")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int <visibleCount>__0;

			[Token(Token = "0x4001836")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal object $current;

			[Token(Token = "0x4001837")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal bool $disposing;

			[Token(Token = "0x4001838")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal int $PC;

			[Token(Token = "0x170004DE")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B60")]
				[Address(RVA = "0xCA4728", Offset = "0xCA4728", VA = "0xCA4728", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004DF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B61")]
				[Address(RVA = "0xCA4730", Offset = "0xCA4730", VA = "0xCA4730", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B5E")]
			[Address(RVA = "0xCA41E0", Offset = "0xCA41E0", VA = "0xCA41E0")]
			[DebuggerHidden]
			public <RevealWords>c__Iterator1()
			{
			}

			[Token(Token = "0x6001B5F")]
			[Address(RVA = "0xCA4484", Offset = "0xCA4484", VA = "0xCA4484", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B62")]
			[Address(RVA = "0xCA4738", Offset = "0xCA4738", VA = "0xCA4738", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B63")]
			[Address(RVA = "0xCA474C", Offset = "0xCA474C", VA = "0xCA474C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x40015D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool hasTextChanged;

		[Token(Token = "0x600194E")]
		[Address(RVA = "0xCA3E00", Offset = "0xCA3E00", VA = "0xCA3E00")]
		public TextConsoleSimulator()
		{
		}

		[Token(Token = "0x600194F")]
		[Address(RVA = "0xCA3E08", Offset = "0xCA3E08", VA = "0xCA3E08")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001950")]
		[Address(RVA = "0xCA3E8C", Offset = "0xCA3E8C", VA = "0xCA3E8C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001951")]
		[Address(RVA = "0xCA3F4C", Offset = "0xCA3F4C", VA = "0xCA3F4C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001952")]
		[Address(RVA = "0xCA404C", Offset = "0xCA404C", VA = "0xCA404C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001953")]
		[Address(RVA = "0xCA414C", Offset = "0xCA414C", VA = "0xCA414C")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x6001954")]
		[Address(RVA = "0xCA3EB4", Offset = "0xCA3EB4", VA = "0xCA3EB4")]
		[DebuggerHidden]
		private IEnumerator RevealCharacters(TMP_Text textComponent)
		{
			return null;
		}

		[Token(Token = "0x6001955")]
		[Address(RVA = "0xCA4160", Offset = "0xCA4160", VA = "0xCA4160")]
		[DebuggerHidden]
		private IEnumerator RevealWords(TMP_Text textComponent)
		{
			return null;
		}
	}
	[Token(Token = "0x20003DD")]
	public class TextMeshProFloatingText : MonoBehaviour
	{
		[Token(Token = "0x200044F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC30FAC", Offset = "0xC30FAC")]
		private sealed class <DisplayTextMeshProFloatingText>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001839")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <CountDuration>__0;

			[Token(Token = "0x400183A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal float <starting_Count>__0;

			[Token(Token = "0x400183B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal float <current_Count>__0;

			[Token(Token = "0x400183C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal Vector3 <start_pos>__0;

			[Token(Token = "0x400183D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Color32 <start_color>__0;

			[Token(Token = "0x400183E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal float <alpha>__0;

			[Token(Token = "0x400183F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal float <fadeDuration>__0;

			[Token(Token = "0x4001840")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal TextMeshProFloatingText $this;

			[Token(Token = "0x4001841")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal object $current;

			[Token(Token = "0x4001842")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal bool $disposing;

			[Token(Token = "0x4001843")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal int $PC;

			[Token(Token = "0x170004E0")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B66")]
				[Address(RVA = "0xCA62A8", Offset = "0xCA62A8", VA = "0xCA62A8", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004E1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B67")]
				[Address(RVA = "0xCA62B0", Offset = "0xCA62B0", VA = "0xCA62B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B64")]
			[Address(RVA = "0xCA5184", Offset = "0xCA5184", VA = "0xCA5184")]
			[DebuggerHidden]
			public <DisplayTextMeshProFloatingText>c__Iterator0()
			{
			}

			[Token(Token = "0x6001B65")]
			[Address(RVA = "0xCA5A70", Offset = "0xCA5A70", VA = "0xCA5A70", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B68")]
			[Address(RVA = "0xCA62B8", Offset = "0xCA62B8", VA = "0xCA62B8", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B69")]
			[Address(RVA = "0xCA62CC", Offset = "0xCA62CC", VA = "0xCA62CC", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000450")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC3100C", Offset = "0xC3100C")]
		private sealed class <DisplayTextMeshFloatingText>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001844")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <CountDuration>__0;

			[Token(Token = "0x4001845")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal float <starting_Count>__0;

			[Token(Token = "0x4001846")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal float <current_Count>__0;

			[Token(Token = "0x4001847")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal Vector3 <start_pos>__0;

			[Token(Token = "0x4001848")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Color32 <start_color>__0;

			[Token(Token = "0x4001849")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal float <alpha>__0;

			[Token(Token = "0x400184A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal int <int_counter>__0;

			[Token(Token = "0x400184B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal float <fadeDuration>__0;

			[Token(Token = "0x400184C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal TextMeshProFloatingText $this;

			[Token(Token = "0x400184D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal object $current;

			[Token(Token = "0x400184E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal bool $disposing;

			[Token(Token = "0x400184F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal int $PC;

			[Token(Token = "0x170004E2")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B6C")]
				[Address(RVA = "0xCA59C8", Offset = "0xCA59C8", VA = "0xCA59C8", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004E3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B6D")]
				[Address(RVA = "0xCA59D0", Offset = "0xCA59D0", VA = "0xCA59D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B6A")]
			[Address(RVA = "0xCA518C", Offset = "0xCA518C", VA = "0xCA518C")]
			[DebuggerHidden]
			public <DisplayTextMeshFloatingText>c__Iterator1()
			{
			}

			[Token(Token = "0x6001B6B")]
			[Address(RVA = "0xCA5194", Offset = "0xCA5194", VA = "0xCA5194", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B6E")]
			[Address(RVA = "0xCA59D8", Offset = "0xCA59D8", VA = "0xCA59D8", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B6F")]
			[Address(RVA = "0xCA59EC", Offset = "0xCA59EC", VA = "0xCA59EC", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40015D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Font TheFont;

		[Token(Token = "0x40015D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameObject m_floatingText;

		[Token(Token = "0x40015D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private TextMeshPro m_textMeshPro;

		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextMesh m_textMesh;

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Transform m_transform;

		[Token(Token = "0x40015D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_floatingText_Transform;

		[Token(Token = "0x40015DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Transform m_cameraTransform;

		[Token(Token = "0x40015DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 lastPOS;

		[Token(Token = "0x40015DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion lastRotation;

		[Token(Token = "0x40015DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int SpawnType;

		[Token(Token = "0x6001956")]
		[Address(RVA = "0xCA47D0", Offset = "0xCA47D0", VA = "0xCA47D0")]
		public TextMeshProFloatingText()
		{
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0xCA48C4", Offset = "0xCA48C4", VA = "0xCA48C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001958")]
		[Address(RVA = "0xCA49D4", Offset = "0xCA49D4", VA = "0xCA49D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001959")]
		[Address(RVA = "0xCA5084", Offset = "0xCA5084", VA = "0xCA5084")]
		[DebuggerHidden]
		public IEnumerator DisplayTextMeshProFloatingText()
		{
			return null;
		}

		[Token(Token = "0x600195A")]
		[Address(RVA = "0xCA5104", Offset = "0xCA5104", VA = "0xCA5104")]
		[DebuggerHidden]
		public IEnumerator DisplayTextMeshFloatingText()
		{
			return null;
		}
	}
	[Token(Token = "0x20003DE")]
	public class TextMeshSpawner : MonoBehaviour
	{
		[Token(Token = "0x40015DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int SpawnType;

		[Token(Token = "0x40015DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int NumberOfNPC;

		[Token(Token = "0x40015E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Font TheFont;

		[Token(Token = "0x40015E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextMeshProFloatingText floatingText_Script;

		[Token(Token = "0x600195B")]
		[Address(RVA = "0xCA6350", Offset = "0xCA6350", VA = "0xCA6350")]
		public TextMeshSpawner()
		{
		}

		[Token(Token = "0x600195C")]
		[Address(RVA = "0xCA6360", Offset = "0xCA6360", VA = "0xCA6360")]
		private void Awake()
		{
		}

		[Token(Token = "0x600195D")]
		[Address(RVA = "0xCA6364", Offset = "0xCA6364", VA = "0xCA6364")]
		private void Start()
		{
		}
	}
}
namespace TMPro
{
	[Serializable]
	[Token(Token = "0x20003DF")]
	public class TMP_DigitValidator : TMP_InputValidator
	{
		[Token(Token = "0x600195E")]
		[Address(RVA = "0xCB69A8", Offset = "0xCB69A8", VA = "0xCB69A8")]
		public TMP_DigitValidator()
		{
		}

		[Token(Token = "0x600195F")]
		[Address(RVA = "0xCB69B0", Offset = "0xCB69B0", VA = "0xCB69B0", Slot = "4")]
		public override char Validate(ref string text, ref int pos, char ch)
		{
			return default(char);
		}
	}
}
namespace TMPro.Examples
{
	[Token(Token = "0x20003E0")]
	public class TMP_ExampleScript_01 : MonoBehaviour
	{
		[Token(Token = "0x20003E1")]
		public enum objectType
		{
			[Token(Token = "0x40015E8")]
			TextMeshPro,
			[Token(Token = "0x40015E9")]
			TextMeshProUGUI
		}

		[Token(Token = "0x40015E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public objectType ObjectType;

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isStatic;

		[Token(Token = "0x40015E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private TMP_Text m_text;

		[Token(Token = "0x40015E5")]
		private const string k_label = "The count is <#0080ff>{0}</color>";

		[Token(Token = "0x40015E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int count;

		[Token(Token = "0x6001960")]
		[Address(RVA = "0xCA6834", Offset = "0xCA6834", VA = "0xCA6834")]
		public TMP_ExampleScript_01()
		{
		}

		[Token(Token = "0x6001961")]
		[Address(RVA = "0xCA683C", Offset = "0xCA683C", VA = "0xCA683C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001962")]
		[Address(RVA = "0xCA6AF8", Offset = "0xCA6AF8", VA = "0xCA6AF8")]
		private void Update()
		{
		}
	}
	[Token(Token = "0x20003E2")]
	public class TMP_FrameRateCounter : MonoBehaviour
	{
		[Token(Token = "0x20003E3")]
		public enum FpsCounterAnchorPositions
		{
			[Token(Token = "0x40015F5")]
			TopLeft,
			[Token(Token = "0x40015F6")]
			BottomLeft,
			[Token(Token = "0x40015F7")]
			TopRight,
			[Token(Token = "0x40015F8")]
			BottomRight
		}

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float UpdateInterval;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float m_LastInterval;

		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int m_Frames;

		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FpsCounterAnchorPositions AnchorPosition;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private string htmlColorTag;

		[Token(Token = "0x40015EF")]
		private const string fpsLabel = "{0:2}</color> FPS \n{1:2} <#8080ff>MS";

		[Token(Token = "0x40015F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMeshPro m_TextMeshPro;

		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Transform m_frameCounter_transform;

		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Camera m_camera;

		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private FpsCounterAnchorPositions last_AnchorPosition;

		[Token(Token = "0x6001963")]
		[Address(RVA = "0xCA6BB4", Offset = "0xCA6BB4", VA = "0xCA6BB4")]
		public TMP_FrameRateCounter()
		{
		}

		[Token(Token = "0x6001964")]
		[Address(RVA = "0xCA6BD0", Offset = "0xCA6BD0", VA = "0xCA6BD0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001965")]
		[Address(RVA = "0xCA7344", Offset = "0xCA7344", VA = "0xCA7344")]
		private void Start()
		{
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0xCA736C", Offset = "0xCA736C", VA = "0xCA736C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001967")]
		[Address(RVA = "0xCA6F78", Offset = "0xCA6F78", VA = "0xCA6F78")]
		private void Set_FrameCounter_Position(FpsCounterAnchorPositions anchor_position)
		{
		}
	}
	[Token(Token = "0x20003E4")]
	public class TMP_TextEventCheck : MonoBehaviour
	{
		[Token(Token = "0x40015F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public TMP_TextEventHandler TextEventHandler;

		[Token(Token = "0x6001968")]
		[Address(RVA = "0xCA7564", Offset = "0xCA7564", VA = "0xCA7564")]
		public TMP_TextEventCheck()
		{
		}

		[Token(Token = "0x6001969")]
		[Address(RVA = "0xCA756C", Offset = "0xCA756C", VA = "0xCA756C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600196A")]
		[Address(RVA = "0xCA7834", Offset = "0xCA7834", VA = "0xCA7834")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600196B")]
		[Address(RVA = "0xCA7ADC", Offset = "0xCA7ADC", VA = "0xCA7ADC")]
		private void OnCharacterSelection(char c, int index)
		{
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0xCA7DE0", Offset = "0xCA7DE0", VA = "0xCA7DE0")]
		private void OnWordSelection(string word, int firstCharacterIndex, int length)
		{
		}

		[Token(Token = "0x600196D")]
		[Address(RVA = "0xCA8194", Offset = "0xCA8194", VA = "0xCA8194")]
		private void OnLineSelection(string lineText, int firstCharacterIndex, int length)
		{
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0xCA8548", Offset = "0xCA8548", VA = "0xCA8548")]
		private void OnLinkSelection(string linkID, string linkText, int linkIndex)
		{
		}
	}
}
namespace TMPro
{
	[Token(Token = "0x20003E5")]
	public class TMP_TextEventHandler : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IEventSystemHandler
	{
		[Serializable]
		[Token(Token = "0x20003E6")]
		public class CharacterSelectionEvent : UnityEvent<char, int>
		{
			[Token(Token = "0x6001980")]
			[Address(RVA = "0xCB6AC0", Offset = "0xCB6AC0", VA = "0xCB6AC0")]
			public CharacterSelectionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003E7")]
		public class WordSelectionEvent : UnityEvent<string, int, int>
		{
			[Token(Token = "0x6001981")]
			[Address(RVA = "0xCB6B24", Offset = "0xCB6B24", VA = "0xCB6B24")]
			public WordSelectionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003E8")]
		public class LineSelectionEvent : UnityEvent<string, int, int>
		{
			[Token(Token = "0x6001982")]
			[Address(RVA = "0xCB6B88", Offset = "0xCB6B88", VA = "0xCB6B88")]
			public LineSelectionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003E9")]
		public class LinkSelectionEvent : UnityEvent<string, string, int>
		{
			[Token(Token = "0x6001983")]
			[Address(RVA = "0xCB6BEC", Offset = "0xCB6BEC", VA = "0xCB6BEC")]
			public LinkSelectionEvent()
			{
			}
		}

		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private CharacterSelectionEvent m_OnCharacterSelection;

		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private WordSelectionEvent m_OnWordSelection;

		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private LineSelectionEvent m_OnLineSelection;

		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private LinkSelectionEvent m_OnLinkSelection;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Camera m_Camera;

		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Canvas m_Canvas;

		[Token(Token = "0x4001601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int m_selectedLink;

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int m_lastCharIndex;

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int m_lastWordIndex;

		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int m_lastLineIndex;

		[Token(Token = "0x17000467")]
		public CharacterSelectionEvent onCharacterSelection
		{
			[Token(Token = "0x6001970")]
			[Address(RVA = "0xCA7814", Offset = "0xCA7814", VA = "0xCA7814")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001971")]
			[Address(RVA = "0xCB6C50", Offset = "0xCB6C50", VA = "0xCB6C50")]
			set
			{
			}
		}

		[Token(Token = "0x17000468")]
		public WordSelectionEvent onWordSelection
		{
			[Token(Token = "0x6001972")]
			[Address(RVA = "0xCA781C", Offset = "0xCA781C", VA = "0xCA781C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001973")]
			[Address(RVA = "0xCB6C58", Offset = "0xCB6C58", VA = "0xCB6C58")]
			set
			{
			}
		}

		[Token(Token = "0x17000469")]
		public LineSelectionEvent onLineSelection
		{
			[Token(Token = "0x6001974")]
			[Address(RVA = "0xCA7824", Offset = "0xCA7824", VA = "0xCA7824")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001975")]
			[Address(RVA = "0xCB6C60", Offset = "0xCB6C60", VA = "0xCB6C60")]
			set
			{
			}
		}

		[Token(Token = "0x1700046A")]
		public LinkSelectionEvent onLinkSelection
		{
			[Token(Token = "0x6001976")]
			[Address(RVA = "0xCA782C", Offset = "0xCA782C", VA = "0xCA782C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001977")]
			[Address(RVA = "0xCB6C68", Offset = "0xCB6C68", VA = "0xCB6C68")]
			set
			{
			}
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0xCB69D4", Offset = "0xCB69D4", VA = "0xCB69D4")]
		public TMP_TextEventHandler()
		{
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0xCB6C70", Offset = "0xCB6C70", VA = "0xCB6C70")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001979")]
		[Address(RVA = "0xCB6E4C", Offset = "0xCB6E4C", VA = "0xCB6E4C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600197A")]
		[Address(RVA = "0xCB77B4", Offset = "0xCB77B4", VA = "0xCB77B4", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600197B")]
		[Address(RVA = "0xCB77B8", Offset = "0xCB77B8", VA = "0xCB77B8", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600197C")]
		[Address(RVA = "0xCB7588", Offset = "0xCB7588", VA = "0xCB7588")]
		private void SendOnCharacterSelection(char character, int characterIndex)
		{
		}

		[Token(Token = "0x600197D")]
		[Address(RVA = "0xCB7604", Offset = "0xCB7604", VA = "0xCB7604")]
		private void SendOnWordSelection(string word, int charIndex, int length)
		{
		}

		[Token(Token = "0x600197E")]
		[Address(RVA = "0xCB7694", Offset = "0xCB7694", VA = "0xCB7694")]
		private void SendOnLineSelection(string line, int charIndex, int length)
		{
		}

		[Token(Token = "0x600197F")]
		[Address(RVA = "0xCB7724", Offset = "0xCB7724", VA = "0xCB7724")]
		private void SendOnLinkSelection(string linkID, string linkText, int linkIndex)
		{
		}
	}
}
namespace TMPro.Examples
{
	[Token(Token = "0x20003EA")]
	[ExecuteInEditMode]
	public class TMP_TextInfoDebugTool : MonoBehaviour
	{
		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool ShowCharacters;

		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public bool ShowWords;

		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public bool ShowLinks;

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
		public bool ShowLines;

		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool ShowMeshBounds;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool ShowTextBounds;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0xC310BC", Offset = "0xC310BC")]
		[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0xC310BC", Offset = "0xC310BC")]
		public string ObjectStats;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Transform m_Transform;

		[Token(Token = "0x6001984")]
		[Address(RVA = "0xCA88DC", Offset = "0xCA88DC", VA = "0xCA88DC")]
		public TMP_TextInfoDebugTool()
		{
		}
	}
	[Token(Token = "0x20003EB")]
	public class TMP_TextSelector_A : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IEventSystemHandler
	{
		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private TextMeshPro m_TextMeshPro;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Camera m_Camera;

		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool m_isHoveringObject;

		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int m_selectedLink;

		[Token(Token = "0x4001612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int m_lastCharIndex;

		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_lastWordIndex;

		[Token(Token = "0x6001985")]
		[Address(RVA = "0xCA88E4", Offset = "0xCA88E4", VA = "0xCA88E4")]
		public TMP_TextSelector_A()
		{
		}

		[Token(Token = "0x6001986")]
		[Address(RVA = "0xCA88FC", Offset = "0xCA88FC", VA = "0xCA88FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0xCA89B4", Offset = "0xCA89B4", VA = "0xCA89B4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001988")]
		[Address(RVA = "0xCA9934", Offset = "0xCA9934", VA = "0xCA9934", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001989")]
		[Address(RVA = "0xCA99D0", Offset = "0xCA99D0", VA = "0xCA99D0", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}
	}
	[Token(Token = "0x20003EC")]
	public class TMP_TextSelector_B : MonoBehaviour, IPointerEnterHandler, IPointerExitHandler, IPointerClickHandler, IPointerUpHandler, IEventSystemHandler
	{
		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public RectTransform TextPopup_Prefab_01;

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private RectTransform m_TextPopup_RectTransform;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private TextMeshProUGUI m_TextPopup_TMPComponent;

		[Token(Token = "0x4001617")]
		private const string k_LinkText = "You have selected link <#ffff00>";

		[Token(Token = "0x4001618")]
		private const string k_WordText = "Word Index: <#ffff00>";

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextMeshProUGUI m_TextMeshPro;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Canvas m_Canvas;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Camera m_Camera;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool isHoveringObject;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int m_selectedWord;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int m_selectedLink;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int m_lastIndex;

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Matrix4x4 m_matrix;

		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private TMP_MeshInfo[] m_cachedMeshInfoVertexData;

		[Token(Token = "0x600198A")]
		[Address(RVA = "0xCA9A6C", Offset = "0xCA9A6C", VA = "0xCA9A6C")]
		public TMP_TextSelector_B()
		{
		}

		[Token(Token = "0x600198B")]
		[Address(RVA = "0xCA9A84", Offset = "0xCA9A84", VA = "0xCA9A84")]
		private void Awake()
		{
		}

		[Token(Token = "0x600198C")]
		[Address(RVA = "0xCA9C8C", Offset = "0xCA9C8C", VA = "0xCA9C8C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600198D")]
		[Address(RVA = "0xCA9D8C", Offset = "0xCA9D8C", VA = "0xCA9D8C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600198E")]
		[Address(RVA = "0xCA9E8C", Offset = "0xCA9E8C", VA = "0xCA9E8C")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x600198F")]
		[Address(RVA = "0xCA9F64", Offset = "0xCA9F64", VA = "0xCA9F64")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001990")]
		[Address(RVA = "0xCACB04", Offset = "0xCACB04", VA = "0xCACB04", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0xCACB10", Offset = "0xCACB10", VA = "0xCACB10", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001992")]
		[Address(RVA = "0xCACB1C", Offset = "0xCACB1C", VA = "0xCACB1C", Slot = "6")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0xCACB20", Offset = "0xCACB20", VA = "0xCACB20", Slot = "7")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001994")]
		[Address(RVA = "0xCAB9B8", Offset = "0xCAB9B8", VA = "0xCAB9B8")]
		private void RestoreCachedVertexAttributes(int index)
		{
		}
	}
	[Token(Token = "0x20003ED")]
	public class TMP_UiFrameRateCounter : MonoBehaviour
	{
		[Token(Token = "0x20003EE")]
		public enum FpsCounterAnchorPositions
		{
			[Token(Token = "0x400162C")]
			TopLeft,
			[Token(Token = "0x400162D")]
			BottomLeft,
			[Token(Token = "0x400162E")]
			TopRight,
			[Token(Token = "0x400162F")]
			BottomRight
		}

		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float UpdateInterval;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float m_LastInterval;

		[Token(Token = "0x4001624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int m_Frames;

		[Token(Token = "0x4001625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FpsCounterAnchorPositions AnchorPosition;

		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private string htmlColorTag;

		[Token(Token = "0x4001627")]
		private const string fpsLabel = "{0:2}</color> FPS \n{1:2} <#8080ff>MS";

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMeshProUGUI m_TextMeshPro;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private RectTransform m_frameCounter_transform;

		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FpsCounterAnchorPositions last_AnchorPosition;

		[Token(Token = "0x6001995")]
		[Address(RVA = "0xCACB24", Offset = "0xCACB24", VA = "0xCACB24")]
		public TMP_UiFrameRateCounter()
		{
		}

		[Token(Token = "0x6001996")]
		[Address(RVA = "0xCACB40", Offset = "0xCACB40", VA = "0xCACB40")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0xCAD30C", Offset = "0xCAD30C", VA = "0xCAD30C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0xCAD334", Offset = "0xCAD334", VA = "0xCAD334")]
		private void Update()
		{
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0xCACE68", Offset = "0xCACE68", VA = "0xCACE68")]
		private void Set_FrameCounter_Position(FpsCounterAnchorPositions anchor_position)
		{
		}
	}
	[Token(Token = "0x20003EF")]
	public class TMPro_InstructionOverlay : MonoBehaviour
	{
		[Token(Token = "0x20003F0")]
		public enum FpsCounterAnchorPositions
		{
			[Token(Token = "0x4001637")]
			TopLeft,
			[Token(Token = "0x4001638")]
			BottomLeft,
			[Token(Token = "0x4001639")]
			TopRight,
			[Token(Token = "0x400163A")]
			BottomRight
		}

		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public FpsCounterAnchorPositions AnchorPosition;

		[Token(Token = "0x4001631")]
		private const string instructions = "Camera Control - <#ffff00>Shift + RMB\n</color>Zoom - <#ffff00>Mouse wheel.";

		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TextMeshPro m_TextMeshPro;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private TextContainer m_textContainer;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform m_frameCounter_transform;

		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Camera m_camera;

		[Token(Token = "0x600199A")]
		[Address(RVA = "0xCAD52C", Offset = "0xCAD52C", VA = "0xCAD52C")]
		public TMPro_InstructionOverlay()
		{
		}

		[Token(Token = "0x600199B")]
		[Address(RVA = "0xCAD53C", Offset = "0xCAD53C", VA = "0xCAD53C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600199C")]
		[Address(RVA = "0xCAD900", Offset = "0xCAD900", VA = "0xCAD900")]
		private void Set_FrameCounter_Position(FpsCounterAnchorPositions anchor_position)
		{
		}
	}
	[Token(Token = "0x20003F1")]
	public class VertexColorCycler : MonoBehaviour
	{
		[Token(Token = "0x2000451")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC3110C", Offset = "0xC3110C")]
		private sealed class <AnimateVertexColors>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001850")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal TMP_TextInfo <textInfo>__0;

			[Token(Token = "0x4001851")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal int <currentCharacter>__0;

			[Token(Token = "0x4001852")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Color32 <c0>__0;

			[Token(Token = "0x4001853")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int <characterCount>__1;

			[Token(Token = "0x4001854")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int <materialIndex>__1;

			[Token(Token = "0x4001855")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal Color32[] <newVertexColors>__1;

			[Token(Token = "0x4001856")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int <vertexIndex>__1;

			[Token(Token = "0x4001857")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal VertexColorCycler $this;

			[Token(Token = "0x4001858")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal object $current;

			[Token(Token = "0x4001859")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal bool $disposing;

			[Token(Token = "0x400185A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal int $PC;

			[Token(Token = "0x170004E4")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B72")]
				[Address(RVA = "0xCAE090", Offset = "0xCAE090", VA = "0xCAE090", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004E5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B73")]
				[Address(RVA = "0xCAE098", Offset = "0xCAE098", VA = "0xCAE098", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B70")]
			[Address(RVA = "0xCADBF4", Offset = "0xCADBF4", VA = "0xCADBF4")]
			[DebuggerHidden]
			public <AnimateVertexColors>c__Iterator0()
			{
			}

			[Token(Token = "0x6001B71")]
			[Address(RVA = "0xCADBFC", Offset = "0xCADBFC", VA = "0xCADBFC", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B74")]
			[Address(RVA = "0xCAE0A0", Offset = "0xCAE0A0", VA = "0xCAE0A0", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B75")]
			[Address(RVA = "0xCAE0B4", Offset = "0xCAE0B4", VA = "0xCAE0B4", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x600199D")]
		[Address(RVA = "0xCADAE0", Offset = "0xCADAE0", VA = "0xCADAE0")]
		public VertexColorCycler()
		{
		}

		[Token(Token = "0x600199E")]
		[Address(RVA = "0xCADAE8", Offset = "0xCADAE8", VA = "0xCADAE8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600199F")]
		[Address(RVA = "0xCADB50", Offset = "0xCADB50", VA = "0xCADB50")]
		private void Start()
		{
		}

		[Token(Token = "0x60019A0")]
		[Address(RVA = "0xCADB74", Offset = "0xCADB74", VA = "0xCADB74")]
		[DebuggerHidden]
		private IEnumerator AnimateVertexColors()
		{
			return null;
		}
	}
	[Token(Token = "0x20003F2")]
	public class VertexJitter : MonoBehaviour
	{
		[Token(Token = "0x20003F3")]
		private struct VertexAnim
		{
			[Token(Token = "0x4001641")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float angleRange;

			[Token(Token = "0x4001642")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float angle;

			[Token(Token = "0x4001643")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float speed;
		}

		[Token(Token = "0x2000452")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC3117C", Offset = "0xC3117C")]
		private sealed class <AnimateVertexColors>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400185B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal TMP_TextInfo <textInfo>__0;

			[Token(Token = "0x400185C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal int <loopCount>__0;

			[Token(Token = "0x400185D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal VertexAnim[] <vertexAnim>__0;

			[Token(Token = "0x400185E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal TMP_MeshInfo[] <cachedMeshInfo>__0;

			[Token(Token = "0x400185F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int <characterCount>__1;

			[Token(Token = "0x4001860")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal Matrix4x4 <matrix>__2;

			[Token(Token = "0x4001861")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal VertexJitter $this;

			[Token(Token = "0x4001862")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal object $current;

			[Token(Token = "0x4001863")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			internal bool $disposing;

			[Token(Token = "0x4001864")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal int $PC;

			[Token(Token = "0x170004E6")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B78")]
				[Address(RVA = "0xCAF624", Offset = "0xCAF624", VA = "0xCAF624", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004E7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B79")]
				[Address(RVA = "0xCAF62C", Offset = "0xCAF62C", VA = "0xCAF62C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B76")]
			[Address(RVA = "0xCAE4FC", Offset = "0xCAE4FC", VA = "0xCAE4FC")]
			[DebuggerHidden]
			public <AnimateVertexColors>c__Iterator0()
			{
			}

			[Token(Token = "0x6001B77")]
			[Address(RVA = "0xCAE504", Offset = "0xCAE504", VA = "0xCAE504", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B7A")]
			[Address(RVA = "0xCAF634", Offset = "0xCAF634", VA = "0xCAF634", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B7B")]
			[Address(RVA = "0xCAF648", Offset = "0xCAF648", VA = "0xCAF648", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float AngleMultiplier;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float SpeedMultiplier;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float CurveScale;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool hasTextChanged;

		[Token(Token = "0x60019A1")]
		[Address(RVA = "0xCAE138", Offset = "0xCAE138", VA = "0xCAE138")]
		public VertexJitter()
		{
		}

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0xCAE150", Offset = "0xCAE150", VA = "0xCAE150")]
		private void Awake()
		{
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0xCAE1B8", Offset = "0xCAE1B8", VA = "0xCAE1B8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60019A4")]
		[Address(RVA = "0xCAE2B8", Offset = "0xCAE2B8", VA = "0xCAE2B8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60019A5")]
		[Address(RVA = "0xCAE3B8", Offset = "0xCAE3B8", VA = "0xCAE3B8")]
		private void Start()
		{
		}

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0xCAE45C", Offset = "0xCAE45C", VA = "0xCAE45C")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x60019A7")]
		[Address(RVA = "0xCAE3DC", Offset = "0xCAE3DC", VA = "0xCAE3DC")]
		[DebuggerHidden]
		private IEnumerator AnimateVertexColors()
		{
			return null;
		}
	}
	[Token(Token = "0x20003F4")]
	public class VertexShakeA : MonoBehaviour
	{
		[Token(Token = "0x2000453")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC311EC", Offset = "0xC311EC")]
		private sealed class <AnimateVertexColors>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001865")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal TMP_TextInfo <textInfo>__0;

			[Token(Token = "0x4001866")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal Vector3[][] <copyOfVertices>__0;

			[Token(Token = "0x4001867")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int <characterCount>__1;

			[Token(Token = "0x4001868")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int <lineCount>__1;

			[Token(Token = "0x4001869")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Matrix4x4 <matrix>__2;

			[Token(Token = "0x400186A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal VertexShakeA $this;

			[Token(Token = "0x400186B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal object $current;

			[Token(Token = "0x400186C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal bool $disposing;

			[Token(Token = "0x400186D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			internal int $PC;

			[Token(Token = "0x170004E8")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B7E")]
				[Address(RVA = "0xCB1158", Offset = "0xCB1158", VA = "0xCB1158", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004E9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B7F")]
				[Address(RVA = "0xCB1160", Offset = "0xCB1160", VA = "0xCB1160", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B7C")]
			[Address(RVA = "0xCAFA8C", Offset = "0xCAFA8C", VA = "0xCAFA8C")]
			[DebuggerHidden]
			public <AnimateVertexColors>c__Iterator0()
			{
			}

			[Token(Token = "0x6001B7D")]
			[Address(RVA = "0xCAFA94", Offset = "0xCAFA94", VA = "0xCAFA94", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B80")]
			[Address(RVA = "0xCB1168", Offset = "0xCB1168", VA = "0xCB1168", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B81")]
			[Address(RVA = "0xCB117C", Offset = "0xCB117C", VA = "0xCB117C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float AngleMultiplier;

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float SpeedMultiplier;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float ScaleMultiplier;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float RotationMultiplier;

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool hasTextChanged;

		[Token(Token = "0x60019A8")]
		[Address(RVA = "0xCAF6CC", Offset = "0xCAF6CC", VA = "0xCAF6CC")]
		public VertexShakeA()
		{
		}

		[Token(Token = "0x60019A9")]
		[Address(RVA = "0xCAF6E8", Offset = "0xCAF6E8", VA = "0xCAF6E8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60019AA")]
		[Address(RVA = "0xCAF750", Offset = "0xCAF750", VA = "0xCAF750")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60019AB")]
		[Address(RVA = "0xCAF850", Offset = "0xCAF850", VA = "0xCAF850")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0xCAF950", Offset = "0xCAF950", VA = "0xCAF950")]
		private void Start()
		{
		}

		[Token(Token = "0x60019AD")]
		[Address(RVA = "0xCAF9F4", Offset = "0xCAF9F4", VA = "0xCAF9F4")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0xCAF974", Offset = "0xCAF974", VA = "0xCAF974")]
		[DebuggerHidden]
		private IEnumerator AnimateVertexColors()
		{
			return null;
		}
	}
	[Token(Token = "0x20003F5")]
	public class VertexShakeB : MonoBehaviour
	{
		[Token(Token = "0x2000454")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC3125C", Offset = "0xC3125C")]
		private sealed class <AnimateVertexColors>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400186E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal TMP_TextInfo <textInfo>__0;

			[Token(Token = "0x400186F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal Vector3[][] <copyOfVertices>__0;

			[Token(Token = "0x4001870")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int <characterCount>__1;

			[Token(Token = "0x4001871")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int <lineCount>__1;

			[Token(Token = "0x4001872")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Matrix4x4 <matrix>__2;

			[Token(Token = "0x4001873")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal VertexShakeB $this;

			[Token(Token = "0x4001874")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal object $current;

			[Token(Token = "0x4001875")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal bool $disposing;

			[Token(Token = "0x4001876")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			internal int $PC;

			[Token(Token = "0x170004EA")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B84")]
				[Address(RVA = "0xCB360C", Offset = "0xCB360C", VA = "0xCB360C", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004EB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B85")]
				[Address(RVA = "0xCB3614", Offset = "0xCB3614", VA = "0xCB3614", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B82")]
			[Address(RVA = "0xCB15BC", Offset = "0xCB15BC", VA = "0xCB15BC")]
			[DebuggerHidden]
			public <AnimateVertexColors>c__Iterator0()
			{
			}

			[Token(Token = "0x6001B83")]
			[Address(RVA = "0xCB15C4", Offset = "0xCB15C4", VA = "0xCB15C4", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B86")]
			[Address(RVA = "0xCB361C", Offset = "0xCB361C", VA = "0xCB361C", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B87")]
			[Address(RVA = "0xCB3630", Offset = "0xCB3630", VA = "0xCB3630", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float AngleMultiplier;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float SpeedMultiplier;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float CurveScale;

		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool hasTextChanged;

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0xCB1200", Offset = "0xCB1200", VA = "0xCB1200")]
		public VertexShakeB()
		{
		}

		[Token(Token = "0x60019B0")]
		[Address(RVA = "0xCB1218", Offset = "0xCB1218", VA = "0xCB1218")]
		private void Awake()
		{
		}

		[Token(Token = "0x60019B1")]
		[Address(RVA = "0xCB1280", Offset = "0xCB1280", VA = "0xCB1280")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60019B2")]
		[Address(RVA = "0xCB1380", Offset = "0xCB1380", VA = "0xCB1380")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60019B3")]
		[Address(RVA = "0xCB1480", Offset = "0xCB1480", VA = "0xCB1480")]
		private void Start()
		{
		}

		[Token(Token = "0x60019B4")]
		[Address(RVA = "0xCB1524", Offset = "0xCB1524", VA = "0xCB1524")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x60019B5")]
		[Address(RVA = "0xCB14A4", Offset = "0xCB14A4", VA = "0xCB14A4")]
		[DebuggerHidden]
		private IEnumerator AnimateVertexColors()
		{
			return null;
		}
	}
	[Token(Token = "0x20003F6")]
	public class VertexZoom : MonoBehaviour
	{
		[Token(Token = "0x2000455")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC312CC", Offset = "0xC312CC")]
		private sealed class <AnimateVertexColors>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x2000456")]
			private sealed class <AnimateVertexColors>c__AnonStorey1
			{
				[Token(Token = "0x4001881")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				internal List<float> modifiedCharScale;

				[Token(Token = "0x4001882")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
				internal <AnimateVertexColors>c__Iterator0 <>f__ref$0;

				[Token(Token = "0x6001B8E")]
				[Address(RVA = "0xCB50C0", Offset = "0xCB50C0", VA = "0xCB50C0")]
				public <AnimateVertexColors>c__AnonStorey1()
				{
				}

				[Token(Token = "0x6001B8F")]
				[Address(RVA = "0xCB5170", Offset = "0xCB5170", VA = "0xCB5170")]
				internal int <>m__0(int a, int b)
				{
					return default(int);
				}
			}

			[Token(Token = "0x4001877")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal TMP_TextInfo <textInfo>__0;

			[Token(Token = "0x4001878")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal TMP_MeshInfo[] <cachedMeshInfoVertexData>__0;

			[Token(Token = "0x4001879")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal List<int> <scaleSortingOrder>__0;

			[Token(Token = "0x400187A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int <characterCount>__1;

			[Token(Token = "0x400187B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Matrix4x4 <matrix>__2;

			[Token(Token = "0x400187C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal VertexZoom $this;

			[Token(Token = "0x400187D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal object $current;

			[Token(Token = "0x400187E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal bool $disposing;

			[Token(Token = "0x400187F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			internal int $PC;

			[Token(Token = "0x4001880")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private <AnimateVertexColors>c__AnonStorey1 $locvar0;

			[Token(Token = "0x170004EC")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B8A")]
				[Address(RVA = "0xCB50C8", Offset = "0xCB50C8", VA = "0xCB50C8", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004ED")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B8B")]
				[Address(RVA = "0xCB50D0", Offset = "0xCB50D0", VA = "0xCB50D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B88")]
			[Address(RVA = "0xCB3A78", Offset = "0xCB3A78", VA = "0xCB3A78")]
			[DebuggerHidden]
			public <AnimateVertexColors>c__Iterator0()
			{
			}

			[Token(Token = "0x6001B89")]
			[Address(RVA = "0xCB3A80", Offset = "0xCB3A80", VA = "0xCB3A80", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B8C")]
			[Address(RVA = "0xCB50D8", Offset = "0xCB50D8", VA = "0xCB50D8", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B8D")]
			[Address(RVA = "0xCB50EC", Offset = "0xCB50EC", VA = "0xCB50EC", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float AngleMultiplier;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float SpeedMultiplier;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float CurveScale;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool hasTextChanged;

		[Token(Token = "0x60019B6")]
		[Address(RVA = "0xCB36B4", Offset = "0xCB36B4", VA = "0xCB36B4")]
		public VertexZoom()
		{
		}

		[Token(Token = "0x60019B7")]
		[Address(RVA = "0xCB36CC", Offset = "0xCB36CC", VA = "0xCB36CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60019B8")]
		[Address(RVA = "0xCB3734", Offset = "0xCB3734", VA = "0xCB3734")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60019B9")]
		[Address(RVA = "0xCB3834", Offset = "0xCB3834", VA = "0xCB3834")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60019BA")]
		[Address(RVA = "0xCB3934", Offset = "0xCB3934", VA = "0xCB3934")]
		private void Start()
		{
		}

		[Token(Token = "0x60019BB")]
		[Address(RVA = "0xCB39D8", Offset = "0xCB39D8", VA = "0xCB39D8")]
		private void ON_TEXT_CHANGED(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x60019BC")]
		[Address(RVA = "0xCB3958", Offset = "0xCB3958", VA = "0xCB3958")]
		[DebuggerHidden]
		private IEnumerator AnimateVertexColors()
		{
			return null;
		}
	}
	[Token(Token = "0x20003F7")]
	public class WarpTextExample : MonoBehaviour
	{
		[Token(Token = "0x2000457")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC3133C", Offset = "0xC3133C")]
		private sealed class <WarpText>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001883")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal float <old_CurveScale>__0;

			[Token(Token = "0x4001884")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal AnimationCurve <old_curve>__0;

			[Token(Token = "0x4001885")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal TMP_TextInfo <textInfo>__1;

			[Token(Token = "0x4001886")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int <characterCount>__1;

			[Token(Token = "0x4001887")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal float <boundsMinX>__1;

			[Token(Token = "0x4001888")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal float <boundsMaxX>__1;

			[Token(Token = "0x4001889")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Vector3[] <vertices>__2;

			[Token(Token = "0x400188A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal Matrix4x4 <matrix>__2;

			[Token(Token = "0x400188B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			internal WarpTextExample $this;

			[Token(Token = "0x400188C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal object $current;

			[Token(Token = "0x400188D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			internal bool $disposing;

			[Token(Token = "0x400188E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal int $PC;

			[Token(Token = "0x170004EE")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6001B92")]
				[Address(RVA = "0xCB6900", Offset = "0xCB6900", VA = "0xCB6900", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170004EF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B93")]
				[Address(RVA = "0xCB6908", Offset = "0xCB6908", VA = "0xCB6908", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B90")]
			[Address(RVA = "0xCB5664", Offset = "0xCB5664", VA = "0xCB5664")]
			[DebuggerHidden]
			public <WarpText>c__Iterator0()
			{
			}

			[Token(Token = "0x6001B91")]
			[Address(RVA = "0xCB566C", Offset = "0xCB566C", VA = "0xCB566C", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B94")]
			[Address(RVA = "0xCB6910", Offset = "0xCB6910", VA = "0xCB6910", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001B95")]
			[Address(RVA = "0xCB6924", Offset = "0xCB6924", VA = "0xCB6924", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4001654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve VertexCurve;

		[Token(Token = "0x4001656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float AngleMultiplier;

		[Token(Token = "0x4001657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float SpeedMultiplier;

		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float CurveScale;

		[Token(Token = "0x60019BD")]
		[Address(RVA = "0xCB5240", Offset = "0xCB5240", VA = "0xCB5240")]
		public WarpTextExample()
		{
		}

		[Token(Token = "0x60019BE")]
		[Address(RVA = "0xCB5494", Offset = "0xCB5494", VA = "0xCB5494")]
		private void Awake()
		{
		}

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0xCB5518", Offset = "0xCB5518", VA = "0xCB5518")]
		private void Start()
		{
		}

		[Token(Token = "0x60019C0")]
		[Address(RVA = "0xCB55BC", Offset = "0xCB55BC", VA = "0xCB55BC")]
		private AnimationCurve CopyAnimationCurve(AnimationCurve curve)
		{
			return null;
		}

		[Token(Token = "0x60019C1")]
		[Address(RVA = "0xCB553C", Offset = "0xCB553C", VA = "0xCB553C")]
		[DebuggerHidden]
		private IEnumerator WarpText()
		{
			return null;
		}
	}
}
[Token(Token = "0x20003F8")]
public class DecalDestroyer : MonoBehaviour
{
	[Token(Token = "0x2000458")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC313AC", Offset = "0xC313AC")]
	private sealed class <Start>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal DecalDestroyer $this;

		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal object $current;

		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal bool $disposing;

		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int $PC;

		[Token(Token = "0x170004F0")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001B98")]
			[Address(RVA = "0x186FD0", Offset = "0x186FD0", VA = "0x186FD0", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004F1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001B99")]
			[Address(RVA = "0x186FD8", Offset = "0x186FD8", VA = "0x186FD8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B96")]
		[Address(RVA = "0x186E88", Offset = "0x186E88", VA = "0x186E88")]
		[DebuggerHidden]
		public <Start>c__Iterator0()
		{
		}

		[Token(Token = "0x6001B97")]
		[Address(RVA = "0x186E90", Offset = "0x186E90", VA = "0x186E90", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B9A")]
		[Address(RVA = "0x186FE0", Offset = "0x186FE0", VA = "0x186FE0", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001B9B")]
		[Address(RVA = "0x186FF4", Offset = "0x186FF4", VA = "0x186FF4", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4001659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float lifeTime;

	[Token(Token = "0x60019C2")]
	[Address(RVA = "0x186DF4", Offset = "0x186DF4", VA = "0x186DF4")]
	public DecalDestroyer()
	{
	}

	[Token(Token = "0x60019C3")]
	[Address(RVA = "0x186E08", Offset = "0x186E08", VA = "0x186E08")]
	[DebuggerHidden]
	private IEnumerator Start()
	{
		return null;
	}
}
[Token(Token = "0x20003F9")]
public class ExtinguishableFire : MonoBehaviour
{
	[Token(Token = "0x2000459")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC3142C", Offset = "0xC3142C")]
	private sealed class <Extinguishing>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <elapsedTime>__0;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <ratio>__1;

		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal ExtinguishableFire $this;

		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x170004F2")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001B9E")]
			[Address(RVA = "0x18D3C8", Offset = "0x18D3C8", VA = "0x18D3C8", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004F3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001B9F")]
			[Address(RVA = "0x18D3D0", Offset = "0x18D3D0", VA = "0x18D3D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B9C")]
		[Address(RVA = "0x18CF8C", Offset = "0x18CF8C", VA = "0x18CF8C")]
		[DebuggerHidden]
		public <Extinguishing>c__Iterator0()
		{
		}

		[Token(Token = "0x6001B9D")]
		[Address(RVA = "0x18CF9C", Offset = "0x18CF9C", VA = "0x18CF9C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BA0")]
		[Address(RVA = "0x18D3D8", Offset = "0x18D3D8", VA = "0x18D3D8", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001BA1")]
		[Address(RVA = "0x18D3EC", Offset = "0x18D3EC", VA = "0x18D3EC", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200045A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC3148C", Offset = "0xC3148C")]
	private sealed class <StartingFire>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <elapsedTime>__0;

		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <ratio>__1;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal ExtinguishableFire $this;

		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x400189D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x400189E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x170004F4")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6001BA4")]
			[Address(RVA = "0x18D7A4", Offset = "0x18D7A4", VA = "0x18D7A4", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004F5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001BA5")]
			[Address(RVA = "0x18D7AC", Offset = "0x18D7AC", VA = "0x18D7AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001BA2")]
		[Address(RVA = "0x18CF94", Offset = "0x18CF94", VA = "0x18CF94")]
		[DebuggerHidden]
		public <StartingFire>c__Iterator1()
		{
		}

		[Token(Token = "0x6001BA3")]
		[Address(RVA = "0x18D470", Offset = "0x18D470", VA = "0x18D470", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BA6")]
		[Address(RVA = "0x18D7B4", Offset = "0x18D7B4", VA = "0x18D7B4", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001BA7")]
		[Address(RVA = "0x18D7C8", Offset = "0x18D7C8", VA = "0x18D7C8", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x400165A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ParticleSystem fireParticleSystem;

	[Token(Token = "0x400165B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ParticleSystem smokeParticleSystem;

	[Token(Token = "0x400165C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	protected bool m_isExtinguished;

	[Token(Token = "0x400165D")]
	private const float m_FireStartingTime = 2f;

	[Token(Token = "0x60019C4")]
	[Address(RVA = "0x18CDE0", Offset = "0x18CDE0", VA = "0x18CDE0")]
	public ExtinguishableFire()
	{
	}

	[Token(Token = "0x60019C5")]
	[Address(RVA = "0x18CDE8", Offset = "0x18CDE8", VA = "0x18CDE8")]
	private void Start()
	{
	}

	[Token(Token = "0x60019C6")]
	[Address(RVA = "0x18CED0", Offset = "0x18CED0", VA = "0x18CED0")]
	public void Extinguish()
	{
	}

	[Token(Token = "0x60019C7")]
	[Address(RVA = "0x18CF0C", Offset = "0x18CF0C", VA = "0x18CF0C")]
	[DebuggerHidden]
	private IEnumerator Extinguishing()
	{
		return null;
	}

	[Token(Token = "0x60019C8")]
	[Address(RVA = "0x18CE50", Offset = "0x18CE50", VA = "0x18CE50")]
	[DebuggerHidden]
	private IEnumerator StartingFire()
	{
		return null;
	}
}
[Token(Token = "0x20003FA")]
public class GunAim : MonoBehaviour
{
	[Token(Token = "0x400165E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int borderLeft;

	[Token(Token = "0x400165F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int borderRight;

	[Token(Token = "0x4001660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int borderTop;

	[Token(Token = "0x4001661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int borderBottom;

	[Token(Token = "0x4001662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Camera parentCamera;

	[Token(Token = "0x4001663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isOutOfBounds;

	[Token(Token = "0x60019C9")]
	[Address(RVA = "0xC3B034", Offset = "0xC3B034", VA = "0xC3B034")]
	public GunAim()
	{
	}

	[Token(Token = "0x60019CA")]
	[Address(RVA = "0xC3B03C", Offset = "0xC3B03C", VA = "0xC3B03C")]
	private void Start()
	{
	}

	[Token(Token = "0x60019CB")]
	[Address(RVA = "0xC3B0A4", Offset = "0xC3B0A4", VA = "0xC3B0A4")]
	private void Update()
	{
	}

	[Token(Token = "0x60019CC")]
	[Address(RVA = "0xC3B268", Offset = "0xC3B268", VA = "0xC3B268")]
	public bool GetIsOutOfBounds()
	{
		return default(bool);
	}
}
[Token(Token = "0x20003FB")]
public class GunShoot : MonoBehaviour
{
	[Token(Token = "0x4001664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float fireRate;

	[Token(Token = "0x4001665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float weaponRange;

	[Token(Token = "0x4001666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Transform gunEnd;

	[Token(Token = "0x4001667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem muzzleFlash;

	[Token(Token = "0x4001668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public ParticleSystem cartridgeEjection;

	[Token(Token = "0x4001669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject metalHitEffect;

	[Token(Token = "0x400166A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public GameObject sandHitEffect;

	[Token(Token = "0x400166B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject stoneHitEffect;

	[Token(Token = "0x400166C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public GameObject waterLeakEffect;

	[Token(Token = "0x400166D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject waterLeakExtinguishEffect;

	[Token(Token = "0x400166E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public GameObject[] fleshHitEffects;

	[Token(Token = "0x400166F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject woodHitEffect;

	[Token(Token = "0x4001670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float nextFire;

	[Token(Token = "0x4001671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Animator anim;

	[Token(Token = "0x4001672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private GunAim gunAim;

	[Token(Token = "0x4001673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xC314EC", Offset = "0xC314EC")]
	private static Dictionary<string, int> <>f__switch$map2;

	[Token(Token = "0x60019CD")]
	[Address(RVA = "0xC3B270", Offset = "0xC3B270", VA = "0xC3B270")]
	public GunShoot()
	{
	}

	[Token(Token = "0x60019CE")]
	[Address(RVA = "0xC3B28C", Offset = "0xC3B28C", VA = "0xC3B28C")]
	private void Start()
	{
	}

	[Token(Token = "0x60019CF")]
	[Address(RVA = "0xC3B310", Offset = "0xC3B310", VA = "0xC3B310")]
	private void Update()
	{
	}

	[Token(Token = "0x60019D0")]
	[Address(RVA = "0xC3B548", Offset = "0xC3B548", VA = "0xC3B548")]
	private void HandleHit(RaycastHit hit)
	{
	}

	[Token(Token = "0x60019D1")]
	[Address(RVA = "0xC3BC4C", Offset = "0xC3BC4C", VA = "0xC3BC4C")]
	private void SpawnDecal(RaycastHit hit, GameObject prefab)
	{
	}
}
[Token(Token = "0x20003FC")]
public class ParticleCollision : MonoBehaviour
{
	[Token(Token = "0x4001674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private List<ParticleCollisionEvent> m_CollisionEvents;

	[Token(Token = "0x4001675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private ParticleSystem m_ParticleSystem;

	[Token(Token = "0x60019D2")]
	[Address(RVA = "0xC925E0", Offset = "0xC925E0", VA = "0xC925E0")]
	public ParticleCollision()
	{
	}

	[Token(Token = "0x60019D3")]
	[Address(RVA = "0xC9266C", Offset = "0xC9266C", VA = "0xC9266C")]
	private void Start()
	{
	}

	[Token(Token = "0x60019D4")]
	[Address(RVA = "0xC926D4", Offset = "0xC926D4", VA = "0xC926D4")]
	private void OnParticleCollision(GameObject other)
	{
	}
}
[Serializable]
[Token(Token = "0x20003FD")]
public class ParticleExamples
{
	[Token(Token = "0x4001676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string title;

	[Token(Token = "0x4001677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0xC314FC", Offset = "0xC314FC")]
	public string description;

	[Token(Token = "0x4001678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool isWeaponEffect;

	[Token(Token = "0x4001679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject particleSystemGO;

	[Token(Token = "0x400167A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 particlePosition;

	[Token(Token = "0x400167B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 particleRotation;

	[Token(Token = "0x60019D5")]
	[Address(RVA = "0xC92874", Offset = "0xC92874", VA = "0xC92874")]
	public ParticleExamples()
	{
	}
}
[Token(Token = "0x20003FE")]
public class ParticleMenu : MonoBehaviour
{
	[Token(Token = "0x400167C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public ParticleExamples[] particleSystems;

	[Token(Token = "0x400167D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject gunGameObject;

	[Token(Token = "0x400167E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int currentIndex;

	[Token(Token = "0x400167F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject currentGO;

	[Token(Token = "0x4001680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Transform spawnLocation;

	[Token(Token = "0x4001681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text title;

	[Token(Token = "0x4001682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Text description;

	[Token(Token = "0x4001683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text navigationDetails;

	[Token(Token = "0x60019D6")]
	[Address(RVA = "0xC9287C", Offset = "0xC9287C", VA = "0xC9287C")]
	public ParticleMenu()
	{
	}

	[Token(Token = "0x60019D7")]
	[Address(RVA = "0xC92884", Offset = "0xC92884", VA = "0xC92884")]
	private void Start()
	{
	}

	[Token(Token = "0x60019D8")]
	[Address(RVA = "0xC928A4", Offset = "0xC928A4", VA = "0xC928A4")]
	public void Navigate(int i)
	{
	}
}
[Token(Token = "0x20003FF")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xC3150C", Offset = "0xC3150C")]
public class iTweenPath : MonoBehaviour
{
	[Token(Token = "0x4001684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Color pathColor;

	[Token(Token = "0x4001685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public List<Vector3> nodes;

	[Token(Token = "0x4001686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Vector3> nodesCache;

	[Token(Token = "0x4001687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int nodeCount;

	[Token(Token = "0x4001688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool pathVisible;

	[Token(Token = "0x4001689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool isClosed;

	[Token(Token = "0x400168A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool isRelativeToTransform;

	[Token(Token = "0x400168B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private FlightPath mFlightPath;

	[Token(Token = "0x400168C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float mfLength;

	[Token(Token = "0x1700046B")]
	public Vector3[] PathArray
	{
		[Token(Token = "0x60019DB")]
		[Address(RVA = "0xC47FEC", Offset = "0xC47FEC", VA = "0xC47FEC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60019DC")]
		[Address(RVA = "0xC481C4", Offset = "0xC481C4", VA = "0xC481C4")]
		set
		{
		}
	}

	[Token(Token = "0x1700046C")]
	public float length
	{
		[Token(Token = "0x60019DD")]
		[Address(RVA = "0xC48360", Offset = "0xC48360", VA = "0xC48360")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700046D")]
	public FlightPath FlightPath
	{
		[Token(Token = "0x60019DE")]
		[Address(RVA = "0xC48368", Offset = "0xC48368", VA = "0xC48368")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60019D9")]
	[Address(RVA = "0xC47D94", Offset = "0xC47D94", VA = "0xC47D94")]
	public iTweenPath()
	{
	}

	[Token(Token = "0x60019DA")]
	[Address(RVA = "0xC47F34", Offset = "0xC47F34", VA = "0xC47F34")]
	private void createFlightPath()
	{
	}
}
[Token(Token = "0x2000400")]
public class PreciseLocaleText : MonoBehaviour
{
	[Token(Token = "0x60019DF")]
	[Address(RVA = "0xE5B640", Offset = "0xE5B640", VA = "0xE5B640")]
	public PreciseLocaleText()
	{
	}

	[Token(Token = "0x60019E0")]
	[Address(RVA = "0xE5B648", Offset = "0xE5B648", VA = "0xE5B648")]
	private void Start()
	{
	}
}
[Token(Token = "0x2000401")]
public class PreciseLocale
{
	[Token(Token = "0x2000402")]
	private class PreciseLocaleAndroid
	{
		[Token(Token = "0x400168D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AndroidJavaClass _preciseLocale;

		[Token(Token = "0x60019E7")]
		[Address(RVA = "0xE5B5A4", Offset = "0xE5B5A4", VA = "0xE5B5A4")]
		public PreciseLocaleAndroid()
		{
		}

		[Token(Token = "0x60019E8")]
		[Address(RVA = "0xE5AF28", Offset = "0xE5AF28", VA = "0xE5AF28")]
		public static string GetRegion()
		{
			return null;
		}

		[Token(Token = "0x60019E9")]
		[Address(RVA = "0xE5B1F0", Offset = "0xE5B1F0", VA = "0xE5B1F0")]
		public static string GetLanguage()
		{
			return null;
		}

		[Token(Token = "0x60019EA")]
		[Address(RVA = "0xE5B08C", Offset = "0xE5B08C", VA = "0xE5B08C")]
		public static string GetLanguageID()
		{
			return null;
		}

		[Token(Token = "0x60019EB")]
		[Address(RVA = "0xE5B354", Offset = "0xE5B354", VA = "0xE5B354")]
		public static string GetCurrencyCode()
		{
			return null;
		}

		[Token(Token = "0x60019EC")]
		[Address(RVA = "0xE5B4B8", Offset = "0xE5B4B8", VA = "0xE5B4B8")]
		public static string GetCurrencySymbol()
		{
			return null;
		}
	}

	[Token(Token = "0x60019E1")]
	[Address(RVA = "0xE5AEA8", Offset = "0xE5AEA8", VA = "0xE5AEA8")]
	public PreciseLocale()
	{
	}

	[Token(Token = "0x60019E2")]
	[Address(RVA = "0xE5AEB0", Offset = "0xE5AEB0", VA = "0xE5AEB0")]
	public static string GetRegion()
	{
		return null;
	}

	[Token(Token = "0x60019E3")]
	[Address(RVA = "0xE5B014", Offset = "0xE5B014", VA = "0xE5B014")]
	public static string GetLanguageID()
	{
		return null;
	}

	[Token(Token = "0x60019E4")]
	[Address(RVA = "0xE5B178", Offset = "0xE5B178", VA = "0xE5B178")]
	public static string GetLanguage()
	{
		return null;
	}

	[Token(Token = "0x60019E5")]
	[Address(RVA = "0xE5B2DC", Offset = "0xE5B2DC", VA = "0xE5B2DC")]
	public static string GetCurrencyCode()
	{
		return null;
	}

	[Token(Token = "0x60019E6")]
	[Address(RVA = "0xE5B440", Offset = "0xE5B440", VA = "0xE5B440")]
	public static string GetCurrencySymbol()
	{
		return null;
	}
}
