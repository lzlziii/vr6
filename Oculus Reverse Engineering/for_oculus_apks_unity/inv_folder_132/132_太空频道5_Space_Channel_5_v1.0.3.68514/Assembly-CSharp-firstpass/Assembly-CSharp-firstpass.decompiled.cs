using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;
using Dissonance;
using Dissonance.Audio;
using Dissonance.Audio.Capture;
using Dissonance.Audio.Codecs;
using Dissonance.Audio.Codecs.Opus;
using Dissonance.Audio.Playback;
using Dissonance.Config;
using Dissonance.Datastructures;
using Dissonance.Networking;
using Dissonance.Networking.Client;
using Dissonance.Networking.Server;
using Dissonance.Threading;
using Dissonance.VAD;
using HandyCollections.Heap;
using Helper;
using HttpAuth;
using Il2CppDummyDll;
using NAudio.Dsp;
using NAudio.Wave;
using RootMotion.FinalIK;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.UI;
using UnityStandardAssets.Utility;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public static class FileBasedPrefs
{
	[Token(Token = "0x4000001")]
	private const string SaveFileName = "610";

	[Token(Token = "0x4000002")]
	private const bool ScrambleSaveData = true;

	[Token(Token = "0x4000003")]
	private const string EncryptionCodeword = "spacelonewolf610";

	[Token(Token = "0x4000004")]
	private const bool AutoSaveData = true;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static FileBasedPrefsSaveFileModel _latestData;

	[Token(Token = "0x4000007")]
	private const string String_Empty = "";

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static string dataPath;

	[Token(Token = "0x14000001")]
	public static event Action OnCriticalErrorOccured
	{
		[Token(Token = "0x6000001")]
		[Address(RVA = "0x13FD2DC", Offset = "0x13FD2DC", VA = "0x13FD2DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39B68", Offset = "0xB39B68")]
		add
		{
		}
		[Token(Token = "0x6000002")]
		[Address(RVA = "0x13FD3CC", Offset = "0x13FD3CC", VA = "0x13FD3CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39B78", Offset = "0xB39B78")]
		remove
		{
		}
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x13FD4BC", Offset = "0x13FD4BC", VA = "0x13FD4BC")]
	public static void SetString(string key, string value = "")
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x13FD5B8", Offset = "0x13FD5B8", VA = "0x13FD5B8")]
	public static string GetString(string key, string defaultValue = "")
	{
		return null;
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x13FD6D0", Offset = "0x13FD6D0", VA = "0x13FD6D0")]
	public static void SetInt(string key, int value = 0)
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x13FD768", Offset = "0x13FD768", VA = "0x13FD768")]
	public static int GetInt(string key, int defaultValue = 0)
	{
		return default(int);
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x13FD82C", Offset = "0x13FD82C", VA = "0x13FD82C")]
	public static void SetFloat(string key, float value = 0f)
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x13FD8C4", Offset = "0x13FD8C4", VA = "0x13FD8C4")]
	public static float GetFloat(string key, float defaultValue = 0f)
	{
		return default(float);
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x13FD998", Offset = "0x13FD998", VA = "0x13FD998")]
	public static void SetBool(string key, bool value = false)
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x13FDA30", Offset = "0x13FDA30", VA = "0x13FDA30")]
	public static bool GetBool(string key, bool defaultValue = false)
	{
		return default(bool);
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0x13FDAF4", Offset = "0x13FDAF4", VA = "0x13FDAF4")]
	public static bool HasKey(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x13FDF08", Offset = "0x13FDF08", VA = "0x13FDF08")]
	public static bool HasKeyForString(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0x13FE1A8", Offset = "0x13FE1A8", VA = "0x13FE1A8")]
	public static bool HasKeyForInt(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0x13FE24C", Offset = "0x13FE24C", VA = "0x13FE24C")]
	public static bool HasKeyForFloat(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x13FE2F0", Offset = "0x13FE2F0", VA = "0x13FE2F0")]
	public static bool HasKeyForBool(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0x13FE394", Offset = "0x13FE394", VA = "0x13FE394")]
	public static void DeleteKey(string key)
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0x13FE75C", Offset = "0x13FE75C", VA = "0x13FE75C")]
	public static void DeleteString(string key)
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0x13FE8DC", Offset = "0x13FE8DC", VA = "0x13FE8DC")]
	public static void DeleteInt(string key)
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0x13FEA5C", Offset = "0x13FEA5C", VA = "0x13FEA5C")]
	public static void DeleteFloat(string key)
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0x13FEBDC", Offset = "0x13FEBDC", VA = "0x13FEBDC")]
	public static void DeleteBool(string key)
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x13FED5C", Offset = "0x13FED5C", VA = "0x13FED5C")]
	public static void DeleteAll()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x13FF038", Offset = "0x13FF038", VA = "0x13FF038")]
	public static void OverwriteLocalSaveFile(string data)
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x13FDB64", Offset = "0x13FDB64", VA = "0x13FDB64")]
	private static FileBasedPrefsSaveFileModel GetSaveFile()
	{
		return null;
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x13FF2C4", Offset = "0x13FF2C4", VA = "0x13FF2C4")]
	public static void SetDataPath(string path)
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x13FF134", Offset = "0x13FF134", VA = "0x13FF134")]
	public static string GetSaveFilePath()
	{
		return null;
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x13FF330", Offset = "0x13FF330", VA = "0x13FF330")]
	public static string GetSaveFileAsJson()
	{
		return null;
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x13FD650", Offset = "0x13FD650", VA = "0x13FD650")]
	private static object GetDataFromSaveFile(string key, object defaultValue)
	{
		return null;
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x13FD530", Offset = "0x13FD530", VA = "0x13FD530")]
	private static void AddDataToSaveFile(string key, object value)
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x13FF6D4", Offset = "0x13FF6D4", VA = "0x13FF6D4")]
	public static void ManualySave()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x13FE6F4", Offset = "0x13FE6F4", VA = "0x13FE6F4")]
	private static void SaveSaveFile(bool manualSave = false)
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x13FEEB8", Offset = "0x13FEEB8", VA = "0x13FEEB8")]
	private static void WriteToSaveFile(string data)
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0x13FF0AC", Offset = "0x13FF0AC", VA = "0x13FF0AC")]
	private static void CheckSaveFileExists()
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x13FF734", Offset = "0x13FF734", VA = "0x13FF734")]
	private static bool DoesSaveFileExist()
	{
		return default(bool);
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x13FF798", Offset = "0x13FF798", VA = "0x13FF798")]
	private static void CreateNewSaveFile()
	{
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x13FF1D4", Offset = "0x13FF1D4", VA = "0x13FF1D4")]
	private static string DataScrambler(string data)
	{
		return null;
	}
}
[Token(Token = "0x2000003")]
public class FileBasedPrefsQuitListener : MonoBehaviour
{
	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static FileBasedPrefsQuitListener Instance;

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x13FF880", Offset = "0x13FF880", VA = "0x13FF880")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x13FF994", Offset = "0x13FF994", VA = "0x13FF994")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x13FF9F0", Offset = "0x13FF9F0", VA = "0x13FF9F0")]
	private void OnApplicationFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x13FFA4C", Offset = "0x13FFA4C", VA = "0x13FFA4C")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x13FFAA8", Offset = "0x13FFAA8", VA = "0x13FFAA8")]
	public FileBasedPrefsQuitListener()
	{
	}
}
[Serializable]
[Token(Token = "0x2000004")]
public class FileBasedPrefsSaveFileModel
{
	[Serializable]
	[Token(Token = "0x2000243")]
	public class StringItem
	{
		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Key;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Value;

		[Token(Token = "0x6001092")]
		[Address(RVA = "0x14000E8", Offset = "0x14000E8", VA = "0x14000E8")]
		public StringItem(string K, string V)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000244")]
	public class IntItem
	{
		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Key;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Value;

		[Token(Token = "0x6001093")]
		[Address(RVA = "0x1400120", Offset = "0x1400120", VA = "0x1400120")]
		public IntItem(string K, int V)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000245")]
	public class FloatItem
	{
		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Key;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Value;

		[Token(Token = "0x6001094")]
		[Address(RVA = "0x140015C", Offset = "0x140015C", VA = "0x140015C")]
		public FloatItem(string K, float V)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000246")]
	public class BoolItem
	{
		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Key;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool Value;

		[Token(Token = "0x6001095")]
		[Address(RVA = "0x1400198", Offset = "0x1400198", VA = "0x1400198")]
		public BoolItem(string K, bool V)
		{
		}
	}

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public StringItem[] StringData;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntItem[] IntData;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FloatItem[] FloatData;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public BoolItem[] BoolData;

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x13FF398", Offset = "0x13FF398", VA = "0x13FF398")]
	public object GetValueFromKey(string key, object defaultValue)
	{
		return null;
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x13FF678", Offset = "0x13FF678", VA = "0x13FF678")]
	public void UpdateOrAddData(string key, object value)
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x13FFDCC", Offset = "0x13FFDCC", VA = "0x13FFDCC")]
	private void SetValueForNewKey(string key, object value)
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x13FFAB0", Offset = "0x13FFAB0", VA = "0x13FFAB0")]
	private void SetValueForExistingKey(string key, object value)
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x13FDF8C", Offset = "0x13FDF8C", VA = "0x13FDF8C")]
	public bool HasKeyFromObject(string key, object value)
	{
		return default(bool);
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x13FE40C", Offset = "0x13FE40C", VA = "0x13FE40C")]
	public void DeleteKey(string key)
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x13FE7D4", Offset = "0x13FE7D4", VA = "0x13FE7D4")]
	public void DeleteString(string key)
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x13FE954", Offset = "0x13FE954", VA = "0x13FE954")]
	public void DeleteInt(string key)
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x13FEAD4", Offset = "0x13FEAD4", VA = "0x13FEAD4")]
	public void DeleteFloat(string key)
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x13FEC54", Offset = "0x13FEC54", VA = "0x13FEC54")]
	public void DeleteBool(string key)
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x13FDD78", Offset = "0x13FDD78", VA = "0x13FDD78")]
	public bool HasKey(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x13FEE10", Offset = "0x13FEE10", VA = "0x13FEE10")]
	public FileBasedPrefsSaveFileModel()
	{
	}
}
[Token(Token = "0x2000005")]
public class MoveSample : MonoBehaviour
{
	[Token(Token = "0x6000036")]
	[Address(RVA = "0x140099C", Offset = "0x140099C", VA = "0x140099C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x1400C40", Offset = "0x1400C40", VA = "0x1400C40")]
	public MoveSample()
	{
	}
}
[Token(Token = "0x2000006")]
public class RotateSample : MonoBehaviour
{
	[Token(Token = "0x6000038")]
	[Address(RVA = "0x16ED768", Offset = "0x16ED768", VA = "0x16ED768")]
	private void Start()
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x16EDA04", Offset = "0x16EDA04", VA = "0x16EDA04")]
	public RotateSample()
	{
	}
}
[Token(Token = "0x2000007")]
public class SampleInfo : MonoBehaviour
{
	[Token(Token = "0x600003A")]
	[Address(RVA = "0x16EDA0C", Offset = "0x16EDA0C", VA = "0x16EDA0C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x16EDCC0", Offset = "0x16EDCC0", VA = "0x16EDCC0")]
	public SampleInfo()
	{
	}
}
[Token(Token = "0x2000008")]
public class iTween : MonoBehaviour
{
	[Token(Token = "0x2000247")]
	private delegate float EasingFunction(float start, float end, float Value);

	[Token(Token = "0x2000248")]
	private delegate void ApplyTween();

	[Token(Token = "0x2000249")]
	public enum EaseType
	{
		[Token(Token = "0x4000C75")]
		easeInQuad,
		[Token(Token = "0x4000C76")]
		easeOutQuad,
		[Token(Token = "0x4000C77")]
		easeInOutQuad,
		[Token(Token = "0x4000C78")]
		easeInCubic,
		[Token(Token = "0x4000C79")]
		easeOutCubic,
		[Token(Token = "0x4000C7A")]
		easeInOutCubic,
		[Token(Token = "0x4000C7B")]
		easeInQuart,
		[Token(Token = "0x4000C7C")]
		easeOutQuart,
		[Token(Token = "0x4000C7D")]
		easeInOutQuart,
		[Token(Token = "0x4000C7E")]
		easeInQuint,
		[Token(Token = "0x4000C7F")]
		easeOutQuint,
		[Token(Token = "0x4000C80")]
		easeInOutQuint,
		[Token(Token = "0x4000C81")]
		easeInSine,
		[Token(Token = "0x4000C82")]
		easeOutSine,
		[Token(Token = "0x4000C83")]
		easeInOutSine,
		[Token(Token = "0x4000C84")]
		easeInExpo,
		[Token(Token = "0x4000C85")]
		easeOutExpo,
		[Token(Token = "0x4000C86")]
		easeInOutExpo,
		[Token(Token = "0x4000C87")]
		easeInCirc,
		[Token(Token = "0x4000C88")]
		easeOutCirc,
		[Token(Token = "0x4000C89")]
		easeInOutCirc,
		[Token(Token = "0x4000C8A")]
		linear,
		[Token(Token = "0x4000C8B")]
		spring,
		[Token(Token = "0x4000C8C")]
		easeInBounce,
		[Token(Token = "0x4000C8D")]
		easeOutBounce,
		[Token(Token = "0x4000C8E")]
		easeInOutBounce,
		[Token(Token = "0x4000C8F")]
		easeInBack,
		[Token(Token = "0x4000C90")]
		easeOutBack,
		[Token(Token = "0x4000C91")]
		easeInOutBack,
		[Token(Token = "0x4000C92")]
		easeInElastic,
		[Token(Token = "0x4000C93")]
		easeOutElastic,
		[Token(Token = "0x4000C94")]
		easeInOutElastic,
		[Token(Token = "0x4000C95")]
		punch
	}

	[Token(Token = "0x200024A")]
	public enum LoopType
	{
		[Token(Token = "0x4000C97")]
		none,
		[Token(Token = "0x4000C98")]
		loop,
		[Token(Token = "0x4000C99")]
		pingPong
	}

	[Token(Token = "0x200024B")]
	public enum NamedValueColor
	{
		[Token(Token = "0x4000C9B")]
		_Color,
		[Token(Token = "0x4000C9C")]
		_SpecColor,
		[Token(Token = "0x4000C9D")]
		_Emission,
		[Token(Token = "0x4000C9E")]
		_ReflectColor
	}

	[Token(Token = "0x200024C")]
	public static class Defaults
	{
		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float time;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float delay;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static NamedValueColor namedColorValue;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static LoopType loopType;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static EaseType easeType;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static float lookSpeed;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static bool isLocal;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static Space space;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static bool orientToPath;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static Color color;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static float updateTimePercentage;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static float updateTime;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static int cameraFadeDepth;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static float lookAhead;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static bool useRealTime;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static Vector3 up;
	}

	[Token(Token = "0x200024D")]
	private class CRSpline
	{
		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3[] pts;

		[Token(Token = "0x600109F")]
		[Address(RVA = "0x1DF2884", Offset = "0x1DF2884", VA = "0x1DF2884")]
		public CRSpline(params Vector3[] pts)
		{
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0x1DF290C", Offset = "0x1DF290C", VA = "0x1DF290C")]
		public Vector3 Interp(float t)
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x200024E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30C80", Offset = "0xB30C80")]
	private sealed class <TweenDelay>d__150 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public iTween <>4__this;

		[Token(Token = "0x17000266")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010A4")]
			[Address(RVA = "0x1DF2444", Offset = "0x1DF2444", VA = "0x1DF2444", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000267")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010A6")]
			[Address(RVA = "0x1DF24AC", Offset = "0x1DF24AC", VA = "0x1DF24AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0x1DF2340", Offset = "0x1DF2340", VA = "0x1DF2340")]
		[DebuggerHidden]
		public <TweenDelay>d__150(int <>1__state)
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0x1DF236C", Offset = "0x1DF236C", VA = "0x1DF236C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0x1DF2370", Offset = "0x1DF2370", VA = "0x1DF2370", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0x1DF244C", Offset = "0x1DF244C", VA = "0x1DF244C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200024F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30C90", Offset = "0xB30C90")]
	private sealed class <TweenRestart>d__152 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public iTween <>4__this;

		[Token(Token = "0x17000268")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010AA")]
			[Address(RVA = "0x1DF25C0", Offset = "0x1DF25C0", VA = "0x1DF25C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000269")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010AC")]
			[Address(RVA = "0x1DF2628", Offset = "0x1DF2628", VA = "0x1DF2628", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0x1DF24B4", Offset = "0x1DF24B4", VA = "0x1DF24B4")]
		[DebuggerHidden]
		public <TweenRestart>d__152(int <>1__state)
		{
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0x1DF24E0", Offset = "0x1DF24E0", VA = "0x1DF24E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0x1DF24E4", Offset = "0x1DF24E4", VA = "0x1DF24E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x1DF25C8", Offset = "0x1DF25C8", VA = "0x1DF25C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000250")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30CA0", Offset = "0xB30CA0")]
	private sealed class <Start>d__241 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public iTween <>4__this;

		[Token(Token = "0x1700026A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010B0")]
			[Address(RVA = "0x1DF22D0", Offset = "0x1DF22D0", VA = "0x1DF22D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010B2")]
			[Address(RVA = "0x1DF2338", Offset = "0x1DF2338", VA = "0x1DF2338", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x1DF21F4", Offset = "0x1DF21F4", VA = "0x1DF21F4")]
		[DebuggerHidden]
		public <Start>d__241(int <>1__state)
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x1DF2220", Offset = "0x1DF2220", VA = "0x1DF2220", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x1DF2224", Offset = "0x1DF2224", VA = "0x1DF2224", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x1DF22D8", Offset = "0x1DF22D8", VA = "0x1DF22D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<Hashtable> tweens;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static GameObject cameraFade;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string id;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string type;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string method;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public EaseType easeType;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float time;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float delay;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public LoopType loopType;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isRunning;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool isPaused;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string _name;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float runningTime;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float percentage;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float delayStarted;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool kinematic;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	private bool isLocal;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
	private bool loop;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
	private bool reverse;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool wasPaused;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool physics;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Hashtable tweenArguments;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Space space;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private EasingFunction ease;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private ApplyTween apply;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private AudioSource audioSource;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3[] vector3s;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector2[] vector2s;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Color[,] colors;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float[] floats;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Rect[] rects;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private CRSpline path;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector3 preUpdate;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private Vector3 postUpdate;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private NamedValueColor namedcolorvalue;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float lastRealTime;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool useRealTime;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Transform thisTransform;

	[Token(Token = "0x600003C")]
	[Address(RVA = "0xD674F0", Offset = "0xD674F0", VA = "0xD674F0")]
	public static void Init(GameObject target)
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0xD67774", Offset = "0xD67774", VA = "0xD67774")]
	public static void CameraFadeFrom(float amount, float time)
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0xD67AE8", Offset = "0xD67AE8", VA = "0xD67AE8")]
	public static void CameraFadeFrom(Hashtable args)
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0xD683A4", Offset = "0xD683A4", VA = "0xD683A4")]
	public static void CameraFadeTo(float amount, float time)
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0xD685E8", Offset = "0xD685E8", VA = "0xD685E8")]
	public static void CameraFadeTo(Hashtable args)
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0xD68BF4", Offset = "0xD68BF4", VA = "0xD68BF4")]
	public static void ValueTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xD69BBC", Offset = "0xD69BBC", VA = "0xD69BBC")]
	public static void FadeFrom(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0xD69D6C", Offset = "0xD69D6C", VA = "0xD69D6C")]
	public static void FadeFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xD69DE0", Offset = "0xD69DE0", VA = "0xD69DE0")]
	public static void FadeTo(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xD69F90", Offset = "0xD69F90", VA = "0xD69F90")]
	public static void FadeTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xD6A004", Offset = "0xD6A004", VA = "0xD6A004")]
	public static void ColorFrom(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xD67BF8", Offset = "0xD67BF8", VA = "0xD67BF8")]
	public static void ColorFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xD6A1E0", Offset = "0xD6A1E0", VA = "0xD6A1E0")]
	public static void ColorTo(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xD686F8", Offset = "0xD686F8", VA = "0xD686F8")]
	public static void ColorTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xD6A3BC", Offset = "0xD6A3BC", VA = "0xD6A3BC")]
	public static void AudioFrom(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xD6A5E8", Offset = "0xD6A5E8", VA = "0xD6A5E8")]
	public static void AudioFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xD6A9F0", Offset = "0xD6A9F0", VA = "0xD6A9F0")]
	public static void AudioTo(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xD6AC1C", Offset = "0xD6AC1C", VA = "0xD6AC1C")]
	public static void AudioTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xD6AD78", Offset = "0xD6AD78", VA = "0xD6AD78")]
	public static void Stab(GameObject target, AudioClip audioclip, float delay)
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xD6AF0C", Offset = "0xD6AF0C", VA = "0xD6AF0C")]
	public static void Stab(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xD6AFBC", Offset = "0xD6AFBC", VA = "0xD6AFBC")]
	public static void LookFrom(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xD6B188", Offset = "0xD6B188", VA = "0xD6B188")]
	public static void LookFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xD6B7E8", Offset = "0xD6B7E8", VA = "0xD6B7E8")]
	public static void LookTo(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xD6B9B4", Offset = "0xD6B9B4", VA = "0xD6B9B4")]
	public static void LookTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xD6BCD4", Offset = "0xD6BCD4", VA = "0xD6BCD4")]
	public static void MoveTo(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xD6BEA0", Offset = "0xD6BEA0", VA = "0xD6BEA0")]
	public static void MoveTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xD6C240", Offset = "0xD6C240", VA = "0xD6C240")]
	public static void MoveFrom(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xD6C40C", Offset = "0xD6C40C", VA = "0xD6C40C")]
	public static void MoveFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xD6CD0C", Offset = "0xD6CD0C", VA = "0xD6CD0C")]
	public static void MoveAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xD6CED8", Offset = "0xD6CED8", VA = "0xD6CED8")]
	public static void MoveAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xD675A8", Offset = "0xD675A8", VA = "0xD675A8")]
	public static void MoveBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0xD6CFB4", Offset = "0xD6CFB4", VA = "0xD6CFB4")]
	public static void MoveBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xD6D090", Offset = "0xD6D090", VA = "0xD6D090")]
	public static void ScaleTo(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xD6D25C", Offset = "0xD6D25C", VA = "0xD6D25C")]
	public static void ScaleTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0xD6D5F4", Offset = "0xD6D5F4", VA = "0xD6D5F4")]
	public static void ScaleFrom(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xD6D7C0", Offset = "0xD6D7C0", VA = "0xD6D7C0")]
	public static void ScaleFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0xD6DC6C", Offset = "0xD6DC6C", VA = "0xD6DC6C")]
	public static void ScaleAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xD6DE38", Offset = "0xD6DE38", VA = "0xD6DE38")]
	public static void ScaleAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xD6DF14", Offset = "0xD6DF14", VA = "0xD6DF14")]
	public static void ScaleBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xD6E0E0", Offset = "0xD6E0E0", VA = "0xD6E0E0")]
	public static void ScaleBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xD6E1BC", Offset = "0xD6E1BC", VA = "0xD6E1BC")]
	public static void RotateTo(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xD6E388", Offset = "0xD6E388", VA = "0xD6E388")]
	public static void RotateTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0xD6E728", Offset = "0xD6E728", VA = "0xD6E728")]
	public static void RotateFrom(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0xD6E8F4", Offset = "0xD6E8F4", VA = "0xD6E8F4")]
	public static void RotateFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0xD6EE58", Offset = "0xD6EE58", VA = "0xD6EE58")]
	public static void RotateAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0xD6F024", Offset = "0xD6F024", VA = "0xD6F024")]
	public static void RotateAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0xD6F100", Offset = "0xD6F100", VA = "0xD6F100")]
	public static void RotateBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0xD6F2CC", Offset = "0xD6F2CC", VA = "0xD6F2CC")]
	public static void RotateBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0xD6F3A8", Offset = "0xD6F3A8", VA = "0xD6F3A8")]
	public static void ShakePosition(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xD6F574", Offset = "0xD6F574", VA = "0xD6F574")]
	public static void ShakePosition(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xD6F650", Offset = "0xD6F650", VA = "0xD6F650")]
	public static void ShakeScale(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xD6F81C", Offset = "0xD6F81C", VA = "0xD6F81C")]
	public static void ShakeScale(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xD6F8F8", Offset = "0xD6F8F8", VA = "0xD6F8F8")]
	public static void ShakeRotation(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xD6FAC4", Offset = "0xD6FAC4", VA = "0xD6FAC4")]
	public static void ShakeRotation(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xD6FBA0", Offset = "0xD6FBA0", VA = "0xD6FBA0")]
	public static void PunchPosition(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xD6FD6C", Offset = "0xD6FD6C", VA = "0xD6FD6C")]
	public static void PunchPosition(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xD6FE8C", Offset = "0xD6FE8C", VA = "0xD6FE8C")]
	public static void PunchRotation(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xD70058", Offset = "0xD70058", VA = "0xD70058")]
	public static void PunchRotation(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xD70178", Offset = "0xD70178", VA = "0xD70178")]
	public static void PunchScale(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xD70344", Offset = "0xD70344", VA = "0xD70344")]
	public static void PunchScale(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xD70464", Offset = "0xD70464", VA = "0xD70464")]
	private void GenerateTargets()
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0xD714E4", Offset = "0xD714E4", VA = "0xD714E4")]
	private void GenerateRectTargets()
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0xD71378", Offset = "0xD71378", VA = "0xD71378")]
	private void GenerateColorTargets()
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xD71118", Offset = "0xD71118", VA = "0xD71118")]
	private void GenerateVector3Targets()
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xD70E84", Offset = "0xD70E84", VA = "0xD70E84")]
	private void GenerateVector2Targets()
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xD70C90", Offset = "0xD70C90", VA = "0xD70C90")]
	private void GenerateFloatTargets()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xD71620", Offset = "0xD71620", VA = "0xD71620")]
	private void GenerateColorToTargets()
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xD71D48", Offset = "0xD71D48", VA = "0xD71D48")]
	private void GenerateAudioToTargets()
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xD76AEC", Offset = "0xD76AEC", VA = "0xD76AEC")]
	private void GenerateStabTargets()
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xD762C0", Offset = "0xD762C0", VA = "0xD762C0")]
	private void GenerateLookToTargets()
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xD72054", Offset = "0xD72054", VA = "0xD72054")]
	private void GenerateMoveToPathTargets()
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xD72784", Offset = "0xD72784", VA = "0xD72784")]
	private void GenerateMoveToTargets()
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xD72DD0", Offset = "0xD72DD0", VA = "0xD72DD0")]
	private void GenerateMoveByTargets()
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xD733CC", Offset = "0xD733CC", VA = "0xD733CC")]
	private void GenerateScaleToTargets()
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xD7391C", Offset = "0xD7391C", VA = "0xD7391C")]
	private void GenerateScaleByTargets()
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xD73D70", Offset = "0xD73D70", VA = "0xD73D70")]
	private void GenerateScaleAddTargets()
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xD741B8", Offset = "0xD741B8", VA = "0xD741B8")]
	private void GenerateRotateToTargets()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xD747E8", Offset = "0xD747E8", VA = "0xD747E8")]
	private void GenerateRotateAddTargets()
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xD74C38", Offset = "0xD74C38", VA = "0xD74C38")]
	private void GenerateRotateByTargets()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xD750F4", Offset = "0xD750F4", VA = "0xD750F4")]
	private void GenerateShakePositionTargets()
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xD753E8", Offset = "0xD753E8", VA = "0xD753E8")]
	private void GenerateShakeScaleTargets()
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xD756B0", Offset = "0xD756B0", VA = "0xD756B0")]
	private void GenerateShakeRotationTargets()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xD75978", Offset = "0xD75978", VA = "0xD75978")]
	private void GeneratePunchPositionTargets()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xD75CB0", Offset = "0xD75CB0", VA = "0xD75CB0")]
	private void GeneratePunchRotationTargets()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xD75FBC", Offset = "0xD75FBC", VA = "0xD75FBC")]
	private void GeneratePunchScaleTargets()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xD771F0", Offset = "0xD771F0", VA = "0xD771F0")]
	private void ApplyRectTargets()
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0xD774F0", Offset = "0xD774F0", VA = "0xD774F0")]
	private void ApplyColorTargets()
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xD77720", Offset = "0xD77720", VA = "0xD77720")]
	private void ApplyVector3Targets()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xD77914", Offset = "0xD77914", VA = "0xD77914")]
	private void ApplyVector2Targets()
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xD77AB4", Offset = "0xD77AB4", VA = "0xD77AB4")]
	private void ApplyFloatTargets()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xD77C0C", Offset = "0xD77C0C", VA = "0xD77C0C")]
	private void ApplyColorToTargets()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xD77EE8", Offset = "0xD77EE8", VA = "0xD77EE8")]
	private void ApplyAudioToTargets()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xD78054", Offset = "0xD78054", VA = "0xD78054")]
	private void ApplyStabTargets()
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xD78058", Offset = "0xD78058", VA = "0xD78058")]
	private void ApplyMoveToPathTargets()
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xD783D0", Offset = "0xD783D0", VA = "0xD783D0")]
	private void ApplyMoveToTargets()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xD785F4", Offset = "0xD785F4", VA = "0xD785F4")]
	private void ApplyMoveByTargets()
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xD7894C", Offset = "0xD7894C", VA = "0xD7894C")]
	private void ApplyScaleToTargets()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xD78AB4", Offset = "0xD78AB4", VA = "0xD78AB4")]
	private void ApplyLookToTargets()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xD78C8C", Offset = "0xD78C8C", VA = "0xD78C8C")]
	private void ApplyRotateToTargets()
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xD78FD4", Offset = "0xD78FD4", VA = "0xD78FD4")]
	private void ApplyRotateAddTargets()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xD79280", Offset = "0xD79280", VA = "0xD79280")]
	private void ApplyShakePositionTargets()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xD796B0", Offset = "0xD796B0", VA = "0xD796B0")]
	private void ApplyShakeScaleTargets()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xD798C4", Offset = "0xD798C4", VA = "0xD798C4")]
	private void ApplyShakeRotationTargets()
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xD79B4C", Offset = "0xD79B4C", VA = "0xD79B4C")]
	private void ApplyPunchPositionTargets()
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xD7A018", Offset = "0xD7A018", VA = "0xD7A018")]
	private void ApplyPunchRotationTargets()
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xD7A378", Offset = "0xD7A378", VA = "0xD7A378")]
	private void ApplyPunchScaleTargets()
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xD7A5D8", Offset = "0xD7A5D8", VA = "0xD7A5D8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB39B88", Offset = "0xB39B88")]
	private IEnumerator TweenDelay()
	{
		return null;
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xD7A648", Offset = "0xD7A648", VA = "0xD7A648")]
	private void TweenStart()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xD7AFE4", Offset = "0xD7AFE4", VA = "0xD7AFE4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB39BEC", Offset = "0xB39BEC")]
	private IEnumerator TweenRestart()
	{
		return null;
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xD7B054", Offset = "0xD7B054", VA = "0xD7B054")]
	private void TweenUpdate()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xD7B138", Offset = "0xD7B138", VA = "0xD7B138")]
	private void TweenComplete()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xD7B208", Offset = "0xD7B208", VA = "0xD7B208")]
	private void TweenLoop()
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xD7B2AC", Offset = "0xD7B2AC", VA = "0xD7B2AC")]
	public static Rect RectUpdate(Rect currentValue, Rect targetValue, float speed)
	{
		return default(Rect);
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xD7B474", Offset = "0xD7B474", VA = "0xD7B474")]
	public static Vector3 Vector3Update(Vector3 currentValue, Vector3 targetValue, float speed)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xD7B580", Offset = "0xD7B580", VA = "0xD7B580")]
	public static Vector2 Vector2Update(Vector2 currentValue, Vector2 targetValue, float speed)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xD7B434", Offset = "0xD7B434", VA = "0xD7B434")]
	public static float FloatUpdate(float currentValue, float targetValue, float speed)
	{
		return default(float);
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xD7B664", Offset = "0xD7B664", VA = "0xD7B664")]
	public static void FadeUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xD7BFE8", Offset = "0xD7BFE8", VA = "0xD7BFE8")]
	public static void FadeUpdate(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xD7B724", Offset = "0xD7B724", VA = "0xD7B724")]
	public static void ColorUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xD7C198", Offset = "0xD7C198", VA = "0xD7C198")]
	public static void ColorUpdate(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xD7C374", Offset = "0xD7C374", VA = "0xD7C374")]
	public static void AudioUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xD7C824", Offset = "0xD7C824", VA = "0xD7C824")]
	public static void AudioUpdate(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xD7CA50", Offset = "0xD7CA50", VA = "0xD7CA50")]
	public static void RotateUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xD7D0B4", Offset = "0xD7D0B4", VA = "0xD7D0B4")]
	public static void RotateUpdate(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xD7D280", Offset = "0xD7D280", VA = "0xD7D280")]
	public static void ScaleUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xD7D868", Offset = "0xD7D868", VA = "0xD7D868")]
	public static void ScaleUpdate(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xD7DA34", Offset = "0xD7DA34", VA = "0xD7DA34")]
	public static void MoveUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xD7EBDC", Offset = "0xD7EBDC", VA = "0xD7EBDC")]
	public static void MoveUpdate(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xD7E2D0", Offset = "0xD7E2D0", VA = "0xD7E2D0")]
	public static void LookUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xD7EDA8", Offset = "0xD7EDA8", VA = "0xD7EDA8")]
	public static void LookUpdate(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xD7EF74", Offset = "0xD7EF74", VA = "0xD7EF74")]
	public static float PathLength(Transform[] path)
	{
		return default(float);
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xD77078", Offset = "0xD77078", VA = "0xD77078")]
	public static float PathLength(Vector3[] path)
	{
		return default(float);
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xD7F858", Offset = "0xD7F858", VA = "0xD7F858")]
	public static Texture2D CameraTexture(Color color)
	{
		return null;
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xD7F9A4", Offset = "0xD7F9A4", VA = "0xD7F9A4")]
	public static void PutOnPath(GameObject target, Vector3[] path, float percent)
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xD7FA54", Offset = "0xD7FA54", VA = "0xD7FA54")]
	public static void PutOnPath(Transform target, Vector3[] path, float percent)
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xD7FAEC", Offset = "0xD7FAEC", VA = "0xD7FAEC")]
	public static void PutOnPath(GameObject target, Transform[] path, float percent)
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xD7FC24", Offset = "0xD7FC24", VA = "0xD7FC24")]
	public static void PutOnPath(Transform target, Transform[] path, float percent)
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xD7FD44", Offset = "0xD7FD44", VA = "0xD7FD44")]
	public static Vector3 PointOnPath(Transform[] path, float percent)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xD7FE50", Offset = "0xD7FE50", VA = "0xD7FE50")]
	public static void DrawLine(Vector3[] line)
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xD800B4", Offset = "0xD800B4", VA = "0xD800B4")]
	public static void DrawLine(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xD80178", Offset = "0xD80178", VA = "0xD80178")]
	public static void DrawLine(Transform[] line)
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xD802EC", Offset = "0xD802EC", VA = "0xD802EC")]
	public static void DrawLine(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xD80440", Offset = "0xD80440", VA = "0xD80440")]
	public static void DrawLineGizmos(Vector3[] line)
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xD80524", Offset = "0xD80524", VA = "0xD80524")]
	public static void DrawLineGizmos(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xD805E8", Offset = "0xD805E8", VA = "0xD805E8")]
	public static void DrawLineGizmos(Transform[] line)
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xD8075C", Offset = "0xD8075C", VA = "0xD8075C")]
	public static void DrawLineGizmos(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xD808B0", Offset = "0xD808B0", VA = "0xD808B0")]
	public static void DrawLineHandles(Vector3[] line)
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xD80994", Offset = "0xD80994", VA = "0xD80994")]
	public static void DrawLineHandles(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xD80A58", Offset = "0xD80A58", VA = "0xD80A58")]
	public static void DrawLineHandles(Transform[] line)
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xD80BCC", Offset = "0xD80BCC", VA = "0xD80BCC")]
	public static void DrawLineHandles(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xD80D20", Offset = "0xD80D20", VA = "0xD80D20")]
	public static Vector3 PointOnPath(Vector3[] path, float percent)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xD80D98", Offset = "0xD80D98", VA = "0xD80D98")]
	public static void DrawPath(Vector3[] path)
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xD81070", Offset = "0xD81070", VA = "0xD81070")]
	public static void DrawPath(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xD81134", Offset = "0xD81134", VA = "0xD81134")]
	public static void DrawPath(Transform[] path)
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xD812A8", Offset = "0xD812A8", VA = "0xD812A8")]
	public static void DrawPath(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xD813FC", Offset = "0xD813FC", VA = "0xD813FC")]
	public static void DrawPathGizmos(Vector3[] path)
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xD814E0", Offset = "0xD814E0", VA = "0xD814E0")]
	public static void DrawPathGizmos(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xD815A4", Offset = "0xD815A4", VA = "0xD815A4")]
	public static void DrawPathGizmos(Transform[] path)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xD81718", Offset = "0xD81718", VA = "0xD81718")]
	public static void DrawPathGizmos(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xD8186C", Offset = "0xD8186C", VA = "0xD8186C")]
	public static void DrawPathHandles(Vector3[] path)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xD81950", Offset = "0xD81950", VA = "0xD81950")]
	public static void DrawPathHandles(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xD81A14", Offset = "0xD81A14", VA = "0xD81A14")]
	public static void DrawPathHandles(Transform[] path)
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xD81B88", Offset = "0xD81B88", VA = "0xD81B88")]
	public static void DrawPathHandles(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xD81CDC", Offset = "0xD81CDC", VA = "0xD81CDC")]
	public static void CameraFadeDepth(int depth)
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xD81E50", Offset = "0xD81E50", VA = "0xD81E50")]
	public static void CameraFadeDestroy()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xD81F4C", Offset = "0xD81F4C", VA = "0xD81F4C")]
	public static void CameraFadeSwap(Texture2D texture)
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xD81FE0", Offset = "0xD81FE0", VA = "0xD81FE0")]
	public static GameObject CameraFadeAdd(Texture2D texture, int depth)
	{
		return null;
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xD82144", Offset = "0xD82144", VA = "0xD82144")]
	public static GameObject CameraFadeAdd(Texture2D texture)
	{
		return null;
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xD822D4", Offset = "0xD822D4", VA = "0xD822D4")]
	public static GameObject CameraFadeAdd()
	{
		return null;
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xD82464", Offset = "0xD82464", VA = "0xD82464")]
	public static void Resume(GameObject target)
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xD82554", Offset = "0xD82554", VA = "0xD82554")]
	public static void Resume(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xD82810", Offset = "0xD82810", VA = "0xD82810")]
	public static void Resume(GameObject target, string type)
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xD82968", Offset = "0xD82968", VA = "0xD82968")]
	public static void Resume(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xD82D14", Offset = "0xD82D14", VA = "0xD82D14")]
	public static void Resume()
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xD82E34", Offset = "0xD82E34", VA = "0xD82E34")]
	public static void Resume(string type)
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xD83064", Offset = "0xD83064", VA = "0xD83064")]
	public static void Pause(GameObject target)
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xD831B0", Offset = "0xD831B0", VA = "0xD831B0")]
	public static void Pause(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xD8346C", Offset = "0xD8346C", VA = "0xD8346C")]
	public static void Pause(GameObject target, string type)
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xD83618", Offset = "0xD83618", VA = "0xD83618")]
	public static void Pause(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xD83A18", Offset = "0xD83A18", VA = "0xD83A18")]
	public static void Pause()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xD83B38", Offset = "0xD83B38", VA = "0xD83B38")]
	public static void Pause(string type)
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xD83D68", Offset = "0xD83D68", VA = "0xD83D68")]
	public static int Count()
	{
		return default(int);
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xD83DDC", Offset = "0xD83DDC", VA = "0xD83DDC")]
	public static int Count(string type)
	{
		return default(int);
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xD83FB8", Offset = "0xD83FB8", VA = "0xD83FB8")]
	public static int Count(GameObject target)
	{
		return default(int);
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xD8401C", Offset = "0xD8401C", VA = "0xD8401C")]
	public static int Count(GameObject target, string type)
	{
		return default(int);
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xD84178", Offset = "0xD84178", VA = "0xD84178")]
	public static void Stop()
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xD843B0", Offset = "0xD843B0", VA = "0xD843B0")]
	public static void Stop(string type)
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xD84730", Offset = "0xD84730", VA = "0xD84730")]
	public static void StopByName(string name)
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xD842C8", Offset = "0xD842C8", VA = "0xD842C8")]
	public static void Stop(GameObject target)
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xD84A70", Offset = "0xD84A70", VA = "0xD84A70")]
	public static void Stop(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xD845E0", Offset = "0xD845E0", VA = "0xD845E0")]
	public static void Stop(GameObject target, string type)
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xD84960", Offset = "0xD84960", VA = "0xD84960")]
	public static void StopByName(GameObject target, string name)
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xD84D2C", Offset = "0xD84D2C", VA = "0xD84D2C")]
	public static void Stop(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xD850D0", Offset = "0xD850D0", VA = "0xD850D0")]
	public static void StopByName(GameObject target, string name, bool includechildren)
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xD679B8", Offset = "0xD679B8", VA = "0xD679B8")]
	public static Hashtable Hash(params object[] args)
	{
		return null;
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xD85434", Offset = "0xD85434", VA = "0xD85434")]
	private iTween(Hashtable h)
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xD85460", Offset = "0xD85460", VA = "0xD85460")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xD864CC", Offset = "0xD864CC", VA = "0xD864CC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB39C50", Offset = "0xB39C50")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xD8653C", Offset = "0xD8653C", VA = "0xD8653C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xD8657C", Offset = "0xD8657C", VA = "0xD8657C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xD865BC", Offset = "0xD865BC", VA = "0xD865BC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xD866D0", Offset = "0xD866D0", VA = "0xD866D0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xD8674C", Offset = "0xD8674C", VA = "0xD8674C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xD7FF34", Offset = "0xD7FF34", VA = "0xD7FF34")]
	private static void DrawLineHelper(Vector3[] line, Color color, string method)
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xD80E7C", Offset = "0xD80E7C", VA = "0xD80E7C")]
	private static void DrawPathHelper(Vector3[] path, Color color, string method)
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xD7F168", Offset = "0xD7F168", VA = "0xD7F168")]
	private static Vector3[] PathControlPointGenerator(Vector3[] path)
	{
		return null;
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xD7F42C", Offset = "0xD7F42C", VA = "0xD7F42C")]
	private static Vector3 Interp(Vector3[] pts, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xD69A68", Offset = "0xD69A68", VA = "0xD69A68")]
	private static void Launch(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xD690D0", Offset = "0xD690D0", VA = "0xD690D0")]
	private static Hashtable CleanArgs(Hashtable args)
	{
		return null;
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xD86750", Offset = "0xD86750", VA = "0xD86750")]
	private static string GenerateID()
	{
		return null;
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xD8549C", Offset = "0xD8549C", VA = "0xD8549C")]
	private void RetrieveArgs()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xD867D0", Offset = "0xD867D0", VA = "0xD867D0")]
	private void GetEasingFunction()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xD7B0C0", Offset = "0xD7B0C0", VA = "0xD7B0C0")]
	private void UpdatePercentage()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xD7A7C0", Offset = "0xD7A7C0", VA = "0xD7A7C0")]
	private void CallBack(string callbackType)
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xD76E08", Offset = "0xD76E08", VA = "0xD76E08")]
	private void Dispose()
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xD7AA98", Offset = "0xD7AA98", VA = "0xD7AA98")]
	private void ConflictCheck()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xD7AFE0", Offset = "0xD7AFE0", VA = "0xD7AFE0")]
	private void EnableKinematic()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xD7B2A8", Offset = "0xD7B2A8", VA = "0xD7B2A8")]
	private void DisableKinematic()
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xD866F8", Offset = "0xD866F8", VA = "0xD866F8")]
	private void ResumeDelay()
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xD86BC4", Offset = "0xD86BC4", VA = "0xD86BC4")]
	private float linear(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xD76FA4", Offset = "0xD76FA4", VA = "0xD76FA4")]
	private float clerp(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xD86C4C", Offset = "0xD86C4C", VA = "0xD86C4C")]
	private float spring(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xD86D50", Offset = "0xD86D50", VA = "0xD86D50")]
	private float easeInQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xD86D64", Offset = "0xD86D64", VA = "0xD86D64")]
	private float easeOutQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xD86D80", Offset = "0xD86D80", VA = "0xD86D80")]
	private float easeInOutQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xD86DD4", Offset = "0xD86DD4", VA = "0xD86DD4")]
	private float easeInCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xD86DEC", Offset = "0xD86DEC", VA = "0xD86DEC")]
	private float easeOutCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xD86E14", Offset = "0xD86E14", VA = "0xD86E14")]
	private float easeInOutCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xD86E6C", Offset = "0xD86E6C", VA = "0xD86E6C")]
	private float easeInQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xD86E88", Offset = "0xD86E88", VA = "0xD86E88")]
	private float easeOutQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xD86EB0", Offset = "0xD86EB0", VA = "0xD86EB0")]
	private float easeInOutQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xD86F0C", Offset = "0xD86F0C", VA = "0xD86F0C")]
	private float easeInQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xD86F2C", Offset = "0xD86F2C", VA = "0xD86F2C")]
	private float easeOutQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xD86F5C", Offset = "0xD86F5C", VA = "0xD86F5C")]
	private float easeInOutQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xD86FC4", Offset = "0xD86FC4", VA = "0xD86FC4")]
	private float easeInSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xD8705C", Offset = "0xD8705C", VA = "0xD8705C")]
	private float easeOutSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xD870F0", Offset = "0xD870F0", VA = "0xD870F0")]
	private float easeInOutSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xD87194", Offset = "0xD87194", VA = "0xD87194")]
	private float easeInExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xD8722C", Offset = "0xD8722C", VA = "0xD8722C")]
	private float easeOutExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xD872C4", Offset = "0xD872C4", VA = "0xD872C4")]
	private float easeInOutExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xD873B4", Offset = "0xD873B4", VA = "0xD873B4")]
	private float easeInCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xD87460", Offset = "0xD87460", VA = "0xD87460")]
	private float easeOutCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xD8750C", Offset = "0xD8750C", VA = "0xD8750C")]
	private float easeInOutCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xD87604", Offset = "0xD87604", VA = "0xD87604")]
	private float easeInBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xD87640", Offset = "0xD87640", VA = "0xD87640")]
	private float easeOutBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xD8770C", Offset = "0xD8770C", VA = "0xD8770C")]
	private float easeInOutBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xD87790", Offset = "0xD87790", VA = "0xD87790")]
	private float easeInBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xD877C0", Offset = "0xD877C0", VA = "0xD877C0")]
	private float easeOutBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xD87800", Offset = "0xD87800", VA = "0xD87800")]
	private float easeInOutBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xD79F58", Offset = "0xD79F58", VA = "0xD79F58")]
	private float punch(float amplitude, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xD87884", Offset = "0xD87884", VA = "0xD87884")]
	private float easeInElastic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xD8796C", Offset = "0xD8796C", VA = "0xD8796C")]
	private float easeOutElastic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xD87A50", Offset = "0xD87A50", VA = "0xD87A50")]
	private float easeInOutElastic(float start, float end, float value)
	{
		return default(float);
	}
}
[Token(Token = "0x2000009")]
public class BulletHole : MonoBehaviour
{
	[Token(Token = "0x2000251")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30CB0", Offset = "0xB30CB0")]
	private sealed class <DestroyDelayed>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BulletHole <>4__this;

		[Token(Token = "0x1700026C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010B6")]
			[Address(RVA = "0x1303FC8", Offset = "0x1303FC8", VA = "0x1303FC8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010B8")]
			[Address(RVA = "0x1304030", Offset = "0x1304030", VA = "0x1304030", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x1303E9C", Offset = "0x1303E9C", VA = "0x1303E9C")]
		[DebuggerHidden]
		public <DestroyDelayed>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0x1303ED8", Offset = "0x1303ED8", VA = "0x1303ED8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x1303EDC", Offset = "0x1303EDC", VA = "0x1303EDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0x1303FD0", Offset = "0x1303FD0", VA = "0x1303FD0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float lifeTime;

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x1303E00", Offset = "0x1303E00", VA = "0x1303E00")]
	private void Start()
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x1303E2C", Offset = "0x1303E2C", VA = "0x1303E2C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB39CB4", Offset = "0xB39CB4")]
	private IEnumerator DestroyDelayed()
	{
		return null;
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x1303EC8", Offset = "0x1303EC8", VA = "0x1303EC8")]
	public BulletHole()
	{
	}
}
[Serializable]
[Token(Token = "0x200000A")]
public class AuthResultEvent : UnityEvent<bool, int, string>
{
	[Token(Token = "0x600013D")]
	[Address(RVA = "0x1303DB0", Offset = "0x1303DB0", VA = "0x1303DB0")]
	public AuthResultEvent()
	{
	}
}
[Token(Token = "0x200000B")]
public class WebAuthManager : MonoBehaviour
{
	[Token(Token = "0x2000252")]
	public delegate void OnResult();

	[Token(Token = "0x2000253")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30CC0", Offset = "0xB30CC0")]
	private sealed class <WaitforRequest>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WWW www;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public WebAuthManager <>4__this;

		[Token(Token = "0x1700026E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010C0")]
			[Address(RVA = "0xD66AC4", Offset = "0xD66AC4", VA = "0xD66AC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010C2")]
			[Address(RVA = "0xD66B2C", Offset = "0xD66B2C", VA = "0xD66B2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xD66798", Offset = "0xD66798", VA = "0xD66798")]
		[DebuggerHidden]
		public <WaitforRequest>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xD669F8", Offset = "0xD669F8", VA = "0xD669F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0xD669FC", Offset = "0xD669FC", VA = "0xD669FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0xD66ACC", Offset = "0xD66ACC", VA = "0xD66ACC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameAuthInfo AuthInfo;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AuthResultEvent OnSuccessEvent;

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xD66470", Offset = "0xD66470", VA = "0xD66470")]
	private void Awake()
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xD66474", Offset = "0xD66474", VA = "0xD66474")]
	private bool Check_Auth()
	{
		return default(bool);
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xD665A8", Offset = "0xD665A8", VA = "0xD665A8")]
	public WWW Send_PostRequest(string addrURL, Dictionary<string, string> post)
	{
		return null;
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xD6671C", Offset = "0xD6671C", VA = "0xD6671C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB39D18", Offset = "0xB39D18")]
	private IEnumerator WaitforRequest(WWW www)
	{
		return null;
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xD667C4", Offset = "0xD667C4", VA = "0xD667C4")]
	public void OnHttpRequest(bool bSuccess, string strMessage)
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xD669F0", Offset = "0xD669F0", VA = "0xD669F0")]
	public WebAuthManager()
	{
	}
}
[Token(Token = "0x200000C")]
public class AlphaButtonClickMask : MonoBehaviour, ICanvasRaycastFilter
{
	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Image _image;

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x13038EC", Offset = "0x13038EC", VA = "0x13038EC")]
	public void Start()
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0x1303A9C", Offset = "0x1303A9C", VA = "0x1303A9C", Slot = "4")]
	public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
	{
		return default(bool);
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0x1303DA8", Offset = "0x1303DA8", VA = "0x1303DA8")]
	public AlphaButtonClickMask()
	{
	}
}
[Token(Token = "0x200000D")]
public class EventSystemChecker : MonoBehaviour
{
	[Token(Token = "0x6000147")]
	[Address(RVA = "0x13FD1F8", Offset = "0x13FD1F8", VA = "0x13FD1F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x13FD2D4", Offset = "0x13FD2D4", VA = "0x13FD2D4")]
	public EventSystemChecker()
	{
	}
}
[Token(Token = "0x200000E")]
public class ForcedReset : MonoBehaviour
{
	[Token(Token = "0x6000149")]
	[Address(RVA = "0x14001D8", Offset = "0x14001D8", VA = "0x14001D8")]
	private void Update()
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x1400274", Offset = "0x1400274", VA = "0x1400274")]
	public ForcedReset()
	{
	}
}
namespace Helper
{
	[Token(Token = "0x200000F")]
	internal class CollectionMap<TKey, TValue> : ThreadSafeDictionary<TKey, TValue> where TValue : new()
	{
		[Token(Token = "0x600014B")]
		public bool TryAddDefault(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x600014C")]
		public CollectionMap()
		{
		}
	}
	[Token(Token = "0x2000010")]
	public static class ExceptionHelper
	{
		[Token(Token = "0x4000038")]
		private const int E_NOTIMPL = -2147467263;

		[Token(Token = "0x4000039")]
		private const int E_OUTOFMEMORY = -2147024882;

		[Token(Token = "0x400003A")]
		private const int E_INVALIDARG = -2147024809;

		[Token(Token = "0x400003B")]
		private const int E_POINTER = -2147467261;

		[Token(Token = "0x400003C")]
		private const int E_PENDING = -2147483638;

		[Token(Token = "0x400003D")]
		private const int E_FAIL = -2147467259;

		[Token(Token = "0x600014D")]
		[Address(RVA = "0x140027C", Offset = "0x140027C", VA = "0x140027C")]
		public static void CheckLastError()
		{
		}
	}
	[Token(Token = "0x2000011")]
	internal interface INativeWrapper
	{
		[Token(Token = "0x17000001")]
		IntPtr nativePtr
		{
			[Token(Token = "0x600014E")]
			get;
		}
	}
	[Token(Token = "0x2000012")]
	public static class NativeObjectCache
	{
		[Token(Token = "0x400003E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static object _lock;

		[Token(Token = "0x400003F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<Type, Dictionary<IntPtr, WeakReference>> _objectCache;

		[Token(Token = "0x600014F")]
		public static void AddObject<T>(IntPtr nativePtr, T obj) where T : class
		{
		}

		[Token(Token = "0x6000150")]
		[Address(RVA = "0x140049C", Offset = "0x140049C", VA = "0x140049C")]
		public static void Flush()
		{
		}

		[Token(Token = "0x6000151")]
		public static void RemoveObject<T>(IntPtr nativePtr)
		{
		}

		[Token(Token = "0x6000152")]
		public static T GetObject<T>(IntPtr nativePtr) where T : class
		{
			return null;
		}

		[Token(Token = "0x6000153")]
		public static T CreateOrGetObject<T>(IntPtr nativePtr, Func<IntPtr, T> create) where T : class
		{
			return null;
		}
	}
	[Token(Token = "0x2000013")]
	public static class NativeWrapper
	{
		[Token(Token = "0x6000155")]
		[Address(RVA = "0x14007B4", Offset = "0x14007B4", VA = "0x14007B4")]
		public static IntPtr GetNativePtr(object obj)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000014")]
	public class SmartGCHandle : IDisposable
	{
		[Token(Token = "0x4000040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GCHandle handle;

		[Token(Token = "0x6000156")]
		[Address(RVA = "0x14008BC", Offset = "0x14008BC", VA = "0x14008BC")]
		public SmartGCHandle(GCHandle handle)
		{
		}

		[Token(Token = "0x6000157")]
		[Address(RVA = "0x14008E8", Offset = "0x14008E8", VA = "0x14008E8", Slot = "1")]
		~SmartGCHandle()
		{
		}

		[Token(Token = "0x6000158")]
		[Address(RVA = "0x140095C", Offset = "0x140095C", VA = "0x140095C")]
		public IntPtr AddrOfPinnedObject()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000159")]
		[Address(RVA = "0x1400968", Offset = "0x1400968", VA = "0x1400968", Slot = "5")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x600015A")]
		[Address(RVA = "0x1400978", Offset = "0x1400978", VA = "0x1400978", Slot = "6")]
		protected virtual void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600015B")]
		[Address(RVA = "0x1400984", Offset = "0x1400984", VA = "0x1400984")]
		public static implicit operator GCHandle(SmartGCHandle other)
		{
			return default(GCHandle);
		}
	}
	[Token(Token = "0x2000015")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB2C918", Offset = "0xB2C918")]
	public class ThreadSafeDictionary<TKey, TValue>
	{
		[Token(Token = "0x4000041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected readonly Dictionary<TKey, TValue> _impl;

		[Token(Token = "0x17000002")]
		public TValue Item
		{
			[Token(Token = "0x600015C")]
			get
			{
				return (TValue)null;
			}
			[Token(Token = "0x600015D")]
			set
			{
			}
		}

		[Token(Token = "0x600015E")]
		public void Add(TKey key, TValue value)
		{
		}

		[Token(Token = "0x600015F")]
		public bool TryGetValue(TKey key, out TValue value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000160")]
		public bool Remove(TKey key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000161")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000162")]
		public ThreadSafeDictionary()
		{
		}
	}
}
namespace Windows.Data
{
	[Token(Token = "0x2000016")]
	public sealed class PropertyChangedEventArgs : EventArgs, INativeWrapper
	{
		[Token(Token = "0x4000042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal IntPtr _pNative;

		[Token(Token = "0x17000003")]
		private IntPtr Helper.INativeWrapper.nativePtr
		{
			[Token(Token = "0x6000163")]
			[Address(RVA = "0xD66D88", Offset = "0xD66D88", VA = "0xD66D88", Slot = "4")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x17000004")]
		public string PropertyName
		{
			[Token(Token = "0x600016A")]
			[Address(RVA = "0xD670AC", Offset = "0xD670AC", VA = "0xD670AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000164")]
		[Address(RVA = "0xD66D90", Offset = "0xD66D90", VA = "0xD66D90")]
		internal PropertyChangedEventArgs(IntPtr pNative)
		{
		}

		[Token(Token = "0x6000165")]
		[Address(RVA = "0xD66E94", Offset = "0xD66E94", VA = "0xD66E94", Slot = "1")]
		~PropertyChangedEventArgs()
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000166")]
		[Address(RVA = "0xD66F98", Offset = "0xD66F98", VA = "0xD66F98")]
		private static extern void Windows_Data_PropertyChangedEventArgs_ReleaseObject(ref IntPtr pNative);

		[PreserveSig]
		[Token(Token = "0x6000167")]
		[Address(RVA = "0xD66E10", Offset = "0xD66E10", VA = "0xD66E10")]
		private static extern void Windows_Data_PropertyChangedEventArgs_AddRefObject(ref IntPtr pNative);

		[Token(Token = "0x6000168")]
		[Address(RVA = "0xD66F00", Offset = "0xD66F00", VA = "0xD66F00")]
		private void Dispose(bool disposing)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000169")]
		[Address(RVA = "0xD67020", Offset = "0xD67020", VA = "0xD67020")]
		private static extern IntPtr Windows_Data_PropertyChangedEventArgs_get_PropertyName(IntPtr pNative);

		[Token(Token = "0x600016B")]
		[Address(RVA = "0xD6701C", Offset = "0xD6701C", VA = "0xD6701C")]
		private void __EventCleanup()
		{
		}
	}
}
namespace Windows.Kinect
{
	[Token(Token = "0x2000017")]
	public struct CameraIntrinsics
	{
		[Token(Token = "0x4000043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30F70", Offset = "0xB30F70")]
		private float <FocalLengthX>k__BackingField;

		[Token(Token = "0x4000044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30F80", Offset = "0xB30F80")]
		private float <FocalLengthY>k__BackingField;

		[Token(Token = "0x4000045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30F90", Offset = "0xB30F90")]
		private float <PrincipalPointX>k__BackingField;

		[Token(Token = "0x4000046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30FA0", Offset = "0xB30FA0")]
		private float <PrincipalPointY>k__BackingField;

		[Token(Token = "0x4000047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30FB0", Offset = "0xB30FB0")]
		private float <RadialDistortionSecondOrder>k__BackingField;

		[Token(Token = "0x4000048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30FC0", Offset = "0xB30FC0")]
		private float <RadialDistortionFourthOrder>k__BackingField;

		[Token(Token = "0x4000049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30FD0", Offset = "0xB30FD0")]
		private float <RadialDistortionSixthOrder>k__BackingField;

		[Token(Token = "0x17000005")]
		public float FocalLengthX
		{
			[Token(Token = "0x600016C")]
			[Address(RVA = "0xC16DE4", Offset = "0xC16DE4", VA = "0xC16DE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39D7C", Offset = "0xB39D7C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600016D")]
			[Address(RVA = "0xC16DEC", Offset = "0xC16DEC", VA = "0xC16DEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39D8C", Offset = "0xB39D8C")]
			set
			{
			}
		}

		[Token(Token = "0x17000006")]
		public float FocalLengthY
		{
			[Token(Token = "0x600016E")]
			[Address(RVA = "0xC16DF4", Offset = "0xC16DF4", VA = "0xC16DF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39D9C", Offset = "0xB39D9C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600016F")]
			[Address(RVA = "0xC16DFC", Offset = "0xC16DFC", VA = "0xC16DFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39DAC", Offset = "0xB39DAC")]
			set
			{
			}
		}

		[Token(Token = "0x17000007")]
		public float PrincipalPointX
		{
			[Token(Token = "0x6000170")]
			[Address(RVA = "0xC16E04", Offset = "0xC16E04", VA = "0xC16E04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39DBC", Offset = "0xB39DBC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000171")]
			[Address(RVA = "0xC16E0C", Offset = "0xC16E0C", VA = "0xC16E0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39DCC", Offset = "0xB39DCC")]
			set
			{
			}
		}

		[Token(Token = "0x17000008")]
		public float PrincipalPointY
		{
			[Token(Token = "0x6000172")]
			[Address(RVA = "0xC16E14", Offset = "0xC16E14", VA = "0xC16E14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39DDC", Offset = "0xB39DDC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000173")]
			[Address(RVA = "0xC16E1C", Offset = "0xC16E1C", VA = "0xC16E1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39DEC", Offset = "0xB39DEC")]
			set
			{
			}
		}

		[Token(Token = "0x17000009")]
		public float RadialDistortionSecondOrder
		{
			[Token(Token = "0x6000174")]
			[Address(RVA = "0xC16E24", Offset = "0xC16E24", VA = "0xC16E24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39DFC", Offset = "0xB39DFC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000175")]
			[Address(RVA = "0xC16E2C", Offset = "0xC16E2C", VA = "0xC16E2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39E0C", Offset = "0xB39E0C")]
			set
			{
			}
		}

		[Token(Token = "0x1700000A")]
		public float RadialDistortionFourthOrder
		{
			[Token(Token = "0x6000176")]
			[Address(RVA = "0xC16E34", Offset = "0xC16E34", VA = "0xC16E34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39E1C", Offset = "0xB39E1C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000177")]
			[Address(RVA = "0xC16E3C", Offset = "0xC16E3C", VA = "0xC16E3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39E2C", Offset = "0xB39E2C")]
			set
			{
			}
		}

		[Token(Token = "0x1700000B")]
		public float RadialDistortionSixthOrder
		{
			[Token(Token = "0x6000178")]
			[Address(RVA = "0xC16E44", Offset = "0xC16E44", VA = "0xC16E44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39E3C", Offset = "0xB39E3C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000179")]
			[Address(RVA = "0xC16E4C", Offset = "0xC16E4C", VA = "0xC16E4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39E4C", Offset = "0xB39E4C")]
			set
			{
			}
		}

		[Token(Token = "0x600017A")]
		[Address(RVA = "0xC16E54", Offset = "0xC16E54", VA = "0xC16E54", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600017B")]
		[Address(RVA = "0xC16E5C", Offset = "0xC16E5C", VA = "0xC16E5C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600017C")]
		[Address(RVA = "0xC16E64", Offset = "0xC16E64", VA = "0xC16E64")]
		public bool Equals(CameraIntrinsics obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600017D")]
		[Address(RVA = "0xD67484", Offset = "0xD67484", VA = "0xD67484")]
		public static bool operator ==(CameraIntrinsics a, CameraIntrinsics b)
		{
			return default(bool);
		}

		[Token(Token = "0x600017E")]
		[Address(RVA = "0xD674B8", Offset = "0xD674B8", VA = "0xD674B8")]
		public static bool operator !=(CameraIntrinsics a, CameraIntrinsics b)
		{
			return default(bool);
		}
	}
}
namespace UnityStandardAssets.Utility
{
	[Token(Token = "0x2000018")]
	public class ActivateTrigger : MonoBehaviour
	{
		[Token(Token = "0x2000254")]
		public enum Mode
		{
			[Token(Token = "0x4000CC1")]
			Trigger,
			[Token(Token = "0x4000CC2")]
			Replace,
			[Token(Token = "0x4000CC3")]
			Activate,
			[Token(Token = "0x4000CC4")]
			Enable,
			[Token(Token = "0x4000CC5")]
			Animate,
			[Token(Token = "0x4000CC6")]
			Deactivate
		}

		[Token(Token = "0x400004A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mode action;

		[Token(Token = "0x400004B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Object target;

		[Token(Token = "0x400004C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject source;

		[Token(Token = "0x400004D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int triggerCount;

		[Token(Token = "0x400004E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool repeatTrigger;

		[Token(Token = "0x600017F")]
		[Address(RVA = "0xD542CC", Offset = "0xD542CC", VA = "0xD542CC")]
		private void DoActivateTrigger()
		{
		}

		[Token(Token = "0x6000180")]
		[Address(RVA = "0xD54734", Offset = "0xD54734", VA = "0xD54734")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000181")]
		[Address(RVA = "0xD54738", Offset = "0xD54738", VA = "0xD54738")]
		public ActivateTrigger()
		{
		}
	}
	[Token(Token = "0x2000019")]
	public class AutoMobileShaderSwitch : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000255")]
		public class ReplacementDefinition
		{
			[Token(Token = "0x4000CC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Shader original;

			[Token(Token = "0x4000CC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Shader replacement;

			[Token(Token = "0x60010C3")]
			[Address(RVA = "0xD550B8", Offset = "0xD550B8", VA = "0xD550B8")]
			public ReplacementDefinition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000256")]
		public class ReplacementList
		{
			[Token(Token = "0x4000CC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ReplacementDefinition[] items;

			[Token(Token = "0x60010C4")]
			[Address(RVA = "0xD550C0", Offset = "0xD550C0", VA = "0xD550C0")]
			public ReplacementList()
			{
			}
		}

		[Token(Token = "0x400004F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ReplacementList m_ReplacementList;

		[Token(Token = "0x6000182")]
		[Address(RVA = "0xD54750", Offset = "0xD54750", VA = "0xD54750")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000183")]
		[Address(RVA = "0xD550B0", Offset = "0xD550B0", VA = "0xD550B0")]
		public AutoMobileShaderSwitch()
		{
		}
	}
	[Token(Token = "0x200001A")]
	public class AutoMoveAndRotate : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000257")]
		public class Vector3andSpace
		{
			[Token(Token = "0x4000CCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 value;

			[Token(Token = "0x4000CCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Space space;

			[Token(Token = "0x60010C5")]
			[Address(RVA = "0xD55290", Offset = "0xD55290", VA = "0xD55290")]
			public Vector3andSpace()
			{
			}
		}

		[Token(Token = "0x4000050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3andSpace moveUnitsPerSecond;

		[Token(Token = "0x4000051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3andSpace rotateDegreesPerSecond;

		[Token(Token = "0x4000052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool ignoreTimescale;

		[Token(Token = "0x4000053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_LastRealTime;

		[Token(Token = "0x6000184")]
		[Address(RVA = "0xD55120", Offset = "0xD55120", VA = "0xD55120")]
		private void Start()
		{
		}

		[Token(Token = "0x6000185")]
		[Address(RVA = "0xD55148", Offset = "0xD55148", VA = "0xD55148")]
		private void Update()
		{
		}

		[Token(Token = "0x6000186")]
		[Address(RVA = "0xD55288", Offset = "0xD55288", VA = "0xD55288")]
		public AutoMoveAndRotate()
		{
		}
	}
	[Token(Token = "0x200001B")]
	public class CameraRefocus
	{
		[Token(Token = "0x4000054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Camera Camera;

		[Token(Token = "0x4000055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 Lookatpoint;

		[Token(Token = "0x4000056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform Parent;

		[Token(Token = "0x4000057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_OrigCameraPos;

		[Token(Token = "0x4000058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_Refocus;

		[Token(Token = "0x6000187")]
		[Address(RVA = "0xD552A0", Offset = "0xD552A0", VA = "0xD552A0")]
		public CameraRefocus(Camera camera, Transform parent, Vector3 origCameraPos)
		{
		}

		[Token(Token = "0x6000188")]
		[Address(RVA = "0xD55300", Offset = "0xD55300", VA = "0xD55300")]
		public void ChangeCamera(Camera camera)
		{
		}

		[Token(Token = "0x6000189")]
		[Address(RVA = "0xD55308", Offset = "0xD55308", VA = "0xD55308")]
		public void ChangeParent(Transform parent)
		{
		}

		[Token(Token = "0x600018A")]
		[Address(RVA = "0xD55310", Offset = "0xD55310", VA = "0xD55310")]
		public void GetFocusPoint()
		{
		}

		[Token(Token = "0x600018B")]
		[Address(RVA = "0xD55470", Offset = "0xD55470", VA = "0xD55470")]
		public void SetFocusPoint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200001C")]
	public class CurveControlledBob
	{
		[Token(Token = "0x4000059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float HorizontalBobRange;

		[Token(Token = "0x400005A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float VerticalBobRange;

		[Token(Token = "0x400005B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve Bobcurve;

		[Token(Token = "0x400005C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float VerticaltoHorizontalRatio;

		[Token(Token = "0x400005D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_CyclePositionX;

		[Token(Token = "0x400005E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_CyclePositionY;

		[Token(Token = "0x400005F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_BobBaseInterval;

		[Token(Token = "0x4000060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_OriginalCameraPosition;

		[Token(Token = "0x4000061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_Time;

		[Token(Token = "0x600018C")]
		[Address(RVA = "0xD554C4", Offset = "0xD554C4", VA = "0xD554C4")]
		public void Setup(Camera camera, float bobBaseInterval)
		{
		}

		[Token(Token = "0x600018D")]
		[Address(RVA = "0xD55568", Offset = "0xD55568", VA = "0xD55568")]
		public Vector3 DoHeadBob(float speed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600018E")]
		[Address(RVA = "0xD55688", Offset = "0xD55688", VA = "0xD55688")]
		public CurveControlledBob()
		{
		}
	}
	[Token(Token = "0x200001D")]
	public class DragRigidbody : MonoBehaviour
	{
		[Token(Token = "0x2000258")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30CD0", Offset = "0xB30CD0")]
		private sealed class <DragObject>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DragRigidbody <>4__this;

			[Token(Token = "0x4000CCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float distance;

			[Token(Token = "0x4000CD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <oldDrag>5__2;

			[Token(Token = "0x4000CD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <oldAngularDrag>5__3;

			[Token(Token = "0x4000CD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Camera <mainCamera>5__4;

			[Token(Token = "0x17000270")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010C9")]
				[Address(RVA = "0xD55FD4", Offset = "0xD55FD4", VA = "0xD55FD4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000271")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010CB")]
				[Address(RVA = "0xD5603C", Offset = "0xD5603C", VA = "0xD5603C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010C6")]
			[Address(RVA = "0xD55D5C", Offset = "0xD55D5C", VA = "0xD55D5C")]
			[DebuggerHidden]
			public <DragObject>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60010C7")]
			[Address(RVA = "0xD55D90", Offset = "0xD55D90", VA = "0xD55D90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010C8")]
			[Address(RVA = "0xD55D94", Offset = "0xD55D94", VA = "0xD55D94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010CA")]
			[Address(RVA = "0xD55FDC", Offset = "0xD55FDC", VA = "0xD55FDC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000062")]
		private const float k_Spring = 50f;

		[Token(Token = "0x4000063")]
		private const float k_Damper = 5f;

		[Token(Token = "0x4000064")]
		private const float k_Drag = 10f;

		[Token(Token = "0x4000065")]
		private const float k_AngularDrag = 5f;

		[Token(Token = "0x4000066")]
		private const float k_Distance = 0.2f;

		[Token(Token = "0x4000067")]
		private const bool k_AttachToCenterOfMass = false;

		[Token(Token = "0x4000068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SpringJoint m_SpringJoint;

		[Token(Token = "0x600018F")]
		[Address(RVA = "0xD558C8", Offset = "0xD558C8", VA = "0xD558C8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000190")]
		[Address(RVA = "0xD55CDC", Offset = "0xD55CDC", VA = "0xD55CDC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB39E5C", Offset = "0xB39E5C")]
		private IEnumerator DragObject(float distance)
		{
			return null;
		}

		[Token(Token = "0x6000191")]
		[Address(RVA = "0xD55C2C", Offset = "0xD55C2C", VA = "0xD55C2C")]
		private Camera FindCamera()
		{
			return null;
		}

		[Token(Token = "0x6000192")]
		[Address(RVA = "0xD55D88", Offset = "0xD55D88", VA = "0xD55D88")]
		public DragRigidbody()
		{
		}
	}
	[Token(Token = "0x200001E")]
	public class DynamicShadowSettings : MonoBehaviour
	{
		[Token(Token = "0x4000069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Light sunLight;

		[Token(Token = "0x400006A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minHeight;

		[Token(Token = "0x400006B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minShadowDistance;

		[Token(Token = "0x400006C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minShadowBias;

		[Token(Token = "0x400006D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxHeight;

		[Token(Token = "0x400006E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxShadowDistance;

		[Token(Token = "0x400006F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxShadowBias;

		[Token(Token = "0x4000070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float adaptTime;

		[Token(Token = "0x4000071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_SmoothHeight;

		[Token(Token = "0x4000072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float m_ChangeSpeed;

		[Token(Token = "0x4000073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_OriginalStrength;

		[Token(Token = "0x6000193")]
		[Address(RVA = "0xD56044", Offset = "0xD56044", VA = "0xD56044")]
		private void Start()
		{
		}

		[Token(Token = "0x6000194")]
		[Address(RVA = "0xD56078", Offset = "0xD56078", VA = "0xD56078")]
		private void Update()
		{
		}

		[Token(Token = "0x6000195")]
		[Address(RVA = "0xD562EC", Offset = "0xD562EC", VA = "0xD562EC")]
		public DynamicShadowSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200001F")]
	public class FOVKick
	{
		[Token(Token = "0x2000259")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30CE0", Offset = "0xB30CE0")]
		private sealed class <FOVKickUp>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FOVKick <>4__this;

			[Token(Token = "0x4000CD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x17000272")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010CF")]
				[Address(RVA = "0xD568E8", Offset = "0xD568E8", VA = "0xD568E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000273")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010D1")]
				[Address(RVA = "0xD56950", Offset = "0xD56950", VA = "0xD56950", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010CC")]
			[Address(RVA = "0xD564B8", Offset = "0xD564B8", VA = "0xD564B8")]
			[DebuggerHidden]
			public <FOVKickUp>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x60010CD")]
			[Address(RVA = "0xD56784", Offset = "0xD56784", VA = "0xD56784", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010CE")]
			[Address(RVA = "0xD56788", Offset = "0xD56788", VA = "0xD56788", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010D0")]
			[Address(RVA = "0xD568F0", Offset = "0xD568F0", VA = "0xD568F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200025A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30CF0", Offset = "0xB30CF0")]
		private sealed class <FOVKickDown>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FOVKick <>4__this;

			[Token(Token = "0x4000CDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x17000274")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010D5")]
				[Address(RVA = "0xD56714", Offset = "0xD56714", VA = "0xD56714", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000275")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010D7")]
				[Address(RVA = "0xD5677C", Offset = "0xD5677C", VA = "0xD5677C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010D2")]
			[Address(RVA = "0xD56554", Offset = "0xD56554", VA = "0xD56554")]
			[DebuggerHidden]
			public <FOVKickDown>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x60010D3")]
			[Address(RVA = "0xD5659C", Offset = "0xD5659C", VA = "0xD5659C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010D4")]
			[Address(RVA = "0xD565A0", Offset = "0xD565A0", VA = "0xD565A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010D6")]
			[Address(RVA = "0xD5671C", Offset = "0xD5671C", VA = "0xD5671C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Camera Camera;

		[Token(Token = "0x4000075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public float originalFov;

		[Token(Token = "0x4000076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float FOVIncrease;

		[Token(Token = "0x4000077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float TimeToIncrease;

		[Token(Token = "0x4000078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float TimeToDecrease;

		[Token(Token = "0x4000079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve IncreaseCurve;

		[Token(Token = "0x6000196")]
		[Address(RVA = "0xD56320", Offset = "0xD56320", VA = "0xD56320")]
		public void Setup(Camera camera)
		{
		}

		[Token(Token = "0x6000197")]
		[Address(RVA = "0xD56360", Offset = "0xD56360", VA = "0xD56360")]
		private void CheckStatus(Camera camera)
		{
		}

		[Token(Token = "0x6000198")]
		[Address(RVA = "0xD56440", Offset = "0xD56440", VA = "0xD56440")]
		public void ChangeCamera(Camera camera)
		{
		}

		[Token(Token = "0x6000199")]
		[Address(RVA = "0xD56448", Offset = "0xD56448", VA = "0xD56448")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB39EC0", Offset = "0xB39EC0")]
		public IEnumerator FOVKickUp()
		{
			return null;
		}

		[Token(Token = "0x600019A")]
		[Address(RVA = "0xD564E4", Offset = "0xD564E4", VA = "0xD564E4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB39F24", Offset = "0xB39F24")]
		public IEnumerator FOVKickDown()
		{
			return null;
		}

		[Token(Token = "0x600019B")]
		[Address(RVA = "0xD56580", Offset = "0xD56580", VA = "0xD56580")]
		public FOVKick()
		{
		}
	}
	[Token(Token = "0x2000020")]
	public class FollowTarget : MonoBehaviour
	{
		[Token(Token = "0x400007A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x400007B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 offset;

		[Token(Token = "0x600019C")]
		[Address(RVA = "0xD56958", Offset = "0xD56958", VA = "0xD56958")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600019D")]
		[Address(RVA = "0xD56A88", Offset = "0xD56A88", VA = "0xD56A88")]
		public FollowTarget()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000021")]
	public class LerpControlledBob
	{
		[Token(Token = "0x200025B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30D00", Offset = "0xB30D00")]
		private sealed class <DoBobCycle>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LerpControlledBob <>4__this;

			[Token(Token = "0x4000CDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x17000276")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010DB")]
				[Address(RVA = "0xD56D78", Offset = "0xD56D78", VA = "0xD56D78", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000277")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010DD")]
				[Address(RVA = "0xD56DE0", Offset = "0xD56DE0", VA = "0xD56DE0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010D8")]
			[Address(RVA = "0xD56B60", Offset = "0xD56B60", VA = "0xD56B60")]
			[DebuggerHidden]
			public <DoBobCycle>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x60010D9")]
			[Address(RVA = "0xD56B94", Offset = "0xD56B94", VA = "0xD56B94", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010DA")]
			[Address(RVA = "0xD56B98", Offset = "0xD56B98", VA = "0xD56B98", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010DC")]
			[Address(RVA = "0xD56D80", Offset = "0xD56D80", VA = "0xD56D80", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400007C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float BobDuration;

		[Token(Token = "0x400007D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float BobAmount;

		[Token(Token = "0x400007E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_Offset;

		[Token(Token = "0x600019E")]
		[Address(RVA = "0xD56AE8", Offset = "0xD56AE8", VA = "0xD56AE8")]
		public float Offset()
		{
			return default(float);
		}

		[Token(Token = "0x600019F")]
		[Address(RVA = "0xD56AF0", Offset = "0xD56AF0", VA = "0xD56AF0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB39F88", Offset = "0xB39F88")]
		public IEnumerator DoBobCycle()
		{
			return null;
		}

		[Token(Token = "0x60001A0")]
		[Address(RVA = "0xD56B8C", Offset = "0xD56B8C", VA = "0xD56B8C")]
		public LerpControlledBob()
		{
		}
	}
	[Token(Token = "0x2000022")]
	public class ObjectResetter : MonoBehaviour
	{
		[Token(Token = "0x200025C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30D10", Offset = "0xB30D10")]
		private sealed class <ResetCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4000CE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ObjectResetter <>4__this;

			[Token(Token = "0x17000278")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010E1")]
				[Address(RVA = "0xD571E8", Offset = "0xD571E8", VA = "0xD571E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000279")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010E3")]
				[Address(RVA = "0xD57250", Offset = "0xD57250", VA = "0xD57250", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010DE")]
			[Address(RVA = "0xD56F80", Offset = "0xD56F80", VA = "0xD56F80")]
			[DebuggerHidden]
			public <ResetCoroutine>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60010DF")]
			[Address(RVA = "0xD56FB4", Offset = "0xD56FB4", VA = "0xD56FB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010E0")]
			[Address(RVA = "0xD56FB8", Offset = "0xD56FB8", VA = "0xD56FB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010E2")]
			[Address(RVA = "0xD571F0", Offset = "0xD571F0", VA = "0xD571F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400007F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 originalPosition;

		[Token(Token = "0x4000080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Quaternion originalRotation;

		[Token(Token = "0x4000081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Transform> originalStructure;

		[Token(Token = "0x4000082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody Rigidbody;

		[Token(Token = "0x60001A1")]
		[Address(RVA = "0xD56DE8", Offset = "0xD56DE8", VA = "0xD56DE8")]
		private void Start()
		{
		}

		[Token(Token = "0x60001A2")]
		[Address(RVA = "0xD56ED4", Offset = "0xD56ED4", VA = "0xD56ED4")]
		public void DelayedReset(float delay)
		{
		}

		[Token(Token = "0x60001A3")]
		[Address(RVA = "0xD56F00", Offset = "0xD56F00", VA = "0xD56F00")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB39FEC", Offset = "0xB39FEC")]
		public IEnumerator ResetCoroutine(float delay)
		{
			return null;
		}

		[Token(Token = "0x60001A4")]
		[Address(RVA = "0xD56FAC", Offset = "0xD56FAC", VA = "0xD56FAC")]
		public ObjectResetter()
		{
		}
	}
	[Token(Token = "0x2000023")]
	public class ParticleSystemDestroyer : MonoBehaviour
	{
		[Token(Token = "0x200025D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30D20", Offset = "0xB30D20")]
		private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ParticleSystemDestroyer <>4__this;

			[Token(Token = "0x4000CE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private ParticleSystem[] <systems>5__2;

			[Token(Token = "0x4000CE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <stopTime>5__3;

			[Token(Token = "0x1700027A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010E7")]
				[Address(RVA = "0xD57648", Offset = "0xD57648", VA = "0xD57648", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700027B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010E9")]
				[Address(RVA = "0xD576B0", Offset = "0xD576B0", VA = "0xD576B0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010E4")]
			[Address(RVA = "0xD572C8", Offset = "0xD572C8", VA = "0xD572C8")]
			[DebuggerHidden]
			public <Start>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x60010E5")]
			[Address(RVA = "0xD57314", Offset = "0xD57314", VA = "0xD57314", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010E6")]
			[Address(RVA = "0xD57318", Offset = "0xD57318", VA = "0xD57318", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010E8")]
			[Address(RVA = "0xD57650", Offset = "0xD57650", VA = "0xD57650", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minDuration;

		[Token(Token = "0x4000084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxDuration;

		[Token(Token = "0x4000085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_MaxLifetime;

		[Token(Token = "0x4000086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool m_EarlyStop;

		[Token(Token = "0x60001A5")]
		[Address(RVA = "0xD57258", Offset = "0xD57258", VA = "0xD57258")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3A050", Offset = "0xB3A050")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x60001A6")]
		[Address(RVA = "0xD572F4", Offset = "0xD572F4", VA = "0xD572F4")]
		public void Stop()
		{
		}

		[Token(Token = "0x60001A7")]
		[Address(RVA = "0xD57300", Offset = "0xD57300", VA = "0xD57300")]
		public ParticleSystemDestroyer()
		{
		}
	}
	[Token(Token = "0x2000024")]
	public class PlatformSpecificContent : MonoBehaviour
	{
		[Token(Token = "0x200025E")]
		private enum BuildTargetGroup
		{
			[Token(Token = "0x4000CE9")]
			Standalone,
			[Token(Token = "0x4000CEA")]
			Mobile
		}

		[Token(Token = "0x4000087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private BuildTargetGroup m_BuildTargetGroup;

		[Token(Token = "0x4000088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject[] m_Content;

		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MonoBehaviour[] m_MonoBehaviours;

		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool m_ChildrenOfThisObject;

		[Token(Token = "0x60001A8")]
		[Address(RVA = "0xD576B8", Offset = "0xD576B8", VA = "0xD576B8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60001A9")]
		[Address(RVA = "0xD576BC", Offset = "0xD576BC", VA = "0xD576BC")]
		private void CheckEnableContent()
		{
		}

		[Token(Token = "0x60001AA")]
		[Address(RVA = "0xD576D8", Offset = "0xD576D8", VA = "0xD576D8")]
		private void EnableContent(bool enabled)
		{
		}

		[Token(Token = "0x60001AB")]
		[Address(RVA = "0xD57A44", Offset = "0xD57A44", VA = "0xD57A44")]
		public PlatformSpecificContent()
		{
		}
	}
	[Token(Token = "0x2000025")]
	public class SimpleActivatorMenu : MonoBehaviour
	{
		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] objects;

		[Token(Token = "0x400008C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_CurrentActiveObject;

		[Token(Token = "0x60001AC")]
		[Address(RVA = "0xD57ABC", Offset = "0xD57ABC", VA = "0xD57ABC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60001AD")]
		[Address(RVA = "0xD57AC4", Offset = "0xD57AC4", VA = "0xD57AC4")]
		public void NextCamera()
		{
		}

		[Token(Token = "0x60001AE")]
		[Address(RVA = "0xD57B60", Offset = "0xD57B60", VA = "0xD57B60")]
		public SimpleActivatorMenu()
		{
		}
	}
	[Token(Token = "0x2000026")]
	public class SimpleMouseRotator : MonoBehaviour
	{
		[Token(Token = "0x400008D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 rotationRange;

		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float rotationSpeed;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float dampingTime;

		[Token(Token = "0x4000090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool autoZeroVerticalOnMobile;

		[Token(Token = "0x4000091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool autoZeroHorizontalOnMobile;

		[Token(Token = "0x4000092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool relative;

		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 m_TargetAngles;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_FollowAngles;

		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 m_FollowVelocity;

		[Token(Token = "0x4000096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion m_OriginalRotation;

		[Token(Token = "0x60001AF")]
		[Address(RVA = "0xD57B68", Offset = "0xD57B68", VA = "0xD57B68")]
		private void Start()
		{
		}

		[Token(Token = "0x60001B0")]
		[Address(RVA = "0xD57BA4", Offset = "0xD57BA4", VA = "0xD57BA4")]
		private void Update()
		{
		}

		[Token(Token = "0x60001B1")]
		[Address(RVA = "0xD57FE0", Offset = "0xD57FE0", VA = "0xD57FE0")]
		public SimpleMouseRotator()
		{
		}
	}
	[Token(Token = "0x2000027")]
	public class SmoothFollow : MonoBehaviour
	{
		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform target;

		[Token(Token = "0x4000098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float distance;

		[Token(Token = "0x4000099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float height;

		[Token(Token = "0x400009A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float rotationDamping;

		[Token(Token = "0x400009B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float heightDamping;

		[Token(Token = "0x60001B2")]
		[Address(RVA = "0xD580A0", Offset = "0xD580A0", VA = "0xD580A0")]
		private void Start()
		{
		}

		[Token(Token = "0x60001B3")]
		[Address(RVA = "0xD580A4", Offset = "0xD580A4", VA = "0xD580A4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60001B4")]
		[Address(RVA = "0xD583D0", Offset = "0xD583D0", VA = "0xD583D0")]
		public SmoothFollow()
		{
		}
	}
	[Token(Token = "0x2000028")]
	public class TimedObjectActivator : MonoBehaviour
	{
		[Token(Token = "0x200025F")]
		public enum Action
		{
			[Token(Token = "0x4000CEC")]
			Activate,
			[Token(Token = "0x4000CED")]
			Deactivate,
			[Token(Token = "0x4000CEE")]
			Destroy,
			[Token(Token = "0x4000CEF")]
			ReloadLevel,
			[Token(Token = "0x4000CF0")]
			Call
		}

		[Serializable]
		[Token(Token = "0x2000260")]
		public class Entry
		{
			[Token(Token = "0x4000CF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject target;

			[Token(Token = "0x4000CF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Action action;

			[Token(Token = "0x4000CF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float delay;

			[Token(Token = "0x60010EA")]
			[Address(RVA = "0xD58B18", Offset = "0xD58B18", VA = "0xD58B18")]
			public Entry()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000261")]
		public class Entries
		{
			[Token(Token = "0x4000CF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Entry[] entries;

			[Token(Token = "0x60010EB")]
			[Address(RVA = "0xD5874C", Offset = "0xD5874C", VA = "0xD5874C")]
			public Entries()
			{
			}
		}

		[Token(Token = "0x2000262")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30D30", Offset = "0xB30D30")]
		private sealed class <Activate>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x1700027C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010EF")]
				[Address(RVA = "0xD58820", Offset = "0xD58820", VA = "0xD58820", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700027D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010F1")]
				[Address(RVA = "0xD58888", Offset = "0xD58888", VA = "0xD58888", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010EC")]
			[Address(RVA = "0xD58660", Offset = "0xD58660", VA = "0xD58660")]
			[DebuggerHidden]
			public <Activate>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x60010ED")]
			[Address(RVA = "0xD58754", Offset = "0xD58754", VA = "0xD58754", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010EE")]
			[Address(RVA = "0xD58758", Offset = "0xD58758", VA = "0xD58758", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010F0")]
			[Address(RVA = "0xD58828", Offset = "0xD58828", VA = "0xD58828", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000263")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30D40", Offset = "0xB30D40")]
		private sealed class <Deactivate>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x1700027E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010F5")]
				[Address(RVA = "0xD5895C", Offset = "0xD5895C", VA = "0xD5895C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700027F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010F7")]
				[Address(RVA = "0xD589C4", Offset = "0xD589C4", VA = "0xD589C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010F2")]
			[Address(RVA = "0xD5868C", Offset = "0xD5868C", VA = "0xD5868C")]
			[DebuggerHidden]
			public <Deactivate>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60010F3")]
			[Address(RVA = "0xD58890", Offset = "0xD58890", VA = "0xD58890", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010F4")]
			[Address(RVA = "0xD58894", Offset = "0xD58894", VA = "0xD58894", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010F6")]
			[Address(RVA = "0xD58964", Offset = "0xD58964", VA = "0xD58964", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000264")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30D50", Offset = "0xB30D50")]
		private sealed class <ReloadLevel>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Entry entry;

			[Token(Token = "0x17000280")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010FB")]
				[Address(RVA = "0xD58AA8", Offset = "0xD58AA8", VA = "0xD58AA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000281")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010FD")]
				[Address(RVA = "0xD58B10", Offset = "0xD58B10", VA = "0xD58B10", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010F8")]
			[Address(RVA = "0xD586B8", Offset = "0xD586B8", VA = "0xD586B8")]
			[DebuggerHidden]
			public <ReloadLevel>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60010F9")]
			[Address(RVA = "0xD589CC", Offset = "0xD589CC", VA = "0xD589CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010FA")]
			[Address(RVA = "0xD589D0", Offset = "0xD589D0", VA = "0xD589D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010FC")]
			[Address(RVA = "0xD58AB0", Offset = "0xD58AB0", VA = "0xD58AB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400009C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Entries entries;

		[Token(Token = "0x60001B5")]
		[Address(RVA = "0xD583E4", Offset = "0xD583E4", VA = "0xD583E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60001B6")]
		[Address(RVA = "0xD58510", Offset = "0xD58510", VA = "0xD58510")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3A0B4", Offset = "0xB3A0B4")]
		private IEnumerator Activate(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x60001B7")]
		[Address(RVA = "0xD58580", Offset = "0xD58580", VA = "0xD58580")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3A118", Offset = "0xB3A118")]
		private IEnumerator Deactivate(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x60001B8")]
		[Address(RVA = "0xD585F0", Offset = "0xD585F0", VA = "0xD585F0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3A17C", Offset = "0xB3A17C")]
		private IEnumerator ReloadLevel(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x60001B9")]
		[Address(RVA = "0xD586E4", Offset = "0xD586E4", VA = "0xD586E4")]
		public TimedObjectActivator()
		{
		}
	}
	[Token(Token = "0x2000029")]
	public class TimedObjectDestructor : MonoBehaviour
	{
		[Token(Token = "0x400009D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_TimeOut;

		[Token(Token = "0x400009E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private bool m_DetachChildren;

		[Token(Token = "0x60001BA")]
		[Address(RVA = "0xD58B20", Offset = "0xD58B20", VA = "0xD58B20")]
		private void Awake()
		{
		}

		[Token(Token = "0x60001BB")]
		[Address(RVA = "0xD58B78", Offset = "0xD58B78", VA = "0xD58B78")]
		private void DestroyNow()
		{
		}

		[Token(Token = "0x60001BC")]
		[Address(RVA = "0xD58C18", Offset = "0xD58C18", VA = "0xD58C18")]
		public TimedObjectDestructor()
		{
		}
	}
	[Token(Token = "0x200002A")]
	public class WaypointCircuit : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000265")]
		public class WaypointList
		{
			[Token(Token = "0x4000CFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public WaypointCircuit circuit;

			[Token(Token = "0x4000CFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform[] items;

			[Token(Token = "0x60010FE")]
			[Address(RVA = "0xD59A58", Offset = "0xD59A58", VA = "0xD59A58")]
			public WaypointList()
			{
			}
		}

		[Token(Token = "0x2000266")]
		public struct RoutePoint
		{
			[Token(Token = "0x4000D00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4000D01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 direction;

			[Token(Token = "0x60010FF")]
			[Address(RVA = "0xC16DC8", Offset = "0xC16DC8", VA = "0xC16DC8")]
			public RoutePoint(Vector3 position, Vector3 direction)
			{
			}
		}

		[Token(Token = "0x400009F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaypointList waypointList;

		[Token(Token = "0x40000A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool smoothRoute;

		[Token(Token = "0x40000A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int numPoints;

		[Token(Token = "0x40000A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3[] points;

		[Token(Token = "0x40000A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float[] distances;

		[Token(Token = "0x40000A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float editorVisualisationSubsteps;

		[Token(Token = "0x40000A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB310C0", Offset = "0xB310C0")]
		private float <Length>k__BackingField;

		[Token(Token = "0x40000A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int p0n;

		[Token(Token = "0x40000A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int p1n;

		[Token(Token = "0x40000A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int p2n;

		[Token(Token = "0x40000A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int p3n;

		[Token(Token = "0x40000AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float i;

		[Token(Token = "0x40000AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 P0;

		[Token(Token = "0x40000AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 P1;

		[Token(Token = "0x40000AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 P2;

		[Token(Token = "0x40000AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 P3;

		[Token(Token = "0x1700000C")]
		public float Length
		{
			[Token(Token = "0x60001BD")]
			[Address(RVA = "0xD58C28", Offset = "0xD58C28", VA = "0xD58C28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A1E0", Offset = "0xB3A1E0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60001BE")]
			[Address(RVA = "0xD58C30", Offset = "0xD58C30", VA = "0xD58C30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A1F0", Offset = "0xB3A1F0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700000D")]
		public Transform[] Waypoints
		{
			[Token(Token = "0x60001BF")]
			[Address(RVA = "0xD58C38", Offset = "0xD58C38", VA = "0xD58C38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001C0")]
		[Address(RVA = "0xD58C54", Offset = "0xD58C54", VA = "0xD58C54")]
		private void Awake()
		{
		}

		[Token(Token = "0x60001C1")]
		[Address(RVA = "0xD58F7C", Offset = "0xD58F7C", VA = "0xD58F7C")]
		public RoutePoint GetRoutePoint(float dist)
		{
			return default(RoutePoint);
		}

		[Token(Token = "0x60001C2")]
		[Address(RVA = "0xD5908C", Offset = "0xD5908C", VA = "0xD5908C")]
		public Vector3 GetRoutePosition(float dist)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60001C3")]
		[Address(RVA = "0xD593F4", Offset = "0xD593F4", VA = "0xD593F4")]
		private Vector3 CatmullRom(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float i)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60001C4")]
		[Address(RVA = "0xD58CB0", Offset = "0xD58CB0", VA = "0xD58CB0")]
		private void CachePositionsAndDistances()
		{
		}

		[Token(Token = "0x60001C5")]
		[Address(RVA = "0xD5975C", Offset = "0xD5975C", VA = "0xD5975C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60001C6")]
		[Address(RVA = "0xD599DC", Offset = "0xD599DC", VA = "0xD599DC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60001C7")]
		[Address(RVA = "0xD59764", Offset = "0xD59764", VA = "0xD59764")]
		private void DrawGizmos(bool selected)
		{
		}

		[Token(Token = "0x60001C8")]
		[Address(RVA = "0xD599E4", Offset = "0xD599E4", VA = "0xD599E4")]
		public WaypointCircuit()
		{
		}
	}
	[Token(Token = "0x200002B")]
	public class WaypointProgressTracker : MonoBehaviour
	{
		[Token(Token = "0x2000267")]
		public enum ProgressStyle
		{
			[Token(Token = "0x4000D03")]
			SmoothAlongRoute,
			[Token(Token = "0x4000D04")]
			PointToPoint
		}

		[Token(Token = "0x40000AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private WaypointCircuit circuit;

		[Token(Token = "0x40000B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float lookAheadForTargetOffset;

		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float lookAheadForTargetFactor;

		[Token(Token = "0x40000B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float lookAheadForSpeedOffset;

		[Token(Token = "0x40000B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float lookAheadForSpeedFactor;

		[Token(Token = "0x40000B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private ProgressStyle progressStyle;

		[Token(Token = "0x40000B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float pointToPointThreshold;

		[Token(Token = "0x40000B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31140", Offset = "0xB31140")]
		private WaypointCircuit.RoutePoint <targetPoint>k__BackingField;

		[Token(Token = "0x40000B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31150", Offset = "0xB31150")]
		private WaypointCircuit.RoutePoint <speedPoint>k__BackingField;

		[Token(Token = "0x40000B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31160", Offset = "0xB31160")]
		private WaypointCircuit.RoutePoint <progressPoint>k__BackingField;

		[Token(Token = "0x40000B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform target;

		[Token(Token = "0x40000BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float progressDistance;

		[Token(Token = "0x40000BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int progressNum;

		[Token(Token = "0x40000BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 lastPosition;

		[Token(Token = "0x40000BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float speed;

		[Token(Token = "0x1700000E")]
		public WaypointCircuit.RoutePoint targetPoint
		{
			[Token(Token = "0x60001C9")]
			[Address(RVA = "0xD59AB8", Offset = "0xD59AB8", VA = "0xD59AB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A200", Offset = "0xB3A200")]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x60001CA")]
			[Address(RVA = "0xD59ACC", Offset = "0xD59ACC", VA = "0xD59ACC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A210", Offset = "0xB3A210")]
			private set
			{
			}
		}

		[Token(Token = "0x1700000F")]
		public WaypointCircuit.RoutePoint speedPoint
		{
			[Token(Token = "0x60001CB")]
			[Address(RVA = "0xD59AE0", Offset = "0xD59AE0", VA = "0xD59AE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A220", Offset = "0xB3A220")]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x60001CC")]
			[Address(RVA = "0xD59AF4", Offset = "0xD59AF4", VA = "0xD59AF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A230", Offset = "0xB3A230")]
			private set
			{
			}
		}

		[Token(Token = "0x17000010")]
		public WaypointCircuit.RoutePoint progressPoint
		{
			[Token(Token = "0x60001CD")]
			[Address(RVA = "0xD59B08", Offset = "0xD59B08", VA = "0xD59B08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A240", Offset = "0xB3A240")]
			get
			{
				return default(WaypointCircuit.RoutePoint);
			}
			[Token(Token = "0x60001CE")]
			[Address(RVA = "0xD59B1C", Offset = "0xD59B1C", VA = "0xD59B1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A250", Offset = "0xB3A250")]
			private set
			{
			}
		}

		[Token(Token = "0x60001CF")]
		[Address(RVA = "0xD59B30", Offset = "0xD59B30", VA = "0xD59B30")]
		private void Start()
		{
		}

		[Token(Token = "0x60001D0")]
		[Address(RVA = "0xD59C14", Offset = "0xD59C14", VA = "0xD59C14")]
		public void Reset()
		{
		}

		[Token(Token = "0x60001D1")]
		[Address(RVA = "0xD59CEC", Offset = "0xD59CEC", VA = "0xD59CEC")]
		private void Update()
		{
		}

		[Token(Token = "0x60001D2")]
		[Address(RVA = "0xD5A254", Offset = "0xD5A254", VA = "0xD5A254")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60001D3")]
		[Address(RVA = "0xD5A42C", Offset = "0xD5A42C", VA = "0xD5A42C")]
		public WaypointProgressTracker()
		{
		}
	}
}
namespace UnityStandardAssets.Effects
{
	[Token(Token = "0x200002C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2C950", Offset = "0xB2C950")]
	public class AfterburnerPhysicsForce : MonoBehaviour
	{
		[Token(Token = "0x40000BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float effectAngle;

		[Token(Token = "0x40000BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float effectWidth;

		[Token(Token = "0x40000C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float effectDistance;

		[Token(Token = "0x40000C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float force;

		[Token(Token = "0x40000C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider[] m_Cols;

		[Token(Token = "0x40000C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SphereCollider m_Sphere;

		[Token(Token = "0x60001D4")]
		[Address(RVA = "0x145458C", Offset = "0x145458C", VA = "0x145458C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60001D5")]
		[Address(RVA = "0x1454624", Offset = "0x1454624", VA = "0x1454624")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60001D6")]
		[Address(RVA = "0x1454AD0", Offset = "0x1454AD0", VA = "0x1454AD0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60001D7")]
		[Address(RVA = "0x1455014", Offset = "0x1455014", VA = "0x1455014")]
		public AfterburnerPhysicsForce()
		{
		}
	}
	[Token(Token = "0x200002D")]
	public class ExplosionFireAndDebris : MonoBehaviour
	{
		[Token(Token = "0x2000268")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30D60", Offset = "0xB30D60")]
		private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ExplosionFireAndDebris <>4__this;

			[Token(Token = "0x4000D08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <multiplier>5__2;

			[Token(Token = "0x17000282")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001103")]
				[Address(RVA = "0x1455840", Offset = "0x1455840", VA = "0x1455840", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000283")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001105")]
				[Address(RVA = "0x14558A8", Offset = "0x14558A8", VA = "0x14558A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001100")]
			[Address(RVA = "0x1455098", Offset = "0x1455098", VA = "0x1455098")]
			[DebuggerHidden]
			public <Start>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001101")]
			[Address(RVA = "0x1455250", Offset = "0x1455250", VA = "0x1455250", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001102")]
			[Address(RVA = "0x1455254", Offset = "0x1455254", VA = "0x1455254", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001104")]
			[Address(RVA = "0x1455848", Offset = "0x1455848", VA = "0x1455848", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40000C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform[] debrisPrefabs;

		[Token(Token = "0x40000C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform firePrefab;

		[Token(Token = "0x40000C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int numDebrisPieces;

		[Token(Token = "0x40000C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int numFires;

		[Token(Token = "0x60001D8")]
		[Address(RVA = "0x1455028", Offset = "0x1455028", VA = "0x1455028")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3A260", Offset = "0xB3A260")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x60001D9")]
		[Address(RVA = "0x14550C4", Offset = "0x14550C4", VA = "0x14550C4")]
		private void AddFire(Transform t, Vector3 pos, Vector3 normal)
		{
		}

		[Token(Token = "0x60001DA")]
		[Address(RVA = "0x1455248", Offset = "0x1455248", VA = "0x1455248")]
		public ExplosionFireAndDebris()
		{
		}
	}
	[Token(Token = "0x200002E")]
	public class ExplosionPhysicsForce : MonoBehaviour
	{
		[Token(Token = "0x2000269")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30D70", Offset = "0xB30D70")]
		private sealed class <Start>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ExplosionPhysicsForce <>4__this;

			[Token(Token = "0x17000284")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001109")]
				[Address(RVA = "0x1455C64", Offset = "0x1455C64", VA = "0x1455C64", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000285")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600110B")]
				[Address(RVA = "0x1455CCC", Offset = "0x1455CCC", VA = "0x1455CCC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001106")]
			[Address(RVA = "0x1455920", Offset = "0x1455920", VA = "0x1455920")]
			[DebuggerHidden]
			public <Start>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6001107")]
			[Address(RVA = "0x145595C", Offset = "0x145595C", VA = "0x145595C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001108")]
			[Address(RVA = "0x1455960", Offset = "0x1455960", VA = "0x1455960", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600110A")]
			[Address(RVA = "0x1455C6C", Offset = "0x1455C6C", VA = "0x1455C6C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40000C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float explosionForce;

		[Token(Token = "0x60001DB")]
		[Address(RVA = "0x14558B0", Offset = "0x14558B0", VA = "0x14558B0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3A2C4", Offset = "0xB3A2C4")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x60001DC")]
		[Address(RVA = "0x145594C", Offset = "0x145594C", VA = "0x145594C")]
		public ExplosionPhysicsForce()
		{
		}
	}
	[Token(Token = "0x200002F")]
	public class Explosive : MonoBehaviour
	{
		[Token(Token = "0x200026A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30D80", Offset = "0xB30D80")]
		private sealed class <OnCollisionEnter>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Explosive <>4__this;

			[Token(Token = "0x4000D0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Collision col;

			[Token(Token = "0x17000286")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600110F")]
				[Address(RVA = "0x14560E8", Offset = "0x14560E8", VA = "0x14560E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000287")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001111")]
				[Address(RVA = "0x1456150", Offset = "0x1456150", VA = "0x1456150", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600110C")]
			[Address(RVA = "0x1455DA8", Offset = "0x1455DA8", VA = "0x1455DA8")]
			[DebuggerHidden]
			public <OnCollisionEnter>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x600110D")]
			[Address(RVA = "0x1455E00", Offset = "0x1455E00", VA = "0x1455E00", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600110E")]
			[Address(RVA = "0x1455E04", Offset = "0x1455E04", VA = "0x1455E04", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001110")]
			[Address(RVA = "0x14560F0", Offset = "0x14560F0", VA = "0x14560F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40000C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform explosionPrefab;

		[Token(Token = "0x40000CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float detonationImpactVelocity;

		[Token(Token = "0x40000CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sizeMultiplier;

		[Token(Token = "0x40000CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool reset;

		[Token(Token = "0x40000CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float resetTimeDelay;

		[Token(Token = "0x40000CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool m_Exploded;

		[Token(Token = "0x40000CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ObjectResetter m_ObjectResetter;

		[Token(Token = "0x60001DD")]
		[Address(RVA = "0x1455CD4", Offset = "0x1455CD4", VA = "0x1455CD4")]
		private void Start()
		{
		}

		[Token(Token = "0x60001DE")]
		[Address(RVA = "0x1455D2C", Offset = "0x1455D2C", VA = "0x1455D2C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3A328", Offset = "0xB3A328")]
		private IEnumerator OnCollisionEnter(Collision col)
		{
			return null;
		}

		[Token(Token = "0x60001DF")]
		[Address(RVA = "0x1455DD4", Offset = "0x1455DD4", VA = "0x1455DD4")]
		public void Reset()
		{
		}

		[Token(Token = "0x60001E0")]
		[Address(RVA = "0x1455DDC", Offset = "0x1455DDC", VA = "0x1455DDC")]
		public Explosive()
		{
		}
	}
	[Token(Token = "0x2000030")]
	public class ExtinguishableParticleSystem : MonoBehaviour
	{
		[Token(Token = "0x40000D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float multiplier;

		[Token(Token = "0x40000D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem[] m_Systems;

		[Token(Token = "0x60001E1")]
		[Address(RVA = "0x1456158", Offset = "0x1456158", VA = "0x1456158")]
		private void Start()
		{
		}

		[Token(Token = "0x60001E2")]
		[Address(RVA = "0x14561B0", Offset = "0x14561B0", VA = "0x14561B0")]
		public void Extinguish()
		{
		}

		[Token(Token = "0x60001E3")]
		[Address(RVA = "0x145623C", Offset = "0x145623C", VA = "0x145623C")]
		public ExtinguishableParticleSystem()
		{
		}
	}
	[Token(Token = "0x2000031")]
	public class FireLight : MonoBehaviour
	{
		[Token(Token = "0x40000D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_Rnd;

		[Token(Token = "0x40000D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool m_Burning;

		[Token(Token = "0x40000D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Light m_Light;

		[Token(Token = "0x60001E4")]
		[Address(RVA = "0x145624C", Offset = "0x145624C", VA = "0x145624C")]
		private void Start()
		{
		}

		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x14562BC", Offset = "0x14562BC", VA = "0x14562BC")]
		private void Update()
		{
		}

		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x145651C", Offset = "0x145651C", VA = "0x145651C")]
		public void Extinguish()
		{
		}

		[Token(Token = "0x60001E7")]
		[Address(RVA = "0x1456544", Offset = "0x1456544", VA = "0x1456544")]
		public FireLight()
		{
		}
	}
	[Token(Token = "0x2000032")]
	public class Hose : MonoBehaviour
	{
		[Token(Token = "0x40000D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxPower;

		[Token(Token = "0x40000D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float minPower;

		[Token(Token = "0x40000D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float changeSpeed;

		[Token(Token = "0x40000D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSystem[] hoseWaterSystems;

		[Token(Token = "0x40000D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Renderer systemRenderer;

		[Token(Token = "0x40000DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float m_Power;

		[Token(Token = "0x60001E8")]
		[Address(RVA = "0x1456554", Offset = "0x1456554", VA = "0x1456554")]
		private void Update()
		{
		}

		[Token(Token = "0x60001E9")]
		[Address(RVA = "0x1456718", Offset = "0x1456718", VA = "0x1456718")]
		public Hose()
		{
		}
	}
	[Token(Token = "0x2000033")]
	public class ParticleSystemMultiplier : MonoBehaviour
	{
		[Token(Token = "0x40000DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float multiplier;

		[Token(Token = "0x60001EA")]
		[Address(RVA = "0x1456734", Offset = "0x1456734", VA = "0x1456734")]
		private void Start()
		{
		}

		[Token(Token = "0x60001EB")]
		[Address(RVA = "0x1456894", Offset = "0x1456894", VA = "0x1456894")]
		public ParticleSystemMultiplier()
		{
		}
	}
	[Token(Token = "0x2000034")]
	public class SmokeParticles : MonoBehaviour
	{
		[Token(Token = "0x40000DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip[] extinguishSounds;

		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x14568A4", Offset = "0x14568A4", VA = "0x14568A4")]
		private void Start()
		{
		}

		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x1456964", Offset = "0x1456964", VA = "0x1456964")]
		public SmokeParticles()
		{
		}
	}
	[Token(Token = "0x2000035")]
	public class WaterHoseParticles : MonoBehaviour
	{
		[Token(Token = "0x40000DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float lastSoundTime;

		[Token(Token = "0x40000DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float force;

		[Token(Token = "0x40000DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<ParticleCollisionEvent> m_CollisionEvents;

		[Token(Token = "0x40000E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ParticleSystem m_ParticleSystem;

		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x145696C", Offset = "0x145696C", VA = "0x145696C")]
		private void Start()
		{
		}

		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x14569C4", Offset = "0x14569C4", VA = "0x14569C4")]
		private void OnParticleCollision(GameObject other)
		{
		}

		[Token(Token = "0x60001F0")]
		[Address(RVA = "0x1456C54", Offset = "0x1456C54", VA = "0x1456C54")]
		public WaterHoseParticles()
		{
		}
	}
}
namespace UnityStandardAssets.Water
{
	[Token(Token = "0x2000036")]
	[ExecuteInEditMode]
	public class WaterBasic : MonoBehaviour
	{
		[Token(Token = "0x60001F1")]
		[Address(RVA = "0xD64E68", Offset = "0xD64E68", VA = "0xD64E68")]
		private void Update()
		{
		}

		[Token(Token = "0x60001F2")]
		[Address(RVA = "0xD650AC", Offset = "0xD650AC", VA = "0xD650AC")]
		public WaterBasic()
		{
		}
	}
	[Token(Token = "0x2000037")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2C9C4", Offset = "0xB2C9C4")]
	public class Displace : MonoBehaviour
	{
		[Token(Token = "0x60001F3")]
		[Address(RVA = "0xD60C98", Offset = "0xD60C98", VA = "0xD60C98")]
		public void Awake()
		{
		}

		[Token(Token = "0x60001F4")]
		[Address(RVA = "0xD60CBC", Offset = "0xD60CBC", VA = "0xD60CBC")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60001F5")]
		[Address(RVA = "0xD60D1C", Offset = "0xD60D1C", VA = "0xD60D1C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60001F6")]
		[Address(RVA = "0xD60D7C", Offset = "0xD60D7C", VA = "0xD60D7C")]
		public Displace()
		{
		}
	}
	[Token(Token = "0x2000038")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2CA38", Offset = "0xB2CA38")]
	public class GerstnerDisplace : Displace
	{
		[Token(Token = "0x60001F7")]
		[Address(RVA = "0xD60D84", Offset = "0xD60D84", VA = "0xD60D84")]
		public GerstnerDisplace()
		{
		}
	}
	[Token(Token = "0x2000039")]
	public class MeshContainer
	{
		[Token(Token = "0x40000E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh mesh;

		[Token(Token = "0x40000E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] vertices;

		[Token(Token = "0x40000E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3[] normals;

		[Token(Token = "0x60001F8")]
		[Address(RVA = "0xD60D8C", Offset = "0xD60D8C", VA = "0xD60D8C")]
		public MeshContainer(Mesh m)
		{
		}

		[Token(Token = "0x60001F9")]
		[Address(RVA = "0xD60DE0", Offset = "0xD60DE0", VA = "0xD60DE0")]
		public void Update()
		{
		}
	}
	[Token(Token = "0x200003A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2CAAC", Offset = "0xB2CAAC")]
	public class PlanarReflection : MonoBehaviour
	{
		[Token(Token = "0x40000E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask reflectionMask;

		[Token(Token = "0x40000E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool reflectSkybox;

		[Token(Token = "0x40000E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color clearColor;

		[Token(Token = "0x40000E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string reflectionSampler;

		[Token(Token = "0x40000E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float clipPlaneOffset;

		[Token(Token = "0x40000E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 m_Oldpos;

		[Token(Token = "0x40000EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera m_ReflectionCamera;

		[Token(Token = "0x40000EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_SharedMaterial;

		[Token(Token = "0x40000EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Camera, bool> m_HelperCameras;

		[Token(Token = "0x60001FA")]
		[Address(RVA = "0xD60E24", Offset = "0xD60E24", VA = "0xD60E24")]
		public void Start()
		{
		}

		[Token(Token = "0x60001FB")]
		[Address(RVA = "0xD60F14", Offset = "0xD60F14", VA = "0xD60F14")]
		private Camera CreateReflectionCameraFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x60001FC")]
		[Address(RVA = "0xD6121C", Offset = "0xD6121C", VA = "0xD6121C")]
		private void SetStandardCameraParameter(Camera cam, LayerMask mask)
		{
		}

		[Token(Token = "0x60001FD")]
		[Address(RVA = "0xD612D0", Offset = "0xD612D0", VA = "0xD612D0")]
		private RenderTexture CreateTextureFor(Camera cam)
		{
			return null;
		}

		[Token(Token = "0x60001FE")]
		[Address(RVA = "0xD613D8", Offset = "0xD613D8", VA = "0xD613D8")]
		public void RenderHelpCameras(Camera currentCam)
		{
		}

		[Token(Token = "0x60001FF")]
		[Address(RVA = "0xD61CA0", Offset = "0xD61CA0", VA = "0xD61CA0")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6000200")]
		[Address(RVA = "0xD61D00", Offset = "0xD61D00", VA = "0xD61D00")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x6000201")]
		[Address(RVA = "0xD61DF8", Offset = "0xD61DF8", VA = "0xD61DF8")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000202")]
		[Address(RVA = "0xD61E58", Offset = "0xD61E58", VA = "0xD61E58")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000203")]
		[Address(RVA = "0xD61540", Offset = "0xD61540", VA = "0xD61540")]
		private void RenderReflectionFor(Camera cam, Camera reflectCamera)
		{
		}

		[Token(Token = "0x6000204")]
		[Address(RVA = "0xD61EB8", Offset = "0xD61EB8", VA = "0xD61EB8")]
		private void SaneCameraSettings(Camera helperCam)
		{
		}

		[Token(Token = "0x6000205")]
		[Address(RVA = "0xD623B8", Offset = "0xD623B8", VA = "0xD623B8")]
		private static Matrix4x4 CalculateObliqueMatrix(Matrix4x4 projection, Vector4 clipPlane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000206")]
		[Address(RVA = "0xD61F1C", Offset = "0xD61F1C", VA = "0xD61F1C")]
		private static Matrix4x4 CalculateReflectionMatrix(Matrix4x4 reflectionMat, Vector4 plane)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000207")]
		[Address(RVA = "0xD625F0", Offset = "0xD625F0", VA = "0xD625F0")]
		private static float Sgn(float a)
		{
			return default(float);
		}

		[Token(Token = "0x6000208")]
		[Address(RVA = "0xD621D4", Offset = "0xD621D4", VA = "0xD621D4")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000209")]
		[Address(RVA = "0xD62610", Offset = "0xD62610", VA = "0xD62610")]
		public PlanarReflection()
		{
		}
	}
	[Token(Token = "0x200003B")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2CB20", Offset = "0xB2CB20")]
	[ExecuteInEditMode]
	public class SpecularLighting : MonoBehaviour
	{
		[Token(Token = "0x40000ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform specularLight;

		[Token(Token = "0x40000EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private WaterBase m_WaterBase;

		[Token(Token = "0x600020A")]
		[Address(RVA = "0xD62684", Offset = "0xD62684", VA = "0xD62684")]
		public void Start()
		{
		}

		[Token(Token = "0x600020B")]
		[Address(RVA = "0xD62770", Offset = "0xD62770", VA = "0xD62770")]
		public void Update()
		{
		}

		[Token(Token = "0x600020C")]
		[Address(RVA = "0xD62998", Offset = "0xD62998", VA = "0xD62998")]
		public SpecularLighting()
		{
		}
	}
	[Token(Token = "0x200003C")]
	[ExecuteInEditMode]
	public class Water : MonoBehaviour
	{
		[Token(Token = "0x200026B")]
		public enum WaterMode
		{
			[Token(Token = "0x4000D11")]
			Simple,
			[Token(Token = "0x4000D12")]
			Reflective,
			[Token(Token = "0x4000D13")]
			Refractive
		}

		[Token(Token = "0x40000EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaterMode waterMode;

		[Token(Token = "0x40000F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool disablePixelLights;

		[Token(Token = "0x40000F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int textureSize;

		[Token(Token = "0x40000F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float clipPlaneOffset;

		[Token(Token = "0x40000F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LayerMask reflectLayers;

		[Token(Token = "0x40000F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask refractLayers;

		[Token(Token = "0x40000F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<Camera, Camera> m_ReflectionCameras;

		[Token(Token = "0x40000F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<Camera, Camera> m_RefractionCameras;

		[Token(Token = "0x40000F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture m_ReflectionTexture;

		[Token(Token = "0x40000F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTexture m_RefractionTexture;

		[Token(Token = "0x40000F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WaterMode m_HardwareWaterSupport;

		[Token(Token = "0x40000FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_OldReflectionTextureSize;

		[Token(Token = "0x40000FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_OldRefractionTextureSize;

		[Token(Token = "0x40000FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool s_InsideWater;

		[Token(Token = "0x600020D")]
		[Address(RVA = "0xD629A0", Offset = "0xD629A0", VA = "0xD629A0")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x600020E")]
		[Address(RVA = "0xD64544", Offset = "0xD64544", VA = "0xD64544")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600020F")]
		[Address(RVA = "0xD64830", Offset = "0xD64830", VA = "0xD64830")]
		private void Update()
		{
		}

		[Token(Token = "0x6000210")]
		[Address(RVA = "0xD63E60", Offset = "0xD63E60", VA = "0xD63E60")]
		private void UpdateCameraModes(Camera src, Camera dest)
		{
		}

		[Token(Token = "0x6000211")]
		[Address(RVA = "0xD63458", Offset = "0xD63458", VA = "0xD63458")]
		private void CreateWaterObjects(Camera currentCamera, out Camera reflectionCamera, out Camera refractionCamera)
		{
		}

		[Token(Token = "0x6000212")]
		[Address(RVA = "0xD63444", Offset = "0xD63444", VA = "0xD63444")]
		private WaterMode GetWaterMode()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x6000213")]
		[Address(RVA = "0xD632FC", Offset = "0xD632FC", VA = "0xD632FC")]
		private WaterMode FindHardwareWaterSupport()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x6000214")]
		[Address(RVA = "0xD64360", Offset = "0xD64360", VA = "0xD64360")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000215")]
		[Address(RVA = "0xD640BC", Offset = "0xD640BC", VA = "0xD640BC")]
		private static void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
		{
		}

		[Token(Token = "0x6000216")]
		[Address(RVA = "0xD64ABC", Offset = "0xD64ABC", VA = "0xD64ABC")]
		public Water()
		{
		}
	}
	[Token(Token = "0x200003D")]
	public enum WaterQuality
	{
		[Token(Token = "0x40000FE")]
		High = 2,
		[Token(Token = "0x40000FF")]
		Medium = 1,
		[Token(Token = "0x4000100")]
		Low = 0
	}
	[Token(Token = "0x200003E")]
	[ExecuteInEditMode]
	public class WaterBase : MonoBehaviour
	{
		[Token(Token = "0x4000101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material sharedMaterial;

		[Token(Token = "0x4000102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaterQuality waterQuality;

		[Token(Token = "0x4000103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool edgeBlend;

		[Token(Token = "0x6000217")]
		[Address(RVA = "0xD64B98", Offset = "0xD64B98", VA = "0xD64B98")]
		public void UpdateShader()
		{
		}

		[Token(Token = "0x6000218")]
		[Address(RVA = "0xD64D18", Offset = "0xD64D18", VA = "0xD64D18")]
		public void WaterTileBeingRendered(Transform tr, Camera currentCam)
		{
		}

		[Token(Token = "0x6000219")]
		[Address(RVA = "0xD64DCC", Offset = "0xD64DCC", VA = "0xD64DCC")]
		public void Update()
		{
		}

		[Token(Token = "0x600021A")]
		[Address(RVA = "0xD64E50", Offset = "0xD64E50", VA = "0xD64E50")]
		public WaterBase()
		{
		}
	}
	[Token(Token = "0x200003F")]
	[ExecuteInEditMode]
	public class WaterTile : MonoBehaviour
	{
		[Token(Token = "0x4000104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlanarReflection reflection;

		[Token(Token = "0x4000105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaterBase waterBase;

		[Token(Token = "0x600021B")]
		[Address(RVA = "0xD650B4", Offset = "0xD650B4", VA = "0xD650B4")]
		public void Start()
		{
		}

		[Token(Token = "0x600021C")]
		[Address(RVA = "0xD650B8", Offset = "0xD650B8", VA = "0xD650B8")]
		private void AcquireComponents()
		{
		}

		[Token(Token = "0x600021D")]
		[Address(RVA = "0xD6525C", Offset = "0xD6525C", VA = "0xD6525C")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x600021E")]
		[Address(RVA = "0xD65364", Offset = "0xD65364", VA = "0xD65364")]
		public WaterTile()
		{
		}
	}
}
namespace UnityStandardAssets.ImageEffects
{
	[Token(Token = "0x2000040")]
	public enum AAMode
	{
		[Token(Token = "0x4000107")]
		FXAA2,
		[Token(Token = "0x4000108")]
		FXAA3Console,
		[Token(Token = "0x4000109")]
		FXAA1PresetA,
		[Token(Token = "0x400010A")]
		FXAA1PresetB,
		[Token(Token = "0x400010B")]
		NFAA,
		[Token(Token = "0x400010C")]
		SSAA,
		[Token(Token = "0x400010D")]
		DLAA
	}
	[Token(Token = "0x2000041")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2CBC4", Offset = "0xB2CBC4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2CBC4", Offset = "0xB2CBC4")]
	public class Antialiasing : PostEffectsBase
	{
		[Token(Token = "0x400010E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AAMode mode;

		[Token(Token = "0x400010F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool showGeneratedNormals;

		[Token(Token = "0x4000110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float offsetScale;

		[Token(Token = "0x4000111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float blurRadius;

		[Token(Token = "0x4000112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float edgeThresholdMin;

		[Token(Token = "0x4000113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float edgeThreshold;

		[Token(Token = "0x4000114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float edgeSharpness;

		[Token(Token = "0x4000115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool dlaaSharp;

		[Token(Token = "0x4000116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader ssaaShader;

		[Token(Token = "0x4000117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material ssaa;

		[Token(Token = "0x4000118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader dlaaShader;

		[Token(Token = "0x4000119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material dlaa;

		[Token(Token = "0x400011A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader nfaaShader;

		[Token(Token = "0x400011B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material nfaa;

		[Token(Token = "0x400011C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader shaderFXAAPreset2;

		[Token(Token = "0x400011D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material materialFXAAPreset2;

		[Token(Token = "0x400011E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Shader shaderFXAAPreset3;

		[Token(Token = "0x400011F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Material materialFXAAPreset3;

		[Token(Token = "0x4000120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Shader shaderFXAAII;

		[Token(Token = "0x4000121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Material materialFXAAII;

		[Token(Token = "0x4000122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Shader shaderFXAAIII;

		[Token(Token = "0x4000123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Material materialFXAAIII;

		[Token(Token = "0x600021F")]
		[Address(RVA = "0x1456CCC", Offset = "0x1456CCC", VA = "0x1456CCC")]
		public Material CurrentAAMaterial()
		{
			return null;
		}

		[Token(Token = "0x6000220")]
		[Address(RVA = "0x1456D30", Offset = "0x1456D30", VA = "0x1456D30", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000221")]
		[Address(RVA = "0x14571C4", Offset = "0x14571C4", VA = "0x14571C4")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000222")]
		[Address(RVA = "0x145770C", Offset = "0x145770C", VA = "0x145770C")]
		public Antialiasing()
		{
		}
	}
	[Token(Token = "0x2000042")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2CC5C", Offset = "0xB2CC5C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2CC5C", Offset = "0xB2CC5C")]
	public class BloomOptimized : PostEffectsBase
	{
		[Token(Token = "0x200026C")]
		public enum Resolution
		{
			[Token(Token = "0x4000D15")]
			Low,
			[Token(Token = "0x4000D16")]
			High
		}

		[Token(Token = "0x200026D")]
		public enum BlurType
		{
			[Token(Token = "0x4000D18")]
			Standard,
			[Token(Token = "0x4000D19")]
			Sgx
		}

		[Token(Token = "0x4000124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31170", Offset = "0xB31170")]
		public float threshold;

		[Token(Token = "0x4000125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31188", Offset = "0xB31188")]
		public float intensity;

		[Token(Token = "0x4000126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB311A0", Offset = "0xB311A0")]
		public float blurSize;

		[Token(Token = "0x4000127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Resolution resolution;

		[Token(Token = "0x4000128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB311B8", Offset = "0xB311B8")]
		public int blurIterations;

		[Token(Token = "0x4000129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public BlurType blurType;

		[Token(Token = "0x400012A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader fastBloomShader;

		[Token(Token = "0x400012B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material fastBloomMaterial;

		[Token(Token = "0x6000223")]
		[Address(RVA = "0x14577A8", Offset = "0x14577A8", VA = "0x14577A8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000224")]
		[Address(RVA = "0x1457B7C", Offset = "0x1457B7C", VA = "0x1457B7C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000225")]
		[Address(RVA = "0x1457C2C", Offset = "0x1457C2C", VA = "0x1457C2C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000226")]
		[Address(RVA = "0x1457FF8", Offset = "0x1457FF8", VA = "0x1457FF8")]
		public BloomOptimized()
		{
		}
	}
	[Token(Token = "0x2000043")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2CCF4", Offset = "0xB2CCF4")]
	public class Blur : MonoBehaviour
	{
		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB311D0", Offset = "0xB311D0")]
		public int iterations;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB311E8", Offset = "0xB311E8")]
		public float blurSpread;

		[Token(Token = "0x400012E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader blurShader;

		[Token(Token = "0x400012F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material m_Material;

		[Token(Token = "0x17000011")]
		protected Material material
		{
			[Token(Token = "0x6000227")]
			[Address(RVA = "0x1458018", Offset = "0x1458018", VA = "0x1458018")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000228")]
		[Address(RVA = "0x1458150", Offset = "0x1458150", VA = "0x1458150")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0x145824C", Offset = "0x145824C", VA = "0x145824C")]
		protected void Start()
		{
		}

		[Token(Token = "0x600022A")]
		[Address(RVA = "0x145830C", Offset = "0x145830C", VA = "0x145830C")]
		public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
		{
		}

		[Token(Token = "0x600022B")]
		[Address(RVA = "0x14584B0", Offset = "0x14584B0", VA = "0x14584B0")]
		private void DownSample4x(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x600022C")]
		[Address(RVA = "0x1458628", Offset = "0x1458628", VA = "0x1458628")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600022D")]
		[Address(RVA = "0x1458794", Offset = "0x1458794", VA = "0x1458794")]
		public Blur()
		{
		}
	}
	[Token(Token = "0x2000044")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2CD40", Offset = "0xB2CD40")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2CD40", Offset = "0xB2CD40")]
	public class BlurOptimized : PostEffectsBase
	{
		[Token(Token = "0x200026E")]
		public enum BlurType
		{
			[Token(Token = "0x4000D1B")]
			StandardGauss,
			[Token(Token = "0x4000D1C")]
			SgxGauss
		}

		[Token(Token = "0x4000130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31200", Offset = "0xB31200")]
		public int downsample;

		[Token(Token = "0x4000131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31218", Offset = "0xB31218")]
		public float blurSize;

		[Token(Token = "0x4000132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31230", Offset = "0xB31230")]
		public int blurIterations;

		[Token(Token = "0x4000133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public BlurType blurType;

		[Token(Token = "0x4000134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader blurShader;

		[Token(Token = "0x4000135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material blurMaterial;

		[Token(Token = "0x600022F")]
		[Address(RVA = "0x14587B0", Offset = "0x14587B0", VA = "0x14587B0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000230")]
		[Address(RVA = "0x1458808", Offset = "0x1458808", VA = "0x1458808")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000231")]
		[Address(RVA = "0x14588B8", Offset = "0x14588B8", VA = "0x14588B8")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000232")]
		[Address(RVA = "0x1458C5C", Offset = "0x1458C5C", VA = "0x1458C5C")]
		public BlurOptimized()
		{
		}
	}
	[Token(Token = "0x2000045")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2CDD8", Offset = "0xB2CDD8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2CDD8", Offset = "0xB2CDD8")]
	public class CameraMotionBlur : PostEffectsBase
	{
		[Token(Token = "0x200026F")]
		public enum MotionBlurFilter
		{
			[Token(Token = "0x4000D1E")]
			CameraMotion,
			[Token(Token = "0x4000D1F")]
			LocalBlur,
			[Token(Token = "0x4000D20")]
			Reconstruction,
			[Token(Token = "0x4000D21")]
			ReconstructionDX11,
			[Token(Token = "0x4000D22")]
			ReconstructionDisc
		}

		[Token(Token = "0x4000136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float MAX_RADIUS;

		[Token(Token = "0x4000137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MotionBlurFilter filterType;

		[Token(Token = "0x4000138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool preview;

		[Token(Token = "0x4000139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 previewScale;

		[Token(Token = "0x400013A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float movementScale;

		[Token(Token = "0x400013B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float rotationScale;

		[Token(Token = "0x400013C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float maxVelocity;

		[Token(Token = "0x400013D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float minVelocity;

		[Token(Token = "0x400013E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float velocityScale;

		[Token(Token = "0x400013F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float softZDistance;

		[Token(Token = "0x4000140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int velocityDownsample;

		[Token(Token = "0x4000141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LayerMask excludeLayers;

		[Token(Token = "0x4000142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private GameObject tmpCam;

		[Token(Token = "0x4000143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader shader;

		[Token(Token = "0x4000144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader dx11MotionBlurShader;

		[Token(Token = "0x4000145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader replacementClear;

		[Token(Token = "0x4000146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material motionBlurMaterial;

		[Token(Token = "0x4000147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material dx11MotionBlurMaterial;

		[Token(Token = "0x4000148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Texture2D noiseTexture;

		[Token(Token = "0x4000149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float jitter;

		[Token(Token = "0x400014A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool showVelocity;

		[Token(Token = "0x400014B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float showVelocityScale;

		[Token(Token = "0x400014C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Matrix4x4 currentViewProjMat;

		[Token(Token = "0x400014D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Matrix4x4[] currentStereoViewProjMat;

		[Token(Token = "0x400014E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Matrix4x4 prevViewProjMat;

		[Token(Token = "0x400014F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Matrix4x4[] prevStereoViewProjMat;

		[Token(Token = "0x4000150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private int prevFrameCount;

		[Token(Token = "0x4000151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private bool wasActive;

		[Token(Token = "0x4000152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3 prevFrameForward;

		[Token(Token = "0x4000153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private Vector3 prevFrameUp;

		[Token(Token = "0x4000154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Vector3 prevFramePos;

		[Token(Token = "0x4000155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Camera _camera;

		[Token(Token = "0x6000233")]
		[Address(RVA = "0x1458C74", Offset = "0x1458C74", VA = "0x1458C74")]
		private void CalculateViewProjection()
		{
		}

		[Token(Token = "0x6000234")]
		[Address(RVA = "0x1458F10", Offset = "0x1458F10", VA = "0x1458F10")]
		private new void Start()
		{
		}

		[Token(Token = "0x6000235")]
		[Address(RVA = "0x145916C", Offset = "0x145916C", VA = "0x145916C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000236")]
		[Address(RVA = "0x145922C", Offset = "0x145922C", VA = "0x145922C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000237")]
		[Address(RVA = "0x1459390", Offset = "0x1459390", VA = "0x1459390", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000238")]
		[Address(RVA = "0x1459474", Offset = "0x1459474", VA = "0x1459474")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000239")]
		[Address(RVA = "0x1459010", Offset = "0x1459010", VA = "0x1459010")]
		private void Remember()
		{
		}

		[Token(Token = "0x600023A")]
		[Address(RVA = "0x145AE1C", Offset = "0x145AE1C", VA = "0x145AE1C")]
		private Camera GetTmpCam()
		{
			return null;
		}

		[Token(Token = "0x600023B")]
		[Address(RVA = "0x145AD30", Offset = "0x145AD30", VA = "0x145AD30")]
		private void StartFrame()
		{
		}

		[Token(Token = "0x600023C")]
		[Address(RVA = "0x145AE0C", Offset = "0x145AE0C", VA = "0x145AE0C")]
		private static int divRoundUp(int x, int d)
		{
			return default(int);
		}

		[Token(Token = "0x600023D")]
		[Address(RVA = "0x145B158", Offset = "0x145B158", VA = "0x145B158")]
		public CameraMotionBlur()
		{
		}
	}
	[Token(Token = "0x2000046")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2CE70", Offset = "0xB2CE70")]
	public class ColorCorrectionCurves : PostEffectsBase
	{
		[Token(Token = "0x2000270")]
		public enum ColorCorrectionMode
		{
			[Token(Token = "0x4000D24")]
			Simple,
			[Token(Token = "0x4000D25")]
			Advanced
		}

		[Token(Token = "0x4000156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve redChannel;

		[Token(Token = "0x4000157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve greenChannel;

		[Token(Token = "0x4000158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve blueChannel;

		[Token(Token = "0x4000159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool useDepthCorrection;

		[Token(Token = "0x400015A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve zCurve;

		[Token(Token = "0x400015B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve depthRedChannel;

		[Token(Token = "0x400015C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve depthGreenChannel;

		[Token(Token = "0x400015D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationCurve depthBlueChannel;

		[Token(Token = "0x400015E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material ccMaterial;

		[Token(Token = "0x400015F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material ccDepthMaterial;

		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material selectiveCcMaterial;

		[Token(Token = "0x4000161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture2D rgbChannelTex;

		[Token(Token = "0x4000162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Texture2D rgbDepthChannelTex;

		[Token(Token = "0x4000163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Texture2D zCurveTex;

		[Token(Token = "0x4000164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float saturation;

		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool selectiveCc;

		[Token(Token = "0x4000166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color selectiveFromColor;

		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Color selectiveToColor;

		[Token(Token = "0x4000168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public ColorCorrectionMode mode;

		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public bool updateTextures;

		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader colorCorrectionCurvesShader;

		[Token(Token = "0x400016B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader simpleColorCorrectionCurvesShader;

		[Token(Token = "0x400016C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Shader colorCorrectionSelectiveShader;

		[Token(Token = "0x400016D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool updateTexturesOnStartup;

		[Token(Token = "0x600023F")]
		[Address(RVA = "0x145B2A4", Offset = "0x145B2A4", VA = "0x145B2A4")]
		private new void Start()
		{
		}

		[Token(Token = "0x6000240")]
		[Address(RVA = "0x145B2E0", Offset = "0x145B2E0", VA = "0x145B2E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000241")]
		[Address(RVA = "0x145B2E4", Offset = "0x145B2E4", VA = "0x145B2E4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000242")]
		[Address(RVA = "0x145B544", Offset = "0x145B544", VA = "0x145B544")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x6000243")]
		[Address(RVA = "0x145B938", Offset = "0x145B938", VA = "0x145B938")]
		private void UpdateTextures()
		{
		}

		[Token(Token = "0x6000244")]
		[Address(RVA = "0x145B93C", Offset = "0x145B93C", VA = "0x145B93C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000245")]
		[Address(RVA = "0x145BC38", Offset = "0x145BC38", VA = "0x145BC38")]
		public ColorCorrectionCurves()
		{
		}
	}
	[Token(Token = "0x2000047")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2CEBC", Offset = "0xB2CEBC")]
	public class ColorCorrectionLookup : PostEffectsBase
	{
		[Token(Token = "0x400016E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader shader;

		[Token(Token = "0x400016F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material material;

		[Token(Token = "0x4000170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture3D converted3DLut;

		[Token(Token = "0x4000171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string basedOnTempTex;

		[Token(Token = "0x6000246")]
		[Address(RVA = "0x145C268", Offset = "0x145C268", VA = "0x145C268", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000247")]
		[Address(RVA = "0x145C2BC", Offset = "0x145C2BC", VA = "0x145C2BC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000248")]
		[Address(RVA = "0x145C364", Offset = "0x145C364", VA = "0x145C364")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000249")]
		[Address(RVA = "0x145C40C", Offset = "0x145C40C", VA = "0x145C40C")]
		public void SetIdentityLut()
		{
		}

		[Token(Token = "0x600024A")]
		[Address(RVA = "0x145C608", Offset = "0x145C608", VA = "0x145C608")]
		public bool ValidDimensions(Texture2D tex2d)
		{
			return default(bool);
		}

		[Token(Token = "0x600024B")]
		[Address(RVA = "0x145C6FC", Offset = "0x145C6FC", VA = "0x145C6FC")]
		public void Convert(Texture2D temp2DTex, string path)
		{
		}

		[Token(Token = "0x600024C")]
		[Address(RVA = "0x145CA08", Offset = "0x145CA08", VA = "0x145CA08")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600024D")]
		[Address(RVA = "0x145CBF4", Offset = "0x145CBF4", VA = "0x145CBF4")]
		public ColorCorrectionLookup()
		{
		}
	}
	[Token(Token = "0x2000048")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2CF08", Offset = "0xB2CF08")]
	public class ColorCorrectionRamp : ImageEffectBase
	{
		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x600024E")]
		[Address(RVA = "0x145CC48", Offset = "0x145CC48", VA = "0x145CC48")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600024F")]
		[Address(RVA = "0x145CDC4", Offset = "0x145CDC4", VA = "0x145CDC4")]
		public ColorCorrectionRamp()
		{
		}
	}
	[Token(Token = "0x2000049")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2CF54", Offset = "0xB2CF54")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2CF54", Offset = "0xB2CF54")]
	public class ContrastEnhance : PostEffectsBase
	{
		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31248", Offset = "0xB31248")]
		public float intensity;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31260", Offset = "0xB31260")]
		public float threshold;

		[Token(Token = "0x4000175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material separableBlurMaterial;

		[Token(Token = "0x4000176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material contrastCompositeMaterial;

		[Token(Token = "0x4000177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB3127C", Offset = "0xB3127C")]
		public float blurSpread;

		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader separableBlurShader;

		[Token(Token = "0x4000179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader contrastCompositeShader;

		[Token(Token = "0x6000250")]
		[Address(RVA = "0x145CDD4", Offset = "0x145CDD4", VA = "0x145CDD4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000251")]
		[Address(RVA = "0x145CE44", Offset = "0x145CE44", VA = "0x145CE44")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000252")]
		[Address(RVA = "0x145D1AC", Offset = "0x145D1AC", VA = "0x145D1AC")]
		public ContrastEnhance()
		{
		}
	}
	[Token(Token = "0x200004A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2CFEC", Offset = "0xB2CFEC")]
	public class ContrastStretch : MonoBehaviour
	{
		[Token(Token = "0x400017A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31294", Offset = "0xB31294")]
		public float adaptationSpeed;

		[Token(Token = "0x400017B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB312B0", Offset = "0xB312B0")]
		public float limitMinimum;

		[Token(Token = "0x400017C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB312C8", Offset = "0xB312C8")]
		public float limitMaximum;

		[Token(Token = "0x400017D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTexture[] adaptRenderTex;

		[Token(Token = "0x400017E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int curAdaptIndex;

		[Token(Token = "0x400017F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader shaderLum;

		[Token(Token = "0x4000180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_materialLum;

		[Token(Token = "0x4000181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderReduce;

		[Token(Token = "0x4000182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_materialReduce;

		[Token(Token = "0x4000183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shaderAdapt;

		[Token(Token = "0x4000184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_materialAdapt;

		[Token(Token = "0x4000185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader shaderApply;

		[Token(Token = "0x4000186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material m_materialApply;

		[Token(Token = "0x17000012")]
		protected Material materialLum
		{
			[Token(Token = "0x6000253")]
			[Address(RVA = "0x145D1C0", Offset = "0x145D1C0", VA = "0x145D1C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000013")]
		protected Material materialReduce
		{
			[Token(Token = "0x6000254")]
			[Address(RVA = "0x145D284", Offset = "0x145D284", VA = "0x145D284")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000014")]
		protected Material materialAdapt
		{
			[Token(Token = "0x6000255")]
			[Address(RVA = "0x145D348", Offset = "0x145D348", VA = "0x145D348")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000015")]
		protected Material materialApply
		{
			[Token(Token = "0x6000256")]
			[Address(RVA = "0x145D40C", Offset = "0x145D40C", VA = "0x145D40C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000257")]
		[Address(RVA = "0x145D4D0", Offset = "0x145D4D0", VA = "0x145D4D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000258")]
		[Address(RVA = "0x145D564", Offset = "0x145D564", VA = "0x145D564")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000259")]
		[Address(RVA = "0x145D6B4", Offset = "0x145D6B4", VA = "0x145D6B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600025A")]
		[Address(RVA = "0x145D8DC", Offset = "0x145D8DC", VA = "0x145D8DC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600025B")]
		[Address(RVA = "0x145DB38", Offset = "0x145DB38", VA = "0x145DB38")]
		private void CalculateAdaptation(Texture curTexture)
		{
		}

		[Token(Token = "0x600025C")]
		[Address(RVA = "0x145DD48", Offset = "0x145DD48", VA = "0x145DD48")]
		public ContrastStretch()
		{
		}
	}
	[Token(Token = "0x200004B")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2D038", Offset = "0xB2D038")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2D038", Offset = "0xB2D038")]
	public class CreaseShading : PostEffectsBase
	{
		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float intensity;

		[Token(Token = "0x4000188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int softness;

		[Token(Token = "0x4000189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float spread;

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader blurShader;

		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material blurMaterial;

		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader depthFetchShader;

		[Token(Token = "0x400018D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material depthFetchMaterial;

		[Token(Token = "0x400018E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader creaseApplyShader;

		[Token(Token = "0x400018F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material creaseApplyMaterial;

		[Token(Token = "0x600025D")]
		[Address(RVA = "0x145DDC0", Offset = "0x145DDC0", VA = "0x145DDC0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600025E")]
		[Address(RVA = "0x145DE38", Offset = "0x145DE38", VA = "0x145DE38")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600025F")]
		[Address(RVA = "0x145E1E0", Offset = "0x145E1E0", VA = "0x145E1E0")]
		public CreaseShading()
		{
		}
	}
	[Token(Token = "0x200004C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2D0D0", Offset = "0xB2D0D0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2D0D0", Offset = "0xB2D0D0")]
	public class DepthOfField : PostEffectsBase
	{
		[Token(Token = "0x2000271")]
		public enum BlurType
		{
			[Token(Token = "0x4000D27")]
			DiscBlur,
			[Token(Token = "0x4000D28")]
			DX11
		}

		[Token(Token = "0x2000272")]
		public enum BlurSampleCount
		{
			[Token(Token = "0x4000D2A")]
			Low,
			[Token(Token = "0x4000D2B")]
			Medium,
			[Token(Token = "0x4000D2C")]
			High
		}

		[Token(Token = "0x4000190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool visualizeFocus;

		[Token(Token = "0x4000191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float focalLength;

		[Token(Token = "0x4000192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float focalSize;

		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float aperture;

		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform focalTransform;

		[Token(Token = "0x4000195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float maxBlurSize;

		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool highResolution;

		[Token(Token = "0x4000197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BlurType blurType;

		[Token(Token = "0x4000198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public BlurSampleCount blurSampleCount;

		[Token(Token = "0x4000199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool nearBlur;

		[Token(Token = "0x400019A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float foregroundOverlap;

		[Token(Token = "0x400019B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader dofHdrShader;

		[Token(Token = "0x400019C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material dofHdrMaterial;

		[Token(Token = "0x400019D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader dx11BokehShader;

		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material dx11bokehMaterial;

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float dx11BokehThreshold;

		[Token(Token = "0x40001A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float dx11SpawnHeuristic;

		[Token(Token = "0x40001A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture2D dx11BokehTexture;

		[Token(Token = "0x40001A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float dx11BokehScale;

		[Token(Token = "0x40001A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float dx11BokehIntensity;

		[Token(Token = "0x40001A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float focalDistance01;

		[Token(Token = "0x40001A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ComputeBuffer cbDrawArgs;

		[Token(Token = "0x40001A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private ComputeBuffer cbPoints;

		[Token(Token = "0x40001A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float internalBlurWidth;

		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Camera cachedCamera;

		[Token(Token = "0x6000260")]
		[Address(RVA = "0x145E1F8", Offset = "0x145E1F8", VA = "0x145E1F8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000261")]
		[Address(RVA = "0x145E398", Offset = "0x145E398", VA = "0x145E398")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000262")]
		[Address(RVA = "0x145E410", Offset = "0x145E410", VA = "0x145E410")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000263")]
		[Address(RVA = "0x145E518", Offset = "0x145E518", VA = "0x145E518")]
		private void ReleaseComputeResources()
		{
		}

		[Token(Token = "0x6000264")]
		[Address(RVA = "0x145E27C", Offset = "0x145E27C", VA = "0x145E27C")]
		private void CreateComputeResources()
		{
		}

		[Token(Token = "0x6000265")]
		[Address(RVA = "0x145E55C", Offset = "0x145E55C", VA = "0x145E55C")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x6000266")]
		[Address(RVA = "0x145E6B8", Offset = "0x145E6B8", VA = "0x145E6B8")]
		private void WriteCoc(RenderTexture fromTo, bool fgDilate)
		{
		}

		[Token(Token = "0x6000267")]
		[Address(RVA = "0x145E9D8", Offset = "0x145E9D8", VA = "0x145E9D8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000268")]
		[Address(RVA = "0x1460030", Offset = "0x1460030", VA = "0x1460030")]
		public DepthOfField()
		{
		}
	}
	[Token(Token = "0x200004D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2D168", Offset = "0xB2D168")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2D168", Offset = "0xB2D168")]
	public class DepthOfFieldDeprecated : PostEffectsBase
	{
		[Token(Token = "0x2000273")]
		public enum Dof34QualitySetting
		{
			[Token(Token = "0x4000D2E")]
			OnlyBackground = 1,
			[Token(Token = "0x4000D2F")]
			BackgroundAndForeground
		}

		[Token(Token = "0x2000274")]
		public enum DofResolution
		{
			[Token(Token = "0x4000D31")]
			High = 2,
			[Token(Token = "0x4000D32")]
			Medium,
			[Token(Token = "0x4000D33")]
			Low
		}

		[Token(Token = "0x2000275")]
		public enum DofBlurriness
		{
			[Token(Token = "0x4000D35")]
			Low = 1,
			[Token(Token = "0x4000D36")]
			High = 2,
			[Token(Token = "0x4000D37")]
			VeryHigh = 4
		}

		[Token(Token = "0x2000276")]
		public enum BokehDestination
		{
			[Token(Token = "0x4000D39")]
			Background = 1,
			[Token(Token = "0x4000D3A")]
			Foreground,
			[Token(Token = "0x4000D3B")]
			BackgroundAndForeground
		}

		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int SMOOTH_DOWNSAMPLE_PASS;

		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float BOKEH_EXTRA_BLUR;

		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dof34QualitySetting quality;

		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public DofResolution resolution;

		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool simpleTweakMode;

		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float focalPoint;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float smoothness;

		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float focalZDistance;

		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float focalZStartCurve;

		[Token(Token = "0x40001B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float focalZEndCurve;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float focalStartCurve;

		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float focalEndCurve;

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float focalDistance01;

		[Token(Token = "0x40001B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform objectFocus;

		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float focalSize;

		[Token(Token = "0x40001B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public DofBlurriness bluriness;

		[Token(Token = "0x40001B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float maxBlurSpread;

		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float foregroundBlurExtrude;

		[Token(Token = "0x40001BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader dofBlurShader;

		[Token(Token = "0x40001BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dofBlurMaterial;

		[Token(Token = "0x40001BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader dofShader;

		[Token(Token = "0x40001BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material dofMaterial;

		[Token(Token = "0x40001BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool visualize;

		[Token(Token = "0x40001C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public BokehDestination bokehDestination;

		[Token(Token = "0x40001C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float widthOverHeight;

		[Token(Token = "0x40001C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float oneOverBaseSize;

		[Token(Token = "0x40001C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool bokeh;

		[Token(Token = "0x40001C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		public bool bokehSupport;

		[Token(Token = "0x40001C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Shader bokehShader;

		[Token(Token = "0x40001C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Texture2D bokehTexture;

		[Token(Token = "0x40001C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float bokehScale;

		[Token(Token = "0x40001C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float bokehIntensity;

		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float bokehThresholdContrast;

		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float bokehThresholdLuminance;

		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public int bokehDownsample;

		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Material bokehMaterial;

		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Camera _camera;

		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RenderTexture foregroundTexture;

		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private RenderTexture mediumRezWorkTexture;

		[Token(Token = "0x40001D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RenderTexture finalDefocus;

		[Token(Token = "0x40001D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RenderTexture lowRezWorkTexture;

		[Token(Token = "0x40001D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private RenderTexture bokehSource;

		[Token(Token = "0x40001D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private RenderTexture bokehSource2;

		[Token(Token = "0x6000269")]
		[Address(RVA = "0x1460084", Offset = "0x1460084", VA = "0x1460084")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x600026A")]
		[Address(RVA = "0x1460158", Offset = "0x1460158", VA = "0x1460158", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600026B")]
		[Address(RVA = "0x146025C", Offset = "0x146025C", VA = "0x146025C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600026C")]
		[Address(RVA = "0x14602BC", Offset = "0x14602BC", VA = "0x14602BC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600026D")]
		[Address(RVA = "0x1460334", Offset = "0x1460334", VA = "0x1460334")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x600026E")]
		[Address(RVA = "0x1460490", Offset = "0x1460490", VA = "0x1460490")]
		private int GetDividerBasedOnQuality()
		{
			return default(int);
		}

		[Token(Token = "0x600026F")]
		[Address(RVA = "0x14604B4", Offset = "0x14604B4", VA = "0x14604B4")]
		private int GetLowResolutionDividerBasedOnQuality(int baseDivider)
		{
			return default(int);
		}

		[Token(Token = "0x6000270")]
		[Address(RVA = "0x14604D8", Offset = "0x14604D8", VA = "0x14604D8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000271")]
		[Address(RVA = "0x14612BC", Offset = "0x14612BC", VA = "0x14612BC")]
		private void Blur(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x6000272")]
		[Address(RVA = "0x1461974", Offset = "0x1461974", VA = "0x1461974")]
		private void BlurFg(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x6000273")]
		[Address(RVA = "0x1461DDC", Offset = "0x1461DDC", VA = "0x1461DDC")]
		private void BlurHex(RenderTexture from, RenderTexture to, int blurPass, float spread, RenderTexture tmp)
		{
		}

		[Token(Token = "0x6000274")]
		[Address(RVA = "0x1461170", Offset = "0x1461170", VA = "0x1461170")]
		private void Downsample(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000275")]
		[Address(RVA = "0x1461558", Offset = "0x1461558", VA = "0x1461558")]
		private void AddBokeh(RenderTexture bokehInfo, RenderTexture tempTex, RenderTexture finalTarget)
		{
		}

		[Token(Token = "0x6000276")]
		[Address(RVA = "0x1461C30", Offset = "0x1461C30", VA = "0x1461C30")]
		private void ReleaseTextures()
		{
		}

		[Token(Token = "0x6000277")]
		[Address(RVA = "0x1460E3C", Offset = "0x1460E3C", VA = "0x1460E3C")]
		private void AllocateTextures(bool blurForeground, RenderTexture source, int divider, int lowTexDivider)
		{
		}

		[Token(Token = "0x6000278")]
		[Address(RVA = "0x1462004", Offset = "0x1462004", VA = "0x1462004")]
		public DepthOfFieldDeprecated()
		{
		}
	}
	[Token(Token = "0x200004E")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2D200", Offset = "0xB2D200")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2D200", Offset = "0xB2D200")]
	public class EdgeDetection : PostEffectsBase
	{
		[Token(Token = "0x2000277")]
		public enum EdgeDetectMode
		{
			[Token(Token = "0x4000D3D")]
			TriangleDepthNormals,
			[Token(Token = "0x4000D3E")]
			RobertsCrossDepthNormals,
			[Token(Token = "0x4000D3F")]
			SobelDepth,
			[Token(Token = "0x4000D40")]
			SobelDepthThin,
			[Token(Token = "0x4000D41")]
			TriangleLuminance
		}

		[Token(Token = "0x40001D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EdgeDetectMode mode;

		[Token(Token = "0x40001D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sensitivityDepth;

		[Token(Token = "0x40001D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float sensitivityNormals;

		[Token(Token = "0x40001D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float lumThreshold;

		[Token(Token = "0x40001D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float edgeExp;

		[Token(Token = "0x40001D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sampleDist;

		[Token(Token = "0x40001DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float edgesOnly;

		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Color edgesOnlyBgColor;

		[Token(Token = "0x40001DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader edgeDetectShader;

		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material edgeDetectMaterial;

		[Token(Token = "0x40001DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private EdgeDetectMode oldMode;

		[Token(Token = "0x600027A")]
		[Address(RVA = "0x14620DC", Offset = "0x14620DC", VA = "0x14620DC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600027B")]
		[Address(RVA = "0x1462214", Offset = "0x1462214", VA = "0x1462214")]
		private new void Start()
		{
		}

		[Token(Token = "0x600027C")]
		[Address(RVA = "0x1462154", Offset = "0x1462154", VA = "0x1462154")]
		private void SetCameraFlag()
		{
		}

		[Token(Token = "0x600027D")]
		[Address(RVA = "0x1462220", Offset = "0x1462220", VA = "0x1462220")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600027E")]
		[Address(RVA = "0x1462224", Offset = "0x1462224", VA = "0x1462224")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600027F")]
		[Address(RVA = "0x1462410", Offset = "0x1462410", VA = "0x1462410")]
		public EdgeDetection()
		{
		}
	}
	[Token(Token = "0x200004F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2D298", Offset = "0xB2D298")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2D298", Offset = "0xB2D298")]
	public class Fisheye : PostEffectsBase
	{
		[Token(Token = "0x40001DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB312E0", Offset = "0xB312E0")]
		public float strengthX;

		[Token(Token = "0x40001E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB312F8", Offset = "0xB312F8")]
		public float strengthY;

		[Token(Token = "0x40001E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader fishEyeShader;

		[Token(Token = "0x40001E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material fisheyeMaterial;

		[Token(Token = "0x6000280")]
		[Address(RVA = "0x1462460", Offset = "0x1462460", VA = "0x1462460", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000281")]
		[Address(RVA = "0x14624B8", Offset = "0x14624B8", VA = "0x14624B8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000282")]
		[Address(RVA = "0x1462628", Offset = "0x1462628", VA = "0x1462628")]
		public Fisheye()
		{
		}
	}
	[Token(Token = "0x2000050")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2D330", Offset = "0xB2D330")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2D330", Offset = "0xB2D330")]
	internal class GlobalFog : PostEffectsBase
	{
		[Token(Token = "0x40001E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB31310", Offset = "0xB31310")]
		public bool distanceFog;

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB31348", Offset = "0xB31348")]
		public bool excludeFarPixels;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB31380", Offset = "0xB31380")]
		public bool useRadialDistance;

		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB313B8", Offset = "0xB313B8")]
		public bool heightFog;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB313F0", Offset = "0xB313F0")]
		public float height;

		[Token(Token = "0x40001E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31428", Offset = "0xB31428")]
		public float heightDensity;

		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB31444", Offset = "0xB31444")]
		public float startDistance;

		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader fogShader;

		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material fogMaterial;

		[Token(Token = "0x6000283")]
		[Address(RVA = "0x146263C", Offset = "0x146263C", VA = "0x146263C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000284")]
		[Address(RVA = "0x1462694", Offset = "0x1462694", VA = "0x1462694")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000285")]
		[Address(RVA = "0x1462CCC", Offset = "0x1462CCC", VA = "0x1462CCC")]
		public GlobalFog()
		{
		}
	}
	[Token(Token = "0x2000051")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2D3C8", Offset = "0xB2D3C8")]
	public class Grayscale : ImageEffectBase
	{
		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB3147C", Offset = "0xB3147C")]
		public float rampOffset;

		[Token(Token = "0x6000286")]
		[Address(RVA = "0x1462CEC", Offset = "0x1462CEC", VA = "0x1462CEC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000287")]
		[Address(RVA = "0x1462DC8", Offset = "0x1462DC8", VA = "0x1462DC8")]
		public Grayscale()
		{
		}
	}
	[Token(Token = "0x2000052")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2D414", Offset = "0xB2D414")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2D414", Offset = "0xB2D414")]
	public class ImageEffectBase : MonoBehaviour
	{
		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shader shader;

		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material m_Material;

		[Token(Token = "0x17000016")]
		protected Material material
		{
			[Token(Token = "0x6000289")]
			[Address(RVA = "0x145CD00", Offset = "0x145CD00", VA = "0x145CD00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000288")]
		[Address(RVA = "0x1462DD0", Offset = "0x1462DD0", VA = "0x1462DD0", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600028A")]
		[Address(RVA = "0x1462E80", Offset = "0x1462E80", VA = "0x1462E80", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x600028B")]
		[Address(RVA = "0x145CDCC", Offset = "0x145CDCC", VA = "0x145CDCC")]
		public ImageEffectBase()
		{
		}
	}
	[Token(Token = "0x2000053")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2D49C", Offset = "0xB2D49C")]
	public class ImageEffects
	{
		[Token(Token = "0x600028C")]
		[Address(RVA = "0x1462F30", Offset = "0x1462F30", VA = "0x1462F30")]
		public static void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius)
		{
		}

		[Token(Token = "0x600028D")]
		[Address(RVA = "0x14631AC", Offset = "0x14631AC", VA = "0x14631AC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB3A3AC", Offset = "0xB3A3AC")]
		public static void Blit(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x600028E")]
		[Address(RVA = "0x1463224", Offset = "0x1463224", VA = "0x1463224")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB3A3E4", Offset = "0xB3A3E4")]
		public static void BlitWithMaterial(Material material, RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x600028F")]
		[Address(RVA = "0x14632A4", Offset = "0x14632A4", VA = "0x14632A4")]
		public ImageEffects()
		{
		}
	}
	[Token(Token = "0x2000054")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2D4D4", Offset = "0xB2D4D4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2D4D4", Offset = "0xB2D4D4")]
	public class MotionBlur : ImageEffectBase
	{
		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31494", Offset = "0xB31494")]
		public float blurAmount;

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool extraBlur;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture accumTexture;

		[Token(Token = "0x6000290")]
		[Address(RVA = "0x14632AC", Offset = "0x14632AC", VA = "0x14632AC", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000291")]
		[Address(RVA = "0x14632B0", Offset = "0x14632B0", VA = "0x14632B0", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000292")]
		[Address(RVA = "0x1463324", Offset = "0x1463324", VA = "0x1463324")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000293")]
		[Address(RVA = "0x14636A8", Offset = "0x14636A8", VA = "0x14636A8")]
		public MotionBlur()
		{
		}
	}
	[Token(Token = "0x2000055")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2D56C", Offset = "0xB2D56C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2D56C", Offset = "0xB2D56C")]
	public class NoiseAndGrain : PostEffectsBase
	{
		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float intensityMultiplier;

		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float generalIntensity;

		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float blackIntensity;

		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float whiteIntensity;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float midGrey;

		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool dx11Grain;

		[Token(Token = "0x40001F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float softness;

		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool monochrome;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 intensities;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 tiling;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float monochromeTiling;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public FilterMode filterMode;

		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture2D noiseTexture;

		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader noiseShader;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material noiseMaterial;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader dx11NoiseShader;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material dx11NoiseMaterial;

		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float TILE_AMOUNT;

		[Token(Token = "0x6000294")]
		[Address(RVA = "0x14636BC", Offset = "0x14636BC", VA = "0x14636BC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000295")]
		[Address(RVA = "0x1463734", Offset = "0x1463734", VA = "0x1463734")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000296")]
		[Address(RVA = "0x1464054", Offset = "0x1464054", VA = "0x1464054")]
		private static void DrawNoiseQuadGrid(RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, int passNr)
		{
		}

		[Token(Token = "0x6000297")]
		[Address(RVA = "0x14643D0", Offset = "0x14643D0", VA = "0x14643D0")]
		public NoiseAndGrain()
		{
		}
	}
	[Token(Token = "0x2000056")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2D604", Offset = "0xB2D604")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2D604", Offset = "0xB2D604")]
	public class NoiseAndScratches : MonoBehaviour
	{
		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool monochrome;

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool rgbFallback;

		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB314B0", Offset = "0xB314B0")]
		public float grainIntensityMin;

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB314C8", Offset = "0xB314C8")]
		public float grainIntensityMax;

		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB314E0", Offset = "0xB314E0")]
		public float grainSize;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31500", Offset = "0xB31500")]
		public float scratchIntensityMin;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31518", Offset = "0xB31518")]
		public float scratchIntensityMax;

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31530", Offset = "0xB31530")]
		public float scratchFPS;

		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31548", Offset = "0xB31548")]
		public float scratchJitter;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture grainTexture;

		[Token(Token = "0x400020F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture scratchTexture;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderRGB;

		[Token(Token = "0x4000211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader shaderYUV;

		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_MaterialRGB;

		[Token(Token = "0x4000213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_MaterialYUV;

		[Token(Token = "0x4000214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float scratchTimeLeft;

		[Token(Token = "0x4000215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float scratchX;

		[Token(Token = "0x4000216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float scratchY;

		[Token(Token = "0x17000017")]
		protected Material material
		{
			[Token(Token = "0x600029A")]
			[Address(RVA = "0x1464618", Offset = "0x1464618", VA = "0x1464618")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000299")]
		[Address(RVA = "0x14644D8", Offset = "0x14644D8", VA = "0x14644D8")]
		protected void Start()
		{
		}

		[Token(Token = "0x600029B")]
		[Address(RVA = "0x1464774", Offset = "0x1464774", VA = "0x1464774")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x600029C")]
		[Address(RVA = "0x1464878", Offset = "0x1464878", VA = "0x1464878")]
		private void SanitizeParameters()
		{
		}

		[Token(Token = "0x600029D")]
		[Address(RVA = "0x14649B4", Offset = "0x14649B4", VA = "0x14649B4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600029E")]
		[Address(RVA = "0x1464CFC", Offset = "0x1464CFC", VA = "0x1464CFC")]
		public NoiseAndScratches()
		{
		}
	}
	[Token(Token = "0x2000057")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2D69C", Offset = "0xB2D69C")]
	public class PostEffectsBase : MonoBehaviour
	{
		[Token(Token = "0x4000217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool supportHDRTextures;

		[Token(Token = "0x4000218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected bool supportDX11;

		[Token(Token = "0x4000219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool isSupported;

		[Token(Token = "0x400021A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Material> createdMaterials;

		[Token(Token = "0x600029F")]
		[Address(RVA = "0x1457800", Offset = "0x1457800", VA = "0x1457800")]
		protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0x1456F14", Offset = "0x1456F14", VA = "0x1456F14")]
		protected Material CreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x60002A1")]
		[Address(RVA = "0x1464D30", Offset = "0x1464D30", VA = "0x1464D30")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002A2")]
		[Address(RVA = "0x1464D3C", Offset = "0x1464D3C", VA = "0x1464D3C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60002A3")]
		[Address(RVA = "0x1464D40", Offset = "0x1464D40", VA = "0x1464D40")]
		private void RemoveCreatedMaterials()
		{
		}

		[Token(Token = "0x60002A4")]
		[Address(RVA = "0x1464DF0", Offset = "0x1464DF0", VA = "0x1464DF0")]
		protected bool CheckSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x60002A5")]
		[Address(RVA = "0x1464DF8", Offset = "0x1464DF8", VA = "0x1464DF8", Slot = "4")]
		public virtual bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002A6")]
		[Address(RVA = "0x145B2D4", Offset = "0x145B2D4", VA = "0x145B2D4")]
		protected void Start()
		{
		}

		[Token(Token = "0x60002A7")]
		[Address(RVA = "0x1456E0C", Offset = "0x1456E0C", VA = "0x1456E0C")]
		protected bool CheckSupport(bool needDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x60002A8")]
		[Address(RVA = "0x1459418", Offset = "0x1459418", VA = "0x1459418")]
		protected bool CheckSupport(bool needDepth, bool needHdr)
		{
			return default(bool);
		}

		[Token(Token = "0x60002A9")]
		[Address(RVA = "0x1464EA8", Offset = "0x1464EA8", VA = "0x1464EA8")]
		public bool Dx11Support()
		{
			return default(bool);
		}

		[Token(Token = "0x60002AA")]
		[Address(RVA = "0x145711C", Offset = "0x145711C", VA = "0x145711C")]
		protected void ReportAutoDisable()
		{
		}

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0x1464EB0", Offset = "0x1464EB0", VA = "0x1464EB0")]
		private bool CheckShader(Shader s)
		{
			return default(bool);
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0x14570F0", Offset = "0x14570F0", VA = "0x14570F0")]
		protected void NotSupported()
		{
		}

		[Token(Token = "0x60002AD")]
		[Address(RVA = "0x14650B0", Offset = "0x14650B0", VA = "0x14650B0")]
		protected void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0x145772C", Offset = "0x145772C", VA = "0x145772C")]
		public PostEffectsBase()
		{
		}
	}
	[Token(Token = "0x2000058")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2D710", Offset = "0xB2D710")]
	internal class PostEffectsHelper : MonoBehaviour
	{
		[Token(Token = "0x60002AF")]
		[Address(RVA = "0xD4F5AC", Offset = "0xD4F5AC", VA = "0xD4F5AC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0xD4F618", Offset = "0xD4F618", VA = "0xD4F618")]
		private static void DrawLowLevelPlaneAlignedWithCamera(float dist, RenderTexture source, RenderTexture dest, Material material, Camera cameraForProjectionMatrix)
		{
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0xD4F894", Offset = "0xD4F894", VA = "0xD4F894")]
		private static void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0xD4FC0C", Offset = "0xD4FC0C", VA = "0xD4FC0C")]
		private static void DrawLowLevelQuad(float x1, float x2, float y1, float y2, RenderTexture source, RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0xD4FDB8", Offset = "0xD4FDB8", VA = "0xD4FDB8")]
		public PostEffectsHelper()
		{
		}
	}
	[Token(Token = "0x2000059")]
	internal class Quads
	{
		[Token(Token = "0x400021B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x400021C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentQuads;

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0xD4FDC0", Offset = "0xD4FDC0", VA = "0xD4FDC0")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0xD4FEE4", Offset = "0xD4FEE4", VA = "0xD4FEE4")]
		public static void Cleanup()
		{
		}

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0xD500B4", Offset = "0xD500B4", VA = "0xD500B4")]
		public static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x60002B7")]
		[Address(RVA = "0xD50374", Offset = "0xD50374", VA = "0xD50374")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x60002B8")]
		[Address(RVA = "0xD508A8", Offset = "0xD508A8", VA = "0xD508A8")]
		public Quads()
		{
		}
	}
	[Token(Token = "0x200005A")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2D784", Offset = "0xB2D784")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2D784", Offset = "0xB2D784")]
	public class ScreenOverlay : PostEffectsBase
	{
		[Token(Token = "0x2000278")]
		public enum OverlayBlendMode
		{
			[Token(Token = "0x4000D43")]
			Additive,
			[Token(Token = "0x4000D44")]
			ScreenBlend,
			[Token(Token = "0x4000D45")]
			Multiply,
			[Token(Token = "0x4000D46")]
			Overlay,
			[Token(Token = "0x4000D47")]
			AlphaBlend
		}

		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OverlayBlendMode blendMode;

		[Token(Token = "0x400021E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float intensity;

		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D texture;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader overlayShader;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material overlayMaterial;

		[Token(Token = "0x60002BA")]
		[Address(RVA = "0xD508B4", Offset = "0xD508B4", VA = "0xD508B4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002BB")]
		[Address(RVA = "0xD50918", Offset = "0xD50918", VA = "0xD50918")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002BC")]
		[Address(RVA = "0xD50A80", Offset = "0xD50A80", VA = "0xD50A80")]
		public ScreenOverlay()
		{
		}
	}
	[Token(Token = "0x200005B")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2D81C", Offset = "0xB2D81C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2D81C", Offset = "0xB2D81C")]
	internal class ScreenSpaceAmbientObscurance : PostEffectsBase
	{
		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31560", Offset = "0xB31560")]
		public float intensity;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31578", Offset = "0xB31578")]
		public float radius;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31594", Offset = "0xB31594")]
		public int blurIterations;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB315AC", Offset = "0xB315AC")]
		public float blurFilterDistance;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB315C4", Offset = "0xB315C4")]
		public int downsample;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture2D rand;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader aoShader;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material aoMaterial;

		[Token(Token = "0x60002BD")]
		[Address(RVA = "0xD50A94", Offset = "0xD50A94", VA = "0xD50A94", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002BE")]
		[Address(RVA = "0xD50AF8", Offset = "0xD50AF8", VA = "0xD50AF8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002BF")]
		[Address(RVA = "0xD50BA0", Offset = "0xD50BA0", VA = "0xD50BA0")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002C0")]
		[Address(RVA = "0xD513B4", Offset = "0xD513B4", VA = "0xD513B4")]
		public ScreenSpaceAmbientObscurance()
		{
		}
	}
	[Token(Token = "0x200005C")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2D8B4", Offset = "0xB2D8B4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2D8B4", Offset = "0xB2D8B4")]
	public class ScreenSpaceAmbientOcclusion : MonoBehaviour
	{
		[Token(Token = "0x2000279")]
		public enum SSAOSamples
		{
			[Token(Token = "0x4000D49")]
			Low,
			[Token(Token = "0x4000D4A")]
			Medium,
			[Token(Token = "0x4000D4B")]
			High
		}

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB315DC", Offset = "0xB315DC")]
		public float m_Radius;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SSAOSamples m_SampleCount;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB315F8", Offset = "0xB315F8")]
		public float m_OcclusionIntensity;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31610", Offset = "0xB31610")]
		public int m_Blur;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31628", Offset = "0xB31628")]
		public int m_Downsampling;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31640", Offset = "0xB31640")]
		public float m_OcclusionAttenuation;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB3165C", Offset = "0xB3165C")]
		public float m_MinZ;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader m_SSAOShader;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_SSAOMaterial;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture2D m_RandomTexture;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_Supported;

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0xD513D4", Offset = "0xD513D4", VA = "0xD513D4")]
		private static Material CreateMaterial(Shader shader)
		{
			return null;
		}

		[Token(Token = "0x60002C2")]
		[Address(RVA = "0xD51484", Offset = "0xD51484", VA = "0xD51484")]
		private static void DestroyMaterial(Material mat)
		{
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0xD51520", Offset = "0xD51520", VA = "0xD51520")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0xD51528", Offset = "0xD51528", VA = "0xD51528")]
		private void Start()
		{
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0xD516BC", Offset = "0xD516BC", VA = "0xD516BC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0xD51600", Offset = "0xD51600", VA = "0xD51600")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x60002C7")]
		[Address(RVA = "0xD51730", Offset = "0xD51730", VA = "0xD51730")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0xD51DEC", Offset = "0xD51DEC", VA = "0xD51DEC")]
		public ScreenSpaceAmbientOcclusion()
		{
		}
	}
	[Token(Token = "0x200005D")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2D94C", Offset = "0xB2D94C")]
	public class SepiaTone : ImageEffectBase
	{
		[Token(Token = "0x60002C9")]
		[Address(RVA = "0xD51E20", Offset = "0xD51E20", VA = "0xD51E20")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002CA")]
		[Address(RVA = "0xD51EB4", Offset = "0xD51EB4", VA = "0xD51EB4")]
		public SepiaTone()
		{
		}
	}
	[Token(Token = "0x200005E")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2D998", Offset = "0xB2D998")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2D998", Offset = "0xB2D998")]
	internal class TiltShift : PostEffectsBase
	{
		[Token(Token = "0x200027A")]
		public enum TiltShiftMode
		{
			[Token(Token = "0x4000D4D")]
			TiltShiftMode,
			[Token(Token = "0x4000D4E")]
			IrisMode
		}

		[Token(Token = "0x200027B")]
		public enum TiltShiftQuality
		{
			[Token(Token = "0x4000D50")]
			Preview,
			[Token(Token = "0x4000D51")]
			Low,
			[Token(Token = "0x4000D52")]
			Normal,
			[Token(Token = "0x4000D53")]
			High
		}

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TiltShiftMode mode;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public TiltShiftQuality quality;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31678", Offset = "0xB31678")]
		public float blurArea;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31690", Offset = "0xB31690")]
		public float maxBlurSize;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB316A8", Offset = "0xB316A8")]
		public int downsample;

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader tiltShiftShader;

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material tiltShiftMaterial;

		[Token(Token = "0x60002CB")]
		[Address(RVA = "0xD51EBC", Offset = "0xD51EBC", VA = "0xD51EBC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002CC")]
		[Address(RVA = "0xD51F20", Offset = "0xD51F20", VA = "0xD51F20")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0xD521B0", Offset = "0xD521B0", VA = "0xD521B0")]
		public TiltShift()
		{
		}
	}
	[Token(Token = "0x200005F")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2DA20", Offset = "0xB2DA20")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2DA20", Offset = "0xB2DA20")]
	public class Tonemapping : PostEffectsBase
	{
		[Token(Token = "0x200027C")]
		public enum TonemapperType
		{
			[Token(Token = "0x4000D55")]
			SimpleReinhard,
			[Token(Token = "0x4000D56")]
			UserCurve,
			[Token(Token = "0x4000D57")]
			Hable,
			[Token(Token = "0x4000D58")]
			Photographic,
			[Token(Token = "0x4000D59")]
			OptimizedHejiDawson,
			[Token(Token = "0x4000D5A")]
			AdaptiveReinhard,
			[Token(Token = "0x4000D5B")]
			AdaptiveReinhardAutoWhite
		}

		[Token(Token = "0x200027D")]
		public enum AdaptiveTexSize
		{
			[Token(Token = "0x4000D5D")]
			Square16 = 0x10,
			[Token(Token = "0x4000D5E")]
			Square32 = 0x20,
			[Token(Token = "0x4000D5F")]
			Square64 = 0x40,
			[Token(Token = "0x4000D60")]
			Square128 = 0x80,
			[Token(Token = "0x4000D61")]
			Square256 = 0x100,
			[Token(Token = "0x4000D62")]
			Square512 = 0x200,
			[Token(Token = "0x4000D63")]
			Square1024 = 0x400
		}

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TonemapperType type;

		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public AdaptiveTexSize adaptiveTextureSize;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve remapCurve;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Texture2D curveTex;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float exposureAdjustment;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float middleGrey;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float white;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float adaptionSpeed;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader tonemapper;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool validRenderTextureFormat;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material tonemapMaterial;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTexture rt;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RenderTextureFormat rtFormat;

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0xD521CC", Offset = "0xD521CC", VA = "0xD521CC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0xD52314", Offset = "0xD52314", VA = "0xD52314")]
		public float UpdateCurve()
		{
			return default(float);
		}

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0xD525BC", Offset = "0xD525BC", VA = "0xD525BC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0xD52714", Offset = "0xD52714", VA = "0xD52714")]
		private bool CreateInternalRenderTexture()
		{
			return default(bool);
		}

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0xD52804", Offset = "0xD52804", VA = "0xD52804")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002D3")]
		[Address(RVA = "0xD53010", Offset = "0xD53010", VA = "0xD53010")]
		public Tonemapping()
		{
		}
	}
	[Token(Token = "0x2000060")]
	internal class Triangles
	{
		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentTris;

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0xD53040", Offset = "0xD53040", VA = "0xD53040")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x60002D5")]
		[Address(RVA = "0xD5317C", Offset = "0xD5317C", VA = "0xD5317C")]
		private static void Cleanup()
		{
		}

		[Token(Token = "0x60002D6")]
		[Address(RVA = "0xD5334C", Offset = "0xD5334C", VA = "0xD5334C")]
		private static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x60002D7")]
		[Address(RVA = "0xD5360C", Offset = "0xD5360C", VA = "0xD5360C")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x60002D8")]
		[Address(RVA = "0xD53A3C", Offset = "0xD53A3C", VA = "0xD53A3C")]
		public Triangles()
		{
		}
	}
	[Token(Token = "0x2000061")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2DAB8", Offset = "0xB2DAB8")]
	public class Twirl : ImageEffectBase
	{
		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB316C0", Offset = "0xB316C0")]
		public float angle;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0xD53A48", Offset = "0xD53A48", VA = "0xD53A48")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0xD53A94", Offset = "0xD53A94", VA = "0xD53A94")]
		public Twirl()
		{
		}
	}
	[Token(Token = "0x2000062")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2DB04", Offset = "0xB2DB04")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2DB04", Offset = "0xB2DB04")]
	public class VignetteAndChromaticAberration : PostEffectsBase
	{
		[Token(Token = "0x200027E")]
		public enum AberrationMode
		{
			[Token(Token = "0x4000D65")]
			Simple,
			[Token(Token = "0x4000D66")]
			Advanced
		}

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AberrationMode mode;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float intensity;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float chromaticAberration;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float axialAberration;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blur;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float blurSpread;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float luminanceDependency;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float blurDistance;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader vignetteShader;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader separableBlurShader;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader chromAberrationShader;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_VignetteMaterial;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material m_SeparableBlurMaterial;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material m_ChromAberrationMaterial;

		[Token(Token = "0x60002DC")]
		[Address(RVA = "0xD53B10", Offset = "0xD53B10", VA = "0xD53B10", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60002DD")]
		[Address(RVA = "0xD53BA8", Offset = "0xD53BA8", VA = "0xD53BA8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002DE")]
		[Address(RVA = "0xD541D4", Offset = "0xD541D4", VA = "0xD541D4")]
		public VignetteAndChromaticAberration()
		{
		}
	}
	[Token(Token = "0x2000063")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2DB9C", Offset = "0xB2DB9C")]
	public class Vortex : ImageEffectBase
	{
		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float angle;

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0xD54204", Offset = "0xD54204", VA = "0xD54204")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0xD54250", Offset = "0xD54250", VA = "0xD54250")]
		public Vortex()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput
{
	[Token(Token = "0x2000064")]
	public class AxisTouchButton : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axisName;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float axisValue;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float responseSpeed;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float returnToCentreSpeed;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AxisTouchButton m_PairedWith;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CrossPlatformInputManager.VirtualAxis m_Axis;

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x1450B20", Offset = "0x1450B20", VA = "0x1450B20")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002E2")]
		[Address(RVA = "0x1450DB0", Offset = "0x1450DB0", VA = "0x1450DB0")]
		private void FindPairedButton()
		{
		}

		[Token(Token = "0x60002E3")]
		[Address(RVA = "0x1450F30", Offset = "0x1450F30", VA = "0x1450F30")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0x1450FB0", Offset = "0x1450FB0", VA = "0x1450FB0", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0x1451098", Offset = "0x1451098", VA = "0x1451098", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0x1451140", Offset = "0x1451140", VA = "0x1451140")]
		public AxisTouchButton()
		{
		}
	}
	[Token(Token = "0x2000065")]
	public class ButtonHandler : MonoBehaviour
	{
		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Name;

		[Token(Token = "0x60002E7")]
		[Address(RVA = "0x14511AC", Offset = "0x14511AC", VA = "0x14511AC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0x14511B0", Offset = "0x14511B0", VA = "0x14511B0")]
		public void SetDownState()
		{
		}

		[Token(Token = "0x60002E9")]
		[Address(RVA = "0x1451298", Offset = "0x1451298", VA = "0x1451298")]
		public void SetUpState()
		{
		}

		[Token(Token = "0x60002EA")]
		[Address(RVA = "0x1451380", Offset = "0x1451380", VA = "0x1451380")]
		public void SetAxisPositiveState()
		{
		}

		[Token(Token = "0x60002EB")]
		[Address(RVA = "0x1451468", Offset = "0x1451468", VA = "0x1451468")]
		public void SetAxisNeutralState()
		{
		}

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x1451550", Offset = "0x1451550", VA = "0x1451550")]
		public void SetAxisNegativeState()
		{
		}

		[Token(Token = "0x60002ED")]
		[Address(RVA = "0x1451638", Offset = "0x1451638", VA = "0x1451638")]
		public void Update()
		{
		}

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x145163C", Offset = "0x145163C", VA = "0x145163C")]
		public ButtonHandler()
		{
		}
	}
	[Token(Token = "0x2000066")]
	public static class CrossPlatformInputManager
	{
		[Token(Token = "0x200027F")]
		public enum ActiveInputMethod
		{
			[Token(Token = "0x4000D68")]
			Hardware,
			[Token(Token = "0x4000D69")]
			Touch
		}

		[Token(Token = "0x2000280")]
		public class VirtualAxis
		{
			[Token(Token = "0x4000D6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB371B4", Offset = "0xB371B4")]
			private string <name>k__BackingField;

			[Token(Token = "0x4000D6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private float m_Value;

			[Token(Token = "0x4000D6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB371C4", Offset = "0xB371C4")]
			private bool <matchWithInputManager>k__BackingField;

			[Token(Token = "0x17000288")]
			public string name
			{
				[Token(Token = "0x6001112")]
				[Address(RVA = "0x14524A4", Offset = "0x14524A4", VA = "0x14524A4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EAE8", Offset = "0xB3EAE8")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001113")]
				[Address(RVA = "0x14524AC", Offset = "0x14524AC", VA = "0x14524AC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EAF8", Offset = "0xB3EAF8")]
				private set
				{
				}
			}

			[Token(Token = "0x17000289")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x6001114")]
				[Address(RVA = "0x14524B4", Offset = "0x14524B4", VA = "0x14524B4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EB08", Offset = "0xB3EB08")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001115")]
				[Address(RVA = "0x14524BC", Offset = "0x14524BC", VA = "0x14524BC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EB18", Offset = "0xB3EB18")]
				private set
				{
				}
			}

			[Token(Token = "0x1700028A")]
			public float GetValue
			{
				[Token(Token = "0x600111A")]
				[Address(RVA = "0x1452510", Offset = "0x1452510", VA = "0x1452510")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700028B")]
			public float GetValueRaw
			{
				[Token(Token = "0x600111B")]
				[Address(RVA = "0x1452518", Offset = "0x1452518", VA = "0x1452518")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6001116")]
			[Address(RVA = "0x1450C8C", Offset = "0x1450C8C", VA = "0x1450C8C")]
			public VirtualAxis(string name)
			{
			}

			[Token(Token = "0x6001117")]
			[Address(RVA = "0x14524C8", Offset = "0x14524C8", VA = "0x14524C8")]
			public VirtualAxis(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x6001118")]
			[Address(RVA = "0x1450F48", Offset = "0x1450F48", VA = "0x1450F48")]
			public void Remove()
			{
			}

			[Token(Token = "0x6001119")]
			[Address(RVA = "0x1452508", Offset = "0x1452508", VA = "0x1452508")]
			public void Update(float value)
			{
			}
		}

		[Token(Token = "0x2000281")]
		public class VirtualButton
		{
			[Token(Token = "0x4000D6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB371D4", Offset = "0xB371D4")]
			private string <name>k__BackingField;

			[Token(Token = "0x4000D6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB371E4", Offset = "0xB371E4")]
			private bool <matchWithInputManager>k__BackingField;

			[Token(Token = "0x4000D6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int m_LastPressedFrame;

			[Token(Token = "0x4000D70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int m_ReleasedFrame;

			[Token(Token = "0x4000D71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private bool m_Pressed;

			[Token(Token = "0x1700028C")]
			public string name
			{
				[Token(Token = "0x600111C")]
				[Address(RVA = "0x1452520", Offset = "0x1452520", VA = "0x1452520")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EB28", Offset = "0xB3EB28")]
				get
				{
					return null;
				}
				[Token(Token = "0x600111D")]
				[Address(RVA = "0x1452528", Offset = "0x1452528", VA = "0x1452528")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EB38", Offset = "0xB3EB38")]
				private set
				{
				}
			}

			[Token(Token = "0x1700028D")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x600111E")]
				[Address(RVA = "0x1452530", Offset = "0x1452530", VA = "0x1452530")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EB48", Offset = "0xB3EB48")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600111F")]
				[Address(RVA = "0x1452538", Offset = "0x1452538", VA = "0x1452538")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EB58", Offset = "0xB3EB58")]
				private set
				{
				}
			}

			[Token(Token = "0x1700028E")]
			public bool GetButton
			{
				[Token(Token = "0x6001125")]
				[Address(RVA = "0x1452698", Offset = "0x1452698", VA = "0x1452698")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700028F")]
			public bool GetButtonDown
			{
				[Token(Token = "0x6001126")]
				[Address(RVA = "0x14526A0", Offset = "0x14526A0", VA = "0x14526A0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000290")]
			public bool GetButtonUp
			{
				[Token(Token = "0x6001127")]
				[Address(RVA = "0x14526D0", Offset = "0x14526D0", VA = "0x14526D0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001120")]
			[Address(RVA = "0x1452544", Offset = "0x1452544", VA = "0x1452544")]
			public VirtualButton(string name)
			{
			}

			[Token(Token = "0x6001121")]
			[Address(RVA = "0x1452580", Offset = "0x1452580", VA = "0x1452580")]
			public VirtualButton(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x6001122")]
			[Address(RVA = "0x14525C8", Offset = "0x14525C8", VA = "0x14525C8")]
			public void Pressed()
			{
			}

			[Token(Token = "0x6001123")]
			[Address(RVA = "0x1452604", Offset = "0x1452604", VA = "0x1452604")]
			public void Released()
			{
			}

			[Token(Token = "0x6001124")]
			[Address(RVA = "0x1452630", Offset = "0x1452630", VA = "0x1452630")]
			public void Remove()
			{
			}
		}

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VirtualInput activeInput;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static VirtualInput s_TouchInput;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static VirtualInput s_HardwareInput;

		[Token(Token = "0x17000018")]
		public static Vector3 mousePosition
		{
			[Token(Token = "0x6000304")]
			[Address(RVA = "0x1452124", Offset = "0x1452124", VA = "0x1452124")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x1451644", Offset = "0x1451644", VA = "0x1451644")]
		static CrossPlatformInputManager()
		{
		}

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x14516E4", Offset = "0x14516E4", VA = "0x14516E4")]
		public static void SwitchActiveInputMethod(ActiveInputMethod activeInputMethod)
		{
		}

		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x1450C14", Offset = "0x1450C14", VA = "0x1450C14")]
		public static bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F2")]
		[Address(RVA = "0x14517FC", Offset = "0x14517FC", VA = "0x14517FC")]
		public static bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x1450CC0", Offset = "0x1450CC0", VA = "0x1450CC0")]
		public static void RegisterVirtualAxis(VirtualAxis axis)
		{
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x1451A04", Offset = "0x1451A04", VA = "0x1451A04")]
		public static void RegisterVirtualButton(VirtualButton button)
		{
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x1451BA4", Offset = "0x1451BA4", VA = "0x1451BA4")]
		public static void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x1451CF4", Offset = "0x1451CF4", VA = "0x1451CF4")]
		public static void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x1450D38", Offset = "0x1450D38", VA = "0x1450D38")]
		public static VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x144BB08", Offset = "0x144BB08", VA = "0x144BB08")]
		public static float GetAxis(string name)
		{
			return default(float);
		}

		[Token(Token = "0x60002F9")]
		[Address(RVA = "0x1451F28", Offset = "0x1451F28", VA = "0x1451F28")]
		public static float GetAxisRaw(string name)
		{
			return default(float);
		}

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0x1451E98", Offset = "0x1451E98", VA = "0x1451E98")]
		private static float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0x1451F90", Offset = "0x1451F90", VA = "0x1451F90")]
		public static bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0x144D06C", Offset = "0x144D06C", VA = "0x144D06C")]
		public static bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FD")]
		[Address(RVA = "0x1452010", Offset = "0x1452010", VA = "0x1452010")]
		public static bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0x1451218", Offset = "0x1451218", VA = "0x1451218")]
		public static void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x60002FF")]
		[Address(RVA = "0x1451300", Offset = "0x1451300", VA = "0x1451300")]
		public static void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x6000300")]
		[Address(RVA = "0x14513E8", Offset = "0x14513E8", VA = "0x14513E8")]
		public static void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0x14515B8", Offset = "0x14515B8", VA = "0x14515B8")]
		public static void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x6000302")]
		[Address(RVA = "0x14514D0", Offset = "0x14514D0", VA = "0x14514D0")]
		public static void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x6000303")]
		[Address(RVA = "0x1452090", Offset = "0x1452090", VA = "0x1452090")]
		public static void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0x14521A0", Offset = "0x14521A0", VA = "0x14521A0")]
		public static void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x6000306")]
		[Address(RVA = "0x145229C", Offset = "0x145229C", VA = "0x145229C")]
		public static void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x6000307")]
		[Address(RVA = "0x14523A4", Offset = "0x14523A4", VA = "0x14523A4")]
		public static void SetVirtualMousePositionZ(float f)
		{
		}
	}
	[Token(Token = "0x2000067")]
	public class InputAxisScrollbar : MonoBehaviour
	{
		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axis;

		[Token(Token = "0x6000308")]
		[Address(RVA = "0x1452700", Offset = "0x1452700", VA = "0x1452700")]
		private void Update()
		{
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0x1452704", Offset = "0x1452704", VA = "0x1452704")]
		public void HandleInput(float value)
		{
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0x1452784", Offset = "0x1452784", VA = "0x1452784")]
		public InputAxisScrollbar()
		{
		}
	}
	[Token(Token = "0x2000068")]
	public class Joystick : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IDragHandler
	{
		[Token(Token = "0x2000282")]
		public enum AxisOption
		{
			[Token(Token = "0x4000D73")]
			Both,
			[Token(Token = "0x4000D74")]
			OnlyHorizontal,
			[Token(Token = "0x4000D75")]
			OnlyVertical
		}

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int MovementRange;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AxisOption axesToUse;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_StartPos;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_UseX;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool m_UseY;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x600030B")]
		[Address(RVA = "0x145278C", Offset = "0x145278C", VA = "0x145278C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600030C")]
		[Address(RVA = "0x14528CC", Offset = "0x14528CC", VA = "0x14528CC")]
		private void Start()
		{
		}

		[Token(Token = "0x600030D")]
		[Address(RVA = "0x1452908", Offset = "0x1452908", VA = "0x1452908")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0x1452790", Offset = "0x1452790", VA = "0x1452790")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x600030F")]
		[Address(RVA = "0x14529F8", Offset = "0x14529F8", VA = "0x14529F8", Slot = "6")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000310")]
		[Address(RVA = "0x1452BB8", Offset = "0x1452BB8", VA = "0x1452BB8", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6000311")]
		[Address(RVA = "0x1452C00", Offset = "0x1452C00", VA = "0x1452C00", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000312")]
		[Address(RVA = "0x1452C04", Offset = "0x1452C04", VA = "0x1452C04")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000313")]
		[Address(RVA = "0x1452C54", Offset = "0x1452C54", VA = "0x1452C54")]
		public Joystick()
		{
		}
	}
	[Token(Token = "0x2000069")]
	[ExecuteInEditMode]
	public class MobileControlRig : MonoBehaviour
	{
		[Token(Token = "0x6000314")]
		[Address(RVA = "0x1452CC4", Offset = "0x1452CC4", VA = "0x1452CC4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000315")]
		[Address(RVA = "0x1452CD4", Offset = "0x1452CD4", VA = "0x1452CD4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000316")]
		[Address(RVA = "0x1452CCC", Offset = "0x1452CCC", VA = "0x1452CCC")]
		private void CheckEnableControlRig()
		{
		}

		[Token(Token = "0x6000317")]
		[Address(RVA = "0x1452DB0", Offset = "0x1452DB0", VA = "0x1452DB0")]
		private void EnableControlRig(bool enabled)
		{
		}

		[Token(Token = "0x6000318")]
		[Address(RVA = "0x145302C", Offset = "0x145302C", VA = "0x145302C")]
		public MobileControlRig()
		{
		}
	}
	[Token(Token = "0x200006A")]
	public class TiltInput : MonoBehaviour
	{
		[Token(Token = "0x2000283")]
		public enum AxisOptions
		{
			[Token(Token = "0x4000D77")]
			ForwardAxis,
			[Token(Token = "0x4000D78")]
			SidewaysAxis
		}

		[Serializable]
		[Token(Token = "0x2000284")]
		public class AxisMapping
		{
			[Token(Token = "0x2000316")]
			public enum MappingType
			{
				[Token(Token = "0x400105D")]
				NamedAxis,
				[Token(Token = "0x400105E")]
				MousePositionX,
				[Token(Token = "0x400105F")]
				MousePositionY,
				[Token(Token = "0x4001060")]
				MousePositionZ
			}

			[Token(Token = "0x4000D79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MappingType type;

			[Token(Token = "0x4000D7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string axisName;

			[Token(Token = "0x6001128")]
			[Address(RVA = "0x1453EDC", Offset = "0x1453EDC", VA = "0x1453EDC")]
			public AxisMapping()
			{
			}
		}

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AxisMapping mapping;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AxisOptions tiltAroundAxis;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float fullTiltAngle;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float centreAngleOffset;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CrossPlatformInputManager.VirtualAxis m_SteerAxis;

		[Token(Token = "0x6000319")]
		[Address(RVA = "0x1453B68", Offset = "0x1453B68", VA = "0x1453B68")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600031A")]
		[Address(RVA = "0x1453C28", Offset = "0x1453C28", VA = "0x1453C28")]
		private void Update()
		{
		}

		[Token(Token = "0x600031B")]
		[Address(RVA = "0x1453EB4", Offset = "0x1453EB4", VA = "0x1453EB4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600031C")]
		[Address(RVA = "0x1453ECC", Offset = "0x1453ECC", VA = "0x1453ECC")]
		public TiltInput()
		{
		}
	}
	[Token(Token = "0x200006B")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2DBF8", Offset = "0xB2DBF8")]
	public class TouchPad : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x2000285")]
		public enum AxisOption
		{
			[Token(Token = "0x4000D7C")]
			Both,
			[Token(Token = "0x4000D7D")]
			OnlyHorizontal,
			[Token(Token = "0x4000D7E")]
			OnlyVertical
		}

		[Token(Token = "0x2000286")]
		public enum ControlStyle
		{
			[Token(Token = "0x4000D80")]
			Absolute,
			[Token(Token = "0x4000D81")]
			Relative,
			[Token(Token = "0x4000D82")]
			Swipe
		}

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AxisOption axesToUse;

		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ControlStyle controlStyle;

		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Xsensitivity;

		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Ysensitivity;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_StartPos;

		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector2 m_PreviousDelta;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 m_JoytickOutput;

		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_UseX;

		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool m_UseY;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_Dragging;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_Id;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector2 m_PreviousTouchPos;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 m_Center;

		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Image m_Image;

		[Token(Token = "0x600031D")]
		[Address(RVA = "0x1453EE4", Offset = "0x1453EE4", VA = "0x1453EE4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600031E")]
		[Address(RVA = "0x1454024", Offset = "0x1454024", VA = "0x1454024")]
		private void Start()
		{
		}

		[Token(Token = "0x600031F")]
		[Address(RVA = "0x1453EE8", Offset = "0x1453EE8", VA = "0x1453EE8")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0x14540A0", Offset = "0x14540A0", VA = "0x14540A0")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x6000321")]
		[Address(RVA = "0x145410C", Offset = "0x145410C", VA = "0x145410C", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0x14541BC", Offset = "0x14541BC", VA = "0x14541BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000323")]
		[Address(RVA = "0x1454390", Offset = "0x1454390", VA = "0x1454390", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6000324")]
		[Address(RVA = "0x1454408", Offset = "0x1454408", VA = "0x1454408")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000325")]
		[Address(RVA = "0x14544FC", Offset = "0x14544FC", VA = "0x14544FC")]
		public TouchPad()
		{
		}
	}
	[Token(Token = "0x200006C")]
	public abstract class VirtualInput
	{
		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB316DC", Offset = "0xB316DC")]
		private Vector3 <virtualMousePosition>k__BackingField;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualAxis> m_VirtualAxes;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualButton> m_VirtualButtons;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<string> m_AlwaysUseVirtual;

		[Token(Token = "0x17000019")]
		public Vector3 virtualMousePosition
		{
			[Token(Token = "0x6000326")]
			[Address(RVA = "0x1454574", Offset = "0x1454574", VA = "0x1454574")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A44C", Offset = "0xB3A44C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000327")]
			[Address(RVA = "0x1454580", Offset = "0x1454580", VA = "0x1454580")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A45C", Offset = "0xB3A45C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0x1451794", Offset = "0x1451794", VA = "0x1451794")]
		public bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0x1451874", Offset = "0x1451874", VA = "0x1451874")]
		public bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600032A")]
		[Address(RVA = "0x14518DC", Offset = "0x14518DC", VA = "0x14518DC")]
		public void RegisterVirtualAxis(CrossPlatformInputManager.VirtualAxis axis)
		{
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0x1451A7C", Offset = "0x1451A7C", VA = "0x1451A7C")]
		public void RegisterVirtualButton(CrossPlatformInputManager.VirtualButton button)
		{
		}

		[Token(Token = "0x600032C")]
		[Address(RVA = "0x1451C5C", Offset = "0x1451C5C", VA = "0x1451C5C")]
		public void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x600032D")]
		[Address(RVA = "0x1451D6C", Offset = "0x1451D6C", VA = "0x1451D6C")]
		public void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x600032E")]
		[Address(RVA = "0x1451E04", Offset = "0x1451E04", VA = "0x1451E04")]
		public CrossPlatformInputManager.VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x600032F")]
		[Address(RVA = "0x1452250", Offset = "0x1452250", VA = "0x1452250")]
		public void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x6000330")]
		[Address(RVA = "0x1452350", Offset = "0x1452350", VA = "0x1452350")]
		public void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x6000331")]
		[Address(RVA = "0x1452454", Offset = "0x1452454", VA = "0x1452454")]
		public void SetVirtualMousePositionZ(float f)
		{
		}

		[Token(Token = "0x6000332")]
		public abstract float GetAxis(string name, bool raw);

		[Token(Token = "0x6000333")]
		public abstract bool GetButton(string name);

		[Token(Token = "0x6000334")]
		public abstract bool GetButtonDown(string name);

		[Token(Token = "0x6000335")]
		public abstract bool GetButtonUp(string name);

		[Token(Token = "0x6000336")]
		public abstract void SetButtonDown(string name);

		[Token(Token = "0x6000337")]
		public abstract void SetButtonUp(string name);

		[Token(Token = "0x6000338")]
		public abstract void SetAxisPositive(string name);

		[Token(Token = "0x6000339")]
		public abstract void SetAxisNegative(string name);

		[Token(Token = "0x600033A")]
		public abstract void SetAxisZero(string name);

		[Token(Token = "0x600033B")]
		public abstract void SetAxis(string name, float value);

		[Token(Token = "0x600033C")]
		public abstract Vector3 MousePosition();

		[Token(Token = "0x600033D")]
		[Address(RVA = "0x14537E0", Offset = "0x14537E0", VA = "0x14537E0")]
		protected VirtualInput()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput.PlatformSpecific
{
	[Token(Token = "0x200006D")]
	public class MobileInput : VirtualInput
	{
		[Token(Token = "0x600033E")]
		[Address(RVA = "0x1453034", Offset = "0x1453034", VA = "0x1453034")]
		private void AddButton(string name)
		{
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0x14530C8", Offset = "0x14530C8", VA = "0x14530C8")]
		private void AddAxes(string name)
		{
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0x1453154", Offset = "0x1453154", VA = "0x1453154", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0x14531F0", Offset = "0x14531F0", VA = "0x14531F0", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x6000342")]
		[Address(RVA = "0x14532A8", Offset = "0x14532A8", VA = "0x14532A8", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x6000343")]
		[Address(RVA = "0x1453354", Offset = "0x1453354", VA = "0x1453354", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x6000344")]
		[Address(RVA = "0x14533F4", Offset = "0x14533F4", VA = "0x14533F4", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x6000345")]
		[Address(RVA = "0x1453494", Offset = "0x1453494", VA = "0x1453494", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x6000346")]
		[Address(RVA = "0x1453530", Offset = "0x1453530", VA = "0x1453530", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0x14535D8", Offset = "0x14535D8", VA = "0x14535D8", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0x1453688", Offset = "0x1453688", VA = "0x1453688", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000349")]
		[Address(RVA = "0x1453738", Offset = "0x1453738", VA = "0x1453738", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600034A")]
		[Address(RVA = "0x14537D4", Offset = "0x14537D4", VA = "0x14537D4", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0x14516DC", Offset = "0x14516DC", VA = "0x14516DC")]
		public MobileInput()
		{
		}
	}
	[Token(Token = "0x200006E")]
	public class StandaloneInput : VirtualInput
	{
		[Token(Token = "0x600034C")]
		[Address(RVA = "0x14538A0", Offset = "0x14538A0", VA = "0x14538A0", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0x14538B4", Offset = "0x14538B4", VA = "0x14538B4", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0x14538C0", Offset = "0x14538C0", VA = "0x14538C0", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600034F")]
		[Address(RVA = "0x14538CC", Offset = "0x14538CC", VA = "0x14538CC", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000350")]
		[Address(RVA = "0x14538D8", Offset = "0x14538D8", VA = "0x14538D8", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x6000351")]
		[Address(RVA = "0x1453944", Offset = "0x1453944", VA = "0x1453944", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x6000352")]
		[Address(RVA = "0x14539B0", Offset = "0x14539B0", VA = "0x14539B0", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x6000353")]
		[Address(RVA = "0x1453A1C", Offset = "0x1453A1C", VA = "0x1453A1C", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x6000354")]
		[Address(RVA = "0x1453A88", Offset = "0x1453A88", VA = "0x1453A88", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x6000355")]
		[Address(RVA = "0x1453AF4", Offset = "0x1453AF4", VA = "0x1453AF4", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x6000356")]
		[Address(RVA = "0x1453B60", Offset = "0x1453B60", VA = "0x1453B60", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000357")]
		[Address(RVA = "0x14516E0", Offset = "0x14516E0", VA = "0x14516E0")]
		public StandaloneInput()
		{
		}
	}
}
namespace UnityStandardAssets.Vehicles.Car
{
	[Token(Token = "0x200006F")]
	public class BrakeLight : MonoBehaviour
	{
		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CarController car;

		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer m_Renderer;

		[Token(Token = "0x6000358")]
		[Address(RVA = "0xD5D560", Offset = "0xD5D560", VA = "0xD5D560")]
		private void Start()
		{
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0xD5D5B8", Offset = "0xD5D5B8", VA = "0xD5D5B8")]
		private void Update()
		{
		}

		[Token(Token = "0x600035A")]
		[Address(RVA = "0xD5D5EC", Offset = "0xD5D5EC", VA = "0xD5D5EC")]
		public BrakeLight()
		{
		}
	}
	[Token(Token = "0x2000070")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2DC5C", Offset = "0xB2DC5C")]
	public class CarAIControl : MonoBehaviour
	{
		[Token(Token = "0x2000287")]
		public enum BrakeCondition
		{
			[Token(Token = "0x4000D84")]
			NeverBrake,
			[Token(Token = "0x4000D85")]
			TargetDirectionDifference,
			[Token(Token = "0x4000D86")]
			TargetDistance
		}

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB316EC", Offset = "0xB316EC")]
		private float m_CautiousSpeedFactor;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB3172C", Offset = "0xB3172C")]
		private float m_CautiousMaxAngle;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_CautiousMaxDistance;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float m_CautiousAngularVelocityFactor;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_SteerSensitivity;

		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float m_AccelSensitivity;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_BrakeSensitivity;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float m_LateralWanderDistance;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float m_LateralWanderSpeed;

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB317E0", Offset = "0xB317E0")]
		private float m_AccelWanderAmount;

		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float m_AccelWanderSpeed;

		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private BrakeCondition m_BrakeCondition;

		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private bool m_Driving;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Transform m_Target;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private bool m_StopWhenTargetReached;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private float m_ReachTargetThreshold;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float m_RandomPerlin;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CarController m_CarController;

		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_AvoidOtherCarTime;

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float m_AvoidOtherCarSlowdown;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float m_AvoidPathOffset;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Rigidbody m_Rigidbody;

		[Token(Token = "0x600035B")]
		[Address(RVA = "0xD5D5F4", Offset = "0xD5D5F4", VA = "0xD5D5F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x600035C")]
		[Address(RVA = "0xD5D67C", Offset = "0xD5D67C", VA = "0xD5D67C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0xD5E018", Offset = "0xD5E018", VA = "0xD5E018")]
		private void OnCollisionStay(Collision col)
		{
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0xD5E2B4", Offset = "0xD5E2B4", VA = "0xD5E2B4")]
		public void SetTarget(Transform target)
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0xD5E2C4", Offset = "0xD5E2C4", VA = "0xD5E2C4")]
		public CarAIControl()
		{
		}
	}
	[Token(Token = "0x2000071")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2DCC0", Offset = "0xB2DCC0")]
	public class CarAudio : MonoBehaviour
	{
		[Token(Token = "0x2000288")]
		public enum EngineAudioOptions
		{
			[Token(Token = "0x4000D88")]
			Simple,
			[Token(Token = "0x4000D89")]
			FourChannel
		}

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EngineAudioOptions engineSoundStyle;

		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip lowAccelClip;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip lowDecelClip;

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip highAccelClip;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip highDecelClip;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pitchMultiplier;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float lowPitchMin;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float lowPitchMax;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float highPitchMultiplier;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float maxRolloffDistance;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float dopplerLevel;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool useDoppler;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource m_LowAccel;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource m_LowDecel;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private AudioSource m_HighAccel;

		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private AudioSource m_HighDecel;

		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool m_StartedSound;

		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private CarController m_CarController;

		[Token(Token = "0x6000360")]
		[Address(RVA = "0xD5E30C", Offset = "0xD5E30C", VA = "0xD5E30C")]
		private void StartSound()
		{
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0xD5E4C8", Offset = "0xD5E4C8", VA = "0xD5E4C8")]
		private void StopSound()
		{
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0xD5E5A8", Offset = "0xD5E5A8", VA = "0xD5E5A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000363")]
		[Address(RVA = "0xD5E3B8", Offset = "0xD5E3B8", VA = "0xD5E3B8")]
		private AudioSource SetUpEngineAudioSource(AudioClip clip)
		{
			return null;
		}

		[Token(Token = "0x6000364")]
		[Address(RVA = "0xD5E9A0", Offset = "0xD5E9A0", VA = "0xD5E9A0")]
		private static float ULerp(float from, float to, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6000365")]
		[Address(RVA = "0xD5E9B8", Offset = "0xD5E9B8", VA = "0xD5E9B8")]
		public CarAudio()
		{
		}
	}
	[Token(Token = "0x2000072")]
	internal enum CarDriveType
	{
		[Token(Token = "0x40002B9")]
		FrontWheelDrive,
		[Token(Token = "0x40002BA")]
		RearWheelDrive,
		[Token(Token = "0x40002BB")]
		FourWheelDrive
	}
	[Token(Token = "0x2000073")]
	internal enum SpeedType
	{
		[Token(Token = "0x40002BD")]
		MPH,
		[Token(Token = "0x40002BE")]
		KPH
	}
	[Token(Token = "0x2000074")]
	public class CarController : MonoBehaviour
	{
		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private CarDriveType m_CarDriveType;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private WheelCollider[] m_WheelColliders;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject[] m_WheelMeshes;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private WheelEffects[] m_WheelEffects;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Vector3 m_CentreOfMassOffset;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float m_MaximumSteerAngle;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB318E0", Offset = "0xB318E0")]
		[SerializeField]
		private float m_SteerHelper;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31920", Offset = "0xB31920")]
		[SerializeField]
		private float m_TractionControl;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float m_FullTorqueOverAllWheels;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private float m_ReverseTorque;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private float m_MaxHandbrakeTorque;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private float m_Downforce;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private SpeedType m_SpeedType;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private float m_Topspeed;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private static int NoOfGears;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float m_RevRangeBoundary;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private float m_SlipLimit;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private float m_BrakeTorque;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion[] m_WheelMeshLocalRotations;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 m_Prevpos;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 m_Pos;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float m_SteerAngle;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int m_GearNum;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float m_GearFactor;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float m_OldRotation;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float m_CurrentTorque;

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Rigidbody m_Rigidbody;

		[Token(Token = "0x40002DA")]
		private const float k_ReversingThreshold = 0.01f;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31A00", Offset = "0xB31A00")]
		private bool <Skidding>k__BackingField;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31A10", Offset = "0xB31A10")]
		private float <BrakeInput>k__BackingField;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31A20", Offset = "0xB31A20")]
		private float <Revs>k__BackingField;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31A30", Offset = "0xB31A30")]
		private float <AccelInput>k__BackingField;

		[Token(Token = "0x1700001A")]
		public bool Skidding
		{
			[Token(Token = "0x6000366")]
			[Address(RVA = "0xD5E9E4", Offset = "0xD5E9E4", VA = "0xD5E9E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A46C", Offset = "0xB3A46C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000367")]
			[Address(RVA = "0xD5E9EC", Offset = "0xD5E9EC", VA = "0xD5E9EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A47C", Offset = "0xB3A47C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700001B")]
		public float BrakeInput
		{
			[Token(Token = "0x6000368")]
			[Address(RVA = "0xD5E9F8", Offset = "0xD5E9F8", VA = "0xD5E9F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A48C", Offset = "0xB3A48C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000369")]
			[Address(RVA = "0xD5EA00", Offset = "0xD5EA00", VA = "0xD5EA00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A49C", Offset = "0xB3A49C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700001C")]
		public float CurrentSteerAngle
		{
			[Token(Token = "0x600036A")]
			[Address(RVA = "0xD5EA08", Offset = "0xD5EA08", VA = "0xD5EA08")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700001D")]
		public float CurrentSpeed
		{
			[Token(Token = "0x600036B")]
			[Address(RVA = "0xD5DFC4", Offset = "0xD5DFC4", VA = "0xD5DFC4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700001E")]
		public float MaxSpeed
		{
			[Token(Token = "0x600036C")]
			[Address(RVA = "0xD5EA10", Offset = "0xD5EA10", VA = "0xD5EA10")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700001F")]
		public float Revs
		{
			[Token(Token = "0x600036D")]
			[Address(RVA = "0xD5EA18", Offset = "0xD5EA18", VA = "0xD5EA18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A4AC", Offset = "0xB3A4AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600036E")]
			[Address(RVA = "0xD5EA20", Offset = "0xD5EA20", VA = "0xD5EA20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A4BC", Offset = "0xB3A4BC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000020")]
		public float AccelInput
		{
			[Token(Token = "0x600036F")]
			[Address(RVA = "0xD5EA28", Offset = "0xD5EA28", VA = "0xD5EA28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A4CC", Offset = "0xB3A4CC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000370")]
			[Address(RVA = "0xD5EA30", Offset = "0xD5EA30", VA = "0xD5EA30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A4DC", Offset = "0xB3A4DC")]
			private set
			{
			}
		}

		[Token(Token = "0x6000371")]
		[Address(RVA = "0xD5EA38", Offset = "0xD5EA38", VA = "0xD5EA38")]
		private void Start()
		{
		}

		[Token(Token = "0x6000372")]
		[Address(RVA = "0xD5EB84", Offset = "0xD5EB84", VA = "0xD5EB84")]
		private void GearChanging()
		{
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0xD5ECBC", Offset = "0xD5ECBC", VA = "0xD5ECBC")]
		private static float CurveFactor(float factor)
		{
			return default(float);
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0xD5ECD0", Offset = "0xD5ECD0", VA = "0xD5ECD0")]
		private static float ULerp(float from, float to, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6000375")]
		[Address(RVA = "0xD5ECE8", Offset = "0xD5ECE8", VA = "0xD5ECE8")]
		private void CalculateGearFactor()
		{
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0xD5EDF4", Offset = "0xD5EDF4", VA = "0xD5EDF4")]
		private void CalculateRevs()
		{
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0xD5DCF0", Offset = "0xD5DCF0", VA = "0xD5DCF0")]
		public void Move(float steering, float accel, float footbrake, float handbrake)
		{
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0xD5F418", Offset = "0xD5F418", VA = "0xD5F418")]
		private void CapSpeed()
		{
		}

		[Token(Token = "0x6000379")]
		[Address(RVA = "0xD5F140", Offset = "0xD5F140", VA = "0xD5F140")]
		private void ApplyDrive(float accel, float footbrake)
		{
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0xD5EEC8", Offset = "0xD5EEC8", VA = "0xD5EEC8")]
		private void SteerHelper()
		{
		}

		[Token(Token = "0x600037B")]
		[Address(RVA = "0xD5F554", Offset = "0xD5F554", VA = "0xD5F554")]
		private void AddDownForce()
		{
		}

		[Token(Token = "0x600037C")]
		[Address(RVA = "0xD5F6C0", Offset = "0xD5F6C0", VA = "0xD5F6C0")]
		private void CheckForWheelSpin()
		{
		}

		[Token(Token = "0x600037D")]
		[Address(RVA = "0xD5F888", Offset = "0xD5F888", VA = "0xD5F888")]
		private void TractionControl()
		{
		}

		[Token(Token = "0x600037E")]
		[Address(RVA = "0xD5FE14", Offset = "0xD5FE14", VA = "0xD5FE14")]
		private void AdjustTorque(float forwardSlip)
		{
		}

		[Token(Token = "0x600037F")]
		[Address(RVA = "0xD5FC78", Offset = "0xD5FC78", VA = "0xD5FC78")]
		private bool AnySkidSoundPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6000380")]
		[Address(RVA = "0xD5FE5C", Offset = "0xD5FE5C", VA = "0xD5FE5C")]
		public CarController()
		{
		}
	}
	[Token(Token = "0x2000075")]
	public class CarSelfRighting : MonoBehaviour
	{
		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_WaitTime;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_VelocityThreshold;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_LastOkTime;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody m_Rigidbody;

		[Token(Token = "0x6000382")]
		[Address(RVA = "0xD5FF5C", Offset = "0xD5FF5C", VA = "0xD5FF5C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000383")]
		[Address(RVA = "0xD5FFB4", Offset = "0xD5FFB4", VA = "0xD5FFB4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000384")]
		[Address(RVA = "0xD60060", Offset = "0xD60060", VA = "0xD60060")]
		private void RightCar()
		{
		}

		[Token(Token = "0x6000385")]
		[Address(RVA = "0xD601A4", Offset = "0xD601A4", VA = "0xD601A4")]
		public CarSelfRighting()
		{
		}
	}
	[Token(Token = "0x2000076")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2DD24", Offset = "0xB2DD24")]
	public class CarUserControl : MonoBehaviour
	{
		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CarController m_Car;

		[Token(Token = "0x6000386")]
		[Address(RVA = "0xD601B8", Offset = "0xD601B8", VA = "0xD601B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000387")]
		[Address(RVA = "0xD60210", Offset = "0xD60210", VA = "0xD60210")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000388")]
		[Address(RVA = "0xD602C0", Offset = "0xD602C0", VA = "0xD602C0")]
		public CarUserControl()
		{
		}
	}
	[Token(Token = "0x2000077")]
	public class Mudguard : MonoBehaviour
	{
		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CarController carController;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Quaternion m_OriginalRotation;

		[Token(Token = "0x6000389")]
		[Address(RVA = "0xD602C8", Offset = "0xD602C8", VA = "0xD602C8")]
		private void Start()
		{
		}

		[Token(Token = "0x600038A")]
		[Address(RVA = "0xD60304", Offset = "0xD60304", VA = "0xD60304")]
		private void Update()
		{
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0xD603EC", Offset = "0xD603EC", VA = "0xD603EC")]
		public Mudguard()
		{
		}
	}
	[Token(Token = "0x2000078")]
	public class SkidTrail : MonoBehaviour
	{
		[Token(Token = "0x2000289")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30D90", Offset = "0xB30D90")]
		private sealed class <Start>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SkidTrail <>4__this;

			[Token(Token = "0x17000291")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600112C")]
				[Address(RVA = "0xD605D0", Offset = "0xD605D0", VA = "0xD605D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000292")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600112E")]
				[Address(RVA = "0xD60638", Offset = "0xD60638", VA = "0xD60638", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001129")]
			[Address(RVA = "0xD60464", Offset = "0xD60464", VA = "0xD60464")]
			[DebuggerHidden]
			public <Start>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x600112A")]
			[Address(RVA = "0xD60498", Offset = "0xD60498", VA = "0xD60498", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600112B")]
			[Address(RVA = "0xD6049C", Offset = "0xD6049C", VA = "0xD6049C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600112D")]
			[Address(RVA = "0xD605D8", Offset = "0xD605D8", VA = "0xD605D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_PersistTime;

		[Token(Token = "0x600038C")]
		[Address(RVA = "0xD603F4", Offset = "0xD603F4", VA = "0xD603F4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3A4EC", Offset = "0xB3A4EC")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x600038D")]
		[Address(RVA = "0xD60490", Offset = "0xD60490", VA = "0xD60490")]
		public SkidTrail()
		{
		}
	}
	[Token(Token = "0x2000079")]
	public class Suspension : MonoBehaviour
	{
		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject wheel;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 m_TargetOriginalPosition;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 m_Origin;

		[Token(Token = "0x600038E")]
		[Address(RVA = "0xD60640", Offset = "0xD60640", VA = "0xD60640")]
		private void Start()
		{
		}

		[Token(Token = "0x600038F")]
		[Address(RVA = "0xD606A4", Offset = "0xD606A4", VA = "0xD606A4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0xD607CC", Offset = "0xD607CC", VA = "0xD607CC")]
		public Suspension()
		{
		}
	}
	[Token(Token = "0x200007A")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2DD88", Offset = "0xB2DD88")]
	public class WheelEffects : MonoBehaviour
	{
		[Token(Token = "0x200028A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30DA0", Offset = "0xB30DA0")]
		private sealed class <StartSkidTrail>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WheelEffects <>4__this;

			[Token(Token = "0x17000293")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001132")]
				[Address(RVA = "0xD60C28", Offset = "0xD60C28", VA = "0xD60C28", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000294")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001134")]
				[Address(RVA = "0xD60C90", Offset = "0xD60C90", VA = "0xD60C90", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600112F")]
			[Address(RVA = "0xD60A38", Offset = "0xD60A38", VA = "0xD60A38")]
			[DebuggerHidden]
			public <StartSkidTrail>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6001130")]
			[Address(RVA = "0xD60A6C", Offset = "0xD60A6C", VA = "0xD60A6C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001131")]
			[Address(RVA = "0xD60A70", Offset = "0xD60A70", VA = "0xD60A70", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001133")]
			[Address(RVA = "0xD60C30", Offset = "0xD60C30", VA = "0xD60C30", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform SkidTrailPrefab;

		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Transform skidTrailsDetachedParent;

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleSystem skidParticles;

		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31A70", Offset = "0xB31A70")]
		private bool <skidding>k__BackingField;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31A80", Offset = "0xB31A80")]
		private bool <PlayingAudio>k__BackingField;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioSource m_AudioSource;

		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform m_SkidTrail;

		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private WheelCollider m_WheelCollider;

		[Token(Token = "0x17000021")]
		public bool skidding
		{
			[Token(Token = "0x6000391")]
			[Address(RVA = "0xD607D4", Offset = "0xD607D4", VA = "0xD607D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A550", Offset = "0xB3A550")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000392")]
			[Address(RVA = "0xD607DC", Offset = "0xD607DC", VA = "0xD607DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A560", Offset = "0xB3A560")]
			private set
			{
			}
		}

		[Token(Token = "0x17000022")]
		public bool PlayingAudio
		{
			[Token(Token = "0x6000393")]
			[Address(RVA = "0xD607E8", Offset = "0xD607E8", VA = "0xD607E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A570", Offset = "0xB3A570")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000394")]
			[Address(RVA = "0xD607F0", Offset = "0xD607F0", VA = "0xD607F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A580", Offset = "0xB3A580")]
			private set
			{
			}
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0xD607FC", Offset = "0xD607FC", VA = "0xD607FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0xD5FAF0", Offset = "0xD5FAF0", VA = "0xD5FAF0")]
		public void EmitTyreSmoke()
		{
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0xD5FCE4", Offset = "0xD5FCE4", VA = "0xD5FCE4")]
		public void PlayAudio()
		{
		}

		[Token(Token = "0x6000398")]
		[Address(RVA = "0xD5FD1C", Offset = "0xD5FD1C", VA = "0xD5FD1C")]
		public void StopAudio()
		{
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0xD609C8", Offset = "0xD609C8", VA = "0xD609C8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3A590", Offset = "0xB3A590")]
		public IEnumerator StartSkidTrail()
		{
			return null;
		}

		[Token(Token = "0x600039A")]
		[Address(RVA = "0xD5FD50", Offset = "0xD5FD50", VA = "0xD5FD50")]
		public void EndSkidTrail()
		{
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0xD60A64", Offset = "0xD60A64", VA = "0xD60A64")]
		public WheelEffects()
		{
		}
	}
}
namespace UnityStandardAssets.Vehicles.Aeroplane
{
	[Token(Token = "0x200007B")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2DDEC", Offset = "0xB2DDEC")]
	public class AeroplaneAiControl : MonoBehaviour
	{
		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_RollSensitivity;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_PitchSensitivity;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_LateralWanderDistance;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float m_LateralWanderSpeed;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_MaxClimbAngle;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float m_MaxRollAngle;

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_SpeedEffect;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float m_TakeoffHeight;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform m_Target;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AeroplaneController m_AeroplaneController;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_RandomPerlin;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool m_TakenOff;

		[Token(Token = "0x600039C")]
		[Address(RVA = "0xD5A448", Offset = "0xD5A448", VA = "0xD5A448")]
		private void Awake()
		{
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0xD5A4B8", Offset = "0xD5A4B8", VA = "0xD5A4B8")]
		public void Reset()
		{
		}

		[Token(Token = "0x600039E")]
		[Address(RVA = "0xD5A4C0", Offset = "0xD5A4C0", VA = "0xD5A4C0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0xD5A800", Offset = "0xD5A800", VA = "0xD5A800")]
		public void SetTarget(Transform target)
		{
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0xD5A808", Offset = "0xD5A808", VA = "0xD5A808")]
		public AeroplaneAiControl()
		{
		}
	}
	[Token(Token = "0x200007C")]
	public class AeroplaneAudio : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200028B")]
		public class AdvancedSetttings
		{
			[Token(Token = "0x4000D90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float engineMinDistance;

			[Token(Token = "0x4000D91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float engineMaxDistance;

			[Token(Token = "0x4000D92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float engineDopplerLevel;

			[Token(Token = "0x4000D93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB371F4", Offset = "0xB371F4")]
			public float engineMasterVolume;

			[Token(Token = "0x4000D94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float windMinDistance;

			[Token(Token = "0x4000D95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float windMaxDistance;

			[Token(Token = "0x4000D96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float windDopplerLevel;

			[Token(Token = "0x4000D97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB3720C", Offset = "0xB3720C")]
			public float windMasterVolume;

			[Token(Token = "0x6001135")]
			[Address(RVA = "0xD5AC80", Offset = "0xD5AC80", VA = "0xD5AC80")]
			public AdvancedSetttings()
			{
			}
		}

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioClip m_EngineSound;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_EngineMinThrottlePitch;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float m_EngineMaxThrottlePitch;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_EngineFwdSpeedMultiplier;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip m_WindSound;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float m_WindBasePitch;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float m_WindSpeedPitchFactor;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float m_WindMaxSpeedVolume;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private AdvancedSetttings m_AdvancedSetttings;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AudioSource m_EngineSoundSource;

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource m_WindSoundSource;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AeroplaneController m_Plane;

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody m_Rigidbody;

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0xD5A828", Offset = "0xD5A828", VA = "0xD5A828")]
		private void Awake()
		{
		}

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0xD5AA18", Offset = "0xD5AA18", VA = "0xD5AA18")]
		private void Update()
		{
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0xD5ABD8", Offset = "0xD5ABD8", VA = "0xD5ABD8")]
		public AeroplaneAudio()
		{
		}
	}
	[Token(Token = "0x200007D")]
	public class AeroplaneControlSurfaceAnimator : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200028C")]
		public class ControlSurface
		{
			[Token(Token = "0x2000317")]
			public enum Type
			{
				[Token(Token = "0x4001062")]
				Aileron,
				[Token(Token = "0x4001063")]
				Elevator,
				[Token(Token = "0x4001064")]
				Rudder,
				[Token(Token = "0x4001065")]
				RuddervatorNegative,
				[Token(Token = "0x4001066")]
				RuddervatorPositive
			}

			[Token(Token = "0x4000D98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000D99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float amount;

			[Token(Token = "0x4000D9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Type type;

			[Token(Token = "0x4000D9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[HideInInspector]
			public Quaternion originalLocalRotation;

			[Token(Token = "0x6001136")]
			[Address(RVA = "0xD5B09C", Offset = "0xD5B09C", VA = "0xD5B09C")]
			public ControlSurface()
			{
			}
		}

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_Smoothing;

		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ControlSurface[] m_ControlSurfaces;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AeroplaneController m_Plane;

		[Token(Token = "0x60003A4")]
		[Address(RVA = "0xD5AC9C", Offset = "0xD5AC9C", VA = "0xD5AC9C")]
		private void Start()
		{
		}

		[Token(Token = "0x60003A5")]
		[Address(RVA = "0xD5AD60", Offset = "0xD5AD60", VA = "0xD5AD60")]
		private void Update()
		{
		}

		[Token(Token = "0x60003A6")]
		[Address(RVA = "0xD5AF38", Offset = "0xD5AF38", VA = "0xD5AF38")]
		private void RotateSurface(ControlSurface surface, Quaternion rotation)
		{
		}

		[Token(Token = "0x60003A7")]
		[Address(RVA = "0xD5B08C", Offset = "0xD5B08C", VA = "0xD5B08C")]
		public AeroplaneControlSurfaceAnimator()
		{
		}
	}
	[Token(Token = "0x200007E")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2DE50", Offset = "0xB2DE50")]
	public class AeroplaneController : MonoBehaviour
	{
		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_MaxEnginePower;

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_Lift;

		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_ZeroLiftSpeed;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float m_RollEffect;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_PitchEffect;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float m_YawEffect;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_BankedTurnEffect;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float m_AerodynamicEffect;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float m_AutoTurnPitch;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float m_AutoRollLevel;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float m_AutoPitchLevel;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float m_AirBrakesEffect;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float m_ThrottleChangeSpeed;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float m_DragIncreaseFactor;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31CB0", Offset = "0xB31CB0")]
		private float <Altitude>k__BackingField;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31CC0", Offset = "0xB31CC0")]
		private float <Throttle>k__BackingField;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31CD0", Offset = "0xB31CD0")]
		private bool <AirBrakes>k__BackingField;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31CE0", Offset = "0xB31CE0")]
		private float <ForwardSpeed>k__BackingField;

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31CF0", Offset = "0xB31CF0")]
		private float <EnginePower>k__BackingField;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31D00", Offset = "0xB31D00")]
		private float <RollAngle>k__BackingField;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31D10", Offset = "0xB31D10")]
		private float <PitchAngle>k__BackingField;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31D20", Offset = "0xB31D20")]
		private float <RollInput>k__BackingField;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31D30", Offset = "0xB31D30")]
		private float <PitchInput>k__BackingField;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31D40", Offset = "0xB31D40")]
		private float <YawInput>k__BackingField;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31D50", Offset = "0xB31D50")]
		private float <ThrottleInput>k__BackingField;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float m_OriginalDrag;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float m_OriginalAngularDrag;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float m_AeroFactor;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool m_Immobilized;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float m_BankedTurnAmount;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Rigidbody m_Rigidbody;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private WheelCollider[] m_WheelColliders;

		[Token(Token = "0x17000023")]
		public float Altitude
		{
			[Token(Token = "0x60003A8")]
			[Address(RVA = "0xD5B0A4", Offset = "0xD5B0A4", VA = "0xD5B0A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A5F4", Offset = "0xB3A5F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60003A9")]
			[Address(RVA = "0xD5B0AC", Offset = "0xD5B0AC", VA = "0xD5B0AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A604", Offset = "0xB3A604")]
			private set
			{
			}
		}

		[Token(Token = "0x17000024")]
		public float Throttle
		{
			[Token(Token = "0x60003AA")]
			[Address(RVA = "0xD5B0B4", Offset = "0xD5B0B4", VA = "0xD5B0B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A614", Offset = "0xB3A614")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60003AB")]
			[Address(RVA = "0xD5B0BC", Offset = "0xD5B0BC", VA = "0xD5B0BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A624", Offset = "0xB3A624")]
			private set
			{
			}
		}

		[Token(Token = "0x17000025")]
		public bool AirBrakes
		{
			[Token(Token = "0x60003AC")]
			[Address(RVA = "0xD5B0C4", Offset = "0xD5B0C4", VA = "0xD5B0C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A634", Offset = "0xB3A634")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60003AD")]
			[Address(RVA = "0xD5B0CC", Offset = "0xD5B0CC", VA = "0xD5B0CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A644", Offset = "0xB3A644")]
			private set
			{
			}
		}

		[Token(Token = "0x17000026")]
		public float ForwardSpeed
		{
			[Token(Token = "0x60003AE")]
			[Address(RVA = "0xD5B0D8", Offset = "0xD5B0D8", VA = "0xD5B0D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A654", Offset = "0xB3A654")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60003AF")]
			[Address(RVA = "0xD5B0E0", Offset = "0xD5B0E0", VA = "0xD5B0E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A664", Offset = "0xB3A664")]
			private set
			{
			}
		}

		[Token(Token = "0x17000027")]
		public float EnginePower
		{
			[Token(Token = "0x60003B0")]
			[Address(RVA = "0xD5B0E8", Offset = "0xD5B0E8", VA = "0xD5B0E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A674", Offset = "0xB3A674")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60003B1")]
			[Address(RVA = "0xD5B0F0", Offset = "0xD5B0F0", VA = "0xD5B0F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A684", Offset = "0xB3A684")]
			private set
			{
			}
		}

		[Token(Token = "0x17000028")]
		public float MaxEnginePower
		{
			[Token(Token = "0x60003B2")]
			[Address(RVA = "0xD5B0F8", Offset = "0xD5B0F8", VA = "0xD5B0F8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000029")]
		public float RollAngle
		{
			[Token(Token = "0x60003B3")]
			[Address(RVA = "0xD5B100", Offset = "0xD5B100", VA = "0xD5B100")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A694", Offset = "0xB3A694")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60003B4")]
			[Address(RVA = "0xD5B108", Offset = "0xD5B108", VA = "0xD5B108")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A6A4", Offset = "0xB3A6A4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700002A")]
		public float PitchAngle
		{
			[Token(Token = "0x60003B5")]
			[Address(RVA = "0xD5B110", Offset = "0xD5B110", VA = "0xD5B110")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A6B4", Offset = "0xB3A6B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60003B6")]
			[Address(RVA = "0xD5B118", Offset = "0xD5B118", VA = "0xD5B118")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A6C4", Offset = "0xB3A6C4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700002B")]
		public float RollInput
		{
			[Token(Token = "0x60003B7")]
			[Address(RVA = "0xD5B120", Offset = "0xD5B120", VA = "0xD5B120")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A6D4", Offset = "0xB3A6D4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60003B8")]
			[Address(RVA = "0xD5B128", Offset = "0xD5B128", VA = "0xD5B128")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A6E4", Offset = "0xB3A6E4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700002C")]
		public float PitchInput
		{
			[Token(Token = "0x60003B9")]
			[Address(RVA = "0xD5B130", Offset = "0xD5B130", VA = "0xD5B130")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A6F4", Offset = "0xB3A6F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60003BA")]
			[Address(RVA = "0xD5B138", Offset = "0xD5B138", VA = "0xD5B138")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A704", Offset = "0xB3A704")]
			private set
			{
			}
		}

		[Token(Token = "0x1700002D")]
		public float YawInput
		{
			[Token(Token = "0x60003BB")]
			[Address(RVA = "0xD5B140", Offset = "0xD5B140", VA = "0xD5B140")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A714", Offset = "0xB3A714")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60003BC")]
			[Address(RVA = "0xD5B148", Offset = "0xD5B148", VA = "0xD5B148")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A724", Offset = "0xB3A724")]
			private set
			{
			}
		}

		[Token(Token = "0x1700002E")]
		public float ThrottleInput
		{
			[Token(Token = "0x60003BD")]
			[Address(RVA = "0xD5B150", Offset = "0xD5B150", VA = "0xD5B150")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A734", Offset = "0xB3A734")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60003BE")]
			[Address(RVA = "0xD5B158", Offset = "0xD5B158", VA = "0xD5B158")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A744", Offset = "0xB3A744")]
			private set
			{
			}
		}

		[Token(Token = "0x60003BF")]
		[Address(RVA = "0xD5B160", Offset = "0xD5B160", VA = "0xD5B160")]
		private void Start()
		{
		}

		[Token(Token = "0x60003C0")]
		[Address(RVA = "0xD5A78C", Offset = "0xD5A78C", VA = "0xD5A78C")]
		public void Move(float rollInput, float pitchInput, float yawInput, float throttleInput, bool airBrakes)
		{
		}

		[Token(Token = "0x60003C1")]
		[Address(RVA = "0xD5B2BC", Offset = "0xD5B2BC", VA = "0xD5B2BC")]
		private void ClampInputs()
		{
		}

		[Token(Token = "0x60003C2")]
		[Address(RVA = "0xD5B3A4", Offset = "0xD5B3A4", VA = "0xD5B3A4")]
		private void CalculateRollAndPitchAngles()
		{
		}

		[Token(Token = "0x60003C3")]
		[Address(RVA = "0xD5B520", Offset = "0xD5B520", VA = "0xD5B520")]
		private void AutoLevel()
		{
		}

		[Token(Token = "0x60003C4")]
		[Address(RVA = "0xD5B60C", Offset = "0xD5B60C", VA = "0xD5B60C")]
		private void CalculateForwardSpeed()
		{
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0xD5B6C4", Offset = "0xD5B6C4", VA = "0xD5B6C4")]
		private void ControlThrottle()
		{
		}

		[Token(Token = "0x60003C6")]
		[Address(RVA = "0xD5B788", Offset = "0xD5B788", VA = "0xD5B788")]
		private void CalculateDrag()
		{
		}

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0xD5B834", Offset = "0xD5B834", VA = "0xD5B834")]
		private void CaluclateAerodynamicEffect()
		{
		}

		[Token(Token = "0x60003C8")]
		[Address(RVA = "0xD5BB00", Offset = "0xD5BB00", VA = "0xD5BB00")]
		private void CalculateLinearForces()
		{
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0xD5BD24", Offset = "0xD5BD24", VA = "0xD5BD24")]
		private void CalculateTorque()
		{
		}

		[Token(Token = "0x60003CA")]
		[Address(RVA = "0xD5BF90", Offset = "0xD5BF90", VA = "0xD5BF90")]
		private void CalculateAltitude()
		{
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0xD5C120", Offset = "0xD5C120", VA = "0xD5C120")]
		public void Immobilize()
		{
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0xD5C12C", Offset = "0xD5C12C", VA = "0xD5C12C")]
		public void Reset()
		{
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0xD5C134", Offset = "0xD5C134", VA = "0xD5C134")]
		public AeroplaneController()
		{
		}
	}
	[Token(Token = "0x200007F")]
	public class AeroplanePropellerAnimator : MonoBehaviour
	{
		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform m_PropellorModel;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform m_PropellorBlur;

		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Texture2D[] m_PropellorBlurTextures;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31D90", Offset = "0xB31D90")]
		private float m_ThrottleBlurStart;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31DD0", Offset = "0xB31DD0")]
		private float m_ThrottleBlurEnd;

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float m_MaxRpm;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AeroplaneController m_Plane;

		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int m_PropellorBlurState;

		[Token(Token = "0x4000336")]
		private const float k_RpmToDps = 60f;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Renderer m_PropellorModelRenderer;

		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Renderer m_PropellorBlurRenderer;

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0xD5C174", Offset = "0xD5C174", VA = "0xD5C174")]
		private void Awake()
		{
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0xD5C21C", Offset = "0xD5C21C", VA = "0xD5C21C")]
		private void Update()
		{
		}

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0xD5C3FC", Offset = "0xD5C3FC", VA = "0xD5C3FC")]
		public AeroplanePropellerAnimator()
		{
		}
	}
	[Token(Token = "0x2000080")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2DEB4", Offset = "0xB2DEB4")]
	public class AeroplaneUserControl2Axis : MonoBehaviour
	{
		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxRollAngle;

		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxPitchAngle;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AeroplaneController m_Aeroplane;

		[Token(Token = "0x60003D1")]
		[Address(RVA = "0xD5C420", Offset = "0xD5C420", VA = "0xD5C420")]
		private void Awake()
		{
		}

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0xD5C478", Offset = "0xD5C478", VA = "0xD5C478")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60003D3")]
		[Address(RVA = "0xD5C578", Offset = "0xD5C578", VA = "0xD5C578")]
		private void AdjustInputForMobileControls(ref float roll, ref float pitch, ref float throttle)
		{
		}

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0xD5C6B0", Offset = "0xD5C6B0", VA = "0xD5C6B0")]
		public AeroplaneUserControl2Axis()
		{
		}
	}
	[Token(Token = "0x2000081")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2DF18", Offset = "0xB2DF18")]
	public class AeroplaneUserControl4Axis : MonoBehaviour
	{
		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxRollAngle;

		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxPitchAngle;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AeroplaneController m_Aeroplane;

		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_Throttle;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool m_AirBrakes;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float m_Yaw;

		[Token(Token = "0x60003D5")]
		[Address(RVA = "0xD5C6C4", Offset = "0xD5C6C4", VA = "0xD5C6C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60003D6")]
		[Address(RVA = "0xD5C71C", Offset = "0xD5C71C", VA = "0xD5C71C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60003D7")]
		[Address(RVA = "0xD5C834", Offset = "0xD5C834", VA = "0xD5C834")]
		private void AdjustInputForMobileControls(ref float roll, ref float pitch, ref float throttle)
		{
		}

		[Token(Token = "0x60003D8")]
		[Address(RVA = "0xD5C92C", Offset = "0xD5C92C", VA = "0xD5C92C")]
		public AeroplaneUserControl4Axis()
		{
		}
	}
	[Token(Token = "0x2000082")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2DF7C", Offset = "0xB2DF7C")]
	public class JetParticleEffect : MonoBehaviour
	{
		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color minColour;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AeroplaneController m_Jet;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ParticleSystem m_System;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float m_OriginalStartSize;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_OriginalLifetime;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Color m_OriginalStartColor;

		[Token(Token = "0x60003D9")]
		[Address(RVA = "0xD5C940", Offset = "0xD5C940", VA = "0xD5C940")]
		private void Start()
		{
		}

		[Token(Token = "0x60003DA")]
		[Address(RVA = "0xD5CBCC", Offset = "0xD5CBCC", VA = "0xD5CBCC")]
		private void Update()
		{
		}

		[Token(Token = "0x60003DB")]
		[Address(RVA = "0xD5CA9C", Offset = "0xD5CA9C", VA = "0xD5CA9C")]
		private AeroplaneController FindAeroplaneParent()
		{
			return null;
		}

		[Token(Token = "0x60003DC")]
		[Address(RVA = "0xD5CD54", Offset = "0xD5CD54", VA = "0xD5CD54")]
		public JetParticleEffect()
		{
		}
	}
	[Token(Token = "0x2000083")]
	public class LandingGear : MonoBehaviour
	{
		[Token(Token = "0x200028D")]
		private enum GearState
		{
			[Token(Token = "0x4000D9D")]
			Raised = -1,
			[Token(Token = "0x4000D9E")]
			Lowered = 1
		}

		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float raiseAtAltitude;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float lowerAtAltitude;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GearState m_State;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animator m_Animator;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody m_Rigidbody;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AeroplaneController m_Plane;

		[Token(Token = "0x60003DD")]
		[Address(RVA = "0xD5CD5C", Offset = "0xD5CD5C", VA = "0xD5CD5C")]
		private void Start()
		{
		}

		[Token(Token = "0x60003DE")]
		[Address(RVA = "0xD5CDE4", Offset = "0xD5CDE4", VA = "0xD5CDE4")]
		private void Update()
		{
		}

		[Token(Token = "0x60003DF")]
		[Address(RVA = "0xD5CED0", Offset = "0xD5CED0", VA = "0xD5CED0")]
		public LandingGear()
		{
		}
	}
}
namespace UnityStandardAssets.Vehicles.Ball
{
	[Token(Token = "0x2000084")]
	public class Ball : MonoBehaviour
	{
		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_MovePower;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private bool m_UseTorque;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_MaxAngularVelocity;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float m_JumpPower;

		[Token(Token = "0x4000352")]
		private const float k_GroundRayLength = 1f;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody m_Rigidbody;

		[Token(Token = "0x60003E0")]
		[Address(RVA = "0xD5CEEC", Offset = "0xD5CEEC", VA = "0xD5CEEC")]
		private void Start()
		{
		}

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0xD5CF60", Offset = "0xD5CF60", VA = "0xD5CF60")]
		public void Move(Vector3 moveDirection, bool jump)
		{
		}

		[Token(Token = "0x60003E2")]
		[Address(RVA = "0xD5D15C", Offset = "0xD5D15C", VA = "0xD5D15C")]
		public Ball()
		{
		}
	}
	[Token(Token = "0x2000085")]
	public class BallUserControl : MonoBehaviour
	{
		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Ball ball;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 move;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform cam;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 camForward;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool jump;

		[Token(Token = "0x60003E3")]
		[Address(RVA = "0xD5D180", Offset = "0xD5D180", VA = "0xD5D180")]
		private void Awake()
		{
		}

		[Token(Token = "0x60003E4")]
		[Address(RVA = "0xD5D274", Offset = "0xD5D274", VA = "0xD5D274")]
		private void Update()
		{
		}

		[Token(Token = "0x60003E5")]
		[Address(RVA = "0xD5D51C", Offset = "0xD5D51C", VA = "0xD5D51C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60003E6")]
		[Address(RVA = "0xD5D558", Offset = "0xD5D558", VA = "0xD5D558")]
		public BallUserControl()
		{
		}
	}
}
namespace UnityStandardAssets.Characters.ThirdPerson
{
	[Token(Token = "0x2000086")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2DFE0", Offset = "0xB2DFE0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2DFE0", Offset = "0xB2DFE0")]
	public class AICharacterControl : MonoBehaviour
	{
		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31E60", Offset = "0xB31E60")]
		private NavMeshAgent <agent>k__BackingField;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB31E70", Offset = "0xB31E70")]
		private ThirdPersonCharacter <character>k__BackingField;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform target;

		[Token(Token = "0x1700002F")]
		public NavMeshAgent agent
		{
			[Token(Token = "0x60003E7")]
			[Address(RVA = "0x144F5CC", Offset = "0x144F5CC", VA = "0x144F5CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A754", Offset = "0xB3A754")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003E8")]
			[Address(RVA = "0x144F5D4", Offset = "0x144F5D4", VA = "0x144F5D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A764", Offset = "0xB3A764")]
			private set
			{
			}
		}

		[Token(Token = "0x17000030")]
		public ThirdPersonCharacter character
		{
			[Token(Token = "0x60003E9")]
			[Address(RVA = "0x144F5DC", Offset = "0x144F5DC", VA = "0x144F5DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A774", Offset = "0xB3A774")]
			get
			{
				return null;
			}
			[Token(Token = "0x60003EA")]
			[Address(RVA = "0x144F5E4", Offset = "0x144F5E4", VA = "0x144F5E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A784", Offset = "0xB3A784")]
			private set
			{
			}
		}

		[Token(Token = "0x60003EB")]
		[Address(RVA = "0x144F5EC", Offset = "0x144F5EC", VA = "0x144F5EC")]
		private void Start()
		{
		}

		[Token(Token = "0x60003EC")]
		[Address(RVA = "0x144F688", Offset = "0x144F688", VA = "0x144F688")]
		private void Update()
		{
		}

		[Token(Token = "0x60003ED")]
		[Address(RVA = "0x144F964", Offset = "0x144F964", VA = "0x144F964")]
		public void SetTarget(Transform target)
		{
		}

		[Token(Token = "0x60003EE")]
		[Address(RVA = "0x144F96C", Offset = "0x144F96C", VA = "0x144F96C")]
		public AICharacterControl()
		{
		}
	}
	[Token(Token = "0x2000087")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F06C", Offset = "0xB2F06C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F06C", Offset = "0xB2F06C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F06C", Offset = "0xB2F06C")]
	public class ThirdPersonCharacter : MonoBehaviour
	{
		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_MovingTurnSpeed;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_StationaryTurnSpeed;

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_JumpPower;

		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31EB0", Offset = "0xB31EB0")]
		[SerializeField]
		private float m_GravityMultiplier;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_RunCycleLegOffset;

		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float m_MoveSpeedMultiplier;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_AnimSpeedMultiplier;

		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float m_GroundCheckDistance;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody m_Rigidbody;

		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Animator m_Animator;

		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool m_IsGrounded;

		[Token(Token = "0x4000367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float m_OrigGroundCheckDistance;

		[Token(Token = "0x4000368")]
		private const float k_Half = 0.5f;

		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float m_TurnAmount;

		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float m_ForwardAmount;

		[Token(Token = "0x400036B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 m_GroundNormal;

		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_CapsuleHeight;

		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 m_CapsuleCenter;

		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CapsuleCollider m_Capsule;

		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool m_Crouching;

		[Token(Token = "0x60003EF")]
		[Address(RVA = "0x144F974", Offset = "0x144F974", VA = "0x144F974")]
		private void Start()
		{
		}

		[Token(Token = "0x60003F0")]
		[Address(RVA = "0x144F7AC", Offset = "0x144F7AC", VA = "0x144F7AC")]
		public void Move(Vector3 move, bool crouch, bool jump)
		{
		}

		[Token(Token = "0x60003F1")]
		[Address(RVA = "0x144FEFC", Offset = "0x144FEFC", VA = "0x144FEFC")]
		private void ScaleCapsuleForCrouching(bool crouch)
		{
		}

		[Token(Token = "0x60003F2")]
		[Address(RVA = "0x1450198", Offset = "0x1450198", VA = "0x1450198")]
		private void PreventStandingInLowHeadroom()
		{
		}

		[Token(Token = "0x60003F3")]
		[Address(RVA = "0x1450350", Offset = "0x1450350", VA = "0x1450350")]
		private void UpdateAnimator(Vector3 move)
		{
		}

		[Token(Token = "0x60003F4")]
		[Address(RVA = "0x144FDE8", Offset = "0x144FDE8", VA = "0x144FDE8")]
		private void HandleAirborneMovement()
		{
		}

		[Token(Token = "0x60003F5")]
		[Address(RVA = "0x144FCA8", Offset = "0x144FCA8", VA = "0x144FCA8")]
		private void HandleGroundedMovement(bool crouch, bool jump)
		{
		}

		[Token(Token = "0x60003F6")]
		[Address(RVA = "0x144FBD8", Offset = "0x144FBD8", VA = "0x144FBD8")]
		private void ApplyExtraTurnRotation()
		{
		}

		[Token(Token = "0x60003F7")]
		[Address(RVA = "0x145059C", Offset = "0x145059C", VA = "0x145059C")]
		public void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x144FA44", Offset = "0x144FA44", VA = "0x144FA44")]
		private void CheckGroundStatus()
		{
		}

		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x14506CC", Offset = "0x14506CC", VA = "0x14506CC")]
		public ThirdPersonCharacter()
		{
		}
	}
	[Token(Token = "0x2000088")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F120", Offset = "0xB2F120")]
	public class ThirdPersonUserControl : MonoBehaviour
	{
		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ThirdPersonCharacter m_Character;

		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_Cam;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 m_CamForward;

		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 m_Move;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool m_Jump;

		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x14506EC", Offset = "0x14506EC", VA = "0x14506EC")]
		private void Start()
		{
		}

		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x14507F4", Offset = "0x14507F4", VA = "0x14507F4")]
		private void Update()
		{
		}

		[Token(Token = "0x60003FC")]
		[Address(RVA = "0x1450874", Offset = "0x1450874", VA = "0x1450874")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x1450B18", Offset = "0x1450B18", VA = "0x1450B18")]
		public ThirdPersonUserControl()
		{
		}
	}
}
namespace UnityStandardAssets.Characters.FirstPerson
{
	[Token(Token = "0x2000089")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F184", Offset = "0xB2F184")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F184", Offset = "0xB2F184")]
	public class FirstPersonController : MonoBehaviour
	{
		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_IsWalking;

		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_WalkSpeed;

		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_RunSpeed;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB31F60", Offset = "0xB31F60")]
		private float m_RunstepLenghten;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_JumpSpeed;

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float m_StickToGroundForce;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_GravityMultiplier;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private MouseLook m_MouseLook;

		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private bool m_UseFovKick;

		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private FOVKick m_FovKick;

		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private bool m_UseHeadBob;

		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private CurveControlledBob m_HeadBob;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private LerpControlledBob m_JumpBob;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float m_StepInterval;

		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private AudioClip[] m_FootstepSounds;

		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private AudioClip m_JumpSound;

		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private AudioClip m_LandSound;

		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Camera m_Camera;

		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool m_Jump;

		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float m_YRotation;

		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector2 m_Input;

		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 m_MoveDir;

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private CharacterController m_CharacterController;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private CollisionFlags m_CollisionFlags;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool m_PreviouslyGrounded;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 m_OriginalCameraPosition;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float m_StepCycle;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float m_NextStep;

		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private bool m_Jumping;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private AudioSource m_AudioSource;

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x144CDA0", Offset = "0x144CDA0", VA = "0x144CDA0")]
		private void Start()
		{
		}

		[Token(Token = "0x60003FF")]
		[Address(RVA = "0x144CF00", Offset = "0x144CF00", VA = "0x144CF00")]
		private void Update()
		{
		}

		[Token(Token = "0x6000400")]
		[Address(RVA = "0x144D0EC", Offset = "0x144D0EC", VA = "0x144D0EC")]
		private void PlayLandingSound()
		{
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0x144D140", Offset = "0x144D140", VA = "0x144D140")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000402")]
		[Address(RVA = "0x144D6A4", Offset = "0x144D6A4", VA = "0x144D6A4")]
		private void PlayJumpSound()
		{
		}

		[Token(Token = "0x6000403")]
		[Address(RVA = "0x144D6E4", Offset = "0x144D6E4", VA = "0x144D6E4")]
		private void ProgressStepCycle(float speed)
		{
		}

		[Token(Token = "0x6000404")]
		[Address(RVA = "0x144D9C0", Offset = "0x144D9C0", VA = "0x144D9C0")]
		private void PlayFootStepAudio()
		{
		}

		[Token(Token = "0x6000405")]
		[Address(RVA = "0x144D7E8", Offset = "0x144D7E8", VA = "0x144D7E8")]
		private void UpdateCameraPosition(float speed)
		{
		}

		[Token(Token = "0x6000406")]
		[Address(RVA = "0x144D504", Offset = "0x144D504", VA = "0x144D504")]
		private void GetInput(out float speed)
		{
		}

		[Token(Token = "0x6000407")]
		[Address(RVA = "0x144D018", Offset = "0x144D018", VA = "0x144D018")]
		private void RotateView()
		{
		}

		[Token(Token = "0x6000408")]
		[Address(RVA = "0x144DDFC", Offset = "0x144DDFC", VA = "0x144DDFC")]
		private void OnControllerColliderHit(ControllerColliderHit hit)
		{
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0x144DF7C", Offset = "0x144DF7C", VA = "0x144DF7C")]
		public FirstPersonController()
		{
		}
	}
	[Token(Token = "0x200008A")]
	public class HeadBob : MonoBehaviour
	{
		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera Camera;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CurveControlledBob motionBob;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LerpControlledBob jumpAndLandingBob;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RigidbodyFirstPersonController rigidbodyFirstPersonController;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float StrideInterval;

		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB32070", Offset = "0xB32070")]
		public float RunningStrideLengthen;

		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool m_PreviouslyGrounded;

		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 m_OriginalCameraPosition;

		[Token(Token = "0x600040A")]
		[Address(RVA = "0x144E054", Offset = "0x144E054", VA = "0x144E054")]
		private void Start()
		{
		}

		[Token(Token = "0x600040B")]
		[Address(RVA = "0x144E0B0", Offset = "0x144E0B0", VA = "0x144E0B0")]
		private void Update()
		{
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0x144E2C8", Offset = "0x144E2C8", VA = "0x144E2C8")]
		public HeadBob()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008B")]
	public class MouseLook
	{
		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float XSensitivity;

		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float YSensitivity;

		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool clampVerticalRotation;

		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MinimumX;

		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaximumX;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool smooth;

		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float smoothTime;

		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lockCursor;

		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Quaternion m_CharacterTargetRot;

		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion m_CameraTargetRot;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_cursorIsLocked;

		[Token(Token = "0x600040D")]
		[Address(RVA = "0x144CEAC", Offset = "0x144CEAC", VA = "0x144CEAC")]
		public void Init(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x144DB0C", Offset = "0x144DB0C", VA = "0x144DB0C")]
		public void LookRotation(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x144E418", Offset = "0x144E418", VA = "0x144E418")]
		public void SetCursorLock(bool value)
		{
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0x144D9B0", Offset = "0x144D9B0", VA = "0x144D9B0")]
		public void UpdateCursorLock()
		{
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0x144E44C", Offset = "0x144E44C", VA = "0x144E44C")]
		private void InternalLockUpdate()
		{
		}

		[Token(Token = "0x6000412")]
		[Address(RVA = "0x144E350", Offset = "0x144E350", VA = "0x144E350")]
		private Quaternion ClampRotationAroundXAxis(Quaternion q)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000413")]
		[Address(RVA = "0x144E4C8", Offset = "0x144E4C8", VA = "0x144E4C8")]
		public MouseLook()
		{
		}
	}
	[Token(Token = "0x200008C")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F210", Offset = "0xB2F210")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F210", Offset = "0xB2F210")]
	public class RigidbodyFirstPersonController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200028E")]
		public class MovementSettings
		{
			[Token(Token = "0x4000D9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float ForwardSpeed;

			[Token(Token = "0x4000DA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float BackwardSpeed;

			[Token(Token = "0x4000DA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float StrafeSpeed;

			[Token(Token = "0x4000DA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float RunMultiplier;

			[Token(Token = "0x4000DA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KeyCode RunKey;

			[Token(Token = "0x4000DA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float JumpForce;

			[Token(Token = "0x4000DA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AnimationCurve SlopeCurveModifier;

			[Token(Token = "0x4000DA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[HideInInspector]
			public float CurrentTargetSpeed;

			[Token(Token = "0x6001137")]
			[Address(RVA = "0x144F248", Offset = "0x144F248", VA = "0x144F248")]
			public void UpdateDesiredTargetSpeed(Vector2 input)
			{
			}

			[Token(Token = "0x6001138")]
			[Address(RVA = "0x144F3F8", Offset = "0x144F3F8", VA = "0x144F3F8")]
			public MovementSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200028F")]
		public class AdvancedSettings
		{
			[Token(Token = "0x4000DA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float groundCheckDistance;

			[Token(Token = "0x4000DA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float stickToGroundHelperDistance;

			[Token(Token = "0x4000DA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float slowDownRate;

			[Token(Token = "0x4000DAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool airControl;

			[Token(Token = "0x4000DAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37244", Offset = "0xB37244")]
			public float shellOffset;

			[Token(Token = "0x6001139")]
			[Address(RVA = "0x144F5B0", Offset = "0x144F5B0", VA = "0x144F5B0")]
			public AdvancedSettings()
			{
			}
		}

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera cam;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MovementSettings movementSettings;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MouseLook mouseLook;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AdvancedSettings advancedSettings;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody m_RigidBody;

		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CapsuleCollider m_Capsule;

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_YRotation;

		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 m_GroundContactNormal;

		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_Jump;

		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool m_PreviouslyGrounded;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		private bool m_Jumping;

		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		private bool m_IsGrounded;

		[Token(Token = "0x17000031")]
		public Vector3 Velocity
		{
			[Token(Token = "0x6000414")]
			[Address(RVA = "0x144E2A4", Offset = "0x144E2A4", VA = "0x144E2A4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000032")]
		public bool Grounded
		{
			[Token(Token = "0x6000415")]
			[Address(RVA = "0x144E4FC", Offset = "0x144E4FC", VA = "0x144E4FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000033")]
		public bool Jumping
		{
			[Token(Token = "0x6000416")]
			[Address(RVA = "0x144E504", Offset = "0x144E504", VA = "0x144E504")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000034")]
		public bool Running
		{
			[Token(Token = "0x6000417")]
			[Address(RVA = "0x144E2C0", Offset = "0x144E2C0", VA = "0x144E2C0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000418")]
		[Address(RVA = "0x144E50C", Offset = "0x144E50C", VA = "0x144E50C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000419")]
		[Address(RVA = "0x144E5B8", Offset = "0x144E5B8", VA = "0x144E5B8")]
		private void Update()
		{
		}

		[Token(Token = "0x600041A")]
		[Address(RVA = "0x144E84C", Offset = "0x144E84C", VA = "0x144E84C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600041B")]
		[Address(RVA = "0x144EF10", Offset = "0x144EF10", VA = "0x144EF10")]
		private float SlopeMultiplier()
		{
			return default(float);
		}

		[Token(Token = "0x600041C")]
		[Address(RVA = "0x144EFC8", Offset = "0x144EFC8", VA = "0x144EFC8")]
		private void StickToGroundHelper()
		{
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0x144EE60", Offset = "0x144EE60", VA = "0x144EE60")]
		private Vector2 GetInput()
		{
			return default(Vector2);
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0x144E644", Offset = "0x144E644", VA = "0x144E644")]
		private void RotateView()
		{
		}

		[Token(Token = "0x600041F")]
		[Address(RVA = "0x144EC78", Offset = "0x144EC78", VA = "0x144EC78")]
		private void GroundCheck()
		{
		}

		[Token(Token = "0x6000420")]
		[Address(RVA = "0x144F314", Offset = "0x144F314", VA = "0x144F314")]
		public RigidbodyFirstPersonController()
		{
		}
	}
}
namespace UnityStandardAssets.Cameras
{
	[Token(Token = "0x200008D")]
	public abstract class AbstractTargetFollower : MonoBehaviour
	{
		[Token(Token = "0x2000290")]
		public enum UpdateType
		{
			[Token(Token = "0x4000DAD")]
			FixedUpdate,
			[Token(Token = "0x4000DAE")]
			LateUpdate,
			[Token(Token = "0x4000DAF")]
			ManualUpdate
		}

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Transform m_Target;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool m_AutoTargetPlayer;

		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private UpdateType m_UpdateType;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Rigidbody targetRigidbody;

		[Token(Token = "0x17000035")]
		public Transform Target
		{
			[Token(Token = "0x6000428")]
			[Address(RVA = "0x16EE0B8", Offset = "0x16EE0B8", VA = "0x16EE0B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0x16EDCC8", Offset = "0x16EDCC8", VA = "0x16EDCC8", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000422")]
		[Address(RVA = "0x16EDE2C", Offset = "0x16EDE2C", VA = "0x16EDE2C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000423")]
		[Address(RVA = "0x16EDF00", Offset = "0x16EDF00", VA = "0x16EDF00")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000424")]
		[Address(RVA = "0x16EDFD8", Offset = "0x16EDFD8", VA = "0x16EDFD8")]
		public void ManualUpdate()
		{
		}

		[Token(Token = "0x6000425")]
		protected abstract void FollowTarget(float deltaTime);

		[Token(Token = "0x6000426")]
		[Address(RVA = "0x16EDD70", Offset = "0x16EDD70", VA = "0x16EDD70")]
		public void FindAndTargetPlayer()
		{
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0x16EE0B0", Offset = "0x16EE0B0", VA = "0x16EE0B0", Slot = "6")]
		public virtual void SetTarget(Transform newTransform)
		{
		}

		[Token(Token = "0x6000429")]
		[Address(RVA = "0x16EE0C0", Offset = "0x16EE0C0", VA = "0x16EE0C0")]
		protected AbstractTargetFollower()
		{
		}
	}
	[Token(Token = "0x200008E")]
	[ExecuteInEditMode]
	public class AutoCam : PivotBasedCameraRig
	{
		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float m_MoveSpeed;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float m_TurnSpeed;

		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private float m_RollSpeed;

		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private bool m_FollowVelocity;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[SerializeField]
		private bool m_FollowTilt;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private float m_SpinTurnLimit;

		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float m_TargetVelocityLowerLimit;

		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private float m_SmoothTurnTime;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_LastFlatAngle;

		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float m_CurrentTurnAmount;

		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_TurnSpeedVelocityChange;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 m_RollUp;

		[Token(Token = "0x600042A")]
		[Address(RVA = "0x144AE38", Offset = "0x144AE38", VA = "0x144AE38", Slot = "5")]
		protected override void FollowTarget(float deltaTime)
		{
		}

		[Token(Token = "0x600042B")]
		[Address(RVA = "0x144B3AC", Offset = "0x144B3AC", VA = "0x144B3AC")]
		public AutoCam()
		{
		}
	}
	[Token(Token = "0x200008F")]
	public class FreeLookCam : PivotBasedCameraRig
	{
		[Token(Token = "0x40003C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float m_MoveSpeed;

		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB32148", Offset = "0xB32148")]
		[SerializeField]
		private float m_TurnSpeed;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private float m_TurnSmoothing;

		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private float m_TiltMax;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private float m_TiltMin;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private bool m_LockCursor;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[SerializeField]
		private bool m_VerticalAutoReturn;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_LookAngle;

		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_TiltAngle;

		[Token(Token = "0x40003CB")]
		private const float k_LookDistance = 100f;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 m_PivotEulers;

		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion m_PivotTargetRot;

		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion m_TransformTargetRot;

		[Token(Token = "0x600042C")]
		[Address(RVA = "0x144B45C", Offset = "0x144B45C", VA = "0x144B45C", Slot = "7")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0x144B594", Offset = "0x144B594", VA = "0x144B594")]
		protected void Update()
		{
		}

		[Token(Token = "0x600042E")]
		[Address(RVA = "0x144B984", Offset = "0x144B984", VA = "0x144B984")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0x144B9A8", Offset = "0x144B9A8", VA = "0x144B9A8", Slot = "5")]
		protected override void FollowTarget(float deltaTime)
		{
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0x144B5F4", Offset = "0x144B5F4", VA = "0x144B5F4")]
		private void HandleRotationMovement()
		{
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0x144BB70", Offset = "0x144BB70", VA = "0x144BB70")]
		public FreeLookCam()
		{
		}
	}
	[Token(Token = "0x2000090")]
	public class HandHeldCam : LookatTarget
	{
		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private float m_SwaySpeed;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float m_BaseSwayAmount;

		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private float m_TrackingSwayAmount;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB32208", Offset = "0xB32208")]
		[SerializeField]
		private float m_TrackingBias;

		[Token(Token = "0x6000432")]
		[Address(RVA = "0x144BB90", Offset = "0x144BB90", VA = "0x144BB90", Slot = "5")]
		protected override void FollowTarget(float deltaTime)
		{
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0x144C034", Offset = "0x144C034", VA = "0x144C034")]
		public HandHeldCam()
		{
		}
	}
	[Token(Token = "0x2000091")]
	public class LookatTarget : AbstractTargetFollower
	{
		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Vector2 m_RotationRange;

		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float m_FollowSpeed;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 m_FollowAngles;

		[Token(Token = "0x40003D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion m_OriginalRotation;

		[Token(Token = "0x40003D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Vector3 m_FollowVelocity;

		[Token(Token = "0x6000434")]
		[Address(RVA = "0x144C064", Offset = "0x144C064", VA = "0x144C064", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0x144BD20", Offset = "0x144BD20", VA = "0x144BD20", Slot = "5")]
		protected override void FollowTarget(float deltaTime)
		{
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0x144C054", Offset = "0x144C054", VA = "0x144C054")]
		public LookatTarget()
		{
		}
	}
	[Token(Token = "0x2000092")]
	public abstract class PivotBasedCameraRig : AbstractTargetFollower
	{
		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Transform m_Cam;

		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Transform m_Pivot;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Vector3 m_LastTargetPosition;

		[Token(Token = "0x6000437")]
		[Address(RVA = "0x144B51C", Offset = "0x144B51C", VA = "0x144B51C", Slot = "7")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0x144B454", Offset = "0x144B454", VA = "0x144B454")]
		protected PivotBasedCameraRig()
		{
		}
	}
	[Token(Token = "0x2000093")]
	public class ProtectCameraFromWallClip : MonoBehaviour
	{
		[Token(Token = "0x2000291")]
		public class RayHitComparer : IComparer
		{
			[Token(Token = "0x600113A")]
			[Address(RVA = "0x144C884", Offset = "0x144C884", VA = "0x144C884", Slot = "4")]
			public int Compare(object x, object y)
			{
				return default(int);
			}

			[Token(Token = "0x600113B")]
			[Address(RVA = "0x144C198", Offset = "0x144C198", VA = "0x144C198")]
			public RayHitComparer()
			{
			}
		}

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float clipMoveTime;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float returnTime;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sphereCastRadius;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool visualiseInEditor;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float closestDistance;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB32268", Offset = "0xB32268")]
		private bool <protecting>k__BackingField;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string dontClipTag;

		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform m_Cam;

		[Token(Token = "0x40003E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform m_Pivot;

		[Token(Token = "0x40003E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_OriginalDist;

		[Token(Token = "0x40003E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float m_MoveVelocity;

		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float m_CurrentDist;

		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Ray m_Ray;

		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RaycastHit[] m_Hits;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private RayHitComparer m_RayHitComparer;

		[Token(Token = "0x17000036")]
		public bool protecting
		{
			[Token(Token = "0x6000439")]
			[Address(RVA = "0x144C0AC", Offset = "0x144C0AC", VA = "0x144C0AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A794", Offset = "0xB3A794")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600043A")]
			[Address(RVA = "0x144C0B4", Offset = "0x144C0B4", VA = "0x144C0B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A7A4", Offset = "0xB3A7A4")]
			private set
			{
			}
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0x144C0C0", Offset = "0x144C0C0", VA = "0x144C0C0")]
		private void Start()
		{
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0x144C1A0", Offset = "0x144C1A0", VA = "0x144C1A0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0x144C80C", Offset = "0x144C80C", VA = "0x144C80C")]
		public ProtectCameraFromWallClip()
		{
		}
	}
	[Token(Token = "0x2000094")]
	public class TargetFieldOfView : AbstractTargetFollower
	{
		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_FovAdjustTime;

		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float m_ZoomAmountMultiplier;

		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private bool m_IncludeEffectsInSize;

		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_BoundSize;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float m_FovAdjustVelocity;

		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera m_Cam;

		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform m_LastTarget;

		[Token(Token = "0x600043E")]
		[Address(RVA = "0x144C98C", Offset = "0x144C98C", VA = "0x144C98C", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600043F")]
		[Address(RVA = "0x144CBE0", Offset = "0x144CBE0", VA = "0x144CBE0", Slot = "5")]
		protected override void FollowTarget(float deltaTime)
		{
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0x144CD5C", Offset = "0x144CD5C", VA = "0x144CD5C", Slot = "6")]
		public override void SetTarget(Transform newTransform)
		{
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0x144CA00", Offset = "0x144CA00", VA = "0x144CA00")]
		public static float MaxBoundsExtent(Transform obj, bool includeEffects)
		{
			return default(float);
		}

		[Token(Token = "0x6000442")]
		[Address(RVA = "0x144CD8C", Offset = "0x144CD8C", VA = "0x144CD8C")]
		public TargetFieldOfView()
		{
		}
	}
}
namespace UnityStandardAssets._2D
{
	[Token(Token = "0x2000095")]
	public class Camera2DFollow : MonoBehaviour
	{
		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float damping;

		[Token(Token = "0x40003F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float lookAheadFactor;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float lookAheadReturnSpeed;

		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float lookAheadMoveThreshold;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float m_OffsetZ;

		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 m_LastTargetPosition;

		[Token(Token = "0x40003F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 m_CurrentVelocity;

		[Token(Token = "0x40003F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 m_LookAheadPos;

		[Token(Token = "0x6000443")]
		[Address(RVA = "0xD6536C", Offset = "0xD6536C", VA = "0xD6536C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000444")]
		[Address(RVA = "0xD6547C", Offset = "0xD6547C", VA = "0xD6547C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000445")]
		[Address(RVA = "0xD6579C", Offset = "0xD6579C", VA = "0xD6579C")]
		public Camera2DFollow()
		{
		}
	}
	[Token(Token = "0x2000096")]
	public class CameraFollow : MonoBehaviour
	{
		[Token(Token = "0x40003FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float xMargin;

		[Token(Token = "0x40003FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float yMargin;

		[Token(Token = "0x40003FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float xSmooth;

		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float ySmooth;

		[Token(Token = "0x40003FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 maxXAndY;

		[Token(Token = "0x40003FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector2 minXAndY;

		[Token(Token = "0x4000400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform m_Player;

		[Token(Token = "0x6000446")]
		[Address(RVA = "0xD657B0", Offset = "0xD657B0", VA = "0xD657B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0xD65818", Offset = "0xD65818", VA = "0xD65818")]
		private bool CheckXMargin()
		{
			return default(bool);
		}

		[Token(Token = "0x6000448")]
		[Address(RVA = "0xD658C4", Offset = "0xD658C4", VA = "0xD658C4")]
		private bool CheckYMargin()
		{
			return default(bool);
		}

		[Token(Token = "0x6000449")]
		[Address(RVA = "0xD65970", Offset = "0xD65970", VA = "0xD65970")]
		private void Update()
		{
		}

		[Token(Token = "0x600044A")]
		[Address(RVA = "0xD65974", Offset = "0xD65974", VA = "0xD65974")]
		private void TrackPlayer()
		{
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0xD65BCC", Offset = "0xD65BCC", VA = "0xD65BCC")]
		public CameraFollow()
		{
		}
	}
	[Token(Token = "0x2000097")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F2AC", Offset = "0xB2F2AC")]
	public class Platformer2DUserControl : MonoBehaviour
	{
		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PlatformerCharacter2D m_Character;

		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool m_Jump;

		[Token(Token = "0x600044C")]
		[Address(RVA = "0xD65BE0", Offset = "0xD65BE0", VA = "0xD65BE0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600044D")]
		[Address(RVA = "0xD65C38", Offset = "0xD65C38", VA = "0xD65C38")]
		private void Update()
		{
		}

		[Token(Token = "0x600044E")]
		[Address(RVA = "0xD65CBC", Offset = "0xD65CBC", VA = "0xD65CBC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0xD66040", Offset = "0xD66040", VA = "0xD66040")]
		public Platformer2DUserControl()
		{
		}
	}
	[Token(Token = "0x2000098")]
	public class PlatformerCharacter2D : MonoBehaviour
	{
		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_MaxSpeed;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_JumpForce;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB322C8", Offset = "0xB322C8")]
		[SerializeField]
		private float m_CrouchSpeed;

		[Token(Token = "0x4000406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private bool m_AirControl;

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private LayerMask m_WhatIsGround;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform m_GroundCheck;

		[Token(Token = "0x4000409")]
		private const float k_GroundedRadius = 0.2f;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_Grounded;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform m_CeilingCheck;

		[Token(Token = "0x400040C")]
		private const float k_CeilingRadius = 0.01f;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Animator m_Anim;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Rigidbody2D m_Rigidbody2D;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_FacingRight;

		[Token(Token = "0x6000450")]
		[Address(RVA = "0xD66048", Offset = "0xD66048", VA = "0xD66048")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0xD6610C", Offset = "0xD6610C", VA = "0xD6610C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000452")]
		[Address(RVA = "0xD65D60", Offset = "0xD65D60", VA = "0xD65D60")]
		public void Move(float move, bool crouch, bool jump)
		{
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0xD66318", Offset = "0xD66318", VA = "0xD66318")]
		private void Flip()
		{
		}

		[Token(Token = "0x6000454")]
		[Address(RVA = "0xD66394", Offset = "0xD66394", VA = "0xD66394")]
		public PlatformerCharacter2D()
		{
		}
	}
	[Token(Token = "0x2000099")]
	public class Restarter : MonoBehaviour
	{
		[Token(Token = "0x6000455")]
		[Address(RVA = "0xD663BC", Offset = "0xD663BC", VA = "0xD663BC")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x6000456")]
		[Address(RVA = "0xD66458", Offset = "0xD66458", VA = "0xD66458")]
		public Restarter()
		{
		}
	}
}
namespace VRotein
{
	[Token(Token = "0x200009A")]
	public class VRoteinAuth : MonoBehaviour
	{
		[Token(Token = "0x6000457")]
		[Address(RVA = "0xD66460", Offset = "0xD66460", VA = "0xD66460")]
		private void Start()
		{
		}

		[Token(Token = "0x6000458")]
		[Address(RVA = "0xD66464", Offset = "0xD66464", VA = "0xD66464")]
		private void Update()
		{
		}

		[Token(Token = "0x6000459")]
		[Address(RVA = "0xD66468", Offset = "0xD66468", VA = "0xD66468")]
		public VRoteinAuth()
		{
		}
	}
}
namespace RootMotion
{
	[Token(Token = "0x200009B")]
	public class CameraController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000292")]
		public enum UpdateMode
		{
			[Token(Token = "0x4000DB1")]
			Update,
			[Token(Token = "0x4000DB2")]
			FixedUpdate,
			[Token(Token = "0x4000DB3")]
			LateUpdate
		}

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rotationSpace;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateMode updateMode;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lockCursor;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool smoothFollow;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float followSpeed;

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float distance;

		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float minDistance;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxDistance;

		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float zoomSpeed;

		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float zoomSensitivity;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rotationSensitivity;

		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float yMinLimit;

		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float yMaxLimit;

		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 offset;

		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool rotateAlways;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool rotateOnLeftButton;

		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public bool rotateOnRightButton;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		public bool rotateOnMiddleButton;

		[Token(Token = "0x4000423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB32328", Offset = "0xB32328")]
		private float <x>k__BackingField;

		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB32338", Offset = "0xB32338")]
		private float <y>k__BackingField;

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB32348", Offset = "0xB32348")]
		private float <distanceTarget>k__BackingField;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 targetDistance;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 position;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion rotation;

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 smoothPosition;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Camera cam;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion r;

		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 lastUp;

		[Token(Token = "0x17000037")]
		public float x
		{
			[Token(Token = "0x600045A")]
			[Address(RVA = "0x1409E54", Offset = "0x1409E54", VA = "0x1409E54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A7B4", Offset = "0xB3A7B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600045B")]
			[Address(RVA = "0x1409E5C", Offset = "0x1409E5C", VA = "0x1409E5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A7C4", Offset = "0xB3A7C4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000038")]
		public float y
		{
			[Token(Token = "0x600045C")]
			[Address(RVA = "0x1409E64", Offset = "0x1409E64", VA = "0x1409E64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A7D4", Offset = "0xB3A7D4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600045D")]
			[Address(RVA = "0x1409E6C", Offset = "0x1409E6C", VA = "0x1409E6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A7E4", Offset = "0xB3A7E4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000039")]
		public float distanceTarget
		{
			[Token(Token = "0x600045E")]
			[Address(RVA = "0x1409E74", Offset = "0x1409E74", VA = "0x1409E74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A7F4", Offset = "0xB3A7F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600045F")]
			[Address(RVA = "0x1409E7C", Offset = "0x1409E7C", VA = "0x1409E7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3A804", Offset = "0xB3A804")]
			private set
			{
			}
		}

		[Token(Token = "0x1700003A")]
		private float zoomAdd
		{
			[Token(Token = "0x6000467")]
			[Address(RVA = "0x140A2E0", Offset = "0x140A2E0", VA = "0x140A2E0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000460")]
		[Address(RVA = "0x1409E84", Offset = "0x1409E84", VA = "0x1409E84", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0x1409FA0", Offset = "0x1409FA0", VA = "0x1409FA0", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0x1409FFC", Offset = "0x1409FFC", VA = "0x1409FFC", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000463")]
		[Address(RVA = "0x140A034", Offset = "0x140A034", VA = "0x140A034", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000464")]
		[Address(RVA = "0x140A078", Offset = "0x140A078", VA = "0x140A078")]
		public void UpdateInput()
		{
		}

		[Token(Token = "0x6000465")]
		[Address(RVA = "0x1409FD4", Offset = "0x1409FD4", VA = "0x1409FD4")]
		public void UpdateTransform()
		{
		}

		[Token(Token = "0x6000466")]
		[Address(RVA = "0x140A354", Offset = "0x140A354", VA = "0x140A354")]
		public void UpdateTransform(float deltaTime)
		{
		}

		[Token(Token = "0x6000468")]
		[Address(RVA = "0x140A230", Offset = "0x140A230", VA = "0x140A230")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000469")]
		[Address(RVA = "0x140A7B4", Offset = "0x140A7B4", VA = "0x140A7B4")]
		public CameraController()
		{
		}
	}
	[Token(Token = "0x200009C")]
	public class CameraControllerFPS : MonoBehaviour
	{
		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotationSensitivity;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float yMinLimit;

		[Token(Token = "0x400042F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float yMaxLimit;

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float x;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float y;

		[Token(Token = "0x600046A")]
		[Address(RVA = "0x140A8A8", Offset = "0x140A8A8", VA = "0x140A8A8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600046B")]
		[Address(RVA = "0x140A8E0", Offset = "0x140A8E0", VA = "0x140A8E0")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x600046C")]
		[Address(RVA = "0x140AA98", Offset = "0x140AA98", VA = "0x140AA98")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0x140AB48", Offset = "0x140AB48", VA = "0x140AB48")]
		public CameraControllerFPS()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009D")]
	public enum Axis
	{
		[Token(Token = "0x4000433")]
		X,
		[Token(Token = "0x4000434")]
		Y,
		[Token(Token = "0x4000435")]
		Z
	}
	[Token(Token = "0x200009E")]
	public class AxisTools
	{
		[Token(Token = "0x600046E")]
		[Address(RVA = "0x140305C", Offset = "0x140305C", VA = "0x140305C")]
		public static Vector3 ToVector3(Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0x1403114", Offset = "0x1403114", VA = "0x1403114")]
		public static Axis ToAxis(Vector3 v)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000470")]
		[Address(RVA = "0x14031C0", Offset = "0x14031C0", VA = "0x14031C0")]
		public static Axis GetAxisToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000471")]
		[Address(RVA = "0x14033A4", Offset = "0x14033A4", VA = "0x14033A4")]
		public static Axis GetAxisToDirection(Transform t, Vector3 direction)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000472")]
		[Address(RVA = "0x14032DC", Offset = "0x14032DC", VA = "0x14032DC")]
		public static Vector3 GetAxisVectorToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000473")]
		[Address(RVA = "0x14034C0", Offset = "0x14034C0", VA = "0x14034C0")]
		public static Vector3 GetAxisVectorToDirection(Transform t, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000474")]
		[Address(RVA = "0x14036EC", Offset = "0x14036EC", VA = "0x14036EC")]
		public AxisTools()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009F")]
	public class BipedLimbOrientations
	{
		[Serializable]
		[Token(Token = "0x2000293")]
		public class LimbOrientation
		{
			[Token(Token = "0x4000DB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 upperBoneForwardAxis;

			[Token(Token = "0x4000DB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 lowerBoneForwardAxis;

			[Token(Token = "0x4000DB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 lastBoneLeftAxis;

			[Token(Token = "0x600113C")]
			[Address(RVA = "0x14039B4", Offset = "0x14039B4", VA = "0x14039B4")]
			public LimbOrientation(Vector3 upperBoneForwardAxis, Vector3 lowerBoneForwardAxis, Vector3 lastBoneLeftAxis)
			{
			}
		}

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LimbOrientation leftArm;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbOrientation rightArm;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbOrientation leftLeg;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LimbOrientation rightLeg;

		[Token(Token = "0x1700003B")]
		public static BipedLimbOrientations UMA
		{
			[Token(Token = "0x6000476")]
			[Address(RVA = "0x1403740", Offset = "0x1403740", VA = "0x1403740")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003C")]
		public static BipedLimbOrientations MaxBiped
		{
			[Token(Token = "0x6000477")]
			[Address(RVA = "0x1403A2C", Offset = "0x1403A2C", VA = "0x1403A2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000475")]
		[Address(RVA = "0x14036F4", Offset = "0x14036F4", VA = "0x14036F4")]
		public BipedLimbOrientations(LimbOrientation leftArm, LimbOrientation rightArm, LimbOrientation leftLeg, LimbOrientation rightLeg)
		{
		}
	}
	[Token(Token = "0x20000A0")]
	public static class BipedNaming
	{
		[Serializable]
		[Token(Token = "0x2000294")]
		public enum BoneType
		{
			[Token(Token = "0x4000DB8")]
			Unassigned,
			[Token(Token = "0x4000DB9")]
			Spine,
			[Token(Token = "0x4000DBA")]
			Head,
			[Token(Token = "0x4000DBB")]
			Arm,
			[Token(Token = "0x4000DBC")]
			Leg,
			[Token(Token = "0x4000DBD")]
			Tail,
			[Token(Token = "0x4000DBE")]
			Eye
		}

		[Serializable]
		[Token(Token = "0x2000295")]
		public enum BoneSide
		{
			[Token(Token = "0x4000DC0")]
			Center,
			[Token(Token = "0x4000DC1")]
			Left,
			[Token(Token = "0x4000DC2")]
			Right
		}

		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] typeLeft;

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] typeRight;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string[] typeSpine;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string[] typeHead;

		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string[] typeArm;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string[] typeLeg;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static string[] typeTail;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] typeEye;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string[] typeExclude;

		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static string[] typeExcludeSpine;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static string[] typeExcludeHead;

		[Token(Token = "0x4000445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static string[] typeExcludeArm;

		[Token(Token = "0x4000446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string[] typeExcludeLeg;

		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static string[] typeExcludeTail;

		[Token(Token = "0x4000448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static string[] typeExcludeEye;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static string[] pelvis;

		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static string[] hand;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static string[] foot;

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x1403CA0", Offset = "0x1403CA0", VA = "0x1403CA0")]
		public static Transform[] GetBonesOfType(BoneType boneType, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000479")]
		[Address(RVA = "0x1403FA0", Offset = "0x1403FA0", VA = "0x1403FA0")]
		public static Transform[] GetBonesOfSide(BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x14041F0", Offset = "0x14041F0", VA = "0x14041F0")]
		public static Transform[] GetBonesOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0x1404274", Offset = "0x1404274", VA = "0x1404274")]
		public static Transform GetFirstBoneOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0x1404320", Offset = "0x1404320", VA = "0x1404320")]
		public static Transform GetNamingMatch(Transform[] transforms, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0x1403E50", Offset = "0x1403E50", VA = "0x1403E50")]
		public static BoneType GetBoneType(string boneName)
		{
			return default(BoneType);
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0x1404150", Offset = "0x1404150", VA = "0x1404150")]
		public static BoneSide GetBoneSide(string boneName)
		{
			return default(BoneSide);
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0x1404B60", Offset = "0x1404B60", VA = "0x1404B60")]
		public static Transform GetBone(Transform[] transforms, BoneType boneType, BoneSide boneSide = BoneSide.Center, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0x1404978", Offset = "0x1404978", VA = "0x1404978")]
		private static bool isLeft(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0x1404A6C", Offset = "0x1404A6C", VA = "0x1404A6C")]
		private static bool isRight(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0x1404540", Offset = "0x1404540", VA = "0x1404540")]
		private static bool isSpine(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0x14045F4", Offset = "0x14045F4", VA = "0x14045F4")]
		private static bool isHead(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0x14046A8", Offset = "0x14046A8", VA = "0x14046A8")]
		private static bool isArm(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0x140475C", Offset = "0x140475C", VA = "0x140475C")]
		private static bool isLeg(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0x1404810", Offset = "0x1404810", VA = "0x1404810")]
		private static bool isTail(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0x14048C4", Offset = "0x14048C4", VA = "0x14048C4")]
		private static bool isEye(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0x1404D74", Offset = "0x1404D74", VA = "0x1404D74")]
		private static bool isTypeExclude(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0x1404454", Offset = "0x1404454", VA = "0x1404454")]
		private static bool matchesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x600048A")]
		[Address(RVA = "0x1404CE4", Offset = "0x1404CE4", VA = "0x1404CE4")]
		private static bool excludesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0x1404DE4", Offset = "0x1404DE4", VA = "0x1404DE4")]
		private static bool matchesLastLetter(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0x1404EBC", Offset = "0x1404EBC", VA = "0x1404EBC")]
		private static bool LastLetterIs(string boneName, string letter)
		{
			return default(bool);
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0x1404C68", Offset = "0x1404C68", VA = "0x1404C68")]
		private static string firstLetter(string boneName)
		{
			return null;
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0x1404BF0", Offset = "0x1404BF0", VA = "0x1404BF0")]
		private static string lastLetter(string boneName)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20000A1")]
	public class BipedReferences
	{
		[Token(Token = "0x2000296")]
		public struct AutoDetectParams
		{
			[Token(Token = "0x4000DC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool legsParentInSpine;

			[Token(Token = "0x4000DC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool includeEyes;

			[Token(Token = "0x17000295")]
			public static AutoDetectParams Default
			{
				[Token(Token = "0x600113E")]
				[Address(RVA = "0x1409E4C", Offset = "0x1409E4C", VA = "0x1409E4C")]
				get
				{
					return default(AutoDetectParams);
				}
			}

			[Token(Token = "0x600113D")]
			[Address(RVA = "0xC2E75C", Offset = "0xC2E75C", VA = "0xC2E75C")]
			public AutoDetectParams(bool legsParentInSpine, bool includeEyes)
			{
			}
		}

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform root;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform pelvis;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform leftThigh;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftCalf;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftFoot;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rightThigh;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform rightCalf;

		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform rightFoot;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform leftUpperArm;

		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftForearm;

		[Token(Token = "0x4000456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform leftHand;

		[Token(Token = "0x4000457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform rightUpperArm;

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform rightForearm;

		[Token(Token = "0x4000459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform rightHand;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform head;

		[Token(Token = "0x400045B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] spine;

		[Token(Token = "0x400045C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform[] eyes;

		[Token(Token = "0x1700003D")]
		public virtual bool isFilled
		{
			[Token(Token = "0x6000490")]
			[Address(RVA = "0x1406A30", Offset = "0x1406A30", VA = "0x1406A30", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700003E")]
		public bool isEmpty
		{
			[Token(Token = "0x6000491")]
			[Address(RVA = "0x1406E1C", Offset = "0x1406E1C", VA = "0x1406E1C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000492")]
		[Address(RVA = "0x1406E2C", Offset = "0x1406E2C", VA = "0x1406E2C", Slot = "5")]
		public virtual bool IsEmpty(bool includeRoot)
		{
			return default(bool);
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0x1407258", Offset = "0x1407258", VA = "0x1407258", Slot = "6")]
		public virtual bool Contains(Transform t, bool ignoreRoot = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000494")]
		[Address(RVA = "0x1407690", Offset = "0x1407690", VA = "0x1407690")]
		public static bool AutoDetectReferences(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0x1407CA0", Offset = "0x1407CA0", VA = "0x1407CA0")]
		public static void DetectReferencesByNaming(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6000496")]
		[Address(RVA = "0x14078DC", Offset = "0x14078DC", VA = "0x14078DC")]
		public static void AssignHumanoidReferences(ref BipedReferences references, Animator animator, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0x1408450", Offset = "0x1408450", VA = "0x1408450")]
		public static bool SetupError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000498")]
		[Address(RVA = "0x1408544", Offset = "0x1408544", VA = "0x1408544")]
		public static bool SetupWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0x1408A9C", Offset = "0x1408A9C", VA = "0x1408A9C")]
		private static bool IsNeckBone(Transform bone, Transform leftUpperArm)
		{
			return default(bool);
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0x14088A0", Offset = "0x14088A0", VA = "0x14088A0")]
		private static bool AddBoneToEyes(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0x1408718", Offset = "0x1408718", VA = "0x1408718")]
		private static bool AddBoneToSpine(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0x14085E4", Offset = "0x14085E4", VA = "0x14085E4")]
		private static void DetectLimb(BipedNaming.BoneType boneType, BipedNaming.BoneSide boneSide, ref Transform firstBone, ref Transform secondBone, ref Transform lastBone, Transform[] transforms)
		{
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0x14089A4", Offset = "0x14089A4", VA = "0x14089A4")]
		private static void AddBoneToHierarchy(ref Transform[] bones, Transform transform)
		{
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0x1408B98", Offset = "0x1408B98", VA = "0x1408B98")]
		private static bool LimbError(Transform bone1, Transform bone2, Transform bone3, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0x1409638", Offset = "0x1409638", VA = "0x1409638")]
		private static bool LimbWarning(Transform bone1, Transform bone2, Transform bone3, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0x140911C", Offset = "0x140911C", VA = "0x140911C")]
		private static bool SpineError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x140992C", Offset = "0x140992C", VA = "0x140992C")]
		private static bool SpineWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x140945C", Offset = "0x140945C", VA = "0x140945C")]
		private static bool EyesError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x1409934", Offset = "0x1409934", VA = "0x1409934")]
		private static bool EyesWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x140993C", Offset = "0x140993C", VA = "0x140993C")]
		private static bool RootHeightWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x1409AFC", Offset = "0x1409AFC", VA = "0x1409AFC")]
		private static bool FacingAxisWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x1409D14", Offset = "0x1409D14", VA = "0x1409D14")]
		private static float GetVerticalOffset(Vector3 p1, Vector3 p2, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x140786C", Offset = "0x140786C", VA = "0x140786C")]
		public BipedReferences()
		{
		}
	}
	[Token(Token = "0x20000A2")]
	public class Comments : MonoBehaviour
	{
		[Token(Token = "0x400045D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "MultilineAttribute", RVA = "0xB32358", Offset = "0xB32358")]
		public string text;

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0x140AB64", Offset = "0x140AB64", VA = "0x140AB64")]
		public Comments()
		{
		}
	}
	[Token(Token = "0x20000A3")]
	public class DemoGUIMessage : MonoBehaviour
	{
		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color color;

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x140AB6C", Offset = "0x140AB6C", VA = "0x140AB6C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x140ACAC", Offset = "0x140ACAC", VA = "0x140ACAC")]
		public DemoGUIMessage()
		{
		}
	}
	[Token(Token = "0x20000A4")]
	public class Hierarchy
	{
		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x16E9514", Offset = "0x16E9514", VA = "0x16E9514")]
		public static bool HierarchyIsValid(Transform[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0x16E9714", Offset = "0x16E9714", VA = "0x16E9714")]
		public static UnityEngine.Object ContainsDuplicate(UnityEngine.Object[] objects)
		{
			return null;
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x16E95AC", Offset = "0x16E95AC", VA = "0x16E95AC")]
		public static bool IsAncestor(Transform transform, Transform ancestor)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x16E9838", Offset = "0x16E9838", VA = "0x16E9838")]
		public static bool ContainsChild(Transform transform, Transform child)
		{
			return default(bool);
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x16E995C", Offset = "0x16E995C", VA = "0x16E995C")]
		public static void AddAncestors(Transform transform, Transform blocker, ref Transform[] array)
		{
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x16E9C04", Offset = "0x16E9C04", VA = "0x16E9C04")]
		public static Transform GetAncestor(Transform transform, int minChildCount)
		{
			return null;
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0x16E9D20", Offset = "0x16E9D20", VA = "0x16E9D20")]
		public static Transform GetFirstCommonAncestor(Transform t1, Transform t2)
		{
			return null;
		}

		[Token(Token = "0x60004B2")]
		[Address(RVA = "0x16E9EA8", Offset = "0x16E9EA8", VA = "0x16E9EA8")]
		public static Transform GetFirstCommonAncestor(Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x16EA23C", Offset = "0x16EA23C", VA = "0x16EA23C")]
		public static Transform GetFirstCommonAncestorRecursive(Transform transform, Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x16EA028", Offset = "0x16EA028", VA = "0x16EA028")]
		public static bool IsCommonAncestor(Transform transform, Transform[] transforms)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x16EA3DC", Offset = "0x16EA3DC", VA = "0x16EA3DC")]
		public Hierarchy()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A5")]
	public enum InterpolationMode
	{
		[Token(Token = "0x4000461")]
		None,
		[Token(Token = "0x4000462")]
		InOutCubic,
		[Token(Token = "0x4000463")]
		InOutQuintic,
		[Token(Token = "0x4000464")]
		InOutSine,
		[Token(Token = "0x4000465")]
		InQuintic,
		[Token(Token = "0x4000466")]
		InQuartic,
		[Token(Token = "0x4000467")]
		InCubic,
		[Token(Token = "0x4000468")]
		InQuadratic,
		[Token(Token = "0x4000469")]
		InElastic,
		[Token(Token = "0x400046A")]
		InElasticSmall,
		[Token(Token = "0x400046B")]
		InElasticBig,
		[Token(Token = "0x400046C")]
		InSine,
		[Token(Token = "0x400046D")]
		InBack,
		[Token(Token = "0x400046E")]
		OutQuintic,
		[Token(Token = "0x400046F")]
		OutQuartic,
		[Token(Token = "0x4000470")]
		OutCubic,
		[Token(Token = "0x4000471")]
		OutInCubic,
		[Token(Token = "0x4000472")]
		OutInQuartic,
		[Token(Token = "0x4000473")]
		OutElastic,
		[Token(Token = "0x4000474")]
		OutElasticSmall,
		[Token(Token = "0x4000475")]
		OutElasticBig,
		[Token(Token = "0x4000476")]
		OutSine,
		[Token(Token = "0x4000477")]
		OutBack,
		[Token(Token = "0x4000478")]
		OutBackCubic,
		[Token(Token = "0x4000479")]
		OutBackQuartic,
		[Token(Token = "0x400047A")]
		BackInCubic,
		[Token(Token = "0x400047B")]
		BackInQuartic
	}
	[Token(Token = "0x20000A6")]
	public class Interp
	{
		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x16D9780", Offset = "0x16D9780", VA = "0x16D9780")]
		public static float Float(float t, InterpolationMode mode)
		{
			return default(float);
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x16EAAE0", Offset = "0x16EAAE0", VA = "0x16EAAE0")]
		public static Vector3 V3(Vector3 v1, Vector3 v2, float t, InterpolationMode mode)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0x16EABE8", Offset = "0x16EABE8", VA = "0x16EABE8")]
		public static float LerpValue(float value, float target, float increaseSpeed, float decreaseSpeed)
		{
			return default(float);
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x16EA3E4", Offset = "0x16EA3E4", VA = "0x16EA3E4")]
		private static float None(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0x16EA3F0", Offset = "0x16EA3F0", VA = "0x16EA3F0")]
		private static float InOutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x16EA414", Offset = "0x16EA414", VA = "0x16EA414")]
		private static float InOutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x16EA450", Offset = "0x16EA450", VA = "0x16EA450")]
		private static float InQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x16EA468", Offset = "0x16EA468", VA = "0x16EA468")]
		private static float InQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x16EA47C", Offset = "0x16EA47C", VA = "0x16EA47C")]
		private static float InCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x16EA490", Offset = "0x16EA490", VA = "0x16EA490")]
		private static float InQuadratic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x16EA4A0", Offset = "0x16EA4A0", VA = "0x16EA4A0")]
		private static float OutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x16EA4E8", Offset = "0x16EA4E8", VA = "0x16EA4E8")]
		private static float OutQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x16EA520", Offset = "0x16EA520", VA = "0x16EA520")]
		private static float OutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x16EA548", Offset = "0x16EA548", VA = "0x16EA548")]
		private static float OutInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x16EACE4", Offset = "0x16EACE4", VA = "0x16EACE4")]
		private static float OutInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x16EA57C", Offset = "0x16EA57C", VA = "0x16EA57C")]
		private static float BackInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004C6")]
		[Address(RVA = "0x16EA5A4", Offset = "0x16EA5A4", VA = "0x16EA5A4")]
		private static float BackInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0x16EA5D4", Offset = "0x16EA5D4", VA = "0x16EA5D4")]
		private static float OutBackCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0x16EA608", Offset = "0x16EA608", VA = "0x16EA608")]
		private static float OutBackQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0x16EA64C", Offset = "0x16EA64C", VA = "0x16EA64C")]
		private static float OutElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0x16EA6B0", Offset = "0x16EA6B0", VA = "0x16EA6B0")]
		private static float OutElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x16EA714", Offset = "0x16EA714", VA = "0x16EA714")]
		private static float InElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0x16EA768", Offset = "0x16EA768", VA = "0x16EA768")]
		private static float InElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0x16EA7BC", Offset = "0x16EA7BC", VA = "0x16EA7BC")]
		private static float InSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0x16EA854", Offset = "0x16EA854", VA = "0x16EA854")]
		private static float OutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0x16EA8E8", Offset = "0x16EA8E8", VA = "0x16EA8E8")]
		private static float InOutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0x16EAD18", Offset = "0x16EAD18", VA = "0x16EAD18")]
		private static float InElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x16EA98C", Offset = "0x16EA98C", VA = "0x16EA98C")]
		private static float OutElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x16EAA70", Offset = "0x16EAA70", VA = "0x16EAA70")]
		private static float InBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x16EAAA0", Offset = "0x16EAAA0", VA = "0x16EAAA0")]
		private static float OutBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x16EAE00", Offset = "0x16EAE00", VA = "0x16EAE00")]
		public Interp()
		{
		}
	}
	[Token(Token = "0x20000A7")]
	public class LargeHeader : PropertyAttribute
	{
		[Token(Token = "0x400047C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x400047D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string color;

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x16EAE08", Offset = "0x16EAE08", VA = "0x16EAE08")]
		public LargeHeader(string name)
		{
		}

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x16EAE78", Offset = "0x16EAE78", VA = "0x16EAE78")]
		public LargeHeader(string name, string color)
		{
		}
	}
	[Token(Token = "0x20000A8")]
	public static class LayerMaskExtensions
	{
		[Token(Token = "0x60004D7")]
		[Address(RVA = "0x16EAEE8", Offset = "0x16EAEE8", VA = "0x16EAEE8")]
		public static bool Contains(LayerMask mask, int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0x16EAF40", Offset = "0x16EAF40", VA = "0x16EAF40")]
		public static LayerMask Create(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0x16EB00C", Offset = "0x16EB00C", VA = "0x16EB00C")]
		public static LayerMask Create(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0x16EAF58", Offset = "0x16EAF58", VA = "0x16EAF58")]
		public static LayerMask NamesToMask(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0x16EB024", Offset = "0x16EB024", VA = "0x16EB024")]
		public static LayerMask LayerNumbersToMask(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60004DC")]
		[Address(RVA = "0x16EB0C8", Offset = "0x16EB0C8", VA = "0x16EB0C8")]
		public static LayerMask Inverse(this LayerMask original)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0x16EB0F4", Offset = "0x16EB0F4", VA = "0x16EB0F4")]
		public static LayerMask AddToMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0x16EB144", Offset = "0x16EB144", VA = "0x16EB144")]
		public static LayerMask RemoveFromMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0x16EB1B0", Offset = "0x16EB1B0", VA = "0x16EB1B0")]
		public static string[] MaskToNames(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0x16EB2A4", Offset = "0x16EB2A4", VA = "0x16EB2A4")]
		public static int[] MaskToNumbers(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x16EB37C", Offset = "0x16EB37C", VA = "0x16EB37C")]
		public static string MaskToString(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x16EB3DC", Offset = "0x16EB3DC", VA = "0x16EB3DC")]
		public static string MaskToString(this LayerMask original, string delimiter)
		{
			return null;
		}
	}
	[Token(Token = "0x20000A9")]
	public static class QuaTools
	{
		[Token(Token = "0x60004E3")]
		[Address(RVA = "0x16EB40C", Offset = "0x16EB40C", VA = "0x16EB40C")]
		public static Quaternion Lerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x16EB558", Offset = "0x16EB558", VA = "0x16EB558")]
		public static Quaternion Slerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x16EB6A4", Offset = "0x16EB6A4", VA = "0x16EB6A4")]
		public static Quaternion LinearBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x16EB7B8", Offset = "0x16EB7B8", VA = "0x16EB7B8")]
		public static Quaternion SphericalBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x16DEA58", Offset = "0x16DEA58", VA = "0x16DEA58")]
		public static Quaternion FromToAroundAxis(Vector3 fromDirection, Vector3 toDirection, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0x16EB8CC", Offset = "0x16EB8CC", VA = "0x16EB8CC")]
		public static Quaternion RotationToLocalSpace(Quaternion space, Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x16D4BE4", Offset = "0x16D4BE4", VA = "0x16D4BE4")]
		public static Quaternion FromToRotation(Quaternion from, Quaternion to)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x16EB99C", Offset = "0x16EB99C", VA = "0x16EB99C")]
		public static Vector3 GetAxis(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x16EBC20", Offset = "0x16EBC20", VA = "0x16EBC20")]
		public static Quaternion ClampRotation(Quaternion rotation, float clampWeight, int clampSmoothing)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x16EBE34", Offset = "0x16EBE34", VA = "0x16EBE34")]
		public static float ClampAngle(float angle, float clampWeight, int clampSmoothing)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20000AA")]
	public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T>
	{
		[Token(Token = "0x400047E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T sInstance;

		[Token(Token = "0x1700003F")]
		public static T instance
		{
			[Token(Token = "0x60004ED")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004EE")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60004EF")]
		protected Singleton()
		{
		}
	}
	[Token(Token = "0x20000AB")]
	public class SolverManager : MonoBehaviour
	{
		[Token(Token = "0x400047F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32368", Offset = "0xB32368")]
		public bool fixTransforms;

		[Token(Token = "0x4000480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animation legacy;

		[Token(Token = "0x4000482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool updateFrame;

		[Token(Token = "0x4000483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool componentInitiated;

		[Token(Token = "0x4000484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool skipSolverUpdateFlag;

		[Token(Token = "0x17000040")]
		private bool animatePhysics
		{
			[Token(Token = "0x60004F7")]
			[Address(RVA = "0x16EC0EC", Offset = "0x16EC0EC", VA = "0x16EC0EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000041")]
		private bool isAnimated
		{
			[Token(Token = "0x60004FB")]
			[Address(RVA = "0x16EC43C", Offset = "0x16EC43C", VA = "0x16EC43C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000042")]
		private bool skipSolverUpdate
		{
			[Token(Token = "0x60004FF")]
			[Address(RVA = "0x16EC404", Offset = "0x16EC404", VA = "0x16EC404")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60004FE")]
			[Address(RVA = "0x16EC5E0", Offset = "0x16EC5E0", VA = "0x16EC5E0")]
			set
			{
			}
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0x16EBFB4", Offset = "0x16EBFB4", VA = "0x16EBFB4")]
		public void Disable()
		{
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x16EC04C", Offset = "0x16EC04C", VA = "0x16EC04C", Slot = "4")]
		protected virtual void InitiateSolver()
		{
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0x16EC050", Offset = "0x16EC050", VA = "0x16EC050", Slot = "5")]
		protected virtual void UpdateSolver()
		{
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0x16EC054", Offset = "0x16EC054", VA = "0x16EC054", Slot = "6")]
		protected virtual void FixTransforms()
		{
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x16EC058", Offset = "0x16EC058", VA = "0x16EC058")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0x16EC0E8", Offset = "0x16EC0E8", VA = "0x16EC0E8")]
		private void Start()
		{
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0x16EC090", Offset = "0x16EC090", VA = "0x16EC090")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0x16EC39C", Offset = "0x16EC39C", VA = "0x16EC39C")]
		private void Update()
		{
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0x16EC1DC", Offset = "0x16EC1DC", VA = "0x16EC1DC")]
		private void FindAnimatorRecursive(Transform t, bool findInChildren)
		{
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0x16EC4F8", Offset = "0x16EC4F8", VA = "0x16EC4F8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x16EC56C", Offset = "0x16EC56C", VA = "0x16EC56C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0x16EC5EC", Offset = "0x16EC5EC", VA = "0x16EC5EC")]
		public void UpdateSolverExternal()
		{
		}

		[Token(Token = "0x6000501")]
		[Address(RVA = "0x16E1228", Offset = "0x16E1228", VA = "0x16E1228")]
		public SolverManager()
		{
		}
	}
	[Token(Token = "0x20000AC")]
	public class TriggerEventBroadcaster : MonoBehaviour
	{
		[Token(Token = "0x4000485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject target;

		[Token(Token = "0x6000502")]
		[Address(RVA = "0x16EC634", Offset = "0x16EC634", VA = "0x16EC634")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000503")]
		[Address(RVA = "0x16EC6EC", Offset = "0x16EC6EC", VA = "0x16EC6EC")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0x16EC7A4", Offset = "0x16EC7A4", VA = "0x16EC7A4")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0x16EC85C", Offset = "0x16EC85C", VA = "0x16EC85C")]
		public TriggerEventBroadcaster()
		{
		}
	}
	[Token(Token = "0x20000AD")]
	public static class V3Tools
	{
		[Token(Token = "0x6000506")]
		[Address(RVA = "0x16EC864", Offset = "0x16EC864", VA = "0x16EC864")]
		public static Vector3 Lerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0x16EC95C", Offset = "0x16EC95C", VA = "0x16EC95C")]
		public static Vector3 Slerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000508")]
		[Address(RVA = "0x16ECA54", Offset = "0x16ECA54", VA = "0x16ECA54")]
		public static Vector3 ExtractVertical(Vector3 v, Vector3 verticalAxis, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0x16ECB4C", Offset = "0x16ECB4C", VA = "0x16ECB4C")]
		public static Vector3 ExtractHorizontal(Vector3 v, Vector3 normal, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0x16ECC4C", Offset = "0x16ECC4C", VA = "0x16ECC4C")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out bool changed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0x16ECE88", Offset = "0x16ECE88", VA = "0x16ECE88")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out float clampValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0x16ED0D8", Offset = "0x16ED0D8", VA = "0x16ED0D8")]
		public static Vector3 LineToPlane(Vector3 origin, Vector3 direction, Vector3 planeNormal, Vector3 planePoint)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20000AE")]
	public static class Warning
	{
		[Token(Token = "0x2000297")]
		public delegate void Logger(string message);

		[Token(Token = "0x4000486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool logged;

		[Token(Token = "0x600050D")]
		[Address(RVA = "0x16ED2D8", Offset = "0x16ED2D8", VA = "0x16ED2D8")]
		public static void Log(string message, Logger logger, bool logInEditMode = false)
		{
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0x16D8A5C", Offset = "0x16D8A5C", VA = "0x16D8A5C")]
		public static void Log(string message, Transform context, bool logInEditMode = false)
		{
		}
	}
}
namespace RootMotion.Demos
{
	[Token(Token = "0x20000AF")]
	public class AimBoxing : MonoBehaviour
	{
		[Token(Token = "0x4000487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x4000488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform pin;

		[Token(Token = "0x600050F")]
		[Address(RVA = "0x140ACE0", Offset = "0x140ACE0", VA = "0x140ACE0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0x140AD64", Offset = "0x140AD64", VA = "0x140AD64")]
		public AimBoxing()
		{
		}
	}
	[Token(Token = "0x20000B0")]
	public class SimpleAimingSystem : MonoBehaviour
	{
		[Token(Token = "0x4000489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB323A0", Offset = "0xB323A0")]
		public AimPoser aimPoser;

		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB323D8", Offset = "0xB323D8")]
		public AimIK aim;

		[Token(Token = "0x400048B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32410", Offset = "0xB32410")]
		public LookAtIK lookAt;

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32448", Offset = "0xB32448")]
		public Animator animator;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32480", Offset = "0xB32480")]
		public float crossfadeTime;

		[Token(Token = "0x400048E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB324B8", Offset = "0xB324B8")]
		public float minAimDistance;

		[Token(Token = "0x400048F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AimPoser.Pose aimPose;

		[Token(Token = "0x4000490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AimPoser.Pose lastPose;

		[Token(Token = "0x6000511")]
		[Address(RVA = "0x11A5398", Offset = "0x11A5398", VA = "0x11A5398")]
		private void Start()
		{
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0x11A53DC", Offset = "0x11A53DC", VA = "0x11A53DC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0x11A5530", Offset = "0x11A5530", VA = "0x11A5530")]
		private void Pose()
		{
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0x11A572C", Offset = "0x11A572C", VA = "0x11A572C")]
		private void LimitAimTarget()
		{
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0x11A5A6C", Offset = "0x11A5A6C", VA = "0x11A5A6C")]
		private void DirectCrossFade(string state, float target)
		{
		}

		[Token(Token = "0x6000516")]
		[Address(RVA = "0x11A5B44", Offset = "0x11A5B44", VA = "0x11A5B44")]
		public SimpleAimingSystem()
		{
		}
	}
	[Token(Token = "0x20000B1")]
	public class TerrainOffset : MonoBehaviour
	{
		[Token(Token = "0x4000491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x4000492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 raycastOffset;

		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask raycastLayers;

		[Token(Token = "0x4000494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float min;

		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float max;

		[Token(Token = "0x4000496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float lerpSpeed;

		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private RaycastHit hit;

		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 offset;

		[Token(Token = "0x6000517")]
		[Address(RVA = "0x11A68CC", Offset = "0x11A68CC", VA = "0x11A68CC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000518")]
		[Address(RVA = "0x11A6B30", Offset = "0x11A6B30", VA = "0x11A6B30")]
		private Vector3 GetGroundHeightOffset(Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000519")]
		[Address(RVA = "0x11A6D80", Offset = "0x11A6D80", VA = "0x11A6D80")]
		public TerrainOffset()
		{
		}
	}
	[Token(Token = "0x20000B2")]
	public class BipedIKvsAnimatorIK : MonoBehaviour
	{
		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BipedIK bipedIK;

		[Token(Token = "0x400049B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform lookAtTargetBiped;

		[Token(Token = "0x400049C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform lookAtTargetAnimator;

		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float lookAtWeight;

		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float lookAtBodyWeight;

		[Token(Token = "0x400049F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float lookAtHeadWeight;

		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float lookAtEyesWeight;

		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float lookAtClampWeight;

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float lookAtClampWeightHead;

		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float lookAtClampWeightEyes;

		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform footTargetBiped;

		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform footTargetAnimator;

		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float footPositionWeight;

		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float footRotationWeight;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform handTargetBiped;

		[Token(Token = "0x40004A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform handTargetAnimator;

		[Token(Token = "0x40004AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float handPositionWeight;

		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float handRotationWeight;

		[Token(Token = "0x600051A")]
		[Address(RVA = "0x140C864", Offset = "0x140C864", VA = "0x140C864")]
		private void OnAnimatorIK(int layer)
		{
		}

		[Token(Token = "0x600051B")]
		[Address(RVA = "0x140CD10", Offset = "0x140CD10", VA = "0x140CD10")]
		public BipedIKvsAnimatorIK()
		{
		}
	}
	[Token(Token = "0x20000B3")]
	public class MechSpider : MonoBehaviour
	{
		[Token(Token = "0x40004AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask raycastLayers;

		[Token(Token = "0x40004AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float scale;

		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform body;

		[Token(Token = "0x40004AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MechSpiderLeg[] legs;

		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float legRotationWeight;

		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rootPositionSpeed;

		[Token(Token = "0x40004B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rootRotationSpeed;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float breatheSpeed;

		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float breatheMagnitude;

		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float height;

		[Token(Token = "0x40004B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float minHeight;

		[Token(Token = "0x40004B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float raycastHeight;

		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float raycastDistance;

		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 lastPosition;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 defaultBodyLocalPosition;

		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float sine;

		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RaycastHit rootHit;

		[Token(Token = "0x600051C")]
		[Address(RVA = "0x119F998", Offset = "0x119F998", VA = "0x119F998")]
		private void Update()
		{
		}

		[Token(Token = "0x600051D")]
		[Address(RVA = "0x11A03CC", Offset = "0x11A03CC", VA = "0x11A03CC")]
		private Vector3 GetLegCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600051E")]
		[Address(RVA = "0x11A00B4", Offset = "0x11A00B4", VA = "0x11A00B4")]
		private Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0x11A0574", Offset = "0x11A0574", VA = "0x11A0574")]
		public MechSpider()
		{
		}
	}
	[Token(Token = "0x20000B4")]
	public class MechSpiderController : MonoBehaviour
	{
		[Token(Token = "0x40004BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform cameraTransform;

		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speed;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float turnSpeed;

		[Token(Token = "0x17000043")]
		public Vector3 inputVector
		{
			[Token(Token = "0x6000520")]
			[Address(RVA = "0x11A05A0", Offset = "0x11A05A0", VA = "0x11A05A0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0x11A0640", Offset = "0x11A0640", VA = "0x11A0640")]
		private void Update()
		{
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0x11A08D8", Offset = "0x11A08D8", VA = "0x11A08D8")]
		public MechSpiderController()
		{
		}
	}
	[Token(Token = "0x20000B5")]
	public class MechSpiderLeg : MonoBehaviour
	{
		[Token(Token = "0x2000298")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30DB0", Offset = "0xB30DB0")]
		private sealed class <Step>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MechSpiderLeg <>4__this;

			[Token(Token = "0x4000DC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 stepStartPosition;

			[Token(Token = "0x4000DC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 targetPosition;

			[Token(Token = "0x17000296")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001146")]
				[Address(RVA = "0x11A1514", Offset = "0x11A1514", VA = "0x11A1514", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000297")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001148")]
				[Address(RVA = "0x11A157C", Offset = "0x11A157C", VA = "0x11A157C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001143")]
			[Address(RVA = "0x11A11A4", Offset = "0x11A11A4", VA = "0x11A11A4")]
			[DebuggerHidden]
			public <Step>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x6001144")]
			[Address(RVA = "0x11A1200", Offset = "0x11A1200", VA = "0x11A1200", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001145")]
			[Address(RVA = "0x11A1204", Offset = "0x11A1204", VA = "0x11A1204", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001147")]
			[Address(RVA = "0x11A151C", Offset = "0x11A151C", VA = "0x11A151C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MechSpiderLeg unSync;

		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 offset;

		[Token(Token = "0x40004C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minDelay;

		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxOffset;

		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float stepSpeed;

		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float footHeight;

		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float velocityPrediction;

		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float raycastFocus;

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve yOffset;

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ParticleSystem sand;

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IK ik;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float stepProgress;

		[Token(Token = "0x40004CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float lastStepTime;

		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 defaultPosition;

		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private RaycastHit hit;

		[Token(Token = "0x17000044")]
		public bool isStepping
		{
			[Token(Token = "0x6000523")]
			[Address(RVA = "0x11A08EC", Offset = "0x11A08EC", VA = "0x11A08EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000045")]
		public Vector3 position
		{
			[Token(Token = "0x6000524")]
			[Address(RVA = "0x11A0540", Offset = "0x11A0540", VA = "0x11A0540")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000525")]
			[Address(RVA = "0x11A0900", Offset = "0x11A0900", VA = "0x11A0900")]
			set
			{
			}
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0x11A0950", Offset = "0x11A0950", VA = "0x11A0950")]
		private void Start()
		{
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0x11A0B0C", Offset = "0x11A0B0C", VA = "0x11A0B0C")]
		private Vector3 GetStepTarget(out bool stepFound, float focus, float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0x11A0EDC", Offset = "0x11A0EDC", VA = "0x11A0EDC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0x11A10F8", Offset = "0x11A10F8", VA = "0x11A10F8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3A884", Offset = "0xB3A884")]
		private IEnumerator Step(Vector3 stepStartPosition, Vector3 targetPosition)
		{
			return null;
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0x11A11D0", Offset = "0x11A11D0", VA = "0x11A11D0")]
		public MechSpiderLeg()
		{
		}
	}
	[Token(Token = "0x20000B6")]
	public class MechSpiderParticles : MonoBehaviour
	{
		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpiderController mechSpiderController;

		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem particles;

		[Token(Token = "0x600052B")]
		[Address(RVA = "0x11A1584", Offset = "0x11A1584", VA = "0x11A1584")]
		private void Start()
		{
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0x11A1630", Offset = "0x11A1630", VA = "0x11A1630")]
		private void Update()
		{
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0x11A17D0", Offset = "0x11A17D0", VA = "0x11A17D0")]
		public MechSpiderParticles()
		{
		}
	}
	[Token(Token = "0x20000B7")]
	public class AnimationWarping : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000299")]
		public struct Warp
		{
			[Token(Token = "0x4000DCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3727C", Offset = "0xB3727C")]
			public int animationLayer;

			[Token(Token = "0x4000DCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB372B4", Offset = "0xB372B4")]
			public string animationState;

			[Token(Token = "0x4000DCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB372EC", Offset = "0xB372EC")]
			public AnimationCurve weightCurve;

			[Token(Token = "0x4000DCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37324", Offset = "0xB37324")]
			public Transform warpFrom;

			[Token(Token = "0x4000DCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3735C", Offset = "0xB3735C")]
			public Transform warpTo;

			[Token(Token = "0x4000DCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37394", Offset = "0xB37394")]
			public FullBodyBipedEffector effector;
		}

		[Serializable]
		[Token(Token = "0x200029A")]
		public enum EffectorMode
		{
			[Token(Token = "0x4000DD1")]
			PositionOffset,
			[Token(Token = "0x4000DD2")]
			Position
		}

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB324F0", Offset = "0xB324F0")]
		public Animator animator;

		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32528", Offset = "0xB32528")]
		public EffectorMode effectorMode;

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0xB32560", Offset = "0xB32560")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32560", Offset = "0xB32560")]
		public Warp[] warps;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private EffectorMode lastMode;

		[Token(Token = "0x600052E")]
		[Address(RVA = "0x140AD6C", Offset = "0x140AD6C", VA = "0x140AD6C", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600052F")]
		[Address(RVA = "0x140AD98", Offset = "0x140AD98", VA = "0x140AD98")]
		public float GetWarpWeight(int warpIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0x140AFA0", Offset = "0x140AFA0", VA = "0x140AFA0", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0x140B354", Offset = "0x140B354", VA = "0x140B354")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0x140B3F4", Offset = "0x140B3F4", VA = "0x140B3F4")]
		public AnimationWarping()
		{
		}
	}
	[Token(Token = "0x20000B8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F320", Offset = "0xB2F320")]
	public class AnimatorController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotateSpeed;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blendSpeed;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxAngle;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float moveSpeed;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rootMotionWeight;

		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Animator animator;

		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 moveBlend;

		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Vector3 moveInput;

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Vector3 velocity;

		[Token(Token = "0x6000533")]
		[Address(RVA = "0x140B3FC", Offset = "0x140B3FC", VA = "0x140B3FC", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0x140B454", Offset = "0x140B454", VA = "0x140B454")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0x140B68C", Offset = "0x140B68C", VA = "0x140B68C", Slot = "5")]
		public virtual void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0x140B8F0", Offset = "0x140B8F0", VA = "0x140B8F0")]
		public AnimatorController3rdPerson()
		{
		}
	}
	[Token(Token = "0x20000B9")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F384", Offset = "0xB2F384")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F384", Offset = "0xB2F384")]
	public class AnimatorController3rdPersonIK : AnimatorController3rdPerson
	{
		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB325B0", Offset = "0xB325B0")]
		public float headLookWeight;

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 gunHoldOffset;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Recoil recoil;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AimIK aim;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 headLookAxis;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 leftHandPosRelToRightHand;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion leftHandRotRelToRightHand;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 aimTarget;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x6000537")]
		[Address(RVA = "0x140B904", Offset = "0x140B904", VA = "0x140B904", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000538")]
		[Address(RVA = "0x140BA70", Offset = "0x140BA70", VA = "0x140BA70", Slot = "5")]
		public override void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x6000539")]
		[Address(RVA = "0x140BAE4", Offset = "0x140BAE4", VA = "0x140BAE4")]
		private void Read()
		{
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0x140BC3C", Offset = "0x140BC3C", VA = "0x140BC3C")]
		private void AimIK()
		{
		}

		[Token(Token = "0x600053B")]
		[Address(RVA = "0x140BC84", Offset = "0x140BC84", VA = "0x140BC84")]
		private void FBBIK()
		{
		}

		[Token(Token = "0x600053C")]
		[Address(RVA = "0x140C27C", Offset = "0x140C27C", VA = "0x140C27C")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x600053D")]
		[Address(RVA = "0x140C040", Offset = "0x140C040", VA = "0x140C040")]
		private void HeadLookAt(Vector3 lookAtTarget)
		{
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0x140C5D4", Offset = "0x140C5D4", VA = "0x140C5D4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0x140C6CC", Offset = "0x140C6CC", VA = "0x140C6CC")]
		public AnimatorController3rdPersonIK()
		{
		}
	}
	[Token(Token = "0x20000BA")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F410", Offset = "0xB2F410")]
	public class CharacterAnimationThirdPersonIK : CharacterAnimationThirdPerson
	{
		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x6000540")]
		[Address(RVA = "0x140DBAC", Offset = "0x140DBAC", VA = "0x140DBAC", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0x140DC0C", Offset = "0x140DC0C", VA = "0x140DC0C", Slot = "7")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0x140DEC8", Offset = "0x140DEC8", VA = "0x140DEC8")]
		private void RotateEffector(IKEffector effector, Quaternion rotation, float mlp)
		{
		}

		[Token(Token = "0x6000543")]
		[Address(RVA = "0x140E080", Offset = "0x140E080", VA = "0x140E080")]
		public CharacterAnimationThirdPersonIK()
		{
		}
	}
	[Token(Token = "0x20000BB")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F474", Offset = "0xB2F474")]
	public class CharacterController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private CameraController cam;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AnimatorController3rdPerson animatorController;

		[Token(Token = "0x17000046")]
		private static Vector3 inputVector
		{
			[Token(Token = "0x6000546")]
			[Address(RVA = "0x140EEB4", Offset = "0x140EEB4", VA = "0x140EEB4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000047")]
		private static Vector3 inputVectorRaw
		{
			[Token(Token = "0x6000547")]
			[Address(RVA = "0x140EF54", Offset = "0x140EF54", VA = "0x140EF54")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0x140EC00", Offset = "0x140EC00", VA = "0x140EC00")]
		private void Start()
		{
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0x140EC70", Offset = "0x140EC70", VA = "0x140EC70")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0x140EFF4", Offset = "0x140EFF4", VA = "0x140EFF4")]
		public CharacterController3rdPerson()
		{
		}
	}
	[Token(Token = "0x20000BC")]
	public class EffectorOffset : OffsetModifier
	{
		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB325D8", Offset = "0xB325D8")]
		public float handsMaintainRelativePositionWeight;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 bodyOffset;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 leftShoulderOffset;

		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rightShoulderOffset;

		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 leftThighOffset;

		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 rightThighOffset;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Vector3 rightHandOffset;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector3 leftFootOffset;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 rightFootOffset;

		[Token(Token = "0x6000549")]
		[Address(RVA = "0x119A430", Offset = "0x119A430", VA = "0x119A430", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0x119AA14", Offset = "0x119AA14", VA = "0x119AA14")]
		public EffectorOffset()
		{
		}
	}
	[Token(Token = "0x20000BD")]
	public class ExplosionDemo : MonoBehaviour
	{
		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SimpleLocomotion character;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float forceMlp;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float upForce;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weightFalloffSpeed;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve weightFalloff;

		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve explosionForceByDistance;

		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve scale;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float weight;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 defaultScale;

		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody r;

		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x600054B")]
		[Address(RVA = "0x119AA1C", Offset = "0x119AA1C", VA = "0x119AA1C")]
		private void Start()
		{
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0x119AABC", Offset = "0x119AABC", VA = "0x119AABC")]
		private void Update()
		{
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0x119AF38", Offset = "0x119AF38", VA = "0x119AF38")]
		private void SetEffectorWeights(float w)
		{
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0x119AFE4", Offset = "0x119AFE4", VA = "0x119AFE4")]
		public ExplosionDemo()
		{
		}
	}
	[Token(Token = "0x20000BE")]
	public class FBBIKSettings : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200029B")]
		public class Limb
		{
			[Token(Token = "0x4000DD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FBIKChain.Smoothing reachSmoothing;

			[Token(Token = "0x4000DD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float maintainRelativePositionWeight;

			[Token(Token = "0x4000DD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float mappingWeight;

			[Token(Token = "0x6001149")]
			[Address(RVA = "0x119B1B8", Offset = "0x119B1B8", VA = "0x119B1B8")]
			public void Apply(FullBodyBipedChain chain, IKSolverFullBodyBiped solver)
			{
			}

			[Token(Token = "0x600114A")]
			[Address(RVA = "0x119B2EC", Offset = "0x119B2EC", VA = "0x119B2EC")]
			public Limb()
			{
			}
		}

		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool disableAfterStart;

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Limb leftArm;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Limb rightArm;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Limb leftLeg;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Limb rightLeg;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rootPin;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bodyEffectChildNodes;

		[Token(Token = "0x600054F")]
		[Address(RVA = "0x119B06C", Offset = "0x119B06C", VA = "0x119B06C")]
		public void UpdateSettings()
		{
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0x119B23C", Offset = "0x119B23C", VA = "0x119B23C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0x119B2D8", Offset = "0x119B2D8", VA = "0x119B2D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0x119B2DC", Offset = "0x119B2DC", VA = "0x119B2DC")]
		public FBBIKSettings()
		{
		}
	}
	[Token(Token = "0x20000BF")]
	public class FBIKBendGoal : MonoBehaviour
	{
		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedChain chain;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float weight;

		[Token(Token = "0x6000553")]
		[Address(RVA = "0x119B2FC", Offset = "0x119B2FC", VA = "0x119B2FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0x119B368", Offset = "0x119B368", VA = "0x119B368")]
		private void Update()
		{
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0x119B440", Offset = "0x119B440", VA = "0x119B440")]
		public FBIKBendGoal()
		{
		}
	}
	[Token(Token = "0x20000C0")]
	public class FBIKBoxing : MonoBehaviour
	{
		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB325F0", Offset = "0xB325F0")]
		public Transform target;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32628", Offset = "0xB32628")]
		public Transform pin;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32660", Offset = "0xB32660")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32698", Offset = "0xB32698")]
		public AimIK aim;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB326D0", Offset = "0xB326D0")]
		public float weight;

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32708", Offset = "0xB32708")]
		public FullBodyBipedEffector effector;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32740", Offset = "0xB32740")]
		public AnimationCurve aimWeight;

		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Animator animator;

		[Token(Token = "0x6000556")]
		[Address(RVA = "0x119B448", Offset = "0x119B448", VA = "0x119B448")]
		private void Start()
		{
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0x119B4A0", Offset = "0x119B4A0", VA = "0x119B4A0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0x119B63C", Offset = "0x119B63C", VA = "0x119B63C")]
		public FBIKBoxing()
		{
		}
	}
	[Token(Token = "0x20000C1")]
	public class FBIKHandsOnProp : MonoBehaviour
	{
		[Token(Token = "0x4000516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool leftHanded;

		[Token(Token = "0x6000559")]
		[Address(RVA = "0x119B644", Offset = "0x119B644", VA = "0x119B644")]
		private void Awake()
		{
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0x119B704", Offset = "0x119B704", VA = "0x119B704")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0x119B790", Offset = "0x119B790", VA = "0x119B790")]
		private void HandsOnProp(IKEffector mainHand, IKEffector otherHand)
		{
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0x119BC24", Offset = "0x119BC24", VA = "0x119BC24")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0x119BD1C", Offset = "0x119BD1C", VA = "0x119BD1C")]
		public FBIKHandsOnProp()
		{
		}
	}
	[Token(Token = "0x20000C2")]
	public class FPSAiming : MonoBehaviour
	{
		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB32778", Offset = "0xB32778")]
		public float aimWeight;

		[Token(Token = "0x4000519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB32790", Offset = "0xB32790")]
		public float sightWeight;

		[Token(Token = "0x400051A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB327A8", Offset = "0xB327A8")]
		public float maxAngle;

		[Token(Token = "0x400051B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private bool animatePhysics;

		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform gun;

		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform gunTarget;

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private FullBodyBipedIK ik;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private AimIK gunAim;

		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private CameraControllerFPS cam;

		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Recoil recoil;

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB32834", Offset = "0xB32834")]
		private float cameraRecoilWeight;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 gunTargetDefaultLocalPosition;

		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Quaternion gunTargetDefaultLocalRotation;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 camDefaultLocalPosition;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 camRelativeToGunTarget;

		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool updateFrame;

		[Token(Token = "0x600055E")]
		[Address(RVA = "0x119BD24", Offset = "0x119BD24", VA = "0x119BD24")]
		private void Start()
		{
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x119BE84", Offset = "0x119BE84", VA = "0x119BE84")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x119BE90", Offset = "0x119BE90", VA = "0x119BE90")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0x119C1D4", Offset = "0x119C1D4", VA = "0x119C1D4")]
		private void Aiming()
		{
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x119C3A8", Offset = "0x119C3A8", VA = "0x119C3A8")]
		private void LookDownTheSight()
		{
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0x119BF58", Offset = "0x119BF58", VA = "0x119BF58")]
		private void RotateCharacter()
		{
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0x119CDB4", Offset = "0x119CDB4", VA = "0x119CDB4")]
		public FPSAiming()
		{
		}
	}
	[Token(Token = "0x20000C3")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F4D8", Offset = "0xB2F4D8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F4D8", Offset = "0xB2F4D8")]
	public class FPSCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB32874", Offset = "0xB32874")]
		public float walkSpeed;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float sVel;

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FPSAiming FPSAiming;

		[Token(Token = "0x6000565")]
		[Address(RVA = "0x119CDD4", Offset = "0x119CDD4", VA = "0x119CDD4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0x119CE44", Offset = "0x119CE44", VA = "0x119CE44")]
		private void Update()
		{
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0x119CF68", Offset = "0x119CF68", VA = "0x119CF68")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x119D018", Offset = "0x119D018", VA = "0x119D018")]
		public FPSCharacter()
		{
		}
	}
	[Token(Token = "0x20000C4")]
	public class HitReactionTrigger : MonoBehaviour
	{
		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HitReaction hitReaction;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float hitForce;

		[Token(Token = "0x400052E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x6000569")]
		[Address(RVA = "0x119DA54", Offset = "0x119DA54", VA = "0x119DA54")]
		private void Update()
		{
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x119DC14", Offset = "0x119DC14", VA = "0x119DC14")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x119DDD8", Offset = "0x119DDD8", VA = "0x119DDD8")]
		public HitReactionTrigger()
		{
		}
	}
	[Token(Token = "0x20000C5")]
	public class HoldingHands : MonoBehaviour
	{
		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK rightHandChar;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedIK leftHandChar;

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform rightHandTarget;

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float crossFade;

		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float speed;

		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandRotation;

		[Token(Token = "0x600056C")]
		[Address(RVA = "0x119DDE8", Offset = "0x119DDE8", VA = "0x119DDE8")]
		private void Start()
		{
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0x119DF94", Offset = "0x119DF94", VA = "0x119DF94")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x119E350", Offset = "0x119E350", VA = "0x119E350")]
		public HoldingHands()
		{
		}
	}
	[Token(Token = "0x20000C6")]
	public class InteractionC2CDemo : MonoBehaviour
	{
		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem character1;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem character2;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject handShake;

		[Token(Token = "0x600056F")]
		[Address(RVA = "0x119E360", Offset = "0x119E360", VA = "0x119E360")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0x119E494", Offset = "0x119E494", VA = "0x119E494")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0x119E5E4", Offset = "0x119E5E4", VA = "0x119E5E4")]
		public InteractionC2CDemo()
		{
		}
	}
	[Token(Token = "0x20000C7")]
	public class InteractionDemo : MonoBehaviour
	{
		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool interrupt;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject ball;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractionObject benchMain;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractionObject benchHands;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionObject button;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractionObject cigarette;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionObject door;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isSitting;

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x119E5EC", Offset = "0x119E5EC", VA = "0x119E5EC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x119ECBC", Offset = "0x119ECBC", VA = "0x119ECBC")]
		public InteractionDemo()
		{
		}
	}
	[Token(Token = "0x20000C8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F564", Offset = "0xB2F564")]
	public class InteractionSystemTestGUI : MonoBehaviour
	{
		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB328AC", Offset = "0xB328AC")]
		[SerializeField]
		private InteractionObject interactionObject;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB328F8", Offset = "0xB328F8")]
		[SerializeField]
		private FullBodyBipedEffector[] effectors;

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x119ECC4", Offset = "0x119ECC4", VA = "0x119ECC4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x119ED1C", Offset = "0x119ED1C", VA = "0x119ED1C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x119F028", Offset = "0x119F028", VA = "0x119F028")]
		public InteractionSystemTestGUI()
		{
		}
	}
	[Token(Token = "0x20000C9")]
	public class KissingRig : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200029C")]
		public class Partner
		{
			[Token(Token = "0x4000DD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedIK ik;

			[Token(Token = "0x4000DD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform mouth;

			[Token(Token = "0x4000DD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform mouthTarget;

			[Token(Token = "0x4000DD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform touchTargetLeftHand;

			[Token(Token = "0x4000DDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform touchTargetRightHand;

			[Token(Token = "0x4000DDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float bodyWeightHorizontal;

			[Token(Token = "0x4000DDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float bodyWeightVertical;

			[Token(Token = "0x4000DDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float neckRotationWeight;

			[Token(Token = "0x4000DDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float headTiltAngle;

			[Token(Token = "0x4000DDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 headTiltAxis;

			[Token(Token = "0x4000DE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Quaternion neckRotation;

			[Token(Token = "0x17000298")]
			private Transform neck
			{
				[Token(Token = "0x600114D")]
				[Address(RVA = "0x119F92C", Offset = "0x119F92C", VA = "0x119F92C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600114B")]
			[Address(RVA = "0x119F064", Offset = "0x119F064", VA = "0x119F064")]
			public void Initiate()
			{
			}

			[Token(Token = "0x600114C")]
			[Address(RVA = "0x119F0E4", Offset = "0x119F0E4", VA = "0x119F0E4")]
			public void Update(float weight)
			{
			}

			[Token(Token = "0x600114E")]
			[Address(RVA = "0x119F750", Offset = "0x119F750", VA = "0x119F750")]
			private void InverseTransformEffector(FullBodyBipedEffector effector, Transform target, Vector3 targetPosition, float weight)
			{
			}

			[Token(Token = "0x600114F")]
			[Address(RVA = "0x119F984", Offset = "0x119F984", VA = "0x119F984")]
			public Partner()
			{
			}
		}

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Partner partner1;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Partner partner2;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weight;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int iterations;

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x119F030", Offset = "0x119F030", VA = "0x119F030")]
		private void Start()
		{
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x119F084", Offset = "0x119F084", VA = "0x119F084")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0x119F740", Offset = "0x119F740", VA = "0x119F740")]
		public KissingRig()
		{
		}
	}
	[Token(Token = "0x20000CA")]
	public class MotionAbsorb : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200029D")]
		public class Absorber
		{
			[Token(Token = "0x4000DE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB373CC", Offset = "0xB373CC")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4000DE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37404", Offset = "0xB37404")]
			public float weight;

			[Token(Token = "0x6001150")]
			[Address(RVA = "0x11A1EA8", Offset = "0x11A1EA8", VA = "0x11A1EA8")]
			public void SetToBone(IKSolverFullBodyBiped solver)
			{
			}

			[Token(Token = "0x6001151")]
			[Address(RVA = "0x11A1F60", Offset = "0x11A1F60", VA = "0x11A1F60")]
			public void SetEffectorWeights(IKSolverFullBodyBiped solver, float w)
			{
			}

			[Token(Token = "0x6001152")]
			[Address(RVA = "0x11A2044", Offset = "0x11A2044", VA = "0x11A2044")]
			public Absorber()
			{
			}
		}

		[Token(Token = "0x200029E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30DC0", Offset = "0xB30DC0")]
		private sealed class <AbsorbMotion>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MotionAbsorb <>4__this;

			[Token(Token = "0x17000299")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001156")]
				[Address(RVA = "0x11A1FD4", Offset = "0x11A1FD4", VA = "0x11A1FD4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700029A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001158")]
				[Address(RVA = "0x11A203C", Offset = "0x11A203C", VA = "0x11A203C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001153")]
			[Address(RVA = "0x11A1CF4", Offset = "0x11A1CF4", VA = "0x11A1CF4")]
			[DebuggerHidden]
			public <AbsorbMotion>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001154")]
			[Address(RVA = "0x11A1D34", Offset = "0x11A1D34", VA = "0x11A1D34", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001155")]
			[Address(RVA = "0x11A1D38", Offset = "0x11A1D38", VA = "0x11A1D38", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001157")]
			[Address(RVA = "0x11A1FDC", Offset = "0x11A1FDC", VA = "0x11A1FDC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32944", Offset = "0xB32944")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3297C", Offset = "0xB3297C")]
		public Absorber[] absorbers;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB329B4", Offset = "0xB329B4")]
		public float weight;

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB329EC", Offset = "0xB329EC")]
		public AnimationCurve falloff;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32A24", Offset = "0xB32A24")]
		public float falloffSpeed;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float timer;

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x11A1C48", Offset = "0x11A1C48", VA = "0x11A1C48")]
		private void OnCollisionEnter()
		{
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0x11A1C84", Offset = "0x11A1C84", VA = "0x11A1C84")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3A8E8", Offset = "0xB3A8E8")]
		private IEnumerator AbsorbMotion()
		{
			return null;
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x11A1D20", Offset = "0x11A1D20", VA = "0x11A1D20")]
		public MotionAbsorb()
		{
		}
	}
	[Token(Token = "0x20000CB")]
	public class MotionAbsorbCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MotionAbsorb motionAbsorb;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform cube;

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float cubeRandomPosition;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve motionAbsorbWeight;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 cubeDefaultPosition;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorStateInfo info;

		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigidbody;

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x11A2054", Offset = "0x11A2054", VA = "0x11A2054")]
		private void Start()
		{
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x11A20CC", Offset = "0x11A20CC", VA = "0x11A20CC")]
		private void Update()
		{
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x11A2180", Offset = "0x11A2180", VA = "0x11A2180")]
		private void SwingStart()
		{
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x11A22E0", Offset = "0x11A22E0", VA = "0x11A22E0")]
		public MotionAbsorbCharacter()
		{
		}
	}
	[Token(Token = "0x20000CC")]
	public class OffsetEffector : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200029F")]
		public class EffectorLink
		{
			[Token(Token = "0x4000DE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4000DE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float weightMultiplier;

			[Token(Token = "0x4000DE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public Vector3 localPosition;

			[Token(Token = "0x6001159")]
			[Address(RVA = "0x11A2628", Offset = "0x11A2628", VA = "0x11A2628")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x11A22F4", Offset = "0x11A22F4", VA = "0x11A22F4", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0x11A23F4", Offset = "0x11A23F4", VA = "0x11A23F4", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0x11A2620", Offset = "0x11A2620", VA = "0x11A2620")]
		public OffsetEffector()
		{
		}
	}
	[Token(Token = "0x20000CD")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F5C8", Offset = "0xB2F5C8")]
	public class PendulumExample : MonoBehaviour
	{
		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32A5C", Offset = "0xB32A5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB32A5C", Offset = "0xB32A5C")]
		public float weight;

		[Token(Token = "0x400055A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32AB0", Offset = "0xB32AB0")]
		public float hangingDistanceMlp;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32AE8", Offset = "0xB32AE8")]
		[HideInInspector]
		public Vector3 rootTargetPosition;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32B34", Offset = "0xB32B34")]
		[HideInInspector]
		public Quaternion rootTargetRotation;

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform target;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Transform leftHandTarget;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Transform rightHandTarget;

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Transform leftFootTarget;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform rightFootTarget;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Transform pelvisTarget;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform bodyTarget;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Transform headTarget;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Vector3 pelvisDownAxis;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion rootRelativeToPelvis;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 pelvisToRoot;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float lastWeight;

		[Token(Token = "0x6000584")]
		[Address(RVA = "0x11A2638", Offset = "0x11A2638", VA = "0x11A2638")]
		private void Start()
		{
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0x11A2974", Offset = "0x11A2974", VA = "0x11A2974")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0x11A30C4", Offset = "0x11A30C4", VA = "0x11A30C4")]
		public PendulumExample()
		{
		}
	}
	[Token(Token = "0x20000CE")]
	public abstract class PickUp2Handed : MonoBehaviour
	{
		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int GUIspace;

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject obj;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform pivot;

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform holdPoint;

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pickUpTime;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float holdWeight;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float holdWeightVel;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x17000048")]
		private bool holding
		{
			[Token(Token = "0x600058E")]
			[Address(RVA = "0x11A379C", Offset = "0x11A379C", VA = "0x11A379C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0x11A34DC", Offset = "0x11A34DC", VA = "0x11A34DC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000588")]
		protected abstract void RotatePivot();

		[Token(Token = "0x6000589")]
		[Address(RVA = "0x11A37BC", Offset = "0x11A37BC", VA = "0x11A37BC")]
		private void Start()
		{
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0x11A3924", Offset = "0x11A3924", VA = "0x11A3924")]
		private void OnPause(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0x11A3AA0", Offset = "0x11A3AA0", VA = "0x11A3AA0")]
		private void OnStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0x11A3B80", Offset = "0x11A3B80", VA = "0x11A3B80")]
		private void OnDrop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0x11A3CAC", Offset = "0x11A3CAC", VA = "0x11A3CAC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0x11A3EBC", Offset = "0x11A3EBC", VA = "0x11A3EBC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0x11A405C", Offset = "0x11A405C", VA = "0x11A405C")]
		protected PickUp2Handed()
		{
		}
	}
	[Token(Token = "0x20000CF")]
	public class PickUpBox : PickUp2Handed
	{
		[Token(Token = "0x6000591")]
		[Address(RVA = "0x11A4070", Offset = "0x11A4070", VA = "0x11A4070", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0x11A4264", Offset = "0x11A4264", VA = "0x11A4264")]
		public PickUpBox()
		{
		}
	}
	[Token(Token = "0x20000D0")]
	public class PickUpSphere : PickUp2Handed
	{
		[Token(Token = "0x6000593")]
		[Address(RVA = "0x11A4278", Offset = "0x11A4278", VA = "0x11A4278", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0x11A4424", Offset = "0x11A4424", VA = "0x11A4424")]
		public PickUpSphere()
		{
		}
	}
	[Token(Token = "0x20000D1")]
	public class RagdollUtilityDemo : MonoBehaviour
	{
		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RagdollUtility ragdollUtility;

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform root;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody pelvis;

		[Token(Token = "0x6000595")]
		[Address(RVA = "0x11A4BA0", Offset = "0x11A4BA0", VA = "0x11A4BA0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0x11A4C78", Offset = "0x11A4C78", VA = "0x11A4C78")]
		private void Update()
		{
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0x11A4E20", Offset = "0x11A4E20", VA = "0x11A4E20")]
		public RagdollUtilityDemo()
		{
		}
	}
	[Token(Token = "0x20000D2")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F62C", Offset = "0xB2F62C")]
	public class RecoilTest : MonoBehaviour
	{
		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float magnitude;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Recoil recoil;

		[Token(Token = "0x6000598")]
		[Address(RVA = "0x11A4E28", Offset = "0x11A4E28", VA = "0x11A4E28")]
		private void Start()
		{
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0x11A4E80", Offset = "0x11A4E80", VA = "0x11A4E80")]
		private void Update()
		{
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0x11A4EDC", Offset = "0x11A4EDC", VA = "0x11A4EDC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0x11A4FB4", Offset = "0x11A4FB4", VA = "0x11A4FB4")]
		public RecoilTest()
		{
		}
	}
	[Token(Token = "0x20000D3")]
	public class ResetInteractionObject : MonoBehaviour
	{
		[Token(Token = "0x20002A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30DD0", Offset = "0xB30DD0")]
		private sealed class <ResetObject>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float resetTime;

			[Token(Token = "0x4000DEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ResetInteractionObject <>4__this;

			[Token(Token = "0x1700029B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600115D")]
				[Address(RVA = "0x11A5328", Offset = "0x11A5328", VA = "0x11A5328", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700029C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600115F")]
				[Address(RVA = "0x11A5390", Offset = "0x11A5390", VA = "0x11A5390", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600115A")]
			[Address(RVA = "0x11A5144", Offset = "0x11A5144", VA = "0x11A5144")]
			[DebuggerHidden]
			public <ResetObject>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x600115B")]
			[Address(RVA = "0x11A5180", Offset = "0x11A5180", VA = "0x11A5180", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600115C")]
			[Address(RVA = "0x11A5184", Offset = "0x11A5184", VA = "0x11A5184", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600115E")]
			[Address(RVA = "0x11A5330", Offset = "0x11A5330", VA = "0x11A5330", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float resetDelay;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 defaultPosition;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion defaultRotation;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform defaultParent;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody r;

		[Token(Token = "0x600059C")]
		[Address(RVA = "0x11A4FC4", Offset = "0x11A4FC4", VA = "0x11A4FC4")]
		private void Start()
		{
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x11A507C", Offset = "0x11A507C", VA = "0x11A507C")]
		private void OnPickUp(Transform t)
		{
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x11A50C4", Offset = "0x11A50C4", VA = "0x11A50C4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3A94C", Offset = "0xB3A94C")]
		private IEnumerator ResetObject(float resetTime)
		{
			return null;
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0x11A5170", Offset = "0x11A5170", VA = "0x11A5170")]
		public ResetInteractionObject()
		{
		}
	}
	[Token(Token = "0x20000D4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F690", Offset = "0xB2F690")]
	public class SoccerDemo : MonoBehaviour
	{
		[Token(Token = "0x20002A1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30DE0", Offset = "0xB30DE0")]
		private sealed class <ResetDelayed>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoccerDemo <>4__this;

			[Token(Token = "0x1700029D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001163")]
				[Address(RVA = "0x11A685C", Offset = "0x11A685C", VA = "0x11A685C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700029E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001165")]
				[Address(RVA = "0x11A68C4", Offset = "0x11A68C4", VA = "0x11A68C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001160")]
			[Address(RVA = "0x11A6704", Offset = "0x11A6704", VA = "0x11A6704")]
			[DebuggerHidden]
			public <ResetDelayed>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001161")]
			[Address(RVA = "0x11A6738", Offset = "0x11A6738", VA = "0x11A6738", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001162")]
			[Address(RVA = "0x11A673C", Offset = "0x11A673C", VA = "0x11A673C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001164")]
			[Address(RVA = "0x11A6864", Offset = "0x11A6864", VA = "0x11A6864", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator animator;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x11A65E4", Offset = "0x11A65E4", VA = "0x11A65E4")]
		private void Start()
		{
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x11A6694", Offset = "0x11A6694", VA = "0x11A6694")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3A9B0", Offset = "0xB3A9B0")]
		private IEnumerator ResetDelayed()
		{
			return null;
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x11A6730", Offset = "0x11A6730", VA = "0x11A6730")]
		public SoccerDemo()
		{
		}
	}
	[Token(Token = "0x20000D5")]
	public class TouchWalls : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002A2")]
		public class EffectorLink
		{
			[Token(Token = "0x4000DF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x4000DF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4000DF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InteractionObject interactionObject;

			[Token(Token = "0x4000DF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spherecastFrom;

			[Token(Token = "0x4000DF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float spherecastRadius;

			[Token(Token = "0x4000DF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float minDistance;

			[Token(Token = "0x4000DF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public LayerMask touchLayers;

			[Token(Token = "0x4000DF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float lerpSpeed;

			[Token(Token = "0x4000DF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float minSwitchTime;

			[Token(Token = "0x4000DF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float releaseDistance;

			[Token(Token = "0x4000DFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool sliding;

			[Token(Token = "0x4000DFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private Vector3 raycastDirectionLocal;

			[Token(Token = "0x4000DFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float raycastDistance;

			[Token(Token = "0x4000DFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private bool inTouch;

			[Token(Token = "0x4000DFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private RaycastHit hit;

			[Token(Token = "0x4000DFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 targetPosition;

			[Token(Token = "0x4000E00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Quaternion targetRotation;

			[Token(Token = "0x4000E01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private bool initiated;

			[Token(Token = "0x4000E02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private float nextSwitchTime;

			[Token(Token = "0x4000E03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private float speedF;

			[Token(Token = "0x6001166")]
			[Address(RVA = "0x11A6E6C", Offset = "0x11A6E6C", VA = "0x11A6E6C")]
			public void Initiate(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6001167")]
			[Address(RVA = "0x11A7AF4", Offset = "0x11A7AF4", VA = "0x11A7AF4")]
			private bool FindWalls(Vector3 direction)
			{
				return default(bool);
			}

			[Token(Token = "0x6001168")]
			[Address(RVA = "0x11A71AC", Offset = "0x11A71AC", VA = "0x11A71AC")]
			public void Update(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6001169")]
			[Address(RVA = "0x11A7BDC", Offset = "0x11A7BDC", VA = "0x11A7BDC")]
			private void StopTouch(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x600116A")]
			[Address(RVA = "0x11A7D78", Offset = "0x11A7D78", VA = "0x11A7D78")]
			private void OnInteractionStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x600116B")]
			[Address(RVA = "0x11A7E14", Offset = "0x11A7E14", VA = "0x11A7E14")]
			private void OnInteractionResume(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x600116C")]
			[Address(RVA = "0x11A7EAC", Offset = "0x11A7EAC", VA = "0x11A7EAC")]
			private void OnInteractionStop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x600116D")]
			[Address(RVA = "0x11A798C", Offset = "0x11A798C", VA = "0x11A798C")]
			public void Destroy(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x600116E")]
			[Address(RVA = "0x11A7F44", Offset = "0x11A7F44", VA = "0x11A7F44")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x11A6DF4", Offset = "0x11A6DF4", VA = "0x11A6DF4")]
		private void Start()
		{
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x11A7140", Offset = "0x11A7140", VA = "0x11A7140")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x11A78C4", Offset = "0x11A78C4", VA = "0x11A78C4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x11A7AEC", Offset = "0x11A7AEC", VA = "0x11A7AEC")]
		public TouchWalls()
		{
		}
	}
	[Token(Token = "0x20000D6")]
	public class TransferMotion : MonoBehaviour
	{
		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32C20", Offset = "0xB32C20")]
		public Transform to;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32C58", Offset = "0xB32C58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB32C58", Offset = "0xB32C58")]
		public float transferMotion;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x11A7F78", Offset = "0x11A7F78", VA = "0x11A7F78")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x11A7FB4", Offset = "0x11A7FB4", VA = "0x11A7FB4")]
		private void Update()
		{
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x11A810C", Offset = "0x11A810C", VA = "0x11A810C")]
		public TransferMotion()
		{
		}
	}
	[Token(Token = "0x20000D7")]
	public class TwoHandedProp : MonoBehaviour
	{
		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32CAC", Offset = "0xB32CAC")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 targetPosRelativeToRight;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion targetRotRelativeToRight;

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x11A82CC", Offset = "0x11A82CC", VA = "0x11A82CC")]
		private void Start()
		{
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x11A8484", Offset = "0x11A8484", VA = "0x11A8484")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x11A8720", Offset = "0x11A8720", VA = "0x11A8720")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x11A87EC", Offset = "0x11A87EC", VA = "0x11A87EC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x11A88E4", Offset = "0x11A88E4", VA = "0x11A88E4")]
		public TwoHandedProp()
		{
		}
	}
	[Token(Token = "0x20000D8")]
	public class UserControlInteractions : UserControlThirdPerson
	{
		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private CharacterThirdPerson character;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private bool disableInputInInteraction;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float enableInputAtProgress;

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x11A8B1C", Offset = "0x11A8B1C", VA = "0x11A8B1C", Slot = "4")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x11A8F94", Offset = "0x11A8F94", VA = "0x11A8F94")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x11A91EC", Offset = "0x11A91EC", VA = "0x11A91EC")]
		public UserControlInteractions()
		{
		}
	}
	[Token(Token = "0x20000D9")]
	public class GrounderDemo : MonoBehaviour
	{
		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] characters;

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x119D6D0", Offset = "0x119D6D0", VA = "0x119D6D0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x119D9CC", Offset = "0x119D9CC", VA = "0x119D9CC")]
		public void Activate(int index)
		{
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x119DA4C", Offset = "0x119DA4C", VA = "0x119DA4C")]
		public GrounderDemo()
		{
		}
	}
	[Token(Token = "0x20000DA")]
	public class PlatformRotator : MonoBehaviour
	{
		[Token(Token = "0x20002A3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30DF0", Offset = "0xB30DF0")]
		private sealed class <SwitchRotation>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlatformRotator <>4__this;

			[Token(Token = "0x1700029F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001172")]
				[Address(RVA = "0x11A4B30", Offset = "0x11A4B30", VA = "0x11A4B30", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001174")]
				[Address(RVA = "0x11A4B98", Offset = "0x11A4B98", VA = "0x11A4B98", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600116F")]
			[Address(RVA = "0x11A47EC", Offset = "0x11A47EC", VA = "0x11A47EC")]
			[DebuggerHidden]
			public <SwitchRotation>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6001170")]
			[Address(RVA = "0x11A49F8", Offset = "0x11A49F8", VA = "0x11A49F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001171")]
			[Address(RVA = "0x11A49FC", Offset = "0x11A49FC", VA = "0x11A49FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001173")]
			[Address(RVA = "0x11A4B38", Offset = "0x11A4B38", VA = "0x11A4B38", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxAngle;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float switchRotationTime;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float random;

		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotationSpeed;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 movePosition;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float moveSpeed;

		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int characterLayer;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion targetRotation;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 targetPosition;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 velocity;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody r;

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x11A4438", Offset = "0x11A4438", VA = "0x11A4438")]
		private void Start()
		{
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x11A45C4", Offset = "0x11A45C4", VA = "0x11A45C4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x11A4554", Offset = "0x11A4554", VA = "0x11A4554")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3AA14", Offset = "0xB3AA14")]
		private IEnumerator SwitchRotation()
		{
			return null;
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x11A4818", Offset = "0x11A4818", VA = "0x11A4818")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x11A48FC", Offset = "0x11A48FC", VA = "0x11A48FC")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x11A49DC", Offset = "0x11A49DC", VA = "0x11A49DC")]
		public PlatformRotator()
		{
		}
	}
	[Token(Token = "0x20000DB")]
	public class BendGoal : MonoBehaviour
	{
		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbIK limbIK;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB32D14", Offset = "0xB32D14")]
		public float weight;

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x140C72C", Offset = "0x140C72C", VA = "0x140C72C")]
		private void Start()
		{
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0x140C798", Offset = "0x140C798", VA = "0x140C798")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x140C854", Offset = "0x140C854", VA = "0x140C854")]
		public BendGoal()
		{
		}
	}
	[Token(Token = "0x20000DC")]
	public class Turret : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002A4")]
		public class Part
		{
			[Token(Token = "0x4000E07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000E08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private RotationLimit rotationLimit;

			[Token(Token = "0x6001175")]
			[Address(RVA = "0x11A8198", Offset = "0x11A8198", VA = "0x11A8198")]
			public void AimAt(Transform target)
			{
			}

			[Token(Token = "0x6001176")]
			[Address(RVA = "0x11A82C4", Offset = "0x11A82C4", VA = "0x11A82C4")]
			public Part()
			{
			}
		}

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Part[] parts;

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x11A8120", Offset = "0x11A8120", VA = "0x11A8120")]
		private void Update()
		{
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x11A82BC", Offset = "0x11A82BC", VA = "0x11A82BC")]
		public Turret()
		{
		}
	}
	[Token(Token = "0x20000DD")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F6F4", Offset = "0xB2F6F4")]
	public class FixFeet : MonoBehaviour
	{
		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB32D2C", Offset = "0xB32D2C")]
		public float weight;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 relativePosL;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 relativePosR;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion relativeRotL;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion relativeRotR;

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x119D028", Offset = "0x119D028", VA = "0x119D028")]
		private void Start()
		{
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x119D084", Offset = "0x119D084", VA = "0x119D084")]
		public void Sample()
		{
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x119D2D8", Offset = "0x119D2D8", VA = "0x119D2D8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x119D6C0", Offset = "0x119D6C0", VA = "0x119D6C0")]
		public FixFeet()
		{
		}
	}
	[Token(Token = "0x20000DE")]
	public class Mirror : MonoBehaviour
	{
		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform[] children;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform[] targetChildren;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x11A17D8", Offset = "0x11A17D8", VA = "0x11A17D8")]
		private void Start()
		{
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x11A1950", Offset = "0x11A1950", VA = "0x11A1950")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x11A1AE0", Offset = "0x11A1AE0", VA = "0x11A1AE0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x11A1BD8", Offset = "0x11A1BD8", VA = "0x11A1BD8")]
		public Mirror()
		{
		}
	}
	[Token(Token = "0x20000DF")]
	public class Phone : MonoBehaviour
	{
		[Token(Token = "0x20002A5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30E00", Offset = "0xB30E00")]
		private sealed class <EnableDisplay>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Phone <>4__this;

			[Token(Token = "0x170002A1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600117A")]
				[Address(RVA = "0x11A346C", Offset = "0x11A346C", VA = "0x11A346C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002A2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600117C")]
				[Address(RVA = "0x11A34D4", Offset = "0x11A34D4", VA = "0x11A34D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001177")]
			[Address(RVA = "0x11A32A0", Offset = "0x11A32A0", VA = "0x11A32A0")]
			[DebuggerHidden]
			public <EnableDisplay>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6001178")]
			[Address(RVA = "0x11A33B4", Offset = "0x11A33B4", VA = "0x11A33B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001179")]
			[Address(RVA = "0x11A33B8", Offset = "0x11A33B8", VA = "0x11A33B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600117B")]
			[Address(RVA = "0x11A3474", Offset = "0x11A3474", VA = "0x11A3474", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32D44", Offset = "0xB32D44")]
		public Collider pickUpCollider;

		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32D7C", Offset = "0xB32D7C")]
		public InteractionObject pickUpObject;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32DB4", Offset = "0xB32DB4")]
		public GameObject display;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform parent;

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x11A3148", Offset = "0x11A3148", VA = "0x11A3148")]
		private void OnPickUp()
		{
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x11A3230", Offset = "0x11A3230", VA = "0x11A3230")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3AA78", Offset = "0xB3AA78")]
		private IEnumerator EnableDisplay()
		{
			return null;
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x11A32CC", Offset = "0x11A32CC", VA = "0x11A32CC")]
		private void OnButton1()
		{
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x11A32D0", Offset = "0x11A32D0", VA = "0x11A32D0")]
		private void OnButton2()
		{
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x11A332C", Offset = "0x11A332C", VA = "0x11A332C")]
		private void DropPhone()
		{
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x11A33AC", Offset = "0x11A33AC", VA = "0x11A33AC")]
		public Phone()
		{
		}
	}
	[Token(Token = "0x20000E0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F758", Offset = "0xB2F758")]
	public class VRAimingController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002A6")]
		public struct Targets
		{
			[Token(Token = "0x4000E0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Transform leftHand;

			[Token(Token = "0x4000E0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform rightHand;

			[Token(Token = "0x4000E0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform bendGoalLeftArm;

			[Token(Token = "0x4000E0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform bendGoalRightArm;

			[Token(Token = "0x4000E10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BoneRotationOffset[] boneRotationOffsets;
		}

		[Serializable]
		[Token(Token = "0x20002A7")]
		public enum Handedness
		{
			[Token(Token = "0x4000E12")]
			Right,
			[Token(Token = "0x4000E13")]
			Left
		}

		[Serializable]
		[Token(Token = "0x20002A8")]
		public class BoneRotationOffset
		{
			[Token(Token = "0x4000E14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000E15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 value;

			[Token(Token = "0x600117D")]
			[Address(RVA = "0x11AB110", Offset = "0x11AB110", VA = "0x11AB110")]
			public BoneRotationOffset()
			{
			}
		}

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB32DEC", Offset = "0xB32DEC")]
		public VRAnimatorController animatorController;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32E24", Offset = "0xB32E24")]
		public WeaponBase currentWeapon;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB32E5C", Offset = "0xB32E5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32E5C", Offset = "0xB32E5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB32E5C", Offset = "0xB32E5C")]
		public float weight;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32ED4", Offset = "0xB32ED4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB32ED4", Offset = "0xB32ED4")]
		public float spineTwistWeight;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB32F28", Offset = "0xB32F28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32F28", Offset = "0xB32F28")]
		public Handedness handedness;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32F88", Offset = "0xB32F88")]
		public float sideOffset;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32FC0", Offset = "0xB32FC0")]
		public Targets leftHandedTargets;

		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB32FF8", Offset = "0xB32FF8")]
		public Targets rightHandedTargets;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB33030", Offset = "0xB33030")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33030", Offset = "0xB33030")]
		public Transform weaponsPivot;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33090", Offset = "0xB33090")]
		public Transform weaponsAnchor;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB330C8", Offset = "0xB330C8")]
		public Transform pivotMotionTarget;

		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33100", Offset = "0xB33100")]
		public float lerpSpeed;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33138", Offset = "0xB33138")]
		public float pivotMotionSmoothSpeed;

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33170", Offset = "0xB33170")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB33170", Offset = "0xB33170")]
		public float pivotMotionWeight;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB331C4", Offset = "0xB331C4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB331C4", Offset = "0xB331C4")]
		public float aimVerticalLimit;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3321C", Offset = "0xB3321C")]
		public float aimZ;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float lastWeight;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Poser poserLeftHand;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Poser poserRightHand;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 pivotRelativePosition;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 weaponsPivotLocalPosition;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 defaultWeaponsAnchorLocalPosition;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private Vector3 aimVel;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector3 aimRandom;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private float x;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float y;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private float aimWeight;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 cameraPosition;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private Vector3 lastCharacterPosition;

		[Token(Token = "0x17000049")]
		private Transform cam
		{
			[Token(Token = "0x60005CE")]
			[Address(RVA = "0x11A9248", Offset = "0x11A9248", VA = "0x11A9248")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004A")]
		private Transform characterController
		{
			[Token(Token = "0x60005CF")]
			[Address(RVA = "0x11A9264", Offset = "0x11A9264", VA = "0x11A9264")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004B")]
		private Targets targets
		{
			[Token(Token = "0x60005D3")]
			[Address(RVA = "0x11AA408", Offset = "0x11AA408", VA = "0x11AA408")]
			get
			{
				return default(Targets);
			}
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x11A9280", Offset = "0x11A9280", VA = "0x11A9280")]
		private void Start()
		{
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x11A9728", Offset = "0x11A9728", VA = "0x11A9728")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x11AA434", Offset = "0x11AA434", VA = "0x11AA434")]
		private void RotateWeapon(float horAdd, float vertAdd)
		{
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x11A94D8", Offset = "0x11A94D8", VA = "0x11A94D8")]
		private Vector3 TargetsCameraPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x11A944C", Offset = "0x11A944C", VA = "0x11A944C")]
		private void SetHandedness(Handedness h)
		{
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x11AAB04", Offset = "0x11AAB04", VA = "0x11AAB04")]
		private void TwistSpine()
		{
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x11AAD48", Offset = "0x11AAD48", VA = "0x11AAD48")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x11AAF34", Offset = "0x11AAF34", VA = "0x11AAF34")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x11AB02C", Offset = "0x11AB02C", VA = "0x11AB02C")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x11AB0DC", Offset = "0x11AB0DC", VA = "0x11AB0DC")]
		public VRAimingController()
		{
		}
	}
	[Token(Token = "0x20000E1")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F7BC", Offset = "0xB2F7BC")]
	public class VRAnimatorController : MonoBehaviour
	{
		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB33254", Offset = "0xB33254")]
		public VRSetup oculusSetup;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform characterController;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform cam;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB3328C", Offset = "0xB3328C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3328C", Offset = "0xB3328C")]
		public Vector3 cameraOffset;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB332EC", Offset = "0xB332EC")]
		public float smoothAccelerationTime;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33324", Offset = "0xB33324")]
		public float linearAcceleration;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3335C", Offset = "0xB3335C")]
		public float maxViewAngle;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33394", Offset = "0xB33394")]
		public float locomotionSpeed;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB333CC", Offset = "0xB333CC")]
		private Vector3 <velocity>k__BackingField;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Animator animator;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 velocityC;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool rootCorrection;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 playerVelocity;

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 playerLastPosition;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FixFeet fixFeet;

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform cameraPivot;

		[Token(Token = "0x1700004C")]
		public Vector3 velocity
		{
			[Token(Token = "0x60005DB")]
			[Address(RVA = "0x11AB118", Offset = "0x11AB118", VA = "0x11AB118")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AADC", Offset = "0xB3AADC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60005DC")]
			[Address(RVA = "0x11AB124", Offset = "0x11AB124", VA = "0x11AB124")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AAEC", Offset = "0xB3AAEC")]
			private set
			{
			}
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x11AB130", Offset = "0x11AB130", VA = "0x11AB130")]
		private void Start()
		{
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x11AB384", Offset = "0x11AB384", VA = "0x11AB384")]
		private void Update()
		{
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x11AB748", Offset = "0x11AB748", VA = "0x11AB748")]
		private Vector3 GetVelocityTarget()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x11AA7A0", Offset = "0x11AA7A0", VA = "0x11AA7A0")]
		public void RotateCharacter(Vector3 forward, float maxAngle, [Optional] Transform fix)
		{
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x11AB8E4", Offset = "0x11AB8E4", VA = "0x11AB8E4")]
		public VRAnimatorController()
		{
		}
	}
	[Token(Token = "0x20000E2")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F820", Offset = "0xB2F820")]
	public class VRCharacterController : MonoBehaviour
	{
		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float moveSpeed;

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rotationSpeed;

		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB333DC", Offset = "0xB333DC")]
		public float rotationRatchet;

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public KeyCode ratchetRight;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public KeyCode ratchetLeft;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform forwardDirection;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CharacterController characterController;

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x11AB8F8", Offset = "0x11AB8F8", VA = "0x11AB8F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x11AB998", Offset = "0x11AB998", VA = "0x11AB998")]
		private void Update()
		{
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x11ABCF8", Offset = "0x11ABCF8", VA = "0x11ABCF8")]
		public VRCharacterController()
		{
		}
	}
	[Token(Token = "0x20000E3")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F884", Offset = "0xB2F884")]
	public class VRInteractionController : MonoBehaviour
	{
		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB333F8", Offset = "0xB333F8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB333F8", Offset = "0xB333F8")]
		public float triggerTime;

		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3344C", Offset = "0xB3344C")]
		private InteractionSystem <interactionSystem>k__BackingField;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3345C", Offset = "0xB3345C")]
		private InteractionTrigger <currentTrigger>k__BackingField;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timer;

		[Token(Token = "0x1700004D")]
		public InteractionSystem interactionSystem
		{
			[Token(Token = "0x60005E5")]
			[Address(RVA = "0x11ABD1C", Offset = "0x11ABD1C", VA = "0x11ABD1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AAFC", Offset = "0xB3AAFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60005E6")]
			[Address(RVA = "0x11ABD24", Offset = "0x11ABD24", VA = "0x11ABD24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AB0C", Offset = "0xB3AB0C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700004E")]
		public float triggerProgress
		{
			[Token(Token = "0x60005E7")]
			[Address(RVA = "0x11ABD2C", Offset = "0x11ABD2C", VA = "0x11ABD2C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700004F")]
		public InteractionTrigger currentTrigger
		{
			[Token(Token = "0x60005E8")]
			[Address(RVA = "0x11ABD48", Offset = "0x11ABD48", VA = "0x11ABD48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AB1C", Offset = "0xB3AB1C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60005E9")]
			[Address(RVA = "0x11ABD50", Offset = "0x11ABD50", VA = "0x11ABD50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AB2C", Offset = "0xB3AB2C")]
			private set
			{
			}
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x11ABD58", Offset = "0x11ABD58", VA = "0x11ABD58")]
		private void Start()
		{
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x11ABDB0", Offset = "0x11ABDB0", VA = "0x11ABDB0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x11ABEA8", Offset = "0x11ABEA8", VA = "0x11ABEA8")]
		private bool CanTrigger(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x11ABED4", Offset = "0x11ABED4", VA = "0x11ABED4")]
		public VRInteractionController()
		{
		}
	}
	[Token(Token = "0x20000E4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F8E8", Offset = "0xB2F8E8")]
	public class VRInteractionUI : MonoBehaviour
	{
		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB3346C", Offset = "0xB3346C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3346C", Offset = "0xB3346C")]
		public Slider slider;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB334CC", Offset = "0xB334CC")]
		public AnimationCurve alphaToProgress;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33504", Offset = "0xB33504")]
		public Transform cursor;

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private VRInteractionController interactionController;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Image[] sliderImages;

		[Token(Token = "0x40005EB")]
		private const string showCursorTag = "ShowCursor";

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x11ABEE4", Offset = "0x11ABEE4", VA = "0x11ABEE4")]
		private void Start()
		{
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x11ABF60", Offset = "0x11ABF60", VA = "0x11ABF60")]
		private void Update()
		{
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x11ABF84", Offset = "0x11ABF84", VA = "0x11ABF84")]
		private void UpdateInteractionSlider()
		{
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x11AC184", Offset = "0x11AC184", VA = "0x11AC184")]
		private void UpdateCursor()
		{
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x11AC310", Offset = "0x11AC310", VA = "0x11AC310")]
		private void SetSliderAlpha(float a)
		{
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x11AC4A8", Offset = "0x11AC4A8", VA = "0x11AC4A8")]
		public VRInteractionUI()
		{
		}
	}
	[Token(Token = "0x20000E5")]
	public class VRSetup : MonoBehaviour
	{
		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text text;

		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject model;

		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject[] enableOnR;

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VRCharacterController characterController;

		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool disableMovement;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3353C", Offset = "0xB3353C")]
		private bool <isFinished>k__BackingField;

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float moveSpeed;

		[Token(Token = "0x17000050")]
		public bool isFinished
		{
			[Token(Token = "0x60005F4")]
			[Address(RVA = "0x11AC4B0", Offset = "0x11AC4B0", VA = "0x11AC4B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AB3C", Offset = "0xB3AB3C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60005F5")]
			[Address(RVA = "0x11AC4B8", Offset = "0x11AC4B8", VA = "0x11AC4B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AB4C", Offset = "0xB3AB4C")]
			private set
			{
			}
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x11AC4C4", Offset = "0x11AC4C4", VA = "0x11AC4C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x11AC5BC", Offset = "0x11AC5BC", VA = "0x11AC5BC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x11AC854", Offset = "0x11AC854", VA = "0x11AC854")]
		public VRSetup()
		{
		}
	}
	[Token(Token = "0x20000E6")]
	public abstract class WeaponBase : MonoBehaviour
	{
		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB3354C", Offset = "0xB3354C")]
		public Vector3 recoilDirection;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float recoilAngleVertical;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float recoilAngleHorizontal;

		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float recoilRandom;

		[Token(Token = "0x60005F9")]
		public abstract void Fire();

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x11AC85C", Offset = "0x11AC85C", VA = "0x11AC85C")]
		protected WeaponBase()
		{
		}
	}
	[Token(Token = "0x20000E7")]
	public class WeaponRifle : WeaponBase
	{
		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB33584", Offset = "0xB33584")]
		public Transform shootFrom;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float range;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public LayerMask hitLayers;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB335BC", Offset = "0xB335BC")]
		public ParticleSystem muzzleFlash;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ParticleSystem muzzleSmoke;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform bulletHole;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ParticleSystem bulletHit;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float smokeFadeOutSpeed;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float smokeEmission;

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x11AC8F0", Offset = "0x11AC8F0", VA = "0x11AC8F0", Slot = "4")]
		public override void Fire()
		{
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x11ACB8C", Offset = "0x11ACB8C", VA = "0x11ACB8C")]
		private void Update()
		{
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x11ACC94", Offset = "0x11ACC94", VA = "0x11ACC94")]
		public WeaponRifle()
		{
		}
	}
	[Token(Token = "0x20000E8")]
	public abstract class CharacterAnimationBase : MonoBehaviour
	{
		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool smoothFollow;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float smoothFollowSpeed;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 localPosition;

		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion localRotation;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion lastRotation;

		[Token(Token = "0x17000051")]
		public virtual bool animationGrounded
		{
			[Token(Token = "0x60005FF")]
			[Address(RVA = "0x140CD54", Offset = "0x140CD54", VA = "0x140CD54", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x140CD30", Offset = "0x140CD30", VA = "0x140CD30", Slot = "4")]
		public virtual Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0x140CD5C", Offset = "0x140CD5C", VA = "0x140CD5C")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0x140CE20", Offset = "0x140CE20", VA = "0x140CE20", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0x140D078", Offset = "0x140D078", VA = "0x140D078", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0x140D2D8", Offset = "0x140D2D8", VA = "0x140D2D8")]
		protected CharacterAnimationBase()
		{
		}
	}
	[Token(Token = "0x20000E9")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F94C", Offset = "0xB2F94C")]
	public class CharacterAnimationSimple : CharacterAnimationBase
	{
		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private CharacterThirdPerson characterController;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float pivotOffset;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private AnimationCurve moveSpeed;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Animator animator;

		[Token(Token = "0x6000604")]
		[Address(RVA = "0x140D2F0", Offset = "0x140D2F0", VA = "0x140D2F0", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0x140D350", Offset = "0x140D350", VA = "0x140D350", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0x140D47C", Offset = "0x140D47C", VA = "0x140D47C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0x140D5F8", Offset = "0x140D5F8", VA = "0x140D5F8")]
		public CharacterAnimationSimple()
		{
		}
	}
	[Token(Token = "0x20000EA")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2F9B0", Offset = "0xB2F9B0")]
	public class CharacterAnimationThirdPerson : CharacterAnimationBase
	{
		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float turnSensitivity;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private float turnSpeed;

		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float runCycleLegOffset;

		[Token(Token = "0x400060E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB33654", Offset = "0xB33654")]
		[SerializeField]
		private float animSpeedMultiplier;

		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Animator animator;

		[Token(Token = "0x4000610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 lastForward;

		[Token(Token = "0x4000611")]
		private const string groundedDirectional = "Grounded Directional";

		[Token(Token = "0x4000612")]
		private const string groundedStrafe = "Grounded Strafe";

		[Token(Token = "0x17000052")]
		public override bool animationGrounded
		{
			[Token(Token = "0x600060A")]
			[Address(RVA = "0x140D6B0", Offset = "0x140D6B0", VA = "0x140D6B0", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0x140D610", Offset = "0x140D610", VA = "0x140D610", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0x140D694", Offset = "0x140D694", VA = "0x140D694", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0x140D7A0", Offset = "0x140D7A0", VA = "0x140D7A0", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0x140DAEC", Offset = "0x140DAEC", VA = "0x140DAEC")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0x140DB88", Offset = "0x140DB88", VA = "0x140DB88")]
		public CharacterAnimationThirdPerson()
		{
		}
	}
	[Token(Token = "0x20000EB")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2FA14", Offset = "0xB2FA14")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2FA14", Offset = "0xB2FA14")]
	public abstract class CharacterBase : MonoBehaviour
	{
		[Token(Token = "0x4000613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB33698", Offset = "0xB33698")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33698", Offset = "0xB33698")]
		public Transform gravityTarget;

		[Token(Token = "0x4000614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB336F8", Offset = "0xB336F8")]
		[SerializeField]
		protected float gravityMultiplier;

		[Token(Token = "0x4000615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		protected float airborneThreshold;

		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float slopeStartAngle;

		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float slopeEndAngle;

		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float spherecastRadius;

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private LayerMask groundLayers;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PhysicMaterial zeroFrictionMaterial;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PhysicMaterial highFrictionMaterial;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Rigidbody r;

		[Token(Token = "0x400061D")]
		protected const float half = 0.5f;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float originalHeight;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected Vector3 originalCenter;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected CapsuleCollider capsule;

		[Token(Token = "0x600060E")]
		public abstract void Move(Vector3 deltaPosition, Quaternion deltaRotation);

		[Token(Token = "0x600060F")]
		[Address(RVA = "0x140E0A4", Offset = "0x140E0A4", VA = "0x140E0A4")]
		protected Vector3 GetGravity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0x140E228", Offset = "0x140E228", VA = "0x140E228", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0x140E3C0", Offset = "0x140E3C0", VA = "0x140E3C0", Slot = "6")]
		protected virtual RaycastHit GetSpherecastHit()
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0x140E638", Offset = "0x140E638", VA = "0x140E638")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0x140E6FC", Offset = "0x140E6FC", VA = "0x140E6FC")]
		protected void RigidbodyRotateAround(Vector3 point, Vector3 axis, float angle)
		{
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0x140E8E4", Offset = "0x140E8E4", VA = "0x140E8E4")]
		protected void ScaleCapsule(float mlp)
		{
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0x140EA94", Offset = "0x140EA94", VA = "0x140EA94")]
		protected void HighFriction()
		{
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0x140EAB8", Offset = "0x140EAB8", VA = "0x140EAB8")]
		protected void ZeroFriction()
		{
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0x140EADC", Offset = "0x140EADC", VA = "0x140EADC")]
		protected float GetSlopeDamper(Vector3 velocity, Vector3 groundNormal)
		{
			return default(float);
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0x140EBE0", Offset = "0x140EBE0", VA = "0x140EBE0")]
		protected CharacterBase()
		{
		}
	}
	[Token(Token = "0x20000EC")]
	public class CharacterThirdPerson : CharacterBase
	{
		[Serializable]
		[Token(Token = "0x20002A9")]
		public enum MoveMode
		{
			[Token(Token = "0x4000E17")]
			Directional,
			[Token(Token = "0x4000E18")]
			Strafe
		}

		[Token(Token = "0x20002AA")]
		public struct AnimState
		{
			[Token(Token = "0x4000E19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 moveDirection;

			[Token(Token = "0x4000E1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool jump;

			[Token(Token = "0x4000E1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			public bool crouch;

			[Token(Token = "0x4000E1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			public bool onGround;

			[Token(Token = "0x4000E1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			public bool isStrafing;

			[Token(Token = "0x4000E1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float yVelocity;
		}

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB33794", Offset = "0xB33794")]
		public CharacterAnimationBase characterAnimation;

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UserControlThirdPerson userControl;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public CameraController cam;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB337CC", Offset = "0xB337CC")]
		public MoveMode moveMode;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool smoothPhysics;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float smoothAccelerationTime;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float linearAccelerationSpeed;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float platformFriction;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float groundStickyEffect;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float maxVerticalVelocityOnGround;

		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float velocityToGroundTangentWeight;

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB33804", Offset = "0xB33804")]
		public bool lookInCameraDirection;

		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float turnSpeed;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float stationaryTurnSpeedMlp;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB3383C", Offset = "0xB3383C")]
		public float airSpeed;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float airControl;

		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float jumpPower;

		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float jumpRepeatDelayTime;

		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB33874", Offset = "0xB33874")]
		[SerializeField]
		private LayerMask wallRunLayers;

		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float wallRunMaxLength;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float wallRunMinMoveMag;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float wallRunMinVelocityY;

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float wallRunRotationSpeed;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float wallRunMaxRotationAngle;

		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float wallRunWeightSpeed;

		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB338C0", Offset = "0xB338C0")]
		public float crouchCapsuleScaleMlp;

		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB338F8", Offset = "0xB338F8")]
		private bool <onGround>k__BackingField;

		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AnimState animState;

		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		protected Vector3 moveDirection;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Animator animator;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector3 normal;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 platformVelocity;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 platformAngularVelocity;

		[Token(Token = "0x4000642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private RaycastHit hit;

		[Token(Token = "0x4000643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private float jumpLeg;

		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private float jumpEndTime;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private float forwardMlp;

		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private float groundDistance;

		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float lastAirTime;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float stickyForce;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Vector3 wallNormal;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private Vector3 moveDirectionVelocity;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private float wallRunWeight;

		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private float lastWallRunWeight;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Vector3 fixedDeltaPosition;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private Quaternion fixedDeltaRotation;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private bool fixedFrame;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private float wallRunEndTime;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private Vector3 gravity;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private Vector3 verticalVelocity;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		private float velocityY;

		[Token(Token = "0x17000053")]
		public bool onGround
		{
			[Token(Token = "0x6000619")]
			[Address(RVA = "0x140EFFC", Offset = "0x140EFFC", VA = "0x140EFFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AB5C", Offset = "0xB3AB5C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600061A")]
			[Address(RVA = "0x140F004", Offset = "0x140F004", VA = "0x140F004")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AB6C", Offset = "0xB3AB6C")]
			private set
			{
			}
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0x140F010", Offset = "0x140F010", VA = "0x140F010", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0x140F194", Offset = "0x140F194", VA = "0x140F194")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x600061D")]
		[Address(RVA = "0x140F224", Offset = "0x140F224", VA = "0x140F224", Slot = "4")]
		public override void Move(Vector3 deltaPosition, Quaternion deltaRotation)
		{
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0x140F360", Offset = "0x140F360", VA = "0x140F360")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0x1410188", Offset = "0x1410188", VA = "0x1410188", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0x1410504", Offset = "0x1410504", VA = "0x1410504", Slot = "8")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000621")]
		[Address(RVA = "0x140F780", Offset = "0x140F780", VA = "0x140F780")]
		private void MoveFixed(Vector3 deltaPosition)
		{
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0x14105E4", Offset = "0x14105E4", VA = "0x14105E4")]
		private void WallRun()
		{
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0x1410BD4", Offset = "0x1410BD4", VA = "0x1410BD4")]
		private bool CanWallRun()
		{
			return default(bool);
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0x1410264", Offset = "0x1410264", VA = "0x1410264")]
		private Vector3 GetMoveDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0x1410C74", Offset = "0x1410C74", VA = "0x1410C74", Slot = "9")]
		protected virtual void Rotate()
		{
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0x14110AC", Offset = "0x14110AC", VA = "0x14110AC")]
		private Vector3 GetForwardDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0x1411238", Offset = "0x1411238", VA = "0x1411238", Slot = "10")]
		protected virtual bool Jump()
		{
			return default(bool);
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0x140FD68", Offset = "0x140FD68", VA = "0x140FD68")]
		private void GroundCheck()
		{
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0x14113CC", Offset = "0x14113CC", VA = "0x14113CC")]
		public CharacterThirdPerson()
		{
		}
	}
	[Token(Token = "0x20000ED")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB2FAA0", Offset = "0xB2FAA0")]
	public class SimpleLocomotion : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002AB")]
		public enum RotationMode
		{
			[Token(Token = "0x4000E20")]
			Smooth,
			[Token(Token = "0x4000E21")]
			Linear
		}

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33908", Offset = "0xB33908")]
		[SerializeField]
		private CameraController cameraController;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33954", Offset = "0xB33954")]
		[SerializeField]
		private float accelerationTime;

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB339A0", Offset = "0xB339A0")]
		[SerializeField]
		private float turnTime;

		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB339EC", Offset = "0xB339EC")]
		[SerializeField]
		private bool walkByDefault;

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33A38", Offset = "0xB33A38")]
		[SerializeField]
		private RotationMode rotationMode;

		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33A84", Offset = "0xB33A84")]
		[SerializeField]
		private float moveSpeed;

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB33AD0", Offset = "0xB33AD0")]
		private bool <isGrounded>k__BackingField;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator animator;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float speed;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float angleVel;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float speedVel;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 linearTargetDirection;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private CharacterController characterController;

		[Token(Token = "0x17000054")]
		public bool isGrounded
		{
			[Token(Token = "0x600062A")]
			[Address(RVA = "0x11A5B58", Offset = "0x11A5B58", VA = "0x11A5B58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AB7C", Offset = "0xB3AB7C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600062B")]
			[Address(RVA = "0x11A5B60", Offset = "0x11A5B60", VA = "0x11A5B60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AB8C", Offset = "0xB3AB8C")]
			private set
			{
			}
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0x11A5B6C", Offset = "0x11A5B6C", VA = "0x11A5B6C")]
		private void Start()
		{
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0x11A5BF4", Offset = "0x11A5BF4", VA = "0x11A5BF4")]
		private void Update()
		{
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0x11A62F0", Offset = "0x11A62F0", VA = "0x11A62F0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0x11A5C48", Offset = "0x11A5C48", VA = "0x11A5C48")]
		private void Rotate()
		{
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0x11A6048", Offset = "0x11A6048", VA = "0x11A6048")]
		private void Move()
		{
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0x11A632C", Offset = "0x11A632C", VA = "0x11A632C")]
		private Vector3 GetInputVector()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0x11A6424", Offset = "0x11A6424", VA = "0x11A6424")]
		private Vector3 GetInputVectorRaw()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0x11A64C4", Offset = "0x11A64C4", VA = "0x11A64C4")]
		public SimpleLocomotion()
		{
		}
	}
	[Token(Token = "0x20000EE")]
	public class UserControlAI : UserControlThirdPerson
	{
		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform moveTarget;

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float stoppingDistance;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float stoppingThreshold;

		[Token(Token = "0x6000634")]
		[Address(RVA = "0x11A88EC", Offset = "0x11A88EC", VA = "0x11A88EC", Slot = "4")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0x11A8AF0", Offset = "0x11A8AF0", VA = "0x11A8AF0")]
		public UserControlAI()
		{
		}
	}
	[Token(Token = "0x20000EF")]
	public class UserControlThirdPerson : MonoBehaviour
	{
		[Token(Token = "0x20002AC")]
		public struct State
		{
			[Token(Token = "0x4000E22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 move;

			[Token(Token = "0x4000E23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 lookPos;

			[Token(Token = "0x4000E24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool crouch;

			[Token(Token = "0x4000E25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			public bool jump;

			[Token(Token = "0x4000E26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int actionIndex;
		}

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool walkByDefault;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool canCrouch;

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool canJump;

		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public State state;

		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform cam;

		[Token(Token = "0x6000636")]
		[Address(RVA = "0x11A9210", Offset = "0x11A9210", VA = "0x11A9210")]
		private void Start()
		{
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0x11A8C30", Offset = "0x11A8C30", VA = "0x11A8C30", Slot = "4")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x11A8B0C", Offset = "0x11A8B0C", VA = "0x11A8B0C")]
		public UserControlThirdPerson()
		{
		}
	}
	[Token(Token = "0x20000F0")]
	public class ApplicationQuit : MonoBehaviour
	{
		[Token(Token = "0x6000639")]
		[Address(RVA = "0x140C6E8", Offset = "0x140C6E8", VA = "0x140C6E8")]
		private void Update()
		{
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x140C724", Offset = "0x140C724", VA = "0x140C724")]
		public ApplicationQuit()
		{
		}
	}
	[Token(Token = "0x20000F1")]
	public class SlowMo : MonoBehaviour
	{
		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private KeyCode[] keyCodes;

		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool mouse0;

		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		private bool mouse1;

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float slowMoTimeScale;

		[Token(Token = "0x600063B")]
		[Address(RVA = "0x11A64EC", Offset = "0x11A64EC", VA = "0x11A64EC")]
		private void Update()
		{
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0x11A6520", Offset = "0x11A6520", VA = "0x11A6520")]
		private bool IsSlowMotion()
		{
			return default(bool);
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x11A65D0", Offset = "0x11A65D0", VA = "0x11A65D0")]
		public SlowMo()
		{
		}
	}
}
namespace RootMotion.FinalIK
{
	[Token(Token = "0x20000F2")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB2FB04", Offset = "0xB2FB04")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2FB04", Offset = "0xB2FB04")]
	public class BipedIK : SolverManager
	{
		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BipedIKSolvers solvers;

		[Token(Token = "0x600063E")]
		[Address(RVA = "0x11AD794", Offset = "0x11AD794", VA = "0x11AD794")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3AB9C", Offset = "0xB3AB9C")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0x11AD7E0", Offset = "0x11AD7E0", VA = "0x11AD7E0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3ABD4", Offset = "0xB3ABD4")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0x11AD82C", Offset = "0x11AD82C", VA = "0x11AD82C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3AC0C", Offset = "0xB3AC0C")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0x11AD878", Offset = "0x11AD878", VA = "0x11AD878")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3AC44", Offset = "0xB3AC44")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0x11AD8C4", Offset = "0x11AD8C4", VA = "0x11AD8C4")]
		public float GetIKPositionWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0x11AD960", Offset = "0x11AD960", VA = "0x11AD960")]
		public float GetIKRotationWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0x11AD980", Offset = "0x11AD980", VA = "0x11AD980")]
		public void SetIKPositionWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x6000645")]
		[Address(RVA = "0x11AD9B0", Offset = "0x11AD9B0", VA = "0x11AD9B0")]
		public void SetIKRotationWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0x11AD9E0", Offset = "0x11AD9E0", VA = "0x11AD9E0")]
		public void SetIKPosition(AvatarIKGoal goal, Vector3 IKPosition)
		{
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0x11ADA20", Offset = "0x11ADA20", VA = "0x11ADA20")]
		public void SetIKRotation(AvatarIKGoal goal, Quaternion IKRotation)
		{
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0x11ADA64", Offset = "0x11ADA64", VA = "0x11ADA64")]
		public Vector3 GetIKPosition(AvatarIKGoal goal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0x11ADA88", Offset = "0x11ADA88", VA = "0x11ADA88")]
		public Quaternion GetIKRotation(AvatarIKGoal goal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0x11ADAAC", Offset = "0x11ADAAC", VA = "0x11ADAAC")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes)
		{
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0x11ADAD4", Offset = "0x11ADAD4", VA = "0x11ADAD4")]
		public void SetLookAtPosition(Vector3 lookAtPosition)
		{
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0x11ADB00", Offset = "0x11ADB00", VA = "0x11ADB00")]
		public void SetSpinePosition(Vector3 spinePosition)
		{
		}

		[Token(Token = "0x600064D")]
		[Address(RVA = "0x11ADB2C", Offset = "0x11ADB2C", VA = "0x11ADB2C")]
		public void SetSpineWeight(float weight)
		{
		}

		[Token(Token = "0x600064E")]
		[Address(RVA = "0x11AD8E4", Offset = "0x11AD8E4", VA = "0x11AD8E4")]
		public IKSolverLimb GetGoalIK(AvatarIKGoal goal)
		{
			return null;
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0x11ADB54", Offset = "0x11ADB54", VA = "0x11ADB54")]
		public void InitiateBipedIK()
		{
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0x11ADB60", Offset = "0x11ADB60", VA = "0x11ADB60")]
		public void UpdateBipedIK()
		{
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0x11ADB6C", Offset = "0x11ADB6C", VA = "0x11ADB6C")]
		public void SetToDefaults()
		{
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0x11ADE54", Offset = "0x11ADE54", VA = "0x11ADE54", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0x11ADEFC", Offset = "0x11ADEFC", VA = "0x11ADEFC", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0x11AE244", Offset = "0x11AE244", VA = "0x11AE244", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0x11AE694", Offset = "0x11AE694", VA = "0x11AE694")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0x11AE6C8", Offset = "0x11AE6C8", VA = "0x11AE6C8")]
		public BipedIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F3")]
	public class BipedIKSolvers
	{
		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IKSolverLimb leftFoot;

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IKSolverLimb rightFoot;

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IKSolverLimb leftHand;

		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IKSolverLimb rightHand;

		[Token(Token = "0x4000673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolverFABRIK spine;

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt lookAt;

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverAim aim;

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Constraints pelvis;

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb[] _limbs;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IKSolver[] _ikSolvers;

		[Token(Token = "0x17000055")]
		public IKSolverLimb[] limbs
		{
			[Token(Token = "0x6000657")]
			[Address(RVA = "0x11ADD0C", Offset = "0x11ADD0C", VA = "0x11ADD0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000056")]
		public IKSolver[] ikSolvers
		{
			[Token(Token = "0x6000658")]
			[Address(RVA = "0x11AE894", Offset = "0x11AE894", VA = "0x11AE894")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0x11AE0CC", Offset = "0x11AE0CC", VA = "0x11AE0CC")]
		public void AssignReferences(BipedReferences references)
		{
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0x11AE74C", Offset = "0x11AE74C", VA = "0x11AE74C")]
		public BipedIKSolvers()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F4")]
	public abstract class Constraint
	{
		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float weight;

		[Token(Token = "0x17000057")]
		public bool isValid
		{
			[Token(Token = "0x600065B")]
			[Address(RVA = "0x11AEE94", Offset = "0x11AEE94", VA = "0x11AEE94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600065C")]
		public abstract void UpdateConstraint();

		[Token(Token = "0x600065D")]
		[Address(RVA = "0x11AEF04", Offset = "0x11AEF04", VA = "0x11AEF04")]
		protected Constraint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F5")]
	public class ConstraintPosition : Constraint
	{
		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 position;

		[Token(Token = "0x600065E")]
		[Address(RVA = "0x11AEF0C", Offset = "0x11AEF0C", VA = "0x11AEF0C", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0x11AF018", Offset = "0x11AF018", VA = "0x11AF018")]
		public ConstraintPosition()
		{
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0x11AF020", Offset = "0x11AF020", VA = "0x11AF020")]
		public ConstraintPosition(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F6")]
	public class ConstraintPositionOffset : Constraint
	{
		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 offset;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 defaultLocalPosition;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 lastLocalPosition;

		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initiated;

		[Token(Token = "0x17000058")]
		private bool positionChanged
		{
			[Token(Token = "0x6000664")]
			[Address(RVA = "0x11AF1E8", Offset = "0x11AF1E8", VA = "0x11AF1E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0x11AF04C", Offset = "0x11AF04C", VA = "0x11AF04C", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0x11AF2A4", Offset = "0x11AF2A4", VA = "0x11AF2A4")]
		public ConstraintPositionOffset()
		{
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0x11AF2AC", Offset = "0x11AF2AC", VA = "0x11AF2AC")]
		public ConstraintPositionOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F7")]
	public class ConstraintRotation : Constraint
	{
		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rotation;

		[Token(Token = "0x6000665")]
		[Address(RVA = "0x11AF2D8", Offset = "0x11AF2D8", VA = "0x11AF2D8", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0x11AF400", Offset = "0x11AF400", VA = "0x11AF400")]
		public ConstraintRotation()
		{
		}

		[Token(Token = "0x6000667")]
		[Address(RVA = "0x11AF408", Offset = "0x11AF408", VA = "0x11AF408")]
		public ConstraintRotation(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F8")]
	public class ConstraintRotationOffset : Constraint
	{
		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion offset;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastLocalRotation;

		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion defaultTargetLocalRotation;

		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool initiated;

		[Token(Token = "0x17000059")]
		private bool rotationChanged
		{
			[Token(Token = "0x600066B")]
			[Address(RVA = "0x11AF5D4", Offset = "0x11AF5D4", VA = "0x11AF5D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000668")]
		[Address(RVA = "0x11AF434", Offset = "0x11AF434", VA = "0x11AF434", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0x11AF6A4", Offset = "0x11AF6A4", VA = "0x11AF6A4")]
		public ConstraintRotationOffset()
		{
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0x11AF6AC", Offset = "0x11AF6AC", VA = "0x11AF6AC")]
		public ConstraintRotationOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F9")]
	public class Constraints
	{
		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 positionOffset;

		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 position;

		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB33B20", Offset = "0xB33B20")]
		public float positionWeight;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 rotationOffset;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 rotation;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB33B38", Offset = "0xB33B38")]
		public float rotationWeight;

		[Token(Token = "0x600066C")]
		[Address(RVA = "0x11AF6D8", Offset = "0x11AF6D8", VA = "0x11AF6D8")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0x11AE1F0", Offset = "0x11AE1F0", VA = "0x11AE1F0")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x600066E")]
		[Address(RVA = "0x11AE3CC", Offset = "0x11AE3CC", VA = "0x11AE3CC")]
		public void Update()
		{
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0x11AEA60", Offset = "0x11AEA60", VA = "0x11AEA60")]
		public Constraints()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000FA")]
	public class Finger
	{
		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33B50", Offset = "0xB33B50")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB33B50", Offset = "0xB33B50")]
		public float weight;

		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33BA4", Offset = "0xB33BA4")]
		public Transform bone1;

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33BDC", Offset = "0xB33BDC")]
		public Transform bone2;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33C14", Offset = "0xB33C14")]
		public Transform bone3;

		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33C4C", Offset = "0xB33C4C")]
		public Transform tip;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33C84", Offset = "0xB33C84")]
		public Transform target;

		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB33CBC", Offset = "0xB33CBC")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IKSolverLimb solver;

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion bone3RelativeToTarget;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 bone3DefaultLocalPosition;

		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Quaternion bone3DefaultLocalRotation;

		[Token(Token = "0x1700005A")]
		public bool initiated
		{
			[Token(Token = "0x6000670")]
			[Address(RVA = "0x17FB4D0", Offset = "0x17FB4D0", VA = "0x17FB4D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AC7C", Offset = "0xB3AC7C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000671")]
			[Address(RVA = "0x17FB4D8", Offset = "0x17FB4D8", VA = "0x17FB4D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AC8C", Offset = "0xB3AC8C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700005B")]
		public Vector3 IKPosition
		{
			[Token(Token = "0x6000672")]
			[Address(RVA = "0x17FB4E4", Offset = "0x17FB4E4", VA = "0x17FB4E4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000673")]
			[Address(RVA = "0x17FB504", Offset = "0x17FB504", VA = "0x17FB504")]
			set
			{
			}
		}

		[Token(Token = "0x1700005C")]
		public Quaternion IKRotation
		{
			[Token(Token = "0x6000674")]
			[Address(RVA = "0x17FB524", Offset = "0x17FB524", VA = "0x17FB524")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000675")]
			[Address(RVA = "0x17FB544", Offset = "0x17FB544", VA = "0x17FB544")]
			set
			{
			}
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0x17FB564", Offset = "0x17FB564", VA = "0x17FB564")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000677")]
		[Address(RVA = "0x17FB664", Offset = "0x17FB664", VA = "0x17FB664")]
		public void Initiate(Transform hand, int index)
		{
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0x17FBA14", Offset = "0x17FBA14", VA = "0x17FBA14")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000679")]
		[Address(RVA = "0x17FBAE4", Offset = "0x17FBAE4", VA = "0x17FBAE4")]
		public void Update(float masterWeight)
		{
		}

		[Token(Token = "0x600067A")]
		[Address(RVA = "0x17FBDF4", Offset = "0x17FBDF4", VA = "0x17FBDF4")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x20000FB")]
	public class FingerRig : SolverManager
	{
		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33CCC", Offset = "0xB33CCC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB33CCC", Offset = "0xB33CCC")]
		public float weight;

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Finger[] fingers;

		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB33D20", Offset = "0xB33D20")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x1700005D")]
		public bool initiated
		{
			[Token(Token = "0x600067B")]
			[Address(RVA = "0x17FBE04", Offset = "0x17FBE04", VA = "0x17FBE04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AC9C", Offset = "0xB3AC9C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600067C")]
			[Address(RVA = "0x17FBE0C", Offset = "0x17FBE0C", VA = "0x17FBE0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3ACAC", Offset = "0xB3ACAC")]
			private set
			{
			}
		}

		[Token(Token = "0x600067D")]
		[Address(RVA = "0x17FBE18", Offset = "0x17FBE18", VA = "0x17FBE18")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0x17FBEA0", Offset = "0x17FBEA0", VA = "0x17FBEA0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3ACBC", Offset = "0xB3ACBC")]
		public void AutoDetect()
		{
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0x17FC1C0", Offset = "0x17FC1C0", VA = "0x17FC1C0")]
		public void AddFinger(Transform bone1, Transform bone2, Transform bone3, Transform tip, [Optional] Transform target)
		{
		}

		[Token(Token = "0x6000680")]
		[Address(RVA = "0x17FC330", Offset = "0x17FC330", VA = "0x17FC330")]
		public void RemoveFinger(int index)
		{
		}

		[Token(Token = "0x6000681")]
		[Address(RVA = "0x17FC0B8", Offset = "0x17FC0B8", VA = "0x17FC0B8")]
		private void AddChildrenRecursive(Transform parent, ref Transform[] array)
		{
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0x17FC498", Offset = "0x17FC498", VA = "0x17FC498", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000683")]
		[Address(RVA = "0x17FC558", Offset = "0x17FC558", VA = "0x17FC558")]
		public void UpdateFingerSolvers()
		{
		}

		[Token(Token = "0x6000684")]
		[Address(RVA = "0x17FC5DC", Offset = "0x17FC5DC", VA = "0x17FC5DC")]
		public void FixFingerTransforms()
		{
		}

		[Token(Token = "0x6000685")]
		[Address(RVA = "0x17FC644", Offset = "0x17FC644", VA = "0x17FC644", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000686")]
		[Address(RVA = "0x17FC648", Offset = "0x17FC648", VA = "0x17FC648", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000687")]
		[Address(RVA = "0x17FC64C", Offset = "0x17FC64C", VA = "0x17FC64C")]
		public FingerRig()
		{
		}
	}
	[Token(Token = "0x20000FC")]
	public abstract class Grounder : MonoBehaviour
	{
		[Token(Token = "0x20002AD")]
		public delegate void GrounderDelegate();

		[Token(Token = "0x400069C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33D30", Offset = "0xB33D30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB33D30", Offset = "0xB33D30")]
		public float weight;

		[Token(Token = "0x400069D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33D84", Offset = "0xB33D84")]
		public Grounding solver;

		[Token(Token = "0x400069E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrounderDelegate OnPreGrounder;

		[Token(Token = "0x400069F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrounderDelegate OnPostGrounder;

		[Token(Token = "0x40006A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected bool initiated;

		[Token(Token = "0x6000688")]
		public abstract void ResetPosition();

		[Token(Token = "0x6000689")]
		[Address(RVA = "0x17FD688", Offset = "0x17FD688", VA = "0x17FD688")]
		protected Vector3 GetSpineOffsetTarget()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0x17FD95C", Offset = "0x17FD95C", VA = "0x17FD95C")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0x17FD7CC", Offset = "0x17FD7CC", VA = "0x17FD7CC")]
		private Vector3 GetLegSpineBendVector(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600068C")]
		[Address(RVA = "0x17FD990", Offset = "0x17FD990", VA = "0x17FD990")]
		private Vector3 GetLegSpineTangent(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600068D")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x600068E")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x600068F")]
		[Address(RVA = "0x17FDB98", Offset = "0x17FDB98", VA = "0x17FDB98")]
		protected Grounder()
		{
		}
	}
	[Token(Token = "0x20000FD")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB2FB64", Offset = "0xB2FB64")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2FB64", Offset = "0xB2FB64")]
	public class GrounderBipedIK : Grounder
	{
		[Token(Token = "0x40006A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33DBC", Offset = "0xB33DBC")]
		public BipedIK ik;

		[Token(Token = "0x40006A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33DF4", Offset = "0xB33DF4")]
		public float spineBend;

		[Token(Token = "0x40006A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33E2C", Offset = "0xB33E2C")]
		public float spineSpeed;

		[Token(Token = "0x40006A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform[] feet;

		[Token(Token = "0x40006A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion[] footRotations;

		[Token(Token = "0x40006A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x40006A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x40006A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 spineOffset;

		[Token(Token = "0x40006A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastWeight;

		[Token(Token = "0x6000690")]
		[Address(RVA = "0x17FDEE8", Offset = "0x17FDEE8", VA = "0x17FDEE8", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3ACF4", Offset = "0xB3ACF4")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0x17FDF34", Offset = "0x17FDF34", VA = "0x17FDF34", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3AD2C", Offset = "0xB3AD2C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000692")]
		[Address(RVA = "0x17FDF80", Offset = "0x17FDF80", VA = "0x17FDF80", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0x17FE084", Offset = "0x17FE084", VA = "0x17FE084")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0x17FE134", Offset = "0x17FE134", VA = "0x17FE134")]
		private void Update()
		{
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0x17FE1E8", Offset = "0x17FE1E8", VA = "0x17FE1E8")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0x17FE6FC", Offset = "0x17FE6FC", VA = "0x17FE6FC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0x17FE750", Offset = "0x17FE750", VA = "0x17FE750")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000698")]
		[Address(RVA = "0x17FEF00", Offset = "0x17FEF00", VA = "0x17FEF00")]
		private void SetLegIK(IKSolverLimb limb, int index)
		{
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0x17FF060", Offset = "0x17FF060", VA = "0x17FF060")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0x17FF1F0", Offset = "0x17FF1F0", VA = "0x17FF1F0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0x17FF350", Offset = "0x17FF350", VA = "0x17FF350")]
		public GrounderBipedIK()
		{
		}
	}
	[Token(Token = "0x20000FE")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB2FBC4", Offset = "0xB2FBC4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2FBC4", Offset = "0xB2FBC4")]
	public class GrounderFBBIK : Grounder
	{
		[Serializable]
		[Token(Token = "0x20002AE")]
		public class SpineEffector
		{
			[Token(Token = "0x4000E27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3744C", Offset = "0xB3744C")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4000E28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37484", Offset = "0xB37484")]
			public float horizontalWeight;

			[Token(Token = "0x4000E29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB374BC", Offset = "0xB374BC")]
			public float verticalWeight;

			[Token(Token = "0x6001182")]
			[Address(RVA = "0x18001A0", Offset = "0x18001A0", VA = "0x18001A0")]
			public SpineEffector()
			{
			}
		}

		[Token(Token = "0x40006AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33E64", Offset = "0xB33E64")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40006AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33E9C", Offset = "0xB33E9C")]
		public float spineBend;

		[Token(Token = "0x40006AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33ED4", Offset = "0xB33ED4")]
		public float spineSpeed;

		[Token(Token = "0x40006AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SpineEffector[] spine;

		[Token(Token = "0x40006AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] feet;

		[Token(Token = "0x40006AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 spineOffset;

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool firstSolve;

		[Token(Token = "0x600069C")]
		[Address(RVA = "0x17FF3D0", Offset = "0x17FF3D0", VA = "0x17FF3D0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3AD64", Offset = "0xB3AD64")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0x17FF41C", Offset = "0x17FF41C", VA = "0x17FF41C", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3AD9C", Offset = "0xB3AD9C")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0x17FF468", Offset = "0x17FF468", VA = "0x17FF468", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3ADD4", Offset = "0xB3ADD4")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0x17FF4B4", Offset = "0x17FF4B4", VA = "0x17FF4B4", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x17FF534", Offset = "0x17FF534", VA = "0x17FF534")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x17FF5CC", Offset = "0x17FF5CC", VA = "0x17FF5CC")]
		private void Update()
		{
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x17FF87C", Offset = "0x17FF87C", VA = "0x17FF87C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x17FF888", Offset = "0x17FF888", VA = "0x17FF888")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x17FF688", Offset = "0x17FF688", VA = "0x17FF688")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x17FF894", Offset = "0x17FF894", VA = "0x17FF894")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x17FFD34", Offset = "0x17FFD34", VA = "0x17FFD34")]
		private void SetLegIK(IKEffector effector, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x17FFEF4", Offset = "0x17FFEF4", VA = "0x17FFEF4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x180002C", Offset = "0x180002C", VA = "0x180002C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x1800120", Offset = "0x1800120", VA = "0x1800120")]
		public GrounderFBBIK()
		{
		}
	}
	[Token(Token = "0x20000FF")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB2FC24", Offset = "0xB2FC24")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2FC24", Offset = "0xB2FC24")]
	public class GrounderIK : Grounder
	{
		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IK[] legs;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33F0C", Offset = "0xB33F0C")]
		public Transform pelvis;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33F44", Offset = "0xB33F44")]
		public Transform characterRoot;

		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33F7C", Offset = "0xB33F7C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB33F7C", Offset = "0xB33F7C")]
		public float rootRotationWeight;

		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB33FD0", Offset = "0xB33FD0")]
		public float rootRotationSpeed;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34008", Offset = "0xB34008")]
		public float maxRootRotationAngle;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform[] feet;

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] footRotations;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int solvedFeet;

		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool solved;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastWeight;

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x18001B0", Offset = "0x18001B0", VA = "0x18001B0", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3AE0C", Offset = "0xB3AE0C")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x18001FC", Offset = "0x18001FC", VA = "0x18001FC", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3AE44", Offset = "0xB3AE44")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x1800248", Offset = "0x1800248", VA = "0x1800248", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x1800260", Offset = "0x1800260", VA = "0x1800260")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x1800450", Offset = "0x1800450", VA = "0x1800450")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x1800550", Offset = "0x1800550", VA = "0x1800550")]
		private void Update()
		{
		}

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x1800B94", Offset = "0x1800B94", VA = "0x1800B94")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x1800EB8", Offset = "0x1800EB8", VA = "0x1800EB8")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x1801128", Offset = "0x1801128", VA = "0x1801128")]
		private void SetLegIK(int index)
		{
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x180124C", Offset = "0x180124C", VA = "0x180124C")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x18013D8", Offset = "0x18013D8", VA = "0x18013D8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x1801598", Offset = "0x1801598", VA = "0x1801598")]
		public GrounderIK()
		{
		}
	}
	[Token(Token = "0x2000100")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB2FC84", Offset = "0xB2FC84")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2FC84", Offset = "0xB2FC84")]
	public class GrounderQuadruped : Grounder
	{
		[Token(Token = "0x20002AF")]
		public struct Foot
		{
			[Token(Token = "0x4000E2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IKSolver solver;

			[Token(Token = "0x4000E2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x4000E2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Quaternion rotation;

			[Token(Token = "0x4000E2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grounding.Leg leg;

			[Token(Token = "0x6001183")]
			[Address(RVA = "0xC39FE8", Offset = "0xC39FE8", VA = "0xC39FE8")]
			public Foot(IKSolver solver, Transform transform)
			{
			}
		}

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34040", Offset = "0xB34040")]
		public Grounding forelegSolver;

		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34078", Offset = "0xB34078")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34078", Offset = "0xB34078")]
		public float rootRotationWeight;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB340CC", Offset = "0xB340CC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB340CC", Offset = "0xB340CC")]
		public float minRootRotation;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34124", Offset = "0xB34124")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34124", Offset = "0xB34124")]
		public float maxRootRotation;

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3417C", Offset = "0xB3417C")]
		public float rootRotationSpeed;

		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB341B4", Offset = "0xB341B4")]
		public float maxLegOffset;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB341EC", Offset = "0xB341EC")]
		public float maxForeLegOffset;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34224", Offset = "0xB34224")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34224", Offset = "0xB34224")]
		public float maintainHeadRotationWeight;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34278", Offset = "0xB34278")]
		public Transform characterRoot;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB342B0", Offset = "0xB342B0")]
		public Transform pelvis;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB342E8", Offset = "0xB342E8")]
		public Transform lastSpineBone;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34320", Offset = "0xB34320")]
		public Transform head;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IK[] legs;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IK[] forelegs;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Vector3 gravity;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Foot[] feet;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Quaternion animatedPelvisLocalRotation;

		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Quaternion animatedHeadLocalRotation;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion solvedPelvisLocalRotation;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion solvedHeadLocalRotation;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int solvedFeet;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool solved;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float angle;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Transform forefeetRoot;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Quaternion headRotation;

		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float lastWeight;

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x1801618", Offset = "0x1801618", VA = "0x1801618", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3AE7C", Offset = "0xB3AE7C")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x1801664", Offset = "0x1801664", VA = "0x1801664", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3AEB4", Offset = "0xB3AEB4")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x18016B0", Offset = "0x18016B0", VA = "0x18016B0", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x18016E4", Offset = "0x18016E4", VA = "0x18016E4")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x1801814", Offset = "0x1801814", VA = "0x1801814")]
		private bool IsReadyToInitiateLegs(IK[] ikComponents)
		{
			return default(bool);
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x18019D4", Offset = "0x18019D4", VA = "0x18019D4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x1801A3C", Offset = "0x1801A3C", VA = "0x1801A3C")]
		private void Update()
		{
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x1801AF4", Offset = "0x1801AF4", VA = "0x1801AF4")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x1801DD8", Offset = "0x1801DD8", VA = "0x1801DD8")]
		private Transform[] InitiateFeet(IK[] ikComponents, ref Foot[] f, int indexOffset)
		{
			return null;
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x180211C", Offset = "0x180211C", VA = "0x180211C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x1802268", Offset = "0x1802268", VA = "0x1802268")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x18025F0", Offset = "0x18025F0", VA = "0x18025F0")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x1802DE0", Offset = "0x1802DE0", VA = "0x1802DE0")]
		private void UpdateForefeetRoot()
		{
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x18030A0", Offset = "0x18030A0", VA = "0x18030A0")]
		private void SetFootIK(Foot foot, float maxOffset)
		{
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x1803200", Offset = "0x1803200", VA = "0x1803200")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x18034DC", Offset = "0x18034DC", VA = "0x18034DC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x1803514", Offset = "0x1803514", VA = "0x1803514")]
		private void DestroyLegs(IK[] ikComponents)
		{
		}

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x18036CC", Offset = "0x18036CC", VA = "0x18036CC")]
		public GrounderQuadruped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000101")]
	public class Grounding
	{
		[Serializable]
		[Token(Token = "0x20002B0")]
		public enum Quality
		{
			[Token(Token = "0x4000E2F")]
			Fastest,
			[Token(Token = "0x4000E30")]
			Simple,
			[Token(Token = "0x4000E31")]
			Best
		}

		[Token(Token = "0x20002B1")]
		public class Leg
		{
			[Token(Token = "0x4000E32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB374F4", Offset = "0xB374F4")]
			private bool <isGrounded>k__BackingField;

			[Token(Token = "0x4000E33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37504", Offset = "0xB37504")]
			private Vector3 <IKPosition>k__BackingField;

			[Token(Token = "0x4000E34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37514", Offset = "0xB37514")]
			private Quaternion <rotationOffset>k__BackingField;

			[Token(Token = "0x4000E35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37524", Offset = "0xB37524")]
			private bool <initiated>k__BackingField;

			[Token(Token = "0x4000E36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37534", Offset = "0xB37534")]
			private float <heightFromGround>k__BackingField;

			[Token(Token = "0x4000E37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37544", Offset = "0xB37544")]
			private Vector3 <velocity>k__BackingField;

			[Token(Token = "0x4000E38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37554", Offset = "0xB37554")]
			private Transform <transform>k__BackingField;

			[Token(Token = "0x4000E39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37564", Offset = "0xB37564")]
			private float <IKOffset>k__BackingField;

			[Token(Token = "0x4000E3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Grounding grounding;

			[Token(Token = "0x4000E3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private float lastTime;

			[Token(Token = "0x4000E3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			private float deltaTime;

			[Token(Token = "0x4000E3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Vector3 lastPosition;

			[Token(Token = "0x4000E3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion toHitNormal;

			[Token(Token = "0x4000E3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Quaternion r;

			[Token(Token = "0x4000E40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			private RaycastHit heelHit;

			[Token(Token = "0x4000E41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private Vector3 up;

			[Token(Token = "0x170002A3")]
			public bool isGrounded
			{
				[Token(Token = "0x6001184")]
				[Address(RVA = "0x1804D90", Offset = "0x1804D90", VA = "0x1804D90")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EDE8", Offset = "0xB3EDE8")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001185")]
				[Address(RVA = "0x1804D98", Offset = "0x1804D98", VA = "0x1804D98")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EDF8", Offset = "0xB3EDF8")]
				private set
				{
				}
			}

			[Token(Token = "0x170002A4")]
			public Vector3 IKPosition
			{
				[Token(Token = "0x6001186")]
				[Address(RVA = "0x1804DA4", Offset = "0x1804DA4", VA = "0x1804DA4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EE08", Offset = "0xB3EE08")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001187")]
				[Address(RVA = "0x1804DB0", Offset = "0x1804DB0", VA = "0x1804DB0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EE18", Offset = "0xB3EE18")]
				private set
				{
				}
			}

			[Token(Token = "0x170002A5")]
			public Quaternion rotationOffset
			{
				[Token(Token = "0x6001188")]
				[Address(RVA = "0x1804DBC", Offset = "0x1804DBC", VA = "0x1804DBC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EE28", Offset = "0xB3EE28")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6001189")]
				[Address(RVA = "0x1804DC8", Offset = "0x1804DC8", VA = "0x1804DC8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EE38", Offset = "0xB3EE38")]
				private set
				{
				}
			}

			[Token(Token = "0x170002A6")]
			public bool initiated
			{
				[Token(Token = "0x600118A")]
				[Address(RVA = "0x1804DD4", Offset = "0x1804DD4", VA = "0x1804DD4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EE48", Offset = "0xB3EE48")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600118B")]
				[Address(RVA = "0x1804DDC", Offset = "0x1804DDC", VA = "0x1804DDC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EE58", Offset = "0xB3EE58")]
				private set
				{
				}
			}

			[Token(Token = "0x170002A7")]
			public float heightFromGround
			{
				[Token(Token = "0x600118C")]
				[Address(RVA = "0x1804DE8", Offset = "0x1804DE8", VA = "0x1804DE8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EE68", Offset = "0xB3EE68")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600118D")]
				[Address(RVA = "0x1804DF0", Offset = "0x1804DF0", VA = "0x1804DF0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EE78", Offset = "0xB3EE78")]
				private set
				{
				}
			}

			[Token(Token = "0x170002A8")]
			public Vector3 velocity
			{
				[Token(Token = "0x600118E")]
				[Address(RVA = "0x1804DF8", Offset = "0x1804DF8", VA = "0x1804DF8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EE88", Offset = "0xB3EE88")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600118F")]
				[Address(RVA = "0x1804E04", Offset = "0x1804E04", VA = "0x1804E04")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EE98", Offset = "0xB3EE98")]
				private set
				{
				}
			}

			[Token(Token = "0x170002A9")]
			public Transform transform
			{
				[Token(Token = "0x6001190")]
				[Address(RVA = "0x1804E10", Offset = "0x1804E10", VA = "0x1804E10")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EEA8", Offset = "0xB3EEA8")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001191")]
				[Address(RVA = "0x1804E18", Offset = "0x1804E18", VA = "0x1804E18")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EEB8", Offset = "0xB3EEB8")]
				private set
				{
				}
			}

			[Token(Token = "0x170002AA")]
			public float IKOffset
			{
				[Token(Token = "0x6001192")]
				[Address(RVA = "0x1804E20", Offset = "0x1804E20", VA = "0x1804E20")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EEC8", Offset = "0xB3EEC8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001193")]
				[Address(RVA = "0x1804E28", Offset = "0x1804E28", VA = "0x1804E28")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EED8", Offset = "0xB3EED8")]
				private set
				{
				}
			}

			[Token(Token = "0x170002AB")]
			public float stepHeightFromGround
			{
				[Token(Token = "0x6001198")]
				[Address(RVA = "0x18056EC", Offset = "0x18056EC", VA = "0x18056EC")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170002AC")]
			private float rootYOffset
			{
				[Token(Token = "0x60011A1")]
				[Address(RVA = "0x18059E0", Offset = "0x18059E0", VA = "0x18059E0")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6001194")]
			[Address(RVA = "0x1803DD8", Offset = "0x1803DD8", VA = "0x1803DD8")]
			public void Initiate(Grounding grounding, Transform transform)
			{
			}

			[Token(Token = "0x6001195")]
			[Address(RVA = "0x1804E30", Offset = "0x1804E30", VA = "0x1804E30")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x6001196")]
			[Address(RVA = "0x18049A0", Offset = "0x18049A0", VA = "0x18049A0")]
			public void Reset()
			{
			}

			[Token(Token = "0x6001197")]
			[Address(RVA = "0x1803EB4", Offset = "0x1803EB4", VA = "0x1803EB4")]
			public void Process()
			{
			}

			[Token(Token = "0x6001199")]
			[Address(RVA = "0x1805440", Offset = "0x1805440", VA = "0x1805440")]
			private RaycastHit GetCapsuleHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x600119A")]
			[Address(RVA = "0x1804E7C", Offset = "0x1804E7C", VA = "0x1804E7C")]
			private RaycastHit GetRaycastHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x600119B")]
			[Address(RVA = "0x180586C", Offset = "0x180586C", VA = "0x180586C")]
			private Vector3 RotateNormal(Vector3 normal)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600119C")]
			[Address(RVA = "0x18050D0", Offset = "0x18050D0", VA = "0x18050D0")]
			private void SetFootToPoint(Vector3 normal, Vector3 point)
			{
			}

			[Token(Token = "0x600119D")]
			[Address(RVA = "0x18051D8", Offset = "0x18051D8", VA = "0x18051D8")]
			private void SetFootToPlane(Vector3 planeNormal, Vector3 planePoint, Vector3 heelHitPoint)
			{
			}

			[Token(Token = "0x600119E")]
			[Address(RVA = "0x1805968", Offset = "0x1805968", VA = "0x1805968")]
			private float GetHeightFromGround(Vector3 hitPoint)
			{
				return default(float);
			}

			[Token(Token = "0x600119F")]
			[Address(RVA = "0x1805778", Offset = "0x1805778", VA = "0x1805778")]
			private void RotateFoot()
			{
			}

			[Token(Token = "0x60011A0")]
			[Address(RVA = "0x1805B14", Offset = "0x1805B14", VA = "0x1805B14")]
			private Quaternion GetRotationOffsetTarget()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60011A2")]
			[Address(RVA = "0x1803D58", Offset = "0x1803D58", VA = "0x1803D58")]
			public Leg()
			{
			}
		}

		[Token(Token = "0x20002B2")]
		public class Pelvis
		{
			[Token(Token = "0x4000E42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37574", Offset = "0xB37574")]
			private Vector3 <IKOffset>k__BackingField;

			[Token(Token = "0x4000E43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37584", Offset = "0xB37584")]
			private float <heightOffset>k__BackingField;

			[Token(Token = "0x4000E44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Grounding grounding;

			[Token(Token = "0x4000E45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 lastRootPosition;

			[Token(Token = "0x4000E46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float damperF;

			[Token(Token = "0x4000E47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool initiated;

			[Token(Token = "0x4000E48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float lastTime;

			[Token(Token = "0x170002AD")]
			public Vector3 IKOffset
			{
				[Token(Token = "0x60011A3")]
				[Address(RVA = "0x1805C04", Offset = "0x1805C04", VA = "0x1805C04")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EEE8", Offset = "0xB3EEE8")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60011A4")]
				[Address(RVA = "0x1805C10", Offset = "0x1805C10", VA = "0x1805C10")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EEF8", Offset = "0xB3EEF8")]
				private set
				{
				}
			}

			[Token(Token = "0x170002AE")]
			public float heightOffset
			{
				[Token(Token = "0x60011A5")]
				[Address(RVA = "0x1805C1C", Offset = "0x1805C1C", VA = "0x1805C1C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EF08", Offset = "0xB3EF08")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60011A6")]
				[Address(RVA = "0x1805C24", Offset = "0x1805C24", VA = "0x1805C24")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EF18", Offset = "0xB3EF18")]
				private set
				{
				}
			}

			[Token(Token = "0x60011A7")]
			[Address(RVA = "0x1803E8C", Offset = "0x1803E8C", VA = "0x1803E8C")]
			public void Initiate(Grounding grounding)
			{
			}

			[Token(Token = "0x60011A8")]
			[Address(RVA = "0x18048F0", Offset = "0x18048F0", VA = "0x18048F0")]
			public void Reset()
			{
			}

			[Token(Token = "0x60011A9")]
			[Address(RVA = "0x1805C2C", Offset = "0x1805C2C", VA = "0x1805C2C")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x60011AA")]
			[Address(RVA = "0x1804688", Offset = "0x1804688", VA = "0x1804688")]
			public void Process(float lowestOffset, float highestOffset, bool isGrounded)
			{
			}

			[Token(Token = "0x60011AB")]
			[Address(RVA = "0x1803DD0", Offset = "0x1803DD0", VA = "0x1803DD0")]
			public Pelvis()
			{
			}
		}

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34368", Offset = "0xB34368")]
		public LayerMask layers;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB343A0", Offset = "0xB343A0")]
		public float maxStep;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB343D8", Offset = "0xB343D8")]
		public float heightOffset;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34410", Offset = "0xB34410")]
		public float footSpeed;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34448", Offset = "0xB34448")]
		public float footRadius;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34480", Offset = "0xB34480")]
		public float prediction;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB344B8", Offset = "0xB344B8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB344B8", Offset = "0xB344B8")]
		public float footRotationWeight;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3450C", Offset = "0xB3450C")]
		public float footRotationSpeed;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34544", Offset = "0xB34544")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34544", Offset = "0xB34544")]
		public float maxFootRotationAngle;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3459C", Offset = "0xB3459C")]
		public bool rotateSolver;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB345D4", Offset = "0xB345D4")]
		public float pelvisSpeed;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3460C", Offset = "0xB3460C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB3460C", Offset = "0xB3460C")]
		public float pelvisDamper;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34660", Offset = "0xB34660")]
		public float lowerPelvisWeight;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34698", Offset = "0xB34698")]
		public float liftPelvisWeight;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB346D0", Offset = "0xB346D0")]
		public float rootSphereCastRadius;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34708", Offset = "0xB34708")]
		public Quality quality;

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB34740", Offset = "0xB34740")]
		private Leg[] <legs>k__BackingField;

		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB34750", Offset = "0xB34750")]
		private Pelvis <pelvis>k__BackingField;

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB34760", Offset = "0xB34760")]
		private bool <isGrounded>k__BackingField;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB34770", Offset = "0xB34770")]
		private Transform <root>k__BackingField;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB34780", Offset = "0xB34780")]
		private RaycastHit <rootHit>k__BackingField;

		[Token(Token = "0x40006EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool initiated;

		[Token(Token = "0x1700005E")]
		public Leg[] legs
		{
			[Token(Token = "0x60006C8")]
			[Address(RVA = "0x18037D8", Offset = "0x18037D8", VA = "0x18037D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AEEC", Offset = "0xB3AEEC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60006C9")]
			[Address(RVA = "0x18037E0", Offset = "0x18037E0", VA = "0x18037E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AEFC", Offset = "0xB3AEFC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700005F")]
		public Pelvis pelvis
		{
			[Token(Token = "0x60006CA")]
			[Address(RVA = "0x18037E8", Offset = "0x18037E8", VA = "0x18037E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AF0C", Offset = "0xB3AF0C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60006CB")]
			[Address(RVA = "0x18037F0", Offset = "0x18037F0", VA = "0x18037F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AF1C", Offset = "0xB3AF1C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000060")]
		public bool isGrounded
		{
			[Token(Token = "0x60006CC")]
			[Address(RVA = "0x18037F8", Offset = "0x18037F8", VA = "0x18037F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AF2C", Offset = "0xB3AF2C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006CD")]
			[Address(RVA = "0x1803800", Offset = "0x1803800", VA = "0x1803800")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AF3C", Offset = "0xB3AF3C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000061")]
		public Transform root
		{
			[Token(Token = "0x60006CE")]
			[Address(RVA = "0x180380C", Offset = "0x180380C", VA = "0x180380C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AF4C", Offset = "0xB3AF4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60006CF")]
			[Address(RVA = "0x1803814", Offset = "0x1803814", VA = "0x1803814")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AF5C", Offset = "0xB3AF5C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000062")]
		public RaycastHit rootHit
		{
			[Token(Token = "0x60006D0")]
			[Address(RVA = "0x180381C", Offset = "0x180381C", VA = "0x180381C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AF6C", Offset = "0xB3AF6C")]
			get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x60006D1")]
			[Address(RVA = "0x1803830", Offset = "0x1803830", VA = "0x1803830")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3AF7C", Offset = "0xB3AF7C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000063")]
		public bool rootGrounded
		{
			[Token(Token = "0x60006D2")]
			[Address(RVA = "0x180384C", Offset = "0x180384C", VA = "0x180384C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000064")]
		public Vector3 up
		{
			[Token(Token = "0x60006DA")]
			[Address(RVA = "0x17FEFD4", Offset = "0x17FEFD4", VA = "0x17FEFD4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000065")]
		private bool useRootRotation
		{
			[Token(Token = "0x60006DD")]
			[Address(RVA = "0x1804A54", Offset = "0x1804A54", VA = "0x1804A54")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x180389C", Offset = "0x180389C", VA = "0x180389C")]
		public RaycastHit GetRootHit(float maxDistanceMlp = 10f)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x1803C7C", Offset = "0x1803C7C", VA = "0x1803C7C")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x17FE49C", Offset = "0x17FE49C", VA = "0x17FE49C")]
		public void Initiate(Transform root, Transform[] feet)
		{
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x17FEC9C", Offset = "0x17FEC9C", VA = "0x17FEC9C")]
		public void Update()
		{
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x180097C", Offset = "0x180097C", VA = "0x180097C")]
		public Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x17FE000", Offset = "0x17FE000", VA = "0x17FE000")]
		public void Reset()
		{
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x1803E9C", Offset = "0x1803E9C", VA = "0x1803E9C")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x1804B24", Offset = "0x1804B24", VA = "0x1804B24")]
		public float GetVerticalOffset(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x1804C8C", Offset = "0x1804C8C", VA = "0x1804C8C")]
		public Vector3 Flatten(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x17FDC4C", Offset = "0x17FDC4C", VA = "0x17FDC4C")]
		public Grounding()
		{
		}
	}
	[Token(Token = "0x2000102")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB2FCE4", Offset = "0xB2FCE4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2FCE4", Offset = "0xB2FCE4")]
	public class AimIK : IK
	{
		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverAim solver;

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x11ACCA8", Offset = "0x11ACCA8", VA = "0x11ACCA8", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3AF8C", Offset = "0xB3AF8C")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x11ACCF4", Offset = "0x11ACCF4", VA = "0x11ACCF4", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3AFC4", Offset = "0xB3AFC4")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x11ACD40", Offset = "0x11ACD40", VA = "0x11ACD40")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3AFFC", Offset = "0xB3AFFC")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x11ACD8C", Offset = "0x11ACD8C", VA = "0x11ACD8C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B034", Offset = "0xB3B034")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x11ACDD8", Offset = "0x11ACDD8", VA = "0x11ACDD8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B06C", Offset = "0xB3B06C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x11ACE24", Offset = "0x11ACE24", VA = "0x11ACE24", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x11ACE2C", Offset = "0x11ACE2C", VA = "0x11ACE2C")]
		public AimIK()
		{
		}
	}
	[Token(Token = "0x2000103")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB2FD44", Offset = "0xB2FD44")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2FD44", Offset = "0xB2FD44")]
	public class CCDIK : IK
	{
		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverCCD solver;

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x11AECF4", Offset = "0x11AECF4", VA = "0x11AECF4", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B0A4", Offset = "0xB3B0A4")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x11AED40", Offset = "0x11AED40", VA = "0x11AED40", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B0DC", Offset = "0xB3B0DC")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x11AED8C", Offset = "0x11AED8C", VA = "0x11AED8C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B114", Offset = "0xB3B114")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x11AEDD8", Offset = "0x11AEDD8", VA = "0x11AEDD8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B14C", Offset = "0xB3B14C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x11AEE24", Offset = "0x11AEE24", VA = "0x11AEE24", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x11AEE2C", Offset = "0x11AEE2C", VA = "0x11AEE2C")]
		public CCDIK()
		{
		}
	}
	[Token(Token = "0x2000104")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB2FDA4", Offset = "0xB2FDA4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2FDA4", Offset = "0xB2FDA4")]
	public class FABRIK : IK
	{
		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIK solver;

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x11AF748", Offset = "0x11AF748", VA = "0x11AF748", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B184", Offset = "0xB3B184")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x11AF794", Offset = "0x11AF794", VA = "0x11AF794", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B1BC", Offset = "0xB3B1BC")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x11AF7E0", Offset = "0x11AF7E0", VA = "0x11AF7E0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B1F4", Offset = "0xB3B1F4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x11AF82C", Offset = "0x11AF82C", VA = "0x11AF82C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B22C", Offset = "0xB3B22C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x11AF878", Offset = "0x11AF878", VA = "0x11AF878", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x11AF880", Offset = "0x11AF880", VA = "0x11AF880")]
		public FABRIK()
		{
		}
	}
	[Token(Token = "0x2000105")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB2FE04", Offset = "0xB2FE04")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2FE04", Offset = "0xB2FE04")]
	public class FABRIKRoot : IK
	{
		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIKRoot solver;

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x11AFF00", Offset = "0x11AFF00", VA = "0x11AFF00", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B264", Offset = "0xB3B264")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x11AFF4C", Offset = "0x11AFF4C", VA = "0x11AFF4C", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B29C", Offset = "0xB3B29C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x11AFF98", Offset = "0x11AFF98", VA = "0x11AFF98")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B2D4", Offset = "0xB3B2D4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x11AFFE4", Offset = "0x11AFFE4", VA = "0x11AFFE4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B30C", Offset = "0xB3B30C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x11B0030", Offset = "0x11B0030", VA = "0x11B0030", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x11B0038", Offset = "0x11B0038", VA = "0x11B0038")]
		public FABRIKRoot()
		{
		}
	}
	[Token(Token = "0x2000106")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB2FE64", Offset = "0xB2FE64")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2FE64", Offset = "0xB2FE64")]
	public class FullBodyBipedIK : IK
	{
		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverFullBodyBiped solver;

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x17FC6B4", Offset = "0x17FC6B4", VA = "0x17FC6B4", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B344", Offset = "0xB3B344")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x17FC700", Offset = "0x17FC700", VA = "0x17FC700", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B37C", Offset = "0xB3B37C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x17FC74C", Offset = "0x17FC74C", VA = "0x17FC74C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B3B4", Offset = "0xB3B3B4")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x17FC798", Offset = "0x17FC798", VA = "0x17FC798")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B3EC", Offset = "0xB3B3EC")]
		private void OpenInspectorTutorial()
		{
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x17FC7E4", Offset = "0x17FC7E4", VA = "0x17FC7E4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B424", Offset = "0xB3B424")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x17FC830", Offset = "0x17FC830", VA = "0x17FC830")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B45C", Offset = "0xB3B45C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x17FC87C", Offset = "0x17FC87C", VA = "0x17FC87C")]
		public void SetReferences(BipedReferences references, Transform rootNode)
		{
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x17FC8A0", Offset = "0x17FC8A0", VA = "0x17FC8A0", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0x17FC8A8", Offset = "0x17FC8A8", VA = "0x17FC8A8")]
		public bool ReferencesError(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0x17FCA64", Offset = "0x17FCA64", VA = "0x17FCA64")]
		public bool ReferencesWarning(ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0x17FCDB8", Offset = "0x17FCDB8", VA = "0x17FCDB8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B494", Offset = "0xB3B494")]
		private void Reinitiate()
		{
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0x17FCDD8", Offset = "0x17FCDD8", VA = "0x17FCDD8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B4CC", Offset = "0xB3B4CC")]
		private void AutoDetectReferences()
		{
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0x17FCEB4", Offset = "0x17FCEB4", VA = "0x17FCEB4")]
		public FullBodyBipedIK()
		{
		}
	}
	[Token(Token = "0x2000107")]
	public abstract class IK : SolverManager
	{
		[Token(Token = "0x6000705")]
		public abstract IKSolver GetIKSolver();

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x1808648", Offset = "0x1808648", VA = "0x1808648", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0x18086CC", Offset = "0x18086CC", VA = "0x18086CC", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0x180873C", Offset = "0x180873C", VA = "0x180873C", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000709")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x600070A")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x600070B")]
		[Address(RVA = "0x17FCF3C", Offset = "0x17FCF3C", VA = "0x17FCF3C")]
		protected IK()
		{
		}
	}
	[Token(Token = "0x2000108")]
	public class IKExecutionOrder : MonoBehaviour
	{
		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IK[] IKComponents;

		[Token(Token = "0x600070C")]
		[Address(RVA = "0x180B6A8", Offset = "0x180B6A8", VA = "0x180B6A8")]
		private void Start()
		{
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x180B718", Offset = "0x180B718", VA = "0x180B718")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0x180B790", Offset = "0x180B790", VA = "0x180B790")]
		public IKExecutionOrder()
		{
		}
	}
	[Token(Token = "0x2000109")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB2FEC4", Offset = "0xB2FEC4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2FEC4", Offset = "0xB2FEC4")]
	public class LimbIK : IK
	{
		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLimb solver;

		[Token(Token = "0x600070F")]
		[Address(RVA = "0x16DFC6C", Offset = "0x16DFC6C", VA = "0x16DFC6C", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B504", Offset = "0xB3B504")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0x16DFCB8", Offset = "0x16DFCB8", VA = "0x16DFCB8", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B53C", Offset = "0xB3B53C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x16DFD04", Offset = "0x16DFD04", VA = "0x16DFD04")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B574", Offset = "0xB3B574")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0x16DFD50", Offset = "0x16DFD50", VA = "0x16DFD50")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B5AC", Offset = "0xB3B5AC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0x16DFD9C", Offset = "0x16DFD9C", VA = "0x16DFD9C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0x16DFDA4", Offset = "0x16DFDA4", VA = "0x16DFDA4")]
		public LimbIK()
		{
		}
	}
	[Token(Token = "0x200010A")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB2FF24", Offset = "0xB2FF24")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2FF24", Offset = "0xB2FF24")]
	public class LookAtIK : IK
	{
		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt solver;

		[Token(Token = "0x6000715")]
		[Address(RVA = "0x16DFE0C", Offset = "0x16DFE0C", VA = "0x16DFE0C", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B5E4", Offset = "0xB3B5E4")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0x16DFE58", Offset = "0x16DFE58", VA = "0x16DFE58", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B61C", Offset = "0xB3B61C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0x16DFEA4", Offset = "0x16DFEA4", VA = "0x16DFEA4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B654", Offset = "0xB3B654")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0x16DFEF0", Offset = "0x16DFEF0", VA = "0x16DFEF0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B68C", Offset = "0xB3B68C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0x16DFF3C", Offset = "0x16DFF3C", VA = "0x16DFF3C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0x16DFF44", Offset = "0x16DFF44", VA = "0x16DFF44")]
		public LookAtIK()
		{
		}
	}
	[Token(Token = "0x200010B")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB2FF84", Offset = "0xB2FF84")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2FF84", Offset = "0xB2FF84")]
	public class TrigonometricIK : IK
	{
		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverTrigonometric solver;

		[Token(Token = "0x600071B")]
		[Address(RVA = "0x16E7C3C", Offset = "0x16E7C3C", VA = "0x16E7C3C", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B6C4", Offset = "0xB3B6C4")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0x16E7C88", Offset = "0x16E7C88", VA = "0x16E7C88", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B6FC", Offset = "0xB3B6FC")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0x16E7CD4", Offset = "0x16E7CD4", VA = "0x16E7CD4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B734", Offset = "0xB3B734")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0x16E7D20", Offset = "0x16E7D20", VA = "0x16E7D20")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B76C", Offset = "0xB3B76C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0x16E7D6C", Offset = "0x16E7D6C", VA = "0x16E7D6C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0x16E7D74", Offset = "0x16E7D74", VA = "0x16E7D74")]
		public TrigonometricIK()
		{
		}
	}
	[Token(Token = "0x200010C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB2FFE4", Offset = "0xB2FFE4")]
	public class VRIK : IK
	{
		[Serializable]
		[Token(Token = "0x20002B3")]
		public class References
		{
			[Token(Token = "0x4000E49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform root;

			[Token(Token = "0x4000E4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform pelvis;

			[Token(Token = "0x4000E4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spine;

			[Token(Token = "0x4000E4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform chest;

			[Token(Token = "0x4000E4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform neck;

			[Token(Token = "0x4000E4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform head;

			[Token(Token = "0x4000E4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Transform leftShoulder;

			[Token(Token = "0x4000E50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Transform leftUpperArm;

			[Token(Token = "0x4000E51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Transform leftForearm;

			[Token(Token = "0x4000E52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Transform leftHand;

			[Token(Token = "0x4000E53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Transform rightShoulder;

			[Token(Token = "0x4000E54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Transform rightUpperArm;

			[Token(Token = "0x4000E55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Transform rightForearm;

			[Token(Token = "0x4000E56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Transform rightHand;

			[Token(Token = "0x4000E57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public Transform leftThigh;

			[Token(Token = "0x4000E58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public Transform leftCalf;

			[Token(Token = "0x4000E59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Transform leftFoot;

			[Token(Token = "0x4000E5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public Transform leftToes;

			[Token(Token = "0x4000E5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public Transform rightThigh;

			[Token(Token = "0x4000E5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public Transform rightCalf;

			[Token(Token = "0x4000E5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public Transform rightFoot;

			[Token(Token = "0x4000E5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			public Transform rightToes;

			[Token(Token = "0x170002AF")]
			public bool isFilled
			{
				[Token(Token = "0x60011AD")]
				[Address(RVA = "0x16E8CAC", Offset = "0x16E8CAC", VA = "0x16E8CAC")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170002B0")]
			public bool isEmpty
			{
				[Token(Token = "0x60011AE")]
				[Address(RVA = "0x16E8830", Offset = "0x16E8830", VA = "0x16E8830")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60011AC")]
			[Address(RVA = "0x16E90C8", Offset = "0x16E90C8", VA = "0x16E90C8")]
			public Transform[] GetTransforms()
			{
				return null;
			}

			[Token(Token = "0x60011AF")]
			[Address(RVA = "0x16E841C", Offset = "0x16E841C", VA = "0x16E841C")]
			public static bool AutoDetectReferences(Transform root, out References references)
			{
				return default(bool);
			}

			[Token(Token = "0x60011B0")]
			[Address(RVA = "0x16E90C0", Offset = "0x16E90C0", VA = "0x16E90C0")]
			public References()
			{
			}
		}

		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "ContextMenuItemAttribute", RVA = "0xB34790", Offset = "0xB34790")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34790", Offset = "0xB34790")]
		public References references;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3480C", Offset = "0xB3480C")]
		public IKSolverVR solver;

		[Token(Token = "0x6000721")]
		[Address(RVA = "0x16E831C", Offset = "0x16E831C", VA = "0x16E831C", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B7A4", Offset = "0xB3B7A4")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0x16E8388", Offset = "0x16E8388", VA = "0x16E8388", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B7DC", Offset = "0xB3B7DC")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0x16E83F4", Offset = "0x16E83F4", VA = "0x16E83F4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B814", Offset = "0xB3B814")]
		public void AutoDetectReferences()
		{
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0x16E878C", Offset = "0x16E878C", VA = "0x16E878C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B84C", Offset = "0xB3B84C")]
		public void GuessHandOrientations()
		{
		}

		[Token(Token = "0x6000725")]
		[Address(RVA = "0x16E87B4", Offset = "0x16E87B4", VA = "0x16E87B4", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0x16E87BC", Offset = "0x16E87BC", VA = "0x16E87BC", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0x16E9038", Offset = "0x16E9038", VA = "0x16E9038")]
		public VRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200010D")]
	public class FABRIKChain
	{
		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FABRIK ik;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34844", Offset = "0xB34844")]
		public float pull;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB3485C", Offset = "0xB3485C")]
		public float pin;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] children;

		[Token(Token = "0x6000728")]
		[Address(RVA = "0x11AF8E8", Offset = "0x11AF8E8", VA = "0x11AF8E8")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0x11AF9B0", Offset = "0x11AF9B0", VA = "0x11AF9B0")]
		public void Initiate()
		{
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0x11AF9D0", Offset = "0x11AF9D0", VA = "0x11AF9D0")]
		public void Stage1(FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0x11AFDA0", Offset = "0x11AFDA0", VA = "0x11AFDA0")]
		public void Stage2(Vector3 rootPosition, FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0x11AFAA4", Offset = "0x11AFAA4", VA = "0x11AFAA4")]
		private Vector3 GetCentroid(FABRIKChain[] chain)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0x11AFE98", Offset = "0x11AFE98", VA = "0x11AFE98")]
		public FABRIKChain()
		{
		}
	}
	[Token(Token = "0x200010E")]
	public class FBBIKArmBending : MonoBehaviour
	{
		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 bendDirectionOffsetLeft;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 bendDirectionOffsetRight;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 characterSpaceBendOffsetLeft;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 characterSpaceBendOffsetRight;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandTargetRotation;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion rightHandTargetRotation;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool initiated;

		[Token(Token = "0x600072E")]
		[Address(RVA = "0x11B00A0", Offset = "0x11B00A0", VA = "0x11B00A0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0x11B0608", Offset = "0x11B0608", VA = "0x11B0608")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0x11B07C8", Offset = "0x11B07C8", VA = "0x11B07C8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0x11B08C0", Offset = "0x11B08C0", VA = "0x11B08C0")]
		public FBBIKArmBending()
		{
		}
	}
	[Token(Token = "0x200010F")]
	public class FBBIKHeadEffector : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002B4")]
		public class BendBone
		{
			[Token(Token = "0x4000E5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37594", Offset = "0xB37594")]
			public Transform transform;

			[Token(Token = "0x4000E60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB375CC", Offset = "0xB375CC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB375CC", Offset = "0xB375CC")]
			public float weight;

			[Token(Token = "0x4000E61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x60011B1")]
			[Address(RVA = "0x11B3918", Offset = "0x11B3918", VA = "0x11B3918")]
			public BendBone()
			{
			}

			[Token(Token = "0x60011B2")]
			[Address(RVA = "0x11B3998", Offset = "0x11B3998", VA = "0x11B3998")]
			public BendBone(Transform transform, float weight)
			{
			}

			[Token(Token = "0x60011B3")]
			[Address(RVA = "0x11B1078", Offset = "0x11B1078", VA = "0x11B1078")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x60011B4")]
			[Address(RVA = "0x11B1480", Offset = "0x11B1480", VA = "0x11B1480")]
			public void FixTransforms()
			{
			}
		}

		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34874", Offset = "0xB34874")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xB348AC", Offset = "0xB348AC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB348AC", Offset = "0xB348AC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB348AC", Offset = "0xB348AC")]
		public float positionWeight;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34924", Offset = "0xB34924")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34924", Offset = "0xB34924")]
		public float bodyWeight;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34978", Offset = "0xB34978")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34978", Offset = "0xB34978")]
		public float thighWeight;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB349CC", Offset = "0xB349CC")]
		public bool handsPullBody;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xB34A04", Offset = "0xB34A04")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34A04", Offset = "0xB34A04")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34A04", Offset = "0xB34A04")]
		public float rotationWeight;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34A7C", Offset = "0xB34A7C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34A7C", Offset = "0xB34A7C")]
		public float bodyClampWeight;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34AD0", Offset = "0xB34AD0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34AD0", Offset = "0xB34AD0")]
		public float headClampWeight;

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34B24", Offset = "0xB34B24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34B24", Offset = "0xB34B24")]
		public float bendWeight;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34B78", Offset = "0xB34B78")]
		public BendBone[] bendBones;

		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xB34BB0", Offset = "0xB34BB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34BB0", Offset = "0xB34BB0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34BB0", Offset = "0xB34BB0")]
		public float CCDWeight;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34C28", Offset = "0xB34C28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34C28", Offset = "0xB34C28")]
		public float roll;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34C7C", Offset = "0xB34C7C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34C7C", Offset = "0xB34C7C")]
		public float damper;

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34CD4", Offset = "0xB34CD4")]
		public Transform[] CCDBones;

		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xB34D0C", Offset = "0xB34D0C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34D0C", Offset = "0xB34D0C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34D0C", Offset = "0xB34D0C")]
		public float postStretchWeight;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34D84", Offset = "0xB34D84")]
		public float maxStretch;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34DBC", Offset = "0xB34DBC")]
		public float stretchDamper;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34DF4", Offset = "0xB34DF4")]
		public bool fixHead;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB34E2C", Offset = "0xB34E2C")]
		public Transform[] stretchBones;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xB34E64", Offset = "0xB34E64")]
		public Vector3 chestDirection;

		[Token(Token = "0x400071C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34E9C", Offset = "0xB34E9C")]
		public float chestDirectionWeight;

		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] chestBones;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IKSolver.UpdateDelegate OnPostHeadEffectorFK;

		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 offset;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 headToBody;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 shoulderCenterToHead;

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 headToLeftThigh;

		[Token(Token = "0x4000723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 headToRightThigh;

		[Token(Token = "0x4000724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 leftShoulderPos;

		[Token(Token = "0x4000725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 rightShoulderPos;

		[Token(Token = "0x4000726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float shoulderDist;

		[Token(Token = "0x4000727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float leftShoulderDist;

		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float rightShoulderDist;

		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion chestRotation;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion headRotationRelativeToRoot;

		[Token(Token = "0x400072B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Quaternion[] ccdDefaultLocalRotations;

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 headLocalPosition;

		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private Quaternion headLocalRotation;

		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3[] stretchLocalPositions;

		[Token(Token = "0x400072F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Quaternion[] stretchLocalRotations;

		[Token(Token = "0x4000730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3[] chestLocalPositions;

		[Token(Token = "0x4000731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Quaternion[] chestLocalRotations;

		[Token(Token = "0x4000732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int bendBonesCount;

		[Token(Token = "0x4000733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int ccdBonesCount;

		[Token(Token = "0x4000734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private int stretchBonesCount;

		[Token(Token = "0x4000735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private int chestBonesCount;

		[Token(Token = "0x6000732")]
		[Address(RVA = "0x11B08C8", Offset = "0x11B08C8", VA = "0x11B08C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0x11B0BF0", Offset = "0x11B0BF0", VA = "0x11B0BF0")]
		private void OnStoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0x11B10B0", Offset = "0x11B10B0", VA = "0x11B10B0")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0x11B14A8", Offset = "0x11B14A8", VA = "0x11B14A8")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0x11B1E34", Offset = "0x11B1E34", VA = "0x11B1E34")]
		private void SpineBend()
		{
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0x11B2180", Offset = "0x11B2180", VA = "0x11B2180")]
		private void CCDPass()
		{
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0x11B251C", Offset = "0x11B251C", VA = "0x11B251C")]
		private void Iterate(int iteration)
		{
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0x11B2F9C", Offset = "0x11B2F9C", VA = "0x11B2F9C")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0x11B1B60", Offset = "0x11B1B60", VA = "0x11B1B60")]
		private void ChestDirection()
		{
		}

		[Token(Token = "0x600073B")]
		[Address(RVA = "0x11B31C0", Offset = "0x11B31C0", VA = "0x11B31C0")]
		private void PostStretching()
		{
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0x11B2E58", Offset = "0x11B2E58", VA = "0x11B2E58")]
		private void LerpSolverPosition(IKEffector effector, Vector3 position, float weight, Vector3 offset)
		{
		}

		[Token(Token = "0x600073D")]
		[Address(RVA = "0x11B2CBC", Offset = "0x11B2CBC", VA = "0x11B2CBC")]
		private void Solve(ref Vector3 pos1, ref Vector3 pos2, float nominalDistance)
		{
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0x11B352C", Offset = "0x11B352C", VA = "0x11B352C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0x11B37AC", Offset = "0x11B37AC", VA = "0x11B37AC")]
		public FBBIKHeadEffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000110")]
	public class FBIKChain
	{
		[Serializable]
		[Token(Token = "0x20002B5")]
		public class ChildConstraint
		{
			[Token(Token = "0x4000E62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float pushElasticity;

			[Token(Token = "0x4000E63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pullElasticity;

			[Token(Token = "0x4000E64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private Transform bone1;

			[Token(Token = "0x4000E65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private Transform bone2;

			[Token(Token = "0x4000E66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37640", Offset = "0xB37640")]
			private float <nominalDistance>k__BackingField;

			[Token(Token = "0x4000E67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37650", Offset = "0xB37650")]
			private bool <isRigid>k__BackingField;

			[Token(Token = "0x4000E68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float crossFade;

			[Token(Token = "0x4000E69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float inverseCrossFade;

			[Token(Token = "0x4000E6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int chain1Index;

			[Token(Token = "0x4000E6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int chain2Index;

			[Token(Token = "0x170002B1")]
			public float nominalDistance
			{
				[Token(Token = "0x60011B5")]
				[Address(RVA = "0x17FAF00", Offset = "0x17FAF00", VA = "0x17FAF00")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EF28", Offset = "0xB3EF28")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60011B6")]
				[Address(RVA = "0x17FAF08", Offset = "0x17FAF08", VA = "0x17FAF08")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EF38", Offset = "0xB3EF38")]
				private set
				{
				}
			}

			[Token(Token = "0x170002B2")]
			public bool isRigid
			{
				[Token(Token = "0x60011B7")]
				[Address(RVA = "0x17FAF10", Offset = "0x17FAF10", VA = "0x17FAF10")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EF48", Offset = "0xB3EF48")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60011B8")]
				[Address(RVA = "0x17FAF18", Offset = "0x17FAF18", VA = "0x17FAF18")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EF58", Offset = "0xB3EF58")]
				private set
				{
				}
			}

			[Token(Token = "0x60011B9")]
			[Address(RVA = "0x17FAF24", Offset = "0x17FAF24", VA = "0x17FAF24")]
			public ChildConstraint(Transform bone1, Transform bone2, float pushElasticity = 0f, float pullElasticity = 0f)
			{
			}

			[Token(Token = "0x60011BA")]
			[Address(RVA = "0x17FAF70", Offset = "0x17FAF70", VA = "0x17FAF70")]
			public void Initiate(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60011BB")]
			[Address(RVA = "0x17FAFC8", Offset = "0x17FAFC8", VA = "0x17FAFC8")]
			public void OnPreSolve(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60011BC")]
			[Address(RVA = "0x17FB1CC", Offset = "0x17FB1CC", VA = "0x17FB1CC")]
			public void Solve(IKSolverFullBody solver)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002B6")]
		public enum Smoothing
		{
			[Token(Token = "0x4000E6D")]
			None,
			[Token(Token = "0x4000E6E")]
			Exponential,
			[Token(Token = "0x4000E6F")]
			Cubic
		}

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34EB4", Offset = "0xB34EB4")]
		public float pin;

		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34ECC", Offset = "0xB34ECC")]
		public float pull;

		[Token(Token = "0x4000738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34EE4", Offset = "0xB34EE4")]
		public float push;

		[Token(Token = "0x4000739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34EFC", Offset = "0xB34EFC")]
		public float pushParent;

		[Token(Token = "0x400073A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34F14", Offset = "0xB34F14")]
		public float reach;

		[Token(Token = "0x400073B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Smoothing reachSmoothing;

		[Token(Token = "0x400073C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Smoothing pushSmoothing;

		[Token(Token = "0x400073D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolver.Node[] nodes;

		[Token(Token = "0x400073E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int[] children;

		[Token(Token = "0x400073F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChildConstraint[] childConstraints;

		[Token(Token = "0x4000740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IKConstraintBend bendConstraint;

		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float rootLength;

		[Token(Token = "0x4000742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool initiated;

		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float length;

		[Token(Token = "0x4000744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float distance;

		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IKSolver.Point p;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float reachForce;

		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pullParentSum;

		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] crossFades;

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sqrMag1;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float sqrMag2;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float sqrMagDif;

		[Token(Token = "0x400074C")]
		private const float maxLimbLength = 0.99999f;

		[Token(Token = "0x6000740")]
		[Address(RVA = "0x11B3A3C", Offset = "0x11B3A3C", VA = "0x11B3A3C")]
		public FBIKChain()
		{
		}

		[Token(Token = "0x6000741")]
		[Address(RVA = "0x11B3B08", Offset = "0x11B3B08", VA = "0x11B3B08")]
		public FBIKChain(float pin, float pull, params Transform[] nodeTransforms)
		{
		}

		[Token(Token = "0x6000742")]
		[Address(RVA = "0x11B3C14", Offset = "0x11B3C14", VA = "0x11B3C14")]
		public void SetNodes(params Transform[] boneTransforms)
		{
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0x11B3D38", Offset = "0x11B3D38", VA = "0x11B3D38")]
		public int GetNodeIndex(Transform boneTransform)
		{
			return default(int);
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0x11B3E14", Offset = "0x11B3E14", VA = "0x11B3E14")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0x11B3F18", Offset = "0x11B3F18", VA = "0x11B3F18")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0x11B45E4", Offset = "0x11B45E4", VA = "0x11B45E4")]
		public void ReadPose(IKSolverFullBody solver, bool fullBody)
		{
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0x11B40AC", Offset = "0x11B40AC", VA = "0x11B40AC")]
		private void CalculateBoneLengths(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0x11B4AD0", Offset = "0x11B4AD0", VA = "0x11B4AD0")]
		public void Reach(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0x11B4E74", Offset = "0x11B4E74", VA = "0x11B4E74")]
		public Vector3 Push(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0x11B5258", Offset = "0x11B5258", VA = "0x11B5258")]
		public void SolveTrigonometric(IKSolverFullBody solver, bool calculateBendDirection = false)
		{
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0x11B57DC", Offset = "0x11B57DC", VA = "0x11B57DC")]
		public void Stage1(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0x11B5DB0", Offset = "0x11B5DB0", VA = "0x11B5DB0")]
		public void Stage2(IKSolverFullBody solver, Vector3 position)
		{
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0x11B6048", Offset = "0x11B6048", VA = "0x11B6048")]
		public void SolveConstraintSystems(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0x11B5CA8", Offset = "0x11B5CA8", VA = "0x11B5CA8")]
		private Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0x11B55C4", Offset = "0x11B55C4", VA = "0x11B55C4")]
		protected Vector3 GetDirToBendPoint(Vector3 direction, Vector3 bendDirection, float directionMagnitude)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0x11B5C2C", Offset = "0x11B5C2C", VA = "0x11B5C2C")]
		private void SolveChildConstraints(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0x11B6130", Offset = "0x11B6130", VA = "0x11B6130")]
		private void SolveLinearConstraint(IKSolver.Node node1, IKSolver.Node node2, float crossFade, float distance)
		{
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0x11B5B4C", Offset = "0x11B5B4C", VA = "0x11B5B4C")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0x11B5F30", Offset = "0x11B5F30", VA = "0x11B5F30")]
		private void BackwardReach(Vector3 position)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000111")]
	public class IKConstraintBend
	{
		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone1;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone2;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone3;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bendGoal;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 direction;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotationOffset;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34F2C", Offset = "0xB34F2C")]
		public float weight;

		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 defaultLocalDirection;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 defaultChildDirection;

		[NonSerialized]
		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float clampF;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int chainIndex1;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int nodeIndex1;

		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int chainIndex2;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int nodeIndex2;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int chainIndex3;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int nodeIndex3;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB34F44", Offset = "0xB34F44")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x17000066")]
		public bool initiated
		{
			[Token(Token = "0x6000755")]
			[Address(RVA = "0x1808964", Offset = "0x1808964", VA = "0x1808964")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3B884", Offset = "0xB3B884")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000756")]
			[Address(RVA = "0x180896C", Offset = "0x180896C", VA = "0x180896C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3B894", Offset = "0xB3B894")]
			private set
			{
			}
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0x180879C", Offset = "0x180879C", VA = "0x180879C")]
		public bool IsValid(IKSolverFullBody solver, Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0x1808978", Offset = "0x1808978", VA = "0x1808978")]
		public IKConstraintBend()
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0x18089FC", Offset = "0x18089FC", VA = "0x18089FC")]
		public IKConstraintBend(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0x1808AA8", Offset = "0x1808AA8", VA = "0x1808AA8")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0x1808AB4", Offset = "0x1808AB4", VA = "0x1808AB4")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0x1808F78", Offset = "0x1808F78", VA = "0x1808F78")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower, Vector3 last)
		{
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0x18091A8", Offset = "0x18091A8", VA = "0x18091A8")]
		public void LimitBend(float solverWeight, float positionWeight)
		{
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0x1809644", Offset = "0x1809644", VA = "0x1809644")]
		public Vector3 GetDir(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0x1808D38", Offset = "0x1808D38", VA = "0x1808D38")]
		private Vector3 OrthoToLimb(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0x1808E58", Offset = "0x1808E58", VA = "0x1808E58")]
		private Vector3 OrthoToBone1(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x2000112")]
	public class IKEffector
	{
		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34F54", Offset = "0xB34F54")]
		public float positionWeight;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34F6C", Offset = "0xB34F6C")]
		public float rotationWeight;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 position;

		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion rotation;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 positionOffset;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB34F84", Offset = "0xB34F84")]
		private bool <isEndEffector>k__BackingField;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool effectChildNodes;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34F94", Offset = "0xB34F94")]
		public float maintainRelativePositionWeight;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform[] childBones;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform planeBone1;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform planeBone2;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform planeBone3;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Quaternion planeRotationOffset;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float posW;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float rotW;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] localPositions;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool usePlaneNodes;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion animatedPlaneRotation;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 animatedPosition;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool firstUpdate;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int chainIndex;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int nodeIndex;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int plane1ChainIndex;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int plane1NodeIndex;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int plane2ChainIndex;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int plane2NodeIndex;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int plane3ChainIndex;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int plane3NodeIndex;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int[] childChainIndexes;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int[] childNodeIndexes;

		[Token(Token = "0x17000067")]
		public bool isEndEffector
		{
			[Token(Token = "0x6000761")]
			[Address(RVA = "0x1809CB0", Offset = "0x1809CB0", VA = "0x1809CB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3B8A4", Offset = "0xB3B8A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000762")]
			[Address(RVA = "0x1809CB8", Offset = "0x1809CB8", VA = "0x1809CB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3B8B4", Offset = "0xB3B8B4")]
			private set
			{
			}
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0x1809C48", Offset = "0x1809C48", VA = "0x1809C48")]
		public IKSolver.Node GetNode(IKSolverFullBody solver)
		{
			return null;
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0x1809CC4", Offset = "0x1809CC4", VA = "0x1809CC4")]
		public void PinToBone(float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0x1809D98", Offset = "0x1809D98", VA = "0x1809D98")]
		public IKEffector()
		{
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0x1809ED4", Offset = "0x1809ED4", VA = "0x1809ED4")]
		public IKEffector(Transform bone, Transform[] childBones)
		{
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0x180A02C", Offset = "0x180A02C", VA = "0x180A02C")]
		public bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0x180A31C", Offset = "0x180A31C", VA = "0x180A31C")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000768")]
		[Address(RVA = "0x180A5BC", Offset = "0x180A5BC", VA = "0x180A5BC")]
		public void ResetOffset(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0x180A6FC", Offset = "0x180A6FC", VA = "0x180A6FC")]
		public void SetToTarget()
		{
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0x180A7A8", Offset = "0x180A7A8", VA = "0x180A7A8")]
		public void OnPreSolve(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600076B")]
		[Address(RVA = "0x180ADFC", Offset = "0x180ADFC", VA = "0x180ADFC")]
		public void OnPostWrite()
		{
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0x180AE6C", Offset = "0x180AE6C", VA = "0x180AE6C")]
		private Quaternion GetPlaneRotation(IKSolverFullBody solver)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0x180B084", Offset = "0x180B084", VA = "0x180B084")]
		public void Update(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0x180B3CC", Offset = "0x180B3CC", VA = "0x180B3CC")]
		private Vector3 GetPosition(IKSolverFullBody solver, out Quaternion planeRotationOffset)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x2000113")]
	public class IKMapping
	{
		[Serializable]
		[Token(Token = "0x20002B7")]
		public class BoneMap
		{
			[Token(Token = "0x4000E70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000E71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int chainIndex;

			[Token(Token = "0x4000E72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int nodeIndex;

			[Token(Token = "0x4000E73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4000E74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x4000E75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 localSwingAxis;

			[Token(Token = "0x4000E76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 localTwistAxis;

			[Token(Token = "0x4000E77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 planePosition;

			[Token(Token = "0x4000E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 ikPosition;

			[Token(Token = "0x4000E79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion defaultLocalTargetRotation;

			[Token(Token = "0x4000E7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			private Quaternion maintainRotation;

			[Token(Token = "0x4000E7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public float length;

			[Token(Token = "0x4000E7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Quaternion animatedRotation;

			[Token(Token = "0x4000E7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private Transform planeBone1;

			[Token(Token = "0x4000E7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Transform planeBone2;

			[Token(Token = "0x4000E7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Transform planeBone3;

			[Token(Token = "0x4000E80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private int plane1ChainIndex;

			[Token(Token = "0x4000E81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private int plane1NodeIndex;

			[Token(Token = "0x4000E82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private int plane2ChainIndex;

			[Token(Token = "0x4000E83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			private int plane2NodeIndex;

			[Token(Token = "0x4000E84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private int plane3ChainIndex;

			[Token(Token = "0x4000E85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private int plane3NodeIndex;

			[Token(Token = "0x170002B3")]
			public Vector3 swingDirection
			{
				[Token(Token = "0x60011BE")]
				[Address(RVA = "0x180BA04", Offset = "0x180BA04", VA = "0x180BA04")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170002B4")]
			public bool isNodeBone
			{
				[Token(Token = "0x60011C1")]
				[Address(RVA = "0x180BB70", Offset = "0x180BB70", VA = "0x180BB70")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170002B5")]
			private Quaternion lastAnimatedTargetRotation
			{
				[Token(Token = "0x60011D5")]
				[Address(RVA = "0x180C154", Offset = "0x180C154", VA = "0x180C154")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x60011BD")]
			[Address(RVA = "0x180B9D8", Offset = "0x180B9D8", VA = "0x180B9D8")]
			public void Initiate(Transform transform, IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60011BF")]
			[Address(RVA = "0x180BAD0", Offset = "0x180BAD0", VA = "0x180BAD0")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x60011C0")]
			[Address(RVA = "0x180BB20", Offset = "0x180BB20", VA = "0x180BB20")]
			public void FixTransform(bool position)
			{
			}

			[Token(Token = "0x60011C2")]
			[Address(RVA = "0x180BB80", Offset = "0x180BB80", VA = "0x180BB80")]
			public void SetLength(BoneMap nextBone)
			{
			}

			[Token(Token = "0x60011C3")]
			[Address(RVA = "0x180BC68", Offset = "0x180BC68", VA = "0x180BC68")]
			public void SetLocalSwingAxis(BoneMap swingTarget)
			{
			}

			[Token(Token = "0x60011C4")]
			[Address(RVA = "0x180BC70", Offset = "0x180BC70", VA = "0x180BC70")]
			public void SetLocalSwingAxis(BoneMap bone1, BoneMap bone2)
			{
			}

			[Token(Token = "0x60011C5")]
			[Address(RVA = "0x180BE00", Offset = "0x180BE00", VA = "0x180BE00")]
			public void SetLocalTwistAxis(Vector3 twistDirection, Vector3 normalDirection)
			{
			}

			[Token(Token = "0x60011C6")]
			[Address(RVA = "0x180BF0C", Offset = "0x180BF0C", VA = "0x180BF0C")]
			public void SetPlane(IKSolverFullBody solver, Transform planeBone1, Transform planeBone2, Transform planeBone3)
			{
			}

			[Token(Token = "0x60011C7")]
			[Address(RVA = "0x180BFA4", Offset = "0x180BFA4", VA = "0x180BFA4")]
			public void UpdatePlane(bool rotation, bool position)
			{
			}

			[Token(Token = "0x60011C8")]
			[Address(RVA = "0x180C378", Offset = "0x180C378", VA = "0x180C378")]
			public void SetIKPosition()
			{
			}

			[Token(Token = "0x60011C9")]
			[Address(RVA = "0x180C3B0", Offset = "0x180C3B0", VA = "0x180C3B0")]
			public void MaintainRotation()
			{
			}

			[Token(Token = "0x60011CA")]
			[Address(RVA = "0x180C3E8", Offset = "0x180C3E8", VA = "0x180C3E8")]
			public void SetToIKPosition()
			{
			}

			[Token(Token = "0x60011CB")]
			[Address(RVA = "0x180C410", Offset = "0x180C410", VA = "0x180C410")]
			public void FixToNode(IKSolverFullBody solver, float weight, [Optional] IKSolver.Node fixNode)
			{
			}

			[Token(Token = "0x60011CC")]
			[Address(RVA = "0x180C53C", Offset = "0x180C53C", VA = "0x180C53C")]
			public Vector3 GetPlanePosition(IKSolverFullBody solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60011CD")]
			[Address(RVA = "0x180C884", Offset = "0x180C884", VA = "0x180C884")]
			public void PositionToPlane(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60011CE")]
			[Address(RVA = "0x180C8B4", Offset = "0x180C8B4", VA = "0x180C8B4")]
			public void RotateToPlane(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x60011CF")]
			[Address(RVA = "0x180CA4C", Offset = "0x180CA4C", VA = "0x180CA4C")]
			public void Swing(Vector3 swingTarget, float weight)
			{
			}

			[Token(Token = "0x60011D0")]
			[Address(RVA = "0x180CABC", Offset = "0x180CABC", VA = "0x180CABC")]
			public void Swing(Vector3 pos1, Vector3 pos2, float weight)
			{
			}

			[Token(Token = "0x60011D1")]
			[Address(RVA = "0x180CD00", Offset = "0x180CD00", VA = "0x180CD00")]
			public void Twist(Vector3 twistDirection, Vector3 normalDirection, float weight)
			{
			}

			[Token(Token = "0x60011D2")]
			[Address(RVA = "0x180CF28", Offset = "0x180CF28", VA = "0x180CF28")]
			public void RotateToMaintain(float weight)
			{
			}

			[Token(Token = "0x60011D3")]
			[Address(RVA = "0x180D040", Offset = "0x180D040", VA = "0x180D040")]
			public void RotateToEffector(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x60011D4")]
			[Address(RVA = "0x180C680", Offset = "0x180C680", VA = "0x180C680")]
			private Quaternion GetTargetRotation(IKSolverFullBody solver)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60011D6")]
			[Address(RVA = "0x180D1DC", Offset = "0x180D1DC", VA = "0x180D1DC")]
			public BoneMap()
			{
			}
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0x180B798", Offset = "0x180B798", VA = "0x180B798", Slot = "4")]
		public virtual bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0x180B7A0", Offset = "0x180B7A0", VA = "0x180B7A0", Slot = "5")]
		public virtual void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0x180B7A4", Offset = "0x180B7A4", VA = "0x180B7A4")]
		protected bool BoneIsValid(Transform bone, IKSolver solver, ref string message, [Optional] Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0x180B8C8", Offset = "0x180B8C8", VA = "0x180B8C8")]
		protected Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0x180B9D0", Offset = "0x180B9D0", VA = "0x180B9D0")]
		public IKMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000114")]
	public class IKMappingBone : IKMapping
	{
		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34FAC", Offset = "0xB34FAC")]
		public float maintainRotationWeight;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoneMap boneMap;

		[Token(Token = "0x6000774")]
		[Address(RVA = "0x180D1F8", Offset = "0x180D1F8", VA = "0x180D1F8", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0x180D298", Offset = "0x180D298", VA = "0x180D298")]
		public IKMappingBone()
		{
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0x180D31C", Offset = "0x180D31C", VA = "0x180D31C")]
		public IKMappingBone(Transform bone)
		{
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0x180D3B4", Offset = "0x180D3B4", VA = "0x180D3B4")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0x180D3CC", Offset = "0x180D3CC", VA = "0x180D3CC")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0x180D3E8", Offset = "0x180D3E8", VA = "0x180D3E8", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0x180D484", Offset = "0x180D484", VA = "0x180D484")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0x180D49C", Offset = "0x180D49C", VA = "0x180D49C")]
		public void WritePose(float solverWeight)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000115")]
	public class IKMappingLimb : IKMapping
	{
		[Serializable]
		[Token(Token = "0x20002B8")]
		public enum BoneMapType
		{
			[Token(Token = "0x4000E87")]
			Parent,
			[Token(Token = "0x4000E88")]
			Bone1,
			[Token(Token = "0x4000E89")]
			Bone2,
			[Token(Token = "0x4000E8A")]
			Bone3
		}

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform parentBone;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone1;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone2;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bone3;

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34FC4", Offset = "0xB34FC4")]
		public float maintainRotationWeight;

		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34FDC", Offset = "0xB34FDC")]
		public float weight;

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BoneMap boneMapParent;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BoneMap boneMap1;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap boneMap2;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap boneMap3;

		[Token(Token = "0x600077C")]
		[Address(RVA = "0x180D4C0", Offset = "0x180D4C0", VA = "0x180D4C0", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0x180D544", Offset = "0x180D544", VA = "0x180D544")]
		public BoneMap GetBoneMap(BoneMapType boneMap)
		{
			return null;
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0x180D618", Offset = "0x180D618", VA = "0x180D618")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower)
		{
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0x180D96C", Offset = "0x180D96C", VA = "0x180D96C")]
		public IKMappingLimb()
		{
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0x180DA6C", Offset = "0x180DA6C", VA = "0x180DA6C")]
		public IKMappingLimb(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0x180DB98", Offset = "0x180DB98", VA = "0x180DB98")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0x180DBA4", Offset = "0x180DBA4", VA = "0x180DBA4")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0x180DC4C", Offset = "0x180DC4C", VA = "0x180DC4C")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0x180DD04", Offset = "0x180DD04", VA = "0x180DD04", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0x180DF74", Offset = "0x180DF74", VA = "0x180DF74")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0x180E02C", Offset = "0x180E02C", VA = "0x180E02C")]
		public void WritePose(IKSolverFullBody solver, bool fullBody)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000116")]
	public class IKMappingSpine : IKMapping
	{
		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] spineBones;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform leftUpperArmBone;

		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rightUpperArmBone;

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftThighBone;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightThighBone;

		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB34FF4", Offset = "0xB34FF4")]
		public int iterations;

		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB3500C", Offset = "0xB3500C")]
		public float twistWeight;

		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int rootNodeIndex;

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap[] spine;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap leftUpperArm;

		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap rightUpperArm;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoneMap leftThigh;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BoneMap rightThigh;

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useFABRIK;

		[Token(Token = "0x6000787")]
		[Address(RVA = "0x180E16C", Offset = "0x180E16C", VA = "0x180E16C", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0x180E45C", Offset = "0x180E45C", VA = "0x180E45C")]
		public IKMappingSpine()
		{
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0x180E578", Offset = "0x180E578", VA = "0x180E578")]
		public IKMappingSpine(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0x180E6D0", Offset = "0x180E6D0", VA = "0x180E6D0")]
		public void SetBones(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0x180E6E0", Offset = "0x180E6E0", VA = "0x180E6E0")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0x180E748", Offset = "0x180E748", VA = "0x180E748")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0x180E7C8", Offset = "0x180E7C8", VA = "0x180E7C8", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0x180EE1C", Offset = "0x180EE1C", VA = "0x180EE1C")]
		private bool UseFABRIK()
		{
			return default(bool);
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0x180EE54", Offset = "0x180EE54", VA = "0x180EE54")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0x180F134", Offset = "0x180F134", VA = "0x180F134")]
		public void WritePose(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0x180F4E8", Offset = "0x180F4E8", VA = "0x180F4E8")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0x180F5D4", Offset = "0x180F5D4", VA = "0x180F5D4")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0x180F69C", Offset = "0x180F69C", VA = "0x180F69C")]
		private void MapToSolverPositions(IKSolverFullBody solver)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000117")]
	public abstract class IKSolver
	{
		[Serializable]
		[Token(Token = "0x20002B9")]
		public class Point
		{
			[Token(Token = "0x4000E8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000E8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB37660", Offset = "0xB37660")]
			public float weight;

			[Token(Token = "0x4000E8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 solverPosition;

			[Token(Token = "0x4000E8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Quaternion solverRotation;

			[Token(Token = "0x4000E8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4000E90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x60011D7")]
			[Address(RVA = "0x18111D0", Offset = "0x18111D0", VA = "0x18111D0")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x60011D8")]
			[Address(RVA = "0x1811220", Offset = "0x1811220", VA = "0x1811220")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x60011D9")]
			[Address(RVA = "0x18113A8", Offset = "0x18113A8", VA = "0x18113A8")]
			public void UpdateSolverPosition()
			{
			}

			[Token(Token = "0x60011DA")]
			[Address(RVA = "0x18113E0", Offset = "0x18113E0", VA = "0x18113E0")]
			public void UpdateSolverLocalPosition()
			{
			}

			[Token(Token = "0x60011DB")]
			[Address(RVA = "0x1811418", Offset = "0x1811418", VA = "0x1811418")]
			public void UpdateSolverState()
			{
			}

			[Token(Token = "0x60011DC")]
			[Address(RVA = "0x1811468", Offset = "0x1811468", VA = "0x1811468")]
			public void UpdateSolverLocalState()
			{
			}

			[Token(Token = "0x60011DD")]
			[Address(RVA = "0x1810C98", Offset = "0x1810C98", VA = "0x1810C98")]
			public Point()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002BA")]
		public class Bone : Point
		{
			[Token(Token = "0x4000E91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x4000E92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float sqrMag;

			[Token(Token = "0x4000E93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 axis;

			[Token(Token = "0x4000E94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private RotationLimit _rotationLimit;

			[Token(Token = "0x4000E95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool isLimited;

			[Token(Token = "0x170002B6")]
			public RotationLimit rotationLimit
			{
				[Token(Token = "0x60011DE")]
				[Address(RVA = "0x1810268", Offset = "0x1810268", VA = "0x1810268")]
				get
				{
					return null;
				}
				[Token(Token = "0x60011DF")]
				[Address(RVA = "0x181035C", Offset = "0x181035C", VA = "0x181035C")]
				set
				{
				}
			}

			[Token(Token = "0x60011E0")]
			[Address(RVA = "0x18103E4", Offset = "0x18103E4", VA = "0x18103E4")]
			public void Swing(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60011E1")]
			[Address(RVA = "0x18106A4", Offset = "0x18106A4", VA = "0x18106A4")]
			public static void SolverSwing(Bone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60011E2")]
			[Address(RVA = "0x1810984", Offset = "0x1810984", VA = "0x1810984")]
			public void Swing2D(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60011E3")]
			[Address(RVA = "0x1810BEC", Offset = "0x1810BEC", VA = "0x1810BEC")]
			public void SetToSolverPosition()
			{
			}

			[Token(Token = "0x60011E4")]
			[Address(RVA = "0x1810C14", Offset = "0x1810C14", VA = "0x1810C14")]
			public Bone()
			{
			}

			[Token(Token = "0x60011E5")]
			[Address(RVA = "0x1810D18", Offset = "0x1810D18", VA = "0x1810D18")]
			public Bone(Transform transform)
			{
			}

			[Token(Token = "0x60011E6")]
			[Address(RVA = "0x1810DB0", Offset = "0x1810DB0", VA = "0x1810DB0")]
			public Bone(Transform transform, float weight)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002BB")]
		public class Node : Point
		{
			[Token(Token = "0x4000E96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x4000E97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float effectorPositionWeight;

			[Token(Token = "0x4000E98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float effectorRotationWeight;

			[Token(Token = "0x4000E99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 offset;

			[Token(Token = "0x60011E7")]
			[Address(RVA = "0x181116C", Offset = "0x181116C", VA = "0x181116C")]
			public Node()
			{
			}

			[Token(Token = "0x60011E8")]
			[Address(RVA = "0x1811170", Offset = "0x1811170", VA = "0x1811170")]
			public Node(Transform transform)
			{
			}

			[Token(Token = "0x60011E9")]
			[Address(RVA = "0x1811198", Offset = "0x1811198", VA = "0x1811198")]
			public Node(Transform transform, float weight)
			{
			}
		}

		[Token(Token = "0x20002BC")]
		public delegate void UpdateDelegate();

		[Token(Token = "0x20002BD")]
		public delegate void IterationDelegate(int i);

		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public Vector3 IKPosition;

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35034", Offset = "0xB35034")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35034", Offset = "0xB35034")]
		public float IKPositionWeight;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB35088", Offset = "0xB35088")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateDelegate OnPreInitiate;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UpdateDelegate OnPostInitiate;

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UpdateDelegate OnPreUpdate;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UpdateDelegate OnPostUpdate;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool firstInitiation;

		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		protected Transform root;

		[Token(Token = "0x17000068")]
		public bool initiated
		{
			[Token(Token = "0x600079D")]
			[Address(RVA = "0x180FCB8", Offset = "0x180FCB8", VA = "0x180FCB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3B8C4", Offset = "0xB3B8C4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600079E")]
			[Address(RVA = "0x180FCC0", Offset = "0x180FCC0", VA = "0x180FCC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3B8D4", Offset = "0xB3B8D4")]
			private set
			{
			}
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0x180F984", Offset = "0x180F984", VA = "0x180F984")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000795")]
		public abstract bool IsValid(ref string message);

		[Token(Token = "0x6000796")]
		[Address(RVA = "0x17FB8C8", Offset = "0x17FB8C8", VA = "0x17FB8C8")]
		public void Initiate(Transform root)
		{
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0x17FBD8C", Offset = "0x17FBD8C", VA = "0x17FBD8C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0x180FC0C", Offset = "0x180FC0C", VA = "0x180FC0C", Slot = "5")]
		public virtual Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0x180FC18", Offset = "0x180FC18", VA = "0x180FC18")]
		public void SetIKPosition(Vector3 position)
		{
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0x180FC24", Offset = "0x180FC24", VA = "0x180FC24")]
		public float GetIKPositionWeight()
		{
			return default(float);
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0x180FC2C", Offset = "0x180FC2C", VA = "0x180FC2C")]
		public void SetIKPositionWeight(float weight)
		{
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0x180FCB0", Offset = "0x180FCB0", VA = "0x180FCB0")]
		public Transform GetRoot()
		{
			return null;
		}

		[Token(Token = "0x600079F")]
		public abstract Point[] GetPoints();

		[Token(Token = "0x60007A0")]
		public abstract Point GetPoint(Transform transform);

		[Token(Token = "0x60007A1")]
		public abstract void FixTransforms();

		[Token(Token = "0x60007A2")]
		public abstract void StoreDefaultLocalState();

		[Token(Token = "0x60007A3")]
		protected abstract void OnInitiate();

		[Token(Token = "0x60007A4")]
		protected abstract void OnUpdate();

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x180FCCC", Offset = "0x180FCCC", VA = "0x180FCCC")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x180FCE4", Offset = "0x180FCE4", VA = "0x180FCE4")]
		public static Transform ContainsDuplicateBone(Bone[] bones)
		{
			return null;
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x180FE20", Offset = "0x180FE20", VA = "0x180FE20")]
		public static bool HierarchyIsValid(Bone[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x180FECC", Offset = "0x180FECC", VA = "0x180FECC")]
		protected static float PreSolveBones(ref Bone[] bones)
		{
			return default(float);
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x1810250", Offset = "0x1810250", VA = "0x1810250")]
		protected IKSolver()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000118")]
	public class IKSolverAim : IKSolverHeuristic
	{
		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform transform;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 axis;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Vector3 poleAxis;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Vector3 polePosition;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB350D0", Offset = "0xB350D0")]
		public float poleWeight;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform poleTarget;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB350E8", Offset = "0xB350E8")]
		public float clampWeight;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35100", Offset = "0xB35100")]
		public int clampSmoothing;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float step;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 clampedIKPosition;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RotationLimit transformLimit;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform lastTransform;

		[Token(Token = "0x17000069")]
		public Vector3 transformAxis
		{
			[Token(Token = "0x60007AB")]
			[Address(RVA = "0x18115F0", Offset = "0x18115F0", VA = "0x18115F0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700006A")]
		public Vector3 transformPoleAxis
		{
			[Token(Token = "0x60007AC")]
			[Address(RVA = "0x18116BC", Offset = "0x18116BC", VA = "0x18116BC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700006B")]
		protected override int minBones
		{
			[Token(Token = "0x60007AF")]
			[Address(RVA = "0x181242C", Offset = "0x181242C", VA = "0x181242C", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700006C")]
		protected override Vector3 localDirection
		{
			[Token(Token = "0x60007B3")]
			[Address(RVA = "0x18129D0", Offset = "0x18129D0", VA = "0x18129D0", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x18114F0", Offset = "0x18114F0", VA = "0x18114F0")]
		public float GetAngle()
		{
			return default(float);
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x1811788", Offset = "0x1811788", VA = "0x1811788", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x1811A08", Offset = "0x1811A08", VA = "0x1811A08", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x1812378", Offset = "0x1812378", VA = "0x1812378")]
		private void Solve()
		{
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x1811FA0", Offset = "0x1811FA0", VA = "0x1811FA0")]
		private Vector3 GetClampedIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x1812434", Offset = "0x1812434", VA = "0x1812434")]
		private void RotateToTarget(Vector3 targetPosition, Bone bone, float weight)
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x1812A44", Offset = "0x1812A44", VA = "0x1812A44")]
		public IKSolverAim()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000119")]
	public class IKSolverCCD : IKSolverHeuristic
	{
		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x1812ADC", Offset = "0x1812ADC", VA = "0x1812ADC")]
		public void FadeOutBoneWeights()
		{
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x1812B8C", Offset = "0x1812B8C", VA = "0x1812B8C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x1812C10", Offset = "0x1812C10", VA = "0x1812C10", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x1812F0C", Offset = "0x1812F0C", VA = "0x1812F0C")]
		private void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x1813660", Offset = "0x1813660", VA = "0x1813660")]
		public IKSolverCCD()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200011A")]
	public class IKSolverFABRIK : IKSolverHeuristic
	{
		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool[] limitedBones;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3[] solverLocalPositions;

		[Token(Token = "0x1700006D")]
		protected override bool boneLengthCanBeZero
		{
			[Token(Token = "0x60007BF")]
			[Address(RVA = "0x1814890", Offset = "0x1814890", VA = "0x1814890", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x1813668", Offset = "0x1813668", VA = "0x1813668")]
		public void SolveForward(Vector3 position)
		{
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x1813DB0", Offset = "0x1813DB0", VA = "0x1813DB0")]
		public void SolveBackward(Vector3 position)
		{
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x1813EE8", Offset = "0x1813EE8", VA = "0x1813EE8", Slot = "5")]
		public override Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x1813F80", Offset = "0x1813F80", VA = "0x1813F80", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x1814528", Offset = "0x1814528", VA = "0x1814528", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x1814898", Offset = "0x1814898", VA = "0x1814898")]
		private Vector3 SolveJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x181373C", Offset = "0x181373C", VA = "0x181373C")]
		private void OnPreSolve()
		{
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x1813E94", Offset = "0x1813E94", VA = "0x1813E94")]
		private void OnPostSolve()
		{
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x1814834", Offset = "0x1814834", VA = "0x1814834")]
		private void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x1813BD8", Offset = "0x1813BD8", VA = "0x1813BD8")]
		private void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x18150D8", Offset = "0x18150D8", VA = "0x18150D8")]
		private void SolverMove(int index, Vector3 offset)
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x18151E8", Offset = "0x18151E8", VA = "0x18151E8")]
		private void SolverRotate(int index, Quaternion rotation, bool recursive)
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x1815314", Offset = "0x1815314", VA = "0x1815314")]
		private void SolverRotateChildren(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x181542C", Offset = "0x181542C", VA = "0x181542C")]
		private void SolverMoveChildrenAroundPoint(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x1814290", Offset = "0x1814290", VA = "0x1814290")]
		private Quaternion GetParentSolverRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x18143DC", Offset = "0x18143DC", VA = "0x18143DC")]
		private Vector3 GetParentSolverPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x1815618", Offset = "0x1815618", VA = "0x1815618")]
		private Quaternion GetLimitedRotation(int index, Quaternion q, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x1814B50", Offset = "0x1814B50", VA = "0x1814B50")]
		private void LimitForward(int rotateBone, int limitBone)
		{
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x1813E84", Offset = "0x1813E84", VA = "0x1813E84")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x1815D80", Offset = "0x1815D80", VA = "0x1815D80")]
		private void BackwardReachUnlimited(Vector3 position)
		{
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x18157EC", Offset = "0x18157EC", VA = "0x18157EC")]
		private void BackwardReachLimited(Vector3 position)
		{
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x18149B0", Offset = "0x18149B0", VA = "0x18149B0")]
		private void MapToSolverPositions()
		{
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x1814A8C", Offset = "0x1814A8C", VA = "0x1814A8C")]
		private void MapToSolverPositionsLimited()
		{
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x1815E4C", Offset = "0x1815E4C", VA = "0x1815E4C")]
		public IKSolverFABRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200011B")]
	public class IKSolverFABRIKRoot : IKSolver
	{
		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int iterations;

		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35118", Offset = "0xB35118")]
		public float rootPin;

		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FABRIKChain[] chains;

		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool zeroWeightApplied;

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] isRoot;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 rootDefaultPosition;

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x188AE2C", Offset = "0x188AE2C", VA = "0x188AE2C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x188B6F8", Offset = "0x188B6F8", VA = "0x188B6F8", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x188B790", Offset = "0x188B790", VA = "0x188B790", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x188B828", Offset = "0x188B828", VA = "0x188B828", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x188B928", Offset = "0x188B928", VA = "0x188B928")]
		private bool IsRoot(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x188B9C4", Offset = "0x188B9C4", VA = "0x188B9C4", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x188BF2C", Offset = "0x188BF2C", VA = "0x188BF2C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x188C12C", Offset = "0x188C12C", VA = "0x188C12C", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x188BFDC", Offset = "0x188BFDC", VA = "0x188BFDC")]
		private void AddPointsToArray(ref Point[] array, FABRIKChain chain)
		{
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x188BBF8", Offset = "0x188BBF8", VA = "0x188BBF8")]
		private Vector3 GetCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x188C1C4", Offset = "0x188C1C4", VA = "0x188C1C4")]
		public IKSolverFABRIKRoot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200011C")]
	public class IKSolverFullBody : IKSolver
	{
		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35130", Offset = "0xB35130")]
		public int iterations;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FBIKChain[] chain;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IKEffector[] effectors;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public IKMappingSpine spineMapping;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IKMappingBone[] boneMappings;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public IKMappingLimb[] limbMappings;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool FABRIKPass;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UpdateDelegate OnPreRead;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UpdateDelegate OnPreSolve;

		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public IterationDelegate OnPostIteration;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UpdateDelegate OnPreBend;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UpdateDelegate OnPostSolve;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UpdateDelegate OnStoreDefaultLocalState;

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UpdateDelegate OnFixTransforms;

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x188C22C", Offset = "0x188C22C", VA = "0x188C22C")]
		public IKEffector GetEffector(Transform t)
		{
			return null;
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x188C320", Offset = "0x188C320", VA = "0x188C320")]
		public FBIKChain GetChain(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x188C37C", Offset = "0x188C37C", VA = "0x188C37C")]
		public int GetChainIndex(Transform transform)
		{
			return default(int);
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x188C4B0", Offset = "0x188C4B0", VA = "0x188C4B0")]
		public Node GetNode(int chainIndex, int nodeIndex)
		{
			return null;
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x188C50C", Offset = "0x188C50C", VA = "0x188C50C")]
		public void GetChainAndNodeIndexes(Transform transform, out int chainIndex, out int nodeIndex)
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x188C58C", Offset = "0x188C58C", VA = "0x188C58C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x188C714", Offset = "0x188C714", VA = "0x188C714", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x188C888", Offset = "0x188C888", VA = "0x188C888", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x188CA8C", Offset = "0x188CA8C", VA = "0x188CA8C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x188CB64", Offset = "0x188CB64", VA = "0x188CB64", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x188CC48", Offset = "0x188CC48", VA = "0x188CC48", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x188CDBC", Offset = "0x188CDBC", VA = "0x188CDBC", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x188CF84", Offset = "0x188CF84", VA = "0x188CF84", Slot = "12")]
		protected virtual void ReadPose()
		{
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x188D1D0", Offset = "0x188D1D0", VA = "0x188D1D0", Slot = "13")]
		protected virtual void Solve()
		{
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x188D4AC", Offset = "0x188D4AC", VA = "0x188D4AC", Slot = "14")]
		protected virtual void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x188D4F0", Offset = "0x188D4F0", VA = "0x188D4F0", Slot = "15")]
		protected virtual void WritePose()
		{
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x188D5E0", Offset = "0x188D5E0", VA = "0x188D5E0")]
		public IKSolverFullBody()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200011D")]
	public enum FullBodyBipedEffector
	{
		[Token(Token = "0x40007C9")]
		Body,
		[Token(Token = "0x40007CA")]
		LeftShoulder,
		[Token(Token = "0x40007CB")]
		RightShoulder,
		[Token(Token = "0x40007CC")]
		LeftThigh,
		[Token(Token = "0x40007CD")]
		RightThigh,
		[Token(Token = "0x40007CE")]
		LeftHand,
		[Token(Token = "0x40007CF")]
		RightHand,
		[Token(Token = "0x40007D0")]
		LeftFoot,
		[Token(Token = "0x40007D1")]
		RightFoot
	}
	[Serializable]
	[Token(Token = "0x200011E")]
	public enum FullBodyBipedChain
	{
		[Token(Token = "0x40007D3")]
		LeftArm,
		[Token(Token = "0x40007D4")]
		RightArm,
		[Token(Token = "0x40007D5")]
		LeftLeg,
		[Token(Token = "0x40007D6")]
		RightLeg
	}
	[Serializable]
	[Token(Token = "0x200011F")]
	public class IKSolverFullBodyBiped : IKSolverFullBody
	{
		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform rootNode;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35148", Offset = "0xB35148")]
		public float spineStiffness;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35160", Offset = "0xB35160")]
		public float pullBodyVertical;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35178", Offset = "0xB35178")]
		public float pullBodyHorizontal;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB35190", Offset = "0xB35190")]
		private Vector3 <pullBodyOffset>k__BackingField;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 offset;

		[Token(Token = "0x1700006E")]
		public IKEffector bodyEffector
		{
			[Token(Token = "0x60007EF")]
			[Address(RVA = "0x188D6B8", Offset = "0x188D6B8", VA = "0x188D6B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006F")]
		public IKEffector leftShoulderEffector
		{
			[Token(Token = "0x60007F0")]
			[Address(RVA = "0x188D800", Offset = "0x188D800", VA = "0x188D800")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000070")]
		public IKEffector rightShoulderEffector
		{
			[Token(Token = "0x60007F1")]
			[Address(RVA = "0x188D808", Offset = "0x188D808", VA = "0x188D808")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000071")]
		public IKEffector leftThighEffector
		{
			[Token(Token = "0x60007F2")]
			[Address(RVA = "0x188D810", Offset = "0x188D810", VA = "0x188D810")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000072")]
		public IKEffector rightThighEffector
		{
			[Token(Token = "0x60007F3")]
			[Address(RVA = "0x188D818", Offset = "0x188D818", VA = "0x188D818")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000073")]
		public IKEffector leftHandEffector
		{
			[Token(Token = "0x60007F4")]
			[Address(RVA = "0x188D820", Offset = "0x188D820", VA = "0x188D820")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000074")]
		public IKEffector rightHandEffector
		{
			[Token(Token = "0x60007F5")]
			[Address(RVA = "0x188D828", Offset = "0x188D828", VA = "0x188D828")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		public IKEffector leftFootEffector
		{
			[Token(Token = "0x60007F6")]
			[Address(RVA = "0x188D830", Offset = "0x188D830", VA = "0x188D830")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000076")]
		public IKEffector rightFootEffector
		{
			[Token(Token = "0x60007F7")]
			[Address(RVA = "0x188D838", Offset = "0x188D838", VA = "0x188D838")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000077")]
		public FBIKChain leftArmChain
		{
			[Token(Token = "0x60007F8")]
			[Address(RVA = "0x188D840", Offset = "0x188D840", VA = "0x188D840")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000078")]
		public FBIKChain rightArmChain
		{
			[Token(Token = "0x60007F9")]
			[Address(RVA = "0x188D878", Offset = "0x188D878", VA = "0x188D878")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000079")]
		public FBIKChain leftLegChain
		{
			[Token(Token = "0x60007FA")]
			[Address(RVA = "0x188D8B0", Offset = "0x188D8B0", VA = "0x188D8B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007A")]
		public FBIKChain rightLegChain
		{
			[Token(Token = "0x60007FB")]
			[Address(RVA = "0x188D8E8", Offset = "0x188D8E8", VA = "0x188D8E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007B")]
		public IKMappingLimb leftArmMapping
		{
			[Token(Token = "0x60007FC")]
			[Address(RVA = "0x188D920", Offset = "0x188D920", VA = "0x188D920")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007C")]
		public IKMappingLimb rightArmMapping
		{
			[Token(Token = "0x60007FD")]
			[Address(RVA = "0x188D954", Offset = "0x188D954", VA = "0x188D954")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007D")]
		public IKMappingLimb leftLegMapping
		{
			[Token(Token = "0x60007FE")]
			[Address(RVA = "0x188D98C", Offset = "0x188D98C", VA = "0x188D98C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007E")]
		public IKMappingLimb rightLegMapping
		{
			[Token(Token = "0x60007FF")]
			[Address(RVA = "0x188D9C4", Offset = "0x188D9C4", VA = "0x188D9C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007F")]
		public IKMappingBone headMapping
		{
			[Token(Token = "0x6000800")]
			[Address(RVA = "0x188D9FC", Offset = "0x188D9FC", VA = "0x188D9FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000080")]
		public Vector3 pullBodyOffset
		{
			[Token(Token = "0x6000810")]
			[Address(RVA = "0x188F9C0", Offset = "0x188F9C0", VA = "0x188F9C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3B8E4", Offset = "0xB3B8E4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000811")]
			[Address(RVA = "0x188F9CC", Offset = "0x188F9CC", VA = "0x188F9CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3B8F4", Offset = "0xB3B8F4")]
			private set
			{
			}
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0x188DA30", Offset = "0x188DA30", VA = "0x188DA30")]
		public void SetChainWeights(FullBodyBipedChain c, float pull, float reach = 0f)
		{
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0x188DB3C", Offset = "0x188DB3C", VA = "0x188DB3C")]
		public void SetEffectorWeights(FullBodyBipedEffector effector, float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0x188DA84", Offset = "0x188DA84", VA = "0x188DA84")]
		public FBIKChain GetChain(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0x188DC18", Offset = "0x188DC18", VA = "0x188DC18")]
		public FBIKChain GetChain(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0x188D6C0", Offset = "0x188D6C0", VA = "0x188D6C0")]
		public IKEffector GetEffector(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0x188DCE8", Offset = "0x188DCE8", VA = "0x188DCE8")]
		public IKEffector GetEndEffector(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0x188DDA0", Offset = "0x188DDA0", VA = "0x188DDA0")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x6000808")]
		[Address(RVA = "0x188DE54", Offset = "0x188DE54", VA = "0x188DE54")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0x188DF08", Offset = "0x188DF08", VA = "0x188DF08")]
		public IKMappingSpine GetSpineMapping()
		{
			return null;
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0x188DF10", Offset = "0x188DF10", VA = "0x188DF10")]
		public IKMappingBone GetHeadMapping()
		{
			return null;
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0x188DF44", Offset = "0x188DF44", VA = "0x188DF44")]
		public IKConstraintBend GetBendConstraint(FullBodyBipedChain limb)
		{
			return null;
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0x188E00C", Offset = "0x188E00C", VA = "0x188E00C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0x188E19C", Offset = "0x188E19C", VA = "0x188E19C")]
		public void SetToReferences(BipedReferences references, [Optional] Transform rootNode)
		{
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0x188F2D8", Offset = "0x188F2D8", VA = "0x188F2D8")]
		public static Transform DetectRootNodeBone(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0x188F76C", Offset = "0x188F76C", VA = "0x188F76C")]
		public void SetLimbOrientations(BipedLimbOrientations o)
		{
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0x188F7CC", Offset = "0x188F7CC", VA = "0x188F7CC")]
		private void SetLimbOrientation(FullBodyBipedChain chain, BipedLimbOrientations.LimbOrientation limbOrientation)
		{
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0x188F5EC", Offset = "0x188F5EC", VA = "0x188F5EC")]
		private static Transform GetLeftClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0x188F6AC", Offset = "0x188F6AC", VA = "0x188F6AC")]
		private static Transform GetRightClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0x188F9D8", Offset = "0x188F9D8", VA = "0x188F9D8")]
		private static bool Contains(Transform[] array, Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x6000816")]
		[Address(RVA = "0x188FAB4", Offset = "0x188FAB4", VA = "0x188FAB4", Slot = "12")]
		protected override void ReadPose()
		{
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0x188FBFC", Offset = "0x188FBFC", VA = "0x188FBFC")]
		private void PullBody()
		{
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0x188FD8C", Offset = "0x188FD8C", VA = "0x188FD8C")]
		private Vector3 GetBodyOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0x188FF8C", Offset = "0x188FF8C", VA = "0x188FF8C")]
		private Vector3 GetHandBodyPull(IKEffector effector, FBIKChain arm, Vector3 offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0x189018C", Offset = "0x189018C", VA = "0x189018C", Slot = "14")]
		protected override void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0x18904C0", Offset = "0x18904C0", VA = "0x18904C0", Slot = "15")]
		protected override void WritePose()
		{
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0x18905C0", Offset = "0x18905C0", VA = "0x18905C0")]
		public IKSolverFullBodyBiped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000120")]
	public class IKSolverHeuristic : IKSolver
	{
		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float tolerance;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int maxIterations;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useRotationLimits;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool XY;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Bone[] bones;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 lastLocalDirection;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float chainLength;

		[Token(Token = "0x17000081")]
		protected virtual int minBones
		{
			[Token(Token = "0x6000824")]
			[Address(RVA = "0x1890E08", Offset = "0x1890E08", VA = "0x1890E08", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000082")]
		protected virtual bool boneLengthCanBeZero
		{
			[Token(Token = "0x6000825")]
			[Address(RVA = "0x1890E10", Offset = "0x1890E10", VA = "0x1890E10", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000083")]
		protected virtual bool allowCommonParent
		{
			[Token(Token = "0x6000826")]
			[Address(RVA = "0x1890E18", Offset = "0x1890E18", VA = "0x1890E18", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000084")]
		protected virtual Vector3 localDirection
		{
			[Token(Token = "0x600082A")]
			[Address(RVA = "0x18913A8", Offset = "0x18913A8", VA = "0x18913A8", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000085")]
		protected float positionOffset
		{
			[Token(Token = "0x600082B")]
			[Address(RVA = "0x18914DC", Offset = "0x18914DC", VA = "0x18914DC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0x18905CC", Offset = "0x18905CC", VA = "0x18905CC")]
		public bool SetChain(Transform[] hierarchy, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0x1890760", Offset = "0x1890760", VA = "0x1890760")]
		public void AddBone(Transform bone)
		{
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0x189089C", Offset = "0x189089C", VA = "0x189089C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0x1890908", Offset = "0x1890908", VA = "0x1890908", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0x1890980", Offset = "0x1890980", VA = "0x1890980", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0x1890D0C", Offset = "0x1890D0C", VA = "0x1890D0C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0x1890D14", Offset = "0x1890D14", VA = "0x1890D14", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0x1890E20", Offset = "0x1890E20", VA = "0x1890E20", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0x1890E24", Offset = "0x1890E24", VA = "0x1890E24", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0x1890E28", Offset = "0x1890E28", VA = "0x1890E28")]
		protected void InitiateBones()
		{
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0x18915A0", Offset = "0x18915A0", VA = "0x18915A0")]
		protected Vector3 GetSingularityOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0x1891944", Offset = "0x1891944", VA = "0x1891944")]
		private bool SingularityDetected()
		{
			return default(bool);
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0x1891BF8", Offset = "0x1891BF8", VA = "0x1891BF8")]
		public IKSolverHeuristic()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000121")]
	public class IKSolverLimb : IKSolverTrigonometric
	{
		[Serializable]
		[Token(Token = "0x20002BE")]
		public enum BendModifier
		{
			[Token(Token = "0x4000E9B")]
			Animation,
			[Token(Token = "0x4000E9C")]
			Target,
			[Token(Token = "0x4000E9D")]
			Parent,
			[Token(Token = "0x4000E9E")]
			Arm,
			[Token(Token = "0x4000E9F")]
			Goal
		}

		[Serializable]
		[Token(Token = "0x20002BF")]
		public struct AxisDirection
		{
			[Token(Token = "0x4000EA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 direction;

			[Token(Token = "0x4000EA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 axis;

			[Token(Token = "0x4000EA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float dot;

			[Token(Token = "0x60011F2")]
			[Address(RVA = "0xC3C1B4", Offset = "0xC3C1B4", VA = "0xC3C1B4")]
			public AxisDirection(Vector3 direction, Vector3 axis)
			{
			}
		}

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AvatarIKGoal goal;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public BendModifier bendModifier;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB351A0", Offset = "0xB351A0")]
		public float maintainRotationWeight;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB351B8", Offset = "0xB351B8")]
		public float bendModifierWeight;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform bendGoal;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool maintainBendFor1Frame;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool maintainRotationFor1Frame;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion defaultRootRotation;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion parentDefaultRotation;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion bone3RotationBeforeSolve;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion maintainRotation;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Quaternion bone3DefaultRotation;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 _bendNormal;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 animationNormal;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AxisDirection[] axisDirectionsLeft;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private AxisDirection[] axisDirectionsRight;

		[Token(Token = "0x17000086")]
		private AxisDirection[] axisDirections
		{
			[Token(Token = "0x6000836")]
			[Address(RVA = "0x189333C", Offset = "0x189333C", VA = "0x189333C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0x1891C68", Offset = "0x1891C68", VA = "0x1891C68")]
		public void MaintainRotation()
		{
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0x1891CB8", Offset = "0x1891CB8", VA = "0x1891CB8")]
		public void MaintainBend()
		{
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0x1891DCC", Offset = "0x1891DCC", VA = "0x1891DCC", Slot = "12")]
		protected override void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0x189243C", Offset = "0x189243C", VA = "0x189243C", Slot = "13")]
		protected override void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0x1893018", Offset = "0x1893018", VA = "0x1893018", Slot = "14")]
		protected override void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0x1893160", Offset = "0x1893160", VA = "0x1893160")]
		public IKSolverLimb()
		{
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0x18932B4", Offset = "0x18932B4", VA = "0x18932B4")]
		public IKSolverLimb(AvatarIKGoal goal)
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0x1892148", Offset = "0x1892148", VA = "0x1892148")]
		private void StoreAxisDirections(ref AxisDirection[] axisDirections)
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x1892568", Offset = "0x1892568", VA = "0x1892568")]
		private Vector3 GetModifiedBendNormal()
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x2000122")]
	public class IKSolverLookAt : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20002C0")]
		public class LookAtBone : Bone
		{
			[Token(Token = "0x170002B7")]
			public Vector3 forward
			{
				[Token(Token = "0x60011F7")]
				[Address(RVA = "0x18951B8", Offset = "0x18951B8", VA = "0x18951B8")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x60011F3")]
			[Address(RVA = "0x1895904", Offset = "0x1895904", VA = "0x1895904")]
			public LookAtBone()
			{
			}

			[Token(Token = "0x60011F4")]
			[Address(RVA = "0x189458C", Offset = "0x189458C", VA = "0x189458C")]
			public LookAtBone(Transform transform)
			{
			}

			[Token(Token = "0x60011F5")]
			[Address(RVA = "0x18948C8", Offset = "0x18948C8", VA = "0x18948C8")]
			public void Initiate(Transform root)
			{
			}

			[Token(Token = "0x60011F6")]
			[Address(RVA = "0x18955BC", Offset = "0x18955BC", VA = "0x18955BC")]
			public void LookAt(Vector3 direction, float weight)
			{
			}
		}

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LookAtBone[] spine;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LookAtBone head;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LookAtBone[] eyes;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB351D0", Offset = "0xB351D0")]
		public float bodyWeight;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB351E8", Offset = "0xB351E8")]
		public float headWeight;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35200", Offset = "0xB35200")]
		public float eyesWeight;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35218", Offset = "0xB35218")]
		public float clampWeight;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35230", Offset = "0xB35230")]
		public float clampWeightHead;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35248", Offset = "0xB35248")]
		public float clampWeightEyes;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35260", Offset = "0xB35260")]
		public int clampSmoothing;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve spineWeightCurve;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3[] spineForwards;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3[] headForwards;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] eyeForward;

		[Token(Token = "0x17000087")]
		private bool spineIsValid
		{
			[Token(Token = "0x6000847")]
			[Address(RVA = "0x1893CF0", Offset = "0x1893CF0", VA = "0x1893CF0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000088")]
		private bool spineIsEmpty
		{
			[Token(Token = "0x6000848")]
			[Address(RVA = "0x1893EC8", Offset = "0x1893EC8", VA = "0x1893EC8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000089")]
		private bool headIsValid
		{
			[Token(Token = "0x600084A")]
			[Address(RVA = "0x1893DD4", Offset = "0x1893DD4", VA = "0x1893DD4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008A")]
		private bool headIsEmpty
		{
			[Token(Token = "0x600084B")]
			[Address(RVA = "0x1893EEC", Offset = "0x1893EEC", VA = "0x1893EEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008B")]
		private bool eyesIsValid
		{
			[Token(Token = "0x600084D")]
			[Address(RVA = "0x1893DE4", Offset = "0x1893DE4", VA = "0x1893DE4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008C")]
		private bool eyesIsEmpty
		{
			[Token(Token = "0x600084E")]
			[Address(RVA = "0x1893F68", Offset = "0x1893F68", VA = "0x1893F68")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0x18933B8", Offset = "0x18933B8", VA = "0x18933B8")]
		public void SetLookAtWeight(float weight)
		{
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0x189343C", Offset = "0x189343C", VA = "0x189343C")]
		public void SetLookAtWeight(float weight, float bodyWeight)
		{
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0x18934E8", Offset = "0x18934E8", VA = "0x18934E8")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight)
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0x18935B0", Offset = "0x18935B0", VA = "0x18935B0")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight)
		{
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0x189369C", Offset = "0x189369C", VA = "0x189369C")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
		{
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0x18937A8", Offset = "0x18937A8", VA = "0x18937A8")]
		public void SetLookAtWeight(float weight, float bodyWeight = 0f, float headWeight = 1f, float eyesWeight = 0.5f, float clampWeight = 0.5f, float clampWeightHead = 0.5f, float clampWeightEyes = 0.3f)
		{
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0x18938F0", Offset = "0x18938F0", VA = "0x18938F0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0x1893A20", Offset = "0x1893A20", VA = "0x1893A20", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x1893B5C", Offset = "0x1893B5C", VA = "0x1893B5C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x1893F8C", Offset = "0x1893F8C", VA = "0x1893F8C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x18941C4", Offset = "0x18941C4", VA = "0x18941C4", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0x1894364", Offset = "0x1894364", VA = "0x1894364")]
		public bool SetChain(Transform[] spine, Transform head, Transform[] eyes, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0x18945B8", Offset = "0x18945B8", VA = "0x18945B8", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0x1894A04", Offset = "0x1894A04", VA = "0x1894A04", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x1894B08", Offset = "0x1894B08", VA = "0x1894B08")]
		private void SolveSpine()
		{
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0x1894CFC", Offset = "0x1894CFC", VA = "0x1894CFC")]
		private void SolveHead()
		{
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0x1894F58", Offset = "0x1894F58", VA = "0x1894F58")]
		private void SolveEyes()
		{
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0x1895284", Offset = "0x1895284", VA = "0x1895284")]
		private Vector3[] GetForwards(ref Vector3[] forwards, Vector3 baseForward, Vector3 targetForward, int bones, float clamp)
		{
			return null;
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0x1894414", Offset = "0x1894414", VA = "0x1894414")]
		private void SetBones(Transform[] array, ref LookAtBone[] bones)
		{
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x1895724", Offset = "0x1895724", VA = "0x1895724")]
		public IKSolverLookAt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000123")]
	public class IKSolverTrigonometric : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20002C1")]
		public class TrigonometricBone : Bone
		{
			[Token(Token = "0x4000EA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion targetToLocalSpace;

			[Token(Token = "0x4000EA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 defaultLocalBendNormal;

			[Token(Token = "0x60011F8")]
			[Address(RVA = "0x1896EC8", Offset = "0x1896EC8", VA = "0x1896EC8")]
			public void Initiate(Vector3 childPosition, Vector3 bendNormal)
			{
			}

			[Token(Token = "0x60011F9")]
			[Address(RVA = "0x1897A70", Offset = "0x1897A70", VA = "0x1897A70")]
			public Quaternion GetRotation(Vector3 direction, Vector3 bendNormal)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60011FA")]
			[Address(RVA = "0x1891D00", Offset = "0x1891D00", VA = "0x1891D00")]
			public Vector3 GetBendNormalFromCurrentRotation()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60011FB")]
			[Address(RVA = "0x1897B38", Offset = "0x1897B38", VA = "0x1897B38")]
			public TrigonometricBone()
			{
			}
		}

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35278", Offset = "0xB35278")]
		public float IKRotationWeight;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Quaternion IKRotation;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 bendNormal;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TrigonometricBone bone1;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TrigonometricBone bone2;

		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TrigonometricBone bone3;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Vector3 weightIKPosition;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected bool directHierarchy;

		[Token(Token = "0x6000853")]
		[Address(RVA = "0x189590C", Offset = "0x189590C", VA = "0x189590C")]
		public void SetBendGoalPosition(Vector3 goalPosition, float weight)
		{
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0x1895AFC", Offset = "0x1895AFC", VA = "0x1895AFC")]
		public void SetBendPlaneToCurrent()
		{
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0x1895CB0", Offset = "0x1895CB0", VA = "0x1895CB0")]
		public void SetIKRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0x1895CBC", Offset = "0x1895CBC", VA = "0x1895CBC")]
		public void SetIKRotationWeight(float weight)
		{
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0x1895D40", Offset = "0x1895D40", VA = "0x1895D40")]
		public Quaternion GetIKRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0x1895D4C", Offset = "0x1895D4C", VA = "0x1895D4C")]
		public float GetIKRotationWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0x1895D54", Offset = "0x1895D54", VA = "0x1895D54", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0x1895E58", Offset = "0x1895E58", VA = "0x1895E58", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0x1895F78", Offset = "0x1895F78", VA = "0x1895F78", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0x1895FC4", Offset = "0x1895FC4", VA = "0x1895FC4", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0x1896010", Offset = "0x1896010", VA = "0x1896010", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0x18963EC", Offset = "0x18963EC", VA = "0x18963EC")]
		public bool SetChain(Transform bone1, Transform bone2, Transform bone3, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0x1896444", Offset = "0x1896444", VA = "0x1896444")]
		public static void Solve(Transform bone1, Transform bone2, Transform bone3, Vector3 targetPosition, Vector3 bendNormal, float weight)
		{
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0x18969EC", Offset = "0x18969EC", VA = "0x18969EC")]
		private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0x1896C04", Offset = "0x1896C04", VA = "0x1896C04", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0x1896DC0", Offset = "0x1896DC0", VA = "0x1896DC0")]
		private bool IsDirectHierarchy()
		{
			return default(bool);
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0x1896D3C", Offset = "0x1896D3C", VA = "0x1896D3C")]
		private void InitiateBones()
		{
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0x1897068", Offset = "0x1897068", VA = "0x1897068", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000865")]
		[Address(RVA = "0x1897B2C", Offset = "0x1897B2C", VA = "0x1897B2C", Slot = "12")]
		protected virtual void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0x1897B30", Offset = "0x1897B30", VA = "0x1897B30", Slot = "13")]
		protected virtual void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6000867")]
		[Address(RVA = "0x1897B34", Offset = "0x1897B34", VA = "0x1897B34", Slot = "14")]
		protected virtual void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0x1897774", Offset = "0x1897774", VA = "0x1897774")]
		protected Vector3 GetBendDirection(Vector3 IKPosition, Vector3 bendNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0x18931D4", Offset = "0x18931D4", VA = "0x18931D4")]
		public IKSolverTrigonometric()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000124")]
	public class IKSolverVR : IKSolver
	{
		[Token(Token = "0x20002C2")]
		public enum IKStep
		{
			[Token(Token = "0x4000EA6")]
			Step1,
			[Token(Token = "0x4000EA7")]
			Step2,
			[Token(Token = "0x4000EA8")]
			Step3
		}

		[Serializable]
		[Token(Token = "0x20002C3")]
		public class Arm : BodyPart
		{
			[Serializable]
			[Token(Token = "0x2000318")]
			public enum ShoulderRotationMode
			{
				[Token(Token = "0x4001068")]
				YawPitch,
				[Token(Token = "0x4001069")]
				FromTo
			}

			[Token(Token = "0x4000EA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37678", Offset = "0xB37678")]
			public Transform target;

			[Token(Token = "0x4000EAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB376B0", Offset = "0xB376B0")]
			public Transform bendGoal;

			[Token(Token = "0x4000EAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB376E8", Offset = "0xB376E8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB376E8", Offset = "0xB376E8")]
			public float positionWeight;

			[Token(Token = "0x4000EAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3773C", Offset = "0xB3773C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB3773C", Offset = "0xB3773C")]
			public float rotationWeight;

			[Token(Token = "0x4000EAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37790", Offset = "0xB37790")]
			public ShoulderRotationMode shoulderRotationMode;

			[Token(Token = "0x4000EAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB377C8", Offset = "0xB377C8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB377C8", Offset = "0xB377C8")]
			public float shoulderRotationWeight;

			[Token(Token = "0x4000EAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3781C", Offset = "0xB3781C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB3781C", Offset = "0xB3781C")]
			public float bendGoalWeight;

			[Token(Token = "0x4000EB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37870", Offset = "0xB37870")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB37870", Offset = "0xB37870")]
			public float swivelOffset;

			[Token(Token = "0x4000EB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB378CC", Offset = "0xB378CC")]
			public Vector3 wristToPalmAxis;

			[Token(Token = "0x4000EB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37904", Offset = "0xB37904")]
			public Vector3 palmToThumbAxis;

			[Token(Token = "0x4000EB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[HideInInspector]
			public Vector3 IKPosition;

			[Token(Token = "0x4000EB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[HideInInspector]
			public Quaternion IKRotation;

			[Token(Token = "0x4000EB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			[HideInInspector]
			public Vector3 bendDirection;

			[Token(Token = "0x4000EB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[HideInInspector]
			public Vector3 handPositionOffset;

			[Token(Token = "0x4000EB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3797C", Offset = "0xB3797C")]
			private Vector3 <position>k__BackingField;

			[Token(Token = "0x4000EB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3798C", Offset = "0xB3798C")]
			private Quaternion <rotation>k__BackingField;

			[Token(Token = "0x4000EB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private bool hasShoulder;

			[Token(Token = "0x4000EBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private Vector3 chestForwardAxis;

			[Token(Token = "0x4000EBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private Vector3 chestUpAxis;

			[Token(Token = "0x4000EBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
			private Quaternion chestRotation;

			[Token(Token = "0x4000EBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			private Vector3 chestForward;

			[Token(Token = "0x4000EBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			private Vector3 chestUp;

			[Token(Token = "0x4000EBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
			private Quaternion forearmRelToUpperArm;

			[Token(Token = "0x4000EC0")]
			private const float yawOffsetAngle = 45f;

			[Token(Token = "0x4000EC1")]
			private const float pitchOffsetAngle = -30f;

			[Token(Token = "0x170002B8")]
			public Vector3 position
			{
				[Token(Token = "0x60011FC")]
				[Address(RVA = "0x18A02A8", Offset = "0x18A02A8", VA = "0x18A02A8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EF68", Offset = "0xB3EF68")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60011FD")]
				[Address(RVA = "0x18A02B4", Offset = "0x18A02B4", VA = "0x18A02B4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EF78", Offset = "0xB3EF78")]
				private set
				{
				}
			}

			[Token(Token = "0x170002B9")]
			public Quaternion rotation
			{
				[Token(Token = "0x60011FE")]
				[Address(RVA = "0x18A02C0", Offset = "0x18A02C0", VA = "0x18A02C0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EF88", Offset = "0xB3EF88")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x60011FF")]
				[Address(RVA = "0x18A02CC", Offset = "0x18A02CC", VA = "0x18A02CC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EF98", Offset = "0xB3EF98")]
				private set
				{
				}
			}

			[Token(Token = "0x170002BA")]
			private VirtualBone shoulder
			{
				[Token(Token = "0x6001200")]
				[Address(RVA = "0x18A02D8", Offset = "0x18A02D8", VA = "0x18A02D8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002BB")]
			private VirtualBone upperArm
			{
				[Token(Token = "0x6001201")]
				[Address(RVA = "0x18A030C", Offset = "0x18A030C", VA = "0x18A030C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002BC")]
			private VirtualBone forearm
			{
				[Token(Token = "0x6001202")]
				[Address(RVA = "0x18A0344", Offset = "0x18A0344", VA = "0x18A0344")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002BD")]
			private VirtualBone hand
			{
				[Token(Token = "0x6001203")]
				[Address(RVA = "0x18A037C", Offset = "0x18A037C", VA = "0x18A037C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001204")]
			[Address(RVA = "0x18A03B4", Offset = "0x18A03B4", VA = "0x18A03B4", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasNeck, bool hasShoulders, bool hasToes, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6001205")]
			[Address(RVA = "0x18A0B2C", Offset = "0x18A0B2C", VA = "0x18A0B2C", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6001206")]
			[Address(RVA = "0x18A0D20", Offset = "0x18A0D20", VA = "0x18A0D20", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6001207")]
			[Address(RVA = "0x189A6CC", Offset = "0x189A6CC", VA = "0x189A6CC")]
			public void Solve(bool isLeft)
			{
			}

			[Token(Token = "0x6001208")]
			[Address(RVA = "0x18A1664", Offset = "0x18A1664", VA = "0x18A1664", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6001209")]
			[Address(RVA = "0x18A16D4", Offset = "0x18A16D4", VA = "0x18A16D4", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x600120A")]
			[Address(RVA = "0x18A0DCC", Offset = "0x18A0DCC", VA = "0x18A0DCC")]
			private float DamperValue(float value, float min, float max, float weight = 1f)
			{
				return default(float);
			}

			[Token(Token = "0x600120B")]
			[Address(RVA = "0x18A0EA4", Offset = "0x18A0EA4", VA = "0x18A0EA4")]
			private Vector3 GetBendNormal(Vector3 dir)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600120C")]
			[Address(RVA = "0x18A17E0", Offset = "0x18A17E0", VA = "0x18A17E0")]
			private void Visualize(VirtualBone bone1, VirtualBone bone2, VirtualBone bone3, Color color)
			{
			}

			[Token(Token = "0x600120D")]
			[Address(RVA = "0x18A00C8", Offset = "0x18A00C8", VA = "0x18A00C8")]
			public Arm()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002C4")]
		public abstract class BodyPart
		{
			[Token(Token = "0x4000EC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3799C", Offset = "0xB3799C")]
			private float <sqrMag>k__BackingField;

			[Token(Token = "0x4000EC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB379AC", Offset = "0xB379AC")]
			private float <mag>k__BackingField;

			[Token(Token = "0x4000EC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public VirtualBone[] bones;

			[Token(Token = "0x4000EC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected bool initiated;

			[Token(Token = "0x4000EC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			protected Vector3 rootPosition;

			[Token(Token = "0x4000EC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			protected Quaternion rootRotation;

			[Token(Token = "0x4000EC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			protected int index;

			[Token(Token = "0x170002BE")]
			public float sqrMag
			{
				[Token(Token = "0x6001213")]
				[Address(RVA = "0x18A19A0", Offset = "0x18A19A0", VA = "0x18A19A0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EFA8", Offset = "0xB3EFA8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001214")]
				[Address(RVA = "0x18A19A8", Offset = "0x18A19A8", VA = "0x18A19A8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EFB8", Offset = "0xB3EFB8")]
				private set
				{
				}
			}

			[Token(Token = "0x170002BF")]
			public float mag
			{
				[Token(Token = "0x6001215")]
				[Address(RVA = "0x18A19B0", Offset = "0x18A19B0", VA = "0x18A19B0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EFC8", Offset = "0xB3EFC8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001216")]
				[Address(RVA = "0x18A19B8", Offset = "0x18A19B8", VA = "0x18A19B8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EFD8", Offset = "0xB3EFD8")]
				private set
				{
				}
			}

			[Token(Token = "0x600120E")]
			protected abstract void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasNeck, bool hasShoulders, bool hasToes, int rootIndex, int index);

			[Token(Token = "0x600120F")]
			public abstract void PreSolve();

			[Token(Token = "0x6001210")]
			public abstract void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations);

			[Token(Token = "0x6001211")]
			public abstract void ApplyOffsets();

			[Token(Token = "0x6001212")]
			public abstract void ResetOffsets();

			[Token(Token = "0x6001217")]
			[Address(RVA = "0x189A3E8", Offset = "0x189A3E8", VA = "0x189A3E8")]
			public void Read(Vector3[] positions, Quaternion[] rotations, bool hasNeck, bool hasShoulders, bool hasToes, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6001218")]
			[Address(RVA = "0x18A19C0", Offset = "0x18A19C0", VA = "0x18A19C0")]
			public void MovePosition(Vector3 position)
			{
			}

			[Token(Token = "0x6001219")]
			[Address(RVA = "0x18A1B2C", Offset = "0x18A1B2C", VA = "0x18A1B2C")]
			public void MoveRotation(Quaternion rotation)
			{
			}

			[Token(Token = "0x600121A")]
			[Address(RVA = "0x18A1BD8", Offset = "0x18A1BD8", VA = "0x18A1BD8")]
			public void Translate(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x600121B")]
			[Address(RVA = "0x189A4DC", Offset = "0x189A4DC", VA = "0x189A4DC")]
			public void TranslateRoot(Vector3 newRootPos, Quaternion newRootRot)
			{
			}

			[Token(Token = "0x600121C")]
			[Address(RVA = "0x18A14C0", Offset = "0x18A14C0", VA = "0x18A14C0")]
			public void RotateTo(VirtualBone bone, Quaternion rotation, float weight = 1f)
			{
			}

			[Token(Token = "0x600121D")]
			[Address(RVA = "0x18A1C2C", Offset = "0x18A1C2C", VA = "0x18A1C2C")]
			public void Visualize(Color color)
			{
			}

			[Token(Token = "0x600121E")]
			[Address(RVA = "0x18A1D70", Offset = "0x18A1D70", VA = "0x18A1D70")]
			public void Visualize()
			{
			}

			[Token(Token = "0x600121F")]
			[Address(RVA = "0x18A1908", Offset = "0x18A1908", VA = "0x18A1908")]
			protected BodyPart()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002C5")]
		public class Footstep
		{
			[Token(Token = "0x4000EC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float stepSpeed;

			[Token(Token = "0x4000ECA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 characterSpaceOffset;

			[Token(Token = "0x4000ECB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB379CC", Offset = "0xB379CC")]
			private Vector3 <position>k__BackingField;

			[Token(Token = "0x4000ECC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB379DC", Offset = "0xB379DC")]
			private Quaternion <rotation>k__BackingField;

			[Token(Token = "0x4000ECD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB379EC", Offset = "0xB379EC")]
			private Quaternion <stepToRootRot>k__BackingField;

			[Token(Token = "0x4000ECE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB379FC", Offset = "0xB379FC")]
			private float <stepProgress>k__BackingField;

			[Token(Token = "0x4000ECF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37A0C", Offset = "0xB37A0C")]
			private Vector3 <stepFrom>k__BackingField;

			[Token(Token = "0x4000ED0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 stepTo;

			[Token(Token = "0x4000ED1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Quaternion stepFromRot;

			[Token(Token = "0x4000ED2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private Quaternion stepToRot;

			[Token(Token = "0x4000ED3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			private Quaternion footRelativeToRoot;

			[Token(Token = "0x170002C0")]
			public Vector3 position
			{
				[Token(Token = "0x6001220")]
				[Address(RVA = "0x18A1D98", Offset = "0x18A1D98", VA = "0x18A1D98")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EFE8", Offset = "0xB3EFE8")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001221")]
				[Address(RVA = "0x18A1DA4", Offset = "0x18A1DA4", VA = "0x18A1DA4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3EFF8", Offset = "0xB3EFF8")]
				private set
				{
				}
			}

			[Token(Token = "0x170002C1")]
			public Quaternion rotation
			{
				[Token(Token = "0x6001222")]
				[Address(RVA = "0x18A1DB0", Offset = "0x18A1DB0", VA = "0x18A1DB0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F008", Offset = "0xB3F008")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6001223")]
				[Address(RVA = "0x18A1DBC", Offset = "0x18A1DBC", VA = "0x18A1DBC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F018", Offset = "0xB3F018")]
				private set
				{
				}
			}

			[Token(Token = "0x170002C2")]
			public Quaternion stepToRootRot
			{
				[Token(Token = "0x6001224")]
				[Address(RVA = "0x18A1DC8", Offset = "0x18A1DC8", VA = "0x18A1DC8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F028", Offset = "0xB3F028")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6001225")]
				[Address(RVA = "0x18A1DD4", Offset = "0x18A1DD4", VA = "0x18A1DD4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F038", Offset = "0xB3F038")]
				private set
				{
				}
			}

			[Token(Token = "0x170002C3")]
			public bool isStepping
			{
				[Token(Token = "0x6001226")]
				[Address(RVA = "0x18A1DE0", Offset = "0x18A1DE0", VA = "0x18A1DE0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170002C4")]
			public float stepProgress
			{
				[Token(Token = "0x6001227")]
				[Address(RVA = "0x18A1DF4", Offset = "0x18A1DF4", VA = "0x18A1DF4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F048", Offset = "0xB3F048")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001228")]
				[Address(RVA = "0x18A1DFC", Offset = "0x18A1DFC", VA = "0x18A1DFC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F058", Offset = "0xB3F058")]
				private set
				{
				}
			}

			[Token(Token = "0x170002C5")]
			public Vector3 stepFrom
			{
				[Token(Token = "0x6001229")]
				[Address(RVA = "0x18A1E04", Offset = "0x18A1E04", VA = "0x18A1E04")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F068", Offset = "0xB3F068")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600122A")]
				[Address(RVA = "0x18A1E10", Offset = "0x18A1E10", VA = "0x18A1E10")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F078", Offset = "0xB3F078")]
				private set
				{
				}
			}

			[Token(Token = "0x600122B")]
			[Address(RVA = "0x18A1E1C", Offset = "0x18A1E1C", VA = "0x18A1E1C")]
			public Footstep(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation, Vector3 characterSpaceOffset)
			{
			}

			[Token(Token = "0x600122C")]
			[Address(RVA = "0x18A1F2C", Offset = "0x18A1F2C", VA = "0x18A1F2C")]
			public void Reset(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation)
			{
			}

			[Token(Token = "0x600122D")]
			[Address(RVA = "0x18A205C", Offset = "0x18A205C", VA = "0x18A205C")]
			public void StepTo(Vector3 p, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x600122E")]
			[Address(RVA = "0x18A215C", Offset = "0x18A215C", VA = "0x18A215C")]
			public void Update(InterpolationMode interpolation)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002C6")]
		public class Leg : BodyPart
		{
			[Token(Token = "0x4000ED4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37A1C", Offset = "0xB37A1C")]
			public Transform target;

			[Token(Token = "0x4000ED5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37A54", Offset = "0xB37A54")]
			public Transform bendGoal;

			[Token(Token = "0x4000ED6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37A8C", Offset = "0xB37A8C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB37A8C", Offset = "0xB37A8C")]
			public float positionWeight;

			[Token(Token = "0x4000ED7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37AE0", Offset = "0xB37AE0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB37AE0", Offset = "0xB37AE0")]
			public float rotationWeight;

			[Token(Token = "0x4000ED8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37B34", Offset = "0xB37B34")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB37B34", Offset = "0xB37B34")]
			public float bendGoalWeight;

			[Token(Token = "0x4000ED9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37B88", Offset = "0xB37B88")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB37B88", Offset = "0xB37B88")]
			public float swivelOffset;

			[Token(Token = "0x4000EDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37BE4", Offset = "0xB37BE4")]
			private Vector3 <IKPosition>k__BackingField;

			[Token(Token = "0x4000EDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37BF4", Offset = "0xB37BF4")]
			private Quaternion <IKRotation>k__BackingField;

			[Token(Token = "0x4000EDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[HideInInspector]
			public Vector3 footPositionOffset;

			[Token(Token = "0x4000EDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[HideInInspector]
			public Vector3 heelPositionOffset;

			[Token(Token = "0x4000EDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[HideInInspector]
			public Quaternion footRotationOffset;

			[Token(Token = "0x4000EDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public float currentMag;

			[Token(Token = "0x4000EE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37C44", Offset = "0xB37C44")]
			private Vector3 <position>k__BackingField;

			[Token(Token = "0x4000EE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37C54", Offset = "0xB37C54")]
			private Quaternion <rotation>k__BackingField;

			[Token(Token = "0x4000EE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37C64", Offset = "0xB37C64")]
			private bool <hasToes>k__BackingField;

			[Token(Token = "0x4000EE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37C74", Offset = "0xB37C74")]
			private Vector3 <thighRelativeToPelvis>k__BackingField;

			[Token(Token = "0x4000EE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private Vector3 footPosition;

			[Token(Token = "0x4000EE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private Quaternion footRotation;

			[Token(Token = "0x4000EE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private Vector3 bendNormal;

			[Token(Token = "0x4000EE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			private Quaternion calfRelToThigh;

			[Token(Token = "0x170002C6")]
			public Vector3 IKPosition
			{
				[Token(Token = "0x600122F")]
				[Address(RVA = "0x18A22FC", Offset = "0x18A22FC", VA = "0x18A22FC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F088", Offset = "0xB3F088")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001230")]
				[Address(RVA = "0x18A2308", Offset = "0x18A2308", VA = "0x18A2308")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F098", Offset = "0xB3F098")]
				private set
				{
				}
			}

			[Token(Token = "0x170002C7")]
			public Quaternion IKRotation
			{
				[Token(Token = "0x6001231")]
				[Address(RVA = "0x18A2314", Offset = "0x18A2314", VA = "0x18A2314")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F0A8", Offset = "0xB3F0A8")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6001232")]
				[Address(RVA = "0x18A2320", Offset = "0x18A2320", VA = "0x18A2320")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F0B8", Offset = "0xB3F0B8")]
				private set
				{
				}
			}

			[Token(Token = "0x170002C8")]
			public Vector3 position
			{
				[Token(Token = "0x6001233")]
				[Address(RVA = "0x18A232C", Offset = "0x18A232C", VA = "0x18A232C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F0C8", Offset = "0xB3F0C8")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001234")]
				[Address(RVA = "0x18A2338", Offset = "0x18A2338", VA = "0x18A2338")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F0D8", Offset = "0xB3F0D8")]
				private set
				{
				}
			}

			[Token(Token = "0x170002C9")]
			public Quaternion rotation
			{
				[Token(Token = "0x6001235")]
				[Address(RVA = "0x18A2344", Offset = "0x18A2344", VA = "0x18A2344")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F0E8", Offset = "0xB3F0E8")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6001236")]
				[Address(RVA = "0x18A2350", Offset = "0x18A2350", VA = "0x18A2350")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F0F8", Offset = "0xB3F0F8")]
				private set
				{
				}
			}

			[Token(Token = "0x170002CA")]
			public bool hasToes
			{
				[Token(Token = "0x6001237")]
				[Address(RVA = "0x18A235C", Offset = "0x18A235C", VA = "0x18A235C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F108", Offset = "0xB3F108")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001238")]
				[Address(RVA = "0x18A2364", Offset = "0x18A2364", VA = "0x18A2364")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F118", Offset = "0xB3F118")]
				private set
				{
				}
			}

			[Token(Token = "0x170002CB")]
			public VirtualBone thigh
			{
				[Token(Token = "0x6001239")]
				[Address(RVA = "0x18A2370", Offset = "0x18A2370", VA = "0x18A2370")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002CC")]
			private VirtualBone calf
			{
				[Token(Token = "0x600123A")]
				[Address(RVA = "0x18A23A4", Offset = "0x18A23A4", VA = "0x18A23A4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002CD")]
			private VirtualBone foot
			{
				[Token(Token = "0x600123B")]
				[Address(RVA = "0x18A23DC", Offset = "0x18A23DC", VA = "0x18A23DC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002CE")]
			private VirtualBone toes
			{
				[Token(Token = "0x600123C")]
				[Address(RVA = "0x18A2414", Offset = "0x18A2414", VA = "0x18A2414")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002CF")]
			public VirtualBone lastBone
			{
				[Token(Token = "0x600123D")]
				[Address(RVA = "0x189F2B4", Offset = "0x189F2B4", VA = "0x189F2B4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002D0")]
			public Vector3 thighRelativeToPelvis
			{
				[Token(Token = "0x600123E")]
				[Address(RVA = "0x18A244C", Offset = "0x18A244C", VA = "0x18A244C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F128", Offset = "0xB3F128")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600123F")]
				[Address(RVA = "0x18A2458", Offset = "0x18A2458", VA = "0x18A2458")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F138", Offset = "0xB3F138")]
				private set
				{
				}
			}

			[Token(Token = "0x6001240")]
			[Address(RVA = "0x18A2464", Offset = "0x18A2464", VA = "0x18A2464", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasNeck, bool hasShoulders, bool hasToes, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6001241")]
			[Address(RVA = "0x18A2964", Offset = "0x18A2964", VA = "0x18A2964", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6001242")]
			[Address(RVA = "0x18A3044", Offset = "0x18A3044", VA = "0x18A3044", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6001243")]
			[Address(RVA = "0x18A2F40", Offset = "0x18A2F40", VA = "0x18A2F40")]
			private void ApplyPositionOffset(Vector3 offset, float weight)
			{
			}

			[Token(Token = "0x6001244")]
			[Address(RVA = "0x18A2D18", Offset = "0x18A2D18", VA = "0x18A2D18")]
			private void ApplyRotationOffset(Quaternion offset, float weight)
			{
			}

			[Token(Token = "0x6001245")]
			[Address(RVA = "0x189F47C", Offset = "0x189F47C", VA = "0x189F47C")]
			public void Solve()
			{
			}

			[Token(Token = "0x6001246")]
			[Address(RVA = "0x18A35F4", Offset = "0x18A35F4", VA = "0x18A35F4", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6001247")]
			[Address(RVA = "0x18A36FC", Offset = "0x18A36FC", VA = "0x18A36FC", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6001248")]
			[Address(RVA = "0x18A019C", Offset = "0x18A019C", VA = "0x18A019C")]
			public Leg()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002C7")]
		public class Locomotion
		{
			[Token(Token = "0x4000EE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37C84", Offset = "0xB37C84")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB37C84", Offset = "0xB37C84")]
			public float weight;

			[Token(Token = "0x4000EE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37CD8", Offset = "0xB37CD8")]
			public float footDistance;

			[Token(Token = "0x4000EEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37D10", Offset = "0xB37D10")]
			public float stepThreshold;

			[Token(Token = "0x4000EEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37D48", Offset = "0xB37D48")]
			public float angleThreshold;

			[Token(Token = "0x4000EEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37D80", Offset = "0xB37D80")]
			public float comAngleMlp;

			[Token(Token = "0x4000EED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37DB8", Offset = "0xB37DB8")]
			public float maxVelocity;

			[Token(Token = "0x4000EEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37DF0", Offset = "0xB37DF0")]
			public float velocityFactor;

			[Token(Token = "0x4000EEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37E28", Offset = "0xB37E28")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB37E28", Offset = "0xB37E28")]
			public float maxLegStretch;

			[Token(Token = "0x4000EF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37E80", Offset = "0xB37E80")]
			public float rootSpeed;

			[Token(Token = "0x4000EF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37EB8", Offset = "0xB37EB8")]
			public float stepSpeed;

			[Token(Token = "0x4000EF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37EF0", Offset = "0xB37EF0")]
			public AnimationCurve stepHeight;

			[Token(Token = "0x4000EF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37F28", Offset = "0xB37F28")]
			public AnimationCurve heelHeight;

			[Token(Token = "0x4000EF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37F60", Offset = "0xB37F60")]
			public InterpolationMode stepInterpolation;

			[Token(Token = "0x4000EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB37F98", Offset = "0xB37F98")]
			public Vector3 offset;

			[Token(Token = "0x4000EF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[HideInInspector]
			public bool blockingEnabled;

			[Token(Token = "0x4000EF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[HideInInspector]
			public LayerMask blockingLayers;

			[Token(Token = "0x4000EF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[HideInInspector]
			public float raycastRadius;

			[Token(Token = "0x4000EF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[HideInInspector]
			public float raycastHeight;

			[Token(Token = "0x4000EFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB38010", Offset = "0xB38010")]
			private Vector3 <centerOfMass>k__BackingField;

			[Token(Token = "0x4000EFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private Footstep[] footsteps;

			[Token(Token = "0x4000EFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private Vector3 lastComPosition;

			[Token(Token = "0x4000EFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			private Vector3 comVelocity;

			[Token(Token = "0x4000EFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private int leftFootIndex;

			[Token(Token = "0x4000EFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private int rightFootIndex;

			[Token(Token = "0x170002D1")]
			public Vector3 centerOfMass
			{
				[Token(Token = "0x6001249")]
				[Address(RVA = "0x18A37AC", Offset = "0x18A37AC", VA = "0x18A37AC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F148", Offset = "0xB3F148")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600124A")]
				[Address(RVA = "0x18A37B8", Offset = "0x18A37B8", VA = "0x18A37B8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F158", Offset = "0xB3F158")]
				private set
				{
				}
			}

			[Token(Token = "0x600124B")]
			[Address(RVA = "0x189CAC8", Offset = "0x189CAC8", VA = "0x189CAC8")]
			public void Initiate(Vector3[] positions, Quaternion[] rotations, bool hasToes)
			{
			}

			[Token(Token = "0x600124C")]
			[Address(RVA = "0x1899664", Offset = "0x1899664", VA = "0x1899664")]
			public void Reset(Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x600124D")]
			[Address(RVA = "0x189DFB4", Offset = "0x189DFB4", VA = "0x189DFB4")]
			public void Solve(VirtualBone rootBone, Spine spine, Leg leftLeg, Leg rightLeg, Arm leftArm, Arm rightArm, out Vector3 leftFootPosition, out Vector3 rightFootPosition, out Quaternion leftFootRotation, out Quaternion rightFootRotation, out float leftFootOffset, out float rightFootOffset, out float leftHeelOffset, out float rightHeelOffset)
			{
			}

			[Token(Token = "0x600124E")]
			[Address(RVA = "0x18A3804", Offset = "0x18A3804", VA = "0x18A3804")]
			private bool StepBlocked(Vector3 fromPosition, Vector3 toPosition, Vector3 rootPosition)
			{
				return default(bool);
			}

			[Token(Token = "0x600124F")]
			[Address(RVA = "0x18A39A8", Offset = "0x18A39A8", VA = "0x18A39A8")]
			private bool CanStep()
			{
				return default(bool);
			}

			[Token(Token = "0x6001250")]
			[Address(RVA = "0x18A3A2C", Offset = "0x18A3A2C", VA = "0x18A3A2C")]
			private static bool GetLineSphereCollision(Vector3 lineStart, Vector3 lineEnd, Vector3 sphereCenter, float sphereRadius)
			{
				return default(bool);
			}

			[Token(Token = "0x6001251")]
			[Address(RVA = "0x18A0210", Offset = "0x18A0210", VA = "0x18A0210")]
			public Locomotion()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002C8")]
		public class Spine : BodyPart
		{
			[Token(Token = "0x4000F00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38020", Offset = "0xB38020")]
			public Transform headTarget;

			[Token(Token = "0x4000F01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38058", Offset = "0xB38058")]
			public Transform pelvisTarget;

			[Token(Token = "0x4000F02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38090", Offset = "0xB38090")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB38090", Offset = "0xB38090")]
			public float positionWeight;

			[Token(Token = "0x4000F03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB380E4", Offset = "0xB380E4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB380E4", Offset = "0xB380E4")]
			public float rotationWeight;

			[Token(Token = "0x4000F04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38138", Offset = "0xB38138")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB38138", Offset = "0xB38138")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4000F05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3818C", Offset = "0xB3818C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB3818C", Offset = "0xB3818C")]
			public float bodyPosStiffness;

			[Token(Token = "0x4000F06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB381E0", Offset = "0xB381E0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB381E0", Offset = "0xB381E0")]
			public float bodyRotStiffness;

			[Token(Token = "0x4000F07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38234", Offset = "0xB38234")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB38234", Offset = "0xB38234")]
			public float chestRotationWeight;

			[Token(Token = "0x4000F08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38288", Offset = "0xB38288")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB38288", Offset = "0xB38288")]
			public float chestClampWeight;

			[Token(Token = "0x4000F09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB382DC", Offset = "0xB382DC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB382DC", Offset = "0xB382DC")]
			public float headClampWeight;

			[Token(Token = "0x4000F0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38330", Offset = "0xB38330")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB38330", Offset = "0xB38330")]
			public float maintainPelvisPosition;

			[Token(Token = "0x4000F0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38384", Offset = "0xB38384")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB38384", Offset = "0xB38384")]
			public float maxRootAngle;

			[Token(Token = "0x4000F0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB383DC", Offset = "0xB383DC")]
			private Vector3 <IKPositionHead>k__BackingField;

			[Token(Token = "0x4000F0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB383EC", Offset = "0xB383EC")]
			private Quaternion <IKRotationHead>k__BackingField;

			[Token(Token = "0x4000F0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB383FC", Offset = "0xB383FC")]
			private Vector3 <IKPositionPelvis>k__BackingField;

			[Token(Token = "0x4000F0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[HideInInspector]
			public Vector3 pelvisPositionOffset;

			[Token(Token = "0x4000F10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			[HideInInspector]
			public Vector3 chestPositionOffset;

			[Token(Token = "0x4000F11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public Vector3 headPositionOffset;

			[Token(Token = "0x4000F12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			[HideInInspector]
			public Quaternion pelvisRotationOffset;

			[Token(Token = "0x4000F13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			[HideInInspector]
			public Quaternion chestRotationOffset;

			[Token(Token = "0x4000F14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			[HideInInspector]
			public Quaternion headRotationOffset;

			[Token(Token = "0x4000F15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			[HideInInspector]
			public Vector3 faceDirection;

			[Token(Token = "0x4000F16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3847C", Offset = "0xB3847C")]
			private Quaternion <anchorRotation>k__BackingField;

			[Token(Token = "0x4000F17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private Vector3 headPosition;

			[Token(Token = "0x4000F18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
			private Quaternion headRotation;

			[Token(Token = "0x4000F19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
			private Quaternion anchorRelativeToHead;

			[Token(Token = "0x4000F1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			private Quaternion pelvisRelativeRotation;

			[Token(Token = "0x4000F1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
			private Quaternion chestRelativeRotation;

			[Token(Token = "0x4000F1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
			private Vector3 headDeltaPosition;

			[Token(Token = "0x4000F1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
			private Quaternion pelvisDeltaRotation;

			[Token(Token = "0x4000F1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
			private Quaternion chestTargetRotation;

			[Token(Token = "0x4000F1F")]
			private const int pelvisIndex = 0;

			[Token(Token = "0x4000F20")]
			private const int spineIndex = 1;

			[Token(Token = "0x4000F21")]
			private const int chestIndex = 2;

			[Token(Token = "0x4000F22")]
			private const int neckIndex = 3;

			[Token(Token = "0x4000F23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
			private int headIndex;

			[Token(Token = "0x4000F24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
			private float length;

			[Token(Token = "0x4000F25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
			private bool hasNeck;

			[Token(Token = "0x4000F26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
			private float headHeight;

			[Token(Token = "0x170002D2")]
			public Vector3 IKPositionHead
			{
				[Token(Token = "0x6001252")]
				[Address(RVA = "0x18A3BF8", Offset = "0x18A3BF8", VA = "0x18A3BF8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F168", Offset = "0xB3F168")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001253")]
				[Address(RVA = "0x18A3C04", Offset = "0x18A3C04", VA = "0x18A3C04")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F178", Offset = "0xB3F178")]
				private set
				{
				}
			}

			[Token(Token = "0x170002D3")]
			public Quaternion IKRotationHead
			{
				[Token(Token = "0x6001254")]
				[Address(RVA = "0x18A3C10", Offset = "0x18A3C10", VA = "0x18A3C10")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F188", Offset = "0xB3F188")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6001255")]
				[Address(RVA = "0x18A3C1C", Offset = "0x18A3C1C", VA = "0x18A3C1C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F198", Offset = "0xB3F198")]
				private set
				{
				}
			}

			[Token(Token = "0x170002D4")]
			public Vector3 IKPositionPelvis
			{
				[Token(Token = "0x6001256")]
				[Address(RVA = "0x18A3C28", Offset = "0x18A3C28", VA = "0x18A3C28")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F1A8", Offset = "0xB3F1A8")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001257")]
				[Address(RVA = "0x18A3C34", Offset = "0x18A3C34", VA = "0x18A3C34")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F1B8", Offset = "0xB3F1B8")]
				private set
				{
				}
			}

			[Token(Token = "0x170002D5")]
			public VirtualBone pelvis
			{
				[Token(Token = "0x6001258")]
				[Address(RVA = "0x18998D8", Offset = "0x18998D8", VA = "0x18998D8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002D6")]
			public VirtualBone firstSpineBone
			{
				[Token(Token = "0x6001259")]
				[Address(RVA = "0x18A3C40", Offset = "0x18A3C40", VA = "0x18A3C40")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002D7")]
			public VirtualBone chest
			{
				[Token(Token = "0x600125A")]
				[Address(RVA = "0x189A4A4", Offset = "0x189A4A4", VA = "0x189A4A4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002D8")]
			private VirtualBone neck
			{
				[Token(Token = "0x600125B")]
				[Address(RVA = "0x18A3C78", Offset = "0x18A3C78", VA = "0x18A3C78")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002D9")]
			public VirtualBone head
			{
				[Token(Token = "0x600125C")]
				[Address(RVA = "0x18A37C4", Offset = "0x18A37C4", VA = "0x18A37C4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002DA")]
			public Quaternion anchorRotation
			{
				[Token(Token = "0x600125D")]
				[Address(RVA = "0x18A3CB0", Offset = "0x18A3CB0", VA = "0x18A3CB0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F1C8", Offset = "0xB3F1C8")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x600125E")]
				[Address(RVA = "0x18A3CC4", Offset = "0x18A3CC4", VA = "0x18A3CC4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F1D8", Offset = "0xB3F1D8")]
				private set
				{
				}
			}

			[Token(Token = "0x600125F")]
			[Address(RVA = "0x18A3CD8", Offset = "0x18A3CD8", VA = "0x18A3CD8", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasNeck, bool hasShoulders, bool hasToes, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6001260")]
			[Address(RVA = "0x18A43D8", Offset = "0x18A43D8", VA = "0x18A43D8", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6001261")]
			[Address(RVA = "0x18A454C", Offset = "0x18A454C", VA = "0x18A454C", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6001262")]
			[Address(RVA = "0x18A47BC", Offset = "0x18A47BC", VA = "0x18A47BC")]
			private void CalculateChestTargetRotation(Arm[] arms)
			{
			}

			[Token(Token = "0x6001263")]
			[Address(RVA = "0x189DB7C", Offset = "0x189DB7C", VA = "0x189DB7C")]
			public void Solve(VirtualBone rootBone, Leg[] legs, Arm[] arms)
			{
			}

			[Token(Token = "0x6001264")]
			[Address(RVA = "0x18A5394", Offset = "0x18A5394", VA = "0x18A5394")]
			private void SolvePelvis()
			{
			}

			[Token(Token = "0x6001265")]
			[Address(RVA = "0x18A5714", Offset = "0x18A5714", VA = "0x18A5714", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6001266")]
			[Address(RVA = "0x18A58D8", Offset = "0x18A58D8", VA = "0x18A58D8", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6001267")]
			[Address(RVA = "0x18A4CD4", Offset = "0x18A4CD4", VA = "0x18A4CD4")]
			private void AdjustChestByOffset(ref Quaternion chestTargetRotation)
			{
			}

			[Token(Token = "0x6001268")]
			[Address(RVA = "0x18A49C0", Offset = "0x18A49C0", VA = "0x18A49C0")]
			private void AdjustChestByHands(ref Quaternion chestTargetRotation, Arm[] arms)
			{
			}

			[Token(Token = "0x6001269")]
			[Address(RVA = "0x189F2F4", Offset = "0x189F2F4", VA = "0x189F2F4")]
			public void InverseTranslateToHead(Leg[] legs, bool limited, bool useCurrentLegMag, Vector3 offset, float w)
			{
			}

			[Token(Token = "0x600126A")]
			[Address(RVA = "0x18A4DA0", Offset = "0x18A4DA0", VA = "0x18A4DA0")]
			private void TranslatePelvis(Leg[] legs, Vector3 deltaPosition, Quaternion deltaRotation, float w)
			{
			}

			[Token(Token = "0x600126B")]
			[Address(RVA = "0x18A59B8", Offset = "0x18A59B8", VA = "0x18A59B8")]
			private Vector3 LimitPelvisPosition(Leg[] legs, Vector3 pelvisPosition, bool useCurrentLegMag, int it = 2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600126C")]
			[Address(RVA = "0x18A5144", Offset = "0x18A5144", VA = "0x18A5144")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x600126D")]
			[Address(RVA = "0x189FF74", Offset = "0x189FF74", VA = "0x189FF74")]
			public Spine()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002C9")]
		public enum PositionOffset
		{
			[Token(Token = "0x4000F28")]
			Pelvis,
			[Token(Token = "0x4000F29")]
			Chest,
			[Token(Token = "0x4000F2A")]
			Head,
			[Token(Token = "0x4000F2B")]
			LeftHand,
			[Token(Token = "0x4000F2C")]
			RightHand,
			[Token(Token = "0x4000F2D")]
			LeftFoot,
			[Token(Token = "0x4000F2E")]
			RightFoot,
			[Token(Token = "0x4000F2F")]
			LeftHeel,
			[Token(Token = "0x4000F30")]
			RightHeel
		}

		[Serializable]
		[Token(Token = "0x20002CA")]
		public enum RotationOffset
		{
			[Token(Token = "0x4000F32")]
			Pelvis,
			[Token(Token = "0x4000F33")]
			Chest,
			[Token(Token = "0x4000F34")]
			Head
		}

		[Serializable]
		[Token(Token = "0x20002CB")]
		public class VirtualBone
		{
			[Token(Token = "0x4000F35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 readPosition;

			[Token(Token = "0x4000F36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Quaternion readRotation;

			[Token(Token = "0x4000F37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 solverPosition;

			[Token(Token = "0x4000F38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion solverRotation;

			[Token(Token = "0x4000F39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float length;

			[Token(Token = "0x4000F3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float sqrMag;

			[Token(Token = "0x4000F3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3 axis;

			[Token(Token = "0x600126E")]
			[Address(RVA = "0x16D3EC4", Offset = "0x16D3EC4", VA = "0x16D3EC4")]
			public VirtualBone(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x600126F")]
			[Address(RVA = "0x16D3F40", Offset = "0x16D3F40", VA = "0x16D3F40")]
			public void Read(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001270")]
			[Address(RVA = "0x16D3F60", Offset = "0x16D3F60", VA = "0x16D3F60")]
			public static void SwingRotation(VirtualBone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6001271")]
			[Address(RVA = "0x16D41F0", Offset = "0x16D41F0", VA = "0x16D41F0")]
			public static float PreSolve(ref VirtualBone[] bones)
			{
				return default(float);
			}

			[Token(Token = "0x6001272")]
			[Address(RVA = "0x16D44DC", Offset = "0x16D44DC", VA = "0x16D44DC")]
			public static void RotateAroundPoint(VirtualBone[] bones, int index, Vector3 point, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001273")]
			[Address(RVA = "0x16D46C4", Offset = "0x16D46C4", VA = "0x16D46C4")]
			public static void RotateBy(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001274")]
			[Address(RVA = "0x16D48FC", Offset = "0x16D48FC", VA = "0x16D48FC")]
			public static void RotateBy(VirtualBone[] bones, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001275")]
			[Address(RVA = "0x16D4B30", Offset = "0x16D4B30", VA = "0x16D4B30")]
			public static void RotateTo(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001276")]
			[Address(RVA = "0x16D4D38", Offset = "0x16D4D38", VA = "0x16D4D38")]
			public static void SolveTrigonometric(VirtualBone[] bones, int first, int second, int third, Vector3 targetPosition, Vector3 bendNormal, float weight)
			{
			}

			[Token(Token = "0x6001277")]
			[Address(RVA = "0x16D52E4", Offset = "0x16D52E4", VA = "0x16D52E4")]
			private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001278")]
			[Address(RVA = "0x16D54FC", Offset = "0x16D54FC", VA = "0x16D54FC")]
			public static void SolveFABRIK(VirtualBone[] bones, Vector3 startPosition, Vector3 targetPosition, float weight, float minNormalizedTargetDistance, int iterations, float length)
			{
			}

			[Token(Token = "0x6001279")]
			[Address(RVA = "0x16D58B0", Offset = "0x16D58B0", VA = "0x16D58B0")]
			private static Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600127A")]
			[Address(RVA = "0x16D59B8", Offset = "0x16D59B8", VA = "0x16D59B8")]
			public static void SolveCCD(VirtualBone[] bones, Vector3 targetPosition, float weight, int iterations)
			{
			}
		}

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] solverTransforms;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool hasNeck;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool hasShoulders;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool hasToes;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] readPositions;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] readRotations;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] solvedPositions;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion[] solvedRotations;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 defaultPelvisLocalPosition;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3[] writePositions;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion[] writeRotations;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private IKStep step;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Vector3 rootV;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 rootVelocity;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Vector3 bodyOffset;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35290", Offset = "0xB35290")]
		public bool plantFeet;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB352C8", Offset = "0xB352C8")]
		private VirtualBone <rootBone>k__BackingField;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB352D8", Offset = "0xB352D8")]
		public Spine spine;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35310", Offset = "0xB35310")]
		public Arm leftArm;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35348", Offset = "0xB35348")]
		public Arm rightArm;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35380", Offset = "0xB35380")]
		public Leg leftLeg;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB353B8", Offset = "0xB353B8")]
		public Leg rightLeg;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB353F0", Offset = "0xB353F0")]
		public Locomotion locomotion;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Leg[] legs;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Arm[] arms;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 headPosition;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Vector3 headDeltaPosition;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3 raycastOriginPelvis;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private Vector3 lastOffset;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Vector3 debugPos1;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private Vector3 debugPos2;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Vector3 debugPos3;

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private Vector3 debugPos4;

		[Token(Token = "0x1700008D")]
		[HideInInspector]
		public VirtualBone rootBone
		{
			[Token(Token = "0x6000884")]
			[Address(RVA = "0x189FDAC", Offset = "0x189FDAC", VA = "0x189FDAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3B904", Offset = "0xB3B904")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000885")]
			[Address(RVA = "0x189FDB4", Offset = "0x189FDB4", VA = "0x189FDB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3B914", Offset = "0xB3B914")]
			private set
			{
			}
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0x1897B40", Offset = "0x1897B40", VA = "0x1897B40")]
		public void SetToReferences(VRIK.References references)
		{
		}

		[Token(Token = "0x600086B")]
		[Address(RVA = "0x1897F08", Offset = "0x1897F08", VA = "0x1897F08")]
		public void GuessHandOrientations(VRIK.References references, bool onlyIfZero)
		{
		}

		[Token(Token = "0x600086C")]
		[Address(RVA = "0x1897DB0", Offset = "0x1897DB0", VA = "0x1897DB0")]
		public void DefaultAnimationCurves()
		{
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0x18988EC", Offset = "0x18988EC", VA = "0x18988EC")]
		public void AddPositionOffset(PositionOffset positionOffset, Vector3 value)
		{
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0x1898BC8", Offset = "0x1898BC8", VA = "0x1898BC8")]
		public void AddRotationOffset(RotationOffset rotationOffset, Vector3 value)
		{
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0x1898C6C", Offset = "0x1898C6C", VA = "0x1898C6C")]
		public void AddRotationOffset(RotationOffset rotationOffset, Quaternion value)
		{
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0x1898D9C", Offset = "0x1898D9C", VA = "0x1898D9C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0x189990C", Offset = "0x189990C", VA = "0x189990C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0x1899A50", Offset = "0x1899A50", VA = "0x1899A50", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0x1899B94", Offset = "0x1899B94", VA = "0x1899B94", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0x1899C08", Offset = "0x1899C08", VA = "0x1899C08", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0x1899C7C", Offset = "0x1899C7C", VA = "0x1899C7C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0x1899E90", Offset = "0x1899E90", VA = "0x1899E90")]
		private Vector3 GetNormal(Transform[] transforms)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0x18981A0", Offset = "0x18981A0", VA = "0x18981A0")]
		private Vector3 GuessWristToPalmAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0x1898378", Offset = "0x1898378", VA = "0x1898378")]
		private Vector3 GuessPalmToThumbAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0x18987C8", Offset = "0x18987C8", VA = "0x18987C8")]
		private static Keyframe[] GetSineKeyframes(float mag)
		{
			return null;
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0x1898FB0", Offset = "0x1898FB0", VA = "0x1898FB0")]
		private void UpdateSolverTransforms()
		{
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0x189A170", Offset = "0x189A170", VA = "0x189A170", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0x189A1A4", Offset = "0x189A1A4", VA = "0x189A1A4", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0x189C7A8", Offset = "0x189C7A8", VA = "0x189C7A8")]
		private void WriteTransforms()
		{
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0x1899118", Offset = "0x1899118", VA = "0x1899118")]
		private void Read(Vector3[] positions, Quaternion[] rotations, bool hasNeck, bool hasShoulders, bool hasToes)
		{
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0x189CDC0", Offset = "0x189CDC0", VA = "0x189CDC0")]
		private void Solve()
		{
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0x189B8BC", Offset = "0x189B8BC", VA = "0x189B8BC")]
		private void Solve_Step1()
		{
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0x189C214", Offset = "0x189C214", VA = "0x189C214")]
		private void Solve_Step2()
		{
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0x189CA08", Offset = "0x189CA08", VA = "0x189CA08")]
		private Vector3 GetPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0x189C9C4", Offset = "0x189C9C4", VA = "0x189C9C4")]
		private Quaternion GetRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0x189C660", Offset = "0x189C660", VA = "0x189C660")]
		private void Write()
		{
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0x189F7C4", Offset = "0x189F7C4", VA = "0x189F7C4")]
		private Vector3 GetPelvisOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0x189FDBC", Offset = "0x189FDBC", VA = "0x189FDBC")]
		public IKSolverVR()
		{
		}
	}
	[Token(Token = "0x2000125")]
	public class TwistRelaxer : MonoBehaviour
	{
		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35428", Offset = "0xB35428")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35428", Offset = "0xB35428")]
		public float weight;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3547C", Offset = "0xB3547C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB3547C", Offset = "0xB3547C")]
		public float parentChildCrossfade;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB354D0", Offset = "0xB354D0")]
		public Transform parent;

		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35508", Offset = "0xB35508")]
		public Transform child;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35540", Offset = "0xB35540")]
		public Vector3 twistAxis;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35578", Offset = "0xB35578")]
		public Vector3 axis;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 axisRelativeToParentDefault;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 axisRelativeToChildDefault;

		[Token(Token = "0x6000889")]
		[Address(RVA = "0x16E7DDC", Offset = "0x16E7DDC", VA = "0x16E7DDC")]
		public void Relax()
		{
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0x16E8138", Offset = "0x16E8138", VA = "0x16E8138")]
		private void Start()
		{
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0x16E8284", Offset = "0x16E8284", VA = "0x16E8284")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0x16E8288", Offset = "0x16E8288", VA = "0x16E8288")]
		public TwistRelaxer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000126")]
	public class InteractionEffector
	{
		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB355B0", Offset = "0xB355B0")]
		private FullBodyBipedEffector <effectorType>k__BackingField;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB355C0", Offset = "0xB355C0")]
		private bool <isPaused>k__BackingField;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB355D0", Offset = "0xB355D0")]
		private InteractionObject <interactionObject>k__BackingField;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Poser poser;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IKEffector effector;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timer;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float length;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float weight;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float fadeInSpeed;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float defaultPositionWeight;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float defaultRotationWeight;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float defaultPull;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float defaultReach;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float defaultPush;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float defaultPushParent;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float resetTimer;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool positionWeightUsed;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		private bool rotationWeightUsed;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		private bool pullUsed;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
		private bool reachUsed;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool pushUsed;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool pushParentUsed;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool pickedUp;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool defaults;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool pickUpOnPostFBBIK;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 pausePositionRelative;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion pauseRotationRelative;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private InteractionTarget interactionTarget;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform target;

		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private List<bool> triggered;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool started;

		[Token(Token = "0x1700008E")]
		public FullBodyBipedEffector effectorType
		{
			[Token(Token = "0x600088D")]
			[Address(RVA = "0x16D62DC", Offset = "0x16D62DC", VA = "0x16D62DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3B924", Offset = "0xB3B924")]
			get
			{
				return default(FullBodyBipedEffector);
			}
			[Token(Token = "0x600088E")]
			[Address(RVA = "0x16D62E4", Offset = "0x16D62E4", VA = "0x16D62E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3B934", Offset = "0xB3B934")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008F")]
		public bool isPaused
		{
			[Token(Token = "0x600088F")]
			[Address(RVA = "0x16D62EC", Offset = "0x16D62EC", VA = "0x16D62EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3B944", Offset = "0xB3B944")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000890")]
			[Address(RVA = "0x16D62F4", Offset = "0x16D62F4", VA = "0x16D62F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3B954", Offset = "0xB3B954")]
			private set
			{
			}
		}

		[Token(Token = "0x17000090")]
		public InteractionObject interactionObject
		{
			[Token(Token = "0x6000891")]
			[Address(RVA = "0x16D6300", Offset = "0x16D6300", VA = "0x16D6300")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3B964", Offset = "0xB3B964")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000892")]
			[Address(RVA = "0x16D6308", Offset = "0x16D6308", VA = "0x16D6308")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3B974", Offset = "0xB3B974")]
			private set
			{
			}
		}

		[Token(Token = "0x17000091")]
		public bool inInteraction
		{
			[Token(Token = "0x6000893")]
			[Address(RVA = "0x16D6310", Offset = "0x16D6310", VA = "0x16D6310")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000092")]
		public float progress
		{
			[Token(Token = "0x600089C")]
			[Address(RVA = "0x16D8C68", Offset = "0x16D8C68", VA = "0x16D8C68")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0x16D6380", Offset = "0x16D6380", VA = "0x16D6380")]
		public InteractionEffector(FullBodyBipedEffector effectorType)
		{
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0x16D6404", Offset = "0x16D6404", VA = "0x16D6404")]
		public void Initiate(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0x16D64A8", Offset = "0x16D64A8", VA = "0x16D64A8")]
		private void StoreDefaults()
		{
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x16D65E8", Offset = "0x16D65E8", VA = "0x16D65E8")]
		public bool ResetToDefaults(float speed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x16D69F4", Offset = "0x16D69F4", VA = "0x16D69F4")]
		public bool Pause()
		{
			return default(bool);
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x16D6DAC", Offset = "0x16D6DAC", VA = "0x16D6DAC")]
		public bool Resume()
		{
			return default(bool);
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0x16D6E00", Offset = "0x16D6E00", VA = "0x16D6E00")]
		public bool Start(InteractionObject interactionObject, string tag, float fadeInTime, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x16D792C", Offset = "0x16D792C", VA = "0x16D792C")]
		public void Update(Transform root, float speed)
		{
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x16D8400", Offset = "0x16D8400", VA = "0x16D8400")]
		private void TriggerUntriggeredEvents(bool checkTime, out bool pickUp, out bool pause)
		{
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0x16D8628", Offset = "0x16D8628", VA = "0x16D8628")]
		private void PickUp(Transform root)
		{
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x16D8B14", Offset = "0x16D8B14", VA = "0x16D8B14")]
		public bool Stop()
		{
			return default(bool);
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x16D9134", Offset = "0x16D9134", VA = "0x16D9134")]
		public void OnPostFBBIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000127")]
	public class InteractionLookAt
	{
		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB355E0", Offset = "0xB355E0")]
		public LookAtIK ik;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35618", Offset = "0xB35618")]
		public float lerpSpeed;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35650", Offset = "0xB35650")]
		public float weightSpeed;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool isPaused;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform lookAtTarget;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float stopLookTime;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float weight;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstFBBIKSolve;

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x16D9398", Offset = "0x16D9398", VA = "0x16D9398")]
		public void Look(Transform target, float time)
		{
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x16D9510", Offset = "0x16D9510", VA = "0x16D9510")]
		public void Update()
		{
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x16D9AEC", Offset = "0x16D9AEC", VA = "0x16D9AEC")]
		public void SolveSpine()
		{
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x16D9BE4", Offset = "0x16D9BE4", VA = "0x16D9BE4")]
		public void SolveHead()
		{
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x16D9CB0", Offset = "0x16D9CB0", VA = "0x16D9CB0")]
		public InteractionLookAt()
		{
		}
	}
	[Token(Token = "0x2000128")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB3001C", Offset = "0xB3001C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB3001C", Offset = "0xB3001C")]
	public class InteractionObject : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002CC")]
		public class InteractionEvent
		{
			[Token(Token = "0x4000F3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3848C", Offset = "0xB3848C")]
			public float time;

			[Token(Token = "0x4000F3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB384C4", Offset = "0xB384C4")]
			public bool pause;

			[Token(Token = "0x4000F3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB384FC", Offset = "0xB384FC")]
			public bool pickUp;

			[Token(Token = "0x4000F3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38534", Offset = "0xB38534")]
			public AnimatorEvent[] animations;

			[Token(Token = "0x4000F40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3856C", Offset = "0xB3856C")]
			public Message[] messages;

			[Token(Token = "0x600127B")]
			[Address(RVA = "0x16D8CA4", Offset = "0x16D8CA4", VA = "0x16D8CA4")]
			public void Activate(Transform t)
			{
			}

			[Token(Token = "0x600127C")]
			[Address(RVA = "0x16DAF50", Offset = "0x16DAF50", VA = "0x16DAF50")]
			public InteractionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002CD")]
		public class Message
		{
			[Token(Token = "0x4000F41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB385A4", Offset = "0xB385A4")]
			public string function;

			[Token(Token = "0x4000F42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB385DC", Offset = "0xB385DC")]
			public GameObject recipient;

			[Token(Token = "0x4000F43")]
			private const string empty = "";

			[Token(Token = "0x600127D")]
			[Address(RVA = "0x16DAE60", Offset = "0x16DAE60", VA = "0x16DAE60")]
			public void Send(Transform t)
			{
			}

			[Token(Token = "0x600127E")]
			[Address(RVA = "0x16DAF58", Offset = "0x16DAF58", VA = "0x16DAF58")]
			public Message()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002CE")]
		public class AnimatorEvent
		{
			[Token(Token = "0x4000F44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38614", Offset = "0xB38614")]
			public Animator animator;

			[Token(Token = "0x4000F45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3864C", Offset = "0xB3864C")]
			public Animation animation;

			[Token(Token = "0x4000F46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38684", Offset = "0xB38684")]
			public string animationState;

			[Token(Token = "0x4000F47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB386BC", Offset = "0xB386BC")]
			public float crossfadeTime;

			[Token(Token = "0x4000F48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB386F4", Offset = "0xB386F4")]
			public int layer;

			[Token(Token = "0x4000F49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3872C", Offset = "0xB3872C")]
			public bool resetNormalizedTime;

			[Token(Token = "0x4000F4A")]
			private const string empty = "";

			[Token(Token = "0x600127F")]
			[Address(RVA = "0x16DABC0", Offset = "0x16DABC0", VA = "0x16DABC0")]
			public void Activate(bool pickUp)
			{
			}

			[Token(Token = "0x6001280")]
			[Address(RVA = "0x16DACB4", Offset = "0x16DACB4", VA = "0x16DACB4")]
			private void Activate(Animator animator)
			{
			}

			[Token(Token = "0x6001281")]
			[Address(RVA = "0x16DAD6C", Offset = "0x16DAD6C", VA = "0x16DAD6C")]
			private void Activate(Animation animation)
			{
			}

			[Token(Token = "0x6001282")]
			[Address(RVA = "0x16DAE4C", Offset = "0x16DAE4C", VA = "0x16DAE4C")]
			public AnimatorEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002CF")]
		public class WeightCurve
		{
			[Serializable]
			[Token(Token = "0x2000319")]
			public enum Type
			{
				[Token(Token = "0x400106B")]
				PositionWeight,
				[Token(Token = "0x400106C")]
				RotationWeight,
				[Token(Token = "0x400106D")]
				PositionOffsetX,
				[Token(Token = "0x400106E")]
				PositionOffsetY,
				[Token(Token = "0x400106F")]
				PositionOffsetZ,
				[Token(Token = "0x4001070")]
				Pull,
				[Token(Token = "0x4001071")]
				Reach,
				[Token(Token = "0x4001072")]
				RotateBoneWeight,
				[Token(Token = "0x4001073")]
				Push,
				[Token(Token = "0x4001074")]
				PushParent,
				[Token(Token = "0x4001075")]
				PoserWeight
			}

			[Token(Token = "0x4000F4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38764", Offset = "0xB38764")]
			public Type type;

			[Token(Token = "0x4000F4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3879C", Offset = "0xB3879C")]
			public AnimationCurve curve;

			[Token(Token = "0x6001283")]
			[Address(RVA = "0x16DA3BC", Offset = "0x16DA3BC", VA = "0x16DA3BC")]
			public float GetValue(float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6001284")]
			[Address(RVA = "0x16DAF70", Offset = "0x16DAF70", VA = "0x16DAF70")]
			public WeightCurve()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002D0")]
		public class Multiplier
		{
			[Token(Token = "0x4000F4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB387D4", Offset = "0xB387D4")]
			public WeightCurve.Type curve;

			[Token(Token = "0x4000F4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3880C", Offset = "0xB3880C")]
			public float multiplier;

			[Token(Token = "0x4000F4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38844", Offset = "0xB38844")]
			public WeightCurve.Type result;

			[Token(Token = "0x6001285")]
			[Address(RVA = "0x16DAA20", Offset = "0x16DAA20", VA = "0x16DAA20")]
			public float GetValue(WeightCurve weightCurve, float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6001286")]
			[Address(RVA = "0x16DAF60", Offset = "0x16DAF60", VA = "0x16DAF60")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35698", Offset = "0xB35698")]
		public Transform otherLookAtTarget;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB356D0", Offset = "0xB356D0")]
		public Transform otherTargetsRoot;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35708", Offset = "0xB35708")]
		public Transform positionOffsetSpace;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WeightCurve[] weightCurves;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Multiplier[] multipliers;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionEvent[] events;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB35740", Offset = "0xB35740")]
		private float <length>k__BackingField;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB35750", Offset = "0xB35750")]
		private InteractionSystem <lastUsedInteractionSystem>k__BackingField;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private InteractionTarget[] targets;

		[Token(Token = "0x17000093")]
		public float length
		{
			[Token(Token = "0x60008AC")]
			[Address(RVA = "0x16D9E8C", Offset = "0x16D9E8C", VA = "0x16D9E8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3BAD4", Offset = "0xB3BAD4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008AD")]
			[Address(RVA = "0x16D9E94", Offset = "0x16D9E94", VA = "0x16D9E94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3BAE4", Offset = "0xB3BAE4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000094")]
		public InteractionSystem lastUsedInteractionSystem
		{
			[Token(Token = "0x60008AE")]
			[Address(RVA = "0x16D9E9C", Offset = "0x16D9E9C", VA = "0x16D9E9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3BAF4", Offset = "0xB3BAF4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60008AF")]
			[Address(RVA = "0x16D9EA4", Offset = "0x16D9EA4", VA = "0x16D9EA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3BB04", Offset = "0xB3BB04")]
			private set
			{
			}
		}

		[Token(Token = "0x17000095")]
		public Transform lookAtTarget
		{
			[Token(Token = "0x60008B1")]
			[Address(RVA = "0x16DA0C0", Offset = "0x16DA0C0", VA = "0x16DA0C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000096")]
		public Transform targetsRoot
		{
			[Token(Token = "0x60008B9")]
			[Address(RVA = "0x16D9008", Offset = "0x16D9008", VA = "0x16D9008")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x16D9CC4", Offset = "0x16D9CC4", VA = "0x16D9CC4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B984", Offset = "0xB3B984")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x16D9D10", Offset = "0x16D9D10", VA = "0x16D9D10")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B9BC", Offset = "0xB3B9BC")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x16D9D5C", Offset = "0x16D9D5C", VA = "0x16D9D5C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3B9F4", Offset = "0xB3B9F4")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x16D9DA8", Offset = "0x16D9DA8", VA = "0x16D9DA8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BA2C", Offset = "0xB3BA2C")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x16D9DF4", Offset = "0x16D9DF4", VA = "0x16D9DF4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BA64", Offset = "0xB3BA64")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x16D9E40", Offset = "0x16D9E40", VA = "0x16D9E40")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BA9C", Offset = "0xB3BA9C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x16D9EAC", Offset = "0x16D9EAC", VA = "0x16D9EAC")]
		public void Initiate()
		{
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x16DA150", Offset = "0x16DA150", VA = "0x16DA150")]
		public InteractionTarget GetTarget(FullBodyBipedEffector effectorType, InteractionSystem interactionSystem)
		{
			return null;
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x16D7358", Offset = "0x16D7358", VA = "0x16D7358")]
		public bool CurveUsed(WeightCurve.Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x16DA2D4", Offset = "0x16DA2D4", VA = "0x16DA2D4")]
		public InteractionTarget[] GetTargets()
		{
			return null;
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x16D720C", Offset = "0x16D720C", VA = "0x16D720C")]
		public Transform GetTarget(FullBodyBipedEffector effectorType, string tag)
		{
			return null;
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x16D7350", Offset = "0x16D7350", VA = "0x16D7350")]
		public void OnStartInteraction(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x16D7FEC", Offset = "0x16D7FEC", VA = "0x16D7FEC")]
		public void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, InteractionTarget target, float timer, float weight)
		{
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x16D8834", Offset = "0x16D8834", VA = "0x16D8834")]
		public float GetValue(WeightCurve.Type weightCurveType, InteractionTarget target, float timer)
		{
			return default(float);
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x16DAA5C", Offset = "0x16DAA5C", VA = "0x16DAA5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x16DA3D8", Offset = "0x16DA3D8", VA = "0x16DA3D8")]
		private void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, WeightCurve.Type type, float value, float weight)
		{
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x16DA2DC", Offset = "0x16DA2DC", VA = "0x16DA2DC")]
		private Transform GetTarget(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x16DA9B8", Offset = "0x16DA9B8", VA = "0x16DA9B8")]
		private int GetWeightCurveIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x16DAA60", Offset = "0x16DAA60", VA = "0x16DAA60")]
		private int GetMultiplierIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x16DAAC8", Offset = "0x16DAAC8", VA = "0x16DAAC8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BB14", Offset = "0xB3BB14")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x16DAB14", Offset = "0x16DAB14", VA = "0x16DAB14")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BB4C", Offset = "0xB3BB4C")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x16DAB60", Offset = "0x16DAB60", VA = "0x16DAB60")]
		public InteractionObject()
		{
		}
	}
	[Token(Token = "0x2000129")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB3007C", Offset = "0xB3007C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB3007C", Offset = "0xB3007C")]
	public class InteractionSystem : MonoBehaviour
	{
		[Token(Token = "0x20002D1")]
		public delegate void InteractionDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject);

		[Token(Token = "0x20002D2")]
		public delegate void InteractionEventDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject, InteractionObject.InteractionEvent interactionEvent);

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35760", Offset = "0xB35760")]
		public string targetTag;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35798", Offset = "0xB35798")]
		public float fadeInTime;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB357D0", Offset = "0xB357D0")]
		public float speed;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35808", Offset = "0xB35808")]
		public float resetToDefaultsSpeed;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xB35840", Offset = "0xB35840")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35840", Offset = "0xB35840")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB35840", Offset = "0xB35840")]
		public Collider characterCollider;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB358C4", Offset = "0xB358C4")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xB358C4", Offset = "0xB358C4")]
		public Transform FPSCamera;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35924", Offset = "0xB35924")]
		public LayerMask camRaycastLayers;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3595C", Offset = "0xB3595C")]
		public float camRaycastDistance;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB35994", Offset = "0xB35994")]
		private List<InteractionTrigger> <triggersInRange>k__BackingField;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<InteractionTrigger> inContact;

		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> bestRangeIndexes;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public InteractionDelegate OnInteractionStart;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public InteractionDelegate OnInteractionPause;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InteractionDelegate OnInteractionPickUp;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public InteractionDelegate OnInteractionResume;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public InteractionDelegate OnInteractionStop;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public InteractionEventDelegate OnInteractionEvent;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public RaycastHit raycastHit;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0xB359A4", Offset = "0xB359A4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB359A4", Offset = "0xB359A4")]
		[SerializeField]
		private FullBodyBipedIK fullBody;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35A04", Offset = "0xB35A04")]
		public InteractionLookAt lookAt;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InteractionEffector[] interactionEffectors;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool initiated;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider lastCollider;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Collider c;

		[Token(Token = "0x17000097")]
		public bool inInteraction
		{
			[Token(Token = "0x60008C8")]
			[Address(RVA = "0x16DB140", Offset = "0x16DB140", VA = "0x16DB140")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000098")]
		public FullBodyBipedIK ik
		{
			[Token(Token = "0x60008E2")]
			[Address(RVA = "0x16DCD4C", Offset = "0x16DCD4C", VA = "0x16DCD4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60008E3")]
			[Address(RVA = "0x16DCD54", Offset = "0x16DCD54", VA = "0x16DCD54")]
			set
			{
			}
		}

		[Token(Token = "0x17000099")]
		public List<InteractionTrigger> triggersInRange
		{
			[Token(Token = "0x60008E4")]
			[Address(RVA = "0x16DCD5C", Offset = "0x16DCD5C", VA = "0x16DCD5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3BCD4", Offset = "0xB3BCD4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60008E5")]
			[Address(RVA = "0x16DCD64", Offset = "0x16DCD64", VA = "0x16DCD64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3BCE4", Offset = "0xB3BCE4")]
			private set
			{
			}
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x16DAF78", Offset = "0x16DAF78", VA = "0x16DAF78")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BB84", Offset = "0xB3BB84")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x16DAFC4", Offset = "0x16DAFC4", VA = "0x16DAFC4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BBBC", Offset = "0xB3BBBC")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x16DB010", Offset = "0x16DB010", VA = "0x16DB010")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BBF4", Offset = "0xB3BBF4")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x16DB05C", Offset = "0x16DB05C", VA = "0x16DB05C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BC2C", Offset = "0xB3BC2C")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x16DB0A8", Offset = "0x16DB0A8", VA = "0x16DB0A8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BC64", Offset = "0xB3BC64")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x16DB0F4", Offset = "0x16DB0F4", VA = "0x16DB0F4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BC9C", Offset = "0xB3BC9C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x16DB2CC", Offset = "0x16DB2CC", VA = "0x16DB2CC")]
		public bool IsInInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x16DB398", Offset = "0x16DB398", VA = "0x16DB398")]
		public bool IsPaused(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x16DB464", Offset = "0x16DB464", VA = "0x16DB464")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x16DB510", Offset = "0x16DB510", VA = "0x16DB510")]
		public bool IsInSync()
		{
			return default(bool);
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x16DB608", Offset = "0x16DB608", VA = "0x16DB608")]
		public bool StartInteraction(FullBodyBipedEffector effectorType, InteractionObject interactionObject, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x16DB724", Offset = "0x16DB724", VA = "0x16DB724")]
		public bool PauseInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x16DB7B4", Offset = "0x16DB7B4", VA = "0x16DB7B4")]
		public bool ResumeInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x16DB844", Offset = "0x16DB844", VA = "0x16DB844")]
		public bool StopInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x16DB8D4", Offset = "0x16DB8D4", VA = "0x16DB8D4")]
		public void PauseAll()
		{
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x16DB948", Offset = "0x16DB948", VA = "0x16DB948")]
		public void ResumeAll()
		{
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x16DB9BC", Offset = "0x16DB9BC", VA = "0x16DB9BC")]
		public void StopAll()
		{
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x16DBA24", Offset = "0x16DBA24", VA = "0x16DBA24")]
		public InteractionObject GetInteractionObject(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x16DBAB0", Offset = "0x16DBAB0", VA = "0x16DBAB0")]
		public float GetProgress(FullBodyBipedEffector effectorType)
		{
			return default(float);
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x16DBB64", Offset = "0x16DBB64", VA = "0x16DBB64")]
		public float GetMinActiveProgress()
		{
			return default(float);
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x16DBC48", Offset = "0x16DBC48", VA = "0x16DBC48")]
		public bool TriggerInteraction(int index, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x16DBEE8", Offset = "0x16DBEE8", VA = "0x16DBEE8")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionObject interactionObject)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x16DC0C0", Offset = "0x16DC0C0", VA = "0x16DC0C0")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionTarget interactionTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x16DC334", Offset = "0x16DC334", VA = "0x16DC334")]
		public InteractionTrigger.Range GetClosestInteractionRange()
		{
			return null;
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x16DC628", Offset = "0x16DC628", VA = "0x16DC628")]
		public InteractionObject GetClosestInteractionObjectInRange()
		{
			return null;
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x16DC66C", Offset = "0x16DC66C", VA = "0x16DC66C")]
		public InteractionTarget GetClosestInteractionTargetInRange()
		{
			return null;
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x16DC6E4", Offset = "0x16DC6E4", VA = "0x16DC6E4")]
		public InteractionObject[] GetClosestInteractionObjectsInRange()
		{
			return null;
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x16DC804", Offset = "0x16DC804", VA = "0x16DC804")]
		public InteractionTarget[] GetClosestInteractionTargetsInRange()
		{
			return null;
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x16DC97C", Offset = "0x16DC97C", VA = "0x16DC97C")]
		public bool TriggerEffectorsReady(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x16DCC24", Offset = "0x16DCC24", VA = "0x16DCC24")]
		public InteractionTrigger.Range GetTriggerRange(int index)
		{
			return null;
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x16DC434", Offset = "0x16DC434", VA = "0x16DC434")]
		public int GetClosestTriggerIndex()
		{
			return default(int);
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x16DCD6C", Offset = "0x16DCD6C", VA = "0x16DCD6C", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x16DD3BC", Offset = "0x16DD3BC", VA = "0x16DD3BC")]
		private void InteractionPause(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x16DD3DC", Offset = "0x16DD3DC", VA = "0x16DD3DC")]
		private void InteractionResume(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x16DD3F8", Offset = "0x16DD3F8", VA = "0x16DD3F8")]
		private void InteractionStop(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x16DD414", Offset = "0x16DD414", VA = "0x16DD414")]
		private void LookAtInteraction(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x16DD474", Offset = "0x16DD474", VA = "0x16DD474")]
		public void OnTriggerEnter(Collider c)
		{
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x16DD564", Offset = "0x16DD564", VA = "0x16DD564")]
		public void OnTriggerExit(Collider c)
		{
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x16DD630", Offset = "0x16DD630", VA = "0x16DD630")]
		private bool ContactIsInRange(int index, out int bestRangeIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x16DD988", Offset = "0x16DD988", VA = "0x16DD988")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x16DDA74", Offset = "0x16DDA74", VA = "0x16DDA74")]
		private void Update()
		{
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x16DDCC0", Offset = "0x16DDCC0", VA = "0x16DDCC0")]
		private void Raycasting()
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x16DD134", Offset = "0x16DD134", VA = "0x16DD134")]
		private void UpdateTriggerEventBroadcasting()
		{
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x16DDE00", Offset = "0x16DDE00", VA = "0x16DDE00")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x16DDF2C", Offset = "0x16DDF2C", VA = "0x16DDF2C")]
		private void OnPreFBBIK()
		{
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x16DDFCC", Offset = "0x16DDFCC", VA = "0x16DDFCC")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x16DE0B4", Offset = "0x16DE0B4", VA = "0x16DE0B4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x16DB1EC", Offset = "0x16DB1EC", VA = "0x16DB1EC")]
		private bool IsValid(bool log)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x16DBDE8", Offset = "0x16DBDE8", VA = "0x16DBDE8")]
		private bool TriggerIndexIsValid(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x16DE344", Offset = "0x16DE344", VA = "0x16DE344")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BCF4", Offset = "0xB3BCF4")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x16DE390", Offset = "0x16DE390", VA = "0x16DE390")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BD2C", Offset = "0xB3BD2C")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x16DE3DC", Offset = "0x16DE3DC", VA = "0x16DE3DC")]
		public InteractionSystem()
		{
		}
	}
	[Token(Token = "0x200012A")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB300DC", Offset = "0xB300DC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB300DC", Offset = "0xB300DC")]
	public class InteractionTarget : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002D3")]
		public class Multiplier
		{
			[Token(Token = "0x4000F50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3887C", Offset = "0xB3887C")]
			public InteractionObject.WeightCurve.Type curve;

			[Token(Token = "0x4000F51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB388B4", Offset = "0xB388B4")]
			public float multiplier;

			[Token(Token = "0x600128F")]
			[Address(RVA = "0x16DED08", Offset = "0x16DED08", VA = "0x16DED08")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35A3C", Offset = "0xB35A3C")]
		public FullBodyBipedEffector effectorType;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35A74", Offset = "0xB35A74")]
		public Multiplier[] multipliers;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35AAC", Offset = "0xB35AAC")]
		public float interactionSpeedMlp;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35AE4", Offset = "0xB35AE4")]
		public Transform pivot;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35B1C", Offset = "0xB35B1C")]
		public Vector3 twistAxis;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35B54", Offset = "0xB35B54")]
		public float twistWeight;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35B8C", Offset = "0xB35B8C")]
		public float swingWeight;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35BC4", Offset = "0xB35BC4")]
		public bool rotateOnce;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform lastPivot;

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x16DE890", Offset = "0x16DE890", VA = "0x16DE890")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BD64", Offset = "0xB3BD64")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x16DE8DC", Offset = "0x16DE8DC", VA = "0x16DE8DC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BD9C", Offset = "0xB3BD9C")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x16DE928", Offset = "0x16DE928", VA = "0x16DE928")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BDD4", Offset = "0xB3BDD4")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x16DE974", Offset = "0x16DE974", VA = "0x16DE974")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BE0C", Offset = "0xB3BE0C")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x16DE9C0", Offset = "0x16DE9C0", VA = "0x16DE9C0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BE44", Offset = "0xB3BE44")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0x16DEA0C", Offset = "0x16DEA0C", VA = "0x16DEA0C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BE7C", Offset = "0xB3BE7C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0x16DA34C", Offset = "0x16DA34C", VA = "0x16DA34C")]
		public float GetValue(InteractionObject.WeightCurve.Type curveType)
		{
			return default(float);
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0x16D9098", Offset = "0x16D9098", VA = "0x16D9098")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0x16D740C", Offset = "0x16D740C", VA = "0x16D740C")]
		public void RotateTo(Vector3 position)
		{
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0x16DEBE4", Offset = "0x16DEBE4", VA = "0x16DEBE4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BEB4", Offset = "0xB3BEB4")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0x16DEC30", Offset = "0x16DEC30", VA = "0x16DEC30")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BEEC", Offset = "0xB3BEEC")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0x16DEC7C", Offset = "0x16DEC7C", VA = "0x16DEC7C")]
		public InteractionTarget()
		{
		}
	}
	[Token(Token = "0x200012B")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB3013C", Offset = "0xB3013C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB3013C", Offset = "0xB3013C")]
	public class InteractionTrigger : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002D4")]
		public class CharacterPosition
		{
			[Token(Token = "0x4000F52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB388EC", Offset = "0xB388EC")]
			public bool use;

			[Token(Token = "0x4000F53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38924", Offset = "0xB38924")]
			public Vector2 offset;

			[Token(Token = "0x4000F54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3895C", Offset = "0xB3895C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB3895C", Offset = "0xB3895C")]
			public float angleOffset;

			[Token(Token = "0x4000F55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB389B8", Offset = "0xB389B8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB389B8", Offset = "0xB389B8")]
			public float maxAngle;

			[Token(Token = "0x4000F56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38A10", Offset = "0xB38A10")]
			public float radius;

			[Token(Token = "0x4000F57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38A48", Offset = "0xB38A48")]
			public bool orbit;

			[Token(Token = "0x4000F58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38A80", Offset = "0xB38A80")]
			public bool fixYAxis;

			[Token(Token = "0x170002DB")]
			public Vector3 offset3D
			{
				[Token(Token = "0x6001290")]
				[Address(RVA = "0x16DF490", Offset = "0x16DF490", VA = "0x16DF490")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170002DC")]
			public Vector3 direction3D
			{
				[Token(Token = "0x6001291")]
				[Address(RVA = "0x16DF4CC", Offset = "0x16DF4CC", VA = "0x16DF4CC")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6001292")]
			[Address(RVA = "0x16DF5C4", Offset = "0x16DF5C4", VA = "0x16DF5C4")]
			public bool IsInRange(Transform character, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6001293")]
			[Address(RVA = "0x16DFC40", Offset = "0x16DFC40", VA = "0x16DFC40")]
			public CharacterPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002D5")]
		public class CameraPosition
		{
			[Token(Token = "0x4000F59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38AB8", Offset = "0xB38AB8")]
			public Collider lookAtTarget;

			[Token(Token = "0x4000F5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38AF0", Offset = "0xB38AF0")]
			public Vector3 direction;

			[Token(Token = "0x4000F5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38B28", Offset = "0xB38B28")]
			public float maxDistance;

			[Token(Token = "0x4000F5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38B60", Offset = "0xB38B60")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB38B60", Offset = "0xB38B60")]
			public float maxAngle;

			[Token(Token = "0x4000F5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38BB8", Offset = "0xB38BB8")]
			public bool fixYAxis;

			[Token(Token = "0x6001294")]
			[Address(RVA = "0x16DEF7C", Offset = "0x16DEF7C", VA = "0x16DEF7C")]
			public Quaternion GetRotation()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6001295")]
			[Address(RVA = "0x16DF124", Offset = "0x16DF124", VA = "0x16DF124")]
			public bool IsInRange(Transform raycastFrom, RaycastHit hit, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6001296")]
			[Address(RVA = "0x16DF404", Offset = "0x16DF404", VA = "0x16DF404")]
			public CameraPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002D6")]
		public class Range
		{
			[Serializable]
			[Token(Token = "0x200031A")]
			public class Interaction
			{
				[Token(Token = "0x4001076")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB397B0", Offset = "0xB397B0")]
				public InteractionObject interactionObject;

				[Token(Token = "0x4001077")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB397E8", Offset = "0xB397E8")]
				public FullBodyBipedEffector[] effectors;

				[Token(Token = "0x60013C2")]
				[Address(RVA = "0x16DFC64", Offset = "0x16DFC64", VA = "0x16DFC64")]
				public Interaction()
				{
				}
			}

			[Token(Token = "0x4000F5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			[SerializeField]
			public string name;

			[Token(Token = "0x4000F5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			[SerializeField]
			public bool show;

			[Token(Token = "0x4000F60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38C60", Offset = "0xB38C60")]
			public CharacterPosition characterPosition;

			[Token(Token = "0x4000F61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38C98", Offset = "0xB38C98")]
			public CameraPosition cameraPosition;

			[Token(Token = "0x4000F62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38CD0", Offset = "0xB38CD0")]
			public Interaction[] interactions;

			[Token(Token = "0x6001297")]
			[Address(RVA = "0x16DEDF8", Offset = "0x16DEDF8", VA = "0x16DEDF8")]
			public bool IsInRange(Transform character, Transform raycastFrom, RaycastHit raycastHit, Transform trigger, out float maxError)
			{
				return default(bool);
			}

			[Token(Token = "0x6001298")]
			[Address(RVA = "0x16DFC54", Offset = "0x16DFC54", VA = "0x16DFC54")]
			public Range()
			{
			}
		}

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35BFC", Offset = "0xB35BFC")]
		public Range[] ranges;

		[Token(Token = "0x6000907")]
		[Address(RVA = "0x16DED10", Offset = "0x16DED10", VA = "0x16DED10")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BF24", Offset = "0xB3BF24")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0x16DED5C", Offset = "0x16DED5C", VA = "0x16DED5C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BF5C", Offset = "0xB3BF5C")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0x16DEDA8", Offset = "0x16DEDA8", VA = "0x16DEDA8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BF94", Offset = "0xB3BF94")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0x16DEDF4", Offset = "0x16DEDF4", VA = "0x16DEDF4")]
		private void Start()
		{
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0x16DD7D0", Offset = "0x16DD7D0", VA = "0x16DD7D0")]
		public int GetBestRangeIndex(Transform character, Transform raycastFrom, RaycastHit raycastHit)
		{
			return default(int);
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0x16DEF1C", Offset = "0x16DEF1C", VA = "0x16DEF1C")]
		public InteractionTrigger()
		{
		}
	}
	[Token(Token = "0x200012C")]
	public class GenericPoser : Poser
	{
		[Serializable]
		[Token(Token = "0x20002D7")]
		public class Map
		{
			[Token(Token = "0x4000F63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform bone;

			[Token(Token = "0x4000F64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform target;

			[Token(Token = "0x4000F65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector3 defaultLocalPosition;

			[Token(Token = "0x4000F66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6001299")]
			[Address(RVA = "0x17FD22C", Offset = "0x17FD22C", VA = "0x17FD22C")]
			public Map(Transform bone, Transform target)
			{
			}

			[Token(Token = "0x600129A")]
			[Address(RVA = "0x17FD630", Offset = "0x17FD630", VA = "0x17FD630")]
			public void StoreDefaultState()
			{
			}

			[Token(Token = "0x600129B")]
			[Address(RVA = "0x17FD5E4", Offset = "0x17FD5E4", VA = "0x17FD5E4")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x600129C")]
			[Address(RVA = "0x17FD3DC", Offset = "0x17FD3DC", VA = "0x17FD3DC")]
			public void Update(float localRotationWeight, float localPositionWeight)
			{
			}
		}

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Map[] maps;

		[Token(Token = "0x600090D")]
		[Address(RVA = "0x17FCF44", Offset = "0x17FCF44", VA = "0x17FCF44", Slot = "7")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3BFCC", Offset = "0xB3BFCC")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0x17FD2D0", Offset = "0x17FD2D0", VA = "0x17FD2D0", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0x17FD2D4", Offset = "0x17FD2D4", VA = "0x17FD2D4", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0x17FD57C", Offset = "0x17FD57C", VA = "0x17FD57C", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0x17FD268", Offset = "0x17FD268", VA = "0x17FD268")]
		private void StoreDefaultState()
		{
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0x17FD18C", Offset = "0x17FD18C", VA = "0x17FD18C")]
		private Transform GetTargetNamed(string tName, Transform[] array)
		{
			return null;
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0x17FD680", Offset = "0x17FD680", VA = "0x17FD680")]
		public GenericPoser()
		{
		}
	}
	[Token(Token = "0x200012D")]
	public class HandPoser : Poser
	{
		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform _poseRoot;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] children;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] poseChildren;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x6000914")]
		[Address(RVA = "0x1805C8C", Offset = "0x1805C8C", VA = "0x1805C8C", Slot = "7")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0x1805D44", Offset = "0x1805D44", VA = "0x1805D44", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0x1805EFC", Offset = "0x1805EFC", VA = "0x1805EFC", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0x1805FF8", Offset = "0x1805FF8", VA = "0x1805FF8", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0x1805DA0", Offset = "0x1805DA0", VA = "0x1805DA0")]
		private void StoreDefaultState()
		{
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0x18063A8", Offset = "0x18063A8", VA = "0x18063A8")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x200012E")]
	public abstract class Poser : SolverManager
	{
		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform poseRoot;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35C34", Offset = "0xB35C34")]
		public float weight;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35C4C", Offset = "0xB35C4C")]
		public float localRotationWeight;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35C64", Offset = "0xB35C64")]
		public float localPositionWeight;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool initiated;

		[Token(Token = "0x600091A")]
		public abstract void AutoMapping();

		[Token(Token = "0x600091B")]
		protected abstract void InitiatePoser();

		[Token(Token = "0x600091C")]
		protected abstract void UpdatePoser();

		[Token(Token = "0x600091D")]
		protected abstract void FixPoserTransforms();

		[Token(Token = "0x600091E")]
		[Address(RVA = "0x16E1168", Offset = "0x16E1168", VA = "0x16E1168", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0x16E11BC", Offset = "0x16E11BC", VA = "0x16E11BC", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0x16E11F8", Offset = "0x16E11F8", VA = "0x16E11F8", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0x16E1210", Offset = "0x16E1210", VA = "0x16E1210")]
		protected Poser()
		{
		}
	}
	[Token(Token = "0x200012F")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xB3019C", Offset = "0xB3019C")]
	public class RagdollUtility : MonoBehaviour
	{
		[Token(Token = "0x20002D8")]
		public class Rigidbone
		{
			[Token(Token = "0x4000F67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody r;

			[Token(Token = "0x4000F68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform t;

			[Token(Token = "0x4000F69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Collider collider;

			[Token(Token = "0x4000F6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Joint joint;

			[Token(Token = "0x4000F6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Rigidbody c;

			[Token(Token = "0x4000F6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool updateAnchor;

			[Token(Token = "0x4000F6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 deltaPosition;

			[Token(Token = "0x4000F6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Quaternion deltaRotation;

			[Token(Token = "0x4000F6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float deltaTime;

			[Token(Token = "0x4000F70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 lastPosition;

			[Token(Token = "0x4000F71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Quaternion lastRotation;

			[Token(Token = "0x600129D")]
			[Address(RVA = "0x16E17AC", Offset = "0x16E17AC", VA = "0x16E17AC")]
			public Rigidbone(Rigidbody r)
			{
			}

			[Token(Token = "0x600129E")]
			[Address(RVA = "0x16E23B8", Offset = "0x16E23B8", VA = "0x16E23B8")]
			public void RecordVelocity()
			{
			}

			[Token(Token = "0x600129F")]
			[Address(RVA = "0x16E219C", Offset = "0x16E219C", VA = "0x16E219C")]
			public void WakeUp(float velocityWeight, float angularVelocityWeight)
			{
			}
		}

		[Token(Token = "0x20002D9")]
		public class Child
		{
			[Token(Token = "0x4000F72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x4000F73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 localPosition;

			[Token(Token = "0x4000F74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion localRotation;

			[Token(Token = "0x60012A0")]
			[Address(RVA = "0x16E1908", Offset = "0x16E1908", VA = "0x16E1908")]
			public Child(Transform transform)
			{
			}

			[Token(Token = "0x60012A1")]
			[Address(RVA = "0x16E2550", Offset = "0x16E2550", VA = "0x16E2550")]
			public void FixTransform(float weight)
			{
			}

			[Token(Token = "0x60012A2")]
			[Address(RVA = "0x16E2500", Offset = "0x16E2500", VA = "0x16E2500")]
			public void StoreLocalState()
			{
			}
		}

		[Token(Token = "0x20002DA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30E10", Offset = "0xB30E10")]
		private sealed class <DisableRagdollSmooth>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RagdollUtility <>4__this;

			[Token(Token = "0x170002DD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012A6")]
				[Address(RVA = "0x16E2B30", Offset = "0x16E2B30", VA = "0x16E2B30", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002DE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012A8")]
				[Address(RVA = "0x16E2B98", Offset = "0x16E2B98", VA = "0x16E2B98", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012A3")]
			[Address(RVA = "0x16E1968", Offset = "0x16E1968", VA = "0x16E1968")]
			[DebuggerHidden]
			public <DisableRagdollSmooth>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x60012A4")]
			[Address(RVA = "0x16E28E8", Offset = "0x16E28E8", VA = "0x16E28E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012A5")]
			[Address(RVA = "0x16E28EC", Offset = "0x16E28EC", VA = "0x16E28EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012A7")]
			[Address(RVA = "0x16E2B38", Offset = "0x16E2B38", VA = "0x16E2B38", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35C7C", Offset = "0xB35C7C")]
		public IK ik;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35CB4", Offset = "0xB35CB4")]
		public float ragdollToAnimationTime;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35CEC", Offset = "0xB35CEC")]
		public bool applyIkOnRagdoll;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35D24", Offset = "0xB35D24")]
		public float applyVelocity;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35D5C", Offset = "0xB35D5C")]
		public float applyAngularVelocity;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator animator;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbone[] rigidbones;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Child[] children;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool enableRagdollFlag;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorUpdateMode animatorUpdateMode;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IK[] allIKComponents;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool[] fixTransforms;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float ragdollWeight;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float ragdollWeightV;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool fixedFrame;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] disabledIKComponents;

		[Token(Token = "0x1700009A")]
		private bool isRagdoll
		{
			[Token(Token = "0x600092D")]
			[Address(RVA = "0x16E1270", Offset = "0x16E1270", VA = "0x16E1270")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009B")]
		private bool ikUsed
		{
			[Token(Token = "0x600092F")]
			[Address(RVA = "0x16E1D54", Offset = "0x16E1D54", VA = "0x16E1D54")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0x16E1238", Offset = "0x16E1238", VA = "0x16E1238")]
		public void EnableRagdoll()
		{
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0x16E12E8", Offset = "0x16E12E8", VA = "0x16E12E8")]
		public void DisableRagdoll()
		{
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0x16E1418", Offset = "0x16E1418", VA = "0x16E1418")]
		public void Start()
		{
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0x16E13A8", Offset = "0x16E13A8", VA = "0x16E13A8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3C004", Offset = "0xB3C004")]
		private IEnumerator DisableRagdollSmooth()
		{
			return null;
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0x16E1994", Offset = "0x16E1994", VA = "0x16E1994")]
		private void Update()
		{
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0x16E1BE0", Offset = "0x16E1BE0", VA = "0x16E1BE0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x16E1C98", Offset = "0x16E1C98", VA = "0x16E1C98")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0x16E1ED8", Offset = "0x16E1ED8", VA = "0x16E1ED8")]
		private void AfterLastIK()
		{
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x16E1D18", Offset = "0x16E1D18", VA = "0x16E1D18")]
		private void AfterAnimation()
		{
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0x16E1E94", Offset = "0x16E1E94", VA = "0x16E1E94")]
		private void OnFinalPose()
		{
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x16E1F74", Offset = "0x16E1F74", VA = "0x16E1F74")]
		private void RagdollEnabler()
		{
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0x16E1F0C", Offset = "0x16E1F0C", VA = "0x16E1F0C")]
		private void RecordVelocities()
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0x16E1340", Offset = "0x16E1340", VA = "0x16E1340")]
		private void StoreLocalState()
		{
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0x16E1C20", Offset = "0x16E1C20", VA = "0x16E1C20")]
		private void FixTransforms(float weight)
		{
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0x16E2718", Offset = "0x16E2718", VA = "0x16E2718")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0x16E281C", Offset = "0x16E281C", VA = "0x16E281C")]
		public RagdollUtility()
		{
		}
	}
	[Token(Token = "0x2000130")]
	public abstract class RotationLimit : MonoBehaviour
	{
		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public Quaternion defaultLocalRotation;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool initiated;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool applicationQuit;

		[Token(Token = "0x1700009C")]
		public Vector3 secondaryAxis
		{
			[Token(Token = "0x6000938")]
			[Address(RVA = "0x16E40C0", Offset = "0x16E40C0", VA = "0x16E40C0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700009D")]
		public Vector3 crossAxis
		{
			[Token(Token = "0x6000939")]
			[Address(RVA = "0x16E40FC", Offset = "0x16E40FC", VA = "0x16E40FC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0x16E3D58", Offset = "0x16E3D58", VA = "0x16E3D58")]
		public void SetDefaultLocalRotation()
		{
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0x16E3D94", Offset = "0x16E3D94", VA = "0x16E3D94")]
		public Quaternion GetLimitedLocalRotation(Quaternion localRotation, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0x16E4018", Offset = "0x16E4018", VA = "0x16E4018")]
		public bool Apply()
		{
			return default(bool);
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0x16E4088", Offset = "0x16E4088", VA = "0x16E4088")]
		public void Disable()
		{
		}

		[Token(Token = "0x600093A")]
		protected abstract Quaternion LimitRotation(Quaternion rotation);

		[Token(Token = "0x600093B")]
		[Address(RVA = "0x16E3F30", Offset = "0x16E3F30", VA = "0x16E3F30")]
		private void Awake()
		{
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x16E41CC", Offset = "0x16E41CC", VA = "0x16E41CC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x16E41D0", Offset = "0x16E41D0", VA = "0x16E41D0")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x16E4200", Offset = "0x16E4200", VA = "0x16E4200")]
		protected static Quaternion Limit1DOF(Quaternion rotation, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0x16E42E4", Offset = "0x16E42E4", VA = "0x16E42E4")]
		protected static Quaternion LimitTwist(Quaternion rotation, Vector3 axis, Vector3 orthoAxis, float twistLimit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0x16E4560", Offset = "0x16E4560", VA = "0x16E4560")]
		protected static float GetOrthogonalAngle(Vector3 v1, Vector3 v2, Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0x16E461C", Offset = "0x16E461C", VA = "0x16E461C")]
		protected RotationLimit()
		{
		}
	}
	[Token(Token = "0x2000131")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB30200", Offset = "0xB30200")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB30200", Offset = "0xB30200")]
	public class RotationLimitAngle : RotationLimit
	{
		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35DA4", Offset = "0xB35DA4")]
		public float limit;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35DC0", Offset = "0xB35DC0")]
		public float twistLimit;

		[Token(Token = "0x6000942")]
		[Address(RVA = "0x16E4694", Offset = "0x16E4694", VA = "0x16E4694")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3C068", Offset = "0xB3C068")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0x16E46E0", Offset = "0x16E46E0", VA = "0x16E46E0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3C0A0", Offset = "0xB3C0A0")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0x16E472C", Offset = "0x16E472C", VA = "0x16E472C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3C0D8", Offset = "0xB3C0D8")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x16E4778", Offset = "0x16E4778", VA = "0x16E4778")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3C110", Offset = "0xB3C110")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0x16E47C4", Offset = "0x16E47C4", VA = "0x16E47C4", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0x16E487C", Offset = "0x16E487C", VA = "0x16E487C")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0x16E4AC4", Offset = "0x16E4AC4", VA = "0x16E4AC4")]
		public RotationLimitAngle()
		{
		}
	}
	[Token(Token = "0x2000132")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB30260", Offset = "0xB30260")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB30260", Offset = "0xB30260")]
	public class RotationLimitHinge : RotationLimit
	{
		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		public bool useLimits;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float min;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float max;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public float zeroAxisDisplayOffset;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion lastRotation;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float lastAngle;

		[Token(Token = "0x6000949")]
		[Address(RVA = "0x16E4AD4", Offset = "0x16E4AD4", VA = "0x16E4AD4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3C148", Offset = "0xB3C148")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0x16E4B20", Offset = "0x16E4B20", VA = "0x16E4B20")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3C180", Offset = "0xB3C180")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0x16E4B6C", Offset = "0x16E4B6C", VA = "0x16E4B6C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3C1B8", Offset = "0xB3C1B8")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0x16E4BB8", Offset = "0x16E4BB8", VA = "0x16E4BB8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3C1F0", Offset = "0xB3C1F0")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0x16E4C04", Offset = "0x16E4C04", VA = "0x16E4C04", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0x16E4C2C", Offset = "0x16E4C2C", VA = "0x16E4C2C")]
		private Quaternion LimitHinge(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0x16E4F2C", Offset = "0x16E4F2C", VA = "0x16E4F2C")]
		public RotationLimitHinge()
		{
		}
	}
	[Token(Token = "0x2000133")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB302C0", Offset = "0xB302C0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB302C0", Offset = "0xB302C0")]
	public class RotationLimitPolygonal : RotationLimit
	{
		[Serializable]
		[Token(Token = "0x20002DB")]
		public class ReachCone
		{
			[Token(Token = "0x4000F78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] tetrahedron;

			[Token(Token = "0x4000F79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float volume;

			[Token(Token = "0x4000F7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 S;

			[Token(Token = "0x4000F7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 B;

			[Token(Token = "0x170002DF")]
			public Vector3 o
			{
				[Token(Token = "0x60012A9")]
				[Address(RVA = "0x16E6EC8", Offset = "0x16E6EC8", VA = "0x16E6EC8")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170002E0")]
			public Vector3 a
			{
				[Token(Token = "0x60012AA")]
				[Address(RVA = "0x16E6F00", Offset = "0x16E6F00", VA = "0x16E6F00")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170002E1")]
			public Vector3 b
			{
				[Token(Token = "0x60012AB")]
				[Address(RVA = "0x16E6F3C", Offset = "0x16E6F3C", VA = "0x16E6F3C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170002E2")]
			public Vector3 c
			{
				[Token(Token = "0x60012AC")]
				[Address(RVA = "0x16E6F78", Offset = "0x16E6F78", VA = "0x16E6F78")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170002E3")]
			public bool isValid
			{
				[Token(Token = "0x60012AE")]
				[Address(RVA = "0x16E602C", Offset = "0x16E602C", VA = "0x16E602C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60012AD")]
			[Address(RVA = "0x16E6678", Offset = "0x16E6678", VA = "0x16E6678")]
			public ReachCone(Vector3 _o, Vector3 _a, Vector3 _b, Vector3 _c)
			{
			}

			[Token(Token = "0x60012AF")]
			[Address(RVA = "0x16E67D8", Offset = "0x16E67D8", VA = "0x16E67D8")]
			public void Calculate()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002DC")]
		public class LimitPoint
		{
			[Token(Token = "0x4000F7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 point;

			[Token(Token = "0x4000F7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float tangentWeight;

			[Token(Token = "0x60012B0")]
			[Address(RVA = "0x16E603C", Offset = "0x16E603C", VA = "0x16E603C")]
			public LimitPoint()
			{
			}
		}

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35DEC", Offset = "0xB35DEC")]
		public float twistLimit;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35E08", Offset = "0xB35E08")]
		public int smoothIterations;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public LimitPoint[] points;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		public Vector3[] P;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		public ReachCone[] reachCones;

		[Token(Token = "0x6000950")]
		[Address(RVA = "0x16E4FB4", Offset = "0x16E4FB4", VA = "0x16E4FB4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3C228", Offset = "0xB3C228")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0x16E5000", Offset = "0x16E5000", VA = "0x16E5000")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3C260", Offset = "0xB3C260")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0x16E504C", Offset = "0x16E504C", VA = "0x16E504C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3C298", Offset = "0xB3C298")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0x16E5098", Offset = "0x16E5098", VA = "0x16E5098")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3C2D0", Offset = "0xB3C2D0")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0x16E50E4", Offset = "0x16E50E4", VA = "0x16E50E4")]
		public void SetLimitPoints(LimitPoint[] points)
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0x16E55C8", Offset = "0x16E55C8", VA = "0x16E55C8", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0x16E56C0", Offset = "0x16E56C0", VA = "0x16E56C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0x16E5C78", Offset = "0x16E5C78", VA = "0x16E5C78")]
		public void ResetToDefault()
		{
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0x16E5180", Offset = "0x16E5180", VA = "0x16E5180")]
		public void BuildReachCones()
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0x16E60C0", Offset = "0x16E60C0", VA = "0x16E60C0")]
		private Vector3[] SmoothPoints()
		{
			return null;
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0x16E6998", Offset = "0x16E6998", VA = "0x16E6998")]
		private float GetScalar(int k)
		{
			return default(float);
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0x16E69DC", Offset = "0x16E69DC", VA = "0x16E69DC")]
		private Vector3 PointToTangentPlane(Vector3 p, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0x16E6B24", Offset = "0x16E6B24", VA = "0x16E6B24")]
		private Vector3 TangentPointToSphere(Vector3 q, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0x16E5940", Offset = "0x16E5940", VA = "0x16E5940")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0x16E6CB4", Offset = "0x16E6CB4", VA = "0x16E6CB4")]
		private int GetReachCone(Vector3 L)
		{
			return default(int);
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0x16E6E64", Offset = "0x16E6E64", VA = "0x16E6E64")]
		public RotationLimitPolygonal()
		{
		}
	}
	[Token(Token = "0x2000134")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xB30320", Offset = "0xB30320")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xB30320", Offset = "0xB30320")]
	public class RotationLimitSpline : RotationLimit
	{
		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB35EC8", Offset = "0xB35EC8")]
		public float twistLimit;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public AnimationCurve spline;

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x16E6FB4", Offset = "0x16E6FB4", VA = "0x16E6FB4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3C308", Offset = "0xB3C308")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x16E7000", Offset = "0x16E7000", VA = "0x16E7000")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3C340", Offset = "0xB3C340")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0x16E704C", Offset = "0x16E704C", VA = "0x16E704C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3C378", Offset = "0xB3C378")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x16E7098", Offset = "0x16E7098", VA = "0x16E7098")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xB3C3B0", Offset = "0xB3C3B0")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0x16E70E4", Offset = "0x16E70E4", VA = "0x16E70E4")]
		public void SetSpline(Keyframe[] keyframes)
		{
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0x16E7100", Offset = "0x16E7100", VA = "0x16E7100", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0x16E71B8", Offset = "0x16E71B8", VA = "0x16E71B8")]
		public Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x16E74E4", Offset = "0x16E74E4", VA = "0x16E74E4")]
		public RotationLimitSpline()
		{
		}
	}
	[Token(Token = "0x2000135")]
	public class AimPoser : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002DD")]
		public class Pose
		{
			[Token(Token = "0x4000F7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool visualize;

			[Token(Token = "0x4000F7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x4000F80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 direction;

			[Token(Token = "0x4000F81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float yaw;

			[Token(Token = "0x4000F82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float pitch;

			[Token(Token = "0x4000F83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float angleBuffer;

			[Token(Token = "0x60012B1")]
			[Address(RVA = "0x11ACE94", Offset = "0x11ACE94", VA = "0x11ACE94")]
			public bool IsInDirection(Vector3 d)
			{
				return default(bool);
			}

			[Token(Token = "0x60012B2")]
			[Address(RVA = "0x11AD194", Offset = "0x11AD194", VA = "0x11AD194")]
			public void SetAngleBuffer(float value)
			{
			}

			[Token(Token = "0x60012B3")]
			[Address(RVA = "0x11AD19C", Offset = "0x11AD19C", VA = "0x11AD19C")]
			public Pose()
			{
			}
		}

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float angleBuffer;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pose[] poses;

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x11A5924", Offset = "0x11A5924", VA = "0x11A5924")]
		public Pose GetPose(Vector3 localDirection)
		{
			return null;
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0x11A5A00", Offset = "0x11A5A00", VA = "0x11A5A00")]
		public void SetPoseActive(Pose pose)
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x11AD12C", Offset = "0x11AD12C", VA = "0x11AD12C")]
		public AimPoser()
		{
		}
	}
	[Token(Token = "0x2000136")]
	public class Amplifier : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20002DE")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x200031B")]
			public class EffectorLink
			{
				[Token(Token = "0x4001078")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39820", Offset = "0xB39820")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4001079")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39858", Offset = "0xB39858")]
				public float weight;

				[Token(Token = "0x60013C3")]
				[Address(RVA = "0x11AD78C", Offset = "0x11AD78C", VA = "0x11AD78C")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000F84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38D08", Offset = "0xB38D08")]
			public Transform transform;

			[Token(Token = "0x4000F85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38D40", Offset = "0xB38D40")]
			public Transform relativeTo;

			[Token(Token = "0x4000F86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38D78", Offset = "0xB38D78")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000F87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38DB0", Offset = "0xB38DB0")]
			public float verticalWeight;

			[Token(Token = "0x4000F88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38DE8", Offset = "0xB38DE8")]
			public float horizontalWeight;

			[Token(Token = "0x4000F89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38E20", Offset = "0xB38E20")]
			public float speed;

			[Token(Token = "0x4000F8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 lastRelativePos;

			[Token(Token = "0x4000F8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 smoothDelta;

			[Token(Token = "0x4000F8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private bool firstUpdate;

			[Token(Token = "0x60012B4")]
			[Address(RVA = "0x11AD2F8", Offset = "0x11AD2F8", VA = "0x11AD2F8")]
			public void Update(IKSolverFullBodyBiped solver, float w, float deltaTime)
			{
			}

			[Token(Token = "0x60012B5")]
			[Address(RVA = "0x11AD764", Offset = "0x11AD764", VA = "0x11AD764")]
			private static Vector3 Multiply(Vector3 v1, Vector3 v2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60012B6")]
			[Address(RVA = "0x11AD774", Offset = "0x11AD774", VA = "0x11AD774")]
			public Body()
			{
			}
		}

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35F1C", Offset = "0xB35F1C")]
		public Body[] bodies;

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x11AD1B8", Offset = "0x11AD1B8", VA = "0x11AD1B8", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0x11AD75C", Offset = "0x11AD75C", VA = "0x11AD75C")]
		public Amplifier()
		{
		}
	}
	[Token(Token = "0x2000137")]
	public class BodyTilt : OffsetModifier
	{
		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35F54", Offset = "0xB35F54")]
		public float tiltSpeed;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35F8C", Offset = "0xB35F8C")]
		public float tiltSensitivity;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35FC4", Offset = "0xB35FC4")]
		public OffsetPose poseLeft;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB35FFC", Offset = "0xB35FFC")]
		public OffsetPose poseRight;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float tiltAngle;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 lastForward;

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x11AEA68", Offset = "0x11AEA68", VA = "0x11AEA68", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0x11AEAB0", Offset = "0x11AEAB0", VA = "0x11AEAB0", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x11AECE0", Offset = "0x11AECE0", VA = "0x11AECE0")]
		public BodyTilt()
		{
		}
	}
	[Token(Token = "0x2000138")]
	public class HitReaction : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20002DF")]
		public abstract class HitPoint
		{
			[Token(Token = "0x4000F8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38E58", Offset = "0xB38E58")]
			public string name;

			[Token(Token = "0x4000F8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38E90", Offset = "0xB38E90")]
			public Collider collider;

			[Token(Token = "0x4000F8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38EC8", Offset = "0xB38EC8")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x4000F90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB38F14", Offset = "0xB38F14")]
			private float <crossFader>k__BackingField;

			[Token(Token = "0x4000F91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB38F24", Offset = "0xB38F24")]
			private float <timer>k__BackingField;

			[Token(Token = "0x4000F92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB38F34", Offset = "0xB38F34")]
			private Vector3 <force>k__BackingField;

			[Token(Token = "0x4000F93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB38F44", Offset = "0xB38F44")]
			private Vector3 <point>k__BackingField;

			[Token(Token = "0x4000F94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x4000F95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x4000F96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x170002E4")]
			protected float crossFader
			{
				[Token(Token = "0x60012B7")]
				[Address(RVA = "0x1806944", Offset = "0x1806944", VA = "0x1806944")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F238", Offset = "0xB3F238")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60012B8")]
				[Address(RVA = "0x180694C", Offset = "0x180694C", VA = "0x180694C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F248", Offset = "0xB3F248")]
				private set
				{
				}
			}

			[Token(Token = "0x170002E5")]
			protected float timer
			{
				[Token(Token = "0x60012B9")]
				[Address(RVA = "0x1806954", Offset = "0x1806954", VA = "0x1806954")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F258", Offset = "0xB3F258")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60012BA")]
				[Address(RVA = "0x180695C", Offset = "0x180695C", VA = "0x180695C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F268", Offset = "0xB3F268")]
				private set
				{
				}
			}

			[Token(Token = "0x170002E6")]
			protected Vector3 force
			{
				[Token(Token = "0x60012BB")]
				[Address(RVA = "0x1806964", Offset = "0x1806964", VA = "0x1806964")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F278", Offset = "0xB3F278")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60012BC")]
				[Address(RVA = "0x1806970", Offset = "0x1806970", VA = "0x1806970")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F288", Offset = "0xB3F288")]
				private set
				{
				}
			}

			[Token(Token = "0x170002E7")]
			protected Vector3 point
			{
				[Token(Token = "0x60012BD")]
				[Address(RVA = "0x180697C", Offset = "0x180697C", VA = "0x180697C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F298", Offset = "0xB3F298")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60012BE")]
				[Address(RVA = "0x1806988", Offset = "0x1806988", VA = "0x1806988")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F2A8", Offset = "0xB3F2A8")]
				private set
				{
				}
			}

			[Token(Token = "0x60012BF")]
			[Address(RVA = "0x1806810", Offset = "0x1806810", VA = "0x1806810")]
			public void Hit(Vector3 force, Vector3 point)
			{
			}

			[Token(Token = "0x60012C0")]
			[Address(RVA = "0x1806484", Offset = "0x1806484", VA = "0x1806484")]
			public void Apply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x60012C1")]
			protected abstract float GetLength();

			[Token(Token = "0x60012C2")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x60012C3")]
			protected abstract void OnApply(IKSolverFullBodyBiped solver, float weight);

			[Token(Token = "0x60012C4")]
			[Address(RVA = "0x1806994", Offset = "0x1806994", VA = "0x1806994")]
			protected HitPoint()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002E0")]
		public class HitPointEffector : HitPoint
		{
			[Serializable]
			[Token(Token = "0x200031C")]
			public class EffectorLink
			{
				[Token(Token = "0x400107A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39890", Offset = "0xB39890")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x400107B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB398C8", Offset = "0xB398C8")]
				public float weight;

				[Token(Token = "0x400107C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x400107D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x60013C4")]
				[Address(RVA = "0x1807300", Offset = "0x1807300", VA = "0x1807300")]
				public void Apply(IKSolverFullBodyBiped solver, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x60013C5")]
				[Address(RVA = "0x18070F4", Offset = "0x18070F4", VA = "0x18070F4")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x60013C6")]
				[Address(RVA = "0x180743C", Offset = "0x180743C", VA = "0x180743C")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000F97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38F54", Offset = "0xB38F54")]
			public AnimationCurve offsetInForceDirection;

			[Token(Token = "0x4000F98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38F8C", Offset = "0xB38F8C")]
			public AnimationCurve offsetInUpDirection;

			[Token(Token = "0x4000F99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38FC4", Offset = "0xB38FC4")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x60012C5")]
			[Address(RVA = "0x1806F10", Offset = "0x1806F10", VA = "0x1806F10", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x60012C6")]
			[Address(RVA = "0x1807088", Offset = "0x1807088", VA = "0x1807088", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x60012C7")]
			[Address(RVA = "0x1807108", Offset = "0x1807108", VA = "0x1807108", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x60012C8")]
			[Address(RVA = "0x1807428", Offset = "0x1807428", VA = "0x1807428")]
			public HitPointEffector()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002E1")]
		public class HitPointBone : HitPoint
		{
			[Serializable]
			[Token(Token = "0x200031D")]
			public class BoneLink
			{
				[Token(Token = "0x400107E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39900", Offset = "0xB39900")]
				public Transform bone;

				[Token(Token = "0x400107F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39938", Offset = "0xB39938")]
				[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB39938", Offset = "0xB39938")]
				public float weight;

				[Token(Token = "0x4001080")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				private Quaternion lastValue;

				[Token(Token = "0x4001081")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
				private Quaternion current;

				[Token(Token = "0x60013C7")]
				[Address(RVA = "0x1806D18", Offset = "0x1806D18", VA = "0x1806D18")]
				public void Apply(IKSolverFullBodyBiped solver, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x60013C8")]
				[Address(RVA = "0x1806AB0", Offset = "0x1806AB0", VA = "0x1806AB0")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x60013C9")]
				[Address(RVA = "0x1806E88", Offset = "0x1806E88", VA = "0x1806E88")]
				public BoneLink()
				{
				}
			}

			[Token(Token = "0x4000F9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB38FFC", Offset = "0xB38FFC")]
			public AnimationCurve aroundCenterOfMass;

			[Token(Token = "0x4000F9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39034", Offset = "0xB39034")]
			public BoneLink[] boneLinks;

			[Token(Token = "0x4000F9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x60012C9")]
			[Address(RVA = "0x18069A8", Offset = "0x18069A8", VA = "0x18069A8", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x60012CA")]
			[Address(RVA = "0x1806A4C", Offset = "0x1806A4C", VA = "0x1806A4C", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x60012CB")]
			[Address(RVA = "0x1806ABC", Offset = "0x1806ABC", VA = "0x1806ABC", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x60012CC")]
			[Address(RVA = "0x1806E74", Offset = "0x1806E74", VA = "0x1806E74")]
			public HitPointBone()
			{
			}
		}

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB36034", Offset = "0xB36034")]
		public HitPointEffector[] effectorHitPoints;

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3606C", Offset = "0xB3606C")]
		public HitPointBone[] boneHitPoints;

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x18063B0", Offset = "0x18063B0", VA = "0x18063B0", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0x18065D0", Offset = "0x18065D0", VA = "0x18065D0")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x180693C", Offset = "0x180693C", VA = "0x180693C")]
		public HitReaction()
		{
		}
	}
	[Token(Token = "0x2000139")]
	public class HitReactionVRIK : OffsetModifierVRIK
	{
		[Serializable]
		[Token(Token = "0x20002E2")]
		public abstract class Offset
		{
			[Token(Token = "0x4000F9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3906C", Offset = "0xB3906C")]
			public string name;

			[Token(Token = "0x4000F9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB390A4", Offset = "0xB390A4")]
			public Collider collider;

			[Token(Token = "0x4000F9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB390DC", Offset = "0xB390DC")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x4000FA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39128", Offset = "0xB39128")]
			private float <crossFader>k__BackingField;

			[Token(Token = "0x4000FA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39138", Offset = "0xB39138")]
			private float <timer>k__BackingField;

			[Token(Token = "0x4000FA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39148", Offset = "0xB39148")]
			private Vector3 <force>k__BackingField;

			[Token(Token = "0x4000FA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39158", Offset = "0xB39158")]
			private Vector3 <point>k__BackingField;

			[Token(Token = "0x4000FA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x4000FA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x4000FA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x170002E8")]
			protected float crossFader
			{
				[Token(Token = "0x60012CD")]
				[Address(RVA = "0x18079F4", Offset = "0x18079F4", VA = "0x18079F4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F2B8", Offset = "0xB3F2B8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60012CE")]
				[Address(RVA = "0x18079FC", Offset = "0x18079FC", VA = "0x18079FC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F2C8", Offset = "0xB3F2C8")]
				private set
				{
				}
			}

			[Token(Token = "0x170002E9")]
			protected float timer
			{
				[Token(Token = "0x60012CF")]
				[Address(RVA = "0x1807A04", Offset = "0x1807A04", VA = "0x1807A04")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F2D8", Offset = "0xB3F2D8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60012D0")]
				[Address(RVA = "0x1807A0C", Offset = "0x1807A0C", VA = "0x1807A0C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F2E8", Offset = "0xB3F2E8")]
				private set
				{
				}
			}

			[Token(Token = "0x170002EA")]
			protected Vector3 force
			{
				[Token(Token = "0x60012D1")]
				[Address(RVA = "0x1807A14", Offset = "0x1807A14", VA = "0x1807A14")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F2F8", Offset = "0xB3F2F8")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60012D2")]
				[Address(RVA = "0x1807A20", Offset = "0x1807A20", VA = "0x1807A20")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F308", Offset = "0xB3F308")]
				private set
				{
				}
			}

			[Token(Token = "0x170002EB")]
			protected Vector3 point
			{
				[Token(Token = "0x60012D3")]
				[Address(RVA = "0x1807A2C", Offset = "0x1807A2C", VA = "0x1807A2C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F318", Offset = "0xB3F318")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60012D4")]
				[Address(RVA = "0x1807A38", Offset = "0x1807A38", VA = "0x1807A38")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F328", Offset = "0xB3F328")]
				private set
				{
				}
			}

			[Token(Token = "0x60012D5")]
			[Address(RVA = "0x18078AC", Offset = "0x18078AC", VA = "0x18078AC")]
			public void Hit(Vector3 force, AnimationCurve[] curves, Vector3 point)
			{
			}

			[Token(Token = "0x60012D6")]
			[Address(RVA = "0x1807510", Offset = "0x1807510", VA = "0x1807510")]
			public void Apply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x60012D7")]
			protected abstract float GetLength(AnimationCurve[] curves);

			[Token(Token = "0x60012D8")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x60012D9")]
			protected abstract void OnApply(VRIK ik, AnimationCurve[] curves, float weight);

			[Token(Token = "0x60012DA")]
			[Address(RVA = "0x1807A44", Offset = "0x1807A44", VA = "0x1807A44")]
			protected Offset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002E3")]
		public class PositionOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x200031E")]
			public class PositionOffsetLink
			{
				[Token(Token = "0x4001082")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3998C", Offset = "0xB3998C")]
				public IKSolverVR.PositionOffset positionOffset;

				[Token(Token = "0x4001083")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB399C4", Offset = "0xB399C4")]
				public float weight;

				[Token(Token = "0x4001084")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x4001085")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x60013CA")]
				[Address(RVA = "0x1807F00", Offset = "0x1807F00", VA = "0x1807F00")]
				public void Apply(VRIK ik, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x60013CB")]
				[Address(RVA = "0x1807CBC", Offset = "0x1807CBC", VA = "0x1807CBC")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x60013CC")]
				[Address(RVA = "0x180801C", Offset = "0x180801C", VA = "0x180801C")]
				public PositionOffsetLink()
				{
				}
			}

			[Token(Token = "0x4000FA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39168", Offset = "0xB39168")]
			public int forceDirCurveIndex;

			[Token(Token = "0x4000FA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB391A0", Offset = "0xB391A0")]
			public int upDirCurveIndex;

			[Token(Token = "0x4000FA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB391D8", Offset = "0xB391D8")]
			public PositionOffsetLink[] offsetLinks;

			[Token(Token = "0x60012DB")]
			[Address(RVA = "0x1807A58", Offset = "0x1807A58", VA = "0x1807A58", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x60012DC")]
			[Address(RVA = "0x1807C50", Offset = "0x1807C50", VA = "0x1807C50", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x60012DD")]
			[Address(RVA = "0x1807CD0", Offset = "0x1807CD0", VA = "0x1807CD0", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x60012DE")]
			[Address(RVA = "0x1808000", Offset = "0x1808000", VA = "0x1808000")]
			public PositionOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002E4")]
		public class RotationOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x200031F")]
			public class RotationOffsetLink
			{
				[Token(Token = "0x4001086")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB399FC", Offset = "0xB399FC")]
				public IKSolverVR.RotationOffset rotationOffset;

				[Token(Token = "0x4001087")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39A34", Offset = "0xB39A34")]
				[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB39A34", Offset = "0xB39A34")]
				public float weight;

				[Token(Token = "0x4001088")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Quaternion lastValue;

				[Token(Token = "0x4001089")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private Quaternion current;

				[Token(Token = "0x60013CD")]
				[Address(RVA = "0x1808484", Offset = "0x1808484", VA = "0x1808484")]
				public void Apply(VRIK ik, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x60013CE")]
				[Address(RVA = "0x180816C", Offset = "0x180816C", VA = "0x180816C")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x60013CF")]
				[Address(RVA = "0x18085C0", Offset = "0x18085C0", VA = "0x18085C0")]
				public RotationOffsetLink()
				{
				}
			}

			[Token(Token = "0x4000FAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39210", Offset = "0xB39210")]
			public int curveIndex;

			[Token(Token = "0x4000FAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39248", Offset = "0xB39248")]
			public RotationOffsetLink[] offsetLinks;

			[Token(Token = "0x4000FAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x60012DF")]
			[Address(RVA = "0x1808024", Offset = "0x1808024", VA = "0x1808024", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x60012E0")]
			[Address(RVA = "0x1808108", Offset = "0x1808108", VA = "0x1808108", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x60012E1")]
			[Address(RVA = "0x1808178", Offset = "0x1808178", VA = "0x1808178", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x60012E2")]
			[Address(RVA = "0x18085AC", Offset = "0x18085AC", VA = "0x18085AC")]
			public RotationOffset()
			{
			}
		}

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve[] offsetCurves;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB360A4", Offset = "0xB360A4")]
		public PositionOffset[] positionOffsets;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB360DC", Offset = "0xB360DC")]
		public RotationOffset[] rotationOffsets;

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x1807444", Offset = "0x1807444", VA = "0x1807444", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0x1807664", Offset = "0x1807664", VA = "0x1807664")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0x18079EC", Offset = "0x18079EC", VA = "0x18079EC")]
		public HitReactionVRIK()
		{
		}
	}
	[Token(Token = "0x200013A")]
	public class Inertia : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20002E5")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x2000320")]
			public class EffectorLink
			{
				[Token(Token = "0x400108A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39A88", Offset = "0xB39A88")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x400108B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39AC0", Offset = "0xB39AC0")]
				public float weight;

				[Token(Token = "0x60013D0")]
				[Address(RVA = "0x16D62D4", Offset = "0x16D62D4", VA = "0x16D62D4")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000FAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39280", Offset = "0xB39280")]
			public Transform transform;

			[Token(Token = "0x4000FAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB392B8", Offset = "0xB392B8")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000FAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB392F0", Offset = "0xB392F0")]
			public float speed;

			[Token(Token = "0x4000FB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39328", Offset = "0xB39328")]
			public float acceleration;

			[Token(Token = "0x4000FB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39360", Offset = "0xB39360")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB39360", Offset = "0xB39360")]
			public float matchVelocity;

			[Token(Token = "0x4000FB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB393B4", Offset = "0xB393B4")]
			public float gravity;

			[Token(Token = "0x4000FB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 delta;

			[Token(Token = "0x4000FB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lazyPoint;

			[Token(Token = "0x4000FB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 direction;

			[Token(Token = "0x4000FB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 lastPosition;

			[Token(Token = "0x4000FB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private bool firstUpdate;

			[Token(Token = "0x60012E3")]
			[Address(RVA = "0x16D5CA4", Offset = "0x16D5CA4", VA = "0x16D5CA4")]
			public void Reset()
			{
			}

			[Token(Token = "0x60012E4")]
			[Address(RVA = "0x16D5E64", Offset = "0x16D5E64", VA = "0x16D5E64")]
			public void Update(IKSolverFullBodyBiped solver, float weight, float deltaTime)
			{
			}

			[Token(Token = "0x60012E5")]
			[Address(RVA = "0x16D62B8", Offset = "0x16D62B8", VA = "0x16D62B8")]
			public Body()
			{
			}
		}

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB36114", Offset = "0xB36114")]
		public Body[] bodies;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3614C", Offset = "0xB3614C")]
		public OffsetLimits[] limits;

		[Token(Token = "0x6000976")]
		[Address(RVA = "0x16D5C2C", Offset = "0x16D5C2C", VA = "0x16D5C2C")]
		public void ResetBodies()
		{
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0x16D5D80", Offset = "0x16D5D80", VA = "0x16D5D80", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0x16D6298", Offset = "0x16D6298", VA = "0x16D6298")]
		public Inertia()
		{
		}
	}
	[Token(Token = "0x200013B")]
	public abstract class OffsetModifier : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002E6")]
		public class OffsetLimits
		{
			[Token(Token = "0x4000FB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB393EC", Offset = "0xB393EC")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4000FB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39424", Offset = "0xB39424")]
			public float spring;

			[Token(Token = "0x4000FBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3945C", Offset = "0xB3945C")]
			public bool x;

			[Token(Token = "0x4000FBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39494", Offset = "0xB39494")]
			public bool y;

			[Token(Token = "0x4000FBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB394CC", Offset = "0xB394CC")]
			public bool z;

			[Token(Token = "0x4000FBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39504", Offset = "0xB39504")]
			public float minX;

			[Token(Token = "0x4000FBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3953C", Offset = "0xB3953C")]
			public float maxX;

			[Token(Token = "0x4000FBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39574", Offset = "0xB39574")]
			public float minY;

			[Token(Token = "0x4000FC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB395AC", Offset = "0xB395AC")]
			public float maxY;

			[Token(Token = "0x4000FC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB395E4", Offset = "0xB395E4")]
			public float minZ;

			[Token(Token = "0x4000FC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3961C", Offset = "0xB3961C")]
			public float maxZ;

			[Token(Token = "0x60012E6")]
			[Address(RVA = "0x16E0180", Offset = "0x16E0180", VA = "0x16E0180")]
			public void Apply(IKEffector e, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x60012E7")]
			[Address(RVA = "0x16E0688", Offset = "0x16E0688", VA = "0x16E0688")]
			private float SpringAxis(float value, float min, float max)
			{
				return default(float);
			}

			[Token(Token = "0x60012E8")]
			[Address(RVA = "0x16E06B8", Offset = "0x16E06B8", VA = "0x16E06B8")]
			private float Spring(float value, float limit, bool negative)
			{
				return default(float);
			}

			[Token(Token = "0x60012E9")]
			[Address(RVA = "0x16E0790", Offset = "0x16E0790", VA = "0x16E0790")]
			public OffsetLimits()
			{
			}
		}

		[Token(Token = "0x20002E7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30E20", Offset = "0xB30E20")]
		private sealed class <Initiate>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifier <>4__this;

			[Token(Token = "0x170002EC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012ED")]
				[Address(RVA = "0x16E0618", Offset = "0x16E0618", VA = "0x16E0618", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002ED")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012EF")]
				[Address(RVA = "0x16E0680", Offset = "0x16E0680", VA = "0x16E0680", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012EA")]
			[Address(RVA = "0x16E0048", Offset = "0x16E0048", VA = "0x16E0048")]
			[DebuggerHidden]
			public <Initiate>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60012EB")]
			[Address(RVA = "0x16E04D8", Offset = "0x16E04D8", VA = "0x16E04D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012EC")]
			[Address(RVA = "0x16E04DC", Offset = "0x16E04DC", VA = "0x16E04DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012EE")]
			[Address(RVA = "0x16E0620", Offset = "0x16E0620", VA = "0x16E0620", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB36184", Offset = "0xB36184")]
		public float weight;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB361BC", Offset = "0xB361BC")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float lastTime;

		[Token(Token = "0x1700009E")]
		protected float deltaTime
		{
			[Token(Token = "0x6000979")]
			[Address(RVA = "0x16D5E38", Offset = "0x16D5E38", VA = "0x16D5E38")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600097A")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x600097B")]
		[Address(RVA = "0x16DFFAC", Offset = "0x16DFFAC", VA = "0x16DFFAC", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0x16DFFD8", Offset = "0x16DFFD8", VA = "0x16DFFD8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3C3E8", Offset = "0xB3C3E8")]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0x16E0074", Offset = "0x16E0074", VA = "0x16E0074")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0x16D61DC", Offset = "0x16D61DC", VA = "0x16D61DC")]
		protected void ApplyLimits(OffsetLimits[] limits)
		{
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x16E03E0", Offset = "0x16E03E0", VA = "0x16E03E0", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x16D62A8", Offset = "0x16D62A8", VA = "0x16D62A8")]
		protected OffsetModifier()
		{
		}
	}
	[Token(Token = "0x200013C")]
	public abstract class OffsetModifierVRIK : MonoBehaviour
	{
		[Token(Token = "0x20002E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30E30", Offset = "0xB30E30")]
		private sealed class <Initiate>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifierVRIK <>4__this;

			[Token(Token = "0x170002EE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012F3")]
				[Address(RVA = "0x16E0BE0", Offset = "0x16E0BE0", VA = "0x16E0BE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002EF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012F5")]
				[Address(RVA = "0x16E0C48", Offset = "0x16E0C48", VA = "0x16E0C48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012F0")]
			[Address(RVA = "0x16E0860", Offset = "0x16E0860", VA = "0x16E0860")]
			[DebuggerHidden]
			public <Initiate>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60012F1")]
			[Address(RVA = "0x16E0AA0", Offset = "0x16E0AA0", VA = "0x16E0AA0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012F2")]
			[Address(RVA = "0x16E0AA4", Offset = "0x16E0AA4", VA = "0x16E0AA4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012F4")]
			[Address(RVA = "0x16E0BE8", Offset = "0x16E0BE8", VA = "0x16E0BE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB361F4", Offset = "0xB361F4")]
		public float weight;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3622C", Offset = "0xB3622C")]
		public VRIK ik;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastTime;

		[Token(Token = "0x1700009F")]
		protected float deltaTime
		{
			[Token(Token = "0x6000981")]
			[Address(RVA = "0x16E0798", Offset = "0x16E0798", VA = "0x16E0798")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000982")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x6000983")]
		[Address(RVA = "0x16E07C4", Offset = "0x16E07C4", VA = "0x16E07C4", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0x16E07F0", Offset = "0x16E07F0", VA = "0x16E07F0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3C44C", Offset = "0xB3C44C")]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0x16E088C", Offset = "0x16E088C", VA = "0x16E088C")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0x16E0998", Offset = "0x16E0998", VA = "0x16E0998", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x16E0A90", Offset = "0x16E0A90", VA = "0x16E0A90")]
		protected OffsetModifierVRIK()
		{
		}
	}
	[Token(Token = "0x200013D")]
	public class OffsetPose : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002E9")]
		public class EffectorLink
		{
			[Token(Token = "0x4000FC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4000FCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 offset;

			[Token(Token = "0x4000FCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 pin;

			[Token(Token = "0x4000FCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 pinWeight;

			[Token(Token = "0x60012F6")]
			[Address(RVA = "0x16E0D10", Offset = "0x16E0D10", VA = "0x16E0D10")]
			public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
			{
			}

			[Token(Token = "0x60012F7")]
			[Address(RVA = "0x16E1160", Offset = "0x16E1160", VA = "0x16E1160")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000988")]
		[Address(RVA = "0x16E0C50", Offset = "0x16E0C50", VA = "0x16E0C50")]
		public void Apply(IKSolverFullBodyBiped solver, float weight)
		{
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0x16E1048", Offset = "0x16E1048", VA = "0x16E1048")]
		public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
		{
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0x16E1100", Offset = "0x16E1100", VA = "0x16E1100")]
		public OffsetPose()
		{
		}
	}
	[Token(Token = "0x200013E")]
	public class Recoil : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20002EA")]
		public class RecoilOffset
		{
			[Serializable]
			[Token(Token = "0x2000321")]
			public class EffectorLink
			{
				[Token(Token = "0x400108C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39AF8", Offset = "0xB39AF8")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x400108D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39B30", Offset = "0xB39B30")]
				public float weight;

				[Token(Token = "0x60013D1")]
				[Address(RVA = "0x16E3D50", Offset = "0x16E3D50", VA = "0x16E3D50")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000FCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39654", Offset = "0xB39654")]
			public Vector3 offset;

			[Token(Token = "0x4000FCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3968C", Offset = "0xB3968C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xB3968C", Offset = "0xB3968C")]
			public float additivity;

			[Token(Token = "0x4000FCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB396E0", Offset = "0xB396E0")]
			public float maxAdditiveOffsetMag;

			[Token(Token = "0x4000FD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB39718", Offset = "0xB39718")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000FD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 additiveOffset;

			[Token(Token = "0x4000FD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lastOffset;

			[Token(Token = "0x60012F8")]
			[Address(RVA = "0x16E2D98", Offset = "0x16E2D98", VA = "0x16E2D98")]
			public void Start()
			{
			}

			[Token(Token = "0x60012F9")]
			[Address(RVA = "0x16E36F4", Offset = "0x16E36F4", VA = "0x16E36F4")]
			public void Apply(IKSolverFullBodyBiped solver, Quaternion rotation, float masterWeight, float length, float timeLeft)
			{
			}

			[Token(Token = "0x60012FA")]
			[Address(RVA = "0x16E3D3C", Offset = "0x16E3D3C", VA = "0x16E3D3C")]
			public RecoilOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002EB")]
		public enum Handedness
		{
			[Token(Token = "0x4000FD4")]
			Right,
			[Token(Token = "0x4000FD5")]
			Left
		}

		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB36264", Offset = "0xB36264")]
		public AimIK aimIK;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3629C", Offset = "0xB3629C")]
		public Handedness handedness;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB362D4", Offset = "0xB362D4")]
		public bool twoHanded;

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3630C", Offset = "0xB3630C")]
		public AnimationCurve recoilWeight;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB36344", Offset = "0xB36344")]
		public float magnitudeRandom;

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB3637C", Offset = "0xB3637C")]
		public Vector3 rotationRandom;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB363B4", Offset = "0xB363B4")]
		public Vector3 handRotationOffset;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB363EC", Offset = "0xB363EC")]
		public float blendTime;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0xB36424", Offset = "0xB36424")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB36424", Offset = "0xB36424")]
		public RecoilOffset[] offsets;

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public Quaternion rotationOffset;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float magnitudeMlp;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float endTime;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion handRotation;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion secondaryHandRelativeRotation;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion randomRotation;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float length;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool initiated;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float blendWeight;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float w;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion primaryHandRotation;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool handRotationsSet;

		[Token(Token = "0x170000A0")]
		private IKEffector primaryHandEffector
		{
			[Token(Token = "0x600098F")]
			[Address(RVA = "0x16E39A8", Offset = "0x16E39A8", VA = "0x16E39A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A1")]
		private IKEffector secondaryHandEffector
		{
			[Token(Token = "0x6000990")]
			[Address(RVA = "0x16E39E8", Offset = "0x16E39E8", VA = "0x16E39E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A2")]
		private Transform primaryHand
		{
			[Token(Token = "0x6000991")]
			[Address(RVA = "0x16E3968", Offset = "0x16E3968", VA = "0x16E3968")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A3")]
		private Transform secondaryHand
		{
			[Token(Token = "0x6000992")]
			[Address(RVA = "0x16E3988", Offset = "0x16E3988", VA = "0x16E3988")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0x16E2BA0", Offset = "0x16E2BA0", VA = "0x16E2BA0")]
		public void SetHandRotations(Quaternion leftHandRotation, Quaternion rightHandRotation)
		{
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0x16E2BCC", Offset = "0x16E2BCC", VA = "0x16E2BCC")]
		public void Fire(float magnitude)
		{
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x16E2E48", Offset = "0x16E2E48", VA = "0x16E2E48", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0x16E3A28", Offset = "0x16E3A28", VA = "0x16E3A28")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0x16E3B80", Offset = "0x16E3B80", VA = "0x16E3B80", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x16E3C88", Offset = "0x16E3C88", VA = "0x16E3C88")]
		public Recoil()
		{
		}
	}
	[Token(Token = "0x200013F")]
	public class ShoulderRotator : MonoBehaviour
	{
		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB36484", Offset = "0xB36484")]
		public float weight;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xB364BC", Offset = "0xB364BC")]
		public float offset;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool skip;

		[Token(Token = "0x6000995")]
		[Address(RVA = "0x16E74F0", Offset = "0x16E74F0", VA = "0x16E74F0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0x16E75C4", Offset = "0x16E75C4", VA = "0x16E75C4")]
		private void RotateShoulders()
		{
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0x16E76B0", Offset = "0x16E76B0", VA = "0x16E76B0")]
		private void RotateShoulder(FullBodyBipedChain chain, float weight, float offset)
		{
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0x16E7AF8", Offset = "0x16E7AF8", VA = "0x16E7AF8")]
		private IKMapping.BoneMap GetParentBoneMap(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0x16E7B30", Offset = "0x16E7B30", VA = "0x16E7B30")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0x16E7C28", Offset = "0x16E7C28", VA = "0x16E7C28")]
		public ShoulderRotator()
		{
		}
	}
}
namespace NAudio.Dsp
{
	[Token(Token = "0x2000140")]
	internal class WdlResampler
	{
		[Token(Token = "0x20002EC")]
		private class WDL_Resampler_IIRFilter
		{
			[Token(Token = "0x4000FD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private double m_fpos;

			[Token(Token = "0x4000FD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private double m_a1;

			[Token(Token = "0x4000FD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private double m_a2;

			[Token(Token = "0x4000FD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private double m_b0;

			[Token(Token = "0x4000FDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private double m_b1;

			[Token(Token = "0x4000FDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private double m_b2;

			[Token(Token = "0x4000FDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private double[,] m_hist;

			[Token(Token = "0x60012FB")]
			[Address(RVA = "0x14019C8", Offset = "0x14019C8", VA = "0x14019C8")]
			public WDL_Resampler_IIRFilter()
			{
			}

			[Token(Token = "0x60012FC")]
			[Address(RVA = "0x1400E0C", Offset = "0x1400E0C", VA = "0x1400E0C")]
			public void Reset()
			{
			}

			[Token(Token = "0x60012FD")]
			[Address(RVA = "0x14019F8", Offset = "0x14019F8", VA = "0x14019F8")]
			public void setParms(double fpos, double Q)
			{
			}

			[Token(Token = "0x60012FE")]
			[Address(RVA = "0x1401B08", Offset = "0x1401B08", VA = "0x1401B08")]
			public void Apply(float[] inBuffer, int inIndex, float[] outBuffer, int outIndex, int ns, int span, int w)
			{
			}

			[Token(Token = "0x60012FF")]
			[Address(RVA = "0x14023D8", Offset = "0x14023D8", VA = "0x14023D8")]
			private double denormal_filter(float x)
			{
				return default(double);
			}

			[Token(Token = "0x6001300")]
			[Address(RVA = "0x14023D4", Offset = "0x14023D4", VA = "0x14023D4")]
			private double denormal_filter(double x)
			{
				return default(double);
			}
		}

		[Token(Token = "0x40008EB")]
		private const int WDL_RESAMPLE_MAX_FILTERS = 4;

		[Token(Token = "0x40008EC")]
		private const int WDL_RESAMPLE_MAX_NCH = 64;

		[Token(Token = "0x40008ED")]
		private const double PI = Math.PI;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private double m_sratein;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double m_srateout;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double m_fracpos;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double m_ratio;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private double m_filter_ratio;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float m_filterq;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_filterpos;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float[] m_rsinbuf;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float[] m_filter_coeffs;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WDL_Resampler_IIRFilter m_iirfilter;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_filter_coeffs_size;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_last_requested;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int m_filtlatency;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int m_samples_in_rsinbuf;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int m_lp_oversize;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int m_sincsize;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int m_filtercnt;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_sincoversize;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool m_interp;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool m_feedmode;

		[Token(Token = "0x170000A4")]
		public double InputSampleRate
		{
			[Token(Token = "0x60009A1")]
			[Address(RVA = "0x1400EB0", Offset = "0x1400EB0", VA = "0x1400EB0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170000A5")]
		public double OutputSampleRate
		{
			[Token(Token = "0x60009A2")]
			[Address(RVA = "0x1400EB8", Offset = "0x1400EB8", VA = "0x1400EB8")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0x1400C48", Offset = "0x1400C48", VA = "0x1400C48")]
		public WdlResampler()
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0x1400CE4", Offset = "0x1400CE4", VA = "0x1400CE4")]
		public void SetMode(bool interp, int filtercnt, bool sinc, int sinc_size = 64, int sinc_interpsize = 32)
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0x1400DF8", Offset = "0x1400DF8", VA = "0x1400DF8")]
		public void SetFilterParms(float filterpos = 0.693f, float filterq = 0.707f)
		{
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0x1400E00", Offset = "0x1400E00", VA = "0x1400E00")]
		public void SetFeedMode(bool wantInputDriven)
		{
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0x1400CC4", Offset = "0x1400CC4", VA = "0x1400CC4")]
		public void Reset(double fracpos = 0.0)
		{
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x1400E7C", Offset = "0x1400E7C", VA = "0x1400E7C")]
		public void SetRates(double rate_in, double rate_out)
		{
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x1400EC0", Offset = "0x1400EC0", VA = "0x1400EC0")]
		public double GetCurrentLatency()
		{
			return default(double);
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x1400EE4", Offset = "0x1400EE4", VA = "0x1400EE4")]
		public int ResamplePrepare(int out_samples, int nch, out float[] inbuffer, out int inbufferOffset)
		{
			return default(int);
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x140108C", Offset = "0x140108C", VA = "0x140108C")]
		public int ResampleOut(float[] outBuffer, int outBufferIndex, int nsamples_in, int nsamples_out, int nch)
		{
			return default(int);
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x1401CCC", Offset = "0x1401CCC", VA = "0x1401CCC")]
		private void BuildLowPass(double filtpos)
		{
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x14022A0", Offset = "0x14022A0", VA = "0x14022A0")]
		private void SincSample(float[] outBuffer, int outBufferIndex, float[] inBuffer, int inBufferIndex, double fracpos, int nch, float[] filter, int filterIndex, int filtsz)
		{
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x1401FA8", Offset = "0x1401FA8", VA = "0x1401FA8")]
		private void SincSample1(float[] outBuffer, int outBufferIndex, float[] inBuffer, int inBufferIndex, double fracpos, float[] filter, int filterIndex, int filtsz)
		{
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x14020A0", Offset = "0x14020A0", VA = "0x14020A0")]
		private void SincSample2(float[] outptr, int outBufferIndex, float[] inBuffer, int inBufferIndex, double fracpos, float[] filter, int filterIndex, int filtsz)
		{
		}
	}
}
namespace NAudio.Wave
{
	[Token(Token = "0x2000141")]
	internal interface ISampleProvider
	{
		[Token(Token = "0x170000A6")]
		[NotNull]
		WaveFormat WaveFormat
		{
			[Token(Token = "0x60009AA")]
			get;
		}

		[Token(Token = "0x60009AB")]
		int Read([NotNull] float[] buffer, int offset, int count);
	}
	[Token(Token = "0x2000142")]
	internal class WaveFileWriter : Stream
	{
		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Stream _outStream;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BinaryWriter _writer;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private long _dataSizePos;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private long _factSampleCountPos;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int _dataChunkSize;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB364F4", Offset = "0xB364F4")]
		private string <Filename>k__BackingField;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36504", Offset = "0xB36504")]
		private WaveFormat <WaveFormat>k__BackingField;

		[Token(Token = "0x170000A7")]
		public string Filename
		{
			[Token(Token = "0x60009B1")]
			[Address(RVA = "0x14028AC", Offset = "0x14028AC", VA = "0x14028AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C4B0", Offset = "0xB3C4B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009B2")]
			[Address(RVA = "0x14028B4", Offset = "0x14028B4", VA = "0x14028B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C4C0", Offset = "0xB3C4C0")]
			private set
			{
			}
		}

		[Token(Token = "0x170000A8")]
		public override long Length
		{
			[Token(Token = "0x60009B3")]
			[Address(RVA = "0x14028BC", Offset = "0x14028BC", VA = "0x14028BC", Slot = "10")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170000A9")]
		public WaveFormat WaveFormat
		{
			[Token(Token = "0x60009B4")]
			[Address(RVA = "0x14028C4", Offset = "0x14028C4", VA = "0x14028C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C4D0", Offset = "0xB3C4D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009B5")]
			[Address(RVA = "0x14028CC", Offset = "0x14028CC", VA = "0x14028CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C4E0", Offset = "0xB3C4E0")]
			private set
			{
			}
		}

		[Token(Token = "0x170000AA")]
		public override bool CanRead
		{
			[Token(Token = "0x60009B6")]
			[Address(RVA = "0x14028D4", Offset = "0x14028D4", VA = "0x14028D4", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AB")]
		public override bool CanWrite
		{
			[Token(Token = "0x60009B7")]
			[Address(RVA = "0x14028DC", Offset = "0x14028DC", VA = "0x14028DC", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AC")]
		public override bool CanSeek
		{
			[Token(Token = "0x60009B8")]
			[Address(RVA = "0x14028E4", Offset = "0x14028E4", VA = "0x14028E4", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AD")]
		public override long Position
		{
			[Token(Token = "0x60009BC")]
			[Address(RVA = "0x1402A30", Offset = "0x1402A30", VA = "0x1402A30", Slot = "11")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60009BD")]
			[Address(RVA = "0x1402A38", Offset = "0x1402A38", VA = "0x1402A38", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0x14023E0", Offset = "0x14023E0", VA = "0x14023E0")]
		public WaveFileWriter(Stream outStream, WaveFormat format)
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0x1402814", Offset = "0x1402814", VA = "0x1402814")]
		public WaveFileWriter(string filename, WaveFormat format)
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x1402758", Offset = "0x1402758", VA = "0x1402758")]
		private void WriteDataChunkHeader()
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x1402680", Offset = "0x1402680", VA = "0x1402680")]
		private void CreateFactChunk()
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x14028A4", Offset = "0x14028A4", VA = "0x14028A4")]
		private bool HasFactChunk()
		{
			return default(bool);
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x14028EC", Offset = "0x14028EC", VA = "0x14028EC", Slot = "22")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x1402958", Offset = "0x1402958", VA = "0x1402958", Slot = "20")]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0x14029C4", Offset = "0x14029C4", VA = "0x14029C4", Slot = "21")]
		public override void SetLength(long value)
		{
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x1402AA4", Offset = "0x1402AA4", VA = "0x1402AA4", Slot = "24")]
		public override void Write(byte[] data, int offset, int count)
		{
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x1402AEC", Offset = "0x1402AEC", VA = "0x1402AEC")]
		public void WriteSample(float sample)
		{
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x1402B30", Offset = "0x1402B30", VA = "0x1402B30")]
		public void WriteSamples(float[] samples, int offset, int count)
		{
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0x1402BC8", Offset = "0x1402BC8", VA = "0x1402BC8", Slot = "15")]
		public override void Flush()
		{
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0x1402BE8", Offset = "0x1402BE8", VA = "0x1402BE8", Slot = "14")]
		protected override void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x1402C90", Offset = "0x1402C90", VA = "0x1402C90", Slot = "26")]
		protected virtual void UpdateHeader(BinaryWriter writer)
		{
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x1402DD4", Offset = "0x1402DD4", VA = "0x1402DD4")]
		private void UpdateDataChunk(BinaryWriter writer)
		{
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x1402CE4", Offset = "0x1402CE4", VA = "0x1402CE4")]
		private void UpdateRiffChunk(BinaryWriter writer)
		{
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x1402D4C", Offset = "0x1402D4C", VA = "0x1402D4C")]
		private void UpdateFactChunk(BinaryWriter writer)
		{
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x1402E28", Offset = "0x1402E28", VA = "0x1402E28", Slot = "1")]
		~WaveFileWriter()
		{
		}
	}
	[Token(Token = "0x2000143")]
	public sealed class WaveFormat
	{
		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly int _channels;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private readonly int _sampleRate;

		[Token(Token = "0x170000AE")]
		public int Channels
		{
			[Token(Token = "0x60009C8")]
			[Address(RVA = "0x1402EA0", Offset = "0x1402EA0", VA = "0x1402EA0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000AF")]
		public int SampleRate
		{
			[Token(Token = "0x60009C9")]
			[Address(RVA = "0x1402EA8", Offset = "0x1402EA8", VA = "0x1402EA8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x1402EB0", Offset = "0x1402EB0", VA = "0x1402EB0")]
		public WaveFormat(int channels, int sampleRate)
		{
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x1402F60", Offset = "0x1402F60", VA = "0x1402F60")]
		public bool Equals(WaveFormat other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x1402F9C", Offset = "0x1402F9C", VA = "0x1402F9C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x1402FC0", Offset = "0x1402FC0", VA = "0x1402FC0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
namespace HandyCollections.Heap
{
	[Token(Token = "0x2000144")]
	internal interface IMinHeap<T>
	{
		[Token(Token = "0x170000B0")]
		int Count
		{
			[Token(Token = "0x60009CE")]
			get;
		}

		[Token(Token = "0x170000B1")]
		T Minimum
		{
			[Token(Token = "0x60009CF")]
			get;
		}

		[Token(Token = "0x60009D0")]
		void Add(T item);

		[Token(Token = "0x60009D1")]
		void Add(IEnumerable<T> items);

		[Token(Token = "0x60009D2")]
		T RemoveMin();

		[Token(Token = "0x60009D3")]
		T RemoveAt(int index);

		[Token(Token = "0x60009D4")]
		int IndexOf(T item);

		[Token(Token = "0x60009D5")]
		int IndexOf(Predicate<T> predicate);

		[Token(Token = "0x60009D6")]
		void Clear();
	}
	[Token(Token = "0x2000145")]
	internal class MinHeap<T> : IMinHeap<T>
	{
		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<T> _heap;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IComparer<T> _comparer;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _allowResize;

		[Token(Token = "0x170000B2")]
		public int Count
		{
			[Token(Token = "0x60009D7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000B3")]
		public T Minimum
		{
			[Token(Token = "0x60009D8")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x170000B4")]
		public bool AllowHeapResize
		{
			[Token(Token = "0x60009D9")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009DA")]
			set
			{
			}
		}

		[Token(Token = "0x60009DB")]
		public MinHeap()
		{
		}

		[Token(Token = "0x60009DC")]
		public MinHeap(int capacity)
		{
		}

		[Token(Token = "0x60009DD")]
		public MinHeap(int capacity, IComparer<T> comparer)
		{
		}

		[Token(Token = "0x60009DE")]
		public MinHeap(IComparer<T> comparer)
		{
		}

		[Token(Token = "0x60009DF")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x60009E0")]
		public void Add(IEnumerable<T> items)
		{
		}

		[Token(Token = "0x60009E1")]
		public void Heapify()
		{
		}

		[Token(Token = "0x60009E2")]
		public void Heapify(int mutated)
		{
		}

		[Token(Token = "0x60009E3")]
		public T RemoveMin()
		{
			return (T)null;
		}

		[Token(Token = "0x60009E4")]
		public T RemoveAt(int index)
		{
			return (T)null;
		}

		[Token(Token = "0x60009E5")]
		public void Clear()
		{
		}

		[Token(Token = "0x60009E6")]
		private void BubbleUp(int index)
		{
		}

		[Token(Token = "0x60009E7")]
		private int TrickleDown(int index)
		{
			return default(int);
		}

		[Token(Token = "0x60009E8")]
		private void DebugCheckHeapProperty()
		{
		}

		[Token(Token = "0x60009E9")]
		private bool IsLessThan(T a, T b)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EA")]
		private static int ParentIndex(int i)
		{
			return default(int);
		}

		[Token(Token = "0x60009EB")]
		private void Swap(int a, int b)
		{
		}

		[Token(Token = "0x60009EC")]
		private static int LeftChild(int i)
		{
			return default(int);
		}

		[Token(Token = "0x60009ED")]
		private static int RightChild(int i)
		{
			return default(int);
		}

		[Token(Token = "0x60009EE")]
		private int SmallestChildSmallerThan(int i, T item)
		{
			return default(int);
		}

		[Token(Token = "0x60009EF")]
		public int IndexOf(T item)
		{
			return default(int);
		}

		[Token(Token = "0x60009F0")]
		public int IndexOf(Predicate<T> predicate)
		{
			return default(int);
		}
	}
}
namespace Dissonance
{
	[Token(Token = "0x2000146")]
	public enum AudioQuality
	{
		[Token(Token = "0x400090F")]
		Low,
		[Token(Token = "0x4000910")]
		Medium,
		[Token(Token = "0x4000911")]
		High
	}
	[Token(Token = "0x2000147")]
	public abstract class BaseCommsTrigger : MonoBehaviour, IAccessTokenCollection
	{
		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected readonly Log Log;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _wasColliderTriggered;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<GameObject> _entitiesInCollider;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TokenSet _tokens;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool? _cachedTokenActivation;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private DissonanceComms _comms;

		[Token(Token = "0x170000B5")]
		public abstract bool UseColliderTrigger
		{
			[Token(Token = "0x60009F1")]
			get;
			[Token(Token = "0x60009F2")]
			set;
		}

		[Token(Token = "0x170000B6")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB40ED0", Offset = "0xB40ED0")]
		public bool UseTrigger
		{
			[Token(Token = "0x60009F3")]
			[Address(RVA = "0x131A56C", Offset = "0x131A56C", VA = "0x131A56C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009F4")]
			[Address(RVA = "0x131A578", Offset = "0x131A578", VA = "0x131A578")]
			set
			{
			}
		}

		[Token(Token = "0x170000B7")]
		public abstract bool CanTrigger
		{
			[Token(Token = "0x60009F5")]
			get;
		}

		[Token(Token = "0x170000B8")]
		public bool IsColliderTriggered
		{
			[Token(Token = "0x60009F6")]
			[Address(RVA = "0x131A588", Offset = "0x131A588", VA = "0x131A588")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B9")]
		public IEnumerable<string> Tokens
		{
			[Token(Token = "0x60009F7")]
			[Address(RVA = "0x131A5FC", Offset = "0x131A5FC", VA = "0x131A5FC", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BA")]
		protected DissonanceComms Comms
		{
			[Token(Token = "0x60009F8")]
			[Address(RVA = "0x131A604", Offset = "0x131A604", VA = "0x131A604")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009F9")]
			[Address(RVA = "0x131A60C", Offset = "0x131A60C", VA = "0x131A60C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		protected bool TokenActivationState
		{
			[Token(Token = "0x6000A02")]
			[Address(RVA = "0x131AD5C", Offset = "0x131AD5C", VA = "0x131AD5C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x131A7E8", Offset = "0x131A7E8", VA = "0x131A7E8")]
		protected BaseCommsTrigger()
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x131A8DC", Offset = "0x131A8DC", VA = "0x131A8DC", Slot = "11")]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB3C4F0", Offset = "0xB3C4F0")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x131A9B8", Offset = "0x131A9B8", VA = "0x131A9B8", Slot = "12")]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB3C500", Offset = "0xB3C500")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x131A9BC", Offset = "0x131A9BC", VA = "0x131A9BC", Slot = "13")]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB3C510", Offset = "0xB3C510")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x131AB14", Offset = "0x131AB14", VA = "0x131AB14", Slot = "14")]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB3C520", Offset = "0xB3C520")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x131AD4C", Offset = "0x131AD4C", VA = "0x131AD4C", Slot = "15")]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB3C530", Offset = "0xB3C530")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0x131AD50", Offset = "0x131AD50", VA = "0x131AD50", Slot = "16")]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB3C540", Offset = "0xB3C540")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x131AD54", Offset = "0x131AD54", VA = "0x131AD54", Slot = "17")]
		protected virtual void TokensModified(string token)
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x131AE78", Offset = "0x131AE78", VA = "0x131AE78", Slot = "5")]
		public bool ContainsToken(string token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x131AE94", Offset = "0x131AE94", VA = "0x131AE94", Slot = "6")]
		public bool AddToken(string token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x131AEB0", Offset = "0x131AEB0", VA = "0x131AEB0", Slot = "7")]
		public bool RemoveToken(string token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x131AECC", Offset = "0x131AECC", VA = "0x131AECC", Slot = "18")]
		protected virtual void ColliderTriggerChanged()
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x131AED0", Offset = "0x131AED0", VA = "0x131AED0")]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB3C550", Offset = "0xB3C550")]
		private void OnTriggerEnter([NotNull] Collider other)
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x131B018", Offset = "0x131B018", VA = "0x131B018")]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB3C560", Offset = "0xB3C560")]
		private void OnTriggerExit([NotNull] Collider other)
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x131B130", Offset = "0x131B130", VA = "0x131B130", Slot = "19")]
		protected virtual bool ColliderTriggerFilter([NotNull] Collider other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x131AA50", Offset = "0x131AA50", VA = "0x131AA50")]
		[CanBeNull]
		private DissonanceComms FindLocalVoiceComm()
		{
			return null;
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x131AC84", Offset = "0x131AC84", VA = "0x131AC84")]
		protected bool CheckVoiceComm()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000148")]
	public enum ChannelPriority
	{
		[Token(Token = "0x4000919")]
		None = -2,
		[Token(Token = "0x400091A")]
		Low,
		[Token(Token = "0x400091B")]
		Default,
		[Token(Token = "0x400091C")]
		Medium,
		[Token(Token = "0x400091D")]
		High
	}
	[Token(Token = "0x2000149")]
	public sealed class ChannelProperties
	{
		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IChannelPriorityProvider _defaultPriority;

		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36524", Offset = "0xB36524")]
		private ushort <Id>k__BackingField;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36534", Offset = "0xB36534")]
		private bool <Positional>k__BackingField;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36544", Offset = "0xB36544")]
		private ChannelPriority <Priority>k__BackingField;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _amplitudeMultiplier;

		[Token(Token = "0x170000BC")]
		public ushort Id
		{
			[Token(Token = "0x6000A0C")]
			[Address(RVA = "0x131B2C4", Offset = "0x131B2C4", VA = "0x131B2C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C580", Offset = "0xB3C580")]
			get
			{
				return default(ushort);
			}
			[Token(Token = "0x6000A0D")]
			[Address(RVA = "0x131B2CC", Offset = "0x131B2CC", VA = "0x131B2CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C590", Offset = "0xB3C590")]
			internal set
			{
			}
		}

		[Token(Token = "0x170000BD")]
		public bool Positional
		{
			[Token(Token = "0x6000A0E")]
			[Address(RVA = "0x131B2D4", Offset = "0x131B2D4", VA = "0x131B2D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C5A0", Offset = "0xB3C5A0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A0F")]
			[Address(RVA = "0x131B2DC", Offset = "0x131B2DC", VA = "0x131B2DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C5B0", Offset = "0xB3C5B0")]
			set
			{
			}
		}

		[Token(Token = "0x170000BE")]
		public ChannelPriority Priority
		{
			[Token(Token = "0x6000A10")]
			[Address(RVA = "0x131B2E8", Offset = "0x131B2E8", VA = "0x131B2E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C5C0", Offset = "0xB3C5C0")]
			get
			{
				return default(ChannelPriority);
			}
			[Token(Token = "0x6000A11")]
			[Address(RVA = "0x131B2F0", Offset = "0x131B2F0", VA = "0x131B2F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C5D0", Offset = "0xB3C5D0")]
			set
			{
			}
		}

		[Token(Token = "0x170000BF")]
		internal ChannelPriority TransmitPriority
		{
			[Token(Token = "0x6000A12")]
			[Address(RVA = "0x131B2F8", Offset = "0x131B2F8", VA = "0x131B2F8")]
			get
			{
				return default(ChannelPriority);
			}
		}

		[Token(Token = "0x170000C0")]
		internal float AmplitudeMultiplier
		{
			[Token(Token = "0x6000A13")]
			[Address(RVA = "0x131B3C0", Offset = "0x131B3C0", VA = "0x131B3C0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A14")]
			[Address(RVA = "0x131B3C8", Offset = "0x131B3C8", VA = "0x131B3C8")]
			set
			{
			}
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0x131B44C", Offset = "0x131B44C", VA = "0x131B44C")]
		internal ChannelProperties(IChannelPriorityProvider defaultPriority)
		{
		}
	}
	[Token(Token = "0x200014A")]
	public abstract class Channels<T, TId> where T : IChannel<TId>, IEquatable<T> where TId : IEquatable<TId>
	{
		[Token(Token = "0x20002ED")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30E40", Offset = "0xB30E40")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x4000FDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IChannelPriorityProvider priorityProvider;

			[Token(Token = "0x6001301")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x6001302")]
			internal ChannelProperties <.ctor>b__0()
			{
				return null;
			}
		}

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected readonly Log Log;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Dictionary<ushort, T> _openChannelsBySubId;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Pool<ChannelProperties> _propertiesPool;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ushort _nextId;

		[Token(Token = "0x170000C1")]
		public int Count
		{
			[Token(Token = "0x6000A1A")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000002")]
		public event Action<TId, ChannelProperties> OpenedChannel
		{
			[Token(Token = "0x6000A16")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C5E0", Offset = "0xB3C5E0")]
			add
			{
			}
			[Token(Token = "0x6000A17")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C5F0", Offset = "0xB3C5F0")]
			remove
			{
			}
		}

		[Token(Token = "0x14000003")]
		public event Action<TId, ChannelProperties> ClosedChannel
		{
			[Token(Token = "0x6000A18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C600", Offset = "0xB3C600")]
			add
			{
			}
			[Token(Token = "0x6000A19")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C610", Offset = "0xB3C610")]
			remove
			{
			}
		}

		[Token(Token = "0x6000A1B")]
		internal Channels([NotNull] IChannelPriorityProvider priorityProvider)
		{
		}

		[Token(Token = "0x6000A1C")]
		[NotNull]
		protected abstract T CreateChannel(ushort subscriptionId, TId channelId, ChannelProperties properties);

		[Token(Token = "0x6000A1D")]
		public bool Contains([NotNull] T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1E")]
		[NotNull]
		public T Open([NotNull] TId id, bool positional = false, ChannelPriority priority = ChannelPriority.Default, float amplitudeMultiplier = 1f)
		{
			return (T)null;
		}

		[Token(Token = "0x6000A1F")]
		public bool Close([NotNull] T channel)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A20")]
		internal void Refresh()
		{
		}

		[Token(Token = "0x6000A21")]
		public Dictionary<ushort, T>.Enumerator GetEnumerator()
		{
			return default(Dictionary<ushort, T>.Enumerator);
		}
	}
	[Token(Token = "0x200014B")]
	public interface IChannel<T> : IDisposable
	{
		[Token(Token = "0x170000C2")]
		T TargetId
		{
			[Token(Token = "0x6000A22")]
			get;
		}

		[Token(Token = "0x170000C3")]
		ushort SubscriptionId
		{
			[Token(Token = "0x6000A23")]
			get;
		}

		[Token(Token = "0x170000C4")]
		[NotNull]
		ChannelProperties Properties
		{
			[Token(Token = "0x6000A24")]
			get;
		}
	}
	[Token(Token = "0x200014C")]
	public struct PlayerChannel : IChannel<string>, IDisposable, IEquatable<PlayerChannel>
	{
		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ushort _subscriptionId;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly string _playerId;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ChannelProperties _properties;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayerChannels _channels;

		[Token(Token = "0x170000C5")]
		public ushort SubscriptionId
		{
			[Token(Token = "0x6000A26")]
			[Address(RVA = "0xC211F4", Offset = "0xC211F4", VA = "0xC211F4", Slot = "5")]
			get
			{
				return default(ushort);
			}
		}

		[Token(Token = "0x170000C6")]
		[NotNull]
		public string TargetId
		{
			[Token(Token = "0x6000A27")]
			[Address(RVA = "0xC211FC", Offset = "0xC211FC", VA = "0xC211FC", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C7")]
		private ChannelProperties Dissonance.IChannel<System.String>.Properties
		{
			[Token(Token = "0x6000A28")]
			[Address(RVA = "0xC21204", Offset = "0xC21204", VA = "0xC21204", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C8")]
		[NotNull]
		internal ChannelProperties Properties
		{
			[Token(Token = "0x6000A29")]
			[Address(RVA = "0xC2120C", Offset = "0xC2120C", VA = "0xC2120C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C9")]
		public bool IsOpen
		{
			[Token(Token = "0x6000A2A")]
			[Address(RVA = "0xC21214", Offset = "0xC21214", VA = "0xC21214")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CA")]
		public bool Positional
		{
			[Token(Token = "0x6000A2B")]
			[Address(RVA = "0xC2121C", Offset = "0xC2121C", VA = "0xC2121C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A2C")]
			[Address(RVA = "0xC21224", Offset = "0xC21224", VA = "0xC21224")]
			set
			{
			}
		}

		[Token(Token = "0x170000CB")]
		public ChannelPriority Priority
		{
			[Token(Token = "0x6000A2D")]
			[Address(RVA = "0xC21230", Offset = "0xC21230", VA = "0xC21230")]
			get
			{
				return default(ChannelPriority);
			}
			[Token(Token = "0x6000A2E")]
			[Address(RVA = "0xC21238", Offset = "0xC21238", VA = "0xC21238")]
			set
			{
			}
		}

		[Token(Token = "0x170000CC")]
		public float Volume
		{
			[Token(Token = "0x6000A2F")]
			[Address(RVA = "0xC21270", Offset = "0xC21270", VA = "0xC21270")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A30")]
			[Address(RVA = "0xC21278", Offset = "0xC21278", VA = "0xC21278")]
			set
			{
			}
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xC211E4", Offset = "0xC211E4", VA = "0xC211E4")]
		internal PlayerChannel(ushort subscriptionId, string playerId, PlayerChannels channels, ChannelProperties properties)
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xC21280", Offset = "0xC21280", VA = "0xC21280", Slot = "7")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xC21288", Offset = "0xC21288", VA = "0xC21288")]
		private void CheckValidProperties()
		{
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xC21290", Offset = "0xC21290", VA = "0xC21290", Slot = "8")]
		public bool Equals(PlayerChannel other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xC212B8", Offset = "0xC212B8", VA = "0xC212B8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xC212C0", Offset = "0xC212C0", VA = "0xC212C0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200014D")]
	public sealed class PlayerChannels : Channels<PlayerChannel, string>
	{
		[Serializable]
		[Token(Token = "0x20002EE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30E50", Offset = "0xB30E50")]
		private sealed class <>c
		{
			[Token(Token = "0x4000FDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000FDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<string, ChannelProperties> <>9__0_0;

			[Token(Token = "0x4000FE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action<string, ChannelProperties> <>9__0_1;

			[Token(Token = "0x6001304")]
			[Address(RVA = "0x110F920", Offset = "0x110F920", VA = "0x110F920")]
			public <>c()
			{
			}

			[Token(Token = "0x6001305")]
			[Address(RVA = "0x110F928", Offset = "0x110F928", VA = "0x110F928")]
			internal void <.ctor>b__0_0(string id, ChannelProperties _)
			{
			}

			[Token(Token = "0x6001306")]
			[Address(RVA = "0x110F92C", Offset = "0x110F92C", VA = "0x110F92C")]
			internal void <.ctor>b__0_1(string id, ChannelProperties _)
			{
			}
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0x1102A78", Offset = "0x1102A78", VA = "0x1102A78")]
		internal PlayerChannels(IChannelPriorityProvider priorityProvider)
		{
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0x110F8AC", Offset = "0x110F8AC", VA = "0x110F8AC", Slot = "4")]
		protected override PlayerChannel CreateChannel(ushort subscriptionId, string channelId, ChannelProperties properties)
		{
			return default(PlayerChannel);
		}
	}
	[Token(Token = "0x200014E")]
	public struct RemoteChannel
	{
		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly string _target;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly ChannelType _type;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private readonly PlaybackOptions _options;

		[Token(Token = "0x170000CD")]
		public ChannelType Type
		{
			[Token(Token = "0x6000A38")]
			[Address(RVA = "0xC213F0", Offset = "0xC213F0", VA = "0xC213F0")]
			get
			{
				return default(ChannelType);
			}
		}

		[Token(Token = "0x170000CE")]
		public PlaybackOptions Options
		{
			[Token(Token = "0x6000A39")]
			[Address(RVA = "0xC213F8", Offset = "0xC213F8", VA = "0xC213F8")]
			get
			{
				return default(PlaybackOptions);
			}
		}

		[Token(Token = "0x170000CF")]
		public string TargetName
		{
			[Token(Token = "0x6000A3A")]
			[Address(RVA = "0xC21408", Offset = "0xC21408", VA = "0xC21408")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xC21410", Offset = "0xC21410", VA = "0xC21410")]
		internal RemoteChannel([NotNull] string targetName, ChannelType type, PlaybackOptions options)
		{
		}
	}
	[Token(Token = "0x200014F")]
	public struct RoomChannel : IChannel<string>, IDisposable, IEquatable<RoomChannel>
	{
		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ushort _subscriptionId;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly string _roomId;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ChannelProperties _properties;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly RoomChannels _channels;

		[Token(Token = "0x170000D0")]
		public ushort SubscriptionId
		{
			[Token(Token = "0x6000A3D")]
			[Address(RVA = "0xC2E520", Offset = "0xC2E520", VA = "0xC2E520", Slot = "5")]
			get
			{
				return default(ushort);
			}
		}

		[Token(Token = "0x170000D1")]
		[NotNull]
		public string TargetId
		{
			[Token(Token = "0x6000A3E")]
			[Address(RVA = "0xC2E528", Offset = "0xC2E528", VA = "0xC2E528", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D2")]
		private ChannelProperties Dissonance.IChannel<System.String>.Properties
		{
			[Token(Token = "0x6000A3F")]
			[Address(RVA = "0xC2E530", Offset = "0xC2E530", VA = "0xC2E530", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D3")]
		[NotNull]
		internal ChannelProperties Properties
		{
			[Token(Token = "0x6000A40")]
			[Address(RVA = "0xC2E538", Offset = "0xC2E538", VA = "0xC2E538")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D4")]
		public bool IsOpen
		{
			[Token(Token = "0x6000A41")]
			[Address(RVA = "0xC2E540", Offset = "0xC2E540", VA = "0xC2E540")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D5")]
		public bool Positional
		{
			[Token(Token = "0x6000A42")]
			[Address(RVA = "0xC2E548", Offset = "0xC2E548", VA = "0xC2E548")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A43")]
			[Address(RVA = "0xC2E550", Offset = "0xC2E550", VA = "0xC2E550")]
			set
			{
			}
		}

		[Token(Token = "0x170000D6")]
		public ChannelPriority Priority
		{
			[Token(Token = "0x6000A44")]
			[Address(RVA = "0xC2E55C", Offset = "0xC2E55C", VA = "0xC2E55C")]
			get
			{
				return default(ChannelPriority);
			}
			[Token(Token = "0x6000A45")]
			[Address(RVA = "0xC2E564", Offset = "0xC2E564", VA = "0xC2E564")]
			set
			{
			}
		}

		[Token(Token = "0x170000D7")]
		public float Volume
		{
			[Token(Token = "0x6000A46")]
			[Address(RVA = "0xC2E59C", Offset = "0xC2E59C", VA = "0xC2E59C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A47")]
			[Address(RVA = "0xC2E5A4", Offset = "0xC2E5A4", VA = "0xC2E5A4")]
			set
			{
			}
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xC2E510", Offset = "0xC2E510", VA = "0xC2E510")]
		internal RoomChannel(ushort subscriptionId, string roomId, RoomChannels channels, ChannelProperties properties)
		{
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xC2E5AC", Offset = "0xC2E5AC", VA = "0xC2E5AC", Slot = "7")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xC2E5B4", Offset = "0xC2E5B4", VA = "0xC2E5B4")]
		private void CheckValidProperties()
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xC2E5BC", Offset = "0xC2E5BC", VA = "0xC2E5BC", Slot = "8")]
		public bool Equals(RoomChannel other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xC2E5E4", Offset = "0xC2E5E4", VA = "0xC2E5E4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xC2E5EC", Offset = "0xC2E5EC", VA = "0xC2E5EC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000150")]
	public sealed class RoomChannels : Channels<RoomChannel, string>
	{
		[Serializable]
		[Token(Token = "0x20002EF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30E60", Offset = "0xB30E60")]
		private sealed class <>c
		{
			[Token(Token = "0x4000FE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000FE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<string, ChannelProperties> <>9__0_0;

			[Token(Token = "0x4000FE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action<string, ChannelProperties> <>9__0_1;

			[Token(Token = "0x6001308")]
			[Address(RVA = "0x13F8DB8", Offset = "0x13F8DB8", VA = "0x13F8DB8")]
			public <>c()
			{
			}

			[Token(Token = "0x6001309")]
			[Address(RVA = "0x13F8DC0", Offset = "0x13F8DC0", VA = "0x13F8DC0")]
			internal void <.ctor>b__0_0(string id, ChannelProperties _)
			{
			}

			[Token(Token = "0x600130A")]
			[Address(RVA = "0x13F8DC4", Offset = "0x13F8DC4", VA = "0x13F8DC4")]
			internal void <.ctor>b__0_1(string id, ChannelProperties _)
			{
			}
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0x13F8B94", Offset = "0x13F8B94", VA = "0x13F8B94")]
		internal RoomChannels([NotNull] IChannelPriorityProvider priorityProvider)
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0x13F8D44", Offset = "0x13F8D44", VA = "0x13F8D44", Slot = "4")]
		protected override RoomChannel CreateChannel(ushort subscriptionId, string channelId, ChannelProperties properties)
		{
			return default(RoomChannel);
		}
	}
	[Token(Token = "0x2000151")]
	public enum ChannelType
	{
		[Token(Token = "0x4000936")]
		Room,
		[Token(Token = "0x4000937")]
		Player
	}
	[Token(Token = "0x2000152")]
	public struct CodecSettings
	{
		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Codec _codec;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private readonly uint _frameSize;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly int _sampleRate;

		[Token(Token = "0x170000D8")]
		public Codec Codec
		{
			[Token(Token = "0x6000A51")]
			[Address(RVA = "0xC2B9BC", Offset = "0xC2B9BC", VA = "0xC2B9BC")]
			get
			{
				return default(Codec);
			}
		}

		[Token(Token = "0x170000D9")]
		public uint FrameSize
		{
			[Token(Token = "0x6000A52")]
			[Address(RVA = "0xC2B9C4", Offset = "0xC2B9C4", VA = "0xC2B9C4")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x170000DA")]
		public int SampleRate
		{
			[Token(Token = "0x6000A53")]
			[Address(RVA = "0xC2B9CC", Offset = "0xC2B9CC", VA = "0xC2B9CC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xC2B9B0", Offset = "0xC2B9B0", VA = "0xC2B9B0")]
		public CodecSettings(Codec codec, uint frameSize, int sampleRate)
		{
		}
	}
	[Token(Token = "0x2000153")]
	internal class CodecSettingsLoader
	{
		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool _started;

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool _settingsReady;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly object _settingsWriteLock;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CodecSettings _config;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private AudioQuality _encoderQuality;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private FrameSize _encoderFrameSize;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Codec _codec;

		[Token(Token = "0x170000DB")]
		public CodecSettings Config
		{
			[Token(Token = "0x6000A54")]
			[Address(RVA = "0x131B49C", Offset = "0x131B49C", VA = "0x131B49C")]
			get
			{
				return default(CodecSettings);
			}
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x131B798", Offset = "0x131B798", VA = "0x131B798")]
		public void Start(Codec codec = Codec.Opus)
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x131B4C4", Offset = "0x131B4C4", VA = "0x131B4C4")]
		private void Generate()
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0x131B83C", Offset = "0x131B83C", VA = "0x131B83C")]
		[NotNull]
		private IVoiceEncoder CreateEncoder(AudioQuality quality, FrameSize frameSize)
		{
			return null;
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x130ACD8", Offset = "0x130ACD8", VA = "0x130ACD8")]
		[NotNull]
		public IVoiceEncoder CreateEncoder()
		{
			return null;
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x131B990", Offset = "0x131B990", VA = "0x131B990", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x131BA88", Offset = "0x131BA88", VA = "0x131BA88")]
		public CodecSettingsLoader()
		{
		}
	}
	[Token(Token = "0x2000154")]
	public enum CommActivationMode
	{
		[Token(Token = "0x4000944")]
		None,
		[Token(Token = "0x4000945")]
		VoiceActivation,
		[Token(Token = "0x4000946")]
		PushToTalk
	}
	[Token(Token = "0x2000155")]
	public enum CommTriggerTarget
	{
		[Token(Token = "0x4000948")]
		Room,
		[Token(Token = "0x4000949")]
		Player,
		[Token(Token = "0x400094A")]
		Self
	}
	[Token(Token = "0x2000156")]
	public class DissonanceException : Exception
	{
		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0x1105DA0", Offset = "0x1105DA0", VA = "0x1105DA0")]
		public DissonanceException(string message)
		{
		}
	}
	[Token(Token = "0x2000157")]
	public enum FrameSize
	{
		[Token(Token = "0x400094C")]
		Small,
		[Token(Token = "0x400094D")]
		Medium,
		[Token(Token = "0x400094E")]
		Large
	}
	[Token(Token = "0x2000158")]
	internal struct FrameSkipDetector
	{
		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly float _maxFrameTime;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private readonly float _minimumBreakerDuration;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly float _maxBreakerDuration;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private readonly float _breakerResetPerSecond;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float _breakerCloseTimer;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float _currentBreakerDuration;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _breakerClosed;

		[Token(Token = "0x170000DC")]
		internal bool IsBreakerClosed
		{
			[Token(Token = "0x6000A5D")]
			[Address(RVA = "0xC205C4", Offset = "0xC205C4", VA = "0xC205C4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xC205CC", Offset = "0xC205CC", VA = "0xC205CC")]
		public FrameSkipDetector(TimeSpan maxFrameTime, TimeSpan minimumBreakerDuration, TimeSpan maxBreakerDuration, TimeSpan breakerResetPerSecond)
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xC205D4", Offset = "0xC205D4", VA = "0xC205D4")]
		public bool IsFrameSkip(float deltaTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xC20620", Offset = "0xC20620", VA = "0xC20620")]
		private void UpdateBreaker(bool skip, float dt)
		{
		}
	}
	[Token(Token = "0x2000159")]
	public enum NetworkPlayerType
	{
		[Token(Token = "0x4000957")]
		Unknown,
		[Token(Token = "0x4000958")]
		Local,
		[Token(Token = "0x4000959")]
		Remote
	}
	[Token(Token = "0x200015A")]
	public interface IDissonancePlayer
	{
		[Token(Token = "0x170000DD")]
		string PlayerId
		{
			[Token(Token = "0x6000A61")]
			get;
		}

		[Token(Token = "0x170000DE")]
		Vector3 Position
		{
			[Token(Token = "0x6000A62")]
			get;
		}

		[Token(Token = "0x170000DF")]
		Quaternion Rotation
		{
			[Token(Token = "0x6000A63")]
			get;
		}

		[Token(Token = "0x170000E0")]
		NetworkPlayerType Type
		{
			[Token(Token = "0x6000A64")]
			get;
		}

		[Token(Token = "0x170000E1")]
		bool IsTracking
		{
			[Token(Token = "0x6000A65")]
			get;
		}
	}
	[Token(Token = "0x200015B")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30380", Offset = "0xB30380")]
	internal sealed class CanBeNullAttribute : Attribute
	{
		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x131B2B4", Offset = "0x131B2B4", VA = "0x131B2B4")]
		public CanBeNullAttribute()
		{
		}
	}
	[Token(Token = "0x200015C")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30394", Offset = "0xB30394")]
	internal sealed class NotNullAttribute : Attribute
	{
		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x110ED04", Offset = "0x110ED04", VA = "0x110ED04")]
		public NotNullAttribute()
		{
		}
	}
	[Token(Token = "0x200015D")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB303A8", Offset = "0xB303A8")]
	internal sealed class ItemNotNullAttribute : Attribute
	{
		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x1106280", Offset = "0x1106280", VA = "0x1106280")]
		public ItemNotNullAttribute()
		{
		}
	}
	[Token(Token = "0x200015E")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB303BC", Offset = "0xB303BC")]
	internal sealed class ItemCanBeNullAttribute : Attribute
	{
		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x1106278", Offset = "0x1106278", VA = "0x1106278")]
		public ItemCanBeNullAttribute()
		{
		}
	}
	[Token(Token = "0x200015F")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB303D0", Offset = "0xB303D0")]
	internal sealed class StringFormatMethodAttribute : Attribute
	{
		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36574", Offset = "0xB36574")]
		private string <FormatParameterName>k__BackingField;

		[Token(Token = "0x170000E2")]
		[NotNull]
		public string FormatParameterName
		{
			[Token(Token = "0x6000A6B")]
			[Address(RVA = "0x13FA0C8", Offset = "0x13FA0C8", VA = "0x13FA0C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C660", Offset = "0xB3C660")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A6C")]
			[Address(RVA = "0x13FA0D0", Offset = "0x13FA0D0", VA = "0x13FA0D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C670", Offset = "0xB3C670")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x13FA09C", Offset = "0x13FA09C", VA = "0x13FA09C")]
		public StringFormatMethodAttribute([NotNull] string formatParameterName)
		{
		}
	}
	[Token(Token = "0x2000160")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB303E4", Offset = "0xB303E4")]
	internal sealed class ValueProviderAttribute : Attribute
	{
		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36584", Offset = "0xB36584")]
		private string <Name>k__BackingField;

		[Token(Token = "0x170000E3")]
		[NotNull]
		public string Name
		{
			[Token(Token = "0x6000A6E")]
			[Address(RVA = "0x13FB1D8", Offset = "0x13FB1D8", VA = "0x13FB1D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C680", Offset = "0xB3C680")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A6F")]
			[Address(RVA = "0x13FB1E0", Offset = "0x13FB1E0", VA = "0x13FB1E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C690", Offset = "0xB3C690")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x13FB1AC", Offset = "0x13FB1AC", VA = "0x13FB1AC")]
		public ValueProviderAttribute([NotNull] string name)
		{
		}
	}
	[Token(Token = "0x2000161")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB3041C", Offset = "0xB3041C")]
	internal sealed class InvokerParameterNameAttribute : Attribute
	{
		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x1106270", Offset = "0x1106270", VA = "0x1106270")]
		public InvokerParameterNameAttribute()
		{
		}
	}
	[Token(Token = "0x2000162")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30430", Offset = "0xB30430")]
	internal sealed class NotifyPropertyChangedInvocatorAttribute : Attribute
	{
		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36594", Offset = "0xB36594")]
		private string <ParameterName>k__BackingField;

		[Token(Token = "0x170000E4")]
		[CanBeNull]
		public string ParameterName
		{
			[Token(Token = "0x6000A73")]
			[Address(RVA = "0x110ED40", Offset = "0x110ED40", VA = "0x110ED40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C6A0", Offset = "0xB3C6A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A74")]
			[Address(RVA = "0x110ED48", Offset = "0x110ED48", VA = "0x110ED48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C6B0", Offset = "0xB3C6B0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0x110ED0C", Offset = "0x110ED0C", VA = "0x110ED0C")]
		public NotifyPropertyChangedInvocatorAttribute()
		{
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x110ED14", Offset = "0x110ED14", VA = "0x110ED14")]
		public NotifyPropertyChangedInvocatorAttribute([NotNull] string parameterName)
		{
		}
	}
	[Token(Token = "0x2000163")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30444", Offset = "0xB30444")]
	internal sealed class ContractAnnotationAttribute : Attribute
	{
		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB365A4", Offset = "0xB365A4")]
		private string <Contract>k__BackingField;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB365B4", Offset = "0xB365B4")]
		private bool <ForceFullStates>k__BackingField;

		[Token(Token = "0x170000E5")]
		[NotNull]
		public string Contract
		{
			[Token(Token = "0x6000A77")]
			[Address(RVA = "0x10FDE34", Offset = "0x10FDE34", VA = "0x10FDE34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C6C0", Offset = "0xB3C6C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A78")]
			[Address(RVA = "0x10FDE3C", Offset = "0x10FDE3C", VA = "0x10FDE3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C6D0", Offset = "0xB3C6D0")]
			private set
			{
			}
		}

		[Token(Token = "0x170000E6")]
		public bool ForceFullStates
		{
			[Token(Token = "0x6000A79")]
			[Address(RVA = "0x10FDE44", Offset = "0x10FDE44", VA = "0x10FDE44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C6E0", Offset = "0xB3C6E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A7A")]
			[Address(RVA = "0x10FDE4C", Offset = "0x10FDE4C", VA = "0x10FDE4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C6F0", Offset = "0xB3C6F0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x10FDDC4", Offset = "0x10FDDC4", VA = "0x10FDDC4")]
		public ContractAnnotationAttribute([NotNull] string contract)
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x10FDDF4", Offset = "0x10FDDF4", VA = "0x10FDDF4")]
		public ContractAnnotationAttribute([NotNull] string contract, bool forceFullStates)
		{
		}
	}
	[Token(Token = "0x2000164")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB3047C", Offset = "0xB3047C")]
	internal sealed class LocalizationRequiredAttribute : Attribute
	{
		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB365C4", Offset = "0xB365C4")]
		private bool <Required>k__BackingField;

		[Token(Token = "0x170000E7")]
		public bool Required
		{
			[Token(Token = "0x6000A7D")]
			[Address(RVA = "0x1106E54", Offset = "0x1106E54", VA = "0x1106E54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C700", Offset = "0xB3C700")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A7E")]
			[Address(RVA = "0x1106E5C", Offset = "0x1106E5C", VA = "0x1106E5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C710", Offset = "0xB3C710")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x1106DF8", Offset = "0x1106DF8", VA = "0x1106DF8")]
		public LocalizationRequiredAttribute()
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0x1106E24", Offset = "0x1106E24", VA = "0x1106E24")]
		public LocalizationRequiredAttribute(bool required)
		{
		}
	}
	[Token(Token = "0x2000165")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30490", Offset = "0xB30490")]
	internal sealed class CannotApplyEqualityOperatorAttribute : Attribute
	{
		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0x131B2BC", Offset = "0x131B2BC", VA = "0x131B2BC")]
		public CannotApplyEqualityOperatorAttribute()
		{
		}
	}
	[Token(Token = "0x2000166")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB304A4", Offset = "0xB304A4")]
	[AttributeAttribute(Name = "BaseTypeRequiredAttribute", RVA = "0xB304A4", Offset = "0xB304A4")]
	internal sealed class BaseTypeRequiredAttribute : Attribute
	{
		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB365D4", Offset = "0xB365D4")]
		private Type <BaseType>k__BackingField;

		[Token(Token = "0x170000E8")]
		[NotNull]
		public Type BaseType
		{
			[Token(Token = "0x6000A81")]
			[Address(RVA = "0x131B2A4", Offset = "0x131B2A4", VA = "0x131B2A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C720", Offset = "0xB3C720")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A82")]
			[Address(RVA = "0x131B2AC", Offset = "0x131B2AC", VA = "0x131B2AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C730", Offset = "0xB3C730")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0x131B278", Offset = "0x131B278", VA = "0x131B278")]
		public BaseTypeRequiredAttribute([NotNull] Type baseType)
		{
		}
	}
	[Token(Token = "0x2000167")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30528", Offset = "0xB30528")]
	internal sealed class UsedImplicitlyAttribute : Attribute
	{
		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB365E4", Offset = "0xB365E4")]
		private ImplicitUseKindFlags <UseKindFlags>k__BackingField;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB365F4", Offset = "0xB365F4")]
		private ImplicitUseTargetFlags <TargetFlags>k__BackingField;

		[Token(Token = "0x170000E9")]
		public ImplicitUseKindFlags UseKindFlags
		{
			[Token(Token = "0x6000A87")]
			[Address(RVA = "0x13FB18C", Offset = "0x13FB18C", VA = "0x13FB18C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C740", Offset = "0xB3C740")]
			get
			{
				return default(ImplicitUseKindFlags);
			}
			[Token(Token = "0x6000A88")]
			[Address(RVA = "0x13FB194", Offset = "0x13FB194", VA = "0x13FB194")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C750", Offset = "0xB3C750")]
			private set
			{
			}
		}

		[Token(Token = "0x170000EA")]
		public ImplicitUseTargetFlags TargetFlags
		{
			[Token(Token = "0x6000A89")]
			[Address(RVA = "0x13FB19C", Offset = "0x13FB19C", VA = "0x13FB19C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C760", Offset = "0xB3C760")]
			get
			{
				return default(ImplicitUseTargetFlags);
			}
			[Token(Token = "0x6000A8A")]
			[Address(RVA = "0x13FB1A4", Offset = "0x13FB1A4", VA = "0x13FB1A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C770", Offset = "0xB3C770")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0x13FB0C4", Offset = "0x13FB0C4", VA = "0x13FB0C4")]
		public UsedImplicitlyAttribute()
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0x13FB12C", Offset = "0x13FB12C", VA = "0x13FB12C")]
		public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags)
		{
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0x13FB15C", Offset = "0x13FB15C", VA = "0x13FB15C")]
		public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags)
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0x13FB0F4", Offset = "0x13FB0F4", VA = "0x13FB0F4")]
		public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags)
		{
		}
	}
	[Token(Token = "0x2000168")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB3053C", Offset = "0xB3053C")]
	internal sealed class MeansImplicitUseAttribute : Attribute
	{
		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36604", Offset = "0xB36604")]
		private ImplicitUseKindFlags <UseKindFlags>k__BackingField;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36614", Offset = "0xB36614")]
		private ImplicitUseTargetFlags <TargetFlags>k__BackingField;

		[Token(Token = "0x170000EB")]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB40FA8", Offset = "0xB40FA8")]
		public ImplicitUseKindFlags UseKindFlags
		{
			[Token(Token = "0x6000A8F")]
			[Address(RVA = "0x1107994", Offset = "0x1107994", VA = "0x1107994")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C780", Offset = "0xB3C780")]
			get
			{
				return default(ImplicitUseKindFlags);
			}
			[Token(Token = "0x6000A90")]
			[Address(RVA = "0x110799C", Offset = "0x110799C", VA = "0x110799C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C790", Offset = "0xB3C790")]
			private set
			{
			}
		}

		[Token(Token = "0x170000EC")]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB40FB8", Offset = "0xB40FB8")]
		public ImplicitUseTargetFlags TargetFlags
		{
			[Token(Token = "0x6000A91")]
			[Address(RVA = "0x11079A4", Offset = "0x11079A4", VA = "0x11079A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C7A0", Offset = "0xB3C7A0")]
			get
			{
				return default(ImplicitUseTargetFlags);
			}
			[Token(Token = "0x6000A92")]
			[Address(RVA = "0x11079AC", Offset = "0x11079AC", VA = "0x11079AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C7B0", Offset = "0xB3C7B0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0x11078CC", Offset = "0x11078CC", VA = "0x11078CC")]
		public MeansImplicitUseAttribute()
		{
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0x1107934", Offset = "0x1107934", VA = "0x1107934")]
		public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags)
		{
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0x1107964", Offset = "0x1107964", VA = "0x1107964")]
		public MeansImplicitUseAttribute(ImplicitUseTargetFlags targetFlags)
		{
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0x11078FC", Offset = "0x11078FC", VA = "0x11078FC")]
		public MeansImplicitUseAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags)
		{
		}
	}
	[Token(Token = "0x2000169")]
	[Flags]
	internal enum ImplicitUseKindFlags
	{
		[Token(Token = "0x4000966")]
		Default = 7,
		[Token(Token = "0x4000967")]
		Access = 1,
		[Token(Token = "0x4000968")]
		Assign = 2,
		[Token(Token = "0x4000969")]
		InstantiatedWithFixedConstructorSignature = 4,
		[Token(Token = "0x400096A")]
		InstantiatedNoFixedConstructorSignature = 8
	}
	[Token(Token = "0x200016A")]
	[Flags]
	internal enum ImplicitUseTargetFlags
	{
		[Token(Token = "0x400096C")]
		Default = 1,
		[Token(Token = "0x400096D")]
		Itself = 1,
		[Token(Token = "0x400096E")]
		Members = 2,
		[Token(Token = "0x400096F")]
		WithMembers = 3
	}
	[Token(Token = "0x200016B")]
	[AttributeAttribute(Name = "MeansImplicitUseAttribute", RVA = "0xB30570", Offset = "0xB30570")]
	internal sealed class PublicAPIAttribute : Attribute
	{
		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36624", Offset = "0xB36624")]
		private string <Comment>k__BackingField;

		[Token(Token = "0x170000ED")]
		[CanBeNull]
		public string Comment
		{
			[Token(Token = "0x6000A95")]
			[Address(RVA = "0x110FB24", Offset = "0x110FB24", VA = "0x110FB24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C7C0", Offset = "0xB3C7C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A96")]
			[Address(RVA = "0x110FB2C", Offset = "0x110FB2C", VA = "0x110FB2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C7D0", Offset = "0xB3C7D0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x110FAF0", Offset = "0x110FAF0", VA = "0x110FAF0")]
		public PublicAPIAttribute()
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x110FAF8", Offset = "0x110FAF8", VA = "0x110FAF8")]
		public PublicAPIAttribute([NotNull] string comment)
		{
		}
	}
	[Token(Token = "0x200016C")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30584", Offset = "0xB30584")]
	internal sealed class InstantHandleAttribute : Attribute
	{
		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x1106268", Offset = "0x1106268", VA = "0x1106268")]
		public InstantHandleAttribute()
		{
		}
	}
	[Token(Token = "0x200016D")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30598", Offset = "0xB30598")]
	internal sealed class PureAttribute : Attribute
	{
		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x110FB34", Offset = "0x110FB34", VA = "0x110FB34")]
		public PureAttribute()
		{
		}
	}
	[Token(Token = "0x200016E")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB305AC", Offset = "0xB305AC")]
	internal sealed class MustUseReturnValueAttribute : Attribute
	{
		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36634", Offset = "0xB36634")]
		private string <Justification>k__BackingField;

		[Token(Token = "0x170000EE")]
		[CanBeNull]
		public string Justification
		{
			[Token(Token = "0x6000A9B")]
			[Address(RVA = "0x11079E8", Offset = "0x11079E8", VA = "0x11079E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C7E0", Offset = "0xB3C7E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A9C")]
			[Address(RVA = "0x11079F0", Offset = "0x11079F0", VA = "0x11079F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C7F0", Offset = "0xB3C7F0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x11079B4", Offset = "0x11079B4", VA = "0x11079B4")]
		public MustUseReturnValueAttribute()
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x11079BC", Offset = "0x11079BC", VA = "0x11079BC")]
		public MustUseReturnValueAttribute([NotNull] string justification)
		{
		}
	}
	[Token(Token = "0x200016F")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB305C0", Offset = "0xB305C0")]
	internal sealed class ProvidesContextAttribute : Attribute
	{
		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x110FAE8", Offset = "0x110FAE8", VA = "0x110FAE8")]
		public ProvidesContextAttribute()
		{
		}
	}
	[Token(Token = "0x2000170")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB305D4", Offset = "0xB305D4")]
	internal sealed class PathReferenceAttribute : Attribute
	{
		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36644", Offset = "0xB36644")]
		private string <BasePath>k__BackingField;

		[Token(Token = "0x170000EF")]
		[CanBeNull]
		public string BasePath
		{
			[Token(Token = "0x6000AA0")]
			[Address(RVA = "0x110F25C", Offset = "0x110F25C", VA = "0x110F25C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C800", Offset = "0xB3C800")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AA1")]
			[Address(RVA = "0x110F264", Offset = "0x110F264", VA = "0x110F264")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C810", Offset = "0xB3C810")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x110F228", Offset = "0x110F228", VA = "0x110F228")]
		public PathReferenceAttribute()
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x110F230", Offset = "0x110F230", VA = "0x110F230")]
		public PathReferenceAttribute([NotNull][AttributeAttribute(Name = "PathReferenceAttribute", RVA = "0xB3F718", Offset = "0xB3F718")] string basePath)
		{
		}
	}
	[Token(Token = "0x2000171")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB305E8", Offset = "0xB305E8")]
	internal sealed class SourceTemplateAttribute : Attribute
	{
		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x13FA094", Offset = "0x13FA094", VA = "0x13FA094")]
		public SourceTemplateAttribute()
		{
		}
	}
	[Token(Token = "0x2000172")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB305FC", Offset = "0xB305FC")]
	internal sealed class MacroAttribute : Attribute
	{
		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36654", Offset = "0xB36654")]
		private string <Expression>k__BackingField;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36664", Offset = "0xB36664")]
		private int <Editable>k__BackingField;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36674", Offset = "0xB36674")]
		private string <Target>k__BackingField;

		[Token(Token = "0x170000F0")]
		[CanBeNull]
		public string Expression
		{
			[Token(Token = "0x6000AA3")]
			[Address(RVA = "0x1107894", Offset = "0x1107894", VA = "0x1107894")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C820", Offset = "0xB3C820")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AA4")]
			[Address(RVA = "0x110789C", Offset = "0x110789C", VA = "0x110789C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C830", Offset = "0xB3C830")]
			set
			{
			}
		}

		[Token(Token = "0x170000F1")]
		public int Editable
		{
			[Token(Token = "0x6000AA5")]
			[Address(RVA = "0x11078A4", Offset = "0x11078A4", VA = "0x11078A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C840", Offset = "0xB3C840")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000AA6")]
			[Address(RVA = "0x11078AC", Offset = "0x11078AC", VA = "0x11078AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C850", Offset = "0xB3C850")]
			set
			{
			}
		}

		[Token(Token = "0x170000F2")]
		[CanBeNull]
		public string Target
		{
			[Token(Token = "0x6000AA7")]
			[Address(RVA = "0x11078B4", Offset = "0x11078B4", VA = "0x11078B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C860", Offset = "0xB3C860")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AA8")]
			[Address(RVA = "0x11078BC", Offset = "0x11078BC", VA = "0x11078BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C870", Offset = "0xB3C870")]
			set
			{
			}
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x11078C4", Offset = "0x11078C4", VA = "0x11078C4")]
		public MacroAttribute()
		{
		}
	}
	[Token(Token = "0x2000173")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30634", Offset = "0xB30634")]
	internal sealed class AspMvcAreaMasterLocationFormatAttribute : Attribute
	{
		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36684", Offset = "0xB36684")]
		private string <Format>k__BackingField;

		[Token(Token = "0x170000F3")]
		[NotNull]
		public string Format
		{
			[Token(Token = "0x6000AAB")]
			[Address(RVA = "0x1304164", Offset = "0x1304164", VA = "0x1304164")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C880", Offset = "0xB3C880")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AAC")]
			[Address(RVA = "0x130416C", Offset = "0x130416C", VA = "0x130416C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C890", Offset = "0xB3C890")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x1304138", Offset = "0x1304138", VA = "0x1304138")]
		public AspMvcAreaMasterLocationFormatAttribute([NotNull] string format)
		{
		}
	}
	[Token(Token = "0x2000174")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB3066C", Offset = "0xB3066C")]
	internal sealed class AspMvcAreaPartialViewLocationFormatAttribute : Attribute
	{
		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36694", Offset = "0xB36694")]
		private string <Format>k__BackingField;

		[Token(Token = "0x170000F4")]
		[NotNull]
		public string Format
		{
			[Token(Token = "0x6000AAE")]
			[Address(RVA = "0x13041A0", Offset = "0x13041A0", VA = "0x13041A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C8A0", Offset = "0xB3C8A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AAF")]
			[Address(RVA = "0x13041A8", Offset = "0x13041A8", VA = "0x13041A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C8B0", Offset = "0xB3C8B0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x1304174", Offset = "0x1304174", VA = "0x1304174")]
		public AspMvcAreaPartialViewLocationFormatAttribute([NotNull] string format)
		{
		}
	}
	[Token(Token = "0x2000175")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB306A4", Offset = "0xB306A4")]
	internal sealed class AspMvcAreaViewLocationFormatAttribute : Attribute
	{
		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB366A4", Offset = "0xB366A4")]
		private string <Format>k__BackingField;

		[Token(Token = "0x170000F5")]
		[NotNull]
		public string Format
		{
			[Token(Token = "0x6000AB1")]
			[Address(RVA = "0x13041DC", Offset = "0x13041DC", VA = "0x13041DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C8C0", Offset = "0xB3C8C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AB2")]
			[Address(RVA = "0x13041E4", Offset = "0x13041E4", VA = "0x13041E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C8D0", Offset = "0xB3C8D0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x13041B0", Offset = "0x13041B0", VA = "0x13041B0")]
		public AspMvcAreaViewLocationFormatAttribute([NotNull] string format)
		{
		}
	}
	[Token(Token = "0x2000176")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB306DC", Offset = "0xB306DC")]
	internal sealed class AspMvcMasterLocationFormatAttribute : Attribute
	{
		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB366B4", Offset = "0xB366B4")]
		private string <Format>k__BackingField;

		[Token(Token = "0x170000F6")]
		[NotNull]
		public string Format
		{
			[Token(Token = "0x6000AB4")]
			[Address(RVA = "0x1304274", Offset = "0x1304274", VA = "0x1304274")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C8E0", Offset = "0xB3C8E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AB5")]
			[Address(RVA = "0x130427C", Offset = "0x130427C", VA = "0x130427C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C8F0", Offset = "0xB3C8F0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x1304248", Offset = "0x1304248", VA = "0x1304248")]
		public AspMvcMasterLocationFormatAttribute([NotNull] string format)
		{
		}
	}
	[Token(Token = "0x2000177")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30714", Offset = "0xB30714")]
	internal sealed class AspMvcPartialViewLocationFormatAttribute : Attribute
	{
		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB366C4", Offset = "0xB366C4")]
		private string <Format>k__BackingField;

		[Token(Token = "0x170000F7")]
		[NotNull]
		public string Format
		{
			[Token(Token = "0x6000AB7")]
			[Address(RVA = "0x13042C0", Offset = "0x13042C0", VA = "0x13042C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C900", Offset = "0xB3C900")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AB8")]
			[Address(RVA = "0x13042C8", Offset = "0x13042C8", VA = "0x13042C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C910", Offset = "0xB3C910")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x1304294", Offset = "0x1304294", VA = "0x1304294")]
		public AspMvcPartialViewLocationFormatAttribute([NotNull] string format)
		{
		}
	}
	[Token(Token = "0x2000178")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB3074C", Offset = "0xB3074C")]
	internal sealed class AspMvcViewLocationFormatAttribute : Attribute
	{
		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB366D4", Offset = "0xB366D4")]
		private string <Format>k__BackingField;

		[Token(Token = "0x170000F8")]
		[NotNull]
		public string Format
		{
			[Token(Token = "0x6000ABA")]
			[Address(RVA = "0x1304324", Offset = "0x1304324", VA = "0x1304324")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C920", Offset = "0xB3C920")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ABB")]
			[Address(RVA = "0x130432C", Offset = "0x130432C", VA = "0x130432C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C930", Offset = "0xB3C930")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x13042F8", Offset = "0x13042F8", VA = "0x13042F8")]
		public AspMvcViewLocationFormatAttribute([NotNull] string format)
		{
		}
	}
	[Token(Token = "0x2000179")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30784", Offset = "0xB30784")]
	internal sealed class AspMvcActionAttribute : Attribute
	{
		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB366E4", Offset = "0xB366E4")]
		private string <AnonymousProperty>k__BackingField;

		[Token(Token = "0x170000F9")]
		[CanBeNull]
		public string AnonymousProperty
		{
			[Token(Token = "0x6000ABE")]
			[Address(RVA = "0x13040DC", Offset = "0x13040DC", VA = "0x13040DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C940", Offset = "0xB3C940")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ABF")]
			[Address(RVA = "0x13040E4", Offset = "0x13040E4", VA = "0x13040E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C950", Offset = "0xB3C950")]
			private set
			{
			}
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x13040A8", Offset = "0x13040A8", VA = "0x13040A8")]
		public AspMvcActionAttribute()
		{
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x13040B0", Offset = "0x13040B0", VA = "0x13040B0")]
		public AspMvcActionAttribute([NotNull] string anonymousProperty)
		{
		}
	}
	[Token(Token = "0x200017A")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30798", Offset = "0xB30798")]
	internal sealed class AspMvcAreaAttribute : Attribute
	{
		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB366F4", Offset = "0xB366F4")]
		private string <AnonymousProperty>k__BackingField;

		[Token(Token = "0x170000FA")]
		[CanBeNull]
		public string AnonymousProperty
		{
			[Token(Token = "0x6000AC2")]
			[Address(RVA = "0x1304128", Offset = "0x1304128", VA = "0x1304128")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C960", Offset = "0xB3C960")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AC3")]
			[Address(RVA = "0x1304130", Offset = "0x1304130", VA = "0x1304130")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C970", Offset = "0xB3C970")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x13040F4", Offset = "0x13040F4", VA = "0x13040F4")]
		public AspMvcAreaAttribute()
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0x13040FC", Offset = "0x13040FC", VA = "0x13040FC")]
		public AspMvcAreaAttribute([NotNull] string anonymousProperty)
		{
		}
	}
	[Token(Token = "0x200017B")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB307AC", Offset = "0xB307AC")]
	internal sealed class AspMvcControllerAttribute : Attribute
	{
		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36704", Offset = "0xB36704")]
		private string <AnonymousProperty>k__BackingField;

		[Token(Token = "0x170000FB")]
		[CanBeNull]
		public string AnonymousProperty
		{
			[Token(Token = "0x6000AC6")]
			[Address(RVA = "0x1304220", Offset = "0x1304220", VA = "0x1304220")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C980", Offset = "0xB3C980")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AC7")]
			[Address(RVA = "0x1304228", Offset = "0x1304228", VA = "0x1304228")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C990", Offset = "0xB3C990")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x13041EC", Offset = "0x13041EC", VA = "0x13041EC")]
		public AspMvcControllerAttribute()
		{
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x13041F4", Offset = "0x13041F4", VA = "0x13041F4")]
		public AspMvcControllerAttribute([NotNull] string anonymousProperty)
		{
		}
	}
	[Token(Token = "0x200017C")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB307C0", Offset = "0xB307C0")]
	internal sealed class AspMvcMasterAttribute : Attribute
	{
		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x1304240", Offset = "0x1304240", VA = "0x1304240")]
		public AspMvcMasterAttribute()
		{
		}
	}
	[Token(Token = "0x200017D")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB307D4", Offset = "0xB307D4")]
	internal sealed class AspMvcModelTypeAttribute : Attribute
	{
		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x1304284", Offset = "0x1304284", VA = "0x1304284")]
		public AspMvcModelTypeAttribute()
		{
		}
	}
	[Token(Token = "0x200017E")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB307E8", Offset = "0xB307E8")]
	internal sealed class AspMvcPartialViewAttribute : Attribute
	{
		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x130428C", Offset = "0x130428C", VA = "0x130428C")]
		public AspMvcPartialViewAttribute()
		{
		}
	}
	[Token(Token = "0x200017F")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB307FC", Offset = "0xB307FC")]
	internal sealed class AspMvcSuppressViewErrorAttribute : Attribute
	{
		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x13042D0", Offset = "0x13042D0", VA = "0x13042D0")]
		public AspMvcSuppressViewErrorAttribute()
		{
		}
	}
	[Token(Token = "0x2000180")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30810", Offset = "0xB30810")]
	internal sealed class AspMvcDisplayTemplateAttribute : Attribute
	{
		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0x1304230", Offset = "0x1304230", VA = "0x1304230")]
		public AspMvcDisplayTemplateAttribute()
		{
		}
	}
	[Token(Token = "0x2000181")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30824", Offset = "0xB30824")]
	internal sealed class AspMvcEditorTemplateAttribute : Attribute
	{
		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x1304238", Offset = "0x1304238", VA = "0x1304238")]
		public AspMvcEditorTemplateAttribute()
		{
		}
	}
	[Token(Token = "0x2000182")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30838", Offset = "0xB30838")]
	internal sealed class AspMvcTemplateAttribute : Attribute
	{
		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0x13042D8", Offset = "0x13042D8", VA = "0x13042D8")]
		public AspMvcTemplateAttribute()
		{
		}
	}
	[Token(Token = "0x2000183")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB3084C", Offset = "0xB3084C")]
	internal sealed class AspMvcViewAttribute : Attribute
	{
		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x13042E0", Offset = "0x13042E0", VA = "0x13042E0")]
		public AspMvcViewAttribute()
		{
		}
	}
	[Token(Token = "0x2000184")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30860", Offset = "0xB30860")]
	internal sealed class AspMvcViewComponentAttribute : Attribute
	{
		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0x13042E8", Offset = "0x13042E8", VA = "0x13042E8")]
		public AspMvcViewComponentAttribute()
		{
		}
	}
	[Token(Token = "0x2000185")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30874", Offset = "0xB30874")]
	internal sealed class AspMvcViewComponentViewAttribute : Attribute
	{
		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x13042F0", Offset = "0x13042F0", VA = "0x13042F0")]
		public AspMvcViewComponentViewAttribute()
		{
		}
	}
	[Token(Token = "0x2000186")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30888", Offset = "0xB30888")]
	internal sealed class AspMvcActionSelectorAttribute : Attribute
	{
		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0x13040EC", Offset = "0x13040EC", VA = "0x13040EC")]
		public AspMvcActionSelectorAttribute()
		{
		}
	}
	[Token(Token = "0x2000187")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB3089C", Offset = "0xB3089C")]
	internal sealed class HtmlElementAttributesAttribute : Attribute
	{
		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36714", Offset = "0xB36714")]
		private string <Name>k__BackingField;

		[Token(Token = "0x170000FC")]
		[CanBeNull]
		public string Name
		{
			[Token(Token = "0x6000AD5")]
			[Address(RVA = "0x1106258", Offset = "0x1106258", VA = "0x1106258")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C9A0", Offset = "0xB3C9A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AD6")]
			[Address(RVA = "0x1106260", Offset = "0x1106260", VA = "0x1106260")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C9B0", Offset = "0xB3C9B0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x1106224", Offset = "0x1106224", VA = "0x1106224")]
		public HtmlElementAttributesAttribute()
		{
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0x110622C", Offset = "0x110622C", VA = "0x110622C")]
		public HtmlElementAttributesAttribute([NotNull] string name)
		{
		}
	}
	[Token(Token = "0x2000188")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB308B0", Offset = "0xB308B0")]
	internal sealed class HtmlAttributeValueAttribute : Attribute
	{
		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36724", Offset = "0xB36724")]
		private string <Name>k__BackingField;

		[Token(Token = "0x170000FD")]
		[NotNull]
		public string Name
		{
			[Token(Token = "0x6000AD8")]
			[Address(RVA = "0x1106214", Offset = "0x1106214", VA = "0x1106214")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C9C0", Offset = "0xB3C9C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AD9")]
			[Address(RVA = "0x110621C", Offset = "0x110621C", VA = "0x110621C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C9D0", Offset = "0xB3C9D0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0x11061E8", Offset = "0x11061E8", VA = "0x11061E8")]
		public HtmlAttributeValueAttribute([NotNull] string name)
		{
		}
	}
	[Token(Token = "0x2000189")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB308C4", Offset = "0xB308C4")]
	internal sealed class RazorSectionAttribute : Attribute
	{
		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0x110FC1C", Offset = "0x110FC1C", VA = "0x110FC1C")]
		public RazorSectionAttribute()
		{
		}
	}
	[Token(Token = "0x200018A")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB308D8", Offset = "0xB308D8")]
	internal sealed class CollectionAccessAttribute : Attribute
	{
		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36734", Offset = "0xB36734")]
		private CollectionAccessType <CollectionAccessType>k__BackingField;

		[Token(Token = "0x170000FE")]
		public CollectionAccessType CollectionAccessType
		{
			[Token(Token = "0x6000ADC")]
			[Address(RVA = "0x131BBF8", Offset = "0x131BBF8", VA = "0x131BBF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C9E0", Offset = "0xB3C9E0")]
			get
			{
				return default(CollectionAccessType);
			}
			[Token(Token = "0x6000ADD")]
			[Address(RVA = "0x131BC00", Offset = "0x131BC00", VA = "0x131BC00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3C9F0", Offset = "0xB3C9F0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x131BBCC", Offset = "0x131BBCC", VA = "0x131BBCC")]
		public CollectionAccessAttribute(CollectionAccessType collectionAccessType)
		{
		}
	}
	[Token(Token = "0x200018B")]
	[Flags]
	internal enum CollectionAccessType
	{
		[Token(Token = "0x4000983")]
		None = 0,
		[Token(Token = "0x4000984")]
		Read = 1,
		[Token(Token = "0x4000985")]
		ModifyExistingContent = 2,
		[Token(Token = "0x4000986")]
		UpdatedContent = 6
	}
	[Token(Token = "0x200018C")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB308FC", Offset = "0xB308FC")]
	internal sealed class AssertionMethodAttribute : Attribute
	{
		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x13043F0", Offset = "0x13043F0", VA = "0x13043F0")]
		public AssertionMethodAttribute()
		{
		}
	}
	[Token(Token = "0x200018D")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30910", Offset = "0xB30910")]
	internal sealed class AssertionConditionAttribute : Attribute
	{
		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36744", Offset = "0xB36744")]
		private AssertionConditionType <ConditionType>k__BackingField;

		[Token(Token = "0x170000FF")]
		public AssertionConditionType ConditionType
		{
			[Token(Token = "0x6000AE0")]
			[Address(RVA = "0x13043E0", Offset = "0x13043E0", VA = "0x13043E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CA00", Offset = "0xB3CA00")]
			get
			{
				return default(AssertionConditionType);
			}
			[Token(Token = "0x6000AE1")]
			[Address(RVA = "0x13043E8", Offset = "0x13043E8", VA = "0x13043E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CA10", Offset = "0xB3CA10")]
			private set
			{
			}
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x13043B4", Offset = "0x13043B4", VA = "0x13043B4")]
		public AssertionConditionAttribute(AssertionConditionType conditionType)
		{
		}
	}
	[Token(Token = "0x200018E")]
	internal enum AssertionConditionType
	{
		[Token(Token = "0x4000989")]
		IS_TRUE,
		[Token(Token = "0x400098A")]
		IS_FALSE,
		[Token(Token = "0x400098B")]
		IS_NULL,
		[Token(Token = "0x400098C")]
		IS_NOT_NULL
	}
	[Token(Token = "0x200018F")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB30924", Offset = "0xB30924")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30924", Offset = "0xB30924")]
	internal sealed class TerminatesProgramAttribute : Attribute
	{
		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x13FA0D8", Offset = "0x13FA0D8", VA = "0x13FA0D8")]
		public TerminatesProgramAttribute()
		{
		}
	}
	[Token(Token = "0x2000190")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30974", Offset = "0xB30974")]
	internal sealed class LinqTunnelAttribute : Attribute
	{
		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x1106288", Offset = "0x1106288", VA = "0x1106288")]
		public LinqTunnelAttribute()
		{
		}
	}
	[Token(Token = "0x2000191")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30988", Offset = "0xB30988")]
	internal sealed class NoEnumerationAttribute : Attribute
	{
		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x110ECF4", Offset = "0x110ECF4", VA = "0x110ECF4")]
		public NoEnumerationAttribute()
		{
		}
	}
	[Token(Token = "0x2000192")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB3099C", Offset = "0xB3099C")]
	internal sealed class RegexPatternAttribute : Attribute
	{
		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x110FC3C", Offset = "0x110FC3C", VA = "0x110FC3C")]
		public RegexPatternAttribute()
		{
		}
	}
	[Token(Token = "0x2000193")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB309B0", Offset = "0xB309B0")]
	internal sealed class NoReorderAttribute : Attribute
	{
		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x110ECFC", Offset = "0x110ECFC", VA = "0x110ECFC")]
		public NoReorderAttribute()
		{
		}
	}
	[Token(Token = "0x2000194")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB309C4", Offset = "0xB309C4")]
	internal sealed class XamlItemsControlAttribute : Attribute
	{
		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x13FD1F0", Offset = "0x13FD1F0", VA = "0x13FD1F0")]
		public XamlItemsControlAttribute()
		{
		}
	}
	[Token(Token = "0x2000195")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB309D8", Offset = "0xB309D8")]
	internal sealed class XamlItemBindingOfItemsControlAttribute : Attribute
	{
		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x13FD1E8", Offset = "0x13FD1E8", VA = "0x13FD1E8")]
		public XamlItemBindingOfItemsControlAttribute()
		{
		}
	}
	[Token(Token = "0x2000196")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB309EC", Offset = "0xB309EC")]
	internal sealed class AspChildControlTypeAttribute : Attribute
	{
		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36754", Offset = "0xB36754")]
		private string <TagName>k__BackingField;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36764", Offset = "0xB36764")]
		private Type <ControlType>k__BackingField;

		[Token(Token = "0x17000100")]
		[NotNull]
		public string TagName
		{
			[Token(Token = "0x6000AEA")]
			[Address(RVA = "0x1304070", Offset = "0x1304070", VA = "0x1304070")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CA20", Offset = "0xB3CA20")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AEB")]
			[Address(RVA = "0x1304078", Offset = "0x1304078", VA = "0x1304078")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CA30", Offset = "0xB3CA30")]
			private set
			{
			}
		}

		[Token(Token = "0x17000101")]
		[NotNull]
		public Type ControlType
		{
			[Token(Token = "0x6000AEC")]
			[Address(RVA = "0x1304080", Offset = "0x1304080", VA = "0x1304080")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CA40", Offset = "0xB3CA40")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AED")]
			[Address(RVA = "0x1304088", Offset = "0x1304088", VA = "0x1304088")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CA50", Offset = "0xB3CA50")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x1304038", Offset = "0x1304038", VA = "0x1304038")]
		public AspChildControlTypeAttribute([NotNull] string tagName, [NotNull] Type controlType)
		{
		}
	}
	[Token(Token = "0x2000197")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30A24", Offset = "0xB30A24")]
	internal sealed class AspDataFieldAttribute : Attribute
	{
		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x1304090", Offset = "0x1304090", VA = "0x1304090")]
		public AspDataFieldAttribute()
		{
		}
	}
	[Token(Token = "0x2000198")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30A38", Offset = "0xB30A38")]
	internal sealed class AspDataFieldsAttribute : Attribute
	{
		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x1304098", Offset = "0x1304098", VA = "0x1304098")]
		public AspDataFieldsAttribute()
		{
		}
	}
	[Token(Token = "0x2000199")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30A4C", Offset = "0xB30A4C")]
	internal sealed class AspMethodPropertyAttribute : Attribute
	{
		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0x13040A0", Offset = "0x13040A0", VA = "0x13040A0")]
		public AspMethodPropertyAttribute()
		{
		}
	}
	[Token(Token = "0x200019A")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30A60", Offset = "0xB30A60")]
	internal sealed class AspRequiredAttributeAttribute : Attribute
	{
		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36774", Offset = "0xB36774")]
		private string <Attribute>k__BackingField;

		[Token(Token = "0x17000102")]
		[NotNull]
		public string Attribute
		{
			[Token(Token = "0x6000AF2")]
			[Address(RVA = "0x1304360", Offset = "0x1304360", VA = "0x1304360")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CA60", Offset = "0xB3CA60")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AF3")]
			[Address(RVA = "0x1304368", Offset = "0x1304368", VA = "0x1304368")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CA70", Offset = "0xB3CA70")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x1304334", Offset = "0x1304334", VA = "0x1304334")]
		public AspRequiredAttributeAttribute([NotNull] string attribute)
		{
		}
	}
	[Token(Token = "0x200019B")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30A98", Offset = "0xB30A98")]
	internal sealed class AspTypePropertyAttribute : Attribute
	{
		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36784", Offset = "0xB36784")]
		private bool <CreateConstructorReferences>k__BackingField;

		[Token(Token = "0x17000103")]
		public bool CreateConstructorReferences
		{
			[Token(Token = "0x6000AF4")]
			[Address(RVA = "0x1304370", Offset = "0x1304370", VA = "0x1304370")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CA80", Offset = "0xB3CA80")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AF5")]
			[Address(RVA = "0x1304378", Offset = "0x1304378", VA = "0x1304378")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CA90", Offset = "0xB3CA90")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x1304384", Offset = "0x1304384", VA = "0x1304384")]
		public AspTypePropertyAttribute(bool createConstructorReferences)
		{
		}
	}
	[Token(Token = "0x200019C")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30AAC", Offset = "0xB30AAC")]
	internal sealed class RazorImportNamespaceAttribute : Attribute
	{
		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36794", Offset = "0xB36794")]
		private string <Name>k__BackingField;

		[Token(Token = "0x17000104")]
		[NotNull]
		public string Name
		{
			[Token(Token = "0x6000AF8")]
			[Address(RVA = "0x110FBAC", Offset = "0x110FBAC", VA = "0x110FBAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CAA0", Offset = "0xB3CAA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AF9")]
			[Address(RVA = "0x110FBB4", Offset = "0x110FBB4", VA = "0x110FBB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CAB0", Offset = "0xB3CAB0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x110FB80", Offset = "0x110FB80", VA = "0x110FB80")]
		public RazorImportNamespaceAttribute([NotNull] string name)
		{
		}
	}
	[Token(Token = "0x200019D")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30AE4", Offset = "0xB30AE4")]
	internal sealed class RazorInjectionAttribute : Attribute
	{
		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB367A4", Offset = "0xB367A4")]
		private string <Type>k__BackingField;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB367B4", Offset = "0xB367B4")]
		private string <FieldName>k__BackingField;

		[Token(Token = "0x17000105")]
		[NotNull]
		public string Type
		{
			[Token(Token = "0x6000AFB")]
			[Address(RVA = "0x110FBF4", Offset = "0x110FBF4", VA = "0x110FBF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CAC0", Offset = "0xB3CAC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AFC")]
			[Address(RVA = "0x110FBFC", Offset = "0x110FBFC", VA = "0x110FBFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CAD0", Offset = "0xB3CAD0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000106")]
		[NotNull]
		public string FieldName
		{
			[Token(Token = "0x6000AFD")]
			[Address(RVA = "0x110FC04", Offset = "0x110FC04", VA = "0x110FC04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CAE0", Offset = "0xB3CAE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AFE")]
			[Address(RVA = "0x110FC0C", Offset = "0x110FC0C", VA = "0x110FC0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CAF0", Offset = "0xB3CAF0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x110FBBC", Offset = "0x110FBBC", VA = "0x110FBBC")]
		public RazorInjectionAttribute([NotNull] string type, [NotNull] string fieldName)
		{
		}
	}
	[Token(Token = "0x200019E")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30B1C", Offset = "0xB30B1C")]
	internal sealed class RazorDirectiveAttribute : Attribute
	{
		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB367C4", Offset = "0xB367C4")]
		private string <Directive>k__BackingField;

		[Token(Token = "0x17000107")]
		[NotNull]
		public string Directive
		{
			[Token(Token = "0x6000B00")]
			[Address(RVA = "0x110FB68", Offset = "0x110FB68", VA = "0x110FB68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CB00", Offset = "0xB3CB00")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B01")]
			[Address(RVA = "0x110FB70", Offset = "0x110FB70", VA = "0x110FB70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3CB10", Offset = "0xB3CB10")]
			private set
			{
			}
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x110FB3C", Offset = "0x110FB3C", VA = "0x110FB3C")]
		public RazorDirectiveAttribute([NotNull] string directive)
		{
		}
	}
	[Token(Token = "0x200019F")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30B54", Offset = "0xB30B54")]
	internal sealed class RazorHelperCommonAttribute : Attribute
	{
		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x110FB78", Offset = "0x110FB78", VA = "0x110FB78")]
		public RazorHelperCommonAttribute()
		{
		}
	}
	[Token(Token = "0x20001A0")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30B68", Offset = "0xB30B68")]
	internal sealed class RazorLayoutAttribute : Attribute
	{
		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x110FC14", Offset = "0x110FC14", VA = "0x110FC14")]
		public RazorLayoutAttribute()
		{
		}
	}
	[Token(Token = "0x20001A1")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30B7C", Offset = "0xB30B7C")]
	internal sealed class RazorWriteLiteralMethodAttribute : Attribute
	{
		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x110FC24", Offset = "0x110FC24", VA = "0x110FC24")]
		public RazorWriteLiteralMethodAttribute()
		{
		}
	}
	[Token(Token = "0x20001A2")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30B90", Offset = "0xB30B90")]
	internal sealed class RazorWriteMethodAttribute : Attribute
	{
		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x110FC2C", Offset = "0x110FC2C", VA = "0x110FC2C")]
		public RazorWriteMethodAttribute()
		{
		}
	}
	[Token(Token = "0x20001A3")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xB30BA4", Offset = "0xB30BA4")]
	internal sealed class RazorWriteMethodParameterAttribute : Attribute
	{
		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x110FC34", Offset = "0x110FC34", VA = "0x110FC34")]
		public RazorWriteMethodParameterAttribute()
		{
		}
	}
	[Token(Token = "0x20001A4")]
	public enum LogLevel
	{
		[Token(Token = "0x4000996")]
		Trace,
		[Token(Token = "0x4000997")]
		Debug,
		[Token(Token = "0x4000998")]
		Info,
		[Token(Token = "0x4000999")]
		Warn,
		[Token(Token = "0x400099A")]
		Error
	}
	[Token(Token = "0x20001A5")]
	public enum LogCategory
	{
		[Token(Token = "0x400099C")]
		Core,
		[Token(Token = "0x400099D")]
		Recording,
		[Token(Token = "0x400099E")]
		Network,
		[Token(Token = "0x400099F")]
		Playback
	}
	[Token(Token = "0x20001A6")]
	public static class Logs
	{
		[Token(Token = "0x20002F0")]
		private struct LogMessage
		{
			[Token(Token = "0x4000FE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly LogLevel _level;

			[Token(Token = "0x4000FE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly string _message;

			[Token(Token = "0x600130B")]
			[Address(RVA = "0xC206B4", Offset = "0xC206B4", VA = "0xC206B4")]
			public LogMessage(string message, LogLevel level)
			{
			}

			[Token(Token = "0x600130C")]
			[Address(RVA = "0xC206C0", Offset = "0xC206C0", VA = "0xC206C0")]
			public void Log()
			{
			}
		}

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly TransferBuffer<LogMessage> LogsFromOtherThreads;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Thread _main;

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x10FDCA4", Offset = "0x10FDCA4", VA = "0x10FDCA4")]
		[NotNull]
		public static Log Create(LogCategory category, string name)
		{
			return null;
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x1107514", Offset = "0x1107514", VA = "0x1107514")]
		[NotNull]
		public static Log Create(int category, string name)
		{
			return null;
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x1107584", Offset = "0x1107584", VA = "0x1107584")]
		public static void SetLogLevel(LogCategory category, LogLevel level)
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x11075F8", Offset = "0x11075F8", VA = "0x11075F8")]
		public static void SetLogLevel(int category, LogLevel level)
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x1107680", Offset = "0x1107680", VA = "0x1107680")]
		public static LogLevel GetLogLevel(LogCategory category)
		{
			return default(LogLevel);
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0x11070FC", Offset = "0x11070FC", VA = "0x11070FC")]
		public static LogLevel GetLogLevel(int category)
		{
			return default(LogLevel);
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x1103CF0", Offset = "0x1103CF0", VA = "0x1103CF0")]
		internal static void WriteMultithreadedLogs()
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x11072F4", Offset = "0x11072F4", VA = "0x11072F4")]
		internal static void SendLogMessage(string message, LogLevel level)
		{
		}
	}
	[Token(Token = "0x20001A7")]
	public class Log
	{
		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string _traceFormat;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly string _debugFormat;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly string _basicFormat;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly int _category;

		[Token(Token = "0x17000108")]
		public bool IsTrace
		{
			[Token(Token = "0x6000B11")]
			[Address(RVA = "0x1107054", Offset = "0x1107054", VA = "0x1107054")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000109")]
		public bool IsDebug
		{
			[Token(Token = "0x6000B12")]
			[Address(RVA = "0x11070DC", Offset = "0x11070DC", VA = "0x11070DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010A")]
		public bool IsInfo
		{
			[Token(Token = "0x6000B13")]
			[Address(RVA = "0x11070E4", Offset = "0x11070E4", VA = "0x11070E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010B")]
		public bool IsWarn
		{
			[Token(Token = "0x6000B14")]
			[Address(RVA = "0x11070EC", Offset = "0x11070EC", VA = "0x11070EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010C")]
		public bool IsError
		{
			[Token(Token = "0x6000B15")]
			[Address(RVA = "0x11070F4", Offset = "0x11070F4", VA = "0x11070F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x1106E68", Offset = "0x1106E68", VA = "0x1106E68")]
		internal Log(int category, string name)
		{
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x110705C", Offset = "0x110705C", VA = "0x110705C")]
		[DebuggerHidden]
		private bool ShouldLog(LogLevel level)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x1107174", Offset = "0x1107174", VA = "0x1107174")]
		[DebuggerHidden]
		private void WriteLog(LogLevel level, string message)
		{
		}

		[Token(Token = "0x6000B18")]
		[DebuggerHidden]
		private void WriteLogFormat<TA>(LogLevel level, string format, [CanBeNull] TA p0)
		{
		}

		[Token(Token = "0x6000B19")]
		[DebuggerHidden]
		private void WriteLogFormat<TA, TB>(LogLevel level, string format, [CanBeNull] TA p0, [CanBeNull] TB p1)
		{
		}

		[Token(Token = "0x6000B1A")]
		[DebuggerHidden]
		private void WriteLogFormat<TA, TB, TC>(LogLevel level, string format, [CanBeNull] TA p0, [CanBeNull] TB p1, [CanBeNull] TC p2)
		{
		}

		[Token(Token = "0x6000B1B")]
		[DebuggerHidden]
		private void WriteLogFormat<TA, TB, TC, TD>(LogLevel level, string format, [CanBeNull] TA p0, [CanBeNull] TB p1, [CanBeNull] TC p2, [CanBeNull] TD p3)
		{
		}

		[Token(Token = "0x6000B1C")]
		[DebuggerHidden]
		private void WriteLogFormat<TA, TB, TC, TD, TE>(LogLevel level, string format, [CanBeNull] TA p0, [CanBeNull] TB p1, [CanBeNull] TC p2, [CanBeNull] TD p3, [CanBeNull] TE p4)
		{
		}

		[Token(Token = "0x6000B1D")]
		[DebuggerHidden]
		private void WriteLogFormat<TA, TB, TC, TD, TE, TF>(LogLevel level, string format, [CanBeNull] TA p0, [CanBeNull] TB p1, [CanBeNull] TC p2, [CanBeNull] TD p3, [CanBeNull] TE p4, [CanBeNull] TF p5)
		{
		}

		[Token(Token = "0x6000B1E")]
		[DebuggerHidden]
		private void WriteLogFormat<TA, TB, TC, TD, TE, TF, TG>(LogLevel level, string format, [CanBeNull] TA p0, [CanBeNull] TB p1, [CanBeNull] TC p2, [CanBeNull] TD p3, [CanBeNull] TE p4, [CanBeNull] TF p5, [CanBeNull] TG p6)
		{
		}

		[Token(Token = "0x6000B1F")]
		[DebuggerHidden]
		private void WriteLogFormat<TA, TB, TC, TD, TE, TF, TG, TH>(LogLevel level, string format, [CanBeNull] TA p0, [CanBeNull] TB p1, [CanBeNull] TC p2, [CanBeNull] TD p3, [CanBeNull] TE p4, [CanBeNull] TF p5, [CanBeNull] TG p6, [CanBeNull] TH p7)
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x11073DC", Offset = "0x11073DC", VA = "0x11073DC")]
		[DebuggerHidden]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB3CBE0", Offset = "0xB3CBE0")]
		public void Trace(string message)
		{
		}

		[Token(Token = "0x6000B21")]
		[DebuggerHidden]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB3CC2C", Offset = "0xB3CC2C")]
		public void Trace<TA>(string format, [CanBeNull] TA p0)
		{
		}

		[Token(Token = "0x6000B22")]
		[DebuggerHidden]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB3CC78", Offset = "0xB3CC78")]
		public void Trace<TA, TB>(string format, [CanBeNull] TA p0, [CanBeNull] TB p1)
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x11073E8", Offset = "0x11073E8", VA = "0x11073E8")]
		[DebuggerHidden]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB3CCC4", Offset = "0xB3CCC4")]
		public void Debug(string message)
		{
		}

		[Token(Token = "0x6000B24")]
		[DebuggerHidden]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB3CD10", Offset = "0xB3CD10")]
		public void Debug<TA>(string format, [CanBeNull] TA p0)
		{
		}

		[Token(Token = "0x6000B25")]
		[DebuggerHidden]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB3CD5C", Offset = "0xB3CD5C")]
		public void Debug<TA, TB>(string format, [CanBeNull] TA p0, [CanBeNull] TB p1)
		{
		}

		[Token(Token = "0x6000B26")]
		[DebuggerHidden]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB3CDA8", Offset = "0xB3CDA8")]
		public void Debug<TA, TB, TC>(string format, [CanBeNull] TA p0, [CanBeNull] TB p1, [CanBeNull] TC p2)
		{
		}

		[Token(Token = "0x6000B27")]
		[DebuggerHidden]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB3CDF4", Offset = "0xB3CDF4")]
		public void Debug<TA, TB, TC, TD>(string format, [CanBeNull] TA p0, [CanBeNull] TB p1, [CanBeNull] TC p2, [CanBeNull] TD p3)
		{
		}

		[Token(Token = "0x6000B28")]
		[DebuggerHidden]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB3CE40", Offset = "0xB3CE40")]
		public void Debug<TA, TB, TC, TD, TE>(string format, [CanBeNull] TA p0, [CanBeNull] TB p1, [CanBeNull] TC p2, [CanBeNull] TD p3, [CanBeNull] TE p4)
		{
		}

		[Token(Token = "0x6000B29")]
		[DebuggerHidden]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB3CE8C", Offset = "0xB3CE8C")]
		public void Debug<TA, TB, TC, TD, TE, TF>(string format, [CanBeNull] TA p0, [CanBeNull] TB p1, [CanBeNull] TC p2, [CanBeNull] TD p3, [CanBeNull] TE p4, [CanBeNull] TF p5)
		{
		}

		[Token(Token = "0x6000B2A")]
		[DebuggerHidden]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB3CED8", Offset = "0xB3CED8")]
		public void Debug<TA, TB, TC, TD, TE, TF, TG>(string format, [CanBeNull] TA p0, [CanBeNull] TB p1, [CanBeNull] TC p2, [CanBeNull] TD p3, [CanBeNull] TE p4, [CanBeNull] TF p5, [CanBeNull] TG p6)
		{
		}

		[Token(Token = "0x6000B2B")]
		[DebuggerHidden]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xB3CF24", Offset = "0xB3CF24")]
		public void Debug<TA, TB, TC, TD, TE, TF, TG, TH>(string format, [CanBeNull] TA p0, [CanBeNull] TB p1, [CanBeNull] TC p2, [CanBeNull] TD p3, [CanBeNull] TE p4, [CanBeNull] TF p5, [CanBeNull] TG p6, [CanBeNull] TH p7)
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x1103FB0", Offset = "0x1103FB0", VA = "0x1103FB0")]
		[DebuggerHidden]
		public void Info(string message)
		{
		}

		[Token(Token = "0x6000B2D")]
		[DebuggerHidden]
		public void Info<TA>(string format, [CanBeNull] TA p0)
		{
		}

		[Token(Token = "0x6000B2E")]
		[DebuggerHidden]
		public void Info<TA, TB>(string format, [CanBeNull] TA p0, [CanBeNull] TB p1)
		{
		}

		[Token(Token = "0x6000B2F")]
		[DebuggerHidden]
		public void Info<TA, TB, TC>(string format, [CanBeNull] TA p0, [CanBeNull] TB p1, [CanBeNull] TC p2)
		{
		}

		[Token(Token = "0x6000B30")]
		[DebuggerHidden]
		public void Info<TA, TB, TC, TD>(string format, [CanBeNull] TA p0, [CanBeNull] TB p1, [CanBeNull] TC p2, [CanBeNull] TD p3)
		{
		}

		[Token(Token = "0x6000B31")]
		[DebuggerHidden]
		public void Info<TA, TB, TC, TD, TE>(string format, [CanBeNull] TA p0, [CanBeNull] TB p1, [CanBeNull] TC p2, [CanBeNull] TD p3, [CanBeNull] TE p4)
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0x1104328", Offset = "0x1104328", VA = "0x1104328")]
		[DebuggerHidden]
		public void Warn(string message)
		{
		}

		[Token(Token = "0x6000B33")]
		[DebuggerHidden]
		public void Warn<TA>(string format, [CanBeNull] TA p0)
		{
		}

		[Token(Token = "0x6000B34")]
		[DebuggerHidden]
		public void Warn<TA, TB>(string format, [CanBeNull] TA p0, [CanBeNull] TB p1)
		{
		}

		[Token(Token = "0x6000B35")]
		[DebuggerHidden]
		public void Warn<TA, TB, TC>(string format, [CanBeNull] TA p0, [CanBeNull] TB p1, [CanBeNull] TC p2)
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x1103FA4", Offset = "0x1103FA4", VA = "0x1103FA4")]
		[DebuggerHidden]
		public void Error(string message)
		{
		}

		[Token(Token = "0x6000B37")]
		[DebuggerHidden]
		public void Error<TA>(string format, [CanBeNull] TA p0)
		{
		}

		[Token(Token = "0x6000B38")]
		[DebuggerHidden]
		public void Error<TA, TB>(string format, [CanBeNull] TA p0, [CanBeNull] TB p1)
		{
		}

		[Token(Token = "0x6000B39")]
		[DebuggerHidden]
		public void Error<TA, TB, TC>(string format, [CanBeNull] TA p0, [CanBeNull] TB p1, [CanBeNull] TC p2)
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x1102E3C", Offset = "0x1102E3C", VA = "0x1102E3C")]
		[DebuggerHidden]
		[NotNull]
		public DissonanceException CreateUserErrorException(string problem, string likelyCause, string documentationLink, string guid)
		{
			return null;
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x1103DF4", Offset = "0x1103DF4", VA = "0x1103DF4")]
		[DebuggerHidden]
		[NotNull]
		public string UserErrorMessage(string problem, string likelyCause, string documentationLink, string guid)
		{
			return null;
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x11042C4", Offset = "0x11042C4", VA = "0x11042C4")]
		[DebuggerHidden]
		[NotNull]
		public string PossibleBugMessage(string problem, string guid)
		{
			return null;
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x11073F4", Offset = "0x11073F4", VA = "0x11073F4")]
		[DebuggerHidden]
		[NotNull]
		public DissonanceException CreatePossibleBugException(string problem, string guid)
		{
			return null;
		}

		[Token(Token = "0x6000B3E")]
		[DebuggerHidden]
		[NotNull]
		public Exception CreatePossibleBugException<T>([NotNull] Func<string, T> factory, string problem, string guid) where T : Exception
		{
			return null;
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x1107474", Offset = "0x1107474", VA = "0x1107474")]
		[AttributeAttribute(Name = "ContractAnnotationAttribute", RVA = "0xB3D168", Offset = "0xB3D168")]
		public bool AssertAndLogWarn(bool assertion, string msg)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B40")]
		[AttributeAttribute(Name = "ContractAnnotationAttribute", RVA = "0xB3D1A0", Offset = "0xB3D1A0")]
		public bool AssertAndLogWarn<TA>(bool assertion, string format, TA arg0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x11044D4", Offset = "0x11044D4", VA = "0x11044D4")]
		[AttributeAttribute(Name = "ContractAnnotationAttribute", RVA = "0xB3D1D8", Offset = "0xB3D1D8")]
		public bool AssertAndLogError(bool assertion, string guid, string msg)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B42")]
		[AttributeAttribute(Name = "ContractAnnotationAttribute", RVA = "0xB3D210", Offset = "0xB3D210")]
		public bool AssertAndLogError<TA>(bool assertion, string guid, string format, TA arg0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x11074A4", Offset = "0x11074A4", VA = "0x11074A4")]
		[AttributeAttribute(Name = "ContractAnnotationAttribute", RVA = "0xB3D248", Offset = "0xB3D248")]
		public void AssertAndThrowPossibleBug(bool assertion, string guid, string msg)
		{
		}

		[Token(Token = "0x6000B44")]
		[AttributeAttribute(Name = "ContractAnnotationAttribute", RVA = "0xB3D280", Offset = "0xB3D280")]
		public void AssertAndThrowPossibleBug<TA>(bool assertion, string guid, string format, TA arg0)
		{
		}

		[Token(Token = "0x6000B45")]
		[AttributeAttribute(Name = "ContractAnnotationAttribute", RVA = "0xB3D2B8", Offset = "0xB3D2B8")]
		public void AssertAndThrowPossibleBug<TA, TB>(bool assertion, string guid, string format, TA arg0, TB arg1)
		{
		}

		[Token(Token = "0x6000B46")]
		[AttributeAttribute(Name = "ContractAnnotationAttribute", RVA = "0xB3D2F0", Offset = "0xB3D2F0")]
		public void AssertAndThrowPossibleBug<TA, TB, TC>(bool assertion, string guid, string format, TA arg0, TB arg1, TC arg2)
		{
		}
	}
	[Token(Token = "0x20001A8")]
	internal class PacketLossMonitor
	{
		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ReadOnlyCollection<VoicePlayerState> _players;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DateTime _lastUpdatedPacketLoss;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _lastUpdatedPlayerCount;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<float> _tmpLossValues;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB367D4", Offset = "0xB367D4")]
		private float <PacketLoss>k__BackingField;

		[Token(Token = "0x1700010D")]
		public float PacketLoss
		{
			[Token(Token = "0x6000B47")]
			[Address(RVA = "0x110ED50", Offset = "0x110ED50", VA = "0x110ED50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D328", Offset = "0xB3D328")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B48")]
			[Address(RVA = "0x110ED58", Offset = "0x110ED58", VA = "0x110ED58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D338", Offset = "0xB3D338")]
			private set
			{
			}
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x110ED60", Offset = "0x110ED60", VA = "0x110ED60")]
		public PacketLossMonitor(ReadOnlyCollection<VoicePlayerState> players)
		{
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x110EE1C", Offset = "0x110EE1C", VA = "0x110EE1C")]
		public void Update([Optional] DateTime? utcNow)
		{
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x110EF00", Offset = "0x110EF00", VA = "0x110EF00")]
		private bool CheckTime(DateTime now)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x110EFC0", Offset = "0x110EFC0", VA = "0x110EFC0")]
		private bool CheckCount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x110F028", Offset = "0x110F028", VA = "0x110F028")]
		private float? CalculatePacketLoss()
		{
			return null;
		}
	}
	[Token(Token = "0x20001A9")]
	internal class PlaybackPool
	{
		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Pool<VoicePlayback> _pool;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IPriorityManager _priority;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IVolumeProvider _volume;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject _prefab;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _parent;

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x11029B4", Offset = "0x11029B4", VA = "0x11029B4")]
		public PlaybackPool(IPriorityManager priority, IVolumeProvider volume)
		{
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x1103FBC", Offset = "0x1103FBC", VA = "0x1103FBC")]
		public void Start(GameObject playbackPrefab, Transform transform)
		{
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x110F26C", Offset = "0x110F26C", VA = "0x110F26C")]
		[NotNull]
		private VoicePlayback CreatePlayback()
		{
			return null;
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x1104ED8", Offset = "0x1104ED8", VA = "0x1104ED8")]
		[NotNull]
		public VoicePlayback Get([NotNull] string playerId)
		{
			return null;
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x1104ADC", Offset = "0x1104ADC", VA = "0x1104ADC")]
		public void Put([NotNull] VoicePlayback playback)
		{
		}
	}
	[Token(Token = "0x20001AA")]
	internal class PlayerCollection
	{
		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Dictionary<string, VoicePlayerState> _playersLookup;

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<VoicePlayerState> _players;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ReadOnlyCollection<VoicePlayerState> _playersReadOnly;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB367E4", Offset = "0xB367E4")]
		private LocalVoicePlayerState <Local>k__BackingField;

		[Token(Token = "0x1700010E")]
		[NotNull]
		public ReadOnlyCollection<VoicePlayerState> Readonly
		{
			[Token(Token = "0x6000B53")]
			[Address(RVA = "0x110F930", Offset = "0x110F930", VA = "0x110F930")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010F")]
		public LocalVoicePlayerState Local
		{
			[Token(Token = "0x6000B54")]
			[Address(RVA = "0x110F938", Offset = "0x110F938", VA = "0x110F938")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D368", Offset = "0xB3D368")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B55")]
			[Address(RVA = "0x110F940", Offset = "0x110F940", VA = "0x110F940")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D378", Offset = "0xB3D378")]
			private set
			{
			}
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x11028E0", Offset = "0x11028E0", VA = "0x11028E0")]
		public PlayerCollection()
		{
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x1103FC4", Offset = "0x1103FC4", VA = "0x1103FC4")]
		public void Start([NotNull] string name, [NotNull] IAmplitudeProvider micAmplitude, [NotNull] Rooms rooms, [NotNull] RoomChannels roomChannels, [NotNull] PlayerChannels playerChannels)
		{
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x1105138", Offset = "0x1105138", VA = "0x1105138")]
		public void Add([NotNull] VoicePlayerState state)
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x1104998", Offset = "0x1104998", VA = "0x1104998")]
		[CanBeNull]
		public VoicePlayerState Remove([NotNull] string playerId)
		{
			return null;
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x1104334", Offset = "0x1104334", VA = "0x1104334")]
		public bool TryGet([NotNull] string playerId, [NotNull] out VoicePlayerState state)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0x1105434", Offset = "0x1105434", VA = "0x1105434")]
		public void Update()
		{
		}
	}
	[Token(Token = "0x20001AB")]
	internal class PlayerTrackerManager
	{
		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Dictionary<string, IDissonancePlayer> _unlinkedPlayerTrackers;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayerCollection _players;

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x1102C28", Offset = "0x1102C28", VA = "0x1102C28")]
		public PlayerTrackerManager([NotNull] PlayerCollection players)
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x110527C", Offset = "0x110527C", VA = "0x110527C")]
		public void AddPlayer([NotNull] VoicePlayerState state)
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x1104C08", Offset = "0x1104C08", VA = "0x1104C08")]
		public void RemovePlayer([NotNull] VoicePlayerState state)
		{
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x1105540", Offset = "0x1105540", VA = "0x1105540")]
		public void AddTracker([NotNull] IDissonancePlayer player)
		{
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x1105728", Offset = "0x1105728", VA = "0x1105728")]
		public void RemoveTracker([NotNull] IDissonancePlayer player)
		{
		}
	}
	[Token(Token = "0x20001AC")]
	public static class RoomIdConversion
	{
		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x13F8DC8", Offset = "0x13F8DC8", VA = "0x13F8DC8")]
		public static ushort ToRoomId([NotNull] this string name)
		{
			return default(ushort);
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x13F8E6C", Offset = "0x13F8E6C", VA = "0x13F8E6C")]
		private static ushort Hash16([NotNull] string str)
		{
			return default(ushort);
		}
	}
	[Token(Token = "0x20001AD")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xB30BC8", Offset = "0xB30BC8")]
	public sealed class Rooms
	{
		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly RoomMembershipComparer Comparer;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<RoomMembership> _rooms;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<string> _roomNames;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ReadOnlyCollection<string> _roomNamesReadonly;

		[Token(Token = "0x17000110")]
		internal ReadOnlyCollection<string> Memberships
		{
			[Token(Token = "0x6000B65")]
			[Address(RVA = "0x13F8F14", Offset = "0x13F8F14", VA = "0x13F8F14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000111")]
		public int Count
		{
			[Token(Token = "0x6000B6B")]
			[Address(RVA = "0x13F927C", Offset = "0x13F927C", VA = "0x13F927C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000112")]
		internal RoomMembership Item
		{
			[Token(Token = "0x6000B6C")]
			[Address(RVA = "0x13F92CC", Offset = "0x13F92CC", VA = "0x13F92CC")]
			get
			{
				return default(RoomMembership);
			}
		}

		[Token(Token = "0x14000004")]
		public event Action<string> JoinedRoom
		{
			[Token(Token = "0x6000B66")]
			[Address(RVA = "0x13F8F1C", Offset = "0x13F8F1C", VA = "0x13F8F1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D3A8", Offset = "0xB3D3A8")]
			add
			{
			}
			[Token(Token = "0x6000B67")]
			[Address(RVA = "0x13F8FC0", Offset = "0x13F8FC0", VA = "0x13F8FC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D3B8", Offset = "0xB3D3B8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000005")]
		public event Action<string> LeftRoom
		{
			[Token(Token = "0x6000B68")]
			[Address(RVA = "0x13F9064", Offset = "0x13F9064", VA = "0x13F9064")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D3C8", Offset = "0xB3D3C8")]
			add
			{
			}
			[Token(Token = "0x6000B69")]
			[Address(RVA = "0x13F9108", Offset = "0x13F9108", VA = "0x13F9108")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D3D8", Offset = "0xB3D3D8")]
			remove
			{
			}
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x13F91AC", Offset = "0x13F91AC", VA = "0x13F91AC")]
		internal Rooms()
		{
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x13F9344", Offset = "0x13F9344", VA = "0x13F9344")]
		public bool Contains([NotNull] string roomName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x13F9518", Offset = "0x13F9518", VA = "0x13F9518")]
		public RoomMembership Join([NotNull] string roomName)
		{
			return default(RoomMembership);
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x13F97A0", Offset = "0x13F97A0", VA = "0x13F97A0")]
		public bool Leave(RoomMembership membership)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x13F96E4", Offset = "0x13F96E4", VA = "0x13F96E4")]
		private void OnJoinedRoom(RoomMembership membership)
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x13F98F4", Offset = "0x13F98F4", VA = "0x13F98F4")]
		private void OnLeftRoom(RoomMembership membership)
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x13F99A8", Offset = "0x13F99A8", VA = "0x13F99A8")]
		[CanBeNull]
		internal string Name(ushort roomId)
		{
			return null;
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x13F940C", Offset = "0x13F940C", VA = "0x13F940C")]
		private int? FindById(ushort id)
		{
			return null;
		}
	}
	[Token(Token = "0x20001AE")]
	public struct RoomMembership
	{
		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly string _name;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly ushort _roomId;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int Count;

		[Token(Token = "0x17000113")]
		[NotNull]
		public string RoomName
		{
			[Token(Token = "0x6000B76")]
			[Address(RVA = "0xC2E710", Offset = "0xC2E710", VA = "0xC2E710")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000114")]
		public ushort RoomId
		{
			[Token(Token = "0x6000B77")]
			[Address(RVA = "0xC2E718", Offset = "0xC2E718", VA = "0xC2E718")]
			get
			{
				return default(ushort);
			}
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0xC2E6DC", Offset = "0xC2E6DC", VA = "0xC2E6DC")]
		internal RoomMembership([NotNull] string name, int count)
		{
		}
	}
	[Token(Token = "0x20001AF")]
	internal class RoomMembershipComparer : IComparer<RoomMembership>
	{
		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x13F8EE0", Offset = "0x13F8EE0", VA = "0x13F8EE0", Slot = "4")]
		public int Compare(RoomMembership x, RoomMembership y)
		{
			return default(int);
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x13F8F0C", Offset = "0x13F8F0C", VA = "0x13F8F0C")]
		public RoomMembershipComparer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B0")]
	public class SemanticVersion : IComparable<SemanticVersion>, IEquatable<SemanticVersion>
	{
		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private int _major;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private int _minor;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int _patch;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string _tag;

		[Token(Token = "0x17000115")]
		public int Major
		{
			[Token(Token = "0x6000B7A")]
			[Address(RVA = "0x13F9B68", Offset = "0x13F9B68", VA = "0x13F9B68")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000116")]
		public int Minor
		{
			[Token(Token = "0x6000B7B")]
			[Address(RVA = "0x13F9B70", Offset = "0x13F9B70", VA = "0x13F9B70")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000117")]
		public int Patch
		{
			[Token(Token = "0x6000B7C")]
			[Address(RVA = "0x13F9B78", Offset = "0x13F9B78", VA = "0x13F9B78")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000118")]
		public string Tag
		{
			[Token(Token = "0x6000B7D")]
			[Address(RVA = "0x13F9B80", Offset = "0x13F9B80", VA = "0x13F9B80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x13F9B88", Offset = "0x13F9B88", VA = "0x13F9B88")]
		public SemanticVersion()
		{
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x13F9B90", Offset = "0x13F9B90", VA = "0x13F9B90")]
		public SemanticVersion(int major, int minor, int patch, [Optional][CanBeNull] string tag)
		{
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x13F9BE0", Offset = "0x13F9BE0", VA = "0x13F9BE0", Slot = "4")]
		public int CompareTo([CanBeNull] SemanticVersion other)
		{
			return default(int);
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x13F9CEC", Offset = "0x13F9CEC", VA = "0x13F9CEC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x13F9EF8", Offset = "0x13F9EF8", VA = "0x13F9EF8", Slot = "5")]
		public bool Equals(SemanticVersion other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x13F9F30", Offset = "0x13F9F30", VA = "0x13F9F30", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0x13FA048", Offset = "0x13FA048", VA = "0x13FA048", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B1")]
	public sealed class TextChat
	{
		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Func<ICommsNetwork> _getNetwork;

		[Token(Token = "0x14000006")]
		public event Action<TextMessage> MessageReceived
		{
			[Token(Token = "0x6000B88")]
			[Address(RVA = "0x13FA454", Offset = "0x13FA454", VA = "0x13FA454")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D3F8", Offset = "0xB3D3F8")]
			add
			{
			}
			[Token(Token = "0x6000B89")]
			[Address(RVA = "0x13FA4F8", Offset = "0x13FA4F8", VA = "0x13FA4F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D408", Offset = "0xB3D408")]
			remove
			{
			}
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x13FA0E0", Offset = "0x13FA0E0", VA = "0x13FA0E0")]
		internal TextChat([NotNull] Func<ICommsNetwork> getNetwork)
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x13FA17C", Offset = "0x13FA17C", VA = "0x13FA17C")]
		public void Send([NotNull] string roomName, [NotNull] string message)
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x13FA2E8", Offset = "0x13FA2E8", VA = "0x13FA2E8")]
		public void Whisper([NotNull] string playerName, [NotNull] string message)
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x13FA59C", Offset = "0x13FA59C", VA = "0x13FA59C")]
		internal void OnMessageReceived(TextMessage obj)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B2")]
	public class TokenSet : IEnumerable<string>, IEnumerable
	{
		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IComparer<string> SortOrder;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<string> _tokens;

		[Token(Token = "0x17000119")]
		public int Count
		{
			[Token(Token = "0x6000B8B")]
			[Address(RVA = "0x13FA760", Offset = "0x13FA760", VA = "0x13FA760")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000007")]
		public event Action<string> TokenRemoved
		{
			[Token(Token = "0x6000B8C")]
			[Address(RVA = "0x13FA7B0", Offset = "0x13FA7B0", VA = "0x13FA7B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D418", Offset = "0xB3D418")]
			add
			{
			}
			[Token(Token = "0x6000B8D")]
			[Address(RVA = "0x13FA854", Offset = "0x13FA854", VA = "0x13FA854")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D428", Offset = "0xB3D428")]
			remove
			{
			}
		}

		[Token(Token = "0x14000008")]
		public event Action<string> TokenAdded
		{
			[Token(Token = "0x6000B8E")]
			[Address(RVA = "0x13FA8F8", Offset = "0x13FA8F8", VA = "0x13FA8F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D438", Offset = "0xB3D438")]
			add
			{
			}
			[Token(Token = "0x6000B8F")]
			[Address(RVA = "0x13FA99C", Offset = "0x13FA99C", VA = "0x13FA99C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D448", Offset = "0xB3D448")]
			remove
			{
			}
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0x13FAA40", Offset = "0x13FAA40", VA = "0x13FAA40")]
		private int Find([CanBeNull] string item)
		{
			return default(int);
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x13FAAF0", Offset = "0x13FAAF0", VA = "0x13FAAF0")]
		public bool ContainsToken(string token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x13FAB0C", Offset = "0x13FAB0C", VA = "0x13FAB0C")]
		public bool AddToken([NotNull] string token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x13FAC14", Offset = "0x13FAC14", VA = "0x13FAC14")]
		public bool RemoveToken([NotNull] string token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x13FAD04", Offset = "0x13FAD04", VA = "0x13FAD04")]
		public bool IntersectsWith([NotNull] TokenSet other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x13FAF08", Offset = "0x13FAF08", VA = "0x13FAF08", Slot = "4")]
		public IEnumerator<string> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x13FAF94", Offset = "0x13FAF94", VA = "0x13FAF94", Slot = "5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x13FAF98", Offset = "0x13FAF98", VA = "0x13FAF98")]
		public TokenSet()
		{
		}
	}
	[Token(Token = "0x20001B3")]
	public interface IAccessTokenCollection
	{
		[Token(Token = "0x1700011A")]
		IEnumerable<string> Tokens
		{
			[Token(Token = "0x6000B99")]
			get;
		}

		[Token(Token = "0x6000B9A")]
		bool ContainsToken([CanBeNull] string token);

		[Token(Token = "0x6000B9B")]
		bool AddToken([NotNull] string token);

		[Token(Token = "0x6000B9C")]
		bool RemoveToken([NotNull] string token);
	}
	[Token(Token = "0x20001B4")]
	public struct Unit
	{
		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Unit None;
	}
	[Token(Token = "0x20001B5")]
	public abstract class VoicePlayerState
	{
		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string _name;

		[Token(Token = "0x1700011B")]
		[NotNull]
		public string Name
		{
			[Token(Token = "0x6000BA9")]
			[Address(RVA = "0x13FC9D4", Offset = "0x13FC9D4", VA = "0x13FC9D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011C")]
		public abstract bool IsConnected
		{
			[Token(Token = "0x6000BAA")]
			get;
		}

		[Token(Token = "0x1700011D")]
		public abstract bool IsSpeaking
		{
			[Token(Token = "0x6000BAB")]
			get;
		}

		[Token(Token = "0x1700011E")]
		public abstract float Amplitude
		{
			[Token(Token = "0x6000BAC")]
			get;
		}

		[Token(Token = "0x1700011F")]
		public abstract ChannelPriority? SpeakerPriority
		{
			[Token(Token = "0x6000BAD")]
			get;
		}

		[Token(Token = "0x17000120")]
		public abstract float Volume
		{
			[Token(Token = "0x6000BAE")]
			get;
			[Token(Token = "0x6000BAF")]
			set;
		}

		[Token(Token = "0x17000121")]
		public abstract bool IsLocallyMuted
		{
			[Token(Token = "0x6000BB0")]
			get;
			[Token(Token = "0x6000BB1")]
			set;
		}

		[Token(Token = "0x17000122")]
		[NotNull]
		public abstract ReadOnlyCollection<string> Rooms
		{
			[Token(Token = "0x6000BB2")]
			get;
		}

		[Token(Token = "0x17000123")]
		[CanBeNull]
		public IVoicePlayback Playback
		{
			[Token(Token = "0x6000BB3")]
			[Address(RVA = "0x13FC9DC", Offset = "0x13FC9DC", VA = "0x13FC9DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000124")]
		[CanBeNull]
		internal abstract IVoicePlaybackInternal PlaybackInternal
		{
			[Token(Token = "0x6000BB4")]
			get;
		}

		[Token(Token = "0x17000125")]
		[CanBeNull]
		public abstract IDissonancePlayer Tracker
		{
			[Token(Token = "0x6000BB5")]
			get;
			[Token(Token = "0x6000BB6")]
			internal set;
		}

		[Token(Token = "0x17000126")]
		internal abstract float? PacketLoss
		{
			[Token(Token = "0x6000BB7")]
			get;
		}

		[Token(Token = "0x14000009")]
		public event Action<VoicePlayerState> OnStartedSpeaking
		{
			[Token(Token = "0x6000B9E")]
			[Address(RVA = "0x13FC340", Offset = "0x13FC340", VA = "0x13FC340")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D458", Offset = "0xB3D458")]
			add
			{
			}
			[Token(Token = "0x6000B9F")]
			[Address(RVA = "0x13FC3E4", Offset = "0x13FC3E4", VA = "0x13FC3E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D468", Offset = "0xB3D468")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000A")]
		public event Action<VoicePlayerState> OnStoppedSpeaking
		{
			[Token(Token = "0x6000BA0")]
			[Address(RVA = "0x13FC488", Offset = "0x13FC488", VA = "0x13FC488")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D478", Offset = "0xB3D478")]
			add
			{
			}
			[Token(Token = "0x6000BA1")]
			[Address(RVA = "0x13FC52C", Offset = "0x13FC52C", VA = "0x13FC52C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D488", Offset = "0xB3D488")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000B")]
		public event Action<VoicePlayerState, string> OnEnteredRoom
		{
			[Token(Token = "0x6000BA2")]
			[Address(RVA = "0x13FC5D0", Offset = "0x13FC5D0", VA = "0x13FC5D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D498", Offset = "0xB3D498")]
			add
			{
			}
			[Token(Token = "0x6000BA3")]
			[Address(RVA = "0x13FC674", Offset = "0x13FC674", VA = "0x13FC674")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D4A8", Offset = "0xB3D4A8")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000C")]
		public event Action<VoicePlayerState, string> OnExitedRoom
		{
			[Token(Token = "0x6000BA4")]
			[Address(RVA = "0x13FC718", Offset = "0x13FC718", VA = "0x13FC718")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D4B8", Offset = "0xB3D4B8")]
			add
			{
			}
			[Token(Token = "0x6000BA5")]
			[Address(RVA = "0x13FC7BC", Offset = "0x13FC7BC", VA = "0x13FC7BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D4C8", Offset = "0xB3D4C8")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000D")]
		public event Action<VoicePlayerState> OnLeftSession
		{
			[Token(Token = "0x6000BA6")]
			[Address(RVA = "0x13FC860", Offset = "0x13FC860", VA = "0x13FC860")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D4D8", Offset = "0xB3D4D8")]
			add
			{
			}
			[Token(Token = "0x6000BA7")]
			[Address(RVA = "0x13FC904", Offset = "0x13FC904", VA = "0x13FC904")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D4E8", Offset = "0xB3D4E8")]
			remove
			{
			}
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x13FC9A8", Offset = "0x13FC9A8", VA = "0x13FC9A8")]
		internal VoicePlayerState(string name)
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x13FC9EC", Offset = "0x13FC9EC", VA = "0x13FC9EC")]
		internal void InvokeOnStoppedSpeaking()
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x13FCAF4", Offset = "0x13FCAF4", VA = "0x13FCAF4")]
		internal void InvokeOnStartedSpeaking()
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x13FCBFC", Offset = "0x13FCBFC", VA = "0x13FCBFC")]
		internal void InvokeOnLeftSession()
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x13FCC60", Offset = "0x13FCC60", VA = "0x13FCC60", Slot = "17")]
		internal virtual void InvokeOnEnteredRoom(RoomEvent evtData)
		{
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x13FCD38", Offset = "0x13FCD38", VA = "0x13FCD38", Slot = "18")]
		internal virtual void InvokeOnExitedRoom(RoomEvent evtData)
		{
		}

		[Token(Token = "0x6000BBD")]
		public abstract void GetSpeakingChannels([NotNull] List<RemoteChannel> output);

		[Token(Token = "0x6000BBE")]
		internal abstract void Update();
	}
	[Token(Token = "0x20001B6")]
	internal class LocalVoicePlayerState : VoicePlayerState
	{
		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly IAmplitudeProvider _micAmplitude;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly Rooms _rooms;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly RoomChannels _roomChannels;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly PlayerChannels _playerChannels;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB368E4", Offset = "0xB368E4")]
		private IDissonancePlayer <Tracker>k__BackingField;

		[Token(Token = "0x17000127")]
		public override bool IsConnected
		{
			[Token(Token = "0x6000BC5")]
			[Address(RVA = "0x11066DC", Offset = "0x11066DC", VA = "0x11066DC", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000128")]
		internal override IVoicePlaybackInternal PlaybackInternal
		{
			[Token(Token = "0x6000BC6")]
			[Address(RVA = "0x11066E4", Offset = "0x11066E4", VA = "0x11066E4", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000129")]
		public override bool IsLocallyMuted
		{
			[Token(Token = "0x6000BC7")]
			[Address(RVA = "0x11066EC", Offset = "0x11066EC", VA = "0x11066EC", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BC8")]
			[Address(RVA = "0x11066F4", Offset = "0x11066F4", VA = "0x11066F4", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x1700012A")]
		public override ReadOnlyCollection<string> Rooms
		{
			[Token(Token = "0x6000BC9")]
			[Address(RVA = "0x11067BC", Offset = "0x11067BC", VA = "0x11067BC", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012B")]
		public override IDissonancePlayer Tracker
		{
			[Token(Token = "0x6000BCA")]
			[Address(RVA = "0x11067D8", Offset = "0x11067D8", VA = "0x11067D8", Slot = "14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D4F8", Offset = "0xB3D4F8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BCB")]
			[Address(RVA = "0x11067E0", Offset = "0x11067E0", VA = "0x11067E0", Slot = "15")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D508", Offset = "0xB3D508")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700012C")]
		public override float Amplitude
		{
			[Token(Token = "0x6000BCC")]
			[Address(RVA = "0x11067E8", Offset = "0x11067E8", VA = "0x11067E8", Slot = "6")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700012D")]
		public override ChannelPriority? SpeakerPriority
		{
			[Token(Token = "0x6000BCD")]
			[Address(RVA = "0x11068A4", Offset = "0x11068A4", VA = "0x11068A4", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012E")]
		public override float Volume
		{
			[Token(Token = "0x6000BCE")]
			[Address(RVA = "0x11068AC", Offset = "0x11068AC", VA = "0x11068AC", Slot = "8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BCF")]
			[Address(RVA = "0x11068B4", Offset = "0x11068B4", VA = "0x11068B4", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x1700012F")]
		public override bool IsSpeaking
		{
			[Token(Token = "0x6000BD0")]
			[Address(RVA = "0x1106968", Offset = "0x1106968", VA = "0x1106968", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000130")]
		internal override float? PacketLoss
		{
			[Token(Token = "0x6000BD1")]
			[Address(RVA = "0x11069F4", Offset = "0x11069F4", VA = "0x11069F4", Slot = "16")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0x1106290", Offset = "0x1106290", VA = "0x1106290")]
		public LocalVoicePlayerState(string name, [NotNull] IAmplitudeProvider micAmplitude, [NotNull] Rooms rooms, [NotNull] RoomChannels roomChannels, [NotNull] PlayerChannels playerChannels)
		{
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0x11064A8", Offset = "0x11064A8", VA = "0x11064A8")]
		private void OnChannelOpened(string channel, ChannelProperties properties)
		{
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0x1106544", Offset = "0x1106544", VA = "0x1106544")]
		private void OnChannelClosed(string channel, ChannelProperties properties)
		{
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0x11065DC", Offset = "0x11065DC", VA = "0x11065DC")]
		private void OnLocallyEnteredRoom([NotNull] string room)
		{
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0x1106668", Offset = "0x1106668", VA = "0x1106668")]
		private void OnLocallyExitedRoom([NotNull] string room)
		{
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x11069FC", Offset = "0x11069FC", VA = "0x11069FC", Slot = "19")]
		public override void GetSpeakingChannels(List<RemoteChannel> channels)
		{
		}

		[Token(Token = "0x6000BD3")]
		private static RemoteChannel CreateRemoteChannel<T>([NotNull] T item, ChannelType type) where T : IChannel<string>
		{
			return default(RemoteChannel);
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x1106D24", Offset = "0x1106D24", VA = "0x1106D24", Slot = "20")]
		internal override void Update()
		{
		}
	}
	[Token(Token = "0x20001B7")]
	internal class RemoteVoicePlayerState : VoicePlayerState
	{
		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly IVoicePlaybackInternal _playback;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IDissonancePlayer _player;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly ReadOnlyCollection<string> EmptyRoomsList;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ReadOnlyCollection<string> _rooms;

		[Token(Token = "0x17000131")]
		public override bool IsConnected
		{
			[Token(Token = "0x6000BD7")]
			[Address(RVA = "0x110FC64", Offset = "0x110FC64", VA = "0x110FC64", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000132")]
		public override bool IsSpeaking
		{
			[Token(Token = "0x6000BD8")]
			[Address(RVA = "0x110FDAC", Offset = "0x110FDAC", VA = "0x110FDAC", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000133")]
		public override float Amplitude
		{
			[Token(Token = "0x6000BD9")]
			[Address(RVA = "0x110FE84", Offset = "0x110FE84", VA = "0x110FE84", Slot = "6")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000134")]
		public override float Volume
		{
			[Token(Token = "0x6000BDA")]
			[Address(RVA = "0x110FF5C", Offset = "0x110FF5C", VA = "0x110FF5C", Slot = "8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BDB")]
			[Address(RVA = "0x1110030", Offset = "0x1110030", VA = "0x1110030", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x17000135")]
		public override ChannelPriority? SpeakerPriority
		{
			[Token(Token = "0x6000BDC")]
			[Address(RVA = "0x1110170", Offset = "0x1110170", VA = "0x1110170", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000136")]
		internal override IVoicePlaybackInternal PlaybackInternal
		{
			[Token(Token = "0x6000BDD")]
			[Address(RVA = "0x1110340", Offset = "0x1110340", VA = "0x1110340", Slot = "13")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000137")]
		public override bool IsLocallyMuted
		{
			[Token(Token = "0x6000BDE")]
			[Address(RVA = "0x1110378", Offset = "0x1110378", VA = "0x1110378", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BDF")]
			[Address(RVA = "0x111044C", Offset = "0x111044C", VA = "0x111044C", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x17000138")]
		public override ReadOnlyCollection<string> Rooms
		{
			[Token(Token = "0x6000BE0")]
			[Address(RVA = "0x1110594", Offset = "0x1110594", VA = "0x1110594", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000139")]
		public override IDissonancePlayer Tracker
		{
			[Token(Token = "0x6000BE1")]
			[Address(RVA = "0x1110608", Offset = "0x1110608", VA = "0x1110608", Slot = "14")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BE2")]
			[Address(RVA = "0x1110610", Offset = "0x1110610", VA = "0x1110610", Slot = "15")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700013A")]
		internal override float? PacketLoss
		{
			[Token(Token = "0x6000BE3")]
			[Address(RVA = "0x1110900", Offset = "0x1110900", VA = "0x1110900", Slot = "16")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0x1104FD8", Offset = "0x1104FD8", VA = "0x1104FD8")]
		internal RemoteVoicePlayerState([NotNull] IVoicePlaybackInternal playback)
		{
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x11109C8", Offset = "0x11109C8", VA = "0x11109C8", Slot = "20")]
		internal override void Update()
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x1110CB4", Offset = "0x1110CB4", VA = "0x1110CB4", Slot = "19")]
		public override void GetSpeakingChannels(List<RemoteChannel> channels)
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x1110DE8", Offset = "0x1110DE8", VA = "0x1110DE8", Slot = "17")]
		internal override void InvokeOnEnteredRoom(RoomEvent evtData)
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x1110E1C", Offset = "0x1110E1C", VA = "0x1110E1C", Slot = "18")]
		internal override void InvokeOnExitedRoom(RoomEvent evtData)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B8")]
	public class VolumeFaderSettings
	{
		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private float _volume;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private long _fadeInTicks;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private long _fadeOutTicks;

		[Token(Token = "0x1700013B")]
		public float Volume
		{
			[Token(Token = "0x6000BE9")]
			[Address(RVA = "0x13FD1D8", Offset = "0x13FD1D8", VA = "0x13FD1D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BEA")]
			[Address(RVA = "0x13FD1E0", Offset = "0x13FD1E0", VA = "0x13FD1E0")]
			set
			{
			}
		}

		[Token(Token = "0x1700013C")]
		public TimeSpan FadeIn
		{
			[Token(Token = "0x6000BEB")]
			[Address(RVA = "0x13FBD00", Offset = "0x13FBD00", VA = "0x13FBD00")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x6000BEC")]
			[Address(RVA = "0x13FC330", Offset = "0x13FC330", VA = "0x13FC330")]
			set
			{
			}
		}

		[Token(Token = "0x1700013D")]
		public TimeSpan FadeOut
		{
			[Token(Token = "0x6000BED")]
			[Address(RVA = "0x13FBD08", Offset = "0x13FBD08", VA = "0x13FBD08")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x6000BEE")]
			[Address(RVA = "0x13FC338", Offset = "0x13FC338", VA = "0x13FC338")]
			set
			{
			}
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x13FC328", Offset = "0x13FC328", VA = "0x13FC328")]
		public VolumeFaderSettings()
		{
		}
	}
	[Token(Token = "0x20001B9")]
	public sealed class DissonanceComms : MonoBehaviour, IPriorityManager, IAccessTokenCollection, IChannelPriorityProvider, IVolumeProvider
	{
		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _started;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Rooms _rooms;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayerChannels _playerChannels;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly RoomChannels _roomChannels;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly TextChat _text;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly OpenChannelVolumeDuck _autoChannelDuck;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly PlayerTrackerManager _playerTrackers;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly PlaybackPool _playbackPool;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly PlayerCollection _players;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly CodecSettingsLoader _codecSettingsLoader;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly PriorityManager _playbackPriorityManager;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly CapturePipelineManager _capture;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ICommsNetwork _net;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string _localPlayerName;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB36924", Offset = "0xB36924")]
		private bool _isMuted;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		[SerializeField]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB3695C", Offset = "0xB3695C")]
		private bool _isDeafened;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[SerializeField]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB36994", Offset = "0xB36994")]
		private float _oneMinusBaseRemoteVoiceVolume;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB369CC", Offset = "0xB369CC")]
		private VoicePlayback _playbackPrefab;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB36A04", Offset = "0xB36A04")]
		private GameObject _playbackPrefab2;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB36A3C", Offset = "0xB36A3C")]
		private string _micName;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB36A74", Offset = "0xB36A74")]
		private ChannelPriority _playerPriority;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[AttributeAttribute(Name = "UsedImplicitlyAttribute", RVA = "0xB36AAC", Offset = "0xB36AAC")]
		private TokenSet _tokens;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly SemanticVersion Version;

		[Token(Token = "0x1700013E")]
		internal float PacketLoss
		{
			[Token(Token = "0x6000BFF")]
			[Address(RVA = "0x1102D08", Offset = "0x1102D08", VA = "0x1102D08")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700013F")]
		public string LocalPlayerName
		{
			[Token(Token = "0x6000C00")]
			[Address(RVA = "0x1102D24", Offset = "0x1102D24", VA = "0x1102D24")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C01")]
			[Address(RVA = "0x1102D2C", Offset = "0x1102D2C", VA = "0x1102D2C")]
			set
			{
			}
		}

		[Token(Token = "0x17000140")]
		public bool IsNetworkInitialized
		{
			[Token(Token = "0x6000C02")]
			[Address(RVA = "0x1102EDC", Offset = "0x1102EDC", VA = "0x1102EDC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000141")]
		[NotNull]
		public Rooms Rooms
		{
			[Token(Token = "0x6000C03")]
			[Address(RVA = "0x1102F98", Offset = "0x1102F98", VA = "0x1102F98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000142")]
		[NotNull]
		public PlayerChannels PlayerChannels
		{
			[Token(Token = "0x6000C04")]
			[Address(RVA = "0x1102FA0", Offset = "0x1102FA0", VA = "0x1102FA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000143")]
		[NotNull]
		public RoomChannels RoomChannels
		{
			[Token(Token = "0x6000C05")]
			[Address(RVA = "0x1102FA8", Offset = "0x1102FA8", VA = "0x1102FA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000144")]
		[NotNull]
		public TextChat Text
		{
			[Token(Token = "0x6000C06")]
			[Address(RVA = "0x1102FB0", Offset = "0x1102FB0", VA = "0x1102FB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000145")]
		[NotNull]
		public ReadOnlyCollection<VoicePlayerState> Players
		{
			[Token(Token = "0x6000C07")]
			[Address(RVA = "0x1102CEC", Offset = "0x1102CEC", VA = "0x1102CEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000146")]
		public ChannelPriority TopPrioritySpeaker
		{
			[Token(Token = "0x6000C08")]
			[Address(RVA = "0x1102FB8", Offset = "0x1102FB8", VA = "0x1102FB8")]
			get
			{
				return default(ChannelPriority);
			}
		}

		[Token(Token = "0x17000147")]
		[NotNull]
		public IEnumerable<string> Tokens
		{
			[Token(Token = "0x6000C09")]
			[Address(RVA = "0x1102FD4", Offset = "0x1102FD4", VA = "0x1102FD4", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000148")]
		public ChannelPriority PlayerPriority
		{
			[Token(Token = "0x6000C0A")]
			[Address(RVA = "0x1102FDC", Offset = "0x1102FDC", VA = "0x1102FDC")]
			get
			{
				return default(ChannelPriority);
			}
			[Token(Token = "0x6000C0B")]
			[Address(RVA = "0x1102FE4", Offset = "0x1102FE4", VA = "0x1102FE4")]
			set
			{
			}
		}

		[Token(Token = "0x17000149")]
		[CanBeNull]
		public string MicrophoneName
		{
			[Token(Token = "0x6000C0C")]
			[Address(RVA = "0x1102FEC", Offset = "0x1102FEC", VA = "0x1102FEC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C0D")]
			[Address(RVA = "0x1102FF4", Offset = "0x1102FF4", VA = "0x1102FF4")]
			set
			{
			}
		}

		[Token(Token = "0x1700014A")]
		[CanBeNull]
		public IMicrophoneCapture MicrophoneCapture
		{
			[Token(Token = "0x6000C0E")]
			[Address(RVA = "0x1103040", Offset = "0x1103040", VA = "0x1103040")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014B")]
		public GameObject PlaybackPrefab
		{
			[Token(Token = "0x6000C0F")]
			[Address(RVA = "0x110305C", Offset = "0x110305C", VA = "0x110305C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C10")]
			[Address(RVA = "0x1103064", Offset = "0x1103064", VA = "0x1103064")]
			set
			{
			}
		}

		[Token(Token = "0x1700014C")]
		public bool IsMuted
		{
			[Token(Token = "0x6000C11")]
			[Address(RVA = "0x11031E4", Offset = "0x11031E4", VA = "0x11031E4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C12")]
			[Address(RVA = "0x11031EC", Offset = "0x11031EC", VA = "0x11031EC")]
			set
			{
			}
		}

		[Token(Token = "0x1700014D")]
		public bool IsDeafened
		{
			[Token(Token = "0x6000C13")]
			[Address(RVA = "0x11031F8", Offset = "0x11031F8", VA = "0x11031F8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C14")]
			[Address(RVA = "0x1103200", Offset = "0x1103200", VA = "0x1103200")]
			set
			{
			}
		}

		[Token(Token = "0x1700014E")]
		public float RemoteVoiceVolume
		{
			[Token(Token = "0x6000C15")]
			[Address(RVA = "0x110320C", Offset = "0x110320C", VA = "0x110320C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C16")]
			[Address(RVA = "0x1103284", Offset = "0x1103284", VA = "0x1103284")]
			set
			{
			}
		}

		[Token(Token = "0x1700014F")]
		private ChannelPriority Dissonance.Audio.Playback.IPriorityManager.TopPriority
		{
			[Token(Token = "0x6000C31")]
			[Address(RVA = "0x1105C14", Offset = "0x1105C14", VA = "0x1105C14", Slot = "4")]
			get
			{
				return default(ChannelPriority);
			}
		}

		[Token(Token = "0x17000150")]
		private ChannelPriority Dissonance.Audio.Capture.IChannelPriorityProvider.DefaultChannelPriority
		{
			[Token(Token = "0x6000C32")]
			[Address(RVA = "0x1105C30", Offset = "0x1105C30", VA = "0x1105C30", Slot = "9")]
			get
			{
				return default(ChannelPriority);
			}
			[Token(Token = "0x6000C33")]
			[Address(RVA = "0x1105C38", Offset = "0x1105C38", VA = "0x1105C38", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x17000151")]
		private float Dissonance.Audio.Playback.IVolumeProvider.TargetVolume
		{
			[Token(Token = "0x6000C34")]
			[Address(RVA = "0x1105C40", Offset = "0x1105C40", VA = "0x1105C40", Slot = "11")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1400000E")]
		public event Action<VoicePlayerState> OnPlayerJoinedSession
		{
			[Token(Token = "0x6000BF0")]
			[Address(RVA = "0x1101D90", Offset = "0x1101D90", VA = "0x1101D90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D518", Offset = "0xB3D518")]
			add
			{
			}
			[Token(Token = "0x6000BF1")]
			[Address(RVA = "0x1101E34", Offset = "0x1101E34", VA = "0x1101E34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D528", Offset = "0xB3D528")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000F")]
		public event Action<VoicePlayerState> OnPlayerLeftSession
		{
			[Token(Token = "0x6000BF2")]
			[Address(RVA = "0x1101ED8", Offset = "0x1101ED8", VA = "0x1101ED8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D538", Offset = "0xB3D538")]
			add
			{
			}
			[Token(Token = "0x6000BF3")]
			[Address(RVA = "0x1101F7C", Offset = "0x1101F7C", VA = "0x1101F7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D548", Offset = "0xB3D548")]
			remove
			{
			}
		}

		[Token(Token = "0x14000010")]
		public event Action<VoicePlayerState> OnPlayerStartedSpeaking
		{
			[Token(Token = "0x6000BF4")]
			[Address(RVA = "0x1102020", Offset = "0x1102020", VA = "0x1102020")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D558", Offset = "0xB3D558")]
			add
			{
			}
			[Token(Token = "0x6000BF5")]
			[Address(RVA = "0x11020C4", Offset = "0x11020C4", VA = "0x11020C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D568", Offset = "0xB3D568")]
			remove
			{
			}
		}

		[Token(Token = "0x14000011")]
		public event Action<VoicePlayerState> OnPlayerStoppedSpeaking
		{
			[Token(Token = "0x6000BF6")]
			[Address(RVA = "0x1102168", Offset = "0x1102168", VA = "0x1102168")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D578", Offset = "0xB3D578")]
			add
			{
			}
			[Token(Token = "0x6000BF7")]
			[Address(RVA = "0x110220C", Offset = "0x110220C", VA = "0x110220C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D588", Offset = "0xB3D588")]
			remove
			{
			}
		}

		[Token(Token = "0x14000012")]
		public event Action<VoicePlayerState, string> OnPlayerEnteredRoom
		{
			[Token(Token = "0x6000BF8")]
			[Address(RVA = "0x11022B0", Offset = "0x11022B0", VA = "0x11022B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D598", Offset = "0xB3D598")]
			add
			{
			}
			[Token(Token = "0x6000BF9")]
			[Address(RVA = "0x1102354", Offset = "0x1102354", VA = "0x1102354")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D5A8", Offset = "0xB3D5A8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000013")]
		public event Action<VoicePlayerState, string> OnPlayerExitedRoom
		{
			[Token(Token = "0x6000BFA")]
			[Address(RVA = "0x11023F8", Offset = "0x11023F8", VA = "0x11023F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D5B8", Offset = "0xB3D5B8")]
			add
			{
			}
			[Token(Token = "0x6000BFB")]
			[Address(RVA = "0x110249C", Offset = "0x110249C", VA = "0x110249C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D5C8", Offset = "0xB3D5C8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000014")]
		public event Action<string> LocalPlayerNameChanged
		{
			[Token(Token = "0x6000BFC")]
			[Address(RVA = "0x1102540", Offset = "0x1102540", VA = "0x1102540")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D5D8", Offset = "0xB3D5D8")]
			add
			{
			}
			[Token(Token = "0x6000BFD")]
			[Address(RVA = "0x11025E4", Offset = "0x11025E4", VA = "0x11025E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D5E8", Offset = "0xB3D5E8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000015")]
		public event Action<string> TokenAdded
		{
			[Token(Token = "0x6000C29")]
			[Address(RVA = "0x11058F4", Offset = "0x11058F4", VA = "0x11058F4")]
			add
			{
			}
			[Token(Token = "0x6000C2A")]
			[Address(RVA = "0x1105910", Offset = "0x1105910", VA = "0x1105910")]
			remove
			{
			}
		}

		[Token(Token = "0x14000016")]
		public event Action<string> TokenRemoved
		{
			[Token(Token = "0x6000C2B")]
			[Address(RVA = "0x110592C", Offset = "0x110592C", VA = "0x110592C")]
			add
			{
			}
			[Token(Token = "0x6000C2C")]
			[Address(RVA = "0x1105948", Offset = "0x1105948", VA = "0x1105948")]
			remove
			{
			}
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x1102688", Offset = "0x1102688", VA = "0x1102688")]
		public DissonanceComms()
		{
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x1103354", Offset = "0x1103354", VA = "0x1103354")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x1104138", Offset = "0x1104138", VA = "0x1104138")]
		private IMicrophoneCapture GetOrAddMicrophone()
		{
			return null;
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0x11041BC", Offset = "0x11041BC", VA = "0x11041BC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0x11041C0", Offset = "0x11041C0", VA = "0x11041C0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0x11041C4", Offset = "0x11041C4", VA = "0x11041C4")]
		private void OnEditorPlaymodeChanged()
		{
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0x11041C8", Offset = "0x11041C8", VA = "0x11041C8")]
		private void Net_PlayerStoppedSpeaking([NotNull] string player)
		{
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0x11043E4", Offset = "0x11043E4", VA = "0x11043E4")]
		private void Net_PlayerStartedSpeaking([NotNull] string player)
		{
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x1104518", Offset = "0x1104518", VA = "0x1104518")]
		private void Net_PlayerRoomEvent(RoomEvent evt)
		{
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x1104670", Offset = "0x1104670", VA = "0x1104670")]
		private void Net_VoicePacketReceived(VoicePacket packet)
		{
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x1104838", Offset = "0x1104838", VA = "0x1104838")]
		private void Net_PlayerLeft([NotNull] string playerId)
		{
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0x1104D60", Offset = "0x1104D60", VA = "0x1104D60")]
		private void Net_PlayerJoined([NotNull] string playerId, CodecSettings codecSettings)
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x1100890", Offset = "0x1100890", VA = "0x1100890")]
		[CanBeNull]
		public VoicePlayerState FindPlayer([NotNull] string playerId)
		{
			return null;
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x1105374", Offset = "0x1105374", VA = "0x1105374")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x11054D4", Offset = "0x11054D4", VA = "0x11054D4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x11054F0", Offset = "0x11054F0", VA = "0x11054F0")]
		public void SubcribeToVoiceActivation([NotNull] IVoiceActivationListener listener)
		{
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x110550C", Offset = "0x110550C", VA = "0x110550C")]
		public void UnsubscribeFromVoiceActivation([NotNull] IVoiceActivationListener listener)
		{
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x1105528", Offset = "0x1105528", VA = "0x1105528")]
		public void TrackPlayerPosition([NotNull] IDissonancePlayer player)
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x1105710", Offset = "0x1105710", VA = "0x1105710")]
		public void StopTracking([NotNull] IDissonancePlayer player)
		{
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0x1105964", Offset = "0x1105964", VA = "0x1105964", Slot = "7")]
		public bool AddToken(string token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x1105A10", Offset = "0x1105A10", VA = "0x1105A10", Slot = "8")]
		public bool RemoveToken(string token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x1105ABC", Offset = "0x1105ABC", VA = "0x1105ABC", Slot = "6")]
		public bool ContainsToken(string token)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x1105B68", Offset = "0x1105B68", VA = "0x1105B68")]
		public bool HasAnyToken([NotNull] TokenSet tokens)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0x1105D98", Offset = "0x1105D98", VA = "0x1105D98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D608", Offset = "0xB3D608")]
		private ICommsNetwork <.ctor>b__44_0()
		{
			return null;
		}
	}
	[Token(Token = "0x20001BA")]
	internal static class DissonanceRootPath
	{
		[Token(Token = "0x4000A01")]
		private const string BasePath = "Assets/Plugins/Dissonance";

		[Token(Token = "0x4000A02")]
		internal const string BaseResourcePath = "Assets/Plugins/Dissonance/Resources";
	}
	[Token(Token = "0x20001BB")]
	public class VoiceBroadcastTrigger : BaseCommsTrigger, IVoiceActivationListener
	{
		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PlayerChannel? _playerChannel;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RoomChannel? _roomChannel;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool _isVadSpeaking;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private CommActivationMode? _previousMode;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private IDissonancePlayer _self;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Fader _activationFader;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private VolumeFaderSettings _activationFaderSettings;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Fader _triggerFader;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private VolumeFaderSettings _triggerFaderSettings;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private bool _broadcastPosition;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[SerializeField]
		private CommTriggerTarget _channelType;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private string _inputName;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private CommActivationMode _mode;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private string _playerId;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private bool _useTrigger;

		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private string _roomName;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private ChannelPriority _priority;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private bool _wasUserActivated;

		[Token(Token = "0x17000152")]
		[NotNull]
		public VolumeFaderSettings ActivationFader
		{
			[Token(Token = "0x6000C37")]
			[Address(RVA = "0x13FB1E8", Offset = "0x13FB1E8", VA = "0x13FB1E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000153")]
		[NotNull]
		public VolumeFaderSettings ColliderTriggerFader
		{
			[Token(Token = "0x6000C38")]
			[Address(RVA = "0x13FB1F0", Offset = "0x13FB1F0", VA = "0x13FB1F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000154")]
		private float CurrentFaderVolume
		{
			[Token(Token = "0x6000C39")]
			[Address(RVA = "0x13FB1F8", Offset = "0x13FB1F8", VA = "0x13FB1F8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000155")]
		public bool BroadcastPosition
		{
			[Token(Token = "0x6000C3A")]
			[Address(RVA = "0x13FB240", Offset = "0x13FB240", VA = "0x13FB240")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C3B")]
			[Address(RVA = "0x13FB248", Offset = "0x13FB248", VA = "0x13FB248")]
			set
			{
			}
		}

		[Token(Token = "0x17000156")]
		public CommTriggerTarget ChannelType
		{
			[Token(Token = "0x6000C3C")]
			[Address(RVA = "0x13FB330", Offset = "0x13FB330", VA = "0x13FB330")]
			get
			{
				return default(CommTriggerTarget);
			}
			[Token(Token = "0x6000C3D")]
			[Address(RVA = "0x13FB338", Offset = "0x13FB338", VA = "0x13FB338")]
			set
			{
			}
		}

		[Token(Token = "0x17000157")]
		public string InputName
		{
			[Token(Token = "0x6000C3E")]
			[Address(RVA = "0x13FB428", Offset = "0x13FB428", VA = "0x13FB428")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0x13FB430", Offset = "0x13FB430", VA = "0x13FB430")]
			set
			{
			}
		}

		[Token(Token = "0x17000158")]
		public CommActivationMode Mode
		{
			[Token(Token = "0x6000C40")]
			[Address(RVA = "0x13FB438", Offset = "0x13FB438", VA = "0x13FB438")]
			get
			{
				return default(CommActivationMode);
			}
			[Token(Token = "0x6000C41")]
			[Address(RVA = "0x13FB440", Offset = "0x13FB440", VA = "0x13FB440")]
			set
			{
			}
		}

		[Token(Token = "0x17000159")]
		public string PlayerId
		{
			[Token(Token = "0x6000C42")]
			[Address(RVA = "0x13FB448", Offset = "0x13FB448", VA = "0x13FB448")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0x13FB450", Offset = "0x13FB450", VA = "0x13FB450")]
			set
			{
			}
		}

		[Token(Token = "0x1700015A")]
		public override bool UseColliderTrigger
		{
			[Token(Token = "0x6000C44")]
			[Address(RVA = "0x13FB4A0", Offset = "0x13FB4A0", VA = "0x13FB4A0", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C45")]
			[Address(RVA = "0x13FB4A8", Offset = "0x13FB4A8", VA = "0x13FB4A8", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x1700015B")]
		public string RoomName
		{
			[Token(Token = "0x6000C46")]
			[Address(RVA = "0x13FB4B4", Offset = "0x13FB4B4", VA = "0x13FB4B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C47")]
			[Address(RVA = "0x13FB4BC", Offset = "0x13FB4BC", VA = "0x13FB4BC")]
			set
			{
			}
		}

		[Token(Token = "0x1700015C")]
		public ChannelPriority Priority
		{
			[Token(Token = "0x6000C48")]
			[Address(RVA = "0x13FB508", Offset = "0x13FB508", VA = "0x13FB508")]
			get
			{
				return default(ChannelPriority);
			}
			[Token(Token = "0x6000C49")]
			[Address(RVA = "0x13FB510", Offset = "0x13FB510", VA = "0x13FB510")]
			set
			{
			}
		}

		[Token(Token = "0x1700015D")]
		public bool IsTransmitting
		{
			[Token(Token = "0x6000C4A")]
			[Address(RVA = "0x13FB5F8", Offset = "0x13FB5F8", VA = "0x13FB5F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700015E")]
		public override bool CanTrigger
		{
			[Token(Token = "0x6000C4B")]
			[Address(RVA = "0x13FB654", Offset = "0x13FB654", VA = "0x13FB654", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x13FB754", Offset = "0x13FB754", VA = "0x13FB754", Slot = "12")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x13FB7B8", Offset = "0x13FB7B8", VA = "0x13FB7B8", Slot = "15")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x13FB7E4", Offset = "0x13FB7E4", VA = "0x13FB7E4", Slot = "16")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0x13FB884", Offset = "0x13FB884", VA = "0x13FB884", Slot = "14")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0x13FC14C", Offset = "0x13FC14C", VA = "0x13FC14C", Slot = "18")]
		protected override void ColliderTriggerChanged()
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x13FBAA4", Offset = "0x13FBAA4", VA = "0x13FBAA4")]
		private void SwitchMode()
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x13FBD10", Offset = "0x13FBD10", VA = "0x13FBD10")]
		private bool ShouldActivate(bool intent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x13FBC50", Offset = "0x13FBC50", VA = "0x13FBC50")]
		private bool IsUserActivated()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x13FBB84", Offset = "0x13FBB84", VA = "0x13FBB84")]
		private void SetChannelVolume(float value)
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x13FBDF0", Offset = "0x13FBDF0", VA = "0x13FBDF0")]
		private void OpenChannel()
		{
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x13FB350", Offset = "0x13FB350", VA = "0x13FB350")]
		private void CloseChannel()
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x13FC1F4", Offset = "0x13FC1F4", VA = "0x13FC1F4", Slot = "20")]
		private void Dissonance.VAD.IVoiceActivationListener.VoiceActivationStart()
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x13FC200", Offset = "0x13FC200", VA = "0x13FC200", Slot = "21")]
		private void Dissonance.VAD.IVoiceActivationListener.VoiceActivationStop()
		{
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x13FC208", Offset = "0x13FC208", VA = "0x13FC208")]
		public VoiceBroadcastTrigger()
		{
		}
	}
	[Token(Token = "0x20001BC")]
	public class VoiceReceiptTrigger : BaseCommsTrigger
	{
		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RoomMembership? _membership;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private string _roomName;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool _scriptDeactivated;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		[SerializeField]
		private bool _useTrigger;

		[Token(Token = "0x1700015F")]
		public string RoomName
		{
			[Token(Token = "0x6000C5A")]
			[Address(RVA = "0x13FCEE4", Offset = "0x13FCEE4", VA = "0x13FCEE4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C5B")]
			[Address(RVA = "0x13FCEEC", Offset = "0x13FCEEC", VA = "0x13FCEEC")]
			set
			{
			}
		}

		[Token(Token = "0x17000160")]
		public override bool UseColliderTrigger
		{
			[Token(Token = "0x6000C5C")]
			[Address(RVA = "0x13FCFC4", Offset = "0x13FCFC4", VA = "0x13FCFC4", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C5D")]
			[Address(RVA = "0x13FCFCC", Offset = "0x13FCFCC", VA = "0x13FCFCC", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public override bool CanTrigger
		{
			[Token(Token = "0x6000C5E")]
			[Address(RVA = "0x13FCFD8", Offset = "0x13FCFD8", VA = "0x13FCFD8", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x13FCFF8", Offset = "0x13FCFF8", VA = "0x13FCFF8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB3D618", Offset = "0xB3D618")]
		public void StartListening()
		{
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x13FD000", Offset = "0x13FD000", VA = "0x13FD000")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB3D650", Offset = "0xB3D650")]
		public void StopListening()
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x13FD00C", Offset = "0x13FD00C", VA = "0x13FD00C", Slot = "14")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x13FD09C", Offset = "0x13FD09C", VA = "0x13FD09C")]
		private void JoinRoom()
		{
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x13FCF30", Offset = "0x13FCF30", VA = "0x13FCF30")]
		private void LeaveRoom()
		{
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x13FD148", Offset = "0x13FD148", VA = "0x13FD148", Slot = "15")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x13FD1D0", Offset = "0x13FD1D0", VA = "0x13FD1D0")]
		public VoiceReceiptTrigger()
		{
		}
	}
}
namespace Dissonance.Demo
{
	[Token(Token = "0x20001BD")]
	public class ChatInputController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002F1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30E70", Offset = "0xB30E70")]
		private sealed class <>c
		{
			[Token(Token = "0x4000FE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000FE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<InputField, bool> <>9__7_0;

			[Token(Token = "0x600130E")]
			[Address(RVA = "0x10FF664", Offset = "0x10FF664", VA = "0x10FF664")]
			public <>c()
			{
			}

			[Token(Token = "0x600130F")]
			[Address(RVA = "0x10FF66C", Offset = "0x10FF66C", VA = "0x10FF66C")]
			internal bool <Start>b__7_0(InputField a)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _isInputtingText;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string _targetChannel;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DissonanceComms Comms;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Team1Channel;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string Team2Channel;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private InputField _input;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ChatLogController _log;

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x10FEC60", Offset = "0x10FEC60", VA = "0x10FEC60")]
		public void Start()
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x10FEE4C", Offset = "0x10FEE4C", VA = "0x10FEE4C")]
		private void OnInputEndEdit([CanBeNull] string message)
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x10FF40C", Offset = "0x10FF40C", VA = "0x10FF40C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x10FF4C4", Offset = "0x10FF4C4", VA = "0x10FF4C4")]
		private void ShowTextInput(string channel)
		{
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x10FF598", Offset = "0x10FF598", VA = "0x10FF598")]
		public ChatInputController()
		{
		}
	}
	[Token(Token = "0x20001BE")]
	public class ChatLogController : MonoBehaviour
	{
		[Token(Token = "0x20002F2")]
		private class ChatLogEntry
		{
			[Token(Token = "0x4000FE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Text _txt;

			[Token(Token = "0x4000FE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly RectTransform _transform;

			[Token(Token = "0x4000FEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float _transitionProgress;

			[Token(Token = "0x4000FEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39750", Offset = "0xB39750")]
			private bool <IsTransitioningOut>k__BackingField;

			[Token(Token = "0x4000FEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39760", Offset = "0xB39760")]
			private bool <IsTransitionComplete>k__BackingField;

			[Token(Token = "0x170002F0")]
			[NotNull]
			public RectTransform Transform
			{
				[Token(Token = "0x6001310")]
				[Address(RVA = "0x1100048", Offset = "0x1100048", VA = "0x1100048")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002F1")]
			[NotNull]
			public GameObject Object
			{
				[Token(Token = "0x6001311")]
				[Address(RVA = "0x10FFE50", Offset = "0x10FFE50", VA = "0x10FFE50")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002F2")]
			public bool IsTransitioningOut
			{
				[Token(Token = "0x6001312")]
				[Address(RVA = "0x1100050", Offset = "0x1100050", VA = "0x1100050")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F3D8", Offset = "0xB3F3D8")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001313")]
				[Address(RVA = "0x1100058", Offset = "0x1100058", VA = "0x1100058")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F3E8", Offset = "0xB3F3E8")]
				private set
				{
				}
			}

			[Token(Token = "0x170002F3")]
			public bool IsTransitionComplete
			{
				[Token(Token = "0x6001314")]
				[Address(RVA = "0x1100064", Offset = "0x1100064", VA = "0x1100064")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F3F8", Offset = "0xB3F3F8")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001315")]
				[Address(RVA = "0x110006C", Offset = "0x110006C", VA = "0x110006C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F408", Offset = "0xB3F408")]
				private set
				{
				}
			}

			[Token(Token = "0x6001316")]
			[Address(RVA = "0x10FF9F8", Offset = "0x10FF9F8", VA = "0x10FF9F8")]
			public ChatLogEntry([NotNull] Text txt)
			{
			}

			[Token(Token = "0x6001317")]
			[Address(RVA = "0x10FFA3C", Offset = "0x10FFA3C", VA = "0x10FFA3C")]
			public void FadeOut()
			{
			}

			[Token(Token = "0x6001318")]
			[Address(RVA = "0x10FFE6C", Offset = "0x10FFE6C", VA = "0x10FFE6C")]
			public void Update()
			{
			}
		}

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DissonanceComms Comms;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject _textPrototype;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CanvasGroup _canvas;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _heightLimit;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Queue<ChatLogEntry> _entries;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36C14", Offset = "0xB36C14")]
		private bool <ForceShow>k__BackingField;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private DateTime _fadeOutStartTime;

		[Token(Token = "0x17000162")]
		public bool ForceShow
		{
			[Token(Token = "0x6000C6B")]
			[Address(RVA = "0x10FF6D0", Offset = "0x10FF6D0", VA = "0x10FF6D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D688", Offset = "0xB3D688")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C6C")]
			[Address(RVA = "0x10FF6D8", Offset = "0x10FF6D8", VA = "0x10FF6D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D698", Offset = "0xB3D698")]
			set
			{
			}
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x10FF6E4", Offset = "0x10FF6E4", VA = "0x10FF6E4")]
		public void Start()
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x10FF888", Offset = "0x10FF888", VA = "0x10FF888")]
		private void OnMessageReceived(TextMessage message)
		{
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x10FEFF4", Offset = "0x10FEFF4", VA = "0x10FEFF4")]
		public void AddMessage(string message, Color color)
		{
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x10FFACC", Offset = "0x10FFACC", VA = "0x10FFACC")]
		public void Update()
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x10FFA48", Offset = "0x10FFA48", VA = "0x10FFA48")]
		public void ShowFor(TimeSpan time)
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x10FFFD8", Offset = "0x10FFFD8", VA = "0x10FFFD8")]
		public ChatLogController()
		{
		}
	}
	[Token(Token = "0x20001BF")]
	public class Logo : MonoBehaviour
	{
		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Texture2D _logo;

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x1100078", Offset = "0x1100078", VA = "0x1100078")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x11000D8", Offset = "0x11000D8", VA = "0x11000D8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x11001E8", Offset = "0x11001E8", VA = "0x11001E8")]
		public Logo()
		{
		}
	}
	[Token(Token = "0x20001C0")]
	public class SpeakerIndicator : MonoBehaviour
	{
		[Token(Token = "0x20002F3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30E80", Offset = "0xB30E80")]
		private sealed class <FindPlayerState>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SpeakerIndicator <>4__this;

			[Token(Token = "0x170002F4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600131C")]
				[Address(RVA = "0x1100944", Offset = "0x1100944", VA = "0x1100944", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002F5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600131E")]
				[Address(RVA = "0x11009AC", Offset = "0x11009AC", VA = "0x11009AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001319")]
			[Address(RVA = "0x11004D0", Offset = "0x11004D0", VA = "0x11004D0")]
			[DebuggerHidden]
			public <FindPlayerState>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x600131A")]
			[Address(RVA = "0x11006AC", Offset = "0x11006AC", VA = "0x11006AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600131B")]
			[Address(RVA = "0x11006B0", Offset = "0x11006B0", VA = "0x11006B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600131D")]
			[Address(RVA = "0x110094C", Offset = "0x110094C", VA = "0x110094C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject _indicator;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Light _light;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform _transform;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _intensity;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private IDissonancePlayer _player;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VoicePlayerState _state;

		[Token(Token = "0x17000163")]
		private bool IsSpeaking
		{
			[Token(Token = "0x6000C76")]
			[Address(RVA = "0x11001F0", Offset = "0x11001F0", VA = "0x11001F0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0x11002D0", Offset = "0x11002D0", VA = "0x11002D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x1100460", Offset = "0x1100460", VA = "0x1100460")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3D6A8", Offset = "0xB3D6A8")]
		private IEnumerator FindPlayerState()
		{
			return null;
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x11004FC", Offset = "0x11004FC", VA = "0x11004FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x1100648", Offset = "0x1100648", VA = "0x1100648")]
		private static void UpdateChildTransform([NotNull] Transform transform, float intensity)
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x1100630", Offset = "0x1100630", VA = "0x1100630")]
		private static void UpdateLight([NotNull] Light light, float intensity)
		{
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0x11006A4", Offset = "0x11006A4", VA = "0x11006A4")]
		public SpeakerIndicator()
		{
		}
	}
	[Token(Token = "0x20001C1")]
	public class TriggerVisualizer : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30E90", Offset = "0xB30E90")]
		private sealed class <>c
		{
			[Token(Token = "0x4000FF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000FF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<BaseCommsTrigger, bool> <>9__7_0;

			[Token(Token = "0x4000FF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<BaseCommsTrigger, bool> <>9__7_1;

			[Token(Token = "0x6001320")]
			[Address(RVA = "0x1101D4C", Offset = "0x1101D4C", VA = "0x1101D4C")]
			public <>c()
			{
			}

			[Token(Token = "0x6001321")]
			[Address(RVA = "0x1101D54", Offset = "0x1101D54", VA = "0x1101D54")]
			internal bool <Update>b__7_0(BaseCommsTrigger t)
			{
				return default(bool);
			}

			[Token(Token = "0x6001322")]
			[Address(RVA = "0x1101D74", Offset = "0x1101D74", VA = "0x1101D74")]
			internal bool <Update>b__7_1(BaseCommsTrigger t)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject _visualisations;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BaseCommsTrigger[] _triggers;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material _fillMaterial;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material _outlineMaterial;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _alpha;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color Color;

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x11009B4", Offset = "0x11009B4", VA = "0x11009B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x11019F0", Offset = "0x11019F0", VA = "0x11019F0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x1100C5C", Offset = "0x1100C5C", VA = "0x1100C5C")]
		private void CreateCircle(SphereCollider sphere)
		{
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x11012B8", Offset = "0x11012B8", VA = "0x11012B8")]
		private void CreateBox([NotNull] BoxCollider box)
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x1101CE0", Offset = "0x1101CE0", VA = "0x1101CE0")]
		public TriggerVisualizer()
		{
		}
	}
}
namespace Dissonance.VAD
{
	[Token(Token = "0x20001C2")]
	public interface IVoiceActivationListener
	{
		[Token(Token = "0x6000C82")]
		void VoiceActivationStart();

		[Token(Token = "0x6000C83")]
		void VoiceActivationStop();
	}
}
namespace Dissonance.Threading
{
	[Token(Token = "0x20001C3")]
	internal interface IThread
	{
		[Token(Token = "0x17000164")]
		bool IsStarted
		{
			[Token(Token = "0x6000C84")]
			get;
		}

		[Token(Token = "0x6000C85")]
		void Start();

		[Token(Token = "0x6000C86")]
		void Join();
	}
	[Token(Token = "0x20001C4")]
	internal class DThread : IThread
	{
		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Thread _thread;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36C24", Offset = "0xB36C24")]
		private bool <IsStarted>k__BackingField;

		[Token(Token = "0x17000165")]
		public bool IsStarted
		{
			[Token(Token = "0x6000C87")]
			[Address(RVA = "0x13FA61C", Offset = "0x13FA61C", VA = "0x13FA61C", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D70C", Offset = "0xB3D70C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C88")]
			[Address(RVA = "0x13FA624", Offset = "0x13FA624", VA = "0x13FA624")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D71C", Offset = "0xB3D71C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x13FA630", Offset = "0x13FA630", VA = "0x13FA630")]
		public DThread([NotNull] Action action)
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x13FA6D8", Offset = "0x13FA6D8", VA = "0x13FA6D8", Slot = "5")]
		public void Start()
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x13FA710", Offset = "0x13FA710", VA = "0x13FA710", Slot = "6")]
		public void Join()
		{
		}
	}
	[Token(Token = "0x20001C5")]
	internal class LockedValue<T>
	{
		[Token(Token = "0x20002F5")]
		public class Unlocker : IDisposable
		{
			[Token(Token = "0x4000FF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly LockedValue<T> _parent;

			[Token(Token = "0x170002F6")]
			[CanBeNull]
			public T Value
			{
				[Token(Token = "0x6001323")]
				get
				{
					return (T)null;
				}
				[Token(Token = "0x6001324")]
				set
				{
				}
			}

			[Token(Token = "0x6001325")]
			public Unlocker(LockedValue<T> parent)
			{
			}

			[Token(Token = "0x6001326")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T _value;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly object _lockObject;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Unlocker _unlocker;

		[Token(Token = "0x6000C8C")]
		public LockedValue(T value)
		{
		}

		[Token(Token = "0x6000C8D")]
		public Unlocker Lock()
		{
			return null;
		}

		[Token(Token = "0x6000C8E")]
		private void Unlock()
		{
		}
	}
	[Token(Token = "0x20001C6")]
	internal class ReadonlyLockedValue<T>
	{
		[Token(Token = "0x20002F6")]
		public class Unlocker : IDisposable
		{
			[Token(Token = "0x4000FF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly ReadonlyLockedValue<T> _parent;

			[Token(Token = "0x170002F7")]
			public T Value
			{
				[Token(Token = "0x6001327")]
				get
				{
					return (T)null;
				}
			}

			[Token(Token = "0x6001328")]
			public Unlocker(ReadonlyLockedValue<T> parent)
			{
			}

			[Token(Token = "0x6001329")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T _value;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly object _lockObject;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Unlocker _unlocker;

		[Token(Token = "0x6000C8F")]
		public ReadonlyLockedValue(T value)
		{
		}

		[Token(Token = "0x6000C90")]
		public Unlocker Lock()
		{
			return null;
		}

		[Token(Token = "0x6000C91")]
		private void Unlock()
		{
		}
	}
}
namespace Dissonance.Networking
{
	[Token(Token = "0x20001C7")]
	public abstract class BaseClient<TServer, TClient, TPeer> : IClient<TPeer> where TServer : BaseServer<TServer, TClient, TPeer> where TClient : BaseClient<TServer, TClient, TPeer> where TPeer : struct
	{
		[Serializable]
		[Token(Token = "0x20002F7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30EA0", Offset = "0xB30EA0")]
		private sealed class <>c
		{
			[Token(Token = "0x4000FF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000FF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<byte[]> <>9__62_0;

			[Token(Token = "0x4000FF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<List<RemoteChannel>> <>9__62_1;

			[Token(Token = "0x600132B")]
			public <>c()
			{
			}

			[Token(Token = "0x600132C")]
			internal byte[] <.ctor>b__62_0()
			{
				return null;
			}

			[Token(Token = "0x600132D")]
			internal List<RemoteChannel> <.ctor>b__62_1()
			{
				return null;
			}
		}

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected readonly Log Log;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _disconnected;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _error;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly EventQueue _events;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly SlaveClientCollection<TPeer> _peers;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ConnectionNegotiator<TPeer> _serverNegotiator;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly SendQueue<TPeer> _sendQueue;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly PacketDelaySimulator _lossSimulator;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly VoiceReceiver<TPeer> _voiceReceiver;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly VoiceSender<TPeer> _voiceSender;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TextReceiver<TPeer> _textReceiver;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TextSender<TPeer> _textSender;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TrafficCounter _recvRemoveClient;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TrafficCounter _recvVoiceData;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TrafficCounter _recvTextData;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TrafficCounter _recvHandshakeResponse;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TrafficCounter _recvHandshakeP2P;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TrafficCounter _recvClientState;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TrafficCounter _recvDeltaState;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TrafficCounter _sentServer;

		[Token(Token = "0x17000166")]
		public bool IsConnected
		{
			[Token(Token = "0x6000C92")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000167")]
		[NotNull]
		internal TrafficCounter RecvRemoveClient
		{
			[Token(Token = "0x6000CA3")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000168")]
		[NotNull]
		internal TrafficCounter RecvVoiceData
		{
			[Token(Token = "0x6000CA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000169")]
		[NotNull]
		internal TrafficCounter RecvTextData
		{
			[Token(Token = "0x6000CA5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016A")]
		[NotNull]
		internal TrafficCounter RecvHandshakeResponse
		{
			[Token(Token = "0x6000CA6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016B")]
		[NotNull]
		internal TrafficCounter RecvHandshakeP2P
		{
			[Token(Token = "0x6000CA7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016C")]
		[NotNull]
		internal TrafficCounter RecvClientState
		{
			[Token(Token = "0x6000CA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016D")]
		[NotNull]
		internal TrafficCounter RecvDeltaState
		{
			[Token(Token = "0x6000CA9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016E")]
		[NotNull]
		internal TrafficCounter SentServerTraffic
		{
			[Token(Token = "0x6000CAA")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000017")]
		public event Action<string, CodecSettings> PlayerJoined
		{
			[Token(Token = "0x6000C93")]
			add
			{
			}
			[Token(Token = "0x6000C94")]
			remove
			{
			}
		}

		[Token(Token = "0x14000018")]
		public event Action<string> PlayerLeft
		{
			[Token(Token = "0x6000C95")]
			add
			{
			}
			[Token(Token = "0x6000C96")]
			remove
			{
			}
		}

		[Token(Token = "0x14000019")]
		public event Action<RoomEvent> PlayerEnteredRoom
		{
			[Token(Token = "0x6000C97")]
			add
			{
			}
			[Token(Token = "0x6000C98")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001A")]
		public event Action<RoomEvent> PlayerExitedRoom
		{
			[Token(Token = "0x6000C99")]
			add
			{
			}
			[Token(Token = "0x6000C9A")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001B")]
		public event Action<VoicePacket> VoicePacketReceived
		{
			[Token(Token = "0x6000C9B")]
			add
			{
			}
			[Token(Token = "0x6000C9C")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001C")]
		public event Action<TextMessage> TextMessageReceived
		{
			[Token(Token = "0x6000C9D")]
			add
			{
			}
			[Token(Token = "0x6000C9E")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001D")]
		public event Action<string> PlayerStartedSpeaking
		{
			[Token(Token = "0x6000C9F")]
			add
			{
			}
			[Token(Token = "0x6000CA0")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001E")]
		public event Action<string> PlayerStoppedSpeaking
		{
			[Token(Token = "0x6000CA1")]
			add
			{
			}
			[Token(Token = "0x6000CA2")]
			remove
			{
			}
		}

		[Token(Token = "0x6000CAB")]
		protected BaseClient([NotNull] ICommsNetworkState network)
		{
		}

		[Token(Token = "0x6000CAC")]
		public abstract void Connect();

		[Token(Token = "0x6000CAD")]
		protected void Connected()
		{
		}

		[Token(Token = "0x6000CAE")]
		public virtual void Disconnect()
		{
		}

		[Token(Token = "0x6000CAF")]
		protected void FatalError(string reason)
		{
		}

		[Token(Token = "0x6000CB0")]
		public virtual ClientStatus Update()
		{
			return default(ClientStatus);
		}

		[Token(Token = "0x6000CB1")]
		private bool RunUpdate(DateTime utcNow)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB2")]
		public void SendVoiceData(ArraySegment<byte> encodedAudio)
		{
		}

		[Token(Token = "0x6000CB3")]
		public void SendTextData(string data, ChannelType type, string recipient)
		{
		}

		[Token(Token = "0x6000CB4")]
		public ushort? NetworkReceivedPacket(ArraySegment<byte> data)
		{
			return null;
		}

		[Token(Token = "0x6000CB5")]
		private ushort? ProcessReceivedPacket(ArraySegment<byte> data)
		{
			return null;
		}

		[Token(Token = "0x6000CB6")]
		private bool CheckSessionId(ref PacketReader reader, MessageTypes type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB7")]
		protected abstract void ReadMessages();

		[Token(Token = "0x6000CB8")]
		protected abstract void SendReliable(ArraySegment<byte> packet);

		[Token(Token = "0x6000CB9")]
		protected abstract void SendUnreliable(ArraySegment<byte> packet);

		[Token(Token = "0x6000CBA")]
		protected virtual void SendReliableP2P([NotNull] List<ClientInfo<TPeer?>> destinations, ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6000CBB")]
		protected virtual void SendUnreliableP2P([NotNull] List<ClientInfo<TPeer?>> destinations, ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6000CBC")]
		protected virtual void OnServerAssignedSessionId(uint session, ushort id)
		{
		}

		[Token(Token = "0x6000CBD")]
		protected virtual void OnAddedClient([NotNull] ClientInfo<TPeer?> client)
		{
		}

		[Token(Token = "0x6000CBE")]
		protected virtual void OnMetClient([NotNull] ClientInfo<TPeer?> client)
		{
		}

		[Token(Token = "0x6000CBF")]
		protected void ReceiveHandshakeP2P(ushort id, TPeer connection)
		{
		}

		[Token(Token = "0x6000CC0")]
		[NotNull]
		protected static byte[] WriteHandshakeP2P(uint sessionId, ushort clientId)
		{
			return null;
		}

		[Token(Token = "0x6000CC1")]
		private void Dissonance.Networking.Client.IClient<TPeer>.SendReliable(ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6000CC2")]
		private void Dissonance.Networking.Client.IClient<TPeer>.SendUnreliable(ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6000CC3")]
		private void Dissonance.Networking.Client.IClient<TPeer>.SendReliableP2P([NotNull] List<ClientInfo<TPeer?>> destinations, ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6000CC4")]
		private void Dissonance.Networking.Client.IClient<TPeer>.SendUnreliableP2P([NotNull] List<ClientInfo<TPeer?>> destinations, ArraySegment<byte> packet)
		{
		}
	}
	[Token(Token = "0x20001C8")]
	internal class BaseClientCollection<TPeer> : IClientCollection<TPeer>
	{
		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected readonly Log Log;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected readonly ClientIdCollection PlayerIds;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected readonly RoomClientsCollection<TPeer> ClientsInRooms;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Dictionary<ushort, ClientInfo<TPeer>> _clientsByPlayerId;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Dictionary<string, ClientInfo<TPeer>> _clientsByName;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<string> _tmpRoomList;

		[Token(Token = "0x6000CC5")]
		protected BaseClientCollection()
		{
		}

		[Token(Token = "0x6000CC6")]
		public virtual void Stop()
		{
		}

		[Token(Token = "0x6000CC7")]
		protected virtual void OnAddedClient([NotNull] ClientInfo<TPeer> client)
		{
		}

		[Token(Token = "0x6000CC8")]
		protected virtual void OnRemovedClient([NotNull] ClientInfo<TPeer> client)
		{
		}

		[Token(Token = "0x6000CC9")]
		[NotNull]
		protected ClientInfo<TPeer> GetOrCreateClientInfo(ushort id, [NotNull] string name, CodecSettings codecSettings, [CanBeNull] TPeer connection)
		{
			return null;
		}

		[Token(Token = "0x6000CCA")]
		protected void RemoveClient([NotNull] ClientInfo<TPeer> client)
		{
		}

		[Token(Token = "0x6000CCB")]
		public bool TryGetClientInfoById(ushort player, out ClientInfo<TPeer> info)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CCC")]
		public bool TryGetClientInfoByName([CanBeNull] string name, out ClientInfo<TPeer> info)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CCD")]
		public bool TryGetClientsInRoom(string room, out List<ClientInfo<TPeer>> clients)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CCE")]
		public bool TryGetClientsInRoom(ushort roomId, out List<ClientInfo<TPeer>> clients)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CCF")]
		protected void GetClients(List<ClientInfo<TPeer>> output)
		{
		}

		[Token(Token = "0x6000CD0")]
		[AttributeAttribute(Name = "ContractAnnotationAttribute", RVA = "0xB3D74C", Offset = "0xB3D74C")]
		protected bool TryFindClientByConnection(TPeer connection, [CanBeNull] out ClientInfo<TPeer> info)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD1")]
		protected void ClearRooms()
		{
		}

		[Token(Token = "0x6000CD2")]
		protected virtual void OnClientEnteredRoom([NotNull] ClientInfo<TPeer> client, string room)
		{
		}

		[Token(Token = "0x6000CD3")]
		protected virtual void OnClientExitedRoom([NotNull] ClientInfo<TPeer> client, string room)
		{
		}

		[Token(Token = "0x6000CD4")]
		protected void JoinRoom([NotNull] string room, [NotNull] ClientInfo<TPeer> client)
		{
		}

		[Token(Token = "0x6000CD5")]
		private void LeaveRoom([NotNull] string room, [NotNull] ClientInfo<TPeer> client)
		{
		}

		[Token(Token = "0x6000CD6")]
		public virtual void ProcessClientState([CanBeNull] TPeer source, ref PacketReader reader)
		{
		}

		[Token(Token = "0x6000CD7")]
		public virtual void ProcessDeltaChannelState(ref PacketReader reader)
		{
		}
	}
	[Token(Token = "0x20001C9")]
	internal interface IClientCollection<TPeer>
	{
		[Token(Token = "0x6000CD8")]
		[AttributeAttribute(Name = "ContractAnnotationAttribute", RVA = "0xB3D784", Offset = "0xB3D784")]
		bool TryGetClientInfoById(ushort clientId, out ClientInfo<TPeer> info);

		[Token(Token = "0x6000CD9")]
		[AttributeAttribute(Name = "ContractAnnotationAttribute", RVA = "0xB3D7BC", Offset = "0xB3D7BC")]
		bool TryGetClientInfoByName([NotNull] string clientName, out ClientInfo<TPeer> info);

		[Token(Token = "0x6000CDA")]
		[AttributeAttribute(Name = "ContractAnnotationAttribute", RVA = "0xB3D7F4", Offset = "0xB3D7F4")]
		bool TryGetClientsInRoom([NotNull] string room, out List<ClientInfo<TPeer>> clients);

		[Token(Token = "0x6000CDB")]
		[AttributeAttribute(Name = "ContractAnnotationAttribute", RVA = "0xB3D82C", Offset = "0xB3D82C")]
		bool TryGetClientsInRoom(ushort roomId, out List<ClientInfo<TPeer>> clients);
	}
	[Token(Token = "0x20001CA")]
	public abstract class BaseCommsNetwork<TServer, TClient, TPeer, TClientParam, TServerParam> : MonoBehaviour, ICommsNetwork, ICommsNetworkState where TServer : BaseServer<TServer, TClient, TPeer> where TClient : BaseClient<TServer, TClient, TPeer> where TPeer : struct, IEquatable<TPeer>
	{
		[Token(Token = "0x20002F8")]
		private interface IState
		{
			[Token(Token = "0x170002F8")]
			ConnectionStatus Status
			{
				[Token(Token = "0x600132E")]
				get;
			}

			[Token(Token = "0x600132F")]
			void Enter();

			[Token(Token = "0x6001330")]
			void Update();

			[Token(Token = "0x6001331")]
			void Exit();
		}

		[Token(Token = "0x20002F9")]
		private class Idle : IState
		{
			[Token(Token = "0x4000FF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly BaseCommsNetwork<TServer, TClient, TPeer, TClientParam, TServerParam> _net;

			[Token(Token = "0x170002F9")]
			public ConnectionStatus Status
			{
				[Token(Token = "0x6001333")]
				get
				{
					return default(ConnectionStatus);
				}
			}

			[Token(Token = "0x6001332")]
			public Idle(BaseCommsNetwork<TServer, TClient, TPeer, TClientParam, TServerParam> net)
			{
			}

			[Token(Token = "0x6001334")]
			public void Enter()
			{
			}

			[Token(Token = "0x6001335")]
			public void Update()
			{
			}

			[Token(Token = "0x6001336")]
			public void Exit()
			{
			}
		}

		[Token(Token = "0x20002FA")]
		private class Session : IState
		{
			[Token(Token = "0x4000FF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[CanBeNull]
			private readonly TClientParam _clientParameter;

			[Token(Token = "0x4000FFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[CanBeNull]
			private readonly TServerParam _serverParameter;

			[Token(Token = "0x4000FFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly NetworkMode _mode;

			[Token(Token = "0x4000FFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly BaseCommsNetwork<TServer, TClient, TPeer, TClientParam, TServerParam> _net;

			[Token(Token = "0x4000FFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private float _reconnectionAttemptInterval;

			[Token(Token = "0x4000FFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private DateTime _lastReconnectionAttempt;

			[Token(Token = "0x170002FA")]
			public ConnectionStatus Status
			{
				[Token(Token = "0x6001338")]
				get
				{
					return default(ConnectionStatus);
				}
			}

			[Token(Token = "0x6001337")]
			public Session([NotNull] BaseCommsNetwork<TServer, TClient, TPeer, TClientParam, TServerParam> net, NetworkMode mode, [CanBeNull] TServerParam serverParameter, [CanBeNull] TClientParam clientParameter)
			{
			}

			[Token(Token = "0x6001339")]
			public void Enter()
			{
			}

			[Token(Token = "0x600133A")]
			public void Update()
			{
			}

			[Token(Token = "0x600133B")]
			public void Exit()
			{
			}

			[Token(Token = "0x600133C")]
			private void StartServer()
			{
			}

			[Token(Token = "0x600133D")]
			private void StartClient()
			{
			}

			[Token(Token = "0x600133E")]
			private bool ShouldAttemptReconnect()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Queue<IState> _nextStates;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IState _state;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private NetworkMode _mode;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36C34", Offset = "0xB36C34")]
		private TServer <Server>k__BackingField;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36C44", Offset = "0xB36C44")]
		private TClient <Client>k__BackingField;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected readonly Log Log;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36C54", Offset = "0xB36C54")]
		private string <PlayerName>k__BackingField;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36C64", Offset = "0xB36C64")]
		private Rooms <Rooms>k__BackingField;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36C74", Offset = "0xB36C74")]
		private PlayerChannels <PlayerChannels>k__BackingField;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36C84", Offset = "0xB36C84")]
		private RoomChannels <RoomChannels>k__BackingField;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36C94", Offset = "0xB36C94")]
		private CodecSettings <CodecSettings>k__BackingField;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36D34", Offset = "0xB36D34")]
		private bool <IsInitialized>k__BackingField;

		[Token(Token = "0x1700016F")]
		protected TServer Server
		{
			[Token(Token = "0x6000CDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D864", Offset = "0xB3D864")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CDD")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D874", Offset = "0xB3D874")]
			private set
			{
			}
		}

		[Token(Token = "0x17000170")]
		protected TClient Client
		{
			[Token(Token = "0x6000CDE")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D884", Offset = "0xB3D884")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CDF")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D894", Offset = "0xB3D894")]
			private set
			{
			}
		}

		[Token(Token = "0x17000171")]
		public string PlayerName
		{
			[Token(Token = "0x6000CE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D8A4", Offset = "0xB3D8A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CE1")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D8B4", Offset = "0xB3D8B4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000172")]
		public Rooms Rooms
		{
			[Token(Token = "0x6000CE2")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D8C4", Offset = "0xB3D8C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CE3")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D8D4", Offset = "0xB3D8D4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000173")]
		public PlayerChannels PlayerChannels
		{
			[Token(Token = "0x6000CE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D8E4", Offset = "0xB3D8E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CE5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D8F4", Offset = "0xB3D8F4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000174")]
		public RoomChannels RoomChannels
		{
			[Token(Token = "0x6000CE6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D904", Offset = "0xB3D904")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CE7")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D914", Offset = "0xB3D914")]
			private set
			{
			}
		}

		[Token(Token = "0x17000175")]
		public CodecSettings CodecSettings
		{
			[Token(Token = "0x6000CE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D924", Offset = "0xB3D924")]
			get
			{
				return default(CodecSettings);
			}
			[Token(Token = "0x6000CE9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D934", Offset = "0xB3D934")]
			private set
			{
			}
		}

		[Token(Token = "0x17000176")]
		public bool IsInitialized
		{
			[Token(Token = "0x6000CFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DA64", Offset = "0xB3DA64")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CFD")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DA74", Offset = "0xB3DA74")]
			private set
			{
			}
		}

		[Token(Token = "0x17000177")]
		public ConnectionStatus Status
		{
			[Token(Token = "0x6000CFE")]
			get
			{
				return default(ConnectionStatus);
			}
		}

		[Token(Token = "0x17000178")]
		public NetworkMode Mode
		{
			[Token(Token = "0x6000CFF")]
			get
			{
				return default(NetworkMode);
			}
			[Token(Token = "0x6000D00")]
			private set
			{
			}
		}

		[Token(Token = "0x1400001F")]
		public event Action<NetworkMode> ModeChanged
		{
			[Token(Token = "0x6000CEA")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D944", Offset = "0xB3D944")]
			add
			{
			}
			[Token(Token = "0x6000CEB")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D954", Offset = "0xB3D954")]
			remove
			{
			}
		}

		[Token(Token = "0x14000020")]
		public event Action<string, CodecSettings> PlayerJoined
		{
			[Token(Token = "0x6000CEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D964", Offset = "0xB3D964")]
			add
			{
			}
			[Token(Token = "0x6000CED")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D974", Offset = "0xB3D974")]
			remove
			{
			}
		}

		[Token(Token = "0x14000021")]
		public event Action<string> PlayerLeft
		{
			[Token(Token = "0x6000CEE")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D984", Offset = "0xB3D984")]
			add
			{
			}
			[Token(Token = "0x6000CEF")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D994", Offset = "0xB3D994")]
			remove
			{
			}
		}

		[Token(Token = "0x14000022")]
		public event Action<VoicePacket> VoicePacketReceived
		{
			[Token(Token = "0x6000CF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D9A4", Offset = "0xB3D9A4")]
			add
			{
			}
			[Token(Token = "0x6000CF1")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D9B4", Offset = "0xB3D9B4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000023")]
		public event Action<TextMessage> TextPacketReceived
		{
			[Token(Token = "0x6000CF2")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D9C4", Offset = "0xB3D9C4")]
			add
			{
			}
			[Token(Token = "0x6000CF3")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D9D4", Offset = "0xB3D9D4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000024")]
		public event Action<string> PlayerStartedSpeaking
		{
			[Token(Token = "0x6000CF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D9E4", Offset = "0xB3D9E4")]
			add
			{
			}
			[Token(Token = "0x6000CF5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3D9F4", Offset = "0xB3D9F4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000025")]
		public event Action<string> PlayerStoppedSpeaking
		{
			[Token(Token = "0x6000CF6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DA04", Offset = "0xB3DA04")]
			add
			{
			}
			[Token(Token = "0x6000CF7")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DA14", Offset = "0xB3DA14")]
			remove
			{
			}
		}

		[Token(Token = "0x14000026")]
		public event Action<RoomEvent> PlayerEnteredRoom
		{
			[Token(Token = "0x6000CF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DA24", Offset = "0xB3DA24")]
			add
			{
			}
			[Token(Token = "0x6000CF9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DA34", Offset = "0xB3DA34")]
			remove
			{
			}
		}

		[Token(Token = "0x14000027")]
		public event Action<RoomEvent> PlayerExitedRoom
		{
			[Token(Token = "0x6000CFA")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DA44", Offset = "0xB3DA44")]
			add
			{
			}
			[Token(Token = "0x6000CFB")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DA54", Offset = "0xB3DA54")]
			remove
			{
			}
		}

		[Token(Token = "0x6000D01")]
		protected BaseCommsNetwork()
		{
		}

		[Token(Token = "0x6000D02")]
		[NotNull]
		protected abstract TServer CreateServer([CanBeNull] TServerParam connectionParameters);

		[Token(Token = "0x6000D03")]
		[NotNull]
		protected abstract TClient CreateClient([CanBeNull] TClientParam connectionParameters);

		[Token(Token = "0x6000D04")]
		protected virtual void Initialize()
		{
		}

		[Token(Token = "0x6000D05")]
		private void Dissonance.Networking.ICommsNetwork.Initialize([NotNull] string playerName, [NotNull] Rooms rooms, [NotNull] PlayerChannels playerChannels, [NotNull] RoomChannels roomChannels, CodecSettings codecSettings)
		{
		}

		[Token(Token = "0x6000D06")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000D07")]
		private void LoadState()
		{
		}

		[Token(Token = "0x6000D08")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000D09")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000D0A")]
		protected void RunAsHost(TServerParam serverParameters, TClientParam clientParameters)
		{
		}

		[Token(Token = "0x6000D0B")]
		protected void RunAsClient(TClientParam clientParameters)
		{
		}

		[Token(Token = "0x6000D0C")]
		protected void RunAsDedicatedServer(TServerParam serverParameters)
		{
		}

		[Token(Token = "0x6000D0D")]
		private void ChangeState(IState newState)
		{
		}

		[Token(Token = "0x6000D0E")]
		private void StartServer([CanBeNull] TServerParam connectParams)
		{
		}

		[Token(Token = "0x6000D0F")]
		private void StopServer()
		{
		}

		[Token(Token = "0x6000D10")]
		private void StartClient([CanBeNull] TClientParam connectParams)
		{
		}

		[Token(Token = "0x6000D11")]
		private void StopClient()
		{
		}

		[Token(Token = "0x6000D12")]
		public void SendVoice(ArraySegment<byte> data)
		{
		}

		[Token(Token = "0x6000D13")]
		public void SendText(string data, ChannelType recipientType, string recipientId)
		{
		}

		[Token(Token = "0x6000D14")]
		private void OnPlayerJoined(string obj, CodecSettings codecSettings)
		{
		}

		[Token(Token = "0x6000D15")]
		private void OnPlayerLeft(string obj)
		{
		}

		[Token(Token = "0x6000D16")]
		private void OnPlayerEnteredRoom(RoomEvent evt)
		{
		}

		[Token(Token = "0x6000D17")]
		private void OnPlayerExitedRoom(RoomEvent evt)
		{
		}

		[Token(Token = "0x6000D18")]
		private void OnVoicePacketReceived(VoicePacket obj)
		{
		}

		[Token(Token = "0x6000D19")]
		private void OnTextPacketReceived(TextMessage obj)
		{
		}

		[Token(Token = "0x6000D1A")]
		private void OnPlayerStartedSpeaking(string obj)
		{
		}

		[Token(Token = "0x6000D1B")]
		private void OnPlayerStoppedSpeaking(string obj)
		{
		}

		[Token(Token = "0x6000D1C")]
		private void OnModeChanged(NetworkMode obj)
		{
		}

		[Token(Token = "0x6000D1D")]
		public void OnInspectorGui()
		{
		}
	}
	[Token(Token = "0x20001CB")]
	public abstract class BaseServer<TServer, TClient, TPeer> : IServer<TPeer> where TServer : BaseServer<TServer, TClient, TPeer> where TClient : BaseClient<TServer, TClient, TPeer> where TPeer : struct
	{
		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected readonly Log Log;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _disconnected;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _error;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36D44", Offset = "0xB36D44")]
		private TrafficCounter <RecvHandshakeRequest>k__BackingField;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36D54", Offset = "0xB36D54")]
		private TrafficCounter <RecvClientState>k__BackingField;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36D64", Offset = "0xB36D64")]
		private TrafficCounter <RecvPacketRelay>k__BackingField;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36D74", Offset = "0xB36D74")]
		private TrafficCounter <RecvDeltaChannelState>k__BackingField;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36D84", Offset = "0xB36D84")]
		private TrafficCounter <SentTraffic>k__BackingField;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ServerRelay<TPeer> _relay;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly BroadcastingClientCollection<TPeer> _clients;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly uint _sessionId;

		[Token(Token = "0x17000179")]
		internal TrafficCounter RecvHandshakeRequest
		{
			[Token(Token = "0x6000D1E")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DAA4", Offset = "0xB3DAA4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D1F")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DAB4", Offset = "0xB3DAB4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700017A")]
		internal TrafficCounter RecvClientState
		{
			[Token(Token = "0x6000D20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DAC4", Offset = "0xB3DAC4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D21")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DAD4", Offset = "0xB3DAD4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700017B")]
		internal TrafficCounter RecvPacketRelay
		{
			[Token(Token = "0x6000D22")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DAE4", Offset = "0xB3DAE4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D23")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DAF4", Offset = "0xB3DAF4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700017C")]
		internal TrafficCounter RecvDeltaChannelState
		{
			[Token(Token = "0x6000D24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DB04", Offset = "0xB3DB04")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D25")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DB14", Offset = "0xB3DB14")]
			private set
			{
			}
		}

		[Token(Token = "0x1700017D")]
		internal TrafficCounter SentTraffic
		{
			[Token(Token = "0x6000D26")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DB24", Offset = "0xB3DB24")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D27")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DB34", Offset = "0xB3DB34")]
			private set
			{
			}
		}

		[Token(Token = "0x1700017E")]
		public uint SessionId
		{
			[Token(Token = "0x6000D28")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x6000D29")]
		protected BaseServer()
		{
		}

		[Token(Token = "0x6000D2A")]
		public virtual void Connect()
		{
		}

		[Token(Token = "0x6000D2B")]
		public virtual void Disconnect()
		{
		}

		[Token(Token = "0x6000D2C")]
		protected void FatalError(string reason)
		{
		}

		[Token(Token = "0x6000D2D")]
		protected void ClientDisconnected(TPeer connection)
		{
		}

		[Token(Token = "0x6000D2E")]
		public virtual ServerState Update()
		{
			return default(ServerState);
		}

		[Token(Token = "0x6000D2F")]
		private bool RunUpdate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D30")]
		protected abstract void SendReliable(TPeer connection, ArraySegment<byte> packet);

		[Token(Token = "0x6000D31")]
		protected abstract void SendUnreliable(TPeer connection, ArraySegment<byte> packet);

		[Token(Token = "0x6000D32")]
		public virtual void SendUnreliable([NotNull] List<TPeer> connections, ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6000D33")]
		public virtual void SendReliable([NotNull] List<TPeer> connections, ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6000D34")]
		private void Dissonance.Networking.Server.IServer<TPeer>.SendReliable(TPeer connection, ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6000D35")]
		private void Dissonance.Networking.Server.IServer<TPeer>.SendUnreliable(List<TPeer> connections, ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6000D36")]
		private void Dissonance.Networking.Server.IServer<TPeer>.SendReliable(List<TPeer> connections, ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6000D37")]
		protected abstract void ReadMessages();

		[Token(Token = "0x6000D38")]
		public void NetworkReceivedPacket(TPeer source, ArraySegment<byte> data)
		{
		}

		[Token(Token = "0x6000D39")]
		private bool CheckSessionId(ref PacketReader reader, TPeer source)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D3A")]
		protected virtual void AddClient(ClientInfo<TPeer> client)
		{
		}

		[Token(Token = "0x6000D3B")]
		private void Dissonance.Networking.Server.IServer<TPeer>.AddClient(ClientInfo<TPeer> client)
		{
		}
	}
	[Token(Token = "0x20001CC")]
	internal struct ChannelBitField
	{
		[Token(Token = "0x4000A76")]
		private const ushort TypeMask = 1;

		[Token(Token = "0x4000A77")]
		private const ushort PositionalMask = 2;

		[Token(Token = "0x4000A78")]
		private const ushort ClosureMask = 4;

		[Token(Token = "0x4000A79")]
		private const ushort PriorityOffset = 3;

		[Token(Token = "0x4000A7A")]
		private const ushort PriorityMask = 24;

		[Token(Token = "0x4000A7B")]
		private const ushort SessionIdOffset = 5;

		[Token(Token = "0x4000A7C")]
		private const ushort SessionIdMask = 97;

		[Token(Token = "0x4000A7D")]
		private const ushort AmplitudeOffset = 8;

		[Token(Token = "0x4000A7E")]
		private const ushort AmplitudeMask = 65280;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ushort _bitfield;

		[Token(Token = "0x1700017F")]
		public ushort Bitfield
		{
			[Token(Token = "0x6000D3C")]
			[Address(RVA = "0xC206C8", Offset = "0xC206C8", VA = "0xC206C8")]
			get
			{
				return default(ushort);
			}
		}

		[Token(Token = "0x17000180")]
		public ChannelType Type
		{
			[Token(Token = "0x6000D3D")]
			[Address(RVA = "0xC206D0", Offset = "0xC206D0", VA = "0xC206D0")]
			get
			{
				return default(ChannelType);
			}
		}

		[Token(Token = "0x17000181")]
		public bool IsClosing
		{
			[Token(Token = "0x6000D3E")]
			[Address(RVA = "0xC206E0", Offset = "0xC206E0", VA = "0xC206E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000182")]
		public bool IsPositional
		{
			[Token(Token = "0x6000D3F")]
			[Address(RVA = "0xC206EC", Offset = "0xC206EC", VA = "0xC206EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000183")]
		public ChannelPriority Priority
		{
			[Token(Token = "0x6000D40")]
			[Address(RVA = "0xC206F8", Offset = "0xC206F8", VA = "0xC206F8")]
			get
			{
				return default(ChannelPriority);
			}
		}

		[Token(Token = "0x17000184")]
		public float AmplitudeMultiplier
		{
			[Token(Token = "0x6000D41")]
			[Address(RVA = "0xC20714", Offset = "0xC20714", VA = "0xC20714")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000185")]
		public int SessionId
		{
			[Token(Token = "0x6000D42")]
			[Address(RVA = "0xC20730", Offset = "0xC20730", VA = "0xC20730")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0xC2073C", Offset = "0xC2073C", VA = "0xC2073C")]
		public ChannelBitField(ushort bitfield)
		{
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0xC20744", Offset = "0xC20744", VA = "0xC20744")]
		public ChannelBitField(ChannelType type, int sessionId, ChannelPriority priority, float amplitudeMult, bool positional, bool closing)
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x1107C24", Offset = "0x1107C24", VA = "0x1107C24")]
		private static ushort PackPriority(ChannelPriority priority)
		{
			return default(ushort);
		}
	}
	[Token(Token = "0x20001CD")]
	internal sealed class ClientIdCollection : IReadonlyClientIdCollection
	{
		[Serializable]
		[Token(Token = "0x20002FB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30EB0", Offset = "0xB30EB0")]
		private sealed class <>c
		{
			[Token(Token = "0x4000FFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001000")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<string, int, KeyValuePair<ushort, string>> <>9__6_0;

			[Token(Token = "0x4001001")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<KeyValuePair<ushort, string>, bool> <>9__6_1;

			[Token(Token = "0x6001340")]
			[Address(RVA = "0x110C4F8", Offset = "0x110C4F8", VA = "0x110C4F8")]
			public <>c()
			{
			}

			[Token(Token = "0x6001341")]
			[Address(RVA = "0x110C500", Offset = "0x110C500", VA = "0x110C500")]
			internal KeyValuePair<ushort, string> <.ctor>b__6_0(string a, int i)
			{
				return default(KeyValuePair<ushort, string>);
			}

			[Token(Token = "0x6001342")]
			[Address(RVA = "0x110C578", Offset = "0x110C578", VA = "0x110C578")]
			internal bool <.ctor>b__6_1(KeyValuePair<ushort, string> x)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<string> _items;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly List<ushort> _freeIds;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IEnumerable<KeyValuePair<ushort, string>> _alive;

		[Token(Token = "0x17000186")]
		[NotNull]
		public IEnumerable<KeyValuePair<ushort, string>> Items
		{
			[Token(Token = "0x6000D46")]
			[Address(RVA = "0x110B94C", Offset = "0x110B94C", VA = "0x110B94C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0x110B954", Offset = "0x110B954", VA = "0x110B954")]
		public ClientIdCollection()
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0x110BB5C", Offset = "0x110BB5C", VA = "0x110BB5C")]
		private ushort GetFreeId()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0x110BC10", Offset = "0x110BC10", VA = "0x110BC10")]
		private void AddFreeId(ushort id)
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0x110BCF0", Offset = "0x110BCF0", VA = "0x110BCF0", Slot = "5")]
		public string GetName(ushort id)
		{
			return null;
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0x110BD7C", Offset = "0x110BD7C", VA = "0x110BD7C", Slot = "4")]
		public ushort? GetId(string name)
		{
			return null;
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0x110BE54", Offset = "0x110BE54", VA = "0x110BE54")]
		public ushort Register([NotNull] string name)
		{
			return default(ushort);
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0x110BFB4", Offset = "0x110BFB4", VA = "0x110BFB4")]
		public bool Unregister([NotNull] string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0x110C104", Offset = "0x110C104", VA = "0x110C104")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0x110C174", Offset = "0x110C174", VA = "0x110C174")]
		public void Load([NotNull] List<ClientInfo> clients)
		{
		}
	}
	[Token(Token = "0x20001CE")]
	internal interface IReadonlyClientIdCollection
	{
		[Token(Token = "0x6000D51")]
		ushort? GetId([NotNull] string name);

		[Token(Token = "0x6000D52")]
		[CanBeNull]
		string GetName(ushort id);
	}
	[Token(Token = "0x20001CF")]
	internal struct ClientInfo
	{
		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36D94", Offset = "0xB36D94")]
		private string <PlayerName>k__BackingField;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36DA4", Offset = "0xB36DA4")]
		private ushort <PlayerId>k__BackingField;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36DB4", Offset = "0xB36DB4")]
		private CodecSettings <CodecSettings>k__BackingField;

		[Token(Token = "0x17000187")]
		public string PlayerName
		{
			[Token(Token = "0x6000D53")]
			[Address(RVA = "0xC20B38", Offset = "0xC20B38", VA = "0xC20B38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DB54", Offset = "0xB3DB54")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D54")]
			[Address(RVA = "0xC20B40", Offset = "0xC20B40", VA = "0xC20B40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DB64", Offset = "0xB3DB64")]
			private set
			{
			}
		}

		[Token(Token = "0x17000188")]
		public ushort PlayerId
		{
			[Token(Token = "0x6000D55")]
			[Address(RVA = "0xC20B48", Offset = "0xC20B48", VA = "0xC20B48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DB74", Offset = "0xB3DB74")]
			get
			{
				return default(ushort);
			}
			[Token(Token = "0x6000D56")]
			[Address(RVA = "0xC20B50", Offset = "0xC20B50", VA = "0xC20B50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DB84", Offset = "0xB3DB84")]
			private set
			{
			}
		}

		[Token(Token = "0x17000189")]
		public CodecSettings CodecSettings
		{
			[Token(Token = "0x6000D57")]
			[Address(RVA = "0xC20B58", Offset = "0xC20B58", VA = "0xC20B58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DB94", Offset = "0xB3DB94")]
			get
			{
				return default(CodecSettings);
			}
			[Token(Token = "0x6000D58")]
			[Address(RVA = "0xC20B68", Offset = "0xC20B68", VA = "0xC20B68")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DBA4", Offset = "0xB3DBA4")]
			private set
			{
			}
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0xC20B74", Offset = "0xC20B74", VA = "0xC20B74")]
		public ClientInfo(string playerName, ushort playerId, CodecSettings codecSettings)
		{
		}
	}
	[Token(Token = "0x20001D0")]
	public class ClientInfo<TPeer> : IEquatable<ClientInfo<TPeer>>
	{
		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly string _playerName;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ushort _playerId;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly CodecSettings _codecSettings;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<string> _rooms;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ReadOnlyCollection<string> _roomsReadonly;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36DC4", Offset = "0xB36DC4")]
		private TPeer <Connection>k__BackingField;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36DD4", Offset = "0xB36DD4")]
		private bool <IsConnected>k__BackingField;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36DE4", Offset = "0xB36DE4")]
		private PeerVoiceReceiver <VoiceReceiver>k__BackingField;

		[Token(Token = "0x1700018A")]
		[NotNull]
		public string PlayerName
		{
			[Token(Token = "0x6000D5A")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018B")]
		public ushort PlayerId
		{
			[Token(Token = "0x6000D5B")]
			get
			{
				return default(ushort);
			}
		}

		[Token(Token = "0x1700018C")]
		public CodecSettings CodecSettings
		{
			[Token(Token = "0x6000D5C")]
			get
			{
				return default(CodecSettings);
			}
		}

		[Token(Token = "0x1700018D")]
		[NotNull]
		internal ReadOnlyCollection<string> Rooms
		{
			[Token(Token = "0x6000D5D")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018E")]
		[CanBeNull]
		public TPeer Connection
		{
			[Token(Token = "0x6000D5E")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DBB4", Offset = "0xB3DBB4")]
			get
			{
				return (TPeer)null;
			}
			[Token(Token = "0x6000D5F")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DBC4", Offset = "0xB3DBC4")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700018F")]
		public bool IsConnected
		{
			[Token(Token = "0x6000D60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DBD4", Offset = "0xB3DBD4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D61")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DBE4", Offset = "0xB3DBE4")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000190")]
		internal PeerVoiceReceiver VoiceReceiver
		{
			[Token(Token = "0x6000D62")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DBF4", Offset = "0xB3DBF4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D63")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DC04", Offset = "0xB3DC04")]
			set
			{
			}
		}

		[Token(Token = "0x6000D64")]
		public ClientInfo(string playerName, ushort playerId, CodecSettings codecSettings, [CanBeNull] TPeer connection)
		{
		}

		[Token(Token = "0x6000D65")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D66")]
		public bool Equals(ClientInfo<TPeer> other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D67")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D68")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D69")]
		public bool AddRoom([NotNull] string roomName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D6A")]
		public bool RemoveRoom([NotNull] string roomName)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001D1")]
	public struct VoicePacket
	{
		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string SenderPlayerId;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ArraySegment<byte> EncodedAudioFrame;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly uint SequenceNumber;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[CanBeNull]
		public readonly List<RemoteChannel> Channels;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlaybackOptions _options;

		[Token(Token = "0x17000191")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB41308", Offset = "0xB41308")]
		public bool Positional
		{
			[Token(Token = "0x6000D6C")]
			[Address(RVA = "0xC210FC", Offset = "0xC210FC", VA = "0xC210FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000192")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB41340", Offset = "0xB41340")]
		public ChannelPriority Priority
		{
			[Token(Token = "0x6000D6D")]
			[Address(RVA = "0xC2110C", Offset = "0xC2110C", VA = "0xC2110C")]
			get
			{
				return default(ChannelPriority);
			}
		}

		[Token(Token = "0x17000193")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xB41378", Offset = "0xB41378")]
		public float AmplitudeMultiplier
		{
			[Token(Token = "0x6000D6E")]
			[Address(RVA = "0xC21114", Offset = "0xC21114", VA = "0xC21114")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000194")]
		public PlaybackOptions PlaybackOptions
		{
			[Token(Token = "0x6000D6F")]
			[Address(RVA = "0xC2111C", Offset = "0xC2111C", VA = "0xC2111C")]
			get
			{
				return default(PlaybackOptions);
			}
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0xC2112C", Offset = "0xC2112C", VA = "0xC2112C")]
		public VoicePacket(string senderPlayerId, ChannelPriority priority, float ampMul, bool positional, ArraySegment<byte> encodedAudioFrame, uint sequence, [Optional][CanBeNull] List<RemoteChannel> channels)
		{
		}
	}
	[Token(Token = "0x20001D2")]
	public struct TextMessage
	{
		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string Sender;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ChannelType RecipientType;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Recipient;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string Message;

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0xC20FF4", Offset = "0xC20FF4", VA = "0xC20FF4")]
		public TextMessage(string sender, ChannelType recipientType, string recipient, string message)
		{
		}
	}
	[Token(Token = "0x20001D3")]
	public struct RoomEvent
	{
		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string PlayerName;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Room;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool Joined;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal ReadOnlyCollection<string> Rooms;

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0xC20F08", Offset = "0xC20F08", VA = "0xC20F08")]
		internal RoomEvent([NotNull] string name, [NotNull] string room, bool joined, [NotNull] ReadOnlyCollection<string> rooms)
		{
		}
	}
	[Token(Token = "0x20001D4")]
	public enum NetworkMode
	{
		[Token(Token = "0x4000A9E")]
		None,
		[Token(Token = "0x4000A9F")]
		Host,
		[Token(Token = "0x4000AA0")]
		Client,
		[Token(Token = "0x4000AA1")]
		DedicatedServer
	}
	[Token(Token = "0x20001D5")]
	public enum ConnectionStatus
	{
		[Token(Token = "0x4000AA3")]
		Disconnected,
		[Token(Token = "0x4000AA4")]
		Degraded,
		[Token(Token = "0x4000AA5")]
		Connected
	}
	[Token(Token = "0x20001D6")]
	public static class NetworkModeExtensions
	{
		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x110C614", Offset = "0x110C614", VA = "0x110C614")]
		public static bool IsServerEnabled(this NetworkMode mode)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x110C6CC", Offset = "0x110C6CC", VA = "0x110C6CC")]
		public static bool IsClientEnabled(this NetworkMode mode)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001D7")]
	public interface ICommsNetwork
	{
		[Token(Token = "0x17000195")]
		ConnectionStatus Status
		{
			[Token(Token = "0x6000D75")]
			get;
		}

		[Token(Token = "0x17000196")]
		NetworkMode Mode
		{
			[Token(Token = "0x6000D79")]
			get;
		}

		[Token(Token = "0x14000028")]
		event Action<NetworkMode> ModeChanged;

		[Token(Token = "0x14000029")]
		event Action<string, CodecSettings> PlayerJoined;

		[Token(Token = "0x1400002A")]
		event Action<string> PlayerLeft;

		[Token(Token = "0x1400002B")]
		event Action<VoicePacket> VoicePacketReceived;

		[Token(Token = "0x1400002C")]
		event Action<TextMessage> TextPacketReceived;

		[Token(Token = "0x1400002D")]
		event Action<string> PlayerStartedSpeaking;

		[Token(Token = "0x1400002E")]
		event Action<string> PlayerStoppedSpeaking;

		[Token(Token = "0x1400002F")]
		event Action<RoomEvent> PlayerEnteredRoom;

		[Token(Token = "0x14000030")]
		event Action<RoomEvent> PlayerExitedRoom;

		[Token(Token = "0x6000D76")]
		void Initialize(string playerName, Rooms rooms, PlayerChannels playerChannels, RoomChannels roomChannels, CodecSettings codecSettings);

		[Token(Token = "0x6000D8A")]
		void SendVoice(ArraySegment<byte> data);

		[Token(Token = "0x6000D8B")]
		void SendText(string data, ChannelType recipientType, string recipientId);
	}
	[Token(Token = "0x20001D8")]
	public interface ICommsNetworkState
	{
		[Token(Token = "0x17000197")]
		string PlayerName
		{
			[Token(Token = "0x6000D8C")]
			get;
		}

		[Token(Token = "0x17000198")]
		Rooms Rooms
		{
			[Token(Token = "0x6000D8D")]
			get;
		}

		[Token(Token = "0x17000199")]
		PlayerChannels PlayerChannels
		{
			[Token(Token = "0x6000D8E")]
			get;
		}

		[Token(Token = "0x1700019A")]
		RoomChannels RoomChannels
		{
			[Token(Token = "0x6000D8F")]
			get;
		}

		[Token(Token = "0x1700019B")]
		CodecSettings CodecSettings
		{
			[Token(Token = "0x6000D90")]
			get;
		}
	}
	[Token(Token = "0x20001D9")]
	internal enum MessageTypes : byte
	{
		[Token(Token = "0x4000AA7")]
		ClientState = 1,
		[Token(Token = "0x4000AA8")]
		VoiceData,
		[Token(Token = "0x4000AA9")]
		TextData,
		[Token(Token = "0x4000AAA")]
		HandshakeRequest,
		[Token(Token = "0x4000AAB")]
		HandshakeResponse,
		[Token(Token = "0x4000AAC")]
		ErrorWrongSession,
		[Token(Token = "0x4000AAD")]
		ServerRelayReliable,
		[Token(Token = "0x4000AAE")]
		ServerRelayUnreliable,
		[Token(Token = "0x4000AAF")]
		DeltaChannelState,
		[Token(Token = "0x4000AB0")]
		RemoveClient,
		[Token(Token = "0x4000AB1")]
		HandshakeP2P
	}
	[Token(Token = "0x20001DA")]
	internal struct PacketReader
	{
		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ArraySegment<byte> _array;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _count;

		[Token(Token = "0x1700019C")]
		public ArraySegment<byte> Read
		{
			[Token(Token = "0x6000D91")]
			[Address(RVA = "0xC20BC8", Offset = "0xC20BC8", VA = "0xC20BC8")]
			get
			{
				return default(ArraySegment<byte>);
			}
		}

		[Token(Token = "0x1700019D")]
		public ArraySegment<byte> Unread
		{
			[Token(Token = "0x6000D92")]
			[Address(RVA = "0xC20BD0", Offset = "0xC20BD0", VA = "0xC20BD0")]
			get
			{
				return default(ArraySegment<byte>);
			}
		}

		[Token(Token = "0x1700019E")]
		public ArraySegment<byte> All
		{
			[Token(Token = "0x6000D93")]
			[Address(RVA = "0xC20BD8", Offset = "0xC20BD8", VA = "0xC20BD8")]
			get
			{
				return default(ArraySegment<byte>);
			}
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0xC20BE4", Offset = "0xC20BE4", VA = "0xC20BE4")]
		public PacketReader(ArraySegment<byte> array)
		{
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0xC20BEC", Offset = "0xC20BEC", VA = "0xC20BEC")]
		public PacketReader([NotNull] byte[] array)
		{
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0xC20BF4", Offset = "0xC20BF4", VA = "0xC20BF4")]
		private void Check(int count, string type)
		{
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0xC20BFC", Offset = "0xC20BFC", VA = "0xC20BFC")]
		private byte FastReadByte()
		{
			return default(byte);
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0xC20C04", Offset = "0xC20C04", VA = "0xC20C04")]
		public byte ReadByte()
		{
			return default(byte);
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0xC20C0C", Offset = "0xC20C0C", VA = "0xC20C0C")]
		public ushort ReadUInt16()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0xC20C14", Offset = "0xC20C14", VA = "0xC20C14")]
		public uint ReadUInt32()
		{
			return default(uint);
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0xC20C1C", Offset = "0xC20C1C", VA = "0xC20C1C")]
		public ArraySegment<byte> ReadByteSegment()
		{
			return default(ArraySegment<byte>);
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0xC20C24", Offset = "0xC20C24", VA = "0xC20C24")]
		[CanBeNull]
		public string ReadString()
		{
			return null;
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0xC20C2C", Offset = "0xC20C2C", VA = "0xC20C2C")]
		public CodecSettings ReadCodecSettings()
		{
			return default(CodecSettings);
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0xC20C48", Offset = "0xC20C48", VA = "0xC20C48")]
		public ClientInfo ReadClientInfo()
		{
			return default(ClientInfo);
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0xC20C50", Offset = "0xC20C50", VA = "0xC20C50")]
		public bool ReadPacketHeader(out MessageTypes messageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0xC20C58", Offset = "0xC20C58", VA = "0xC20C58")]
		public void ReadHandshakeRequest([CanBeNull] out string name, out CodecSettings codecSettings)
		{
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0xC20CA0", Offset = "0xC20CA0", VA = "0xC20CA0")]
		public void ReadHandshakeResponseHeader(out uint session, out ushort clientId)
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0xC20CE4", Offset = "0xC20CE4", VA = "0xC20CE4")]
		public void ReadHandshakeResponseBody([NotNull] List<ClientInfo> clients, [NotNull] Dictionary<string, List<ushort>> outputRoomsToPeerId)
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xC20CEC", Offset = "0xC20CEC", VA = "0xC20CEC")]
		public void ReadhandshakeP2P(out ushort peerId)
		{
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0xC20D14", Offset = "0xC20D14", VA = "0xC20D14")]
		public ClientInfo ReadClientStateHeader()
		{
			return default(ClientInfo);
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0xC20D1C", Offset = "0xC20D1C", VA = "0xC20D1C")]
		public void ReadClientStateRooms([NotNull][ItemNotNull] List<string> rooms)
		{
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0xC20D24", Offset = "0xC20D24", VA = "0xC20D24")]
		public void ReadRemoveClient(out ushort clientId)
		{
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0xC20D4C", Offset = "0xC20D4C", VA = "0xC20D4C")]
		public void ReadVoicePacketHeader1(out ushort senderId)
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0xC20D74", Offset = "0xC20D74", VA = "0xC20D74")]
		public void ReadVoicePacketHeader2(out VoicePacketOptions options, out ushort sequenceNumber, out ushort numChannels)
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0xC20D7C", Offset = "0xC20D7C", VA = "0xC20D7C")]
		public void ReadVoicePacketChannel(out ChannelBitField bitfield, out ushort recipient)
		{
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0xC20DC0", Offset = "0xC20DC0", VA = "0xC20DC0")]
		public TextPacket ReadTextPacket()
		{
			return default(TextPacket);
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0xC20DC8", Offset = "0xC20DC8", VA = "0xC20DC8")]
		public uint ReadErrorWrongSession()
		{
			return default(uint);
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0xC20DD0", Offset = "0xC20DD0", VA = "0xC20DD0")]
		public void ReadRelay(List<ushort> destinations, out ArraySegment<byte> data)
		{
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0xC20DD8", Offset = "0xC20DD8", VA = "0xC20DD8")]
		public void ReadDeltaChannelState(out bool joined, out ushort peer, [NotNull] out string name)
		{
		}
	}
	[Token(Token = "0x20001DB")]
	internal struct PacketWriter
	{
		[Token(Token = "0x4000AB5")]
		internal const ushort Magic = 35783;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ArraySegment<byte> _array;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _count;

		[Token(Token = "0x1700019F")]
		public ArraySegment<byte> Written
		{
			[Token(Token = "0x6000DAF")]
			[Address(RVA = "0xC20E1C", Offset = "0xC20E1C", VA = "0xC20E1C")]
			get
			{
				return default(ArraySegment<byte>);
			}
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0xC20E24", Offset = "0xC20E24", VA = "0xC20E24")]
		public PacketWriter([NotNull] byte[] array)
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0xC20E2C", Offset = "0xC20E2C", VA = "0xC20E2C")]
		public PacketWriter(ArraySegment<byte> array)
		{
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0xC20E34", Offset = "0xC20E34", VA = "0xC20E34")]
		public PacketWriter Write(byte b)
		{
			return default(PacketWriter);
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0xC20E3C", Offset = "0xC20E3C", VA = "0xC20E3C")]
		public PacketWriter Write(ushort u)
		{
			return default(PacketWriter);
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0xC20E44", Offset = "0xC20E44", VA = "0xC20E44")]
		public PacketWriter Write(uint u)
		{
			return default(PacketWriter);
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0xC20E4C", Offset = "0xC20E4C", VA = "0xC20E4C")]
		public PacketWriter Write([CanBeNull] string s)
		{
			return default(PacketWriter);
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0xC20E54", Offset = "0xC20E54", VA = "0xC20E54")]
		public PacketWriter Write(ArraySegment<byte> data)
		{
			return default(PacketWriter);
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0xC20E5C", Offset = "0xC20E5C", VA = "0xC20E5C")]
		public PacketWriter Write(CodecSettings codecSettings)
		{
			return default(PacketWriter);
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0xC20E68", Offset = "0xC20E68", VA = "0xC20E68")]
		public PacketWriter Write(string playerName, ushort playerId, CodecSettings codecSettings)
		{
			return default(PacketWriter);
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0xC20E74", Offset = "0xC20E74", VA = "0xC20E74")]
		internal PacketWriter WriteMagic()
		{
			return default(PacketWriter);
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0xC20E80", Offset = "0xC20E80", VA = "0xC20E80")]
		public PacketWriter WriteHandshakeRequest([NotNull] string name, CodecSettings codecSettings)
		{
			return default(PacketWriter);
		}

		[Token(Token = "0x6000DBB")]
		public PacketWriter WriteHandshakeResponse<TPeer>(uint session, ushort clientId, [NotNull] List<ClientInfo<TPeer>> clients, [NotNull] Dictionary<string, List<ClientInfo<TPeer>>> peersByRoom)
		{
			return default(PacketWriter);
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0xC20E8C", Offset = "0xC20E8C", VA = "0xC20E8C")]
		public PacketWriter WriteHandshakeP2P(uint session, ushort peerId)
		{
			return default(PacketWriter);
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0xC20E94", Offset = "0xC20E94", VA = "0xC20E94")]
		public PacketWriter WriteClientState(uint session, [NotNull] string name, ushort clientId, CodecSettings codecSettings, [NotNull] Rooms rooms)
		{
			return default(PacketWriter);
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0xC20EA0", Offset = "0xC20EA0", VA = "0xC20EA0")]
		public PacketWriter WriteRemoveClient(uint session, ushort clientId)
		{
			return default(PacketWriter);
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0xC20EA8", Offset = "0xC20EA8", VA = "0xC20EA8")]
		internal PacketWriter WriteVoiceData(uint session, ushort senderId, ushort sequenceNumber, byte channelSession, [NotNull] IList<OpenChannel> channels, ArraySegment<byte> encodedAudio)
		{
			return default(PacketWriter);
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0xC20EB0", Offset = "0xC20EB0", VA = "0xC20EB0")]
		internal PacketWriter WriteTextPacket(uint session, ushort senderId, ChannelType recipient, ushort target, string data)
		{
			return default(PacketWriter);
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0xC20EB8", Offset = "0xC20EB8", VA = "0xC20EB8")]
		public PacketWriter WriteErrorWrongSession(uint session)
		{
			return default(PacketWriter);
		}

		[Token(Token = "0x6000DC2")]
		public PacketWriter WriteRelay<TPeer>(uint session, [NotNull] List<ClientInfo<TPeer>> destinations, ArraySegment<byte> segment, bool reliable)
		{
			return default(PacketWriter);
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0xC20EC0", Offset = "0xC20EC0", VA = "0xC20EC0")]
		public PacketWriter WriteDeltaChannelState(uint session, bool joined, ushort peer, [NotNull] string name)
		{
			return default(PacketWriter);
		}
	}
	[Token(Token = "0x20001DC")]
	internal class RoomClientsCollection<T>
	{
		[Token(Token = "0x20002FC")]
		private class ClientIdComparer : IComparer<ClientInfo<T>>
		{
			[Token(Token = "0x6001343")]
			public int Compare(ClientInfo<T> x, ClientInfo<T> y)
			{
				return default(int);
			}

			[Token(Token = "0x6001344")]
			public ClientIdComparer()
			{
			}
		}

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IComparer<ClientInfo<T>> ClientComparer;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Dictionary<string, List<ClientInfo<T>>> _clientByRoomName;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Dictionary<ushort, List<ClientInfo<T>>> _clientByRoomId;

		[Token(Token = "0x170001A0")]
		public Dictionary<string, List<ClientInfo<T>>> ByName
		{
			[Token(Token = "0x6000DC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DC5")]
		public void Add([NotNull] string room, [NotNull] ClientInfo<T> client)
		{
		}

		[Token(Token = "0x6000DC6")]
		public bool Remove([NotNull] string room, [NotNull] ClientInfo<T> client)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DC7")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000DC8")]
		[AttributeAttribute(Name = "ContractAnnotationAttribute", RVA = "0xB3DD64", Offset = "0xB3DD64")]
		public bool TryGetClientsInRoom([NotNull] string room, out List<ClientInfo<T>> clients)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DC9")]
		[AttributeAttribute(Name = "ContractAnnotationAttribute", RVA = "0xB3DD9C", Offset = "0xB3DD9C")]
		public bool TryGetClientsInRoom(ushort roomId, out List<ClientInfo<T>> clients)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DCA")]
		public int ClientCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000DCB")]
		public RoomClientsCollection()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	internal struct TextPacket
	{
		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly ushort Sender;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly ChannelType RecipientType;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ushort Recipient;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[CanBeNull]
		public readonly string Text;

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0xC210AC", Offset = "0xC210AC", VA = "0xC210AC")]
		public TextPacket(ushort sender, ChannelType recipientType, ushort recipient, [CanBeNull] string text)
		{
		}
	}
	[Token(Token = "0x20001DE")]
	internal class TrafficCounter
	{
		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36E14", Offset = "0xB36E14")]
		private uint <Packets>k__BackingField;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36E24", Offset = "0xB36E24")]
		private uint <Bytes>k__BackingField;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36E34", Offset = "0xB36E34")]
		private uint <BytesPerSecond>k__BackingField;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private uint _runningTotal;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Queue<KeyValuePair<DateTime, uint>> _updated;

		[Token(Token = "0x170001A1")]
		public uint Packets
		{
			[Token(Token = "0x6000DCE")]
			[Address(RVA = "0x110E640", Offset = "0x110E640", VA = "0x110E640")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DDD4", Offset = "0xB3DDD4")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6000DCF")]
			[Address(RVA = "0x110E648", Offset = "0x110E648", VA = "0x110E648")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DDE4", Offset = "0xB3DDE4")]
			private set
			{
			}
		}

		[Token(Token = "0x170001A2")]
		public uint Bytes
		{
			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0x110E650", Offset = "0x110E650", VA = "0x110E650")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DDF4", Offset = "0xB3DDF4")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6000DD1")]
			[Address(RVA = "0x110E658", Offset = "0x110E658", VA = "0x110E658")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DE04", Offset = "0xB3DE04")]
			private set
			{
			}
		}

		[Token(Token = "0x170001A3")]
		public uint BytesPerSecond
		{
			[Token(Token = "0x6000DD2")]
			[Address(RVA = "0x110E660", Offset = "0x110E660", VA = "0x110E660")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DE14", Offset = "0xB3DE14")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6000DD3")]
			[Address(RVA = "0x110E668", Offset = "0x110E668", VA = "0x110E668")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DE24", Offset = "0xB3DE24")]
			private set
			{
			}
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x110E670", Offset = "0x110E670", VA = "0x110E670")]
		public void Update(int bytes, [Optional] DateTime? now)
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x110E878", Offset = "0x110E878", VA = "0x110E878", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x110E964", Offset = "0x110E964", VA = "0x110E964")]
		public static void Combine(out uint packets, out uint bytes, out uint totalBytesPerSecond, [NotNull][ItemNotNull] params TrafficCounter[] counters)
		{
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x110E888", Offset = "0x110E888", VA = "0x110E888")]
		[NotNull]
		public static string Format(ulong packets, ulong bytes, ulong bytesPerSecond)
		{
			return null;
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x110E9FC", Offset = "0x110E9FC", VA = "0x110E9FC")]
		[NotNull]
		private static string FormatByteString(decimal bytes)
		{
			return null;
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x110EC50", Offset = "0x110EC50", VA = "0x110EC50")]
		public TrafficCounter()
		{
		}
	}
}
namespace Dissonance.Networking.Server
{
	[Token(Token = "0x20001DF")]
	internal interface IServer<TPeer>
	{
		[Token(Token = "0x170001A4")]
		uint SessionId
		{
			[Token(Token = "0x6000DDA")]
			get;
		}

		[Token(Token = "0x6000DDB")]
		void SendUnreliable([NotNull] List<TPeer> connections, ArraySegment<byte> packet);

		[Token(Token = "0x6000DDC")]
		void SendReliable(TPeer connection, ArraySegment<byte> packet);

		[Token(Token = "0x6000DDD")]
		void SendReliable([NotNull] List<TPeer> connections, ArraySegment<byte> packet);

		[Token(Token = "0x6000DDE")]
		void AddClient([NotNull] ClientInfo<TPeer> client);
	}
	[Token(Token = "0x20001E0")]
	internal class BroadcastingClientCollection<TPeer> : BaseClientCollection<TPeer>
	{
		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IServer<TPeer> _server;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly byte[] _tmpSendBuffer;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<TPeer> _tmpConnectionBuffer;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<ClientInfo<TPeer>> _tmpClientBuffer;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<ClientInfo<TPeer>> _tmpClientBufferHandshake;

		[Token(Token = "0x6000DDF")]
		public BroadcastingClientCollection(IServer<TPeer> server)
		{
		}

		[Token(Token = "0x6000DE0")]
		protected override void OnRemovedClient(ClientInfo<TPeer> client)
		{
		}

		[Token(Token = "0x6000DE1")]
		protected override void OnAddedClient(ClientInfo<TPeer> client)
		{
		}

		[Token(Token = "0x6000DE2")]
		public void ProcessHandshakeRequest(TPeer source, ref PacketReader reader)
		{
		}

		[Token(Token = "0x6000DE3")]
		public override void ProcessClientState(TPeer source, ref PacketReader reader)
		{
		}

		[Token(Token = "0x6000DE4")]
		public override void ProcessDeltaChannelState(ref PacketReader reader)
		{
		}

		[Token(Token = "0x6000DE5")]
		private void Broadcast(ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6000DE6")]
		public void RemoveClient(TPeer connection)
		{
		}
	}
	[Token(Token = "0x20001E1")]
	internal class ServerRelay<TPeer>
	{
		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IServer<TPeer> _server;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly BaseClientCollection<TPeer> _peers;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<TPeer> _tmpPeerBuffer;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<ushort> _tmpIdBuffer;

		[Token(Token = "0x6000DE7")]
		public ServerRelay(IServer<TPeer> server, BaseClientCollection<TPeer> peers)
		{
		}

		[Token(Token = "0x6000DE8")]
		public void ProcessPacketRelay(ref PacketReader reader, bool reliable)
		{
		}
	}
	[Token(Token = "0x20001E2")]
	public enum ServerState
	{
		[Token(Token = "0x4000ACF")]
		Ok,
		[Token(Token = "0x4000AD0")]
		Error
	}
}
namespace Dissonance.Networking.Client
{
	[Token(Token = "0x20001E3")]
	public enum ClientStatus
	{
		[Token(Token = "0x4000AD2")]
		Ok,
		[Token(Token = "0x4000AD3")]
		Error
	}
	[Token(Token = "0x20001E4")]
	internal enum ConnectionState
	{
		[Token(Token = "0x4000AD5")]
		None,
		[Token(Token = "0x4000AD6")]
		Negotiating,
		[Token(Token = "0x4000AD7")]
		Connected,
		[Token(Token = "0x4000AD8")]
		Disconnected
	}
	[Token(Token = "0x20001E5")]
	internal class ConnectionNegotiator<TPeer> : ISession where TPeer : struct
	{
		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly TimeSpan HandshakeRequestInterval;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ISendQueue<TPeer> _sender;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly string _playerName;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly CodecSettings _codecSettings;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private DateTime _lastHandshakeRequest;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _running;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _connectionStateValue;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36E44", Offset = "0xB36E44")]
		private uint <SessionId>k__BackingField;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36E54", Offset = "0xB36E54")]
		private ushort? <LocalId>k__BackingField;

		[Token(Token = "0x170001A5")]
		public ConnectionState State
		{
			[Token(Token = "0x6000DEA")]
			get
			{
				return default(ConnectionState);
			}
		}

		[Token(Token = "0x170001A6")]
		public uint SessionId
		{
			[Token(Token = "0x6000DEB")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DE54", Offset = "0xB3DE54")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6000DEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DE64", Offset = "0xB3DE64")]
			private set
			{
			}
		}

		[Token(Token = "0x170001A7")]
		public ushort? LocalId
		{
			[Token(Token = "0x6000DED")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DE74", Offset = "0xB3DE74")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DEE")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DE84", Offset = "0xB3DE84")]
			private set
			{
			}
		}

		[Token(Token = "0x170001A8")]
		public string LocalName
		{
			[Token(Token = "0x6000DEF")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DF0")]
		public ConnectionNegotiator([NotNull] ISendQueue<TPeer> sender, string playerName, [NotNull] CodecSettings codecSettings)
		{
		}

		[Token(Token = "0x6000DF1")]
		public void ReceiveHandshakeResponseHeader(ref PacketReader reader)
		{
		}

		[Token(Token = "0x6000DF2")]
		public void Start()
		{
		}

		[Token(Token = "0x6000DF3")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000DF4")]
		public void Update(DateTime utcNow)
		{
		}

		[Token(Token = "0x6000DF5")]
		private void SendHandshake(DateTime utcNow)
		{
		}
	}
	[Token(Token = "0x20001E6")]
	internal interface ISession
	{
		[Token(Token = "0x170001A9")]
		uint SessionId
		{
			[Token(Token = "0x6000DF7")]
			get;
		}

		[Token(Token = "0x170001AA")]
		ushort? LocalId
		{
			[Token(Token = "0x6000DF8")]
			get;
		}

		[Token(Token = "0x170001AB")]
		[NotNull]
		string LocalName
		{
			[Token(Token = "0x6000DF9")]
			get;
		}
	}
	[Token(Token = "0x20001E7")]
	internal class EventQueue
	{
		[Token(Token = "0x20002FD")]
		private enum EventType
		{
			[Token(Token = "0x4001003")]
			PlayerJoined,
			[Token(Token = "0x4001004")]
			PlayerLeft,
			[Token(Token = "0x4001005")]
			PlayerEnteredRoom,
			[Token(Token = "0x4001006")]
			PlayerExitedRoom,
			[Token(Token = "0x4001007")]
			PlayerStartedSpeaking,
			[Token(Token = "0x4001008")]
			PlayerStoppedSpeaking,
			[Token(Token = "0x4001009")]
			VoiceData,
			[Token(Token = "0x400100A")]
			TextMessage
		}

		[Token(Token = "0x20002FE")]
		private struct NetworkEvent
		{
			[Token(Token = "0x400100B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly EventType Type;

			[Token(Token = "0x400100C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private string _playerName;

			[Token(Token = "0x400100D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private CodecSettings _codecSettings;

			[Token(Token = "0x400100E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private string _room;

			[Token(Token = "0x400100F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private ReadOnlyCollection<string> _allRooms;

			[Token(Token = "0x4001010")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private readonly VoicePacket _voicePacket;

			[Token(Token = "0x4001011")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private readonly TextMessage _textMessage;

			[Token(Token = "0x170002FB")]
			public string PlayerName
			{
				[Token(Token = "0x6001345")]
				[Address(RVA = "0xC20790", Offset = "0xC20790", VA = "0xC20790")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001346")]
				[Address(RVA = "0xC20798", Offset = "0xC20798", VA = "0xC20798")]
				set
				{
				}
			}

			[Token(Token = "0x170002FC")]
			public CodecSettings CodecSettings
			{
				[Token(Token = "0x6001347")]
				[Address(RVA = "0xC207A0", Offset = "0xC207A0", VA = "0xC207A0")]
				get
				{
					return default(CodecSettings);
				}
				[Token(Token = "0x6001348")]
				[Address(RVA = "0xC207B0", Offset = "0xC207B0", VA = "0xC207B0")]
				set
				{
				}
			}

			[Token(Token = "0x170002FD")]
			public string Room
			{
				[Token(Token = "0x6001349")]
				[Address(RVA = "0xC207BC", Offset = "0xC207BC", VA = "0xC207BC")]
				get
				{
					return null;
				}
				[Token(Token = "0x600134A")]
				[Address(RVA = "0xC207C4", Offset = "0xC207C4", VA = "0xC207C4")]
				set
				{
				}
			}

			[Token(Token = "0x170002FE")]
			[NotNull]
			public ReadOnlyCollection<string> AllRooms
			{
				[Token(Token = "0x600134B")]
				[Address(RVA = "0xC207CC", Offset = "0xC207CC", VA = "0xC207CC")]
				get
				{
					return null;
				}
				[Token(Token = "0x600134C")]
				[Address(RVA = "0xC207D4", Offset = "0xC207D4", VA = "0xC207D4")]
				set
				{
				}
			}

			[Token(Token = "0x170002FF")]
			public VoicePacket VoicePacket
			{
				[Token(Token = "0x600134D")]
				[Address(RVA = "0xC207DC", Offset = "0xC207DC", VA = "0xC207DC")]
				get
				{
					return default(VoicePacket);
				}
			}

			[Token(Token = "0x17000300")]
			public TextMessage TextMessage
			{
				[Token(Token = "0x600134E")]
				[Address(RVA = "0xC207F8", Offset = "0xC207F8", VA = "0xC207F8")]
				get
				{
					return default(TextMessage);
				}
			}

			[Token(Token = "0x600134F")]
			[Address(RVA = "0xC20808", Offset = "0xC20808", VA = "0xC20808")]
			public NetworkEvent(EventType type)
			{
			}

			[Token(Token = "0x6001350")]
			[Address(RVA = "0xC20828", Offset = "0xC20828", VA = "0xC20828")]
			public NetworkEvent(VoicePacket voice)
			{
			}

			[Token(Token = "0x6001351")]
			[Address(RVA = "0xC2089C", Offset = "0xC2089C", VA = "0xC2089C")]
			public NetworkEvent(TextMessage text)
			{
			}

			[Token(Token = "0x6001352")]
			[Address(RVA = "0xC208F4", Offset = "0xC208F4", VA = "0xC208F4")]
			private void Check(EventType type)
			{
			}

			[Token(Token = "0x6001353")]
			[Address(RVA = "0xC208F8", Offset = "0xC208F8", VA = "0xC208F8")]
			private void Check(EventType typeA, EventType typeB)
			{
			}
		}

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ReadonlyLockedValue<List<NetworkEvent>> _queuedEvents;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IRecycler<byte[]> _byteArrayPool;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[NotNull]
		private readonly IRecycler<List<RemoteChannel>> _channelsListPool;

		[Token(Token = "0x14000031")]
		public event Action<string, CodecSettings> PlayerJoined
		{
			[Token(Token = "0x6000DFA")]
			[Address(RVA = "0x1107C54", Offset = "0x1107C54", VA = "0x1107C54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DE94", Offset = "0xB3DE94")]
			add
			{
			}
			[Token(Token = "0x6000DFB")]
			[Address(RVA = "0x1107CF8", Offset = "0x1107CF8", VA = "0x1107CF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DEA4", Offset = "0xB3DEA4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000032")]
		public event Action<string> PlayerLeft
		{
			[Token(Token = "0x6000DFC")]
			[Address(RVA = "0x1107D9C", Offset = "0x1107D9C", VA = "0x1107D9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DEB4", Offset = "0xB3DEB4")]
			add
			{
			}
			[Token(Token = "0x6000DFD")]
			[Address(RVA = "0x1107E40", Offset = "0x1107E40", VA = "0x1107E40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DEC4", Offset = "0xB3DEC4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000033")]
		public event Action<RoomEvent> PlayerEnteredRoom
		{
			[Token(Token = "0x6000DFE")]
			[Address(RVA = "0x1107EE4", Offset = "0x1107EE4", VA = "0x1107EE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DED4", Offset = "0xB3DED4")]
			add
			{
			}
			[Token(Token = "0x6000DFF")]
			[Address(RVA = "0x1107F88", Offset = "0x1107F88", VA = "0x1107F88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DEE4", Offset = "0xB3DEE4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000034")]
		public event Action<RoomEvent> PlayerExitedRoom
		{
			[Token(Token = "0x6000E00")]
			[Address(RVA = "0x110802C", Offset = "0x110802C", VA = "0x110802C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DEF4", Offset = "0xB3DEF4")]
			add
			{
			}
			[Token(Token = "0x6000E01")]
			[Address(RVA = "0x11080D0", Offset = "0x11080D0", VA = "0x11080D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DF04", Offset = "0xB3DF04")]
			remove
			{
			}
		}

		[Token(Token = "0x14000035")]
		public event Action<VoicePacket> VoicePacketReceived
		{
			[Token(Token = "0x6000E02")]
			[Address(RVA = "0x1108174", Offset = "0x1108174", VA = "0x1108174")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DF14", Offset = "0xB3DF14")]
			add
			{
			}
			[Token(Token = "0x6000E03")]
			[Address(RVA = "0x1108218", Offset = "0x1108218", VA = "0x1108218")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DF24", Offset = "0xB3DF24")]
			remove
			{
			}
		}

		[Token(Token = "0x14000036")]
		public event Action<TextMessage> TextMessageReceived
		{
			[Token(Token = "0x6000E04")]
			[Address(RVA = "0x11082BC", Offset = "0x11082BC", VA = "0x11082BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DF34", Offset = "0xB3DF34")]
			add
			{
			}
			[Token(Token = "0x6000E05")]
			[Address(RVA = "0x1108360", Offset = "0x1108360", VA = "0x1108360")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DF44", Offset = "0xB3DF44")]
			remove
			{
			}
		}

		[Token(Token = "0x14000037")]
		public event Action<string> PlayerStartedSpeaking
		{
			[Token(Token = "0x6000E06")]
			[Address(RVA = "0x1108404", Offset = "0x1108404", VA = "0x1108404")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DF54", Offset = "0xB3DF54")]
			add
			{
			}
			[Token(Token = "0x6000E07")]
			[Address(RVA = "0x11084A8", Offset = "0x11084A8", VA = "0x11084A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DF64", Offset = "0xB3DF64")]
			remove
			{
			}
		}

		[Token(Token = "0x14000038")]
		public event Action<string> PlayerStoppedSpeaking
		{
			[Token(Token = "0x6000E08")]
			[Address(RVA = "0x110854C", Offset = "0x110854C", VA = "0x110854C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DF74", Offset = "0xB3DF74")]
			add
			{
			}
			[Token(Token = "0x6000E09")]
			[Address(RVA = "0x11085F0", Offset = "0x11085F0", VA = "0x11085F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DF84", Offset = "0xB3DF84")]
			remove
			{
			}
		}

		[Token(Token = "0x14000039")]
		internal event Action<string> OnEnqueuePlayerLeft
		{
			[Token(Token = "0x6000E0A")]
			[Address(RVA = "0x1108694", Offset = "0x1108694", VA = "0x1108694")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DF94", Offset = "0xB3DF94")]
			add
			{
			}
			[Token(Token = "0x6000E0B")]
			[Address(RVA = "0x1108738", Offset = "0x1108738", VA = "0x1108738")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DFA4", Offset = "0xB3DFA4")]
			remove
			{
			}
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x11087DC", Offset = "0x11087DC", VA = "0x11087DC")]
		public EventQueue([NotNull] IRecycler<byte[]> byteArrayPool, [NotNull] IRecycler<List<RemoteChannel>> channelsListPool)
		{
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0x11088F4", Offset = "0x11088F4", VA = "0x11088F4")]
		public bool DispatchEvents()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0x1108FC4", Offset = "0x1108FC4", VA = "0x1108FC4")]
		private static RoomEvent CreateRoomEvent(NetworkEvent @event, bool joined)
		{
			return default(RoomEvent);
		}

		[Token(Token = "0x6000E0F")]
		private static bool InvokeEvent<T>(T arg, [CanBeNull] Action<T> handler)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E10")]
		private static bool InvokeEvent<T1, T2>(T1 arg1, T2 arg2, [CanBeNull] Action<T1, T2> handler)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0x1108FFC", Offset = "0x1108FFC", VA = "0x1108FFC")]
		public void EnqueuePlayerJoined(string playerName, CodecSettings codecSettings)
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0x11091E4", Offset = "0x11091E4", VA = "0x11091E4")]
		public void EnqueuePlayerLeft(string playerName)
		{
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0x11093EC", Offset = "0x11093EC", VA = "0x11093EC")]
		public void EnqueuePlayerEnteredRoom([NotNull] string playerName, [NotNull] string room, [NotNull][ItemNotNull] ReadOnlyCollection<string> allRooms)
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0x11095CC", Offset = "0x11095CC", VA = "0x11095CC")]
		public void EnqueuePlayerExitedRoom([NotNull] string playerName, [NotNull] string room, [NotNull][ItemNotNull] ReadOnlyCollection<string> allRooms)
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0x110979C", Offset = "0x110979C", VA = "0x110979C")]
		public void EnqueueStartedSpeaking(string playerName)
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0x1109988", Offset = "0x1109988", VA = "0x1109988")]
		public void EnqueueStoppedSpeaking(string playerName)
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0x1109B74", Offset = "0x1109B74", VA = "0x1109B74")]
		public void EnqueueVoiceData(VoicePacket data)
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x1109DAC", Offset = "0x1109DAC", VA = "0x1109DAC")]
		public void EnqueueTextData(TextMessage data)
		{
		}
	}
	[Token(Token = "0x20001E8")]
	internal interface IClient<TPeer> where TPeer : struct
	{
		[Token(Token = "0x6000E1A")]
		void SendReliable(ArraySegment<byte> arraySegment);

		[Token(Token = "0x6000E1B")]
		void SendUnreliable(ArraySegment<byte> arraySegment);

		[Token(Token = "0x6000E1C")]
		void SendReliableP2P(List<ClientInfo<TPeer?>> destinations, ArraySegment<byte> packet);

		[Token(Token = "0x6000E1D")]
		void SendUnreliableP2P(List<ClientInfo<TPeer?>> destinations, ArraySegment<byte> packet);
	}
	[Token(Token = "0x20001E9")]
	internal struct OpenChannel
	{
		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ChannelProperties _config;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly ChannelType _type;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private readonly ushort _recipient;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string _name;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly bool _isClosing;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		private readonly ushort _sessionId;

		[Token(Token = "0x170001AC")]
		[NotNull]
		public ChannelProperties Config
		{
			[Token(Token = "0x6000E1E")]
			[Address(RVA = "0xC20938", Offset = "0xC20938", VA = "0xC20938")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AD")]
		public ushort Bitfield
		{
			[Token(Token = "0x6000E1F")]
			[Address(RVA = "0xC20940", Offset = "0xC20940", VA = "0xC20940")]
			get
			{
				return default(ushort);
			}
		}

		[Token(Token = "0x170001AE")]
		public ushort Recipient
		{
			[Token(Token = "0x6000E20")]
			[Address(RVA = "0xC20948", Offset = "0xC20948", VA = "0xC20948")]
			get
			{
				return default(ushort);
			}
		}

		[Token(Token = "0x170001AF")]
		public ChannelType Type
		{
			[Token(Token = "0x6000E21")]
			[Address(RVA = "0xC20950", Offset = "0xC20950", VA = "0xC20950")]
			get
			{
				return default(ChannelType);
			}
		}

		[Token(Token = "0x170001B0")]
		public bool IsClosing
		{
			[Token(Token = "0x6000E22")]
			[Address(RVA = "0xC20958", Offset = "0xC20958", VA = "0xC20958")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B1")]
		public bool IsPositional
		{
			[Token(Token = "0x6000E23")]
			[Address(RVA = "0xC20960", Offset = "0xC20960", VA = "0xC20960")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B2")]
		public ChannelPriority Priority
		{
			[Token(Token = "0x6000E24")]
			[Address(RVA = "0xC2097C", Offset = "0xC2097C", VA = "0xC2097C")]
			get
			{
				return default(ChannelPriority);
			}
		}

		[Token(Token = "0x170001B3")]
		public float AmplitudeMultiplier
		{
			[Token(Token = "0x6000E25")]
			[Address(RVA = "0xC20998", Offset = "0xC20998", VA = "0xC20998")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001B4")]
		public ushort SessionId
		{
			[Token(Token = "0x6000E26")]
			[Address(RVA = "0xC209B4", Offset = "0xC209B4", VA = "0xC209B4")]
			get
			{
				return default(ushort);
			}
		}

		[Token(Token = "0x170001B5")]
		[NotNull]
		public string Name
		{
			[Token(Token = "0x6000E27")]
			[Address(RVA = "0xC209BC", Offset = "0xC209BC", VA = "0xC209BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xC209C4", Offset = "0xC209C4", VA = "0xC209C4")]
		public OpenChannel(ChannelType type, ushort sessionId, ChannelProperties config, bool closing, ushort recipient, string name)
		{
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xC209E4", Offset = "0xC209E4", VA = "0xC209E4")]
		[Pure]
		public OpenChannel AsClosing()
		{
			return default(OpenChannel);
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xC209EC", Offset = "0xC209EC", VA = "0xC209EC")]
		[Pure]
		public OpenChannel AsOpen()
		{
			return default(OpenChannel);
		}
	}
	[Token(Token = "0x20001EA")]
	internal class PacketDelaySimulator
	{
		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly System.Random _rnd;

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x110A450", Offset = "0x110A450", VA = "0x110A450")]
		private static bool IsOrderedReliable(MessageTypes header)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x110A460", Offset = "0x110A460", VA = "0x110A460")]
		public bool ShouldLose(ArraySegment<byte> packet)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x110A680", Offset = "0x110A680", VA = "0x110A680")]
		public PacketDelaySimulator()
		{
		}
	}
	[Token(Token = "0x20001EB")]
	internal class PeerVoiceReceiver
	{
		[Token(Token = "0x20002FF")]
		private struct ChannelsMetadata
		{
			[Token(Token = "0x4001012")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly bool IsPositional;

			[Token(Token = "0x4001013")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public readonly float AmplitudeMultiplier;

			[Token(Token = "0x4001014")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly ChannelPriority Priority;

			[Token(Token = "0x6001354")]
			[Address(RVA = "0xC20A38", Offset = "0xC20A38", VA = "0xC20A38")]
			public ChannelsMetadata(bool isPositional, float amplitudeMultiplier, ChannelPriority priority)
			{
			}

			[Token(Token = "0x6001355")]
			[Address(RVA = "0xC20A4C", Offset = "0xC20A4C", VA = "0xC20A4C")]
			public ChannelsMetadata CombineWith(ChannelsMetadata other)
			{
				return default(ChannelsMetadata);
			}
		}

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string _name;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly EventQueue _events;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Rooms _localListeningRooms;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ConcurrentPool<byte[]> _byteArrPool;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly ConcurrentPool<List<RemoteChannel>> _channelListPool;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ushort _localId;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly string _localName;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private DateTime _lastReceiptTime;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ushort _remoteSequenceNumber;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private uint _localSequenceNumber;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36F04", Offset = "0xB36F04")]
		private bool <Open>k__BackingField;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int _currentChannelSession;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly Dictionary<int, int> _expectedPerChannelSessions;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly List<int> _tmpCompositeIdBuffer;

		[Token(Token = "0x170001B6")]
		public string Name
		{
			[Token(Token = "0x6000E2F")]
			[Address(RVA = "0x110A6E8", Offset = "0x110A6E8", VA = "0x110A6E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B7")]
		public bool Open
		{
			[Token(Token = "0x6000E30")]
			[Address(RVA = "0x110A6F0", Offset = "0x110A6F0", VA = "0x110A6F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DFD4", Offset = "0xB3DFD4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E31")]
			[Address(RVA = "0x110A6F8", Offset = "0x110A6F8", VA = "0x110A6F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DFE4", Offset = "0xB3DFE4")]
			private set
			{
			}
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x110A704", Offset = "0x110A704", VA = "0x110A704")]
		public PeerVoiceReceiver(string remoteName, ushort localId, string localName, EventQueue events, Rooms listeningRooms, ConcurrentPool<byte[]> byteArrPool, ConcurrentPool<List<RemoteChannel>> channelListPool)
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x110A7F0", Offset = "0x110A7F0", VA = "0x110A7F0")]
		public void CheckTimeout(DateTime utcNow, TimeSpan timeout)
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x110A8CC", Offset = "0x110A8CC", VA = "0x110A8CC")]
		public void StopSpeaking()
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x110A970", Offset = "0x110A970", VA = "0x110A970")]
		private void StartSpeaking(ushort startSequenceNumber, int channelSession, DateTime utcNow)
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x110AA4C", Offset = "0x110AA4C", VA = "0x110AA4C")]
		public void ReceivePacket(ref PacketReader reader, DateTime utcNow)
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x110ACE8", Offset = "0x110ACE8", VA = "0x110ACE8")]
		private void ReadChannels(ref PacketReader reader, ushort numChannels, out bool allClosing, out bool forceReset, out ChannelsMetadata channelsMetadata, [NotNull] ICollection<RemoteChannel> channelsOut)
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x110B4A8", Offset = "0x110B4A8", VA = "0x110B4A8")]
		private bool HasChannelSessionChanged(int compositeId, int expectedValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x110B280", Offset = "0x110B280", VA = "0x110B280")]
		private RemoteChannel? IsChannelToLocalPlayer(ChannelBitField channel, ushort recipient)
		{
			return null;
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x110B568", Offset = "0x110B568", VA = "0x110B568")]
		private void RemoveChannelsExcept([NotNull] List<int> keys)
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x110B024", Offset = "0x110B024", VA = "0x110B024")]
		private bool UpdateSpeakerState(bool allClosing, bool forceReset, int channelSession, ushort sequenceNumber, DateTime utcNow)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x110B808", Offset = "0x110B808", VA = "0x110B808")]
		private bool UpdateSequenceNumber(ushort sequenceNumber, DateTime utcNow)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x110ACB8", Offset = "0x110ACB8", VA = "0x110ACB8")]
		private static bool IsPacketFromPreviousSession(int currentChannelSession, int packetChannelSession)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001EC")]
	internal class SendQueue<TPeer> : ISendQueue<TPeer> where TPeer : struct
	{
		[Serializable]
		[Token(Token = "0x2000300")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30EC0", Offset = "0xB30EC0")]
		private sealed class <>c
		{
			[Token(Token = "0x4001015")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001016")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<List<ClientInfo<TPeer?>>> <>9__10_0;

			[Token(Token = "0x6001357")]
			public <>c()
			{
			}

			[Token(Token = "0x6001358")]
			internal List<ClientInfo<TPeer?>> <.ctor>b__10_0()
			{
				return null;
			}
		}

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IClient<TPeer> _client;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<ArraySegment<byte>> _serverReliableQueue;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<ArraySegment<byte>> _serverUnreliableQueue;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<KeyValuePair<List<ClientInfo<TPeer?>>, ArraySegment<byte>>> _reliableP2PQueue;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<KeyValuePair<List<ClientInfo<TPeer?>>, ArraySegment<byte>>> _unreliableP2PQueue;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ConcurrentPool<byte[]> _sendBufferPool;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Pool<List<ClientInfo<TPeer?>>> _listPool;

		[Token(Token = "0x170001B8")]
		public ConcurrentPool<byte[]> SendBufferPool
		{
			[Token(Token = "0x6000E3F")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E40")]
		public SendQueue([NotNull] IClient<TPeer> client, [NotNull] ConcurrentPool<byte[]> bytePool)
		{
		}

		[Token(Token = "0x6000E41")]
		public void Update()
		{
		}

		[Token(Token = "0x6000E42")]
		private void Recycle([NotNull] byte[] array)
		{
		}

		[Token(Token = "0x6000E43")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000E44")]
		public void EnqueueReliable(ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6000E45")]
		public void EnqeueUnreliable(ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6000E46")]
		public void EnqueueReliableP2P(ushort localId, IList<ClientInfo<TPeer?>> destinations, ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6000E47")]
		public void EnqueueUnreliableP2P(ushort localId, IList<ClientInfo<TPeer?>> destinations, ArraySegment<byte> packet)
		{
		}

		[Token(Token = "0x6000E48")]
		private void EnqueueP2P(ushort localId, [NotNull] ICollection<ClientInfo<TPeer?>> destinations, [NotNull] ICollection<KeyValuePair<List<ClientInfo<TPeer?>>, ArraySegment<byte>>> queue, ArraySegment<byte> packet)
		{
		}
	}
	[Token(Token = "0x20001ED")]
	internal interface ISendQueue<TPeer> where TPeer : struct
	{
		[Token(Token = "0x170001B9")]
		[NotNull]
		ConcurrentPool<byte[]> SendBufferPool
		{
			[Token(Token = "0x6000E4A")]
			get;
		}

		[Token(Token = "0x6000E4B")]
		void EnqueueReliable(ArraySegment<byte> packet);

		[Token(Token = "0x6000E4C")]
		void EnqeueUnreliable(ArraySegment<byte> packet);

		[Token(Token = "0x6000E4D")]
		void EnqueueReliableP2P(ushort localId, [NotNull] IList<ClientInfo<TPeer?>> destinations, ArraySegment<byte> packet);

		[Token(Token = "0x6000E4E")]
		void EnqueueUnreliableP2P(ushort localId, [NotNull] IList<ClientInfo<TPeer?>> destinations, ArraySegment<byte> packet);
	}
	[Token(Token = "0x20001EE")]
	internal class SlaveClientCollection<TPeer> : BaseClientCollection<TPeer?> where TPeer : struct
	{
		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ISendQueue<TPeer> _sender;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ISession _session;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly EventQueue _events;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Rooms _localRooms;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly string _playerName;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly CodecSettings _codecSettings;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<KeyValuePair<ushort, TPeer>> _pendingIntroductions;

		[Token(Token = "0x1400003A")]
		public event Action<ClientInfo<TPeer?>> OnClientJoined
		{
			[Token(Token = "0x6000E4F")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3DFF4", Offset = "0xB3DFF4")]
			add
			{
			}
			[Token(Token = "0x6000E50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E004", Offset = "0xB3E004")]
			remove
			{
			}
		}

		[Token(Token = "0x1400003B")]
		public event Action<ClientInfo<TPeer?>> OnClientIntroducedP2P
		{
			[Token(Token = "0x6000E51")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E014", Offset = "0xB3E014")]
			add
			{
			}
			[Token(Token = "0x6000E52")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E024", Offset = "0xB3E024")]
			remove
			{
			}
		}

		[Token(Token = "0x6000E53")]
		public SlaveClientCollection([NotNull] ISendQueue<TPeer> sender, [NotNull] ISession session, [NotNull] EventQueue events, [NotNull] Rooms localRooms, [NotNull] string playerName, CodecSettings codecSettings)
		{
		}

		[Token(Token = "0x6000E54")]
		protected override void OnAddedClient(ClientInfo<TPeer?> client)
		{
		}

		[Token(Token = "0x6000E55")]
		protected override void OnRemovedClient(ClientInfo<TPeer?> client)
		{
		}

		[Token(Token = "0x6000E56")]
		protected override void OnClientEnteredRoom(ClientInfo<TPeer?> client, string room)
		{
		}

		[Token(Token = "0x6000E57")]
		protected override void OnClientExitedRoom(ClientInfo<TPeer?> client, string room)
		{
		}

		[Token(Token = "0x6000E58")]
		public void ProcessRemoveClient(ref PacketReader reader)
		{
		}

		[Token(Token = "0x6000E59")]
		public void ReceiveHandshakeResponseBody(ref PacketReader reader)
		{
		}

		[Token(Token = "0x6000E5A")]
		private void SendClientState()
		{
		}

		[Token(Token = "0x6000E5B")]
		private void SendLeaveRoom(string room)
		{
		}

		[Token(Token = "0x6000E5C")]
		private void SendJoinRoom(string room)
		{
		}

		[Token(Token = "0x6000E5D")]
		public override void Stop()
		{
		}

		[Token(Token = "0x6000E5E")]
		public void IntroduceP2P(ushort id, TPeer connection)
		{
		}

		[Token(Token = "0x6000E5F")]
		private bool TryIntroduceP2P(ushort id, TPeer connection)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001EF")]
	internal class TextReceiver<TPeer> where TPeer : struct
	{
		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly EventQueue _events;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Rooms _rooms;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IClientCollection<TPeer?> _peers;

		[Token(Token = "0x6000E60")]
		public TextReceiver([NotNull] EventQueue events, [NotNull] Rooms rooms, [NotNull] IClientCollection<TPeer?> peers)
		{
		}

		[Token(Token = "0x6000E61")]
		public void ProcessTextMessage(ref PacketReader reader)
		{
		}

		[Token(Token = "0x6000E62")]
		[CanBeNull]
		private string GetTxtMessageRecipient(ChannelType txtRecipientType, ushort txtRecipient)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F0")]
	internal class TextSender<TPeer> where TPeer : struct
	{
		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ISession _session;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ISendQueue<TPeer> _sender;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IClientCollection<TPeer?> _peers;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<ClientInfo<TPeer?>> _tmpDests;

		[Token(Token = "0x6000E64")]
		public TextSender(ISendQueue<TPeer> sender, ISession session, IClientCollection<TPeer?> peers)
		{
		}

		[Token(Token = "0x6000E65")]
		public void Send(string data, ChannelType type, string recipient)
		{
		}
	}
	[Token(Token = "0x20001F1")]
	internal struct VoicePacketOptions
	{
		[Token(Token = "0x4000B21")]
		public const int ChannelSessionRange = 4;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly byte _bitfield;

		[Token(Token = "0x170001BA")]
		public byte ChannelSession
		{
			[Token(Token = "0x6000E67")]
			[Address(RVA = "0xC20A6C", Offset = "0xC20A6C", VA = "0xC20A6C")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x170001BB")]
		public byte Bitfield
		{
			[Token(Token = "0x6000E68")]
			[Address(RVA = "0xC20A78", Offset = "0xC20A78", VA = "0xC20A78")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0xC20A80", Offset = "0xC20A80", VA = "0xC20A80")]
		private VoicePacketOptions(byte bitfield)
		{
		}

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x110B93C", Offset = "0x110B93C", VA = "0x110B93C")]
		public static VoicePacketOptions Unpack(byte bitfield)
		{
			return default(VoicePacketOptions);
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x110B944", Offset = "0x110B944", VA = "0x110B944")]
		public static VoicePacketOptions Pack(byte channelSession)
		{
			return default(VoicePacketOptions);
		}
	}
	[Token(Token = "0x20001F2")]
	internal class VoiceReceiver<TPeer> where TPeer : struct
	{
		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly TimeSpan Timeout;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ISession _session;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IClientCollection<TPeer?> _clients;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly EventQueue _events;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Rooms _rooms;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ConcurrentPool<byte[]> _byteArrayPool;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ConcurrentPool<List<RemoteChannel>> _channelListPool;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<PeerVoiceReceiver> _receivers;

		[Token(Token = "0x6000E6C")]
		public VoiceReceiver(ISession session, IClientCollection<TPeer?> clients, EventQueue events, Rooms rooms, ConcurrentPool<byte[]> byteArrayPool, ConcurrentPool<List<RemoteChannel>> channelListPool)
		{
		}

		[Token(Token = "0x6000E6D")]
		private void OnPlayerLeft([NotNull] string name)
		{
		}

		[Token(Token = "0x6000E6E")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000E6F")]
		public void Update(DateTime utcNow)
		{
		}

		[Token(Token = "0x6000E70")]
		private void CheckTimeouts(DateTime utcNow)
		{
		}

		[Token(Token = "0x6000E71")]
		public void ReceiveVoiceData(ref PacketReader reader, [Optional] DateTime? utcNow)
		{
		}
	}
	[Token(Token = "0x20001F3")]
	internal class VoiceSender<TPeer> where TPeer : struct
	{
		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ISendQueue<TPeer> _sender;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ISession _session;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IClientCollection<TPeer?> _peers;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly EventQueue _events;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly PlayerChannels _playerChannels;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly RoomChannels _roomChannels;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private byte _channelSessionId;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ReadonlyLockedValue<List<OpenChannel>> _openChannels;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<KeyValuePair<string, ChannelProperties>> _pendingPlayerChannels;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ushort _sequenceNumber;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly HashSet<ClientInfo<TPeer?>> _tmpDestsSet;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<ClientInfo<TPeer?>> _tmpDestsList;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _hadId;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _noIdSendCount;

		[Token(Token = "0x6000E73")]
		public VoiceSender([NotNull] ISendQueue<TPeer> sender, [NotNull] ISession session, [NotNull] IClientCollection<TPeer?> peers, [NotNull] EventQueue events, [NotNull] PlayerChannels playerChannels, [NotNull] RoomChannels roomChannels)
		{
		}

		[Token(Token = "0x6000E74")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000E75")]
		private void OnPlayerJoined([NotNull] string name, CodecSettings codecSettings)
		{
		}

		[Token(Token = "0x6000E76")]
		private void OnPlayerLeft([NotNull] string name)
		{
		}

		[Token(Token = "0x6000E77")]
		private void OpenPlayerChannel([NotNull] string player, [NotNull] ChannelProperties config)
		{
		}

		[Token(Token = "0x6000E78")]
		private void ClosePlayerChannel([NotNull] string player, [NotNull] ChannelProperties config)
		{
		}

		[Token(Token = "0x6000E79")]
		private void OpenRoomChannel([NotNull] string room, [NotNull] ChannelProperties config)
		{
		}

		[Token(Token = "0x6000E7A")]
		private void CloseRoomChannel([NotNull] string room, [NotNull] ChannelProperties config)
		{
		}

		[Token(Token = "0x6000E7B")]
		private void OpenChannel(ChannelType type, [NotNull] ChannelProperties config, ushort recipient, [NotNull] string name)
		{
		}

		[Token(Token = "0x6000E7C")]
		private void CloseChannel(ChannelType type, [NotNull] ChannelProperties properties, ushort id)
		{
		}

		[Token(Token = "0x6000E7D")]
		private void ClearClosedChannels()
		{
		}

		[Token(Token = "0x6000E7E")]
		public void Send(ArraySegment<byte> encodedAudio)
		{
		}

		[Token(Token = "0x6000E7F")]
		[NotNull]
		private List<ClientInfo<TPeer?>> GetVoiceDestinations([NotNull] IList<OpenChannel> openChannels)
		{
			return null;
		}
	}
}
namespace Dissonance.Extensions
{
	[Token(Token = "0x20001F4")]
	public static class ArraySegmentExtensions
	{
		[Token(Token = "0x2000301")]
		internal struct DisposableHandle : IDisposable
		{
			[Token(Token = "0x4001017")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly IntPtr _ptr;

			[Token(Token = "0x4001018")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private GCHandle _handle;

			[Token(Token = "0x17000301")]
			public IntPtr Ptr
			{
				[Token(Token = "0x6001359")]
				[Address(RVA = "0xC20520", Offset = "0xC20520", VA = "0xC20520")]
				get
				{
					return default(IntPtr);
				}
			}

			[Token(Token = "0x600135A")]
			[Address(RVA = "0xC20528", Offset = "0xC20528", VA = "0xC20528")]
			internal DisposableHandle(IntPtr ptr, GCHandle handle)
			{
			}

			[Token(Token = "0x600135B")]
			[Address(RVA = "0xC20534", Offset = "0xC20534", VA = "0xC20534", Slot = "4")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x6000E81")]
		public static ArraySegment<T> CopyTo<T>(this ArraySegment<T> source, [NotNull] T[] destination, int destinationOffset = 0) where T : struct
		{
			return default(ArraySegment<T>);
		}

		[Token(Token = "0x6000E82")]
		internal static int CopyFrom<T>(this ArraySegment<T> destination, [NotNull] T[] source)
		{
			return default(int);
		}

		[Token(Token = "0x6000E83")]
		[NotNull]
		internal static T[] ToArray<T>(this ArraySegment<T> segment) where T : struct
		{
			return null;
		}

		[Token(Token = "0x6000E84")]
		internal static void Clear<T>(this ArraySegment<T> segment)
		{
		}

		[Token(Token = "0x6000E85")]
		internal static DisposableHandle Pin<T>(this ArraySegment<T> segment) where T : struct
		{
			return default(DisposableHandle);
		}
	}
	[Token(Token = "0x20001F5")]
	public static class IEnumerableExtensions
	{
		[Token(Token = "0x2000302")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30ED0", Offset = "0xB30ED0")]
		private sealed class <ConcatUnsafe>d__1<T> : IEnumerable<T>, IEnumerable, IEnumerator<T>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001019")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x400101A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <>2__current;

			[Token(Token = "0x400101B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x400101C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerable<T> enumerable;

			[Token(Token = "0x400101D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IEnumerable<T> <>3__enumerable;

			[Token(Token = "0x400101E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T tail;

			[Token(Token = "0x400101F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T <>3__tail;

			[Token(Token = "0x4001020")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private IEnumerator<T> <>7__wrap1;

			[Token(Token = "0x17000302")]
			private T System.Collections.Generic.IEnumerator<T>.Current
			{
				[Token(Token = "0x6001360")]
				[DebuggerHidden]
				get
				{
					return (T)null;
				}
			}

			[Token(Token = "0x17000303")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001362")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600135C")]
			[DebuggerHidden]
			public <ConcatUnsafe>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x600135D")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600135E")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600135F")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001361")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001363")]
			[DebuggerHidden]
			private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001364")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x6000E86")]
		[NotNull]
		public static IEnumerable<T> Concat<T>([NotNull] this IEnumerable<T> enumerable, T tail)
		{
			return null;
		}

		[Token(Token = "0x6000E87")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xB3E104", Offset = "0xB3E104")]
		[NotNull]
		private static IEnumerable<T> ConcatUnsafe<T>([NotNull] this IEnumerable<T> enumerable, T tail)
		{
			return null;
		}
	}
	[Token(Token = "0x20001F6")]
	internal static class Int32Extensions
	{
		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x1105EC0", Offset = "0x1105EC0", VA = "0x1105EC0")]
		internal static int WrappedDelta(this int a, int b)
		{
			return default(int);
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x1105EF0", Offset = "0x1105EF0", VA = "0x1105EF0")]
		internal static int WrappedDelta(this int a, int b, int max)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001F7")]
	internal static class StringExtensions
	{
		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x1105F44", Offset = "0x1105F44", VA = "0x1105F44")]
		public static int GetFnvHashCode([CanBeNull] this string str)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001F8")]
	internal static class UShortExtensions
	{
		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x1105FD0", Offset = "0x1105FD0", VA = "0x1105FD0")]
		internal static int WrappedDelta(this ushort a, ushort b)
		{
			return default(int);
		}
	}
}
namespace Dissonance.Datastructures
{
	[Token(Token = "0x20001F9")]
	internal abstract class BaseWindowCalculator<T> where T : struct
	{
		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly RingBuffer<T> _buffer;

		[Token(Token = "0x170001BC")]
		protected int Count
		{
			[Token(Token = "0x6000E8C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001BD")]
		protected int Capacity
		{
			[Token(Token = "0x6000E8D")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E8E")]
		protected BaseWindowCalculator(uint size)
		{
		}

		[Token(Token = "0x6000E8F")]
		public void Update(T added)
		{
		}

		[Token(Token = "0x6000E90")]
		protected abstract void Updated(T? removed, T added);

		[Token(Token = "0x6000E91")]
		public virtual void Clear()
		{
		}
	}
	[Token(Token = "0x20001FA")]
	public class ConcurrentPool<T> : IRecycler<T> where T : class
	{
		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T> _factory;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TransferBuffer<T> _items;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ReadonlyLockedValue<int> _getter;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly ReadonlyLockedValue<int> _putter;

		[Token(Token = "0x6000E92")]
		public ConcurrentPool(int maxSize, Func<T> factory)
		{
		}

		[Token(Token = "0x6000E93")]
		[NotNull]
		public T Get()
		{
			return null;
		}

		[Token(Token = "0x6000E94")]
		public void Put([NotNull] T item)
		{
		}

		[Token(Token = "0x6000E95")]
		private void Dissonance.Datastructures.IRecycler<T>.Recycle([NotNull] T item)
		{
		}
	}
	[Token(Token = "0x20001FB")]
	internal class POTBuffer
	{
		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<float[]> _buffers;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36F34", Offset = "0xB36F34")]
		private uint <MaxCount>k__BackingField;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36F44", Offset = "0xB36F44")]
		private uint <Count>k__BackingField;

		[Token(Token = "0x170001BE")]
		public uint MaxCount
		{
			[Token(Token = "0x6000E96")]
			[Address(RVA = "0x10FDE58", Offset = "0x10FDE58", VA = "0x10FDE58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E1D8", Offset = "0xB3E1D8")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6000E97")]
			[Address(RVA = "0x10FDE60", Offset = "0x10FDE60", VA = "0x10FDE60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E1E8", Offset = "0xB3E1E8")]
			private set
			{
			}
		}

		[Token(Token = "0x170001BF")]
		public uint Pow2
		{
			[Token(Token = "0x6000E98")]
			[Address(RVA = "0x10FDE68", Offset = "0x10FDE68", VA = "0x10FDE68")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x170001C0")]
		public uint Count
		{
			[Token(Token = "0x6000E99")]
			[Address(RVA = "0x10FDEB8", Offset = "0x10FDEB8", VA = "0x10FDEB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E1F8", Offset = "0xB3E1F8")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6000E9A")]
			[Address(RVA = "0x10FDEC0", Offset = "0x10FDEC0", VA = "0x10FDEC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E208", Offset = "0xB3E208")]
			private set
			{
			}
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x10FDEC8", Offset = "0x10FDEC8", VA = "0x10FDEC8")]
		public POTBuffer(byte initialMaxPow)
		{
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x10FDFD4", Offset = "0x10FDFD4", VA = "0x10FDFD4")]
		public void Free()
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x10FDFDC", Offset = "0x10FDFDC", VA = "0x10FDFDC")]
		public void Alloc(uint count)
		{
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x10FE080", Offset = "0x10FE080", VA = "0x10FE080")]
		public bool Expand(int limit = int.MaxValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x10FE178", Offset = "0x10FE178", VA = "0x10FE178")]
		[NotNull]
		public float[] GetBuffer(ref uint count, bool zeroed = false)
		{
			return null;
		}
	}
	[Token(Token = "0x20001FC")]
	internal class PacketLossCalculator : BaseWindowCalculator<bool>
	{
		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private uint _lost;

		[Token(Token = "0x170001C1")]
		public float PacketLoss
		{
			[Token(Token = "0x6000EA0")]
			[Address(RVA = "0x10FE34C", Offset = "0x10FE34C", VA = "0x10FE34C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x10FE42C", Offset = "0x10FE42C", VA = "0x10FE42C")]
		public PacketLossCalculator(uint size)
		{
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x10FE48C", Offset = "0x10FE48C", VA = "0x10FE48C", Slot = "4")]
		protected override void Updated(bool? removed, bool added)
		{
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0x10FE528", Offset = "0x10FE528", VA = "0x10FE528", Slot = "5")]
		public override void Clear()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	internal class Pool<T> : IRecycler<T> where T : class
	{
		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int _maxSize;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T> _factory;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Stack<T> _items;

		[Token(Token = "0x170001C2")]
		public int Count
		{
			[Token(Token = "0x6000EA4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001C3")]
		public int Capacity
		{
			[Token(Token = "0x6000EA5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000EA6")]
		public Pool(int maxSize, Func<T> factory)
		{
		}

		[Token(Token = "0x6000EA7")]
		public T Get()
		{
			return null;
		}

		[Token(Token = "0x6000EA8")]
		public void Put([NotNull] T item)
		{
		}

		[Token(Token = "0x6000EA9")]
		private void Dissonance.Datastructures.IRecycler<T>.Recycle([NotNull] T item)
		{
		}
	}
	[Token(Token = "0x20001FE")]
	public interface IRecycler<in T> where T : class
	{
		[Token(Token = "0x6000EAA")]
		void Recycle(T item);
	}
	[Token(Token = "0x20001FF")]
	internal class RingBuffer<T> where T : struct
	{
		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T[] _items;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36F54", Offset = "0xB36F54")]
		private int <Count>k__BackingField;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _end;

		[Token(Token = "0x170001C4")]
		public int Count
		{
			[Token(Token = "0x6000EAB")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E228", Offset = "0xB3E228")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E238", Offset = "0xB3E238")]
			private set
			{
			}
		}

		[Token(Token = "0x170001C5")]
		public int Capacity
		{
			[Token(Token = "0x6000EAD")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000EAE")]
		public RingBuffer(uint size)
		{
		}

		[Token(Token = "0x6000EAF")]
		public T? Add(T item)
		{
			return null;
		}

		[Token(Token = "0x6000EB0")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x2000200")]
	internal class TransferBuffer<T>
	{
		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T[] _buffer;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _readHead;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _unread;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _writeHead;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T[] _singleReadItem;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T[] _singleWriteItem;

		[Token(Token = "0x170001C6")]
		public int EstimatedUnreadCount
		{
			[Token(Token = "0x6000EB1")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001C7")]
		public int Capacity
		{
			[Token(Token = "0x6000EB2")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000EB3")]
		public TransferBuffer(int capacity = 4096)
		{
		}

		[Token(Token = "0x6000EB4")]
		public bool TryWrite(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB5")]
		public bool TryWriteAll(ArraySegment<T> data)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB6")]
		public int WriteSome(ArraySegment<T> data)
		{
			return default(int);
		}

		[Token(Token = "0x6000EB7")]
		public bool Read([CanBeNull] out T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB8")]
		public bool Read([NotNull] T[] data)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB9")]
		public bool Read([NotNull] T[] data, int readCount)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBA")]
		public bool Read(ArraySegment<T> data)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBB")]
		public void Clear()
		{
		}
	}
	[StructLayout(2)]
	[Token(Token = "0x2000201")]
	internal struct Union16
	{
		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ushort _ushort;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private byte _byte1;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private byte _byte2;

		[Token(Token = "0x170001C8")]
		public ushort UInt16
		{
			[Token(Token = "0x6000EBD")]
			[Address(RVA = "0xC204D0", Offset = "0xC204D0", VA = "0xC204D0")]
			get
			{
				return default(ushort);
			}
			[Token(Token = "0x6000EBE")]
			[Address(RVA = "0xC204D8", Offset = "0xC204D8", VA = "0xC204D8")]
			set
			{
			}
		}

		[Token(Token = "0x170001C9")]
		public byte LSB
		{
			[Token(Token = "0x6000EBF")]
			[Address(RVA = "0xC204E0", Offset = "0xC204E0", VA = "0xC204E0")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6000EC0")]
			[Address(RVA = "0xC204E8", Offset = "0xC204E8", VA = "0xC204E8")]
			set
			{
			}
		}

		[Token(Token = "0x170001CA")]
		public byte MSB
		{
			[Token(Token = "0x6000EC1")]
			[Address(RVA = "0xC204F0", Offset = "0xC204F0", VA = "0xC204F0")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x6000EC2")]
			[Address(RVA = "0xC204F8", Offset = "0xC204F8", VA = "0xC204F8")]
			set
			{
			}
		}
	}
	[StructLayout(2)]
	[Token(Token = "0x2000202")]
	internal struct Union32
	{
		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private uint _uint;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private byte _byte1;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private byte _byte2;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		private byte _byte3;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		private byte _byte4;

		[Token(Token = "0x170001CB")]
		public uint UInt32
		{
			[Token(Token = "0x6000EC3")]
			[Address(RVA = "0xC20500", Offset = "0xC20500", VA = "0xC20500")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6000EC4")]
			[Address(RVA = "0xC20508", Offset = "0xC20508", VA = "0xC20508")]
			set
			{
			}
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0xC20510", Offset = "0xC20510", VA = "0xC20510")]
		public void SetBytesFromNetworkOrder(byte b1, byte b2, byte b3, byte b4)
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0xC20518", Offset = "0xC20518", VA = "0xC20518")]
		public void GetBytesInNetworkOrder(out byte b1, out byte b2, out byte b3, out byte b4)
		{
		}
	}
	[Token(Token = "0x2000203")]
	internal class WindowDeviationCalculator : BaseWindowCalculator<float>
	{
		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _sum;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _sumOfSquares;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36F64", Offset = "0xB36F64")]
		private float <StdDev>k__BackingField;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB36F74", Offset = "0xB36F74")]
		private float <Mean>k__BackingField;

		[Token(Token = "0x170001CC")]
		public float StdDev
		{
			[Token(Token = "0x6000EC7")]
			[Address(RVA = "0x10FE908", Offset = "0x10FE908", VA = "0x10FE908")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E248", Offset = "0xB3E248")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EC8")]
			[Address(RVA = "0x10FE910", Offset = "0x10FE910", VA = "0x10FE910")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E258", Offset = "0xB3E258")]
			private set
			{
			}
		}

		[Token(Token = "0x170001CD")]
		public float Mean
		{
			[Token(Token = "0x6000EC9")]
			[Address(RVA = "0x10FE918", Offset = "0x10FE918", VA = "0x10FE918")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E268", Offset = "0xB3E268")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000ECA")]
			[Address(RVA = "0x10FE920", Offset = "0x10FE920", VA = "0x10FE920")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E278", Offset = "0xB3E278")]
			private set
			{
			}
		}

		[Token(Token = "0x170001CE")]
		public float Confidence
		{
			[Token(Token = "0x6000ECB")]
			[Address(RVA = "0x10FE928", Offset = "0x10FE928", VA = "0x10FE928")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0x10FE9A0", Offset = "0x10FE9A0", VA = "0x10FE9A0")]
		public WindowDeviationCalculator(uint size)
		{
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0x10FEA00", Offset = "0x10FEA00", VA = "0x10FEA00", Slot = "4")]
		protected override void Updated(float? removed, float added)
		{
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0x10FEB3C", Offset = "0x10FEB3C", VA = "0x10FEB3C")]
		private float CalculateDeviation(float mean, float meanOfSquares)
		{
			return default(float);
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0x10FEC08", Offset = "0x10FEC08", VA = "0x10FEC08", Slot = "5")]
		public override void Clear()
		{
		}
	}
}
namespace Dissonance.Config
{
	[Token(Token = "0x2000204")]
	public class ChatRoomSettings : ScriptableObject
	{
		[Token(Token = "0x4000B5D")]
		private const string SettingsFileResourceName = "ChatRoomSettings";

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string SettingsFilePath;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly List<string> DefaultRooms;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		internal List<string> Names;

		[NonSerialized]
		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<ushort, string> _nameLookup;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static ChatRoomSettings _instance;

		[Token(Token = "0x170001CF")]
		[NotNull]
		public static ChatRoomSettings Instance
		{
			[Token(Token = "0x6000ED0")]
			[Address(RVA = "0x131BC08", Offset = "0x131BC08", VA = "0x131BC08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0x131BD14", Offset = "0x131BD14", VA = "0x131BD14")]
		public ChatRoomSettings()
		{
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0x131BDC0", Offset = "0x131BDC0", VA = "0x131BDC0")]
		[CanBeNull]
		public string FindRoomById(ushort id)
		{
			return null;
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0x131BCA0", Offset = "0x131BCA0", VA = "0x131BCA0")]
		public static ChatRoomSettings Load()
		{
			return null;
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x131BF1C", Offset = "0x131BF1C", VA = "0x131BF1C")]
		public static void Preload()
		{
		}
	}
	[Token(Token = "0x2000205")]
	public class DebugSettings : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x2000303")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30EE0", Offset = "0xB30EE0")]
		private sealed class <>c
		{
			[Token(Token = "0x4001021")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001022")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<LogCategory, int> <>9__15_0;

			[Token(Token = "0x6001366")]
			[Address(RVA = "0x131C6B4", Offset = "0x131C6B4", VA = "0x131C6B4")]
			public <>c()
			{
			}

			[Token(Token = "0x6001367")]
			[Address(RVA = "0x131C6BC", Offset = "0x131C6BC", VA = "0x131C6BC")]
			internal int <.ctor>b__15_0(LogCategory c)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4000B63")]
		private const string SettingsFileResourceName = "DebugSettings";

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string SettingsFilePath;

		[Token(Token = "0x4000B65")]
		private const LogLevel DefaultLevel = LogLevel.Info;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<LogLevel> _levels;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool EnableRecordingDiagnostics;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool RecordMicrophoneRawAudio;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool RecordPreprocessorOutput;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public bool EnablePlaybackDiagnostics;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool RecordDecodedAudio;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool RecordFinalAudio;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool EnableNetworkSimulation;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float PacketLoss;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static DebugSettings _instance;

		[Token(Token = "0x170001D0")]
		[NotNull]
		public static DebugSettings Instance
		{
			[Token(Token = "0x6000ED6")]
			[Address(RVA = "0x1307100", Offset = "0x1307100", VA = "0x1307100")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x131C1A8", Offset = "0x131C1A8", VA = "0x131C1A8")]
		public DebugSettings()
		{
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x131C3C4", Offset = "0x131C3C4", VA = "0x131C3C4")]
		public LogLevel GetLevel(int category)
		{
			return default(LogLevel);
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x131C448", Offset = "0x131C448", VA = "0x131C448")]
		public void SetLevel(int category, LogLevel level)
		{
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x131C134", Offset = "0x131C134", VA = "0x131C134")]
		private static DebugSettings Load()
		{
			return null;
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x131C4F8", Offset = "0x131C4F8", VA = "0x131C4F8")]
		public static void Preload()
		{
		}
	}
	[Token(Token = "0x2000206")]
	internal static class Preferences
	{
		[Token(Token = "0x6000EDD")]
		public static void Get<T>(string key, ref T output, Func<string, T, T> get, Log log)
		{
		}

		[Token(Token = "0x6000EDE")]
		public static void Set<T>(string key, ref T field, T value, Action<string, T> save, Log log, [Optional] IEqualityComparer<T> equality, bool setAtRuntime = true)
		{
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0x131C6C4", Offset = "0x131C6C4", VA = "0x131C6C4")]
		internal static void SetBool(string key, bool value)
		{
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0x131C748", Offset = "0x131C748", VA = "0x131C748")]
		internal static bool GetBool(string key, bool defaultValue)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000207")]
	public sealed class VoiceSettings : ScriptableObject, INotifyPropertyChanged
	{
		[Serializable]
		[Token(Token = "0x2000304")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30EF0", Offset = "0xB30EF0")]
		private sealed class <>c
		{
			[Token(Token = "0x4001023")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001024")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Action<string, AudioQuality> <>9__16_0;

			[Token(Token = "0x4001025")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Action<string, FrameSize> <>9__20_0;

			[Token(Token = "0x4001026")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<string, AudioQuality, AudioQuality> <>9__62_0;

			[Token(Token = "0x4001027")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<string, FrameSize, FrameSize> <>9__62_1;

			[Token(Token = "0x6001369")]
			[Address(RVA = "0x10FDD7C", Offset = "0x10FDD7C", VA = "0x10FDD7C")]
			public <>c()
			{
			}

			[Token(Token = "0x600136A")]
			[Address(RVA = "0x10FDD84", Offset = "0x10FDD84", VA = "0x10FDD84")]
			internal void <set_Quality>b__16_0(string key, AudioQuality q)
			{
			}

			[Token(Token = "0x600136B")]
			[Address(RVA = "0x10FDD94", Offset = "0x10FDD94", VA = "0x10FDD94")]
			internal void <set_FrameSize>b__20_0(string key, FrameSize f)
			{
			}

			[Token(Token = "0x600136C")]
			[Address(RVA = "0x10FDDA4", Offset = "0x10FDDA4", VA = "0x10FDDA4")]
			internal AudioQuality <Load>b__62_0(string s, AudioQuality q)
			{
				return default(AudioQuality);
			}

			[Token(Token = "0x600136D")]
			[Address(RVA = "0x10FDDB4", Offset = "0x10FDDB4", VA = "0x10FDDB4")]
			internal FrameSize <Load>b__62_1(string s, FrameSize f)
			{
				return default(FrameSize);
			}
		}

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000B71")]
		private const string PersistName_Quality = "Dissonance_Audio_Quality";

		[Token(Token = "0x4000B72")]
		private const string PersistName_FrameSize = "Dissonance_Audio_FrameSize";

		[Token(Token = "0x4000B73")]
		private const string PersistName_DenoiseAmount = "Dissonance_Audio_Denoise_Amount";

		[Token(Token = "0x4000B74")]
		private const string PersistName_PttDuckAmount = "Dissonance_Audio_Duck_Amount";

		[Token(Token = "0x4000B75")]
		private const string PersistName_AecSuppressionAmount = "Dissonance_Audio_Aec_Suppression_Amount";

		[Token(Token = "0x4000B76")]
		private const string PersistName_AecDelayAgnostic = "Dissonance_Audio_Aec_Delay_Agnostic";

		[Token(Token = "0x4000B77")]
		private const string PersistName_AecExtendedFilter = "Dissonance_Audio_Aec_Extended_Filter";

		[Token(Token = "0x4000B78")]
		private const string PersistName_AecRefinedAdaptiveFilter = "Dissonance_Audio_Aec_Refined_Adaptive_Filter";

		[Token(Token = "0x4000B79")]
		private const string PersistName_AecmRoutingMode = "Dissonance_Audio_Aecm_Routing_Mode";

		[Token(Token = "0x4000B7A")]
		private const string PersistName_AecmComfortNoise = "Dissonance_Audio_Aecm_Comfort_Noise";

		[Token(Token = "0x4000B7B")]
		private const string SettingsFileResourceName = "VoiceSettings";

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string SettingsFilePath;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioQuality _quality;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private FrameSize _frameSize;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int _denoiseAmount;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private int _aecAmount;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private int _aecDelayAgnostic;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private int _aecExtendedFilter;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int _aecRefinedAdaptiveFilter;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private int _aecmRoutingMode;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private int _aecmComfortNoise;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float _voiceDuckLevel;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static VoiceSettings _instance;

		[Token(Token = "0x170001D1")]
		public AudioQuality Quality
		{
			[Token(Token = "0x6000EE1")]
			[Address(RVA = "0x10FC3C8", Offset = "0x10FC3C8", VA = "0x10FC3C8")]
			get
			{
				return default(AudioQuality);
			}
			[Token(Token = "0x6000EE2")]
			[Address(RVA = "0x10FC3D0", Offset = "0x10FC3D0", VA = "0x10FC3D0")]
			set
			{
			}
		}

		[Token(Token = "0x170001D2")]
		public FrameSize FrameSize
		{
			[Token(Token = "0x6000EE3")]
			[Address(RVA = "0x10FC5C4", Offset = "0x10FC5C4", VA = "0x10FC5C4")]
			get
			{
				return default(FrameSize);
			}
			[Token(Token = "0x6000EE4")]
			[Address(RVA = "0x10FC5CC", Offset = "0x10FC5CC", VA = "0x10FC5CC")]
			set
			{
			}
		}

		[Token(Token = "0x170001D3")]
		public NoiseSuppressionLevels DenoiseAmount
		{
			[Token(Token = "0x6000EE5")]
			[Address(RVA = "0x10FC72C", Offset = "0x10FC72C", VA = "0x10FC72C")]
			get
			{
				return default(NoiseSuppressionLevels);
			}
			[Token(Token = "0x6000EE6")]
			[Address(RVA = "0x10FC734", Offset = "0x10FC734", VA = "0x10FC734")]
			set
			{
			}
		}

		[Token(Token = "0x170001D4")]
		public AecSuppressionLevels AecSuppressionAmount
		{
			[Token(Token = "0x6000EE7")]
			[Address(RVA = "0x10FC82C", Offset = "0x10FC82C", VA = "0x10FC82C")]
			get
			{
				return default(AecSuppressionLevels);
			}
			[Token(Token = "0x6000EE8")]
			[Address(RVA = "0x10FC834", Offset = "0x10FC834", VA = "0x10FC834")]
			set
			{
			}
		}

		[Token(Token = "0x170001D5")]
		public bool AecDelayAgnostic
		{
			[Token(Token = "0x6000EE9")]
			[Address(RVA = "0x10FC92C", Offset = "0x10FC92C", VA = "0x10FC92C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EEA")]
			[Address(RVA = "0x10FC998", Offset = "0x10FC998", VA = "0x10FC998")]
			set
			{
			}
		}

		[Token(Token = "0x170001D6")]
		public bool AecExtendedFilter
		{
			[Token(Token = "0x6000EEB")]
			[Address(RVA = "0x10FCAC4", Offset = "0x10FCAC4", VA = "0x10FCAC4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EEC")]
			[Address(RVA = "0x10FCB30", Offset = "0x10FCB30", VA = "0x10FCB30")]
			set
			{
			}
		}

		[Token(Token = "0x170001D7")]
		public bool AecRefinedAdaptiveFilter
		{
			[Token(Token = "0x6000EED")]
			[Address(RVA = "0x10FCC5C", Offset = "0x10FCC5C", VA = "0x10FCC5C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EEE")]
			[Address(RVA = "0x10FCCC8", Offset = "0x10FCCC8", VA = "0x10FCCC8")]
			set
			{
			}
		}

		[Token(Token = "0x170001D8")]
		public AecmRoutingMode AecmRoutingMode
		{
			[Token(Token = "0x6000EEF")]
			[Address(RVA = "0x10FCDF4", Offset = "0x10FCDF4", VA = "0x10FCDF4")]
			get
			{
				return default(AecmRoutingMode);
			}
			[Token(Token = "0x6000EF0")]
			[Address(RVA = "0x10FCDFC", Offset = "0x10FCDFC", VA = "0x10FCDFC")]
			set
			{
			}
		}

		[Token(Token = "0x170001D9")]
		public bool AecmComfortNoise
		{
			[Token(Token = "0x6000EF1")]
			[Address(RVA = "0x10FCEF4", Offset = "0x10FCEF4", VA = "0x10FCEF4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EF2")]
			[Address(RVA = "0x10FCF60", Offset = "0x10FCF60", VA = "0x10FCF60")]
			set
			{
			}
		}

		[Token(Token = "0x170001DA")]
		public float VoiceDuckLevel
		{
			[Token(Token = "0x6000EF3")]
			[Address(RVA = "0x10FD08C", Offset = "0x10FD08C", VA = "0x10FD08C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EF4")]
			[Address(RVA = "0x10FD094", Offset = "0x10FD094", VA = "0x10FD094")]
			set
			{
			}
		}

		[Token(Token = "0x170001DB")]
		[NotNull]
		public static VoiceSettings Instance
		{
			[Token(Token = "0x6000EF8")]
			[Address(RVA = "0x10FD2D4", Offset = "0x10FD2D4", VA = "0x10FD2D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1400003C")]
		public event PropertyChangedEventHandler PropertyChanged
		{
			[Token(Token = "0x6000EF5")]
			[Address(RVA = "0x10FD18C", Offset = "0x10FD18C", VA = "0x10FD18C", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E298", Offset = "0xB3E298")]
			add
			{
			}
			[Token(Token = "0x6000EF6")]
			[Address(RVA = "0x10FD230", Offset = "0x10FD230", VA = "0x10FD230", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E2A8", Offset = "0xB3E2A8")]
			remove
			{
			}
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x10FC530", Offset = "0x10FC530", VA = "0x10FC530")]
		[AttributeAttribute(Name = "NotifyPropertyChangedInvocatorAttribute", RVA = "0xB3E2B8", Offset = "0xB3E2B8")]
		private void OnPropertyChanged(string propertyName)
		{
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x10FD840", Offset = "0x10FD840", VA = "0x10FD840")]
		public VoiceSettings()
		{
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x10FD904", Offset = "0x10FD904", VA = "0x10FD904")]
		public static void Preload()
		{
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x10FD36C", Offset = "0x10FD36C", VA = "0x10FD36C")]
		[NotNull]
		private static VoiceSettings Load()
		{
			return null;
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x10FD9CC", Offset = "0x10FD9CC", VA = "0x10FD9CC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
namespace Dissonance.Audio
{
	[Token(Token = "0x2000208")]
	internal struct ArvCalculator
	{
		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37054", Offset = "0xB37054")]
		private float <ARV>k__BackingField;

		[Token(Token = "0x170001DC")]
		public float ARV
		{
			[Token(Token = "0x6000EFE")]
			[Address(RVA = "0xC2B5DC", Offset = "0xC2B5DC", VA = "0xC2B5DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E2D8", Offset = "0xB3E2D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EFF")]
			[Address(RVA = "0xC2B5E4", Offset = "0xC2B5E4", VA = "0xC2B5E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E2E8", Offset = "0xB3E2E8")]
			private set
			{
			}
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0xC2B5EC", Offset = "0xC2B5EC", VA = "0xC2B5EC")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0xC2B5F4", Offset = "0xC2B5F4", VA = "0xC2B5F4")]
		public void Update(ArraySegment<float> samples)
		{
		}
	}
	[Token(Token = "0x2000209")]
	internal class AudioFileWriter : IDisposable
	{
		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly LockedValue<WaveFileWriter> _lock;

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x1304554", Offset = "0x1304554", VA = "0x1304554")]
		public AudioFileWriter(string filename, [NotNull] WaveFormat format)
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0x130470C", Offset = "0x130470C", VA = "0x130470C", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x130486C", Offset = "0x130486C", VA = "0x130486C")]
		public void Flush()
		{
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x13049B8", Offset = "0x13049B8", VA = "0x13049B8")]
		public void WriteSamples(ArraySegment<float> samples)
		{
		}
	}
	[Token(Token = "0x200020A")]
	internal class AudioSettingsWatcher
	{
		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly AudioSettingsWatcher Singleton;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly object _lock;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _started;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private AudioConfiguration _config;

		[Token(Token = "0x170001DD")]
		public static AudioSettingsWatcher Instance
		{
			[Token(Token = "0x6000F06")]
			[Address(RVA = "0x1304B34", Offset = "0x1304B34", VA = "0x1304B34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DE")]
		public AudioConfiguration Configuration
		{
			[Token(Token = "0x6000F07")]
			[Address(RVA = "0x1304B9C", Offset = "0x1304B9C", VA = "0x1304B9C")]
			get
			{
				return default(AudioConfiguration);
			}
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0x1304C68", Offset = "0x1304C68", VA = "0x1304C68")]
		internal void Start()
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0x1304D88", Offset = "0x1304D88", VA = "0x1304D88")]
		private void OnAudioConfigChanged(bool devicewaschanged)
		{
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x1304E40", Offset = "0x1304E40", VA = "0x1304E40")]
		public AudioSettingsWatcher()
		{
		}
	}
	[Token(Token = "0x200020B")]
	internal struct Fader
	{
		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37064", Offset = "0xB37064")]
		private float <Volume>k__BackingField;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private float _fadeTime;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37074", Offset = "0xB37074")]
		private float <EndVolume>k__BackingField;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37084", Offset = "0xB37084")]
		private float <StartVolume>k__BackingField;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float _elapsedTime;

		[Token(Token = "0x170001DF")]
		public float Volume
		{
			[Token(Token = "0x6000F0C")]
			[Address(RVA = "0xC2B5FC", Offset = "0xC2B5FC", VA = "0xC2B5FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E2F8", Offset = "0xB3E2F8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F0D")]
			[Address(RVA = "0xC2B604", Offset = "0xC2B604", VA = "0xC2B604")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E308", Offset = "0xB3E308")]
			private set
			{
			}
		}

		[Token(Token = "0x170001E0")]
		public float EndVolume
		{
			[Token(Token = "0x6000F0E")]
			[Address(RVA = "0xC2B60C", Offset = "0xC2B60C", VA = "0xC2B60C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E318", Offset = "0xB3E318")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F0F")]
			[Address(RVA = "0xC2B614", Offset = "0xC2B614", VA = "0xC2B614")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E328", Offset = "0xB3E328")]
			private set
			{
			}
		}

		[Token(Token = "0x170001E1")]
		public float StartVolume
		{
			[Token(Token = "0x6000F10")]
			[Address(RVA = "0xC2B61C", Offset = "0xC2B61C", VA = "0xC2B61C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E338", Offset = "0xB3E338")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F11")]
			[Address(RVA = "0xC2B624", Offset = "0xC2B624", VA = "0xC2B624")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E348", Offset = "0xB3E348")]
			private set
			{
			}
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0xC2B62C", Offset = "0xC2B62C", VA = "0xC2B62C")]
		public void Update(float dt)
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0xC2B660", Offset = "0xC2B660", VA = "0xC2B660")]
		private float CalculateVolume()
		{
			return default(float);
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0xC2B668", Offset = "0xC2B668", VA = "0xC2B668")]
		public void FadeTo(float target, float duration)
		{
		}
	}
	[Token(Token = "0x200020C")]
	public class OpenChannelVolumeDuck : IVolumeProvider
	{
		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly RoomChannels _rooms;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly PlayerChannels _players;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _targetVolume;

		[Token(Token = "0x170001E2")]
		public float TargetVolume
		{
			[Token(Token = "0x6000F15")]
			[Address(RVA = "0x1311C08", Offset = "0x1311C08", VA = "0x1311C08", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0x1311C2C", Offset = "0x1311C2C", VA = "0x1311C2C")]
		public OpenChannelVolumeDuck(RoomChannels rooms, PlayerChannels players)
		{
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0x1311C74", Offset = "0x1311C74", VA = "0x1311C74")]
		public void Update()
		{
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0x1311C78", Offset = "0x1311C78", VA = "0x1311C78")]
		private void UpdateTargetVolume()
		{
		}
	}
}
namespace Dissonance.Audio.Playback
{
	[Token(Token = "0x200020D")]
	internal class BufferedDecoder : IFrameSource, IRemoteChannelProvider
	{
		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly EncodedAudioBuffer _buffer;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IVoiceDecoder _decoder;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly uint _frameSize;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly WaveFormat _waveFormat;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Action<VoicePacket> _recycleFrame;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioFileWriter _diagnosticOutput;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly LockedValue<PlaybackOptions> _options;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int _approxChannelCount;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ReadonlyLockedValue<List<RemoteChannel>> _channels;

		[Token(Token = "0x170001E3")]
		public int BufferCount
		{
			[Token(Token = "0x6000F19")]
			[Address(RVA = "0x1311D44", Offset = "0x1311D44", VA = "0x1311D44")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E4")]
		public uint SequenceNumber
		{
			[Token(Token = "0x6000F1A")]
			[Address(RVA = "0x1311D60", Offset = "0x1311D60", VA = "0x1311D60")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x170001E5")]
		public float PacketLoss
		{
			[Token(Token = "0x6000F1B")]
			[Address(RVA = "0x1311D7C", Offset = "0x1311D7C", VA = "0x1311D7C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E6")]
		public PlaybackOptions LatestPlaybackOptions
		{
			[Token(Token = "0x6000F1C")]
			[Address(RVA = "0x1311DC0", Offset = "0x1311DC0", VA = "0x1311DC0")]
			get
			{
				return default(PlaybackOptions);
			}
		}

		[Token(Token = "0x170001E7")]
		public uint FrameSize
		{
			[Token(Token = "0x6000F1E")]
			[Address(RVA = "0x13121F8", Offset = "0x13121F8", VA = "0x13121F8", Slot = "4")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x170001E8")]
		public WaveFormat WaveFormat
		{
			[Token(Token = "0x6000F1F")]
			[Address(RVA = "0x1312200", Offset = "0x1312200", VA = "0x1312200", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x1311F1C", Offset = "0x1311F1C", VA = "0x1311F1C")]
		public BufferedDecoder([NotNull] IVoiceDecoder decoder, uint frameSize, [NotNull] WaveFormat waveFormat, [NotNull] Action<VoicePacket> recycleFrame)
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x1312208", Offset = "0x1312208", VA = "0x1312208", Slot = "6")]
		public void Prepare(SessionContext context)
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x1312388", Offset = "0x1312388", VA = "0x1312388", Slot = "7")]
		public bool Read(ArraySegment<float> frame)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x1312D00", Offset = "0x1312D00", VA = "0x1312D00", Slot = "8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x1313110", Offset = "0x1313110", VA = "0x1313110")]
		public void Push(VoicePacket frame)
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x13132E4", Offset = "0x13132E4", VA = "0x13132E4")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x131333C", Offset = "0x131333C", VA = "0x131333C", Slot = "9")]
		public void GetRemoteChannels(List<RemoteChannel> output)
		{
		}
	}
	[Token(Token = "0x200020E")]
	internal class DecoderFactory
	{
		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x1313560", Offset = "0x1313560", VA = "0x1313560")]
		[NotNull]
		public static IVoiceDecoder Create(FrameFormat format)
		{
			return null;
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x1313644", Offset = "0x1313644", VA = "0x1313644")]
		public DecoderFactory()
		{
		}
	}
	[Token(Token = "0x200020F")]
	internal class DecoderPipeline : IDecoderPipeline, IVolumeProvider, IRemoteChannelProvider
	{
		[Token(Token = "0x2000305")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30F00", Offset = "0xB30F00")]
		private sealed class <>c__DisplayClass20_0
		{
			[Token(Token = "0x4001028")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public uint frameSize;

			[Token(Token = "0x4001029")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public IVoiceDecoder decoder;

			[Token(Token = "0x600136E")]
			[Address(RVA = "0x1313C14", Offset = "0x1313C14", VA = "0x1313C14")]
			public <>c__DisplayClass20_0()
			{
			}

			[Token(Token = "0x600136F")]
			[Address(RVA = "0x13149FC", Offset = "0x13149FC", VA = "0x13149FC")]
			internal byte[] <.ctor>b__0()
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x2000306")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30F10", Offset = "0xB30F10")]
		private sealed class <>c
		{
			[Token(Token = "0x400102A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400102B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<List<RemoteChannel>> <>9__20_1;

			[Token(Token = "0x6001371")]
			[Address(RVA = "0x1314990", Offset = "0x1314990", VA = "0x1314990")]
			public <>c()
			{
			}

			[Token(Token = "0x6001372")]
			[Address(RVA = "0x1314998", Offset = "0x1314998", VA = "0x1314998")]
			internal List<RemoteChannel> <.ctor>b__20_1()
			{
				return null;
			}
		}

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Action<DecoderPipeline> _completionHandler;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly TransferBuffer<VoicePacket> _inputBuffer;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ConcurrentPool<byte[]> _bytePool;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ConcurrentPool<List<RemoteChannel>> _channelListPool;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly BufferedDecoder _source;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ISampleSource _output;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool _complete;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool _sourceClosed;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TimeSpan _frameDuration;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private DateTime? _firstFrameArrival;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private uint _firstFrameSeq;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37094", Offset = "0xB37094")]
		private IVolumeProvider <VolumeProvider>k__BackingField;

		[Token(Token = "0x170001E9")]
		public int BufferCount
		{
			[Token(Token = "0x6000F29")]
			[Address(RVA = "0x131364C", Offset = "0x131364C", VA = "0x131364C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001EA")]
		public float PacketLoss
		{
			[Token(Token = "0x6000F2A")]
			[Address(RVA = "0x13136C0", Offset = "0x13136C0", VA = "0x13136C0", Slot = "5")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001EB")]
		public PlaybackOptions PlaybackOptions
		{
			[Token(Token = "0x6000F2B")]
			[Address(RVA = "0x13136D8", Offset = "0x13136D8", VA = "0x13136D8", Slot = "6")]
			get
			{
				return default(PlaybackOptions);
			}
		}

		[Token(Token = "0x170001EC")]
		public WaveFormat OutputFormat
		{
			[Token(Token = "0x6000F2C")]
			[Address(RVA = "0x13136FC", Offset = "0x13136FC", VA = "0x13136FC", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001ED")]
		public IVolumeProvider VolumeProvider
		{
			[Token(Token = "0x6000F35")]
			[Address(RVA = "0x13146FC", Offset = "0x13146FC", VA = "0x13146FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E368", Offset = "0xB3E368")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F36")]
			[Address(RVA = "0x1314704", Offset = "0x1314704", VA = "0x1314704")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E378", Offset = "0xB3E378")]
			set
			{
			}
		}

		[Token(Token = "0x170001EE")]
		private float Dissonance.Audio.Playback.IVolumeProvider.TargetVolume
		{
			[Token(Token = "0x6000F37")]
			[Address(RVA = "0x131470C", Offset = "0x131470C", VA = "0x131470C", Slot = "10")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0x13137AC", Offset = "0x13137AC", VA = "0x13137AC")]
		public DecoderPipeline([NotNull] IVoiceDecoder decoder, uint frameSize, [NotNull] Action<DecoderPipeline> completionHandler, bool softClip = true)
		{
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0x1313FB0", Offset = "0x1313FB0", VA = "0x1313FB0")]
		private void RecycleFrame(VoicePacket packet)
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x131405C", Offset = "0x131405C", VA = "0x131405C", Slot = "8")]
		public void Prepare(SessionContext context)
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0x1314128", Offset = "0x1314128", VA = "0x1314128", Slot = "9")]
		public bool Read(ArraySegment<float> samples)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x1314338", Offset = "0x1314338", VA = "0x1314338")]
		public float Push(VoicePacket packet, DateTime now)
		{
			return default(float);
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x131460C", Offset = "0x131460C", VA = "0x131460C")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x1314634", Offset = "0x1314634", VA = "0x1314634")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x131422C", Offset = "0x131422C", VA = "0x131422C")]
		private void FlushTransferBuffer()
		{
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0x13147E4", Offset = "0x13147E4", VA = "0x13147E4", Slot = "11")]
		public void GetRemoteChannels(List<RemoteChannel> output)
		{
		}
	}
	[Token(Token = "0x2000210")]
	internal struct DesyncCalculator
	{
		[Token(Token = "0x4000BAE")]
		private const int MaxAllowedDesyncMillis = 500;

		[Token(Token = "0x4000BAF")]
		private const float MaximumPlaybackAdjustment = 0.1f;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB370A4", Offset = "0xB370A4")]
		private int <DesyncMilliseconds>k__BackingField;

		[Token(Token = "0x170001EF")]
		internal int DesyncMilliseconds
		{
			[Token(Token = "0x6000F3A")]
			[Address(RVA = "0xC2B678", Offset = "0xC2B678", VA = "0xC2B678")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E388", Offset = "0xB3E388")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F3B")]
			[Address(RVA = "0xC2B680", Offset = "0xC2B680", VA = "0xC2B680")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E398", Offset = "0xB3E398")]
			private set
			{
			}
		}

		[Token(Token = "0x170001F0")]
		internal float CorrectedPlaybackSpeed
		{
			[Token(Token = "0x6000F3C")]
			[Address(RVA = "0xC2B688", Offset = "0xC2B688", VA = "0xC2B688")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0xC2B694", Offset = "0xC2B694", VA = "0xC2B694")]
		internal void Update(TimeSpan ideal, TimeSpan actual)
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0xC2B6C0", Offset = "0xC2B6C0", VA = "0xC2B6C0")]
		internal void Skip(int deltaDesyncMilliseconds)
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0x1314BBC", Offset = "0x1314BBC", VA = "0x1314BBC")]
		private static int CalculateDesync(TimeSpan idealPlaybackPosition, TimeSpan actualPlaybackPosition)
		{
			return default(int);
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0x1314AEC", Offset = "0x1314AEC", VA = "0x1314AEC")]
		private static float CalculateCorrectionFactor(float desyncMilliseconds)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000211")]
	internal class EncodedAudioBuffer
	{
		[Token(Token = "0x2000307")]
		public class VoicePacketComparer : IComparer<VoicePacket>
		{
			[Token(Token = "0x6001373")]
			[Address(RVA = "0x1314E28", Offset = "0x1314E28", VA = "0x1314E28", Slot = "4")]
			public int Compare(VoicePacket x, VoicePacket y)
			{
				return default(int);
			}

			[Token(Token = "0x6001374")]
			[Address(RVA = "0x1314CD4", Offset = "0x1314CD4", VA = "0x1314CD4")]
			public VoicePacketComparer()
			{
			}
		}

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly MinHeap<VoicePacket> _heap;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Action<VoicePacket> _droppedFrameHandler;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _complete;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int _count;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB370B4", Offset = "0xB370B4")]
		private uint <SequenceNumber>k__BackingField;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PacketLossCalculator _loss;

		[Token(Token = "0x170001F1")]
		public int Count
		{
			[Token(Token = "0x6000F41")]
			[Address(RVA = "0x1314CBC", Offset = "0x1314CBC", VA = "0x1314CBC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F2")]
		public uint SequenceNumber
		{
			[Token(Token = "0x6000F42")]
			[Address(RVA = "0x1314CC4", Offset = "0x1314CC4", VA = "0x1314CC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E3A8", Offset = "0xB3E3A8")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6000F43")]
			[Address(RVA = "0x1314CCC", Offset = "0x1314CCC", VA = "0x1314CCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E3B8", Offset = "0xB3E3B8")]
			private set
			{
			}
		}

		[Token(Token = "0x170001F3")]
		public float PacketLoss
		{
			[Token(Token = "0x6000F44")]
			[Address(RVA = "0x1311DA4", Offset = "0x1311DA4", VA = "0x1311DA4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0x13120D0", Offset = "0x13120D0", VA = "0x13120D0")]
		public EncodedAudioBuffer([NotNull] Action<VoicePacket> droppedFrameHandler)
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0x131316C", Offset = "0x131316C", VA = "0x131316C")]
		public void Push(VoicePacket frame)
		{
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x1313314", Offset = "0x1313314", VA = "0x1313314")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0x13129C4", Offset = "0x13129C4", VA = "0x13129C4")]
		public bool Read(out VoicePacket? frame)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x1313000", Offset = "0x1313000", VA = "0x1313000")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x1314CDC", Offset = "0x1314CDC", VA = "0x1314CDC")]
		private bool IsComplete()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000212")]
	internal struct FrameFormat : IEquatable<FrameFormat>
	{
		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Codec Codec;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly WaveFormat WaveFormat;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly uint FrameSize;

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0xC2B70C", Offset = "0xC2B70C", VA = "0xC2B70C")]
		public FrameFormat(Codec codec, WaveFormat waveFormat, uint frameSize)
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xC2B71C", Offset = "0xC2B71C", VA = "0xC2B71C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xC2B724", Offset = "0xC2B724", VA = "0xC2B724", Slot = "4")]
		public bool Equals(FrameFormat other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xC2B75C", Offset = "0xC2B75C", VA = "0xC2B75C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000213")]
	internal class FrameToSampleConverter : ISampleSource
	{
		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IFrameSource _source;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly float[] _temp;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _upstreamComplete;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int _firstSample;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int _lastSample;

		[Token(Token = "0x170001F4")]
		public WaveFormat WaveFormat
		{
			[Token(Token = "0x6000F51")]
			[Address(RVA = "0x1314FB0", Offset = "0x1314FB0", VA = "0x1314FB0", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0x1313C54", Offset = "0x1313C54", VA = "0x1313C54")]
		public FrameToSampleConverter([NotNull] IFrameSource source)
		{
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0x1315064", Offset = "0x1315064", VA = "0x1315064", Slot = "5")]
		public void Prepare(SessionContext context)
		{
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x1315130", Offset = "0x1315130", VA = "0x1315130", Slot = "6")]
		public bool Read(ArraySegment<float> samples)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0x13153EC", Offset = "0x13153EC", VA = "0x13153EC", Slot = "7")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x2000214")]
	internal interface IDecoderPipeline
	{
		[Token(Token = "0x170001F5")]
		int BufferCount
		{
			[Token(Token = "0x6000F56")]
			get;
		}

		[Token(Token = "0x170001F6")]
		float PacketLoss
		{
			[Token(Token = "0x6000F57")]
			get;
		}

		[Token(Token = "0x170001F7")]
		PlaybackOptions PlaybackOptions
		{
			[Token(Token = "0x6000F58")]
			get;
		}

		[Token(Token = "0x170001F8")]
		[NotNull]
		WaveFormat OutputFormat
		{
			[Token(Token = "0x6000F59")]
			get;
		}

		[Token(Token = "0x6000F5A")]
		void Prepare(SessionContext context);

		[Token(Token = "0x6000F5B")]
		bool Read(ArraySegment<float> samples);
	}
	[Token(Token = "0x2000215")]
	internal interface IFrameSource
	{
		[Token(Token = "0x170001F9")]
		uint FrameSize
		{
			[Token(Token = "0x6000F5C")]
			get;
		}

		[Token(Token = "0x170001FA")]
		[NotNull]
		WaveFormat WaveFormat
		{
			[Token(Token = "0x6000F5D")]
			get;
		}

		[Token(Token = "0x6000F5E")]
		void Prepare(SessionContext context);

		[Token(Token = "0x6000F5F")]
		bool Read(ArraySegment<float> frame);

		[Token(Token = "0x6000F60")]
		void Reset();
	}
	[Token(Token = "0x2000216")]
	public interface IPriorityManager
	{
		[Token(Token = "0x170001FB")]
		ChannelPriority TopPriority
		{
			[Token(Token = "0x6000F61")]
			get;
		}
	}
	[Token(Token = "0x2000217")]
	internal class PriorityManager : IPriorityManager
	{
		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly PlayerCollection _players;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB370C4", Offset = "0xB370C4")]
		private ChannelPriority <TopPriority>k__BackingField;

		[Token(Token = "0x170001FC")]
		public ChannelPriority TopPriority
		{
			[Token(Token = "0x6000F62")]
			[Address(RVA = "0x1315594", Offset = "0x1315594", VA = "0x1315594", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E3C8", Offset = "0xB3E3C8")]
			get
			{
				return default(ChannelPriority);
			}
			[Token(Token = "0x6000F63")]
			[Address(RVA = "0x131559C", Offset = "0x131559C", VA = "0x131559C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E3D8", Offset = "0xB3E3D8")]
			private set
			{
			}
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0x13155A4", Offset = "0x13155A4", VA = "0x13155A4")]
		public PriorityManager(PlayerCollection players)
		{
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0x13155D8", Offset = "0x13155D8", VA = "0x13155D8")]
		public void Update()
		{
		}
	}
	[Token(Token = "0x2000218")]
	internal interface IRemoteChannelProvider
	{
		[Token(Token = "0x6000F67")]
		void GetRemoteChannels([NotNull] List<RemoteChannel> output);
	}
	[Token(Token = "0x2000219")]
	internal interface ISampleSource
	{
		[Token(Token = "0x170001FD")]
		[NotNull]
		WaveFormat WaveFormat
		{
			[Token(Token = "0x6000F68")]
			get;
		}

		[Token(Token = "0x6000F69")]
		void Prepare(SessionContext context);

		[Token(Token = "0x6000F6A")]
		bool Read(ArraySegment<float> samples);

		[Token(Token = "0x6000F6B")]
		void Reset();
	}
	[Token(Token = "0x200021A")]
	internal interface IVoicePlaybackInternal : IRemoteChannelProvider, IVoicePlayback
	{
		[Token(Token = "0x170001FE")]
		bool IsMuted
		{
			[Token(Token = "0x6000F6C")]
			get;
			[Token(Token = "0x6000F6D")]
			set;
		}

		[Token(Token = "0x170001FF")]
		bool AllowPositionalPlayback
		{
			[Token(Token = "0x6000F71")]
			get;
			[Token(Token = "0x6000F72")]
			set;
		}

		[Token(Token = "0x17000200")]
		bool IsApplyingAudioSpatialization
		{
			[Token(Token = "0x6000F73")]
			get;
		}

		[Token(Token = "0x17000201")]
		float PlaybackVolume
		{
			[Token(Token = "0x6000F75")]
			get;
			[Token(Token = "0x6000F76")]
			set;
		}

		[Token(Token = "0x6000F6E")]
		void Reset();

		[Token(Token = "0x6000F6F")]
		void StartPlayback();

		[Token(Token = "0x6000F70")]
		void StopPlayback();

		[Token(Token = "0x6000F74")]
		void SetTransform(Vector3 position, Quaternion rotation);

		[Token(Token = "0x6000F77")]
		void ReceiveAudioPacket(VoicePacket packet);
	}
	[Token(Token = "0x200021B")]
	public interface IVoicePlayback
	{
		[Token(Token = "0x17000202")]
		string PlayerName
		{
			[Token(Token = "0x6000F78")]
			get;
		}

		[Token(Token = "0x17000203")]
		bool IsActive
		{
			[Token(Token = "0x6000F79")]
			get;
		}

		[Token(Token = "0x17000204")]
		bool IsSpeaking
		{
			[Token(Token = "0x6000F7A")]
			get;
		}

		[Token(Token = "0x17000205")]
		float Amplitude
		{
			[Token(Token = "0x6000F7B")]
			get;
		}

		[Token(Token = "0x17000206")]
		float? PacketLoss
		{
			[Token(Token = "0x6000F7C")]
			get;
		}

		[Token(Token = "0x17000207")]
		float Jitter
		{
			[Token(Token = "0x6000F7D")]
			get;
		}

		[Token(Token = "0x17000208")]
		ChannelPriority Priority
		{
			[Token(Token = "0x6000F7E")]
			get;
		}
	}
	[Token(Token = "0x200021C")]
	public struct PlaybackOptions
	{
		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly bool _isPositional;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private readonly float _amplitudeMultiplier;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly ChannelPriority _priority;

		[Token(Token = "0x17000209")]
		public bool IsPositional
		{
			[Token(Token = "0x6000F80")]
			[Address(RVA = "0xC2B7BC", Offset = "0xC2B7BC", VA = "0xC2B7BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700020A")]
		public float AmplitudeMultiplier
		{
			[Token(Token = "0x6000F81")]
			[Address(RVA = "0xC2B7C4", Offset = "0xC2B7C4", VA = "0xC2B7C4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700020B")]
		public ChannelPriority Priority
		{
			[Token(Token = "0x6000F82")]
			[Address(RVA = "0xC2B7CC", Offset = "0xC2B7CC", VA = "0xC2B7CC")]
			get
			{
				return default(ChannelPriority);
			}
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0xC2B7A8", Offset = "0xC2B7A8", VA = "0xC2B7A8")]
		public PlaybackOptions(bool isPositional, float amplitudeMultiplier, ChannelPriority priority)
		{
		}
	}
	[Token(Token = "0x200021D")]
	internal class Resampler : ISampleSource
	{
		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ISampleSource _source;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private WaveFormat _outputFormat;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private WdlResampler _resampler;

		[Token(Token = "0x1700020C")]
		public WaveFormat WaveFormat
		{
			[Token(Token = "0x6000F84")]
			[Address(RVA = "0x13158CC", Offset = "0x13158CC", VA = "0x13158CC", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0x1313F14", Offset = "0x1313F14", VA = "0x1313F14")]
		public Resampler(ISampleSource source)
		{
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0x13158F0", Offset = "0x13158F0", VA = "0x13158F0", Slot = "5")]
		public void Prepare(SessionContext context)
		{
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0x13159BC", Offset = "0x13159BC", VA = "0x13159BC", Slot = "6")]
		public bool Read(ArraySegment<float> samples)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0x1315CEC", Offset = "0x1315CEC", VA = "0x1315CEC", Slot = "7")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0x13157CC", Offset = "0x13157CC", VA = "0x13157CC")]
		private void OnAudioConfigurationChanged(bool deviceWasChanged)
		{
		}
	}
	[Token(Token = "0x200021E")]
	public class SamplePlaybackComponent : MonoBehaviour
	{
		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly TimeSpan ResetDesync;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DesyncCalculator _desync;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private long _totalSamplesRead;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float[] _temp;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[CanBeNull]
		private AudioFileWriter _diagnosticOutput;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB370E4", Offset = "0xB370E4")]
		private bool <MultiplyBySource>k__BackingField;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SessionContext _lastPlayedSessionContext;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly ReaderWriterLockSlim _sessionLock;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB370F4", Offset = "0xB370F4")]
		private SpeechSession? <Session>k__BackingField;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _arv;

		[Token(Token = "0x1700020D")]
		internal bool MultiplyBySource
		{
			[Token(Token = "0x6000F8A")]
			[Address(RVA = "0x1315E88", Offset = "0x1315E88", VA = "0x1315E88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E3E8", Offset = "0xB3E3E8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F8B")]
			[Address(RVA = "0x1315E90", Offset = "0x1315E90", VA = "0x1315E90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E3F8", Offset = "0xB3E3F8")]
			set
			{
			}
		}

		[Token(Token = "0x1700020E")]
		public bool HasActiveSession
		{
			[Token(Token = "0x6000F8C")]
			[Address(RVA = "0x1315E9C", Offset = "0x1315E9C", VA = "0x1315E9C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700020F")]
		public SpeechSession? Session
		{
			[Token(Token = "0x6000F8D")]
			[Address(RVA = "0x1315EE8", Offset = "0x1315EE8", VA = "0x1315EE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E408", Offset = "0xB3E408")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F8E")]
			[Address(RVA = "0x1315F04", Offset = "0x1315F04", VA = "0x1315F04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E418", Offset = "0xB3E418")]
			private set
			{
			}
		}

		[Token(Token = "0x17000210")]
		public TimeSpan PlaybackPosition
		{
			[Token(Token = "0x6000F8F")]
			[Address(RVA = "0x1315F20", Offset = "0x1315F20", VA = "0x1315F20")]
			get
			{
				return default(TimeSpan);
			}
		}

		[Token(Token = "0x17000211")]
		public TimeSpan IdealPlaybackPosition
		{
			[Token(Token = "0x6000F90")]
			[Address(RVA = "0x131611C", Offset = "0x131611C", VA = "0x131611C")]
			get
			{
				return default(TimeSpan);
			}
		}

		[Token(Token = "0x17000212")]
		public TimeSpan Desync
		{
			[Token(Token = "0x6000F91")]
			[Address(RVA = "0x13162CC", Offset = "0x13162CC", VA = "0x13162CC")]
			get
			{
				return default(TimeSpan);
			}
		}

		[Token(Token = "0x17000213")]
		public float CorrectedPlaybackSpeed
		{
			[Token(Token = "0x6000F92")]
			[Address(RVA = "0x1316338", Offset = "0x1316338", VA = "0x1316338")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000214")]
		public float ARV
		{
			[Token(Token = "0x6000F93")]
			[Address(RVA = "0x1316344", Offset = "0x1316344", VA = "0x1316344")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0x1316368", Offset = "0x1316368", VA = "0x1316368")]
		public void Play(SpeechSession session)
		{
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0x1316698", Offset = "0x1316698", VA = "0x1316698")]
		public void Start()
		{
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0x13166FC", Offset = "0x13166FC", VA = "0x13166FC")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0x1316748", Offset = "0x1316748", VA = "0x1316748")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0x1316794", Offset = "0x1316794", VA = "0x1316794")]
		public void OnAudioFilterRead(float[] data, int channels)
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0x1316660", Offset = "0x1316660", VA = "0x1316660")]
		private void ApplyReset()
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0x1316C10", Offset = "0x1316C10", VA = "0x1316C10")]
		internal static bool Skip(SpeechSession session, int desyncMilliseconds, out int deltaSamples, out int deltaDesyncMilliseconds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0x1316E1C", Offset = "0x1316E1C", VA = "0x1316E1C")]
		internal static bool Filter(SpeechSession session, [NotNull] float[] output, int channels, [NotNull] float[] temp, [CanBeNull] AudioFileWriter diagnosticOutput, out float arv, out int samplesRead, bool multiply)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0x13170E0", Offset = "0x13170E0", VA = "0x13170E0")]
		public SamplePlaybackComponent()
		{
		}
	}
	[Token(Token = "0x200021F")]
	public struct SessionContext : IEquatable<SessionContext>
	{
		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string PlayerName;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly uint Id;

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xC2B864", Offset = "0xC2B864", VA = "0xC2B864")]
		public SessionContext([NotNull] string playerName, uint id)
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xC2B86C", Offset = "0xC2B86C", VA = "0xC2B86C", Slot = "4")]
		public bool Equals(SessionContext other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xC2B8B0", Offset = "0xC2B8B0", VA = "0xC2B8B0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xC2B8B8", Offset = "0xC2B8B8", VA = "0xC2B8B8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000220")]
	internal class SoftClipSampleSource : ISampleSource
	{
		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ISampleSource _upstream;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly OpusNative.OpusSoftClip _clipper;

		[Token(Token = "0x17000215")]
		public WaveFormat WaveFormat
		{
			[Token(Token = "0x6000FA2")]
			[Address(RVA = "0x13173CC", Offset = "0x13173CC", VA = "0x13173CC", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0x1313DE4", Offset = "0x1313DE4", VA = "0x1313DE4")]
		public SoftClipSampleSource([NotNull] ISampleSource upstream)
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0x131747C", Offset = "0x131747C", VA = "0x131747C", Slot = "5")]
		public void Prepare(SessionContext context)
		{
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0x1317548", Offset = "0x1317548", VA = "0x1317548", Slot = "6")]
		public bool Read(ArraySegment<float> samples)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0x1317638", Offset = "0x1317638", VA = "0x1317638", Slot = "7")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x2000221")]
	public struct SpeechSession
	{
		[Token(Token = "0x4000BDA")]
		private const float MinimumDelay = 0.05f;

		[Token(Token = "0x4000BDB")]
		private const float MaximumDelay = 0.75f;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float InitialBufferDelay;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IRemoteChannelProvider _channels;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly IDecoderPipeline _pipeline;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly SessionContext _context;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly DateTime _creationTime;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IJitterEstimator _jitter;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private DateTime _startTime;

		[Token(Token = "0x17000216")]
		public int BufferCount
		{
			[Token(Token = "0x6000FA7")]
			[Address(RVA = "0xC2B92C", Offset = "0xC2B92C", VA = "0xC2B92C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000217")]
		public SessionContext Context
		{
			[Token(Token = "0x6000FA8")]
			[Address(RVA = "0xC2B934", Offset = "0xC2B934", VA = "0xC2B934")]
			get
			{
				return default(SessionContext);
			}
		}

		[Token(Token = "0x17000218")]
		public PlaybackOptions PlaybackOptions
		{
			[Token(Token = "0x6000FA9")]
			[Address(RVA = "0xC2B940", Offset = "0xC2B940", VA = "0xC2B940")]
			get
			{
				return default(PlaybackOptions);
			}
		}

		[Token(Token = "0x17000219")]
		[NotNull]
		public WaveFormat OutputWaveFormat
		{
			[Token(Token = "0x6000FAA")]
			[Address(RVA = "0xC2B95C", Offset = "0xC2B95C", VA = "0xC2B95C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021A")]
		internal float PacketLoss
		{
			[Token(Token = "0x6000FAB")]
			[Address(RVA = "0xC2B964", Offset = "0xC2B964", VA = "0xC2B964")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700021B")]
		internal IRemoteChannelProvider Channels
		{
			[Token(Token = "0x6000FAC")]
			[Address(RVA = "0xC2B96C", Offset = "0xC2B96C", VA = "0xC2B96C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021C")]
		public DateTime TargetActivationTime
		{
			[Token(Token = "0x6000FAD")]
			[Address(RVA = "0xC2B974", Offset = "0xC2B974", VA = "0xC2B974")]
			get
			{
				return default(DateTime);
			}
		}

		[Token(Token = "0x1700021D")]
		public DateTime ActivationTime
		{
			[Token(Token = "0x6000FAE")]
			[Address(RVA = "0xC2B97C", Offset = "0xC2B97C", VA = "0xC2B97C")]
			get
			{
				return default(DateTime);
			}
		}

		[Token(Token = "0x1700021E")]
		public TimeSpan Delay
		{
			[Token(Token = "0x6000FAF")]
			[Address(RVA = "0xC2B984", Offset = "0xC2B984", VA = "0xC2B984")]
			get
			{
				return default(TimeSpan);
			}
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0xC2B98C", Offset = "0xC2B98C", VA = "0xC2B98C")]
		private SpeechSession(SessionContext context, IJitterEstimator jitter, IDecoderPipeline pipeline, IRemoteChannelProvider channels, DateTime now)
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0x1317BA4", Offset = "0x1317BA4", VA = "0x1317BA4")]
		internal static SpeechSession Create(SessionContext context, IJitterEstimator jitter, IDecoderPipeline pipeline, IRemoteChannelProvider channels, DateTime now)
		{
			return default(SpeechSession);
		}

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0xC2B9A0", Offset = "0xC2B9A0", VA = "0xC2B9A0")]
		public void Prepare(DateTime now)
		{
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0xC2B9A8", Offset = "0xC2B9A8", VA = "0xC2B9A8")]
		public bool Read(ArraySegment<float> samples)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000222")]
	internal interface IJitterEstimator
	{
		[Token(Token = "0x1700021F")]
		float Jitter
		{
			[Token(Token = "0x6000FB5")]
			get;
		}

		[Token(Token = "0x17000220")]
		float Confidence
		{
			[Token(Token = "0x6000FB6")]
			get;
		}
	}
	[Token(Token = "0x2000223")]
	internal class SpeechSessionStream : IJitterEstimator
	{
		[Token(Token = "0x2000308")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30F20", Offset = "0xB30F20")]
		private sealed class <>c__DisplayClass20_0
		{
			[Token(Token = "0x400102C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FrameFormat format;

			[Token(Token = "0x400102D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action<DecoderPipeline> <>9__1;

			[Token(Token = "0x6001375")]
			[Address(RVA = "0x1318730", Offset = "0x1318730", VA = "0x1318730")]
			public <>c__DisplayClass20_0()
			{
			}

			[Token(Token = "0x6001376")]
			[Address(RVA = "0x1318980", Offset = "0x1318980", VA = "0x1318980")]
			internal DecoderPipeline <GetOrCreateDecoderPipeline>b__0()
			{
				return null;
			}

			[Token(Token = "0x6001377")]
			[Address(RVA = "0x1318A5C", Offset = "0x1318A5C", VA = "0x1318A5C")]
			internal void <GetOrCreateDecoderPipeline>b__1(DecoderPipeline p)
			{
			}
		}

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Queue<SpeechSession> _awaitingActivation;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IVolumeProvider _volumeProvider;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DecoderPipeline _active;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private uint _currentId;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string _playerName;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly WindowDeviationCalculator _arrivalJitterMeter;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Dictionary<FrameFormat, ConcurrentPool<DecoderPipeline>> FreePipelines;

		[Token(Token = "0x17000221")]
		public string PlayerName
		{
			[Token(Token = "0x6000FB7")]
			[Address(RVA = "0x1317D20", Offset = "0x1317D20", VA = "0x1317D20")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FB8")]
			[Address(RVA = "0x1317D28", Offset = "0x1317D28", VA = "0x1317D28")]
			set
			{
			}
		}

		[Token(Token = "0x17000222")]
		private float Dissonance.Audio.Playback.IJitterEstimator.Jitter
		{
			[Token(Token = "0x6000FB9")]
			[Address(RVA = "0x1317D7C", Offset = "0x1317D7C", VA = "0x1317D7C", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000223")]
		private float Dissonance.Audio.Playback.IJitterEstimator.Confidence
		{
			[Token(Token = "0x6000FBA")]
			[Address(RVA = "0x1317D98", Offset = "0x1317D98", VA = "0x1317D98", Slot = "5")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0x1317DB4", Offset = "0x1317DB4", VA = "0x1317DB4")]
		public SpeechSessionStream(IVolumeProvider volumeProvider)
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0x1317E5C", Offset = "0x1317E5C", VA = "0x1317E5C")]
		public void StartSession(FrameFormat format, [Optional] DateTime? now)
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x1318270", Offset = "0x1318270", VA = "0x1318270")]
		public SpeechSession? TryDequeueSession([Optional] DateTime? now)
		{
			return null;
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0x1318448", Offset = "0x1318448", VA = "0x1318448")]
		public void ReceiveFrame(VoicePacket packet, [Optional] DateTime? now)
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0x1318654", Offset = "0x1318654", VA = "0x1318654")]
		public void StopSession(bool logNoSessionError = true)
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0x131802C", Offset = "0x131802C", VA = "0x131802C")]
		[NotNull]
		private static DecoderPipeline GetOrCreateDecoderPipeline(FrameFormat format, [NotNull] IVolumeProvider volume)
		{
			return null;
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0x1318738", Offset = "0x1318738", VA = "0x1318738")]
		private static void Recycle(FrameFormat format, DecoderPipeline pipeline)
		{
		}
	}
	[Token(Token = "0x2000224")]
	public class VoicePlayback : MonoBehaviour, IVoicePlaybackInternal, IRemoteChannelProvider, IVoicePlayback, IVolumeProvider
	{
		[Serializable]
		[Token(Token = "0x2000309")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30F30", Offset = "0xB30F30")]
		private sealed class <>c
		{
			[Token(Token = "0x400102E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400102F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static AudioClip.PCMReaderCallback <>9__54_0;

			[Token(Token = "0x6001379")]
			[Address(RVA = "0x1319E28", Offset = "0x1319E28", VA = "0x1319E28")]
			public <>c()
			{
			}

			[Token(Token = "0x600137A")]
			[Address(RVA = "0x1319E30", Offset = "0x1319E30", VA = "0x1319E30")]
			internal void <OnEnable>b__54_0(float[] buf)
			{
			}
		}

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly SpeechSessionStream _sessions;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PlaybackOptions _cachedPlaybackOptions;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37104", Offset = "0xB37104")]
		private AudioSource <AudioSource>k__BackingField;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37114", Offset = "0xB37114")]
		private bool <Dissonance.Audio.Playback.IVoicePlaybackInternal.AllowPositionalPlayback>k__BackingField;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SamplePlaybackComponent _player;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CodecSettings _codecSettings;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private FrameFormat _frameFormat;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float? _savedSpatialBlend;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37124", Offset = "0xB37124")]
		private bool <Dissonance.Audio.Playback.IVoicePlaybackInternal.IsMuted>k__BackingField;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37134", Offset = "0xB37134")]
		private float <Dissonance.Audio.Playback.IVoicePlaybackInternal.PlaybackVolume>k__BackingField;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37144", Offset = "0xB37144")]
		private bool <IsApplyingAudioSpatialization>k__BackingField;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37154", Offset = "0xB37154")]
		private IPriorityManager <PriorityManager>k__BackingField;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37164", Offset = "0xB37164")]
		private IVolumeProvider <VolumeProvider>k__BackingField;

		[Token(Token = "0x17000224")]
		public AudioSource AudioSource
		{
			[Token(Token = "0x6000FC3")]
			[Address(RVA = "0x1318B0C", Offset = "0x1318B0C", VA = "0x1318B0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E438", Offset = "0xB3E438")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FC4")]
			[Address(RVA = "0x1318B14", Offset = "0x1318B14", VA = "0x1318B14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E448", Offset = "0xB3E448")]
			private set
			{
			}
		}

		[Token(Token = "0x17000225")]
		private bool Dissonance.Audio.Playback.IVoicePlaybackInternal.AllowPositionalPlayback
		{
			[Token(Token = "0x6000FC5")]
			[Address(RVA = "0x1318B1C", Offset = "0x1318B1C", VA = "0x1318B1C", Slot = "9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E458", Offset = "0xB3E458")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FC6")]
			[Address(RVA = "0x1318B24", Offset = "0x1318B24", VA = "0x1318B24", Slot = "10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E468", Offset = "0xB3E468")]
			set
			{
			}
		}

		[Token(Token = "0x17000226")]
		public bool IsActive
		{
			[Token(Token = "0x6000FC7")]
			[Address(RVA = "0x1318B30", Offset = "0x1318B30", VA = "0x1318B30", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000227")]
		public string PlayerName
		{
			[Token(Token = "0x6000FC8")]
			[Address(RVA = "0x1318B38", Offset = "0x1318B38", VA = "0x1318B38", Slot = "17")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FC9")]
			[Address(RVA = "0x1318B54", Offset = "0x1318B54", VA = "0x1318B54")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000228")]
		public CodecSettings CodecSettings
		{
			[Token(Token = "0x6000FCA")]
			[Address(RVA = "0x1318B6C", Offset = "0x1318B6C", VA = "0x1318B6C")]
			get
			{
				return default(CodecSettings);
			}
			[Token(Token = "0x6000FCB")]
			[Address(RVA = "0x1318B7C", Offset = "0x1318B7C", VA = "0x1318B7C")]
			internal set
			{
			}
		}

		[Token(Token = "0x17000229")]
		public bool IsSpeaking
		{
			[Token(Token = "0x6000FCC")]
			[Address(RVA = "0x1318C44", Offset = "0x1318C44", VA = "0x1318C44", Slot = "19")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700022A")]
		public float Amplitude
		{
			[Token(Token = "0x6000FCD")]
			[Address(RVA = "0x1318D00", Offset = "0x1318D00", VA = "0x1318D00", Slot = "20")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700022B")]
		public ChannelPriority Priority
		{
			[Token(Token = "0x6000FCE")]
			[Address(RVA = "0x1318D9C", Offset = "0x1318D9C", VA = "0x1318D9C", Slot = "23")]
			get
			{
				return default(ChannelPriority);
			}
		}

		[Token(Token = "0x1700022C")]
		private bool Dissonance.Audio.Playback.IVoicePlaybackInternal.IsMuted
		{
			[Token(Token = "0x6000FCF")]
			[Address(RVA = "0x1318E34", Offset = "0x1318E34", VA = "0x1318E34", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E478", Offset = "0xB3E478")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FD0")]
			[Address(RVA = "0x1318E3C", Offset = "0x1318E3C", VA = "0x1318E3C", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E488", Offset = "0xB3E488")]
			set
			{
			}
		}

		[Token(Token = "0x1700022D")]
		private float Dissonance.Audio.Playback.IVoicePlaybackInternal.PlaybackVolume
		{
			[Token(Token = "0x6000FD1")]
			[Address(RVA = "0x1318E48", Offset = "0x1318E48", VA = "0x1318E48", Slot = "13")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E498", Offset = "0xB3E498")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FD2")]
			[Address(RVA = "0x1318E50", Offset = "0x1318E50", VA = "0x1318E50", Slot = "14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E4A8", Offset = "0xB3E4A8")]
			set
			{
			}
		}

		[Token(Token = "0x1700022E")]
		private bool IsApplyingAudioSpatialization
		{
			[Token(Token = "0x6000FD3")]
			[Address(RVA = "0x1318E58", Offset = "0x1318E58", VA = "0x1318E58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E4B8", Offset = "0xB3E4B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FD4")]
			[Address(RVA = "0x1318E60", Offset = "0x1318E60", VA = "0x1318E60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E4C8", Offset = "0xB3E4C8")]
			set
			{
			}
		}

		[Token(Token = "0x1700022F")]
		private bool Dissonance.Audio.Playback.IVoicePlaybackInternal.IsApplyingAudioSpatialization
		{
			[Token(Token = "0x6000FD5")]
			[Address(RVA = "0x1318E6C", Offset = "0x1318E6C", VA = "0x1318E6C", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000230")]
		internal IPriorityManager PriorityManager
		{
			[Token(Token = "0x6000FD6")]
			[Address(RVA = "0x1318E74", Offset = "0x1318E74", VA = "0x1318E74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E4D8", Offset = "0xB3E4D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FD7")]
			[Address(RVA = "0x1318E7C", Offset = "0x1318E7C", VA = "0x1318E7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E4E8", Offset = "0xB3E4E8")]
			set
			{
			}
		}

		[Token(Token = "0x17000231")]
		private float? Dissonance.Audio.Playback.IVoicePlayback.PacketLoss
		{
			[Token(Token = "0x6000FD8")]
			[Address(RVA = "0x1318E84", Offset = "0x1318E84", VA = "0x1318E84", Slot = "21")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000232")]
		private float Dissonance.Audio.Playback.IVoicePlayback.Jitter
		{
			[Token(Token = "0x6000FD9")]
			[Address(RVA = "0x1318F88", Offset = "0x1318F88", VA = "0x1318F88", Slot = "22")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000233")]
		[CanBeNull]
		internal IVolumeProvider VolumeProvider
		{
			[Token(Token = "0x6000FE5")]
			[Address(RVA = "0x1319998", Offset = "0x1319998", VA = "0x1319998")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E4F8", Offset = "0xB3E4F8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FE6")]
			[Address(RVA = "0x13199A0", Offset = "0x13199A0", VA = "0x13199A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E508", Offset = "0xB3E508")]
			set
			{
			}
		}

		[Token(Token = "0x17000234")]
		private float Dissonance.Audio.Playback.IVolumeProvider.TargetVolume
		{
			[Token(Token = "0x6000FE7")]
			[Address(RVA = "0x13199A8", Offset = "0x13199A8", VA = "0x13199A8", Slot = "24")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x1319038", Offset = "0x1319038", VA = "0x1319038")]
		public VoicePlayback()
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0x1319110", Offset = "0x1319110", VA = "0x1319110")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0x13191E8", Offset = "0x13191E8", VA = "0x13191E8", Slot = "6")]
		private void Dissonance.Audio.Playback.IVoicePlaybackInternal.Reset()
		{
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0x13192FC", Offset = "0x13192FC", VA = "0x13192FC")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0x13194A8", Offset = "0x13194A8", VA = "0x13194A8")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0x13194C4", Offset = "0x13194C4", VA = "0x13194C4")]
		public void Update()
		{
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0x1319648", Offset = "0x1319648", VA = "0x1319648")]
		private void UpdatePositionalPlayback()
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0x131982C", Offset = "0x131982C", VA = "0x131982C", Slot = "12")]
		private void Dissonance.Audio.Playback.IVoicePlaybackInternal.SetTransform(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0x13198C0", Offset = "0x13198C0", VA = "0x13198C0", Slot = "7")]
		private void Dissonance.Audio.Playback.IVoicePlaybackInternal.StartPlayback()
		{
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0x1319918", Offset = "0x1319918", VA = "0x1319918", Slot = "8")]
		private void Dissonance.Audio.Playback.IVoicePlaybackInternal.StopPlayback()
		{
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0x1319934", Offset = "0x1319934", VA = "0x1319934", Slot = "15")]
		private void Dissonance.Audio.Playback.IVoicePlaybackInternal.ReceiveAudioPacket(VoicePacket packet)
		{
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0x1319BD4", Offset = "0x1319BD4", VA = "0x1319BD4", Slot = "16")]
		private void Dissonance.Audio.Playback.IRemoteChannelProvider.GetRemoteChannels(List<RemoteChannel> output)
		{
		}
	}
	[Token(Token = "0x2000225")]
	internal class VolumeRampedFrameSource : IFrameSource
	{
		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IFrameSource _source;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IVolumeProvider _volumeProvider;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _targetVolume;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float _currentVolume;

		[Token(Token = "0x17000235")]
		public uint FrameSize
		{
			[Token(Token = "0x6000FEB")]
			[Address(RVA = "0x1319E8C", Offset = "0x1319E8C", VA = "0x1319E8C", Slot = "4")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x17000236")]
		public WaveFormat WaveFormat
		{
			[Token(Token = "0x6000FEC")]
			[Address(RVA = "0x1319F3C", Offset = "0x1319F3C", VA = "0x1319F3C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0x1313C1C", Offset = "0x1313C1C", VA = "0x1313C1C")]
		public VolumeRampedFrameSource(IFrameSource source, IVolumeProvider volumeProvider)
		{
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0x1319FF0", Offset = "0x1319FF0", VA = "0x1319FF0", Slot = "6")]
		public void Prepare(SessionContext context)
		{
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0x131A0BC", Offset = "0x131A0BC", VA = "0x131A0BC", Slot = "7")]
		public bool Read(ArraySegment<float> frame)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0x131A248", Offset = "0x131A248", VA = "0x131A248")]
		private static void ApplyFlatAttenuation(ArraySegment<float> frame, float volume)
		{
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0x131A378", Offset = "0x131A378", VA = "0x131A378")]
		private static void ApplyRampedAttenuation(ArraySegment<float> frame, float start, float end)
		{
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0x131A4B0", Offset = "0x131A4B0", VA = "0x131A4B0", Slot = "8")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x2000226")]
	internal interface IVolumeProvider
	{
		[Token(Token = "0x17000237")]
		float TargetVolume
		{
			[Token(Token = "0x6000FF2")]
			get;
		}
	}
}
namespace Dissonance.Audio.Codecs
{
	[Token(Token = "0x2000227")]
	public enum Codec : byte
	{
		[Token(Token = "0x4000BFE")]
		Identity,
		[Token(Token = "0x4000BFF")]
		Opus
	}
	[Token(Token = "0x2000228")]
	internal interface IVoiceDecoder : IDisposable
	{
		[Token(Token = "0x17000238")]
		[NotNull]
		WaveFormat Format
		{
			[Token(Token = "0x6000FF3")]
			get;
		}

		[Token(Token = "0x6000FF4")]
		void Reset();

		[Token(Token = "0x6000FF5")]
		int Decode(ArraySegment<byte>? input, ArraySegment<float> output);
	}
	[Token(Token = "0x2000229")]
	internal interface IVoiceEncoder : IDisposable
	{
		[Token(Token = "0x17000239")]
		float PacketLoss
		{
			[Token(Token = "0x6000FF6")]
			set;
		}

		[Token(Token = "0x1700023A")]
		int FrameSize
		{
			[Token(Token = "0x6000FF7")]
			get;
		}

		[Token(Token = "0x1700023B")]
		int SampleRate
		{
			[Token(Token = "0x6000FF8")]
			get;
		}

		[Token(Token = "0x6000FF9")]
		ArraySegment<byte> Encode(ArraySegment<float> samples, ArraySegment<byte> array);

		[Token(Token = "0x6000FFA")]
		void Reset();
	}
}
namespace Dissonance.Audio.Codecs.Opus
{
	[Token(Token = "0x200022A")]
	internal static class BandwidthExtensions
	{
		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0x130E588", Offset = "0x130E588", VA = "0x130E588")]
		public static int SampleRate(this OpusNative.Bandwidth bandwidth)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200022B")]
	internal class OpusNative
	{
		[Token(Token = "0x200030A")]
		private static class OpusNativeMethods
		{
			[PreserveSig]
			[Token(Token = "0x600137B")]
			[Address(RVA = "0x13112B8", Offset = "0x13112B8", VA = "0x13112B8")]
			internal static extern IntPtr opus_encoder_create(int samplingRate, int channels, int application, out int error);

			[PreserveSig]
			[Token(Token = "0x600137C")]
			[Address(RVA = "0x1311480", Offset = "0x1311480", VA = "0x1311480")]
			internal static extern void opus_encoder_destroy(IntPtr encoder);

			[PreserveSig]
			[Token(Token = "0x600137D")]
			[Address(RVA = "0x1311360", Offset = "0x1311360", VA = "0x1311360")]
			internal static extern int opus_encode_float(IntPtr encoder, IntPtr floatPcm, int frameSize, IntPtr byteEncoded, int maxEncodedLength);

			[PreserveSig]
			[Token(Token = "0x600137E")]
			[Address(RVA = "0x1310854", Offset = "0x1310854", VA = "0x1310854")]
			internal static extern IntPtr opus_decoder_create(int samplingRate, int channels, out int error);

			[PreserveSig]
			[Token(Token = "0x600137F")]
			[Address(RVA = "0x13109CC", Offset = "0x13109CC", VA = "0x13109CC")]
			internal static extern IntPtr opus_decoder_destroy(IntPtr decoder);

			[PreserveSig]
			[Token(Token = "0x6001380")]
			[Address(RVA = "0x1310A4C", Offset = "0x1310A4C", VA = "0x1310A4C")]
			internal static extern int opus_decode_float(IntPtr decoder, IntPtr byteData, int dataLength, IntPtr floatPcm, int frameSize, bool decodeFEC);

			[PreserveSig]
			[Token(Token = "0x6001381")]
			[Address(RVA = "0x131160C", Offset = "0x131160C", VA = "0x131160C")]
			internal static extern int opus_decoder_ctl(IntPtr st, Ctl request, out int value);

			[Token(Token = "0x6001382")]
			[Address(RVA = "0x13116A4", Offset = "0x13116A4", VA = "0x13116A4")]
			internal static int dissonance_opus_decoder_ctl_out(IntPtr st, Ctl request, out int value)
			{
				return default(int);
			}

			[PreserveSig]
			[Token(Token = "0x6001383")]
			[Address(RVA = "0x13116A8", Offset = "0x13116A8", VA = "0x13116A8")]
			internal static extern int opus_decoder_ctl(IntPtr st, Ctl request, int value);

			[Token(Token = "0x6001384")]
			[Address(RVA = "0x1310B0C", Offset = "0x1310B0C", VA = "0x1310B0C")]
			internal static int dissonance_opus_decoder_ctl_in(IntPtr st, Ctl request, int value)
			{
				return default(int);
			}

			[PreserveSig]
			[Token(Token = "0x6001385")]
			[Address(RVA = "0x131173C", Offset = "0x131173C", VA = "0x131173C")]
			internal static extern int opus_encoder_ctl(IntPtr st, Ctl request, out int value);

			[Token(Token = "0x6001386")]
			[Address(RVA = "0x1311414", Offset = "0x1311414", VA = "0x1311414")]
			internal static int dissonance_opus_encoder_ctl_out(IntPtr st, Ctl request, out int value)
			{
				return default(int);
			}

			[PreserveSig]
			[Token(Token = "0x6001387")]
			[Address(RVA = "0x13117D4", Offset = "0x13117D4", VA = "0x13117D4")]
			internal static extern int opus_encoder_ctl(IntPtr st, Ctl request, int value);

			[Token(Token = "0x6001388")]
			[Address(RVA = "0x1311410", Offset = "0x1311410", VA = "0x1311410")]
			internal static int dissonance_opus_encoder_ctl_in(IntPtr st, Ctl request, int value)
			{
				return default(int);
			}

			[PreserveSig]
			[Token(Token = "0x6001389")]
			[Address(RVA = "0x1311868", Offset = "0x1311868", VA = "0x1311868")]
			internal static extern void opus_pcm_soft_clip(IntPtr pcm, int frameSize, int channels, float[] softClipMem);
		}

		[Token(Token = "0x200030B")]
		private enum Ctl
		{
			[Token(Token = "0x4001031")]
			SetBitrateRequest = 4002,
			[Token(Token = "0x4001032")]
			GetBitrateRequest = 4003,
			[Token(Token = "0x4001033")]
			SetInbandFECRequest = 4012,
			[Token(Token = "0x4001034")]
			GetInbandFECRequest = 4013,
			[Token(Token = "0x4001035")]
			SetPacketLossPercRequest = 4014,
			[Token(Token = "0x4001036")]
			GetPacketLossPercRequest = 4015,
			[Token(Token = "0x4001037")]
			ResetState = 4028
		}

		[Token(Token = "0x200030C")]
		public enum Bandwidth
		{
			[Token(Token = "0x4001039")]
			Narrowband = 1101,
			[Token(Token = "0x400103A")]
			Mediumband,
			[Token(Token = "0x400103B")]
			Wideband,
			[Token(Token = "0x400103C")]
			SuperWideband,
			[Token(Token = "0x400103D")]
			Fullband
		}

		[Token(Token = "0x200030D")]
		private enum Application
		{
			[Token(Token = "0x400103F")]
			Voip = 2048,
			[Token(Token = "0x4001040")]
			Audio = 2049,
			[Token(Token = "0x4001041")]
			RestrictedLowLatency = 2051
		}

		[Token(Token = "0x200030E")]
		private enum OpusErrors
		{
			[Token(Token = "0x4001043")]
			Ok = 0,
			[Token(Token = "0x4001044")]
			BadArg = -1,
			[Token(Token = "0x4001045")]
			BufferToSmall = -2,
			[Token(Token = "0x4001046")]
			InternalError = -3,
			[Token(Token = "0x4001047")]
			InvalidPacket = -4,
			[Token(Token = "0x4001048")]
			Unimplemented = -5,
			[Token(Token = "0x4001049")]
			InvalidState = -6,
			[Token(Token = "0x400104A")]
			AllocFail = -7
		}

		[Token(Token = "0x200030F")]
		public class OpusException : Exception
		{
			[Token(Token = "0x600138A")]
			[Address(RVA = "0x13108EC", Offset = "0x13108EC", VA = "0x13108EC")]
			public OpusException(string message)
			{
			}
		}

		[Token(Token = "0x2000310")]
		public sealed class OpusEncoder : IDisposable
		{
			[Token(Token = "0x400104B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly Log Log;

			[Token(Token = "0x400104C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly LockedValue<IntPtr> _encoder;

			[Token(Token = "0x400104D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private static readonly float[] PermittedFrameSizesMs;

			[Token(Token = "0x400104E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB39790", Offset = "0xB39790")]
			private int[] <PermittedFrameSizes>k__BackingField;

			[Token(Token = "0x400104F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int _packetLoss;

			[Token(Token = "0x4001050")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private bool _disposed;

			[Token(Token = "0x17000304")]
			public int[] PermittedFrameSizes
			{
				[Token(Token = "0x600138B")]
				[Address(RVA = "0x1310BE4", Offset = "0x1310BE4", VA = "0x1310BE4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F4D8", Offset = "0xB3F4D8")]
				get
				{
					return null;
				}
				[Token(Token = "0x600138C")]
				[Address(RVA = "0x1310BEC", Offset = "0x1310BEC", VA = "0x1310BEC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F4E8", Offset = "0xB3F4E8")]
				private set
				{
				}
			}

			[Token(Token = "0x17000305")]
			public int Bitrate
			{
				[Token(Token = "0x600138D")]
				[Address(RVA = "0x1310BF4", Offset = "0x1310BF4", VA = "0x1310BF4")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x600138E")]
				[Address(RVA = "0x130FC5C", Offset = "0x130FC5C", VA = "0x130FC5C")]
				set
				{
				}
			}

			[Token(Token = "0x17000306")]
			public bool EnableForwardErrorCorrection
			{
				[Token(Token = "0x600138F")]
				[Address(RVA = "0x1311248", Offset = "0x1311248", VA = "0x1311248")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001390")]
				[Address(RVA = "0x130FB18", Offset = "0x130FB18", VA = "0x130FB18")]
				set
				{
				}
			}

			[Token(Token = "0x17000307")]
			public float PacketLoss
			{
				[Token(Token = "0x6001391")]
				[Address(RVA = "0x131127C", Offset = "0x131127C", VA = "0x131127C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001392")]
				[Address(RVA = "0x130F508", Offset = "0x130F508", VA = "0x130F508")]
				set
				{
				}
			}

			[Token(Token = "0x6001393")]
			[Address(RVA = "0x130F734", Offset = "0x130F734", VA = "0x130F734")]
			public OpusEncoder(int srcSamplingRate, int srcChannelCount)
			{
			}

			[Token(Token = "0x6001394")]
			[Address(RVA = "0x130FE58", Offset = "0x130FE58", VA = "0x130FE58")]
			public int EncodeFloats(ArraySegment<float> sourcePcm, ArraySegment<byte> dstEncoded)
			{
				return default(int);
			}

			[Token(Token = "0x6001395")]
			[Address(RVA = "0x1310498", Offset = "0x1310498", VA = "0x1310498")]
			public void Reset()
			{
			}

			[Token(Token = "0x6001396")]
			[Address(RVA = "0x1310F34", Offset = "0x1310F34", VA = "0x1310F34")]
			private int OpusCtlIn(Ctl ctl, int value)
			{
				return default(int);
			}

			[Token(Token = "0x6001397")]
			[Address(RVA = "0x1310C20", Offset = "0x1310C20", VA = "0x1310C20")]
			private int OpusCtlOut(Ctl ctl, out int value)
			{
				return default(int);
			}

			[Token(Token = "0x6001398")]
			[Address(RVA = "0x1311418", Offset = "0x1311418", VA = "0x1311418", Slot = "1")]
			~OpusEncoder()
			{
			}

			[Token(Token = "0x6001399")]
			[Address(RVA = "0x1310684", Offset = "0x1310684", VA = "0x1310684", Slot = "4")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x2000311")]
		public sealed class OpusDecoder : IDisposable
		{
			[Token(Token = "0x4001051")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly Log Log;

			[Token(Token = "0x4001052")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly LockedValue<IntPtr> _decoder;

			[Token(Token = "0x4001053")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB397A0", Offset = "0xB397A0")]
			private bool <EnableForwardErrorCorrection>k__BackingField;

			[Token(Token = "0x4001054")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			private bool _disposed;

			[Token(Token = "0x17000308")]
			public bool EnableForwardErrorCorrection
			{
				[Token(Token = "0x600139B")]
				[Address(RVA = "0x1310840", Offset = "0x1310840", VA = "0x1310840")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F4F8", Offset = "0xB3F4F8")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600139C")]
				[Address(RVA = "0x1310848", Offset = "0x1310848", VA = "0x1310848")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F508", Offset = "0xB3F508")]
				set
				{
				}
			}

			[Token(Token = "0x600139D")]
			[Address(RVA = "0x130E864", Offset = "0x130E864", VA = "0x130E864")]
			public OpusDecoder(int outputSampleRate, int outputChannelCount)
			{
			}

			[Token(Token = "0x600139E")]
			[Address(RVA = "0x1310964", Offset = "0x1310964", VA = "0x1310964", Slot = "1")]
			~OpusDecoder()
			{
			}

			[Token(Token = "0x600139F")]
			[Address(RVA = "0x130EB64", Offset = "0x130EB64", VA = "0x130EB64", Slot = "4")]
			public void Dispose()
			{
			}

			[Token(Token = "0x60013A0")]
			[Address(RVA = "0x130EEBC", Offset = "0x130EEBC", VA = "0x130EEBC")]
			public int DecodeFloats(ArraySegment<byte>? srcEncodedBuffer, ArraySegment<float> dstBuffer)
			{
				return default(int);
			}

			[Token(Token = "0x60013A1")]
			[Address(RVA = "0x130ED30", Offset = "0x130ED30", VA = "0x130ED30")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x2000312")]
		public sealed class OpusSoftClip
		{
			[Token(Token = "0x4001055")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly float[] _memory;

			[Token(Token = "0x60013A3")]
			[Address(RVA = "0x1311918", Offset = "0x1311918", VA = "0x1311918")]
			public OpusSoftClip(int channels = 1)
			{
			}

			[Token(Token = "0x60013A4")]
			[Address(RVA = "0x13119D8", Offset = "0x13119D8", VA = "0x13119D8")]
			public void Clip(ArraySegment<float> samples)
			{
			}

			[Token(Token = "0x60013A5")]
			[Address(RVA = "0x1311ABC", Offset = "0x1311ABC", VA = "0x1311ABC")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x1310838", Offset = "0x1310838", VA = "0x1310838")]
		public OpusNative()
		{
		}
	}
	[Token(Token = "0x200022C")]
	internal class OpusDecoder : IVoiceDecoder, IDisposable
	{
		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly WaveFormat _format;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private OpusNative.OpusDecoder _decoder;

		[Token(Token = "0x1700023C")]
		public WaveFormat Format
		{
			[Token(Token = "0x6000FFE")]
			[Address(RVA = "0x130E78C", Offset = "0x130E78C", VA = "0x130E78C", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0x130E794", Offset = "0x130E794", VA = "0x130E794")]
		public OpusDecoder([NotNull] WaveFormat format)
		{
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0x130EB38", Offset = "0x130EB38", VA = "0x130EB38", Slot = "7")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0x130ED18", Offset = "0x130ED18", VA = "0x130ED18", Slot = "5")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0x130EE70", Offset = "0x130EE70", VA = "0x130EE70", Slot = "6")]
		public int Decode(ArraySegment<byte>? input, ArraySegment<float> output)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200022D")]
	internal class OpusEncoder : IVoiceEncoder, IDisposable
	{
		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly OpusNative.OpusEncoder _encoder;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly int _frameSize;

		[Token(Token = "0x1700023D")]
		public int SampleRate
		{
			[Token(Token = "0x6001003")]
			[Address(RVA = "0x130F4E8", Offset = "0x130F4E8", VA = "0x130F4E8", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700023E")]
		public float PacketLoss
		{
			[Token(Token = "0x6001004")]
			[Address(RVA = "0x130F4F0", Offset = "0x130F4F0", VA = "0x130F4F0", Slot = "4")]
			set
			{
			}
		}

		[Token(Token = "0x1700023F")]
		public int FrameSize
		{
			[Token(Token = "0x6001005")]
			[Address(RVA = "0x130F670", Offset = "0x130F670", VA = "0x130F670", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0x130F678", Offset = "0x130F678", VA = "0x130F678")]
		public OpusEncoder(AudioQuality quality, FrameSize frameSize)
		{
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0x130FB9C", Offset = "0x130FB9C", VA = "0x130FB9C")]
		private static int GetTargetBitrate(AudioQuality quality)
		{
			return default(int);
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0x130FC68", Offset = "0x130FC68", VA = "0x130FC68")]
		private int GetFrameSize(FrameSize size)
		{
			return default(int);
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0x130FDA8", Offset = "0x130FDA8", VA = "0x130FDA8", Slot = "7")]
		public ArraySegment<byte> Encode(ArraySegment<float> samples, ArraySegment<byte> encodedBuffer)
		{
			return default(ArraySegment<byte>);
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0x1310480", Offset = "0x1310480", VA = "0x1310480", Slot = "8")]
		public void Reset()
		{
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0x131066C", Offset = "0x131066C", VA = "0x131066C", Slot = "9")]
		public void Dispose()
		{
		}
	}
}
namespace Dissonance.Audio.Codecs.Identity
{
	[Token(Token = "0x200022E")]
	internal class IdentityDecoder : IVoiceDecoder, IDisposable
	{
		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly WaveFormat _format;

		[Token(Token = "0x17000240")]
		public WaveFormat Format
		{
			[Token(Token = "0x600100C")]
			[Address(RVA = "0x130E228", Offset = "0x130E228", VA = "0x130E228", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0x130E230", Offset = "0x130E230", VA = "0x130E230")]
		public IdentityDecoder(WaveFormat format)
		{
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0x130E25C", Offset = "0x130E25C", VA = "0x130E25C", Slot = "5")]
		public void Reset()
		{
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0x130E260", Offset = "0x130E260", VA = "0x130E260", Slot = "6")]
		public int Decode(ArraySegment<byte>? input, ArraySegment<float> output)
		{
			return default(int);
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0x130E3E8", Offset = "0x130E3E8", VA = "0x130E3E8", Slot = "7")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x200022F")]
	internal class IdentityEncoder : IVoiceEncoder, IDisposable
	{
		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly int _sampleRate;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private readonly int _frameSize;

		[Token(Token = "0x17000241")]
		public float PacketLoss
		{
			[Token(Token = "0x6001011")]
			[Address(RVA = "0x130E3EC", Offset = "0x130E3EC", VA = "0x130E3EC", Slot = "4")]
			set
			{
			}
		}

		[Token(Token = "0x17000242")]
		public int FrameSize
		{
			[Token(Token = "0x6001012")]
			[Address(RVA = "0x130E3F0", Offset = "0x130E3F0", VA = "0x130E3F0", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000243")]
		public int SampleRate
		{
			[Token(Token = "0x6001013")]
			[Address(RVA = "0x130E3F8", Offset = "0x130E3F8", VA = "0x130E3F8", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0x130E400", Offset = "0x130E400", VA = "0x130E400")]
		public IdentityEncoder(int sampleRate, int frameSize)
		{
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0x130E438", Offset = "0x130E438", VA = "0x130E438", Slot = "7")]
		public ArraySegment<byte> Encode(ArraySegment<float> samples, ArraySegment<byte> array)
		{
			return default(ArraySegment<byte>);
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0x130E580", Offset = "0x130E580", VA = "0x130E580", Slot = "8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0x130E584", Offset = "0x130E584", VA = "0x130E584", Slot = "9")]
		public void Dispose()
		{
		}
	}
}
namespace Dissonance.Audio.Capture
{
	[Token(Token = "0x2000230")]
	public enum AecSuppressionLevels
	{
		[Token(Token = "0x4000C09")]
		Disabled = -1,
		[Token(Token = "0x4000C0A")]
		Low,
		[Token(Token = "0x4000C0B")]
		Moderate,
		[Token(Token = "0x4000C0C")]
		High
	}
	[Token(Token = "0x2000231")]
	public enum AecmRoutingMode
	{
		[Token(Token = "0x4000C0E")]
		Disabled = -1,
		[Token(Token = "0x4000C0F")]
		QuietEarpieceOrHeadset,
		[Token(Token = "0x4000C10")]
		Earpiece,
		[Token(Token = "0x4000C11")]
		LoudEarpiece,
		[Token(Token = "0x4000C12")]
		Speakerphone,
		[Token(Token = "0x4000C13")]
		LoudSpeakerphone
	}
	[Token(Token = "0x2000232")]
	internal abstract class BasePreprocessingPipeline : IPreprocessingPipeline, IDisposable, IMicrophoneSubscriber
	{
		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ArvCalculator _arv;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int _droppedSamples;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BufferedSampleProvider _resamplerInput;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Resampler _resampler;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly SampleToFrameProvider _resampledOutput;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly float[] _intermediateFrame;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioFileWriter _diagnosticOutputRecorder;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly int _outputFrameSize;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly WaveFormat _outputFormat;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool _resetApplied;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int _resetRequested;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool _runThread;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly DThread _thread;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly AutoResetEvent _threadEvent;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly ReadonlyLockedValue<List<IMicrophoneSubscriber>> _micSubscriptions;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int _micSubscriptionCount;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly ReadonlyLockedValue<List<IVoiceActivationListener>> _vadSubscriptions;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _vadSubscriptionCount;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int _upstreamLatencyMs;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly int _estimatedPreprocessorLatencyMs;

		[Token(Token = "0x17000244")]
		public float Amplitude
		{
			[Token(Token = "0x6001018")]
			[Address(RVA = "0x1304F08", Offset = "0x1304F08", VA = "0x1304F08", Slot = "5")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000245")]
		public int OutputFrameSize
		{
			[Token(Token = "0x6001019")]
			[Address(RVA = "0x1304F10", Offset = "0x1304F10", VA = "0x1304F10", Slot = "8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000246")]
		[NotNull]
		public WaveFormat OutputFormat
		{
			[Token(Token = "0x600101A")]
			[Address(RVA = "0x1304F18", Offset = "0x1304F18", VA = "0x1304F18", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000247")]
		protected abstract bool VadIsSpeechDetected
		{
			[Token(Token = "0x600101B")]
			get;
		}

		[Token(Token = "0x17000248")]
		public TimeSpan UpstreamLatency
		{
			[Token(Token = "0x600101C")]
			[Address(RVA = "0x1304F20", Offset = "0x1304F20", VA = "0x1304F20")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x600101D")]
			[Address(RVA = "0x1304F8C", Offset = "0x1304F8C", VA = "0x1304F8C", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000249")]
		protected int PreprocessorLatencyMs
		{
			[Token(Token = "0x600101E")]
			[Address(RVA = "0x1304FC0", Offset = "0x1304FC0", VA = "0x1304FC0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x1304FCC", Offset = "0x1304FCC", VA = "0x1304FCC")]
		protected BasePreprocessingPipeline([NotNull] WaveFormat inputFormat, int intermediateFrameSize, int intermediateSampleRate, int outputFrameSize, int outputSampleRate)
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0x1305690", Offset = "0x1305690", VA = "0x1305690", Slot = "17")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0x1305A48", Offset = "0x1305A48", VA = "0x1305A48", Slot = "15")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0x1305A58", Offset = "0x1305A58", VA = "0x1305A58", Slot = "18")]
		protected virtual void ApplyReset()
		{
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0x1305ED8", Offset = "0x1305ED8", VA = "0x1305ED8", Slot = "14")]
		private void Dissonance.Audio.Capture.IMicrophoneSubscriber.ReceiveMicrophoneData(ArraySegment<float> data, [NotNull] WaveFormat format)
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0x1306208", Offset = "0x1306208", VA = "0x1306208", Slot = "7")]
		public void Start()
		{
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0x1306240", Offset = "0x1306240", VA = "0x1306240")]
		private void ThreadEntry()
		{
		}

		[Token(Token = "0x6001026")]
		protected abstract void PreprocessAudioFrame([NotNull] float[] frame);

		[Token(Token = "0x6001027")]
		[Address(RVA = "0x1306C00", Offset = "0x1306C00", VA = "0x1306C00")]
		protected void SendSamplesToSubscribers([NotNull] float[] buffer)
		{
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0x1305B38", Offset = "0x1305B38", VA = "0x1305B38")]
		private void SendResetToSubscribers()
		{
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0x1307198", Offset = "0x1307198", VA = "0x1307198", Slot = "20")]
		public virtual void Subscribe([NotNull] IMicrophoneSubscriber listener)
		{
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0x1307340", Offset = "0x1307340", VA = "0x1307340", Slot = "21")]
		public virtual bool Unsubscribe([NotNull] IMicrophoneSubscriber listener)
		{
			return default(bool);
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0x1306890", Offset = "0x1306890", VA = "0x1306890")]
		private void SendStoppedTalking()
		{
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0x130750C", Offset = "0x130750C", VA = "0x130750C")]
		private static void SendStoppedTalking([NotNull] IVoiceActivationListener listener)
		{
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0x1306A48", Offset = "0x1306A48", VA = "0x1306A48")]
		private void SendStartedTalking()
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0x13076BC", Offset = "0x13076BC", VA = "0x13076BC")]
		private static void SendStartedTalking([NotNull] IVoiceActivationListener listener)
		{
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0x1307868", Offset = "0x1307868", VA = "0x1307868", Slot = "22")]
		public virtual void Subscribe([NotNull] IVoiceActivationListener listener)
		{
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0x1307A58", Offset = "0x1307A58", VA = "0x1307A58", Slot = "23")]
		public virtual bool Unsubscribe([NotNull] IVoiceActivationListener listener)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000233")]
	public class BasicMicrophoneCapture : MonoBehaviour, IMicrophoneCapture
	{
		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte _maxReadBufferPower;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly POTBuffer _readBuffer;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BufferedSampleProvider _rawMicSamples;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IFrameProvider _rawMicFrames;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float[] _frame;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private WaveFormat _format;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AudioClip _clip;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _readHead;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool _started;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string _micName;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool _audioDeviceChanged;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioFileWriter _microphoneDiagnosticOutput;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly List<IMicrophoneSubscriber> _subscribers;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37174", Offset = "0xB37174")]
		private TimeSpan <Latency>k__BackingField;

		[Token(Token = "0x1700024A")]
		public TimeSpan Latency
		{
			[Token(Token = "0x6001032")]
			[Address(RVA = "0x1307D40", Offset = "0x1307D40", VA = "0x1307D40", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E528", Offset = "0xB3E528")]
			get
			{
				return default(TimeSpan);
			}
			[Token(Token = "0x6001033")]
			[Address(RVA = "0x1307D48", Offset = "0x1307D48", VA = "0x1307D48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E538", Offset = "0xB3E538")]
			private set
			{
			}
		}

		[Token(Token = "0x1700024B")]
		public bool IsRecording
		{
			[Token(Token = "0x6001034")]
			[Address(RVA = "0x1307D50", Offset = "0x1307D50", VA = "0x1307D50", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0x1307DC0", Offset = "0x1307DC0", VA = "0x1307DC0", Slot = "6")]
		public WaveFormat StartCapture(string inputMicName)
		{
			return null;
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0x13083BC", Offset = "0x13083BC", VA = "0x13083BC")]
		[CanBeNull]
		private static string ChooseMicName([CanBeNull] string micName)
		{
			return null;
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0x1308494", Offset = "0x1308494", VA = "0x1308494", Slot = "7")]
		public void StopCapture()
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0x1308700", Offset = "0x1308700", VA = "0x1308700")]
		private void OnAudioDeviceChanged(bool deviceWasChanged)
		{
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0x130871C", Offset = "0x130871C", VA = "0x130871C", Slot = "10")]
		public bool UpdateSubscribers()
		{
			return default(bool);
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0x13088C0", Offset = "0x13088C0", VA = "0x13088C0")]
		private void DrainMicSamples()
		{
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0x1308B88", Offset = "0x1308B88", VA = "0x1308B88")]
		private void ConsumeSamples(ArraySegment<float> samples)
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0x1308C7C", Offset = "0x1308C7C", VA = "0x1308C7C")]
		private void SendFrame()
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0x1309010", Offset = "0x1309010", VA = "0x1309010", Slot = "8")]
		public void Subscribe(IMicrophoneSubscriber listener)
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0x13090B8", Offset = "0x13090B8", VA = "0x13090B8", Slot = "9")]
		public bool Unsubscribe(IMicrophoneSubscriber listener)
		{
			return default(bool);
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0x1309160", Offset = "0x1309160", VA = "0x1309160")]
		public BasicMicrophoneCapture()
		{
		}
	}
	[Token(Token = "0x2000234")]
	internal class BufferedSampleProvider : ISampleProvider
	{
		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly WaveFormat _format;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly TransferBuffer<float> _samples;

		[Token(Token = "0x1700024C")]
		public int Count
		{
			[Token(Token = "0x6001041")]
			[Address(RVA = "0x130660C", Offset = "0x130660C", VA = "0x130660C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700024D")]
		public int Capacity
		{
			[Token(Token = "0x6001042")]
			[Address(RVA = "0x13061B0", Offset = "0x13061B0", VA = "0x13061B0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700024E")]
		public WaveFormat WaveFormat
		{
			[Token(Token = "0x6001043")]
			[Address(RVA = "0x13092C8", Offset = "0x13092C8", VA = "0x13092C8", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0x130530C", Offset = "0x130530C", VA = "0x130530C")]
		public BufferedSampleProvider(WaveFormat format, int bufferSize)
		{
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0x13092D0", Offset = "0x13092D0", VA = "0x13092D0", Slot = "5")]
		public int Read(float[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0x1306100", Offset = "0x1306100", VA = "0x1306100")]
		public int Write(ArraySegment<float> data)
		{
			return default(int);
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0x1305AC0", Offset = "0x1305AC0", VA = "0x1305AC0")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x2000235")]
	internal class CapturePipelineManager : IAmplitudeProvider
	{
		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool _isMobilePlatform;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly CodecSettingsLoader _codecSettingsLoader;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly RoomChannels _roomChannels;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly PlayerChannels _playerChannels;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly PacketLossMonitor _receivingPacketLossMonitor;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[CanBeNull]
		private ICommsNetwork _network;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private IMicrophoneCapture _microphone;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IPreprocessingPipeline _preprocessor;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private EncoderPipeline _encoder;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool _encoderSubscribed;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private FrameSkipDetector _skipDetector;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private readonly List<IVoiceActivationListener> _activationListeners;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string _micName;

		[Token(Token = "0x1700024F")]
		[CanBeNull]
		public IMicrophoneCapture Microphone
		{
			[Token(Token = "0x6001048")]
			[Address(RVA = "0x1309384", Offset = "0x1309384", VA = "0x1309384")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000250")]
		public string MicrophoneName
		{
			[Token(Token = "0x6001049")]
			[Address(RVA = "0x130938C", Offset = "0x130938C", VA = "0x130938C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600104A")]
			[Address(RVA = "0x1309394", Offset = "0x1309394", VA = "0x1309394")]
			set
			{
			}
		}

		[Token(Token = "0x17000251")]
		public float PacketLoss
		{
			[Token(Token = "0x600104B")]
			[Address(RVA = "0x1309A80", Offset = "0x1309A80", VA = "0x1309A80")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000252")]
		public float Amplitude
		{
			[Token(Token = "0x600104C")]
			[Address(RVA = "0x1309A9C", Offset = "0x1309A9C", VA = "0x1309A9C", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0x1309B5C", Offset = "0x1309B5C", VA = "0x1309B5C")]
		public CapturePipelineManager([NotNull] CodecSettingsLoader codecSettingsLoader, [NotNull] RoomChannels roomChannels, [NotNull] PlayerChannels playerChannels, [NotNull] ReadOnlyCollection<VoicePlayerState> players)
		{
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0x1309D70", Offset = "0x1309D70", VA = "0x1309D70")]
		public void Start([NotNull] ICommsNetwork network, [NotNull] IMicrophoneCapture microphone)
		{
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0x130A014", Offset = "0x130A014", VA = "0x130A014")]
		private static bool IsMobilePlatform()
		{
			return default(bool);
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0x130A01C", Offset = "0x130A01C", VA = "0x130A01C")]
		public void Destroy()
		{
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0x1309FD4", Offset = "0x1309FD4", VA = "0x1309FD4")]
		private void Net_ModeChanged(NetworkMode mode)
		{
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0x130A3D4", Offset = "0x130A3D4", VA = "0x130A3D4")]
		public void Update(bool muted, float deltaTime)
		{
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0x130A114", Offset = "0x130A114", VA = "0x130A114")]
		private void StopTransmissionPipeline()
		{
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0x13094F8", Offset = "0x13094F8", VA = "0x13094F8")]
		private void RestartTransmissionPipeline()
		{
		}

		[Token(Token = "0x6001055")]
		[Address(RVA = "0x130B168", Offset = "0x130B168", VA = "0x130B168", Slot = "5")]
		[NotNull]
		protected virtual IPreprocessingPipeline CreatePreprocessor([NotNull] WaveFormat format)
		{
			return null;
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0x130B288", Offset = "0x130B288", VA = "0x130B288")]
		public void Subscribe([NotNull] IVoiceActivationListener listener)
		{
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0x130B3C4", Offset = "0x130B3C4", VA = "0x130B3C4")]
		public void Unsubscribe([NotNull] IVoiceActivationListener listener)
		{
		}
	}
	[Token(Token = "0x2000236")]
	internal class EncoderPipeline : IMicrophoneSubscriber, IDisposable
	{
		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly byte[] _encodedBytes;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly float[] _plainSamples;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ReadonlyLockedValue<IVoiceEncoder> _encoder;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ICommsNetwork _net;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly BufferedSampleProvider _input;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Resampler _resampler;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly IFrameProvider _output;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly WaveFormat _inputFormat;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool _stopped;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool _stopping;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		private bool _disposed;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB37194", Offset = "0xB37194")]
		private float <TransmissionPacketLoss>k__BackingField;

		[Token(Token = "0x17000253")]
		public bool Stopped
		{
			[Token(Token = "0x6001059")]
			[Address(RVA = "0x130A7B8", Offset = "0x130A7B8", VA = "0x130A7B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000254")]
		public bool Stopping
		{
			[Token(Token = "0x600105A")]
			[Address(RVA = "0x130A9C0", Offset = "0x130A9C0", VA = "0x130A9C0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000255")]
		public float TransmissionPacketLoss
		{
			[Token(Token = "0x600105B")]
			[Address(RVA = "0x130B5D4", Offset = "0x130B5D4", VA = "0x130B5D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E568", Offset = "0xB3E568")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600105C")]
			[Address(RVA = "0x130B5DC", Offset = "0x130B5DC", VA = "0x130B5DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3E578", Offset = "0xB3E578")]
			set
			{
			}
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0x130AD90", Offset = "0x130AD90", VA = "0x130AD90")]
		public EncoderPipeline([NotNull] WaveFormat inputFormat, [NotNull] IVoiceEncoder encoder, [NotNull] ICommsNetwork net)
		{
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0x130B5E4", Offset = "0x130B5E4", VA = "0x130B5E4", Slot = "4")]
		public void ReceiveMicrophoneData(ArraySegment<float> inputSamples, [NotNull] WaveFormat format)
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0x130B9C4", Offset = "0x130B9C4", VA = "0x130B9C4")]
		private int EncodeFrames([NotNull] IVoiceEncoder encoder, int maxCount)
		{
			return default(int);
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0x130A7DC", Offset = "0x130A7DC", VA = "0x130A7DC", Slot = "5")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0x130A9E4", Offset = "0x130A9E4", VA = "0x130A9E4")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0x130AB08", Offset = "0x130AB08", VA = "0x130AB08", Slot = "6")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x2000237")]
	internal interface IAmplitudeProvider
	{
		[Token(Token = "0x17000256")]
		float Amplitude
		{
			[Token(Token = "0x6001064")]
			get;
		}
	}
	[Token(Token = "0x2000238")]
	internal interface IChannelPriorityProvider
	{
		[Token(Token = "0x17000257")]
		ChannelPriority DefaultChannelPriority
		{
			[Token(Token = "0x6001065")]
			get;
			[Token(Token = "0x6001066")]
			set;
		}
	}
	[Token(Token = "0x2000239")]
	internal interface IFrameProvider
	{
		[Token(Token = "0x17000258")]
		[NotNull]
		WaveFormat WaveFormat
		{
			[Token(Token = "0x6001067")]
			get;
		}

		[Token(Token = "0x17000259")]
		uint FrameSize
		{
			[Token(Token = "0x6001068")]
			get;
		}

		[Token(Token = "0x6001069")]
		bool Read(ArraySegment<float> outBuffer);

		[Token(Token = "0x600106A")]
		void Reset();
	}
	[Token(Token = "0x200023A")]
	public interface IMicrophoneCapture
	{
		[Token(Token = "0x1700025A")]
		bool IsRecording
		{
			[Token(Token = "0x600106B")]
			get;
		}

		[Token(Token = "0x1700025B")]
		TimeSpan Latency
		{
			[Token(Token = "0x600106C")]
			get;
		}

		[Token(Token = "0x600106D")]
		[CanBeNull]
		WaveFormat StartCapture([CanBeNull] string name);

		[Token(Token = "0x600106E")]
		void StopCapture();

		[Token(Token = "0x600106F")]
		void Subscribe([NotNull] IMicrophoneSubscriber listener);

		[Token(Token = "0x6001070")]
		bool Unsubscribe([NotNull] IMicrophoneSubscriber listener);

		[Token(Token = "0x6001071")]
		bool UpdateSubscribers();
	}
	[Token(Token = "0x200023B")]
	public interface IMicrophoneSubscriber
	{
		[Token(Token = "0x6001072")]
		void ReceiveMicrophoneData(ArraySegment<float> buffer, WaveFormat format);

		[Token(Token = "0x6001073")]
		void Reset();
	}
	[Token(Token = "0x200023C")]
	internal interface IPreprocessingPipeline : IDisposable, IMicrophoneSubscriber
	{
		[Token(Token = "0x1700025C")]
		WaveFormat OutputFormat
		{
			[Token(Token = "0x6001074")]
			get;
		}

		[Token(Token = "0x1700025D")]
		float Amplitude
		{
			[Token(Token = "0x6001075")]
			get;
		}

		[Token(Token = "0x1700025E")]
		TimeSpan UpstreamLatency
		{
			[Token(Token = "0x6001076")]
			set;
		}

		[Token(Token = "0x1700025F")]
		int OutputFrameSize
		{
			[Token(Token = "0x6001078")]
			get;
		}

		[Token(Token = "0x6001077")]
		void Start();

		[Token(Token = "0x6001079")]
		void Subscribe(IMicrophoneSubscriber listener);

		[Token(Token = "0x600107A")]
		bool Unsubscribe(IMicrophoneSubscriber listener);

		[Token(Token = "0x600107B")]
		void Subscribe(IVoiceActivationListener listener);

		[Token(Token = "0x600107C")]
		bool Unsubscribe(IVoiceActivationListener listener);
	}
	[Token(Token = "0x200023D")]
	public enum NoiseSuppressionLevels
	{
		[Token(Token = "0x4000C56")]
		Disabled = -1,
		[Token(Token = "0x4000C57")]
		Low,
		[Token(Token = "0x4000C58")]
		Moderate,
		[Token(Token = "0x4000C59")]
		High,
		[Token(Token = "0x4000C5A")]
		VeryHigh
	}
	[Token(Token = "0x200023E")]
	internal class Resampler : ISampleProvider
	{
		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly WaveFormat _format;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[CanBeNull]
		private readonly WdlResampler _resampler;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ISampleProvider _source;

		[Token(Token = "0x17000260")]
		public WaveFormat WaveFormat
		{
			[Token(Token = "0x600107D")]
			[Address(RVA = "0x130BD68", Offset = "0x130BD68", VA = "0x130BD68", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0x1305398", Offset = "0x1305398", VA = "0x1305398")]
		public Resampler([NotNull] ISampleProvider source, int newSampleRate)
		{
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0x130BD70", Offset = "0x130BD70", VA = "0x130BD70", Slot = "5")]
		public int Read(float[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0x1305B18", Offset = "0x1305B18", VA = "0x1305B18")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x200023F")]
	internal class SampleToFrameProvider : IFrameProvider
	{
		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ISampleProvider _source;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly uint _frameSize;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int _samplesInFrame;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly float[] _frame;

		[Token(Token = "0x17000261")]
		public WaveFormat WaveFormat
		{
			[Token(Token = "0x6001081")]
			[Address(RVA = "0x130BFD8", Offset = "0x130BFD8", VA = "0x130BFD8", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000262")]
		public uint FrameSize
		{
			[Token(Token = "0x6001082")]
			[Address(RVA = "0x130C088", Offset = "0x130C088", VA = "0x130C088", Slot = "5")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0x1305614", Offset = "0x1305614", VA = "0x1305614")]
		public SampleToFrameProvider(ISampleProvider source, uint frameSize)
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x1306664", Offset = "0x1306664", VA = "0x1306664", Slot = "6")]
		public bool Read(ArraySegment<float> outBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0x1305B30", Offset = "0x1305B30", VA = "0x1305B30", Slot = "7")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x2000240")]
	internal class SineSampleProvider : ISampleProvider
	{
		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly WaveFormat _format;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly float _frequency;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly double _step;

		[Token(Token = "0x4000C65")]
		private const double TwoPi = Math.PI * 2.0;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double _index;

		[Token(Token = "0x17000263")]
		public float Frequency
		{
			[Token(Token = "0x6001086")]
			[Address(RVA = "0x130C090", Offset = "0x130C090", VA = "0x130C090")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000264")]
		public WaveFormat WaveFormat
		{
			[Token(Token = "0x6001087")]
			[Address(RVA = "0x130C098", Offset = "0x130C098", VA = "0x130C098", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0x130C0A0", Offset = "0x130C0A0", VA = "0x130C0A0")]
		public SineSampleProvider(WaveFormat format, float frequency)
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0x130C104", Offset = "0x130C104", VA = "0x130C104", Slot = "5")]
		public int Read(float[] buffer, int offset, int count)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000241")]
	internal class WebRtcPreprocessingPipeline : BasePreprocessingPipeline
	{
		[Token(Token = "0x2000313")]
		internal sealed class WebRtcPreprocessor : IDisposable
		{
			[Token(Token = "0x2000322")]
			public enum SampleRates
			{
				[Token(Token = "0x400108F")]
				SampleRate8KHz = 8000,
				[Token(Token = "0x4001090")]
				SampleRate16KHz = 16000,
				[Token(Token = "0x4001091")]
				SampleRate32KHz = 32000,
				[Token(Token = "0x4001092")]
				SampleRate48KHz = 48000
			}

			[Token(Token = "0x2000323")]
			private enum ProcessorErrors
			{
				[Token(Token = "0x4001094")]
				Ok = 0,
				[Token(Token = "0x4001095")]
				Unspecified = -1,
				[Token(Token = "0x4001096")]
				CreationFailed = -2,
				[Token(Token = "0x4001097")]
				UnsupportedComponent = -3,
				[Token(Token = "0x4001098")]
				UnsupportedFunction = -4,
				[Token(Token = "0x4001099")]
				NullPointer = -5,
				[Token(Token = "0x400109A")]
				BadParameter = -6,
				[Token(Token = "0x400109B")]
				BadSampleRate = -7,
				[Token(Token = "0x400109C")]
				BadDataLength = -8,
				[Token(Token = "0x400109D")]
				BadNumberChannels = -9,
				[Token(Token = "0x400109E")]
				FileError = -10,
				[Token(Token = "0x400109F")]
				StreamParameterNotSet = -11,
				[Token(Token = "0x40010A0")]
				NotEnabled = -12
			}

			[Token(Token = "0x2000324")]
			internal enum FilterState
			{
				[Token(Token = "0x40010A2")]
				FilterNotRunning,
				[Token(Token = "0x40010A3")]
				FilterNoInstance,
				[Token(Token = "0x40010A4")]
				FilterNoSamplesSubmitted,
				[Token(Token = "0x40010A5")]
				FilterOk
			}

			[Serializable]
			[Token(Token = "0x2000325")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30F40", Offset = "0xB30F40")]
			private sealed class <>c
			{
				[Token(Token = "0x40010A6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public static readonly <>c <>9;

				[Token(Token = "0x40010A7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public static Func<VoiceSettings, NoiseSuppressionLevels> <>9__31_0;

				[Token(Token = "0x40010A8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public static Func<VoiceSettings, AecSuppressionLevels> <>9__31_2;

				[Token(Token = "0x40010A9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public static Func<VoiceSettings, AecmRoutingMode> <>9__31_4;

				[Token(Token = "0x60013D3")]
				[Address(RVA = "0x130E1D8", Offset = "0x130E1D8", VA = "0x130E1D8")]
				public <>c()
				{
				}

				[Token(Token = "0x60013D4")]
				[Address(RVA = "0x130E1E0", Offset = "0x130E1E0", VA = "0x130E1E0")]
				internal NoiseSuppressionLevels <SetFilterPreprocessor>b__31_0(VoiceSettings s)
				{
					return default(NoiseSuppressionLevels);
				}

				[Token(Token = "0x60013D5")]
				[Address(RVA = "0x130E1F8", Offset = "0x130E1F8", VA = "0x130E1F8")]
				internal AecSuppressionLevels <SetFilterPreprocessor>b__31_2(VoiceSettings s)
				{
					return default(AecSuppressionLevels);
				}

				[Token(Token = "0x60013D6")]
				[Address(RVA = "0x130E210", Offset = "0x130E210", VA = "0x130E210")]
				internal AecmRoutingMode <SetFilterPreprocessor>b__31_4(VoiceSettings s)
				{
					return default(AecmRoutingMode);
				}
			}

			[Token(Token = "0x2000326")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB30F50", Offset = "0xB30F50")]
			private sealed class <>c__DisplayClass32_0<T>
			{
				[Token(Token = "0x40010AA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public string propertyName;

				[Token(Token = "0x40010AB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public Action<T> setValue;

				[Token(Token = "0x40010AC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public Func<VoiceSettings, T> getValue;

				[Token(Token = "0x40010AD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public VoiceSettings settings;

				[Token(Token = "0x60013D7")]
				public <>c__DisplayClass32_0()
				{
				}

				[Token(Token = "0x60013D8")]
				internal void <Bind>b__0(object sender, PropertyChangedEventArgs args)
				{
				}
			}

			[Token(Token = "0x4001056")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly LockedValue<IntPtr> _handle;

			[Token(Token = "0x4001057")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly List<PropertyChangedEventHandler> _subscribed;

			[Token(Token = "0x4001058")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private readonly bool _useMobileAec;

			[Token(Token = "0x4001059")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private NoiseSuppressionLevels _nsLevel;

			[Token(Token = "0x400105A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private AecSuppressionLevels _aecLevel;

			[Token(Token = "0x400105B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private AecmRoutingMode _aecmLevel;

			[Token(Token = "0x17000309")]
			private NoiseSuppressionLevels NoiseSuppressionLevel
			{
				[Token(Token = "0x60013AF")]
				[Address(RVA = "0x130D0D8", Offset = "0x130D0D8", VA = "0x130D0D8")]
				get
				{
					return default(NoiseSuppressionLevels);
				}
				[Token(Token = "0x60013B0")]
				[Address(RVA = "0x130D0E0", Offset = "0x130D0E0", VA = "0x130D0E0")]
				set
				{
				}
			}

			[Token(Token = "0x1700030A")]
			private AecSuppressionLevels AecSuppressionLevel
			{
				[Token(Token = "0x60013B1")]
				[Address(RVA = "0x130D24C", Offset = "0x130D24C", VA = "0x130D24C")]
				get
				{
					return default(AecSuppressionLevels);
				}
				[Token(Token = "0x60013B2")]
				[Address(RVA = "0x130D254", Offset = "0x130D254", VA = "0x130D254")]
				set
				{
				}
			}

			[Token(Token = "0x1700030B")]
			private AecmRoutingMode AecmSuppressionLevel
			{
				[Token(Token = "0x60013B3")]
				[Address(RVA = "0x130D3DC", Offset = "0x130D3DC", VA = "0x130D3DC")]
				get
				{
					return default(AecmRoutingMode);
				}
				[Token(Token = "0x60013B4")]
				[Address(RVA = "0x130D3E4", Offset = "0x130D3E4", VA = "0x130D3E4")]
				set
				{
				}
			}

			[PreserveSig]
			[Token(Token = "0x60013A6")]
			[Address(RVA = "0x130CBF8", Offset = "0x130CBF8", VA = "0x130CBF8")]
			private static extern IntPtr Dissonance_CreatePreprocessor(NoiseSuppressionLevels nsLevel, AecSuppressionLevels aecLevel, bool aecDelayAgnostic, bool aecExtended, bool aecRefined, AecmRoutingMode aecmRoutingMode, bool aecmComfortNoise);

			[PreserveSig]
			[Token(Token = "0x60013A7")]
			[Address(RVA = "0x130CCC0", Offset = "0x130CCC0", VA = "0x130CCC0")]
			private static extern void Dissonance_DestroyPreprocessor(IntPtr handle);

			[PreserveSig]
			[Token(Token = "0x60013A8")]
			[Address(RVA = "0x130CD40", Offset = "0x130CD40", VA = "0x130CD40")]
			private static extern void Dissonance_ConfigureNoiseSuppression(IntPtr handle, NoiseSuppressionLevels nsLevel);

			[PreserveSig]
			[Token(Token = "0x60013A9")]
			[Address(RVA = "0x130CDD0", Offset = "0x130CDD0", VA = "0x130CDD0")]
			private static extern void Dissonance_ConfigureAecSuppression(IntPtr handle, AecSuppressionLevels aecLevel, AecmRoutingMode aecmRouting);

			[PreserveSig]
			[Token(Token = "0x60013AA")]
			[Address(RVA = "0x130CE68", Offset = "0x130CE68", VA = "0x130CE68")]
			private static extern bool Dissonance_GetVadSpeechState(IntPtr handle);

			[PreserveSig]
			[Token(Token = "0x60013AB")]
			[Address(RVA = "0x130CEF0", Offset = "0x130CEF0", VA = "0x130CEF0")]
			private static extern ProcessorErrors Dissonance_PreprocessCaptureFrame(IntPtr handle, int sampleRate, float[] input, float[] output, int streamDelay);

			[PreserveSig]
			[Token(Token = "0x60013AC")]
			[Address(RVA = "0x130CFB0", Offset = "0x130CFB0", VA = "0x130CFB0")]
			private static extern bool Dissonance_PreprocessorExchangeInstance(IntPtr previous, IntPtr replacement);

			[PreserveSig]
			[Token(Token = "0x60013AD")]
			[Address(RVA = "0x130CAB0", Offset = "0x130CAB0", VA = "0x130CAB0")]
			internal static extern int Dissonance_GetFilterState();

			[PreserveSig]
			[Token(Token = "0x60013AE")]
			[Address(RVA = "0x130D048", Offset = "0x130D048", VA = "0x130D048")]
			private static extern void Dissonance_GetAecMetrics(IntPtr floatBuffer, int bufferLength);

			[Token(Token = "0x60013B5")]
			[Address(RVA = "0x130C21C", Offset = "0x130C21C", VA = "0x130C21C")]
			public WebRtcPreprocessor(bool useMobileAec)
			{
			}

			[Token(Token = "0x60013B6")]
			[Address(RVA = "0x130C7E4", Offset = "0x130C7E4", VA = "0x130C7E4")]
			public bool Process(SampleRates inputSampleRate, float[] input, float[] output, int estimatedStreamDelay)
			{
				return default(bool);
			}

			[Token(Token = "0x60013B7")]
			[Address(RVA = "0x130C4FC", Offset = "0x130C4FC", VA = "0x130C4FC")]
			public void Reset()
			{
			}

			[Token(Token = "0x60013B8")]
			[Address(RVA = "0x130D56C", Offset = "0x130D56C", VA = "0x130D56C")]
			private IntPtr CreatePreprocessor()
			{
				return default(IntPtr);
			}

			[Token(Token = "0x60013B9")]
			[Address(RVA = "0x130D664", Offset = "0x130D664", VA = "0x130D664")]
			private void SetFilterPreprocessor(IntPtr preprocessor)
			{
			}

			[Token(Token = "0x60013BA")]
			private void Bind<T>(Func<VoiceSettings, T> getValue, string propertyName, Action<T> setValue)
			{
			}

			[Token(Token = "0x60013BB")]
			[Address(RVA = "0x130DBD8", Offset = "0x130DBD8", VA = "0x130DBD8")]
			private bool ClearFilterPreprocessor(bool throwOnError = true)
			{
				return default(bool);
			}

			[Token(Token = "0x60013BC")]
			[Address(RVA = "0x130DF78", Offset = "0x130DF78", VA = "0x130DF78")]
			private void ReleaseUnmanagedResources()
			{
			}

			[Token(Token = "0x60013BD")]
			[Address(RVA = "0x130C45C", Offset = "0x130C45C", VA = "0x130C45C", Slot = "4")]
			public void Dispose()
			{
			}

			[Token(Token = "0x60013BE")]
			[Address(RVA = "0x130E100", Offset = "0x130E100", VA = "0x130E100", Slot = "1")]
			~WebRtcPreprocessor()
			{
			}

			[Token(Token = "0x60013BF")]
			[Address(RVA = "0x130E168", Offset = "0x130E168", VA = "0x130E168")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F518", Offset = "0xB3F518")]
			private void <SetFilterPreprocessor>b__31_1(NoiseSuppressionLevels v)
			{
			}

			[Token(Token = "0x60013C0")]
			[Address(RVA = "0x130E16C", Offset = "0x130E16C", VA = "0x130E16C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F528", Offset = "0xB3F528")]
			private void <SetFilterPreprocessor>b__31_3(AecSuppressionLevels v)
			{
			}

			[Token(Token = "0x60013C1")]
			[Address(RVA = "0x130E170", Offset = "0x130E170", VA = "0x130E170")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xB3F538", Offset = "0xB3F538")]
			private void <SetFilterPreprocessor>b__31_5(AecmRoutingMode v)
			{
			}
		}

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Log Log;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool _isVadDetectingSpeech;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly WebRtcPreprocessor _preprocessor;

		[Token(Token = "0x17000265")]
		protected override bool VadIsSpeechDetected
		{
			[Token(Token = "0x600108A")]
			[Address(RVA = "0x130C214", Offset = "0x130C214", VA = "0x130C214", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0x130B1DC", Offset = "0x130B1DC", VA = "0x130B1DC")]
		public WebRtcPreprocessingPipeline([NotNull] WaveFormat inputFormat, bool mobilePlatform)
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0x130C430", Offset = "0x130C430", VA = "0x130C430", Slot = "17")]
		public override void Dispose()
		{
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0x130C4CC", Offset = "0x130C4CC", VA = "0x130C4CC", Slot = "18")]
		protected override void ApplyReset()
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0x130C6C0", Offset = "0x130C6C0", VA = "0x130C6C0", Slot = "19")]
		protected override void PreprocessAudioFrame(float[] frame)
		{
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0x130CAAC", Offset = "0x130CAAC", VA = "0x130CAAC")]
		internal static WebRtcPreprocessor.FilterState GetAecFilterState()
		{
			return default(WebRtcPreprocessor.FilterState);
		}
	}
}
