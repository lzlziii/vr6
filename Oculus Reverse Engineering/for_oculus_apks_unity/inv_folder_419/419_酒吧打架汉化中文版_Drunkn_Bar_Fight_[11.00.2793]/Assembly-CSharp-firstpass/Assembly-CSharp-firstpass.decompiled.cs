using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using System.Threading.Tasks;
using DG.Tweening.Core;
using DG.Tweening.Plugins;
using DG.Tweening.Plugins.Core.PathCore;
using DG.Tweening.Plugins.Options;
using Il2CppDummyDll;
using RootMotion.Dynamics;
using RootMotion.FinalIK;
using TMPro;
using Unity.Collections;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Animations;
using UnityEngine.Audio;
using UnityEngine.Events;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.Scripting;
using UnityEngine.UI;
using VRMPlaystation;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class DBFBuildScenes : ScriptableObject
{
	[Token(Token = "0x6000001")]
	[Address(RVA = "0x1DAF324", Offset = "0x1DAF324", VA = "0x1DAF324")]
	private void Start()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x1DAF328", Offset = "0x1DAF328", VA = "0x1DAF328")]
	private void Update()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x1DAF32C", Offset = "0x1DAF32C", VA = "0x1DAF32C")]
	public DBFBuildScenes()
	{
	}
}
[Token(Token = "0x2000003")]
public class DBFBuildScript : MonoBehaviour
{
	[Token(Token = "0x6000004")]
	[Address(RVA = "0x1DAF334", Offset = "0x1DAF334", VA = "0x1DAF334")]
	public DBFBuildScript()
	{
	}
}
[Token(Token = "0x2000004")]
[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x124D8F8", Offset = "0x124D8F8")]
public class InspectorButtonAttribute : PropertyAttribute
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float kDefaultButtonWidth;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public readonly string MethodName;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float _buttonWidth;

	[Token(Token = "0x17000001")]
	public float ButtonWidth
	{
		[Token(Token = "0x6000005")]
		[Address(RVA = "0x1DBBC6C", Offset = "0x1DBBC6C", VA = "0x1DBBC6C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000006")]
		[Address(RVA = "0x1DBBC74", Offset = "0x1DBBC74", VA = "0x1DBBC74")]
		set
		{
		}
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x1DBBC7C", Offset = "0x1DBBC7C", VA = "0x1DBBC7C")]
	public InspectorButtonAttribute(string MethodName)
	{
	}
}
[Token(Token = "0x2000005")]
public static class Oni
{
	[Token(Token = "0x20002C2")]
	public enum ConstraintType
	{
		[Token(Token = "0x4001197")]
		Tether,
		[Token(Token = "0x4001198")]
		Pin,
		[Token(Token = "0x4001199")]
		Volume,
		[Token(Token = "0x400119A")]
		Bending,
		[Token(Token = "0x400119B")]
		Distance,
		[Token(Token = "0x400119C")]
		ParticleCollision,
		[Token(Token = "0x400119D")]
		Density,
		[Token(Token = "0x400119E")]
		Collision,
		[Token(Token = "0x400119F")]
		Skin,
		[Token(Token = "0x40011A0")]
		Aerodynamics,
		[Token(Token = "0x40011A1")]
		Stitch,
		[Token(Token = "0x40011A2")]
		ShapeMatching
	}

	[Token(Token = "0x20002C3")]
	public enum ParticlePhase
	{
		[Token(Token = "0x40011A4")]
		SelfCollide = 0x1000000,
		[Token(Token = "0x40011A5")]
		Fluid = 0x2000000
	}

	[Token(Token = "0x20002C4")]
	public enum ShapeType
	{
		[Token(Token = "0x40011A7")]
		Sphere,
		[Token(Token = "0x40011A8")]
		Box,
		[Token(Token = "0x40011A9")]
		Capsule,
		[Token(Token = "0x40011AA")]
		Heightmap,
		[Token(Token = "0x40011AB")]
		TriangleMesh,
		[Token(Token = "0x40011AC")]
		EdgeMesh
	}

	[Token(Token = "0x20002C5")]
	public enum MaterialCombineMode
	{
		[Token(Token = "0x40011AE")]
		Average,
		[Token(Token = "0x40011AF")]
		Minimium,
		[Token(Token = "0x40011B0")]
		Multiply,
		[Token(Token = "0x40011B1")]
		Maximum
	}

	[Token(Token = "0x20002C6")]
	public enum NormalsUpdate
	{
		[Token(Token = "0x40011B3")]
		Recalculate,
		[Token(Token = "0x40011B4")]
		Skin
	}

	[Token(Token = "0x20002C7")]
	public struct ProfileInfo
	{
		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double start;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double end;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double childDuration;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int threadID;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int level;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string name;
	}

	[Token(Token = "0x20002C8")]
	public struct GridCell
	{
		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 center;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 size;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int count;
	}

	[Serializable]
	[Token(Token = "0x20002C9")]
	public struct SolverParameters
	{
		[Token(Token = "0x2000429")]
		public enum Interpolation
		{
			[Token(Token = "0x4001721")]
			None,
			[Token(Token = "0x4001722")]
			Interpolate
		}

		[Token(Token = "0x200042A")]
		public enum Mode
		{
			[Token(Token = "0x4001724")]
			Mode3D,
			[Token(Token = "0x4001725")]
			Mode2D
		}

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B128", Offset = "0x125B128")]
		public Mode mode;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B160", Offset = "0x125B160")]
		public Interpolation interpolation;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 gravity;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B198", Offset = "0x125B198")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125B198", Offset = "0x125B198")]
		public float damping;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B1EC", Offset = "0x125B1EC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125B1EC", Offset = "0x125B1EC")]
		public float fluidDenoising;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B240", Offset = "0x125B240")]
		public float advectionRadius;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B278", Offset = "0x125B278")]
		public float sleepThreshold;

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0x2708A04", Offset = "0x2708A04", VA = "0x2708A04")]
		public SolverParameters(Interpolation interpolation, Vector4 gravity)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20002CA")]
	public struct ConstraintParameters
	{
		[Token(Token = "0x200042B")]
		public enum EvaluationOrder
		{
			[Token(Token = "0x4001727")]
			Sequential,
			[Token(Token = "0x4001728")]
			Parallel
		}

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B2B0", Offset = "0x125B2B0")]
		public bool enabled;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B2E8", Offset = "0x125B2E8")]
		public EvaluationOrder evaluationOrder;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B320", Offset = "0x125B320")]
		public int iterations;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B358", Offset = "0x125B358")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125B358", Offset = "0x125B358")]
		public float SORFactor;

		[Token(Token = "0x60015C7")]
		[Address(RVA = "0x2708AC4", Offset = "0x2708AC4", VA = "0x2708AC4")]
		public ConstraintParameters(bool enabled, EvaluationOrder order, int iterations)
		{
		}
	}

	[Token(Token = "0x20002CB")]
	public struct Contact
	{
		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector4 point;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector4 normal;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector4 tangent;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector4 bitangent;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float distance;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float normalImpulse;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float tangentImpulse;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float bitangentImpulse;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float stickImpulse;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int particle;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int other;
	}

	[Token(Token = "0x20002CC")]
	public struct BoneWeights
	{
		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int bone0;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int bone1;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int bone2;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int bone3;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float weight0;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float weight1;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float weight2;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float weight3;

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0x2711860", Offset = "0x2711860", VA = "0x2711860")]
		public BoneWeights(BoneWeight weight)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20002CD")]
	public struct Rigidbody
	{
		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Quaternion rotation;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 linearVelocity;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 angularVelocity;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 centerOfMass;

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 inertiaTensor;

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float inverseMass;

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0x27124D8", Offset = "0x27124D8", VA = "0x27124D8")]
		public void Set(UnityEngine.Rigidbody source, bool kinematicForParticles)
		{
		}

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0x2712844", Offset = "0x2712844", VA = "0x2712844")]
		public void Set(Rigidbody2D source, bool kinematicForParticles)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20002CE")]
	public struct RigidbodyVelocities
	{
		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 linearVelocity;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 angularVelocity;
	}

	[Serializable]
	[Token(Token = "0x20002CF")]
	public struct Collider
	{
		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Quaternion rotation;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 translation;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 scale;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 boundsMin;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 boundsMax;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int id;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float contactOffset;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int collisionGroup;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool trigger;

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0x2711900", Offset = "0x2711900", VA = "0x2711900")]
		public void Set(UnityEngine.Collider source, int phase, float thickness)
		{
		}

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0x2711BEC", Offset = "0x2711BEC", VA = "0x2711BEC")]
		public void Set(Collider2D source, int phase, float thickness)
		{
		}

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0x2711E94", Offset = "0x2711E94", VA = "0x2711E94")]
		public void SetSpaceTransform(Transform space)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20002D0")]
	public struct Shape
	{
		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Vector3 center;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Vector3 size;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr data;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IntPtr indices;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int dataCount;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int indexCount;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int resolutionU;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int resolutionV;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool is2D;

		[Token(Token = "0x60015CE")]
		[Address(RVA = "0x2708DA0", Offset = "0x2708DA0", VA = "0x2708DA0")]
		public void Set(Vector3 center, float radius)
		{
		}

		[Token(Token = "0x60015CF")]
		[Address(RVA = "0x2712B68", Offset = "0x2712B68", VA = "0x2712B68")]
		public void Set(Vector3 center, Vector3 size)
		{
		}

		[Token(Token = "0x60015D0")]
		[Address(RVA = "0x2712B78", Offset = "0x2712B78", VA = "0x2712B78")]
		public void Set(Vector3 center, float radius, float height, int direction)
		{
		}

		[Token(Token = "0x60015D1")]
		[Address(RVA = "0x270B2B8", Offset = "0x270B2B8", VA = "0x270B2B8")]
		public void Set(Vector3 size, int resolutionU, int resolutionV, IntPtr data)
		{
		}

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0x2712BD4", Offset = "0x2712BD4", VA = "0x2712BD4")]
		public void Set(IntPtr data, IntPtr indices, int dataCount, int indicesCount)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20002D1")]
	public struct CollisionMaterial
	{
		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float friction;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float stickiness;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float stickDistance;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public MaterialCombineMode frictionCombine;

		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MaterialCombineMode stickinessCombine;
	}

	[Serializable]
	[Token(Token = "0x20002D2")]
	public struct FluidMaterial
	{
		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float smoothingRadius;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float restDensity;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float viscosity;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float surfaceTension;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float buoyancy;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float atmosphericDrag;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float atmosphericPressure;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float vorticity;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float elasticRange;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float plasticCreep;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float plasticThreshold;
	}

	[Serializable]
	[Token(Token = "0x20002D3")]
	public struct HalfEdge
	{
		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int index;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int indexInFace;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int face;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int nextHalfEdge;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int pair;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int endVertex;

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0x27124BC", Offset = "0x27124BC", VA = "0x27124BC")]
		public HalfEdge(int index)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20002D4")]
	public struct Vertex
	{
		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int index;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int halfEdge;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 position;

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0x2712BE0", Offset = "0x2712BE0", VA = "0x2712BE0")]
		public Vertex(Vector3 position, int index, int halfEdge)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20002D5")]
	public struct Face
	{
		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int index;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int halfEdge;

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0x27124B0", Offset = "0x27124B0", VA = "0x27124B0")]
		public Face(int index)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20002D6")]
	public struct MeshInformation
	{
		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float volume;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float area;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int borderEdgeCount;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool closed;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public bool nonManifold;
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x270B038", Offset = "0x270B038", VA = "0x270B038")]
	public static GCHandle PinMemory(object data)
	{
		return default(GCHandle);
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x270B000", Offset = "0x270B000", VA = "0x270B000")]
	public static void UnpinMemory(GCHandle handle)
	{
	}

	[PreserveSig]
	[Token(Token = "0x600000B")]
	[Address(RVA = "0x270E67C", Offset = "0x270E67C", VA = "0x270E67C")]
	public static extern IntPtr CreateCollider();

	[PreserveSig]
	[Token(Token = "0x600000C")]
	[Address(RVA = "0x270E6F0", Offset = "0x270E6F0", VA = "0x270E6F0")]
	public static extern void DestroyCollider(IntPtr collider);

	[PreserveSig]
	[Token(Token = "0x600000D")]
	[Address(RVA = "0x2708B78", Offset = "0x2708B78", VA = "0x2708B78")]
	public static extern IntPtr CreateShape(ShapeType shapeType);

	[PreserveSig]
	[Token(Token = "0x600000E")]
	[Address(RVA = "0x270237C", Offset = "0x270237C", VA = "0x270237C")]
	public static extern void DestroyShape(IntPtr shape);

	[PreserveSig]
	[Token(Token = "0x600000F")]
	[Address(RVA = "0x270E770", Offset = "0x270E770", VA = "0x270E770")]
	public static extern IntPtr CreateRigidbody();

	[PreserveSig]
	[Token(Token = "0x6000010")]
	[Address(RVA = "0x270E7E4", Offset = "0x270E7E4", VA = "0x270E7E4")]
	public static extern void DestroyRigidbody(IntPtr rigidbody);

	[PreserveSig]
	[Token(Token = "0x6000011")]
	[Address(RVA = "0x270E864", Offset = "0x270E864", VA = "0x270E864")]
	public static extern void UpdateCollider(IntPtr collider, ref Collider adaptor);

	[PreserveSig]
	[Token(Token = "0x6000012")]
	[Address(RVA = "0x2708E44", Offset = "0x2708E44", VA = "0x2708E44")]
	public static extern void UpdateShape(IntPtr shape, ref Shape adaptor);

	[PreserveSig]
	[Token(Token = "0x6000013")]
	[Address(RVA = "0x270E8F4", Offset = "0x270E8F4", VA = "0x270E8F4")]
	public static extern void UpdateRigidbody(IntPtr rigidbody, ref Rigidbody adaptor);

	[PreserveSig]
	[Token(Token = "0x6000014")]
	[Address(RVA = "0x270E984", Offset = "0x270E984", VA = "0x270E984")]
	public static extern void GetRigidbodyVelocity(IntPtr rigidbody, ref RigidbodyVelocities velocities);

	[PreserveSig]
	[Token(Token = "0x6000015")]
	[Address(RVA = "0x270EA14", Offset = "0x270EA14", VA = "0x270EA14")]
	public static extern void SetColliderShape(IntPtr collider, IntPtr shape);

	[PreserveSig]
	[Token(Token = "0x6000016")]
	[Address(RVA = "0x270EAA0", Offset = "0x270EAA0", VA = "0x270EAA0")]
	public static extern void SetColliderRigidbody(IntPtr collider, IntPtr rigidbody);

	[PreserveSig]
	[Token(Token = "0x6000017")]
	[Address(RVA = "0x270EB30", Offset = "0x270EB30", VA = "0x270EB30")]
	public static extern void SetColliderMaterial(IntPtr collider, IntPtr material);

	[PreserveSig]
	[Token(Token = "0x6000018")]
	[Address(RVA = "0x270EBC0", Offset = "0x270EBC0", VA = "0x270EBC0")]
	public static extern IntPtr CreateCollisionMaterial();

	[PreserveSig]
	[Token(Token = "0x6000019")]
	[Address(RVA = "0x270EC34", Offset = "0x270EC34", VA = "0x270EC34")]
	public static extern void DestroyCollisionMaterial(IntPtr material);

	[PreserveSig]
	[Token(Token = "0x600001A")]
	[Address(RVA = "0x270ECB4", Offset = "0x270ECB4", VA = "0x270ECB4")]
	public static extern void UpdateCollisionMaterial(IntPtr material, ref CollisionMaterial adaptor);

	[PreserveSig]
	[Token(Token = "0x600001B")]
	[Address(RVA = "0x27059BC", Offset = "0x27059BC", VA = "0x27059BC")]
	public static extern IntPtr CreateSolver(int maxParticles, int maxNeighbours);

	[PreserveSig]
	[Token(Token = "0x600001C")]
	[Address(RVA = "0x2705F80", Offset = "0x2705F80", VA = "0x2705F80")]
	public static extern void DestroySolver(IntPtr solver);

	[PreserveSig]
	[Token(Token = "0x600001D")]
	[Address(RVA = "0x270ED44", Offset = "0x270ED44", VA = "0x270ED44")]
	public static extern void AddCollider(IntPtr solver, IntPtr collider);

	[PreserveSig]
	[Token(Token = "0x600001E")]
	[Address(RVA = "0x270EDD4", Offset = "0x270EDD4", VA = "0x270EDD4")]
	public static extern void RemoveCollider(IntPtr solver, IntPtr collider);

	[PreserveSig]
	[Token(Token = "0x600001F")]
	[Address(RVA = "0x2707C88", Offset = "0x2707C88", VA = "0x2707C88")]
	public static extern void GetBounds(IntPtr solver, ref Vector3 min, ref Vector3 max);

	[PreserveSig]
	[Token(Token = "0x6000020")]
	[Address(RVA = "0x270EE64", Offset = "0x270EE64", VA = "0x270EE64")]
	public static extern int GetParticleGridSize(IntPtr solver);

	[PreserveSig]
	[Token(Token = "0x6000021")]
	[Address(RVA = "0x270EEE4", Offset = "0x270EEE4", VA = "0x270EEE4")]
	public static extern void GetParticleGrid(IntPtr solver, GridCell[] cells);

	[PreserveSig]
	[Token(Token = "0x6000022")]
	[Address(RVA = "0x2706534", Offset = "0x2706534", VA = "0x2706534")]
	public static extern void SetSolverParameters(IntPtr solver, ref SolverParameters parameters);

	[PreserveSig]
	[Token(Token = "0x6000023")]
	[Address(RVA = "0x270EF7C", Offset = "0x270EF7C", VA = "0x270EF7C")]
	public static extern void GetSolverParameters(IntPtr solver, ref SolverParameters parameters);

	[PreserveSig]
	[Token(Token = "0x6000024")]
	[Address(RVA = "0x27066F4", Offset = "0x27066F4", VA = "0x27066F4")]
	public static extern int SetActiveParticles(IntPtr solver, int[] active, int num);

	[PreserveSig]
	[Token(Token = "0x6000025")]
	[Address(RVA = "0x2706A44", Offset = "0x2706A44", VA = "0x2706A44")]
	public static extern void AddSimulationTime(IntPtr solver, float step_dt);

	[PreserveSig]
	[Token(Token = "0x6000026")]
	[Address(RVA = "0x2706ADC", Offset = "0x2706ADC", VA = "0x2706ADC")]
	public static extern void ResetSimulationTime(IntPtr solver);

	[PreserveSig]
	[Token(Token = "0x6000027")]
	[Address(RVA = "0x2706DE4", Offset = "0x2706DE4", VA = "0x2706DE4")]
	public static extern void UpdateSolver(IntPtr solver, float substep_dt);

	[PreserveSig]
	[Token(Token = "0x6000028")]
	[Address(RVA = "0x27071B8", Offset = "0x27071B8", VA = "0x27071B8")]
	public static extern void ApplyPositionInterpolation(IntPtr solver, float substep_dt);

	[PreserveSig]
	[Token(Token = "0x6000029")]
	[Address(RVA = "0x2706D64", Offset = "0x2706D64", VA = "0x2706D64")]
	public static extern void UpdateSkeletalAnimation(IntPtr solver);

	[PreserveSig]
	[Token(Token = "0x600002A")]
	[Address(RVA = "0x270F00C", Offset = "0x270F00C", VA = "0x270F00C")]
	public static extern void GetConstraintsOrder(IntPtr solver, int[] order);

	[PreserveSig]
	[Token(Token = "0x600002B")]
	[Address(RVA = "0x270665C", Offset = "0x270665C", VA = "0x270665C")]
	public static extern void SetConstraintsOrder(IntPtr solver, int[] order);

	[PreserveSig]
	[Token(Token = "0x600002C")]
	[Address(RVA = "0x270766C", Offset = "0x270766C", VA = "0x270766C")]
	public static extern int GetConstraintCount(IntPtr solver, int type);

	[PreserveSig]
	[Token(Token = "0x600002D")]
	[Address(RVA = "0x27076FC", Offset = "0x27076FC", VA = "0x27076FC")]
	public static extern void GetActiveConstraintIndices(IntPtr solver, int[] indices, int num, int type);

	[PreserveSig]
	[Token(Token = "0x600002E")]
	[Address(RVA = "0x270F0A4", Offset = "0x270F0A4", VA = "0x270F0A4")]
	public static extern int SetRenderableParticlePositions(IntPtr solver, Vector4[] positions, int num, int destOffset);

	[PreserveSig]
	[Token(Token = "0x600002F")]
	[Address(RVA = "0x2707248", Offset = "0x2707248", VA = "0x2707248")]
	public static extern int GetRenderableParticlePositions(IntPtr solver, Vector4[] positions, int num, int sourceOffset);

	[PreserveSig]
	[Token(Token = "0x6000030")]
	[Address(RVA = "0x270F154", Offset = "0x270F154", VA = "0x270F154")]
	public static extern int SetParticlePhases(IntPtr solver, int[] phases, int num, int destOffset);

	[PreserveSig]
	[Token(Token = "0x6000031")]
	[Address(RVA = "0x2700D5C", Offset = "0x2700D5C", VA = "0x2700D5C")]
	public static extern int SetParticlePositions(IntPtr solver, Vector4[] positions, int num, int destOffset);

	[PreserveSig]
	[Token(Token = "0x6000032")]
	[Address(RVA = "0x2700CAC", Offset = "0x2700CAC", VA = "0x2700CAC")]
	public static extern int GetParticlePositions(IntPtr solver, Vector4[] positions, int num, int sourceOffset);

	[PreserveSig]
	[Token(Token = "0x6000033")]
	[Address(RVA = "0x2701EAC", Offset = "0x2701EAC", VA = "0x2701EAC")]
	public static extern int SetParticleInverseMasses(IntPtr solver, float[] invMasses, int num, int destOffset);

	[PreserveSig]
	[Token(Token = "0x6000034")]
	[Address(RVA = "0x270F204", Offset = "0x270F204", VA = "0x270F204")]
	public static extern int SetParticleSolidRadii(IntPtr solver, float[] radii, int num, int destOffset);

	[PreserveSig]
	[Token(Token = "0x6000035")]
	[Address(RVA = "0x2700E0C", Offset = "0x2700E0C", VA = "0x2700E0C")]
	public static extern int SetParticleVelocities(IntPtr solver, Vector4[] velocities, int num, int destOffset);

	[PreserveSig]
	[Token(Token = "0x6000036")]
	[Address(RVA = "0x270F2B4", Offset = "0x270F2B4", VA = "0x270F2B4")]
	public static extern int GetParticleVelocities(IntPtr solver, Vector4[] velocities, int num, int sourceOffset);

	[PreserveSig]
	[Token(Token = "0x6000037")]
	[Address(RVA = "0x270949C", Offset = "0x270949C", VA = "0x270949C")]
	public static extern void AddParticleExternalForces(IntPtr solver, Vector4[] forces, int[] indices, int num);

	[PreserveSig]
	[Token(Token = "0x6000038")]
	[Address(RVA = "0x270F364", Offset = "0x270F364", VA = "0x270F364")]
	public static extern void AddParticleExternalForce(IntPtr solver, ref Vector4 force, int[] indices, int num);

	[PreserveSig]
	[Token(Token = "0x6000039")]
	[Address(RVA = "0x27077AC", Offset = "0x27077AC", VA = "0x27077AC")]
	public static extern int GetParticleVorticities(IntPtr solver, Vector4[] vorticities, int num, int sourceOffset);

	[PreserveSig]
	[Token(Token = "0x600003A")]
	[Address(RVA = "0x270785C", Offset = "0x270785C", VA = "0x270785C")]
	public static extern int GetParticleDensities(IntPtr solver, float[] densities, int num, int sourceOffset);

	[PreserveSig]
	[Token(Token = "0x600003B")]
	[Address(RVA = "0x270F414", Offset = "0x270F414", VA = "0x270F414")]
	public static extern int GetDeformableTriangleCount(IntPtr solver);

	[PreserveSig]
	[Token(Token = "0x600003C")]
	[Address(RVA = "0x270F494", Offset = "0x270F494", VA = "0x270F494")]
	public static extern void SetDeformableTriangles(IntPtr solver, int[] indices, int num, int destOffset);

	[PreserveSig]
	[Token(Token = "0x600003D")]
	[Address(RVA = "0x270F544", Offset = "0x270F544", VA = "0x270F544")]
	public static extern int RemoveDeformableTriangles(IntPtr solver, int num, int sourceOffset);

	[PreserveSig]
	[Token(Token = "0x600003E")]
	[Address(RVA = "0x27065C4", Offset = "0x27065C4", VA = "0x27065C4")]
	public static extern void SetConstraintGroupParameters(IntPtr solver, int type, ref ConstraintParameters parameters);

	[PreserveSig]
	[Token(Token = "0x600003F")]
	[Address(RVA = "0x270F5DC", Offset = "0x270F5DC", VA = "0x270F5DC")]
	public static extern void GetConstraintGroupParameters(IntPtr solver, int type, ref ConstraintParameters parameters);

	[PreserveSig]
	[Token(Token = "0x6000040")]
	[Address(RVA = "0x270F674", Offset = "0x270F674", VA = "0x270F674")]
	public static extern void SetCollisionMaterials(IntPtr solver, IntPtr[] materials, int[] indices, int num);

	[PreserveSig]
	[Token(Token = "0x6000041")]
	[Address(RVA = "0x270F72C", Offset = "0x270F72C", VA = "0x270F72C")]
	public static extern int SetRestPositions(IntPtr solver, Vector4[] positions, int num, int destOffset);

	[PreserveSig]
	[Token(Token = "0x6000042")]
	[Address(RVA = "0x2706844", Offset = "0x2706844", VA = "0x2706844")]
	public static extern void SetFluidMaterials(IntPtr solver, FluidMaterial[] materials, int num, int destOffset);

	[PreserveSig]
	[Token(Token = "0x6000043")]
	[Address(RVA = "0x2706794", Offset = "0x2706794", VA = "0x2706794")]
	public static extern int SetFluidMaterialIndices(IntPtr solver, int[] indices, int num, int destOffset);

	[PreserveSig]
	[Token(Token = "0x6000044")]
	[Address(RVA = "0x270F7DC", Offset = "0x270F7DC", VA = "0x270F7DC")]
	public static extern IntPtr CreateDeformableMesh(IntPtr solver, IntPtr halfEdge, IntPtr skinConstraintBatch, float[] worldToLocal, IntPtr particleIndices, int vertexCapacity, int vertexCount);

	[PreserveSig]
	[Token(Token = "0x6000045")]
	[Address(RVA = "0x270F8AC", Offset = "0x270F8AC", VA = "0x270F8AC")]
	public static extern void DestroyDeformableMesh(IntPtr solver, IntPtr mesh);

	[PreserveSig]
	[Token(Token = "0x6000046")]
	[Address(RVA = "0x270F93C", Offset = "0x270F93C", VA = "0x270F93C")]
	public static extern bool TearDeformableMeshAtVertex(IntPtr mesh, int vertexIndex, ref Vector3 planePoint, ref Vector3 planeNormal, int[] updated_edges, ref int num_edges);

	[PreserveSig]
	[Token(Token = "0x6000047")]
	[Address(RVA = "0x270FA0C", Offset = "0x270FA0C", VA = "0x270FA0C")]
	public static extern void SetDeformableMeshTBNUpdate(IntPtr mesh, NormalsUpdate normalsUpdate, bool skinTangents);

	[PreserveSig]
	[Token(Token = "0x6000048")]
	[Address(RVA = "0x270FAA4", Offset = "0x270FAA4", VA = "0x270FAA4")]
	public static extern void SetDeformableMeshTransform(IntPtr mesh, float[] worldToLocal);

	[PreserveSig]
	[Token(Token = "0x6000049")]
	[Address(RVA = "0x270FB3C", Offset = "0x270FB3C", VA = "0x270FB3C")]
	public static extern void SetDeformableMeshSkinMap(IntPtr mesh, IntPtr sourceMesh, IntPtr triangleSkinMap);

	[PreserveSig]
	[Token(Token = "0x600004A")]
	[Address(RVA = "0x270FBD0", Offset = "0x270FBD0", VA = "0x270FBD0")]
	public static extern void SetDeformableMeshParticleIndices(IntPtr mesh, IntPtr particleIndices);

	[PreserveSig]
	[Token(Token = "0x600004B")]
	[Address(RVA = "0x270FC60", Offset = "0x270FC60", VA = "0x270FC60")]
	public static extern void SetDeformableMeshData(IntPtr mesh, IntPtr triangles, IntPtr vertices, IntPtr normals, IntPtr tangents, IntPtr colors, IntPtr uv1, IntPtr uv2, IntPtr uv3, IntPtr uv4);

	[PreserveSig]
	[Token(Token = "0x600004C")]
	[Address(RVA = "0x270FD44", Offset = "0x270FD44", VA = "0x270FD44")]
	public static extern void SetDeformableMeshAnimationData(IntPtr mesh, float[] bindPoses, BoneWeights[] weights, int numBones);

	[PreserveSig]
	[Token(Token = "0x600004D")]
	[Address(RVA = "0x270FDFC", Offset = "0x270FDFC", VA = "0x270FDFC")]
	public static extern void SetDeformableMeshBoneTransforms(IntPtr mesh, float[] boneTransforms);

	[PreserveSig]
	[Token(Token = "0x600004E")]
	[Address(RVA = "0x270FE94", Offset = "0x270FE94", VA = "0x270FE94")]
	public static extern void ForceDeformableMeshSkeletalSkinning(IntPtr mesh);

	[PreserveSig]
	[Token(Token = "0x600004F")]
	[Address(RVA = "0x2702FA8", Offset = "0x2702FA8", VA = "0x2702FA8")]
	public static extern IntPtr CreateBatch(int type, bool cooked);

	[PreserveSig]
	[Token(Token = "0x6000050")]
	[Address(RVA = "0x2703430", Offset = "0x2703430", VA = "0x2703430")]
	public static extern void DestroyBatch(IntPtr batch);

	[PreserveSig]
	[Token(Token = "0x6000051")]
	[Address(RVA = "0x270AA80", Offset = "0x270AA80", VA = "0x270AA80")]
	public static extern IntPtr AddBatch(IntPtr solver, IntPtr batch, bool sharesParticles);

	[PreserveSig]
	[Token(Token = "0x6000052")]
	[Address(RVA = "0x270AB18", Offset = "0x270AB18", VA = "0x270AB18")]
	public static extern void RemoveBatch(IntPtr solver, IntPtr batch);

	[PreserveSig]
	[Token(Token = "0x6000053")]
	[Address(RVA = "0x270A4C4", Offset = "0x270A4C4", VA = "0x270A4C4")]
	public static extern bool EnableBatch(IntPtr batch, bool enabled);

	[PreserveSig]
	[Token(Token = "0x6000054")]
	[Address(RVA = "0x27031B0", Offset = "0x27031B0", VA = "0x27031B0")]
	public static extern int GetBatchConstraintCount(IntPtr batch);

	[PreserveSig]
	[Token(Token = "0x6000055")]
	[Address(RVA = "0x270FF14", Offset = "0x270FF14", VA = "0x270FF14")]
	public static extern int GetBatchConstraintForces(IntPtr batch, float[] forces, int num, int destOffset);

	[PreserveSig]
	[Token(Token = "0x6000056")]
	[Address(RVA = "0x2703318", Offset = "0x2703318", VA = "0x2703318")]
	public static extern int GetBatchPhaseCount(IntPtr batch);

	[PreserveSig]
	[Token(Token = "0x6000057")]
	[Address(RVA = "0x2703398", Offset = "0x2703398", VA = "0x2703398")]
	public static extern void GetBatchPhaseSizes(IntPtr batch, int[] phaseSizes);

	[PreserveSig]
	[Token(Token = "0x6000058")]
	[Address(RVA = "0x2703898", Offset = "0x2703898", VA = "0x2703898")]
	public static extern void SetBatchPhaseSizes(IntPtr batch, int[] phaseSizes, int num);

	[PreserveSig]
	[Token(Token = "0x6000059")]
	[Address(RVA = "0x2703128", Offset = "0x2703128", VA = "0x2703128")]
	public static extern bool CookBatch(IntPtr batch);

	[PreserveSig]
	[Token(Token = "0x600005A")]
	[Address(RVA = "0x270AC60", Offset = "0x270AC60", VA = "0x270AC60")]
	public static extern int SetActiveConstraints(IntPtr batch, int[] active, int num);

	[PreserveSig]
	[Token(Token = "0x600005B")]
	[Address(RVA = "0x270FFC0", Offset = "0x270FFC0", VA = "0x270FFC0")]
	public static extern void SetDistanceConstraints(IntPtr batch, int[] indices, float[] restLengths, Vector2[] stiffnesses, int num);

	[PreserveSig]
	[Token(Token = "0x600005C")]
	[Address(RVA = "0x2710088", Offset = "0x2710088", VA = "0x2710088")]
	public static extern void GetDistanceConstraints(IntPtr batch, int[] indices, float[] restLengths, Vector2[] stiffnesses);

	[PreserveSig]
	[Token(Token = "0x600005D")]
	[Address(RVA = "0x2710148", Offset = "0x2710148", VA = "0x2710148")]
	public static extern void SetBendingConstraints(IntPtr batch, int[] indices, float[] restBends, Vector2[] bendingStiffnesses, int num);

	[PreserveSig]
	[Token(Token = "0x600005E")]
	[Address(RVA = "0x2710210", Offset = "0x2710210", VA = "0x2710210")]
	public static extern void GetBendingConstraints(IntPtr batch, int[] indices, float[] restBends, Vector2[] bendingStiffnesses);

	[PreserveSig]
	[Token(Token = "0x600005F")]
	[Address(RVA = "0x2703038", Offset = "0x2703038", VA = "0x2703038")]
	public static extern void SetSkinConstraints(IntPtr batch, int[] indices, Vector4[] points, Vector4[] normals, float[] radiiBackstops, float[] stiffnesses, int num);

	[PreserveSig]
	[Token(Token = "0x6000060")]
	[Address(RVA = "0x2703230", Offset = "0x2703230", VA = "0x2703230")]
	public static extern void GetSkinConstraints(IntPtr batch, int[] indices, Vector4[] points, Vector4[] normals, float[] radiiBackstops, float[] stiffnesses);

	[PreserveSig]
	[Token(Token = "0x6000061")]
	[Address(RVA = "0x27102D0", Offset = "0x27102D0", VA = "0x27102D0")]
	public static extern void SetAerodynamicConstraints(IntPtr batch, int[] particleIndices, float[] aerodynamicCoeffs, int num);

	[PreserveSig]
	[Token(Token = "0x6000062")]
	[Address(RVA = "0x270D620", Offset = "0x270D620", VA = "0x270D620")]
	public static extern void SetVolumeConstraints(IntPtr batch, int[] triangleIndices, int[] firstTriangle, int[] numTriangles, float[] restVolumes, Vector2[] pressureStiffnesses, int num);

	[PreserveSig]
	[Token(Token = "0x6000063")]
	[Address(RVA = "0x270BC94", Offset = "0x270BC94", VA = "0x270BC94")]
	public static extern void SetTetherConstraints(IntPtr batch, int[] indices, Vector2[] maxLenghtsScales, float[] stiffnesses, int num);

	[PreserveSig]
	[Token(Token = "0x6000064")]
	[Address(RVA = "0x270BD5C", Offset = "0x270BD5C", VA = "0x270BD5C")]
	public static extern void GetTetherConstraints(IntPtr batch, int[] indices, Vector2[] maxLenghtsScales, float[] stiffnesses);

	[PreserveSig]
	[Token(Token = "0x6000065")]
	[Address(RVA = "0x2710388", Offset = "0x2710388", VA = "0x2710388")]
	public static extern void SetPinConstraints(IntPtr batch, int[] indices, Vector4[] pinOffsets, IntPtr[] colliders, float[] stiffnesses, int num);

	[PreserveSig]
	[Token(Token = "0x6000066")]
	[Address(RVA = "0x270ABA8", Offset = "0x270ABA8", VA = "0x270ABA8")]
	public static extern void SetStitchConstraints(IntPtr batch, int[] indices, float[] stiffnesses, int num);

	[PreserveSig]
	[Token(Token = "0x6000067")]
	[Address(RVA = "0x2707AA0", Offset = "0x2707AA0", VA = "0x2707AA0")]
	public static extern void GetCollisionContacts(IntPtr solver, Contact[] contacts, int n);

	[PreserveSig]
	[Token(Token = "0x6000068")]
	[Address(RVA = "0x2706CE4", Offset = "0x2706CE4", VA = "0x2706CE4")]
	public static extern void ClearDiffuseParticles(IntPtr solver);

	[PreserveSig]
	[Token(Token = "0x6000069")]
	[Address(RVA = "0x2710468", Offset = "0x2710468", VA = "0x2710468")]
	public static extern int SetDiffuseParticles(IntPtr solver, Vector4[] positions, int num);

	[PreserveSig]
	[Token(Token = "0x600006A")]
	[Address(RVA = "0x2710508", Offset = "0x2710508", VA = "0x2710508")]
	public static extern int GetDiffuseParticleVelocities(IntPtr solver, Vector4[] velocities, int num, int sourceOffset);

	[PreserveSig]
	[Token(Token = "0x600006B")]
	[Address(RVA = "0x27105B8", Offset = "0x27105B8", VA = "0x27105B8")]
	public static extern void SetDiffuseParticleNeighbourCounts(IntPtr solver, IntPtr neighbourCounts);

	[PreserveSig]
	[Token(Token = "0x600006C")]
	[Address(RVA = "0x2710648", Offset = "0x2710648", VA = "0x2710648")]
	public static extern IntPtr CreateHalfEdgeMesh();

	[PreserveSig]
	[Token(Token = "0x600006D")]
	[Address(RVA = "0x27106BC", Offset = "0x27106BC", VA = "0x27106BC")]
	public static extern void DestroyHalfEdgeMesh(IntPtr mesh);

	[PreserveSig]
	[Token(Token = "0x600006E")]
	[Address(RVA = "0x271073C", Offset = "0x271073C", VA = "0x271073C")]
	public static extern void SetVertices(IntPtr mesh, IntPtr vertices, int n);

	[PreserveSig]
	[Token(Token = "0x600006F")]
	[Address(RVA = "0x27107D4", Offset = "0x27107D4", VA = "0x27107D4")]
	public static extern void SetHalfEdges(IntPtr mesh, IntPtr halfedges, int n);

	[PreserveSig]
	[Token(Token = "0x6000070")]
	[Address(RVA = "0x271086C", Offset = "0x271086C", VA = "0x271086C")]
	public static extern void SetFaces(IntPtr mesh, IntPtr faces, int n);

	[PreserveSig]
	[Token(Token = "0x6000071")]
	[Address(RVA = "0x2710904", Offset = "0x2710904", VA = "0x2710904")]
	public static extern void SetNormals(IntPtr mesh, IntPtr normals);

	[PreserveSig]
	[Token(Token = "0x6000072")]
	[Address(RVA = "0x2710994", Offset = "0x2710994", VA = "0x2710994")]
	public static extern void SetTangents(IntPtr mesh, IntPtr tangents);

	[PreserveSig]
	[Token(Token = "0x6000073")]
	[Address(RVA = "0x2710A24", Offset = "0x2710A24", VA = "0x2710A24")]
	public static extern void SetInverseOrientations(IntPtr mesh, IntPtr orientations);

	[PreserveSig]
	[Token(Token = "0x6000074")]
	[Address(RVA = "0x2710AB4", Offset = "0x2710AB4", VA = "0x2710AB4")]
	public static extern void SetVisualMap(IntPtr mesh, IntPtr map);

	[PreserveSig]
	[Token(Token = "0x6000075")]
	[Address(RVA = "0x2710B44", Offset = "0x2710B44", VA = "0x2710B44")]
	public static extern int GetVertexCount(IntPtr mesh);

	[PreserveSig]
	[Token(Token = "0x6000076")]
	[Address(RVA = "0x2710BC4", Offset = "0x2710BC4", VA = "0x2710BC4")]
	public static extern int GetHalfEdgeCount(IntPtr mesh);

	[PreserveSig]
	[Token(Token = "0x6000077")]
	[Address(RVA = "0x2710C44", Offset = "0x2710C44", VA = "0x2710C44")]
	public static extern int GetFaceCount(IntPtr mesh);

	[PreserveSig]
	[Token(Token = "0x6000078")]
	[Address(RVA = "0x2710CC4", Offset = "0x2710CC4", VA = "0x2710CC4")]
	public static extern int GetHalfEdgeMeshInfo(IntPtr mesh, ref MeshInformation meshInfo);

	[PreserveSig]
	[Token(Token = "0x6000079")]
	[Address(RVA = "0x2710D54", Offset = "0x2710D54", VA = "0x2710D54")]
	public static extern void CalculatePrimitiveCounts(IntPtr mesh, Vector3[] vertices, int[] triangles, int vertexCount, int triangleCount);

	[PreserveSig]
	[Token(Token = "0x600007A")]
	[Address(RVA = "0x2710E14", Offset = "0x2710E14", VA = "0x2710E14")]
	public static extern void Generate(IntPtr mesh, Vector3[] vertices, int[] triangles, int vertexCount, int triangleCount, ref Vector3 scale);

	[PreserveSig]
	[Token(Token = "0x600007B")]
	[Address(RVA = "0x26FF6DC", Offset = "0x26FF6DC", VA = "0x26FF6DC")]
	public static extern int MakePhase(int group, ParticlePhase flags);

	[PreserveSig]
	[Token(Token = "0x600007C")]
	[Address(RVA = "0x2710EE4", Offset = "0x2710EE4", VA = "0x2710EE4")]
	public static extern int GetGroupFromPhase(int phase);

	[PreserveSig]
	[Token(Token = "0x600007D")]
	[Address(RVA = "0x2710F64", Offset = "0x2710F64", VA = "0x2710F64")]
	public static extern float BendingConstraintRest(float[] constraintCoordinates);

	[PreserveSig]
	[Token(Token = "0x600007E")]
	[Address(RVA = "0x2710FEC", Offset = "0x2710FEC", VA = "0x2710FEC")]
	public static extern IntPtr CreateTriangleSkinMap();

	[PreserveSig]
	[Token(Token = "0x600007F")]
	[Address(RVA = "0x2711060", Offset = "0x2711060", VA = "0x2711060")]
	public static extern void DestroyTriangleSkinMap(IntPtr skinmap);

	[PreserveSig]
	[Token(Token = "0x6000080")]
	[Address(RVA = "0x27110E0", Offset = "0x27110E0", VA = "0x27110E0")]
	public static extern void Bind(IntPtr skinmap, IntPtr sourcemesh, IntPtr targetmesh, uint[] sourceMasterFlags, uint[] targetSlaveFlags);

	[PreserveSig]
	[Token(Token = "0x6000081")]
	[Address(RVA = "0x27111A0", Offset = "0x27111A0", VA = "0x27111A0")]
	public static extern int GetSkinnedVertexCount(IntPtr skinmap);

	[PreserveSig]
	[Token(Token = "0x6000082")]
	[Address(RVA = "0x2711220", Offset = "0x2711220", VA = "0x2711220")]
	public static extern void GetSkinInfo(IntPtr skinmap, int[] skinIndices, int[] sourceTriIndices, Vector3[] baryPositions, Vector3[] baryNormals, Vector3[] baryTangents);

	[PreserveSig]
	[Token(Token = "0x6000083")]
	[Address(RVA = "0x2711308", Offset = "0x2711308", VA = "0x2711308")]
	public static extern void SetSkinInfo(IntPtr skinmap, int[] skinIndices, int[] sourceTriIndices, Vector3[] baryPositions, Vector3[] baryNormals, Vector3[] baryTangents, int num);

	[PreserveSig]
	[Token(Token = "0x6000084")]
	[Address(RVA = "0x27113F8", Offset = "0x27113F8", VA = "0x27113F8")]
	public static extern void WaitForAllTasks();

	[PreserveSig]
	[Token(Token = "0x6000085")]
	[Address(RVA = "0x2711468", Offset = "0x2711468", VA = "0x2711468")]
	public static extern void ClearTasks();

	[PreserveSig]
	[Token(Token = "0x6000086")]
	[Address(RVA = "0x27114D8", Offset = "0x27114D8", VA = "0x27114D8")]
	public static extern int GetMaxSystemConcurrency();

	[PreserveSig]
	[Token(Token = "0x6000087")]
	[Address(RVA = "0x271154C", Offset = "0x271154C", VA = "0x271154C")]
	public static extern void SignalFrameStart();

	[PreserveSig]
	[Token(Token = "0x6000088")]
	[Address(RVA = "0x27115BC", Offset = "0x27115BC", VA = "0x27115BC")]
	public static extern double SignalFrameEnd();

	[PreserveSig]
	[Token(Token = "0x6000089")]
	[Address(RVA = "0x271162C", Offset = "0x271162C", VA = "0x271162C")]
	public static extern void EnableProfiler(bool cooked);

	[PreserveSig]
	[Token(Token = "0x600008A")]
	[Address(RVA = "0x27116AC", Offset = "0x27116AC", VA = "0x27116AC")]
	public static extern int GetProfilingInfoCount();

	[PreserveSig]
	[Token(Token = "0x600008B")]
	[Address(RVA = "0x2711720", Offset = "0x2711720", VA = "0x2711720")]
	public static extern void GetProfilingInfo([Out] ProfileInfo[] info, int num);
}
[Token(Token = "0x2000006")]
public class MoveSample : MonoBehaviour
{
	[Token(Token = "0x600008C")]
	[Address(RVA = "0x1DBC0A4", Offset = "0x1DBC0A4", VA = "0x1DBC0A4")]
	private void Start()
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x1DBC3C0", Offset = "0x1DBC3C0", VA = "0x1DBC3C0")]
	public MoveSample()
	{
	}
}
[Token(Token = "0x2000007")]
public class RotateSample : MonoBehaviour
{
	[Token(Token = "0x600008E")]
	[Address(RVA = "0x23E64D4", Offset = "0x23E64D4", VA = "0x23E64D4")]
	private void Start()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x23E67E8", Offset = "0x23E67E8", VA = "0x23E67E8")]
	public RotateSample()
	{
	}
}
[Token(Token = "0x2000008")]
public class SampleInfo : MonoBehaviour
{
	[Token(Token = "0x6000090")]
	[Address(RVA = "0x23E67F0", Offset = "0x23E67F0", VA = "0x23E67F0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x23E6AA4", Offset = "0x23E6AA4", VA = "0x23E6AA4")]
	public SampleInfo()
	{
	}
}
[Token(Token = "0x2000009")]
public class iTween : MonoBehaviour
{
	[Token(Token = "0x20002D7")]
	private delegate float EasingFunction(float start, float end, float Value);

	[Token(Token = "0x20002D8")]
	private delegate void ApplyTween();

	[Token(Token = "0x20002D9")]
	public enum EaseType
	{
		[Token(Token = "0x4001217")]
		easeInQuad,
		[Token(Token = "0x4001218")]
		easeOutQuad,
		[Token(Token = "0x4001219")]
		easeInOutQuad,
		[Token(Token = "0x400121A")]
		easeInCubic,
		[Token(Token = "0x400121B")]
		easeOutCubic,
		[Token(Token = "0x400121C")]
		easeInOutCubic,
		[Token(Token = "0x400121D")]
		easeInQuart,
		[Token(Token = "0x400121E")]
		easeOutQuart,
		[Token(Token = "0x400121F")]
		easeInOutQuart,
		[Token(Token = "0x4001220")]
		easeInQuint,
		[Token(Token = "0x4001221")]
		easeOutQuint,
		[Token(Token = "0x4001222")]
		easeInOutQuint,
		[Token(Token = "0x4001223")]
		easeInSine,
		[Token(Token = "0x4001224")]
		easeOutSine,
		[Token(Token = "0x4001225")]
		easeInOutSine,
		[Token(Token = "0x4001226")]
		easeInExpo,
		[Token(Token = "0x4001227")]
		easeOutExpo,
		[Token(Token = "0x4001228")]
		easeInOutExpo,
		[Token(Token = "0x4001229")]
		easeInCirc,
		[Token(Token = "0x400122A")]
		easeOutCirc,
		[Token(Token = "0x400122B")]
		easeInOutCirc,
		[Token(Token = "0x400122C")]
		linear,
		[Token(Token = "0x400122D")]
		spring,
		[Token(Token = "0x400122E")]
		easeInBounce,
		[Token(Token = "0x400122F")]
		easeOutBounce,
		[Token(Token = "0x4001230")]
		easeInOutBounce,
		[Token(Token = "0x4001231")]
		easeInBack,
		[Token(Token = "0x4001232")]
		easeOutBack,
		[Token(Token = "0x4001233")]
		easeInOutBack,
		[Token(Token = "0x4001234")]
		easeInElastic,
		[Token(Token = "0x4001235")]
		easeOutElastic,
		[Token(Token = "0x4001236")]
		easeInOutElastic,
		[Token(Token = "0x4001237")]
		punch
	}

	[Token(Token = "0x20002DA")]
	public enum LoopType
	{
		[Token(Token = "0x4001239")]
		none,
		[Token(Token = "0x400123A")]
		loop,
		[Token(Token = "0x400123B")]
		pingPong
	}

	[Token(Token = "0x20002DB")]
	public enum NamedValueColor
	{
		[Token(Token = "0x400123D")]
		_Color,
		[Token(Token = "0x400123E")]
		_SpecColor,
		[Token(Token = "0x400123F")]
		_Emission,
		[Token(Token = "0x4001240")]
		_ReflectColor
	}

	[Token(Token = "0x20002DC")]
	public static class Defaults
	{
		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float time;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float delay;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static NamedValueColor namedColorValue;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static LoopType loopType;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static EaseType easeType;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static float lookSpeed;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static bool isLocal;

		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static Space space;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static bool orientToPath;

		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static Color color;

		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static float updateTimePercentage;

		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static float updateTime;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static float lookAhead;

		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static bool useRealTime;

		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static Vector3 up;
	}

	[Token(Token = "0x20002DD")]
	private class CRSpline
	{
		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3[] pts;

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0x3776A80", Offset = "0x3776A80", VA = "0x3776A80")]
		public CRSpline(params Vector3[] pts)
		{
		}

		[Token(Token = "0x60015E0")]
		[Address(RVA = "0x3776B14", Offset = "0x3776B14", VA = "0x3776B14")]
		public Vector3 Interp(float t)
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x20002DE")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251958", Offset = "0x1251958")]
	private sealed class <TweenDelay>d__145 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public iTween <>4__this;

		[Token(Token = "0x17000124")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60015E4")]
			[Address(RVA = "0x3776630", Offset = "0x3776630", VA = "0x3776630", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000125")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60015E6")]
			[Address(RVA = "0x3776698", Offset = "0x3776698", VA = "0x3776698", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0x3776520", Offset = "0x3776520", VA = "0x3776520")]
		[DebuggerHidden]
		public <TweenDelay>d__145(int <>1__state)
		{
		}

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0x377654C", Offset = "0x377654C", VA = "0x377654C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0x3776550", Offset = "0x3776550", VA = "0x3776550", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0x3776638", Offset = "0x3776638", VA = "0x3776638", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002DF")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251968", Offset = "0x1251968")]
	private sealed class <TweenRestart>d__147 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public iTween <>4__this;

		[Token(Token = "0x17000126")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60015EA")]
			[Address(RVA = "0x37767B8", Offset = "0x37767B8", VA = "0x37767B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000127")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60015EC")]
			[Address(RVA = "0x3776820", Offset = "0x3776820", VA = "0x3776820", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015E7")]
		[Address(RVA = "0x37766A0", Offset = "0x37766A0", VA = "0x37766A0")]
		[DebuggerHidden]
		public <TweenRestart>d__147(int <>1__state)
		{
		}

		[Token(Token = "0x60015E8")]
		[Address(RVA = "0x37766CC", Offset = "0x37766CC", VA = "0x37766CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60015E9")]
		[Address(RVA = "0x37766D0", Offset = "0x37766D0", VA = "0x37766D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60015EB")]
		[Address(RVA = "0x37767C0", Offset = "0x37767C0", VA = "0x37767C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002E0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251978", Offset = "0x1251978")]
	private sealed class <Start>d__229 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public iTween <>4__this;

		[Token(Token = "0x17000128")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60015F0")]
			[Address(RVA = "0x37764B0", Offset = "0x37764B0", VA = "0x37764B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000129")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60015F2")]
			[Address(RVA = "0x3776518", Offset = "0x3776518", VA = "0x3776518", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015ED")]
		[Address(RVA = "0x37763C8", Offset = "0x37763C8", VA = "0x37763C8")]
		[DebuggerHidden]
		public <Start>d__229(int <>1__state)
		{
		}

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0x37763F4", Offset = "0x37763F4", VA = "0x37763F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60015EF")]
		[Address(RVA = "0x37763F8", Offset = "0x37763F8", VA = "0x37763F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60015F1")]
		[Address(RVA = "0x37764B8", Offset = "0x37764B8", VA = "0x37764B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<Hashtable> tweens;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string id;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string type;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string method;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public EaseType easeType;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float time;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float delay;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public LoopType loopType;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isRunning;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool isPaused;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string _name;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float runningTime;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float percentage;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float delayStarted;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool kinematic;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	private bool isLocal;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
	private bool loop;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
	private bool reverse;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool wasPaused;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool physics;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Hashtable tweenArguments;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Space space;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private EasingFunction ease;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private ApplyTween apply;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private AudioSource audioSource;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3[] vector3s;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector2[] vector2s;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Color[,] colors;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float[] floats;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Rect[] rects;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private CRSpline path;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector3 preUpdate;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private Vector3 postUpdate;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private NamedValueColor namedcolorvalue;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float lastRealTime;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool useRealTime;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Transform thisTransform;

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x274BFF4", Offset = "0x274BFF4", VA = "0x274BFF4")]
	public static void Init(GameObject target)
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x274C2B0", Offset = "0x274C2B0", VA = "0x274C2B0")]
	public static void ValueTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x274D280", Offset = "0x274D280", VA = "0x274D280")]
	public static void FadeFrom(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x274D598", Offset = "0x274D598", VA = "0x274D598")]
	public static void FadeFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x274DFEC", Offset = "0x274DFEC", VA = "0x274DFEC")]
	public static void FadeTo(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x274E1D4", Offset = "0x274E1D4", VA = "0x274E1D4")]
	public static void FadeTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x274E734", Offset = "0x274E734", VA = "0x274E734")]
	public static void ColorFrom(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x274D60C", Offset = "0x274D60C", VA = "0x274D60C")]
	public static void ColorFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x274E948", Offset = "0x274E948", VA = "0x274E948")]
	public static void ColorTo(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x274E248", Offset = "0x274E248", VA = "0x274E248")]
	public static void ColorTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x274EB5C", Offset = "0x274EB5C", VA = "0x274EB5C")]
	public static void AudioFrom(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x274EDDC", Offset = "0x274EDDC", VA = "0x274EDDC")]
	public static void AudioFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x274F1E4", Offset = "0x274F1E4", VA = "0x274F1E4")]
	public static void AudioTo(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x274F464", Offset = "0x274F464", VA = "0x274F464")]
	public static void AudioTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x274F5C0", Offset = "0x274F5C0", VA = "0x274F5C0")]
	public static void Stab(GameObject target, AudioClip audioclip, float delay)
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x274F78C", Offset = "0x274F78C", VA = "0x274F78C")]
	public static void Stab(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x274F83C", Offset = "0x274F83C", VA = "0x274F83C")]
	public static void LookFrom(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x274FA40", Offset = "0x274FA40", VA = "0x274FA40")]
	public static void LookFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x27500A0", Offset = "0x27500A0", VA = "0x27500A0")]
	public static void LookTo(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x27502A4", Offset = "0x27502A4", VA = "0x27502A4")]
	public static void LookTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x27505C4", Offset = "0x27505C4", VA = "0x27505C4")]
	public static void MoveTo(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x27507C8", Offset = "0x27507C8", VA = "0x27507C8")]
	public static void MoveTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x2750B68", Offset = "0x2750B68", VA = "0x2750B68")]
	public static void MoveFrom(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x2750D6C", Offset = "0x2750D6C", VA = "0x2750D6C")]
	public static void MoveFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x275166C", Offset = "0x275166C", VA = "0x275166C")]
	public static void MoveAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x2751870", Offset = "0x2751870", VA = "0x2751870")]
	public static void MoveAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x274C0AC", Offset = "0x274C0AC", VA = "0x274C0AC")]
	public static void MoveBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x275194C", Offset = "0x275194C", VA = "0x275194C")]
	public static void MoveBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x2751A28", Offset = "0x2751A28", VA = "0x2751A28")]
	public static void ScaleTo(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x2751C2C", Offset = "0x2751C2C", VA = "0x2751C2C")]
	public static void ScaleTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x2751FC4", Offset = "0x2751FC4", VA = "0x2751FC4")]
	public static void ScaleFrom(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x27521C8", Offset = "0x27521C8", VA = "0x27521C8")]
	public static void ScaleFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0x2752674", Offset = "0x2752674", VA = "0x2752674")]
	public static void ScaleAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0x2752878", Offset = "0x2752878", VA = "0x2752878")]
	public static void ScaleAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x2752954", Offset = "0x2752954", VA = "0x2752954")]
	public static void ScaleBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x2752B58", Offset = "0x2752B58", VA = "0x2752B58")]
	public static void ScaleBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x2752C34", Offset = "0x2752C34", VA = "0x2752C34")]
	public static void RotateTo(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x2752E38", Offset = "0x2752E38", VA = "0x2752E38")]
	public static void RotateTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x27531D8", Offset = "0x27531D8", VA = "0x27531D8")]
	public static void RotateFrom(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x27533DC", Offset = "0x27533DC", VA = "0x27533DC")]
	public static void RotateFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x2753940", Offset = "0x2753940", VA = "0x2753940")]
	public static void RotateAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x2753B44", Offset = "0x2753B44", VA = "0x2753B44")]
	public static void RotateAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x2753C20", Offset = "0x2753C20", VA = "0x2753C20")]
	public static void RotateBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0x2753E24", Offset = "0x2753E24", VA = "0x2753E24")]
	public static void RotateBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0x2753F00", Offset = "0x2753F00", VA = "0x2753F00")]
	public static void ShakePosition(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0x2754104", Offset = "0x2754104", VA = "0x2754104")]
	public static void ShakePosition(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x27541E0", Offset = "0x27541E0", VA = "0x27541E0")]
	public static void ShakeScale(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x27543E4", Offset = "0x27543E4", VA = "0x27543E4")]
	public static void ShakeScale(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x27544C0", Offset = "0x27544C0", VA = "0x27544C0")]
	public static void ShakeRotation(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x27546C4", Offset = "0x27546C4", VA = "0x27546C4")]
	public static void ShakeRotation(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x27547A0", Offset = "0x27547A0", VA = "0x27547A0")]
	public static void PunchPosition(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x27549A4", Offset = "0x27549A4", VA = "0x27549A4")]
	public static void PunchPosition(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x2754AC4", Offset = "0x2754AC4", VA = "0x2754AC4")]
	public static void PunchRotation(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x2754CC8", Offset = "0x2754CC8", VA = "0x2754CC8")]
	public static void PunchRotation(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x2754DE8", Offset = "0x2754DE8", VA = "0x2754DE8")]
	public static void PunchScale(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x2754FEC", Offset = "0x2754FEC", VA = "0x2754FEC")]
	public static void PunchScale(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x275510C", Offset = "0x275510C", VA = "0x275510C")]
	private void GenerateTargets()
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x27561D0", Offset = "0x27561D0", VA = "0x27561D0")]
	private void GenerateRectTargets()
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x2756058", Offset = "0x2756058", VA = "0x2756058")]
	private void GenerateColorTargets()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x2755DEC", Offset = "0x2755DEC", VA = "0x2755DEC")]
	private void GenerateVector3Targets()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x2755B4C", Offset = "0x2755B4C", VA = "0x2755B4C")]
	private void GenerateVector2Targets()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x275594C", Offset = "0x275594C", VA = "0x275594C")]
	private void GenerateFloatTargets()
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x2756318", Offset = "0x2756318", VA = "0x2756318")]
	private void GenerateColorToTargets()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x2756C98", Offset = "0x2756C98", VA = "0x2756C98")]
	private void GenerateAudioToTargets()
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x275BB48", Offset = "0x275BB48", VA = "0x275BB48")]
	private void GenerateStabTargets()
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x275B310", Offset = "0x275B310", VA = "0x275B310")]
	private void GenerateLookToTargets()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x2756FC0", Offset = "0x2756FC0", VA = "0x2756FC0")]
	private void GenerateMoveToPathTargets()
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x2757714", Offset = "0x2757714", VA = "0x2757714")]
	private void GenerateMoveToTargets()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x2757D64", Offset = "0x2757D64", VA = "0x2757D64")]
	private void GenerateMoveByTargets()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x2758374", Offset = "0x2758374", VA = "0x2758374")]
	private void GenerateScaleToTargets()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x27588D0", Offset = "0x27588D0", VA = "0x27588D0")]
	private void GenerateScaleByTargets()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x2758D38", Offset = "0x2758D38", VA = "0x2758D38")]
	private void GenerateScaleAddTargets()
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x2759194", Offset = "0x2759194", VA = "0x2759194")]
	private void GenerateRotateToTargets()
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x27597C8", Offset = "0x27597C8", VA = "0x27597C8")]
	private void GenerateRotateAddTargets()
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x2759C2C", Offset = "0x2759C2C", VA = "0x2759C2C")]
	private void GenerateRotateByTargets()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x275A0FC", Offset = "0x275A0FC", VA = "0x275A0FC")]
	private void GenerateShakePositionTargets()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x275A3FC", Offset = "0x275A3FC", VA = "0x275A3FC")]
	private void GenerateShakeScaleTargets()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x275A6D0", Offset = "0x275A6D0", VA = "0x275A6D0")]
	private void GenerateShakeRotationTargets()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x275A9A4", Offset = "0x275A9A4", VA = "0x275A9A4")]
	private void GeneratePunchPositionTargets()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x275ACE8", Offset = "0x275ACE8", VA = "0x275ACE8")]
	private void GeneratePunchRotationTargets()
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x275B000", Offset = "0x275B000", VA = "0x275B000")]
	private void GeneratePunchScaleTargets()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x275C264", Offset = "0x275C264", VA = "0x275C264")]
	private void ApplyRectTargets()
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x275C564", Offset = "0x275C564", VA = "0x275C564")]
	private void ApplyColorTargets()
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x275C794", Offset = "0x275C794", VA = "0x275C794")]
	private void ApplyVector3Targets()
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x275C988", Offset = "0x275C988", VA = "0x275C988")]
	private void ApplyVector2Targets()
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x275CB28", Offset = "0x275CB28", VA = "0x275CB28")]
	private void ApplyFloatTargets()
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0x275CC80", Offset = "0x275CC80", VA = "0x275CC80")]
	private void ApplyColorToTargets()
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x275D1E0", Offset = "0x275D1E0", VA = "0x275D1E0")]
	private void ApplyAudioToTargets()
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x275D34C", Offset = "0x275D34C", VA = "0x275D34C")]
	private void ApplyStabTargets()
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x275D350", Offset = "0x275D350", VA = "0x275D350")]
	private void ApplyMoveToPathTargets()
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x275D6B0", Offset = "0x275D6B0", VA = "0x275D6B0")]
	private void ApplyMoveToTargets()
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0x275D8BC", Offset = "0x275D8BC", VA = "0x275D8BC")]
	private void ApplyMoveByTargets()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0x275DBFC", Offset = "0x275DBFC", VA = "0x275DBFC")]
	private void ApplyScaleToTargets()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0x275DD64", Offset = "0x275DD64", VA = "0x275DD64")]
	private void ApplyLookToTargets()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0x275DF3C", Offset = "0x275DF3C", VA = "0x275DF3C")]
	private void ApplyRotateToTargets()
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0x275E26C", Offset = "0x275E26C", VA = "0x275E26C")]
	private void ApplyRotateAddTargets()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0x275E500", Offset = "0x275E500", VA = "0x275E500")]
	private void ApplyShakePositionTargets()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0x275E918", Offset = "0x275E918", VA = "0x275E918")]
	private void ApplyShakeScaleTargets()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0x275EB2C", Offset = "0x275EB2C", VA = "0x275EB2C")]
	private void ApplyShakeRotationTargets()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x275ED9C", Offset = "0x275ED9C", VA = "0x275ED9C")]
	private void ApplyPunchPositionTargets()
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x275F250", Offset = "0x275F250", VA = "0x275F250")]
	private void ApplyPunchRotationTargets()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x275F598", Offset = "0x275F598", VA = "0x275F598")]
	private void ApplyPunchScaleTargets()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x275F7F8", Offset = "0x275F7F8", VA = "0x275F7F8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12608B0", Offset = "0x12608B0")]
	private IEnumerator TweenDelay()
	{
		return null;
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x275F874", Offset = "0x275F874", VA = "0x275F874")]
	private void TweenStart()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x2760208", Offset = "0x2760208", VA = "0x2760208")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1260914", Offset = "0x1260914")]
	private IEnumerator TweenRestart()
	{
		return null;
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x2760284", Offset = "0x2760284", VA = "0x2760284")]
	private void TweenUpdate()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0x2760368", Offset = "0x2760368", VA = "0x2760368")]
	private void TweenComplete()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x2760438", Offset = "0x2760438", VA = "0x2760438")]
	private void TweenLoop()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x27604DC", Offset = "0x27604DC", VA = "0x27604DC")]
	public static Rect RectUpdate(Rect currentValue, Rect targetValue, float speed)
	{
		return default(Rect);
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0x27606A4", Offset = "0x27606A4", VA = "0x27606A4")]
	public static Vector3 Vector3Update(Vector3 currentValue, Vector3 targetValue, float speed)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0x27607B0", Offset = "0x27607B0", VA = "0x27607B0")]
	public static Vector2 Vector2Update(Vector2 currentValue, Vector2 targetValue, float speed)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0x2760664", Offset = "0x2760664", VA = "0x2760664")]
	public static float FloatUpdate(float currentValue, float targetValue, float speed)
	{
		return default(float);
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0x2760894", Offset = "0x2760894", VA = "0x2760894")]
	public static void FadeUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0x2761310", Offset = "0x2761310", VA = "0x2761310")]
	public static void FadeUpdate(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0x2760954", Offset = "0x2760954", VA = "0x2760954")]
	public static void ColorUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0x27614F8", Offset = "0x27614F8", VA = "0x27614F8")]
	public static void ColorUpdate(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0x276170C", Offset = "0x276170C", VA = "0x276170C")]
	public static void AudioUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x2761BBC", Offset = "0x2761BBC", VA = "0x2761BBC")]
	public static void AudioUpdate(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x2761E3C", Offset = "0x2761E3C", VA = "0x2761E3C")]
	public static void RotateUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0x2762464", Offset = "0x2762464", VA = "0x2762464")]
	public static void RotateUpdate(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x2762668", Offset = "0x2762668", VA = "0x2762668")]
	public static void ScaleUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x2762C50", Offset = "0x2762C50", VA = "0x2762C50")]
	public static void ScaleUpdate(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x2762E54", Offset = "0x2762E54", VA = "0x2762E54")]
	public static void MoveUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x2763FC4", Offset = "0x2763FC4", VA = "0x2763FC4")]
	public static void MoveUpdate(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x27636B8", Offset = "0x27636B8", VA = "0x27636B8")]
	public static void LookUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x27641C8", Offset = "0x27641C8", VA = "0x27641C8")]
	public static void LookUpdate(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x27643CC", Offset = "0x27643CC", VA = "0x27643CC")]
	public static float PathLength(Transform[] path)
	{
		return default(float);
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x275C0EC", Offset = "0x275C0EC", VA = "0x275C0EC")]
	public static float PathLength(Vector3[] path)
	{
		return default(float);
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x2764CB0", Offset = "0x2764CB0", VA = "0x2764CB0")]
	public static void PutOnPath(GameObject target, Vector3[] path, float percent)
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x2764D60", Offset = "0x2764D60", VA = "0x2764D60")]
	public static void PutOnPath(Transform target, Vector3[] path, float percent)
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0x2764DF8", Offset = "0x2764DF8", VA = "0x2764DF8")]
	public static void PutOnPath(GameObject target, Transform[] path, float percent)
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0x2764F30", Offset = "0x2764F30", VA = "0x2764F30")]
	public static void PutOnPath(Transform target, Transform[] path, float percent)
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0x2765050", Offset = "0x2765050", VA = "0x2765050")]
	public static Vector3 PointOnPath(Transform[] path, float percent)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0x276515C", Offset = "0x276515C", VA = "0x276515C")]
	public static void DrawLine(Vector3[] line)
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0x27653C0", Offset = "0x27653C0", VA = "0x27653C0")]
	public static void DrawLine(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0x2765484", Offset = "0x2765484", VA = "0x2765484")]
	public static void DrawLine(Transform[] line)
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0x27655F8", Offset = "0x27655F8", VA = "0x27655F8")]
	public static void DrawLine(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x276574C", Offset = "0x276574C", VA = "0x276574C")]
	public static void DrawLineGizmos(Vector3[] line)
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0x2765830", Offset = "0x2765830", VA = "0x2765830")]
	public static void DrawLineGizmos(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0x27658F4", Offset = "0x27658F4", VA = "0x27658F4")]
	public static void DrawLineGizmos(Transform[] line)
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0x2765A68", Offset = "0x2765A68", VA = "0x2765A68")]
	public static void DrawLineGizmos(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0x2765BBC", Offset = "0x2765BBC", VA = "0x2765BBC")]
	public static void DrawLineHandles(Vector3[] line)
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0x2765CA0", Offset = "0x2765CA0", VA = "0x2765CA0")]
	public static void DrawLineHandles(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0x2765D64", Offset = "0x2765D64", VA = "0x2765D64")]
	public static void DrawLineHandles(Transform[] line)
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0x2765ED8", Offset = "0x2765ED8", VA = "0x2765ED8")]
	public static void DrawLineHandles(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0x276602C", Offset = "0x276602C", VA = "0x276602C")]
	public static Vector3 PointOnPath(Vector3[] path, float percent)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0x27660A4", Offset = "0x27660A4", VA = "0x27660A4")]
	public static void DrawPath(Vector3[] path)
	{
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0x276637C", Offset = "0x276637C", VA = "0x276637C")]
	public static void DrawPath(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0x2766440", Offset = "0x2766440", VA = "0x2766440")]
	public static void DrawPath(Transform[] path)
	{
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0x27665B4", Offset = "0x27665B4", VA = "0x27665B4")]
	public static void DrawPath(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0x2766708", Offset = "0x2766708", VA = "0x2766708")]
	public static void DrawPathGizmos(Vector3[] path)
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0x27667EC", Offset = "0x27667EC", VA = "0x27667EC")]
	public static void DrawPathGizmos(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0x27668B0", Offset = "0x27668B0", VA = "0x27668B0")]
	public static void DrawPathGizmos(Transform[] path)
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0x2766A24", Offset = "0x2766A24", VA = "0x2766A24")]
	public static void DrawPathGizmos(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0x2766B78", Offset = "0x2766B78", VA = "0x2766B78")]
	public static void DrawPathHandles(Vector3[] path)
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x2766C5C", Offset = "0x2766C5C", VA = "0x2766C5C")]
	public static void DrawPathHandles(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x2766D20", Offset = "0x2766D20", VA = "0x2766D20")]
	public static void DrawPathHandles(Transform[] path)
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0x2766E94", Offset = "0x2766E94", VA = "0x2766E94")]
	public static void DrawPathHandles(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0x2766FE8", Offset = "0x2766FE8", VA = "0x2766FE8")]
	public static void Resume(GameObject target)
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0x27670D8", Offset = "0x27670D8", VA = "0x27670D8")]
	public static void Resume(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x2767384", Offset = "0x2767384", VA = "0x2767384")]
	public static void Resume(GameObject target, string type)
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x27674DC", Offset = "0x27674DC", VA = "0x27674DC")]
	public static void Resume(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x2767878", Offset = "0x2767878", VA = "0x2767878")]
	public static void Resume()
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x2767998", Offset = "0x2767998", VA = "0x2767998")]
	public static void Resume(string type)
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0x2767BC8", Offset = "0x2767BC8", VA = "0x2767BC8")]
	public static void Pause(GameObject target)
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0x2767D14", Offset = "0x2767D14", VA = "0x2767D14")]
	public static void Pause(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0x2767FC0", Offset = "0x2767FC0", VA = "0x2767FC0")]
	public static void Pause(GameObject target, string type)
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0x276816C", Offset = "0x276816C", VA = "0x276816C")]
	public static void Pause(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x276855C", Offset = "0x276855C", VA = "0x276855C")]
	public static void Pause()
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x276867C", Offset = "0x276867C", VA = "0x276867C")]
	public static void Pause(string type)
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x27688AC", Offset = "0x27688AC", VA = "0x27688AC")]
	public static int Count()
	{
		return default(int);
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x2768920", Offset = "0x2768920", VA = "0x2768920")]
	public static int Count(string type)
	{
		return default(int);
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x2768AFC", Offset = "0x2768AFC", VA = "0x2768AFC")]
	public static int Count(GameObject target)
	{
		return default(int);
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x2768B60", Offset = "0x2768B60", VA = "0x2768B60")]
	public static int Count(GameObject target, string type)
	{
		return default(int);
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x2768CBC", Offset = "0x2768CBC", VA = "0x2768CBC")]
	public static void Stop()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0x2768F68", Offset = "0x2768F68", VA = "0x2768F68")]
	public static void Stop(string type)
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0x27692E8", Offset = "0x27692E8", VA = "0x27692E8")]
	public static void StopByName(string name)
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0x2768E0C", Offset = "0x2768E0C", VA = "0x2768E0C")]
	public static void Stop(GameObject target)
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x2769628", Offset = "0x2769628", VA = "0x2769628")]
	public static void Stop(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0x2769198", Offset = "0x2769198", VA = "0x2769198")]
	public static void Stop(GameObject target, string type)
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0x2769518", Offset = "0x2769518", VA = "0x2769518")]
	public static void StopByName(GameObject target, string name)
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x27698D4", Offset = "0x27698D4", VA = "0x27698D4")]
	public static void Stop(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x2769C68", Offset = "0x2769C68", VA = "0x2769C68")]
	public static void StopByName(GameObject target, string name, bool includechildren)
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x274D468", Offset = "0x274D468", VA = "0x274D468")]
	public static Hashtable Hash(params object[] args)
	{
		return null;
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x2769FBC", Offset = "0x2769FBC", VA = "0x2769FBC")]
	private iTween(Hashtable h)
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x2769FF0", Offset = "0x2769FF0", VA = "0x2769FF0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x276B0BC", Offset = "0x276B0BC", VA = "0x276B0BC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1260978", Offset = "0x1260978")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x276B138", Offset = "0x276B138", VA = "0x276B138")]
	private void Update()
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x276B178", Offset = "0x276B178", VA = "0x276B178")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0x276B1B8", Offset = "0x276B1B8", VA = "0x276B1B8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x276B2CC", Offset = "0x276B2CC", VA = "0x276B2CC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x276B348", Offset = "0x276B348", VA = "0x276B348")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x2765240", Offset = "0x2765240", VA = "0x2765240")]
	private static void DrawLineHelper(Vector3[] line, Color color, string method)
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x2766188", Offset = "0x2766188", VA = "0x2766188")]
	private static void DrawPathHelper(Vector3[] path, Color color, string method)
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0x27645C0", Offset = "0x27645C0", VA = "0x27645C0")]
	private static Vector3[] PathControlPointGenerator(Vector3[] path)
	{
		return null;
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0x2764884", Offset = "0x2764884", VA = "0x2764884")]
	private static Vector3 Interp(Vector3[] pts, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0x274D12C", Offset = "0x274D12C", VA = "0x274D12C")]
	private static void Launch(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0x274C78C", Offset = "0x274C78C", VA = "0x274C78C")]
	private static Hashtable CleanArgs(Hashtable args)
	{
		return null;
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0x276B34C", Offset = "0x276B34C", VA = "0x276B34C")]
	private static string GenerateID()
	{
		return null;
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0x276A038", Offset = "0x276A038", VA = "0x276A038")]
	private void RetrieveArgs()
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0x276B3CC", Offset = "0x276B3CC", VA = "0x276B3CC")]
	private void GetEasingFunction()
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0x27602F0", Offset = "0x27602F0", VA = "0x27602F0")]
	private void UpdatePercentage()
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x275F9EC", Offset = "0x275F9EC", VA = "0x275F9EC")]
	private void CallBack(string callbackType)
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x275BE7C", Offset = "0x275BE7C", VA = "0x275BE7C")]
	private void Dispose()
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x275FCC4", Offset = "0x275FCC4", VA = "0x275FCC4")]
	private void ConflictCheck()
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0x2760204", Offset = "0x2760204", VA = "0x2760204")]
	private void EnableKinematic()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x27604D8", Offset = "0x27604D8", VA = "0x27604D8")]
	private void DisableKinematic()
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x276B2F4", Offset = "0x276B2F4", VA = "0x276B2F4")]
	private void ResumeDelay()
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0x276B7D4", Offset = "0x276B7D4", VA = "0x276B7D4")]
	private float linear(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0x275C018", Offset = "0x275C018", VA = "0x275C018")]
	private float clerp(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0x276B85C", Offset = "0x276B85C", VA = "0x276B85C")]
	private float spring(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0x276B960", Offset = "0x276B960", VA = "0x276B960")]
	private float easeInQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0x276B974", Offset = "0x276B974", VA = "0x276B974")]
	private float easeOutQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0x276B990", Offset = "0x276B990", VA = "0x276B990")]
	private float easeInOutQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x276B9E4", Offset = "0x276B9E4", VA = "0x276B9E4")]
	private float easeInCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x276B9FC", Offset = "0x276B9FC", VA = "0x276B9FC")]
	private float easeOutCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0x276BA24", Offset = "0x276BA24", VA = "0x276BA24")]
	private float easeInOutCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0x276BA7C", Offset = "0x276BA7C", VA = "0x276BA7C")]
	private float easeInQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0x276BA98", Offset = "0x276BA98", VA = "0x276BA98")]
	private float easeOutQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0x276BAC0", Offset = "0x276BAC0", VA = "0x276BAC0")]
	private float easeInOutQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0x276BB1C", Offset = "0x276BB1C", VA = "0x276BB1C")]
	private float easeInQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0x276BB3C", Offset = "0x276BB3C", VA = "0x276BB3C")]
	private float easeOutQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0x276BB6C", Offset = "0x276BB6C", VA = "0x276BB6C")]
	private float easeInOutQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0x276BBD4", Offset = "0x276BBD4", VA = "0x276BBD4")]
	private float easeInSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0x276BC6C", Offset = "0x276BC6C", VA = "0x276BC6C")]
	private float easeOutSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0x276BD00", Offset = "0x276BD00", VA = "0x276BD00")]
	private float easeInOutSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0x276BDA4", Offset = "0x276BDA4", VA = "0x276BDA4")]
	private float easeInExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0x276BE3C", Offset = "0x276BE3C", VA = "0x276BE3C")]
	private float easeOutExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0x276BED4", Offset = "0x276BED4", VA = "0x276BED4")]
	private float easeInOutExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0x276BFC4", Offset = "0x276BFC4", VA = "0x276BFC4")]
	private float easeInCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x276C070", Offset = "0x276C070", VA = "0x276C070")]
	private float easeOutCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0x276C11C", Offset = "0x276C11C", VA = "0x276C11C")]
	private float easeInOutCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0x276C214", Offset = "0x276C214", VA = "0x276C214")]
	private float easeInBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0x276C250", Offset = "0x276C250", VA = "0x276C250")]
	private float easeOutBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0x276C31C", Offset = "0x276C31C", VA = "0x276C31C")]
	private float easeInOutBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0x276C3A0", Offset = "0x276C3A0", VA = "0x276C3A0")]
	private float easeInBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x276C3D0", Offset = "0x276C3D0", VA = "0x276C3D0")]
	private float easeOutBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0x276C410", Offset = "0x276C410", VA = "0x276C410")]
	private float easeInOutBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0x275F190", Offset = "0x275F190", VA = "0x275F190")]
	private float punch(float amplitude, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x276C494", Offset = "0x276C494", VA = "0x276C494")]
	private float easeInElastic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0x276C57C", Offset = "0x276C57C", VA = "0x276C57C")]
	private float easeOutElastic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0x276C660", Offset = "0x276C660", VA = "0x276C660")]
	private float easeInOutElastic(float start, float end, float value)
	{
		return default(float);
	}
}
[Token(Token = "0x200000A")]
[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x124D90C", Offset = "0x124D90C")]
public class PlaystationRegionManager : ScriptableObject
{
	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PlaystationRegionManager _instance;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlaystationRegionData[] regionsToBuild;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PlaystationRegionData USRegionData;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PlaystationRegionData EURegionData;

	[Token(Token = "0x17000002")]
	public static PlaystationRegionManager Instance
	{
		[Token(Token = "0x6000185")]
		[Address(RVA = "0x2712BF0", Offset = "0x2712BF0", VA = "0x2712BF0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0x2712D10", Offset = "0x2712D10", VA = "0x2712D10")]
	public PlaystationRegionManager()
	{
	}
}
[Token(Token = "0x200000B")]
public class Skeleton : MonoBehaviour
{
	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator animator;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PuppetMaster puppetMaster;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ConfigurableJoint[] leftLeg;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ConfigurableJoint[] rightLeg;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool leftLegRemoved;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool rightLegRemoved;

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x23E6AAC", Offset = "0x23E6AAC", VA = "0x23E6AAC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0x23E6B74", Offset = "0x23E6B74", VA = "0x23E6B74")]
	public void OnRebuild()
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0x23E6BE0", Offset = "0x23E6BE0", VA = "0x23E6BE0")]
	private void OnMuscleRemoved(Muscle m)
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0x23E6CA8", Offset = "0x23E6CA8", VA = "0x23E6CA8")]
	private bool IsLegMuscle(Muscle m, out bool isLeft)
	{
		return default(bool);
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0x23E6E30", Offset = "0x23E6E30", VA = "0x23E6E30")]
	public Skeleton()
	{
	}
}
[Token(Token = "0x200000C")]
[DisallowMultipleComponent]
public class SteamManager : MonoBehaviour
{
	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject loadScreen1;

	[Token(Token = "0x600018D")]
	[Address(RVA = "0x23E6E38", Offset = "0x23E6E38", VA = "0x23E6E38")]
	private void Awake()
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0x23E6EB4", Offset = "0x23E6EB4", VA = "0x23E6EB4")]
	public SteamManager()
	{
	}
}
[Token(Token = "0x200000D")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x124D97C", Offset = "0x124D97C")]
public class MouseLook : MonoBehaviour
{
	[Token(Token = "0x20002E1")]
	public enum RotationAxes
	{
		[Token(Token = "0x400125B")]
		MouseXAndY,
		[Token(Token = "0x400125C")]
		MouseX,
		[Token(Token = "0x400125D")]
		MouseY
	}

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RotationAxes axes;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float sensitivityX;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float sensitivityY;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float minimumX;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maximumX;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minimumY;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maximumY;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float rotationY;

	[Token(Token = "0x600018F")]
	[Address(RVA = "0x1DBBD64", Offset = "0x1DBBD64", VA = "0x1DBBD64")]
	private void Update()
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0x1DBBFC4", Offset = "0x1DBBFC4", VA = "0x1DBBFC4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0x1DBC084", Offset = "0x1DBC084", VA = "0x1DBC084")]
	public MouseLook()
	{
	}
}
[Token(Token = "0x200000E")]
public class AlphaButtonClickMask : MonoBehaviour, ICanvasRaycastFilter
{
	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Image _image;

	[Token(Token = "0x6000192")]
	[Address(RVA = "0x1DAD3E0", Offset = "0x1DAD3E0", VA = "0x1DAD3E0")]
	public void Start()
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x1DAD5A0", Offset = "0x1DAD5A0", VA = "0x1DAD5A0", Slot = "4")]
	public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
	{
		return default(bool);
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0x1DAD8AC", Offset = "0x1DAD8AC", VA = "0x1DAD8AC")]
	public AlphaButtonClickMask()
	{
	}
}
[Token(Token = "0x200000F")]
public class EventSystemChecker : MonoBehaviour
{
	[Token(Token = "0x6000195")]
	[Address(RVA = "0x1DBBB88", Offset = "0x1DBBB88", VA = "0x1DBBB88")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0x1DBBC64", Offset = "0x1DBBC64", VA = "0x1DBBC64")]
	public EventSystemChecker()
	{
	}
}
namespace UnityStandardAssets.CinematicEffects
{
	[Token(Token = "0x2000010")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x124D9B4", Offset = "0x124D9B4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x124D9B4", Offset = "0x124D9B4")]
	[ImageEffectAllowedInSceneView]
	public class AntiAliasing : MonoBehaviour
	{
		[Token(Token = "0x20002E2")]
		public enum Method
		{
			[Token(Token = "0x400125F")]
			Smaa,
			[Token(Token = "0x4001260")]
			Fxaa
		}

		[Token(Token = "0x400003D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SMAA m_SMAA;

		[Token(Token = "0x400003E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private FXAA m_FXAA;

		[Token(Token = "0x400003F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private int m_Method;

		[Token(Token = "0x4000040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Camera m_Camera;

		[Token(Token = "0x17000003")]
		public int method
		{
			[Token(Token = "0x6000197")]
			[Address(RVA = "0x2B26614", Offset = "0x2B26614", VA = "0x2B26614")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000198")]
			[Address(RVA = "0x2B2661C", Offset = "0x2B2661C", VA = "0x2B2661C")]
			set
			{
			}
		}

		[Token(Token = "0x17000004")]
		public IAntiAliasing current
		{
			[Token(Token = "0x6000199")]
			[Address(RVA = "0x2B26630", Offset = "0x2B26630", VA = "0x2B26630")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000005")]
		public Camera cameraComponent
		{
			[Token(Token = "0x600019A")]
			[Address(RVA = "0x2B26648", Offset = "0x2B26648", VA = "0x2B26648")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600019B")]
		[Address(RVA = "0x2B266F4", Offset = "0x2B266F4", VA = "0x2B266F4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600019C")]
		[Address(RVA = "0x2B267D8", Offset = "0x2B267D8", VA = "0x2B267D8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600019D")]
		[Address(RVA = "0x2B269E0", Offset = "0x2B269E0", VA = "0x2B269E0")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x600019E")]
		[Address(RVA = "0x2B26AB4", Offset = "0x2B26AB4", VA = "0x2B26AB4")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x600019F")]
		[Address(RVA = "0x2B26B88", Offset = "0x2B26B88", VA = "0x2B26B88")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001A0")]
		[Address(RVA = "0x2B26C74", Offset = "0x2B26C74", VA = "0x2B26C74")]
		public AntiAliasing()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000011")]
	public class FXAA : IAntiAliasing
	{
		[Serializable]
		[Token(Token = "0x20002E3")]
		public struct QualitySettings
		{
			[Token(Token = "0x4001261")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B3B0", Offset = "0x125B3B0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125B3B0", Offset = "0x125B3B0")]
			public float subpixelAliasingRemovalAmount;

			[Token(Token = "0x4001262")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B404", Offset = "0x125B404")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125B404", Offset = "0x125B404")]
			public float edgeDetectionThreshold;

			[Token(Token = "0x4001263")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B460", Offset = "0x125B460")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125B460", Offset = "0x125B460")]
			public float minimumRequiredLuminance;
		}

		[Serializable]
		[Token(Token = "0x20002E4")]
		public struct ConsoleSettings
		{
			[Token(Token = "0x4001264")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B4B8", Offset = "0x125B4B8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125B4B8", Offset = "0x125B4B8")]
			public float subpixelSpreadAmount;

			[Token(Token = "0x4001265")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B510", Offset = "0x125B510")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125B510", Offset = "0x125B510")]
			public float edgeSharpnessAmount;

			[Token(Token = "0x4001266")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B564", Offset = "0x125B564")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125B564", Offset = "0x125B564")]
			public float edgeDetectionThreshold;

			[Token(Token = "0x4001267")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B5B8", Offset = "0x125B5B8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125B5B8", Offset = "0x125B5B8")]
			public float minimumRequiredLuminance;
		}

		[Serializable]
		[Token(Token = "0x20002E5")]
		public struct Preset
		{
			[Token(Token = "0x200042C")]
			[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x12521D8", Offset = "0x12521D8")]
			public class LayoutAttribute : PropertyAttribute
			{
				[Token(Token = "0x60019FB")]
				[Address(RVA = "0x2B27B74", Offset = "0x2B27B74", VA = "0x2B27B74")]
				public LayoutAttribute()
				{
				}
			}

			[Token(Token = "0x4001268")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Layout]
			public QualitySettings qualitySettings;

			[Token(Token = "0x4001269")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Layout]
			public ConsoleSettings consoleSettings;

			[Token(Token = "0x400126A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly Preset s_ExtremePerformance;

			[Token(Token = "0x400126B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private static readonly Preset s_Performance;

			[Token(Token = "0x400126C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private static readonly Preset s_Default;

			[Token(Token = "0x400126D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private static readonly Preset s_Quality;

			[Token(Token = "0x400126E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private static readonly Preset s_ExtremeQuality;

			[Token(Token = "0x1700012A")]
			public static Preset extremePerformancePreset
			{
				[Token(Token = "0x60015F3")]
				[Address(RVA = "0x2B27820", Offset = "0x2B27820", VA = "0x2B27820")]
				get
				{
					return default(Preset);
				}
			}

			[Token(Token = "0x1700012B")]
			public static Preset performancePreset
			{
				[Token(Token = "0x60015F4")]
				[Address(RVA = "0x2B27898", Offset = "0x2B27898", VA = "0x2B27898")]
				get
				{
					return default(Preset);
				}
			}

			[Token(Token = "0x1700012C")]
			public static Preset defaultPreset
			{
				[Token(Token = "0x60015F5")]
				[Address(RVA = "0x2B27910", Offset = "0x2B27910", VA = "0x2B27910")]
				get
				{
					return default(Preset);
				}
			}

			[Token(Token = "0x1700012D")]
			public static Preset qualityPreset
			{
				[Token(Token = "0x60015F6")]
				[Address(RVA = "0x2B27988", Offset = "0x2B27988", VA = "0x2B27988")]
				get
				{
					return default(Preset);
				}
			}

			[Token(Token = "0x1700012E")]
			public static Preset extremeQualityPreset
			{
				[Token(Token = "0x60015F7")]
				[Address(RVA = "0x2B27A00", Offset = "0x2B27A00", VA = "0x2B27A00")]
				get
				{
					return default(Preset);
				}
			}
		}

		[Token(Token = "0x4000041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Shader m_Shader;

		[Token(Token = "0x4000042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material m_Material;

		[Token(Token = "0x4000043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		public Preset preset;

		[Token(Token = "0x4000044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Preset[] availablePresets;

		[Token(Token = "0x4000045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125227C", Offset = "0x125227C")]
		private bool <validSourceFormat>k__BackingField;

		[Token(Token = "0x17000006")]
		private Shader shader
		{
			[Token(Token = "0x60001A1")]
			[Address(RVA = "0x2B26EB0", Offset = "0x2B26EB0", VA = "0x2B26EB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000007")]
		public Material material
		{
			[Token(Token = "0x60001A2")]
			[Address(RVA = "0x2B26F50", Offset = "0x2B26F50", VA = "0x2B26F50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000008")]
		public bool validSourceFormat
		{
			[Token(Token = "0x60001A3")]
			[Address(RVA = "0x2B270C0", Offset = "0x2B270C0", VA = "0x2B270C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12609DC", Offset = "0x12609DC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60001A4")]
			[Address(RVA = "0x2B270C8", Offset = "0x2B270C8", VA = "0x2B270C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12609EC", Offset = "0x12609EC")]
			private set
			{
			}
		}

		[Token(Token = "0x60001A5")]
		[Address(RVA = "0x2B26784", Offset = "0x2B26784", VA = "0x2B26784", Slot = "4")]
		public void OnEnable(AntiAliasing owner)
		{
		}

		[Token(Token = "0x60001A6")]
		[Address(RVA = "0x2B2692C", Offset = "0x2B2692C", VA = "0x2B2692C", Slot = "5")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60001A7")]
		[Address(RVA = "0x2B273C0", Offset = "0x2B273C0", VA = "0x2B273C0", Slot = "6")]
		public void OnPreCull(Camera camera)
		{
		}

		[Token(Token = "0x60001A8")]
		[Address(RVA = "0x2B273C4", Offset = "0x2B273C4", VA = "0x2B273C4", Slot = "7")]
		public void OnPostRender(Camera camera)
		{
		}

		[Token(Token = "0x60001A9")]
		[Address(RVA = "0x2B273C8", Offset = "0x2B273C8", VA = "0x2B273C8", Slot = "8")]
		public void OnRenderImage(Camera camera, RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001AA")]
		[Address(RVA = "0x2B26DE4", Offset = "0x2B26DE4", VA = "0x2B26DE4")]
		public FXAA()
		{
		}
	}
	[Token(Token = "0x2000012")]
	public interface IAntiAliasing
	{
		[Token(Token = "0x60001AC")]
		void OnEnable(AntiAliasing owner);

		[Token(Token = "0x60001AD")]
		void OnDisable();

		[Token(Token = "0x60001AE")]
		void OnPreCull(Camera camera);

		[Token(Token = "0x60001AF")]
		void OnPostRender(Camera camera);

		[Token(Token = "0x60001B0")]
		void OnRenderImage(Camera camera, RenderTexture source, RenderTexture destination);
	}
	[Serializable]
	[Token(Token = "0x2000013")]
	public class SMAA : IAntiAliasing
	{
		[Token(Token = "0x20002E6")]
		[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x1251988", Offset = "0x1251988")]
		public class SettingsGroup : Attribute
		{
			[Token(Token = "0x60015F9")]
			[Address(RVA = "0x2B29D80", Offset = "0x2B29D80", VA = "0x2B29D80")]
			public SettingsGroup()
			{
			}
		}

		[Token(Token = "0x20002E7")]
		[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x125199C", Offset = "0x125199C")]
		public class TopLevelSettings : Attribute
		{
			[Token(Token = "0x60015FA")]
			[Address(RVA = "0x2B29D90", Offset = "0x2B29D90", VA = "0x2B29D90")]
			public TopLevelSettings()
			{
			}
		}

		[Token(Token = "0x20002E8")]
		[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x12519B0", Offset = "0x12519B0")]
		public class ExperimentalGroup : Attribute
		{
			[Token(Token = "0x60015FB")]
			[Address(RVA = "0x2B29C5C", Offset = "0x2B29C5C", VA = "0x2B29C5C")]
			public ExperimentalGroup()
			{
			}
		}

		[Token(Token = "0x20002E9")]
		public enum DebugPass
		{
			[Token(Token = "0x4001270")]
			Off,
			[Token(Token = "0x4001271")]
			Edges,
			[Token(Token = "0x4001272")]
			Weights,
			[Token(Token = "0x4001273")]
			Accumulation
		}

		[Token(Token = "0x20002EA")]
		public enum QualityPreset
		{
			[Token(Token = "0x4001275")]
			Low,
			[Token(Token = "0x4001276")]
			Medium,
			[Token(Token = "0x4001277")]
			High,
			[Token(Token = "0x4001278")]
			Ultra,
			[Token(Token = "0x4001279")]
			Custom
		}

		[Token(Token = "0x20002EB")]
		public enum EdgeDetectionMethod
		{
			[Token(Token = "0x400127B")]
			Luma = 1,
			[Token(Token = "0x400127C")]
			Color,
			[Token(Token = "0x400127D")]
			Depth
		}

		[Serializable]
		[Token(Token = "0x20002EC")]
		public struct GlobalSettings
		{
			[Token(Token = "0x400127E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B634", Offset = "0x125B634")]
			public DebugPass debugPass;

			[Token(Token = "0x400127F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B66C", Offset = "0x125B66C")]
			public QualityPreset quality;

			[Token(Token = "0x4001280")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B6A4", Offset = "0x125B6A4")]
			public EdgeDetectionMethod edgeDetectionMethod;

			[Token(Token = "0x1700012F")]
			public static GlobalSettings defaultSettings
			{
				[Token(Token = "0x60015FC")]
				[Address(RVA = "0x2B29C30", Offset = "0x2B29C30", VA = "0x2B29C30")]
				get
				{
					return default(GlobalSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20002ED")]
		public struct QualitySettings
		{
			[Token(Token = "0x4001281")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B6DC", Offset = "0x125B6DC")]
			public bool diagonalDetection;

			[Token(Token = "0x4001282")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B714", Offset = "0x125B714")]
			public bool cornerDetection;

			[Token(Token = "0x4001283")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125B74C", Offset = "0x125B74C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B74C", Offset = "0x125B74C")]
			public float threshold;

			[Token(Token = "0x4001284")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x125B7A0", Offset = "0x125B7A0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B7A0", Offset = "0x125B7A0")]
			public float depthThreshold;

			[Token(Token = "0x4001285")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125B7F4", Offset = "0x125B7F4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B7F4", Offset = "0x125B7F4")]
			public int maxSearchSteps;

			[Token(Token = "0x4001286")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125B84C", Offset = "0x125B84C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B84C", Offset = "0x125B84C")]
			public int maxDiagonalSearchSteps;

			[Token(Token = "0x4001287")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125B8A0", Offset = "0x125B8A0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B8A0", Offset = "0x125B8A0")]
			public int cornerRounding;

			[Token(Token = "0x4001288")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x125B8F8", Offset = "0x125B8F8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B8F8", Offset = "0x125B8F8")]
			public float localContrastAdaptationFactor;

			[Token(Token = "0x4001289")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static QualitySettings[] presetQualitySettings;
		}

		[Serializable]
		[Token(Token = "0x20002EE")]
		public struct TemporalSettings
		{
			[Token(Token = "0x400128A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B948", Offset = "0x125B948")]
			public bool enabled;

			[Token(Token = "0x400128B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125B980", Offset = "0x125B980")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B980", Offset = "0x125B980")]
			public float fuzzSize;

			[Token(Token = "0x17000130")]
			public static TemporalSettings defaultSettings
			{
				[Token(Token = "0x60015FF")]
				[Address(RVA = "0x2B29C54", Offset = "0x2B29C54", VA = "0x2B29C54")]
				get
				{
					return default(TemporalSettings);
				}
			}

			[Token(Token = "0x60015FE")]
			[Address(RVA = "0x2B29D88", Offset = "0x2B29D88", VA = "0x2B29D88")]
			public bool UseTemporal()
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x20002EF")]
		public struct PredicationSettings
		{
			[Token(Token = "0x400128C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125B9D4", Offset = "0x125B9D4")]
			public bool enabled;

			[Token(Token = "0x400128D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x125BA0C", Offset = "0x125BA0C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BA0C", Offset = "0x125BA0C")]
			public float threshold;

			[Token(Token = "0x400128E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125BA60", Offset = "0x125BA60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BA60", Offset = "0x125BA60")]
			public float scale;

			[Token(Token = "0x400128F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125BAB4", Offset = "0x125BAB4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BAB4", Offset = "0x125BAB4")]
			public float strength;

			[Token(Token = "0x17000131")]
			public static PredicationSettings defaultSettings
			{
				[Token(Token = "0x6001600")]
				[Address(RVA = "0x2B29C3C", Offset = "0x2B29C3C", VA = "0x2B29C3C")]
				get
				{
					return default(PredicationSettings);
				}
			}
		}

		[Token(Token = "0x4000046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[TopLevelSettings]
		public GlobalSettings settings;

		[Token(Token = "0x4000047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SettingsGroup]
		public QualitySettings quality;

		[Token(Token = "0x4000048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SettingsGroup]
		public PredicationSettings predication;

		[Token(Token = "0x4000049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SettingsGroup]
		[ExperimentalGroup]
		public TemporalSettings temporal;

		[Token(Token = "0x400004A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Matrix4x4 m_ProjectionMatrix;

		[Token(Token = "0x400004B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Matrix4x4 m_PreviousViewProjectionMatrix;

		[Token(Token = "0x400004C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float m_FlipFlop;

		[Token(Token = "0x400004D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RenderTexture m_Accumulation;

		[Token(Token = "0x400004E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Shader m_Shader;

		[Token(Token = "0x400004F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Texture2D m_AreaTexture;

		[Token(Token = "0x4000050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Texture2D m_SearchTexture;

		[Token(Token = "0x4000051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Material m_Material;

		[Token(Token = "0x17000009")]
		public Shader shader
		{
			[Token(Token = "0x60001B1")]
			[Address(RVA = "0x2B28D58", Offset = "0x2B28D58", VA = "0x2B28D58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000A")]
		private Texture2D areaTexture
		{
			[Token(Token = "0x60001B2")]
			[Address(RVA = "0x2B28DF8", Offset = "0x2B28DF8", VA = "0x2B28DF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000B")]
		private Texture2D searchTexture
		{
			[Token(Token = "0x60001B3")]
			[Address(RVA = "0x2B28EA0", Offset = "0x2B28EA0", VA = "0x2B28EA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000C")]
		private Material material
		{
			[Token(Token = "0x60001B4")]
			[Address(RVA = "0x2B28F48", Offset = "0x2B28F48", VA = "0x2B28F48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001B5")]
		[Address(RVA = "0x2B26730", Offset = "0x2B26730", VA = "0x2B26730", Slot = "4")]
		public void OnEnable(AntiAliasing owner)
		{
		}

		[Token(Token = "0x60001B6")]
		[Address(RVA = "0x2B2680C", Offset = "0x2B2680C", VA = "0x2B2680C", Slot = "5")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60001B7")]
		[Address(RVA = "0x2B28FEC", Offset = "0x2B28FEC", VA = "0x2B28FEC", Slot = "6")]
		public void OnPreCull(Camera camera)
		{
		}

		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x2B29198", Offset = "0x2B29198", VA = "0x2B29198", Slot = "7")]
		public void OnPostRender(Camera camera)
		{
		}

		[Token(Token = "0x60001B9")]
		[Address(RVA = "0x2B291C0", Offset = "0x2B291C0", VA = "0x2B291C0", Slot = "8")]
		public void OnRenderImage(Camera camera, RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x2B29C18", Offset = "0x2B29C18", VA = "0x2B29C18")]
		private RenderTexture TempRT(int width, int height, RenderTextureFormat format)
		{
			return null;
		}

		[Token(Token = "0x60001BB")]
		[Address(RVA = "0x2B26D0C", Offset = "0x2B26D0C", VA = "0x2B26D0C")]
		public SMAA()
		{
		}
	}
	[Token(Token = "0x2000014")]
	public static class ImageEffectHelper
	{
		[Token(Token = "0x1700000D")]
		public static bool supportsDX11
		{
			[Token(Token = "0x60001BE")]
			[Address(RVA = "0x2B27B7C", Offset = "0x2B27B7C", VA = "0x2B27B7C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60001BC")]
		[Address(RVA = "0x2B270D4", Offset = "0x2B270D4", VA = "0x2B270D4")]
		public static bool IsSupported(Shader s, bool needDepth, bool needHdr, MonoBehaviour effect)
		{
			return default(bool);
		}

		[Token(Token = "0x60001BD")]
		[Address(RVA = "0x2B26FF4", Offset = "0x2B26FF4", VA = "0x2B26FF4")]
		public static Material CheckShaderAndCreateMaterial(Shader s)
		{
			return null;
		}
	}
	[Token(Token = "0x2000015")]
	public sealed class MinAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly float min;

		[Token(Token = "0x60001BF")]
		[Address(RVA = "0x2B28BA4", Offset = "0x2B28BA4", VA = "0x2B28BA4")]
		public MinAttribute(float min)
		{
		}
	}
	[Token(Token = "0x2000016")]
	public class RenderTextureUtility
	{
		[Token(Token = "0x4000053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<RenderTexture> m_TemporaryRTs;

		[Token(Token = "0x60001C0")]
		[Address(RVA = "0x2B28968", Offset = "0x2B28968", VA = "0x2B28968")]
		public RenderTexture GetTemporaryRenderTexture(int width, int height, int depthBuffer = 0, RenderTextureFormat format = RenderTextureFormat.ARGBHalf, FilterMode filterMode = FilterMode.Bilinear)
		{
			return null;
		}

		[Token(Token = "0x60001C1")]
		[Address(RVA = "0x2B28BD8", Offset = "0x2B28BD8", VA = "0x2B28BD8")]
		public void ReleaseTemporaryRenderTexture(RenderTexture rt)
		{
		}

		[Token(Token = "0x60001C2")]
		[Address(RVA = "0x2B27EC4", Offset = "0x2B27EC4", VA = "0x2B27EC4")]
		public void ReleaseAllTemporaryRenderTextures()
		{
		}

		[Token(Token = "0x60001C3")]
		[Address(RVA = "0x2B27D80", Offset = "0x2B27D80", VA = "0x2B27D80")]
		public RenderTextureUtility()
		{
		}
	}
	[Token(Token = "0x2000017")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x124DA5C", Offset = "0x124DA5C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x124DA5C", Offset = "0x124DA5C")]
	public class LensAberrations : MonoBehaviour
	{
		[Token(Token = "0x20002F0")]
		[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x12519C4", Offset = "0x12519C4")]
		public class SettingsGroup : Attribute
		{
			[Token(Token = "0x6001601")]
			[Address(RVA = "0x2B28B9C", Offset = "0x2B28B9C", VA = "0x2B28B9C")]
			public SettingsGroup()
			{
			}
		}

		[Token(Token = "0x20002F1")]
		[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x12519D8", Offset = "0x12519D8")]
		public class AdvancedSetting : Attribute
		{
			[Token(Token = "0x6001602")]
			[Address(RVA = "0x2B28B94", Offset = "0x2B28B94", VA = "0x2B28B94")]
			public AdvancedSetting()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002F2")]
		public struct DistortionSettings
		{
			[Token(Token = "0x4001290")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x4001291")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125BB08", Offset = "0x125BB08")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BB08", Offset = "0x125BB08")]
			public float amount;

			[Token(Token = "0x4001292")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125BB64", Offset = "0x125BB64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BB64", Offset = "0x125BB64")]
			public float centerX;

			[Token(Token = "0x4001293")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125BBB8", Offset = "0x125BBB8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BBB8", Offset = "0x125BBB8")]
			public float centerY;

			[Token(Token = "0x4001294")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125BC0C", Offset = "0x125BC0C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BC0C", Offset = "0x125BC0C")]
			public float amountX;

			[Token(Token = "0x4001295")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125BC60", Offset = "0x125BC60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BC60", Offset = "0x125BC60")]
			public float amountY;

			[Token(Token = "0x4001296")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125BCB4", Offset = "0x125BCB4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BCB4", Offset = "0x125BCB4")]
			public float scale;

			[Token(Token = "0x17000132")]
			public static DistortionSettings defaultSettings
			{
				[Token(Token = "0x6001603")]
				[Address(RVA = "0x2B28AC0", Offset = "0x2B28AC0", VA = "0x2B28AC0")]
				get
				{
					return default(DistortionSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20002F3")]
		public struct VignetteSettings
		{
			[Token(Token = "0x4001297")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x4001298")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x125BD0C", Offset = "0x125BD0C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BD0C", Offset = "0x125BD0C")]
			public Color color;

			[Token(Token = "0x4001299")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BD5C", Offset = "0x125BD5C")]
			public Vector2 center;

			[Token(Token = "0x400129A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125BD94", Offset = "0x125BD94")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BD94", Offset = "0x125BD94")]
			public float intensity;

			[Token(Token = "0x400129B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125BDE8", Offset = "0x125BDE8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BDE8", Offset = "0x125BDE8")]
			public float smoothness;

			[Token(Token = "0x400129C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AdvancedSetting]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125BE40", Offset = "0x125BE40")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BE40", Offset = "0x125BE40")]
			public float roundness;

			[Token(Token = "0x400129D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125BEA4", Offset = "0x125BEA4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BEA4", Offset = "0x125BEA4")]
			public float blur;

			[Token(Token = "0x400129E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125BEF8", Offset = "0x125BEF8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BEF8", Offset = "0x125BEF8")]
			public float desaturate;

			[Token(Token = "0x17000133")]
			public static VignetteSettings defaultSettings
			{
				[Token(Token = "0x6001604")]
				[Address(RVA = "0x2B28AD8", Offset = "0x2B28AD8", VA = "0x2B28AD8")]
				get
				{
					return default(VignetteSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20002F4")]
		public struct ChromaticAberrationSettings
		{
			[Token(Token = "0x400129F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x40012A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x125BF4C", Offset = "0x125BF4C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BF4C", Offset = "0x125BF4C")]
			public Color color;

			[Token(Token = "0x40012A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125BF9C", Offset = "0x125BF9C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BF9C", Offset = "0x125BF9C")]
			public float amount;

			[Token(Token = "0x17000134")]
			public static ChromaticAberrationSettings defaultSettings
			{
				[Token(Token = "0x6001605")]
				[Address(RVA = "0x2B28B60", Offset = "0x2B28B60", VA = "0x2B28B60")]
				get
				{
					return default(ChromaticAberrationSettings);
				}
			}
		}

		[Token(Token = "0x20002F5")]
		private enum Pass
		{
			[Token(Token = "0x40012A3")]
			BlurPrePass,
			[Token(Token = "0x40012A4")]
			Chroma,
			[Token(Token = "0x40012A5")]
			Distort,
			[Token(Token = "0x40012A6")]
			Vignette,
			[Token(Token = "0x40012A7")]
			ChromaDistort,
			[Token(Token = "0x40012A8")]
			ChromaVignette,
			[Token(Token = "0x40012A9")]
			DistortVignette,
			[Token(Token = "0x40012AA")]
			ChromaDistortVignette
		}

		[Token(Token = "0x4000054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SettingsGroup]
		public DistortionSettings distortion;

		[Token(Token = "0x4000055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SettingsGroup]
		public VignetteSettings vignette;

		[Token(Token = "0x4000056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SettingsGroup]
		public ChromaticAberrationSettings chromaticAberration;

		[Token(Token = "0x4000057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Shader m_Shader;

		[Token(Token = "0x4000058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material m_Material;

		[Token(Token = "0x4000059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private RenderTextureUtility m_RTU;

		[Token(Token = "0x1700000E")]
		public Shader shader
		{
			[Token(Token = "0x60001C4")]
			[Address(RVA = "0x2B27BAC", Offset = "0x2B27BAC", VA = "0x2B27BAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000F")]
		public Material material
		{
			[Token(Token = "0x60001C5")]
			[Address(RVA = "0x2B27C4C", Offset = "0x2B27C4C", VA = "0x2B27C4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001C6")]
		[Address(RVA = "0x2B27CF0", Offset = "0x2B27CF0", VA = "0x2B27CF0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60001C7")]
		[Address(RVA = "0x2B27DFC", Offset = "0x2B27DFC", VA = "0x2B27DFC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001C8")]
		[Address(RVA = "0x2B27F6C", Offset = "0x2B27F6C", VA = "0x2B27F6C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001C9")]
		[Address(RVA = "0x2B28A4C", Offset = "0x2B28A4C", VA = "0x2B28A4C")]
		public LensAberrations()
		{
		}
	}
	[Token(Token = "0x2000018")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x124DAF4", Offset = "0x124DAF4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x124DAF4", Offset = "0x124DAF4")]
	[ImageEffectAllowedInSceneView]
	public class TonemappingColorGrading : MonoBehaviour
	{
		[Token(Token = "0x20002F6")]
		[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x12519EC", Offset = "0x12519EC")]
		public class SettingsGroup : Attribute
		{
			[Token(Token = "0x6001606")]
			[Address(RVA = "0x274BB04", Offset = "0x274BB04", VA = "0x274BB04")]
			public SettingsGroup()
			{
			}
		}

		[Token(Token = "0x20002F7")]
		public class IndentedGroup : PropertyAttribute
		{
			[Token(Token = "0x6001607")]
			[Address(RVA = "0x274BAAC", Offset = "0x274BAAC", VA = "0x274BAAC")]
			public IndentedGroup()
			{
			}
		}

		[Token(Token = "0x20002F8")]
		public class ChannelMixer : PropertyAttribute
		{
			[Token(Token = "0x6001608")]
			[Address(RVA = "0x274B4D8", Offset = "0x274B4D8", VA = "0x274B4D8")]
			public ChannelMixer()
			{
			}
		}

		[Token(Token = "0x20002F9")]
		public class ColorWheelGroup : PropertyAttribute
		{
			[Token(Token = "0x40012AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int minSizePerWheel;

			[Token(Token = "0x40012AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int maxSizePerWheel;

			[Token(Token = "0x6001609")]
			[Address(RVA = "0x274B840", Offset = "0x274B840", VA = "0x274B840")]
			public ColorWheelGroup()
			{
			}

			[Token(Token = "0x600160A")]
			[Address(RVA = "0x274B854", Offset = "0x274B854", VA = "0x274B854")]
			public ColorWheelGroup(int minSizePerWheel, int maxSizePerWheel)
			{
			}
		}

		[Token(Token = "0x20002FA")]
		public class Curve : PropertyAttribute
		{
			[Token(Token = "0x40012AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Color color;

			[Token(Token = "0x600160B")]
			[Address(RVA = "0x274B898", Offset = "0x274B898", VA = "0x274B898")]
			public Curve()
			{
			}

			[Token(Token = "0x600160C")]
			[Address(RVA = "0x274B8CC", Offset = "0x274B8CC", VA = "0x274B8CC")]
			public Curve(float r, float g, float b, float a)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002FB")]
		public struct EyeAdaptationSettings
		{
			[Token(Token = "0x40012AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x40012AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x125BFF8", Offset = "0x125BFF8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125BFF8", Offset = "0x125BFF8")]
			public float middleGrey;

			[Token(Token = "0x40012B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C048", Offset = "0x125C048")]
			public float min;

			[Token(Token = "0x40012B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C080", Offset = "0x125C080")]
			public float max;

			[Token(Token = "0x40012B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x125C0B8", Offset = "0x125C0B8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C0B8", Offset = "0x125C0B8")]
			public float speed;

			[Token(Token = "0x40012B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C108", Offset = "0x125C108")]
			public bool showDebug;

			[Token(Token = "0x17000135")]
			public static EyeAdaptationSettings defaultSettings
			{
				[Token(Token = "0x600160D")]
				[Address(RVA = "0x274BA8C", Offset = "0x274BA8C", VA = "0x274BA8C")]
				get
				{
					return default(EyeAdaptationSettings);
				}
			}
		}

		[Token(Token = "0x20002FC")]
		public enum Tonemapper
		{
			[Token(Token = "0x40012B5")]
			ACES,
			[Token(Token = "0x40012B6")]
			Curve,
			[Token(Token = "0x40012B7")]
			Hable,
			[Token(Token = "0x40012B8")]
			HejlDawson,
			[Token(Token = "0x40012B9")]
			Photographic,
			[Token(Token = "0x40012BA")]
			Reinhard,
			[Token(Token = "0x40012BB")]
			Neutral
		}

		[Serializable]
		[Token(Token = "0x20002FD")]
		public struct TonemappingSettings
		{
			[Token(Token = "0x40012BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x40012BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C140", Offset = "0x125C140")]
			public Tonemapper tonemapper;

			[Token(Token = "0x40012BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "MinAttribute", RVA = "0x125C178", Offset = "0x125C178")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C178", Offset = "0x125C178")]
			public float exposure;

			[Token(Token = "0x40012BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C1C8", Offset = "0x125C1C8")]
			public AnimationCurve curve;

			[Token(Token = "0x40012C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C200", Offset = "0x125C200")]
			public float neutralBlackIn;

			[Token(Token = "0x40012C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C220", Offset = "0x125C220")]
			public float neutralWhiteIn;

			[Token(Token = "0x40012C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C238", Offset = "0x125C238")]
			public float neutralBlackOut;

			[Token(Token = "0x40012C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C258", Offset = "0x125C258")]
			public float neutralWhiteOut;

			[Token(Token = "0x40012C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C270", Offset = "0x125C270")]
			public float neutralWhiteLevel;

			[Token(Token = "0x40012C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C28C", Offset = "0x125C28C")]
			public float neutralWhiteClip;

			[Token(Token = "0x17000136")]
			public static TonemappingSettings defaultSettings
			{
				[Token(Token = "0x600160E")]
				[Address(RVA = "0x274BB0C", Offset = "0x274BB0C", VA = "0x274BB0C")]
				get
				{
					return default(TonemappingSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20002FE")]
		public struct LUTSettings
		{
			[Token(Token = "0x40012C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x40012C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C2A4", Offset = "0x125C2A4")]
			public Texture texture;

			[Token(Token = "0x40012C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C2DC", Offset = "0x125C2DC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C2DC", Offset = "0x125C2DC")]
			public float contribution;

			[Token(Token = "0x17000137")]
			public static LUTSettings defaultSettings
			{
				[Token(Token = "0x600160F")]
				[Address(RVA = "0x274BAB4", Offset = "0x274BAB4", VA = "0x274BAB4")]
				get
				{
					return default(LUTSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x20002FF")]
		public struct ColorWheelsSettings
		{
			[Token(Token = "0x40012C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x125C330", Offset = "0x125C330")]
			public Color shadows;

			[Token(Token = "0x40012CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x125C344", Offset = "0x125C344")]
			public Color midtones;

			[Token(Token = "0x40012CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "ColorUsageAttribute", RVA = "0x125C358", Offset = "0x125C358")]
			public Color highlights;

			[Token(Token = "0x17000138")]
			public static ColorWheelsSettings defaultSettings
			{
				[Token(Token = "0x6001610")]
				[Address(RVA = "0x274B6E8", Offset = "0x274B6E8", VA = "0x274B6E8")]
				get
				{
					return default(ColorWheelsSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000300")]
		public struct BasicsSettings
		{
			[Token(Token = "0x40012CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C36C", Offset = "0x125C36C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C36C", Offset = "0x125C36C")]
			public float temperatureShift;

			[Token(Token = "0x40012CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C3C0", Offset = "0x125C3C0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C3C0", Offset = "0x125C3C0")]
			public float tint;

			[Token(Token = "0x40012CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x125C414", Offset = "0x125C414")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C414", Offset = "0x125C414")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C414", Offset = "0x125C414")]
			public float hue;

			[Token(Token = "0x40012CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C478", Offset = "0x125C478")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C478", Offset = "0x125C478")]
			public float saturation;

			[Token(Token = "0x40012D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C4CC", Offset = "0x125C4CC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C4CC", Offset = "0x125C4CC")]
			public float vibrance;

			[Token(Token = "0x40012D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C520", Offset = "0x125C520")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C520", Offset = "0x125C520")]
			public float value;

			[Token(Token = "0x40012D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x125C574", Offset = "0x125C574")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C574", Offset = "0x125C574")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C574", Offset = "0x125C574")]
			public float contrast;

			[Token(Token = "0x40012D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C5D8", Offset = "0x125C5D8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C5D8", Offset = "0x125C5D8")]
			public float gain;

			[Token(Token = "0x40012D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C630", Offset = "0x125C630")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C630", Offset = "0x125C630")]
			public float gamma;

			[Token(Token = "0x17000139")]
			public static BasicsSettings defaultSettings
			{
				[Token(Token = "0x6001611")]
				[Address(RVA = "0x274B4B8", Offset = "0x274B4B8", VA = "0x274B4B8")]
				get
				{
					return default(BasicsSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000301")]
		public struct ChannelMixerSettings
		{
			[Token(Token = "0x40012D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int currentChannel;

			[Token(Token = "0x40012D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector3[] channels;

			[Token(Token = "0x1700013A")]
			public static ChannelMixerSettings defaultSettings
			{
				[Token(Token = "0x6001612")]
				[Address(RVA = "0x274B4E0", Offset = "0x274B4E0", VA = "0x274B4E0")]
				get
				{
					return default(ChannelMixerSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000302")]
		public struct CurvesSettings
		{
			[Token(Token = "0x40012D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "Curve", RVA = "0x125C688", Offset = "0x125C688")]
			public AnimationCurve master;

			[Token(Token = "0x40012D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "Curve", RVA = "0x125C698", Offset = "0x125C698")]
			public AnimationCurve red;

			[Token(Token = "0x40012D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "Curve", RVA = "0x125C6B8", Offset = "0x125C6B8")]
			public AnimationCurve green;

			[Token(Token = "0x40012DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "Curve", RVA = "0x125C6D8", Offset = "0x125C6D8")]
			public AnimationCurve blue;

			[Token(Token = "0x1700013B")]
			public static CurvesSettings defaultSettings
			{
				[Token(Token = "0x6001613")]
				[Address(RVA = "0x274B774", Offset = "0x274B774", VA = "0x274B774")]
				get
				{
					return default(CurvesSettings);
				}
			}

			[Token(Token = "0x1700013C")]
			public static AnimationCurve defaultCurve
			{
				[Token(Token = "0x6001614")]
				[Address(RVA = "0x274B954", Offset = "0x274B954", VA = "0x274B954")]
				get
				{
					return null;
				}
			}
		}

		[Token(Token = "0x2000303")]
		public enum ColorGradingPrecision
		{
			[Token(Token = "0x40012DC")]
			Normal = 0x10,
			[Token(Token = "0x40012DD")]
			High = 0x20
		}

		[Serializable]
		[Token(Token = "0x2000304")]
		public struct ColorGradingSettings
		{
			[Token(Token = "0x40012DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x40012DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C6F8", Offset = "0x125C6F8")]
			public ColorGradingPrecision precision;

			[Token(Token = "0x40012E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x125C730", Offset = "0x125C730")]
			[AttributeAttribute(Name = "ColorWheelGroup", RVA = "0x125C730", Offset = "0x125C730")]
			public ColorWheelsSettings colorWheels;

			[Token(Token = "0x40012E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x125C768", Offset = "0x125C768")]
			[IndentedGroup]
			public BasicsSettings basics;

			[Token(Token = "0x40012E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x125C7A0", Offset = "0x125C7A0")]
			[ChannelMixer]
			public ChannelMixerSettings channelMixer;

			[Token(Token = "0x40012E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x125C7D8", Offset = "0x125C7D8")]
			[IndentedGroup]
			public CurvesSettings curves;

			[Token(Token = "0x40012E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x125C810", Offset = "0x125C810")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C810", Offset = "0x125C810")]
			public bool useDithering;

			[Token(Token = "0x40012E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C85C", Offset = "0x125C85C")]
			public bool showDebug;

			[Token(Token = "0x1700013D")]
			public static ColorGradingSettings defaultSettings
			{
				[Token(Token = "0x6001615")]
				[Address(RVA = "0x274B61C", Offset = "0x274B61C", VA = "0x274B61C")]
				get
				{
					return default(ColorGradingSettings);
				}
			}

			[Token(Token = "0x6001616")]
			[Address(RVA = "0x274B804", Offset = "0x274B804", VA = "0x274B804")]
			internal void Reset()
			{
			}
		}

		[Token(Token = "0x2000305")]
		private enum Pass
		{
			[Token(Token = "0x40012E7")]
			LutGen,
			[Token(Token = "0x40012E8")]
			AdaptationLog,
			[Token(Token = "0x40012E9")]
			AdaptationExpBlend,
			[Token(Token = "0x40012EA")]
			AdaptationExp,
			[Token(Token = "0x40012EB")]
			TonemappingOff,
			[Token(Token = "0x40012EC")]
			TonemappingACES,
			[Token(Token = "0x40012ED")]
			TonemappingCurve,
			[Token(Token = "0x40012EE")]
			TonemappingHable,
			[Token(Token = "0x40012EF")]
			TonemappingHejlDawson,
			[Token(Token = "0x40012F0")]
			TonemappingPhotographic,
			[Token(Token = "0x40012F1")]
			TonemappingReinhard,
			[Token(Token = "0x40012F2")]
			TonemappingNeutral,
			[Token(Token = "0x40012F3")]
			AdaptationDebug
		}

		[Token(Token = "0x400005A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[SettingsGroup]
		private EyeAdaptationSettings m_EyeAdaptation;

		[Token(Token = "0x400005B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[SettingsGroup]
		private TonemappingSettings m_Tonemapping;

		[Token(Token = "0x400005C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[SettingsGroup]
		private ColorGradingSettings m_ColorGrading;

		[Token(Token = "0x400005D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[SettingsGroup]
		private LUTSettings m_Lut;

		[Token(Token = "0x400005E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Texture2D m_IdentityLut;

		[Token(Token = "0x400005F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private RenderTexture m_InternalLut;

		[Token(Token = "0x4000060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Texture2D m_CurveTexture;

		[Token(Token = "0x4000061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Texture2D m_TonemapperCurve;

		[Token(Token = "0x4000062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float m_TonemapperCurveRange;

		[Token(Token = "0x4000063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private Shader m_Shader;

		[Token(Token = "0x4000064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Material m_Material;

		[Token(Token = "0x4000065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252424", Offset = "0x1252424")]
		private bool <validRenderTextureFormat>k__BackingField;

		[Token(Token = "0x4000066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252434", Offset = "0x1252434")]
		private bool <validUserLutSize>k__BackingField;

		[Token(Token = "0x4000067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14A")]
		private bool m_Dirty;

		[Token(Token = "0x4000068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14B")]
		private bool m_TonemapperDirty;

		[Token(Token = "0x4000069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private RenderTexture m_SmallAdaptiveRt;

		[Token(Token = "0x400006A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private RenderTextureFormat m_AdaptiveRtFormat;

		[Token(Token = "0x17000010")]
		public EyeAdaptationSettings eyeAdaptation
		{
			[Token(Token = "0x60001CA")]
			[Address(RVA = "0x2B29D98", Offset = "0x2B29D98", VA = "0x2B29D98")]
			get
			{
				return default(EyeAdaptationSettings);
			}
			[Token(Token = "0x60001CB")]
			[Address(RVA = "0x2B29DAC", Offset = "0x2B29DAC", VA = "0x2B29DAC")]
			set
			{
			}
		}

		[Token(Token = "0x17000011")]
		public TonemappingSettings tonemapping
		{
			[Token(Token = "0x60001CC")]
			[Address(RVA = "0x2B29DC0", Offset = "0x2B29DC0", VA = "0x2B29DC0")]
			get
			{
				return default(TonemappingSettings);
			}
			[Token(Token = "0x60001CD")]
			[Address(RVA = "0x2B29DD4", Offset = "0x2B29DD4", VA = "0x2B29DD4")]
			set
			{
			}
		}

		[Token(Token = "0x17000012")]
		public ColorGradingSettings colorGrading
		{
			[Token(Token = "0x60001CE")]
			[Address(RVA = "0x2B29E20", Offset = "0x2B29E20", VA = "0x2B29E20")]
			get
			{
				return default(ColorGradingSettings);
			}
			[Token(Token = "0x60001CF")]
			[Address(RVA = "0x2B29E30", Offset = "0x2B29E30", VA = "0x2B29E30")]
			set
			{
			}
		}

		[Token(Token = "0x17000013")]
		public LUTSettings lut
		{
			[Token(Token = "0x60001D0")]
			[Address(RVA = "0x2B29E78", Offset = "0x2B29E78", VA = "0x2B29E78")]
			get
			{
				return default(LUTSettings);
			}
			[Token(Token = "0x60001D1")]
			[Address(RVA = "0x2B29E8C", Offset = "0x2B29E8C", VA = "0x2B29E8C")]
			set
			{
			}
		}

		[Token(Token = "0x17000014")]
		private Texture2D identityLut
		{
			[Token(Token = "0x60001D2")]
			[Address(RVA = "0x2B29EAC", Offset = "0x2B29EAC", VA = "0x2B29EAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000015")]
		private RenderTexture internalLutRt
		{
			[Token(Token = "0x60001D3")]
			[Address(RVA = "0x2B2A1B8", Offset = "0x2B2A1B8", VA = "0x2B2A1B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000016")]
		private Texture2D curveTexture
		{
			[Token(Token = "0x60001D4")]
			[Address(RVA = "0x2B2A32C", Offset = "0x2B2A32C", VA = "0x2B2A32C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000017")]
		private Texture2D tonemapperCurve
		{
			[Token(Token = "0x60001D5")]
			[Address(RVA = "0x2B2A44C", Offset = "0x2B2A44C", VA = "0x2B2A44C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000018")]
		public Shader shader
		{
			[Token(Token = "0x60001D6")]
			[Address(RVA = "0x2B2A5A4", Offset = "0x2B2A5A4", VA = "0x2B2A5A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000019")]
		public Material material
		{
			[Token(Token = "0x60001D7")]
			[Address(RVA = "0x2B2A648", Offset = "0x2B2A648", VA = "0x2B2A648")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001A")]
		public bool isGammaColorSpace
		{
			[Token(Token = "0x60001D8")]
			[Address(RVA = "0x2B2A6EC", Offset = "0x2B2A6EC", VA = "0x2B2A6EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700001B")]
		public int lutSize
		{
			[Token(Token = "0x60001D9")]
			[Address(RVA = "0x2B29F98", Offset = "0x2B29F98", VA = "0x2B29F98")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700001C")]
		public bool validRenderTextureFormat
		{
			[Token(Token = "0x60001DA")]
			[Address(RVA = "0x2B2A70C", Offset = "0x2B2A70C", VA = "0x2B2A70C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12609FC", Offset = "0x12609FC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60001DB")]
			[Address(RVA = "0x2B2A714", Offset = "0x2B2A714", VA = "0x2B2A714")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260A0C", Offset = "0x1260A0C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700001D")]
		public bool validUserLutSize
		{
			[Token(Token = "0x60001DC")]
			[Address(RVA = "0x2B2A720", Offset = "0x2B2A720", VA = "0x2B2A720")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260A1C", Offset = "0x1260A1C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60001DD")]
			[Address(RVA = "0x2B2A728", Offset = "0x2B2A728", VA = "0x2B2A728")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260A2C", Offset = "0x1260A2C")]
			private set
			{
			}
		}

		[Token(Token = "0x60001DE")]
		[Address(RVA = "0x2B29E6C", Offset = "0x2B29E6C", VA = "0x2B29E6C")]
		public void SetDirty()
		{
		}

		[Token(Token = "0x60001DF")]
		[Address(RVA = "0x2B29E14", Offset = "0x2B29E14", VA = "0x2B29E14")]
		public void SetTonemapperDirty()
		{
		}

		[Token(Token = "0x60001E0")]
		[Address(RVA = "0x2B2A734", Offset = "0x2B2A734", VA = "0x2B2A734")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60001E1")]
		[Address(RVA = "0x2B2A788", Offset = "0x2B2A788", VA = "0x2B2A788")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60001E2")]
		[Address(RVA = "0x2B2AA78", Offset = "0x2B2AA78", VA = "0x2B2AA78")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60001E3")]
		[Address(RVA = "0x2B29FA0", Offset = "0x2B29FA0", VA = "0x2B29FA0")]
		private static Texture2D GenerateIdentityLut(int dim)
		{
			return null;
		}

		[Token(Token = "0x60001E4")]
		[Address(RVA = "0x2B2AA84", Offset = "0x2B2AA84", VA = "0x2B2AA84")]
		private float StandardIlluminantY(float x)
		{
			return default(float);
		}

		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x2B2AAB0", Offset = "0x2B2AAB0", VA = "0x2B2AAB0")]
		private Vector3 CIExyToLMS(float x, float y)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x2B2AB70", Offset = "0x2B2AB70", VA = "0x2B2AB70")]
		private Vector3 GetWhiteBalance()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60001E7")]
		[Address(RVA = "0x2B2AC58", Offset = "0x2B2AC58", VA = "0x2B2AC58")]
		private static Color NormalizeColor(Color c)
		{
			return default(Color);
		}

		[Token(Token = "0x60001E8")]
		[Address(RVA = "0x2B2AD48", Offset = "0x2B2AD48", VA = "0x2B2AD48")]
		private void GenerateLiftGammaGain(out Color lift, out Color gamma, out Color gain)
		{
		}

		[Token(Token = "0x60001E9")]
		[Address(RVA = "0x2B2AFB0", Offset = "0x2B2AFB0", VA = "0x2B2AFB0")]
		private void GenCurveTexture()
		{
		}

		[Token(Token = "0x60001EA")]
		[Address(RVA = "0x2B2B1D4", Offset = "0x2B2B1D4", VA = "0x2B2B1D4")]
		private bool CheckUserLut()
		{
			return default(bool);
		}

		[Token(Token = "0x60001EB")]
		[Address(RVA = "0x2B2B2B8", Offset = "0x2B2B2B8", VA = "0x2B2B2B8")]
		private bool CheckSmallAdaptiveRt()
		{
			return default(bool);
		}

		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x2B2B3C4", Offset = "0x2B2B3C4", VA = "0x2B2B3C4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x2B2B5B4", Offset = "0x2B2B5B4", VA = "0x2B2B5B4")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x2B2C58C", Offset = "0x2B2C58C", VA = "0x2B2C58C")]
		public Texture2D BakeLUT()
		{
			return null;
		}

		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x2B2C6D0", Offset = "0x2B2C6D0", VA = "0x2B2C6D0")]
		public TonemappingColorGrading()
		{
		}
	}
}
namespace Steamworks
{
	[Token(Token = "0x2000019")]
	public static class CallbackDispatcher
	{
		[Token(Token = "0x60001F0")]
		[Address(RVA = "0x23E9A1C", Offset = "0x23E9A1C", VA = "0x23E9A1C")]
		public static void ExceptionHandler(Exception e)
		{
		}
	}
	[Token(Token = "0x200001A")]
	public sealed class Callback<T> : IDisposable
	{
		[Token(Token = "0x2000306")]
		public delegate void DispatchDelegate(T param);

		[Token(Token = "0x400006B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBaseVTable VTable;

		[Token(Token = "0x400006C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr m_pVTable;

		[Token(Token = "0x400006D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBase m_CCallbackBase;

		[Token(Token = "0x400006E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_pCCallbackBase;

		[Token(Token = "0x4000070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_bGameServer;

		[Token(Token = "0x4000071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int m_size;

		[Token(Token = "0x4000072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_bDisposed;

		[Token(Token = "0x14000001")]
		private event DispatchDelegate m_Func
		{
			[Token(Token = "0x60001F1")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260A4C", Offset = "0x1260A4C")]
			add
			{
			}
			[Token(Token = "0x60001F2")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260A5C", Offset = "0x1260A5C")]
			remove
			{
			}
		}

		[Token(Token = "0x60001F3")]
		public static Callback<T> Create(DispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x60001F4")]
		public static Callback<T> CreateGameServer(DispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x60001F5")]
		public Callback(DispatchDelegate func, bool bGameServer = false)
		{
		}

		[Token(Token = "0x60001F6")]
		~Callback()
		{
		}

		[Token(Token = "0x60001F7")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60001F8")]
		public void Register(DispatchDelegate func)
		{
		}

		[Token(Token = "0x60001F9")]
		public void Unregister()
		{
		}

		[Token(Token = "0x60001FA")]
		public void SetGameserverFlag()
		{
		}

		[Token(Token = "0x60001FB")]
		private void OnRunCallback(IntPtr thisptr, IntPtr pvParam)
		{
		}

		[Token(Token = "0x60001FC")]
		private void OnRunCallResult(IntPtr thisptr, IntPtr pvParam, bool bFailed, ulong hSteamAPICall)
		{
		}

		[Token(Token = "0x60001FD")]
		private int OnGetCallbackSizeBytes(IntPtr thisptr)
		{
			return default(int);
		}

		[Token(Token = "0x60001FE")]
		private void BuildCCallbackBase()
		{
		}
	}
	[Token(Token = "0x200001B")]
	public sealed class CallResult<T> : IDisposable
	{
		[Token(Token = "0x2000307")]
		public delegate void APIDispatchDelegate(T param, bool bIOFailure);

		[Token(Token = "0x4000073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBaseVTable VTable;

		[Token(Token = "0x4000074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr m_pVTable;

		[Token(Token = "0x4000075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBase m_CCallbackBase;

		[Token(Token = "0x4000076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_pCCallbackBase;

		[Token(Token = "0x4000078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private SteamAPICall_t m_hAPICall;

		[Token(Token = "0x4000079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int m_size;

		[Token(Token = "0x400007A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_bDisposed;

		[Token(Token = "0x1700001E")]
		public SteamAPICall_t Handle
		{
			[Token(Token = "0x6000201")]
			get
			{
				return default(SteamAPICall_t);
			}
		}

		[Token(Token = "0x14000002")]
		private event APIDispatchDelegate m_Func
		{
			[Token(Token = "0x60001FF")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260A6C", Offset = "0x1260A6C")]
			add
			{
			}
			[Token(Token = "0x6000200")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260A7C", Offset = "0x1260A7C")]
			remove
			{
			}
		}

		[Token(Token = "0x6000202")]
		public static CallResult<T> Create([Optional] APIDispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x6000203")]
		public CallResult([Optional] APIDispatchDelegate func)
		{
		}

		[Token(Token = "0x6000204")]
		~CallResult()
		{
		}

		[Token(Token = "0x6000205")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000206")]
		public void Set(SteamAPICall_t hAPICall, [Optional] APIDispatchDelegate func)
		{
		}

		[Token(Token = "0x6000207")]
		public bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6000208")]
		public void Cancel()
		{
		}

		[Token(Token = "0x6000209")]
		public void SetGameserverFlag()
		{
		}

		[Token(Token = "0x600020A")]
		private void OnRunCallback(IntPtr thisptr, IntPtr pvParam)
		{
		}

		[Token(Token = "0x600020B")]
		private void OnRunCallResult(IntPtr thisptr, IntPtr pvParam, bool bFailed, ulong hSteamAPICall_)
		{
		}

		[Token(Token = "0x600020C")]
		private int OnGetCallbackSizeBytes(IntPtr thisptr)
		{
			return default(int);
		}

		[Token(Token = "0x600020D")]
		private void BuildCCallbackBase()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x200001C")]
	internal class CCallbackBase
	{
		[Token(Token = "0x400007B")]
		public const byte k_ECallbackFlagsRegistered = 1;

		[Token(Token = "0x400007C")]
		public const byte k_ECallbackFlagsGameServer = 2;

		[Token(Token = "0x400007D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_vfptr;

		[Token(Token = "0x400007E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public byte m_nCallbackFlags;

		[Token(Token = "0x400007F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int m_iCallback;

		[Token(Token = "0x600020E")]
		[Address(RVA = "0x23E7164", Offset = "0x23E7164", VA = "0x23E7164")]
		public CCallbackBase()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x200001D")]
	internal class CCallbackBaseVTable
	{
		[Token(Token = "0x2000308")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1251A00", Offset = "0x1251A00")]
		public delegate void RunCBDel(IntPtr thisptr, IntPtr pvParam);

		[Token(Token = "0x2000309")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1251A14", Offset = "0x1251A14")]
		public delegate void RunCRDel(IntPtr thisptr, IntPtr pvParam, bool bIOFailure, ulong hSteamAPICall);

		[Token(Token = "0x200030A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1251A28", Offset = "0x1251A28")]
		public delegate int GetCallbackSizeBytesDel(IntPtr thisptr);

		[Token(Token = "0x4000080")]
		private const CallingConvention cc = CallingConvention.Cdecl;

		[NonSerialized]
		[Token(Token = "0x4000081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RunCBDel m_RunCallback;

		[NonSerialized]
		[Token(Token = "0x4000082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RunCRDel m_RunCallResult;

		[NonSerialized]
		[Token(Token = "0x4000083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GetCallbackSizeBytesDel m_GetCallbackSizeBytes;

		[Token(Token = "0x600020F")]
		[Address(RVA = "0x23E716C", Offset = "0x23E716C", VA = "0x23E716C")]
		public CCallbackBaseVTable()
		{
		}
	}
	[Token(Token = "0x200001E")]
	internal class CallbackIdentities
	{
		[Token(Token = "0x6000210")]
		[Address(RVA = "0x23E9A20", Offset = "0x23E9A20", VA = "0x23E9A20")]
		public static int GetCallbackIdentity(Type callbackStruct)
		{
			return default(int);
		}

		[Token(Token = "0x6000211")]
		[Address(RVA = "0x23E9AA8", Offset = "0x23E9AA8", VA = "0x23E9AA8")]
		public CallbackIdentities()
		{
		}
	}
	[Token(Token = "0x200001F")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x124DB9C", Offset = "0x124DB9C")]
	internal class CallbackIdentityAttribute : Attribute
	{
		[Token(Token = "0x4000084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252464", Offset = "0x1252464")]
		private int <Identity>k__BackingField;

		[Token(Token = "0x1700001F")]
		public int Identity
		{
			[Token(Token = "0x6000212")]
			[Address(RVA = "0x23E9AB0", Offset = "0x23E9AB0", VA = "0x23E9AB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260A8C", Offset = "0x1260A8C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000213")]
			[Address(RVA = "0x23E9AB8", Offset = "0x23E9AB8", VA = "0x23E9AB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260A9C", Offset = "0x1260A9C")]
			set
			{
			}
		}

		[Token(Token = "0x6000214")]
		[Address(RVA = "0x23E9AC0", Offset = "0x23E9AC0", VA = "0x23E9AC0")]
		public CallbackIdentityAttribute(int callbackNum)
		{
		}
	}
	[Token(Token = "0x2000020")]
	public class ISteamMatchmakingServerListResponse
	{
		[Token(Token = "0x200030B")]
		public delegate void ServerResponded(HServerListRequest hRequest, int iServer);

		[Token(Token = "0x200030C")]
		public delegate void ServerFailedToRespond(HServerListRequest hRequest, int iServer);

		[Token(Token = "0x200030D")]
		public delegate void RefreshComplete(HServerListRequest hRequest, EMatchMakingServerResponse response);

		[Token(Token = "0x200030E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1251A3C", Offset = "0x1251A3C")]
		private delegate void InternalServerResponded(IntPtr thisptr, HServerListRequest hRequest, int iServer);

		[Token(Token = "0x200030F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1251A50", Offset = "0x1251A50")]
		private delegate void InternalServerFailedToRespond(IntPtr thisptr, HServerListRequest hRequest, int iServer);

		[Token(Token = "0x2000310")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1251A64", Offset = "0x1251A64")]
		private delegate void InternalRefreshComplete(IntPtr thisptr, HServerListRequest hRequest, EMatchMakingServerResponse response);

		[StructLayout(0)]
		[Token(Token = "0x2000311")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x40012F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalServerResponded m_VTServerResponded;

			[NonSerialized]
			[Token(Token = "0x40012F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalServerFailedToRespond m_VTServerFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x40012F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalRefreshComplete m_VTRefreshComplete;

			[Token(Token = "0x6001643")]
			[Address(RVA = "0x2DC46BC", Offset = "0x2DC46BC", VA = "0x2DC46BC")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x4000085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x4000086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x4000087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x4000088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ServerResponded m_ServerResponded;

		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ServerFailedToRespond m_ServerFailedToRespond;

		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RefreshComplete m_RefreshComplete;

		[Token(Token = "0x6000215")]
		[Address(RVA = "0x2DC441C", Offset = "0x2DC441C", VA = "0x2DC441C")]
		public ISteamMatchmakingServerListResponse(ServerResponded onServerResponded, ServerFailedToRespond onServerFailedToRespond, RefreshComplete onRefreshComplete)
		{
		}

		[Token(Token = "0x6000216")]
		[Address(RVA = "0x2DC4700", Offset = "0x2DC4700", VA = "0x2DC4700", Slot = "1")]
		~ISteamMatchmakingServerListResponse()
		{
		}

		[Token(Token = "0x6000217")]
		[Address(RVA = "0x2DC47F8", Offset = "0x2DC47F8", VA = "0x2DC47F8")]
		private void InternalOnServerResponded(IntPtr thisptr, HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x6000218")]
		[Address(RVA = "0x2DC4A9C", Offset = "0x2DC4A9C", VA = "0x2DC4A9C")]
		private void InternalOnServerFailedToRespond(IntPtr thisptr, HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x6000219")]
		[Address(RVA = "0x2DC4D40", Offset = "0x2DC4D40", VA = "0x2DC4D40")]
		private void InternalOnRefreshComplete(IntPtr thisptr, HServerListRequest hRequest, EMatchMakingServerResponse response)
		{
		}

		[Token(Token = "0x600021A")]
		[Address(RVA = "0x2DC4FE4", Offset = "0x2DC4FE4", VA = "0x2DC4FE4")]
		public static explicit operator IntPtr(ISteamMatchmakingServerListResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000021")]
	public class ISteamMatchmakingPingResponse
	{
		[Token(Token = "0x2000312")]
		public delegate void ServerResponded(gameserveritem_t server);

		[Token(Token = "0x2000313")]
		public delegate void ServerFailedToRespond();

		[Token(Token = "0x2000314")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1251A78", Offset = "0x1251A78")]
		private delegate void InternalServerResponded(IntPtr thisptr, gameserveritem_t server);

		[Token(Token = "0x2000315")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1251A8C", Offset = "0x1251A8C")]
		private delegate void InternalServerFailedToRespond(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x2000316")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x40012F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalServerResponded m_VTServerResponded;

			[NonSerialized]
			[Token(Token = "0x40012F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalServerFailedToRespond m_VTServerFailedToRespond;

			[Token(Token = "0x6001654")]
			[Address(RVA = "0x2DC06C4", Offset = "0x2DC06C4", VA = "0x2DC06C4")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x400008C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x400008D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ServerResponded m_ServerResponded;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ServerFailedToRespond m_ServerFailedToRespond;

		[Token(Token = "0x600021B")]
		[Address(RVA = "0x2DC0484", Offset = "0x2DC0484", VA = "0x2DC0484")]
		public ISteamMatchmakingPingResponse(ServerResponded onServerResponded, ServerFailedToRespond onServerFailedToRespond)
		{
		}

		[Token(Token = "0x600021C")]
		[Address(RVA = "0x2DC06F4", Offset = "0x2DC06F4", VA = "0x2DC06F4", Slot = "1")]
		~ISteamMatchmakingPingResponse()
		{
		}

		[Token(Token = "0x600021D")]
		[Address(RVA = "0x2DC07EC", Offset = "0x2DC07EC", VA = "0x2DC07EC")]
		private void InternalOnServerResponded(IntPtr thisptr, gameserveritem_t server)
		{
		}

		[Token(Token = "0x600021E")]
		[Address(RVA = "0x2DC0B9C", Offset = "0x2DC0B9C", VA = "0x2DC0B9C")]
		private void InternalOnServerFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x600021F")]
		[Address(RVA = "0x2DC0DC0", Offset = "0x2DC0DC0", VA = "0x2DC0DC0")]
		public static explicit operator IntPtr(ISteamMatchmakingPingResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000022")]
	public class ISteamMatchmakingPlayersResponse
	{
		[Token(Token = "0x2000317")]
		public delegate void AddPlayerToList(string pchName, int nScore, float flTimePlayed);

		[Token(Token = "0x2000318")]
		public delegate void PlayersFailedToRespond();

		[Token(Token = "0x2000319")]
		public delegate void PlayersRefreshComplete();

		[Token(Token = "0x200031A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1251AA0", Offset = "0x1251AA0")]
		public delegate void InternalAddPlayerToList(IntPtr thisptr, IntPtr pchName, int nScore, float flTimePlayed);

		[Token(Token = "0x200031B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1251AB4", Offset = "0x1251AB4")]
		public delegate void InternalPlayersFailedToRespond(IntPtr thisptr);

		[Token(Token = "0x200031C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1251AC8", Offset = "0x1251AC8")]
		public delegate void InternalPlayersRefreshComplete(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x200031D")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x40012F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalAddPlayerToList m_VTAddPlayerToList;

			[NonSerialized]
			[Token(Token = "0x40012FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalPlayersFailedToRespond m_VTPlayersFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x40012FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalPlayersRefreshComplete m_VTPlayersRefreshComplete;

			[Token(Token = "0x600166D")]
			[Address(RVA = "0x2DC171C", Offset = "0x2DC171C", VA = "0x2DC171C")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x4000090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x4000091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x4000092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AddPlayerToList m_AddPlayerToList;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PlayersFailedToRespond m_PlayersFailedToRespond;

		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PlayersRefreshComplete m_PlayersRefreshComplete;

		[Token(Token = "0x6000220")]
		[Address(RVA = "0x2DC147C", Offset = "0x2DC147C", VA = "0x2DC147C")]
		public ISteamMatchmakingPlayersResponse(AddPlayerToList onAddPlayerToList, PlayersFailedToRespond onPlayersFailedToRespond, PlayersRefreshComplete onPlayersRefreshComplete)
		{
		}

		[Token(Token = "0x6000221")]
		[Address(RVA = "0x2DC1760", Offset = "0x2DC1760", VA = "0x2DC1760", Slot = "1")]
		~ISteamMatchmakingPlayersResponse()
		{
		}

		[Token(Token = "0x6000222")]
		[Address(RVA = "0x2DC1858", Offset = "0x2DC1858", VA = "0x2DC1858")]
		private void InternalOnAddPlayerToList(IntPtr thisptr, IntPtr pchName, int nScore, float flTimePlayed)
		{
		}

		[Token(Token = "0x6000223")]
		[Address(RVA = "0x2DC1E14", Offset = "0x2DC1E14", VA = "0x2DC1E14")]
		private void InternalOnPlayersFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x6000224")]
		[Address(RVA = "0x2DC2038", Offset = "0x2DC2038", VA = "0x2DC2038")]
		private void InternalOnPlayersRefreshComplete(IntPtr thisptr)
		{
		}

		[Token(Token = "0x6000225")]
		[Address(RVA = "0x2DC225C", Offset = "0x2DC225C", VA = "0x2DC225C")]
		public static explicit operator IntPtr(ISteamMatchmakingPlayersResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000023")]
	public class ISteamMatchmakingRulesResponse
	{
		[Token(Token = "0x200031E")]
		public delegate void RulesResponded(string pchRule, string pchValue);

		[Token(Token = "0x200031F")]
		public delegate void RulesFailedToRespond();

		[Token(Token = "0x2000320")]
		public delegate void RulesRefreshComplete();

		[Token(Token = "0x2000321")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1251ADC", Offset = "0x1251ADC")]
		public delegate void InternalRulesResponded(IntPtr thisptr, IntPtr pchRule, IntPtr pchValue);

		[Token(Token = "0x2000322")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1251AF0", Offset = "0x1251AF0")]
		public delegate void InternalRulesFailedToRespond(IntPtr thisptr);

		[Token(Token = "0x2000323")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x1251B04", Offset = "0x1251B04")]
		public delegate void InternalRulesRefreshComplete(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x2000324")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x40012FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalRulesResponded m_VTRulesResponded;

			[NonSerialized]
			[Token(Token = "0x40012FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalRulesFailedToRespond m_VTRulesFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x40012FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalRulesRefreshComplete m_VTRulesRefreshComplete;

			[Token(Token = "0x6001686")]
			[Address(RVA = "0x2DC301C", Offset = "0x2DC301C", VA = "0x2DC301C")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x4000096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x4000098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x4000099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RulesResponded m_RulesResponded;

		[Token(Token = "0x400009A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RulesFailedToRespond m_RulesFailedToRespond;

		[Token(Token = "0x400009B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RulesRefreshComplete m_RulesRefreshComplete;

		[Token(Token = "0x6000226")]
		[Address(RVA = "0x2DC2D7C", Offset = "0x2DC2D7C", VA = "0x2DC2D7C")]
		public ISteamMatchmakingRulesResponse(RulesResponded onRulesResponded, RulesFailedToRespond onRulesFailedToRespond, RulesRefreshComplete onRulesRefreshComplete)
		{
		}

		[Token(Token = "0x6000227")]
		[Address(RVA = "0x2DC3060", Offset = "0x2DC3060", VA = "0x2DC3060", Slot = "1")]
		~ISteamMatchmakingRulesResponse()
		{
		}

		[Token(Token = "0x6000228")]
		[Address(RVA = "0x2DC3158", Offset = "0x2DC3158", VA = "0x2DC3158")]
		private void InternalOnRulesResponded(IntPtr thisptr, IntPtr pchRule, IntPtr pchValue)
		{
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0x2DC3590", Offset = "0x2DC3590", VA = "0x2DC3590")]
		private void InternalOnRulesFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x600022A")]
		[Address(RVA = "0x2DC37B4", Offset = "0x2DC37B4", VA = "0x2DC37B4")]
		private void InternalOnRulesRefreshComplete(IntPtr thisptr)
		{
		}

		[Token(Token = "0x600022B")]
		[Address(RVA = "0x2DC39D8", Offset = "0x2DC39D8", VA = "0x2DC39D8")]
		public static explicit operator IntPtr(ISteamMatchmakingRulesResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000024")]
	public class InteropHelp
	{
		[Token(Token = "0x2000325")]
		public class UTF8StringHandle : IDisposable
		{
			[Token(Token = "0x6001687")]
			[Address(RVA = "0x2DC642C", Offset = "0x2DC642C", VA = "0x2DC642C")]
			public UTF8StringHandle(string str)
			{
			}

			[Token(Token = "0x6001688")]
			[Address(RVA = "0x2DC6434", Offset = "0x2DC6434", VA = "0x2DC6434", Slot = "4")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x2000326")]
		public class SteamParamStringArray
		{
			[Token(Token = "0x40012FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private IntPtr[] m_Strings;

			[Token(Token = "0x4001300")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private IntPtr m_ptrStrings;

			[Token(Token = "0x4001301")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private IntPtr m_pSteamParamStringArray;

			[Token(Token = "0x6001689")]
			[Address(RVA = "0x2DC5D84", Offset = "0x2DC5D84", VA = "0x2DC5D84")]
			public SteamParamStringArray(IList<string> strings)
			{
			}

			[Token(Token = "0x600168A")]
			[Address(RVA = "0x2DC625C", Offset = "0x2DC625C", VA = "0x2DC625C", Slot = "1")]
			~SteamParamStringArray()
			{
			}

			[Token(Token = "0x600168B")]
			[Address(RVA = "0x2DC6414", Offset = "0x2DC6414", VA = "0x2DC6414")]
			public static implicit operator IntPtr(SteamParamStringArray that)
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x600022C")]
		[Address(RVA = "0x2DC5CA8", Offset = "0x2DC5CA8", VA = "0x2DC5CA8")]
		public static void TestIfPlatformSupported()
		{
		}

		[Token(Token = "0x600022D")]
		[Address(RVA = "0x2DC5D14", Offset = "0x2DC5D14", VA = "0x2DC5D14")]
		public static void TestIfAvailableClient()
		{
		}

		[Token(Token = "0x600022E")]
		[Address(RVA = "0x2DC5D48", Offset = "0x2DC5D48", VA = "0x2DC5D48")]
		public static void TestIfAvailableGameServer()
		{
		}

		[Token(Token = "0x600022F")]
		[Address(RVA = "0x2DC18A4", Offset = "0x2DC18A4", VA = "0x2DC18A4")]
		public static string PtrToStringUTF8(IntPtr nativeUtf8)
		{
			return null;
		}

		[Token(Token = "0x6000230")]
		[Address(RVA = "0x2DC5D7C", Offset = "0x2DC5D7C", VA = "0x2DC5D7C")]
		public InteropHelp()
		{
		}
	}
	[Token(Token = "0x2000025")]
	public class MMKVPMarshaller
	{
		[Token(Token = "0x400009C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr m_pNativeArray;

		[Token(Token = "0x400009D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pArrayEntries;

		[Token(Token = "0x6000231")]
		[Address(RVA = "0x2DC6438", Offset = "0x2DC6438", VA = "0x2DC6438")]
		public MMKVPMarshaller(MatchMakingKeyValuePair_t[] filters)
		{
		}

		[Token(Token = "0x6000232")]
		[Address(RVA = "0x2DC6654", Offset = "0x2DC6654", VA = "0x2DC6654", Slot = "1")]
		~MMKVPMarshaller()
		{
		}

		[Token(Token = "0x6000233")]
		[Address(RVA = "0x2DC6770", Offset = "0x2DC6770", VA = "0x2DC6770")]
		public static implicit operator IntPtr(MMKVPMarshaller that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000026")]
	public class DllCheck
	{
		[Token(Token = "0x6000234")]
		[Address(RVA = "0x23EA1E0", Offset = "0x23EA1E0", VA = "0x23EA1E0")]
		public static bool Test()
		{
			return default(bool);
		}

		[Token(Token = "0x6000235")]
		[Address(RVA = "0x23EA1E8", Offset = "0x23EA1E8", VA = "0x23EA1E8")]
		public DllCheck()
		{
		}
	}
	[Token(Token = "0x2000027")]
	public static class Packsize
	{
		[Token(Token = "0x2000327")]
		private struct ValvePackingSentinel_t
		{
			[Token(Token = "0x4001302")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private uint m_u32;

			[Token(Token = "0x4001303")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private ulong m_u64;

			[Token(Token = "0x4001304")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private ushort m_u16;

			[Token(Token = "0x4001305")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private double m_d;
		}

		[Token(Token = "0x400009E")]
		public const int value = 4;

		[Token(Token = "0x6000236")]
		[Address(RVA = "0x2E7BC04", Offset = "0x2E7BC04", VA = "0x2E7BC04")]
		public static bool Test()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000028")]
	public static class Version
	{
		[Token(Token = "0x400009F")]
		public const string SteamworksNETVersion = "11.0.0";

		[Token(Token = "0x40000A0")]
		public const string SteamworksSDKVersion = "1.41";

		[Token(Token = "0x40000A1")]
		public const string SteamAPIDLLVersion = "01.00.00.01";

		[Token(Token = "0x40000A2")]
		public const int SteamAPIDLLSize = 225056;

		[Token(Token = "0x40000A3")]
		public const int SteamAPI64DLLSize = 249120;
	}
	[Token(Token = "0x2000029")]
	public static class SteamAPI
	{
		[Token(Token = "0x6000237")]
		[Address(RVA = "0x2E7C400", Offset = "0x2E7C400", VA = "0x2E7C400")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x6000238")]
		[Address(RVA = "0x2E7C434", Offset = "0x2E7C434", VA = "0x2E7C434")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x6000239")]
		[Address(RVA = "0x2E7C450", Offset = "0x2E7C450", VA = "0x2E7C450")]
		public static bool RestartAppIfNecessary(AppId_t unOwnAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x600023A")]
		[Address(RVA = "0x2E7C47C", Offset = "0x2E7C47C", VA = "0x2E7C47C")]
		public static void ReleaseCurrentThreadMemory()
		{
		}

		[Token(Token = "0x600023B")]
		[Address(RVA = "0x2E7C498", Offset = "0x2E7C498", VA = "0x2E7C498")]
		public static void RunCallbacks()
		{
		}

		[Token(Token = "0x600023C")]
		[Address(RVA = "0x2E7C4B4", Offset = "0x2E7C4B4", VA = "0x2E7C4B4")]
		public static bool IsSteamRunning()
		{
			return default(bool);
		}

		[Token(Token = "0x600023D")]
		[Address(RVA = "0x2E7C4D0", Offset = "0x2E7C4D0", VA = "0x2E7C4D0")]
		public static HSteamUser GetHSteamUserCurrent()
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x600023E")]
		[Address(RVA = "0x2E7C4FC", Offset = "0x2E7C4FC", VA = "0x2E7C4FC")]
		public static HSteamPipe GetHSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x600023F")]
		[Address(RVA = "0x2E7C528", Offset = "0x2E7C528", VA = "0x2E7C528")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}
	}
	[Token(Token = "0x200002A")]
	public static class GameServer
	{
		[Token(Token = "0x6000240")]
		[Address(RVA = "0x23EA3C8", Offset = "0x23EA3C8", VA = "0x23EA3C8")]
		public static bool Init(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x6000241")]
		[Address(RVA = "0x23EA544", Offset = "0x23EA544", VA = "0x23EA544")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x6000242")]
		[Address(RVA = "0x23EA564", Offset = "0x23EA564", VA = "0x23EA564")]
		public static void RunCallbacks()
		{
		}

		[Token(Token = "0x6000243")]
		[Address(RVA = "0x23EA580", Offset = "0x23EA580", VA = "0x23EA580")]
		public static void ReleaseCurrentThreadMemory()
		{
		}

		[Token(Token = "0x6000244")]
		[Address(RVA = "0x23EA59C", Offset = "0x23EA59C", VA = "0x23EA59C")]
		public static bool BSecure()
		{
			return default(bool);
		}

		[Token(Token = "0x6000245")]
		[Address(RVA = "0x23EA5B8", Offset = "0x23EA5B8", VA = "0x23EA5B8")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000246")]
		[Address(RVA = "0x23E91FC", Offset = "0x23E91FC", VA = "0x23E91FC")]
		public static HSteamPipe GetHSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x6000247")]
		[Address(RVA = "0x23E91D8", Offset = "0x23E91D8", VA = "0x23E91D8")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}
	}
	[Token(Token = "0x200002B")]
	public static class SteamEncryptedAppTicket
	{
		[Token(Token = "0x6000248")]
		[Address(RVA = "0x2E81624", Offset = "0x2E81624", VA = "0x2E81624")]
		public static bool BDecryptTicket(byte[] rgubTicketEncrypted, uint cubTicketEncrypted, byte[] rgubTicketDecrypted, ref uint pcubTicketDecrypted, byte[] rgubKey, int cubKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6000249")]
		[Address(RVA = "0x2E81688", Offset = "0x2E81688", VA = "0x2E81688")]
		public static bool BIsTicketForApp(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x600024A")]
		[Address(RVA = "0x2E816CC", Offset = "0x2E816CC", VA = "0x2E816CC")]
		public static uint GetTicketIssueTime(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(uint);
		}

		[Token(Token = "0x600024B")]
		[Address(RVA = "0x2E81700", Offset = "0x2E81700", VA = "0x2E81700")]
		public static void GetTicketSteamID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID)
		{
		}

		[Token(Token = "0x600024C")]
		[Address(RVA = "0x2E81744", Offset = "0x2E81744", VA = "0x2E81744")]
		public static uint GetTicketAppID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(uint);
		}

		[Token(Token = "0x600024D")]
		[Address(RVA = "0x2E81778", Offset = "0x2E81778", VA = "0x2E81778")]
		public static bool BUserOwnsAppInTicket(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x600024E")]
		[Address(RVA = "0x2E817BC", Offset = "0x2E817BC", VA = "0x2E817BC")]
		public static bool BUserIsVacBanned(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(bool);
		}

		[Token(Token = "0x600024F")]
		[Address(RVA = "0x2E817F0", Offset = "0x2E817F0", VA = "0x2E817F0")]
		public static byte[] GetUserVariableData(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData)
		{
			return null;
		}
	}
	[Token(Token = "0x200002C")]
	internal static class CSteamAPIContext
	{
		[Token(Token = "0x40000A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IntPtr m_pSteamClient;

		[Token(Token = "0x40000A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IntPtr m_pSteamUser;

		[Token(Token = "0x40000A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static IntPtr m_pSteamFriends;

		[Token(Token = "0x40000A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static IntPtr m_pSteamUtils;

		[Token(Token = "0x40000A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static IntPtr m_pSteamMatchmaking;

		[Token(Token = "0x40000A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static IntPtr m_pSteamUserStats;

		[Token(Token = "0x40000AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static IntPtr m_pSteamApps;

		[Token(Token = "0x40000AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static IntPtr m_pSteamMatchmakingServers;

		[Token(Token = "0x40000AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static IntPtr m_pSteamNetworking;

		[Token(Token = "0x40000AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static IntPtr m_pSteamRemoteStorage;

		[Token(Token = "0x40000AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static IntPtr m_pSteamScreenshots;

		[Token(Token = "0x40000AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static IntPtr m_pSteamHTTP;

		[Token(Token = "0x40000B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static IntPtr m_pSteamUnifiedMessages;

		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static IntPtr m_pController;

		[Token(Token = "0x40000B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private static IntPtr m_pSteamUGC;

		[Token(Token = "0x40000B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static IntPtr m_pSteamAppList;

		[Token(Token = "0x40000B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private static IntPtr m_pSteamMusic;

		[Token(Token = "0x40000B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private static IntPtr m_pSteamMusicRemote;

		[Token(Token = "0x40000B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private static IntPtr m_pSteamHTMLSurface;

		[Token(Token = "0x40000B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private static IntPtr m_pSteamInventory;

		[Token(Token = "0x40000B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private static IntPtr m_pSteamVideo;

		[Token(Token = "0x40000B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private static IntPtr m_pSteamParentalSettings;

		[Token(Token = "0x6000250")]
		[Address(RVA = "0x23E7F04", Offset = "0x23E7F04", VA = "0x23E7F04")]
		internal static void Clear()
		{
		}

		[Token(Token = "0x6000251")]
		[Address(RVA = "0x23E8008", Offset = "0x23E8008", VA = "0x23E8008")]
		internal static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x6000252")]
		[Address(RVA = "0x23E86D8", Offset = "0x23E86D8", VA = "0x23E86D8")]
		internal static IntPtr GetSteamClient()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000253")]
		[Address(RVA = "0x23E8728", Offset = "0x23E8728", VA = "0x23E8728")]
		internal static IntPtr GetSteamUser()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000254")]
		[Address(RVA = "0x23E8778", Offset = "0x23E8778", VA = "0x23E8778")]
		internal static IntPtr GetSteamFriends()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000255")]
		[Address(RVA = "0x23E87C8", Offset = "0x23E87C8", VA = "0x23E87C8")]
		internal static IntPtr GetSteamUtils()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000256")]
		[Address(RVA = "0x23E8818", Offset = "0x23E8818", VA = "0x23E8818")]
		internal static IntPtr GetSteamMatchmaking()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000257")]
		[Address(RVA = "0x23E8868", Offset = "0x23E8868", VA = "0x23E8868")]
		internal static IntPtr GetSteamUserStats()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000258")]
		[Address(RVA = "0x23E88B8", Offset = "0x23E88B8", VA = "0x23E88B8")]
		internal static IntPtr GetSteamApps()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000259")]
		[Address(RVA = "0x23E8908", Offset = "0x23E8908", VA = "0x23E8908")]
		internal static IntPtr GetSteamMatchmakingServers()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600025A")]
		[Address(RVA = "0x23E8958", Offset = "0x23E8958", VA = "0x23E8958")]
		internal static IntPtr GetSteamNetworking()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600025B")]
		[Address(RVA = "0x23E89A8", Offset = "0x23E89A8", VA = "0x23E89A8")]
		internal static IntPtr GetSteamRemoteStorage()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600025C")]
		[Address(RVA = "0x23E89F8", Offset = "0x23E89F8", VA = "0x23E89F8")]
		internal static IntPtr GetSteamScreenshots()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600025D")]
		[Address(RVA = "0x23E8A48", Offset = "0x23E8A48", VA = "0x23E8A48")]
		internal static IntPtr GetSteamHTTP()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600025E")]
		[Address(RVA = "0x23E8A98", Offset = "0x23E8A98", VA = "0x23E8A98")]
		internal static IntPtr GetSteamUnifiedMessages()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600025F")]
		[Address(RVA = "0x23E8AE8", Offset = "0x23E8AE8", VA = "0x23E8AE8")]
		internal static IntPtr GetSteamController()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000260")]
		[Address(RVA = "0x23E8B38", Offset = "0x23E8B38", VA = "0x23E8B38")]
		internal static IntPtr GetSteamUGC()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000261")]
		[Address(RVA = "0x23E8B88", Offset = "0x23E8B88", VA = "0x23E8B88")]
		internal static IntPtr GetSteamAppList()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000262")]
		[Address(RVA = "0x23E8BD8", Offset = "0x23E8BD8", VA = "0x23E8BD8")]
		internal static IntPtr GetSteamMusic()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000263")]
		[Address(RVA = "0x23E8C28", Offset = "0x23E8C28", VA = "0x23E8C28")]
		internal static IntPtr GetSteamMusicRemote()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000264")]
		[Address(RVA = "0x23E8C78", Offset = "0x23E8C78", VA = "0x23E8C78")]
		internal static IntPtr GetSteamHTMLSurface()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000265")]
		[Address(RVA = "0x23E8CC8", Offset = "0x23E8CC8", VA = "0x23E8CC8")]
		internal static IntPtr GetSteamInventory()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000266")]
		[Address(RVA = "0x23E8D18", Offset = "0x23E8D18", VA = "0x23E8D18")]
		internal static IntPtr GetSteamVideo()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000267")]
		[Address(RVA = "0x23E8D68", Offset = "0x23E8D68", VA = "0x23E8D68")]
		internal static IntPtr GetSteamParentalSettings()
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x200002D")]
	internal static class CSteamGameServerAPIContext
	{
		[Token(Token = "0x40000BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IntPtr m_pSteamClient;

		[Token(Token = "0x40000BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IntPtr m_pSteamGameServer;

		[Token(Token = "0x40000BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static IntPtr m_pSteamUtils;

		[Token(Token = "0x40000BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static IntPtr m_pSteamNetworking;

		[Token(Token = "0x40000BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static IntPtr m_pSteamGameServerStats;

		[Token(Token = "0x40000BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static IntPtr m_pSteamHTTP;

		[Token(Token = "0x40000C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static IntPtr m_pSteamInventory;

		[Token(Token = "0x40000C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static IntPtr m_pSteamUGC;

		[Token(Token = "0x40000C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static IntPtr m_pSteamApps;

		[Token(Token = "0x6000268")]
		[Address(RVA = "0x23E8DB8", Offset = "0x23E8DB8", VA = "0x23E8DB8")]
		internal static void Clear()
		{
		}

		[Token(Token = "0x6000269")]
		[Address(RVA = "0x23E8E4C", Offset = "0x23E8E4C", VA = "0x23E8E4C")]
		internal static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x600026A")]
		[Address(RVA = "0x23E9220", Offset = "0x23E9220", VA = "0x23E9220")]
		internal static IntPtr GetSteamClient()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600026B")]
		[Address(RVA = "0x23E9270", Offset = "0x23E9270", VA = "0x23E9270")]
		internal static IntPtr GetSteamGameServer()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600026C")]
		[Address(RVA = "0x23E92C0", Offset = "0x23E92C0", VA = "0x23E92C0")]
		internal static IntPtr GetSteamUtils()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600026D")]
		[Address(RVA = "0x23E9310", Offset = "0x23E9310", VA = "0x23E9310")]
		internal static IntPtr GetSteamNetworking()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600026E")]
		[Address(RVA = "0x23E9360", Offset = "0x23E9360", VA = "0x23E9360")]
		internal static IntPtr GetSteamGameServerStats()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600026F")]
		[Address(RVA = "0x23E93B0", Offset = "0x23E93B0", VA = "0x23E93B0")]
		internal static IntPtr GetSteamHTTP()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000270")]
		[Address(RVA = "0x23E9400", Offset = "0x23E9400", VA = "0x23E9400")]
		internal static IntPtr GetSteamInventory()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000271")]
		[Address(RVA = "0x23E9450", Offset = "0x23E9450", VA = "0x23E9450")]
		internal static IntPtr GetSteamUGC()
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000272")]
		[Address(RVA = "0x23E94A0", Offset = "0x23E94A0", VA = "0x23E94A0")]
		internal static IntPtr GetSteamApps()
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x200002E")]
	[SuppressUnmanagedCodeSecurity]
	internal static class NativeMethods
	{
		[Token(Token = "0x40000C3")]
		internal const string NativeLibraryName = "steam_api";

		[Token(Token = "0x40000C4")]
		internal const string NativeLibrary_SDKEncryptedAppTicket = "sdkencryptedappticket";

		[PreserveSig]
		[Token(Token = "0x6000273")]
		[Address(RVA = "0x2DC6984", Offset = "0x2DC6984", VA = "0x2DC6984")]
		public static extern bool SteamAPI_Init();

		[PreserveSig]
		[Token(Token = "0x6000274")]
		[Address(RVA = "0x2DC6A00", Offset = "0x2DC6A00", VA = "0x2DC6A00")]
		public static extern void SteamAPI_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6000275")]
		[Address(RVA = "0x2DC6A70", Offset = "0x2DC6A70", VA = "0x2DC6A70")]
		public static extern bool SteamAPI_RestartAppIfNecessary(AppId_t unOwnAppID);

		[PreserveSig]
		[Token(Token = "0x6000276")]
		[Address(RVA = "0x2DC6AF8", Offset = "0x2DC6AF8", VA = "0x2DC6AF8")]
		public static extern void SteamAPI_ReleaseCurrentThreadMemory();

		[PreserveSig]
		[Token(Token = "0x6000277")]
		[Address(RVA = "0x2DC6B68", Offset = "0x2DC6B68", VA = "0x2DC6B68")]
		public static extern void SteamAPI_WriteMiniDump(uint uStructuredExceptionCode, IntPtr pvExceptionInfo, uint uBuildID);

		[PreserveSig]
		[Token(Token = "0x6000278")]
		[Address(RVA = "0x2DC6C00", Offset = "0x2DC6C00", VA = "0x2DC6C00")]
		public static extern void SteamAPI_SetMiniDumpComment(InteropHelp.UTF8StringHandle pchMsg);

		[PreserveSig]
		[Token(Token = "0x6000279")]
		[Address(RVA = "0x2DC6C1C", Offset = "0x2DC6C1C", VA = "0x2DC6C1C")]
		public static extern void SteamAPI_RunCallbacks();

		[PreserveSig]
		[Token(Token = "0x600027A")]
		[Address(RVA = "0x2DC6C8C", Offset = "0x2DC6C8C", VA = "0x2DC6C8C")]
		public static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int iCallback);

		[PreserveSig]
		[Token(Token = "0x600027B")]
		[Address(RVA = "0x2DC6D1C", Offset = "0x2DC6D1C", VA = "0x2DC6D1C")]
		public static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

		[PreserveSig]
		[Token(Token = "0x600027C")]
		[Address(RVA = "0x2DC6D9C", Offset = "0x2DC6D9C", VA = "0x2DC6D9C")]
		public static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong hAPICall);

		[PreserveSig]
		[Token(Token = "0x600027D")]
		[Address(RVA = "0x2DC6E2C", Offset = "0x2DC6E2C", VA = "0x2DC6E2C")]
		public static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong hAPICall);

		[PreserveSig]
		[Token(Token = "0x600027E")]
		[Address(RVA = "0x2DC6EBC", Offset = "0x2DC6EBC", VA = "0x2DC6EBC")]
		public static extern bool SteamAPI_IsSteamRunning();

		[PreserveSig]
		[Token(Token = "0x600027F")]
		[Address(RVA = "0x2DC6F38", Offset = "0x2DC6F38", VA = "0x2DC6F38")]
		public static extern void Steam_RunCallbacks(HSteamPipe hSteamPipe, bool bGameServerCallbacks);

		[PreserveSig]
		[Token(Token = "0x6000280")]
		[Address(RVA = "0x2DC6FC8", Offset = "0x2DC6FC8", VA = "0x2DC6FC8")]
		public static extern void Steam_RegisterInterfaceFuncs(IntPtr hModule);

		[PreserveSig]
		[Token(Token = "0x6000281")]
		[Address(RVA = "0x2DC7048", Offset = "0x2DC7048", VA = "0x2DC7048")]
		public static extern int Steam_GetHSteamUserCurrent();

		[PreserveSig]
		[Token(Token = "0x6000282")]
		[Address(RVA = "0x2DC70BC", Offset = "0x2DC70BC", VA = "0x2DC70BC")]
		public static extern int SteamAPI_GetSteamInstallPath();

		[PreserveSig]
		[Token(Token = "0x6000283")]
		[Address(RVA = "0x2DC7130", Offset = "0x2DC7130", VA = "0x2DC7130")]
		public static extern int SteamAPI_GetHSteamPipe();

		[PreserveSig]
		[Token(Token = "0x6000284")]
		[Address(RVA = "0x2DC71A4", Offset = "0x2DC71A4", VA = "0x2DC71A4")]
		public static extern void SteamAPI_SetTryCatchCallbacks(bool bTryCatchCallbacks);

		[PreserveSig]
		[Token(Token = "0x6000285")]
		[Address(RVA = "0x2DC7224", Offset = "0x2DC7224", VA = "0x2DC7224")]
		public static extern int SteamAPI_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x6000286")]
		[Address(RVA = "0x2DC7298", Offset = "0x2DC7298", VA = "0x2DC7298")]
		public static extern IntPtr SteamInternal_ContextInit(IntPtr pContextInitData);

		[PreserveSig]
		[Token(Token = "0x6000287")]
		[Address(RVA = "0x2DC7318", Offset = "0x2DC7318", VA = "0x2DC7318")]
		public static extern IntPtr SteamInternal_CreateInterface(InteropHelp.UTF8StringHandle ver);

		[PreserveSig]
		[Token(Token = "0x6000288")]
		[Address(RVA = "0x2DC7334", Offset = "0x2DC7334", VA = "0x2DC7334")]
		public static extern void SteamAPI_UseBreakpadCrashHandler(InteropHelp.UTF8StringHandle pchVersion, InteropHelp.UTF8StringHandle pchDate, InteropHelp.UTF8StringHandle pchTime, bool bFullMemoryDumps, IntPtr pvContext, IntPtr m_pfnPreMinidumpCallback);

		[PreserveSig]
		[Token(Token = "0x6000289")]
		[Address(RVA = "0x2DC7350", Offset = "0x2DC7350", VA = "0x2DC7350")]
		public static extern void SteamAPI_SetBreakpadAppID(uint unAppID);

		[PreserveSig]
		[Token(Token = "0x600028A")]
		[Address(RVA = "0x2DC73D0", Offset = "0x2DC73D0", VA = "0x2DC73D0")]
		public static extern bool SteamGameServer_Init(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x600028B")]
		[Address(RVA = "0x2DC73EC", Offset = "0x2DC73EC", VA = "0x2DC73EC")]
		public static extern void SteamGameServer_Shutdown();

		[PreserveSig]
		[Token(Token = "0x600028C")]
		[Address(RVA = "0x2DC745C", Offset = "0x2DC745C", VA = "0x2DC745C")]
		public static extern void SteamGameServer_RunCallbacks();

		[PreserveSig]
		[Token(Token = "0x600028D")]
		[Address(RVA = "0x2DC74CC", Offset = "0x2DC74CC", VA = "0x2DC74CC")]
		public static extern void SteamGameServer_ReleaseCurrentThreadMemory();

		[PreserveSig]
		[Token(Token = "0x600028E")]
		[Address(RVA = "0x2DC753C", Offset = "0x2DC753C", VA = "0x2DC753C")]
		public static extern bool SteamGameServer_BSecure();

		[PreserveSig]
		[Token(Token = "0x600028F")]
		[Address(RVA = "0x2DC75B8", Offset = "0x2DC75B8", VA = "0x2DC75B8")]
		public static extern ulong SteamGameServer_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x6000290")]
		[Address(RVA = "0x2DC762C", Offset = "0x2DC762C", VA = "0x2DC762C")]
		public static extern int SteamGameServer_GetHSteamPipe();

		[PreserveSig]
		[Token(Token = "0x6000291")]
		[Address(RVA = "0x2DC76A0", Offset = "0x2DC76A0", VA = "0x2DC76A0")]
		public static extern int SteamGameServer_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x6000292")]
		[Address(RVA = "0x2DC7714", Offset = "0x2DC7714", VA = "0x2DC7714")]
		public static extern bool SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x6000293")]
		[Address(RVA = "0x2DC7730", Offset = "0x2DC7730", VA = "0x2DC7730")]
		public static extern IntPtr SteamClient();

		[PreserveSig]
		[Token(Token = "0x6000294")]
		[Address(RVA = "0x2DC77A4", Offset = "0x2DC77A4", VA = "0x2DC77A4")]
		public static extern IntPtr SteamGameServerClient();

		[PreserveSig]
		[Token(Token = "0x6000295")]
		[Address(RVA = "0x2DC7818", Offset = "0x2DC7818", VA = "0x2DC7818")]
		public static extern bool SteamEncryptedAppTicket_BDecryptTicket(byte[] rgubTicketEncrypted, uint cubTicketEncrypted, byte[] rgubTicketDecrypted, ref uint pcubTicketDecrypted, byte[] rgubKey, int cubKey);

		[PreserveSig]
		[Token(Token = "0x6000296")]
		[Address(RVA = "0x2DC78F8", Offset = "0x2DC78F8", VA = "0x2DC78F8")]
		public static extern bool SteamEncryptedAppTicket_BIsTicketForApp(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x6000297")]
		[Address(RVA = "0x2DC79A0", Offset = "0x2DC79A0", VA = "0x2DC79A0")]
		public static extern uint SteamEncryptedAppTicket_GetTicketIssueTime(byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x6000298")]
		[Address(RVA = "0x2DC7A38", Offset = "0x2DC7A38", VA = "0x2DC7A38")]
		public static extern void SteamEncryptedAppTicket_GetTicketSteamID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID);

		[PreserveSig]
		[Token(Token = "0x6000299")]
		[Address(RVA = "0x2DC7AD8", Offset = "0x2DC7AD8", VA = "0x2DC7AD8")]
		public static extern uint SteamEncryptedAppTicket_GetTicketAppID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x600029A")]
		[Address(RVA = "0x2DC7B70", Offset = "0x2DC7B70", VA = "0x2DC7B70")]
		public static extern bool SteamEncryptedAppTicket_BUserOwnsAppInTicket(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x600029B")]
		[Address(RVA = "0x2DC7C18", Offset = "0x2DC7C18", VA = "0x2DC7C18")]
		public static extern bool SteamEncryptedAppTicket_BUserIsVacBanned(byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x600029C")]
		[Address(RVA = "0x2DC7CB8", Offset = "0x2DC7CB8", VA = "0x2DC7CB8")]
		public static extern IntPtr SteamEncryptedAppTicket_GetUserVariableData(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData);

		[PreserveSig]
		[Token(Token = "0x600029D")]
		[Address(RVA = "0x2DC7D58", Offset = "0x2DC7D58", VA = "0x2DC7D58")]
		public static extern uint ISteamAppList_GetNumInstalledApps(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x600029E")]
		[Address(RVA = "0x2DC7DD8", Offset = "0x2DC7DD8", VA = "0x2DC7DD8")]
		public static extern uint ISteamAppList_GetInstalledApps(IntPtr instancePtr, [In][Out] AppId_t[] pvecAppID, uint unMaxAppIDs);

		[PreserveSig]
		[Token(Token = "0x600029F")]
		[Address(RVA = "0x2DC7E78", Offset = "0x2DC7E78", VA = "0x2DC7E78")]
		public static extern int ISteamAppList_GetAppName(IntPtr instancePtr, AppId_t nAppID, IntPtr pchName, int cchNameMax);

		[PreserveSig]
		[Token(Token = "0x60002A0")]
		[Address(RVA = "0x2DC7F20", Offset = "0x2DC7F20", VA = "0x2DC7F20")]
		public static extern int ISteamAppList_GetAppInstallDir(IntPtr instancePtr, AppId_t nAppID, IntPtr pchDirectory, int cchNameMax);

		[PreserveSig]
		[Token(Token = "0x60002A1")]
		[Address(RVA = "0x2DC7FC8", Offset = "0x2DC7FC8", VA = "0x2DC7FC8")]
		public static extern int ISteamAppList_GetAppBuildId(IntPtr instancePtr, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60002A2")]
		[Address(RVA = "0x2DC8058", Offset = "0x2DC8058", VA = "0x2DC8058")]
		public static extern bool ISteamApps_BIsSubscribed(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002A3")]
		[Address(RVA = "0x2DC80E0", Offset = "0x2DC80E0", VA = "0x2DC80E0")]
		public static extern bool ISteamApps_BIsLowViolence(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002A4")]
		[Address(RVA = "0x2DC8168", Offset = "0x2DC8168", VA = "0x2DC8168")]
		public static extern bool ISteamApps_BIsCybercafe(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002A5")]
		[Address(RVA = "0x2DC81F0", Offset = "0x2DC81F0", VA = "0x2DC81F0")]
		public static extern bool ISteamApps_BIsVACBanned(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002A6")]
		[Address(RVA = "0x2DC8278", Offset = "0x2DC8278", VA = "0x2DC8278")]
		public static extern IntPtr ISteamApps_GetCurrentGameLanguage(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002A7")]
		[Address(RVA = "0x2DC82F8", Offset = "0x2DC82F8", VA = "0x2DC82F8")]
		public static extern IntPtr ISteamApps_GetAvailableGameLanguages(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002A8")]
		[Address(RVA = "0x2DC8378", Offset = "0x2DC8378", VA = "0x2DC8378")]
		public static extern bool ISteamApps_BIsSubscribedApp(IntPtr instancePtr, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60002A9")]
		[Address(RVA = "0x2DC8410", Offset = "0x2DC8410", VA = "0x2DC8410")]
		public static extern bool ISteamApps_BIsDlcInstalled(IntPtr instancePtr, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60002AA")]
		[Address(RVA = "0x2DC84A8", Offset = "0x2DC84A8", VA = "0x2DC84A8")]
		public static extern uint ISteamApps_GetEarliestPurchaseUnixTime(IntPtr instancePtr, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60002AB")]
		[Address(RVA = "0x2DC8538", Offset = "0x2DC8538", VA = "0x2DC8538")]
		public static extern bool ISteamApps_BIsSubscribedFromFreeWeekend(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002AC")]
		[Address(RVA = "0x2DC85C0", Offset = "0x2DC85C0", VA = "0x2DC85C0")]
		public static extern int ISteamApps_GetDLCCount(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002AD")]
		[Address(RVA = "0x2DC8640", Offset = "0x2DC8640", VA = "0x2DC8640")]
		public static extern bool ISteamApps_BGetDLCDataByIndex(IntPtr instancePtr, int iDLC, out AppId_t pAppID, out bool pbAvailable, IntPtr pchName, int cchNameBufferSize);

		[PreserveSig]
		[Token(Token = "0x60002AE")]
		[Address(RVA = "0x2DC871C", Offset = "0x2DC871C", VA = "0x2DC871C")]
		public static extern void ISteamApps_InstallDLC(IntPtr instancePtr, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60002AF")]
		[Address(RVA = "0x2DC87AC", Offset = "0x2DC87AC", VA = "0x2DC87AC")]
		public static extern void ISteamApps_UninstallDLC(IntPtr instancePtr, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60002B0")]
		[Address(RVA = "0x2DC883C", Offset = "0x2DC883C", VA = "0x2DC883C")]
		public static extern void ISteamApps_RequestAppProofOfPurchaseKey(IntPtr instancePtr, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60002B1")]
		[Address(RVA = "0x2DC88CC", Offset = "0x2DC88CC", VA = "0x2DC88CC")]
		public static extern bool ISteamApps_GetCurrentBetaName(IntPtr instancePtr, IntPtr pchName, int cchNameBufferSize);

		[PreserveSig]
		[Token(Token = "0x60002B2")]
		[Address(RVA = "0x2DC896C", Offset = "0x2DC896C", VA = "0x2DC896C")]
		public static extern bool ISteamApps_MarkContentCorrupt(IntPtr instancePtr, bool bMissingFilesOnly);

		[PreserveSig]
		[Token(Token = "0x60002B3")]
		[Address(RVA = "0x2DC8A04", Offset = "0x2DC8A04", VA = "0x2DC8A04")]
		public static extern uint ISteamApps_GetInstalledDepots(IntPtr instancePtr, AppId_t appID, [In][Out] DepotId_t[] pvecDepots, uint cMaxDepots);

		[PreserveSig]
		[Token(Token = "0x60002B4")]
		[Address(RVA = "0x2DC8AB4", Offset = "0x2DC8AB4", VA = "0x2DC8AB4")]
		public static extern uint ISteamApps_GetAppInstallDir(IntPtr instancePtr, AppId_t appID, IntPtr pchFolder, uint cchFolderBufferSize);

		[PreserveSig]
		[Token(Token = "0x60002B5")]
		[Address(RVA = "0x2DC8B5C", Offset = "0x2DC8B5C", VA = "0x2DC8B5C")]
		public static extern bool ISteamApps_BIsAppInstalled(IntPtr instancePtr, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60002B6")]
		[Address(RVA = "0x2DC8BF4", Offset = "0x2DC8BF4", VA = "0x2DC8BF4")]
		public static extern ulong ISteamApps_GetAppOwner(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002B7")]
		[Address(RVA = "0x2DC8C74", Offset = "0x2DC8C74", VA = "0x2DC8C74")]
		public static extern IntPtr ISteamApps_GetLaunchQueryParam(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60002B8")]
		[Address(RVA = "0x2DC8C90", Offset = "0x2DC8C90", VA = "0x2DC8C90")]
		public static extern bool ISteamApps_GetDlcDownloadProgress(IntPtr instancePtr, AppId_t nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60002B9")]
		[Address(RVA = "0x2DC8D40", Offset = "0x2DC8D40", VA = "0x2DC8D40")]
		public static extern int ISteamApps_GetAppBuildId(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002BA")]
		[Address(RVA = "0x2DC8DC0", Offset = "0x2DC8DC0", VA = "0x2DC8DC0")]
		public static extern void ISteamApps_RequestAllProofOfPurchaseKeys(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002BB")]
		[Address(RVA = "0x2DC8E40", Offset = "0x2DC8E40", VA = "0x2DC8E40")]
		public static extern ulong ISteamApps_GetFileDetails(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszFileName);

		[PreserveSig]
		[Token(Token = "0x60002BC")]
		[Address(RVA = "0x2DC8E5C", Offset = "0x2DC8E5C", VA = "0x2DC8E5C")]
		public static extern int ISteamClient_CreateSteamPipe(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002BD")]
		[Address(RVA = "0x2DC8EDC", Offset = "0x2DC8EDC", VA = "0x2DC8EDC")]
		public static extern bool ISteamClient_BReleaseSteamPipe(IntPtr instancePtr, HSteamPipe hSteamPipe);

		[PreserveSig]
		[Token(Token = "0x60002BE")]
		[Address(RVA = "0x2DC8F74", Offset = "0x2DC8F74", VA = "0x2DC8F74")]
		public static extern int ISteamClient_ConnectToGlobalUser(IntPtr instancePtr, HSteamPipe hSteamPipe);

		[PreserveSig]
		[Token(Token = "0x60002BF")]
		[Address(RVA = "0x2DC9004", Offset = "0x2DC9004", VA = "0x2DC9004")]
		public static extern int ISteamClient_CreateLocalUser(IntPtr instancePtr, out HSteamPipe phSteamPipe, EAccountType eAccountType);

		[PreserveSig]
		[Token(Token = "0x60002C0")]
		[Address(RVA = "0x2DC909C", Offset = "0x2DC909C", VA = "0x2DC909C")]
		public static extern void ISteamClient_ReleaseUser(IntPtr instancePtr, HSteamPipe hSteamPipe, HSteamUser hUser);

		[PreserveSig]
		[Token(Token = "0x60002C1")]
		[Address(RVA = "0x2DC9134", Offset = "0x2DC9134", VA = "0x2DC9134")]
		public static extern IntPtr ISteamClient_GetISteamUser(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002C2")]
		[Address(RVA = "0x2DC9150", Offset = "0x2DC9150", VA = "0x2DC9150")]
		public static extern IntPtr ISteamClient_GetISteamGameServer(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002C3")]
		[Address(RVA = "0x2DC916C", Offset = "0x2DC916C", VA = "0x2DC916C")]
		public static extern void ISteamClient_SetLocalIPBinding(IntPtr instancePtr, uint unIP, ushort usPort);

		[PreserveSig]
		[Token(Token = "0x60002C4")]
		[Address(RVA = "0x2DC9204", Offset = "0x2DC9204", VA = "0x2DC9204")]
		public static extern IntPtr ISteamClient_GetISteamFriends(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002C5")]
		[Address(RVA = "0x2DC9220", Offset = "0x2DC9220", VA = "0x2DC9220")]
		public static extern IntPtr ISteamClient_GetISteamUtils(IntPtr instancePtr, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002C6")]
		[Address(RVA = "0x2DC923C", Offset = "0x2DC923C", VA = "0x2DC923C")]
		public static extern IntPtr ISteamClient_GetISteamMatchmaking(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002C7")]
		[Address(RVA = "0x2DC9258", Offset = "0x2DC9258", VA = "0x2DC9258")]
		public static extern IntPtr ISteamClient_GetISteamMatchmakingServers(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002C8")]
		[Address(RVA = "0x2DC9274", Offset = "0x2DC9274", VA = "0x2DC9274")]
		public static extern IntPtr ISteamClient_GetISteamGenericInterface(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002C9")]
		[Address(RVA = "0x2DC9290", Offset = "0x2DC9290", VA = "0x2DC9290")]
		public static extern IntPtr ISteamClient_GetISteamUserStats(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002CA")]
		[Address(RVA = "0x2DC92AC", Offset = "0x2DC92AC", VA = "0x2DC92AC")]
		public static extern IntPtr ISteamClient_GetISteamGameServerStats(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002CB")]
		[Address(RVA = "0x2DC92C8", Offset = "0x2DC92C8", VA = "0x2DC92C8")]
		public static extern IntPtr ISteamClient_GetISteamApps(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002CC")]
		[Address(RVA = "0x2DC92E4", Offset = "0x2DC92E4", VA = "0x2DC92E4")]
		public static extern IntPtr ISteamClient_GetISteamNetworking(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002CD")]
		[Address(RVA = "0x2DC9300", Offset = "0x2DC9300", VA = "0x2DC9300")]
		public static extern IntPtr ISteamClient_GetISteamRemoteStorage(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002CE")]
		[Address(RVA = "0x2DC931C", Offset = "0x2DC931C", VA = "0x2DC931C")]
		public static extern IntPtr ISteamClient_GetISteamScreenshots(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002CF")]
		[Address(RVA = "0x2DC9338", Offset = "0x2DC9338", VA = "0x2DC9338")]
		public static extern uint ISteamClient_GetIPCCallCount(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002D0")]
		[Address(RVA = "0x2DC93B8", Offset = "0x2DC93B8", VA = "0x2DC93B8")]
		public static extern void ISteamClient_SetWarningMessageHook(IntPtr instancePtr, SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x60002D1")]
		[Address(RVA = "0x2DC9450", Offset = "0x2DC9450", VA = "0x2DC9450")]
		public static extern bool ISteamClient_BShutdownIfAllPipesClosed(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002D2")]
		[Address(RVA = "0x2DC94D8", Offset = "0x2DC94D8", VA = "0x2DC94D8")]
		public static extern IntPtr ISteamClient_GetISteamHTTP(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002D3")]
		[Address(RVA = "0x2DC94F4", Offset = "0x2DC94F4", VA = "0x2DC94F4")]
		public static extern IntPtr ISteamClient_GetISteamUnifiedMessages(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002D4")]
		[Address(RVA = "0x2DC9510", Offset = "0x2DC9510", VA = "0x2DC9510")]
		public static extern IntPtr ISteamClient_GetISteamController(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002D5")]
		[Address(RVA = "0x2DC952C", Offset = "0x2DC952C", VA = "0x2DC952C")]
		public static extern IntPtr ISteamClient_GetISteamUGC(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002D6")]
		[Address(RVA = "0x2DC9548", Offset = "0x2DC9548", VA = "0x2DC9548")]
		public static extern IntPtr ISteamClient_GetISteamAppList(IntPtr instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002D7")]
		[Address(RVA = "0x2DC9564", Offset = "0x2DC9564", VA = "0x2DC9564")]
		public static extern IntPtr ISteamClient_GetISteamMusic(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002D8")]
		[Address(RVA = "0x2DC9580", Offset = "0x2DC9580", VA = "0x2DC9580")]
		public static extern IntPtr ISteamClient_GetISteamMusicRemote(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002D9")]
		[Address(RVA = "0x2DC959C", Offset = "0x2DC959C", VA = "0x2DC959C")]
		public static extern IntPtr ISteamClient_GetISteamHTMLSurface(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x2DC95B8", Offset = "0x2DC95B8", VA = "0x2DC95B8")]
		public static extern IntPtr ISteamClient_GetISteamInventory(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002DB")]
		[Address(RVA = "0x2DC95D4", Offset = "0x2DC95D4", VA = "0x2DC95D4")]
		public static extern IntPtr ISteamClient_GetISteamVideo(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002DC")]
		[Address(RVA = "0x2DC95F0", Offset = "0x2DC95F0", VA = "0x2DC95F0")]
		public static extern IntPtr ISteamClient_GetISteamParentalSettings(IntPtr instancePtr, HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x60002DD")]
		[Address(RVA = "0x2DC960C", Offset = "0x2DC960C", VA = "0x2DC960C")]
		public static extern bool ISteamController_Init(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002DE")]
		[Address(RVA = "0x2DC9694", Offset = "0x2DC9694", VA = "0x2DC9694")]
		public static extern bool ISteamController_Shutdown(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002DF")]
		[Address(RVA = "0x2DC971C", Offset = "0x2DC971C", VA = "0x2DC971C")]
		public static extern void ISteamController_RunFrame(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002E0")]
		[Address(RVA = "0x2DC979C", Offset = "0x2DC979C", VA = "0x2DC979C")]
		public static extern int ISteamController_GetConnectedControllers(IntPtr instancePtr, [In][Out] ControllerHandle_t[] handlesOut);

		[PreserveSig]
		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x2DC9834", Offset = "0x2DC9834", VA = "0x2DC9834")]
		public static extern bool ISteamController_ShowBindingPanel(IntPtr instancePtr, ControllerHandle_t controllerHandle);

		[PreserveSig]
		[Token(Token = "0x60002E2")]
		[Address(RVA = "0x2DC98CC", Offset = "0x2DC98CC", VA = "0x2DC98CC")]
		public static extern ulong ISteamController_GetActionSetHandle(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszActionSetName);

		[PreserveSig]
		[Token(Token = "0x60002E3")]
		[Address(RVA = "0x2DC98E8", Offset = "0x2DC98E8", VA = "0x2DC98E8")]
		public static extern void ISteamController_ActivateActionSet(IntPtr instancePtr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle);

		[PreserveSig]
		[Token(Token = "0x60002E4")]
		[Address(RVA = "0x2DC9980", Offset = "0x2DC9980", VA = "0x2DC9980")]
		public static extern ulong ISteamController_GetCurrentActionSet(IntPtr instancePtr, ControllerHandle_t controllerHandle);

		[PreserveSig]
		[Token(Token = "0x60002E5")]
		[Address(RVA = "0x2DC9A10", Offset = "0x2DC9A10", VA = "0x2DC9A10")]
		public static extern ulong ISteamController_GetDigitalActionHandle(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszActionName);

		[PreserveSig]
		[Token(Token = "0x60002E6")]
		[Address(RVA = "0x2DC9A2C", Offset = "0x2DC9A2C", VA = "0x2DC9A2C")]
		public static extern ControllerDigitalActionData_t ISteamController_GetDigitalActionData(IntPtr instancePtr, ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle);

		[PreserveSig]
		[Token(Token = "0x60002E7")]
		[Address(RVA = "0x2DC9AC8", Offset = "0x2DC9AC8", VA = "0x2DC9AC8")]
		public static extern int ISteamController_GetDigitalActionOrigins(IntPtr instancePtr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, [In][Out] EControllerActionOrigin[] originsOut);

		[PreserveSig]
		[Token(Token = "0x60002E8")]
		[Address(RVA = "0x2DC9B80", Offset = "0x2DC9B80", VA = "0x2DC9B80")]
		public static extern ulong ISteamController_GetAnalogActionHandle(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszActionName);

		[PreserveSig]
		[Token(Token = "0x60002E9")]
		[Address(RVA = "0x2DC9B9C", Offset = "0x2DC9B9C", VA = "0x2DC9B9C")]
		public static extern ControllerAnalogActionData_t ISteamController_GetAnalogActionData(IntPtr instancePtr, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle);

		[PreserveSig]
		[Token(Token = "0x60002EA")]
		[Address(RVA = "0x2DC9C38", Offset = "0x2DC9C38", VA = "0x2DC9C38")]
		public static extern int ISteamController_GetAnalogActionOrigins(IntPtr instancePtr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, [In][Out] EControllerActionOrigin[] originsOut);

		[PreserveSig]
		[Token(Token = "0x60002EB")]
		[Address(RVA = "0x2DC9CF0", Offset = "0x2DC9CF0", VA = "0x2DC9CF0")]
		public static extern void ISteamController_StopAnalogActionMomentum(IntPtr instancePtr, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction);

		[PreserveSig]
		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x2DC9D88", Offset = "0x2DC9D88", VA = "0x2DC9D88")]
		public static extern void ISteamController_TriggerHapticPulse(IntPtr instancePtr, ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec);

		[PreserveSig]
		[Token(Token = "0x60002ED")]
		[Address(RVA = "0x2DC9E30", Offset = "0x2DC9E30", VA = "0x2DC9E30")]
		public static extern void ISteamController_TriggerRepeatedHapticPulse(IntPtr instancePtr, ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

		[PreserveSig]
		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x2DC9EF8", Offset = "0x2DC9EF8", VA = "0x2DC9EF8")]
		public static extern void ISteamController_TriggerVibration(IntPtr instancePtr, ControllerHandle_t controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);

		[PreserveSig]
		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x2DC9FA0", Offset = "0x2DC9FA0", VA = "0x2DC9FA0")]
		public static extern void ISteamController_SetLEDColor(IntPtr instancePtr, ControllerHandle_t controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

		[PreserveSig]
		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x2DCA060", Offset = "0x2DCA060", VA = "0x2DCA060")]
		public static extern int ISteamController_GetGamepadIndexForController(IntPtr instancePtr, ControllerHandle_t ulControllerHandle);

		[PreserveSig]
		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x2DCA0F0", Offset = "0x2DCA0F0", VA = "0x2DCA0F0")]
		public static extern ulong ISteamController_GetControllerForGamepadIndex(IntPtr instancePtr, int nIndex);

		[PreserveSig]
		[Token(Token = "0x60002F2")]
		[Address(RVA = "0x2DCA180", Offset = "0x2DCA180", VA = "0x2DCA180")]
		public static extern ControllerMotionData_t ISteamController_GetMotionData(IntPtr instancePtr, ControllerHandle_t controllerHandle);

		[PreserveSig]
		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x2DCA218", Offset = "0x2DCA218", VA = "0x2DCA218")]
		public static extern bool ISteamController_ShowDigitalActionOrigins(IntPtr instancePtr, ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle, float flScale, float flXPosition, float flYPosition);

		[PreserveSig]
		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x2DCA2E0", Offset = "0x2DCA2E0", VA = "0x2DCA2E0")]
		public static extern bool ISteamController_ShowAnalogActionOrigins(IntPtr instancePtr, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle, float flScale, float flXPosition, float flYPosition);

		[PreserveSig]
		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x2DCA3A8", Offset = "0x2DCA3A8", VA = "0x2DCA3A8")]
		public static extern IntPtr ISteamController_GetStringForActionOrigin(IntPtr instancePtr, EControllerActionOrigin eOrigin);

		[PreserveSig]
		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x2DCA438", Offset = "0x2DCA438", VA = "0x2DCA438")]
		public static extern IntPtr ISteamController_GetGlyphForActionOrigin(IntPtr instancePtr, EControllerActionOrigin eOrigin);

		[PreserveSig]
		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x2DCA4C8", Offset = "0x2DCA4C8", VA = "0x2DCA4C8")]
		public static extern IntPtr ISteamFriends_GetPersonaName(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x2DCA548", Offset = "0x2DCA548", VA = "0x2DCA548")]
		public static extern ulong ISteamFriends_SetPersonaName(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchPersonaName);

		[PreserveSig]
		[Token(Token = "0x60002F9")]
		[Address(RVA = "0x2DCA564", Offset = "0x2DCA564", VA = "0x2DCA564")]
		public static extern EPersonaState ISteamFriends_GetPersonaState(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60002FA")]
		[Address(RVA = "0x2DCA5E4", Offset = "0x2DCA5E4", VA = "0x2DCA5E4")]
		public static extern int ISteamFriends_GetFriendCount(IntPtr instancePtr, EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x60002FB")]
		[Address(RVA = "0x2DCA674", Offset = "0x2DCA674", VA = "0x2DCA674")]
		public static extern ulong ISteamFriends_GetFriendByIndex(IntPtr instancePtr, int iFriend, EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x60002FC")]
		[Address(RVA = "0x2DCA70C", Offset = "0x2DCA70C", VA = "0x2DCA70C")]
		public static extern EFriendRelationship ISteamFriends_GetFriendRelationship(IntPtr instancePtr, CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60002FD")]
		[Address(RVA = "0x2DCA79C", Offset = "0x2DCA79C", VA = "0x2DCA79C")]
		public static extern EPersonaState ISteamFriends_GetFriendPersonaState(IntPtr instancePtr, CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60002FE")]
		[Address(RVA = "0x2DCA82C", Offset = "0x2DCA82C", VA = "0x2DCA82C")]
		public static extern IntPtr ISteamFriends_GetFriendPersonaName(IntPtr instancePtr, CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x60002FF")]
		[Address(RVA = "0x2DCA8BC", Offset = "0x2DCA8BC", VA = "0x2DCA8BC")]
		public static extern bool ISteamFriends_GetFriendGamePlayed(IntPtr instancePtr, CSteamID steamIDFriend, out FriendGameInfo_t pFriendGameInfo);

		[PreserveSig]
		[Token(Token = "0x6000300")]
		[Address(RVA = "0x2DCA95C", Offset = "0x2DCA95C", VA = "0x2DCA95C")]
		public static extern IntPtr ISteamFriends_GetFriendPersonaNameHistory(IntPtr instancePtr, CSteamID steamIDFriend, int iPersonaName);

		[PreserveSig]
		[Token(Token = "0x6000301")]
		[Address(RVA = "0x2DCA9F4", Offset = "0x2DCA9F4", VA = "0x2DCA9F4")]
		public static extern int ISteamFriends_GetFriendSteamLevel(IntPtr instancePtr, CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000302")]
		[Address(RVA = "0x2DCAA84", Offset = "0x2DCAA84", VA = "0x2DCAA84")]
		public static extern IntPtr ISteamFriends_GetPlayerNickname(IntPtr instancePtr, CSteamID steamIDPlayer);

		[PreserveSig]
		[Token(Token = "0x6000303")]
		[Address(RVA = "0x2DCAB14", Offset = "0x2DCAB14", VA = "0x2DCAB14")]
		public static extern int ISteamFriends_GetFriendsGroupCount(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000304")]
		[Address(RVA = "0x2DCAB94", Offset = "0x2DCAB94", VA = "0x2DCAB94")]
		public static extern short ISteamFriends_GetFriendsGroupIDByIndex(IntPtr instancePtr, int iFG);

		[PreserveSig]
		[Token(Token = "0x6000305")]
		[Address(RVA = "0x2DCAC24", Offset = "0x2DCAC24", VA = "0x2DCAC24")]
		public static extern IntPtr ISteamFriends_GetFriendsGroupName(IntPtr instancePtr, FriendsGroupID_t friendsGroupID);

		[PreserveSig]
		[Token(Token = "0x6000306")]
		[Address(RVA = "0x2DCACB4", Offset = "0x2DCACB4", VA = "0x2DCACB4")]
		public static extern int ISteamFriends_GetFriendsGroupMembersCount(IntPtr instancePtr, FriendsGroupID_t friendsGroupID);

		[PreserveSig]
		[Token(Token = "0x6000307")]
		[Address(RVA = "0x2DCAD44", Offset = "0x2DCAD44", VA = "0x2DCAD44")]
		public static extern void ISteamFriends_GetFriendsGroupMembersList(IntPtr instancePtr, FriendsGroupID_t friendsGroupID, [In][Out] CSteamID[] pOutSteamIDMembers, int nMembersCount);

		[PreserveSig]
		[Token(Token = "0x6000308")]
		[Address(RVA = "0x2DCADF4", Offset = "0x2DCADF4", VA = "0x2DCADF4")]
		public static extern bool ISteamFriends_HasFriend(IntPtr instancePtr, CSteamID steamIDFriend, EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x6000309")]
		[Address(RVA = "0x2DCAE94", Offset = "0x2DCAE94", VA = "0x2DCAE94")]
		public static extern int ISteamFriends_GetClanCount(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x600030A")]
		[Address(RVA = "0x2DCAF14", Offset = "0x2DCAF14", VA = "0x2DCAF14")]
		public static extern ulong ISteamFriends_GetClanByIndex(IntPtr instancePtr, int iClan);

		[PreserveSig]
		[Token(Token = "0x600030B")]
		[Address(RVA = "0x2DCAFA4", Offset = "0x2DCAFA4", VA = "0x2DCAFA4")]
		public static extern IntPtr ISteamFriends_GetClanName(IntPtr instancePtr, CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600030C")]
		[Address(RVA = "0x2DCB034", Offset = "0x2DCB034", VA = "0x2DCB034")]
		public static extern IntPtr ISteamFriends_GetClanTag(IntPtr instancePtr, CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600030D")]
		[Address(RVA = "0x2DCB0C4", Offset = "0x2DCB0C4", VA = "0x2DCB0C4")]
		public static extern bool ISteamFriends_GetClanActivityCounts(IntPtr instancePtr, CSteamID steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

		[PreserveSig]
		[Token(Token = "0x600030E")]
		[Address(RVA = "0x2DCB17C", Offset = "0x2DCB17C", VA = "0x2DCB17C")]
		public static extern ulong ISteamFriends_DownloadClanActivityCounts(IntPtr instancePtr, [In][Out] CSteamID[] psteamIDClans, int cClansToRequest);

		[PreserveSig]
		[Token(Token = "0x600030F")]
		[Address(RVA = "0x2DCB21C", Offset = "0x2DCB21C", VA = "0x2DCB21C")]
		public static extern int ISteamFriends_GetFriendCountFromSource(IntPtr instancePtr, CSteamID steamIDSource);

		[PreserveSig]
		[Token(Token = "0x6000310")]
		[Address(RVA = "0x2DCB2AC", Offset = "0x2DCB2AC", VA = "0x2DCB2AC")]
		public static extern ulong ISteamFriends_GetFriendFromSourceByIndex(IntPtr instancePtr, CSteamID steamIDSource, int iFriend);

		[PreserveSig]
		[Token(Token = "0x6000311")]
		[Address(RVA = "0x2DCB344", Offset = "0x2DCB344", VA = "0x2DCB344")]
		public static extern bool ISteamFriends_IsUserInSource(IntPtr instancePtr, CSteamID steamIDUser, CSteamID steamIDSource);

		[PreserveSig]
		[Token(Token = "0x6000312")]
		[Address(RVA = "0x2DCB3E4", Offset = "0x2DCB3E4", VA = "0x2DCB3E4")]
		public static extern void ISteamFriends_SetInGameVoiceSpeaking(IntPtr instancePtr, CSteamID steamIDUser, bool bSpeaking);

		[PreserveSig]
		[Token(Token = "0x6000313")]
		[Address(RVA = "0x2DCB47C", Offset = "0x2DCB47C", VA = "0x2DCB47C")]
		public static extern void ISteamFriends_ActivateGameOverlay(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchDialog);

		[PreserveSig]
		[Token(Token = "0x6000314")]
		[Address(RVA = "0x2DCB498", Offset = "0x2DCB498", VA = "0x2DCB498")]
		public static extern void ISteamFriends_ActivateGameOverlayToUser(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchDialog, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000315")]
		[Address(RVA = "0x2DCB4B4", Offset = "0x2DCB4B4", VA = "0x2DCB4B4")]
		public static extern void ISteamFriends_ActivateGameOverlayToWebPage(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchURL);

		[PreserveSig]
		[Token(Token = "0x6000316")]
		[Address(RVA = "0x2DCB4D0", Offset = "0x2DCB4D0", VA = "0x2DCB4D0")]
		public static extern void ISteamFriends_ActivateGameOverlayToStore(IntPtr instancePtr, AppId_t nAppID, EOverlayToStoreFlag eFlag);

		[PreserveSig]
		[Token(Token = "0x6000317")]
		[Address(RVA = "0x2DCB568", Offset = "0x2DCB568", VA = "0x2DCB568")]
		public static extern void ISteamFriends_SetPlayedWith(IntPtr instancePtr, CSteamID steamIDUserPlayedWith);

		[PreserveSig]
		[Token(Token = "0x6000318")]
		[Address(RVA = "0x2DCB5F8", Offset = "0x2DCB5F8", VA = "0x2DCB5F8")]
		public static extern void ISteamFriends_ActivateGameOverlayInviteDialog(IntPtr instancePtr, CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000319")]
		[Address(RVA = "0x2DCB688", Offset = "0x2DCB688", VA = "0x2DCB688")]
		public static extern int ISteamFriends_GetSmallFriendAvatar(IntPtr instancePtr, CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600031A")]
		[Address(RVA = "0x2DCB718", Offset = "0x2DCB718", VA = "0x2DCB718")]
		public static extern int ISteamFriends_GetMediumFriendAvatar(IntPtr instancePtr, CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600031B")]
		[Address(RVA = "0x2DCB7A8", Offset = "0x2DCB7A8", VA = "0x2DCB7A8")]
		public static extern int ISteamFriends_GetLargeFriendAvatar(IntPtr instancePtr, CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600031C")]
		[Address(RVA = "0x2DCB838", Offset = "0x2DCB838", VA = "0x2DCB838")]
		public static extern bool ISteamFriends_RequestUserInformation(IntPtr instancePtr, CSteamID steamIDUser, bool bRequireNameOnly);

		[PreserveSig]
		[Token(Token = "0x600031D")]
		[Address(RVA = "0x2DCB8D8", Offset = "0x2DCB8D8", VA = "0x2DCB8D8")]
		public static extern ulong ISteamFriends_RequestClanOfficerList(IntPtr instancePtr, CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600031E")]
		[Address(RVA = "0x2DCB968", Offset = "0x2DCB968", VA = "0x2DCB968")]
		public static extern ulong ISteamFriends_GetClanOwner(IntPtr instancePtr, CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600031F")]
		[Address(RVA = "0x2DCB9F8", Offset = "0x2DCB9F8", VA = "0x2DCB9F8")]
		public static extern int ISteamFriends_GetClanOfficerCount(IntPtr instancePtr, CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000320")]
		[Address(RVA = "0x2DCBA88", Offset = "0x2DCBA88", VA = "0x2DCBA88")]
		public static extern ulong ISteamFriends_GetClanOfficerByIndex(IntPtr instancePtr, CSteamID steamIDClan, int iOfficer);

		[PreserveSig]
		[Token(Token = "0x6000321")]
		[Address(RVA = "0x2DCBB20", Offset = "0x2DCBB20", VA = "0x2DCBB20")]
		public static extern uint ISteamFriends_GetUserRestrictions(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000322")]
		[Address(RVA = "0x2DCBBA0", Offset = "0x2DCBBA0", VA = "0x2DCBBA0")]
		public static extern bool ISteamFriends_SetRichPresence(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x6000323")]
		[Address(RVA = "0x2DCBBBC", Offset = "0x2DCBBBC", VA = "0x2DCBBBC")]
		public static extern void ISteamFriends_ClearRichPresence(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000324")]
		[Address(RVA = "0x2DCBC3C", Offset = "0x2DCBC3C", VA = "0x2DCBC3C")]
		public static extern IntPtr ISteamFriends_GetFriendRichPresence(IntPtr instancePtr, CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x6000325")]
		[Address(RVA = "0x2DCBC58", Offset = "0x2DCBC58", VA = "0x2DCBC58")]
		public static extern int ISteamFriends_GetFriendRichPresenceKeyCount(IntPtr instancePtr, CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000326")]
		[Address(RVA = "0x2DCBCE8", Offset = "0x2DCBCE8", VA = "0x2DCBCE8")]
		public static extern IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(IntPtr instancePtr, CSteamID steamIDFriend, int iKey);

		[PreserveSig]
		[Token(Token = "0x6000327")]
		[Address(RVA = "0x2DCBD80", Offset = "0x2DCBD80", VA = "0x2DCBD80")]
		public static extern void ISteamFriends_RequestFriendRichPresence(IntPtr instancePtr, CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000328")]
		[Address(RVA = "0x2DCBE10", Offset = "0x2DCBE10", VA = "0x2DCBE10")]
		public static extern bool ISteamFriends_InviteUserToGame(IntPtr instancePtr, CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchConnectString);

		[PreserveSig]
		[Token(Token = "0x6000329")]
		[Address(RVA = "0x2DCBE2C", Offset = "0x2DCBE2C", VA = "0x2DCBE2C")]
		public static extern int ISteamFriends_GetCoplayFriendCount(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x600032A")]
		[Address(RVA = "0x2DCBEAC", Offset = "0x2DCBEAC", VA = "0x2DCBEAC")]
		public static extern ulong ISteamFriends_GetCoplayFriend(IntPtr instancePtr, int iCoplayFriend);

		[PreserveSig]
		[Token(Token = "0x600032B")]
		[Address(RVA = "0x2DCBF3C", Offset = "0x2DCBF3C", VA = "0x2DCBF3C")]
		public static extern int ISteamFriends_GetFriendCoplayTime(IntPtr instancePtr, CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600032C")]
		[Address(RVA = "0x2DCBFCC", Offset = "0x2DCBFCC", VA = "0x2DCBFCC")]
		public static extern uint ISteamFriends_GetFriendCoplayGame(IntPtr instancePtr, CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600032D")]
		[Address(RVA = "0x2DCC05C", Offset = "0x2DCC05C", VA = "0x2DCC05C")]
		public static extern ulong ISteamFriends_JoinClanChatRoom(IntPtr instancePtr, CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600032E")]
		[Address(RVA = "0x2DCC0EC", Offset = "0x2DCC0EC", VA = "0x2DCC0EC")]
		public static extern bool ISteamFriends_LeaveClanChatRoom(IntPtr instancePtr, CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600032F")]
		[Address(RVA = "0x2DCC184", Offset = "0x2DCC184", VA = "0x2DCC184")]
		public static extern int ISteamFriends_GetClanChatMemberCount(IntPtr instancePtr, CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000330")]
		[Address(RVA = "0x2DCC214", Offset = "0x2DCC214", VA = "0x2DCC214")]
		public static extern ulong ISteamFriends_GetChatMemberByIndex(IntPtr instancePtr, CSteamID steamIDClan, int iUser);

		[PreserveSig]
		[Token(Token = "0x6000331")]
		[Address(RVA = "0x2DCC2AC", Offset = "0x2DCC2AC", VA = "0x2DCC2AC")]
		public static extern bool ISteamFriends_SendClanChatMessage(IntPtr instancePtr, CSteamID steamIDClanChat, InteropHelp.UTF8StringHandle pchText);

		[PreserveSig]
		[Token(Token = "0x6000332")]
		[Address(RVA = "0x2DCC2C8", Offset = "0x2DCC2C8", VA = "0x2DCC2C8")]
		public static extern int ISteamFriends_GetClanChatMessage(IntPtr instancePtr, CSteamID steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out EChatEntryType peChatEntryType, out CSteamID psteamidChatter);

		[PreserveSig]
		[Token(Token = "0x6000333")]
		[Address(RVA = "0x2DCC390", Offset = "0x2DCC390", VA = "0x2DCC390")]
		public static extern bool ISteamFriends_IsClanChatAdmin(IntPtr instancePtr, CSteamID steamIDClanChat, CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000334")]
		[Address(RVA = "0x2DCC430", Offset = "0x2DCC430", VA = "0x2DCC430")]
		public static extern bool ISteamFriends_IsClanChatWindowOpenInSteam(IntPtr instancePtr, CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x6000335")]
		[Address(RVA = "0x2DCC4C8", Offset = "0x2DCC4C8", VA = "0x2DCC4C8")]
		public static extern bool ISteamFriends_OpenClanChatWindowInSteam(IntPtr instancePtr, CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x6000336")]
		[Address(RVA = "0x2DCC560", Offset = "0x2DCC560", VA = "0x2DCC560")]
		public static extern bool ISteamFriends_CloseClanChatWindowInSteam(IntPtr instancePtr, CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x6000337")]
		[Address(RVA = "0x2DCC5F8", Offset = "0x2DCC5F8", VA = "0x2DCC5F8")]
		public static extern bool ISteamFriends_SetListenForFriendsMessages(IntPtr instancePtr, bool bInterceptEnabled);

		[PreserveSig]
		[Token(Token = "0x6000338")]
		[Address(RVA = "0x2DCC690", Offset = "0x2DCC690", VA = "0x2DCC690")]
		public static extern bool ISteamFriends_ReplyToFriendMessage(IntPtr instancePtr, CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchMsgToSend);

		[PreserveSig]
		[Token(Token = "0x6000339")]
		[Address(RVA = "0x2DCC6AC", Offset = "0x2DCC6AC", VA = "0x2DCC6AC")]
		public static extern int ISteamFriends_GetFriendMessage(IntPtr instancePtr, CSteamID steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out EChatEntryType peChatEntryType);

		[PreserveSig]
		[Token(Token = "0x600033A")]
		[Address(RVA = "0x2DCC76C", Offset = "0x2DCC76C", VA = "0x2DCC76C")]
		public static extern ulong ISteamFriends_GetFollowerCount(IntPtr instancePtr, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x600033B")]
		[Address(RVA = "0x2DCC7FC", Offset = "0x2DCC7FC", VA = "0x2DCC7FC")]
		public static extern ulong ISteamFriends_IsFollowing(IntPtr instancePtr, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x600033C")]
		[Address(RVA = "0x2DCC88C", Offset = "0x2DCC88C", VA = "0x2DCC88C")]
		public static extern ulong ISteamFriends_EnumerateFollowingList(IntPtr instancePtr, uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x600033D")]
		[Address(RVA = "0x2DCC91C", Offset = "0x2DCC91C", VA = "0x2DCC91C")]
		public static extern bool ISteamGameServer_InitGameServer(IntPtr instancePtr, uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId_t nGameAppId, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x600033E")]
		[Address(RVA = "0x2DCC938", Offset = "0x2DCC938", VA = "0x2DCC938")]
		public static extern void ISteamGameServer_SetProduct(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszProduct);

		[PreserveSig]
		[Token(Token = "0x600033F")]
		[Address(RVA = "0x2DCC954", Offset = "0x2DCC954", VA = "0x2DCC954")]
		public static extern void ISteamGameServer_SetGameDescription(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszGameDescription);

		[PreserveSig]
		[Token(Token = "0x6000340")]
		[Address(RVA = "0x2DCC970", Offset = "0x2DCC970", VA = "0x2DCC970")]
		public static extern void ISteamGameServer_SetModDir(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszModDir);

		[PreserveSig]
		[Token(Token = "0x6000341")]
		[Address(RVA = "0x2DCC98C", Offset = "0x2DCC98C", VA = "0x2DCC98C")]
		public static extern void ISteamGameServer_SetDedicatedServer(IntPtr instancePtr, bool bDedicated);

		[PreserveSig]
		[Token(Token = "0x6000342")]
		[Address(RVA = "0x2DCCA1C", Offset = "0x2DCCA1C", VA = "0x2DCCA1C")]
		public static extern void ISteamGameServer_LogOn(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszToken);

		[PreserveSig]
		[Token(Token = "0x6000343")]
		[Address(RVA = "0x2DCCA38", Offset = "0x2DCCA38", VA = "0x2DCCA38")]
		public static extern void ISteamGameServer_LogOnAnonymous(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000344")]
		[Address(RVA = "0x2DCCAB8", Offset = "0x2DCCAB8", VA = "0x2DCCAB8")]
		public static extern void ISteamGameServer_LogOff(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000345")]
		[Address(RVA = "0x2DCCB38", Offset = "0x2DCCB38", VA = "0x2DCCB38")]
		public static extern bool ISteamGameServer_BLoggedOn(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000346")]
		[Address(RVA = "0x2DCCBC0", Offset = "0x2DCCBC0", VA = "0x2DCCBC0")]
		public static extern bool ISteamGameServer_BSecure(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000347")]
		[Address(RVA = "0x2DCCC48", Offset = "0x2DCCC48", VA = "0x2DCCC48")]
		public static extern ulong ISteamGameServer_GetSteamID(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000348")]
		[Address(RVA = "0x2DCCCC8", Offset = "0x2DCCCC8", VA = "0x2DCCCC8")]
		public static extern bool ISteamGameServer_WasRestartRequested(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000349")]
		[Address(RVA = "0x2DCCD50", Offset = "0x2DCCD50", VA = "0x2DCCD50")]
		public static extern void ISteamGameServer_SetMaxPlayerCount(IntPtr instancePtr, int cPlayersMax);

		[PreserveSig]
		[Token(Token = "0x600034A")]
		[Address(RVA = "0x2DCCDE0", Offset = "0x2DCCDE0", VA = "0x2DCCDE0")]
		public static extern void ISteamGameServer_SetBotPlayerCount(IntPtr instancePtr, int cBotplayers);

		[PreserveSig]
		[Token(Token = "0x600034B")]
		[Address(RVA = "0x2DCCE70", Offset = "0x2DCCE70", VA = "0x2DCCE70")]
		public static extern void ISteamGameServer_SetServerName(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszServerName);

		[PreserveSig]
		[Token(Token = "0x600034C")]
		[Address(RVA = "0x2DCCE8C", Offset = "0x2DCCE8C", VA = "0x2DCCE8C")]
		public static extern void ISteamGameServer_SetMapName(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszMapName);

		[PreserveSig]
		[Token(Token = "0x600034D")]
		[Address(RVA = "0x2DCCEA8", Offset = "0x2DCCEA8", VA = "0x2DCCEA8")]
		public static extern void ISteamGameServer_SetPasswordProtected(IntPtr instancePtr, bool bPasswordProtected);

		[PreserveSig]
		[Token(Token = "0x600034E")]
		[Address(RVA = "0x2DCCF38", Offset = "0x2DCCF38", VA = "0x2DCCF38")]
		public static extern void ISteamGameServer_SetSpectatorPort(IntPtr instancePtr, ushort unSpectatorPort);

		[PreserveSig]
		[Token(Token = "0x600034F")]
		[Address(RVA = "0x2DCCFC8", Offset = "0x2DCCFC8", VA = "0x2DCCFC8")]
		public static extern void ISteamGameServer_SetSpectatorServerName(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszSpectatorServerName);

		[PreserveSig]
		[Token(Token = "0x6000350")]
		[Address(RVA = "0x2DCCFE4", Offset = "0x2DCCFE4", VA = "0x2DCCFE4")]
		public static extern void ISteamGameServer_ClearAllKeyValues(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000351")]
		[Address(RVA = "0x2DCD064", Offset = "0x2DCD064", VA = "0x2DCD064")]
		public static extern void ISteamGameServer_SetKeyValue(IntPtr instancePtr, InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x6000352")]
		[Address(RVA = "0x2DCD080", Offset = "0x2DCD080", VA = "0x2DCD080")]
		public static extern void ISteamGameServer_SetGameTags(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchGameTags);

		[PreserveSig]
		[Token(Token = "0x6000353")]
		[Address(RVA = "0x2DCD09C", Offset = "0x2DCD09C", VA = "0x2DCD09C")]
		public static extern void ISteamGameServer_SetGameData(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchGameData);

		[PreserveSig]
		[Token(Token = "0x6000354")]
		[Address(RVA = "0x2DCD0B8", Offset = "0x2DCD0B8", VA = "0x2DCD0B8")]
		public static extern void ISteamGameServer_SetRegion(IntPtr instancePtr, InteropHelp.UTF8StringHandle pszRegion);

		[PreserveSig]
		[Token(Token = "0x6000355")]
		[Address(RVA = "0x2DCD0D4", Offset = "0x2DCD0D4", VA = "0x2DCD0D4")]
		public static extern bool ISteamGameServer_SendUserConnectAndAuthenticate(IntPtr instancePtr, uint unIPClient, byte[] pvAuthBlob, uint cubAuthBlobSize, out CSteamID pSteamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000356")]
		[Address(RVA = "0x2DCD194", Offset = "0x2DCD194", VA = "0x2DCD194")]
		public static extern ulong ISteamGameServer_CreateUnauthenticatedUserConnection(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000357")]
		[Address(RVA = "0x2DCD214", Offset = "0x2DCD214", VA = "0x2DCD214")]
		public static extern void ISteamGameServer_SendUserDisconnect(IntPtr instancePtr, CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000358")]
		[Address(RVA = "0x2DCD2A4", Offset = "0x2DCD2A4", VA = "0x2DCD2A4")]
		public static extern bool ISteamGameServer_BUpdateUserData(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchPlayerName, uint uScore);

		[PreserveSig]
		[Token(Token = "0x6000359")]
		[Address(RVA = "0x2DCD2C0", Offset = "0x2DCD2C0", VA = "0x2DCD2C0")]
		public static extern uint ISteamGameServer_GetAuthSessionTicket(IntPtr instancePtr, byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x600035A")]
		[Address(RVA = "0x2DCD370", Offset = "0x2DCD370", VA = "0x2DCD370")]
		public static extern EBeginAuthSessionResult ISteamGameServer_BeginAuthSession(IntPtr instancePtr, byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x600035B")]
		[Address(RVA = "0x2DCD420", Offset = "0x2DCD420", VA = "0x2DCD420")]
		public static extern void ISteamGameServer_EndAuthSession(IntPtr instancePtr, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x600035C")]
		[Address(RVA = "0x2DCD4B0", Offset = "0x2DCD4B0", VA = "0x2DCD4B0")]
		public static extern void ISteamGameServer_CancelAuthTicket(IntPtr instancePtr, HAuthTicket hAuthTicket);

		[PreserveSig]
		[Token(Token = "0x600035D")]
		[Address(RVA = "0x2DCD540", Offset = "0x2DCD540", VA = "0x2DCD540")]
		public static extern EUserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(IntPtr instancePtr, CSteamID steamID, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x600035E")]
		[Address(RVA = "0x2DCD5D8", Offset = "0x2DCD5D8", VA = "0x2DCD5D8")]
		public static extern bool ISteamGameServer_RequestUserGroupStatus(IntPtr instancePtr, CSteamID steamIDUser, CSteamID steamIDGroup);

		[PreserveSig]
		[Token(Token = "0x600035F")]
		[Address(RVA = "0x2DCD678", Offset = "0x2DCD678", VA = "0x2DCD678")]
		public static extern void ISteamGameServer_GetGameplayStats(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000360")]
		[Address(RVA = "0x2DCD6F8", Offset = "0x2DCD6F8", VA = "0x2DCD6F8")]
		public static extern ulong ISteamGameServer_GetServerReputation(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000361")]
		[Address(RVA = "0x2DCD778", Offset = "0x2DCD778", VA = "0x2DCD778")]
		public static extern uint ISteamGameServer_GetPublicIP(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000362")]
		[Address(RVA = "0x2DCD7F8", Offset = "0x2DCD7F8", VA = "0x2DCD7F8")]
		public static extern bool ISteamGameServer_HandleIncomingPacket(IntPtr instancePtr, byte[] pData, int cbData, uint srcIP, ushort srcPort);

		[PreserveSig]
		[Token(Token = "0x6000363")]
		[Address(RVA = "0x2DCD8B8", Offset = "0x2DCD8B8", VA = "0x2DCD8B8")]
		public static extern int ISteamGameServer_GetNextOutgoingPacket(IntPtr instancePtr, byte[] pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

		[PreserveSig]
		[Token(Token = "0x6000364")]
		[Address(RVA = "0x2DCD970", Offset = "0x2DCD970", VA = "0x2DCD970")]
		public static extern void ISteamGameServer_EnableHeartbeats(IntPtr instancePtr, bool bActive);

		[PreserveSig]
		[Token(Token = "0x6000365")]
		[Address(RVA = "0x2DCDA00", Offset = "0x2DCDA00", VA = "0x2DCDA00")]
		public static extern void ISteamGameServer_SetHeartbeatInterval(IntPtr instancePtr, int iHeartbeatInterval);

		[PreserveSig]
		[Token(Token = "0x6000366")]
		[Address(RVA = "0x2DCDA90", Offset = "0x2DCDA90", VA = "0x2DCDA90")]
		public static extern void ISteamGameServer_ForceHeartbeat(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000367")]
		[Address(RVA = "0x2DCDB10", Offset = "0x2DCDB10", VA = "0x2DCDB10")]
		public static extern ulong ISteamGameServer_AssociateWithClan(IntPtr instancePtr, CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000368")]
		[Address(RVA = "0x2DCDBA0", Offset = "0x2DCDBA0", VA = "0x2DCDBA0")]
		public static extern ulong ISteamGameServer_ComputeNewPlayerCompatibility(IntPtr instancePtr, CSteamID steamIDNewPlayer);

		[PreserveSig]
		[Token(Token = "0x6000369")]
		[Address(RVA = "0x2DCDC30", Offset = "0x2DCDC30", VA = "0x2DCDC30")]
		public static extern ulong ISteamGameServerStats_RequestUserStats(IntPtr instancePtr, CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x600036A")]
		[Address(RVA = "0x2DCDCC0", Offset = "0x2DCDCC0", VA = "0x2DCDCC0")]
		public static extern bool ISteamGameServerStats_GetUserStat(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x600036B")]
		[Address(RVA = "0x2DCDCDC", Offset = "0x2DCDCDC", VA = "0x2DCDCDC")]
		public static extern bool ISteamGameServerStats_GetUserStat0(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x600036C")]
		[Address(RVA = "0x2DCDCF8", Offset = "0x2DCDCF8", VA = "0x2DCDCF8")]
		public static extern bool ISteamGameServerStats_GetUserAchievement(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x600036D")]
		[Address(RVA = "0x2DCDD14", Offset = "0x2DCDD14", VA = "0x2DCDD14")]
		public static extern bool ISteamGameServerStats_SetUserStat(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, int nData);

		[PreserveSig]
		[Token(Token = "0x600036E")]
		[Address(RVA = "0x2DCDD30", Offset = "0x2DCDD30", VA = "0x2DCDD30")]
		public static extern bool ISteamGameServerStats_SetUserStat0(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, float fData);

		[PreserveSig]
		[Token(Token = "0x600036F")]
		[Address(RVA = "0x2DCDD4C", Offset = "0x2DCDD4C", VA = "0x2DCDD4C")]
		public static extern bool ISteamGameServerStats_UpdateUserAvgRateStat(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, float flCountThisSession, double dSessionLength);

		[PreserveSig]
		[Token(Token = "0x6000370")]
		[Address(RVA = "0x2DCDD68", Offset = "0x2DCDD68", VA = "0x2DCDD68")]
		public static extern bool ISteamGameServerStats_SetUserAchievement(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000371")]
		[Address(RVA = "0x2DCDD84", Offset = "0x2DCDD84", VA = "0x2DCDD84")]
		public static extern bool ISteamGameServerStats_ClearUserAchievement(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000372")]
		[Address(RVA = "0x2DCDDA0", Offset = "0x2DCDDA0", VA = "0x2DCDDA0")]
		public static extern ulong ISteamGameServerStats_StoreUserStats(IntPtr instancePtr, CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000373")]
		[Address(RVA = "0x2DCDE30", Offset = "0x2DCDE30", VA = "0x2DCDE30")]
		public static extern bool ISteamHTMLSurface_Init(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000374")]
		[Address(RVA = "0x2DCDEB8", Offset = "0x2DCDEB8", VA = "0x2DCDEB8")]
		public static extern bool ISteamHTMLSurface_Shutdown(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000375")]
		[Address(RVA = "0x2DCDF40", Offset = "0x2DCDF40", VA = "0x2DCDF40")]
		public static extern ulong ISteamHTMLSurface_CreateBrowser(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchUserAgent, InteropHelp.UTF8StringHandle pchUserCSS);

		[PreserveSig]
		[Token(Token = "0x6000376")]
		[Address(RVA = "0x2DCDF5C", Offset = "0x2DCDF5C", VA = "0x2DCDF5C")]
		public static extern void ISteamHTMLSurface_RemoveBrowser(IntPtr instancePtr, HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000377")]
		[Address(RVA = "0x2DCDFEC", Offset = "0x2DCDFEC", VA = "0x2DCDFEC")]
		public static extern void ISteamHTMLSurface_LoadURL(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchURL, InteropHelp.UTF8StringHandle pchPostData);

		[PreserveSig]
		[Token(Token = "0x6000378")]
		[Address(RVA = "0x2DCE008", Offset = "0x2DCE008", VA = "0x2DCE008")]
		public static extern void ISteamHTMLSurface_SetSize(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, uint unWidth, uint unHeight);

		[PreserveSig]
		[Token(Token = "0x6000379")]
		[Address(RVA = "0x2DCE0B0", Offset = "0x2DCE0B0", VA = "0x2DCE0B0")]
		public static extern void ISteamHTMLSurface_StopLoad(IntPtr instancePtr, HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600037A")]
		[Address(RVA = "0x2DCE140", Offset = "0x2DCE140", VA = "0x2DCE140")]
		public static extern void ISteamHTMLSurface_Reload(IntPtr instancePtr, HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600037B")]
		[Address(RVA = "0x2DCE1D0", Offset = "0x2DCE1D0", VA = "0x2DCE1D0")]
		public static extern void ISteamHTMLSurface_GoBack(IntPtr instancePtr, HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600037C")]
		[Address(RVA = "0x2DCE260", Offset = "0x2DCE260", VA = "0x2DCE260")]
		public static extern void ISteamHTMLSurface_GoForward(IntPtr instancePtr, HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600037D")]
		[Address(RVA = "0x2DCE2F0", Offset = "0x2DCE2F0", VA = "0x2DCE2F0")]
		public static extern void ISteamHTMLSurface_AddHeader(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x600037E")]
		[Address(RVA = "0x2DCE30C", Offset = "0x2DCE30C", VA = "0x2DCE30C")]
		public static extern void ISteamHTMLSurface_ExecuteJavascript(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchScript);

		[PreserveSig]
		[Token(Token = "0x600037F")]
		[Address(RVA = "0x2DCE328", Offset = "0x2DCE328", VA = "0x2DCE328")]
		public static extern void ISteamHTMLSurface_MouseUp(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x6000380")]
		[Address(RVA = "0x2DCE3C0", Offset = "0x2DCE3C0", VA = "0x2DCE3C0")]
		public static extern void ISteamHTMLSurface_MouseDown(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x6000381")]
		[Address(RVA = "0x2DCE458", Offset = "0x2DCE458", VA = "0x2DCE458")]
		public static extern void ISteamHTMLSurface_MouseDoubleClick(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x6000382")]
		[Address(RVA = "0x2DCE4F0", Offset = "0x2DCE4F0", VA = "0x2DCE4F0")]
		public static extern void ISteamHTMLSurface_MouseMove(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, int x, int y);

		[PreserveSig]
		[Token(Token = "0x6000383")]
		[Address(RVA = "0x2DCE598", Offset = "0x2DCE598", VA = "0x2DCE598")]
		public static extern void ISteamHTMLSurface_MouseWheel(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, int nDelta);

		[PreserveSig]
		[Token(Token = "0x6000384")]
		[Address(RVA = "0x2DCE630", Offset = "0x2DCE630", VA = "0x2DCE630")]
		public static extern void ISteamHTMLSurface_KeyDown(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x6000385")]
		[Address(RVA = "0x2DCE6D8", Offset = "0x2DCE6D8", VA = "0x2DCE6D8")]
		public static extern void ISteamHTMLSurface_KeyUp(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x6000386")]
		[Address(RVA = "0x2DCE780", Offset = "0x2DCE780", VA = "0x2DCE780")]
		public static extern void ISteamHTMLSurface_KeyChar(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, uint cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x6000387")]
		[Address(RVA = "0x2DCE828", Offset = "0x2DCE828", VA = "0x2DCE828")]
		public static extern void ISteamHTMLSurface_SetHorizontalScroll(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll);

		[PreserveSig]
		[Token(Token = "0x6000388")]
		[Address(RVA = "0x2DCE8C0", Offset = "0x2DCE8C0", VA = "0x2DCE8C0")]
		public static extern void ISteamHTMLSurface_SetVerticalScroll(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll);

		[PreserveSig]
		[Token(Token = "0x6000389")]
		[Address(RVA = "0x2DCE958", Offset = "0x2DCE958", VA = "0x2DCE958")]
		public static extern void ISteamHTMLSurface_SetKeyFocus(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, bool bHasKeyFocus);

		[PreserveSig]
		[Token(Token = "0x600038A")]
		[Address(RVA = "0x2DCE9F0", Offset = "0x2DCE9F0", VA = "0x2DCE9F0")]
		public static extern void ISteamHTMLSurface_ViewSource(IntPtr instancePtr, HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600038B")]
		[Address(RVA = "0x2DCEA80", Offset = "0x2DCEA80", VA = "0x2DCEA80")]
		public static extern void ISteamHTMLSurface_CopyToClipboard(IntPtr instancePtr, HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600038C")]
		[Address(RVA = "0x2DCEB10", Offset = "0x2DCEB10", VA = "0x2DCEB10")]
		public static extern void ISteamHTMLSurface_PasteFromClipboard(IntPtr instancePtr, HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600038D")]
		[Address(RVA = "0x2DCEBA0", Offset = "0x2DCEBA0", VA = "0x2DCEBA0")]
		public static extern void ISteamHTMLSurface_Find(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchSearchStr, bool bCurrentlyInFind, bool bReverse);

		[PreserveSig]
		[Token(Token = "0x600038E")]
		[Address(RVA = "0x2DCEBBC", Offset = "0x2DCEBBC", VA = "0x2DCEBBC")]
		public static extern void ISteamHTMLSurface_StopFind(IntPtr instancePtr, HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600038F")]
		[Address(RVA = "0x2DCEC4C", Offset = "0x2DCEC4C", VA = "0x2DCEC4C")]
		public static extern void ISteamHTMLSurface_GetLinkAtPosition(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, int x, int y);

		[PreserveSig]
		[Token(Token = "0x6000390")]
		[Address(RVA = "0x2DCECF4", Offset = "0x2DCECF4", VA = "0x2DCECF4")]
		public static extern void ISteamHTMLSurface_SetCookie(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchHostname, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue, InteropHelp.UTF8StringHandle pchPath, uint nExpires, bool bSecure, bool bHTTPOnly);

		[PreserveSig]
		[Token(Token = "0x6000391")]
		[Address(RVA = "0x2DCED10", Offset = "0x2DCED10", VA = "0x2DCED10")]
		public static extern void ISteamHTMLSurface_SetPageScaleFactor(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY);

		[PreserveSig]
		[Token(Token = "0x6000392")]
		[Address(RVA = "0x2DCEDC8", Offset = "0x2DCEDC8", VA = "0x2DCEDC8")]
		public static extern void ISteamHTMLSurface_SetBackgroundMode(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, bool bBackgroundMode);

		[PreserveSig]
		[Token(Token = "0x6000393")]
		[Address(RVA = "0x2DCEE60", Offset = "0x2DCEE60", VA = "0x2DCEE60")]
		public static extern void ISteamHTMLSurface_SetDPIScalingFactor(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, float flDPIScaling);

		[PreserveSig]
		[Token(Token = "0x6000394")]
		[Address(RVA = "0x2DCEF00", Offset = "0x2DCEF00", VA = "0x2DCEF00")]
		public static extern void ISteamHTMLSurface_AllowStartRequest(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, bool bAllowed);

		[PreserveSig]
		[Token(Token = "0x6000395")]
		[Address(RVA = "0x2DCEF98", Offset = "0x2DCEF98", VA = "0x2DCEF98")]
		public static extern void ISteamHTMLSurface_JSDialogResponse(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, bool bResult);

		[PreserveSig]
		[Token(Token = "0x6000396")]
		[Address(RVA = "0x2DCF030", Offset = "0x2DCF030", VA = "0x2DCF030")]
		public static extern void ISteamHTMLSurface_FileLoadDialogResponse(IntPtr instancePtr, HHTMLBrowser unBrowserHandle, IntPtr pchSelectedFiles);

		[PreserveSig]
		[Token(Token = "0x6000397")]
		[Address(RVA = "0x2DCF0C8", Offset = "0x2DCF0C8", VA = "0x2DCF0C8")]
		public static extern uint ISteamHTTP_CreateHTTPRequest(IntPtr instancePtr, EHTTPMethod eHTTPRequestMethod, InteropHelp.UTF8StringHandle pchAbsoluteURL);

		[PreserveSig]
		[Token(Token = "0x6000398")]
		[Address(RVA = "0x2DCF0E4", Offset = "0x2DCF0E4", VA = "0x2DCF0E4")]
		public static extern bool ISteamHTTP_SetHTTPRequestContextValue(IntPtr instancePtr, HTTPRequestHandle hRequest, ulong ulContextValue);

		[PreserveSig]
		[Token(Token = "0x6000399")]
		[Address(RVA = "0x2DCF184", Offset = "0x2DCF184", VA = "0x2DCF184")]
		public static extern bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(IntPtr instancePtr, HTTPRequestHandle hRequest, uint unTimeoutSeconds);

		[PreserveSig]
		[Token(Token = "0x600039A")]
		[Address(RVA = "0x2DCF224", Offset = "0x2DCF224", VA = "0x2DCF224")]
		public static extern bool ISteamHTTP_SetHTTPRequestHeaderValue(IntPtr instancePtr, HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, InteropHelp.UTF8StringHandle pchHeaderValue);

		[PreserveSig]
		[Token(Token = "0x600039B")]
		[Address(RVA = "0x2DCF240", Offset = "0x2DCF240", VA = "0x2DCF240")]
		public static extern bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(IntPtr instancePtr, HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchParamName, InteropHelp.UTF8StringHandle pchParamValue);

		[PreserveSig]
		[Token(Token = "0x600039C")]
		[Address(RVA = "0x2DCF25C", Offset = "0x2DCF25C", VA = "0x2DCF25C")]
		public static extern bool ISteamHTTP_SendHTTPRequest(IntPtr instancePtr, HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x600039D")]
		[Address(RVA = "0x2DCF2FC", Offset = "0x2DCF2FC", VA = "0x2DCF2FC")]
		public static extern bool ISteamHTTP_SendHTTPRequestAndStreamResponse(IntPtr instancePtr, HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x600039E")]
		[Address(RVA = "0x2DCF39C", Offset = "0x2DCF39C", VA = "0x2DCF39C")]
		public static extern bool ISteamHTTP_DeferHTTPRequest(IntPtr instancePtr, HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x600039F")]
		[Address(RVA = "0x2DCF434", Offset = "0x2DCF434", VA = "0x2DCF434")]
		public static extern bool ISteamHTTP_PrioritizeHTTPRequest(IntPtr instancePtr, HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x60003A0")]
		[Address(RVA = "0x2DCF4CC", Offset = "0x2DCF4CC", VA = "0x2DCF4CC")]
		public static extern bool ISteamHTTP_GetHTTPResponseHeaderSize(IntPtr instancePtr, HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, out uint unResponseHeaderSize);

		[PreserveSig]
		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x2DCF4E8", Offset = "0x2DCF4E8", VA = "0x2DCF4E8")]
		public static extern bool ISteamHTTP_GetHTTPResponseHeaderValue(IntPtr instancePtr, HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x60003A2")]
		[Address(RVA = "0x2DCF504", Offset = "0x2DCF504", VA = "0x2DCF504")]
		public static extern bool ISteamHTTP_GetHTTPResponseBodySize(IntPtr instancePtr, HTTPRequestHandle hRequest, out uint unBodySize);

		[PreserveSig]
		[Token(Token = "0x60003A3")]
		[Address(RVA = "0x2DCF5A4", Offset = "0x2DCF5A4", VA = "0x2DCF5A4")]
		public static extern bool ISteamHTTP_GetHTTPResponseBodyData(IntPtr instancePtr, HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x60003A4")]
		[Address(RVA = "0x2DCF65C", Offset = "0x2DCF65C", VA = "0x2DCF65C")]
		public static extern bool ISteamHTTP_GetHTTPStreamingResponseBodyData(IntPtr instancePtr, HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x60003A5")]
		[Address(RVA = "0x2DCF71C", Offset = "0x2DCF71C", VA = "0x2DCF71C")]
		public static extern bool ISteamHTTP_ReleaseHTTPRequest(IntPtr instancePtr, HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x60003A6")]
		[Address(RVA = "0x2DCF7B4", Offset = "0x2DCF7B4", VA = "0x2DCF7B4")]
		public static extern bool ISteamHTTP_GetHTTPDownloadProgressPct(IntPtr instancePtr, HTTPRequestHandle hRequest, out float pflPercentOut);

		[PreserveSig]
		[Token(Token = "0x60003A7")]
		[Address(RVA = "0x2DCF854", Offset = "0x2DCF854", VA = "0x2DCF854")]
		public static extern bool ISteamHTTP_SetHTTPRequestRawPostBody(IntPtr instancePtr, HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchContentType, byte[] pubBody, uint unBodyLen);

		[PreserveSig]
		[Token(Token = "0x60003A8")]
		[Address(RVA = "0x2DCF870", Offset = "0x2DCF870", VA = "0x2DCF870")]
		public static extern uint ISteamHTTP_CreateCookieContainer(IntPtr instancePtr, bool bAllowResponsesToModify);

		[PreserveSig]
		[Token(Token = "0x60003A9")]
		[Address(RVA = "0x2DCF900", Offset = "0x2DCF900", VA = "0x2DCF900")]
		public static extern bool ISteamHTTP_ReleaseCookieContainer(IntPtr instancePtr, HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x60003AA")]
		[Address(RVA = "0x2DCF998", Offset = "0x2DCF998", VA = "0x2DCF998")]
		public static extern bool ISteamHTTP_SetCookie(IntPtr instancePtr, HTTPCookieContainerHandle hCookieContainer, InteropHelp.UTF8StringHandle pchHost, InteropHelp.UTF8StringHandle pchUrl, InteropHelp.UTF8StringHandle pchCookie);

		[PreserveSig]
		[Token(Token = "0x60003AB")]
		[Address(RVA = "0x2DCF9B4", Offset = "0x2DCF9B4", VA = "0x2DCF9B4")]
		public static extern bool ISteamHTTP_SetHTTPRequestCookieContainer(IntPtr instancePtr, HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x60003AC")]
		[Address(RVA = "0x2DCFA54", Offset = "0x2DCFA54", VA = "0x2DCFA54")]
		public static extern bool ISteamHTTP_SetHTTPRequestUserAgentInfo(IntPtr instancePtr, HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchUserAgentInfo);

		[PreserveSig]
		[Token(Token = "0x60003AD")]
		[Address(RVA = "0x2DCFA70", Offset = "0x2DCFA70", VA = "0x2DCFA70")]
		public static extern bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(IntPtr instancePtr, HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);

		[PreserveSig]
		[Token(Token = "0x60003AE")]
		[Address(RVA = "0x2DCFB10", Offset = "0x2DCFB10", VA = "0x2DCFB10")]
		public static extern bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(IntPtr instancePtr, HTTPRequestHandle hRequest, uint unMilliseconds);

		[PreserveSig]
		[Token(Token = "0x60003AF")]
		[Address(RVA = "0x2DCFBB0", Offset = "0x2DCFBB0", VA = "0x2DCFBB0")]
		public static extern bool ISteamHTTP_GetHTTPRequestWasTimedOut(IntPtr instancePtr, HTTPRequestHandle hRequest, out bool pbWasTimedOut);

		[PreserveSig]
		[Token(Token = "0x60003B0")]
		[Address(RVA = "0x2DCFC64", Offset = "0x2DCFC64", VA = "0x2DCFC64")]
		public static extern EResult ISteamInventory_GetResultStatus(IntPtr instancePtr, SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x60003B1")]
		[Address(RVA = "0x2DCFCF4", Offset = "0x2DCFCF4", VA = "0x2DCFCF4")]
		public static extern bool ISteamInventory_GetResultItems(IntPtr instancePtr, SteamInventoryResult_t resultHandle, [In][Out] SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize);

		[PreserveSig]
		[Token(Token = "0x60003B2")]
		[Address(RVA = "0x2DCFDAC", Offset = "0x2DCFDAC", VA = "0x2DCFDAC")]
		public static extern bool ISteamInventory_GetResultItemProperty(IntPtr instancePtr, SteamInventoryResult_t resultHandle, uint unItemIndex, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut);

		[PreserveSig]
		[Token(Token = "0x60003B3")]
		[Address(RVA = "0x2DCFDC8", Offset = "0x2DCFDC8", VA = "0x2DCFDC8")]
		public static extern uint ISteamInventory_GetResultTimestamp(IntPtr instancePtr, SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x60003B4")]
		[Address(RVA = "0x2DCFE58", Offset = "0x2DCFE58", VA = "0x2DCFE58")]
		public static extern bool ISteamInventory_CheckResultSteamID(IntPtr instancePtr, SteamInventoryResult_t resultHandle, CSteamID steamIDExpected);

		[PreserveSig]
		[Token(Token = "0x60003B5")]
		[Address(RVA = "0x2DCFEF8", Offset = "0x2DCFEF8", VA = "0x2DCFEF8")]
		public static extern void ISteamInventory_DestroyResult(IntPtr instancePtr, SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x60003B6")]
		[Address(RVA = "0x2DCFF88", Offset = "0x2DCFF88", VA = "0x2DCFF88")]
		public static extern bool ISteamInventory_GetAllItems(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x60003B7")]
		[Address(RVA = "0x2DD0020", Offset = "0x2DD0020", VA = "0x2DD0020")]
		public static extern bool ISteamInventory_GetItemsByID(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs);

		[PreserveSig]
		[Token(Token = "0x60003B8")]
		[Address(RVA = "0x2DD00D8", Offset = "0x2DD00D8", VA = "0x2DD00D8")]
		public static extern bool ISteamInventory_SerializeResult(IntPtr instancePtr, SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize);

		[PreserveSig]
		[Token(Token = "0x60003B9")]
		[Address(RVA = "0x2DD0190", Offset = "0x2DD0190", VA = "0x2DD0190")]
		public static extern bool ISteamInventory_DeserializeResult(IntPtr instancePtr, out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

		[PreserveSig]
		[Token(Token = "0x60003BA")]
		[Address(RVA = "0x2DD0250", Offset = "0x2DD0250", VA = "0x2DD0250")]
		public static extern bool ISteamInventory_GenerateItems(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, [In][Out] uint[] punArrayQuantity, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x60003BB")]
		[Address(RVA = "0x2DD0318", Offset = "0x2DD0318", VA = "0x2DD0318")]
		public static extern bool ISteamInventory_GrantPromoItems(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x60003BC")]
		[Address(RVA = "0x2DD03B0", Offset = "0x2DD03B0", VA = "0x2DD03B0")]
		public static extern bool ISteamInventory_AddPromoItem(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef);

		[PreserveSig]
		[Token(Token = "0x60003BD")]
		[Address(RVA = "0x2DD0450", Offset = "0x2DD0450", VA = "0x2DD0450")]
		public static extern bool ISteamInventory_AddPromoItems(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x60003BE")]
		[Address(RVA = "0x2DD0508", Offset = "0x2DD0508", VA = "0x2DD0508")]
		public static extern bool ISteamInventory_ConsumeItem(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity);

		[PreserveSig]
		[Token(Token = "0x60003BF")]
		[Address(RVA = "0x2DD05B8", Offset = "0x2DD05B8", VA = "0x2DD05B8")]
		public static extern bool ISteamInventory_ExchangeItems(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayGenerate, [In][Out] uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, [In][Out] SteamItemInstanceID_t[] pArrayDestroy, [In][Out] uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

		[PreserveSig]
		[Token(Token = "0x60003C0")]
		[Address(RVA = "0x2DD06B8", Offset = "0x2DD06B8", VA = "0x2DD06B8")]
		public static extern bool ISteamInventory_TransferItemQuantity(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest);

		[PreserveSig]
		[Token(Token = "0x60003C1")]
		[Address(RVA = "0x2DD0770", Offset = "0x2DD0770", VA = "0x2DD0770")]
		public static extern void ISteamInventory_SendItemDropHeartbeat(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60003C2")]
		[Address(RVA = "0x2DD07F0", Offset = "0x2DD07F0", VA = "0x2DD07F0")]
		public static extern bool ISteamInventory_TriggerItemDrop(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition);

		[PreserveSig]
		[Token(Token = "0x60003C3")]
		[Address(RVA = "0x2DD0890", Offset = "0x2DD0890", VA = "0x2DD0890")]
		public static extern bool ISteamInventory_TradeItems(IntPtr instancePtr, out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, [In][Out] SteamItemInstanceID_t[] pArrayGive, [In][Out] uint[] pArrayGiveQuantity, uint nArrayGiveLength, [In][Out] SteamItemInstanceID_t[] pArrayGet, [In][Out] uint[] pArrayGetQuantity, uint nArrayGetLength);

		[PreserveSig]
		[Token(Token = "0x60003C4")]
		[Address(RVA = "0x2DD0998", Offset = "0x2DD0998", VA = "0x2DD0998")]
		public static extern bool ISteamInventory_LoadItemDefinitions(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x2DD0A20", Offset = "0x2DD0A20", VA = "0x2DD0A20")]
		public static extern bool ISteamInventory_GetItemDefinitionIDs(IntPtr instancePtr, [In][Out] SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x60003C6")]
		[Address(RVA = "0x2DD0AC8", Offset = "0x2DD0AC8", VA = "0x2DD0AC8")]
		public static extern bool ISteamInventory_GetItemDefinitionProperty(IntPtr instancePtr, SteamItemDef_t iDefinition, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut);

		[PreserveSig]
		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x2DD0AE4", Offset = "0x2DD0AE4", VA = "0x2DD0AE4")]
		public static extern ulong ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(IntPtr instancePtr, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60003C8")]
		[Address(RVA = "0x2DD0B74", Offset = "0x2DD0B74", VA = "0x2DD0B74")]
		public static extern bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(IntPtr instancePtr, CSteamID steamID, [In][Out] SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x2DD0C2C", Offset = "0x2DD0C2C", VA = "0x2DD0C2C")]
		public static extern int ISteamMatchmaking_GetFavoriteGameCount(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60003CA")]
		[Address(RVA = "0x2DD0CAC", Offset = "0x2DD0CAC", VA = "0x2DD0CAC")]
		public static extern bool ISteamMatchmaking_GetFavoriteGame(IntPtr instancePtr, int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

		[PreserveSig]
		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x2DD0D8C", Offset = "0x2DD0D8C", VA = "0x2DD0D8C")]
		public static extern int ISteamMatchmaking_AddFavoriteGame(IntPtr instancePtr, AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

		[PreserveSig]
		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x2DD0E54", Offset = "0x2DD0E54", VA = "0x2DD0E54")]
		public static extern bool ISteamMatchmaking_RemoveFavoriteGame(IntPtr instancePtr, AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

		[PreserveSig]
		[Token(Token = "0x60003CD")]
		[Address(RVA = "0x2DD0F1C", Offset = "0x2DD0F1C", VA = "0x2DD0F1C")]
		public static extern ulong ISteamMatchmaking_RequestLobbyList(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x2DD0F9C", Offset = "0x2DD0F9C", VA = "0x2DD0F9C")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListStringFilter(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchKeyToMatch, InteropHelp.UTF8StringHandle pchValueToMatch, ELobbyComparison eComparisonType);

		[PreserveSig]
		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x2DD0FB8", Offset = "0x2DD0FB8", VA = "0x2DD0FB8")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType);

		[PreserveSig]
		[Token(Token = "0x60003D0")]
		[Address(RVA = "0x2DD0FD4", Offset = "0x2DD0FD4", VA = "0x2DD0FD4")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchKeyToMatch, int nValueToBeCloseTo);

		[PreserveSig]
		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x2DD0FF0", Offset = "0x2DD0FF0", VA = "0x2DD0FF0")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(IntPtr instancePtr, int nSlotsAvailable);

		[PreserveSig]
		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x2DD1080", Offset = "0x2DD1080", VA = "0x2DD1080")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(IntPtr instancePtr, ELobbyDistanceFilter eLobbyDistanceFilter);

		[PreserveSig]
		[Token(Token = "0x60003D3")]
		[Address(RVA = "0x2DD1110", Offset = "0x2DD1110", VA = "0x2DD1110")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(IntPtr instancePtr, int cMaxResults);

		[PreserveSig]
		[Token(Token = "0x60003D4")]
		[Address(RVA = "0x2DD11A0", Offset = "0x2DD11A0", VA = "0x2DD11A0")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(IntPtr instancePtr, CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60003D5")]
		[Address(RVA = "0x2DD1230", Offset = "0x2DD1230", VA = "0x2DD1230")]
		public static extern ulong ISteamMatchmaking_GetLobbyByIndex(IntPtr instancePtr, int iLobby);

		[PreserveSig]
		[Token(Token = "0x60003D6")]
		[Address(RVA = "0x2DD12C0", Offset = "0x2DD12C0", VA = "0x2DD12C0")]
		public static extern ulong ISteamMatchmaking_CreateLobby(IntPtr instancePtr, ELobbyType eLobbyType, int cMaxMembers);

		[PreserveSig]
		[Token(Token = "0x60003D7")]
		[Address(RVA = "0x2DD1358", Offset = "0x2DD1358", VA = "0x2DD1358")]
		public static extern ulong ISteamMatchmaking_JoinLobby(IntPtr instancePtr, CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60003D8")]
		[Address(RVA = "0x2DD13E8", Offset = "0x2DD13E8", VA = "0x2DD13E8")]
		public static extern void ISteamMatchmaking_LeaveLobby(IntPtr instancePtr, CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60003D9")]
		[Address(RVA = "0x2DD1478", Offset = "0x2DD1478", VA = "0x2DD1478")]
		public static extern bool ISteamMatchmaking_InviteUserToLobby(IntPtr instancePtr, CSteamID steamIDLobby, CSteamID steamIDInvitee);

		[PreserveSig]
		[Token(Token = "0x60003DA")]
		[Address(RVA = "0x2DD1518", Offset = "0x2DD1518", VA = "0x2DD1518")]
		public static extern int ISteamMatchmaking_GetNumLobbyMembers(IntPtr instancePtr, CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60003DB")]
		[Address(RVA = "0x2DD15A8", Offset = "0x2DD15A8", VA = "0x2DD15A8")]
		public static extern ulong ISteamMatchmaking_GetLobbyMemberByIndex(IntPtr instancePtr, CSteamID steamIDLobby, int iMember);

		[PreserveSig]
		[Token(Token = "0x60003DC")]
		[Address(RVA = "0x2DD1640", Offset = "0x2DD1640", VA = "0x2DD1640")]
		public static extern IntPtr ISteamMatchmaking_GetLobbyData(IntPtr instancePtr, CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60003DD")]
		[Address(RVA = "0x2DD165C", Offset = "0x2DD165C", VA = "0x2DD165C")]
		public static extern bool ISteamMatchmaking_SetLobbyData(IntPtr instancePtr, CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x60003DE")]
		[Address(RVA = "0x2DD1678", Offset = "0x2DD1678", VA = "0x2DD1678")]
		public static extern int ISteamMatchmaking_GetLobbyDataCount(IntPtr instancePtr, CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60003DF")]
		[Address(RVA = "0x2DD1708", Offset = "0x2DD1708", VA = "0x2DD1708")]
		public static extern bool ISteamMatchmaking_GetLobbyDataByIndex(IntPtr instancePtr, CSteamID steamIDLobby, int iLobbyData, IntPtr pchKey, int cchKeyBufferSize, IntPtr pchValue, int cchValueBufferSize);

		[PreserveSig]
		[Token(Token = "0x60003E0")]
		[Address(RVA = "0x2DD17D8", Offset = "0x2DD17D8", VA = "0x2DD17D8")]
		public static extern bool ISteamMatchmaking_DeleteLobbyData(IntPtr instancePtr, CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60003E1")]
		[Address(RVA = "0x2DD17F4", Offset = "0x2DD17F4", VA = "0x2DD17F4")]
		public static extern IntPtr ISteamMatchmaking_GetLobbyMemberData(IntPtr instancePtr, CSteamID steamIDLobby, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60003E2")]
		[Address(RVA = "0x2DD1810", Offset = "0x2DD1810", VA = "0x2DD1810")]
		public static extern void ISteamMatchmaking_SetLobbyMemberData(IntPtr instancePtr, CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x60003E3")]
		[Address(RVA = "0x2DD182C", Offset = "0x2DD182C", VA = "0x2DD182C")]
		public static extern bool ISteamMatchmaking_SendLobbyChatMsg(IntPtr instancePtr, CSteamID steamIDLobby, byte[] pvMsgBody, int cubMsgBody);

		[PreserveSig]
		[Token(Token = "0x60003E4")]
		[Address(RVA = "0x2DD18E4", Offset = "0x2DD18E4", VA = "0x2DD18E4")]
		public static extern int ISteamMatchmaking_GetLobbyChatEntry(IntPtr instancePtr, CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, byte[] pvData, int cubData, out EChatEntryType peChatEntryType);

		[PreserveSig]
		[Token(Token = "0x60003E5")]
		[Address(RVA = "0x2DD19B4", Offset = "0x2DD19B4", VA = "0x2DD19B4")]
		public static extern bool ISteamMatchmaking_RequestLobbyData(IntPtr instancePtr, CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60003E6")]
		[Address(RVA = "0x2DD1A4C", Offset = "0x2DD1A4C", VA = "0x2DD1A4C")]
		public static extern void ISteamMatchmaking_SetLobbyGameServer(IntPtr instancePtr, CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer);

		[PreserveSig]
		[Token(Token = "0x60003E7")]
		[Address(RVA = "0x2DD1AFC", Offset = "0x2DD1AFC", VA = "0x2DD1AFC")]
		public static extern bool ISteamMatchmaking_GetLobbyGameServer(IntPtr instancePtr, CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer);

		[PreserveSig]
		[Token(Token = "0x60003E8")]
		[Address(RVA = "0x2DD1BB4", Offset = "0x2DD1BB4", VA = "0x2DD1BB4")]
		public static extern bool ISteamMatchmaking_SetLobbyMemberLimit(IntPtr instancePtr, CSteamID steamIDLobby, int cMaxMembers);

		[PreserveSig]
		[Token(Token = "0x60003E9")]
		[Address(RVA = "0x2DD1C54", Offset = "0x2DD1C54", VA = "0x2DD1C54")]
		public static extern int ISteamMatchmaking_GetLobbyMemberLimit(IntPtr instancePtr, CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60003EA")]
		[Address(RVA = "0x2DD1CE4", Offset = "0x2DD1CE4", VA = "0x2DD1CE4")]
		public static extern bool ISteamMatchmaking_SetLobbyType(IntPtr instancePtr, CSteamID steamIDLobby, ELobbyType eLobbyType);

		[PreserveSig]
		[Token(Token = "0x60003EB")]
		[Address(RVA = "0x2DD1D84", Offset = "0x2DD1D84", VA = "0x2DD1D84")]
		public static extern bool ISteamMatchmaking_SetLobbyJoinable(IntPtr instancePtr, CSteamID steamIDLobby, bool bLobbyJoinable);

		[PreserveSig]
		[Token(Token = "0x60003EC")]
		[Address(RVA = "0x2DD1E24", Offset = "0x2DD1E24", VA = "0x2DD1E24")]
		public static extern ulong ISteamMatchmaking_GetLobbyOwner(IntPtr instancePtr, CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x60003ED")]
		[Address(RVA = "0x2DD1EB4", Offset = "0x2DD1EB4", VA = "0x2DD1EB4")]
		public static extern bool ISteamMatchmaking_SetLobbyOwner(IntPtr instancePtr, CSteamID steamIDLobby, CSteamID steamIDNewOwner);

		[PreserveSig]
		[Token(Token = "0x60003EE")]
		[Address(RVA = "0x2DD1F54", Offset = "0x2DD1F54", VA = "0x2DD1F54")]
		public static extern bool ISteamMatchmaking_SetLinkedLobby(IntPtr instancePtr, CSteamID steamIDLobby, CSteamID steamIDLobbyDependent);

		[PreserveSig]
		[Token(Token = "0x60003EF")]
		[Address(RVA = "0x2DD1FF4", Offset = "0x2DD1FF4", VA = "0x2DD1FF4")]
		public static extern IntPtr ISteamMatchmakingServers_RequestInternetServerList(IntPtr instancePtr, AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60003F0")]
		[Address(RVA = "0x2DD20A4", Offset = "0x2DD20A4", VA = "0x2DD20A4")]
		public static extern IntPtr ISteamMatchmakingServers_RequestLANServerList(IntPtr instancePtr, AppId_t iApp, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60003F1")]
		[Address(RVA = "0x2DD213C", Offset = "0x2DD213C", VA = "0x2DD213C")]
		public static extern IntPtr ISteamMatchmakingServers_RequestFriendsServerList(IntPtr instancePtr, AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60003F2")]
		[Address(RVA = "0x2DD21EC", Offset = "0x2DD21EC", VA = "0x2DD21EC")]
		public static extern IntPtr ISteamMatchmakingServers_RequestFavoritesServerList(IntPtr instancePtr, AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60003F3")]
		[Address(RVA = "0x2DD229C", Offset = "0x2DD229C", VA = "0x2DD229C")]
		public static extern IntPtr ISteamMatchmakingServers_RequestHistoryServerList(IntPtr instancePtr, AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60003F4")]
		[Address(RVA = "0x2DD234C", Offset = "0x2DD234C", VA = "0x2DD234C")]
		public static extern IntPtr ISteamMatchmakingServers_RequestSpectatorServerList(IntPtr instancePtr, AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60003F5")]
		[Address(RVA = "0x2DD23FC", Offset = "0x2DD23FC", VA = "0x2DD23FC")]
		public static extern void ISteamMatchmakingServers_ReleaseRequest(IntPtr instancePtr, HServerListRequest hServerListRequest);

		[PreserveSig]
		[Token(Token = "0x60003F6")]
		[Address(RVA = "0x2DD248C", Offset = "0x2DD248C", VA = "0x2DD248C")]
		public static extern IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr instancePtr, HServerListRequest hRequest, int iServer);

		[PreserveSig]
		[Token(Token = "0x60003F7")]
		[Address(RVA = "0x2DD2524", Offset = "0x2DD2524", VA = "0x2DD2524")]
		public static extern void ISteamMatchmakingServers_CancelQuery(IntPtr instancePtr, HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x2DD25B4", Offset = "0x2DD25B4", VA = "0x2DD25B4")]
		public static extern void ISteamMatchmakingServers_RefreshQuery(IntPtr instancePtr, HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x2DD2644", Offset = "0x2DD2644", VA = "0x2DD2644")]
		public static extern bool ISteamMatchmakingServers_IsRefreshing(IntPtr instancePtr, HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x2DD26DC", Offset = "0x2DD26DC", VA = "0x2DD26DC")]
		public static extern int ISteamMatchmakingServers_GetServerCount(IntPtr instancePtr, HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x2DD276C", Offset = "0x2DD276C", VA = "0x2DD276C")]
		public static extern void ISteamMatchmakingServers_RefreshServer(IntPtr instancePtr, HServerListRequest hRequest, int iServer);

		[PreserveSig]
		[Token(Token = "0x60003FC")]
		[Address(RVA = "0x2DD2804", Offset = "0x2DD2804", VA = "0x2DD2804")]
		public static extern int ISteamMatchmakingServers_PingServer(IntPtr instancePtr, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x2DD28AC", Offset = "0x2DD28AC", VA = "0x2DD28AC")]
		public static extern int ISteamMatchmakingServers_PlayerDetails(IntPtr instancePtr, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x2DD2954", Offset = "0x2DD2954", VA = "0x2DD2954")]
		public static extern int ISteamMatchmakingServers_ServerRules(IntPtr instancePtr, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x60003FF")]
		[Address(RVA = "0x2DD29FC", Offset = "0x2DD29FC", VA = "0x2DD29FC")]
		public static extern void ISteamMatchmakingServers_CancelServerQuery(IntPtr instancePtr, HServerQuery hServerQuery);

		[PreserveSig]
		[Token(Token = "0x6000400")]
		[Address(RVA = "0x2DD2A8C", Offset = "0x2DD2A8C", VA = "0x2DD2A8C")]
		public static extern bool ISteamMusic_BIsEnabled(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000401")]
		[Address(RVA = "0x2DD2B14", Offset = "0x2DD2B14", VA = "0x2DD2B14")]
		public static extern bool ISteamMusic_BIsPlaying(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000402")]
		[Address(RVA = "0x2DD2B9C", Offset = "0x2DD2B9C", VA = "0x2DD2B9C")]
		public static extern AudioPlayback_Status ISteamMusic_GetPlaybackStatus(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000403")]
		[Address(RVA = "0x2DD2C1C", Offset = "0x2DD2C1C", VA = "0x2DD2C1C")]
		public static extern void ISteamMusic_Play(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000404")]
		[Address(RVA = "0x2DD2C9C", Offset = "0x2DD2C9C", VA = "0x2DD2C9C")]
		public static extern void ISteamMusic_Pause(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000405")]
		[Address(RVA = "0x2DD2D1C", Offset = "0x2DD2D1C", VA = "0x2DD2D1C")]
		public static extern void ISteamMusic_PlayPrevious(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000406")]
		[Address(RVA = "0x2DD2D9C", Offset = "0x2DD2D9C", VA = "0x2DD2D9C")]
		public static extern void ISteamMusic_PlayNext(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000407")]
		[Address(RVA = "0x2DD2E1C", Offset = "0x2DD2E1C", VA = "0x2DD2E1C")]
		public static extern void ISteamMusic_SetVolume(IntPtr instancePtr, float flVolume);

		[PreserveSig]
		[Token(Token = "0x6000408")]
		[Address(RVA = "0x2DD2EAC", Offset = "0x2DD2EAC", VA = "0x2DD2EAC")]
		public static extern float ISteamMusic_GetVolume(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000409")]
		[Address(RVA = "0x2DD2F2C", Offset = "0x2DD2F2C", VA = "0x2DD2F2C")]
		public static extern bool ISteamMusicRemote_RegisterSteamMusicRemote(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x600040A")]
		[Address(RVA = "0x2DD2F48", Offset = "0x2DD2F48", VA = "0x2DD2F48")]
		public static extern bool ISteamMusicRemote_DeregisterSteamMusicRemote(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x600040B")]
		[Address(RVA = "0x2DD2FD0", Offset = "0x2DD2FD0", VA = "0x2DD2FD0")]
		public static extern bool ISteamMusicRemote_BIsCurrentMusicRemote(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x600040C")]
		[Address(RVA = "0x2DD3058", Offset = "0x2DD3058", VA = "0x2DD3058")]
		public static extern bool ISteamMusicRemote_BActivationSuccess(IntPtr instancePtr, bool bValue);

		[PreserveSig]
		[Token(Token = "0x600040D")]
		[Address(RVA = "0x2DD30F0", Offset = "0x2DD30F0", VA = "0x2DD30F0")]
		public static extern bool ISteamMusicRemote_SetDisplayName(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchDisplayName);

		[PreserveSig]
		[Token(Token = "0x600040E")]
		[Address(RVA = "0x2DD310C", Offset = "0x2DD310C", VA = "0x2DD310C")]
		public static extern bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr instancePtr, byte[] pvBuffer, uint cbBufferLength);

		[PreserveSig]
		[Token(Token = "0x600040F")]
		[Address(RVA = "0x2DD31B4", Offset = "0x2DD31B4", VA = "0x2DD31B4")]
		public static extern bool ISteamMusicRemote_EnablePlayPrevious(IntPtr instancePtr, bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000410")]
		[Address(RVA = "0x2DD324C", Offset = "0x2DD324C", VA = "0x2DD324C")]
		public static extern bool ISteamMusicRemote_EnablePlayNext(IntPtr instancePtr, bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000411")]
		[Address(RVA = "0x2DD32E4", Offset = "0x2DD32E4", VA = "0x2DD32E4")]
		public static extern bool ISteamMusicRemote_EnableShuffled(IntPtr instancePtr, bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000412")]
		[Address(RVA = "0x2DD337C", Offset = "0x2DD337C", VA = "0x2DD337C")]
		public static extern bool ISteamMusicRemote_EnableLooped(IntPtr instancePtr, bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000413")]
		[Address(RVA = "0x2DD3414", Offset = "0x2DD3414", VA = "0x2DD3414")]
		public static extern bool ISteamMusicRemote_EnableQueue(IntPtr instancePtr, bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000414")]
		[Address(RVA = "0x2DD34AC", Offset = "0x2DD34AC", VA = "0x2DD34AC")]
		public static extern bool ISteamMusicRemote_EnablePlaylists(IntPtr instancePtr, bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000415")]
		[Address(RVA = "0x2DD3544", Offset = "0x2DD3544", VA = "0x2DD3544")]
		public static extern bool ISteamMusicRemote_UpdatePlaybackStatus(IntPtr instancePtr, AudioPlayback_Status nStatus);

		[PreserveSig]
		[Token(Token = "0x6000416")]
		[Address(RVA = "0x2DD35DC", Offset = "0x2DD35DC", VA = "0x2DD35DC")]
		public static extern bool ISteamMusicRemote_UpdateShuffled(IntPtr instancePtr, bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000417")]
		[Address(RVA = "0x2DD3674", Offset = "0x2DD3674", VA = "0x2DD3674")]
		public static extern bool ISteamMusicRemote_UpdateLooped(IntPtr instancePtr, bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000418")]
		[Address(RVA = "0x2DD370C", Offset = "0x2DD370C", VA = "0x2DD370C")]
		public static extern bool ISteamMusicRemote_UpdateVolume(IntPtr instancePtr, float flValue);

		[PreserveSig]
		[Token(Token = "0x6000419")]
		[Address(RVA = "0x2DD37A4", Offset = "0x2DD37A4", VA = "0x2DD37A4")]
		public static extern bool ISteamMusicRemote_CurrentEntryWillChange(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x600041A")]
		[Address(RVA = "0x2DD382C", Offset = "0x2DD382C", VA = "0x2DD382C")]
		public static extern bool ISteamMusicRemote_CurrentEntryIsAvailable(IntPtr instancePtr, bool bAvailable);

		[PreserveSig]
		[Token(Token = "0x600041B")]
		[Address(RVA = "0x2DD38C4", Offset = "0x2DD38C4", VA = "0x2DD38C4")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryText(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchText);

		[PreserveSig]
		[Token(Token = "0x600041C")]
		[Address(RVA = "0x2DD38E0", Offset = "0x2DD38E0", VA = "0x2DD38E0")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(IntPtr instancePtr, int nValue);

		[PreserveSig]
		[Token(Token = "0x600041D")]
		[Address(RVA = "0x2DD3978", Offset = "0x2DD3978", VA = "0x2DD3978")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr instancePtr, byte[] pvBuffer, uint cbBufferLength);

		[PreserveSig]
		[Token(Token = "0x600041E")]
		[Address(RVA = "0x2DD3A20", Offset = "0x2DD3A20", VA = "0x2DD3A20")]
		public static extern bool ISteamMusicRemote_CurrentEntryDidChange(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x600041F")]
		[Address(RVA = "0x2DD3AA8", Offset = "0x2DD3AA8", VA = "0x2DD3AA8")]
		public static extern bool ISteamMusicRemote_QueueWillChange(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000420")]
		[Address(RVA = "0x2DD3B30", Offset = "0x2DD3B30", VA = "0x2DD3B30")]
		public static extern bool ISteamMusicRemote_ResetQueueEntries(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000421")]
		[Address(RVA = "0x2DD3BB8", Offset = "0x2DD3BB8", VA = "0x2DD3BB8")]
		public static extern bool ISteamMusicRemote_SetQueueEntry(IntPtr instancePtr, int nID, int nPosition, InteropHelp.UTF8StringHandle pchEntryText);

		[PreserveSig]
		[Token(Token = "0x6000422")]
		[Address(RVA = "0x2DD3BD4", Offset = "0x2DD3BD4", VA = "0x2DD3BD4")]
		public static extern bool ISteamMusicRemote_SetCurrentQueueEntry(IntPtr instancePtr, int nID);

		[PreserveSig]
		[Token(Token = "0x6000423")]
		[Address(RVA = "0x2DD3C6C", Offset = "0x2DD3C6C", VA = "0x2DD3C6C")]
		public static extern bool ISteamMusicRemote_QueueDidChange(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000424")]
		[Address(RVA = "0x2DD3CF4", Offset = "0x2DD3CF4", VA = "0x2DD3CF4")]
		public static extern bool ISteamMusicRemote_PlaylistWillChange(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000425")]
		[Address(RVA = "0x2DD3D7C", Offset = "0x2DD3D7C", VA = "0x2DD3D7C")]
		public static extern bool ISteamMusicRemote_ResetPlaylistEntries(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000426")]
		[Address(RVA = "0x2DD3E04", Offset = "0x2DD3E04", VA = "0x2DD3E04")]
		public static extern bool ISteamMusicRemote_SetPlaylistEntry(IntPtr instancePtr, int nID, int nPosition, InteropHelp.UTF8StringHandle pchEntryText);

		[PreserveSig]
		[Token(Token = "0x6000427")]
		[Address(RVA = "0x2DD3E20", Offset = "0x2DD3E20", VA = "0x2DD3E20")]
		public static extern bool ISteamMusicRemote_SetCurrentPlaylistEntry(IntPtr instancePtr, int nID);

		[PreserveSig]
		[Token(Token = "0x6000428")]
		[Address(RVA = "0x2DD3EB8", Offset = "0x2DD3EB8", VA = "0x2DD3EB8")]
		public static extern bool ISteamMusicRemote_PlaylistDidChange(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000429")]
		[Address(RVA = "0x2DD3F40", Offset = "0x2DD3F40", VA = "0x2DD3F40")]
		public static extern bool ISteamNetworking_SendP2PPacket(IntPtr instancePtr, CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600042A")]
		[Address(RVA = "0x2DD4010", Offset = "0x2DD4010", VA = "0x2DD4010")]
		public static extern bool ISteamNetworking_IsP2PPacketAvailable(IntPtr instancePtr, out uint pcubMsgSize, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600042B")]
		[Address(RVA = "0x2DD40B0", Offset = "0x2DD40B0", VA = "0x2DD40B0")]
		public static extern bool ISteamNetworking_ReadP2PPacket(IntPtr instancePtr, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600042C")]
		[Address(RVA = "0x2DD4180", Offset = "0x2DD4180", VA = "0x2DD4180")]
		public static extern bool ISteamNetworking_AcceptP2PSessionWithUser(IntPtr instancePtr, CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x600042D")]
		[Address(RVA = "0x2DD4218", Offset = "0x2DD4218", VA = "0x2DD4218")]
		public static extern bool ISteamNetworking_CloseP2PSessionWithUser(IntPtr instancePtr, CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x600042E")]
		[Address(RVA = "0x2DD42B0", Offset = "0x2DD42B0", VA = "0x2DD42B0")]
		public static extern bool ISteamNetworking_CloseP2PChannelWithUser(IntPtr instancePtr, CSteamID steamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600042F")]
		[Address(RVA = "0x2DD4350", Offset = "0x2DD4350", VA = "0x2DD4350")]
		public static extern bool ISteamNetworking_GetP2PSessionState(IntPtr instancePtr, CSteamID steamIDRemote, out P2PSessionState_t pConnectionState);

		[PreserveSig]
		[Token(Token = "0x6000430")]
		[Address(RVA = "0x2DD43F0", Offset = "0x2DD43F0", VA = "0x2DD43F0")]
		public static extern bool ISteamNetworking_AllowP2PPacketRelay(IntPtr instancePtr, bool bAllow);

		[PreserveSig]
		[Token(Token = "0x6000431")]
		[Address(RVA = "0x2DD4488", Offset = "0x2DD4488", VA = "0x2DD4488")]
		public static extern uint ISteamNetworking_CreateListenSocket(IntPtr instancePtr, int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x6000432")]
		[Address(RVA = "0x2DD4538", Offset = "0x2DD4538", VA = "0x2DD4538")]
		public static extern uint ISteamNetworking_CreateP2PConnectionSocket(IntPtr instancePtr, CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x6000433")]
		[Address(RVA = "0x2DD45E8", Offset = "0x2DD45E8", VA = "0x2DD45E8")]
		public static extern uint ISteamNetworking_CreateConnectionSocket(IntPtr instancePtr, uint nIP, ushort nPort, int nTimeoutSec);

		[PreserveSig]
		[Token(Token = "0x6000434")]
		[Address(RVA = "0x2DD4690", Offset = "0x2DD4690", VA = "0x2DD4690")]
		public static extern bool ISteamNetworking_DestroySocket(IntPtr instancePtr, SNetSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x6000435")]
		[Address(RVA = "0x2DD4730", Offset = "0x2DD4730", VA = "0x2DD4730")]
		public static extern bool ISteamNetworking_DestroyListenSocket(IntPtr instancePtr, SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x6000436")]
		[Address(RVA = "0x2DD47D0", Offset = "0x2DD47D0", VA = "0x2DD47D0")]
		public static extern bool ISteamNetworking_SendDataOnSocket(IntPtr instancePtr, SNetSocket_t hSocket, byte[] pubData, uint cubData, bool bReliable);

		[PreserveSig]
		[Token(Token = "0x6000437")]
		[Address(RVA = "0x2DD4890", Offset = "0x2DD4890", VA = "0x2DD4890")]
		public static extern bool ISteamNetworking_IsDataAvailableOnSocket(IntPtr instancePtr, SNetSocket_t hSocket, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x6000438")]
		[Address(RVA = "0x2DD4930", Offset = "0x2DD4930", VA = "0x2DD4930")]
		public static extern bool ISteamNetworking_RetrieveDataFromSocket(IntPtr instancePtr, SNetSocket_t hSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x6000439")]
		[Address(RVA = "0x2DD49F0", Offset = "0x2DD49F0", VA = "0x2DD49F0")]
		public static extern bool ISteamNetworking_IsDataAvailable(IntPtr instancePtr, SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x600043A")]
		[Address(RVA = "0x2DD4AA0", Offset = "0x2DD4AA0", VA = "0x2DD4AA0")]
		public static extern bool ISteamNetworking_RetrieveData(IntPtr instancePtr, SNetListenSocket_t hListenSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x600043B")]
		[Address(RVA = "0x2DD4B70", Offset = "0x2DD4B70", VA = "0x2DD4B70")]
		public static extern bool ISteamNetworking_GetSocketInfo(IntPtr instancePtr, SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

		[PreserveSig]
		[Token(Token = "0x600043C")]
		[Address(RVA = "0x2DD4C38", Offset = "0x2DD4C38", VA = "0x2DD4C38")]
		public static extern bool ISteamNetworking_GetListenSocketInfo(IntPtr instancePtr, SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort);

		[PreserveSig]
		[Token(Token = "0x600043D")]
		[Address(RVA = "0x2DD4CE8", Offset = "0x2DD4CE8", VA = "0x2DD4CE8")]
		public static extern ESNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(IntPtr instancePtr, SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x600043E")]
		[Address(RVA = "0x2DD4D78", Offset = "0x2DD4D78", VA = "0x2DD4D78")]
		public static extern int ISteamNetworking_GetMaxPacketSize(IntPtr instancePtr, SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x600043F")]
		[Address(RVA = "0x2DD4E08", Offset = "0x2DD4E08", VA = "0x2DD4E08")]
		public static extern bool ISteamParentalSettings_BIsParentalLockEnabled(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000440")]
		[Address(RVA = "0x2DD4E90", Offset = "0x2DD4E90", VA = "0x2DD4E90")]
		public static extern bool ISteamParentalSettings_BIsParentalLockLocked(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000441")]
		[Address(RVA = "0x2DD4F18", Offset = "0x2DD4F18", VA = "0x2DD4F18")]
		public static extern bool ISteamParentalSettings_BIsAppBlocked(IntPtr instancePtr, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x6000442")]
		[Address(RVA = "0x2DD4FB0", Offset = "0x2DD4FB0", VA = "0x2DD4FB0")]
		public static extern bool ISteamParentalSettings_BIsAppInBlockList(IntPtr instancePtr, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x6000443")]
		[Address(RVA = "0x2DD5048", Offset = "0x2DD5048", VA = "0x2DD5048")]
		public static extern bool ISteamParentalSettings_BIsFeatureBlocked(IntPtr instancePtr, EParentalFeature eFeature);

		[PreserveSig]
		[Token(Token = "0x6000444")]
		[Address(RVA = "0x2DD50E0", Offset = "0x2DD50E0", VA = "0x2DD50E0")]
		public static extern bool ISteamParentalSettings_BIsFeatureInBlockList(IntPtr instancePtr, EParentalFeature eFeature);

		[PreserveSig]
		[Token(Token = "0x6000445")]
		[Address(RVA = "0x2DD5178", Offset = "0x2DD5178", VA = "0x2DD5178")]
		public static extern bool ISteamRemoteStorage_FileWrite(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile, byte[] pvData, int cubData);

		[PreserveSig]
		[Token(Token = "0x6000446")]
		[Address(RVA = "0x2DD5194", Offset = "0x2DD5194", VA = "0x2DD5194")]
		public static extern int ISteamRemoteStorage_FileRead(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile, byte[] pvData, int cubDataToRead);

		[PreserveSig]
		[Token(Token = "0x6000447")]
		[Address(RVA = "0x2DD51B0", Offset = "0x2DD51B0", VA = "0x2DD51B0")]
		public static extern ulong ISteamRemoteStorage_FileWriteAsync(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile, byte[] pvData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x6000448")]
		[Address(RVA = "0x2DD51CC", Offset = "0x2DD51CC", VA = "0x2DD51CC")]
		public static extern ulong ISteamRemoteStorage_FileReadAsync(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile, uint nOffset, uint cubToRead);

		[PreserveSig]
		[Token(Token = "0x6000449")]
		[Address(RVA = "0x2DD51E8", Offset = "0x2DD51E8", VA = "0x2DD51E8")]
		public static extern bool ISteamRemoteStorage_FileReadAsyncComplete(IntPtr instancePtr, SteamAPICall_t hReadCall, byte[] pvBuffer, uint cubToRead);

		[PreserveSig]
		[Token(Token = "0x600044A")]
		[Address(RVA = "0x2DD52A0", Offset = "0x2DD52A0", VA = "0x2DD52A0")]
		public static extern bool ISteamRemoteStorage_FileForget(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600044B")]
		[Address(RVA = "0x2DD52BC", Offset = "0x2DD52BC", VA = "0x2DD52BC")]
		public static extern bool ISteamRemoteStorage_FileDelete(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600044C")]
		[Address(RVA = "0x2DD52D8", Offset = "0x2DD52D8", VA = "0x2DD52D8")]
		public static extern ulong ISteamRemoteStorage_FileShare(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600044D")]
		[Address(RVA = "0x2DD52F4", Offset = "0x2DD52F4", VA = "0x2DD52F4")]
		public static extern bool ISteamRemoteStorage_SetSyncPlatforms(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile, ERemoteStoragePlatform eRemoteStoragePlatform);

		[PreserveSig]
		[Token(Token = "0x600044E")]
		[Address(RVA = "0x2DD5310", Offset = "0x2DD5310", VA = "0x2DD5310")]
		public static extern ulong ISteamRemoteStorage_FileWriteStreamOpen(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x600044F")]
		[Address(RVA = "0x2DD532C", Offset = "0x2DD532C", VA = "0x2DD532C")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamWriteChunk(IntPtr instancePtr, UGCFileWriteStreamHandle_t writeHandle, byte[] pvData, int cubData);

		[PreserveSig]
		[Token(Token = "0x6000450")]
		[Address(RVA = "0x2DD53E4", Offset = "0x2DD53E4", VA = "0x2DD53E4")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamClose(IntPtr instancePtr, UGCFileWriteStreamHandle_t writeHandle);

		[PreserveSig]
		[Token(Token = "0x6000451")]
		[Address(RVA = "0x2DD547C", Offset = "0x2DD547C", VA = "0x2DD547C")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamCancel(IntPtr instancePtr, UGCFileWriteStreamHandle_t writeHandle);

		[PreserveSig]
		[Token(Token = "0x6000452")]
		[Address(RVA = "0x2DD5514", Offset = "0x2DD5514", VA = "0x2DD5514")]
		public static extern bool ISteamRemoteStorage_FileExists(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000453")]
		[Address(RVA = "0x2DD5530", Offset = "0x2DD5530", VA = "0x2DD5530")]
		public static extern bool ISteamRemoteStorage_FilePersisted(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000454")]
		[Address(RVA = "0x2DD554C", Offset = "0x2DD554C", VA = "0x2DD554C")]
		public static extern int ISteamRemoteStorage_GetFileSize(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000455")]
		[Address(RVA = "0x2DD5568", Offset = "0x2DD5568", VA = "0x2DD5568")]
		public static extern long ISteamRemoteStorage_GetFileTimestamp(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000456")]
		[Address(RVA = "0x2DD5584", Offset = "0x2DD5584", VA = "0x2DD5584")]
		public static extern ERemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000457")]
		[Address(RVA = "0x2DD55A0", Offset = "0x2DD55A0", VA = "0x2DD55A0")]
		public static extern int ISteamRemoteStorage_GetFileCount(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000458")]
		[Address(RVA = "0x2DD5620", Offset = "0x2DD5620", VA = "0x2DD5620")]
		public static extern IntPtr ISteamRemoteStorage_GetFileNameAndSize(IntPtr instancePtr, int iFile, out int pnFileSizeInBytes);

		[PreserveSig]
		[Token(Token = "0x6000459")]
		[Address(RVA = "0x2DD56B8", Offset = "0x2DD56B8", VA = "0x2DD56B8")]
		public static extern bool ISteamRemoteStorage_GetQuota(IntPtr instancePtr, out ulong pnTotalBytes, out ulong puAvailableBytes);

		[PreserveSig]
		[Token(Token = "0x600045A")]
		[Address(RVA = "0x2DD5758", Offset = "0x2DD5758", VA = "0x2DD5758")]
		public static extern bool ISteamRemoteStorage_IsCloudEnabledForAccount(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x600045B")]
		[Address(RVA = "0x2DD57E0", Offset = "0x2DD57E0", VA = "0x2DD57E0")]
		public static extern bool ISteamRemoteStorage_IsCloudEnabledForApp(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x600045C")]
		[Address(RVA = "0x2DD5868", Offset = "0x2DD5868", VA = "0x2DD5868")]
		public static extern void ISteamRemoteStorage_SetCloudEnabledForApp(IntPtr instancePtr, bool bEnabled);

		[PreserveSig]
		[Token(Token = "0x600045D")]
		[Address(RVA = "0x2DD58F8", Offset = "0x2DD58F8", VA = "0x2DD58F8")]
		public static extern ulong ISteamRemoteStorage_UGCDownload(IntPtr instancePtr, UGCHandle_t hContent, uint unPriority);

		[PreserveSig]
		[Token(Token = "0x600045E")]
		[Address(RVA = "0x2DD5990", Offset = "0x2DD5990", VA = "0x2DD5990")]
		public static extern bool ISteamRemoteStorage_GetUGCDownloadProgress(IntPtr instancePtr, UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected);

		[PreserveSig]
		[Token(Token = "0x600045F")]
		[Address(RVA = "0x2DD5A40", Offset = "0x2DD5A40", VA = "0x2DD5A40")]
		public static extern bool ISteamRemoteStorage_GetUGCDetails(IntPtr instancePtr, UGCHandle_t hContent, out AppId_t pnAppID, out IntPtr ppchName, out int pnFileSizeInBytes, out CSteamID pSteamIDOwner);

		[PreserveSig]
		[Token(Token = "0x6000460")]
		[Address(RVA = "0x2DD5B08", Offset = "0x2DD5B08", VA = "0x2DD5B08")]
		public static extern int ISteamRemoteStorage_UGCRead(IntPtr instancePtr, UGCHandle_t hContent, byte[] pvData, int cubDataToRead, uint cOffset, EUGCReadAction eAction);

		[PreserveSig]
		[Token(Token = "0x6000461")]
		[Address(RVA = "0x2DD5BCC", Offset = "0x2DD5BCC", VA = "0x2DD5BCC")]
		public static extern int ISteamRemoteStorage_GetCachedUGCCount(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000462")]
		[Address(RVA = "0x2DD5C4C", Offset = "0x2DD5C4C", VA = "0x2DD5C4C")]
		public static extern ulong ISteamRemoteStorage_GetCachedUGCHandle(IntPtr instancePtr, int iCachedContent);

		[PreserveSig]
		[Token(Token = "0x6000463")]
		[Address(RVA = "0x2DD5CDC", Offset = "0x2DD5CDC", VA = "0x2DD5CDC")]
		public static extern ulong ISteamRemoteStorage_PublishWorkshopFile(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFile, InteropHelp.UTF8StringHandle pchPreviewFile, AppId_t nConsumerAppId, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags, EWorkshopFileType eWorkshopFileType);

		[PreserveSig]
		[Token(Token = "0x6000464")]
		[Address(RVA = "0x2DD5CF8", Offset = "0x2DD5CF8", VA = "0x2DD5CF8")]
		public static extern ulong ISteamRemoteStorage_CreatePublishedFileUpdateRequest(IntPtr instancePtr, PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000465")]
		[Address(RVA = "0x2DD5D88", Offset = "0x2DD5D88", VA = "0x2DD5D88")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileFile(IntPtr instancePtr, PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x6000466")]
		[Address(RVA = "0x2DD5DA4", Offset = "0x2DD5DA4", VA = "0x2DD5DA4")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(IntPtr instancePtr, PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchPreviewFile);

		[PreserveSig]
		[Token(Token = "0x6000467")]
		[Address(RVA = "0x2DD5DC0", Offset = "0x2DD5DC0", VA = "0x2DD5DC0")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileTitle(IntPtr instancePtr, PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x6000468")]
		[Address(RVA = "0x2DD5DDC", Offset = "0x2DD5DDC", VA = "0x2DD5DDC")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileDescription(IntPtr instancePtr, PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x6000469")]
		[Address(RVA = "0x2DD5DF8", Offset = "0x2DD5DF8", VA = "0x2DD5DF8")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileVisibility(IntPtr instancePtr, PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x600046A")]
		[Address(RVA = "0x2DD5E98", Offset = "0x2DD5E98", VA = "0x2DD5E98")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileTags(IntPtr instancePtr, PublishedFileUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x600046B")]
		[Address(RVA = "0x2DD5F38", Offset = "0x2DD5F38", VA = "0x2DD5F38")]
		public static extern ulong ISteamRemoteStorage_CommitPublishedFileUpdate(IntPtr instancePtr, PublishedFileUpdateHandle_t updateHandle);

		[PreserveSig]
		[Token(Token = "0x600046C")]
		[Address(RVA = "0x2DD5FC8", Offset = "0x2DD5FC8", VA = "0x2DD5FC8")]
		public static extern ulong ISteamRemoteStorage_GetPublishedFileDetails(IntPtr instancePtr, PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld);

		[PreserveSig]
		[Token(Token = "0x600046D")]
		[Address(RVA = "0x2DD6060", Offset = "0x2DD6060", VA = "0x2DD6060")]
		public static extern ulong ISteamRemoteStorage_DeletePublishedFile(IntPtr instancePtr, PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x600046E")]
		[Address(RVA = "0x2DD60F0", Offset = "0x2DD60F0", VA = "0x2DD60F0")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserPublishedFiles(IntPtr instancePtr, uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x600046F")]
		[Address(RVA = "0x2DD6180", Offset = "0x2DD6180", VA = "0x2DD6180")]
		public static extern ulong ISteamRemoteStorage_SubscribePublishedFile(IntPtr instancePtr, PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000470")]
		[Address(RVA = "0x2DD6210", Offset = "0x2DD6210", VA = "0x2DD6210")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserSubscribedFiles(IntPtr instancePtr, uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x6000471")]
		[Address(RVA = "0x2DD62A0", Offset = "0x2DD62A0", VA = "0x2DD62A0")]
		public static extern ulong ISteamRemoteStorage_UnsubscribePublishedFile(IntPtr instancePtr, PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000472")]
		[Address(RVA = "0x2DD6330", Offset = "0x2DD6330", VA = "0x2DD6330")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(IntPtr instancePtr, PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchChangeDescription);

		[PreserveSig]
		[Token(Token = "0x6000473")]
		[Address(RVA = "0x2DD634C", Offset = "0x2DD634C", VA = "0x2DD634C")]
		public static extern ulong ISteamRemoteStorage_GetPublishedItemVoteDetails(IntPtr instancePtr, PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000474")]
		[Address(RVA = "0x2DD63DC", Offset = "0x2DD63DC", VA = "0x2DD63DC")]
		public static extern ulong ISteamRemoteStorage_UpdateUserPublishedItemVote(IntPtr instancePtr, PublishedFileId_t unPublishedFileId, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x6000475")]
		[Address(RVA = "0x2DD6474", Offset = "0x2DD6474", VA = "0x2DD6474")]
		public static extern ulong ISteamRemoteStorage_GetUserPublishedItemVoteDetails(IntPtr instancePtr, PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x6000476")]
		[Address(RVA = "0x2DD6504", Offset = "0x2DD6504", VA = "0x2DD6504")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(IntPtr instancePtr, CSteamID steamId, uint unStartIndex, IntPtr pRequiredTags, IntPtr pExcludedTags);

		[PreserveSig]
		[Token(Token = "0x6000477")]
		[Address(RVA = "0x2DD65B4", Offset = "0x2DD65B4", VA = "0x2DD65B4")]
		public static extern ulong ISteamRemoteStorage_PublishVideo(IntPtr instancePtr, EWorkshopVideoProvider eVideoProvider, InteropHelp.UTF8StringHandle pchVideoAccount, InteropHelp.UTF8StringHandle pchVideoIdentifier, InteropHelp.UTF8StringHandle pchPreviewFile, AppId_t nConsumerAppId, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x6000478")]
		[Address(RVA = "0x2DD65D0", Offset = "0x2DD65D0", VA = "0x2DD65D0")]
		public static extern ulong ISteamRemoteStorage_SetUserPublishedFileAction(IntPtr instancePtr, PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction);

		[PreserveSig]
		[Token(Token = "0x6000479")]
		[Address(RVA = "0x2DD6668", Offset = "0x2DD6668", VA = "0x2DD6668")]
		public static extern ulong ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(IntPtr instancePtr, EWorkshopFileAction eAction, uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x600047A")]
		[Address(RVA = "0x2DD6700", Offset = "0x2DD6700", VA = "0x2DD6700")]
		public static extern ulong ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(IntPtr instancePtr, EWorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, IntPtr pTags, IntPtr pUserTags);

		[PreserveSig]
		[Token(Token = "0x600047B")]
		[Address(RVA = "0x2DD67C8", Offset = "0x2DD67C8", VA = "0x2DD67C8")]
		public static extern ulong ISteamRemoteStorage_UGCDownloadToLocation(IntPtr instancePtr, UGCHandle_t hContent, InteropHelp.UTF8StringHandle pchLocation, uint unPriority);

		[PreserveSig]
		[Token(Token = "0x600047C")]
		[Address(RVA = "0x2DD67E4", Offset = "0x2DD67E4", VA = "0x2DD67E4")]
		public static extern uint ISteamScreenshots_WriteScreenshot(IntPtr instancePtr, byte[] pubRGB, uint cubRGB, int nWidth, int nHeight);

		[PreserveSig]
		[Token(Token = "0x600047D")]
		[Address(RVA = "0x2DD689C", Offset = "0x2DD689C", VA = "0x2DD689C")]
		public static extern uint ISteamScreenshots_AddScreenshotToLibrary(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchFilename, InteropHelp.UTF8StringHandle pchThumbnailFilename, int nWidth, int nHeight);

		[PreserveSig]
		[Token(Token = "0x600047E")]
		[Address(RVA = "0x2DD68B8", Offset = "0x2DD68B8", VA = "0x2DD68B8")]
		public static extern void ISteamScreenshots_TriggerScreenshot(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x600047F")]
		[Address(RVA = "0x2DD6938", Offset = "0x2DD6938", VA = "0x2DD6938")]
		public static extern void ISteamScreenshots_HookScreenshots(IntPtr instancePtr, bool bHook);

		[PreserveSig]
		[Token(Token = "0x6000480")]
		[Address(RVA = "0x2DD69C8", Offset = "0x2DD69C8", VA = "0x2DD69C8")]
		public static extern bool ISteamScreenshots_SetLocation(IntPtr instancePtr, ScreenshotHandle hScreenshot, InteropHelp.UTF8StringHandle pchLocation);

		[PreserveSig]
		[Token(Token = "0x6000481")]
		[Address(RVA = "0x2DD69E4", Offset = "0x2DD69E4", VA = "0x2DD69E4")]
		public static extern bool ISteamScreenshots_TagUser(IntPtr instancePtr, ScreenshotHandle hScreenshot, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000482")]
		[Address(RVA = "0x2DD6A84", Offset = "0x2DD6A84", VA = "0x2DD6A84")]
		public static extern bool ISteamScreenshots_TagPublishedFile(IntPtr instancePtr, ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000483")]
		[Address(RVA = "0x2DD6B24", Offset = "0x2DD6B24", VA = "0x2DD6B24")]
		public static extern bool ISteamScreenshots_IsScreenshotsHooked(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000484")]
		[Address(RVA = "0x2DD6BAC", Offset = "0x2DD6BAC", VA = "0x2DD6BAC")]
		public static extern uint ISteamScreenshots_AddVRScreenshotToLibrary(IntPtr instancePtr, EVRScreenshotType eType, InteropHelp.UTF8StringHandle pchFilename, InteropHelp.UTF8StringHandle pchVRFilename);

		[PreserveSig]
		[Token(Token = "0x6000485")]
		[Address(RVA = "0x2DD6BC8", Offset = "0x2DD6BC8", VA = "0x2DD6BC8")]
		public static extern ulong ISteamUGC_CreateQueryUserUGCRequest(IntPtr instancePtr, AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x6000486")]
		[Address(RVA = "0x2DD6CA0", Offset = "0x2DD6CA0", VA = "0x2DD6CA0")]
		public static extern ulong ISteamUGC_CreateQueryAllUGCRequest(IntPtr instancePtr, EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x6000487")]
		[Address(RVA = "0x2DD6D60", Offset = "0x2DD6D60", VA = "0x2DD6D60")]
		public static extern ulong ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr instancePtr, [In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x6000488")]
		[Address(RVA = "0x2DD6E00", Offset = "0x2DD6E00", VA = "0x2DD6E00")]
		public static extern ulong ISteamUGC_SendQueryUGCRequest(IntPtr instancePtr, UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x6000489")]
		[Address(RVA = "0x2DD6E90", Offset = "0x2DD6E90", VA = "0x2DD6E90")]
		public static extern bool ISteamUGC_GetQueryUGCResult(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails);

		[PreserveSig]
		[Token(Token = "0x600048A")]
		[Address(RVA = "0x2DD6FA4", Offset = "0x2DD6FA4", VA = "0x2DD6FA4")]
		public static extern bool ISteamUGC_GetQueryUGCPreviewURL(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, IntPtr pchURL, uint cchURLSize);

		[PreserveSig]
		[Token(Token = "0x600048B")]
		[Address(RVA = "0x2DD705C", Offset = "0x2DD705C", VA = "0x2DD705C")]
		public static extern bool ISteamUGC_GetQueryUGCMetadata(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, IntPtr pchMetadata, uint cchMetadatasize);

		[PreserveSig]
		[Token(Token = "0x600048C")]
		[Address(RVA = "0x2DD7114", Offset = "0x2DD7114", VA = "0x2DD7114")]
		public static extern bool ISteamUGC_GetQueryUGCChildren(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, [In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x600048D")]
		[Address(RVA = "0x2DD71D4", Offset = "0x2DD71D4", VA = "0x2DD71D4")]
		public static extern bool ISteamUGC_GetQueryUGCStatistic(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out ulong pStatValue);

		[PreserveSig]
		[Token(Token = "0x600048E")]
		[Address(RVA = "0x2DD728C", Offset = "0x2DD728C", VA = "0x2DD728C")]
		public static extern uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(IntPtr instancePtr, UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x600048F")]
		[Address(RVA = "0x2DD7324", Offset = "0x2DD7324", VA = "0x2DD7324")]
		public static extern bool ISteamUGC_GetQueryUGCAdditionalPreview(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, uint previewIndex, IntPtr pchURLOrVideoID, uint cchURLSize, IntPtr pchOriginalFileName, uint cchOriginalFileNameSize, out EItemPreviewType pPreviewType);

		[PreserveSig]
		[Token(Token = "0x6000490")]
		[Address(RVA = "0x2DD740C", Offset = "0x2DD740C", VA = "0x2DD740C")]
		public static extern uint ISteamUGC_GetQueryUGCNumKeyValueTags(IntPtr instancePtr, UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x6000491")]
		[Address(RVA = "0x2DD74A4", Offset = "0x2DD74A4", VA = "0x2DD74A4")]
		public static extern bool ISteamUGC_GetQueryUGCKeyValueTag(IntPtr instancePtr, UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, IntPtr pchKey, uint cchKeySize, IntPtr pchValue, uint cchValueSize);

		[PreserveSig]
		[Token(Token = "0x6000492")]
		[Address(RVA = "0x2DD7584", Offset = "0x2DD7584", VA = "0x2DD7584")]
		public static extern bool ISteamUGC_ReleaseQueryUGCRequest(IntPtr instancePtr, UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x6000493")]
		[Address(RVA = "0x2DD761C", Offset = "0x2DD761C", VA = "0x2DD761C")]
		public static extern bool ISteamUGC_AddRequiredTag(IntPtr instancePtr, UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x6000494")]
		[Address(RVA = "0x2DD7638", Offset = "0x2DD7638", VA = "0x2DD7638")]
		public static extern bool ISteamUGC_AddExcludedTag(IntPtr instancePtr, UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x6000495")]
		[Address(RVA = "0x2DD7654", Offset = "0x2DD7654", VA = "0x2DD7654")]
		public static extern bool ISteamUGC_SetReturnOnlyIDs(IntPtr instancePtr, UGCQueryHandle_t handle, bool bReturnOnlyIDs);

		[PreserveSig]
		[Token(Token = "0x6000496")]
		[Address(RVA = "0x2DD76F4", Offset = "0x2DD76F4", VA = "0x2DD76F4")]
		public static extern bool ISteamUGC_SetReturnKeyValueTags(IntPtr instancePtr, UGCQueryHandle_t handle, bool bReturnKeyValueTags);

		[PreserveSig]
		[Token(Token = "0x6000497")]
		[Address(RVA = "0x2DD7794", Offset = "0x2DD7794", VA = "0x2DD7794")]
		public static extern bool ISteamUGC_SetReturnLongDescription(IntPtr instancePtr, UGCQueryHandle_t handle, bool bReturnLongDescription);

		[PreserveSig]
		[Token(Token = "0x6000498")]
		[Address(RVA = "0x2DD7834", Offset = "0x2DD7834", VA = "0x2DD7834")]
		public static extern bool ISteamUGC_SetReturnMetadata(IntPtr instancePtr, UGCQueryHandle_t handle, bool bReturnMetadata);

		[PreserveSig]
		[Token(Token = "0x6000499")]
		[Address(RVA = "0x2DD78D4", Offset = "0x2DD78D4", VA = "0x2DD78D4")]
		public static extern bool ISteamUGC_SetReturnChildren(IntPtr instancePtr, UGCQueryHandle_t handle, bool bReturnChildren);

		[PreserveSig]
		[Token(Token = "0x600049A")]
		[Address(RVA = "0x2DD7974", Offset = "0x2DD7974", VA = "0x2DD7974")]
		public static extern bool ISteamUGC_SetReturnAdditionalPreviews(IntPtr instancePtr, UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);

		[PreserveSig]
		[Token(Token = "0x600049B")]
		[Address(RVA = "0x2DD7A14", Offset = "0x2DD7A14", VA = "0x2DD7A14")]
		public static extern bool ISteamUGC_SetReturnTotalOnly(IntPtr instancePtr, UGCQueryHandle_t handle, bool bReturnTotalOnly);

		[PreserveSig]
		[Token(Token = "0x600049C")]
		[Address(RVA = "0x2DD7AB4", Offset = "0x2DD7AB4", VA = "0x2DD7AB4")]
		public static extern bool ISteamUGC_SetReturnPlaytimeStats(IntPtr instancePtr, UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x600049D")]
		[Address(RVA = "0x2DD7B54", Offset = "0x2DD7B54", VA = "0x2DD7B54")]
		public static extern bool ISteamUGC_SetLanguage(IntPtr instancePtr, UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x600049E")]
		[Address(RVA = "0x2DD7B70", Offset = "0x2DD7B70", VA = "0x2DD7B70")]
		public static extern bool ISteamUGC_SetAllowCachedResponse(IntPtr instancePtr, UGCQueryHandle_t handle, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x600049F")]
		[Address(RVA = "0x2DD7C10", Offset = "0x2DD7C10", VA = "0x2DD7C10")]
		public static extern bool ISteamUGC_SetCloudFileNameFilter(IntPtr instancePtr, UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pMatchCloudFileName);

		[PreserveSig]
		[Token(Token = "0x60004A0")]
		[Address(RVA = "0x2DD7C2C", Offset = "0x2DD7C2C", VA = "0x2DD7C2C")]
		public static extern bool ISteamUGC_SetMatchAnyTag(IntPtr instancePtr, UGCQueryHandle_t handle, bool bMatchAnyTag);

		[PreserveSig]
		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x2DD7CCC", Offset = "0x2DD7CCC", VA = "0x2DD7CCC")]
		public static extern bool ISteamUGC_SetSearchText(IntPtr instancePtr, UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pSearchText);

		[PreserveSig]
		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x2DD7CE8", Offset = "0x2DD7CE8", VA = "0x2DD7CE8")]
		public static extern bool ISteamUGC_SetRankedByTrendDays(IntPtr instancePtr, UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x2DD7D88", Offset = "0x2DD7D88", VA = "0x2DD7D88")]
		public static extern bool ISteamUGC_AddRequiredKeyValueTag(IntPtr instancePtr, UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x2DD7DA4", Offset = "0x2DD7DA4", VA = "0x2DD7DA4")]
		public static extern ulong ISteamUGC_RequestUGCDetails(IntPtr instancePtr, PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x2DD7E3C", Offset = "0x2DD7E3C", VA = "0x2DD7E3C")]
		public static extern ulong ISteamUGC_CreateItem(IntPtr instancePtr, AppId_t nConsumerAppId, EWorkshopFileType eFileType);

		[PreserveSig]
		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x2DD7ED4", Offset = "0x2DD7ED4", VA = "0x2DD7ED4")]
		public static extern ulong ISteamUGC_StartItemUpdate(IntPtr instancePtr, AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x2DD7F6C", Offset = "0x2DD7F6C", VA = "0x2DD7F6C")]
		public static extern bool ISteamUGC_SetItemTitle(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x60004A8")]
		[Address(RVA = "0x2DD7F88", Offset = "0x2DD7F88", VA = "0x2DD7F88")]
		public static extern bool ISteamUGC_SetItemDescription(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x2DD7FA4", Offset = "0x2DD7FA4", VA = "0x2DD7FA4")]
		public static extern bool ISteamUGC_SetItemUpdateLanguage(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x2DD7FC0", Offset = "0x2DD7FC0", VA = "0x2DD7FC0")]
		public static extern bool ISteamUGC_SetItemMetadata(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchMetaData);

		[PreserveSig]
		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x2DD7FDC", Offset = "0x2DD7FDC", VA = "0x2DD7FDC")]
		public static extern bool ISteamUGC_SetItemVisibility(IntPtr instancePtr, UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x60004AC")]
		[Address(RVA = "0x2DD807C", Offset = "0x2DD807C", VA = "0x2DD807C")]
		public static extern bool ISteamUGC_SetItemTags(IntPtr instancePtr, UGCUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x2DD811C", Offset = "0x2DD811C", VA = "0x2DD811C")]
		public static extern bool ISteamUGC_SetItemContent(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszContentFolder);

		[PreserveSig]
		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x2DD8138", Offset = "0x2DD8138", VA = "0x2DD8138")]
		public static extern bool ISteamUGC_SetItemPreview(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x2DD8154", Offset = "0x2DD8154", VA = "0x2DD8154")]
		public static extern bool ISteamUGC_RemoveItemKeyValueTags(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x2DD8170", Offset = "0x2DD8170", VA = "0x2DD8170")]
		public static extern bool ISteamUGC_AddItemKeyValueTag(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x60004B1")]
		[Address(RVA = "0x2DD818C", Offset = "0x2DD818C", VA = "0x2DD818C")]
		public static extern bool ISteamUGC_AddItemPreviewFile(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile, EItemPreviewType type);

		[PreserveSig]
		[Token(Token = "0x60004B2")]
		[Address(RVA = "0x2DD81A8", Offset = "0x2DD81A8", VA = "0x2DD81A8")]
		public static extern bool ISteamUGC_AddItemPreviewVideo(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszVideoID);

		[PreserveSig]
		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x2DD81C4", Offset = "0x2DD81C4", VA = "0x2DD81C4")]
		public static extern bool ISteamUGC_UpdateItemPreviewFile(IntPtr instancePtr, UGCUpdateHandle_t handle, uint index, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x2DD81E0", Offset = "0x2DD81E0", VA = "0x2DD81E0")]
		public static extern bool ISteamUGC_UpdateItemPreviewVideo(IntPtr instancePtr, UGCUpdateHandle_t handle, uint index, InteropHelp.UTF8StringHandle pszVideoID);

		[PreserveSig]
		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x2DD81FC", Offset = "0x2DD81FC", VA = "0x2DD81FC")]
		public static extern bool ISteamUGC_RemoveItemPreview(IntPtr instancePtr, UGCUpdateHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x2DD829C", Offset = "0x2DD829C", VA = "0x2DD829C")]
		public static extern ulong ISteamUGC_SubmitItemUpdate(IntPtr instancePtr, UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchChangeNote);

		[PreserveSig]
		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x2DD82B8", Offset = "0x2DD82B8", VA = "0x2DD82B8")]
		public static extern EItemUpdateStatus ISteamUGC_GetItemUpdateProgress(IntPtr instancePtr, UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60004B8")]
		[Address(RVA = "0x2DD8360", Offset = "0x2DD8360", VA = "0x2DD8360")]
		public static extern ulong ISteamUGC_SetUserItemVote(IntPtr instancePtr, PublishedFileId_t nPublishedFileID, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x2DD83F8", Offset = "0x2DD83F8", VA = "0x2DD83F8")]
		public static extern ulong ISteamUGC_GetUserItemVote(IntPtr instancePtr, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60004BA")]
		[Address(RVA = "0x2DD8488", Offset = "0x2DD8488", VA = "0x2DD8488")]
		public static extern ulong ISteamUGC_AddItemToFavorites(IntPtr instancePtr, AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x2DD8520", Offset = "0x2DD8520", VA = "0x2DD8520")]
		public static extern ulong ISteamUGC_RemoveItemFromFavorites(IntPtr instancePtr, AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x2DD85B8", Offset = "0x2DD85B8", VA = "0x2DD85B8")]
		public static extern ulong ISteamUGC_SubscribeItem(IntPtr instancePtr, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x2DD8648", Offset = "0x2DD8648", VA = "0x2DD8648")]
		public static extern ulong ISteamUGC_UnsubscribeItem(IntPtr instancePtr, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x2DD86D8", Offset = "0x2DD86D8", VA = "0x2DD86D8")]
		public static extern uint ISteamUGC_GetNumSubscribedItems(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x2DD8758", Offset = "0x2DD8758", VA = "0x2DD8758")]
		public static extern uint ISteamUGC_GetSubscribedItems(IntPtr instancePtr, [In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x2DD87F8", Offset = "0x2DD87F8", VA = "0x2DD87F8")]
		public static extern uint ISteamUGC_GetItemState(IntPtr instancePtr, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x2DD8888", Offset = "0x2DD8888", VA = "0x2DD8888")]
		public static extern bool ISteamUGC_GetItemInstallInfo(IntPtr instancePtr, PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, IntPtr pchFolder, uint cchFolderSize, out uint punTimeStamp);

		[PreserveSig]
		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x2DD8950", Offset = "0x2DD8950", VA = "0x2DD8950")]
		public static extern bool ISteamUGC_GetItemDownloadInfo(IntPtr instancePtr, PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x2DD8A00", Offset = "0x2DD8A00", VA = "0x2DD8A00")]
		public static extern bool ISteamUGC_DownloadItem(IntPtr instancePtr, PublishedFileId_t nPublishedFileID, bool bHighPriority);

		[PreserveSig]
		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x2DD8AA0", Offset = "0x2DD8AA0", VA = "0x2DD8AA0")]
		public static extern bool ISteamUGC_BInitWorkshopForGameServer(IntPtr instancePtr, DepotId_t unWorkshopDepotID, InteropHelp.UTF8StringHandle pszFolder);

		[PreserveSig]
		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x2DD8ABC", Offset = "0x2DD8ABC", VA = "0x2DD8ABC")]
		public static extern void ISteamUGC_SuspendDownloads(IntPtr instancePtr, bool bSuspend);

		[PreserveSig]
		[Token(Token = "0x60004C6")]
		[Address(RVA = "0x2DD8B4C", Offset = "0x2DD8B4C", VA = "0x2DD8B4C")]
		public static extern ulong ISteamUGC_StartPlaytimeTracking(IntPtr instancePtr, [In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x60004C7")]
		[Address(RVA = "0x2DD8BEC", Offset = "0x2DD8BEC", VA = "0x2DD8BEC")]
		public static extern ulong ISteamUGC_StopPlaytimeTracking(IntPtr instancePtr, [In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x60004C8")]
		[Address(RVA = "0x2DD8C8C", Offset = "0x2DD8C8C", VA = "0x2DD8C8C")]
		public static extern ulong ISteamUGC_StopPlaytimeTrackingForAllItems(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60004C9")]
		[Address(RVA = "0x2DD8D0C", Offset = "0x2DD8D0C", VA = "0x2DD8D0C")]
		public static extern ulong ISteamUGC_AddDependency(IntPtr instancePtr, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60004CA")]
		[Address(RVA = "0x2DD8DA4", Offset = "0x2DD8DA4", VA = "0x2DD8DA4")]
		public static extern ulong ISteamUGC_RemoveDependency(IntPtr instancePtr, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x2DD8E3C", Offset = "0x2DD8E3C", VA = "0x2DD8E3C")]
		public static extern ulong ISteamUGC_AddAppDependency(IntPtr instancePtr, PublishedFileId_t nPublishedFileID, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60004CC")]
		[Address(RVA = "0x2DD8ED4", Offset = "0x2DD8ED4", VA = "0x2DD8ED4")]
		public static extern ulong ISteamUGC_RemoveAppDependency(IntPtr instancePtr, PublishedFileId_t nPublishedFileID, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x60004CD")]
		[Address(RVA = "0x2DD8F6C", Offset = "0x2DD8F6C", VA = "0x2DD8F6C")]
		public static extern ulong ISteamUGC_GetAppDependencies(IntPtr instancePtr, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60004CE")]
		[Address(RVA = "0x2DD8FFC", Offset = "0x2DD8FFC", VA = "0x2DD8FFC")]
		public static extern ulong ISteamUGC_DeleteItem(IntPtr instancePtr, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60004CF")]
		[Address(RVA = "0x2DD908C", Offset = "0x2DD908C", VA = "0x2DD908C")]
		public static extern ulong ISteamUnifiedMessages_SendMethod(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchServiceMethod, byte[] pRequestBuffer, uint unRequestBufferSize, ulong unContext);

		[PreserveSig]
		[Token(Token = "0x60004D0")]
		[Address(RVA = "0x2DD90A8", Offset = "0x2DD90A8", VA = "0x2DD90A8")]
		public static extern bool ISteamUnifiedMessages_GetMethodResponseInfo(IntPtr instancePtr, ClientUnifiedMessageHandle hHandle, out uint punResponseSize, out EResult peResult);

		[PreserveSig]
		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x2DD9158", Offset = "0x2DD9158", VA = "0x2DD9158")]
		public static extern bool ISteamUnifiedMessages_GetMethodResponseData(IntPtr instancePtr, ClientUnifiedMessageHandle hHandle, byte[] pResponseBuffer, uint unResponseBufferSize, bool bAutoRelease);

		[PreserveSig]
		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x2DD9218", Offset = "0x2DD9218", VA = "0x2DD9218")]
		public static extern bool ISteamUnifiedMessages_ReleaseMethod(IntPtr instancePtr, ClientUnifiedMessageHandle hHandle);

		[PreserveSig]
		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x2DD92B0", Offset = "0x2DD92B0", VA = "0x2DD92B0")]
		public static extern bool ISteamUnifiedMessages_SendNotification(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchServiceNotification, byte[] pNotificationBuffer, uint unNotificationBufferSize);

		[PreserveSig]
		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x2DD92CC", Offset = "0x2DD92CC", VA = "0x2DD92CC")]
		public static extern int ISteamUser_GetHSteamUser(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x2DD934C", Offset = "0x2DD934C", VA = "0x2DD934C")]
		public static extern bool ISteamUser_BLoggedOn(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x2DD93D4", Offset = "0x2DD93D4", VA = "0x2DD93D4")]
		public static extern ulong ISteamUser_GetSteamID(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60004D7")]
		[Address(RVA = "0x2DD9454", Offset = "0x2DD9454", VA = "0x2DD9454")]
		public static extern int ISteamUser_InitiateGameConnection(IntPtr instancePtr, byte[] pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure);

		[PreserveSig]
		[Token(Token = "0x60004D8")]
		[Address(RVA = "0x2DD9524", Offset = "0x2DD9524", VA = "0x2DD9524")]
		public static extern void ISteamUser_TerminateGameConnection(IntPtr instancePtr, uint unIPServer, ushort usPortServer);

		[PreserveSig]
		[Token(Token = "0x60004D9")]
		[Address(RVA = "0x2DD95BC", Offset = "0x2DD95BC", VA = "0x2DD95BC")]
		public static extern void ISteamUser_TrackAppUsageEvent(IntPtr instancePtr, CGameID gameID, int eAppUsageEvent, InteropHelp.UTF8StringHandle pchExtraInfo);

		[PreserveSig]
		[Token(Token = "0x60004DA")]
		[Address(RVA = "0x2DD95D8", Offset = "0x2DD95D8", VA = "0x2DD95D8")]
		public static extern bool ISteamUser_GetUserDataFolder(IntPtr instancePtr, IntPtr pchBuffer, int cubBuffer);

		[PreserveSig]
		[Token(Token = "0x60004DB")]
		[Address(RVA = "0x2DD9678", Offset = "0x2DD9678", VA = "0x2DD9678")]
		public static extern void ISteamUser_StartVoiceRecording(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60004DC")]
		[Address(RVA = "0x2DD96F8", Offset = "0x2DD96F8", VA = "0x2DD96F8")]
		public static extern void ISteamUser_StopVoiceRecording(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60004DD")]
		[Address(RVA = "0x2DD9778", Offset = "0x2DD9778", VA = "0x2DD9778")]
		public static extern EVoiceResult ISteamUser_GetAvailableVoice(IntPtr instancePtr, out uint pcbCompressed, IntPtr pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

		[PreserveSig]
		[Token(Token = "0x60004DE")]
		[Address(RVA = "0x2DD9820", Offset = "0x2DD9820", VA = "0x2DD9820")]
		public static extern EVoiceResult ISteamUser_GetVoice(IntPtr instancePtr, bool bWantCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, IntPtr nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

		[PreserveSig]
		[Token(Token = "0x60004DF")]
		[Address(RVA = "0x2DD9914", Offset = "0x2DD9914", VA = "0x2DD9914")]
		public static extern EVoiceResult ISteamUser_DecompressVoice(IntPtr instancePtr, byte[] pCompressed, uint cbCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

		[PreserveSig]
		[Token(Token = "0x60004E0")]
		[Address(RVA = "0x2DD99EC", Offset = "0x2DD99EC", VA = "0x2DD99EC")]
		public static extern uint ISteamUser_GetVoiceOptimalSampleRate(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x2DD9A6C", Offset = "0x2DD9A6C", VA = "0x2DD9A6C")]
		public static extern uint ISteamUser_GetAuthSessionTicket(IntPtr instancePtr, byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x2DD9B1C", Offset = "0x2DD9B1C", VA = "0x2DD9B1C")]
		public static extern EBeginAuthSessionResult ISteamUser_BeginAuthSession(IntPtr instancePtr, byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60004E3")]
		[Address(RVA = "0x2DD9BCC", Offset = "0x2DD9BCC", VA = "0x2DD9BCC")]
		public static extern void ISteamUser_EndAuthSession(IntPtr instancePtr, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x2DD9C5C", Offset = "0x2DD9C5C", VA = "0x2DD9C5C")]
		public static extern void ISteamUser_CancelAuthTicket(IntPtr instancePtr, HAuthTicket hAuthTicket);

		[PreserveSig]
		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x2DD9CEC", Offset = "0x2DD9CEC", VA = "0x2DD9CEC")]
		public static extern EUserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(IntPtr instancePtr, CSteamID steamID, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x2DD9D84", Offset = "0x2DD9D84", VA = "0x2DD9D84")]
		public static extern bool ISteamUser_BIsBehindNAT(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x2DD9E0C", Offset = "0x2DD9E0C", VA = "0x2DD9E0C")]
		public static extern void ISteamUser_AdvertiseGame(IntPtr instancePtr, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer);

		[PreserveSig]
		[Token(Token = "0x60004E8")]
		[Address(RVA = "0x2DD9EB4", Offset = "0x2DD9EB4", VA = "0x2DD9EB4")]
		public static extern ulong ISteamUser_RequestEncryptedAppTicket(IntPtr instancePtr, byte[] pDataToInclude, int cbDataToInclude);

		[PreserveSig]
		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x2DD9F54", Offset = "0x2DD9F54", VA = "0x2DD9F54")]
		public static extern bool ISteamUser_GetEncryptedAppTicket(IntPtr instancePtr, byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x2DDA00C", Offset = "0x2DDA00C", VA = "0x2DDA00C")]
		public static extern int ISteamUser_GetGameBadgeLevel(IntPtr instancePtr, int nSeries, bool bFoil);

		[PreserveSig]
		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x2DDA0A4", Offset = "0x2DDA0A4", VA = "0x2DDA0A4")]
		public static extern int ISteamUser_GetPlayerSteamLevel(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x2DDA124", Offset = "0x2DDA124", VA = "0x2DDA124")]
		public static extern ulong ISteamUser_RequestStoreAuthURL(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchRedirectURL);

		[PreserveSig]
		[Token(Token = "0x60004ED")]
		[Address(RVA = "0x2DDA140", Offset = "0x2DDA140", VA = "0x2DDA140")]
		public static extern bool ISteamUser_BIsPhoneVerified(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60004EE")]
		[Address(RVA = "0x2DDA1C8", Offset = "0x2DDA1C8", VA = "0x2DDA1C8")]
		public static extern bool ISteamUser_BIsTwoFactorEnabled(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x2DDA250", Offset = "0x2DDA250", VA = "0x2DDA250")]
		public static extern bool ISteamUser_BIsPhoneIdentifying(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60004F0")]
		[Address(RVA = "0x2DDA2D8", Offset = "0x2DDA2D8", VA = "0x2DDA2D8")]
		public static extern bool ISteamUser_BIsPhoneRequiringVerification(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60004F1")]
		[Address(RVA = "0x2DDA360", Offset = "0x2DDA360", VA = "0x2DDA360")]
		public static extern bool ISteamUserStats_RequestCurrentStats(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x2DDA3E8", Offset = "0x2DDA3E8", VA = "0x2DDA3E8")]
		public static extern bool ISteamUserStats_GetStat(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x60004F3")]
		[Address(RVA = "0x2DDA404", Offset = "0x2DDA404", VA = "0x2DDA404")]
		public static extern bool ISteamUserStats_GetStat0(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x60004F4")]
		[Address(RVA = "0x2DDA420", Offset = "0x2DDA420", VA = "0x2DDA420")]
		public static extern bool ISteamUserStats_SetStat(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, int nData);

		[PreserveSig]
		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x2DDA43C", Offset = "0x2DDA43C", VA = "0x2DDA43C")]
		public static extern bool ISteamUserStats_SetStat0(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, float fData);

		[PreserveSig]
		[Token(Token = "0x60004F6")]
		[Address(RVA = "0x2DDA458", Offset = "0x2DDA458", VA = "0x2DDA458")]
		public static extern bool ISteamUserStats_UpdateAvgRateStat(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, float flCountThisSession, double dSessionLength);

		[PreserveSig]
		[Token(Token = "0x60004F7")]
		[Address(RVA = "0x2DDA474", Offset = "0x2DDA474", VA = "0x2DDA474")]
		public static extern bool ISteamUserStats_GetAchievement(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x60004F8")]
		[Address(RVA = "0x2DDA490", Offset = "0x2DDA490", VA = "0x2DDA490")]
		public static extern bool ISteamUserStats_SetAchievement(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60004F9")]
		[Address(RVA = "0x2DDA4AC", Offset = "0x2DDA4AC", VA = "0x2DDA4AC")]
		public static extern bool ISteamUserStats_ClearAchievement(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60004FA")]
		[Address(RVA = "0x2DDA4C8", Offset = "0x2DDA4C8", VA = "0x2DDA4C8")]
		public static extern bool ISteamUserStats_GetAchievementAndUnlockTime(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved, out uint punUnlockTime);

		[PreserveSig]
		[Token(Token = "0x60004FB")]
		[Address(RVA = "0x2DDA4E4", Offset = "0x2DDA4E4", VA = "0x2DDA4E4")]
		public static extern bool ISteamUserStats_StoreStats(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x60004FC")]
		[Address(RVA = "0x2DDA56C", Offset = "0x2DDA56C", VA = "0x2DDA56C")]
		public static extern int ISteamUserStats_GetAchievementIcon(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x2DDA588", Offset = "0x2DDA588", VA = "0x2DDA588")]
		public static extern IntPtr ISteamUserStats_GetAchievementDisplayAttribute(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x2DDA5A4", Offset = "0x2DDA5A4", VA = "0x2DDA5A4")]
		public static extern bool ISteamUserStats_IndicateAchievementProgress(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, uint nCurProgress, uint nMaxProgress);

		[PreserveSig]
		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x2DDA5C0", Offset = "0x2DDA5C0", VA = "0x2DDA5C0")]
		public static extern uint ISteamUserStats_GetNumAchievements(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000500")]
		[Address(RVA = "0x2DDA640", Offset = "0x2DDA640", VA = "0x2DDA640")]
		public static extern IntPtr ISteamUserStats_GetAchievementName(IntPtr instancePtr, uint iAchievement);

		[PreserveSig]
		[Token(Token = "0x6000501")]
		[Address(RVA = "0x2DDA6D0", Offset = "0x2DDA6D0", VA = "0x2DDA6D0")]
		public static extern ulong ISteamUserStats_RequestUserStats(IntPtr instancePtr, CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x6000502")]
		[Address(RVA = "0x2DDA760", Offset = "0x2DDA760", VA = "0x2DDA760")]
		public static extern bool ISteamUserStats_GetUserStat(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x6000503")]
		[Address(RVA = "0x2DDA77C", Offset = "0x2DDA77C", VA = "0x2DDA77C")]
		public static extern bool ISteamUserStats_GetUserStat0(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x6000504")]
		[Address(RVA = "0x2DDA798", Offset = "0x2DDA798", VA = "0x2DDA798")]
		public static extern bool ISteamUserStats_GetUserAchievement(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000505")]
		[Address(RVA = "0x2DDA7B4", Offset = "0x2DDA7B4", VA = "0x2DDA7B4")]
		public static extern bool ISteamUserStats_GetUserAchievementAndUnlockTime(IntPtr instancePtr, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved, out uint punUnlockTime);

		[PreserveSig]
		[Token(Token = "0x6000506")]
		[Address(RVA = "0x2DDA7D0", Offset = "0x2DDA7D0", VA = "0x2DDA7D0")]
		public static extern bool ISteamUserStats_ResetAllStats(IntPtr instancePtr, bool bAchievementsToo);

		[PreserveSig]
		[Token(Token = "0x6000507")]
		[Address(RVA = "0x2DDA868", Offset = "0x2DDA868", VA = "0x2DDA868")]
		public static extern ulong ISteamUserStats_FindOrCreateLeaderboard(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType);

		[PreserveSig]
		[Token(Token = "0x6000508")]
		[Address(RVA = "0x2DDA884", Offset = "0x2DDA884", VA = "0x2DDA884")]
		public static extern ulong ISteamUserStats_FindLeaderboard(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchLeaderboardName);

		[PreserveSig]
		[Token(Token = "0x6000509")]
		[Address(RVA = "0x2DDA8A0", Offset = "0x2DDA8A0", VA = "0x2DDA8A0")]
		public static extern IntPtr ISteamUserStats_GetLeaderboardName(IntPtr instancePtr, SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x600050A")]
		[Address(RVA = "0x2DDA930", Offset = "0x2DDA930", VA = "0x2DDA930")]
		public static extern int ISteamUserStats_GetLeaderboardEntryCount(IntPtr instancePtr, SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x600050B")]
		[Address(RVA = "0x2DDA9C0", Offset = "0x2DDA9C0", VA = "0x2DDA9C0")]
		public static extern ELeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(IntPtr instancePtr, SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x600050C")]
		[Address(RVA = "0x2DDAA50", Offset = "0x2DDAA50", VA = "0x2DDAA50")]
		public static extern ELeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(IntPtr instancePtr, SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x600050D")]
		[Address(RVA = "0x2DDAAE0", Offset = "0x2DDAAE0", VA = "0x2DDAAE0")]
		public static extern ulong ISteamUserStats_DownloadLeaderboardEntries(IntPtr instancePtr, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

		[PreserveSig]
		[Token(Token = "0x600050E")]
		[Address(RVA = "0x2DDAB90", Offset = "0x2DDAB90", VA = "0x2DDAB90")]
		public static extern ulong ISteamUserStats_DownloadLeaderboardEntriesForUsers(IntPtr instancePtr, SteamLeaderboard_t hSteamLeaderboard, [In][Out] CSteamID[] prgUsers, int cUsers);

		[PreserveSig]
		[Token(Token = "0x600050F")]
		[Address(RVA = "0x2DDAC40", Offset = "0x2DDAC40", VA = "0x2DDAC40")]
		public static extern bool ISteamUserStats_GetDownloadedLeaderboardEntry(IntPtr instancePtr, SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, out LeaderboardEntry_t pLeaderboardEntry, [In][Out] int[] pDetails, int cDetailsMax);

		[PreserveSig]
		[Token(Token = "0x6000510")]
		[Address(RVA = "0x2DDAD10", Offset = "0x2DDAD10", VA = "0x2DDAD10")]
		public static extern ulong ISteamUserStats_UploadLeaderboardScore(IntPtr instancePtr, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, [In][Out] int[] pScoreDetails, int cScoreDetailsCount);

		[PreserveSig]
		[Token(Token = "0x6000511")]
		[Address(RVA = "0x2DDADD8", Offset = "0x2DDADD8", VA = "0x2DDADD8")]
		public static extern ulong ISteamUserStats_AttachLeaderboardUGC(IntPtr instancePtr, SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC);

		[PreserveSig]
		[Token(Token = "0x6000512")]
		[Address(RVA = "0x2DDAE70", Offset = "0x2DDAE70", VA = "0x2DDAE70")]
		public static extern ulong ISteamUserStats_GetNumberOfCurrentPlayers(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000513")]
		[Address(RVA = "0x2DDAEF0", Offset = "0x2DDAEF0", VA = "0x2DDAEF0")]
		public static extern ulong ISteamUserStats_RequestGlobalAchievementPercentages(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000514")]
		[Address(RVA = "0x2DDAF70", Offset = "0x2DDAF70", VA = "0x2DDAF70")]
		public static extern int ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr instancePtr, IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000515")]
		[Address(RVA = "0x2DDB034", Offset = "0x2DDB034", VA = "0x2DDB034")]
		public static extern int ISteamUserStats_GetNextMostAchievedAchievementInfo(IntPtr instancePtr, int iIteratorPrevious, IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000516")]
		[Address(RVA = "0x2DDB108", Offset = "0x2DDB108", VA = "0x2DDB108")]
		public static extern bool ISteamUserStats_GetAchievementAchievedPercent(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchName, out float pflPercent);

		[PreserveSig]
		[Token(Token = "0x6000517")]
		[Address(RVA = "0x2DDB124", Offset = "0x2DDB124", VA = "0x2DDB124")]
		public static extern ulong ISteamUserStats_RequestGlobalStats(IntPtr instancePtr, int nHistoryDays);

		[PreserveSig]
		[Token(Token = "0x6000518")]
		[Address(RVA = "0x2DDB1B4", Offset = "0x2DDB1B4", VA = "0x2DDB1B4")]
		public static extern bool ISteamUserStats_GetGlobalStat(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchStatName, out long pData);

		[PreserveSig]
		[Token(Token = "0x6000519")]
		[Address(RVA = "0x2DDB1D0", Offset = "0x2DDB1D0", VA = "0x2DDB1D0")]
		public static extern bool ISteamUserStats_GetGlobalStat0(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchStatName, out double pData);

		[PreserveSig]
		[Token(Token = "0x600051A")]
		[Address(RVA = "0x2DDB1EC", Offset = "0x2DDB1EC", VA = "0x2DDB1EC")]
		public static extern int ISteamUserStats_GetGlobalStatHistory(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchStatName, [In][Out] long[] pData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x600051B")]
		[Address(RVA = "0x2DDB208", Offset = "0x2DDB208", VA = "0x2DDB208")]
		public static extern int ISteamUserStats_GetGlobalStatHistory0(IntPtr instancePtr, InteropHelp.UTF8StringHandle pchStatName, [In][Out] double[] pData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x600051C")]
		[Address(RVA = "0x2DDB224", Offset = "0x2DDB224", VA = "0x2DDB224")]
		public static extern uint ISteamUtils_GetSecondsSinceAppActive(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x600051D")]
		[Address(RVA = "0x2DDB2A4", Offset = "0x2DDB2A4", VA = "0x2DDB2A4")]
		public static extern uint ISteamUtils_GetSecondsSinceComputerActive(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x600051E")]
		[Address(RVA = "0x2DDB324", Offset = "0x2DDB324", VA = "0x2DDB324")]
		public static extern EUniverse ISteamUtils_GetConnectedUniverse(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x600051F")]
		[Address(RVA = "0x2DDB3A4", Offset = "0x2DDB3A4", VA = "0x2DDB3A4")]
		public static extern uint ISteamUtils_GetServerRealTime(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000520")]
		[Address(RVA = "0x2DDB424", Offset = "0x2DDB424", VA = "0x2DDB424")]
		public static extern IntPtr ISteamUtils_GetIPCountry(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000521")]
		[Address(RVA = "0x2DDB4A4", Offset = "0x2DDB4A4", VA = "0x2DDB4A4")]
		public static extern bool ISteamUtils_GetImageSize(IntPtr instancePtr, int iImage, out uint pnWidth, out uint pnHeight);

		[PreserveSig]
		[Token(Token = "0x6000522")]
		[Address(RVA = "0x2DDB554", Offset = "0x2DDB554", VA = "0x2DDB554")]
		public static extern bool ISteamUtils_GetImageRGBA(IntPtr instancePtr, int iImage, byte[] pubDest, int nDestBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000523")]
		[Address(RVA = "0x2DDB60C", Offset = "0x2DDB60C", VA = "0x2DDB60C")]
		public static extern bool ISteamUtils_GetCSERIPPort(IntPtr instancePtr, out uint unIP, out ushort usPort);

		[PreserveSig]
		[Token(Token = "0x6000524")]
		[Address(RVA = "0x2DDB6AC", Offset = "0x2DDB6AC", VA = "0x2DDB6AC")]
		public static extern byte ISteamUtils_GetCurrentBatteryPower(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000525")]
		[Address(RVA = "0x2DDB72C", Offset = "0x2DDB72C", VA = "0x2DDB72C")]
		public static extern uint ISteamUtils_GetAppID(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000526")]
		[Address(RVA = "0x2DDB7AC", Offset = "0x2DDB7AC", VA = "0x2DDB7AC")]
		public static extern void ISteamUtils_SetOverlayNotificationPosition(IntPtr instancePtr, ENotificationPosition eNotificationPosition);

		[PreserveSig]
		[Token(Token = "0x6000527")]
		[Address(RVA = "0x2DDB83C", Offset = "0x2DDB83C", VA = "0x2DDB83C")]
		public static extern bool ISteamUtils_IsAPICallCompleted(IntPtr instancePtr, SteamAPICall_t hSteamAPICall, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x6000528")]
		[Address(RVA = "0x2DDB8F0", Offset = "0x2DDB8F0", VA = "0x2DDB8F0")]
		public static extern ESteamAPICallFailure ISteamUtils_GetAPICallFailureReason(IntPtr instancePtr, SteamAPICall_t hSteamAPICall);

		[PreserveSig]
		[Token(Token = "0x6000529")]
		[Address(RVA = "0x2DDB980", Offset = "0x2DDB980", VA = "0x2DDB980")]
		public static extern bool ISteamUtils_GetAPICallResult(IntPtr instancePtr, SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x600052A")]
		[Address(RVA = "0x2DDBA5C", Offset = "0x2DDBA5C", VA = "0x2DDBA5C")]
		public static extern uint ISteamUtils_GetIPCCallCount(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x600052B")]
		[Address(RVA = "0x2DDBADC", Offset = "0x2DDBADC", VA = "0x2DDBADC")]
		public static extern void ISteamUtils_SetWarningMessageHook(IntPtr instancePtr, SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x600052C")]
		[Address(RVA = "0x2DDBB74", Offset = "0x2DDBB74", VA = "0x2DDBB74")]
		public static extern bool ISteamUtils_IsOverlayEnabled(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x600052D")]
		[Address(RVA = "0x2DDBBFC", Offset = "0x2DDBBFC", VA = "0x2DDBBFC")]
		public static extern bool ISteamUtils_BOverlayNeedsPresent(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x600052E")]
		[Address(RVA = "0x2DDBC84", Offset = "0x2DDBC84", VA = "0x2DDBC84")]
		public static extern ulong ISteamUtils_CheckFileSignature(IntPtr instancePtr, InteropHelp.UTF8StringHandle szFileName);

		[PreserveSig]
		[Token(Token = "0x600052F")]
		[Address(RVA = "0x2DDBCA0", Offset = "0x2DDBCA0", VA = "0x2DDBCA0")]
		public static extern bool ISteamUtils_ShowGamepadTextInput(IntPtr instancePtr, EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, InteropHelp.UTF8StringHandle pchDescription, uint unCharMax, InteropHelp.UTF8StringHandle pchExistingText);

		[PreserveSig]
		[Token(Token = "0x6000530")]
		[Address(RVA = "0x2DDBCBC", Offset = "0x2DDBCBC", VA = "0x2DDBCBC")]
		public static extern uint ISteamUtils_GetEnteredGamepadTextLength(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000531")]
		[Address(RVA = "0x2DDBD3C", Offset = "0x2DDBD3C", VA = "0x2DDBD3C")]
		public static extern bool ISteamUtils_GetEnteredGamepadTextInput(IntPtr instancePtr, IntPtr pchText, uint cchText);

		[PreserveSig]
		[Token(Token = "0x6000532")]
		[Address(RVA = "0x2DDBDDC", Offset = "0x2DDBDDC", VA = "0x2DDBDDC")]
		public static extern IntPtr ISteamUtils_GetSteamUILanguage(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000533")]
		[Address(RVA = "0x2DDBE5C", Offset = "0x2DDBE5C", VA = "0x2DDBE5C")]
		public static extern bool ISteamUtils_IsSteamRunningInVR(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000534")]
		[Address(RVA = "0x2DDBEE4", Offset = "0x2DDBEE4", VA = "0x2DDBEE4")]
		public static extern void ISteamUtils_SetOverlayNotificationInset(IntPtr instancePtr, int nHorizontalInset, int nVerticalInset);

		[PreserveSig]
		[Token(Token = "0x6000535")]
		[Address(RVA = "0x2DDBF7C", Offset = "0x2DDBF7C", VA = "0x2DDBF7C")]
		public static extern bool ISteamUtils_IsSteamInBigPictureMode(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000536")]
		[Address(RVA = "0x2DDC004", Offset = "0x2DDC004", VA = "0x2DDC004")]
		public static extern void ISteamUtils_StartVRDashboard(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000537")]
		[Address(RVA = "0x2DDC084", Offset = "0x2DDC084", VA = "0x2DDC084")]
		public static extern bool ISteamUtils_IsVRHeadsetStreamingEnabled(IntPtr instancePtr);

		[PreserveSig]
		[Token(Token = "0x6000538")]
		[Address(RVA = "0x2DDC10C", Offset = "0x2DDC10C", VA = "0x2DDC10C")]
		public static extern void ISteamUtils_SetVRHeadsetStreamingEnabled(IntPtr instancePtr, bool bEnabled);

		[PreserveSig]
		[Token(Token = "0x6000539")]
		[Address(RVA = "0x2DDC19C", Offset = "0x2DDC19C", VA = "0x2DDC19C")]
		public static extern void ISteamVideo_GetVideoURL(IntPtr instancePtr, AppId_t unVideoAppID);

		[PreserveSig]
		[Token(Token = "0x600053A")]
		[Address(RVA = "0x2DDC22C", Offset = "0x2DDC22C", VA = "0x2DDC22C")]
		public static extern bool ISteamVideo_IsBroadcasting(IntPtr instancePtr, out int pnNumViewers);

		[PreserveSig]
		[Token(Token = "0x600053B")]
		[Address(RVA = "0x2DDC2C4", Offset = "0x2DDC2C4", VA = "0x2DDC2C4")]
		public static extern void ISteamVideo_GetOPFSettings(IntPtr instancePtr, AppId_t unVideoAppID);

		[PreserveSig]
		[Token(Token = "0x600053C")]
		[Address(RVA = "0x2DDC354", Offset = "0x2DDC354", VA = "0x2DDC354")]
		public static extern bool ISteamVideo_GetOPFStringForApp(IntPtr instancePtr, AppId_t unVideoAppID, IntPtr pchBuffer, ref int pnBufferSize);
	}
	[Token(Token = "0x200002F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DBE0", Offset = "0x124DBE0")]
	public struct SteamAppInstalled_t
	{
		[Token(Token = "0x40000C5")]
		public const int k_iCallback = 3901;

		[Token(Token = "0x40000C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000030")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DBF4", Offset = "0x124DBF4")]
	public struct SteamAppUninstalled_t
	{
		[Token(Token = "0x40000C7")]
		public const int k_iCallback = 3902;

		[Token(Token = "0x40000C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000031")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DC08", Offset = "0x124DC08")]
	public struct DlcInstalled_t
	{
		[Token(Token = "0x40000C9")]
		public const int k_iCallback = 1005;

		[Token(Token = "0x40000CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000032")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DC1C", Offset = "0x124DC1C")]
	public struct RegisterActivationCodeResponse_t
	{
		[Token(Token = "0x40000CB")]
		public const int k_iCallback = 1008;

		[Token(Token = "0x40000CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ERegisterActivationCodeResult m_eResult;

		[Token(Token = "0x40000CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unPackageRegistered;
	}
	[Token(Token = "0x2000033")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DC30", Offset = "0x124DC30")]
	public struct NewLaunchQueryParameters_t
	{
		[Token(Token = "0x40000CE")]
		public const int k_iCallback = 1014;
	}
	[Token(Token = "0x2000034")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DC44", Offset = "0x124DC44")]
	public struct AppProofOfPurchaseKeyResponse_t
	{
		[Token(Token = "0x40000CF")]
		public const int k_iCallback = 1021;

		[Token(Token = "0x40000D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40000D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nAppID;

		[Token(Token = "0x40000D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_cchKeyLength;

		[Token(Token = "0x40000D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchKey;
	}
	[Token(Token = "0x2000035")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DC58", Offset = "0x124DC58")]
	public struct FileDetailsResult_t
	{
		[Token(Token = "0x40000D4")]
		public const int k_iCallback = 1023;

		[Token(Token = "0x40000D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40000D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulFileSize;

		[Token(Token = "0x40000D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[] m_FileSHA;

		[Token(Token = "0x40000D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_unFlags;
	}
	[Token(Token = "0x2000036")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DC6C", Offset = "0x124DC6C")]
	public struct PersonaStateChange_t
	{
		[Token(Token = "0x40000D9")]
		public const int k_iCallback = 304;

		[Token(Token = "0x40000DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamID;

		[Token(Token = "0x40000DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EPersonaChange m_nChangeFlags;
	}
	[Token(Token = "0x2000037")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DC80", Offset = "0x124DC80")]
	public struct GameOverlayActivated_t
	{
		[Token(Token = "0x40000DC")]
		public const int k_iCallback = 331;

		[Token(Token = "0x40000DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bActive;
	}
	[Token(Token = "0x2000038")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DC94", Offset = "0x124DC94")]
	public struct GameServerChangeRequested_t
	{
		[Token(Token = "0x40000DE")]
		public const int k_iCallback = 332;

		[Token(Token = "0x40000DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_rgchServer;

		[Token(Token = "0x40000E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchPassword;
	}
	[Token(Token = "0x2000039")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DCA8", Offset = "0x124DCA8")]
	public struct GameLobbyJoinRequested_t
	{
		[Token(Token = "0x40000E1")]
		public const int k_iCallback = 333;

		[Token(Token = "0x40000E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDLobby;

		[Token(Token = "0x40000E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDFriend;
	}
	[Token(Token = "0x200003A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DCBC", Offset = "0x124DCBC")]
	public struct AvatarImageLoaded_t
	{
		[Token(Token = "0x40000E4")]
		public const int k_iCallback = 334;

		[Token(Token = "0x40000E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamID;

		[Token(Token = "0x40000E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iImage;

		[Token(Token = "0x40000E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_iWide;

		[Token(Token = "0x40000E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iTall;
	}
	[Token(Token = "0x200003B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DCD0", Offset = "0x124DCD0")]
	public struct ClanOfficerListResponse_t
	{
		[Token(Token = "0x40000E9")]
		public const int k_iCallback = 335;

		[Token(Token = "0x40000EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClan;

		[Token(Token = "0x40000EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_cOfficers;

		[Token(Token = "0x40000EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte m_bSuccess;
	}
	[Token(Token = "0x200003C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DCE4", Offset = "0x124DCE4")]
	public struct FriendRichPresenceUpdate_t
	{
		[Token(Token = "0x40000ED")]
		public const int k_iCallback = 336;

		[Token(Token = "0x40000EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDFriend;

		[Token(Token = "0x40000EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x200003D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DCF8", Offset = "0x124DCF8")]
	public struct GameRichPresenceJoinRequested_t
	{
		[Token(Token = "0x40000F0")]
		public const int k_iCallback = 337;

		[Token(Token = "0x40000F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDFriend;

		[Token(Token = "0x40000F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchConnect;
	}
	[Token(Token = "0x200003E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DD0C", Offset = "0x124DD0C")]
	public struct GameConnectedClanChatMsg_t
	{
		[Token(Token = "0x40000F3")]
		public const int k_iCallback = 338;

		[Token(Token = "0x40000F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x40000F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x40000F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iMessageID;
	}
	[Token(Token = "0x200003F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DD20", Offset = "0x124DD20")]
	public struct GameConnectedChatJoin_t
	{
		[Token(Token = "0x40000F7")]
		public const int k_iCallback = 339;

		[Token(Token = "0x40000F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x40000F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000040")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DD34", Offset = "0x124DD34")]
	public struct GameConnectedChatLeave_t
	{
		[Token(Token = "0x40000FA")]
		public const int k_iCallback = 340;

		[Token(Token = "0x40000FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x40000FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x40000FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bKicked;

		[Token(Token = "0x40000FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_bDropped;
	}
	[Token(Token = "0x2000041")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DD48", Offset = "0x124DD48")]
	public struct DownloadClanActivityCountsResult_t
	{
		[Token(Token = "0x40000FF")]
		public const int k_iCallback = 341;

		[Token(Token = "0x4000100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSuccess;
	}
	[Token(Token = "0x2000042")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DD5C", Offset = "0x124DD5C")]
	public struct JoinClanChatRoomCompletionResult_t
	{
		[Token(Token = "0x4000101")]
		public const int k_iCallback = 342;

		[Token(Token = "0x4000102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x4000103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EChatRoomEnterResponse m_eChatRoomEnterResponse;
	}
	[Token(Token = "0x2000043")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DD70", Offset = "0x124DD70")]
	public struct GameConnectedFriendChatMsg_t
	{
		[Token(Token = "0x4000104")]
		public const int k_iCallback = 343;

		[Token(Token = "0x4000105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x4000106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iMessageID;
	}
	[Token(Token = "0x2000044")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DD84", Offset = "0x124DD84")]
	public struct FriendsGetFollowerCount_t
	{
		[Token(Token = "0x4000107")]
		public const int k_iCallback = 344;

		[Token(Token = "0x4000108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x400010A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nCount;
	}
	[Token(Token = "0x2000045")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DD98", Offset = "0x124DD98")]
	public struct FriendsIsFollowing_t
	{
		[Token(Token = "0x400010B")]
		public const int k_iCallback = 345;

		[Token(Token = "0x400010C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400010D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x400010E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bIsFollowing;
	}
	[Token(Token = "0x2000046")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DDAC", Offset = "0x124DDAC")]
	public struct FriendsEnumerateFollowingList_t
	{
		[Token(Token = "0x400010F")]
		public const int k_iCallback = 346;

		[Token(Token = "0x4000110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID[] m_rgSteamID;

		[Token(Token = "0x4000112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nTotalResultCount;
	}
	[Token(Token = "0x2000047")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DDC0", Offset = "0x124DDC0")]
	public struct SetPersonaNameResponse_t
	{
		[Token(Token = "0x4000114")]
		public const int k_iCallback = 347;

		[Token(Token = "0x4000115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSuccess;

		[Token(Token = "0x4000116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool m_bLocalSuccess;

		[Token(Token = "0x4000117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_result;
	}
	[Token(Token = "0x2000048")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DDD4", Offset = "0x124DDD4")]
	public struct GCMessageAvailable_t
	{
		[Token(Token = "0x4000118")]
		public const int k_iCallback = 1701;

		[Token(Token = "0x4000119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nMessageSize;
	}
	[Token(Token = "0x2000049")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DDE8", Offset = "0x124DDE8")]
	public struct GCMessageFailed_t
	{
		[Token(Token = "0x400011A")]
		public const int k_iCallback = 1702;
	}
	[Token(Token = "0x200004A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DDFC", Offset = "0x124DDFC")]
	public struct GSClientApprove_t
	{
		[Token(Token = "0x400011B")]
		public const int k_iCallback = 201;

		[Token(Token = "0x400011C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x400011D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_OwnerSteamID;
	}
	[Token(Token = "0x200004B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DE10", Offset = "0x124DE10")]
	public struct GSClientDeny_t
	{
		[Token(Token = "0x400011E")]
		public const int k_iCallback = 202;

		[Token(Token = "0x400011F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EDenyReason m_eDenyReason;

		[Token(Token = "0x4000121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchOptionalText;
	}
	[Token(Token = "0x200004C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DE24", Offset = "0x124DE24")]
	public struct GSClientKick_t
	{
		[Token(Token = "0x4000122")]
		public const int k_iCallback = 203;

		[Token(Token = "0x4000123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EDenyReason m_eDenyReason;
	}
	[Token(Token = "0x200004D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DE38", Offset = "0x124DE38")]
	public struct GSClientAchievementStatus_t
	{
		[Token(Token = "0x4000125")]
		public const int k_iCallback = 206;

		[Token(Token = "0x4000126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamID;

		[Token(Token = "0x4000127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_pchAchievement;

		[Token(Token = "0x4000128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUnlocked;
	}
	[Token(Token = "0x200004E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DE4C", Offset = "0x124DE4C")]
	public struct GSPolicyResponse_t
	{
		[Token(Token = "0x4000129")]
		public const int k_iCallback = 115;

		[Token(Token = "0x400012A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSecure;
	}
	[Token(Token = "0x200004F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DE60", Offset = "0x124DE60")]
	public struct GSGameplayStats_t
	{
		[Token(Token = "0x400012B")]
		public const int k_iCallback = 207;

		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nRank;

		[Token(Token = "0x400012E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_unTotalConnects;

		[Token(Token = "0x400012F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unTotalMinutesPlayed;
	}
	[Token(Token = "0x2000050")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DE74", Offset = "0x124DE74")]
	public struct GSClientGroupStatus_t
	{
		[Token(Token = "0x4000130")]
		public const int k_iCallback = 208;

		[Token(Token = "0x4000131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamIDUser;

		[Token(Token = "0x4000132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_SteamIDGroup;

		[Token(Token = "0x4000133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bMember;

		[Token(Token = "0x4000134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_bOfficer;
	}
	[Token(Token = "0x2000051")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DE88", Offset = "0x124DE88")]
	public struct GSReputation_t
	{
		[Token(Token = "0x4000135")]
		public const int k_iCallback = 209;

		[Token(Token = "0x4000136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unReputationScore;

		[Token(Token = "0x4000138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bBanned;

		[Token(Token = "0x4000139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unBannedIP;

		[Token(Token = "0x400013A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort m_usBannedPort;

		[Token(Token = "0x400013B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ulong m_ulBannedGameID;

		[Token(Token = "0x400013C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_unBanExpires;
	}
	[Token(Token = "0x2000052")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DE9C", Offset = "0x124DE9C")]
	public struct AssociateWithClanResult_t
	{
		[Token(Token = "0x400013D")]
		public const int k_iCallback = 210;

		[Token(Token = "0x400013E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000053")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DEB0", Offset = "0x124DEB0")]
	public struct ComputeNewPlayerCompatibilityResult_t
	{
		[Token(Token = "0x400013F")]
		public const int k_iCallback = 211;

		[Token(Token = "0x4000140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_cPlayersThatDontLikeCandidate;

		[Token(Token = "0x4000142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_cPlayersThatCandidateDoesntLike;

		[Token(Token = "0x4000143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_cClanPlayersThatDontLikeCandidate;

		[Token(Token = "0x4000144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CSteamID m_SteamIDCandidate;
	}
	[Token(Token = "0x2000054")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DEC4", Offset = "0x124DEC4")]
	public struct GSStatsReceived_t
	{
		[Token(Token = "0x4000145")]
		public const int k_iCallback = 1800;

		[Token(Token = "0x4000146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000055")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DED8", Offset = "0x124DED8")]
	public struct GSStatsStored_t
	{
		[Token(Token = "0x4000148")]
		public const int k_iCallback = 1801;

		[Token(Token = "0x4000149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400014A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000056")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DEEC", Offset = "0x124DEEC")]
	public struct GSStatsUnloaded_t
	{
		[Token(Token = "0x400014B")]
		public const int k_iCallback = 1108;

		[Token(Token = "0x400014C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000057")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DF00", Offset = "0x124DF00")]
	public struct HTML_BrowserReady_t
	{
		[Token(Token = "0x400014D")]
		public const int k_iCallback = 4501;

		[Token(Token = "0x400014E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x2000058")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DF14", Offset = "0x124DF14")]
	public struct HTML_NeedsPaint_t
	{
		[Token(Token = "0x400014F")]
		public const int k_iCallback = 4502;

		[Token(Token = "0x4000150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr pBGRA;

		[Token(Token = "0x4000152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint unWide;

		[Token(Token = "0x4000153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint unTall;

		[Token(Token = "0x4000154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unUpdateX;

		[Token(Token = "0x4000155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unUpdateY;

		[Token(Token = "0x4000156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint unUpdateWide;

		[Token(Token = "0x4000157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint unUpdateTall;

		[Token(Token = "0x4000158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint unScrollX;

		[Token(Token = "0x4000159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint unScrollY;

		[Token(Token = "0x400015A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float flPageScale;

		[Token(Token = "0x400015B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint unPageSerial;
	}
	[Token(Token = "0x2000059")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DF28", Offset = "0x124DF28")]
	public struct HTML_StartRequest_t
	{
		[Token(Token = "0x400015C")]
		public const int k_iCallback = 4503;

		[Token(Token = "0x400015D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400015E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x400015F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchTarget;

		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string pchPostData;

		[Token(Token = "0x4000161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool bIsRedirect;
	}
	[Token(Token = "0x200005A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DF3C", Offset = "0x124DF3C")]
	public struct HTML_CloseBrowser_t
	{
		[Token(Token = "0x4000162")]
		public const int k_iCallback = 4504;

		[Token(Token = "0x4000163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x200005B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DF50", Offset = "0x124DF50")]
	public struct HTML_URLChanged_t
	{
		[Token(Token = "0x4000164")]
		public const int k_iCallback = 4505;

		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchPostData;

		[Token(Token = "0x4000168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bIsRedirect;

		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string pchPageTitle;

		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool bNewNavigation;
	}
	[Token(Token = "0x200005C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DF64", Offset = "0x124DF64")]
	public struct HTML_FinishedRequest_t
	{
		[Token(Token = "0x400016B")]
		public const int k_iCallback = 4506;

		[Token(Token = "0x400016C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400016D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x400016E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchPageTitle;
	}
	[Token(Token = "0x200005D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DF78", Offset = "0x124DF78")]
	public struct HTML_OpenLinkInNewTab_t
	{
		[Token(Token = "0x400016F")]
		public const int k_iCallback = 4507;

		[Token(Token = "0x4000170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;
	}
	[Token(Token = "0x200005E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DF8C", Offset = "0x124DF8C")]
	public struct HTML_ChangedTitle_t
	{
		[Token(Token = "0x4000172")]
		public const int k_iCallback = 4508;

		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchTitle;
	}
	[Token(Token = "0x200005F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DFA0", Offset = "0x124DFA0")]
	public struct HTML_SearchResults_t
	{
		[Token(Token = "0x4000175")]
		public const int k_iCallback = 4509;

		[Token(Token = "0x4000176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unResults;

		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unCurrentMatch;
	}
	[Token(Token = "0x2000060")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DFB4", Offset = "0x124DFB4")]
	public struct HTML_CanGoBackAndForward_t
	{
		[Token(Token = "0x4000179")]
		public const int k_iCallback = 4510;

		[Token(Token = "0x400017A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400017B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool bCanGoBack;

		[Token(Token = "0x400017C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool bCanGoForward;
	}
	[Token(Token = "0x2000061")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DFC8", Offset = "0x124DFC8")]
	public struct HTML_HorizontalScroll_t
	{
		[Token(Token = "0x400017D")]
		public const int k_iCallback = 4511;

		[Token(Token = "0x400017E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400017F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unScrollMax;

		[Token(Token = "0x4000180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unScrollCurrent;

		[Token(Token = "0x4000181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float flPageScale;

		[Token(Token = "0x4000182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bVisible;

		[Token(Token = "0x4000183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unPageSize;
	}
	[Token(Token = "0x2000062")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DFDC", Offset = "0x124DFDC")]
	public struct HTML_VerticalScroll_t
	{
		[Token(Token = "0x4000184")]
		public const int k_iCallback = 4512;

		[Token(Token = "0x4000185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unScrollMax;

		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unScrollCurrent;

		[Token(Token = "0x4000188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float flPageScale;

		[Token(Token = "0x4000189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bVisible;

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unPageSize;
	}
	[Token(Token = "0x2000063")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124DFF0", Offset = "0x124DFF0")]
	public struct HTML_LinkAtPosition_t
	{
		[Token(Token = "0x400018B")]
		public const int k_iCallback = 4513;

		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400018D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint x;

		[Token(Token = "0x400018E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint y;

		[Token(Token = "0x400018F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchURL;

		[Token(Token = "0x4000190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bInput;

		[Token(Token = "0x4000191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool bLiveLink;
	}
	[Token(Token = "0x2000064")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E004", Offset = "0x124E004")]
	public struct HTML_JSAlert_t
	{
		[Token(Token = "0x4000192")]
		public const int k_iCallback = 4514;

		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMessage;
	}
	[Token(Token = "0x2000065")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E018", Offset = "0x124E018")]
	public struct HTML_JSConfirm_t
	{
		[Token(Token = "0x4000195")]
		public const int k_iCallback = 4515;

		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMessage;
	}
	[Token(Token = "0x2000066")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E02C", Offset = "0x124E02C")]
	public struct HTML_FileOpenDialog_t
	{
		[Token(Token = "0x4000198")]
		public const int k_iCallback = 4516;

		[Token(Token = "0x4000199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400019A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchTitle;

		[Token(Token = "0x400019B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchInitialFile;
	}
	[Token(Token = "0x2000067")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E040", Offset = "0x124E040")]
	public struct HTML_NewWindow_t
	{
		[Token(Token = "0x400019C")]
		public const int k_iCallback = 4521;

		[Token(Token = "0x400019D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint unX;

		[Token(Token = "0x40001A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unY;

		[Token(Token = "0x40001A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unWide;

		[Token(Token = "0x40001A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint unTall;

		[Token(Token = "0x40001A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HHTMLBrowser unNewWindow_BrowserHandle;
	}
	[Token(Token = "0x2000068")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E054", Offset = "0x124E054")]
	public struct HTML_SetCursor_t
	{
		[Token(Token = "0x40001A4")]
		public const int k_iCallback = 4522;

		[Token(Token = "0x40001A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40001A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint eMouseCursor;
	}
	[Token(Token = "0x2000069")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E068", Offset = "0x124E068")]
	public struct HTML_StatusText_t
	{
		[Token(Token = "0x40001A7")]
		public const int k_iCallback = 4523;

		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x200006A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E07C", Offset = "0x124E07C")]
	public struct HTML_ShowToolTip_t
	{
		[Token(Token = "0x40001AA")]
		public const int k_iCallback = 4524;

		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x200006B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E090", Offset = "0x124E090")]
	public struct HTML_UpdateToolTip_t
	{
		[Token(Token = "0x40001AD")]
		public const int k_iCallback = 4525;

		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x200006C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E0A4", Offset = "0x124E0A4")]
	public struct HTML_HideToolTip_t
	{
		[Token(Token = "0x40001B0")]
		public const int k_iCallback = 4526;

		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x200006D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E0B8", Offset = "0x124E0B8")]
	public struct HTTPRequestCompleted_t
	{
		[Token(Token = "0x40001B2")]
		public const int k_iCallback = 2101;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulContextValue;

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bRequestSuccessful;

		[Token(Token = "0x40001B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EHTTPStatusCode m_eStatusCode;

		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_unBodySize;
	}
	[Token(Token = "0x200006E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E0CC", Offset = "0x124E0CC")]
	public struct HTTPRequestHeadersReceived_t
	{
		[Token(Token = "0x40001B8")]
		public const int k_iCallback = 2102;

		[Token(Token = "0x40001B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulContextValue;
	}
	[Token(Token = "0x200006F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E0E0", Offset = "0x124E0E0")]
	public struct HTTPRequestDataReceived_t
	{
		[Token(Token = "0x40001BB")]
		public const int k_iCallback = 2103;

		[Token(Token = "0x40001BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x40001BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulContextValue;

		[Token(Token = "0x40001BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_cOffset;

		[Token(Token = "0x40001BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_cBytesReceived;
	}
	[Token(Token = "0x2000070")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E0F4", Offset = "0x124E0F4")]
	public struct SteamInventoryResultReady_t
	{
		[Token(Token = "0x40001C0")]
		public const int k_iCallback = 4700;

		[Token(Token = "0x40001C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamInventoryResult_t m_handle;

		[Token(Token = "0x40001C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_result;
	}
	[Token(Token = "0x2000071")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E108", Offset = "0x124E108")]
	public struct SteamInventoryFullUpdate_t
	{
		[Token(Token = "0x40001C3")]
		public const int k_iCallback = 4701;

		[Token(Token = "0x40001C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamInventoryResult_t m_handle;
	}
	[Token(Token = "0x2000072")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E11C", Offset = "0x124E11C")]
	public struct SteamInventoryDefinitionUpdate_t
	{
		[Token(Token = "0x40001C5")]
		public const int k_iCallback = 4702;
	}
	[Token(Token = "0x2000073")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E130", Offset = "0x124E130")]
	public struct SteamInventoryEligiblePromoItemDefIDs_t
	{
		[Token(Token = "0x40001C6")]
		public const int k_iCallback = 4703;

		[Token(Token = "0x40001C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_result;

		[Token(Token = "0x40001C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_numEligiblePromoItemDefs;

		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x2000074")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E144", Offset = "0x124E144")]
	public struct FavoritesListChanged_t
	{
		[Token(Token = "0x40001CB")]
		public const int k_iCallback = 502;

		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nIP;

		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nQueryPort;

		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nConnPort;

		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nAppID;

		[Token(Token = "0x40001D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nFlags;

		[Token(Token = "0x40001D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bAdd;

		[Token(Token = "0x40001D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AccountID_t m_unAccountId;
	}
	[Token(Token = "0x2000075")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E158", Offset = "0x124E158")]
	public struct LobbyInvite_t
	{
		[Token(Token = "0x40001D3")]
		public const int k_iCallback = 503;

		[Token(Token = "0x40001D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDUser;

		[Token(Token = "0x40001D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40001D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong m_ulGameID;
	}
	[Token(Token = "0x2000076")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E16C", Offset = "0x124E16C")]
	public struct LobbyEnter_t
	{
		[Token(Token = "0x40001D7")]
		public const int k_iCallback = 504;

		[Token(Token = "0x40001D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40001D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_rgfChatPermissions;

		[Token(Token = "0x40001DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bLocked;

		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_EChatRoomEnterResponse;
	}
	[Token(Token = "0x2000077")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E180", Offset = "0x124E180")]
	public struct LobbyDataUpdate_t
	{
		[Token(Token = "0x40001DC")]
		public const int k_iCallback = 505;

		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40001DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDMember;

		[Token(Token = "0x40001DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bSuccess;
	}
	[Token(Token = "0x2000078")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E194", Offset = "0x124E194")]
	public struct LobbyChatUpdate_t
	{
		[Token(Token = "0x40001E0")]
		public const int k_iCallback = 506;

		[Token(Token = "0x40001E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40001E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDUserChanged;

		[Token(Token = "0x40001E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong m_ulSteamIDMakingChange;

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_rgfChatMemberStateChange;
	}
	[Token(Token = "0x2000079")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E1A8", Offset = "0x124E1A8")]
	public struct LobbyChatMsg_t
	{
		[Token(Token = "0x40001E5")]
		public const int k_iCallback = 507;

		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDUser;

		[Token(Token = "0x40001E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_eChatEntryType;

		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_iChatID;
	}
	[Token(Token = "0x200007A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E1BC", Offset = "0x124E1BC")]
	public struct LobbyGameCreated_t
	{
		[Token(Token = "0x40001EA")]
		public const int k_iCallback = 509;

		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDGameServer;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_unIP;

		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ushort m_usPort;
	}
	[Token(Token = "0x200007B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E1D0", Offset = "0x124E1D0")]
	public struct LobbyMatchList_t
	{
		[Token(Token = "0x40001EF")]
		public const int k_iCallback = 510;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nLobbiesMatching;
	}
	[Token(Token = "0x200007C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E1E4", Offset = "0x124E1E4")]
	public struct LobbyKicked_t
	{
		[Token(Token = "0x40001F1")]
		public const int k_iCallback = 512;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDAdmin;

		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bKickedDueToDisconnect;
	}
	[Token(Token = "0x200007D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E1F8", Offset = "0x124E1F8")]
	public struct LobbyCreated_t
	{
		[Token(Token = "0x40001F5")]
		public const int k_iCallback = 513;

		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulSteamIDLobby;
	}
	[Token(Token = "0x200007E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E20C", Offset = "0x124E20C")]
	public struct FavoritesListAccountsUpdated_t
	{
		[Token(Token = "0x40001F8")]
		public const int k_iCallback = 516;

		[Token(Token = "0x40001F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200007F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E220", Offset = "0x124E220")]
	public struct PlaybackStatusHasChanged_t
	{
		[Token(Token = "0x40001FA")]
		public const int k_iCallback = 4001;
	}
	[Token(Token = "0x2000080")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E234", Offset = "0x124E234")]
	public struct VolumeHasChanged_t
	{
		[Token(Token = "0x40001FB")]
		public const int k_iCallback = 4002;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flNewVolume;
	}
	[Token(Token = "0x2000081")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E248", Offset = "0x124E248")]
	public struct MusicPlayerRemoteWillActivate_t
	{
		[Token(Token = "0x40001FD")]
		public const int k_iCallback = 4101;
	}
	[Token(Token = "0x2000082")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E25C", Offset = "0x124E25C")]
	public struct MusicPlayerRemoteWillDeactivate_t
	{
		[Token(Token = "0x40001FE")]
		public const int k_iCallback = 4102;
	}
	[Token(Token = "0x2000083")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E270", Offset = "0x124E270")]
	public struct MusicPlayerRemoteToFront_t
	{
		[Token(Token = "0x40001FF")]
		public const int k_iCallback = 4103;
	}
	[Token(Token = "0x2000084")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E284", Offset = "0x124E284")]
	public struct MusicPlayerWillQuit_t
	{
		[Token(Token = "0x4000200")]
		public const int k_iCallback = 4104;
	}
	[Token(Token = "0x2000085")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E298", Offset = "0x124E298")]
	public struct MusicPlayerWantsPlay_t
	{
		[Token(Token = "0x4000201")]
		public const int k_iCallback = 4105;
	}
	[Token(Token = "0x2000086")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E2AC", Offset = "0x124E2AC")]
	public struct MusicPlayerWantsPause_t
	{
		[Token(Token = "0x4000202")]
		public const int k_iCallback = 4106;
	}
	[Token(Token = "0x2000087")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E2C0", Offset = "0x124E2C0")]
	public struct MusicPlayerWantsPlayPrevious_t
	{
		[Token(Token = "0x4000203")]
		public const int k_iCallback = 4107;
	}
	[Token(Token = "0x2000088")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E2D4", Offset = "0x124E2D4")]
	public struct MusicPlayerWantsPlayNext_t
	{
		[Token(Token = "0x4000204")]
		public const int k_iCallback = 4108;
	}
	[Token(Token = "0x2000089")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E2E8", Offset = "0x124E2E8")]
	public struct MusicPlayerWantsShuffled_t
	{
		[Token(Token = "0x4000205")]
		public const int k_iCallback = 4109;

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bShuffled;
	}
	[Token(Token = "0x200008A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E2FC", Offset = "0x124E2FC")]
	public struct MusicPlayerWantsLooped_t
	{
		[Token(Token = "0x4000207")]
		public const int k_iCallback = 4110;

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bLooped;
	}
	[Token(Token = "0x200008B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E310", Offset = "0x124E310")]
	public struct MusicPlayerWantsVolume_t
	{
		[Token(Token = "0x4000209")]
		public const int k_iCallback = 4011;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flNewVolume;
	}
	[Token(Token = "0x200008C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E324", Offset = "0x124E324")]
	public struct MusicPlayerSelectsQueueEntry_t
	{
		[Token(Token = "0x400020B")]
		public const int k_iCallback = 4012;

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nID;
	}
	[Token(Token = "0x200008D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E338", Offset = "0x124E338")]
	public struct MusicPlayerSelectsPlaylistEntry_t
	{
		[Token(Token = "0x400020D")]
		public const int k_iCallback = 4013;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nID;
	}
	[Token(Token = "0x200008E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E34C", Offset = "0x124E34C")]
	public struct MusicPlayerWantsPlayingRepeatStatus_t
	{
		[Token(Token = "0x400020F")]
		public const int k_iCallback = 4114;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_nPlayingRepeatStatus;
	}
	[Token(Token = "0x200008F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E360", Offset = "0x124E360")]
	public struct P2PSessionRequest_t
	{
		[Token(Token = "0x4000211")]
		public const int k_iCallback = 1202;

		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDRemote;
	}
	[Token(Token = "0x2000090")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E374", Offset = "0x124E374")]
	public struct P2PSessionConnectFail_t
	{
		[Token(Token = "0x4000213")]
		public const int k_iCallback = 1203;

		[Token(Token = "0x4000214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDRemote;

		[Token(Token = "0x4000215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte m_eP2PSessionError;
	}
	[Token(Token = "0x2000091")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E388", Offset = "0x124E388")]
	public struct SocketStatusCallback_t
	{
		[Token(Token = "0x4000216")]
		public const int k_iCallback = 1201;

		[Token(Token = "0x4000217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SNetSocket_t m_hSocket;

		[Token(Token = "0x4000218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SNetListenSocket_t m_hListenSocket;

		[Token(Token = "0x4000219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDRemote;

		[Token(Token = "0x400021A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_eSNetSocketState;
	}
	[Token(Token = "0x2000092")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E39C", Offset = "0x124E39C")]
	public struct SteamParentalSettingsChanged_t
	{
		[Token(Token = "0x400021B")]
		public const int k_iCallback = 5001;
	}
	[Token(Token = "0x2000093")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E3B0", Offset = "0x124E3B0")]
	public struct RemoteStorageAppSyncedClient_t
	{
		[Token(Token = "0x400021C")]
		public const int k_iCallback = 1301;

		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x400021E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;

		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_unNumDownloads;
	}
	[Token(Token = "0x2000094")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E3C4", Offset = "0x124E3C4")]
	public struct RemoteStorageAppSyncedServer_t
	{
		[Token(Token = "0x4000220")]
		public const int k_iCallback = 1302;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_unNumUploads;
	}
	[Token(Token = "0x2000095")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E3D8", Offset = "0x124E3D8")]
	public struct RemoteStorageAppSyncProgress_t
	{
		[Token(Token = "0x4000224")]
		public const int k_iCallback = 1303;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_rgchCurrentFile;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_uBytesTransferredThisChunk;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double m_dAppPercentComplete;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool m_bUploading;
	}
	[Token(Token = "0x2000096")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E3EC", Offset = "0x124E3EC")]
	public struct RemoteStorageAppSyncStatusCheck_t
	{
		[Token(Token = "0x400022A")]
		public const int k_iCallback = 1305;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000097")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E400", Offset = "0x124E400")]
	public struct RemoteStorageFileShareResult_t
	{
		[Token(Token = "0x400022D")]
		public const int k_iCallback = 1307;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchFilename;
	}
	[Token(Token = "0x2000098")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E414", Offset = "0x124E414")]
	public struct RemoteStoragePublishFileResult_t
	{
		[Token(Token = "0x4000231")]
		public const int k_iCallback = 1309;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x2000099")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E428", Offset = "0x124E428")]
	public struct RemoteStorageDeletePublishedFileResult_t
	{
		[Token(Token = "0x4000235")]
		public const int k_iCallback = 1311;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x200009A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E43C", Offset = "0x124E43C")]
	public struct RemoteStorageEnumerateUserPublishedFilesResult_t
	{
		[Token(Token = "0x4000238")]
		public const int k_iCallback = 1312;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;
	}
	[Token(Token = "0x200009B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E450", Offset = "0x124E450")]
	public struct RemoteStorageSubscribePublishedFileResult_t
	{
		[Token(Token = "0x400023D")]
		public const int k_iCallback = 1313;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x200009C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E464", Offset = "0x124E464")]
	public struct RemoteStorageEnumerateUserSubscribedFilesResult_t
	{
		[Token(Token = "0x4000240")]
		public const int k_iCallback = 1314;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint[] m_rgRTimeSubscribed;
	}
	[Token(Token = "0x200009D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E478", Offset = "0x124E478")]
	public struct RemoteStorageUnsubscribePublishedFileResult_t
	{
		[Token(Token = "0x4000246")]
		public const int k_iCallback = 1315;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x200009E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E48C", Offset = "0x124E48C")]
	public struct RemoteStorageUpdatePublishedFileResult_t
	{
		[Token(Token = "0x4000249")]
		public const int k_iCallback = 1316;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x200009F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E4A0", Offset = "0x124E4A0")]
	public struct RemoteStorageDownloadUGCResult_t
	{
		[Token(Token = "0x400024D")]
		public const int k_iCallback = 1317;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nSizeInBytes;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_pchFileName;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ulong m_ulSteamIDOwner;
	}
	[Token(Token = "0x20000A0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E4B4", Offset = "0x124E4B4")]
	public struct RemoteStorageGetPublishedFileDetailsResult_t
	{
		[Token(Token = "0x4000254")]
		public const int k_iCallback = 1318;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nCreatorAppID;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nConsumerAppID;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_rgchTitle;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string m_rgchDescription;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UGCHandle_t m_hPreviewFile;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ulong m_ulSteamIDOwner;

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public uint m_rtimeCreated;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public uint m_rtimeUpdated;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ERemoteStoragePublishedFileVisibility m_eVisibility;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool m_bBanned;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string m_rgchTags;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool m_bTagsTruncated;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string m_pchFileName;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int m_nFileSize;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int m_nPreviewFileSize;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string m_rgchURL;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public EWorkshopFileType m_eFileType;

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool m_bAcceptedForUse;
	}
	[Token(Token = "0x20000A1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E4C8", Offset = "0x124E4C8")]
	public struct RemoteStorageEnumerateWorkshopFilesResult_t
	{
		[Token(Token = "0x400026A")]
		public const int k_iCallback = 1319;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] m_rgScore;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AppId_t m_nAppId;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint m_unStartIndex;
	}
	[Token(Token = "0x20000A2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E4DC", Offset = "0x124E4DC")]
	public struct RemoteStorageGetPublishedItemVoteDetailsResult_t
	{
		[Token(Token = "0x4000272")]
		public const int k_iCallback = 1320;

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_unPublishedFileId;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nVotesFor;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nVotesAgainst;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nReports;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m_fScore;
	}
	[Token(Token = "0x20000A3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E4F0", Offset = "0x124E4F0")]
	public struct RemoteStoragePublishedFileSubscribed_t
	{
		[Token(Token = "0x4000279")]
		public const int k_iCallback = 1321;

		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20000A4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E504", Offset = "0x124E504")]
	public struct RemoteStoragePublishedFileUnsubscribed_t
	{
		[Token(Token = "0x400027C")]
		public const int k_iCallback = 1322;

		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20000A5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E518", Offset = "0x124E518")]
	public struct RemoteStoragePublishedFileDeleted_t
	{
		[Token(Token = "0x400027F")]
		public const int k_iCallback = 1323;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20000A6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E52C", Offset = "0x124E52C")]
	public struct RemoteStorageUpdateUserPublishedItemVoteResult_t
	{
		[Token(Token = "0x4000282")]
		public const int k_iCallback = 1324;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x20000A7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E540", Offset = "0x124E540")]
	public struct RemoteStorageUserVoteDetails_t
	{
		[Token(Token = "0x4000285")]
		public const int k_iCallback = 1325;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EWorkshopVote m_eVote;
	}
	[Token(Token = "0x20000A8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E554", Offset = "0x124E554")]
	public struct RemoteStorageEnumerateUserSharedWorkshopFilesResult_t
	{
		[Token(Token = "0x4000289")]
		public const int k_iCallback = 1326;

		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;
	}
	[Token(Token = "0x20000A9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E568", Offset = "0x124E568")]
	public struct RemoteStorageSetUserPublishedFileActionResult_t
	{
		[Token(Token = "0x400028E")]
		public const int k_iCallback = 1327;

		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EWorkshopFileAction m_eAction;
	}
	[Token(Token = "0x20000AA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E57C", Offset = "0x124E57C")]
	public struct RemoteStorageEnumeratePublishedFilesByUserActionResult_t
	{
		[Token(Token = "0x4000292")]
		public const int k_iCallback = 1328;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EWorkshopFileAction m_eAction;

		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint[] m_rgRTimeUpdated;
	}
	[Token(Token = "0x20000AB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E590", Offset = "0x124E590")]
	public struct RemoteStoragePublishFileProgress_t
	{
		[Token(Token = "0x4000299")]
		public const int k_iCallback = 1329;

		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double m_dPercentFile;

		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bPreview;
	}
	[Token(Token = "0x20000AC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E5A4", Offset = "0x124E5A4")]
	public struct RemoteStoragePublishedFileUpdated_t
	{
		[Token(Token = "0x400029C")]
		public const int k_iCallback = 1330;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ulong m_ulUnused;
	}
	[Token(Token = "0x20000AD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E5B8", Offset = "0x124E5B8")]
	public struct RemoteStorageFileWriteAsyncComplete_t
	{
		[Token(Token = "0x40002A0")]
		public const int k_iCallback = 1331;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000AE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E5CC", Offset = "0x124E5CC")]
	public struct RemoteStorageFileReadAsyncComplete_t
	{
		[Token(Token = "0x40002A2")]
		public const int k_iCallback = 1332;

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamAPICall_t m_hFileReadAsync;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nOffset;

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_cubRead;
	}
	[Token(Token = "0x20000AF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E5E0", Offset = "0x124E5E0")]
	public struct ScreenshotReady_t
	{
		[Token(Token = "0x40002A7")]
		public const int k_iCallback = 2301;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ScreenshotHandle m_hLocal;

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000B0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E5F4", Offset = "0x124E5F4")]
	public struct ScreenshotRequested_t
	{
		[Token(Token = "0x40002AA")]
		public const int k_iCallback = 2302;
	}
	[Token(Token = "0x20000B1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E608", Offset = "0x124E608")]
	public struct SteamUGCQueryCompleted_t
	{
		[Token(Token = "0x40002AB")]
		public const int k_iCallback = 3401;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UGCQueryHandle_t m_handle;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unNumResultsReturned;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_unTotalMatchingResults;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x20000B2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E61C", Offset = "0x124E61C")]
	public struct SteamUGCRequestUGCDetailsResult_t
	{
		[Token(Token = "0x40002B1")]
		public const int k_iCallback = 3402;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamUGCDetails_t m_details;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x20000B3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E630", Offset = "0x124E630")]
	public struct CreateItemResult_t
	{
		[Token(Token = "0x40002B4")]
		public const int k_iCallback = 3403;

		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x20000B4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E644", Offset = "0x124E644")]
	public struct SubmitItemUpdateResult_t
	{
		[Token(Token = "0x40002B8")]
		public const int k_iCallback = 3404;

		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x20000B5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E658", Offset = "0x124E658")]
	public struct ItemInstalled_t
	{
		[Token(Token = "0x40002BC")]
		public const int k_iCallback = 3405;

		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_unAppID;

		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x20000B6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E66C", Offset = "0x124E66C")]
	public struct DownloadItemResult_t
	{
		[Token(Token = "0x40002BF")]
		public const int k_iCallback = 3406;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_unAppID;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000B7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E680", Offset = "0x124E680")]
	public struct UserFavoriteItemsListChanged_t
	{
		[Token(Token = "0x40002C3")]
		public const int k_iCallback = 3407;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bWasAddRequest;
	}
	[Token(Token = "0x20000B8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E694", Offset = "0x124E694")]
	public struct SetUserItemVoteResult_t
	{
		[Token(Token = "0x40002C7")]
		public const int k_iCallback = 3408;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bVoteUp;
	}
	[Token(Token = "0x20000B9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E6A8", Offset = "0x124E6A8")]
	public struct GetUserItemVoteResult_t
	{
		[Token(Token = "0x40002CB")]
		public const int k_iCallback = 3409;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bVotedUp;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public bool m_bVotedDown;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public bool m_bVoteSkipped;
	}
	[Token(Token = "0x20000BA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E6BC", Offset = "0x124E6BC")]
	public struct StartPlaytimeTrackingResult_t
	{
		[Token(Token = "0x40002D1")]
		public const int k_iCallback = 3410;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000BB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E6D0", Offset = "0x124E6D0")]
	public struct StopPlaytimeTrackingResult_t
	{
		[Token(Token = "0x40002D3")]
		public const int k_iCallback = 3411;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000BC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E6E4", Offset = "0x124E6E4")]
	public struct AddUGCDependencyResult_t
	{
		[Token(Token = "0x40002D5")]
		public const int k_iCallback = 3412;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PublishedFileId_t m_nChildPublishedFileId;
	}
	[Token(Token = "0x20000BD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E6F8", Offset = "0x124E6F8")]
	public struct RemoveUGCDependencyResult_t
	{
		[Token(Token = "0x40002D9")]
		public const int k_iCallback = 3413;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PublishedFileId_t m_nChildPublishedFileId;
	}
	[Token(Token = "0x20000BE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E70C", Offset = "0x124E70C")]
	public struct AddAppDependencyResult_t
	{
		[Token(Token = "0x40002DD")]
		public const int k_iCallback = 3414;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20000BF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E720", Offset = "0x124E720")]
	public struct RemoveAppDependencyResult_t
	{
		[Token(Token = "0x40002E1")]
		public const int k_iCallback = 3415;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20000C0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E734", Offset = "0x124E734")]
	public struct GetAppDependenciesResult_t
	{
		[Token(Token = "0x40002E5")]
		public const int k_iCallback = 3416;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t[] m_rgAppIDs;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_nNumAppDependencies;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_nTotalNumAppDependencies;
	}
	[Token(Token = "0x20000C1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E748", Offset = "0x124E748")]
	public struct DeleteItemResult_t
	{
		[Token(Token = "0x40002EB")]
		public const int k_iCallback = 3417;

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x20000C2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E75C", Offset = "0x124E75C")]
	public struct SteamUnifiedMessagesSendMethodResult_t
	{
		[Token(Token = "0x40002EE")]
		public const int k_iCallback = 2501;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ClientUnifiedMessageHandle m_hHandle;

		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_unContext;

		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EResult m_eResult;

		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_unResponseSize;
	}
	[Token(Token = "0x20000C3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E770", Offset = "0x124E770")]
	public struct SteamServersConnected_t
	{
		[Token(Token = "0x40002F3")]
		public const int k_iCallback = 101;
	}
	[Token(Token = "0x20000C4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E784", Offset = "0x124E784")]
	public struct SteamServerConnectFailure_t
	{
		[Token(Token = "0x40002F4")]
		public const int k_iCallback = 102;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool m_bStillRetrying;
	}
	[Token(Token = "0x20000C5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E798", Offset = "0x124E798")]
	public struct SteamServersDisconnected_t
	{
		[Token(Token = "0x40002F7")]
		public const int k_iCallback = 103;

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000C6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E7AC", Offset = "0x124E7AC")]
	public struct ClientGameServerDeny_t
	{
		[Token(Token = "0x40002F9")]
		public const int k_iCallback = 113;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_uAppID;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unGameServerIP;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort m_usGameServerPort;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort m_bSecure;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_uReason;
	}
	[Token(Token = "0x20000C7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E7C0", Offset = "0x124E7C0")]
	public struct IPCFailure_t
	{
		[Token(Token = "0x40002FF")]
		public const int k_iCallback = 117;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_eFailureType;
	}
	[Token(Token = "0x20000C8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E7D4", Offset = "0x124E7D4")]
	public struct LicensesUpdated_t
	{
		[Token(Token = "0x4000301")]
		public const int k_iCallback = 125;
	}
	[Token(Token = "0x20000C9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E7E8", Offset = "0x124E7E8")]
	public struct ValidateAuthTicketResponse_t
	{
		[Token(Token = "0x4000302")]
		public const int k_iCallback = 143;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EAuthSessionResponse m_eAuthSessionResponse;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CSteamID m_OwnerSteamID;
	}
	[Token(Token = "0x20000CA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E7FC", Offset = "0x124E7FC")]
	public struct MicroTxnAuthorizationResponse_t
	{
		[Token(Token = "0x4000306")]
		public const int k_iCallback = 152;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_unAppID;

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong m_ulOrderID;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte m_bAuthorized;
	}
	[Token(Token = "0x20000CB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E810", Offset = "0x124E810")]
	public struct EncryptedAppTicketResponse_t
	{
		[Token(Token = "0x400030A")]
		public const int k_iCallback = 154;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000CC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E824", Offset = "0x124E824")]
	public struct GetAuthSessionTicketResponse_t
	{
		[Token(Token = "0x400030C")]
		public const int k_iCallback = 163;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HAuthTicket m_hAuthTicket;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000CD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E838", Offset = "0x124E838")]
	public struct GameWebCallback_t
	{
		[Token(Token = "0x400030F")]
		public const int k_iCallback = 164;

		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szURL;
	}
	[Token(Token = "0x20000CE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E84C", Offset = "0x124E84C")]
	public struct StoreAuthURLResponse_t
	{
		[Token(Token = "0x4000311")]
		public const int k_iCallback = 165;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szURL;
	}
	[StructLayout(2)]
	[Token(Token = "0x20000CF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E860", Offset = "0x124E860")]
	public struct UserStatsReceived_t
	{
		[Token(Token = "0x4000313")]
		public const int k_iCallback = 1101;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20000D0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E874", Offset = "0x124E874")]
	public struct UserStatsStored_t
	{
		[Token(Token = "0x4000317")]
		public const int k_iCallback = 1102;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000D1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E888", Offset = "0x124E888")]
	public struct UserAchievementStored_t
	{
		[Token(Token = "0x400031A")]
		public const int k_iCallback = 1103;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bGroupAchievement;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchAchievementName;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_nCurProgress;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_nMaxProgress;
	}
	[Token(Token = "0x20000D2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E89C", Offset = "0x124E89C")]
	public struct LeaderboardFindResult_t
	{
		[Token(Token = "0x4000320")]
		public const int k_iCallback = 1104;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte m_bLeaderboardFound;
	}
	[Token(Token = "0x20000D3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E8B0", Offset = "0x124E8B0")]
	public struct LeaderboardScoresDownloaded_t
	{
		[Token(Token = "0x4000323")]
		public const int k_iCallback = 1105;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamLeaderboardEntries_t m_hSteamLeaderboardEntries;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cEntryCount;
	}
	[Token(Token = "0x20000D4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E8C4", Offset = "0x124E8C4")]
	public struct LeaderboardScoreUploaded_t
	{
		[Token(Token = "0x4000327")]
		public const int k_iCallback = 1106;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSuccess;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nScore;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bScoreChanged;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nGlobalRankNew;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nGlobalRankPrevious;
	}
	[Token(Token = "0x20000D5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E8D8", Offset = "0x124E8D8")]
	public struct NumberOfCurrentPlayers_t
	{
		[Token(Token = "0x400032E")]
		public const int k_iCallback = 1107;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSuccess;

		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_cPlayers;
	}
	[Token(Token = "0x20000D6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E8EC", Offset = "0x124E8EC")]
	public struct UserStatsUnloaded_t
	{
		[Token(Token = "0x4000331")]
		public const int k_iCallback = 1108;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20000D7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E900", Offset = "0x124E900")]
	public struct UserAchievementIconFetched_t
	{
		[Token(Token = "0x4000333")]
		public const int k_iCallback = 1109;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CGameID m_nGameID;

		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchAchievementName;

		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bAchieved;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nIconHandle;
	}
	[Token(Token = "0x20000D8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E914", Offset = "0x124E914")]
	public struct GlobalAchievementPercentagesReady_t
	{
		[Token(Token = "0x4000338")]
		public const int k_iCallback = 1110;

		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000D9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E928", Offset = "0x124E928")]
	public struct LeaderboardUGCSet_t
	{
		[Token(Token = "0x400033B")]
		public const int k_iCallback = 1111;

		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SteamLeaderboard_t m_hSteamLeaderboard;
	}
	[Token(Token = "0x20000DA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E93C", Offset = "0x124E93C")]
	public struct GlobalStatsReceived_t
	{
		[Token(Token = "0x400033E")]
		public const int k_iCallback = 1112;

		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20000DB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E950", Offset = "0x124E950")]
	public struct IPCountry_t
	{
		[Token(Token = "0x4000341")]
		public const int k_iCallback = 701;
	}
	[Token(Token = "0x20000DC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E964", Offset = "0x124E964")]
	public struct LowBatteryPower_t
	{
		[Token(Token = "0x4000342")]
		public const int k_iCallback = 702;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_nMinutesBatteryLeft;
	}
	[Token(Token = "0x20000DD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E978", Offset = "0x124E978")]
	public struct SteamAPICallCompleted_t
	{
		[Token(Token = "0x4000344")]
		public const int k_iCallback = 703;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamAPICall_t m_hAsyncCall;

		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iCallback;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_cubParam;
	}
	[Token(Token = "0x20000DE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E98C", Offset = "0x124E98C")]
	public struct SteamShutdown_t
	{
		[Token(Token = "0x4000348")]
		public const int k_iCallback = 704;
	}
	[Token(Token = "0x20000DF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E9A0", Offset = "0x124E9A0")]
	public struct CheckFileSignature_t
	{
		[Token(Token = "0x4000349")]
		public const int k_iCallback = 705;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ECheckFileSignature m_eCheckFileSignature;
	}
	[Token(Token = "0x20000E0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E9B4", Offset = "0x124E9B4")]
	public struct GamepadTextInputDismissed_t
	{
		[Token(Token = "0x400034B")]
		public const int k_iCallback = 714;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSubmitted;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unSubmittedText;
	}
	[Token(Token = "0x20000E1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E9C8", Offset = "0x124E9C8")]
	public struct BroadcastUploadStart_t
	{
		[Token(Token = "0x400034E")]
		public const int k_iCallback = 4604;
	}
	[Token(Token = "0x20000E2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E9DC", Offset = "0x124E9DC")]
	public struct BroadcastUploadStop_t
	{
		[Token(Token = "0x400034F")]
		public const int k_iCallback = 4605;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EBroadcastUploadResult m_eResult;
	}
	[Token(Token = "0x20000E3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124E9F0", Offset = "0x124E9F0")]
	public struct GetVideoURLResult_t
	{
		[Token(Token = "0x4000351")]
		public const int k_iCallback = 4611;

		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppId_t m_unVideoAppID;

		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchURL;
	}
	[Token(Token = "0x20000E4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0x124EA04", Offset = "0x124EA04")]
	public struct GetOPFSettingsResult_t
	{
		[Token(Token = "0x4000355")]
		public const int k_iCallback = 4624;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppId_t m_unVideoAppID;
	}
	[Token(Token = "0x20000E5")]
	public static class Constants
	{
		[Token(Token = "0x4000358")]
		public const string STEAMAPPLIST_INTERFACE_VERSION = "STEAMAPPLIST_INTERFACE_VERSION001";

		[Token(Token = "0x4000359")]
		public const string STEAMAPPS_INTERFACE_VERSION = "STEAMAPPS_INTERFACE_VERSION008";

		[Token(Token = "0x400035A")]
		public const string STEAMAPPTICKET_INTERFACE_VERSION = "STEAMAPPTICKET_INTERFACE_VERSION001";

		[Token(Token = "0x400035B")]
		public const string STEAMCLIENT_INTERFACE_VERSION = "SteamClient017";

		[Token(Token = "0x400035C")]
		public const string STEAMCONTROLLER_INTERFACE_VERSION = "SteamController005";

		[Token(Token = "0x400035D")]
		public const string STEAMFRIENDS_INTERFACE_VERSION = "SteamFriends015";

		[Token(Token = "0x400035E")]
		public const string STEAMGAMECOORDINATOR_INTERFACE_VERSION = "SteamGameCoordinator001";

		[Token(Token = "0x400035F")]
		public const string STEAMGAMESERVER_INTERFACE_VERSION = "SteamGameServer012";

		[Token(Token = "0x4000360")]
		public const string STEAMGAMESERVERSTATS_INTERFACE_VERSION = "SteamGameServerStats001";

		[Token(Token = "0x4000361")]
		public const string STEAMHTMLSURFACE_INTERFACE_VERSION = "STEAMHTMLSURFACE_INTERFACE_VERSION_004";

		[Token(Token = "0x4000362")]
		public const string STEAMHTTP_INTERFACE_VERSION = "STEAMHTTP_INTERFACE_VERSION002";

		[Token(Token = "0x4000363")]
		public const string STEAMINVENTORY_INTERFACE_VERSION = "STEAMINVENTORY_INTERFACE_V002";

		[Token(Token = "0x4000364")]
		public const string STEAMMATCHMAKING_INTERFACE_VERSION = "SteamMatchMaking009";

		[Token(Token = "0x4000365")]
		public const string STEAMMATCHMAKINGSERVERS_INTERFACE_VERSION = "SteamMatchMakingServers002";

		[Token(Token = "0x4000366")]
		public const string STEAMMUSIC_INTERFACE_VERSION = "STEAMMUSIC_INTERFACE_VERSION001";

		[Token(Token = "0x4000367")]
		public const string STEAMMUSICREMOTE_INTERFACE_VERSION = "STEAMMUSICREMOTE_INTERFACE_VERSION001";

		[Token(Token = "0x4000368")]
		public const string STEAMNETWORKING_INTERFACE_VERSION = "SteamNetworking005";

		[Token(Token = "0x4000369")]
		public const string STEAMPARENTALSETTINGS_INTERFACE_VERSION = "STEAMPARENTALSETTINGS_INTERFACE_VERSION001";

		[Token(Token = "0x400036A")]
		public const string STEAMREMOTESTORAGE_INTERFACE_VERSION = "STEAMREMOTESTORAGE_INTERFACE_VERSION014";

		[Token(Token = "0x400036B")]
		public const string STEAMSCREENSHOTS_INTERFACE_VERSION = "STEAMSCREENSHOTS_INTERFACE_VERSION003";

		[Token(Token = "0x400036C")]
		public const string STEAMUGC_INTERFACE_VERSION = "STEAMUGC_INTERFACE_VERSION010";

		[Token(Token = "0x400036D")]
		public const string STEAMUNIFIEDMESSAGES_INTERFACE_VERSION = "STEAMUNIFIEDMESSAGES_INTERFACE_VERSION001";

		[Token(Token = "0x400036E")]
		public const string STEAMUSER_INTERFACE_VERSION = "SteamUser019";

		[Token(Token = "0x400036F")]
		public const string STEAMUSERSTATS_INTERFACE_VERSION = "STEAMUSERSTATS_INTERFACE_VERSION011";

		[Token(Token = "0x4000370")]
		public const string STEAMUTILS_INTERFACE_VERSION = "SteamUtils009";

		[Token(Token = "0x4000371")]
		public const string STEAMVIDEO_INTERFACE_VERSION = "STEAMVIDEO_INTERFACE_V002";

		[Token(Token = "0x4000372")]
		public const int k_cubAppProofOfPurchaseKeyMax = 240;

		[Token(Token = "0x4000373")]
		public const int k_iSteamUserCallbacks = 100;

		[Token(Token = "0x4000374")]
		public const int k_iSteamGameServerCallbacks = 200;

		[Token(Token = "0x4000375")]
		public const int k_iSteamFriendsCallbacks = 300;

		[Token(Token = "0x4000376")]
		public const int k_iSteamBillingCallbacks = 400;

		[Token(Token = "0x4000377")]
		public const int k_iSteamMatchmakingCallbacks = 500;

		[Token(Token = "0x4000378")]
		public const int k_iSteamContentServerCallbacks = 600;

		[Token(Token = "0x4000379")]
		public const int k_iSteamUtilsCallbacks = 700;

		[Token(Token = "0x400037A")]
		public const int k_iClientFriendsCallbacks = 800;

		[Token(Token = "0x400037B")]
		public const int k_iClientUserCallbacks = 900;

		[Token(Token = "0x400037C")]
		public const int k_iSteamAppsCallbacks = 1000;

		[Token(Token = "0x400037D")]
		public const int k_iSteamUserStatsCallbacks = 1100;

		[Token(Token = "0x400037E")]
		public const int k_iSteamNetworkingCallbacks = 1200;

		[Token(Token = "0x400037F")]
		public const int k_iClientRemoteStorageCallbacks = 1300;

		[Token(Token = "0x4000380")]
		public const int k_iClientDepotBuilderCallbacks = 1400;

		[Token(Token = "0x4000381")]
		public const int k_iSteamGameServerItemsCallbacks = 1500;

		[Token(Token = "0x4000382")]
		public const int k_iClientUtilsCallbacks = 1600;

		[Token(Token = "0x4000383")]
		public const int k_iSteamGameCoordinatorCallbacks = 1700;

		[Token(Token = "0x4000384")]
		public const int k_iSteamGameServerStatsCallbacks = 1800;

		[Token(Token = "0x4000385")]
		public const int k_iSteam2AsyncCallbacks = 1900;

		[Token(Token = "0x4000386")]
		public const int k_iSteamGameStatsCallbacks = 2000;

		[Token(Token = "0x4000387")]
		public const int k_iClientHTTPCallbacks = 2100;

		[Token(Token = "0x4000388")]
		public const int k_iClientScreenshotsCallbacks = 2200;

		[Token(Token = "0x4000389")]
		public const int k_iSteamScreenshotsCallbacks = 2300;

		[Token(Token = "0x400038A")]
		public const int k_iClientAudioCallbacks = 2400;

		[Token(Token = "0x400038B")]
		public const int k_iClientUnifiedMessagesCallbacks = 2500;

		[Token(Token = "0x400038C")]
		public const int k_iSteamStreamLauncherCallbacks = 2600;

		[Token(Token = "0x400038D")]
		public const int k_iClientControllerCallbacks = 2700;

		[Token(Token = "0x400038E")]
		public const int k_iSteamControllerCallbacks = 2800;

		[Token(Token = "0x400038F")]
		public const int k_iClientParentalSettingsCallbacks = 2900;

		[Token(Token = "0x4000390")]
		public const int k_iClientDeviceAuthCallbacks = 3000;

		[Token(Token = "0x4000391")]
		public const int k_iClientNetworkDeviceManagerCallbacks = 3100;

		[Token(Token = "0x4000392")]
		public const int k_iClientMusicCallbacks = 3200;

		[Token(Token = "0x4000393")]
		public const int k_iClientRemoteClientManagerCallbacks = 3300;

		[Token(Token = "0x4000394")]
		public const int k_iClientUGCCallbacks = 3400;

		[Token(Token = "0x4000395")]
		public const int k_iSteamStreamClientCallbacks = 3500;

		[Token(Token = "0x4000396")]
		public const int k_IClientProductBuilderCallbacks = 3600;

		[Token(Token = "0x4000397")]
		public const int k_iClientShortcutsCallbacks = 3700;

		[Token(Token = "0x4000398")]
		public const int k_iClientRemoteControlManagerCallbacks = 3800;

		[Token(Token = "0x4000399")]
		public const int k_iSteamAppListCallbacks = 3900;

		[Token(Token = "0x400039A")]
		public const int k_iSteamMusicCallbacks = 4000;

		[Token(Token = "0x400039B")]
		public const int k_iSteamMusicRemoteCallbacks = 4100;

		[Token(Token = "0x400039C")]
		public const int k_iClientVRCallbacks = 4200;

		[Token(Token = "0x400039D")]
		public const int k_iClientGameNotificationCallbacks = 4300;

		[Token(Token = "0x400039E")]
		public const int k_iSteamGameNotificationCallbacks = 4400;

		[Token(Token = "0x400039F")]
		public const int k_iSteamHTMLSurfaceCallbacks = 4500;

		[Token(Token = "0x40003A0")]
		public const int k_iClientVideoCallbacks = 4600;

		[Token(Token = "0x40003A1")]
		public const int k_iClientInventoryCallbacks = 4700;

		[Token(Token = "0x40003A2")]
		public const int k_iClientBluetoothManagerCallbacks = 4800;

		[Token(Token = "0x40003A3")]
		public const int k_iClientSharedConnectionCallbacks = 4900;

		[Token(Token = "0x40003A4")]
		public const int k_ISteamParentalSettingsCallbacks = 5000;

		[Token(Token = "0x40003A5")]
		public const int k_cchMaxFriendsGroupName = 64;

		[Token(Token = "0x40003A6")]
		public const int k_cFriendsGroupLimit = 100;

		[Token(Token = "0x40003A7")]
		public const int k_cEnumerateFollowersMax = 50;

		[Token(Token = "0x40003A8")]
		public const int k_cchPersonaNameMax = 128;

		[Token(Token = "0x40003A9")]
		public const int k_cwchPersonaNameMax = 32;

		[Token(Token = "0x40003AA")]
		public const int k_cubChatMetadataMax = 8192;

		[Token(Token = "0x40003AB")]
		public const int k_cchMaxRichPresenceKeys = 20;

		[Token(Token = "0x40003AC")]
		public const int k_cchMaxRichPresenceKeyLength = 64;

		[Token(Token = "0x40003AD")]
		public const int k_cchMaxRichPresenceValueLength = 256;

		[Token(Token = "0x40003AE")]
		public const int k_unServerFlagNone = 0;

		[Token(Token = "0x40003AF")]
		public const int k_unServerFlagActive = 1;

		[Token(Token = "0x40003B0")]
		public const int k_unServerFlagSecure = 2;

		[Token(Token = "0x40003B1")]
		public const int k_unServerFlagDedicated = 4;

		[Token(Token = "0x40003B2")]
		public const int k_unServerFlagLinux = 8;

		[Token(Token = "0x40003B3")]
		public const int k_unServerFlagPassworded = 16;

		[Token(Token = "0x40003B4")]
		public const int k_unServerFlagPrivate = 32;

		[Token(Token = "0x40003B5")]
		public const int k_unFavoriteFlagNone = 0;

		[Token(Token = "0x40003B6")]
		public const int k_unFavoriteFlagFavorite = 1;

		[Token(Token = "0x40003B7")]
		public const int k_unFavoriteFlagHistory = 2;

		[Token(Token = "0x40003B8")]
		public const int k_unMaxCloudFileChunkSize = 104857600;

		[Token(Token = "0x40003B9")]
		public const int k_cchPublishedDocumentTitleMax = 129;

		[Token(Token = "0x40003BA")]
		public const int k_cchPublishedDocumentDescriptionMax = 8000;

		[Token(Token = "0x40003BB")]
		public const int k_cchPublishedDocumentChangeDescriptionMax = 8000;

		[Token(Token = "0x40003BC")]
		public const int k_unEnumeratePublishedFilesMaxResults = 50;

		[Token(Token = "0x40003BD")]
		public const int k_cchTagListMax = 1025;

		[Token(Token = "0x40003BE")]
		public const int k_cchFilenameMax = 260;

		[Token(Token = "0x40003BF")]
		public const int k_cchPublishedFileURLMax = 256;

		[Token(Token = "0x40003C0")]
		public const int k_nScreenshotMaxTaggedUsers = 32;

		[Token(Token = "0x40003C1")]
		public const int k_nScreenshotMaxTaggedPublishedFiles = 32;

		[Token(Token = "0x40003C2")]
		public const int k_cubUFSTagTypeMax = 255;

		[Token(Token = "0x40003C3")]
		public const int k_cubUFSTagValueMax = 255;

		[Token(Token = "0x40003C4")]
		public const int k_ScreenshotThumbWidth = 200;

		[Token(Token = "0x40003C5")]
		public const int kNumUGCResultsPerPage = 50;

		[Token(Token = "0x40003C6")]
		public const int k_cchDeveloperMetadataMax = 5000;

		[Token(Token = "0x40003C7")]
		public const int k_cchStatNameMax = 128;

		[Token(Token = "0x40003C8")]
		public const int k_cchLeaderboardNameMax = 128;

		[Token(Token = "0x40003C9")]
		public const int k_cLeaderboardDetailsMax = 64;

		[Token(Token = "0x40003CA")]
		public const int k_cbMaxGameServerGameDir = 32;

		[Token(Token = "0x40003CB")]
		public const int k_cbMaxGameServerMapName = 32;

		[Token(Token = "0x40003CC")]
		public const int k_cbMaxGameServerGameDescription = 64;

		[Token(Token = "0x40003CD")]
		public const int k_cbMaxGameServerName = 64;

		[Token(Token = "0x40003CE")]
		public const int k_cbMaxGameServerTags = 128;

		[Token(Token = "0x40003CF")]
		public const int k_cbMaxGameServerGameData = 2048;

		[Token(Token = "0x40003D0")]
		public const int k_unSteamAccountIDMask = -1;

		[Token(Token = "0x40003D1")]
		public const int k_unSteamAccountInstanceMask = 1048575;

		[Token(Token = "0x40003D2")]
		public const int k_unSteamUserDesktopInstance = 1;

		[Token(Token = "0x40003D3")]
		public const int k_unSteamUserConsoleInstance = 2;

		[Token(Token = "0x40003D4")]
		public const int k_unSteamUserWebInstance = 4;

		[Token(Token = "0x40003D5")]
		public const int k_cchGameExtraInfoMax = 64;

		[Token(Token = "0x40003D6")]
		public const int k_nSteamEncryptedAppTicketSymmetricKeyLen = 32;

		[Token(Token = "0x40003D7")]
		public const int k_cubSaltSize = 8;

		[Token(Token = "0x40003D8")]
		public const ulong k_GIDNil = ulong.MaxValue;

		[Token(Token = "0x40003D9")]
		public const ulong k_TxnIDNil = ulong.MaxValue;

		[Token(Token = "0x40003DA")]
		public const ulong k_TxnIDUnknown = 0uL;

		[Token(Token = "0x40003DB")]
		public const int k_uPackageIdFreeSub = 0;

		[Token(Token = "0x40003DC")]
		public const int k_uPackageIdInvalid = -1;

		[Token(Token = "0x40003DD")]
		public const ulong k_ulAssetClassIdInvalid = 0uL;

		[Token(Token = "0x40003DE")]
		public const int k_uPhysicalItemIdInvalid = 0;

		[Token(Token = "0x40003DF")]
		public const int k_uCellIDInvalid = -1;

		[Token(Token = "0x40003E0")]
		public const int k_uPartnerIdInvalid = 0;

		[Token(Token = "0x40003E1")]
		public const int STEAM_CONTROLLER_MAX_COUNT = 16;

		[Token(Token = "0x40003E2")]
		public const int STEAM_CONTROLLER_MAX_ANALOG_ACTIONS = 16;

		[Token(Token = "0x40003E3")]
		public const int STEAM_CONTROLLER_MAX_DIGITAL_ACTIONS = 128;

		[Token(Token = "0x40003E4")]
		public const int STEAM_CONTROLLER_MAX_ORIGINS = 8;

		[Token(Token = "0x40003E5")]
		public const ulong STEAM_CONTROLLER_HANDLE_ALL_CONTROLLERS = ulong.MaxValue;

		[Token(Token = "0x40003E6")]
		public const float STEAM_CONTROLLER_MIN_ANALOG_ACTION_DATA = -1f;

		[Token(Token = "0x40003E7")]
		public const float STEAM_CONTROLLER_MAX_ANALOG_ACTION_DATA = 1f;

		[Token(Token = "0x40003E8")]
		public const ushort MASTERSERVERUPDATERPORT_USEGAMESOCKETSHARE = ushort.MaxValue;

		[Token(Token = "0x40003E9")]
		public const int INVALID_HTTPREQUEST_HANDLE = 0;

		[Token(Token = "0x40003EA")]
		public const byte k_nMaxLobbyKeyLength = byte.MaxValue;

		[Token(Token = "0x40003EB")]
		public const int k_SteamMusicNameMaxLength = 255;

		[Token(Token = "0x40003EC")]
		public const int k_SteamMusicPNGMaxLength = 65535;

		[Token(Token = "0x40003ED")]
		public const int QUERY_PORT_NOT_INITIALIZED = 65535;

		[Token(Token = "0x40003EE")]
		public const int QUERY_PORT_ERROR = 65534;
	}
	[Token(Token = "0x20000E6")]
	public enum ERegisterActivationCodeResult
	{
		[Token(Token = "0x40003F0")]
		k_ERegisterActivationCodeResultOK,
		[Token(Token = "0x40003F1")]
		k_ERegisterActivationCodeResultFail,
		[Token(Token = "0x40003F2")]
		k_ERegisterActivationCodeResultAlreadyRegistered,
		[Token(Token = "0x40003F3")]
		k_ERegisterActivationCodeResultTimeout,
		[Token(Token = "0x40003F4")]
		k_ERegisterActivationCodeAlreadyOwned
	}
	[Token(Token = "0x20000E7")]
	public enum ESteamControllerPad
	{
		[Token(Token = "0x40003F6")]
		k_ESteamControllerPad_Left,
		[Token(Token = "0x40003F7")]
		k_ESteamControllerPad_Right
	}
	[Token(Token = "0x20000E8")]
	public enum EControllerSource
	{
		[Token(Token = "0x40003F9")]
		k_EControllerSource_None,
		[Token(Token = "0x40003FA")]
		k_EControllerSource_LeftTrackpad,
		[Token(Token = "0x40003FB")]
		k_EControllerSource_RightTrackpad,
		[Token(Token = "0x40003FC")]
		k_EControllerSource_Joystick,
		[Token(Token = "0x40003FD")]
		k_EControllerSource_ABXY,
		[Token(Token = "0x40003FE")]
		k_EControllerSource_Switch,
		[Token(Token = "0x40003FF")]
		k_EControllerSource_LeftTrigger,
		[Token(Token = "0x4000400")]
		k_EControllerSource_RightTrigger,
		[Token(Token = "0x4000401")]
		k_EControllerSource_Gyro,
		[Token(Token = "0x4000402")]
		k_EControllerSource_CenterTrackpad,
		[Token(Token = "0x4000403")]
		k_EControllerSource_RightJoystick,
		[Token(Token = "0x4000404")]
		k_EControllerSource_DPad,
		[Token(Token = "0x4000405")]
		k_EControllerSource_Count
	}
	[Token(Token = "0x20000E9")]
	public enum EControllerSourceMode
	{
		[Token(Token = "0x4000407")]
		k_EControllerSourceMode_None,
		[Token(Token = "0x4000408")]
		k_EControllerSourceMode_Dpad,
		[Token(Token = "0x4000409")]
		k_EControllerSourceMode_Buttons,
		[Token(Token = "0x400040A")]
		k_EControllerSourceMode_FourButtons,
		[Token(Token = "0x400040B")]
		k_EControllerSourceMode_AbsoluteMouse,
		[Token(Token = "0x400040C")]
		k_EControllerSourceMode_RelativeMouse,
		[Token(Token = "0x400040D")]
		k_EControllerSourceMode_JoystickMove,
		[Token(Token = "0x400040E")]
		k_EControllerSourceMode_JoystickMouse,
		[Token(Token = "0x400040F")]
		k_EControllerSourceMode_JoystickCamera,
		[Token(Token = "0x4000410")]
		k_EControllerSourceMode_ScrollWheel,
		[Token(Token = "0x4000411")]
		k_EControllerSourceMode_Trigger,
		[Token(Token = "0x4000412")]
		k_EControllerSourceMode_TouchMenu,
		[Token(Token = "0x4000413")]
		k_EControllerSourceMode_MouseJoystick,
		[Token(Token = "0x4000414")]
		k_EControllerSourceMode_MouseRegion,
		[Token(Token = "0x4000415")]
		k_EControllerSourceMode_RadialMenu,
		[Token(Token = "0x4000416")]
		k_EControllerSourceMode_SingleButton,
		[Token(Token = "0x4000417")]
		k_EControllerSourceMode_Switches
	}
	[Token(Token = "0x20000EA")]
	public enum EControllerActionOrigin
	{
		[Token(Token = "0x4000419")]
		k_EControllerActionOrigin_None,
		[Token(Token = "0x400041A")]
		k_EControllerActionOrigin_A,
		[Token(Token = "0x400041B")]
		k_EControllerActionOrigin_B,
		[Token(Token = "0x400041C")]
		k_EControllerActionOrigin_X,
		[Token(Token = "0x400041D")]
		k_EControllerActionOrigin_Y,
		[Token(Token = "0x400041E")]
		k_EControllerActionOrigin_LeftBumper,
		[Token(Token = "0x400041F")]
		k_EControllerActionOrigin_RightBumper,
		[Token(Token = "0x4000420")]
		k_EControllerActionOrigin_LeftGrip,
		[Token(Token = "0x4000421")]
		k_EControllerActionOrigin_RightGrip,
		[Token(Token = "0x4000422")]
		k_EControllerActionOrigin_Start,
		[Token(Token = "0x4000423")]
		k_EControllerActionOrigin_Back,
		[Token(Token = "0x4000424")]
		k_EControllerActionOrigin_LeftPad_Touch,
		[Token(Token = "0x4000425")]
		k_EControllerActionOrigin_LeftPad_Swipe,
		[Token(Token = "0x4000426")]
		k_EControllerActionOrigin_LeftPad_Click,
		[Token(Token = "0x4000427")]
		k_EControllerActionOrigin_LeftPad_DPadNorth,
		[Token(Token = "0x4000428")]
		k_EControllerActionOrigin_LeftPad_DPadSouth,
		[Token(Token = "0x4000429")]
		k_EControllerActionOrigin_LeftPad_DPadWest,
		[Token(Token = "0x400042A")]
		k_EControllerActionOrigin_LeftPad_DPadEast,
		[Token(Token = "0x400042B")]
		k_EControllerActionOrigin_RightPad_Touch,
		[Token(Token = "0x400042C")]
		k_EControllerActionOrigin_RightPad_Swipe,
		[Token(Token = "0x400042D")]
		k_EControllerActionOrigin_RightPad_Click,
		[Token(Token = "0x400042E")]
		k_EControllerActionOrigin_RightPad_DPadNorth,
		[Token(Token = "0x400042F")]
		k_EControllerActionOrigin_RightPad_DPadSouth,
		[Token(Token = "0x4000430")]
		k_EControllerActionOrigin_RightPad_DPadWest,
		[Token(Token = "0x4000431")]
		k_EControllerActionOrigin_RightPad_DPadEast,
		[Token(Token = "0x4000432")]
		k_EControllerActionOrigin_LeftTrigger_Pull,
		[Token(Token = "0x4000433")]
		k_EControllerActionOrigin_LeftTrigger_Click,
		[Token(Token = "0x4000434")]
		k_EControllerActionOrigin_RightTrigger_Pull,
		[Token(Token = "0x4000435")]
		k_EControllerActionOrigin_RightTrigger_Click,
		[Token(Token = "0x4000436")]
		k_EControllerActionOrigin_LeftStick_Move,
		[Token(Token = "0x4000437")]
		k_EControllerActionOrigin_LeftStick_Click,
		[Token(Token = "0x4000438")]
		k_EControllerActionOrigin_LeftStick_DPadNorth,
		[Token(Token = "0x4000439")]
		k_EControllerActionOrigin_LeftStick_DPadSouth,
		[Token(Token = "0x400043A")]
		k_EControllerActionOrigin_LeftStick_DPadWest,
		[Token(Token = "0x400043B")]
		k_EControllerActionOrigin_LeftStick_DPadEast,
		[Token(Token = "0x400043C")]
		k_EControllerActionOrigin_Gyro_Move,
		[Token(Token = "0x400043D")]
		k_EControllerActionOrigin_Gyro_Pitch,
		[Token(Token = "0x400043E")]
		k_EControllerActionOrigin_Gyro_Yaw,
		[Token(Token = "0x400043F")]
		k_EControllerActionOrigin_Gyro_Roll,
		[Token(Token = "0x4000440")]
		k_EControllerActionOrigin_PS4_X,
		[Token(Token = "0x4000441")]
		k_EControllerActionOrigin_PS4_Circle,
		[Token(Token = "0x4000442")]
		k_EControllerActionOrigin_PS4_Triangle,
		[Token(Token = "0x4000443")]
		k_EControllerActionOrigin_PS4_Square,
		[Token(Token = "0x4000444")]
		k_EControllerActionOrigin_PS4_LeftBumper,
		[Token(Token = "0x4000445")]
		k_EControllerActionOrigin_PS4_RightBumper,
		[Token(Token = "0x4000446")]
		k_EControllerActionOrigin_PS4_Options,
		[Token(Token = "0x4000447")]
		k_EControllerActionOrigin_PS4_Share,
		[Token(Token = "0x4000448")]
		k_EControllerActionOrigin_PS4_LeftPad_Touch,
		[Token(Token = "0x4000449")]
		k_EControllerActionOrigin_PS4_LeftPad_Swipe,
		[Token(Token = "0x400044A")]
		k_EControllerActionOrigin_PS4_LeftPad_Click,
		[Token(Token = "0x400044B")]
		k_EControllerActionOrigin_PS4_LeftPad_DPadNorth,
		[Token(Token = "0x400044C")]
		k_EControllerActionOrigin_PS4_LeftPad_DPadSouth,
		[Token(Token = "0x400044D")]
		k_EControllerActionOrigin_PS4_LeftPad_DPadWest,
		[Token(Token = "0x400044E")]
		k_EControllerActionOrigin_PS4_LeftPad_DPadEast,
		[Token(Token = "0x400044F")]
		k_EControllerActionOrigin_PS4_RightPad_Touch,
		[Token(Token = "0x4000450")]
		k_EControllerActionOrigin_PS4_RightPad_Swipe,
		[Token(Token = "0x4000451")]
		k_EControllerActionOrigin_PS4_RightPad_Click,
		[Token(Token = "0x4000452")]
		k_EControllerActionOrigin_PS4_RightPad_DPadNorth,
		[Token(Token = "0x4000453")]
		k_EControllerActionOrigin_PS4_RightPad_DPadSouth,
		[Token(Token = "0x4000454")]
		k_EControllerActionOrigin_PS4_RightPad_DPadWest,
		[Token(Token = "0x4000455")]
		k_EControllerActionOrigin_PS4_RightPad_DPadEast,
		[Token(Token = "0x4000456")]
		k_EControllerActionOrigin_PS4_CenterPad_Touch,
		[Token(Token = "0x4000457")]
		k_EControllerActionOrigin_PS4_CenterPad_Swipe,
		[Token(Token = "0x4000458")]
		k_EControllerActionOrigin_PS4_CenterPad_Click,
		[Token(Token = "0x4000459")]
		k_EControllerActionOrigin_PS4_CenterPad_DPadNorth,
		[Token(Token = "0x400045A")]
		k_EControllerActionOrigin_PS4_CenterPad_DPadSouth,
		[Token(Token = "0x400045B")]
		k_EControllerActionOrigin_PS4_CenterPad_DPadWest,
		[Token(Token = "0x400045C")]
		k_EControllerActionOrigin_PS4_CenterPad_DPadEast,
		[Token(Token = "0x400045D")]
		k_EControllerActionOrigin_PS4_LeftTrigger_Pull,
		[Token(Token = "0x400045E")]
		k_EControllerActionOrigin_PS4_LeftTrigger_Click,
		[Token(Token = "0x400045F")]
		k_EControllerActionOrigin_PS4_RightTrigger_Pull,
		[Token(Token = "0x4000460")]
		k_EControllerActionOrigin_PS4_RightTrigger_Click,
		[Token(Token = "0x4000461")]
		k_EControllerActionOrigin_PS4_LeftStick_Move,
		[Token(Token = "0x4000462")]
		k_EControllerActionOrigin_PS4_LeftStick_Click,
		[Token(Token = "0x4000463")]
		k_EControllerActionOrigin_PS4_LeftStick_DPadNorth,
		[Token(Token = "0x4000464")]
		k_EControllerActionOrigin_PS4_LeftStick_DPadSouth,
		[Token(Token = "0x4000465")]
		k_EControllerActionOrigin_PS4_LeftStick_DPadWest,
		[Token(Token = "0x4000466")]
		k_EControllerActionOrigin_PS4_LeftStick_DPadEast,
		[Token(Token = "0x4000467")]
		k_EControllerActionOrigin_PS4_RightStick_Move,
		[Token(Token = "0x4000468")]
		k_EControllerActionOrigin_PS4_RightStick_Click,
		[Token(Token = "0x4000469")]
		k_EControllerActionOrigin_PS4_RightStick_DPadNorth,
		[Token(Token = "0x400046A")]
		k_EControllerActionOrigin_PS4_RightStick_DPadSouth,
		[Token(Token = "0x400046B")]
		k_EControllerActionOrigin_PS4_RightStick_DPadWest,
		[Token(Token = "0x400046C")]
		k_EControllerActionOrigin_PS4_RightStick_DPadEast,
		[Token(Token = "0x400046D")]
		k_EControllerActionOrigin_PS4_DPad_North,
		[Token(Token = "0x400046E")]
		k_EControllerActionOrigin_PS4_DPad_South,
		[Token(Token = "0x400046F")]
		k_EControllerActionOrigin_PS4_DPad_West,
		[Token(Token = "0x4000470")]
		k_EControllerActionOrigin_PS4_DPad_East,
		[Token(Token = "0x4000471")]
		k_EControllerActionOrigin_PS4_Gyro_Move,
		[Token(Token = "0x4000472")]
		k_EControllerActionOrigin_PS4_Gyro_Pitch,
		[Token(Token = "0x4000473")]
		k_EControllerActionOrigin_PS4_Gyro_Yaw,
		[Token(Token = "0x4000474")]
		k_EControllerActionOrigin_PS4_Gyro_Roll,
		[Token(Token = "0x4000475")]
		k_EControllerActionOrigin_XBoxOne_A,
		[Token(Token = "0x4000476")]
		k_EControllerActionOrigin_XBoxOne_B,
		[Token(Token = "0x4000477")]
		k_EControllerActionOrigin_XBoxOne_X,
		[Token(Token = "0x4000478")]
		k_EControllerActionOrigin_XBoxOne_Y,
		[Token(Token = "0x4000479")]
		k_EControllerActionOrigin_XBoxOne_LeftBumper,
		[Token(Token = "0x400047A")]
		k_EControllerActionOrigin_XBoxOne_RightBumper,
		[Token(Token = "0x400047B")]
		k_EControllerActionOrigin_XBoxOne_Menu,
		[Token(Token = "0x400047C")]
		k_EControllerActionOrigin_XBoxOne_View,
		[Token(Token = "0x400047D")]
		k_EControllerActionOrigin_XBoxOne_LeftTrigger_Pull,
		[Token(Token = "0x400047E")]
		k_EControllerActionOrigin_XBoxOne_LeftTrigger_Click,
		[Token(Token = "0x400047F")]
		k_EControllerActionOrigin_XBoxOne_RightTrigger_Pull,
		[Token(Token = "0x4000480")]
		k_EControllerActionOrigin_XBoxOne_RightTrigger_Click,
		[Token(Token = "0x4000481")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_Move,
		[Token(Token = "0x4000482")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_Click,
		[Token(Token = "0x4000483")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_DPadNorth,
		[Token(Token = "0x4000484")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_DPadSouth,
		[Token(Token = "0x4000485")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_DPadWest,
		[Token(Token = "0x4000486")]
		k_EControllerActionOrigin_XBoxOne_LeftStick_DPadEast,
		[Token(Token = "0x4000487")]
		k_EControllerActionOrigin_XBoxOne_RightStick_Move,
		[Token(Token = "0x4000488")]
		k_EControllerActionOrigin_XBoxOne_RightStick_Click,
		[Token(Token = "0x4000489")]
		k_EControllerActionOrigin_XBoxOne_RightStick_DPadNorth,
		[Token(Token = "0x400048A")]
		k_EControllerActionOrigin_XBoxOne_RightStick_DPadSouth,
		[Token(Token = "0x400048B")]
		k_EControllerActionOrigin_XBoxOne_RightStick_DPadWest,
		[Token(Token = "0x400048C")]
		k_EControllerActionOrigin_XBoxOne_RightStick_DPadEast,
		[Token(Token = "0x400048D")]
		k_EControllerActionOrigin_XBoxOne_DPad_North,
		[Token(Token = "0x400048E")]
		k_EControllerActionOrigin_XBoxOne_DPad_South,
		[Token(Token = "0x400048F")]
		k_EControllerActionOrigin_XBoxOne_DPad_West,
		[Token(Token = "0x4000490")]
		k_EControllerActionOrigin_XBoxOne_DPad_East,
		[Token(Token = "0x4000491")]
		k_EControllerActionOrigin_XBox360_A,
		[Token(Token = "0x4000492")]
		k_EControllerActionOrigin_XBox360_B,
		[Token(Token = "0x4000493")]
		k_EControllerActionOrigin_XBox360_X,
		[Token(Token = "0x4000494")]
		k_EControllerActionOrigin_XBox360_Y,
		[Token(Token = "0x4000495")]
		k_EControllerActionOrigin_XBox360_LeftBumper,
		[Token(Token = "0x4000496")]
		k_EControllerActionOrigin_XBox360_RightBumper,
		[Token(Token = "0x4000497")]
		k_EControllerActionOrigin_XBox360_Start,
		[Token(Token = "0x4000498")]
		k_EControllerActionOrigin_XBox360_Back,
		[Token(Token = "0x4000499")]
		k_EControllerActionOrigin_XBox360_LeftTrigger_Pull,
		[Token(Token = "0x400049A")]
		k_EControllerActionOrigin_XBox360_LeftTrigger_Click,
		[Token(Token = "0x400049B")]
		k_EControllerActionOrigin_XBox360_RightTrigger_Pull,
		[Token(Token = "0x400049C")]
		k_EControllerActionOrigin_XBox360_RightTrigger_Click,
		[Token(Token = "0x400049D")]
		k_EControllerActionOrigin_XBox360_LeftStick_Move,
		[Token(Token = "0x400049E")]
		k_EControllerActionOrigin_XBox360_LeftStick_Click,
		[Token(Token = "0x400049F")]
		k_EControllerActionOrigin_XBox360_LeftStick_DPadNorth,
		[Token(Token = "0x40004A0")]
		k_EControllerActionOrigin_XBox360_LeftStick_DPadSouth,
		[Token(Token = "0x40004A1")]
		k_EControllerActionOrigin_XBox360_LeftStick_DPadWest,
		[Token(Token = "0x40004A2")]
		k_EControllerActionOrigin_XBox360_LeftStick_DPadEast,
		[Token(Token = "0x40004A3")]
		k_EControllerActionOrigin_XBox360_RightStick_Move,
		[Token(Token = "0x40004A4")]
		k_EControllerActionOrigin_XBox360_RightStick_Click,
		[Token(Token = "0x40004A5")]
		k_EControllerActionOrigin_XBox360_RightStick_DPadNorth,
		[Token(Token = "0x40004A6")]
		k_EControllerActionOrigin_XBox360_RightStick_DPadSouth,
		[Token(Token = "0x40004A7")]
		k_EControllerActionOrigin_XBox360_RightStick_DPadWest,
		[Token(Token = "0x40004A8")]
		k_EControllerActionOrigin_XBox360_RightStick_DPadEast,
		[Token(Token = "0x40004A9")]
		k_EControllerActionOrigin_XBox360_DPad_North,
		[Token(Token = "0x40004AA")]
		k_EControllerActionOrigin_XBox360_DPad_South,
		[Token(Token = "0x40004AB")]
		k_EControllerActionOrigin_XBox360_DPad_West,
		[Token(Token = "0x40004AC")]
		k_EControllerActionOrigin_XBox360_DPad_East,
		[Token(Token = "0x40004AD")]
		k_EControllerActionOrigin_SteamV2_A,
		[Token(Token = "0x40004AE")]
		k_EControllerActionOrigin_SteamV2_B,
		[Token(Token = "0x40004AF")]
		k_EControllerActionOrigin_SteamV2_X,
		[Token(Token = "0x40004B0")]
		k_EControllerActionOrigin_SteamV2_Y,
		[Token(Token = "0x40004B1")]
		k_EControllerActionOrigin_SteamV2_LeftBumper,
		[Token(Token = "0x40004B2")]
		k_EControllerActionOrigin_SteamV2_RightBumper,
		[Token(Token = "0x40004B3")]
		k_EControllerActionOrigin_SteamV2_LeftGrip,
		[Token(Token = "0x40004B4")]
		k_EControllerActionOrigin_SteamV2_RightGrip,
		[Token(Token = "0x40004B5")]
		k_EControllerActionOrigin_SteamV2_LeftGrip_Upper,
		[Token(Token = "0x40004B6")]
		k_EControllerActionOrigin_SteamV2_RightGrip_Upper,
		[Token(Token = "0x40004B7")]
		k_EControllerActionOrigin_SteamV2_LeftBumper_Pressure,
		[Token(Token = "0x40004B8")]
		k_EControllerActionOrigin_SteamV2_RightBumper_Pressure,
		[Token(Token = "0x40004B9")]
		k_EControllerActionOrigin_SteamV2_LeftGrip_Pressure,
		[Token(Token = "0x40004BA")]
		k_EControllerActionOrigin_SteamV2_RightGrip_Pressure,
		[Token(Token = "0x40004BB")]
		k_EControllerActionOrigin_SteamV2_LeftGrip_Upper_Pressure,
		[Token(Token = "0x40004BC")]
		k_EControllerActionOrigin_SteamV2_RightGrip_Upper_Pressure,
		[Token(Token = "0x40004BD")]
		k_EControllerActionOrigin_SteamV2_Start,
		[Token(Token = "0x40004BE")]
		k_EControllerActionOrigin_SteamV2_Back,
		[Token(Token = "0x40004BF")]
		k_EControllerActionOrigin_SteamV2_LeftPad_Touch,
		[Token(Token = "0x40004C0")]
		k_EControllerActionOrigin_SteamV2_LeftPad_Swipe,
		[Token(Token = "0x40004C1")]
		k_EControllerActionOrigin_SteamV2_LeftPad_Click,
		[Token(Token = "0x40004C2")]
		k_EControllerActionOrigin_SteamV2_LeftPad_Pressure,
		[Token(Token = "0x40004C3")]
		k_EControllerActionOrigin_SteamV2_LeftPad_DPadNorth,
		[Token(Token = "0x40004C4")]
		k_EControllerActionOrigin_SteamV2_LeftPad_DPadSouth,
		[Token(Token = "0x40004C5")]
		k_EControllerActionOrigin_SteamV2_LeftPad_DPadWest,
		[Token(Token = "0x40004C6")]
		k_EControllerActionOrigin_SteamV2_LeftPad_DPadEast,
		[Token(Token = "0x40004C7")]
		k_EControllerActionOrigin_SteamV2_RightPad_Touch,
		[Token(Token = "0x40004C8")]
		k_EControllerActionOrigin_SteamV2_RightPad_Swipe,
		[Token(Token = "0x40004C9")]
		k_EControllerActionOrigin_SteamV2_RightPad_Click,
		[Token(Token = "0x40004CA")]
		k_EControllerActionOrigin_SteamV2_RightPad_Pressure,
		[Token(Token = "0x40004CB")]
		k_EControllerActionOrigin_SteamV2_RightPad_DPadNorth,
		[Token(Token = "0x40004CC")]
		k_EControllerActionOrigin_SteamV2_RightPad_DPadSouth,
		[Token(Token = "0x40004CD")]
		k_EControllerActionOrigin_SteamV2_RightPad_DPadWest,
		[Token(Token = "0x40004CE")]
		k_EControllerActionOrigin_SteamV2_RightPad_DPadEast,
		[Token(Token = "0x40004CF")]
		k_EControllerActionOrigin_SteamV2_LeftTrigger_Pull,
		[Token(Token = "0x40004D0")]
		k_EControllerActionOrigin_SteamV2_LeftTrigger_Click,
		[Token(Token = "0x40004D1")]
		k_EControllerActionOrigin_SteamV2_RightTrigger_Pull,
		[Token(Token = "0x40004D2")]
		k_EControllerActionOrigin_SteamV2_RightTrigger_Click,
		[Token(Token = "0x40004D3")]
		k_EControllerActionOrigin_SteamV2_LeftStick_Move,
		[Token(Token = "0x40004D4")]
		k_EControllerActionOrigin_SteamV2_LeftStick_Click,
		[Token(Token = "0x40004D5")]
		k_EControllerActionOrigin_SteamV2_LeftStick_DPadNorth,
		[Token(Token = "0x40004D6")]
		k_EControllerActionOrigin_SteamV2_LeftStick_DPadSouth,
		[Token(Token = "0x40004D7")]
		k_EControllerActionOrigin_SteamV2_LeftStick_DPadWest,
		[Token(Token = "0x40004D8")]
		k_EControllerActionOrigin_SteamV2_LeftStick_DPadEast,
		[Token(Token = "0x40004D9")]
		k_EControllerActionOrigin_SteamV2_Gyro_Move,
		[Token(Token = "0x40004DA")]
		k_EControllerActionOrigin_SteamV2_Gyro_Pitch,
		[Token(Token = "0x40004DB")]
		k_EControllerActionOrigin_SteamV2_Gyro_Yaw,
		[Token(Token = "0x40004DC")]
		k_EControllerActionOrigin_SteamV2_Gyro_Roll,
		[Token(Token = "0x40004DD")]
		k_EControllerActionOrigin_Count
	}
	[Token(Token = "0x20000EB")]
	public enum ESteamControllerLEDFlag
	{
		[Token(Token = "0x40004DF")]
		k_ESteamControllerLEDFlag_SetColor,
		[Token(Token = "0x40004E0")]
		k_ESteamControllerLEDFlag_RestoreUserDefault
	}
	[Token(Token = "0x20000EC")]
	public enum EFriendRelationship
	{
		[Token(Token = "0x40004E2")]
		k_EFriendRelationshipNone,
		[Token(Token = "0x40004E3")]
		k_EFriendRelationshipBlocked,
		[Token(Token = "0x40004E4")]
		k_EFriendRelationshipRequestRecipient,
		[Token(Token = "0x40004E5")]
		k_EFriendRelationshipFriend,
		[Token(Token = "0x40004E6")]
		k_EFriendRelationshipRequestInitiator,
		[Token(Token = "0x40004E7")]
		k_EFriendRelationshipIgnored,
		[Token(Token = "0x40004E8")]
		k_EFriendRelationshipIgnoredFriend,
		[Token(Token = "0x40004E9")]
		k_EFriendRelationshipSuggested_DEPRECATED,
		[Token(Token = "0x40004EA")]
		k_EFriendRelationshipMax
	}
	[Token(Token = "0x20000ED")]
	public enum EPersonaState
	{
		[Token(Token = "0x40004EC")]
		k_EPersonaStateOffline,
		[Token(Token = "0x40004ED")]
		k_EPersonaStateOnline,
		[Token(Token = "0x40004EE")]
		k_EPersonaStateBusy,
		[Token(Token = "0x40004EF")]
		k_EPersonaStateAway,
		[Token(Token = "0x40004F0")]
		k_EPersonaStateSnooze,
		[Token(Token = "0x40004F1")]
		k_EPersonaStateLookingToTrade,
		[Token(Token = "0x40004F2")]
		k_EPersonaStateLookingToPlay,
		[Token(Token = "0x40004F3")]
		k_EPersonaStateMax
	}
	[Token(Token = "0x20000EE")]
	[Flags]
	public enum EFriendFlags
	{
		[Token(Token = "0x40004F5")]
		k_EFriendFlagNone = 0,
		[Token(Token = "0x40004F6")]
		k_EFriendFlagBlocked = 1,
		[Token(Token = "0x40004F7")]
		k_EFriendFlagFriendshipRequested = 2,
		[Token(Token = "0x40004F8")]
		k_EFriendFlagImmediate = 4,
		[Token(Token = "0x40004F9")]
		k_EFriendFlagClanMember = 8,
		[Token(Token = "0x40004FA")]
		k_EFriendFlagOnGameServer = 0x10,
		[Token(Token = "0x40004FB")]
		k_EFriendFlagRequestingFriendship = 0x80,
		[Token(Token = "0x40004FC")]
		k_EFriendFlagRequestingInfo = 0x100,
		[Token(Token = "0x40004FD")]
		k_EFriendFlagIgnored = 0x200,
		[Token(Token = "0x40004FE")]
		k_EFriendFlagIgnoredFriend = 0x400,
		[Token(Token = "0x40004FF")]
		k_EFriendFlagChatMember = 0x1000,
		[Token(Token = "0x4000500")]
		k_EFriendFlagAll = 0xFFFF
	}
	[Token(Token = "0x20000EF")]
	public enum EUserRestriction
	{
		[Token(Token = "0x4000502")]
		k_nUserRestrictionNone = 0,
		[Token(Token = "0x4000503")]
		k_nUserRestrictionUnknown = 1,
		[Token(Token = "0x4000504")]
		k_nUserRestrictionAnyChat = 2,
		[Token(Token = "0x4000505")]
		k_nUserRestrictionVoiceChat = 4,
		[Token(Token = "0x4000506")]
		k_nUserRestrictionGroupChat = 8,
		[Token(Token = "0x4000507")]
		k_nUserRestrictionRating = 0x10,
		[Token(Token = "0x4000508")]
		k_nUserRestrictionGameInvites = 0x20,
		[Token(Token = "0x4000509")]
		k_nUserRestrictionTrading = 0x40
	}
	[Token(Token = "0x20000F0")]
	public enum EOverlayToStoreFlag
	{
		[Token(Token = "0x400050B")]
		k_EOverlayToStoreFlag_None,
		[Token(Token = "0x400050C")]
		k_EOverlayToStoreFlag_AddToCart,
		[Token(Token = "0x400050D")]
		k_EOverlayToStoreFlag_AddToCartAndShow
	}
	[Token(Token = "0x20000F1")]
	[Flags]
	public enum EPersonaChange
	{
		[Token(Token = "0x400050F")]
		k_EPersonaChangeName = 1,
		[Token(Token = "0x4000510")]
		k_EPersonaChangeStatus = 2,
		[Token(Token = "0x4000511")]
		k_EPersonaChangeComeOnline = 4,
		[Token(Token = "0x4000512")]
		k_EPersonaChangeGoneOffline = 8,
		[Token(Token = "0x4000513")]
		k_EPersonaChangeGamePlayed = 0x10,
		[Token(Token = "0x4000514")]
		k_EPersonaChangeGameServer = 0x20,
		[Token(Token = "0x4000515")]
		k_EPersonaChangeAvatar = 0x40,
		[Token(Token = "0x4000516")]
		k_EPersonaChangeJoinedSource = 0x80,
		[Token(Token = "0x4000517")]
		k_EPersonaChangeLeftSource = 0x100,
		[Token(Token = "0x4000518")]
		k_EPersonaChangeRelationshipChanged = 0x200,
		[Token(Token = "0x4000519")]
		k_EPersonaChangeNameFirstSet = 0x400,
		[Token(Token = "0x400051A")]
		k_EPersonaChangeFacebookInfo = 0x800,
		[Token(Token = "0x400051B")]
		k_EPersonaChangeNickname = 0x1000,
		[Token(Token = "0x400051C")]
		k_EPersonaChangeSteamLevel = 0x2000
	}
	[Token(Token = "0x20000F2")]
	public enum EGCResults
	{
		[Token(Token = "0x400051E")]
		k_EGCResultOK,
		[Token(Token = "0x400051F")]
		k_EGCResultNoMessage,
		[Token(Token = "0x4000520")]
		k_EGCResultBufferTooSmall,
		[Token(Token = "0x4000521")]
		k_EGCResultNotLoggedOn,
		[Token(Token = "0x4000522")]
		k_EGCResultInvalidMessage
	}
	[Token(Token = "0x20000F3")]
	public enum EHTMLMouseButton
	{
		[Token(Token = "0x4000524")]
		eHTMLMouseButton_Left,
		[Token(Token = "0x4000525")]
		eHTMLMouseButton_Right,
		[Token(Token = "0x4000526")]
		eHTMLMouseButton_Middle
	}
	[Token(Token = "0x20000F4")]
	public enum EMouseCursor
	{
		[Token(Token = "0x4000528")]
		dc_user,
		[Token(Token = "0x4000529")]
		dc_none,
		[Token(Token = "0x400052A")]
		dc_arrow,
		[Token(Token = "0x400052B")]
		dc_ibeam,
		[Token(Token = "0x400052C")]
		dc_hourglass,
		[Token(Token = "0x400052D")]
		dc_waitarrow,
		[Token(Token = "0x400052E")]
		dc_crosshair,
		[Token(Token = "0x400052F")]
		dc_up,
		[Token(Token = "0x4000530")]
		dc_sizenw,
		[Token(Token = "0x4000531")]
		dc_sizese,
		[Token(Token = "0x4000532")]
		dc_sizene,
		[Token(Token = "0x4000533")]
		dc_sizesw,
		[Token(Token = "0x4000534")]
		dc_sizew,
		[Token(Token = "0x4000535")]
		dc_sizee,
		[Token(Token = "0x4000536")]
		dc_sizen,
		[Token(Token = "0x4000537")]
		dc_sizes,
		[Token(Token = "0x4000538")]
		dc_sizewe,
		[Token(Token = "0x4000539")]
		dc_sizens,
		[Token(Token = "0x400053A")]
		dc_sizeall,
		[Token(Token = "0x400053B")]
		dc_no,
		[Token(Token = "0x400053C")]
		dc_hand,
		[Token(Token = "0x400053D")]
		dc_blank,
		[Token(Token = "0x400053E")]
		dc_middle_pan,
		[Token(Token = "0x400053F")]
		dc_north_pan,
		[Token(Token = "0x4000540")]
		dc_north_east_pan,
		[Token(Token = "0x4000541")]
		dc_east_pan,
		[Token(Token = "0x4000542")]
		dc_south_east_pan,
		[Token(Token = "0x4000543")]
		dc_south_pan,
		[Token(Token = "0x4000544")]
		dc_south_west_pan,
		[Token(Token = "0x4000545")]
		dc_west_pan,
		[Token(Token = "0x4000546")]
		dc_north_west_pan,
		[Token(Token = "0x4000547")]
		dc_alias,
		[Token(Token = "0x4000548")]
		dc_cell,
		[Token(Token = "0x4000549")]
		dc_colresize,
		[Token(Token = "0x400054A")]
		dc_copycur,
		[Token(Token = "0x400054B")]
		dc_verticaltext,
		[Token(Token = "0x400054C")]
		dc_rowresize,
		[Token(Token = "0x400054D")]
		dc_zoomin,
		[Token(Token = "0x400054E")]
		dc_zoomout,
		[Token(Token = "0x400054F")]
		dc_help,
		[Token(Token = "0x4000550")]
		dc_custom,
		[Token(Token = "0x4000551")]
		dc_last
	}
	[Token(Token = "0x20000F5")]
	[Flags]
	public enum EHTMLKeyModifiers
	{
		[Token(Token = "0x4000553")]
		k_eHTMLKeyModifier_None = 0,
		[Token(Token = "0x4000554")]
		k_eHTMLKeyModifier_AltDown = 1,
		[Token(Token = "0x4000555")]
		k_eHTMLKeyModifier_CtrlDown = 2,
		[Token(Token = "0x4000556")]
		k_eHTMLKeyModifier_ShiftDown = 4
	}
	[Token(Token = "0x20000F6")]
	[Flags]
	public enum ESteamItemFlags
	{
		[Token(Token = "0x4000558")]
		k_ESteamItemNoTrade = 1,
		[Token(Token = "0x4000559")]
		k_ESteamItemRemoved = 0x100,
		[Token(Token = "0x400055A")]
		k_ESteamItemConsumed = 0x200
	}
	[Token(Token = "0x20000F7")]
	public enum ELobbyType
	{
		[Token(Token = "0x400055C")]
		k_ELobbyTypePrivate,
		[Token(Token = "0x400055D")]
		k_ELobbyTypeFriendsOnly,
		[Token(Token = "0x400055E")]
		k_ELobbyTypePublic,
		[Token(Token = "0x400055F")]
		k_ELobbyTypeInvisible
	}
	[Token(Token = "0x20000F8")]
	public enum ELobbyComparison
	{
		[Token(Token = "0x4000561")]
		k_ELobbyComparisonEqualToOrLessThan = -2,
		[Token(Token = "0x4000562")]
		k_ELobbyComparisonLessThan,
		[Token(Token = "0x4000563")]
		k_ELobbyComparisonEqual,
		[Token(Token = "0x4000564")]
		k_ELobbyComparisonGreaterThan,
		[Token(Token = "0x4000565")]
		k_ELobbyComparisonEqualToOrGreaterThan,
		[Token(Token = "0x4000566")]
		k_ELobbyComparisonNotEqual
	}
	[Token(Token = "0x20000F9")]
	public enum ELobbyDistanceFilter
	{
		[Token(Token = "0x4000568")]
		k_ELobbyDistanceFilterClose,
		[Token(Token = "0x4000569")]
		k_ELobbyDistanceFilterDefault,
		[Token(Token = "0x400056A")]
		k_ELobbyDistanceFilterFar,
		[Token(Token = "0x400056B")]
		k_ELobbyDistanceFilterWorldwide
	}
	[Token(Token = "0x20000FA")]
	[Flags]
	public enum EChatMemberStateChange
	{
		[Token(Token = "0x400056D")]
		k_EChatMemberStateChangeEntered = 1,
		[Token(Token = "0x400056E")]
		k_EChatMemberStateChangeLeft = 2,
		[Token(Token = "0x400056F")]
		k_EChatMemberStateChangeDisconnected = 4,
		[Token(Token = "0x4000570")]
		k_EChatMemberStateChangeKicked = 8,
		[Token(Token = "0x4000571")]
		k_EChatMemberStateChangeBanned = 0x10
	}
	[Token(Token = "0x20000FB")]
	public enum AudioPlayback_Status
	{
		[Token(Token = "0x4000573")]
		AudioPlayback_Undefined,
		[Token(Token = "0x4000574")]
		AudioPlayback_Playing,
		[Token(Token = "0x4000575")]
		AudioPlayback_Paused,
		[Token(Token = "0x4000576")]
		AudioPlayback_Idle
	}
	[Token(Token = "0x20000FC")]
	public enum EP2PSessionError
	{
		[Token(Token = "0x4000578")]
		k_EP2PSessionErrorNone,
		[Token(Token = "0x4000579")]
		k_EP2PSessionErrorNotRunningApp,
		[Token(Token = "0x400057A")]
		k_EP2PSessionErrorNoRightsToApp,
		[Token(Token = "0x400057B")]
		k_EP2PSessionErrorDestinationNotLoggedIn,
		[Token(Token = "0x400057C")]
		k_EP2PSessionErrorTimeout,
		[Token(Token = "0x400057D")]
		k_EP2PSessionErrorMax
	}
	[Token(Token = "0x20000FD")]
	public enum EP2PSend
	{
		[Token(Token = "0x400057F")]
		k_EP2PSendUnreliable,
		[Token(Token = "0x4000580")]
		k_EP2PSendUnreliableNoDelay,
		[Token(Token = "0x4000581")]
		k_EP2PSendReliable,
		[Token(Token = "0x4000582")]
		k_EP2PSendReliableWithBuffering
	}
	[Token(Token = "0x20000FE")]
	public enum ESNetSocketState
	{
		[Token(Token = "0x4000584")]
		k_ESNetSocketStateInvalid = 0,
		[Token(Token = "0x4000585")]
		k_ESNetSocketStateConnected = 1,
		[Token(Token = "0x4000586")]
		k_ESNetSocketStateInitiated = 10,
		[Token(Token = "0x4000587")]
		k_ESNetSocketStateLocalCandidatesFound = 11,
		[Token(Token = "0x4000588")]
		k_ESNetSocketStateReceivedRemoteCandidates = 12,
		[Token(Token = "0x4000589")]
		k_ESNetSocketStateChallengeHandshake = 15,
		[Token(Token = "0x400058A")]
		k_ESNetSocketStateDisconnecting = 21,
		[Token(Token = "0x400058B")]
		k_ESNetSocketStateLocalDisconnect = 22,
		[Token(Token = "0x400058C")]
		k_ESNetSocketStateTimeoutDuringConnect = 23,
		[Token(Token = "0x400058D")]
		k_ESNetSocketStateRemoteEndDisconnected = 24,
		[Token(Token = "0x400058E")]
		k_ESNetSocketStateConnectionBroken = 25
	}
	[Token(Token = "0x20000FF")]
	public enum ESNetSocketConnectionType
	{
		[Token(Token = "0x4000590")]
		k_ESNetSocketConnectionTypeNotConnected,
		[Token(Token = "0x4000591")]
		k_ESNetSocketConnectionTypeUDP,
		[Token(Token = "0x4000592")]
		k_ESNetSocketConnectionTypeUDPRelay
	}
	[Token(Token = "0x2000100")]
	public enum EParentalFeature
	{
		[Token(Token = "0x4000594")]
		k_EFeatureInvalid,
		[Token(Token = "0x4000595")]
		k_EFeatureStore,
		[Token(Token = "0x4000596")]
		k_EFeatureCommunity,
		[Token(Token = "0x4000597")]
		k_EFeatureProfile,
		[Token(Token = "0x4000598")]
		k_EFeatureFriends,
		[Token(Token = "0x4000599")]
		k_EFeatureNews,
		[Token(Token = "0x400059A")]
		k_EFeatureTrading,
		[Token(Token = "0x400059B")]
		k_EFeatureSettings,
		[Token(Token = "0x400059C")]
		k_EFeatureConsole,
		[Token(Token = "0x400059D")]
		k_EFeatureBrowser,
		[Token(Token = "0x400059E")]
		k_EFeatureParentalSetup,
		[Token(Token = "0x400059F")]
		k_EFeatureLibrary,
		[Token(Token = "0x40005A0")]
		k_EFeatureTest,
		[Token(Token = "0x40005A1")]
		k_EFeatureMax
	}
	[Token(Token = "0x2000101")]
	[Flags]
	public enum ERemoteStoragePlatform
	{
		[Token(Token = "0x40005A3")]
		k_ERemoteStoragePlatformNone = 0,
		[Token(Token = "0x40005A4")]
		k_ERemoteStoragePlatformWindows = 1,
		[Token(Token = "0x40005A5")]
		k_ERemoteStoragePlatformOSX = 2,
		[Token(Token = "0x40005A6")]
		k_ERemoteStoragePlatformPS3 = 4,
		[Token(Token = "0x40005A7")]
		k_ERemoteStoragePlatformLinux = 8,
		[Token(Token = "0x40005A8")]
		k_ERemoteStoragePlatformReserved2 = 0x10,
		[Token(Token = "0x40005A9")]
		k_ERemoteStoragePlatformAll = -1
	}
	[Token(Token = "0x2000102")]
	public enum ERemoteStoragePublishedFileVisibility
	{
		[Token(Token = "0x40005AB")]
		k_ERemoteStoragePublishedFileVisibilityPublic,
		[Token(Token = "0x40005AC")]
		k_ERemoteStoragePublishedFileVisibilityFriendsOnly,
		[Token(Token = "0x40005AD")]
		k_ERemoteStoragePublishedFileVisibilityPrivate
	}
	[Token(Token = "0x2000103")]
	public enum EWorkshopFileType
	{
		[Token(Token = "0x40005AF")]
		k_EWorkshopFileTypeFirst = 0,
		[Token(Token = "0x40005B0")]
		k_EWorkshopFileTypeCommunity = 0,
		[Token(Token = "0x40005B1")]
		k_EWorkshopFileTypeMicrotransaction = 1,
		[Token(Token = "0x40005B2")]
		k_EWorkshopFileTypeCollection = 2,
		[Token(Token = "0x40005B3")]
		k_EWorkshopFileTypeArt = 3,
		[Token(Token = "0x40005B4")]
		k_EWorkshopFileTypeVideo = 4,
		[Token(Token = "0x40005B5")]
		k_EWorkshopFileTypeScreenshot = 5,
		[Token(Token = "0x40005B6")]
		k_EWorkshopFileTypeGame = 6,
		[Token(Token = "0x40005B7")]
		k_EWorkshopFileTypeSoftware = 7,
		[Token(Token = "0x40005B8")]
		k_EWorkshopFileTypeConcept = 8,
		[Token(Token = "0x40005B9")]
		k_EWorkshopFileTypeWebGuide = 9,
		[Token(Token = "0x40005BA")]
		k_EWorkshopFileTypeIntegratedGuide = 10,
		[Token(Token = "0x40005BB")]
		k_EWorkshopFileTypeMerch = 11,
		[Token(Token = "0x40005BC")]
		k_EWorkshopFileTypeControllerBinding = 12,
		[Token(Token = "0x40005BD")]
		k_EWorkshopFileTypeSteamworksAccessInvite = 13,
		[Token(Token = "0x40005BE")]
		k_EWorkshopFileTypeSteamVideo = 14,
		[Token(Token = "0x40005BF")]
		k_EWorkshopFileTypeGameManagedItem = 15,
		[Token(Token = "0x40005C0")]
		k_EWorkshopFileTypeMax = 16
	}
	[Token(Token = "0x2000104")]
	public enum EWorkshopVote
	{
		[Token(Token = "0x40005C2")]
		k_EWorkshopVoteUnvoted,
		[Token(Token = "0x40005C3")]
		k_EWorkshopVoteFor,
		[Token(Token = "0x40005C4")]
		k_EWorkshopVoteAgainst,
		[Token(Token = "0x40005C5")]
		k_EWorkshopVoteLater
	}
	[Token(Token = "0x2000105")]
	public enum EWorkshopFileAction
	{
		[Token(Token = "0x40005C7")]
		k_EWorkshopFileActionPlayed,
		[Token(Token = "0x40005C8")]
		k_EWorkshopFileActionCompleted
	}
	[Token(Token = "0x2000106")]
	public enum EWorkshopEnumerationType
	{
		[Token(Token = "0x40005CA")]
		k_EWorkshopEnumerationTypeRankedByVote,
		[Token(Token = "0x40005CB")]
		k_EWorkshopEnumerationTypeRecent,
		[Token(Token = "0x40005CC")]
		k_EWorkshopEnumerationTypeTrending,
		[Token(Token = "0x40005CD")]
		k_EWorkshopEnumerationTypeFavoritesOfFriends,
		[Token(Token = "0x40005CE")]
		k_EWorkshopEnumerationTypeVotedByFriends,
		[Token(Token = "0x40005CF")]
		k_EWorkshopEnumerationTypeContentByFriends,
		[Token(Token = "0x40005D0")]
		k_EWorkshopEnumerationTypeRecentFromFollowedUsers
	}
	[Token(Token = "0x2000107")]
	public enum EWorkshopVideoProvider
	{
		[Token(Token = "0x40005D2")]
		k_EWorkshopVideoProviderNone,
		[Token(Token = "0x40005D3")]
		k_EWorkshopVideoProviderYoutube
	}
	[Token(Token = "0x2000108")]
	public enum EUGCReadAction
	{
		[Token(Token = "0x40005D5")]
		k_EUGCRead_ContinueReadingUntilFinished,
		[Token(Token = "0x40005D6")]
		k_EUGCRead_ContinueReading,
		[Token(Token = "0x40005D7")]
		k_EUGCRead_Close
	}
	[Token(Token = "0x2000109")]
	public enum EVRScreenshotType
	{
		[Token(Token = "0x40005D9")]
		k_EVRScreenshotType_None,
		[Token(Token = "0x40005DA")]
		k_EVRScreenshotType_Mono,
		[Token(Token = "0x40005DB")]
		k_EVRScreenshotType_Stereo,
		[Token(Token = "0x40005DC")]
		k_EVRScreenshotType_MonoCubemap,
		[Token(Token = "0x40005DD")]
		k_EVRScreenshotType_MonoPanorama,
		[Token(Token = "0x40005DE")]
		k_EVRScreenshotType_StereoPanorama
	}
	[Token(Token = "0x200010A")]
	public enum EUGCMatchingUGCType
	{
		[Token(Token = "0x40005E0")]
		k_EUGCMatchingUGCType_Items = 0,
		[Token(Token = "0x40005E1")]
		k_EUGCMatchingUGCType_Items_Mtx = 1,
		[Token(Token = "0x40005E2")]
		k_EUGCMatchingUGCType_Items_ReadyToUse = 2,
		[Token(Token = "0x40005E3")]
		k_EUGCMatchingUGCType_Collections = 3,
		[Token(Token = "0x40005E4")]
		k_EUGCMatchingUGCType_Artwork = 4,
		[Token(Token = "0x40005E5")]
		k_EUGCMatchingUGCType_Videos = 5,
		[Token(Token = "0x40005E6")]
		k_EUGCMatchingUGCType_Screenshots = 6,
		[Token(Token = "0x40005E7")]
		k_EUGCMatchingUGCType_AllGuides = 7,
		[Token(Token = "0x40005E8")]
		k_EUGCMatchingUGCType_WebGuides = 8,
		[Token(Token = "0x40005E9")]
		k_EUGCMatchingUGCType_IntegratedGuides = 9,
		[Token(Token = "0x40005EA")]
		k_EUGCMatchingUGCType_UsableInGame = 10,
		[Token(Token = "0x40005EB")]
		k_EUGCMatchingUGCType_ControllerBindings = 11,
		[Token(Token = "0x40005EC")]
		k_EUGCMatchingUGCType_GameManagedItems = 12,
		[Token(Token = "0x40005ED")]
		k_EUGCMatchingUGCType_All = -1
	}
	[Token(Token = "0x200010B")]
	public enum EUserUGCList
	{
		[Token(Token = "0x40005EF")]
		k_EUserUGCList_Published,
		[Token(Token = "0x40005F0")]
		k_EUserUGCList_VotedOn,
		[Token(Token = "0x40005F1")]
		k_EUserUGCList_VotedUp,
		[Token(Token = "0x40005F2")]
		k_EUserUGCList_VotedDown,
		[Token(Token = "0x40005F3")]
		k_EUserUGCList_WillVoteLater,
		[Token(Token = "0x40005F4")]
		k_EUserUGCList_Favorited,
		[Token(Token = "0x40005F5")]
		k_EUserUGCList_Subscribed,
		[Token(Token = "0x40005F6")]
		k_EUserUGCList_UsedOrPlayed,
		[Token(Token = "0x40005F7")]
		k_EUserUGCList_Followed
	}
	[Token(Token = "0x200010C")]
	public enum EUserUGCListSortOrder
	{
		[Token(Token = "0x40005F9")]
		k_EUserUGCListSortOrder_CreationOrderDesc,
		[Token(Token = "0x40005FA")]
		k_EUserUGCListSortOrder_CreationOrderAsc,
		[Token(Token = "0x40005FB")]
		k_EUserUGCListSortOrder_TitleAsc,
		[Token(Token = "0x40005FC")]
		k_EUserUGCListSortOrder_LastUpdatedDesc,
		[Token(Token = "0x40005FD")]
		k_EUserUGCListSortOrder_SubscriptionDateDesc,
		[Token(Token = "0x40005FE")]
		k_EUserUGCListSortOrder_VoteScoreDesc,
		[Token(Token = "0x40005FF")]
		k_EUserUGCListSortOrder_ForModeration
	}
	[Token(Token = "0x200010D")]
	public enum EUGCQuery
	{
		[Token(Token = "0x4000601")]
		k_EUGCQuery_RankedByVote,
		[Token(Token = "0x4000602")]
		k_EUGCQuery_RankedByPublicationDate,
		[Token(Token = "0x4000603")]
		k_EUGCQuery_AcceptedForGameRankedByAcceptanceDate,
		[Token(Token = "0x4000604")]
		k_EUGCQuery_RankedByTrend,
		[Token(Token = "0x4000605")]
		k_EUGCQuery_FavoritedByFriendsRankedByPublicationDate,
		[Token(Token = "0x4000606")]
		k_EUGCQuery_CreatedByFriendsRankedByPublicationDate,
		[Token(Token = "0x4000607")]
		k_EUGCQuery_RankedByNumTimesReported,
		[Token(Token = "0x4000608")]
		k_EUGCQuery_CreatedByFollowedUsersRankedByPublicationDate,
		[Token(Token = "0x4000609")]
		k_EUGCQuery_NotYetRated,
		[Token(Token = "0x400060A")]
		k_EUGCQuery_RankedByTotalVotesAsc,
		[Token(Token = "0x400060B")]
		k_EUGCQuery_RankedByVotesUp,
		[Token(Token = "0x400060C")]
		k_EUGCQuery_RankedByTextSearch,
		[Token(Token = "0x400060D")]
		k_EUGCQuery_RankedByTotalUniqueSubscriptions,
		[Token(Token = "0x400060E")]
		k_EUGCQuery_RankedByPlaytimeTrend,
		[Token(Token = "0x400060F")]
		k_EUGCQuery_RankedByTotalPlaytime,
		[Token(Token = "0x4000610")]
		k_EUGCQuery_RankedByAveragePlaytimeTrend,
		[Token(Token = "0x4000611")]
		k_EUGCQuery_RankedByLifetimeAveragePlaytime,
		[Token(Token = "0x4000612")]
		k_EUGCQuery_RankedByPlaytimeSessionsTrend,
		[Token(Token = "0x4000613")]
		k_EUGCQuery_RankedByLifetimePlaytimeSessions
	}
	[Token(Token = "0x200010E")]
	public enum EItemUpdateStatus
	{
		[Token(Token = "0x4000615")]
		k_EItemUpdateStatusInvalid,
		[Token(Token = "0x4000616")]
		k_EItemUpdateStatusPreparingConfig,
		[Token(Token = "0x4000617")]
		k_EItemUpdateStatusPreparingContent,
		[Token(Token = "0x4000618")]
		k_EItemUpdateStatusUploadingContent,
		[Token(Token = "0x4000619")]
		k_EItemUpdateStatusUploadingPreviewFile,
		[Token(Token = "0x400061A")]
		k_EItemUpdateStatusCommittingChanges
	}
	[Token(Token = "0x200010F")]
	[Flags]
	public enum EItemState
	{
		[Token(Token = "0x400061C")]
		k_EItemStateNone = 0,
		[Token(Token = "0x400061D")]
		k_EItemStateSubscribed = 1,
		[Token(Token = "0x400061E")]
		k_EItemStateLegacyItem = 2,
		[Token(Token = "0x400061F")]
		k_EItemStateInstalled = 4,
		[Token(Token = "0x4000620")]
		k_EItemStateNeedsUpdate = 8,
		[Token(Token = "0x4000621")]
		k_EItemStateDownloading = 0x10,
		[Token(Token = "0x4000622")]
		k_EItemStateDownloadPending = 0x20
	}
	[Token(Token = "0x2000110")]
	public enum EItemStatistic
	{
		[Token(Token = "0x4000624")]
		k_EItemStatistic_NumSubscriptions,
		[Token(Token = "0x4000625")]
		k_EItemStatistic_NumFavorites,
		[Token(Token = "0x4000626")]
		k_EItemStatistic_NumFollowers,
		[Token(Token = "0x4000627")]
		k_EItemStatistic_NumUniqueSubscriptions,
		[Token(Token = "0x4000628")]
		k_EItemStatistic_NumUniqueFavorites,
		[Token(Token = "0x4000629")]
		k_EItemStatistic_NumUniqueFollowers,
		[Token(Token = "0x400062A")]
		k_EItemStatistic_NumUniqueWebsiteViews,
		[Token(Token = "0x400062B")]
		k_EItemStatistic_ReportScore,
		[Token(Token = "0x400062C")]
		k_EItemStatistic_NumSecondsPlayed,
		[Token(Token = "0x400062D")]
		k_EItemStatistic_NumPlaytimeSessions,
		[Token(Token = "0x400062E")]
		k_EItemStatistic_NumComments,
		[Token(Token = "0x400062F")]
		k_EItemStatistic_NumSecondsPlayedDuringTimePeriod,
		[Token(Token = "0x4000630")]
		k_EItemStatistic_NumPlaytimeSessionsDuringTimePeriod
	}
	[Token(Token = "0x2000111")]
	public enum EItemPreviewType
	{
		[Token(Token = "0x4000632")]
		k_EItemPreviewType_Image = 0,
		[Token(Token = "0x4000633")]
		k_EItemPreviewType_YouTubeVideo = 1,
		[Token(Token = "0x4000634")]
		k_EItemPreviewType_Sketchfab = 2,
		[Token(Token = "0x4000635")]
		k_EItemPreviewType_EnvironmentMap_HorizontalCross = 3,
		[Token(Token = "0x4000636")]
		k_EItemPreviewType_EnvironmentMap_LatLong = 4,
		[Token(Token = "0x4000637")]
		k_EItemPreviewType_ReservedMax = 255
	}
	[Token(Token = "0x2000112")]
	public enum EFailureType
	{
		[Token(Token = "0x4000639")]
		k_EFailureFlushedCallbackQueue,
		[Token(Token = "0x400063A")]
		k_EFailurePipeFail
	}
	[Token(Token = "0x2000113")]
	public enum ELeaderboardDataRequest
	{
		[Token(Token = "0x400063C")]
		k_ELeaderboardDataRequestGlobal,
		[Token(Token = "0x400063D")]
		k_ELeaderboardDataRequestGlobalAroundUser,
		[Token(Token = "0x400063E")]
		k_ELeaderboardDataRequestFriends,
		[Token(Token = "0x400063F")]
		k_ELeaderboardDataRequestUsers
	}
	[Token(Token = "0x2000114")]
	public enum ELeaderboardSortMethod
	{
		[Token(Token = "0x4000641")]
		k_ELeaderboardSortMethodNone,
		[Token(Token = "0x4000642")]
		k_ELeaderboardSortMethodAscending,
		[Token(Token = "0x4000643")]
		k_ELeaderboardSortMethodDescending
	}
	[Token(Token = "0x2000115")]
	public enum ELeaderboardDisplayType
	{
		[Token(Token = "0x4000645")]
		k_ELeaderboardDisplayTypeNone,
		[Token(Token = "0x4000646")]
		k_ELeaderboardDisplayTypeNumeric,
		[Token(Token = "0x4000647")]
		k_ELeaderboardDisplayTypeTimeSeconds,
		[Token(Token = "0x4000648")]
		k_ELeaderboardDisplayTypeTimeMilliSeconds
	}
	[Token(Token = "0x2000116")]
	public enum ELeaderboardUploadScoreMethod
	{
		[Token(Token = "0x400064A")]
		k_ELeaderboardUploadScoreMethodNone,
		[Token(Token = "0x400064B")]
		k_ELeaderboardUploadScoreMethodKeepBest,
		[Token(Token = "0x400064C")]
		k_ELeaderboardUploadScoreMethodForceUpdate
	}
	[Token(Token = "0x2000117")]
	public enum ESteamAPICallFailure
	{
		[Token(Token = "0x400064E")]
		k_ESteamAPICallFailureNone = -1,
		[Token(Token = "0x400064F")]
		k_ESteamAPICallFailureSteamGone,
		[Token(Token = "0x4000650")]
		k_ESteamAPICallFailureNetworkFailure,
		[Token(Token = "0x4000651")]
		k_ESteamAPICallFailureInvalidHandle,
		[Token(Token = "0x4000652")]
		k_ESteamAPICallFailureMismatchedCallback
	}
	[Token(Token = "0x2000118")]
	public enum EGamepadTextInputMode
	{
		[Token(Token = "0x4000654")]
		k_EGamepadTextInputModeNormal,
		[Token(Token = "0x4000655")]
		k_EGamepadTextInputModePassword
	}
	[Token(Token = "0x2000119")]
	public enum EGamepadTextInputLineMode
	{
		[Token(Token = "0x4000657")]
		k_EGamepadTextInputLineModeSingleLine,
		[Token(Token = "0x4000658")]
		k_EGamepadTextInputLineModeMultipleLines
	}
	[Token(Token = "0x200011A")]
	public enum ECheckFileSignature
	{
		[Token(Token = "0x400065A")]
		k_ECheckFileSignatureInvalidSignature,
		[Token(Token = "0x400065B")]
		k_ECheckFileSignatureValidSignature,
		[Token(Token = "0x400065C")]
		k_ECheckFileSignatureFileNotFound,
		[Token(Token = "0x400065D")]
		k_ECheckFileSignatureNoSignaturesFoundForThisApp,
		[Token(Token = "0x400065E")]
		k_ECheckFileSignatureNoSignaturesFoundForThisFile
	}
	[Token(Token = "0x200011B")]
	public enum EMatchMakingServerResponse
	{
		[Token(Token = "0x4000660")]
		eServerResponded,
		[Token(Token = "0x4000661")]
		eServerFailedToRespond,
		[Token(Token = "0x4000662")]
		eNoServersListedOnMasterServer
	}
	[Token(Token = "0x200011C")]
	public enum EServerMode
	{
		[Token(Token = "0x4000664")]
		eServerModeInvalid,
		[Token(Token = "0x4000665")]
		eServerModeNoAuthentication,
		[Token(Token = "0x4000666")]
		eServerModeAuthentication,
		[Token(Token = "0x4000667")]
		eServerModeAuthenticationAndSecure
	}
	[Token(Token = "0x200011D")]
	public enum EResult
	{
		[Token(Token = "0x4000669")]
		k_EResultOK = 1,
		[Token(Token = "0x400066A")]
		k_EResultFail = 2,
		[Token(Token = "0x400066B")]
		k_EResultNoConnection = 3,
		[Token(Token = "0x400066C")]
		k_EResultInvalidPassword = 5,
		[Token(Token = "0x400066D")]
		k_EResultLoggedInElsewhere = 6,
		[Token(Token = "0x400066E")]
		k_EResultInvalidProtocolVer = 7,
		[Token(Token = "0x400066F")]
		k_EResultInvalidParam = 8,
		[Token(Token = "0x4000670")]
		k_EResultFileNotFound = 9,
		[Token(Token = "0x4000671")]
		k_EResultBusy = 10,
		[Token(Token = "0x4000672")]
		k_EResultInvalidState = 11,
		[Token(Token = "0x4000673")]
		k_EResultInvalidName = 12,
		[Token(Token = "0x4000674")]
		k_EResultInvalidEmail = 13,
		[Token(Token = "0x4000675")]
		k_EResultDuplicateName = 14,
		[Token(Token = "0x4000676")]
		k_EResultAccessDenied = 15,
		[Token(Token = "0x4000677")]
		k_EResultTimeout = 16,
		[Token(Token = "0x4000678")]
		k_EResultBanned = 17,
		[Token(Token = "0x4000679")]
		k_EResultAccountNotFound = 18,
		[Token(Token = "0x400067A")]
		k_EResultInvalidSteamID = 19,
		[Token(Token = "0x400067B")]
		k_EResultServiceUnavailable = 20,
		[Token(Token = "0x400067C")]
		k_EResultNotLoggedOn = 21,
		[Token(Token = "0x400067D")]
		k_EResultPending = 22,
		[Token(Token = "0x400067E")]
		k_EResultEncryptionFailure = 23,
		[Token(Token = "0x400067F")]
		k_EResultInsufficientPrivilege = 24,
		[Token(Token = "0x4000680")]
		k_EResultLimitExceeded = 25,
		[Token(Token = "0x4000681")]
		k_EResultRevoked = 26,
		[Token(Token = "0x4000682")]
		k_EResultExpired = 27,
		[Token(Token = "0x4000683")]
		k_EResultAlreadyRedeemed = 28,
		[Token(Token = "0x4000684")]
		k_EResultDuplicateRequest = 29,
		[Token(Token = "0x4000685")]
		k_EResultAlreadyOwned = 30,
		[Token(Token = "0x4000686")]
		k_EResultIPNotFound = 31,
		[Token(Token = "0x4000687")]
		k_EResultPersistFailed = 32,
		[Token(Token = "0x4000688")]
		k_EResultLockingFailed = 33,
		[Token(Token = "0x4000689")]
		k_EResultLogonSessionReplaced = 34,
		[Token(Token = "0x400068A")]
		k_EResultConnectFailed = 35,
		[Token(Token = "0x400068B")]
		k_EResultHandshakeFailed = 36,
		[Token(Token = "0x400068C")]
		k_EResultIOFailure = 37,
		[Token(Token = "0x400068D")]
		k_EResultRemoteDisconnect = 38,
		[Token(Token = "0x400068E")]
		k_EResultShoppingCartNotFound = 39,
		[Token(Token = "0x400068F")]
		k_EResultBlocked = 40,
		[Token(Token = "0x4000690")]
		k_EResultIgnored = 41,
		[Token(Token = "0x4000691")]
		k_EResultNoMatch = 42,
		[Token(Token = "0x4000692")]
		k_EResultAccountDisabled = 43,
		[Token(Token = "0x4000693")]
		k_EResultServiceReadOnly = 44,
		[Token(Token = "0x4000694")]
		k_EResultAccountNotFeatured = 45,
		[Token(Token = "0x4000695")]
		k_EResultAdministratorOK = 46,
		[Token(Token = "0x4000696")]
		k_EResultContentVersion = 47,
		[Token(Token = "0x4000697")]
		k_EResultTryAnotherCM = 48,
		[Token(Token = "0x4000698")]
		k_EResultPasswordRequiredToKickSession = 49,
		[Token(Token = "0x4000699")]
		k_EResultAlreadyLoggedInElsewhere = 50,
		[Token(Token = "0x400069A")]
		k_EResultSuspended = 51,
		[Token(Token = "0x400069B")]
		k_EResultCancelled = 52,
		[Token(Token = "0x400069C")]
		k_EResultDataCorruption = 53,
		[Token(Token = "0x400069D")]
		k_EResultDiskFull = 54,
		[Token(Token = "0x400069E")]
		k_EResultRemoteCallFailed = 55,
		[Token(Token = "0x400069F")]
		k_EResultPasswordUnset = 56,
		[Token(Token = "0x40006A0")]
		k_EResultExternalAccountUnlinked = 57,
		[Token(Token = "0x40006A1")]
		k_EResultPSNTicketInvalid = 58,
		[Token(Token = "0x40006A2")]
		k_EResultExternalAccountAlreadyLinked = 59,
		[Token(Token = "0x40006A3")]
		k_EResultRemoteFileConflict = 60,
		[Token(Token = "0x40006A4")]
		k_EResultIllegalPassword = 61,
		[Token(Token = "0x40006A5")]
		k_EResultSameAsPreviousValue = 62,
		[Token(Token = "0x40006A6")]
		k_EResultAccountLogonDenied = 63,
		[Token(Token = "0x40006A7")]
		k_EResultCannotUseOldPassword = 64,
		[Token(Token = "0x40006A8")]
		k_EResultInvalidLoginAuthCode = 65,
		[Token(Token = "0x40006A9")]
		k_EResultAccountLogonDeniedNoMail = 66,
		[Token(Token = "0x40006AA")]
		k_EResultHardwareNotCapableOfIPT = 67,
		[Token(Token = "0x40006AB")]
		k_EResultIPTInitError = 68,
		[Token(Token = "0x40006AC")]
		k_EResultParentalControlRestricted = 69,
		[Token(Token = "0x40006AD")]
		k_EResultFacebookQueryError = 70,
		[Token(Token = "0x40006AE")]
		k_EResultExpiredLoginAuthCode = 71,
		[Token(Token = "0x40006AF")]
		k_EResultIPLoginRestrictionFailed = 72,
		[Token(Token = "0x40006B0")]
		k_EResultAccountLockedDown = 73,
		[Token(Token = "0x40006B1")]
		k_EResultAccountLogonDeniedVerifiedEmailRequired = 74,
		[Token(Token = "0x40006B2")]
		k_EResultNoMatchingURL = 75,
		[Token(Token = "0x40006B3")]
		k_EResultBadResponse = 76,
		[Token(Token = "0x40006B4")]
		k_EResultRequirePasswordReEntry = 77,
		[Token(Token = "0x40006B5")]
		k_EResultValueOutOfRange = 78,
		[Token(Token = "0x40006B6")]
		k_EResultUnexpectedError = 79,
		[Token(Token = "0x40006B7")]
		k_EResultDisabled = 80,
		[Token(Token = "0x40006B8")]
		k_EResultInvalidCEGSubmission = 81,
		[Token(Token = "0x40006B9")]
		k_EResultRestrictedDevice = 82,
		[Token(Token = "0x40006BA")]
		k_EResultRegionLocked = 83,
		[Token(Token = "0x40006BB")]
		k_EResultRateLimitExceeded = 84,
		[Token(Token = "0x40006BC")]
		k_EResultAccountLoginDeniedNeedTwoFactor = 85,
		[Token(Token = "0x40006BD")]
		k_EResultItemDeleted = 86,
		[Token(Token = "0x40006BE")]
		k_EResultAccountLoginDeniedThrottle = 87,
		[Token(Token = "0x40006BF")]
		k_EResultTwoFactorCodeMismatch = 88,
		[Token(Token = "0x40006C0")]
		k_EResultTwoFactorActivationCodeMismatch = 89,
		[Token(Token = "0x40006C1")]
		k_EResultAccountAssociatedToMultiplePartners = 90,
		[Token(Token = "0x40006C2")]
		k_EResultNotModified = 91,
		[Token(Token = "0x40006C3")]
		k_EResultNoMobileDevice = 92,
		[Token(Token = "0x40006C4")]
		k_EResultTimeNotSynced = 93,
		[Token(Token = "0x40006C5")]
		k_EResultSmsCodeFailed = 94,
		[Token(Token = "0x40006C6")]
		k_EResultAccountLimitExceeded = 95,
		[Token(Token = "0x40006C7")]
		k_EResultAccountActivityLimitExceeded = 96,
		[Token(Token = "0x40006C8")]
		k_EResultPhoneActivityLimitExceeded = 97,
		[Token(Token = "0x40006C9")]
		k_EResultRefundToWallet = 98,
		[Token(Token = "0x40006CA")]
		k_EResultEmailSendFailure = 99,
		[Token(Token = "0x40006CB")]
		k_EResultNotSettled = 100,
		[Token(Token = "0x40006CC")]
		k_EResultNeedCaptcha = 101,
		[Token(Token = "0x40006CD")]
		k_EResultGSLTDenied = 102,
		[Token(Token = "0x40006CE")]
		k_EResultGSOwnerDenied = 103,
		[Token(Token = "0x40006CF")]
		k_EResultInvalidItemType = 104,
		[Token(Token = "0x40006D0")]
		k_EResultIPBanned = 105,
		[Token(Token = "0x40006D1")]
		k_EResultGSLTExpired = 106,
		[Token(Token = "0x40006D2")]
		k_EResultInsufficientFunds = 107,
		[Token(Token = "0x40006D3")]
		k_EResultTooManyPending = 108,
		[Token(Token = "0x40006D4")]
		k_EResultNoSiteLicensesFound = 109,
		[Token(Token = "0x40006D5")]
		k_EResultWGNetworkSendExceeded = 110
	}
	[Token(Token = "0x200011E")]
	public enum EVoiceResult
	{
		[Token(Token = "0x40006D7")]
		k_EVoiceResultOK,
		[Token(Token = "0x40006D8")]
		k_EVoiceResultNotInitialized,
		[Token(Token = "0x40006D9")]
		k_EVoiceResultNotRecording,
		[Token(Token = "0x40006DA")]
		k_EVoiceResultNoData,
		[Token(Token = "0x40006DB")]
		k_EVoiceResultBufferTooSmall,
		[Token(Token = "0x40006DC")]
		k_EVoiceResultDataCorrupted,
		[Token(Token = "0x40006DD")]
		k_EVoiceResultRestricted,
		[Token(Token = "0x40006DE")]
		k_EVoiceResultUnsupportedCodec,
		[Token(Token = "0x40006DF")]
		k_EVoiceResultReceiverOutOfDate,
		[Token(Token = "0x40006E0")]
		k_EVoiceResultReceiverDidNotAnswer
	}
	[Token(Token = "0x200011F")]
	public enum EDenyReason
	{
		[Token(Token = "0x40006E2")]
		k_EDenyInvalid,
		[Token(Token = "0x40006E3")]
		k_EDenyInvalidVersion,
		[Token(Token = "0x40006E4")]
		k_EDenyGeneric,
		[Token(Token = "0x40006E5")]
		k_EDenyNotLoggedOn,
		[Token(Token = "0x40006E6")]
		k_EDenyNoLicense,
		[Token(Token = "0x40006E7")]
		k_EDenyCheater,
		[Token(Token = "0x40006E8")]
		k_EDenyLoggedInElseWhere,
		[Token(Token = "0x40006E9")]
		k_EDenyUnknownText,
		[Token(Token = "0x40006EA")]
		k_EDenyIncompatibleAnticheat,
		[Token(Token = "0x40006EB")]
		k_EDenyMemoryCorruption,
		[Token(Token = "0x40006EC")]
		k_EDenyIncompatibleSoftware,
		[Token(Token = "0x40006ED")]
		k_EDenySteamConnectionLost,
		[Token(Token = "0x40006EE")]
		k_EDenySteamConnectionError,
		[Token(Token = "0x40006EF")]
		k_EDenySteamResponseTimedOut,
		[Token(Token = "0x40006F0")]
		k_EDenySteamValidationStalled,
		[Token(Token = "0x40006F1")]
		k_EDenySteamOwnerLeftGuestUser
	}
	[Token(Token = "0x2000120")]
	public enum EBeginAuthSessionResult
	{
		[Token(Token = "0x40006F3")]
		k_EBeginAuthSessionResultOK,
		[Token(Token = "0x40006F4")]
		k_EBeginAuthSessionResultInvalidTicket,
		[Token(Token = "0x40006F5")]
		k_EBeginAuthSessionResultDuplicateRequest,
		[Token(Token = "0x40006F6")]
		k_EBeginAuthSessionResultInvalidVersion,
		[Token(Token = "0x40006F7")]
		k_EBeginAuthSessionResultGameMismatch,
		[Token(Token = "0x40006F8")]
		k_EBeginAuthSessionResultExpiredTicket
	}
	[Token(Token = "0x2000121")]
	public enum EAuthSessionResponse
	{
		[Token(Token = "0x40006FA")]
		k_EAuthSessionResponseOK,
		[Token(Token = "0x40006FB")]
		k_EAuthSessionResponseUserNotConnectedToSteam,
		[Token(Token = "0x40006FC")]
		k_EAuthSessionResponseNoLicenseOrExpired,
		[Token(Token = "0x40006FD")]
		k_EAuthSessionResponseVACBanned,
		[Token(Token = "0x40006FE")]
		k_EAuthSessionResponseLoggedInElseWhere,
		[Token(Token = "0x40006FF")]
		k_EAuthSessionResponseVACCheckTimedOut,
		[Token(Token = "0x4000700")]
		k_EAuthSessionResponseAuthTicketCanceled,
		[Token(Token = "0x4000701")]
		k_EAuthSessionResponseAuthTicketInvalidAlreadyUsed,
		[Token(Token = "0x4000702")]
		k_EAuthSessionResponseAuthTicketInvalid,
		[Token(Token = "0x4000703")]
		k_EAuthSessionResponsePublisherIssuedBan
	}
	[Token(Token = "0x2000122")]
	public enum EUserHasLicenseForAppResult
	{
		[Token(Token = "0x4000705")]
		k_EUserHasLicenseResultHasLicense,
		[Token(Token = "0x4000706")]
		k_EUserHasLicenseResultDoesNotHaveLicense,
		[Token(Token = "0x4000707")]
		k_EUserHasLicenseResultNoAuth
	}
	[Token(Token = "0x2000123")]
	public enum EAccountType
	{
		[Token(Token = "0x4000709")]
		k_EAccountTypeInvalid,
		[Token(Token = "0x400070A")]
		k_EAccountTypeIndividual,
		[Token(Token = "0x400070B")]
		k_EAccountTypeMultiseat,
		[Token(Token = "0x400070C")]
		k_EAccountTypeGameServer,
		[Token(Token = "0x400070D")]
		k_EAccountTypeAnonGameServer,
		[Token(Token = "0x400070E")]
		k_EAccountTypePending,
		[Token(Token = "0x400070F")]
		k_EAccountTypeContentServer,
		[Token(Token = "0x4000710")]
		k_EAccountTypeClan,
		[Token(Token = "0x4000711")]
		k_EAccountTypeChat,
		[Token(Token = "0x4000712")]
		k_EAccountTypeConsoleUser,
		[Token(Token = "0x4000713")]
		k_EAccountTypeAnonUser,
		[Token(Token = "0x4000714")]
		k_EAccountTypeMax
	}
	[Token(Token = "0x2000124")]
	public enum EAppReleaseState
	{
		[Token(Token = "0x4000716")]
		k_EAppReleaseState_Unknown,
		[Token(Token = "0x4000717")]
		k_EAppReleaseState_Unavailable,
		[Token(Token = "0x4000718")]
		k_EAppReleaseState_Prerelease,
		[Token(Token = "0x4000719")]
		k_EAppReleaseState_PreloadOnly,
		[Token(Token = "0x400071A")]
		k_EAppReleaseState_Released
	}
	[Token(Token = "0x2000125")]
	[Flags]
	public enum EAppOwnershipFlags
	{
		[Token(Token = "0x400071C")]
		k_EAppOwnershipFlags_None = 0,
		[Token(Token = "0x400071D")]
		k_EAppOwnershipFlags_OwnsLicense = 1,
		[Token(Token = "0x400071E")]
		k_EAppOwnershipFlags_FreeLicense = 2,
		[Token(Token = "0x400071F")]
		k_EAppOwnershipFlags_RegionRestricted = 4,
		[Token(Token = "0x4000720")]
		k_EAppOwnershipFlags_LowViolence = 8,
		[Token(Token = "0x4000721")]
		k_EAppOwnershipFlags_InvalidPlatform = 0x10,
		[Token(Token = "0x4000722")]
		k_EAppOwnershipFlags_SharedLicense = 0x20,
		[Token(Token = "0x4000723")]
		k_EAppOwnershipFlags_FreeWeekend = 0x40,
		[Token(Token = "0x4000724")]
		k_EAppOwnershipFlags_RetailLicense = 0x80,
		[Token(Token = "0x4000725")]
		k_EAppOwnershipFlags_LicenseLocked = 0x100,
		[Token(Token = "0x4000726")]
		k_EAppOwnershipFlags_LicensePending = 0x200,
		[Token(Token = "0x4000727")]
		k_EAppOwnershipFlags_LicenseExpired = 0x400,
		[Token(Token = "0x4000728")]
		k_EAppOwnershipFlags_LicensePermanent = 0x800,
		[Token(Token = "0x4000729")]
		k_EAppOwnershipFlags_LicenseRecurring = 0x1000,
		[Token(Token = "0x400072A")]
		k_EAppOwnershipFlags_LicenseCanceled = 0x2000,
		[Token(Token = "0x400072B")]
		k_EAppOwnershipFlags_AutoGrant = 0x4000,
		[Token(Token = "0x400072C")]
		k_EAppOwnershipFlags_PendingGift = 0x8000,
		[Token(Token = "0x400072D")]
		k_EAppOwnershipFlags_RentalNotActivated = 0x10000,
		[Token(Token = "0x400072E")]
		k_EAppOwnershipFlags_Rental = 0x20000,
		[Token(Token = "0x400072F")]
		k_EAppOwnershipFlags_SiteLicense = 0x40000
	}
	[Token(Token = "0x2000126")]
	[Flags]
	public enum EAppType
	{
		[Token(Token = "0x4000731")]
		k_EAppType_Invalid = 0,
		[Token(Token = "0x4000732")]
		k_EAppType_Game = 1,
		[Token(Token = "0x4000733")]
		k_EAppType_Application = 2,
		[Token(Token = "0x4000734")]
		k_EAppType_Tool = 4,
		[Token(Token = "0x4000735")]
		k_EAppType_Demo = 8,
		[Token(Token = "0x4000736")]
		k_EAppType_Media_DEPRECATED = 0x10,
		[Token(Token = "0x4000737")]
		k_EAppType_DLC = 0x20,
		[Token(Token = "0x4000738")]
		k_EAppType_Guide = 0x40,
		[Token(Token = "0x4000739")]
		k_EAppType_Driver = 0x80,
		[Token(Token = "0x400073A")]
		k_EAppType_Config = 0x100,
		[Token(Token = "0x400073B")]
		k_EAppType_Hardware = 0x200,
		[Token(Token = "0x400073C")]
		k_EAppType_Franchise = 0x400,
		[Token(Token = "0x400073D")]
		k_EAppType_Video = 0x800,
		[Token(Token = "0x400073E")]
		k_EAppType_Plugin = 0x1000,
		[Token(Token = "0x400073F")]
		k_EAppType_Music = 0x2000,
		[Token(Token = "0x4000740")]
		k_EAppType_Series = 0x4000,
		[Token(Token = "0x4000741")]
		k_EAppType_Comic = 0x8000,
		[Token(Token = "0x4000742")]
		k_EAppType_Shortcut = 0x40000000,
		[Token(Token = "0x4000743")]
		k_EAppType_DepotOnly = -2147483647
	}
	[Token(Token = "0x2000127")]
	public enum ESteamUserStatType
	{
		[Token(Token = "0x4000745")]
		k_ESteamUserStatTypeINVALID,
		[Token(Token = "0x4000746")]
		k_ESteamUserStatTypeINT,
		[Token(Token = "0x4000747")]
		k_ESteamUserStatTypeFLOAT,
		[Token(Token = "0x4000748")]
		k_ESteamUserStatTypeAVGRATE,
		[Token(Token = "0x4000749")]
		k_ESteamUserStatTypeACHIEVEMENTS,
		[Token(Token = "0x400074A")]
		k_ESteamUserStatTypeGROUPACHIEVEMENTS,
		[Token(Token = "0x400074B")]
		k_ESteamUserStatTypeMAX
	}
	[Token(Token = "0x2000128")]
	public enum EChatEntryType
	{
		[Token(Token = "0x400074D")]
		k_EChatEntryTypeInvalid = 0,
		[Token(Token = "0x400074E")]
		k_EChatEntryTypeChatMsg = 1,
		[Token(Token = "0x400074F")]
		k_EChatEntryTypeTyping = 2,
		[Token(Token = "0x4000750")]
		k_EChatEntryTypeInviteGame = 3,
		[Token(Token = "0x4000751")]
		k_EChatEntryTypeEmote = 4,
		[Token(Token = "0x4000752")]
		k_EChatEntryTypeLeftConversation = 6,
		[Token(Token = "0x4000753")]
		k_EChatEntryTypeEntered = 7,
		[Token(Token = "0x4000754")]
		k_EChatEntryTypeWasKicked = 8,
		[Token(Token = "0x4000755")]
		k_EChatEntryTypeWasBanned = 9,
		[Token(Token = "0x4000756")]
		k_EChatEntryTypeDisconnected = 10,
		[Token(Token = "0x4000757")]
		k_EChatEntryTypeHistoricalChat = 11,
		[Token(Token = "0x4000758")]
		k_EChatEntryTypeLinkBlocked = 14
	}
	[Token(Token = "0x2000129")]
	public enum EChatRoomEnterResponse
	{
		[Token(Token = "0x400075A")]
		k_EChatRoomEnterResponseSuccess = 1,
		[Token(Token = "0x400075B")]
		k_EChatRoomEnterResponseDoesntExist = 2,
		[Token(Token = "0x400075C")]
		k_EChatRoomEnterResponseNotAllowed = 3,
		[Token(Token = "0x400075D")]
		k_EChatRoomEnterResponseFull = 4,
		[Token(Token = "0x400075E")]
		k_EChatRoomEnterResponseError = 5,
		[Token(Token = "0x400075F")]
		k_EChatRoomEnterResponseBanned = 6,
		[Token(Token = "0x4000760")]
		k_EChatRoomEnterResponseLimited = 7,
		[Token(Token = "0x4000761")]
		k_EChatRoomEnterResponseClanDisabled = 8,
		[Token(Token = "0x4000762")]
		k_EChatRoomEnterResponseCommunityBan = 9,
		[Token(Token = "0x4000763")]
		k_EChatRoomEnterResponseMemberBlockedYou = 10,
		[Token(Token = "0x4000764")]
		k_EChatRoomEnterResponseYouBlockedMember = 11,
		[Token(Token = "0x4000765")]
		k_EChatRoomEnterResponseRatelimitExceeded = 15
	}
	[Token(Token = "0x200012A")]
	[Flags]
	public enum EChatSteamIDInstanceFlags
	{
		[Token(Token = "0x4000767")]
		k_EChatAccountInstanceMask = 0xFFF,
		[Token(Token = "0x4000768")]
		k_EChatInstanceFlagClan = 0x80000,
		[Token(Token = "0x4000769")]
		k_EChatInstanceFlagLobby = 0x40000,
		[Token(Token = "0x400076A")]
		k_EChatInstanceFlagMMSLobby = 0x20000
	}
	[Token(Token = "0x200012B")]
	[Flags]
	public enum EMarketingMessageFlags
	{
		[Token(Token = "0x400076C")]
		k_EMarketingMessageFlagsNone = 0,
		[Token(Token = "0x400076D")]
		k_EMarketingMessageFlagsHighPriority = 1,
		[Token(Token = "0x400076E")]
		k_EMarketingMessageFlagsPlatformWindows = 2,
		[Token(Token = "0x400076F")]
		k_EMarketingMessageFlagsPlatformMac = 4,
		[Token(Token = "0x4000770")]
		k_EMarketingMessageFlagsPlatformLinux = 8,
		[Token(Token = "0x4000771")]
		k_EMarketingMessageFlagsPlatformRestrictions = 0xE
	}
	[Token(Token = "0x200012C")]
	public enum ENotificationPosition
	{
		[Token(Token = "0x4000773")]
		k_EPositionTopLeft,
		[Token(Token = "0x4000774")]
		k_EPositionTopRight,
		[Token(Token = "0x4000775")]
		k_EPositionBottomLeft,
		[Token(Token = "0x4000776")]
		k_EPositionBottomRight
	}
	[Token(Token = "0x200012D")]
	public enum EBroadcastUploadResult
	{
		[Token(Token = "0x4000778")]
		k_EBroadcastUploadResultNone,
		[Token(Token = "0x4000779")]
		k_EBroadcastUploadResultOK,
		[Token(Token = "0x400077A")]
		k_EBroadcastUploadResultInitFailed,
		[Token(Token = "0x400077B")]
		k_EBroadcastUploadResultFrameFailed,
		[Token(Token = "0x400077C")]
		k_EBroadcastUploadResultTimeout,
		[Token(Token = "0x400077D")]
		k_EBroadcastUploadResultBandwidthExceeded,
		[Token(Token = "0x400077E")]
		k_EBroadcastUploadResultLowFPS,
		[Token(Token = "0x400077F")]
		k_EBroadcastUploadResultMissingKeyFrames,
		[Token(Token = "0x4000780")]
		k_EBroadcastUploadResultNoConnection,
		[Token(Token = "0x4000781")]
		k_EBroadcastUploadResultRelayFailed,
		[Token(Token = "0x4000782")]
		k_EBroadcastUploadResultSettingsChanged,
		[Token(Token = "0x4000783")]
		k_EBroadcastUploadResultMissingAudio,
		[Token(Token = "0x4000784")]
		k_EBroadcastUploadResultTooFarBehind,
		[Token(Token = "0x4000785")]
		k_EBroadcastUploadResultTranscodeBehind
	}
	[Token(Token = "0x200012E")]
	public enum ELaunchOptionType
	{
		[Token(Token = "0x4000787")]
		k_ELaunchOptionType_None = 0,
		[Token(Token = "0x4000788")]
		k_ELaunchOptionType_Default = 1,
		[Token(Token = "0x4000789")]
		k_ELaunchOptionType_SafeMode = 2,
		[Token(Token = "0x400078A")]
		k_ELaunchOptionType_Multiplayer = 3,
		[Token(Token = "0x400078B")]
		k_ELaunchOptionType_Config = 4,
		[Token(Token = "0x400078C")]
		k_ELaunchOptionType_OpenVR = 5,
		[Token(Token = "0x400078D")]
		k_ELaunchOptionType_Server = 6,
		[Token(Token = "0x400078E")]
		k_ELaunchOptionType_Editor = 7,
		[Token(Token = "0x400078F")]
		k_ELaunchOptionType_Manual = 8,
		[Token(Token = "0x4000790")]
		k_ELaunchOptionType_Benchmark = 9,
		[Token(Token = "0x4000791")]
		k_ELaunchOptionType_Option1 = 10,
		[Token(Token = "0x4000792")]
		k_ELaunchOptionType_Option2 = 11,
		[Token(Token = "0x4000793")]
		k_ELaunchOptionType_Option3 = 12,
		[Token(Token = "0x4000794")]
		k_ELaunchOptionType_OculusVR = 13,
		[Token(Token = "0x4000795")]
		k_ELaunchOptionType_OpenVROverlay = 14,
		[Token(Token = "0x4000796")]
		k_ELaunchOptionType_OSVR = 15,
		[Token(Token = "0x4000797")]
		k_ELaunchOptionType_Dialog = 1000
	}
	[Token(Token = "0x200012F")]
	public enum EVRHMDType
	{
		[Token(Token = "0x4000799")]
		k_eEVRHMDType_None = -1,
		[Token(Token = "0x400079A")]
		k_eEVRHMDType_Unknown = 0,
		[Token(Token = "0x400079B")]
		k_eEVRHMDType_HTC_Dev = 1,
		[Token(Token = "0x400079C")]
		k_eEVRHMDType_HTC_VivePre = 2,
		[Token(Token = "0x400079D")]
		k_eEVRHMDType_HTC_Vive = 3,
		[Token(Token = "0x400079E")]
		k_eEVRHMDType_HTC_Unknown = 20,
		[Token(Token = "0x400079F")]
		k_eEVRHMDType_Oculus_DK1 = 21,
		[Token(Token = "0x40007A0")]
		k_eEVRHMDType_Oculus_DK2 = 22,
		[Token(Token = "0x40007A1")]
		k_eEVRHMDType_Oculus_Rift = 23,
		[Token(Token = "0x40007A2")]
		k_eEVRHMDType_Oculus_Unknown = 40
	}
	[Token(Token = "0x2000130")]
	public enum EHTTPMethod
	{
		[Token(Token = "0x40007A4")]
		k_EHTTPMethodInvalid,
		[Token(Token = "0x40007A5")]
		k_EHTTPMethodGET,
		[Token(Token = "0x40007A6")]
		k_EHTTPMethodHEAD,
		[Token(Token = "0x40007A7")]
		k_EHTTPMethodPOST,
		[Token(Token = "0x40007A8")]
		k_EHTTPMethodPUT,
		[Token(Token = "0x40007A9")]
		k_EHTTPMethodDELETE,
		[Token(Token = "0x40007AA")]
		k_EHTTPMethodOPTIONS,
		[Token(Token = "0x40007AB")]
		k_EHTTPMethodPATCH
	}
	[Token(Token = "0x2000131")]
	public enum EHTTPStatusCode
	{
		[Token(Token = "0x40007AD")]
		k_EHTTPStatusCodeInvalid = 0,
		[Token(Token = "0x40007AE")]
		k_EHTTPStatusCode100Continue = 100,
		[Token(Token = "0x40007AF")]
		k_EHTTPStatusCode101SwitchingProtocols = 101,
		[Token(Token = "0x40007B0")]
		k_EHTTPStatusCode200OK = 200,
		[Token(Token = "0x40007B1")]
		k_EHTTPStatusCode201Created = 201,
		[Token(Token = "0x40007B2")]
		k_EHTTPStatusCode202Accepted = 202,
		[Token(Token = "0x40007B3")]
		k_EHTTPStatusCode203NonAuthoritative = 203,
		[Token(Token = "0x40007B4")]
		k_EHTTPStatusCode204NoContent = 204,
		[Token(Token = "0x40007B5")]
		k_EHTTPStatusCode205ResetContent = 205,
		[Token(Token = "0x40007B6")]
		k_EHTTPStatusCode206PartialContent = 206,
		[Token(Token = "0x40007B7")]
		k_EHTTPStatusCode300MultipleChoices = 300,
		[Token(Token = "0x40007B8")]
		k_EHTTPStatusCode301MovedPermanently = 301,
		[Token(Token = "0x40007B9")]
		k_EHTTPStatusCode302Found = 302,
		[Token(Token = "0x40007BA")]
		k_EHTTPStatusCode303SeeOther = 303,
		[Token(Token = "0x40007BB")]
		k_EHTTPStatusCode304NotModified = 304,
		[Token(Token = "0x40007BC")]
		k_EHTTPStatusCode305UseProxy = 305,
		[Token(Token = "0x40007BD")]
		k_EHTTPStatusCode307TemporaryRedirect = 307,
		[Token(Token = "0x40007BE")]
		k_EHTTPStatusCode400BadRequest = 400,
		[Token(Token = "0x40007BF")]
		k_EHTTPStatusCode401Unauthorized = 401,
		[Token(Token = "0x40007C0")]
		k_EHTTPStatusCode402PaymentRequired = 402,
		[Token(Token = "0x40007C1")]
		k_EHTTPStatusCode403Forbidden = 403,
		[Token(Token = "0x40007C2")]
		k_EHTTPStatusCode404NotFound = 404,
		[Token(Token = "0x40007C3")]
		k_EHTTPStatusCode405MethodNotAllowed = 405,
		[Token(Token = "0x40007C4")]
		k_EHTTPStatusCode406NotAcceptable = 406,
		[Token(Token = "0x40007C5")]
		k_EHTTPStatusCode407ProxyAuthRequired = 407,
		[Token(Token = "0x40007C6")]
		k_EHTTPStatusCode408RequestTimeout = 408,
		[Token(Token = "0x40007C7")]
		k_EHTTPStatusCode409Conflict = 409,
		[Token(Token = "0x40007C8")]
		k_EHTTPStatusCode410Gone = 410,
		[Token(Token = "0x40007C9")]
		k_EHTTPStatusCode411LengthRequired = 411,
		[Token(Token = "0x40007CA")]
		k_EHTTPStatusCode412PreconditionFailed = 412,
		[Token(Token = "0x40007CB")]
		k_EHTTPStatusCode413RequestEntityTooLarge = 413,
		[Token(Token = "0x40007CC")]
		k_EHTTPStatusCode414RequestURITooLong = 414,
		[Token(Token = "0x40007CD")]
		k_EHTTPStatusCode415UnsupportedMediaType = 415,
		[Token(Token = "0x40007CE")]
		k_EHTTPStatusCode416RequestedRangeNotSatisfiable = 416,
		[Token(Token = "0x40007CF")]
		k_EHTTPStatusCode417ExpectationFailed = 417,
		[Token(Token = "0x40007D0")]
		k_EHTTPStatusCode4xxUnknown = 418,
		[Token(Token = "0x40007D1")]
		k_EHTTPStatusCode429TooManyRequests = 429,
		[Token(Token = "0x40007D2")]
		k_EHTTPStatusCode500InternalServerError = 500,
		[Token(Token = "0x40007D3")]
		k_EHTTPStatusCode501NotImplemented = 501,
		[Token(Token = "0x40007D4")]
		k_EHTTPStatusCode502BadGateway = 502,
		[Token(Token = "0x40007D5")]
		k_EHTTPStatusCode503ServiceUnavailable = 503,
		[Token(Token = "0x40007D6")]
		k_EHTTPStatusCode504GatewayTimeout = 504,
		[Token(Token = "0x40007D7")]
		k_EHTTPStatusCode505HTTPVersionNotSupported = 505,
		[Token(Token = "0x40007D8")]
		k_EHTTPStatusCode5xxUnknown = 599
	}
	[Token(Token = "0x2000132")]
	public enum EUniverse
	{
		[Token(Token = "0x40007DA")]
		k_EUniverseInvalid,
		[Token(Token = "0x40007DB")]
		k_EUniversePublic,
		[Token(Token = "0x40007DC")]
		k_EUniverseBeta,
		[Token(Token = "0x40007DD")]
		k_EUniverseInternal,
		[Token(Token = "0x40007DE")]
		k_EUniverseDev,
		[Token(Token = "0x40007DF")]
		k_EUniverseMax
	}
	[Token(Token = "0x2000133")]
	public struct ControllerAnalogActionData_t
	{
		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EControllerSourceMode eMode;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float x;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float y;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte bActive;
	}
	[Token(Token = "0x2000134")]
	public struct ControllerDigitalActionData_t
	{
		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte bState;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte bActive;
	}
	[Token(Token = "0x2000135")]
	public struct ControllerMotionData_t
	{
		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float rotQuatX;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float rotQuatY;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float rotQuatZ;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float rotQuatW;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float posAccelX;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float posAccelY;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float posAccelZ;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rotVelX;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float rotVelY;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotVelZ;
	}
	[Token(Token = "0x2000136")]
	public struct FriendGameInfo_t
	{
		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CGameID m_gameID;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_unGameIP;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort m_usGamePort;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public ushort m_usQueryPort;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CSteamID m_steamIDLobby;
	}
	[Token(Token = "0x2000137")]
	public struct FriendSessionStateInfo_t
	{
		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_uiOnlineSessionInstances;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public byte m_uiPublishedToFriendsSessionInstance;
	}
	[Token(Token = "0x2000138")]
	public struct SteamItemDetails_t
	{
		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamItemInstanceID_t m_itemId;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamItemDef_t m_iDefinition;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort m_unQuantity;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public ushort m_unFlags;
	}
	[Token(Token = "0x2000139")]
	public struct P2PSessionState_t
	{
		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bConnectionActive;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte m_bConnecting;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte m_eP2PSessionError;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte m_bUsingRelay;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nBytesQueuedForSend;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nPacketsQueuedForSend;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nRemoteIP;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort m_nRemotePort;
	}
	[Token(Token = "0x200013A")]
	public struct SteamParamStringArray_t
	{
		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_ppStrings;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nNumStrings;
	}
	[Token(Token = "0x200013B")]
	public struct SteamUGCDetails_t
	{
		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EWorkshopFileType m_eFileType;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nCreatorAppID;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nConsumerAppID;

		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_rgchTitle;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string m_rgchDescription;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ulong m_ulSteamIDOwner;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_rtimeCreated;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint m_rtimeUpdated;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_rtimeAddedToUserList;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ERemoteStoragePublishedFileVisibility m_eVisibility;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool m_bBanned;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool m_bAcceptedForUse;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool m_bTagsTruncated;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_rgchTags;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UGCHandle_t m_hPreviewFile;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string m_pchFileName;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int m_nFileSize;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int m_nPreviewFileSize;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string m_rgchURL;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public uint m_unVotesUp;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public uint m_unVotesDown;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float m_flScore;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public uint m_unNumChildren;
	}
	[Token(Token = "0x200013C")]
	public struct CallbackMsg_t
	{
		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_hSteamUser;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_iCallback;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pubParam;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cubParam;
	}
	[Token(Token = "0x200013D")]
	public struct LeaderboardEntry_t
	{
		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nGlobalRank;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nScore;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cDetails;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public UGCHandle_t m_hUGC;
	}
	[Token(Token = "0x200013E")]
	public struct MatchMakingKeyValuePair_t
	{
		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szKey;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_szValue;

		[Token(Token = "0x600053D")]
		[Address(RVA = "0x2DC6950", Offset = "0x2DC6950", VA = "0x2DC6950")]
		private MatchMakingKeyValuePair_t(string strKey, string strValue)
		{
		}
	}
	[Token(Token = "0x200013F")]
	public static class SteamAppList
	{
		[Token(Token = "0x600053E")]
		[Address(RVA = "0x2E7CD5C", Offset = "0x2E7CD5C", VA = "0x2E7CD5C")]
		public static uint GetNumInstalledApps()
		{
			return default(uint);
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0x2E7CDB8", Offset = "0x2E7CDB8", VA = "0x2E7CDB8")]
		public static uint GetInstalledApps(AppId_t[] pvecAppID, uint unMaxAppIDs)
		{
			return default(uint);
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0x2E7CE2C", Offset = "0x2E7CE2C", VA = "0x2E7CE2C")]
		public static int GetAppName(AppId_t nAppID, out string pchName, int cchNameMax)
		{
			return default(int);
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0x2E7CF60", Offset = "0x2E7CF60", VA = "0x2E7CF60")]
		public static int GetAppInstallDir(AppId_t nAppID, out string pchDirectory, int cchNameMax)
		{
			return default(int);
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0x2E7D094", Offset = "0x2E7D094", VA = "0x2E7D094")]
		public static int GetAppBuildId(AppId_t nAppID)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000140")]
	public static class SteamApps
	{
		[Token(Token = "0x6000543")]
		[Address(RVA = "0x2E7D0F8", Offset = "0x2E7D0F8", VA = "0x2E7D0F8")]
		public static bool BIsSubscribed()
		{
			return default(bool);
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0x2E7D154", Offset = "0x2E7D154", VA = "0x2E7D154")]
		public static bool BIsLowViolence()
		{
			return default(bool);
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0x2E7D1B0", Offset = "0x2E7D1B0", VA = "0x2E7D1B0")]
		public static bool BIsCybercafe()
		{
			return default(bool);
		}

		[Token(Token = "0x6000546")]
		[Address(RVA = "0x2E7D20C", Offset = "0x2E7D20C", VA = "0x2E7D20C")]
		public static bool BIsVACBanned()
		{
			return default(bool);
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0x2E7D268", Offset = "0x2E7D268", VA = "0x2E7D268")]
		public static string GetCurrentGameLanguage()
		{
			return null;
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0x2E7D2CC", Offset = "0x2E7D2CC", VA = "0x2E7D2CC")]
		public static string GetAvailableGameLanguages()
		{
			return null;
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0x2E7D330", Offset = "0x2E7D330", VA = "0x2E7D330")]
		public static bool BIsSubscribedApp(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0x2E7D394", Offset = "0x2E7D394", VA = "0x2E7D394")]
		public static bool BIsDlcInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0x2E7D3F8", Offset = "0x2E7D3F8", VA = "0x2E7D3F8")]
		public static uint GetEarliestPurchaseUnixTime(AppId_t nAppID)
		{
			return default(uint);
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0x2E7D45C", Offset = "0x2E7D45C", VA = "0x2E7D45C")]
		public static bool BIsSubscribedFromFreeWeekend()
		{
			return default(bool);
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0x2E7D4B8", Offset = "0x2E7D4B8", VA = "0x2E7D4B8")]
		public static int GetDLCCount()
		{
			return default(int);
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0x2E7D514", Offset = "0x2E7D514", VA = "0x2E7D514")]
		public static bool BGetDLCDataByIndex(int iDLC, out AppId_t pAppID, out bool pbAvailable, out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0x2E7D658", Offset = "0x2E7D658", VA = "0x2E7D658")]
		public static void InstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0x2E7D6BC", Offset = "0x2E7D6BC", VA = "0x2E7D6BC")]
		public static void UninstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0x2E7D720", Offset = "0x2E7D720", VA = "0x2E7D720")]
		public static void RequestAppProofOfPurchaseKey(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0x2E7D784", Offset = "0x2E7D784", VA = "0x2E7D784")]
		public static bool GetCurrentBetaName(out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0x2E7D8A8", Offset = "0x2E7D8A8", VA = "0x2E7D8A8")]
		public static bool MarkContentCorrupt(bool bMissingFilesOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0x2E7D90C", Offset = "0x2E7D90C", VA = "0x2E7D90C")]
		public static uint GetInstalledDepots(AppId_t appID, DepotId_t[] pvecDepots, uint cMaxDepots)
		{
			return default(uint);
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0x2E7D988", Offset = "0x2E7D988", VA = "0x2E7D988")]
		public static uint GetAppInstallDir(AppId_t appID, out string pchFolder, uint cchFolderBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0x2E7DAB8", Offset = "0x2E7DAB8", VA = "0x2E7DAB8")]
		public static bool BIsAppInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0x2E7DB1C", Offset = "0x2E7DB1C", VA = "0x2E7DB1C")]
		public static CSteamID GetAppOwner()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0x2E7DBD0", Offset = "0x2E7DBD0", VA = "0x2E7DBD0")]
		public static string GetLaunchQueryParam(string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0x2E7DD40", Offset = "0x2E7DD40", VA = "0x2E7DD40")]
		public static bool GetDlcDownloadProgress(AppId_t nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0x2E7DDBC", Offset = "0x2E7DDBC", VA = "0x2E7DDBC")]
		public static int GetAppBuildId()
		{
			return default(int);
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0x2E7DE18", Offset = "0x2E7DE18", VA = "0x2E7DE18")]
		public static void RequestAllProofOfPurchaseKeys()
		{
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0x2E7DE74", Offset = "0x2E7DE74", VA = "0x2E7DE74")]
		public static SteamAPICall_t GetFileDetails(string pszFileName)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000141")]
	public static class SteamClient
	{
		[Token(Token = "0x600055D")]
		[Address(RVA = "0x2E7DFF8", Offset = "0x2E7DFF8", VA = "0x2E7DFF8")]
		public static HSteamPipe CreateSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0x2E7E064", Offset = "0x2E7E064", VA = "0x2E7E064")]
		public static bool BReleaseSteamPipe(HSteamPipe hSteamPipe)
		{
			return default(bool);
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x2E7E0C8", Offset = "0x2E7E0C8", VA = "0x2E7E0C8")]
		public static HSteamUser ConnectToGlobalUser(HSteamPipe hSteamPipe)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x2E7E13C", Offset = "0x2E7E13C", VA = "0x2E7E13C")]
		public static HSteamUser CreateLocalUser(out HSteamPipe phSteamPipe, EAccountType eAccountType)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0x2E7E1C0", Offset = "0x2E7E1C0", VA = "0x2E7E1C0")]
		public static void ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser)
		{
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x2E7E234", Offset = "0x2E7E234", VA = "0x2E7E234")]
		public static IntPtr GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0x2E7E3A8", Offset = "0x2E7E3A8", VA = "0x2E7E3A8")]
		public static IntPtr GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0x2E7E51C", Offset = "0x2E7E51C", VA = "0x2E7E51C")]
		public static void SetLocalIPBinding(uint unIP, ushort usPort)
		{
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0x2E7E590", Offset = "0x2E7E590", VA = "0x2E7E590")]
		public static IntPtr GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0x2E7E704", Offset = "0x2E7E704", VA = "0x2E7E704")]
		public static IntPtr GetISteamUtils(HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0x2E7E870", Offset = "0x2E7E870", VA = "0x2E7E870")]
		public static IntPtr GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x2E7E9E4", Offset = "0x2E7E9E4", VA = "0x2E7E9E4")]
		public static IntPtr GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0x2E7EB58", Offset = "0x2E7EB58", VA = "0x2E7EB58")]
		public static IntPtr GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x2E7ECCC", Offset = "0x2E7ECCC", VA = "0x2E7ECCC")]
		public static IntPtr GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x2E7EE40", Offset = "0x2E7EE40", VA = "0x2E7EE40")]
		public static IntPtr GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0x2E7EFB4", Offset = "0x2E7EFB4", VA = "0x2E7EFB4")]
		public static IntPtr GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0x2E7F128", Offset = "0x2E7F128", VA = "0x2E7F128")]
		public static IntPtr GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x2E7F29C", Offset = "0x2E7F29C", VA = "0x2E7F29C")]
		public static IntPtr GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0x2E7F410", Offset = "0x2E7F410", VA = "0x2E7F410")]
		public static IntPtr GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0x2E7F584", Offset = "0x2E7F584", VA = "0x2E7F584")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0x2E7F5E0", Offset = "0x2E7F5E0", VA = "0x2E7F5E0")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x2E7F644", Offset = "0x2E7F644", VA = "0x2E7F644")]
		public static bool BShutdownIfAllPipesClosed()
		{
			return default(bool);
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x2E7F6A0", Offset = "0x2E7F6A0", VA = "0x2E7F6A0")]
		public static IntPtr GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x2E7F814", Offset = "0x2E7F814", VA = "0x2E7F814")]
		public static IntPtr GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x2E7F988", Offset = "0x2E7F988", VA = "0x2E7F988")]
		public static IntPtr GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x2E7FAFC", Offset = "0x2E7FAFC", VA = "0x2E7FAFC")]
		public static IntPtr GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x2E7FC70", Offset = "0x2E7FC70", VA = "0x2E7FC70")]
		public static IntPtr GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x2E7FDE4", Offset = "0x2E7FDE4", VA = "0x2E7FDE4")]
		public static IntPtr GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0x2E7FF58", Offset = "0x2E7FF58", VA = "0x2E7FF58")]
		public static IntPtr GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x2E800CC", Offset = "0x2E800CC", VA = "0x2E800CC")]
		public static IntPtr GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0x2E80240", Offset = "0x2E80240", VA = "0x2E80240")]
		public static IntPtr GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x2E803B4", Offset = "0x2E803B4", VA = "0x2E803B4")]
		public static IntPtr GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x2E80528", Offset = "0x2E80528", VA = "0x2E80528")]
		public static IntPtr GetISteamParentalSettings(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000142")]
	public static class SteamController
	{
		[Token(Token = "0x600057E")]
		[Address(RVA = "0x2E8069C", Offset = "0x2E8069C", VA = "0x2E8069C")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x2E806F8", Offset = "0x2E806F8", VA = "0x2E806F8")]
		public static bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x2E80754", Offset = "0x2E80754", VA = "0x2E80754")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x2E807B0", Offset = "0x2E807B0", VA = "0x2E807B0")]
		public static int GetConnectedControllers(ControllerHandle_t[] handlesOut)
		{
			return default(int);
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0x2E80888", Offset = "0x2E80888", VA = "0x2E80888")]
		public static bool ShowBindingPanel(ControllerHandle_t controllerHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0x2E808EC", Offset = "0x2E808EC", VA = "0x2E808EC")]
		public static ControllerActionSetHandle_t GetActionSetHandle(string pszActionSetName)
		{
			return default(ControllerActionSetHandle_t);
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0x2E80A5C", Offset = "0x2E80A5C", VA = "0x2E80A5C")]
		public static void ActivateActionSet(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle)
		{
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0x2E80AD0", Offset = "0x2E80AD0", VA = "0x2E80AD0")]
		public static ControllerActionSetHandle_t GetCurrentActionSet(ControllerHandle_t controllerHandle)
		{
			return default(ControllerActionSetHandle_t);
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0x2E80B3C", Offset = "0x2E80B3C", VA = "0x2E80B3C")]
		public static ControllerDigitalActionHandle_t GetDigitalActionHandle(string pszActionName)
		{
			return default(ControllerDigitalActionHandle_t);
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0x2E80CAC", Offset = "0x2E80CAC", VA = "0x2E80CAC")]
		public static ControllerDigitalActionData_t GetDigitalActionData(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle)
		{
			return default(ControllerDigitalActionData_t);
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0x2E80D28", Offset = "0x2E80D28", VA = "0x2E80D28")]
		public static int GetDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, EControllerActionOrigin[] originsOut)
		{
			return default(int);
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0x2E80DB4", Offset = "0x2E80DB4", VA = "0x2E80DB4")]
		public static ControllerAnalogActionHandle_t GetAnalogActionHandle(string pszActionName)
		{
			return default(ControllerAnalogActionHandle_t);
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0x2E80F24", Offset = "0x2E80F24", VA = "0x2E80F24")]
		public static ControllerAnalogActionData_t GetAnalogActionData(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle)
		{
			return default(ControllerAnalogActionData_t);
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0x2E80FA0", Offset = "0x2E80FA0", VA = "0x2E80FA0")]
		public static int GetAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, EControllerActionOrigin[] originsOut)
		{
			return default(int);
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0x2E8102C", Offset = "0x2E8102C", VA = "0x2E8102C")]
		public static void StopAnalogActionMomentum(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction)
		{
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0x2E810A0", Offset = "0x2E810A0", VA = "0x2E810A0")]
		public static void TriggerHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec)
		{
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0x2E8111C", Offset = "0x2E8111C", VA = "0x2E8111C")]
		public static void TriggerRepeatedHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags)
		{
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0x2E811C0", Offset = "0x2E811C0", VA = "0x2E811C0")]
		public static void TriggerVibration(ControllerHandle_t controllerHandle, ushort usLeftSpeed, ushort usRightSpeed)
		{
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0x2E8123C", Offset = "0x2E8123C", VA = "0x2E8123C")]
		public static void SetLEDColor(ControllerHandle_t controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags)
		{
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0x2E812D0", Offset = "0x2E812D0", VA = "0x2E812D0")]
		public static int GetGamepadIndexForController(ControllerHandle_t ulControllerHandle)
		{
			return default(int);
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0x2E81334", Offset = "0x2E81334", VA = "0x2E81334")]
		public static ControllerHandle_t GetControllerForGamepadIndex(int nIndex)
		{
			return default(ControllerHandle_t);
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0x2E813A0", Offset = "0x2E813A0", VA = "0x2E813A0")]
		public static ControllerMotionData_t GetMotionData(ControllerHandle_t controllerHandle)
		{
			return default(ControllerMotionData_t);
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0x2E81414", Offset = "0x2E81414", VA = "0x2E81414")]
		public static bool ShowDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle, float flScale, float flXPosition, float flYPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0x2E814B0", Offset = "0x2E814B0", VA = "0x2E814B0")]
		public static bool ShowAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle, float flScale, float flXPosition, float flYPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0x2E8154C", Offset = "0x2E8154C", VA = "0x2E8154C")]
		public static string GetStringForActionOrigin(EControllerActionOrigin eOrigin)
		{
			return null;
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0x2E815B8", Offset = "0x2E815B8", VA = "0x2E815B8")]
		public static string GetGlyphForActionOrigin(EControllerActionOrigin eOrigin)
		{
			return null;
		}
	}
	[Token(Token = "0x2000143")]
	public static class SteamFriends
	{
		[Token(Token = "0x6000598")]
		[Address(RVA = "0x2E818C0", Offset = "0x2E818C0", VA = "0x2E818C0")]
		public static string GetPersonaName()
		{
			return null;
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0x2E81924", Offset = "0x2E81924", VA = "0x2E81924")]
		public static SteamAPICall_t SetPersonaName(string pchPersonaName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0x2E81AA8", Offset = "0x2E81AA8", VA = "0x2E81AA8")]
		public static EPersonaState GetPersonaState()
		{
			return default(EPersonaState);
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0x2E81B04", Offset = "0x2E81B04", VA = "0x2E81B04")]
		public static int GetFriendCount(EFriendFlags iFriendFlags)
		{
			return default(int);
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0x2E81B68", Offset = "0x2E81B68", VA = "0x2E81B68")]
		public static CSteamID GetFriendByIndex(int iFriend, EFriendFlags iFriendFlags)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x2E81C34", Offset = "0x2E81C34", VA = "0x2E81C34")]
		public static EFriendRelationship GetFriendRelationship(CSteamID steamIDFriend)
		{
			return default(EFriendRelationship);
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x2E81C98", Offset = "0x2E81C98", VA = "0x2E81C98")]
		public static EPersonaState GetFriendPersonaState(CSteamID steamIDFriend)
		{
			return default(EPersonaState);
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0x2E81CFC", Offset = "0x2E81CFC", VA = "0x2E81CFC")]
		public static string GetFriendPersonaName(CSteamID steamIDFriend)
		{
			return null;
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x2E81D68", Offset = "0x2E81D68", VA = "0x2E81D68")]
		public static bool GetFriendGamePlayed(CSteamID steamIDFriend, out FriendGameInfo_t pFriendGameInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x2E81DDC", Offset = "0x2E81DDC", VA = "0x2E81DDC")]
		public static string GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName)
		{
			return null;
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x2E81E58", Offset = "0x2E81E58", VA = "0x2E81E58")]
		public static int GetFriendSteamLevel(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x2E81EBC", Offset = "0x2E81EBC", VA = "0x2E81EBC")]
		public static string GetPlayerNickname(CSteamID steamIDPlayer)
		{
			return null;
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x2E81F28", Offset = "0x2E81F28", VA = "0x2E81F28")]
		public static int GetFriendsGroupCount()
		{
			return default(int);
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x2E81F84", Offset = "0x2E81F84", VA = "0x2E81F84")]
		public static FriendsGroupID_t GetFriendsGroupIDByIndex(int iFG)
		{
			return default(FriendsGroupID_t);
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x2E82048", Offset = "0x2E82048", VA = "0x2E82048")]
		public static string GetFriendsGroupName(FriendsGroupID_t friendsGroupID)
		{
			return null;
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x2E820B4", Offset = "0x2E820B4", VA = "0x2E820B4")]
		public static int GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID)
		{
			return default(int);
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x2E82118", Offset = "0x2E82118", VA = "0x2E82118")]
		public static void GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, CSteamID[] pOutSteamIDMembers, int nMembersCount)
		{
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x2E82194", Offset = "0x2E82194", VA = "0x2E82194")]
		public static bool HasFriend(CSteamID steamIDFriend, EFriendFlags iFriendFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x2E82208", Offset = "0x2E82208", VA = "0x2E82208")]
		public static int GetClanCount()
		{
			return default(int);
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x2E82264", Offset = "0x2E82264", VA = "0x2E82264")]
		public static CSteamID GetClanByIndex(int iClan)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x2E82320", Offset = "0x2E82320", VA = "0x2E82320")]
		public static string GetClanName(CSteamID steamIDClan)
		{
			return null;
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x2E8238C", Offset = "0x2E8238C", VA = "0x2E8238C")]
		public static string GetClanTag(CSteamID steamIDClan)
		{
			return null;
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x2E823F8", Offset = "0x2E823F8", VA = "0x2E823F8")]
		public static bool GetClanActivityCounts(CSteamID steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x2E82484", Offset = "0x2E82484", VA = "0x2E82484")]
		public static SteamAPICall_t DownloadClanActivityCounts(CSteamID[] psteamIDClans, int cClansToRequest)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x2E8254C", Offset = "0x2E8254C", VA = "0x2E8254C")]
		public static int GetFriendCountFromSource(CSteamID steamIDSource)
		{
			return default(int);
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x2E825B0", Offset = "0x2E825B0", VA = "0x2E825B0")]
		public static CSteamID GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x2E8267C", Offset = "0x2E8267C", VA = "0x2E8267C")]
		public static bool IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x2E826F0", Offset = "0x2E826F0", VA = "0x2E826F0")]
		public static void SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking)
		{
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x2E82764", Offset = "0x2E82764", VA = "0x2E82764")]
		public static void ActivateGameOverlay(string pchDialog)
		{
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x2E828B4", Offset = "0x2E828B4", VA = "0x2E828B4")]
		public static void ActivateGameOverlayToUser(string pchDialog, CSteamID steamID)
		{
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x2E82A14", Offset = "0x2E82A14", VA = "0x2E82A14")]
		public static void ActivateGameOverlayToWebPage(string pchURL)
		{
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x2E82B64", Offset = "0x2E82B64", VA = "0x2E82B64")]
		public static void ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag)
		{
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x2E82BD8", Offset = "0x2E82BD8", VA = "0x2E82BD8")]
		public static void SetPlayedWith(CSteamID steamIDUserPlayedWith)
		{
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x2E82C3C", Offset = "0x2E82C3C", VA = "0x2E82C3C")]
		public static void ActivateGameOverlayInviteDialog(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x2E82CA0", Offset = "0x2E82CA0", VA = "0x2E82CA0")]
		public static int GetSmallFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x2E82D04", Offset = "0x2E82D04", VA = "0x2E82D04")]
		public static int GetMediumFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0x2E82D68", Offset = "0x2E82D68", VA = "0x2E82D68")]
		public static int GetLargeFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x2E82DCC", Offset = "0x2E82DCC", VA = "0x2E82DCC")]
		public static bool RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x2E82E40", Offset = "0x2E82E40", VA = "0x2E82E40")]
		public static SteamAPICall_t RequestClanOfficerList(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x2E82EF8", Offset = "0x2E82EF8", VA = "0x2E82EF8")]
		public static CSteamID GetClanOwner(CSteamID steamIDClan)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x2E82FB4", Offset = "0x2E82FB4", VA = "0x2E82FB4")]
		public static int GetClanOfficerCount(CSteamID steamIDClan)
		{
			return default(int);
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x2E83018", Offset = "0x2E83018", VA = "0x2E83018")]
		public static CSteamID GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x2E830E4", Offset = "0x2E830E4", VA = "0x2E830E4")]
		public static uint GetUserRestrictions()
		{
			return default(uint);
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x2E83140", Offset = "0x2E83140", VA = "0x2E83140")]
		public static bool SetRichPresence(string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x2E8337C", Offset = "0x2E8337C", VA = "0x2E8337C")]
		public static void ClearRichPresence()
		{
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x2E833D8", Offset = "0x2E833D8", VA = "0x2E833D8")]
		public static string GetFriendRichPresence(CSteamID steamIDFriend, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x2E83550", Offset = "0x2E83550", VA = "0x2E83550")]
		public static int GetFriendRichPresenceKeyCount(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x2E835B4", Offset = "0x2E835B4", VA = "0x2E835B4")]
		public static string GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey)
		{
			return null;
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x2E83630", Offset = "0x2E83630", VA = "0x2E83630")]
		public static void RequestFriendRichPresence(CSteamID steamIDFriend)
		{
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x2E83694", Offset = "0x2E83694", VA = "0x2E83694")]
		public static bool InviteUserToGame(CSteamID steamIDFriend, string pchConnectString)
		{
			return default(bool);
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x2E83800", Offset = "0x2E83800", VA = "0x2E83800")]
		public static int GetCoplayFriendCount()
		{
			return default(int);
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x2E8385C", Offset = "0x2E8385C", VA = "0x2E8385C")]
		public static CSteamID GetCoplayFriend(int iCoplayFriend)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x2E83918", Offset = "0x2E83918", VA = "0x2E83918")]
		public static int GetFriendCoplayTime(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x2E8397C", Offset = "0x2E8397C", VA = "0x2E8397C")]
		public static AppId_t GetFriendCoplayGame(CSteamID steamIDFriend)
		{
			return default(AppId_t);
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x2E83A40", Offset = "0x2E83A40", VA = "0x2E83A40")]
		public static SteamAPICall_t JoinClanChatRoom(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x2E83AF8", Offset = "0x2E83AF8", VA = "0x2E83AF8")]
		public static bool LeaveClanChatRoom(CSteamID steamIDClan)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x2E83B5C", Offset = "0x2E83B5C", VA = "0x2E83B5C")]
		public static int GetClanChatMemberCount(CSteamID steamIDClan)
		{
			return default(int);
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x2E83BC0", Offset = "0x2E83BC0", VA = "0x2E83BC0")]
		public static CSteamID GetChatMemberByIndex(CSteamID steamIDClan, int iUser)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x2E83C8C", Offset = "0x2E83C8C", VA = "0x2E83C8C")]
		public static bool SendClanChatMessage(CSteamID steamIDClanChat, string pchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x2E83DF8", Offset = "0x2E83DF8", VA = "0x2E83DF8")]
		public static int GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, out string prgchText, int cchTextMax, out EChatEntryType peChatEntryType, out CSteamID psteamidChatter)
		{
			return default(int);
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x2E83F50", Offset = "0x2E83F50", VA = "0x2E83F50")]
		public static bool IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x2E83FC4", Offset = "0x2E83FC4", VA = "0x2E83FC4")]
		public static bool IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x2E84028", Offset = "0x2E84028", VA = "0x2E84028")]
		public static bool OpenClanChatWindowInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x2E8408C", Offset = "0x2E8408C", VA = "0x2E8408C")]
		public static bool CloseClanChatWindowInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x2E840F0", Offset = "0x2E840F0", VA = "0x2E840F0")]
		public static bool SetListenForFriendsMessages(bool bInterceptEnabled)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x2E84154", Offset = "0x2E84154", VA = "0x2E84154")]
		public static bool ReplyToFriendMessage(CSteamID steamIDFriend, string pchMsgToSend)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x2E842C0", Offset = "0x2E842C0", VA = "0x2E842C0")]
		public static int GetFriendMessage(CSteamID steamIDFriend, int iMessageID, out string pvData, int cubData, out EChatEntryType peChatEntryType)
		{
			return default(int);
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x2E84408", Offset = "0x2E84408", VA = "0x2E84408")]
		public static SteamAPICall_t GetFollowerCount(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x2E844C0", Offset = "0x2E844C0", VA = "0x2E844C0")]
		public static SteamAPICall_t IsFollowing(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x2E84578", Offset = "0x2E84578", VA = "0x2E84578")]
		public static SteamAPICall_t EnumerateFollowingList(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000144")]
	public static class SteamGameServer
	{
		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x2E84630", Offset = "0x2E84630", VA = "0x2E84630")]
		public static bool InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId_t nGameAppId, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x2E847CC", Offset = "0x2E847CC", VA = "0x2E847CC")]
		public static void SetProduct(string pszProduct)
		{
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x2E8491C", Offset = "0x2E8491C", VA = "0x2E8491C")]
		public static void SetGameDescription(string pszGameDescription)
		{
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x2E84A6C", Offset = "0x2E84A6C", VA = "0x2E84A6C")]
		public static void SetModDir(string pszModDir)
		{
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x2E84BBC", Offset = "0x2E84BBC", VA = "0x2E84BBC")]
		public static void SetDedicatedServer(bool bDedicated)
		{
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x2E84C20", Offset = "0x2E84C20", VA = "0x2E84C20")]
		public static void LogOn(string pszToken)
		{
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x2E84D70", Offset = "0x2E84D70", VA = "0x2E84D70")]
		public static void LogOnAnonymous()
		{
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x2E84DCC", Offset = "0x2E84DCC", VA = "0x2E84DCC")]
		public static void LogOff()
		{
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x2E84E28", Offset = "0x2E84E28", VA = "0x2E84E28")]
		public static bool BLoggedOn()
		{
			return default(bool);
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x2E84E84", Offset = "0x2E84E84", VA = "0x2E84E84")]
		public static bool BSecure()
		{
			return default(bool);
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x2E84EE0", Offset = "0x2E84EE0", VA = "0x2E84EE0")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x2E84F94", Offset = "0x2E84F94", VA = "0x2E84F94")]
		public static bool WasRestartRequested()
		{
			return default(bool);
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x2E84FF0", Offset = "0x2E84FF0", VA = "0x2E84FF0")]
		public static void SetMaxPlayerCount(int cPlayersMax)
		{
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x2E85054", Offset = "0x2E85054", VA = "0x2E85054")]
		public static void SetBotPlayerCount(int cBotplayers)
		{
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x2E850B8", Offset = "0x2E850B8", VA = "0x2E850B8")]
		public static void SetServerName(string pszServerName)
		{
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x2E85208", Offset = "0x2E85208", VA = "0x2E85208")]
		public static void SetMapName(string pszMapName)
		{
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x2E85358", Offset = "0x2E85358", VA = "0x2E85358")]
		public static void SetPasswordProtected(bool bPasswordProtected)
		{
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x2E853BC", Offset = "0x2E853BC", VA = "0x2E853BC")]
		public static void SetSpectatorPort(ushort unSpectatorPort)
		{
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x2E85420", Offset = "0x2E85420", VA = "0x2E85420")]
		public static void SetSpectatorServerName(string pszSpectatorServerName)
		{
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x2E85570", Offset = "0x2E85570", VA = "0x2E85570")]
		public static void ClearAllKeyValues()
		{
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x2E855CC", Offset = "0x2E855CC", VA = "0x2E855CC")]
		public static void SetKeyValue(string pKey, string pValue)
		{
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x2E857E8", Offset = "0x2E857E8", VA = "0x2E857E8")]
		public static void SetGameTags(string pchGameTags)
		{
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0x2E85938", Offset = "0x2E85938", VA = "0x2E85938")]
		public static void SetGameData(string pchGameData)
		{
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x2E85A88", Offset = "0x2E85A88", VA = "0x2E85A88")]
		public static void SetRegion(string pszRegion)
		{
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x2E85BD8", Offset = "0x2E85BD8", VA = "0x2E85BD8")]
		public static bool SendUserConnectAndAuthenticate(uint unIPClient, byte[] pvAuthBlob, uint cubAuthBlobSize, out CSteamID pSteamIDUser)
		{
			return default(bool);
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x2E85C64", Offset = "0x2E85C64", VA = "0x2E85C64")]
		public static CSteamID CreateUnauthenticatedUserConnection()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x2E85D18", Offset = "0x2E85D18", VA = "0x2E85D18")]
		public static void SendUserDisconnect(CSteamID steamIDUser)
		{
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x2E85D7C", Offset = "0x2E85D7C", VA = "0x2E85D7C")]
		public static bool BUpdateUserData(CSteamID steamIDUser, string pchPlayerName, uint uScore)
		{
			return default(bool);
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x2E85EF0", Offset = "0x2E85EF0", VA = "0x2E85EF0")]
		public static HAuthTicket GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x2E85FCC", Offset = "0x2E85FCC", VA = "0x2E85FCC")]
		public static EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID)
		{
			return default(EBeginAuthSessionResult);
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x2E86048", Offset = "0x2E86048", VA = "0x2E86048")]
		public static void EndAuthSession(CSteamID steamID)
		{
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x2E860AC", Offset = "0x2E860AC", VA = "0x2E860AC")]
		public static void CancelAuthTicket(HAuthTicket hAuthTicket)
		{
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x2E86110", Offset = "0x2E86110", VA = "0x2E86110")]
		public static EUserHasLicenseForAppResult UserHasLicenseForApp(CSteamID steamID, AppId_t appID)
		{
			return default(EUserHasLicenseForAppResult);
		}

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x2E86184", Offset = "0x2E86184", VA = "0x2E86184")]
		public static bool RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup)
		{
			return default(bool);
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0x2E861F8", Offset = "0x2E861F8", VA = "0x2E861F8")]
		public static void GetGameplayStats()
		{
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0x2E86254", Offset = "0x2E86254", VA = "0x2E86254")]
		public static SteamAPICall_t GetServerReputation()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0x2E86304", Offset = "0x2E86304", VA = "0x2E86304")]
		public static uint GetPublicIP()
		{
			return default(uint);
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0x2E86360", Offset = "0x2E86360", VA = "0x2E86360")]
		public static bool HandleIncomingPacket(byte[] pData, int cbData, uint srcIP, ushort srcPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0x2E863EC", Offset = "0x2E863EC", VA = "0x2E863EC")]
		public static int GetNextOutgoingPacket(byte[] pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
		{
			return default(int);
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0x2E86478", Offset = "0x2E86478", VA = "0x2E86478")]
		public static void EnableHeartbeats(bool bActive)
		{
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0x2E864DC", Offset = "0x2E864DC", VA = "0x2E864DC")]
		public static void SetHeartbeatInterval(int iHeartbeatInterval)
		{
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0x2E86540", Offset = "0x2E86540", VA = "0x2E86540")]
		public static void ForceHeartbeat()
		{
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0x2E8659C", Offset = "0x2E8659C", VA = "0x2E8659C")]
		public static SteamAPICall_t AssociateWithClan(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0x2E86654", Offset = "0x2E86654", VA = "0x2E86654")]
		public static SteamAPICall_t ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000145")]
	public static class SteamGameServerApps
	{
		[Token(Token = "0x600060A")]
		[Address(RVA = "0x2E8670C", Offset = "0x2E8670C", VA = "0x2E8670C")]
		public static bool BIsSubscribed()
		{
			return default(bool);
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0x2E86768", Offset = "0x2E86768", VA = "0x2E86768")]
		public static bool BIsLowViolence()
		{
			return default(bool);
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0x2E867C4", Offset = "0x2E867C4", VA = "0x2E867C4")]
		public static bool BIsCybercafe()
		{
			return default(bool);
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0x2E86820", Offset = "0x2E86820", VA = "0x2E86820")]
		public static bool BIsVACBanned()
		{
			return default(bool);
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0x2E8687C", Offset = "0x2E8687C", VA = "0x2E8687C")]
		public static string GetCurrentGameLanguage()
		{
			return null;
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0x2E868E0", Offset = "0x2E868E0", VA = "0x2E868E0")]
		public static string GetAvailableGameLanguages()
		{
			return null;
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0x2E86944", Offset = "0x2E86944", VA = "0x2E86944")]
		public static bool BIsSubscribedApp(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0x2E869A8", Offset = "0x2E869A8", VA = "0x2E869A8")]
		public static bool BIsDlcInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0x2E86A0C", Offset = "0x2E86A0C", VA = "0x2E86A0C")]
		public static uint GetEarliestPurchaseUnixTime(AppId_t nAppID)
		{
			return default(uint);
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0x2E86A70", Offset = "0x2E86A70", VA = "0x2E86A70")]
		public static bool BIsSubscribedFromFreeWeekend()
		{
			return default(bool);
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0x2E86ACC", Offset = "0x2E86ACC", VA = "0x2E86ACC")]
		public static int GetDLCCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0x2E86B28", Offset = "0x2E86B28", VA = "0x2E86B28")]
		public static bool BGetDLCDataByIndex(int iDLC, out AppId_t pAppID, out bool pbAvailable, out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0x2E86C6C", Offset = "0x2E86C6C", VA = "0x2E86C6C")]
		public static void InstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0x2E86CD0", Offset = "0x2E86CD0", VA = "0x2E86CD0")]
		public static void UninstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0x2E86D34", Offset = "0x2E86D34", VA = "0x2E86D34")]
		public static void RequestAppProofOfPurchaseKey(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0x2E86D98", Offset = "0x2E86D98", VA = "0x2E86D98")]
		public static bool GetCurrentBetaName(out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600061A")]
		[Address(RVA = "0x2E86EBC", Offset = "0x2E86EBC", VA = "0x2E86EBC")]
		public static bool MarkContentCorrupt(bool bMissingFilesOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0x2E86F20", Offset = "0x2E86F20", VA = "0x2E86F20")]
		public static uint GetInstalledDepots(AppId_t appID, DepotId_t[] pvecDepots, uint cMaxDepots)
		{
			return default(uint);
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0x2E86F9C", Offset = "0x2E86F9C", VA = "0x2E86F9C")]
		public static uint GetAppInstallDir(AppId_t appID, out string pchFolder, uint cchFolderBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x600061D")]
		[Address(RVA = "0x2E870CC", Offset = "0x2E870CC", VA = "0x2E870CC")]
		public static bool BIsAppInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0x2E87130", Offset = "0x2E87130", VA = "0x2E87130")]
		public static CSteamID GetAppOwner()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0x2E871E4", Offset = "0x2E871E4", VA = "0x2E871E4")]
		public static string GetLaunchQueryParam(string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0x2E87354", Offset = "0x2E87354", VA = "0x2E87354")]
		public static bool GetDlcDownloadProgress(AppId_t nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000621")]
		[Address(RVA = "0x2E873D0", Offset = "0x2E873D0", VA = "0x2E873D0")]
		public static int GetAppBuildId()
		{
			return default(int);
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0x2E8742C", Offset = "0x2E8742C", VA = "0x2E8742C")]
		public static void RequestAllProofOfPurchaseKeys()
		{
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0x2E87488", Offset = "0x2E87488", VA = "0x2E87488")]
		public static SteamAPICall_t GetFileDetails(string pszFileName)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000146")]
	public static class SteamGameServerClient
	{
		[Token(Token = "0x6000624")]
		[Address(RVA = "0x2E8760C", Offset = "0x2E8760C", VA = "0x2E8760C")]
		public static HSteamPipe CreateSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0x2E87678", Offset = "0x2E87678", VA = "0x2E87678")]
		public static bool BReleaseSteamPipe(HSteamPipe hSteamPipe)
		{
			return default(bool);
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0x2E876DC", Offset = "0x2E876DC", VA = "0x2E876DC")]
		public static HSteamUser ConnectToGlobalUser(HSteamPipe hSteamPipe)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0x2E87750", Offset = "0x2E87750", VA = "0x2E87750")]
		public static HSteamUser CreateLocalUser(out HSteamPipe phSteamPipe, EAccountType eAccountType)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0x2E877D4", Offset = "0x2E877D4", VA = "0x2E877D4")]
		public static void ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser)
		{
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0x2E87848", Offset = "0x2E87848", VA = "0x2E87848")]
		public static IntPtr GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0x2E879BC", Offset = "0x2E879BC", VA = "0x2E879BC")]
		public static IntPtr GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0x2E87B30", Offset = "0x2E87B30", VA = "0x2E87B30")]
		public static void SetLocalIPBinding(uint unIP, ushort usPort)
		{
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0x2E87BA4", Offset = "0x2E87BA4", VA = "0x2E87BA4")]
		public static IntPtr GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0x2E87D18", Offset = "0x2E87D18", VA = "0x2E87D18")]
		public static IntPtr GetISteamUtils(HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0x2E87E84", Offset = "0x2E87E84", VA = "0x2E87E84")]
		public static IntPtr GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0x2E87FF8", Offset = "0x2E87FF8", VA = "0x2E87FF8")]
		public static IntPtr GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0x2E8816C", Offset = "0x2E8816C", VA = "0x2E8816C")]
		public static IntPtr GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0x2E882E0", Offset = "0x2E882E0", VA = "0x2E882E0")]
		public static IntPtr GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0x2E88454", Offset = "0x2E88454", VA = "0x2E88454")]
		public static IntPtr GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0x2E885C8", Offset = "0x2E885C8", VA = "0x2E885C8")]
		public static IntPtr GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0x2E8873C", Offset = "0x2E8873C", VA = "0x2E8873C")]
		public static IntPtr GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0x2E888B0", Offset = "0x2E888B0", VA = "0x2E888B0")]
		public static IntPtr GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0x2E88A24", Offset = "0x2E88A24", VA = "0x2E88A24")]
		public static IntPtr GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0x2E88B98", Offset = "0x2E88B98", VA = "0x2E88B98")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x2E88BF4", Offset = "0x2E88BF4", VA = "0x2E88BF4")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x2E88C58", Offset = "0x2E88C58", VA = "0x2E88C58")]
		public static bool BShutdownIfAllPipesClosed()
		{
			return default(bool);
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x2E88CB4", Offset = "0x2E88CB4", VA = "0x2E88CB4")]
		public static IntPtr GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0x2E88E28", Offset = "0x2E88E28", VA = "0x2E88E28")]
		public static IntPtr GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0x2E88F9C", Offset = "0x2E88F9C", VA = "0x2E88F9C")]
		public static IntPtr GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x2E89110", Offset = "0x2E89110", VA = "0x2E89110")]
		public static IntPtr GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0x2E89284", Offset = "0x2E89284", VA = "0x2E89284")]
		public static IntPtr GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0x2E893F8", Offset = "0x2E893F8", VA = "0x2E893F8")]
		public static IntPtr GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0x2E8956C", Offset = "0x2E8956C", VA = "0x2E8956C")]
		public static IntPtr GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0x2E896E0", Offset = "0x2E896E0", VA = "0x2E896E0")]
		public static IntPtr GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0x2E89854", Offset = "0x2E89854", VA = "0x2E89854")]
		public static IntPtr GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0x2E899C8", Offset = "0x2E899C8", VA = "0x2E899C8")]
		public static IntPtr GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0x2E89B3C", Offset = "0x2E89B3C", VA = "0x2E89B3C")]
		public static IntPtr GetISteamParentalSettings(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000147")]
	public static class SteamGameServerHTTP
	{
		[Token(Token = "0x6000645")]
		[Address(RVA = "0x2E89CB0", Offset = "0x2E89CB0", VA = "0x2E89CB0")]
		public static HTTPRequestHandle CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0x2E89E50", Offset = "0x2E89E50", VA = "0x2E89E50")]
		public static bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0x2E89EC4", Offset = "0x2E89EC4", VA = "0x2E89EC4")]
		public static bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0x2E89F38", Offset = "0x2E89F38", VA = "0x2E89F38")]
		public static bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0x2E8A184", Offset = "0x2E8A184", VA = "0x2E8A184")]
		public static bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0x2E8A3D0", Offset = "0x2E8A3D0", VA = "0x2E8A3D0")]
		public static bool SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0x2E8A444", Offset = "0x2E8A444", VA = "0x2E8A444")]
		public static bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0x2E8A4B8", Offset = "0x2E8A4B8", VA = "0x2E8A4B8")]
		public static bool DeferHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x600064D")]
		[Address(RVA = "0x2E8A51C", Offset = "0x2E8A51C", VA = "0x2E8A51C")]
		public static bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x600064E")]
		[Address(RVA = "0x2E8A580", Offset = "0x2E8A580", VA = "0x2E8A580")]
		public static bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0x2E8A6F4", Offset = "0x2E8A6F4", VA = "0x2E8A6F4")]
		public static bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0x2E8A878", Offset = "0x2E8A878", VA = "0x2E8A878")]
		public static bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0x2E8A8EC", Offset = "0x2E8A8EC", VA = "0x2E8A8EC")]
		public static bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0x2E8A968", Offset = "0x2E8A968", VA = "0x2E8A968")]
		public static bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0x2E8A9F4", Offset = "0x2E8A9F4", VA = "0x2E8A9F4")]
		public static bool ReleaseHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0x2E8AA58", Offset = "0x2E8AA58", VA = "0x2E8AA58")]
		public static bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0x2E8AACC", Offset = "0x2E8AACC", VA = "0x2E8AACC")]
		public static bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen)
		{
			return default(bool);
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0x2E8AC50", Offset = "0x2E8AC50", VA = "0x2E8AC50")]
		public static HTTPCookieContainerHandle CreateCookieContainer(bool bAllowResponsesToModify)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0x2E8AD14", Offset = "0x2E8AD14", VA = "0x2E8AD14")]
		public static bool ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0x2E8AD78", Offset = "0x2E8AD78", VA = "0x2E8AD78")]
		public static bool SetCookie(HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie)
		{
			return default(bool);
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0x2E8B094", Offset = "0x2E8B094", VA = "0x2E8B094")]
		public static bool SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0x2E8B108", Offset = "0x2E8B108", VA = "0x2E8B108")]
		public static bool SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, string pchUserAgentInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0x2E8B274", Offset = "0x2E8B274", VA = "0x2E8B274")]
		public static bool SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
		{
			return default(bool);
		}

		[Token(Token = "0x600065C")]
		[Address(RVA = "0x2E8B2E8", Offset = "0x2E8B2E8", VA = "0x2E8B2E8")]
		public static bool SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds)
		{
			return default(bool);
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0x2E8B35C", Offset = "0x2E8B35C", VA = "0x2E8B35C")]
		public static bool GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000148")]
	public static class SteamGameServerInventory
	{
		[Token(Token = "0x600065E")]
		[Address(RVA = "0x2E8B3D0", Offset = "0x2E8B3D0", VA = "0x2E8B3D0")]
		public static EResult GetResultStatus(SteamInventoryResult_t resultHandle)
		{
			return default(EResult);
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0x2E8B434", Offset = "0x2E8B434", VA = "0x2E8B434")]
		public static bool GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0x2E8B4B0", Offset = "0x2E8B4B0", VA = "0x2E8B4B0")]
		public static bool GetResultItemProperty(SteamInventoryResult_t resultHandle, uint unItemIndex, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0x2E8B6D4", Offset = "0x2E8B6D4", VA = "0x2E8B6D4")]
		public static uint GetResultTimestamp(SteamInventoryResult_t resultHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0x2E8B738", Offset = "0x2E8B738", VA = "0x2E8B738")]
		public static bool CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0x2E8B7AC", Offset = "0x2E8B7AC", VA = "0x2E8B7AC")]
		public static void DestroyResult(SteamInventoryResult_t resultHandle)
		{
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0x2E8B810", Offset = "0x2E8B810", VA = "0x2E8B810")]
		public static bool GetAllItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000665")]
		[Address(RVA = "0x2E8B874", Offset = "0x2E8B874", VA = "0x2E8B874")]
		public static bool GetItemsByID(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0x2E8B8F0", Offset = "0x2E8B8F0", VA = "0x2E8B8F0")]
		public static bool SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000667")]
		[Address(RVA = "0x2E8B96C", Offset = "0x2E8B96C", VA = "0x2E8B96C")]
		public static bool DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000668")]
		[Address(RVA = "0x2E8B9F8", Offset = "0x2E8B9F8", VA = "0x2E8B9F8")]
		public static bool GenerateItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0x2E8BA84", Offset = "0x2E8BA84", VA = "0x2E8BA84")]
		public static bool GrantPromoItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0x2E8BAE8", Offset = "0x2E8BAE8", VA = "0x2E8BAE8")]
		public static bool AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef)
		{
			return default(bool);
		}

		[Token(Token = "0x600066B")]
		[Address(RVA = "0x2E8BB5C", Offset = "0x2E8BB5C", VA = "0x2E8BB5C")]
		public static bool AddPromoItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0x2E8BBD8", Offset = "0x2E8BBD8", VA = "0x2E8BBD8")]
		public static bool ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity)
		{
			return default(bool);
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0x2E8BC54", Offset = "0x2E8BC54", VA = "0x2E8BC54")]
		public static bool ExchangeItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, SteamItemInstanceID_t[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600066E")]
		[Address(RVA = "0x2E8BD10", Offset = "0x2E8BD10", VA = "0x2E8BD10")]
		public static bool TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest)
		{
			return default(bool);
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0x2E8BD9C", Offset = "0x2E8BD9C", VA = "0x2E8BD9C")]
		public static void SendItemDropHeartbeat()
		{
		}

		[Token(Token = "0x6000670")]
		[Address(RVA = "0x2E8BDF8", Offset = "0x2E8BDF8", VA = "0x2E8BDF8")]
		public static bool TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000671")]
		[Address(RVA = "0x2E8BE6C", Offset = "0x2E8BE6C", VA = "0x2E8BE6C")]
		public static bool TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, SteamItemInstanceID_t[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, SteamItemInstanceID_t[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000672")]
		[Address(RVA = "0x2E8BF38", Offset = "0x2E8BF38", VA = "0x2E8BF38")]
		public static bool LoadItemDefinitions()
		{
			return default(bool);
		}

		[Token(Token = "0x6000673")]
		[Address(RVA = "0x2E8BF94", Offset = "0x2E8BF94", VA = "0x2E8BF94")]
		public static bool GetItemDefinitionIDs(SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000674")]
		[Address(RVA = "0x2E8C008", Offset = "0x2E8C008", VA = "0x2E8C008")]
		public static bool GetItemDefinitionProperty(SteamItemDef_t iDefinition, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0x2E8C224", Offset = "0x2E8C224", VA = "0x2E8C224")]
		public static SteamAPICall_t RequestEligiblePromoItemDefinitionsIDs(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0x2E8C2DC", Offset = "0x2E8C2DC", VA = "0x2E8C2DC")]
		public static bool GetEligiblePromoItemDefinitionIDs(CSteamID steamID, SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000149")]
	public static class SteamGameServerNetworking
	{
		[Token(Token = "0x6000677")]
		[Address(RVA = "0x2E8C358", Offset = "0x2E8C358", VA = "0x2E8C358")]
		public static bool SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0x2E8C3EC", Offset = "0x2E8C3EC", VA = "0x2E8C3EC")]
		public static bool IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000679")]
		[Address(RVA = "0x2E8C460", Offset = "0x2E8C460", VA = "0x2E8C460")]
		public static bool ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x600067A")]
		[Address(RVA = "0x2E8C4F4", Offset = "0x2E8C4F4", VA = "0x2E8C4F4")]
		public static bool AcceptP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x600067B")]
		[Address(RVA = "0x2E8C558", Offset = "0x2E8C558", VA = "0x2E8C558")]
		public static bool CloseP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x600067C")]
		[Address(RVA = "0x2E8C5BC", Offset = "0x2E8C5BC", VA = "0x2E8C5BC")]
		public static bool CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel)
		{
			return default(bool);
		}

		[Token(Token = "0x600067D")]
		[Address(RVA = "0x2E8C630", Offset = "0x2E8C630", VA = "0x2E8C630")]
		public static bool GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState)
		{
			return default(bool);
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0x2E8C6A4", Offset = "0x2E8C6A4", VA = "0x2E8C6A4")]
		public static bool AllowP2PPacketRelay(bool bAllow)
		{
			return default(bool);
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0x2E8C708", Offset = "0x2E8C708", VA = "0x2E8C708")]
		public static SNetListenSocket_t CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x6000680")]
		[Address(RVA = "0x2E8C79C", Offset = "0x2E8C79C", VA = "0x2E8C79C")]
		public static SNetSocket_t CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000681")]
		[Address(RVA = "0x2E8C830", Offset = "0x2E8C830", VA = "0x2E8C830")]
		public static SNetSocket_t CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0x2E8C8B4", Offset = "0x2E8C8B4", VA = "0x2E8C8B4")]
		public static bool DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000683")]
		[Address(RVA = "0x2E8C928", Offset = "0x2E8C928", VA = "0x2E8C928")]
		public static bool DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000684")]
		[Address(RVA = "0x2E8C99C", Offset = "0x2E8C99C", VA = "0x2E8C99C")]
		public static bool SendDataOnSocket(SNetSocket_t hSocket, byte[] pubData, uint cubData, bool bReliable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000685")]
		[Address(RVA = "0x2E8CA28", Offset = "0x2E8CA28", VA = "0x2E8CA28")]
		public static bool IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000686")]
		[Address(RVA = "0x2E8CA9C", Offset = "0x2E8CA9C", VA = "0x2E8CA9C")]
		public static bool RetrieveDataFromSocket(SNetSocket_t hSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000687")]
		[Address(RVA = "0x2E8CB28", Offset = "0x2E8CB28", VA = "0x2E8CB28")]
		public static bool IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000688")]
		[Address(RVA = "0x2E8CBA4", Offset = "0x2E8CBA4", VA = "0x2E8CBA4")]
		public static bool RetrieveData(SNetListenSocket_t hListenSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000689")]
		[Address(RVA = "0x2E8CC38", Offset = "0x2E8CC38", VA = "0x2E8CC38")]
		public static bool GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0x2E8CCCC", Offset = "0x2E8CCCC", VA = "0x2E8CCCC")]
		public static bool GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort)
		{
			return default(bool);
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0x2E8CD48", Offset = "0x2E8CD48", VA = "0x2E8CD48")]
		public static ESNetSocketConnectionType GetSocketConnectionType(SNetSocket_t hSocket)
		{
			return default(ESNetSocketConnectionType);
		}

		[Token(Token = "0x600068C")]
		[Address(RVA = "0x2E8CDAC", Offset = "0x2E8CDAC", VA = "0x2E8CDAC")]
		public static int GetMaxPacketSize(SNetSocket_t hSocket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200014A")]
	public static class SteamGameServerStats
	{
		[Token(Token = "0x600068D")]
		[Address(RVA = "0x2E8CE10", Offset = "0x2E8CE10", VA = "0x2E8CE10")]
		public static SteamAPICall_t RequestUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600068E")]
		[Address(RVA = "0x2E8CEC8", Offset = "0x2E8CEC8", VA = "0x2E8CEC8")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600068F")]
		[Address(RVA = "0x2E8D03C", Offset = "0x2E8D03C", VA = "0x2E8D03C")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0x2E8D1B0", Offset = "0x2E8D1B0", VA = "0x2E8D1B0")]
		public static bool GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0x2E8D324", Offset = "0x2E8D324", VA = "0x2E8D324")]
		public static bool SetUserStat(CSteamID steamIDUser, string pchName, int nData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000692")]
		[Address(RVA = "0x2E8D498", Offset = "0x2E8D498", VA = "0x2E8D498")]
		public static bool SetUserStat(CSteamID steamIDUser, string pchName, float fData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0x2E8D614", Offset = "0x2E8D614", VA = "0x2E8D614")]
		public static bool UpdateUserAvgRateStat(CSteamID steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0x2E8D798", Offset = "0x2E8D798", VA = "0x2E8D798")]
		public static bool SetUserAchievement(CSteamID steamIDUser, string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0x2E8D904", Offset = "0x2E8D904", VA = "0x2E8D904")]
		public static bool ClearUserAchievement(CSteamID steamIDUser, string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0x2E8DA70", Offset = "0x2E8DA70", VA = "0x2E8DA70")]
		public static SteamAPICall_t StoreUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x200014B")]
	public static class SteamGameServerUGC
	{
		[Token(Token = "0x6000697")]
		[Address(RVA = "0x2E8DB28", Offset = "0x2E8DB28", VA = "0x2E8DB28")]
		public static UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000698")]
		[Address(RVA = "0x2E8DC34", Offset = "0x2E8DC34", VA = "0x2E8DC34")]
		public static UGCQueryHandle_t CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0x2E8DD20", Offset = "0x2E8DD20", VA = "0x2E8DD20")]
		public static UGCQueryHandle_t CreateQueryUGCDetailsRequest(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0x2E8DDEC", Offset = "0x2E8DDEC", VA = "0x2E8DDEC")]
		public static SteamAPICall_t SendQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0x2E8DEA4", Offset = "0x2E8DEA4", VA = "0x2E8DEA4")]
		public static bool GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails)
		{
			return default(bool);
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0x2E8DF20", Offset = "0x2E8DF20", VA = "0x2E8DF20")]
		public static bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, out string pchURL, uint cchURLSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0x2E8E05C", Offset = "0x2E8E05C", VA = "0x2E8E05C")]
		public static bool GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, out string pchMetadata, uint cchMetadatasize)
		{
			return default(bool);
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0x2E8E198", Offset = "0x2E8E198", VA = "0x2E8E198")]
		public static bool GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(bool);
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0x2E8E224", Offset = "0x2E8E224", VA = "0x2E8E224")]
		public static bool GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out ulong pStatValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x2E8E2B0", Offset = "0x2E8E2B0", VA = "0x2E8E2B0")]
		public static uint GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x2E8E324", Offset = "0x2E8E324", VA = "0x2E8E324")]
		public static bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, out string pchURLOrVideoID, uint cchURLSize, out string pchOriginalFileName, uint cchOriginalFileNameSize, out EItemPreviewType pPreviewType)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x2E8E4EC", Offset = "0x2E8E4EC", VA = "0x2E8E4EC")]
		public static uint GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x2E8E560", Offset = "0x2E8E560", VA = "0x2E8E560")]
		public static bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, out string pchKey, uint cchKeySize, out string pchValue, uint cchValueSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x2E8E724", Offset = "0x2E8E724", VA = "0x2E8E724")]
		public static bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x2E8E788", Offset = "0x2E8E788", VA = "0x2E8E788")]
		public static bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x2E8E8F4", Offset = "0x2E8E8F4", VA = "0x2E8E8F4")]
		public static bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x2E8EA60", Offset = "0x2E8EA60", VA = "0x2E8EA60")]
		public static bool SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x2E8EAD4", Offset = "0x2E8EAD4", VA = "0x2E8EAD4")]
		public static bool SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
		{
			return default(bool);
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x2E8EB48", Offset = "0x2E8EB48", VA = "0x2E8EB48")]
		public static bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x2E8EBBC", Offset = "0x2E8EBBC", VA = "0x2E8EBBC")]
		public static bool SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x2E8EC30", Offset = "0x2E8EC30", VA = "0x2E8EC30")]
		public static bool SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x2E8ECA4", Offset = "0x2E8ECA4", VA = "0x2E8ECA4")]
		public static bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x2E8ED18", Offset = "0x2E8ED18", VA = "0x2E8ED18")]
		public static bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x2E8ED8C", Offset = "0x2E8ED8C", VA = "0x2E8ED8C")]
		public static bool SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x2E8EE00", Offset = "0x2E8EE00", VA = "0x2E8EE00")]
		public static bool SetLanguage(UGCQueryHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x2E8EF6C", Offset = "0x2E8EF6C", VA = "0x2E8EF6C")]
		public static bool SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x2E8EFE0", Offset = "0x2E8EFE0", VA = "0x2E8EFE0")]
		public static bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x2E8F14C", Offset = "0x2E8F14C", VA = "0x2E8F14C")]
		public static bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x2E8F1C0", Offset = "0x2E8F1C0", VA = "0x2E8F1C0")]
		public static bool SetSearchText(UGCQueryHandle_t handle, string pSearchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x2E8F32C", Offset = "0x2E8F32C", VA = "0x2E8F32C")]
		public static bool SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x2E8F3A0", Offset = "0x2E8F3A0", VA = "0x2E8F3A0")]
		public static bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, string pKey, string pValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x2E8F5EC", Offset = "0x2E8F5EC", VA = "0x2E8F5EC")]
		public static SteamAPICall_t RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x2E8F6B4", Offset = "0x2E8F6B4", VA = "0x2E8F6B4")]
		public static SteamAPICall_t CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x2E8F77C", Offset = "0x2E8F77C", VA = "0x2E8F77C")]
		public static UGCUpdateHandle_t StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x2E8F848", Offset = "0x2E8F848", VA = "0x2E8F848")]
		public static bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x2E8F9B4", Offset = "0x2E8F9B4", VA = "0x2E8F9B4")]
		public static bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x2E8FB20", Offset = "0x2E8FB20", VA = "0x2E8FB20")]
		public static bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x2E8FC8C", Offset = "0x2E8FC8C", VA = "0x2E8FC8C")]
		public static bool SetItemMetadata(UGCUpdateHandle_t handle, string pchMetaData)
		{
			return default(bool);
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x2E8FDF8", Offset = "0x2E8FDF8", VA = "0x2E8FDF8")]
		public static bool SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x2E8FE6C", Offset = "0x2E8FE6C", VA = "0x2E8FE6C")]
		public static bool SetItemTags(UGCUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x2E8FF30", Offset = "0x2E8FF30", VA = "0x2E8FF30")]
		public static bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x2E9009C", Offset = "0x2E9009C", VA = "0x2E9009C")]
		public static bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x2E90208", Offset = "0x2E90208", VA = "0x2E90208")]
		public static bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x2E90374", Offset = "0x2E90374", VA = "0x2E90374")]
		public static bool AddItemKeyValueTag(UGCUpdateHandle_t handle, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x2E905C0", Offset = "0x2E905C0", VA = "0x2E905C0")]
		public static bool AddItemPreviewFile(UGCUpdateHandle_t handle, string pszPreviewFile, EItemPreviewType type)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x2E90734", Offset = "0x2E90734", VA = "0x2E90734")]
		public static bool AddItemPreviewVideo(UGCUpdateHandle_t handle, string pszVideoID)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x2E908A0", Offset = "0x2E908A0", VA = "0x2E908A0")]
		public static bool UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint index, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x2E90A14", Offset = "0x2E90A14", VA = "0x2E90A14")]
		public static bool UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint index, string pszVideoID)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x2E90B88", Offset = "0x2E90B88", VA = "0x2E90B88")]
		public static bool RemoveItemPreview(UGCUpdateHandle_t handle, uint index)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x2E90BFC", Offset = "0x2E90BFC", VA = "0x2E90BFC")]
		public static SteamAPICall_t SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x2E90D88", Offset = "0x2E90D88", VA = "0x2E90D88")]
		public static EItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal)
		{
			return default(EItemUpdateStatus);
		}

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x2E90E04", Offset = "0x2E90E04", VA = "0x2E90E04")]
		public static SteamAPICall_t SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x2E90ECC", Offset = "0x2E90ECC", VA = "0x2E90ECC")]
		public static SteamAPICall_t GetUserItemVote(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x2E90F84", Offset = "0x2E90F84", VA = "0x2E90F84")]
		public static SteamAPICall_t AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x2E9104C", Offset = "0x2E9104C", VA = "0x2E9104C")]
		public static SteamAPICall_t RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x2E91114", Offset = "0x2E91114", VA = "0x2E91114")]
		public static SteamAPICall_t SubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x2E911CC", Offset = "0x2E911CC", VA = "0x2E911CC")]
		public static SteamAPICall_t UnsubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x2E91284", Offset = "0x2E91284", VA = "0x2E91284")]
		public static uint GetNumSubscribedItems()
		{
			return default(uint);
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x2E912E0", Offset = "0x2E912E0", VA = "0x2E912E0")]
		public static uint GetSubscribedItems(PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(uint);
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x2E91354", Offset = "0x2E91354", VA = "0x2E91354")]
		public static uint GetItemState(PublishedFileId_t nPublishedFileID)
		{
			return default(uint);
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x2E913B8", Offset = "0x2E913B8", VA = "0x2E913B8")]
		public static bool GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, out string pchFolder, uint cchFolderSize, out uint punTimeStamp)
		{
			return default(bool);
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x2E914FC", Offset = "0x2E914FC", VA = "0x2E914FC")]
		public static bool GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x2E91578", Offset = "0x2E91578", VA = "0x2E91578")]
		public static bool DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
		{
			return default(bool);
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x2E915EC", Offset = "0x2E915EC", VA = "0x2E915EC")]
		public static bool BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, string pszFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x2E91758", Offset = "0x2E91758", VA = "0x2E91758")]
		public static void SuspendDownloads(bool bSuspend)
		{
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x2E917BC", Offset = "0x2E917BC", VA = "0x2E917BC")]
		public static SteamAPICall_t StartPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x2E91884", Offset = "0x2E91884", VA = "0x2E91884")]
		public static SteamAPICall_t StopPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x2E9194C", Offset = "0x2E9194C", VA = "0x2E9194C")]
		public static SteamAPICall_t StopPlaytimeTrackingForAllItems()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x2E919FC", Offset = "0x2E919FC", VA = "0x2E919FC")]
		public static SteamAPICall_t AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x2E91AC4", Offset = "0x2E91AC4", VA = "0x2E91AC4")]
		public static SteamAPICall_t RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x2E91B8C", Offset = "0x2E91B8C", VA = "0x2E91B8C")]
		public static SteamAPICall_t AddAppDependency(PublishedFileId_t nPublishedFileID, AppId_t nAppID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x2E91C54", Offset = "0x2E91C54", VA = "0x2E91C54")]
		public static SteamAPICall_t RemoveAppDependency(PublishedFileId_t nPublishedFileID, AppId_t nAppID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x2E91D1C", Offset = "0x2E91D1C", VA = "0x2E91D1C")]
		public static SteamAPICall_t GetAppDependencies(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x2E91DD4", Offset = "0x2E91DD4", VA = "0x2E91DD4")]
		public static SteamAPICall_t DeleteItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x200014C")]
	public static class SteamGameServerUtils
	{
		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x2E91E8C", Offset = "0x2E91E8C", VA = "0x2E91E8C")]
		public static uint GetSecondsSinceAppActive()
		{
			return default(uint);
		}

		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x2E91EE8", Offset = "0x2E91EE8", VA = "0x2E91EE8")]
		public static uint GetSecondsSinceComputerActive()
		{
			return default(uint);
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x2E91F44", Offset = "0x2E91F44", VA = "0x2E91F44")]
		public static EUniverse GetConnectedUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x2E91FA0", Offset = "0x2E91FA0", VA = "0x2E91FA0")]
		public static uint GetServerRealTime()
		{
			return default(uint);
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x2E91FFC", Offset = "0x2E91FFC", VA = "0x2E91FFC")]
		public static string GetIPCountry()
		{
			return null;
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x2E92060", Offset = "0x2E92060", VA = "0x2E92060")]
		public static bool GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x2E920DC", Offset = "0x2E920DC", VA = "0x2E920DC")]
		public static bool GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x2E92158", Offset = "0x2E92158", VA = "0x2E92158")]
		public static bool GetCSERIPPort(out uint unIP, out ushort usPort)
		{
			return default(bool);
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x2E921CC", Offset = "0x2E921CC", VA = "0x2E921CC")]
		public static byte GetCurrentBatteryPower()
		{
			return default(byte);
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x2E92228", Offset = "0x2E92228", VA = "0x2E92228")]
		public static AppId_t GetAppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x2E922E4", Offset = "0x2E922E4", VA = "0x2E922E4")]
		public static void SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
		{
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x2E92348", Offset = "0x2E92348", VA = "0x2E92348")]
		public static bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x2E923BC", Offset = "0x2E923BC", VA = "0x2E923BC")]
		public static ESteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
		{
			return default(ESteamAPICallFailure);
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x2E92420", Offset = "0x2E92420", VA = "0x2E92420")]
		public static bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x2E924B4", Offset = "0x2E924B4", VA = "0x2E924B4")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x2E92510", Offset = "0x2E92510", VA = "0x2E92510")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x2E92574", Offset = "0x2E92574", VA = "0x2E92574")]
		public static bool IsOverlayEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x2E925D0", Offset = "0x2E925D0", VA = "0x2E925D0")]
		public static bool BOverlayNeedsPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x2E9262C", Offset = "0x2E9262C", VA = "0x2E9262C")]
		public static SteamAPICall_t CheckFileSignature(string szFileName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x2E927B0", Offset = "0x2E927B0", VA = "0x2E927B0")]
		public static bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
		{
			return default(bool);
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x2E92A14", Offset = "0x2E92A14", VA = "0x2E92A14")]
		public static uint GetEnteredGamepadTextLength()
		{
			return default(uint);
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x2E92A70", Offset = "0x2E92A70", VA = "0x2E92A70")]
		public static bool GetEnteredGamepadTextInput(out string pchText, uint cchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x2E92B94", Offset = "0x2E92B94", VA = "0x2E92B94")]
		public static string GetSteamUILanguage()
		{
			return null;
		}

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x2E92BF8", Offset = "0x2E92BF8", VA = "0x2E92BF8")]
		public static bool IsSteamRunningInVR()
		{
			return default(bool);
		}

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x2E92C54", Offset = "0x2E92C54", VA = "0x2E92C54")]
		public static void SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
		{
		}

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x2E92CC8", Offset = "0x2E92CC8", VA = "0x2E92CC8")]
		public static bool IsSteamInBigPictureMode()
		{
			return default(bool);
		}

		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x2E92D24", Offset = "0x2E92D24", VA = "0x2E92D24")]
		public static void StartVRDashboard()
		{
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x2E92D80", Offset = "0x2E92D80", VA = "0x2E92D80")]
		public static bool IsVRHeadsetStreamingEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x2E92DDC", Offset = "0x2E92DDC", VA = "0x2E92DDC")]
		public static void SetVRHeadsetStreamingEnabled(bool bEnabled)
		{
		}
	}
	[Token(Token = "0x200014D")]
	public static class SteamHTMLSurface
	{
		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x2E92E40", Offset = "0x2E92E40", VA = "0x2E92E40")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x2E92E9C", Offset = "0x2E92E9C", VA = "0x2E92E9C")]
		public static bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0x2E92EF8", Offset = "0x2E92EF8", VA = "0x2E92EF8")]
		public static SteamAPICall_t CreateBrowser(string pchUserAgent, string pchUserCSS)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0x2E93148", Offset = "0x2E93148", VA = "0x2E93148")]
		public static void RemoveBrowser(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0x2E931AC", Offset = "0x2E931AC", VA = "0x2E931AC")]
		public static void LoadURL(HHTMLBrowser unBrowserHandle, string pchURL, string pchPostData)
		{
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0x2E933D8", Offset = "0x2E933D8", VA = "0x2E933D8")]
		public static void SetSize(HHTMLBrowser unBrowserHandle, uint unWidth, uint unHeight)
		{
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0x2E93454", Offset = "0x2E93454", VA = "0x2E93454")]
		public static void StopLoad(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0x2E934B8", Offset = "0x2E934B8", VA = "0x2E934B8")]
		public static void Reload(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x2E9351C", Offset = "0x2E9351C", VA = "0x2E9351C")]
		public static void GoBack(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0x2E93580", Offset = "0x2E93580", VA = "0x2E93580")]
		public static void GoForward(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0x2E935E4", Offset = "0x2E935E4", VA = "0x2E935E4")]
		public static void AddHeader(HHTMLBrowser unBrowserHandle, string pchKey, string pchValue)
		{
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0x2E93810", Offset = "0x2E93810", VA = "0x2E93810")]
		public static void ExecuteJavascript(HHTMLBrowser unBrowserHandle, string pchScript)
		{
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0x2E93970", Offset = "0x2E93970", VA = "0x2E93970")]
		public static void MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0x2E939E4", Offset = "0x2E939E4", VA = "0x2E939E4")]
		public static void MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0x2E93A58", Offset = "0x2E93A58", VA = "0x2E93A58")]
		public static void MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x2E93ACC", Offset = "0x2E93ACC", VA = "0x2E93ACC")]
		public static void MouseMove(HHTMLBrowser unBrowserHandle, int x, int y)
		{
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0x2E93B48", Offset = "0x2E93B48", VA = "0x2E93B48")]
		public static void MouseWheel(HHTMLBrowser unBrowserHandle, int nDelta)
		{
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0x2E93BBC", Offset = "0x2E93BBC", VA = "0x2E93BBC")]
		public static void KeyDown(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0x2E93C38", Offset = "0x2E93C38", VA = "0x2E93C38")]
		public static void KeyUp(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x2E93CB4", Offset = "0x2E93CB4", VA = "0x2E93CB4")]
		public static void KeyChar(HHTMLBrowser unBrowserHandle, uint cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0x2E93D30", Offset = "0x2E93D30", VA = "0x2E93D30")]
		public static void SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll)
		{
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0x2E93DA4", Offset = "0x2E93DA4", VA = "0x2E93DA4")]
		public static void SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll)
		{
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0x2E93E18", Offset = "0x2E93E18", VA = "0x2E93E18")]
		public static void SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus)
		{
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0x2E93E8C", Offset = "0x2E93E8C", VA = "0x2E93E8C")]
		public static void ViewSource(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0x2E93EF0", Offset = "0x2E93EF0", VA = "0x2E93EF0")]
		public static void CopyToClipboard(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0x2E93F54", Offset = "0x2E93F54", VA = "0x2E93F54")]
		public static void PasteFromClipboard(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0x2E93FB8", Offset = "0x2E93FB8", VA = "0x2E93FB8")]
		public static void Find(HHTMLBrowser unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse)
		{
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0x2E94130", Offset = "0x2E94130", VA = "0x2E94130")]
		public static void StopFind(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0x2E94194", Offset = "0x2E94194", VA = "0x2E94194")]
		public static void GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y)
		{
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0x2E94210", Offset = "0x2E94210", VA = "0x2E94210")]
		public static void SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath = "/", uint nExpires = 0u, bool bSecure = false, bool bHTTPOnly = false)
		{
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0x2E945EC", Offset = "0x2E945EC", VA = "0x2E945EC")]
		public static void SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY)
		{
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0x2E94678", Offset = "0x2E94678", VA = "0x2E94678")]
		public static void SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode)
		{
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0x2E946EC", Offset = "0x2E946EC", VA = "0x2E946EC")]
		public static void SetDPIScalingFactor(HHTMLBrowser unBrowserHandle, float flDPIScaling)
		{
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0x2E94760", Offset = "0x2E94760", VA = "0x2E94760")]
		public static void AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed)
		{
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0x2E947D4", Offset = "0x2E947D4", VA = "0x2E947D4")]
		public static void JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult)
		{
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0x2E94848", Offset = "0x2E94848", VA = "0x2E94848")]
		public static void FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, IntPtr pchSelectedFiles)
		{
		}
	}
	[Token(Token = "0x200014E")]
	public static class SteamHTTP
	{
		[Token(Token = "0x6000722")]
		[Address(RVA = "0x2E948BC", Offset = "0x2E948BC", VA = "0x2E948BC")]
		public static HTTPRequestHandle CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0x2E94A5C", Offset = "0x2E94A5C", VA = "0x2E94A5C")]
		public static bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0x2E94AD0", Offset = "0x2E94AD0", VA = "0x2E94AD0")]
		public static bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000725")]
		[Address(RVA = "0x2E94B44", Offset = "0x2E94B44", VA = "0x2E94B44")]
		public static bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0x2E94D90", Offset = "0x2E94D90", VA = "0x2E94D90")]
		public static bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0x2E94FDC", Offset = "0x2E94FDC", VA = "0x2E94FDC")]
		public static bool SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0x2E95050", Offset = "0x2E95050", VA = "0x2E95050")]
		public static bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0x2E950C4", Offset = "0x2E950C4", VA = "0x2E950C4")]
		public static bool DeferHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0x2E95128", Offset = "0x2E95128", VA = "0x2E95128")]
		public static bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0x2E9518C", Offset = "0x2E9518C", VA = "0x2E9518C")]
		public static bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0x2E95300", Offset = "0x2E95300", VA = "0x2E95300")]
		public static bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0x2E95484", Offset = "0x2E95484", VA = "0x2E95484")]
		public static bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize)
		{
			return default(bool);
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0x2E954F8", Offset = "0x2E954F8", VA = "0x2E954F8")]
		public static bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0x2E95574", Offset = "0x2E95574", VA = "0x2E95574")]
		public static bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0x2E95600", Offset = "0x2E95600", VA = "0x2E95600")]
		public static bool ReleaseHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0x2E95664", Offset = "0x2E95664", VA = "0x2E95664")]
		public static bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0x2E956D8", Offset = "0x2E956D8", VA = "0x2E956D8")]
		public static bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen)
		{
			return default(bool);
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0x2E9585C", Offset = "0x2E9585C", VA = "0x2E9585C")]
		public static HTTPCookieContainerHandle CreateCookieContainer(bool bAllowResponsesToModify)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0x2E95920", Offset = "0x2E95920", VA = "0x2E95920")]
		public static bool ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0x2E95984", Offset = "0x2E95984", VA = "0x2E95984")]
		public static bool SetCookie(HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie)
		{
			return default(bool);
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0x2E95CA0", Offset = "0x2E95CA0", VA = "0x2E95CA0")]
		public static bool SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0x2E95D14", Offset = "0x2E95D14", VA = "0x2E95D14")]
		public static bool SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, string pchUserAgentInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0x2E95E80", Offset = "0x2E95E80", VA = "0x2E95E80")]
		public static bool SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
		{
			return default(bool);
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0x2E95EF4", Offset = "0x2E95EF4", VA = "0x2E95EF4")]
		public static bool SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds)
		{
			return default(bool);
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0x2E95F68", Offset = "0x2E95F68", VA = "0x2E95F68")]
		public static bool GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200014F")]
	public static class SteamInventory
	{
		[Token(Token = "0x600073B")]
		[Address(RVA = "0x2E95FDC", Offset = "0x2E95FDC", VA = "0x2E95FDC")]
		public static EResult GetResultStatus(SteamInventoryResult_t resultHandle)
		{
			return default(EResult);
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0x2E96040", Offset = "0x2E96040", VA = "0x2E96040")]
		public static bool GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x600073D")]
		[Address(RVA = "0x2E960BC", Offset = "0x2E960BC", VA = "0x2E960BC")]
		public static bool GetResultItemProperty(SteamInventoryResult_t resultHandle, uint unItemIndex, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
		{
			return default(bool);
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0x2E962E0", Offset = "0x2E962E0", VA = "0x2E962E0")]
		public static uint GetResultTimestamp(SteamInventoryResult_t resultHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0x2E96344", Offset = "0x2E96344", VA = "0x2E96344")]
		public static bool CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x6000740")]
		[Address(RVA = "0x2E963B8", Offset = "0x2E963B8", VA = "0x2E963B8")]
		public static void DestroyResult(SteamInventoryResult_t resultHandle)
		{
		}

		[Token(Token = "0x6000741")]
		[Address(RVA = "0x2E9641C", Offset = "0x2E9641C", VA = "0x2E9641C")]
		public static bool GetAllItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000742")]
		[Address(RVA = "0x2E96480", Offset = "0x2E96480", VA = "0x2E96480")]
		public static bool GetItemsByID(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0x2E964FC", Offset = "0x2E964FC", VA = "0x2E964FC")]
		public static bool SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0x2E96578", Offset = "0x2E96578", VA = "0x2E96578")]
		public static bool DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0x2E96604", Offset = "0x2E96604", VA = "0x2E96604")]
		public static bool GenerateItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0x2E96690", Offset = "0x2E96690", VA = "0x2E96690")]
		public static bool GrantPromoItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0x2E966F4", Offset = "0x2E966F4", VA = "0x2E966F4")]
		public static bool AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef)
		{
			return default(bool);
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0x2E96768", Offset = "0x2E96768", VA = "0x2E96768")]
		public static bool AddPromoItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0x2E967E4", Offset = "0x2E967E4", VA = "0x2E967E4")]
		public static bool ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity)
		{
			return default(bool);
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0x2E96860", Offset = "0x2E96860", VA = "0x2E96860")]
		public static bool ExchangeItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, SteamItemInstanceID_t[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0x2E9691C", Offset = "0x2E9691C", VA = "0x2E9691C")]
		public static bool TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest)
		{
			return default(bool);
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0x2E969A8", Offset = "0x2E969A8", VA = "0x2E969A8")]
		public static void SendItemDropHeartbeat()
		{
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0x2E96A04", Offset = "0x2E96A04", VA = "0x2E96A04")]
		public static bool TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0x2E96A78", Offset = "0x2E96A78", VA = "0x2E96A78")]
		public static bool TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, SteamItemInstanceID_t[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, SteamItemInstanceID_t[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0x2E96B44", Offset = "0x2E96B44", VA = "0x2E96B44")]
		public static bool LoadItemDefinitions()
		{
			return default(bool);
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0x2E96BA0", Offset = "0x2E96BA0", VA = "0x2E96BA0")]
		public static bool GetItemDefinitionIDs(SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0x2E96C14", Offset = "0x2E96C14", VA = "0x2E96C14")]
		public static bool GetItemDefinitionProperty(SteamItemDef_t iDefinition, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0x2E96E30", Offset = "0x2E96E30", VA = "0x2E96E30")]
		public static SteamAPICall_t RequestEligiblePromoItemDefinitionsIDs(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0x2E96EE8", Offset = "0x2E96EE8", VA = "0x2E96EE8")]
		public static bool GetEligiblePromoItemDefinitionIDs(CSteamID steamID, SteamItemDef_t[] pItemDefIDs, ref uint punItemDefIDsArraySize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000150")]
	public static class SteamMatchmaking
	{
		[Token(Token = "0x6000754")]
		[Address(RVA = "0x2B125F8", Offset = "0x2B125F8", VA = "0x2B125F8")]
		public static int GetFavoriteGameCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0x2B12654", Offset = "0x2B12654", VA = "0x2B12654")]
		public static bool GetFavoriteGame(int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0x2B12710", Offset = "0x2B12710", VA = "0x2B12710")]
		public static int AddFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
		{
			return default(int);
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0x2B127B4", Offset = "0x2B127B4", VA = "0x2B127B4")]
		public static bool RemoveFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0x2B12848", Offset = "0x2B12848", VA = "0x2B12848")]
		public static SteamAPICall_t RequestLobbyList()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0x2B128FC", Offset = "0x2B128FC", VA = "0x2B128FC")]
		public static void AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, ELobbyComparison eComparisonType)
		{
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0x2B12B28", Offset = "0x2B12B28", VA = "0x2B12B28")]
		public static void AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType)
		{
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0x2B12C90", Offset = "0x2B12C90", VA = "0x2B12C90")]
		public static void AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
		{
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0x2B12DF0", Offset = "0x2B12DF0", VA = "0x2B12DF0")]
		public static void AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
		{
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0x2B12E54", Offset = "0x2B12E54", VA = "0x2B12E54")]
		public static void AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter)
		{
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0x2B12EB8", Offset = "0x2B12EB8", VA = "0x2B12EB8")]
		public static void AddRequestLobbyListResultCountFilter(int cMaxResults)
		{
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0x2B12F1C", Offset = "0x2B12F1C", VA = "0x2B12F1C")]
		public static void AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0x2B12F80", Offset = "0x2B12F80", VA = "0x2B12F80")]
		public static CSteamID GetLobbyByIndex(int iLobby)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0x2B1303C", Offset = "0x2B1303C", VA = "0x2B1303C")]
		public static SteamAPICall_t CreateLobby(ELobbyType eLobbyType, int cMaxMembers)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0x2B13108", Offset = "0x2B13108", VA = "0x2B13108")]
		public static SteamAPICall_t JoinLobby(CSteamID steamIDLobby)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0x2B131C4", Offset = "0x2B131C4", VA = "0x2B131C4")]
		public static void LeaveLobby(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0x2B13228", Offset = "0x2B13228", VA = "0x2B13228")]
		public static bool InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee)
		{
			return default(bool);
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0x2B1329C", Offset = "0x2B1329C", VA = "0x2B1329C")]
		public static int GetNumLobbyMembers(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0x2B13300", Offset = "0x2B13300", VA = "0x2B13300")]
		public static CSteamID GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0x2B133CC", Offset = "0x2B133CC", VA = "0x2B133CC")]
		public static string GetLobbyData(CSteamID steamIDLobby, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000768")]
		[Address(RVA = "0x2B13544", Offset = "0x2B13544", VA = "0x2B13544")]
		public static bool SetLobbyData(CSteamID steamIDLobby, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0x2B13790", Offset = "0x2B13790", VA = "0x2B13790")]
		public static int GetLobbyDataCount(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x600076A")]
		[Address(RVA = "0x2B137F4", Offset = "0x2B137F4", VA = "0x2B137F4")]
		public static bool GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, out string pchKey, int cchKeyBufferSize, out string pchValue, int cchValueBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600076B")]
		[Address(RVA = "0x2B139A0", Offset = "0x2B139A0", VA = "0x2B139A0")]
		public static bool DeleteLobbyData(CSteamID steamIDLobby, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0x2B13B0C", Offset = "0x2B13B0C", VA = "0x2B13B0C")]
		public static string GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0x2B13C8C", Offset = "0x2B13C8C", VA = "0x2B13C8C")]
		public static void SetLobbyMemberData(CSteamID steamIDLobby, string pchKey, string pchValue)
		{
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0x2B13EB8", Offset = "0x2B13EB8", VA = "0x2B13EB8")]
		public static bool SendLobbyChatMsg(CSteamID steamIDLobby, byte[] pvMsgBody, int cubMsgBody)
		{
			return default(bool);
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0x2B13F34", Offset = "0x2B13F34", VA = "0x2B13F34")]
		public static int GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, byte[] pvData, int cubData, out EChatEntryType peChatEntryType)
		{
			return default(int);
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0x2B13FD8", Offset = "0x2B13FD8", VA = "0x2B13FD8")]
		public static bool RequestLobbyData(CSteamID steamIDLobby)
		{
			return default(bool);
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0x2B1403C", Offset = "0x2B1403C", VA = "0x2B1403C")]
		public static void SetLobbyGameServer(CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer)
		{
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0x2B140C8", Offset = "0x2B140C8", VA = "0x2B140C8")]
		public static bool GetLobbyGameServer(CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0x2B14154", Offset = "0x2B14154", VA = "0x2B14154")]
		public static bool SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0x2B141C8", Offset = "0x2B141C8", VA = "0x2B141C8")]
		public static int GetLobbyMemberLimit(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0x2B1422C", Offset = "0x2B1422C", VA = "0x2B1422C")]
		public static bool SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0x2B142A0", Offset = "0x2B142A0", VA = "0x2B142A0")]
		public static bool SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0x2B14314", Offset = "0x2B14314", VA = "0x2B14314")]
		public static CSteamID GetLobbyOwner(CSteamID steamIDLobby)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0x2B143D0", Offset = "0x2B143D0", VA = "0x2B143D0")]
		public static bool SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner)
		{
			return default(bool);
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0x2B14444", Offset = "0x2B14444", VA = "0x2B14444")]
		public static bool SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000151")]
	public static class SteamMatchmakingServers
	{
		[Token(Token = "0x600077A")]
		[Address(RVA = "0x2B144B8", Offset = "0x2B144B8", VA = "0x2B144B8")]
		public static HServerListRequest RequestInternetServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0x2B145D8", Offset = "0x2B145D8", VA = "0x2B145D8")]
		public static HServerListRequest RequestLANServerList(AppId_t iApp, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0x2B146B4", Offset = "0x2B146B4", VA = "0x2B146B4")]
		public static HServerListRequest RequestFriendsServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0x2B147D4", Offset = "0x2B147D4", VA = "0x2B147D4")]
		public static HServerListRequest RequestFavoritesServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0x2B148F4", Offset = "0x2B148F4", VA = "0x2B148F4")]
		public static HServerListRequest RequestHistoryServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0x2B14A14", Offset = "0x2B14A14", VA = "0x2B14A14")]
		public static HServerListRequest RequestSpectatorServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0x2B14B34", Offset = "0x2B14B34", VA = "0x2B14B34")]
		public static void ReleaseRequest(HServerListRequest hServerListRequest)
		{
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0x2B14B98", Offset = "0x2B14B98", VA = "0x2B14B98")]
		public static gameserveritem_t GetServerDetails(HServerListRequest hRequest, int iServer)
		{
			return null;
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0x2B14CE8", Offset = "0x2B14CE8", VA = "0x2B14CE8")]
		public static void CancelQuery(HServerListRequest hRequest)
		{
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0x2B14D4C", Offset = "0x2B14D4C", VA = "0x2B14D4C")]
		public static void RefreshQuery(HServerListRequest hRequest)
		{
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0x2B14DB0", Offset = "0x2B14DB0", VA = "0x2B14DB0")]
		public static bool IsRefreshing(HServerListRequest hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0x2B14E14", Offset = "0x2B14E14", VA = "0x2B14E14")]
		public static int GetServerCount(HServerListRequest hRequest)
		{
			return default(int);
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0x2B14E78", Offset = "0x2B14E78", VA = "0x2B14E78")]
		public static void RefreshServer(HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0x2B14EEC", Offset = "0x2B14EEC", VA = "0x2B14EEC")]
		public static HServerQuery PingServer(uint unIP, ushort usPort, ISteamMatchmakingPingResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0x2B14FD8", Offset = "0x2B14FD8", VA = "0x2B14FD8")]
		public static HServerQuery PlayerDetails(uint unIP, ushort usPort, ISteamMatchmakingPlayersResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0x2B150C4", Offset = "0x2B150C4", VA = "0x2B150C4")]
		public static HServerQuery ServerRules(uint unIP, ushort usPort, ISteamMatchmakingRulesResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0x2B151B0", Offset = "0x2B151B0", VA = "0x2B151B0")]
		public static void CancelServerQuery(HServerQuery hServerQuery)
		{
		}
	}
	[Token(Token = "0x2000152")]
	public static class SteamMusic
	{
		[Token(Token = "0x600078B")]
		[Address(RVA = "0x2B15214", Offset = "0x2B15214", VA = "0x2B15214")]
		public static bool BIsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0x2B15270", Offset = "0x2B15270", VA = "0x2B15270")]
		public static bool BIsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0x2B152CC", Offset = "0x2B152CC", VA = "0x2B152CC")]
		public static AudioPlayback_Status GetPlaybackStatus()
		{
			return default(AudioPlayback_Status);
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0x2B15328", Offset = "0x2B15328", VA = "0x2B15328")]
		public static void Play()
		{
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0x2B15384", Offset = "0x2B15384", VA = "0x2B15384")]
		public static void Pause()
		{
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0x2B153E0", Offset = "0x2B153E0", VA = "0x2B153E0")]
		public static void PlayPrevious()
		{
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0x2B1543C", Offset = "0x2B1543C", VA = "0x2B1543C")]
		public static void PlayNext()
		{
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0x2B15498", Offset = "0x2B15498", VA = "0x2B15498")]
		public static void SetVolume(float flVolume)
		{
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0x2B15504", Offset = "0x2B15504", VA = "0x2B15504")]
		public static float GetVolume()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000153")]
	public static class SteamMusicRemote
	{
		[Token(Token = "0x6000794")]
		[Address(RVA = "0x2B15560", Offset = "0x2B15560", VA = "0x2B15560")]
		public static bool RegisterSteamMusicRemote(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0x2B156C4", Offset = "0x2B156C4", VA = "0x2B156C4")]
		public static bool DeregisterSteamMusicRemote()
		{
			return default(bool);
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0x2B15720", Offset = "0x2B15720", VA = "0x2B15720")]
		public static bool BIsCurrentMusicRemote()
		{
			return default(bool);
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0x2B1577C", Offset = "0x2B1577C", VA = "0x2B1577C")]
		public static bool BActivationSuccess(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0x2B157E0", Offset = "0x2B157E0", VA = "0x2B157E0")]
		public static bool SetDisplayName(string pchDisplayName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0x2B15944", Offset = "0x2B15944", VA = "0x2B15944")]
		public static bool SetPNGIcon_64x64(byte[] pvBuffer, uint cbBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0x2B159B8", Offset = "0x2B159B8", VA = "0x2B159B8")]
		public static bool EnablePlayPrevious(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0x2B15A1C", Offset = "0x2B15A1C", VA = "0x2B15A1C")]
		public static bool EnablePlayNext(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0x2B15A80", Offset = "0x2B15A80", VA = "0x2B15A80")]
		public static bool EnableShuffled(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0x2B15AE4", Offset = "0x2B15AE4", VA = "0x2B15AE4")]
		public static bool EnableLooped(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0x2B15B48", Offset = "0x2B15B48", VA = "0x2B15B48")]
		public static bool EnableQueue(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0x2B15BAC", Offset = "0x2B15BAC", VA = "0x2B15BAC")]
		public static bool EnablePlaylists(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x2B15C10", Offset = "0x2B15C10", VA = "0x2B15C10")]
		public static bool UpdatePlaybackStatus(AudioPlayback_Status nStatus)
		{
			return default(bool);
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x2B15C74", Offset = "0x2B15C74", VA = "0x2B15C74")]
		public static bool UpdateShuffled(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x2B15CD8", Offset = "0x2B15CD8", VA = "0x2B15CD8")]
		public static bool UpdateLooped(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x2B15D3C", Offset = "0x2B15D3C", VA = "0x2B15D3C")]
		public static bool UpdateVolume(float flValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x2B15DA8", Offset = "0x2B15DA8", VA = "0x2B15DA8")]
		public static bool CurrentEntryWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x2B15E04", Offset = "0x2B15E04", VA = "0x2B15E04")]
		public static bool CurrentEntryIsAvailable(bool bAvailable)
		{
			return default(bool);
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x2B15E68", Offset = "0x2B15E68", VA = "0x2B15E68")]
		public static bool UpdateCurrentEntryText(string pchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x2B15FCC", Offset = "0x2B15FCC", VA = "0x2B15FCC")]
		public static bool UpdateCurrentEntryElapsedSeconds(int nValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x2B16030", Offset = "0x2B16030", VA = "0x2B16030")]
		public static bool UpdateCurrentEntryCoverArt(byte[] pvBuffer, uint cbBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x2B160A4", Offset = "0x2B160A4", VA = "0x2B160A4")]
		public static bool CurrentEntryDidChange()
		{
			return default(bool);
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x2B16100", Offset = "0x2B16100", VA = "0x2B16100")]
		public static bool QueueWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x2B1615C", Offset = "0x2B1615C", VA = "0x2B1615C")]
		public static bool ResetQueueEntries()
		{
			return default(bool);
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x2B161B8", Offset = "0x2B161B8", VA = "0x2B161B8")]
		public static bool SetQueueEntry(int nID, int nPosition, string pchEntryText)
		{
			return default(bool);
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x2B1632C", Offset = "0x2B1632C", VA = "0x2B1632C")]
		public static bool SetCurrentQueueEntry(int nID)
		{
			return default(bool);
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x2B16390", Offset = "0x2B16390", VA = "0x2B16390")]
		public static bool QueueDidChange()
		{
			return default(bool);
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x2B163EC", Offset = "0x2B163EC", VA = "0x2B163EC")]
		public static bool PlaylistWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x2B16448", Offset = "0x2B16448", VA = "0x2B16448")]
		public static bool ResetPlaylistEntries()
		{
			return default(bool);
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x2B164A4", Offset = "0x2B164A4", VA = "0x2B164A4")]
		public static bool SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x2B16618", Offset = "0x2B16618", VA = "0x2B16618")]
		public static bool SetCurrentPlaylistEntry(int nID)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x2B1667C", Offset = "0x2B1667C", VA = "0x2B1667C")]
		public static bool PlaylistDidChange()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000154")]
	public static class SteamNetworking
	{
		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x2B166D8", Offset = "0x2B166D8", VA = "0x2B166D8")]
		public static bool SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x2B1676C", Offset = "0x2B1676C", VA = "0x2B1676C")]
		public static bool IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x2B167E0", Offset = "0x2B167E0", VA = "0x2B167E0")]
		public static bool ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x2B16874", Offset = "0x2B16874", VA = "0x2B16874")]
		public static bool AcceptP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x2B168D8", Offset = "0x2B168D8", VA = "0x2B168D8")]
		public static bool CloseP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x2B1693C", Offset = "0x2B1693C", VA = "0x2B1693C")]
		public static bool CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel)
		{
			return default(bool);
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x2B169B0", Offset = "0x2B169B0", VA = "0x2B169B0")]
		public static bool GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState)
		{
			return default(bool);
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x2B16A24", Offset = "0x2B16A24", VA = "0x2B16A24")]
		public static bool AllowP2PPacketRelay(bool bAllow)
		{
			return default(bool);
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x2B16A88", Offset = "0x2B16A88", VA = "0x2B16A88")]
		public static SNetListenSocket_t CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x2B16B24", Offset = "0x2B16B24", VA = "0x2B16B24")]
		public static SNetSocket_t CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x2B16BC0", Offset = "0x2B16BC0", VA = "0x2B16BC0")]
		public static SNetSocket_t CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x2B16C4C", Offset = "0x2B16C4C", VA = "0x2B16C4C")]
		public static bool DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x2B16CC0", Offset = "0x2B16CC0", VA = "0x2B16CC0")]
		public static bool DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x2B16D34", Offset = "0x2B16D34", VA = "0x2B16D34")]
		public static bool SendDataOnSocket(SNetSocket_t hSocket, byte[] pubData, uint cubData, bool bReliable)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x2B16DC0", Offset = "0x2B16DC0", VA = "0x2B16DC0")]
		public static bool IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x2B16E34", Offset = "0x2B16E34", VA = "0x2B16E34")]
		public static bool RetrieveDataFromSocket(SNetSocket_t hSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x2B16EC0", Offset = "0x2B16EC0", VA = "0x2B16EC0")]
		public static bool IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x2B16F3C", Offset = "0x2B16F3C", VA = "0x2B16F3C")]
		public static bool RetrieveData(SNetListenSocket_t hListenSocket, byte[] pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x2B16FD0", Offset = "0x2B16FD0", VA = "0x2B16FD0")]
		public static bool GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x2B17064", Offset = "0x2B17064", VA = "0x2B17064")]
		public static bool GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort)
		{
			return default(bool);
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x2B170E0", Offset = "0x2B170E0", VA = "0x2B170E0")]
		public static ESNetSocketConnectionType GetSocketConnectionType(SNetSocket_t hSocket)
		{
			return default(ESNetSocketConnectionType);
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x2B17144", Offset = "0x2B17144", VA = "0x2B17144")]
		public static int GetMaxPacketSize(SNetSocket_t hSocket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000155")]
	public static class SteamParentalSettings
	{
		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x2B171A8", Offset = "0x2B171A8", VA = "0x2B171A8")]
		public static bool BIsParentalLockEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x2B17204", Offset = "0x2B17204", VA = "0x2B17204")]
		public static bool BIsParentalLockLocked()
		{
			return default(bool);
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x2B17260", Offset = "0x2B17260", VA = "0x2B17260")]
		public static bool BIsAppBlocked(AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x2B172C4", Offset = "0x2B172C4", VA = "0x2B172C4")]
		public static bool BIsAppInBlockList(AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x2B17328", Offset = "0x2B17328", VA = "0x2B17328")]
		public static bool BIsFeatureBlocked(EParentalFeature eFeature)
		{
			return default(bool);
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x2B1738C", Offset = "0x2B1738C", VA = "0x2B1738C")]
		public static bool BIsFeatureInBlockList(EParentalFeature eFeature)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000156")]
	public static class SteamRemoteStorage
	{
		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x2B173F0", Offset = "0x2B173F0", VA = "0x2B173F0")]
		public static bool FileWrite(string pchFile, byte[] pvData, int cubData)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x2B17564", Offset = "0x2B17564", VA = "0x2B17564")]
		public static int FileRead(string pchFile, byte[] pvData, int cubDataToRead)
		{
			return default(int);
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x2B176D8", Offset = "0x2B176D8", VA = "0x2B176D8")]
		public static SteamAPICall_t FileWriteAsync(string pchFile, byte[] pvData, uint cubData)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x2B17880", Offset = "0x2B17880", VA = "0x2B17880")]
		public static SteamAPICall_t FileReadAsync(string pchFile, uint nOffset, uint cubToRead)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x2B17A28", Offset = "0x2B17A28", VA = "0x2B17A28")]
		public static bool FileReadAsyncComplete(SteamAPICall_t hReadCall, byte[] pvBuffer, uint cubToRead)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x2B17AA4", Offset = "0x2B17AA4", VA = "0x2B17AA4")]
		public static bool FileForget(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x2B17C08", Offset = "0x2B17C08", VA = "0x2B17C08")]
		public static bool FileDelete(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x2B17D6C", Offset = "0x2B17D6C", VA = "0x2B17D6C")]
		public static SteamAPICall_t FileShare(string pchFile)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x2B17F04", Offset = "0x2B17F04", VA = "0x2B17F04")]
		public static bool SetSyncPlatforms(string pchFile, ERemoteStoragePlatform eRemoteStoragePlatform)
		{
			return default(bool);
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x2B18070", Offset = "0x2B18070", VA = "0x2B18070")]
		public static UGCFileWriteStreamHandle_t FileWriteStreamOpen(string pchFile)
		{
			return default(UGCFileWriteStreamHandle_t);
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x2B181F8", Offset = "0x2B181F8", VA = "0x2B181F8")]
		public static bool FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, byte[] pvData, int cubData)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x2B18274", Offset = "0x2B18274", VA = "0x2B18274")]
		public static bool FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x2B182D8", Offset = "0x2B182D8", VA = "0x2B182D8")]
		public static bool FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x2B1833C", Offset = "0x2B1833C", VA = "0x2B1833C")]
		public static bool FileExists(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x2B184A0", Offset = "0x2B184A0", VA = "0x2B184A0")]
		public static bool FilePersisted(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x2B18604", Offset = "0x2B18604", VA = "0x2B18604")]
		public static int GetFileSize(string pchFile)
		{
			return default(int);
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x2B18768", Offset = "0x2B18768", VA = "0x2B18768")]
		public static long GetFileTimestamp(string pchFile)
		{
			return default(long);
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x2B188CC", Offset = "0x2B188CC", VA = "0x2B188CC")]
		public static ERemoteStoragePlatform GetSyncPlatforms(string pchFile)
		{
			return default(ERemoteStoragePlatform);
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x2B18A30", Offset = "0x2B18A30", VA = "0x2B18A30")]
		public static int GetFileCount()
		{
			return default(int);
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x2B18A8C", Offset = "0x2B18A8C", VA = "0x2B18A8C")]
		public static string GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
		{
			return null;
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x2B18B08", Offset = "0x2B18B08", VA = "0x2B18B08")]
		public static bool GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes)
		{
			return default(bool);
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x2B18B7C", Offset = "0x2B18B7C", VA = "0x2B18B7C")]
		public static bool IsCloudEnabledForAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x2B18BD8", Offset = "0x2B18BD8", VA = "0x2B18BD8")]
		public static bool IsCloudEnabledForApp()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x2B18C34", Offset = "0x2B18C34", VA = "0x2B18C34")]
		public static void SetCloudEnabledForApp(bool bEnabled)
		{
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x2B18C98", Offset = "0x2B18C98", VA = "0x2B18C98")]
		public static SteamAPICall_t UGCDownload(UGCHandle_t hContent, uint unPriority)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x2B18D64", Offset = "0x2B18D64", VA = "0x2B18D64")]
		public static bool GetUGCDownloadProgress(UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x2B18DE0", Offset = "0x2B18DE0", VA = "0x2B18DE0")]
		public static bool GetUGCDetails(UGCHandle_t hContent, out AppId_t pnAppID, out string ppchName, out int pnFileSizeInBytes, out CSteamID pSteamIDOwner)
		{
			return default(bool);
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x2B18EB0", Offset = "0x2B18EB0", VA = "0x2B18EB0")]
		public static int UGCRead(UGCHandle_t hContent, byte[] pvData, int cubDataToRead, uint cOffset, EUGCReadAction eAction)
		{
			return default(int);
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x2B18F44", Offset = "0x2B18F44", VA = "0x2B18F44")]
		public static int GetCachedUGCCount()
		{
			return default(int);
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x2B18FA0", Offset = "0x2B18FA0", VA = "0x2B18FA0")]
		public static UGCHandle_t GetCachedUGCHandle(int iCachedContent)
		{
			return default(UGCHandle_t);
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x2B1905C", Offset = "0x2B1905C", VA = "0x2B1905C")]
		public static SteamAPICall_t PublishWorkshopFile(string pchFile, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IList<string> pTags, EWorkshopFileType eWorkshopFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x2B194C4", Offset = "0x2B194C4", VA = "0x2B194C4")]
		public static PublishedFileUpdateHandle_t CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId)
		{
			return default(PublishedFileUpdateHandle_t);
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x2B19580", Offset = "0x2B19580", VA = "0x2B19580")]
		public static bool UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x2B196EC", Offset = "0x2B196EC", VA = "0x2B196EC")]
		public static bool UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, string pchPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x2B19858", Offset = "0x2B19858", VA = "0x2B19858")]
		public static bool UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x2B199C4", Offset = "0x2B199C4", VA = "0x2B199C4")]
		public static bool UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x2B19B30", Offset = "0x2B19B30", VA = "0x2B19B30")]
		public static bool UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x2B19BA4", Offset = "0x2B19BA4", VA = "0x2B19BA4")]
		public static bool UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x2B19C68", Offset = "0x2B19C68", VA = "0x2B19C68")]
		public static SteamAPICall_t CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x2B19D24", Offset = "0x2B19D24", VA = "0x2B19D24")]
		public static SteamAPICall_t GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x2B19DF0", Offset = "0x2B19DF0", VA = "0x2B19DF0")]
		public static SteamAPICall_t DeletePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x2B19EAC", Offset = "0x2B19EAC", VA = "0x2B19EAC")]
		public static SteamAPICall_t EnumerateUserPublishedFiles(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x2B19F68", Offset = "0x2B19F68", VA = "0x2B19F68")]
		public static SteamAPICall_t SubscribePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x2B1A024", Offset = "0x2B1A024", VA = "0x2B1A024")]
		public static SteamAPICall_t EnumerateUserSubscribedFiles(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x2B1A0E0", Offset = "0x2B1A0E0", VA = "0x2B1A0E0")]
		public static SteamAPICall_t UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x2B1A19C", Offset = "0x2B1A19C", VA = "0x2B1A19C")]
		public static bool UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, string pchChangeDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x2B1A308", Offset = "0x2B1A308", VA = "0x2B1A308")]
		public static SteamAPICall_t GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x2B1A3C4", Offset = "0x2B1A3C4", VA = "0x2B1A3C4")]
		public static SteamAPICall_t UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0x2B1A490", Offset = "0x2B1A490", VA = "0x2B1A490")]
		public static SteamAPICall_t GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0x2B1A54C", Offset = "0x2B1A54C", VA = "0x2B1A54C")]
		public static SteamAPICall_t EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint unStartIndex, IList<string> pRequiredTags, IList<string> pExcludedTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0x2B1A684", Offset = "0x2B1A684", VA = "0x2B1A684")]
		public static SteamAPICall_t PublishVideo(EWorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IList<string> pTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0x2B1ABB0", Offset = "0x2B1ABB0", VA = "0x2B1ABB0")]
		public static SteamAPICall_t SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0x2B1AC7C", Offset = "0x2B1AC7C", VA = "0x2B1AC7C")]
		public static SteamAPICall_t EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000805")]
		[Address(RVA = "0x2B1AD48", Offset = "0x2B1AD48", VA = "0x2B1AD48")]
		public static SteamAPICall_t EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, IList<string> pTags, IList<string> pUserTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0x2B1AE98", Offset = "0x2B1AE98", VA = "0x2B1AE98")]
		public static SteamAPICall_t UGCDownloadToLocation(UGCHandle_t hContent, string pchLocation, uint unPriority)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000157")]
	public static class SteamScreenshots
	{
		[Token(Token = "0x6000807")]
		[Address(RVA = "0x2B1B040", Offset = "0x2B1B040", VA = "0x2B1B040")]
		public static ScreenshotHandle WriteScreenshot(byte[] pubRGB, uint cubRGB, int nWidth, int nHeight)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x6000808")]
		[Address(RVA = "0x2B1B12C", Offset = "0x2B1B12C", VA = "0x2B1B12C")]
		public static ScreenshotHandle AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0x2B1B3A8", Offset = "0x2B1B3A8", VA = "0x2B1B3A8")]
		public static void TriggerScreenshot()
		{
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0x2B1B404", Offset = "0x2B1B404", VA = "0x2B1B404")]
		public static void HookScreenshots(bool bHook)
		{
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0x2B1B468", Offset = "0x2B1B468", VA = "0x2B1B468")]
		public static bool SetLocation(ScreenshotHandle hScreenshot, string pchLocation)
		{
			return default(bool);
		}

		[Token(Token = "0x600080C")]
		[Address(RVA = "0x2B1B5D4", Offset = "0x2B1B5D4", VA = "0x2B1B5D4")]
		public static bool TagUser(ScreenshotHandle hScreenshot, CSteamID steamID)
		{
			return default(bool);
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0x2B1B648", Offset = "0x2B1B648", VA = "0x2B1B648")]
		public static bool TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID)
		{
			return default(bool);
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0x2B1B6BC", Offset = "0x2B1B6BC", VA = "0x2B1B6BC")]
		public static bool IsScreenshotsHooked()
		{
			return default(bool);
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0x2B1B718", Offset = "0x2B1B718", VA = "0x2B1B718")]
		public static ScreenshotHandle AddVRScreenshotToLibrary(EVRScreenshotType eType, string pchFilename, string pchVRFilename)
		{
			return default(ScreenshotHandle);
		}
	}
	[Token(Token = "0x2000158")]
	public static class SteamUGC
	{
		[Token(Token = "0x6000810")]
		[Address(RVA = "0x2B1B98C", Offset = "0x2B1B98C", VA = "0x2B1B98C")]
		public static UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0x2B1BA98", Offset = "0x2B1BA98", VA = "0x2B1BA98")]
		public static UGCQueryHandle_t CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0x2B1BB80", Offset = "0x2B1BB80", VA = "0x2B1BB80")]
		public static UGCQueryHandle_t CreateQueryUGCDetailsRequest(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0x2B1BC48", Offset = "0x2B1BC48", VA = "0x2B1BC48")]
		public static SteamAPICall_t SendQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0x2B1BD04", Offset = "0x2B1BD04", VA = "0x2B1BD04")]
		public static bool GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails)
		{
			return default(bool);
		}

		[Token(Token = "0x6000815")]
		[Address(RVA = "0x2B1BD80", Offset = "0x2B1BD80", VA = "0x2B1BD80")]
		public static bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, out string pchURL, uint cchURLSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000816")]
		[Address(RVA = "0x2B1BEBC", Offset = "0x2B1BEBC", VA = "0x2B1BEBC")]
		public static bool GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, out string pchMetadata, uint cchMetadatasize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0x2B1BFF8", Offset = "0x2B1BFF8", VA = "0x2B1BFF8")]
		public static bool GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(bool);
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0x2B1C084", Offset = "0x2B1C084", VA = "0x2B1C084")]
		public static bool GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out ulong pStatValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0x2B1C110", Offset = "0x2B1C110", VA = "0x2B1C110")]
		public static uint GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0x2B1C184", Offset = "0x2B1C184", VA = "0x2B1C184")]
		public static bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, out string pchURLOrVideoID, uint cchURLSize, out string pchOriginalFileName, uint cchOriginalFileNameSize, out EItemPreviewType pPreviewType)
		{
			return default(bool);
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0x2B1C34C", Offset = "0x2B1C34C", VA = "0x2B1C34C")]
		public static uint GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0x2B1C3C0", Offset = "0x2B1C3C0", VA = "0x2B1C3C0")]
		public static bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, out string pchKey, uint cchKeySize, out string pchValue, uint cchValueSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0x2B1C584", Offset = "0x2B1C584", VA = "0x2B1C584")]
		public static bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(bool);
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0x2B1C5E8", Offset = "0x2B1C5E8", VA = "0x2B1C5E8")]
		public static bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0x2B1C754", Offset = "0x2B1C754", VA = "0x2B1C754")]
		public static bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0x2B1C8C0", Offset = "0x2B1C8C0", VA = "0x2B1C8C0")]
		public static bool SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0x2B1C934", Offset = "0x2B1C934", VA = "0x2B1C934")]
		public static bool SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0x2B1C9A8", Offset = "0x2B1C9A8", VA = "0x2B1C9A8")]
		public static bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0x2B1CA1C", Offset = "0x2B1CA1C", VA = "0x2B1CA1C")]
		public static bool SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
		{
			return default(bool);
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0x2B1CA90", Offset = "0x2B1CA90", VA = "0x2B1CA90")]
		public static bool SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
		{
			return default(bool);
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0x2B1CB04", Offset = "0x2B1CB04", VA = "0x2B1CB04")]
		public static bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
		{
			return default(bool);
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0x2B1CB78", Offset = "0x2B1CB78", VA = "0x2B1CB78")]
		public static bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0x2B1CBEC", Offset = "0x2B1CBEC", VA = "0x2B1CBEC")]
		public static bool SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0x2B1CC60", Offset = "0x2B1CC60", VA = "0x2B1CC60")]
		public static bool SetLanguage(UGCQueryHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0x2B1CDCC", Offset = "0x2B1CDCC", VA = "0x2B1CDCC")]
		public static bool SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0x2B1CE40", Offset = "0x2B1CE40", VA = "0x2B1CE40")]
		public static bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName)
		{
			return default(bool);
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0x2B1CFAC", Offset = "0x2B1CFAC", VA = "0x2B1CFAC")]
		public static bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
		{
			return default(bool);
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0x2B1D020", Offset = "0x2B1D020", VA = "0x2B1D020")]
		public static bool SetSearchText(UGCQueryHandle_t handle, string pSearchText)
		{
			return default(bool);
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0x2B1D18C", Offset = "0x2B1D18C", VA = "0x2B1D18C")]
		public static bool SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0x2B1D200", Offset = "0x2B1D200", VA = "0x2B1D200")]
		public static bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, string pKey, string pValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0x2B1D44C", Offset = "0x2B1D44C", VA = "0x2B1D44C")]
		public static SteamAPICall_t RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0x2B1D518", Offset = "0x2B1D518", VA = "0x2B1D518")]
		public static SteamAPICall_t CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0x2B1D5E4", Offset = "0x2B1D5E4", VA = "0x2B1D5E4")]
		public static UGCUpdateHandle_t StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0x2B1D6B0", Offset = "0x2B1D6B0", VA = "0x2B1D6B0")]
		public static bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0x2B1D81C", Offset = "0x2B1D81C", VA = "0x2B1D81C")]
		public static bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0x2B1D988", Offset = "0x2B1D988", VA = "0x2B1D988")]
		public static bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0x2B1DAF4", Offset = "0x2B1DAF4", VA = "0x2B1DAF4")]
		public static bool SetItemMetadata(UGCUpdateHandle_t handle, string pchMetaData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x2B1DC60", Offset = "0x2B1DC60", VA = "0x2B1DC60")]
		public static bool SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0x2B1DCD4", Offset = "0x2B1DCD4", VA = "0x2B1DCD4")]
		public static bool SetItemTags(UGCUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x2B1DD98", Offset = "0x2B1DD98", VA = "0x2B1DD98")]
		public static bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0x2B1DF04", Offset = "0x2B1DF04", VA = "0x2B1DF04")]
		public static bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0x2B1E070", Offset = "0x2B1E070", VA = "0x2B1E070")]
		public static bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0x2B1E1DC", Offset = "0x2B1E1DC", VA = "0x2B1E1DC")]
		public static bool AddItemKeyValueTag(UGCUpdateHandle_t handle, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0x2B1E428", Offset = "0x2B1E428", VA = "0x2B1E428")]
		public static bool AddItemPreviewFile(UGCUpdateHandle_t handle, string pszPreviewFile, EItemPreviewType type)
		{
			return default(bool);
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0x2B1E59C", Offset = "0x2B1E59C", VA = "0x2B1E59C")]
		public static bool AddItemPreviewVideo(UGCUpdateHandle_t handle, string pszVideoID)
		{
			return default(bool);
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0x2B1E708", Offset = "0x2B1E708", VA = "0x2B1E708")]
		public static bool UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint index, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0x2B1E87C", Offset = "0x2B1E87C", VA = "0x2B1E87C")]
		public static bool UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint index, string pszVideoID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0x2B1E9F0", Offset = "0x2B1E9F0", VA = "0x2B1E9F0")]
		public static bool RemoveItemPreview(UGCUpdateHandle_t handle, uint index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x2B1EA64", Offset = "0x2B1EA64", VA = "0x2B1EA64")]
		public static SteamAPICall_t SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x2B1EC04", Offset = "0x2B1EC04", VA = "0x2B1EC04")]
		public static EItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal)
		{
			return default(EItemUpdateStatus);
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x2B1EC80", Offset = "0x2B1EC80", VA = "0x2B1EC80")]
		public static SteamAPICall_t SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0x2B1ED4C", Offset = "0x2B1ED4C", VA = "0x2B1ED4C")]
		public static SteamAPICall_t GetUserItemVote(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0x2B1EE08", Offset = "0x2B1EE08", VA = "0x2B1EE08")]
		public static SteamAPICall_t AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0x2B1EED4", Offset = "0x2B1EED4", VA = "0x2B1EED4")]
		public static SteamAPICall_t RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0x2B1EFA0", Offset = "0x2B1EFA0", VA = "0x2B1EFA0")]
		public static SteamAPICall_t SubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x2B1F05C", Offset = "0x2B1F05C", VA = "0x2B1F05C")]
		public static SteamAPICall_t UnsubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x2B1F118", Offset = "0x2B1F118", VA = "0x2B1F118")]
		public static uint GetNumSubscribedItems()
		{
			return default(uint);
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0x2B1F174", Offset = "0x2B1F174", VA = "0x2B1F174")]
		public static uint GetSubscribedItems(PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(uint);
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0x2B1F1E8", Offset = "0x2B1F1E8", VA = "0x2B1F1E8")]
		public static uint GetItemState(PublishedFileId_t nPublishedFileID)
		{
			return default(uint);
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0x2B1F24C", Offset = "0x2B1F24C", VA = "0x2B1F24C")]
		public static bool GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, out string pchFolder, uint cchFolderSize, out uint punTimeStamp)
		{
			return default(bool);
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0x2B1F390", Offset = "0x2B1F390", VA = "0x2B1F390")]
		public static bool GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0x2B1F40C", Offset = "0x2B1F40C", VA = "0x2B1F40C")]
		public static bool DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
		{
			return default(bool);
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0x2B1F480", Offset = "0x2B1F480", VA = "0x2B1F480")]
		public static bool BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, string pszFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0x2B1F5EC", Offset = "0x2B1F5EC", VA = "0x2B1F5EC")]
		public static void SuspendDownloads(bool bSuspend)
		{
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0x2B1F650", Offset = "0x2B1F650", VA = "0x2B1F650")]
		public static SteamAPICall_t StartPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x2B1F71C", Offset = "0x2B1F71C", VA = "0x2B1F71C")]
		public static SteamAPICall_t StopPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0x2B1F7E8", Offset = "0x2B1F7E8", VA = "0x2B1F7E8")]
		public static SteamAPICall_t StopPlaytimeTrackingForAllItems()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0x2B1F89C", Offset = "0x2B1F89C", VA = "0x2B1F89C")]
		public static SteamAPICall_t AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0x2B1F968", Offset = "0x2B1F968", VA = "0x2B1F968")]
		public static SteamAPICall_t RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0x2B1FA34", Offset = "0x2B1FA34", VA = "0x2B1FA34")]
		public static SteamAPICall_t AddAppDependency(PublishedFileId_t nPublishedFileID, AppId_t nAppID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0x2B1FB00", Offset = "0x2B1FB00", VA = "0x2B1FB00")]
		public static SteamAPICall_t RemoveAppDependency(PublishedFileId_t nPublishedFileID, AppId_t nAppID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0x2B1FBCC", Offset = "0x2B1FBCC", VA = "0x2B1FBCC")]
		public static SteamAPICall_t GetAppDependencies(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0x2B1FC88", Offset = "0x2B1FC88", VA = "0x2B1FC88")]
		public static SteamAPICall_t DeleteItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000159")]
	public static class SteamUnifiedMessages
	{
		[Token(Token = "0x600085A")]
		[Address(RVA = "0x2B1FD44", Offset = "0x2B1FD44", VA = "0x2B1FD44")]
		public static ClientUnifiedMessageHandle SendMethod(string pchServiceMethod, byte[] pRequestBuffer, uint unRequestBufferSize, ulong unContext)
		{
			return default(ClientUnifiedMessageHandle);
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0x2B1FEFC", Offset = "0x2B1FEFC", VA = "0x2B1FEFC")]
		public static bool GetMethodResponseInfo(ClientUnifiedMessageHandle hHandle, out uint punResponseSize, out EResult peResult)
		{
			return default(bool);
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0x2B1FF78", Offset = "0x2B1FF78", VA = "0x2B1FF78")]
		public static bool GetMethodResponseData(ClientUnifiedMessageHandle hHandle, byte[] pResponseBuffer, uint unResponseBufferSize, bool bAutoRelease)
		{
			return default(bool);
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0x2B20004", Offset = "0x2B20004", VA = "0x2B20004")]
		public static bool ReleaseMethod(ClientUnifiedMessageHandle hHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0x2B20068", Offset = "0x2B20068", VA = "0x2B20068")]
		public static bool SendNotification(string pchServiceNotification, byte[] pNotificationBuffer, uint unNotificationBufferSize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200015A")]
	public static class SteamUser
	{
		[Token(Token = "0x600085F")]
		[Address(RVA = "0x2B201DC", Offset = "0x2B201DC", VA = "0x2B201DC")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0x2B20248", Offset = "0x2B20248", VA = "0x2B20248")]
		public static bool BLoggedOn()
		{
			return default(bool);
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0x2B202A4", Offset = "0x2B202A4", VA = "0x2B202A4")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0x2B20358", Offset = "0x2B20358", VA = "0x2B20358")]
		public static int InitiateGameConnection(byte[] pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure)
		{
			return default(int);
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0x2B203FC", Offset = "0x2B203FC", VA = "0x2B203FC")]
		public static void TerminateGameConnection(uint unIPServer, ushort usPortServer)
		{
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0x2B20470", Offset = "0x2B20470", VA = "0x2B20470")]
		public static void TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, string pchExtraInfo = "")
		{
		}

		[Token(Token = "0x6000865")]
		[Address(RVA = "0x2B205D8", Offset = "0x2B205D8", VA = "0x2B205D8")]
		public static bool GetUserDataFolder(out string pchBuffer, int cubBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0x2B206FC", Offset = "0x2B206FC", VA = "0x2B206FC")]
		public static void StartVoiceRecording()
		{
		}

		[Token(Token = "0x6000867")]
		[Address(RVA = "0x2B20758", Offset = "0x2B20758", VA = "0x2B20758")]
		public static void StopVoiceRecording()
		{
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0x2B207B4", Offset = "0x2B207B4", VA = "0x2B207B4")]
		public static EVoiceResult GetAvailableVoice(out uint pcbCompressed)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0x2B20844", Offset = "0x2B20844", VA = "0x2B20844")]
		public static EVoiceResult GetVoice(bool bWantCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0x2B20914", Offset = "0x2B20914", VA = "0x2B20914")]
		public static EVoiceResult DecompressVoice(byte[] pCompressed, uint cbCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x600086B")]
		[Address(RVA = "0x2B209B8", Offset = "0x2B209B8", VA = "0x2B209B8")]
		public static uint GetVoiceOptimalSampleRate()
		{
			return default(uint);
		}

		[Token(Token = "0x600086C")]
		[Address(RVA = "0x2B20A14", Offset = "0x2B20A14", VA = "0x2B20A14")]
		public static HAuthTicket GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0x2B20AF0", Offset = "0x2B20AF0", VA = "0x2B20AF0")]
		public static EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID)
		{
			return default(EBeginAuthSessionResult);
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0x2B20B6C", Offset = "0x2B20B6C", VA = "0x2B20B6C")]
		public static void EndAuthSession(CSteamID steamID)
		{
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0x2B20BD0", Offset = "0x2B20BD0", VA = "0x2B20BD0")]
		public static void CancelAuthTicket(HAuthTicket hAuthTicket)
		{
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0x2B20C34", Offset = "0x2B20C34", VA = "0x2B20C34")]
		public static EUserHasLicenseForAppResult UserHasLicenseForApp(CSteamID steamID, AppId_t appID)
		{
			return default(EUserHasLicenseForAppResult);
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0x2B20CA8", Offset = "0x2B20CA8", VA = "0x2B20CA8")]
		public static bool BIsBehindNAT()
		{
			return default(bool);
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0x2B20D04", Offset = "0x2B20D04", VA = "0x2B20D04")]
		public static void AdvertiseGame(CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer)
		{
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0x2B20D80", Offset = "0x2B20D80", VA = "0x2B20D80")]
		public static SteamAPICall_t RequestEncryptedAppTicket(byte[] pDataToInclude, int cbDataToInclude)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0x2B20E4C", Offset = "0x2B20E4C", VA = "0x2B20E4C")]
		public static bool GetEncryptedAppTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0x2B20EC8", Offset = "0x2B20EC8", VA = "0x2B20EC8")]
		public static int GetGameBadgeLevel(int nSeries, bool bFoil)
		{
			return default(int);
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0x2B20F3C", Offset = "0x2B20F3C", VA = "0x2B20F3C")]
		public static int GetPlayerSteamLevel()
		{
			return default(int);
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0x2B20F98", Offset = "0x2B20F98", VA = "0x2B20F98")]
		public static SteamAPICall_t RequestStoreAuthURL(string pchRedirectURL)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0x2B21130", Offset = "0x2B21130", VA = "0x2B21130")]
		public static bool BIsPhoneVerified()
		{
			return default(bool);
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0x2B2118C", Offset = "0x2B2118C", VA = "0x2B2118C")]
		public static bool BIsTwoFactorEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0x2B211E8", Offset = "0x2B211E8", VA = "0x2B211E8")]
		public static bool BIsPhoneIdentifying()
		{
			return default(bool);
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0x2B21244", Offset = "0x2B21244", VA = "0x2B21244")]
		public static bool BIsPhoneRequiringVerification()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200015B")]
	public static class SteamUserStats
	{
		[Token(Token = "0x600087C")]
		[Address(RVA = "0x2B212A0", Offset = "0x2B212A0", VA = "0x2B212A0")]
		public static bool RequestCurrentStats()
		{
			return default(bool);
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0x2B212FC", Offset = "0x2B212FC", VA = "0x2B212FC")]
		public static bool GetStat(string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0x2B21468", Offset = "0x2B21468", VA = "0x2B21468")]
		public static bool GetStat(string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0x2B215D4", Offset = "0x2B215D4", VA = "0x2B215D4")]
		public static bool SetStat(string pchName, int nData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0x2B21740", Offset = "0x2B21740", VA = "0x2B21740")]
		public static bool SetStat(string pchName, float fData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0x2B218B4", Offset = "0x2B218B4", VA = "0x2B218B4")]
		public static bool UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0x2B21A30", Offset = "0x2B21A30", VA = "0x2B21A30")]
		public static bool GetAchievement(string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0x2B21B9C", Offset = "0x2B21B9C", VA = "0x2B21B9C")]
		public static bool SetAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0x2B21D00", Offset = "0x2B21D00", VA = "0x2B21D00")]
		public static bool ClearAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0x2B21E64", Offset = "0x2B21E64", VA = "0x2B21E64")]
		public static bool GetAchievementAndUnlockTime(string pchName, out bool pbAchieved, out uint punUnlockTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0x2B21FD8", Offset = "0x2B21FD8", VA = "0x2B21FD8")]
		public static bool StoreStats()
		{
			return default(bool);
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0x2B22034", Offset = "0x2B22034", VA = "0x2B22034")]
		public static int GetAchievementIcon(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0x2B22198", Offset = "0x2B22198", VA = "0x2B22198")]
		public static string GetAchievementDisplayAttribute(string pchName, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0x2B223D4", Offset = "0x2B223D4", VA = "0x2B223D4")]
		public static bool IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
		{
			return default(bool);
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0x2B22548", Offset = "0x2B22548", VA = "0x2B22548")]
		public static uint GetNumAchievements()
		{
			return default(uint);
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0x2B225A4", Offset = "0x2B225A4", VA = "0x2B225A4")]
		public static string GetAchievementName(uint iAchievement)
		{
			return null;
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0x2B22610", Offset = "0x2B22610", VA = "0x2B22610")]
		public static SteamAPICall_t RequestUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0x2B226CC", Offset = "0x2B226CC", VA = "0x2B226CC")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0x2B22840", Offset = "0x2B22840", VA = "0x2B22840")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0x2B229B4", Offset = "0x2B229B4", VA = "0x2B229B4")]
		public static bool GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0x2B22B28", Offset = "0x2B22B28", VA = "0x2B22B28")]
		public static bool GetUserAchievementAndUnlockTime(CSteamID steamIDUser, string pchName, out bool pbAchieved, out uint punUnlockTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6000891")]
		[Address(RVA = "0x2B22CAC", Offset = "0x2B22CAC", VA = "0x2B22CAC")]
		public static bool ResetAllStats(bool bAchievementsToo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0x2B22D10", Offset = "0x2B22D10", VA = "0x2B22D10")]
		public static SteamAPICall_t FindOrCreateLeaderboard(string pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0x2B22EB8", Offset = "0x2B22EB8", VA = "0x2B22EB8")]
		public static SteamAPICall_t FindLeaderboard(string pchLeaderboardName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0x2B23050", Offset = "0x2B23050", VA = "0x2B23050")]
		public static string GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard)
		{
			return null;
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0x2B230BC", Offset = "0x2B230BC", VA = "0x2B230BC")]
		public static int GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(int);
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0x2B23120", Offset = "0x2B23120", VA = "0x2B23120")]
		public static ELeaderboardSortMethod GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(ELeaderboardSortMethod);
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x2B23184", Offset = "0x2B23184", VA = "0x2B23184")]
		public static ELeaderboardDisplayType GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(ELeaderboardDisplayType);
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x2B231E8", Offset = "0x2B231E8", VA = "0x2B231E8")]
		public static SteamAPICall_t DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x2B232CC", Offset = "0x2B232CC", VA = "0x2B232CC")]
		public static SteamAPICall_t DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, CSteamID[] prgUsers, int cUsers)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0x2B233A0", Offset = "0x2B233A0", VA = "0x2B233A0")]
		public static bool GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, out LeaderboardEntry_t pLeaderboardEntry, int[] pDetails, int cDetailsMax)
		{
			return default(bool);
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x2B23434", Offset = "0x2B23434", VA = "0x2B23434")]
		public static SteamAPICall_t UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0x2B23520", Offset = "0x2B23520", VA = "0x2B23520")]
		public static SteamAPICall_t AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x2B235EC", Offset = "0x2B235EC", VA = "0x2B235EC")]
		public static SteamAPICall_t GetNumberOfCurrentPlayers()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0x2B236A0", Offset = "0x2B236A0", VA = "0x2B236A0")]
		public static SteamAPICall_t RequestGlobalAchievementPercentages()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x2B23754", Offset = "0x2B23754", VA = "0x2B23754")]
		public static int GetMostAchievedAchievementInfo(out string pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved)
		{
			return default(int);
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x2B23898", Offset = "0x2B23898", VA = "0x2B23898")]
		public static int GetNextMostAchievedAchievementInfo(int iIteratorPrevious, out string pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved)
		{
			return default(int);
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x2B239E4", Offset = "0x2B239E4", VA = "0x2B239E4")]
		public static bool GetAchievementAchievedPercent(string pchName, out float pflPercent)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x2B23B50", Offset = "0x2B23B50", VA = "0x2B23B50")]
		public static SteamAPICall_t RequestGlobalStats(int nHistoryDays)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x2B23C0C", Offset = "0x2B23C0C", VA = "0x2B23C0C")]
		public static bool GetGlobalStat(string pchStatName, out long pData)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x2B23D78", Offset = "0x2B23D78", VA = "0x2B23D78")]
		public static bool GetGlobalStat(string pchStatName, out double pData)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x2B23EE4", Offset = "0x2B23EE4", VA = "0x2B23EE4")]
		public static int GetGlobalStatHistory(string pchStatName, long[] pData, uint cubData)
		{
			return default(int);
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x2B24058", Offset = "0x2B24058", VA = "0x2B24058")]
		public static int GetGlobalStatHistory(string pchStatName, double[] pData, uint cubData)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200015C")]
	public static class SteamUtils
	{
		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x2B241CC", Offset = "0x2B241CC", VA = "0x2B241CC")]
		public static uint GetSecondsSinceAppActive()
		{
			return default(uint);
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x2B24228", Offset = "0x2B24228", VA = "0x2B24228")]
		public static uint GetSecondsSinceComputerActive()
		{
			return default(uint);
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x2B24284", Offset = "0x2B24284", VA = "0x2B24284")]
		public static EUniverse GetConnectedUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x2B242E0", Offset = "0x2B242E0", VA = "0x2B242E0")]
		public static uint GetServerRealTime()
		{
			return default(uint);
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x2B2433C", Offset = "0x2B2433C", VA = "0x2B2433C")]
		public static string GetIPCountry()
		{
			return null;
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x2B243A0", Offset = "0x2B243A0", VA = "0x2B243A0")]
		public static bool GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x2B2441C", Offset = "0x2B2441C", VA = "0x2B2441C")]
		public static bool GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x2B24498", Offset = "0x2B24498", VA = "0x2B24498")]
		public static bool GetCSERIPPort(out uint unIP, out ushort usPort)
		{
			return default(bool);
		}

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x2B2450C", Offset = "0x2B2450C", VA = "0x2B2450C")]
		public static byte GetCurrentBatteryPower()
		{
			return default(byte);
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x2B24568", Offset = "0x2B24568", VA = "0x2B24568")]
		public static AppId_t GetAppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x2B24624", Offset = "0x2B24624", VA = "0x2B24624")]
		public static void SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
		{
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x2B24688", Offset = "0x2B24688", VA = "0x2B24688")]
		public static bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x2B246FC", Offset = "0x2B246FC", VA = "0x2B246FC")]
		public static ESteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
		{
			return default(ESteamAPICallFailure);
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x2B24760", Offset = "0x2B24760", VA = "0x2B24760")]
		public static bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x2B247F4", Offset = "0x2B247F4", VA = "0x2B247F4")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x2B24850", Offset = "0x2B24850", VA = "0x2B24850")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x2B248B4", Offset = "0x2B248B4", VA = "0x2B248B4")]
		public static bool IsOverlayEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x2B24910", Offset = "0x2B24910", VA = "0x2B24910")]
		public static bool BOverlayNeedsPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x2B2496C", Offset = "0x2B2496C", VA = "0x2B2496C")]
		public static SteamAPICall_t CheckFileSignature(string szFileName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x2B24B04", Offset = "0x2B24B04", VA = "0x2B24B04")]
		public static bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
		{
			return default(bool);
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x2B24D68", Offset = "0x2B24D68", VA = "0x2B24D68")]
		public static uint GetEnteredGamepadTextLength()
		{
			return default(uint);
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x2B24DC4", Offset = "0x2B24DC4", VA = "0x2B24DC4")]
		public static bool GetEnteredGamepadTextInput(out string pchText, uint cchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x2B24EE8", Offset = "0x2B24EE8", VA = "0x2B24EE8")]
		public static string GetSteamUILanguage()
		{
			return null;
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x2B24F4C", Offset = "0x2B24F4C", VA = "0x2B24F4C")]
		public static bool IsSteamRunningInVR()
		{
			return default(bool);
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x2B24FA8", Offset = "0x2B24FA8", VA = "0x2B24FA8")]
		public static void SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
		{
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x2B2501C", Offset = "0x2B2501C", VA = "0x2B2501C")]
		public static bool IsSteamInBigPictureMode()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x2B25078", Offset = "0x2B25078", VA = "0x2B25078")]
		public static void StartVRDashboard()
		{
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x2B250D4", Offset = "0x2B250D4", VA = "0x2B250D4")]
		public static bool IsVRHeadsetStreamingEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x2B25130", Offset = "0x2B25130", VA = "0x2B25130")]
		public static void SetVRHeadsetStreamingEnabled(bool bEnabled)
		{
		}
	}
	[Token(Token = "0x200015D")]
	public static class SteamVideo
	{
		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x2B25194", Offset = "0x2B25194", VA = "0x2B25194")]
		public static void GetVideoURL(AppId_t unVideoAppID)
		{
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x2B251F8", Offset = "0x2B251F8", VA = "0x2B251F8")]
		public static bool IsBroadcasting(out int pnNumViewers)
		{
			return default(bool);
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x2B2525C", Offset = "0x2B2525C", VA = "0x2B2525C")]
		public static void GetOPFSettings(AppId_t unVideoAppID)
		{
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x2B252C0", Offset = "0x2B252C0", VA = "0x2B252C0")]
		public static bool GetOPFStringForApp(AppId_t unVideoAppID, out string pchBuffer, ref int pnBufferSize)
		{
			return default(bool);
		}
	}
	[Serializable]
	[StructLayout(0)]
	[Token(Token = "0x200015E")]
	public class gameserveritem_t
	{
		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public servernetadr_t m_NetAdr;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nPing;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool m_bHadSuccessfulResponse;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool m_bDoNotRefresh;

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] m_szGameDir;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] m_szMap;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] m_szGameDescription;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_nAppID;

		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int m_nPlayers;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int m_nMaxPlayers;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int m_nBotPlayers;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool m_bPassword;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool m_bSecure;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public uint m_ulTimeLastPlayed;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int m_nServerVersion;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private byte[] m_szServerName;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private byte[] m_szGameTags;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public CSteamID m_steamID;

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x2B25B10", Offset = "0x2B25B10", VA = "0x2B25B10")]
		public string GetGameDir()
		{
			return null;
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x2B25B9C", Offset = "0x2B25B9C", VA = "0x2B25B9C")]
		public void SetGameDir(string dir)
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x2B25C38", Offset = "0x2B25C38", VA = "0x2B25C38")]
		public string GetMap()
		{
			return null;
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x2B25CC4", Offset = "0x2B25CC4", VA = "0x2B25CC4")]
		public void SetMap(string map)
		{
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x2B25D60", Offset = "0x2B25D60", VA = "0x2B25D60")]
		public string GetGameDescription()
		{
			return null;
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x2B25DEC", Offset = "0x2B25DEC", VA = "0x2B25DEC")]
		public void SetGameDescription(string desc)
		{
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x2B25E88", Offset = "0x2B25E88", VA = "0x2B25E88")]
		public string GetServerName()
		{
			return null;
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x2B25F5C", Offset = "0x2B25F5C", VA = "0x2B25F5C")]
		public void SetServerName(string name)
		{
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x2B25FF8", Offset = "0x2B25FF8", VA = "0x2B25FF8")]
		public string GetGameTags()
		{
			return null;
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x2B26084", Offset = "0x2B26084", VA = "0x2B26084")]
		public void SetGameTags(string tags)
		{
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x2B26120", Offset = "0x2B26120", VA = "0x2B26120")]
		public gameserveritem_t()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200015F")]
	public struct servernetadr_t
	{
		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ushort m_usConnectionPort;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		private ushort m_usQueryPort;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private uint m_unIP;

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x2B26128", Offset = "0x2B26128", VA = "0x2B26128")]
		public void Init(uint ip, ushort usQueryPort, ushort usConnectionPort)
		{
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x2B26138", Offset = "0x2B26138", VA = "0x2B26138")]
		public ushort GetQueryPort()
		{
			return default(ushort);
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x2B26140", Offset = "0x2B26140", VA = "0x2B26140")]
		public void SetQueryPort(ushort usPort)
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x2B26148", Offset = "0x2B26148", VA = "0x2B26148")]
		public ushort GetConnectionPort()
		{
			return default(ushort);
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x2B26150", Offset = "0x2B26150", VA = "0x2B26150")]
		public void SetConnectionPort(ushort usPort)
		{
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x2B26158", Offset = "0x2B26158", VA = "0x2B26158")]
		public uint GetIP()
		{
			return default(uint);
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x2B26160", Offset = "0x2B26160", VA = "0x2B26160")]
		public void SetIP(uint unIP)
		{
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x2B25F4C", Offset = "0x2B25F4C", VA = "0x2B25F4C")]
		public string GetConnectionAddressString()
		{
			return null;
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x2B26398", Offset = "0x2B26398", VA = "0x2B26398")]
		public string GetQueryAddressString()
		{
			return null;
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x2B26168", Offset = "0x2B26168", VA = "0x2B26168")]
		public static string ToString(uint unIP, ushort usPort)
		{
			return null;
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x2B263A8", Offset = "0x2B263A8", VA = "0x2B263A8")]
		public static bool operator <(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x2B263DC", Offset = "0x2B263DC", VA = "0x2B263DC")]
		public static bool operator >(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x2B26410", Offset = "0x2B26410", VA = "0x2B26410", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x2B264EC", Offset = "0x2B264EC", VA = "0x2B264EC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x2B264B8", Offset = "0x2B264B8", VA = "0x2B264B8")]
		public static bool operator ==(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x2B26544", Offset = "0x2B26544", VA = "0x2B26544")]
		public static bool operator !=(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x2B26578", Offset = "0x2B26578", VA = "0x2B26578")]
		public bool Equals(servernetadr_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x2B265AC", Offset = "0x2B265AC", VA = "0x2B265AC")]
		public int CompareTo(servernetadr_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000160")]
	public struct HSteamPipe : IEquatable<HSteamPipe>, IComparable<HSteamPipe>
	{
		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HSteamPipe;

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x23EAD74", Offset = "0x23EAD74", VA = "0x23EAD74")]
		public HSteamPipe(int value)
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x23EAD7C", Offset = "0x23EAD7C", VA = "0x23EAD7C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x23EAD84", Offset = "0x23EAD84", VA = "0x23EAD84", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x23EAE0C", Offset = "0x23EAE0C", VA = "0x23EAE0C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x23E86CC", Offset = "0x23E86CC", VA = "0x23E86CC")]
		public static bool operator ==(HSteamPipe x, HSteamPipe y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x23EAE14", Offset = "0x23EAE14", VA = "0x23EAE14")]
		public static bool operator !=(HSteamPipe x, HSteamPipe y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x23E86C4", Offset = "0x23E86C4", VA = "0x23E86C4")]
		public static explicit operator HSteamPipe(int value)
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x23EAE20", Offset = "0x23EAE20", VA = "0x23EAE20")]
		public static explicit operator int(HSteamPipe that)
		{
			return default(int);
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x23EAE24", Offset = "0x23EAE24", VA = "0x23EAE24", Slot = "4")]
		public bool Equals(HSteamPipe other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x23EAE34", Offset = "0x23EAE34", VA = "0x23EAE34", Slot = "5")]
		public int CompareTo(HSteamPipe other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000161")]
	public struct HSteamUser : IEquatable<HSteamUser>, IComparable<HSteamUser>
	{
		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HSteamUser;

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x23EAE3C", Offset = "0x23EAE3C", VA = "0x23EAE3C")]
		public HSteamUser(int value)
		{
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x23EAE44", Offset = "0x23EAE44", VA = "0x23EAE44", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x23EAE4C", Offset = "0x23EAE4C", VA = "0x23EAE4C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x23EAEE0", Offset = "0x23EAEE0", VA = "0x23EAEE0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x23EAED4", Offset = "0x23EAED4", VA = "0x23EAED4")]
		public static bool operator ==(HSteamUser x, HSteamUser y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x23EAEE8", Offset = "0x23EAEE8", VA = "0x23EAEE8")]
		public static bool operator !=(HSteamUser x, HSteamUser y)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x23EA630", Offset = "0x23EA630", VA = "0x23EA630")]
		public static explicit operator HSteamUser(int value)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x23EAEF4", Offset = "0x23EAEF4", VA = "0x23EAEF4")]
		public static explicit operator int(HSteamUser that)
		{
			return default(int);
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x23EAEF8", Offset = "0x23EAEF8", VA = "0x23EAEF8", Slot = "4")]
		public bool Equals(HSteamUser other)
		{
			return default(bool);
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x23EAF08", Offset = "0x23EAF08", VA = "0x23EAF08", Slot = "5")]
		public int CompareTo(HSteamUser other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000162")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x124EAC8", Offset = "0x124EAC8")]
	public delegate void SteamAPIWarningMessageHook_t(int nSeverity, StringBuilder pchDebugText);
	[Token(Token = "0x2000163")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x124EADC", Offset = "0x124EADC")]
	public delegate void SteamAPI_CheckCallbackRegistered_t(int iCallbackNum);
	[Serializable]
	[Token(Token = "0x2000164")]
	public struct CGameID : IEquatable<CGameID>, IComparable<CGameID>
	{
		[Token(Token = "0x2000328")]
		public enum EGameIDType
		{
			[Token(Token = "0x4001307")]
			k_EGameIDTypeApp,
			[Token(Token = "0x4001308")]
			k_EGameIDTypeGameMod,
			[Token(Token = "0x4001309")]
			k_EGameIDTypeShortcut,
			[Token(Token = "0x400130A")]
			k_EGameIDTypeP2P
		}

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_GameID;

		[Token(Token = "0x6000901")]
		[Address(RVA = "0x23E7B98", Offset = "0x23E7B98", VA = "0x23E7B98")]
		public CGameID(ulong GameID)
		{
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0x23E7BA0", Offset = "0x23E7BA0", VA = "0x23E7BA0")]
		public CGameID(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0x23E7C24", Offset = "0x23E7C24", VA = "0x23E7C24")]
		public CGameID(AppId_t nAppID, uint nModID)
		{
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0x23E7C74", Offset = "0x23E7C74", VA = "0x23E7C74")]
		public bool IsSteamApp()
		{
			return default(bool);
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0x23E7C8C", Offset = "0x23E7C8C", VA = "0x23E7C8C")]
		public bool IsMod()
		{
			return default(bool);
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0x23E7CA4", Offset = "0x23E7CA4", VA = "0x23E7CA4")]
		public bool IsShortcut()
		{
			return default(bool);
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0x23E7CBC", Offset = "0x23E7CBC", VA = "0x23E7CBC")]
		public bool IsP2PFile()
		{
			return default(bool);
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0x23E7CD4", Offset = "0x23E7CD4", VA = "0x23E7CD4")]
		public AppId_t AppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0x23E7C84", Offset = "0x23E7C84", VA = "0x23E7C84")]
		public EGameIDType Type()
		{
			return default(EGameIDType);
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0x23E7CE0", Offset = "0x23E7CE0", VA = "0x23E7CE0")]
		public uint ModID()
		{
			return default(uint);
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0x23E7CE8", Offset = "0x23E7CE8", VA = "0x23E7CE8")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0x23E7E24", Offset = "0x23E7E24", VA = "0x23E7E24")]
		public void Reset()
		{
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0x23E7E2C", Offset = "0x23E7E2C", VA = "0x23E7E2C")]
		public void Set(ulong GameID)
		{
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0x23E7BAC", Offset = "0x23E7BAC", VA = "0x23E7BAC")]
		private void SetAppID(AppId_t other)
		{
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0x23E7C64", Offset = "0x23E7C64", VA = "0x23E7C64")]
		private void SetType(EGameIDType other)
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0x23E7C6C", Offset = "0x23E7C6C", VA = "0x23E7C6C")]
		private void SetModID(uint other)
		{
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0x23E7E34", Offset = "0x23E7E34", VA = "0x23E7E34", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0x23E7E3C", Offset = "0x23E7E3C", VA = "0x23E7E3C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0x23E7ED0", Offset = "0x23E7ED0", VA = "0x23E7ED0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0x23E7EC4", Offset = "0x23E7EC4", VA = "0x23E7EC4")]
		public static bool operator ==(CGameID x, CGameID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0x23E7ED8", Offset = "0x23E7ED8", VA = "0x23E7ED8")]
		public static bool operator !=(CGameID x, CGameID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0x23E7EE4", Offset = "0x23E7EE4", VA = "0x23E7EE4")]
		public static explicit operator CGameID(ulong value)
		{
			return default(CGameID);
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0x23E7EE8", Offset = "0x23E7EE8", VA = "0x23E7EE8")]
		public static explicit operator ulong(CGameID that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0x23E7EEC", Offset = "0x23E7EEC", VA = "0x23E7EEC", Slot = "4")]
		public bool Equals(CGameID other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0x23E7EFC", Offset = "0x23E7EFC", VA = "0x23E7EFC", Slot = "5")]
		public int CompareTo(CGameID other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000165")]
	public struct CSteamID : IEquatable<CSteamID>, IComparable<CSteamID>
	{
		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly CSteamID Nil;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly CSteamID OutofDateGS;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly CSteamID LanModeGS;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly CSteamID NotInitYetGS;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly CSteamID NonSteamGS;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamID;

		[Token(Token = "0x600091A")]
		[Address(RVA = "0x23E94F0", Offset = "0x23E94F0", VA = "0x23E94F0")]
		public CSteamID(AccountID_t unAccountID, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x600091B")]
		[Address(RVA = "0x23E9554", Offset = "0x23E9554", VA = "0x23E9554")]
		public CSteamID(AccountID_t unAccountID, uint unAccountInstance, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x600091C")]
		[Address(RVA = "0x23E9594", Offset = "0x23E9594", VA = "0x23E9594")]
		public CSteamID(ulong ulSteamID)
		{
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0x23E951C", Offset = "0x23E951C", VA = "0x23E951C")]
		public void Set(AccountID_t unAccountID, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0x23E9574", Offset = "0x23E9574", VA = "0x23E9574")]
		public void InstancedSet(AccountID_t unAccountID, uint unInstance, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0x23E95D4", Offset = "0x23E95D4", VA = "0x23E95D4")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0x23E95DC", Offset = "0x23E95DC", VA = "0x23E95DC")]
		public void CreateBlankAnonLogon(EUniverse eUniverse)
		{
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0x23E95EC", Offset = "0x23E95EC", VA = "0x23E95EC")]
		public void CreateBlankAnonUserLogon(EUniverse eUniverse)
		{
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0x23E95FC", Offset = "0x23E95FC", VA = "0x23E95FC")]
		public bool BBlankAnonAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0x23E9660", Offset = "0x23E9660", VA = "0x23E9660")]
		public bool BGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0x23E9684", Offset = "0x23E9684", VA = "0x23E9684")]
		public bool BPersistentGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0x23E969C", Offset = "0x23E969C", VA = "0x23E969C")]
		public bool BAnonGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0x23E96B4", Offset = "0x23E96B4", VA = "0x23E96B4")]
		public bool BContentServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0x23E96CC", Offset = "0x23E96CC", VA = "0x23E96CC")]
		public bool BClanAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x23E96E4", Offset = "0x23E96E4", VA = "0x23E96E4")]
		public bool BChatAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0x23E96FC", Offset = "0x23E96FC", VA = "0x23E96FC")]
		public bool IsLobby()
		{
			return default(bool);
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x23E9718", Offset = "0x23E9718", VA = "0x23E9718")]
		public bool BIndividualAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0x23E9634", Offset = "0x23E9634", VA = "0x23E9634")]
		public bool BAnonAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x23E9730", Offset = "0x23E9730", VA = "0x23E9730")]
		public bool BAnonUserAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0x23E9748", Offset = "0x23E9748", VA = "0x23E9748")]
		public bool BConsoleUserAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0x23E959C", Offset = "0x23E959C", VA = "0x23E959C")]
		public void SetAccountID(AccountID_t other)
		{
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0x23E95C0", Offset = "0x23E95C0", VA = "0x23E95C0")]
		public void SetAccountInstance(uint other)
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0x23E95AC", Offset = "0x23E95AC", VA = "0x23E95AC")]
		public void SetEAccountType(EAccountType other)
		{
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0x23E95A4", Offset = "0x23E95A4", VA = "0x23E95A4")]
		public void SetEUniverse(EUniverse other)
		{
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0x23E9760", Offset = "0x23E9760", VA = "0x23E9760")]
		public void ClearIndividualInstance()
		{
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0x23E9780", Offset = "0x23E9780", VA = "0x23E9780")]
		public bool HasNoIndividualInstance()
		{
			return default(bool);
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0x23E962C", Offset = "0x23E962C", VA = "0x23E962C")]
		public AccountID_t GetAccountID()
		{
			return default(AccountID_t);
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0x23E9654", Offset = "0x23E9654", VA = "0x23E9654")]
		public uint GetUnAccountInstance()
		{
			return default(uint);
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0x23E9678", Offset = "0x23E9678", VA = "0x23E9678")]
		public EAccountType GetEAccountType()
		{
			return default(EAccountType);
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0x23E97A4", Offset = "0x23E97A4", VA = "0x23E97A4")]
		public EUniverse GetEUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0x23E97AC", Offset = "0x23E97AC", VA = "0x23E97AC")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0x23E982C", Offset = "0x23E982C", VA = "0x23E982C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0x23E9834", Offset = "0x23E9834", VA = "0x23E9834", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0x23E9900", Offset = "0x23E9900", VA = "0x23E9900", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x23E98F4", Offset = "0x23E98F4", VA = "0x23E98F4")]
		public static bool operator ==(CSteamID x, CSteamID y)
		{
			return default(bool);
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x23E9908", Offset = "0x23E9908", VA = "0x23E9908")]
		public static bool operator !=(CSteamID x, CSteamID y)
		{
			return default(bool);
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x23E997C", Offset = "0x23E997C", VA = "0x23E997C")]
		public static explicit operator CSteamID(ulong value)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0x23E9980", Offset = "0x23E9980", VA = "0x23E9980")]
		public static explicit operator ulong(CSteamID that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0x23E9984", Offset = "0x23E9984", VA = "0x23E9984", Slot = "4")]
		public bool Equals(CSteamID other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0x23E9994", Offset = "0x23E9994", VA = "0x23E9994", Slot = "5")]
		public int CompareTo(CSteamID other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000166")]
	public struct HAuthTicket : IEquatable<HAuthTicket>, IComparable<HAuthTicket>
	{
		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HAuthTicket Invalid;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HAuthTicket;

		[Token(Token = "0x6000943")]
		[Address(RVA = "0x23EA638", Offset = "0x23EA638", VA = "0x23EA638")]
		public HAuthTicket(uint value)
		{
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0x23EA640", Offset = "0x23EA640", VA = "0x23EA640", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x23EA648", Offset = "0x23EA648", VA = "0x23EA648", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0x23EA714", Offset = "0x23EA714", VA = "0x23EA714", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0x23EA708", Offset = "0x23EA708", VA = "0x23EA708")]
		public static bool operator ==(HAuthTicket x, HAuthTicket y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0x23EA71C", Offset = "0x23EA71C", VA = "0x23EA71C")]
		public static bool operator !=(HAuthTicket x, HAuthTicket y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0x23EA790", Offset = "0x23EA790", VA = "0x23EA790")]
		public static explicit operator HAuthTicket(uint value)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0x23EA798", Offset = "0x23EA798", VA = "0x23EA798")]
		public static explicit operator uint(HAuthTicket that)
		{
			return default(uint);
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0x23EA79C", Offset = "0x23EA79C", VA = "0x23EA79C", Slot = "4")]
		public bool Equals(HAuthTicket other)
		{
			return default(bool);
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0x23EA7AC", Offset = "0x23EA7AC", VA = "0x23EA7AC", Slot = "5")]
		public int CompareTo(HAuthTicket other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000167")]
	public struct ControllerActionSetHandle_t : IEquatable<ControllerActionSetHandle_t>, IComparable<ControllerActionSetHandle_t>
	{
		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ControllerActionSetHandle;

		[Token(Token = "0x600094E")]
		[Address(RVA = "0x23E9CB4", Offset = "0x23E9CB4", VA = "0x23E9CB4")]
		public ControllerActionSetHandle_t(ulong value)
		{
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0x23E9CBC", Offset = "0x23E9CBC", VA = "0x23E9CBC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0x23E9CC4", Offset = "0x23E9CC4", VA = "0x23E9CC4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0x23E9D58", Offset = "0x23E9D58", VA = "0x23E9D58", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0x23E9D4C", Offset = "0x23E9D4C", VA = "0x23E9D4C")]
		public static bool operator ==(ControllerActionSetHandle_t x, ControllerActionSetHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0x23E9D60", Offset = "0x23E9D60", VA = "0x23E9D60")]
		public static bool operator !=(ControllerActionSetHandle_t x, ControllerActionSetHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0x23E9D6C", Offset = "0x23E9D6C", VA = "0x23E9D6C")]
		public static explicit operator ControllerActionSetHandle_t(ulong value)
		{
			return default(ControllerActionSetHandle_t);
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0x23E9D70", Offset = "0x23E9D70", VA = "0x23E9D70")]
		public static explicit operator ulong(ControllerActionSetHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0x23E9D74", Offset = "0x23E9D74", VA = "0x23E9D74", Slot = "4")]
		public bool Equals(ControllerActionSetHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0x23E9D84", Offset = "0x23E9D84", VA = "0x23E9D84", Slot = "5")]
		public int CompareTo(ControllerActionSetHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000168")]
	public struct ControllerAnalogActionHandle_t : IEquatable<ControllerAnalogActionHandle_t>, IComparable<ControllerAnalogActionHandle_t>
	{
		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ControllerAnalogActionHandle;

		[Token(Token = "0x6000958")]
		[Address(RVA = "0x23E9D8C", Offset = "0x23E9D8C", VA = "0x23E9D8C")]
		public ControllerAnalogActionHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0x23E9D94", Offset = "0x23E9D94", VA = "0x23E9D94", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0x23E9D9C", Offset = "0x23E9D9C", VA = "0x23E9D9C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0x23E9E30", Offset = "0x23E9E30", VA = "0x23E9E30", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0x23E9E24", Offset = "0x23E9E24", VA = "0x23E9E24")]
		public static bool operator ==(ControllerAnalogActionHandle_t x, ControllerAnalogActionHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0x23E9E38", Offset = "0x23E9E38", VA = "0x23E9E38")]
		public static bool operator !=(ControllerAnalogActionHandle_t x, ControllerAnalogActionHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0x23E9E44", Offset = "0x23E9E44", VA = "0x23E9E44")]
		public static explicit operator ControllerAnalogActionHandle_t(ulong value)
		{
			return default(ControllerAnalogActionHandle_t);
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0x23E9E48", Offset = "0x23E9E48", VA = "0x23E9E48")]
		public static explicit operator ulong(ControllerAnalogActionHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x23E9E4C", Offset = "0x23E9E4C", VA = "0x23E9E4C", Slot = "4")]
		public bool Equals(ControllerAnalogActionHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x23E9E5C", Offset = "0x23E9E5C", VA = "0x23E9E5C", Slot = "5")]
		public int CompareTo(ControllerAnalogActionHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000169")]
	public struct ControllerDigitalActionHandle_t : IEquatable<ControllerDigitalActionHandle_t>, IComparable<ControllerDigitalActionHandle_t>
	{
		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ControllerDigitalActionHandle;

		[Token(Token = "0x6000962")]
		[Address(RVA = "0x23E9E64", Offset = "0x23E9E64", VA = "0x23E9E64")]
		public ControllerDigitalActionHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x23E9E6C", Offset = "0x23E9E6C", VA = "0x23E9E6C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0x23E9E74", Offset = "0x23E9E74", VA = "0x23E9E74", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0x23E9F08", Offset = "0x23E9F08", VA = "0x23E9F08", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0x23E9EFC", Offset = "0x23E9EFC", VA = "0x23E9EFC")]
		public static bool operator ==(ControllerDigitalActionHandle_t x, ControllerDigitalActionHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x23E9F10", Offset = "0x23E9F10", VA = "0x23E9F10")]
		public static bool operator !=(ControllerDigitalActionHandle_t x, ControllerDigitalActionHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x23E9F1C", Offset = "0x23E9F1C", VA = "0x23E9F1C")]
		public static explicit operator ControllerDigitalActionHandle_t(ulong value)
		{
			return default(ControllerDigitalActionHandle_t);
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0x23E9F20", Offset = "0x23E9F20", VA = "0x23E9F20")]
		public static explicit operator ulong(ControllerDigitalActionHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x23E9F24", Offset = "0x23E9F24", VA = "0x23E9F24", Slot = "4")]
		public bool Equals(ControllerDigitalActionHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x23E9F34", Offset = "0x23E9F34", VA = "0x23E9F34", Slot = "5")]
		public int CompareTo(ControllerDigitalActionHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200016A")]
	public struct ControllerHandle_t : IEquatable<ControllerHandle_t>, IComparable<ControllerHandle_t>
	{
		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ControllerHandle;

		[Token(Token = "0x600096C")]
		[Address(RVA = "0x23E9F3C", Offset = "0x23E9F3C", VA = "0x23E9F3C")]
		public ControllerHandle_t(ulong value)
		{
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x23E9F44", Offset = "0x23E9F44", VA = "0x23E9F44", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0x23E9F4C", Offset = "0x23E9F4C", VA = "0x23E9F4C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x23E9FE0", Offset = "0x23E9FE0", VA = "0x23E9FE0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x23E9FD4", Offset = "0x23E9FD4", VA = "0x23E9FD4")]
		public static bool operator ==(ControllerHandle_t x, ControllerHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0x23E9FE8", Offset = "0x23E9FE8", VA = "0x23E9FE8")]
		public static bool operator !=(ControllerHandle_t x, ControllerHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x23E9FF4", Offset = "0x23E9FF4", VA = "0x23E9FF4")]
		public static explicit operator ControllerHandle_t(ulong value)
		{
			return default(ControllerHandle_t);
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x23E9FF8", Offset = "0x23E9FF8", VA = "0x23E9FF8")]
		public static explicit operator ulong(ControllerHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0x23E9FFC", Offset = "0x23E9FFC", VA = "0x23E9FFC", Slot = "4")]
		public bool Equals(ControllerHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0x23EA00C", Offset = "0x23EA00C", VA = "0x23EA00C", Slot = "5")]
		public int CompareTo(ControllerHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200016B")]
	public struct FriendsGroupID_t : IEquatable<FriendsGroupID_t>, IComparable<FriendsGroupID_t>
	{
		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly FriendsGroupID_t Invalid;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short m_FriendsGroupID;

		[Token(Token = "0x6000976")]
		[Address(RVA = "0x23EA1F0", Offset = "0x23EA1F0", VA = "0x23EA1F0")]
		public FriendsGroupID_t(short value)
		{
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0x23EA1F8", Offset = "0x23EA1F8", VA = "0x23EA1F8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0x23EA200", Offset = "0x23EA200", VA = "0x23EA200", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0x23EA2D0", Offset = "0x23EA2D0", VA = "0x23EA2D0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0x23EA2C0", Offset = "0x23EA2C0", VA = "0x23EA2C0")]
		public static bool operator ==(FriendsGroupID_t x, FriendsGroupID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0x23EA2D8", Offset = "0x23EA2D8", VA = "0x23EA2D8")]
		public static bool operator !=(FriendsGroupID_t x, FriendsGroupID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0x23EA350", Offset = "0x23EA350", VA = "0x23EA350")]
		public static explicit operator FriendsGroupID_t(short value)
		{
			return default(FriendsGroupID_t);
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0x23EA358", Offset = "0x23EA358", VA = "0x23EA358")]
		public static explicit operator short(FriendsGroupID_t that)
		{
			return default(short);
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0x23EA35C", Offset = "0x23EA35C", VA = "0x23EA35C", Slot = "4")]
		public bool Equals(FriendsGroupID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x23EA36C", Offset = "0x23EA36C", VA = "0x23EA36C", Slot = "5")]
		public int CompareTo(FriendsGroupID_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200016C")]
	public struct HHTMLBrowser : IEquatable<HHTMLBrowser>, IComparable<HHTMLBrowser>
	{
		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HHTMLBrowser Invalid;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HHTMLBrowser;

		[Token(Token = "0x6000981")]
		[Address(RVA = "0x23EA804", Offset = "0x23EA804", VA = "0x23EA804")]
		public HHTMLBrowser(uint value)
		{
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0x23EA80C", Offset = "0x23EA80C", VA = "0x23EA80C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0x23EA814", Offset = "0x23EA814", VA = "0x23EA814", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0x23EA8E0", Offset = "0x23EA8E0", VA = "0x23EA8E0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0x23EA8D4", Offset = "0x23EA8D4", VA = "0x23EA8D4")]
		public static bool operator ==(HHTMLBrowser x, HHTMLBrowser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0x23EA8E8", Offset = "0x23EA8E8", VA = "0x23EA8E8")]
		public static bool operator !=(HHTMLBrowser x, HHTMLBrowser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x23EA95C", Offset = "0x23EA95C", VA = "0x23EA95C")]
		public static explicit operator HHTMLBrowser(uint value)
		{
			return default(HHTMLBrowser);
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0x23EA964", Offset = "0x23EA964", VA = "0x23EA964")]
		public static explicit operator uint(HHTMLBrowser that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0x23EA968", Offset = "0x23EA968", VA = "0x23EA968", Slot = "4")]
		public bool Equals(HHTMLBrowser other)
		{
			return default(bool);
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0x23EA978", Offset = "0x23EA978", VA = "0x23EA978", Slot = "5")]
		public int CompareTo(HHTMLBrowser other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200016D")]
	public struct HTTPCookieContainerHandle : IEquatable<HTTPCookieContainerHandle>, IComparable<HTTPCookieContainerHandle>
	{
		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HTTPCookieContainerHandle Invalid;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HTTPCookieContainerHandle;

		[Token(Token = "0x600098C")]
		[Address(RVA = "0x2DC00EC", Offset = "0x2DC00EC", VA = "0x2DC00EC")]
		public HTTPCookieContainerHandle(uint value)
		{
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x2DC00F4", Offset = "0x2DC00F4", VA = "0x2DC00F4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0x2DC00FC", Offset = "0x2DC00FC", VA = "0x2DC00FC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0x2DC01C8", Offset = "0x2DC01C8", VA = "0x2DC01C8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0x2DC01BC", Offset = "0x2DC01BC", VA = "0x2DC01BC")]
		public static bool operator ==(HTTPCookieContainerHandle x, HTTPCookieContainerHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0x2DC01D0", Offset = "0x2DC01D0", VA = "0x2DC01D0")]
		public static bool operator !=(HTTPCookieContainerHandle x, HTTPCookieContainerHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0x2DC0244", Offset = "0x2DC0244", VA = "0x2DC0244")]
		public static explicit operator HTTPCookieContainerHandle(uint value)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0x2DC024C", Offset = "0x2DC024C", VA = "0x2DC024C")]
		public static explicit operator uint(HTTPCookieContainerHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x2DC0250", Offset = "0x2DC0250", VA = "0x2DC0250", Slot = "4")]
		public bool Equals(HTTPCookieContainerHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0x2DC0260", Offset = "0x2DC0260", VA = "0x2DC0260", Slot = "5")]
		public int CompareTo(HTTPCookieContainerHandle other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200016E")]
	public struct HTTPRequestHandle : IEquatable<HTTPRequestHandle>, IComparable<HTTPRequestHandle>
	{
		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HTTPRequestHandle Invalid;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HTTPRequestHandle;

		[Token(Token = "0x6000997")]
		[Address(RVA = "0x2DC02B8", Offset = "0x2DC02B8", VA = "0x2DC02B8")]
		public HTTPRequestHandle(uint value)
		{
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0x2DC02C0", Offset = "0x2DC02C0", VA = "0x2DC02C0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0x2DC02C8", Offset = "0x2DC02C8", VA = "0x2DC02C8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0x2DC0394", Offset = "0x2DC0394", VA = "0x2DC0394", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0x2DC0388", Offset = "0x2DC0388", VA = "0x2DC0388")]
		public static bool operator ==(HTTPRequestHandle x, HTTPRequestHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0x2DC039C", Offset = "0x2DC039C", VA = "0x2DC039C")]
		public static bool operator !=(HTTPRequestHandle x, HTTPRequestHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0x2DC0410", Offset = "0x2DC0410", VA = "0x2DC0410")]
		public static explicit operator HTTPRequestHandle(uint value)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0x2DC0418", Offset = "0x2DC0418", VA = "0x2DC0418")]
		public static explicit operator uint(HTTPRequestHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0x2DC041C", Offset = "0x2DC041C", VA = "0x2DC041C", Slot = "4")]
		public bool Equals(HTTPRequestHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x2DC042C", Offset = "0x2DC042C", VA = "0x2DC042C", Slot = "5")]
		public int CompareTo(HTTPRequestHandle other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200016F")]
	public struct SteamInventoryResult_t : IEquatable<SteamInventoryResult_t>, IComparable<SteamInventoryResult_t>
	{
		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamInventoryResult_t Invalid;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_SteamInventoryResult;

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0x2E96F64", Offset = "0x2E96F64", VA = "0x2E96F64")]
		public SteamInventoryResult_t(int value)
		{
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x2E96F6C", Offset = "0x2E96F6C", VA = "0x2E96F6C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x2E96F74", Offset = "0x2E96F74", VA = "0x2E96F74", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x2E97040", Offset = "0x2E97040", VA = "0x2E97040", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x2E97034", Offset = "0x2E97034", VA = "0x2E97034")]
		public static bool operator ==(SteamInventoryResult_t x, SteamInventoryResult_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x2E97048", Offset = "0x2E97048", VA = "0x2E97048")]
		public static bool operator !=(SteamInventoryResult_t x, SteamInventoryResult_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x2E970BC", Offset = "0x2E970BC", VA = "0x2E970BC")]
		public static explicit operator SteamInventoryResult_t(int value)
		{
			return default(SteamInventoryResult_t);
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x2E970C4", Offset = "0x2E970C4", VA = "0x2E970C4")]
		public static explicit operator int(SteamInventoryResult_t that)
		{
			return default(int);
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0x2E970C8", Offset = "0x2E970C8", VA = "0x2E970C8", Slot = "4")]
		public bool Equals(SteamInventoryResult_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x2E970D8", Offset = "0x2E970D8", VA = "0x2E970D8", Slot = "5")]
		public int CompareTo(SteamInventoryResult_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000170")]
	public struct SteamItemDef_t : IEquatable<SteamItemDef_t>, IComparable<SteamItemDef_t>
	{
		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_SteamItemDef;

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0x2E97134", Offset = "0x2E97134", VA = "0x2E97134")]
		public SteamItemDef_t(int value)
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x2E9713C", Offset = "0x2E9713C", VA = "0x2E9713C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x2E97144", Offset = "0x2E97144", VA = "0x2E97144", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x2E971D8", Offset = "0x2E971D8", VA = "0x2E971D8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0x2E971CC", Offset = "0x2E971CC", VA = "0x2E971CC")]
		public static bool operator ==(SteamItemDef_t x, SteamItemDef_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0x2E971E0", Offset = "0x2E971E0", VA = "0x2E971E0")]
		public static bool operator !=(SteamItemDef_t x, SteamItemDef_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x2E971EC", Offset = "0x2E971EC", VA = "0x2E971EC")]
		public static explicit operator SteamItemDef_t(int value)
		{
			return default(SteamItemDef_t);
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x2E971F4", Offset = "0x2E971F4", VA = "0x2E971F4")]
		public static explicit operator int(SteamItemDef_t that)
		{
			return default(int);
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x2E971F8", Offset = "0x2E971F8", VA = "0x2E971F8", Slot = "4")]
		public bool Equals(SteamItemDef_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x2E97208", Offset = "0x2E97208", VA = "0x2E97208", Slot = "5")]
		public int CompareTo(SteamItemDef_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000171")]
	public struct SteamItemInstanceID_t : IEquatable<SteamItemInstanceID_t>, IComparable<SteamItemInstanceID_t>
	{
		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamItemInstanceID_t Invalid;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamItemInstanceID;

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0x2E97210", Offset = "0x2E97210", VA = "0x2E97210")]
		public SteamItemInstanceID_t(ulong value)
		{
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x2E97218", Offset = "0x2E97218", VA = "0x2E97218", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x2E97220", Offset = "0x2E97220", VA = "0x2E97220", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x2E972EC", Offset = "0x2E972EC", VA = "0x2E972EC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0x2E972E0", Offset = "0x2E972E0", VA = "0x2E972E0")]
		public static bool operator ==(SteamItemInstanceID_t x, SteamItemInstanceID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0x2E972F4", Offset = "0x2E972F4", VA = "0x2E972F4")]
		public static bool operator !=(SteamItemInstanceID_t x, SteamItemInstanceID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0x2E97368", Offset = "0x2E97368", VA = "0x2E97368")]
		public static explicit operator SteamItemInstanceID_t(ulong value)
		{
			return default(SteamItemInstanceID_t);
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x2E9736C", Offset = "0x2E9736C", VA = "0x2E9736C")]
		public static explicit operator ulong(SteamItemInstanceID_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x2E97370", Offset = "0x2E97370", VA = "0x2E97370", Slot = "4")]
		public bool Equals(SteamItemInstanceID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x2E97380", Offset = "0x2E97380", VA = "0x2E97380", Slot = "5")]
		public int CompareTo(SteamItemInstanceID_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000172")]
	public struct HServerListRequest : IEquatable<HServerListRequest>
	{
		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HServerListRequest Invalid;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_HServerListRequest;

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0x23EA9D0", Offset = "0x23EA9D0", VA = "0x23EA9D0")]
		public HServerListRequest(IntPtr value)
		{
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x23EA9D8", Offset = "0x23EA9D8", VA = "0x23EA9D8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x23EA9E0", Offset = "0x23EA9E0", VA = "0x23EA9E0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x23EAAB4", Offset = "0x23EAAB4", VA = "0x23EAAB4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x23EAAAC", Offset = "0x23EAAAC", VA = "0x23EAAAC")]
		public static bool operator ==(HServerListRequest x, HServerListRequest y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x23EAABC", Offset = "0x23EAABC", VA = "0x23EAABC")]
		public static bool operator !=(HServerListRequest x, HServerListRequest y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x23EAB40", Offset = "0x23EAB40", VA = "0x23EAB40")]
		public static explicit operator HServerListRequest(IntPtr value)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x23EAB44", Offset = "0x23EAB44", VA = "0x23EAB44")]
		public static explicit operator IntPtr(HServerListRequest that)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x23EAB48", Offset = "0x23EAB48", VA = "0x23EAB48", Slot = "4")]
		public bool Equals(HServerListRequest other)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x2000173")]
	public struct HServerQuery : IEquatable<HServerQuery>, IComparable<HServerQuery>
	{
		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HServerQuery Invalid;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HServerQuery;

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x23EABA4", Offset = "0x23EABA4", VA = "0x23EABA4")]
		public HServerQuery(int value)
		{
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x23EABAC", Offset = "0x23EABAC", VA = "0x23EABAC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x23EABB4", Offset = "0x23EABB4", VA = "0x23EABB4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x23EAC80", Offset = "0x23EAC80", VA = "0x23EAC80", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x23EAC74", Offset = "0x23EAC74", VA = "0x23EAC74")]
		public static bool operator ==(HServerQuery x, HServerQuery y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x23EAC88", Offset = "0x23EAC88", VA = "0x23EAC88")]
		public static bool operator !=(HServerQuery x, HServerQuery y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x23EACFC", Offset = "0x23EACFC", VA = "0x23EACFC")]
		public static explicit operator HServerQuery(int value)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x23EAD04", Offset = "0x23EAD04", VA = "0x23EAD04")]
		public static explicit operator int(HServerQuery that)
		{
			return default(int);
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x23EAD08", Offset = "0x23EAD08", VA = "0x23EAD08", Slot = "4")]
		public bool Equals(HServerQuery other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x23EAD18", Offset = "0x23EAD18", VA = "0x23EAD18", Slot = "5")]
		public int CompareTo(HServerQuery other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000174")]
	public struct SNetListenSocket_t : IEquatable<SNetListenSocket_t>, IComparable<SNetListenSocket_t>
	{
		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_SNetListenSocket;

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x2E7C07C", Offset = "0x2E7C07C", VA = "0x2E7C07C")]
		public SNetListenSocket_t(uint value)
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x2E7C084", Offset = "0x2E7C084", VA = "0x2E7C084", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x2E7C08C", Offset = "0x2E7C08C", VA = "0x2E7C08C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x2E7C120", Offset = "0x2E7C120", VA = "0x2E7C120", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x2E7C114", Offset = "0x2E7C114", VA = "0x2E7C114")]
		public static bool operator ==(SNetListenSocket_t x, SNetListenSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x2E7C128", Offset = "0x2E7C128", VA = "0x2E7C128")]
		public static bool operator !=(SNetListenSocket_t x, SNetListenSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x2E7C134", Offset = "0x2E7C134", VA = "0x2E7C134")]
		public static explicit operator SNetListenSocket_t(uint value)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x2E7C13C", Offset = "0x2E7C13C", VA = "0x2E7C13C")]
		public static explicit operator uint(SNetListenSocket_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0x2E7C140", Offset = "0x2E7C140", VA = "0x2E7C140", Slot = "4")]
		public bool Equals(SNetListenSocket_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0x2E7C150", Offset = "0x2E7C150", VA = "0x2E7C150", Slot = "5")]
		public int CompareTo(SNetListenSocket_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000175")]
	public struct SNetSocket_t : IEquatable<SNetSocket_t>, IComparable<SNetSocket_t>
	{
		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_SNetSocket;

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0x2E7C158", Offset = "0x2E7C158", VA = "0x2E7C158")]
		public SNetSocket_t(uint value)
		{
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0x2E7C160", Offset = "0x2E7C160", VA = "0x2E7C160", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0x2E7C168", Offset = "0x2E7C168", VA = "0x2E7C168", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0x2E7C1FC", Offset = "0x2E7C1FC", VA = "0x2E7C1FC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0x2E7C1F0", Offset = "0x2E7C1F0", VA = "0x2E7C1F0")]
		public static bool operator ==(SNetSocket_t x, SNetSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x2E7C204", Offset = "0x2E7C204", VA = "0x2E7C204")]
		public static bool operator !=(SNetSocket_t x, SNetSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x2E7C210", Offset = "0x2E7C210", VA = "0x2E7C210")]
		public static explicit operator SNetSocket_t(uint value)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x2E7C218", Offset = "0x2E7C218", VA = "0x2E7C218")]
		public static explicit operator uint(SNetSocket_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x2E7C21C", Offset = "0x2E7C21C", VA = "0x2E7C21C", Slot = "4")]
		public bool Equals(SNetSocket_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x2E7C22C", Offset = "0x2E7C22C", VA = "0x2E7C22C", Slot = "5")]
		public int CompareTo(SNetSocket_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000176")]
	public struct PublishedFileId_t : IEquatable<PublishedFileId_t>, IComparable<PublishedFileId_t>
	{
		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PublishedFileId_t Invalid;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_PublishedFileId;

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x2E7BCE8", Offset = "0x2E7BCE8", VA = "0x2E7BCE8")]
		public PublishedFileId_t(ulong value)
		{
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x2E7BCF0", Offset = "0x2E7BCF0", VA = "0x2E7BCF0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x2E7BCF8", Offset = "0x2E7BCF8", VA = "0x2E7BCF8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0x2E7BDC4", Offset = "0x2E7BDC4", VA = "0x2E7BDC4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0x2E7BDB8", Offset = "0x2E7BDB8", VA = "0x2E7BDB8")]
		public static bool operator ==(PublishedFileId_t x, PublishedFileId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0x2E7BDCC", Offset = "0x2E7BDCC", VA = "0x2E7BDCC")]
		public static bool operator !=(PublishedFileId_t x, PublishedFileId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0x2E7BE40", Offset = "0x2E7BE40", VA = "0x2E7BE40")]
		public static explicit operator PublishedFileId_t(ulong value)
		{
			return default(PublishedFileId_t);
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x2E7BE44", Offset = "0x2E7BE44", VA = "0x2E7BE44")]
		public static explicit operator ulong(PublishedFileId_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x2E7BE48", Offset = "0x2E7BE48", VA = "0x2E7BE48", Slot = "4")]
		public bool Equals(PublishedFileId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x2E7BE58", Offset = "0x2E7BE58", VA = "0x2E7BE58", Slot = "5")]
		public int CompareTo(PublishedFileId_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000177")]
	public struct PublishedFileUpdateHandle_t : IEquatable<PublishedFileUpdateHandle_t>, IComparable<PublishedFileUpdateHandle_t>
	{
		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PublishedFileUpdateHandle_t Invalid;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_PublishedFileUpdateHandle;

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0x2E7BEB0", Offset = "0x2E7BEB0", VA = "0x2E7BEB0")]
		public PublishedFileUpdateHandle_t(ulong value)
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0x2E7BEB8", Offset = "0x2E7BEB8", VA = "0x2E7BEB8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x2E7BEC0", Offset = "0x2E7BEC0", VA = "0x2E7BEC0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x2E7BF8C", Offset = "0x2E7BF8C", VA = "0x2E7BF8C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x2E7BF80", Offset = "0x2E7BF80", VA = "0x2E7BF80")]
		public static bool operator ==(PublishedFileUpdateHandle_t x, PublishedFileUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x2E7BF94", Offset = "0x2E7BF94", VA = "0x2E7BF94")]
		public static bool operator !=(PublishedFileUpdateHandle_t x, PublishedFileUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x2E7C008", Offset = "0x2E7C008", VA = "0x2E7C008")]
		public static explicit operator PublishedFileUpdateHandle_t(ulong value)
		{
			return default(PublishedFileUpdateHandle_t);
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x2E7C00C", Offset = "0x2E7C00C", VA = "0x2E7C00C")]
		public static explicit operator ulong(PublishedFileUpdateHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x2E7C010", Offset = "0x2E7C010", VA = "0x2E7C010", Slot = "4")]
		public bool Equals(PublishedFileUpdateHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x2E7C020", Offset = "0x2E7C020", VA = "0x2E7C020", Slot = "5")]
		public int CompareTo(PublishedFileUpdateHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000178")]
	public struct UGCFileWriteStreamHandle_t : IEquatable<UGCFileWriteStreamHandle_t>, IComparable<UGCFileWriteStreamHandle_t>
	{
		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCFileWriteStreamHandle_t Invalid;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCFileWriteStreamHandle;

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x2B253F0", Offset = "0x2B253F0", VA = "0x2B253F0")]
		public UGCFileWriteStreamHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x2B253F8", Offset = "0x2B253F8", VA = "0x2B253F8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x2B25400", Offset = "0x2B25400", VA = "0x2B25400", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x2B254CC", Offset = "0x2B254CC", VA = "0x2B254CC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x2B254C0", Offset = "0x2B254C0", VA = "0x2B254C0")]
		public static bool operator ==(UGCFileWriteStreamHandle_t x, UGCFileWriteStreamHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x2B254D4", Offset = "0x2B254D4", VA = "0x2B254D4")]
		public static bool operator !=(UGCFileWriteStreamHandle_t x, UGCFileWriteStreamHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x2B181F4", Offset = "0x2B181F4", VA = "0x2B181F4")]
		public static explicit operator UGCFileWriteStreamHandle_t(ulong value)
		{
			return default(UGCFileWriteStreamHandle_t);
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x2B25548", Offset = "0x2B25548", VA = "0x2B25548")]
		public static explicit operator ulong(UGCFileWriteStreamHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x2B2554C", Offset = "0x2B2554C", VA = "0x2B2554C", Slot = "4")]
		public bool Equals(UGCFileWriteStreamHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x2B2555C", Offset = "0x2B2555C", VA = "0x2B2555C", Slot = "5")]
		public int CompareTo(UGCFileWriteStreamHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000179")]
	public struct UGCHandle_t : IEquatable<UGCHandle_t>, IComparable<UGCHandle_t>
	{
		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCHandle_t Invalid;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCHandle;

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x2B255B8", Offset = "0x2B255B8", VA = "0x2B255B8")]
		public UGCHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x2B255C0", Offset = "0x2B255C0", VA = "0x2B255C0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x2B255C8", Offset = "0x2B255C8", VA = "0x2B255C8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x2B25694", Offset = "0x2B25694", VA = "0x2B25694", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x2B25688", Offset = "0x2B25688", VA = "0x2B25688")]
		public static bool operator ==(UGCHandle_t x, UGCHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x2B2569C", Offset = "0x2B2569C", VA = "0x2B2569C")]
		public static bool operator !=(UGCHandle_t x, UGCHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x2B19058", Offset = "0x2B19058", VA = "0x2B19058")]
		public static explicit operator UGCHandle_t(ulong value)
		{
			return default(UGCHandle_t);
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0x2B25710", Offset = "0x2B25710", VA = "0x2B25710")]
		public static explicit operator ulong(UGCHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0x2B25714", Offset = "0x2B25714", VA = "0x2B25714", Slot = "4")]
		public bool Equals(UGCHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0x2B25724", Offset = "0x2B25724", VA = "0x2B25724", Slot = "5")]
		public int CompareTo(UGCHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200017A")]
	public struct ScreenshotHandle : IEquatable<ScreenshotHandle>, IComparable<ScreenshotHandle>
	{
		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ScreenshotHandle Invalid;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_ScreenshotHandle;

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0x2E7C234", Offset = "0x2E7C234", VA = "0x2E7C234")]
		public ScreenshotHandle(uint value)
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x2E7C23C", Offset = "0x2E7C23C", VA = "0x2E7C23C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0x2E7C244", Offset = "0x2E7C244", VA = "0x2E7C244", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x2E7C310", Offset = "0x2E7C310", VA = "0x2E7C310", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x2E7C304", Offset = "0x2E7C304", VA = "0x2E7C304")]
		public static bool operator ==(ScreenshotHandle x, ScreenshotHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0x2E7C318", Offset = "0x2E7C318", VA = "0x2E7C318")]
		public static bool operator !=(ScreenshotHandle x, ScreenshotHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0x2E7C38C", Offset = "0x2E7C38C", VA = "0x2E7C38C")]
		public static explicit operator ScreenshotHandle(uint value)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0x2E7C394", Offset = "0x2E7C394", VA = "0x2E7C394")]
		public static explicit operator uint(ScreenshotHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0x2E7C398", Offset = "0x2E7C398", VA = "0x2E7C398", Slot = "4")]
		public bool Equals(ScreenshotHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0x2E7C3A8", Offset = "0x2E7C3A8", VA = "0x2E7C3A8", Slot = "5")]
		public int CompareTo(ScreenshotHandle other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200017B")]
	public struct AccountID_t : IEquatable<AccountID_t>, IComparable<AccountID_t>
	{
		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_AccountID;

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0x23E6EBC", Offset = "0x23E6EBC", VA = "0x23E6EBC")]
		public AccountID_t(uint value)
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x23E6EC4", Offset = "0x23E6EC4", VA = "0x23E6EC4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x23E6ECC", Offset = "0x23E6ECC", VA = "0x23E6ECC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x23E6F60", Offset = "0x23E6F60", VA = "0x23E6F60", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x23E6F54", Offset = "0x23E6F54", VA = "0x23E6F54")]
		public static bool operator ==(AccountID_t x, AccountID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x23E6F68", Offset = "0x23E6F68", VA = "0x23E6F68")]
		public static bool operator !=(AccountID_t x, AccountID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x23E6F74", Offset = "0x23E6F74", VA = "0x23E6F74")]
		public static explicit operator AccountID_t(uint value)
		{
			return default(AccountID_t);
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x23E6F7C", Offset = "0x23E6F7C", VA = "0x23E6F7C")]
		public static explicit operator uint(AccountID_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0x23E6F80", Offset = "0x23E6F80", VA = "0x23E6F80", Slot = "4")]
		public bool Equals(AccountID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0x23E6F90", Offset = "0x23E6F90", VA = "0x23E6F90", Slot = "5")]
		public int CompareTo(AccountID_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200017C")]
	public struct AppId_t : IEquatable<AppId_t>, IComparable<AppId_t>
	{
		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly AppId_t Invalid;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_AppId;

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x23E6F98", Offset = "0x23E6F98", VA = "0x23E6F98")]
		public AppId_t(uint value)
		{
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x23E6FA0", Offset = "0x23E6FA0", VA = "0x23E6FA0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x23E6FA8", Offset = "0x23E6FA8", VA = "0x23E6FA8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x23E7074", Offset = "0x23E7074", VA = "0x23E7074", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x23E7068", Offset = "0x23E7068", VA = "0x23E7068")]
		public static bool operator ==(AppId_t x, AppId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x23E707C", Offset = "0x23E707C", VA = "0x23E707C")]
		public static bool operator !=(AppId_t x, AppId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0x23E70F0", Offset = "0x23E70F0", VA = "0x23E70F0")]
		public static explicit operator AppId_t(uint value)
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0x23E70F8", Offset = "0x23E70F8", VA = "0x23E70F8")]
		public static explicit operator uint(AppId_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x23E70FC", Offset = "0x23E70FC", VA = "0x23E70FC", Slot = "4")]
		public bool Equals(AppId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0x23E710C", Offset = "0x23E710C", VA = "0x23E710C", Slot = "5")]
		public int CompareTo(AppId_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200017D")]
	public struct DepotId_t : IEquatable<DepotId_t>, IComparable<DepotId_t>
	{
		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DepotId_t Invalid;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_DepotId;

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0x23EA014", Offset = "0x23EA014", VA = "0x23EA014")]
		public DepotId_t(uint value)
		{
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0x23EA01C", Offset = "0x23EA01C", VA = "0x23EA01C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0x23EA024", Offset = "0x23EA024", VA = "0x23EA024", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0x23EA0F0", Offset = "0x23EA0F0", VA = "0x23EA0F0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0x23EA0E4", Offset = "0x23EA0E4", VA = "0x23EA0E4")]
		public static bool operator ==(DepotId_t x, DepotId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0x23EA0F8", Offset = "0x23EA0F8", VA = "0x23EA0F8")]
		public static bool operator !=(DepotId_t x, DepotId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0x23EA16C", Offset = "0x23EA16C", VA = "0x23EA16C")]
		public static explicit operator DepotId_t(uint value)
		{
			return default(DepotId_t);
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x23EA174", Offset = "0x23EA174", VA = "0x23EA174")]
		public static explicit operator uint(DepotId_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x23EA178", Offset = "0x23EA178", VA = "0x23EA178", Slot = "4")]
		public bool Equals(DepotId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x23EA188", Offset = "0x23EA188", VA = "0x23EA188", Slot = "5")]
		public int CompareTo(DepotId_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200017E")]
	public struct ManifestId_t : IEquatable<ManifestId_t>, IComparable<ManifestId_t>
	{
		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ManifestId_t Invalid;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ManifestId;

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0x2DC6788", Offset = "0x2DC6788", VA = "0x2DC6788")]
		public ManifestId_t(ulong value)
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0x2DC6790", Offset = "0x2DC6790", VA = "0x2DC6790", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x2DC6798", Offset = "0x2DC6798", VA = "0x2DC6798", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x2DC6864", Offset = "0x2DC6864", VA = "0x2DC6864", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0x2DC6858", Offset = "0x2DC6858", VA = "0x2DC6858")]
		public static bool operator ==(ManifestId_t x, ManifestId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0x2DC686C", Offset = "0x2DC686C", VA = "0x2DC686C")]
		public static bool operator !=(ManifestId_t x, ManifestId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x2DC68E0", Offset = "0x2DC68E0", VA = "0x2DC68E0")]
		public static explicit operator ManifestId_t(ulong value)
		{
			return default(ManifestId_t);
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0x2DC68E4", Offset = "0x2DC68E4", VA = "0x2DC68E4")]
		public static explicit operator ulong(ManifestId_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0x2DC68E8", Offset = "0x2DC68E8", VA = "0x2DC68E8", Slot = "4")]
		public bool Equals(ManifestId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x2DC68F8", Offset = "0x2DC68F8", VA = "0x2DC68F8", Slot = "5")]
		public int CompareTo(ManifestId_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x200017F")]
	public struct SteamAPICall_t : IEquatable<SteamAPICall_t>, IComparable<SteamAPICall_t>
	{
		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamAPICall_t Invalid;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamAPICall;

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x2E7C554", Offset = "0x2E7C554", VA = "0x2E7C554")]
		public SteamAPICall_t(ulong value)
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0x2E7C55C", Offset = "0x2E7C55C", VA = "0x2E7C55C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0x2E7C564", Offset = "0x2E7C564", VA = "0x2E7C564", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0x2E7C630", Offset = "0x2E7C630", VA = "0x2E7C630", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0x2E7C624", Offset = "0x2E7C624", VA = "0x2E7C624")]
		public static bool operator ==(SteamAPICall_t x, SteamAPICall_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x2E7C638", Offset = "0x2E7C638", VA = "0x2E7C638")]
		public static bool operator !=(SteamAPICall_t x, SteamAPICall_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x2E7C6AC", Offset = "0x2E7C6AC", VA = "0x2E7C6AC")]
		public static explicit operator SteamAPICall_t(ulong value)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x2E7C6B0", Offset = "0x2E7C6B0", VA = "0x2E7C6B0")]
		public static explicit operator ulong(SteamAPICall_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x2E7C6B4", Offset = "0x2E7C6B4", VA = "0x2E7C6B4", Slot = "4")]
		public bool Equals(SteamAPICall_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x2E7C6C4", Offset = "0x2E7C6C4", VA = "0x2E7C6C4", Slot = "5")]
		public int CompareTo(SteamAPICall_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000180")]
	public struct UGCQueryHandle_t : IEquatable<UGCQueryHandle_t>, IComparable<UGCQueryHandle_t>
	{
		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCQueryHandle_t Invalid;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCQueryHandle;

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x2B25780", Offset = "0x2B25780", VA = "0x2B25780")]
		public UGCQueryHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x2B25788", Offset = "0x2B25788", VA = "0x2B25788", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x2B25790", Offset = "0x2B25790", VA = "0x2B25790", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0x2B2585C", Offset = "0x2B2585C", VA = "0x2B2585C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0x2B25850", Offset = "0x2B25850", VA = "0x2B25850")]
		public static bool operator ==(UGCQueryHandle_t x, UGCQueryHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0x2B25864", Offset = "0x2B25864", VA = "0x2B25864")]
		public static bool operator !=(UGCQueryHandle_t x, UGCQueryHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0x2B1BA94", Offset = "0x2B1BA94", VA = "0x2B1BA94")]
		public static explicit operator UGCQueryHandle_t(ulong value)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0x2B258D8", Offset = "0x2B258D8", VA = "0x2B258D8")]
		public static explicit operator ulong(UGCQueryHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x2B258DC", Offset = "0x2B258DC", VA = "0x2B258DC", Slot = "4")]
		public bool Equals(UGCQueryHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0x2B258EC", Offset = "0x2B258EC", VA = "0x2B258EC", Slot = "5")]
		public int CompareTo(UGCQueryHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000181")]
	public struct UGCUpdateHandle_t : IEquatable<UGCUpdateHandle_t>, IComparable<UGCUpdateHandle_t>
	{
		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCUpdateHandle_t Invalid;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCUpdateHandle;

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x2B25948", Offset = "0x2B25948", VA = "0x2B25948")]
		public UGCUpdateHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0x2B25950", Offset = "0x2B25950", VA = "0x2B25950", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0x2B25958", Offset = "0x2B25958", VA = "0x2B25958", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x2B25A24", Offset = "0x2B25A24", VA = "0x2B25A24", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x2B25A18", Offset = "0x2B25A18", VA = "0x2B25A18")]
		public static bool operator ==(UGCUpdateHandle_t x, UGCUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x2B25A2C", Offset = "0x2B25A2C", VA = "0x2B25A2C")]
		public static bool operator !=(UGCUpdateHandle_t x, UGCUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x2B1D6AC", Offset = "0x2B1D6AC", VA = "0x2B1D6AC")]
		public static explicit operator UGCUpdateHandle_t(ulong value)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x2B25AA0", Offset = "0x2B25AA0", VA = "0x2B25AA0")]
		public static explicit operator ulong(UGCUpdateHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x2B25AA4", Offset = "0x2B25AA4", VA = "0x2B25AA4", Slot = "4")]
		public bool Equals(UGCUpdateHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0x2B25AB4", Offset = "0x2B25AB4", VA = "0x2B25AB4", Slot = "5")]
		public int CompareTo(UGCUpdateHandle_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000182")]
	public struct ClientUnifiedMessageHandle : IEquatable<ClientUnifiedMessageHandle>, IComparable<ClientUnifiedMessageHandle>
	{
		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ClientUnifiedMessageHandle Invalid;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ClientUnifiedMessageHandle;

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x23E9AEC", Offset = "0x23E9AEC", VA = "0x23E9AEC")]
		public ClientUnifiedMessageHandle(ulong value)
		{
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x23E9AF4", Offset = "0x23E9AF4", VA = "0x23E9AF4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x23E9AFC", Offset = "0x23E9AFC", VA = "0x23E9AFC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0x23E9BC8", Offset = "0x23E9BC8", VA = "0x23E9BC8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x23E9BBC", Offset = "0x23E9BBC", VA = "0x23E9BBC")]
		public static bool operator ==(ClientUnifiedMessageHandle x, ClientUnifiedMessageHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0x23E9BD0", Offset = "0x23E9BD0", VA = "0x23E9BD0")]
		public static bool operator !=(ClientUnifiedMessageHandle x, ClientUnifiedMessageHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0x23E9C44", Offset = "0x23E9C44", VA = "0x23E9C44")]
		public static explicit operator ClientUnifiedMessageHandle(ulong value)
		{
			return default(ClientUnifiedMessageHandle);
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x23E9C48", Offset = "0x23E9C48", VA = "0x23E9C48")]
		public static explicit operator ulong(ClientUnifiedMessageHandle that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x23E9C4C", Offset = "0x23E9C4C", VA = "0x23E9C4C", Slot = "4")]
		public bool Equals(ClientUnifiedMessageHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0x23E9C5C", Offset = "0x23E9C5C", VA = "0x23E9C5C", Slot = "5")]
		public int CompareTo(ClientUnifiedMessageHandle other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000183")]
	public struct SteamLeaderboardEntries_t : IEquatable<SteamLeaderboardEntries_t>, IComparable<SteamLeaderboardEntries_t>
	{
		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamLeaderboardEntries;

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0x2B12448", Offset = "0x2B12448", VA = "0x2B12448")]
		public SteamLeaderboardEntries_t(ulong value)
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x2B12450", Offset = "0x2B12450", VA = "0x2B12450", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x2B12458", Offset = "0x2B12458", VA = "0x2B12458", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0x2B124EC", Offset = "0x2B124EC", VA = "0x2B124EC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0x2B124E0", Offset = "0x2B124E0", VA = "0x2B124E0")]
		public static bool operator ==(SteamLeaderboardEntries_t x, SteamLeaderboardEntries_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0x2B124F4", Offset = "0x2B124F4", VA = "0x2B124F4")]
		public static bool operator !=(SteamLeaderboardEntries_t x, SteamLeaderboardEntries_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0x2B12500", Offset = "0x2B12500", VA = "0x2B12500")]
		public static explicit operator SteamLeaderboardEntries_t(ulong value)
		{
			return default(SteamLeaderboardEntries_t);
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0x2B12504", Offset = "0x2B12504", VA = "0x2B12504")]
		public static explicit operator ulong(SteamLeaderboardEntries_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x2B12508", Offset = "0x2B12508", VA = "0x2B12508", Slot = "4")]
		public bool Equals(SteamLeaderboardEntries_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x2B12518", Offset = "0x2B12518", VA = "0x2B12518", Slot = "5")]
		public int CompareTo(SteamLeaderboardEntries_t other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000184")]
	public struct SteamLeaderboard_t : IEquatable<SteamLeaderboard_t>, IComparable<SteamLeaderboard_t>
	{
		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamLeaderboard;

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0x2B12520", Offset = "0x2B12520", VA = "0x2B12520")]
		public SteamLeaderboard_t(ulong value)
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0x2B12528", Offset = "0x2B12528", VA = "0x2B12528", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0x2B12530", Offset = "0x2B12530", VA = "0x2B12530", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0x2B125C4", Offset = "0x2B125C4", VA = "0x2B125C4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0x2B125B8", Offset = "0x2B125B8", VA = "0x2B125B8")]
		public static bool operator ==(SteamLeaderboard_t x, SteamLeaderboard_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x2B125CC", Offset = "0x2B125CC", VA = "0x2B125CC")]
		public static bool operator !=(SteamLeaderboard_t x, SteamLeaderboard_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0x2B125D8", Offset = "0x2B125D8", VA = "0x2B125D8")]
		public static explicit operator SteamLeaderboard_t(ulong value)
		{
			return default(SteamLeaderboard_t);
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0x2B125DC", Offset = "0x2B125DC", VA = "0x2B125DC")]
		public static explicit operator ulong(SteamLeaderboard_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0x2B125E0", Offset = "0x2B125E0", VA = "0x2B125E0", Slot = "4")]
		public bool Equals(SteamLeaderboard_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0x2B125F0", Offset = "0x2B125F0", VA = "0x2B125F0", Slot = "5")]
		public int CompareTo(SteamLeaderboard_t other)
		{
			return default(int);
		}
	}
}
namespace RootMotion
{
	[Token(Token = "0x2000185")]
	public class CameraController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000329")]
		public enum UpdateMode
		{
			[Token(Token = "0x400130C")]
			Update,
			[Token(Token = "0x400130D")]
			FixedUpdate,
			[Token(Token = "0x400130E")]
			LateUpdate,
			[Token(Token = "0x400130F")]
			FixedLateUpdate
		}

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rotationSpace;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateMode updateMode;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lockCursor;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1252474", Offset = "0x1252474")]
		public bool smoothFollow;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 offset;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float followSpeed;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x12524AC", Offset = "0x12524AC")]
		public float rotationSensitivity;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float yMinLimit;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float yMaxLimit;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool rotateAlways;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool rotateOnLeftButton;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		public bool rotateOnRightButton;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
		public bool rotateOnMiddleButton;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x12524E4", Offset = "0x12524E4")]
		public float distance;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float minDistance;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxDistance;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float zoomSpeed;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float zoomSensitivity;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x125251C", Offset = "0x125251C")]
		public LayerMask blockingLayers;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float blockingRadius;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float blockingSmoothTime;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1252554", Offset = "0x1252554")]
		public float blockedOffset;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125256C", Offset = "0x125256C")]
		private float <x>k__BackingField;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125257C", Offset = "0x125257C")]
		private float <y>k__BackingField;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125258C", Offset = "0x125258C")]
		private float <distanceTarget>k__BackingField;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 targetDistance;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 position;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion rotation;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 smoothPosition;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Camera cam;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool fixedFrame;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float fixedDeltaTime;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion r;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 lastUp;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float blockedDistance;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float blockedDistanceV;

		[Token(Token = "0x17000020")]
		public float x
		{
			[Token(Token = "0x6000A8D")]
			[Address(RVA = "0x1CB06C0", Offset = "0x1CB06C0", VA = "0x1CB06C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260AAC", Offset = "0x1260AAC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A8E")]
			[Address(RVA = "0x1CB06C8", Offset = "0x1CB06C8", VA = "0x1CB06C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260ABC", Offset = "0x1260ABC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000021")]
		public float y
		{
			[Token(Token = "0x6000A8F")]
			[Address(RVA = "0x1CB06D0", Offset = "0x1CB06D0", VA = "0x1CB06D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260ACC", Offset = "0x1260ACC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A90")]
			[Address(RVA = "0x1CB06D8", Offset = "0x1CB06D8", VA = "0x1CB06D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260ADC", Offset = "0x1260ADC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000022")]
		public float distanceTarget
		{
			[Token(Token = "0x6000A91")]
			[Address(RVA = "0x1CB06E0", Offset = "0x1CB06E0", VA = "0x1CB06E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260AEC", Offset = "0x1260AEC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A92")]
			[Address(RVA = "0x1CB06E8", Offset = "0x1CB06E8", VA = "0x1CB06E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260AFC", Offset = "0x1260AFC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000023")]
		private float zoomAdd
		{
			[Token(Token = "0x6000A9A")]
			[Address(RVA = "0x1CB115C", Offset = "0x1CB115C", VA = "0x1CB115C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x1CB06F0", Offset = "0x1CB06F0", VA = "0x1CB06F0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x1CB0818", Offset = "0x1CB0818", VA = "0x1CB0818", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0x1CB0874", Offset = "0x1CB0874", VA = "0x1CB0874", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0x1CB08DC", Offset = "0x1CB08DC", VA = "0x1CB08DC", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x1CB0940", Offset = "0x1CB0940", VA = "0x1CB0940")]
		public void UpdateInput()
		{
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x1CB084C", Offset = "0x1CB084C", VA = "0x1CB084C")]
		public void UpdateTransform()
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x1CB0AC0", Offset = "0x1CB0AC0", VA = "0x1CB0AC0")]
		public void UpdateTransform(float deltaTime)
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x1CB10AC", Offset = "0x1CB10AC", VA = "0x1CB10AC")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x1CB11D0", Offset = "0x1CB11D0", VA = "0x1CB11D0")]
		public CameraController()
		{
		}
	}
	[Token(Token = "0x2000186")]
	public class CameraControllerFPS : MonoBehaviour
	{
		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotationSensitivity;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float yMinLimit;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float yMaxLimit;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float x;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float y;

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x1CB12E0", Offset = "0x1CB12E0", VA = "0x1CB12E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x1CB1318", Offset = "0x1CB1318", VA = "0x1CB1318")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x1CB14D0", Offset = "0x1CB14D0", VA = "0x1CB14D0")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x1CB1580", Offset = "0x1CB1580", VA = "0x1CB1580")]
		public CameraControllerFPS()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000187")]
	public enum Axis
	{
		[Token(Token = "0x40008A7")]
		X,
		[Token(Token = "0x40008A8")]
		Y,
		[Token(Token = "0x40008A9")]
		Z
	}
	[Token(Token = "0x2000188")]
	public class AxisTools
	{
		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0x2712D1C", Offset = "0x2712D1C", VA = "0x2712D1C")]
		public static Vector3 ToVector3(Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x2712DD4", Offset = "0x2712DD4", VA = "0x2712DD4")]
		public static Axis ToAxis(Vector3 v)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0x2712E80", Offset = "0x2712E80", VA = "0x2712E80")]
		public static Axis GetAxisToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0x2713064", Offset = "0x2713064", VA = "0x2713064")]
		public static Axis GetAxisToDirection(Transform t, Vector3 direction)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0x2712F9C", Offset = "0x2712F9C", VA = "0x2712F9C")]
		public static Vector3 GetAxisVectorToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x2713180", Offset = "0x2713180", VA = "0x2713180")]
		public static Vector3 GetAxisVectorToDirection(Transform t, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x27133AC", Offset = "0x27133AC", VA = "0x27133AC")]
		public static Vector3 GetAxisVectorToDirection(Quaternion r, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x2713674", Offset = "0x2713674", VA = "0x2713674")]
		public AxisTools()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000189")]
	public class BipedLimbOrientations
	{
		[Serializable]
		[Token(Token = "0x200032A")]
		public class LimbOrientation
		{
			[Token(Token = "0x4001310")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 upperBoneForwardAxis;

			[Token(Token = "0x4001311")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 lowerBoneForwardAxis;

			[Token(Token = "0x4001312")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 lastBoneLeftAxis;

			[Token(Token = "0x600168C")]
			[Address(RVA = "0x2713974", Offset = "0x2713974", VA = "0x2713974")]
			public LimbOrientation(Vector3 upperBoneForwardAxis, Vector3 lowerBoneForwardAxis, Vector3 lastBoneLeftAxis)
			{
			}
		}

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LimbOrientation leftArm;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbOrientation rightArm;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbOrientation leftLeg;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LimbOrientation rightLeg;

		[Token(Token = "0x17000024")]
		public static BipedLimbOrientations UMA
		{
			[Token(Token = "0x6000AAA")]
			[Address(RVA = "0x27136FC", Offset = "0x27136FC", VA = "0x27136FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000025")]
		public static BipedLimbOrientations MaxBiped
		{
			[Token(Token = "0x6000AAB")]
			[Address(RVA = "0x27139EC", Offset = "0x27139EC", VA = "0x27139EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x271367C", Offset = "0x271367C", VA = "0x271367C")]
		public BipedLimbOrientations(LimbOrientation leftArm, LimbOrientation rightArm, LimbOrientation leftLeg, LimbOrientation rightLeg)
		{
		}
	}
	[Token(Token = "0x200018A")]
	public static class BipedNaming
	{
		[Serializable]
		[Token(Token = "0x200032B")]
		public enum BoneType
		{
			[Token(Token = "0x4001314")]
			Unassigned,
			[Token(Token = "0x4001315")]
			Spine,
			[Token(Token = "0x4001316")]
			Head,
			[Token(Token = "0x4001317")]
			Arm,
			[Token(Token = "0x4001318")]
			Leg,
			[Token(Token = "0x4001319")]
			Tail,
			[Token(Token = "0x400131A")]
			Eye
		}

		[Serializable]
		[Token(Token = "0x200032C")]
		public enum BoneSide
		{
			[Token(Token = "0x400131C")]
			Center,
			[Token(Token = "0x400131D")]
			Left,
			[Token(Token = "0x400131E")]
			Right
		}

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] typeLeft;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] typeRight;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string[] typeSpine;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string[] typeHead;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string[] typeArm;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string[] typeLeg;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static string[] typeTail;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] typeEye;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string[] typeExclude;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static string[] typeExcludeSpine;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static string[] typeExcludeHead;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static string[] typeExcludeArm;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string[] typeExcludeLeg;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static string[] typeExcludeTail;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static string[] typeExcludeEye;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static string[] pelvis;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static string[] hand;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static string[] foot;

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x2713C64", Offset = "0x2713C64", VA = "0x2713C64")]
		public static Transform[] GetBonesOfType(BoneType boneType, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x2713F6C", Offset = "0x2713F6C", VA = "0x2713F6C")]
		public static Transform[] GetBonesOfSide(BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x27141C4", Offset = "0x27141C4", VA = "0x27141C4")]
		public static Transform[] GetBonesOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x2714248", Offset = "0x2714248", VA = "0x2714248")]
		public static Transform GetFirstBoneOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x27142F4", Offset = "0x27142F4", VA = "0x27142F4")]
		public static Transform GetNamingMatch(Transform[] transforms, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x2713E1C", Offset = "0x2713E1C", VA = "0x2713E1C")]
		public static BoneType GetBoneType(string boneName)
		{
			return default(BoneType);
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x2714124", Offset = "0x2714124", VA = "0x2714124")]
		public static BoneSide GetBoneSide(string boneName)
		{
			return default(BoneSide);
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x2714B34", Offset = "0x2714B34", VA = "0x2714B34")]
		public static Transform GetBone(Transform[] transforms, BoneType boneType, BoneSide boneSide = BoneSide.Center, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x271494C", Offset = "0x271494C", VA = "0x271494C")]
		private static bool isLeft(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0x2714A40", Offset = "0x2714A40", VA = "0x2714A40")]
		private static bool isRight(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x2714514", Offset = "0x2714514", VA = "0x2714514")]
		private static bool isSpine(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x27145C8", Offset = "0x27145C8", VA = "0x27145C8")]
		private static bool isHead(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x271467C", Offset = "0x271467C", VA = "0x271467C")]
		private static bool isArm(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x2714730", Offset = "0x2714730", VA = "0x2714730")]
		private static bool isLeg(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x27147E4", Offset = "0x27147E4", VA = "0x27147E4")]
		private static bool isTail(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x2714898", Offset = "0x2714898", VA = "0x2714898")]
		private static bool isEye(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x2714D48", Offset = "0x2714D48", VA = "0x2714D48")]
		private static bool isTypeExclude(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x2714428", Offset = "0x2714428", VA = "0x2714428")]
		private static bool matchesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x2714CB8", Offset = "0x2714CB8", VA = "0x2714CB8")]
		private static bool excludesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x2714DB8", Offset = "0x2714DB8", VA = "0x2714DB8")]
		private static bool matchesLastLetter(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x2714E90", Offset = "0x2714E90", VA = "0x2714E90")]
		private static bool LastLetterIs(string boneName, string letter)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0x2714C3C", Offset = "0x2714C3C", VA = "0x2714C3C")]
		private static string firstLetter(string boneName)
		{
			return null;
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0x2714BC4", Offset = "0x2714BC4", VA = "0x2714BC4")]
		private static string lastLetter(string boneName)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200018B")]
	public class BipedReferences
	{
		[Token(Token = "0x200032D")]
		public struct AutoDetectParams
		{
			[Token(Token = "0x400131F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool legsParentInSpine;

			[Token(Token = "0x4001320")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool includeEyes;

			[Token(Token = "0x1700013E")]
			public static AutoDetectParams Default
			{
				[Token(Token = "0x600168E")]
				[Address(RVA = "0x1CB06B8", Offset = "0x1CB06B8", VA = "0x1CB06B8")]
				get
				{
					return default(AutoDetectParams);
				}
			}

			[Token(Token = "0x600168D")]
			[Address(RVA = "0x1CB06A4", Offset = "0x1CB06A4", VA = "0x1CB06A4")]
			public AutoDetectParams(bool legsParentInSpine, bool includeEyes)
			{
			}
		}

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform root;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform pelvis;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform leftThigh;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftCalf;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftFoot;

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rightThigh;

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform rightCalf;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform rightFoot;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform leftUpperArm;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftForearm;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform leftHand;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform rightUpperArm;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform rightForearm;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform rightHand;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform head;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] spine;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform[] eyes;

		[Token(Token = "0x17000026")]
		public virtual bool isFilled
		{
			[Token(Token = "0x6000AC4")]
			[Address(RVA = "0x2717228", Offset = "0x2717228", VA = "0x2717228", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000027")]
		public bool isEmpty
		{
			[Token(Token = "0x6000AC5")]
			[Address(RVA = "0x2717614", Offset = "0x2717614", VA = "0x2717614")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0x2717624", Offset = "0x2717624", VA = "0x2717624", Slot = "5")]
		public virtual bool IsEmpty(bool includeRoot)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x2717A50", Offset = "0x2717A50", VA = "0x2717A50", Slot = "6")]
		public virtual bool Contains(Transform t, bool ignoreRoot = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x2717E88", Offset = "0x2717E88", VA = "0x2717E88")]
		public static bool AutoDetectReferences(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x2718594", Offset = "0x2718594", VA = "0x2718594")]
		public static void DetectReferencesByNaming(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x2718104", Offset = "0x2718104", VA = "0x2718104")]
		public static void AssignHumanoidReferences(ref BipedReferences references, Animator animator, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x2718DC8", Offset = "0x2718DC8", VA = "0x2718DC8")]
		public static bool SetupError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0x2718EC8", Offset = "0x2718EC8", VA = "0x2718EC8")]
		public static bool SetupWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x271947C", Offset = "0x271947C", VA = "0x271947C")]
		private static bool IsNeckBone(Transform bone, Transform leftUpperArm)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0x271926C", Offset = "0x271926C", VA = "0x271926C")]
		private static bool AddBoneToEyes(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x27190E4", Offset = "0x27190E4", VA = "0x27190E4")]
		private static bool AddBoneToSpine(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0x2718F68", Offset = "0x2718F68", VA = "0x2718F68")]
		private static void DetectLimb(BipedNaming.BoneType boneType, BipedNaming.BoneSide boneSide, ref Transform firstBone, ref Transform secondBone, ref Transform lastBone, Transform[] transforms)
		{
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x2719370", Offset = "0x2719370", VA = "0x2719370")]
		private static void AddBoneToHierarchy(ref Transform[] bones, Transform transform)
		{
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0x2719578", Offset = "0x2719578", VA = "0x2719578")]
		private static bool LimbError(Transform bone1, Transform bone2, Transform bone3, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x271A0DC", Offset = "0x271A0DC", VA = "0x271A0DC")]
		private static bool LimbWarning(Transform bone1, Transform bone2, Transform bone3, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0x2719BA8", Offset = "0x2719BA8", VA = "0x2719BA8")]
		private static bool SpineError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0x271A424", Offset = "0x271A424", VA = "0x271A424")]
		private static bool SpineWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0x2719EF4", Offset = "0x2719EF4", VA = "0x2719EF4")]
		private static bool EyesError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0x271A42C", Offset = "0x271A42C", VA = "0x271A42C")]
		private static bool EyesWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0x271A434", Offset = "0x271A434", VA = "0x271A434")]
		private static bool RootHeightWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0x271A600", Offset = "0x271A600", VA = "0x271A600")]
		private static bool FacingAxisWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0x271A824", Offset = "0x271A824", VA = "0x271A824")]
		private static float GetVerticalOffset(Vector3 p1, Vector3 p2, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x271807C", Offset = "0x271807C", VA = "0x271807C")]
		public BipedReferences()
		{
		}
	}
	[Token(Token = "0x200018C")]
	public class Comments : MonoBehaviour
	{
		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Multiline]
		public string text;

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x1CB159C", Offset = "0x1CB159C", VA = "0x1CB159C")]
		public Comments()
		{
		}
	}
	[Token(Token = "0x200018D")]
	public class DemoGUIMessage : MonoBehaviour
	{
		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color color;

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x1CB15A4", Offset = "0x1CB15A4", VA = "0x1CB15A4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x1CB16E4", Offset = "0x1CB16E4", VA = "0x1CB16E4")]
		public DemoGUIMessage()
		{
		}
	}
	[Token(Token = "0x200018E")]
	public class Hierarchy
	{
		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x23E1950", Offset = "0x23E1950", VA = "0x23E1950")]
		public static bool HierarchyIsValid(Transform[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x23E1B50", Offset = "0x23E1B50", VA = "0x23E1B50")]
		public static UnityEngine.Object ContainsDuplicate(UnityEngine.Object[] objects)
		{
			return null;
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x23E19E8", Offset = "0x23E19E8", VA = "0x23E19E8")]
		public static bool IsAncestor(Transform transform, Transform ancestor)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x23E1C74", Offset = "0x23E1C74", VA = "0x23E1C74")]
		public static bool ContainsChild(Transform transform, Transform child)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x23E1D98", Offset = "0x23E1D98", VA = "0x23E1D98")]
		public static void AddAncestors(Transform transform, Transform blocker, ref Transform[] array)
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x23E2048", Offset = "0x23E2048", VA = "0x23E2048")]
		public static Transform GetAncestor(Transform transform, int minChildCount)
		{
			return null;
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x23E2164", Offset = "0x23E2164", VA = "0x23E2164")]
		public static Transform GetFirstCommonAncestor(Transform t1, Transform t2)
		{
			return null;
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x23E22EC", Offset = "0x23E22EC", VA = "0x23E22EC")]
		public static Transform GetFirstCommonAncestor(Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x23E2680", Offset = "0x23E2680", VA = "0x23E2680")]
		public static Transform GetFirstCommonAncestorRecursive(Transform transform, Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x23E246C", Offset = "0x23E246C", VA = "0x23E246C")]
		public static bool IsCommonAncestor(Transform transform, Transform[] transforms)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x23E2820", Offset = "0x23E2820", VA = "0x23E2820")]
		public Hierarchy()
		{
		}
	}
	[Token(Token = "0x200018F")]
	public class InspectorComment : PropertyAttribute
	{
		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string color;

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x23E2828", Offset = "0x23E2828", VA = "0x23E2828")]
		public InspectorComment(string name)
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x23E28B8", Offset = "0x23E28B8", VA = "0x23E28B8")]
		public InspectorComment(string name, string color)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000190")]
	public enum InterpolationMode
	{
		[Token(Token = "0x40008D7")]
		None,
		[Token(Token = "0x40008D8")]
		InOutCubic,
		[Token(Token = "0x40008D9")]
		InOutQuintic,
		[Token(Token = "0x40008DA")]
		InOutSine,
		[Token(Token = "0x40008DB")]
		InQuintic,
		[Token(Token = "0x40008DC")]
		InQuartic,
		[Token(Token = "0x40008DD")]
		InCubic,
		[Token(Token = "0x40008DE")]
		InQuadratic,
		[Token(Token = "0x40008DF")]
		InElastic,
		[Token(Token = "0x40008E0")]
		InElasticSmall,
		[Token(Token = "0x40008E1")]
		InElasticBig,
		[Token(Token = "0x40008E2")]
		InSine,
		[Token(Token = "0x40008E3")]
		InBack,
		[Token(Token = "0x40008E4")]
		OutQuintic,
		[Token(Token = "0x40008E5")]
		OutQuartic,
		[Token(Token = "0x40008E6")]
		OutCubic,
		[Token(Token = "0x40008E7")]
		OutInCubic,
		[Token(Token = "0x40008E8")]
		OutInQuartic,
		[Token(Token = "0x40008E9")]
		OutElastic,
		[Token(Token = "0x40008EA")]
		OutElasticSmall,
		[Token(Token = "0x40008EB")]
		OutElasticBig,
		[Token(Token = "0x40008EC")]
		OutSine,
		[Token(Token = "0x40008ED")]
		OutBack,
		[Token(Token = "0x40008EE")]
		OutBackCubic,
		[Token(Token = "0x40008EF")]
		OutBackQuartic,
		[Token(Token = "0x40008F0")]
		BackInCubic,
		[Token(Token = "0x40008F1")]
		BackInQuartic
	}
	[Token(Token = "0x2000191")]
	public class Interp
	{
		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x23E294C", Offset = "0x23E294C", VA = "0x23E294C")]
		public static float Float(float t, InterpolationMode mode)
		{
			return default(float);
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x23E33B4", Offset = "0x23E33B4", VA = "0x23E33B4")]
		public static Vector3 V3(Vector3 v1, Vector3 v2, float t, InterpolationMode mode)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x23E34BC", Offset = "0x23E34BC", VA = "0x23E34BC")]
		public static float LerpValue(float value, float target, float increaseSpeed, float decreaseSpeed)
		{
			return default(float);
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x23E2CB8", Offset = "0x23E2CB8", VA = "0x23E2CB8")]
		private static float None(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0x23E2CC4", Offset = "0x23E2CC4", VA = "0x23E2CC4")]
		private static float InOutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x23E2CE8", Offset = "0x23E2CE8", VA = "0x23E2CE8")]
		private static float InOutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x23E2D24", Offset = "0x23E2D24", VA = "0x23E2D24")]
		private static float InQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x23E2D3C", Offset = "0x23E2D3C", VA = "0x23E2D3C")]
		private static float InQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x23E2D50", Offset = "0x23E2D50", VA = "0x23E2D50")]
		private static float InCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x23E2D64", Offset = "0x23E2D64", VA = "0x23E2D64")]
		private static float InQuadratic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x23E2D74", Offset = "0x23E2D74", VA = "0x23E2D74")]
		private static float OutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x23E2DBC", Offset = "0x23E2DBC", VA = "0x23E2DBC")]
		private static float OutQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0x23E2DF4", Offset = "0x23E2DF4", VA = "0x23E2DF4")]
		private static float OutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0x23E2E1C", Offset = "0x23E2E1C", VA = "0x23E2E1C")]
		private static float OutInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x23E35B8", Offset = "0x23E35B8", VA = "0x23E35B8")]
		private static float OutInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x23E2E50", Offset = "0x23E2E50", VA = "0x23E2E50")]
		private static float BackInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x23E2E78", Offset = "0x23E2E78", VA = "0x23E2E78")]
		private static float BackInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x23E2EA8", Offset = "0x23E2EA8", VA = "0x23E2EA8")]
		private static float OutBackCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x23E2EDC", Offset = "0x23E2EDC", VA = "0x23E2EDC")]
		private static float OutBackQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x23E2F20", Offset = "0x23E2F20", VA = "0x23E2F20")]
		private static float OutElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0x23E2F84", Offset = "0x23E2F84", VA = "0x23E2F84")]
		private static float OutElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x23E2FE8", Offset = "0x23E2FE8", VA = "0x23E2FE8")]
		private static float InElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x23E303C", Offset = "0x23E303C", VA = "0x23E303C")]
		private static float InElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x23E3090", Offset = "0x23E3090", VA = "0x23E3090")]
		private static float InSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x23E3128", Offset = "0x23E3128", VA = "0x23E3128")]
		private static float OutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x23E31BC", Offset = "0x23E31BC", VA = "0x23E31BC")]
		private static float InOutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x23E35EC", Offset = "0x23E35EC", VA = "0x23E35EC")]
		private static float InElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x23E3260", Offset = "0x23E3260", VA = "0x23E3260")]
		private static float OutElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x23E3344", Offset = "0x23E3344", VA = "0x23E3344")]
		private static float InBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x23E3374", Offset = "0x23E3374", VA = "0x23E3374")]
		private static float OutBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x23E36D4", Offset = "0x23E36D4", VA = "0x23E36D4")]
		public Interp()
		{
		}
	}
	[Token(Token = "0x2000192")]
	public class LargeHeader : PropertyAttribute
	{
		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string color;

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x23E36DC", Offset = "0x23E36DC", VA = "0x23E36DC")]
		public LargeHeader(string name)
		{
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0x23E376C", Offset = "0x23E376C", VA = "0x23E376C")]
		public LargeHeader(string name, string color)
		{
		}
	}
	[Token(Token = "0x2000193")]
	public static class LayerMaskExtensions
	{
		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x23E3800", Offset = "0x23E3800", VA = "0x23E3800")]
		public static bool Contains(LayerMask mask, int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x23E3858", Offset = "0x23E3858", VA = "0x23E3858")]
		public static LayerMask Create(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x23E3924", Offset = "0x23E3924", VA = "0x23E3924")]
		public static LayerMask Create(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x23E3870", Offset = "0x23E3870", VA = "0x23E3870")]
		public static LayerMask NamesToMask(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x23E393C", Offset = "0x23E393C", VA = "0x23E393C")]
		public static LayerMask LayerNumbersToMask(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x23E39E0", Offset = "0x23E39E0", VA = "0x23E39E0")]
		public static LayerMask Inverse(this LayerMask original)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x23E3A0C", Offset = "0x23E3A0C", VA = "0x23E3A0C")]
		public static LayerMask AddToMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0x23E3A5C", Offset = "0x23E3A5C", VA = "0x23E3A5C")]
		public static LayerMask RemoveFromMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0x23E3AC8", Offset = "0x23E3AC8", VA = "0x23E3AC8")]
		public static string[] MaskToNames(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x23E3BBC", Offset = "0x23E3BBC", VA = "0x23E3BBC")]
		public static int[] MaskToNumbers(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x23E3C94", Offset = "0x23E3C94", VA = "0x23E3C94")]
		public static string MaskToString(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0x23E3CF4", Offset = "0x23E3CF4", VA = "0x23E3CF4")]
		public static string MaskToString(this LayerMask original, string delimiter)
		{
			return null;
		}
	}
	[Token(Token = "0x2000194")]
	public static class QuaTools
	{
		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x23E3D24", Offset = "0x23E3D24", VA = "0x23E3D24")]
		public static Quaternion Lerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0x23E3E70", Offset = "0x23E3E70", VA = "0x23E3E70")]
		public static Quaternion Slerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x23E3FBC", Offset = "0x23E3FBC", VA = "0x23E3FBC")]
		public static Quaternion LinearBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x23E40D0", Offset = "0x23E40D0", VA = "0x23E40D0")]
		public static Quaternion SphericalBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x23E41E4", Offset = "0x23E41E4", VA = "0x23E41E4")]
		public static Quaternion FromToAroundAxis(Vector3 fromDirection, Vector3 toDirection, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x23E4370", Offset = "0x23E4370", VA = "0x23E4370")]
		public static Quaternion RotationToLocalSpace(Quaternion space, Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x23E4440", Offset = "0x23E4440", VA = "0x23E4440")]
		public static Quaternion FromToRotation(Quaternion from, Quaternion to)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x23E4594", Offset = "0x23E4594", VA = "0x23E4594")]
		public static Vector3 GetAxis(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x23E4818", Offset = "0x23E4818", VA = "0x23E4818")]
		public static Quaternion ClampRotation(Quaternion rotation, float clampWeight, int clampSmoothing)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x23E4A2C", Offset = "0x23E4A2C", VA = "0x23E4A2C")]
		public static float ClampAngle(float angle, float clampWeight, int clampSmoothing)
		{
			return default(float);
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x23DF5F4", Offset = "0x23DF5F4", VA = "0x23DF5F4")]
		public static Quaternion MatchRotation(Quaternion targetRotation, Vector3 targetforwardAxis, Vector3 targetUpAxis, Vector3 forwardAxis, Vector3 upAxis)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x2000195")]
	public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T>
	{
		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T sInstance;

		[Token(Token = "0x17000028")]
		public static T instance
		{
			[Token(Token = "0x6000B24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B25")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000B26")]
		protected Singleton()
		{
		}
	}
	[Token(Token = "0x2000196")]
	public class SolverManager : MonoBehaviour
	{
		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12525AC", Offset = "0x12525AC")]
		public bool fixTransforms;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animation legacy;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool updateFrame;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool componentInitiated;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool skipSolverUpdate;

		[Token(Token = "0x17000029")]
		private bool animatePhysics
		{
			[Token(Token = "0x6000B2E")]
			[Address(RVA = "0x23E4CE4", Offset = "0x23E4CE4", VA = "0x23E4CE4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700002A")]
		private bool isAnimated
		{
			[Token(Token = "0x6000B32")]
			[Address(RVA = "0x23E5018", Offset = "0x23E5018", VA = "0x23E5018")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x23E4BAC", Offset = "0x23E4BAC", VA = "0x23E4BAC")]
		public void Disable()
		{
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x23E4C44", Offset = "0x23E4C44", VA = "0x23E4C44", Slot = "4")]
		protected virtual void InitiateSolver()
		{
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x23E4C48", Offset = "0x23E4C48", VA = "0x23E4C48", Slot = "5")]
		protected virtual void UpdateSolver()
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x23E4C4C", Offset = "0x23E4C4C", VA = "0x23E4C4C", Slot = "6")]
		protected virtual void FixTransforms()
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x23E4C50", Offset = "0x23E4C50", VA = "0x23E4C50")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x23E4CE0", Offset = "0x23E4CE0", VA = "0x23E4CE0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0x23E4C88", Offset = "0x23E4C88", VA = "0x23E4C88")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x23E4FCC", Offset = "0x23E4FCC", VA = "0x23E4FCC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0x23E4DD4", Offset = "0x23E4DD4", VA = "0x23E4DD4")]
		private void FindAnimatorRecursive(Transform t, bool findInChildren)
		{
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x23E50D4", Offset = "0x23E50D4", VA = "0x23E50D4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x23E5130", Offset = "0x23E5130", VA = "0x23E5130")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x23E518C", Offset = "0x23E518C", VA = "0x23E518C")]
		public void UpdateSolverExternal()
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x23E51D4", Offset = "0x23E51D4", VA = "0x23E51D4")]
		public SolverManager()
		{
		}
	}
	[Token(Token = "0x2000197")]
	public class TriggerEventBroadcaster : MonoBehaviour
	{
		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject target;

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x23E51E4", Offset = "0x23E51E4", VA = "0x23E51E4")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0x23E529C", Offset = "0x23E529C", VA = "0x23E529C")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0x23E5354", Offset = "0x23E5354", VA = "0x23E5354")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x23E540C", Offset = "0x23E540C", VA = "0x23E540C")]
		public TriggerEventBroadcaster()
		{
		}
	}
	[Token(Token = "0x2000198")]
	public static class V3Tools
	{
		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x23E5414", Offset = "0x23E5414", VA = "0x23E5414")]
		public static Vector3 Lerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x23E550C", Offset = "0x23E550C", VA = "0x23E550C")]
		public static Vector3 Slerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x23E5604", Offset = "0x23E5604", VA = "0x23E5604")]
		public static Vector3 ExtractVertical(Vector3 v, Vector3 verticalAxis, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x23E56FC", Offset = "0x23E56FC", VA = "0x23E56FC")]
		public static Vector3 ExtractHorizontal(Vector3 v, Vector3 normal, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x23E57FC", Offset = "0x23E57FC", VA = "0x23E57FC")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out bool changed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0x23E5A38", Offset = "0x23E5A38", VA = "0x23E5A38")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out float clampValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x23E5C88", Offset = "0x23E5C88", VA = "0x23E5C88")]
		public static Vector3 LineToPlane(Vector3 origin, Vector3 direction, Vector3 planeNormal, Vector3 planePoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0x23E5E88", Offset = "0x23E5E88", VA = "0x23E5E88")]
		public static Vector3 PointToPlane(Vector3 point, Vector3 planePosition, Vector3 planeNormal)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000199")]
	public static class Warning
	{
		[Token(Token = "0x200032E")]
		public delegate void Logger(string message);

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool logged;

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x23E6064", Offset = "0x23E6064", VA = "0x23E6064")]
		public static void Log(string message, Logger logger, bool logInEditMode = false)
		{
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x23D77E0", Offset = "0x23D77E0", VA = "0x23D77E0")]
		public static void Log(string message, Transform context, bool logInEditMode = false)
		{
		}
	}
}
namespace RootMotion.Dynamics
{
	[Token(Token = "0x200019A")]
	public class AnimationBlocker : MonoBehaviour
	{
		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x1A77E60", Offset = "0x1A77E60", VA = "0x1A77E60")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x1A77F38", Offset = "0x1A77F38", VA = "0x1A77F38")]
		public AnimationBlocker()
		{
		}
	}
	[Token(Token = "0x200019B")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x124EB00", Offset = "0x124EB00")]
	public class BehaviourAnimatedStagger : BehaviourBase
	{
		[Serializable]
		[Token(Token = "0x200032F")]
		public struct FallParams
		{
			[Token(Token = "0x4001321")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float startPinWeightMlp;

			[Token(Token = "0x4001322")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float startMuscleWeightMlp;

			[Token(Token = "0x4001323")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float losePinSpeed;
		}

		[Serializable]
		[Token(Token = "0x2000330")]
		public struct FallParamsGroup
		{
			[Token(Token = "0x4001324")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Muscle.Group[] groups;

			[Token(Token = "0x4001325")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public FallParams fallParams;
		}

		[Token(Token = "0x2000331")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251B18", Offset = "0x1251B18")]
		private sealed class <LoseBalance>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001326")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001327")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001328")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BehaviourAnimatedStagger <>4__this;

			[Token(Token = "0x4001329")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private bool <done>5__2;

			[Token(Token = "0x1700013F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001696")]
				[Address(RVA = "0x1A78B7C", Offset = "0x1A78B7C", VA = "0x1A78B7C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000140")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001698")]
				[Address(RVA = "0x1A78BE4", Offset = "0x1A78BE4", VA = "0x1A78BE4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001693")]
			[Address(RVA = "0x1A78010", Offset = "0x1A78010", VA = "0x1A78010")]
			[DebuggerHidden]
			public <LoseBalance>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x6001694")]
			[Address(RVA = "0x1A7813C", Offset = "0x1A7813C", VA = "0x1A7813C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001695")]
			[Address(RVA = "0x1A78140", Offset = "0x1A78140", VA = "0x1A78140", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001697")]
			[Address(RVA = "0x1A78B84", Offset = "0x1A78B84", VA = "0x1A78B84", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x12525E4", Offset = "0x12525E4")]
		public LayerMask groundLayers;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public float animationBlendSpeed;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public float animationMag;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public float momentumMag;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public float unbalancedMuscleWeightMlp;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float unbalancedMuscleDamperAdd;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public bool dropProps;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public float maxGetUpVelocity;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float minHipHeight;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public SubBehaviourCOM centerOfMass;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x125261C", Offset = "0x125261C")]
		public FallParams defaults;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public FallParamsGroup[] groupOverrides;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1252654", Offset = "0x1252654")]
		public PuppetEvent onUngrounded;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public PuppetEvent onFallOver;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public PuppetEvent onRest;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[HideInInspector]
		public Vector3 moveVector;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		[HideInInspector]
		public bool isGrounded;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[HideInInspector]
		public Vector3 forward;

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x1A77F40", Offset = "0x1A77F40", VA = "0x1A77F40", Slot = "15")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x1A77F64", Offset = "0x1A77F64", VA = "0x1A77F64", Slot = "13")]
		protected override void OnActivate()
		{
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x1A7800C", Offset = "0x1A7800C", VA = "0x1A7800C", Slot = "4")]
		public override void OnReactivate()
		{
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x1A77F90", Offset = "0x1A77F90", VA = "0x1A77F90")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1260B7C", Offset = "0x1260B7C")]
		private IEnumerator LoseBalance()
		{
			return null;
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x1A7803C", Offset = "0x1A7803C", VA = "0x1A7803C")]
		private FallParams GetFallParams(Muscle.Group group)
		{
			return default(FallParams);
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x1A78100", Offset = "0x1A78100", VA = "0x1A78100")]
		public BehaviourAnimatedStagger()
		{
		}
	}
	[Token(Token = "0x200019C")]
	public abstract class BehaviourBase : MonoBehaviour
	{
		[Token(Token = "0x2000332")]
		public delegate void BehaviourDelegate();

		[Token(Token = "0x2000333")]
		public delegate void HitDelegate(MuscleHit hit);

		[Token(Token = "0x2000334")]
		public delegate void CollisionDelegate(MuscleCollision collision);

		[Serializable]
		[Token(Token = "0x2000335")]
		public struct PuppetEvent
		{
			[Token(Token = "0x400132A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C894", Offset = "0x125C894")]
			public string switchToBehaviour;

			[Token(Token = "0x400132B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C8CC", Offset = "0x125C8CC")]
			public AnimatorEvent[] animations;

			[Token(Token = "0x400132C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C904", Offset = "0x125C904")]
			public UnityEvent unityEvent;

			[Token(Token = "0x400132D")]
			private const string empty = "";

			[Token(Token = "0x17000141")]
			public bool switchBehaviour
			{
				[Token(Token = "0x60016A5")]
				[Address(RVA = "0x1A78AF4", Offset = "0x1A78AF4", VA = "0x1A78AF4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60016A6")]
			[Address(RVA = "0x1A788BC", Offset = "0x1A788BC", VA = "0x1A788BC")]
			public void Trigger(PuppetMaster puppetMaster, bool switchBehaviourEnabled = true)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000336")]
		public class AnimatorEvent
		{
			[Token(Token = "0x400132E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string animationState;

			[Token(Token = "0x400132F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float crossfadeTime;

			[Token(Token = "0x4001330")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int layer;

			[Token(Token = "0x4001331")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool resetNormalizedTime;

			[Token(Token = "0x4001332")]
			private const string empty = "";

			[Token(Token = "0x60016A7")]
			[Address(RVA = "0x1A7AF54", Offset = "0x1A7AF54", VA = "0x1A7AF54")]
			public void Activate(Animator animator, Animation animation)
			{
			}

			[Token(Token = "0x60016A8")]
			[Address(RVA = "0x1A7B028", Offset = "0x1A7B028", VA = "0x1A7B028")]
			private void Activate(Animator animator)
			{
			}

			[Token(Token = "0x60016A9")]
			[Address(RVA = "0x1A7B12C", Offset = "0x1A7B12C", VA = "0x1A7B12C")]
			private void Activate(Animation animation)
			{
			}

			[Token(Token = "0x60016AA")]
			[Address(RVA = "0x1A7B20C", Offset = "0x1A7B20C", VA = "0x1A7B20C")]
			public AnimatorEvent()
			{
			}
		}

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public PuppetMaster puppetMaster;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BehaviourDelegate OnPreActivate;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BehaviourDelegate OnPreInitiate;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BehaviourDelegate OnPreFixedUpdate;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BehaviourDelegate OnPreUpdate;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BehaviourDelegate OnPreLateUpdate;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BehaviourDelegate OnPreDeactivate;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public BehaviourDelegate OnPreFixTransforms;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BehaviourDelegate OnPreRead;

		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public BehaviourDelegate OnPreWrite;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public HitDelegate OnPreMuscleHit;

		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public CollisionDelegate OnPreMuscleCollision;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public CollisionDelegate OnPreMuscleCollisionExit;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public BehaviourDelegate OnHierarchyChanged;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public BehaviourDelegate OnPostActivate;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public BehaviourDelegate OnPostInitiate;

		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public BehaviourDelegate OnPostFixedUpdate;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public BehaviourDelegate OnPostUpdate;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public BehaviourDelegate OnPostLateUpdate;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public BehaviourDelegate OnPostDeactivate;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public BehaviourDelegate OnPostDrawGizmos;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public BehaviourDelegate OnPostFixTransforms;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public BehaviourDelegate OnPostRead;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public BehaviourDelegate OnPostWrite;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public HitDelegate OnPostMuscleHit;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public CollisionDelegate OnPostMuscleCollision;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public CollisionDelegate OnPostMuscleCollisionExit;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[HideInInspector]
		public bool deactivated;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12526DC", Offset = "0x12526DC")]
		private bool <forceActive>k__BackingField;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
		private bool initiated;

		[Token(Token = "0x1700002B")]
		public bool forceActive
		{
			[Token(Token = "0x6000B63")]
			[Address(RVA = "0x1A78E64", Offset = "0x1A78E64", VA = "0x1A78E64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260BE0", Offset = "0x1260BE0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B64")]
			[Address(RVA = "0x1A78E6C", Offset = "0x1A78E6C", VA = "0x1A78E6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260BF0", Offset = "0x1260BF0")]
			protected set
			{
			}
		}

		[Token(Token = "0x6000B4D")]
		public abstract void OnReactivate();

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x1A78BEC", Offset = "0x1A78BEC", VA = "0x1A78BEC", Slot = "5")]
		public virtual void Resurrect()
		{
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x1A78BF0", Offset = "0x1A78BF0", VA = "0x1A78BF0", Slot = "6")]
		public virtual void Freeze()
		{
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x1A78BF4", Offset = "0x1A78BF4", VA = "0x1A78BF4", Slot = "7")]
		public virtual void Unfreeze()
		{
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x1A78BF8", Offset = "0x1A78BF8", VA = "0x1A78BF8", Slot = "8")]
		public virtual void KillStart()
		{
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x1A78BFC", Offset = "0x1A78BFC", VA = "0x1A78BFC", Slot = "9")]
		public virtual void KillEnd()
		{
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x1A78C00", Offset = "0x1A78C00", VA = "0x1A78C00", Slot = "10")]
		public virtual void OnTeleport(Quaternion deltaRotation, Vector3 deltaPosition, Vector3 pivot, bool moveToTarget)
		{
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x1A78C04", Offset = "0x1A78C04", VA = "0x1A78C04", Slot = "11")]
		public virtual void OnMuscleAdded(Muscle m)
		{
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x1A78E20", Offset = "0x1A78E20", VA = "0x1A78E20", Slot = "12")]
		public virtual void OnMuscleRemoved(Muscle m)
		{
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x1A78E30", Offset = "0x1A78E30", VA = "0x1A78E30", Slot = "13")]
		protected virtual void OnActivate()
		{
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x1A78E34", Offset = "0x1A78E34", VA = "0x1A78E34", Slot = "14")]
		protected virtual void OnDeactivate()
		{
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x1A78E38", Offset = "0x1A78E38", VA = "0x1A78E38", Slot = "15")]
		protected virtual void OnInitiate()
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x1A78E3C", Offset = "0x1A78E3C", VA = "0x1A78E3C", Slot = "16")]
		protected virtual void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x1A78E40", Offset = "0x1A78E40", VA = "0x1A78E40", Slot = "17")]
		protected virtual void OnUpdate()
		{
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0x1A78E44", Offset = "0x1A78E44", VA = "0x1A78E44", Slot = "18")]
		protected virtual void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x1A78E48", Offset = "0x1A78E48", VA = "0x1A78E48", Slot = "19")]
		protected virtual void OnDrawGizmosBehaviour()
		{
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x1A78E4C", Offset = "0x1A78E4C", VA = "0x1A78E4C", Slot = "20")]
		protected virtual void OnFixTransformsBehaviour()
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x1A78E50", Offset = "0x1A78E50", VA = "0x1A78E50", Slot = "21")]
		protected virtual void OnReadBehaviour()
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x1A78E54", Offset = "0x1A78E54", VA = "0x1A78E54", Slot = "22")]
		protected virtual void OnWriteBehaviour()
		{
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x1A78E58", Offset = "0x1A78E58", VA = "0x1A78E58", Slot = "23")]
		protected virtual void OnMuscleHitBehaviour(MuscleHit hit)
		{
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x1A78E5C", Offset = "0x1A78E5C", VA = "0x1A78E5C", Slot = "24")]
		protected virtual void OnMuscleCollisionBehaviour(MuscleCollision collision)
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x1A78E60", Offset = "0x1A78E60", VA = "0x1A78E60", Slot = "25")]
		protected virtual void OnMuscleCollisionExitBehaviour(MuscleCollision collision)
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x1A78E78", Offset = "0x1A78E78", VA = "0x1A78E78")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x1A78ED0", Offset = "0x1A78ED0", VA = "0x1A78ED0")]
		public void OnFixTransforms()
		{
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x1A78F34", Offset = "0x1A78F34", VA = "0x1A78F34")]
		public void OnRead()
		{
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x1A78F98", Offset = "0x1A78F98", VA = "0x1A78F98")]
		public void OnWrite()
		{
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x1A78FFC", Offset = "0x1A78FFC", VA = "0x1A78FFC")]
		public void OnMuscleHit(MuscleHit hit)
		{
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x1A7934C", Offset = "0x1A7934C", VA = "0x1A7934C")]
		public void OnMuscleCollision(MuscleCollision collision)
		{
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0x1A79710", Offset = "0x1A79710", VA = "0x1A79710")]
		public void OnMuscleCollisionExit(MuscleCollision collision)
		{
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0x1A797B8", Offset = "0x1A797B8", VA = "0x1A797B8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x1A797C8", Offset = "0x1A797C8", VA = "0x1A797C8")]
		public void Activate()
		{
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x1A798E8", Offset = "0x1A798E8", VA = "0x1A798E8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x1A79938", Offset = "0x1A79938", VA = "0x1A79938")]
		public void FixedUpdateB()
		{
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x1A799E8", Offset = "0x1A799E8", VA = "0x1A799E8")]
		public void UpdateB()
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x1A79A98", Offset = "0x1A79A98", VA = "0x1A79A98")]
		public void LateUpdateB()
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x1A79B48", Offset = "0x1A79B48", VA = "0x1A79B48", Slot = "26")]
		protected virtual void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x1A79B88", Offset = "0x1A79B88", VA = "0x1A79B88")]
		protected void RotateTargetToRootMuscle()
		{
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x1A79D20", Offset = "0x1A79D20", VA = "0x1A79D20")]
		protected void TranslateTargetToRootMuscle(float maintainY)
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x1A78814", Offset = "0x1A78814", VA = "0x1A78814")]
		protected void RemoveMusclesOfGroup(Muscle.Group group)
		{
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x1A7ACF4", Offset = "0x1A7ACF4", VA = "0x1A7ACF4", Slot = "27")]
		protected virtual void GroundTarget(LayerMask layers)
		{
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x1A7AC74", Offset = "0x1A7AC74", VA = "0x1A7AC74")]
		protected bool MusclesContainsGroup(Muscle.Group group)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x1A78134", Offset = "0x1A78134", VA = "0x1A78134")]
		protected BehaviourBase()
		{
		}
	}
	[Token(Token = "0x200019D")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x124EB38", Offset = "0x124EB38")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x124EB38", Offset = "0x124EB38")]
	public class BehaviourFall : BehaviourBase
	{
		[Token(Token = "0x2000337")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251B28", Offset = "0x1251B28")]
		private sealed class <SmoothActivate>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001333")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001334")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001335")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BehaviourFall <>4__this;

			[Token(Token = "0x4001336")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <fader>5__2;

			[Token(Token = "0x17000142")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016AE")]
				[Address(RVA = "0x1A7C0C4", Offset = "0x1A7C0C4", VA = "0x1A7C0C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000143")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016B0")]
				[Address(RVA = "0x1A7C12C", Offset = "0x1A7C12C", VA = "0x1A7C12C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016AB")]
			[Address(RVA = "0x1A7B698", Offset = "0x1A7B698", VA = "0x1A7B698")]
			[DebuggerHidden]
			public <SmoothActivate>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x60016AC")]
			[Address(RVA = "0x1A7BEE0", Offset = "0x1A7BEE0", VA = "0x1A7BEE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016AD")]
			[Address(RVA = "0x1A7BEE4", Offset = "0x1A7BEE4", VA = "0x1A7BEE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016AF")]
			[Address(RVA = "0x1A7C0CC", Offset = "0x1A7C0CC", VA = "0x1A7C0CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x12526EC", Offset = "0x12526EC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12526EC", Offset = "0x12526EC")]
		public string stateName;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125274C", Offset = "0x125274C")]
		public float transitionDuration;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252784", Offset = "0x1252784")]
		public int layer;

		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12527BC", Offset = "0x12527BC")]
		public float fixedTime;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x12527F4", Offset = "0x12527F4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12527F4", Offset = "0x12527F4")]
		public LayerMask raycastLayers;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252854", Offset = "0x1252854")]
		public string blendParameter;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125288C", Offset = "0x125288C")]
		public float writheHeight;

		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12528C4", Offset = "0x12528C4")]
		public float writheYVelocity;

		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12528FC", Offset = "0x12528FC")]
		public float blendSpeed;

		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252934", Offset = "0x1252934")]
		public float blendMappingSpeed;

		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x125296C", Offset = "0x125296C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125296C", Offset = "0x125296C")]
		public bool canEnd;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12529CC", Offset = "0x12529CC")]
		public float minTime;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252A04", Offset = "0x1252A04")]
		public float maxEndVelocity;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252A3C", Offset = "0x1252A3C")]
		public PuppetEvent onEnd;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private float timer;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private bool endTriggered;

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x1A7B530", Offset = "0x1A7B530", VA = "0x1A7B530")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1260C00", Offset = "0x1260C00")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x1A7B57C", Offset = "0x1A7B57C", VA = "0x1A7B57C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1260C38", Offset = "0x1260C38")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x1A7B5C8", Offset = "0x1A7B5C8", VA = "0x1A7B5C8", Slot = "13")]
		protected override void OnActivate()
		{
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x1A7B684", Offset = "0x1A7B684", VA = "0x1A7B684", Slot = "14")]
		protected override void OnDeactivate()
		{
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x1A7B68C", Offset = "0x1A7B68C", VA = "0x1A7B68C", Slot = "4")]
		public override void OnReactivate()
		{
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x1A7B608", Offset = "0x1A7B608", VA = "0x1A7B608")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1260C70", Offset = "0x1260C70")]
		private IEnumerator SmoothActivate()
		{
			return null;
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x1A7B6C4", Offset = "0x1A7B6C4", VA = "0x1A7B6C4", Slot = "16")]
		protected override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x1A7BC34", Offset = "0x1A7BC34", VA = "0x1A7BC34", Slot = "18")]
		protected override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x1A7BDD4", Offset = "0x1A7BDD4", VA = "0x1A7BDD4", Slot = "5")]
		public override void Resurrect()
		{
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x1A7BA5C", Offset = "0x1A7BA5C", VA = "0x1A7BA5C")]
		private float GetBlendTarget(float groundHeight)
		{
			return default(float);
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x1A7B8E4", Offset = "0x1A7B8E4", VA = "0x1A7B8E4")]
		private float GetGroundHeight()
		{
			return default(float);
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0x1A7BE3C", Offset = "0x1A7BE3C", VA = "0x1A7BE3C")]
		public BehaviourFall()
		{
		}
	}
	[Token(Token = "0x200019E")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x124EB98", Offset = "0x124EB98")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x124EB98", Offset = "0x124EB98")]
	public class BehaviourPuppet : BehaviourBase
	{
		[Serializable]
		[Token(Token = "0x2000338")]
		public enum State
		{
			[Token(Token = "0x4001338")]
			Puppet,
			[Token(Token = "0x4001339")]
			Unpinned,
			[Token(Token = "0x400133A")]
			GetUp
		}

		[Serializable]
		[Token(Token = "0x2000339")]
		public enum NormalMode
		{
			[Token(Token = "0x400133C")]
			Active,
			[Token(Token = "0x400133D")]
			Unmapped,
			[Token(Token = "0x400133E")]
			Kinematic
		}

		[Serializable]
		[Token(Token = "0x200033A")]
		public class MasterProps
		{
			[Token(Token = "0x400133F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public NormalMode normalMode;

			[Token(Token = "0x4001340")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float mappingBlendSpeed;

			[Token(Token = "0x4001341")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool activateOnStaticCollisions;

			[Token(Token = "0x4001342")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float activateOnImpulse;

			[Token(Token = "0x60016B1")]
			[Address(RVA = "0x1A80A98", Offset = "0x1A80A98", VA = "0x1A80A98")]
			public MasterProps()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200033B")]
		public struct MuscleProps
		{
			[Token(Token = "0x4001343")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C93C", Offset = "0x125C93C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C93C", Offset = "0x125C93C")]
			public float unpinParents;

			[Token(Token = "0x4001344")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C990", Offset = "0x125C990")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C990", Offset = "0x125C990")]
			public float unpinChildren;

			[Token(Token = "0x4001345")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125C9E4", Offset = "0x125C9E4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125C9E4", Offset = "0x125C9E4")]
			public float unpinGroup;

			[Token(Token = "0x4001346")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CA38", Offset = "0x125CA38")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125CA38", Offset = "0x125CA38")]
			public float minMappingWeight;

			[Token(Token = "0x4001347")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CA8C", Offset = "0x125CA8C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125CA8C", Offset = "0x125CA8C")]
			public float maxMappingWeight;

			[Token(Token = "0x4001348")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CAE0", Offset = "0x125CAE0")]
			public bool disableColliders;

			[Token(Token = "0x4001349")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CB18", Offset = "0x125CB18")]
			public float regainPinSpeed;

			[Token(Token = "0x400134A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CB50", Offset = "0x125CB50")]
			public float collisionResistance;

			[Token(Token = "0x400134B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CB88", Offset = "0x125CB88")]
			public float knockOutDistance;

			[Token(Token = "0x400134C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CBC0", Offset = "0x125CBC0")]
			public PhysicMaterial puppetMaterial;

			[Token(Token = "0x400134D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CBF8", Offset = "0x125CBF8")]
			public PhysicMaterial unpinnedMaterial;
		}

		[Serializable]
		[Token(Token = "0x200033C")]
		public struct MusclePropsGroup
		{
			[Token(Token = "0x400134E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[HideInInspector]
			public string name;

			[Token(Token = "0x400134F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CC40", Offset = "0x125CC40")]
			public Muscle.Group[] groups;

			[Token(Token = "0x4001350")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CC78", Offset = "0x125CC78")]
			public MuscleProps props;
		}

		[Serializable]
		[Token(Token = "0x200033D")]
		public struct CollisionResistanceMultiplier
		{
			[Token(Token = "0x4001351")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public LayerMask layers;

			[Token(Token = "0x4001352")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CCB0", Offset = "0x125CCB0")]
			public float multiplier;

			[Token(Token = "0x4001353")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CCE8", Offset = "0x125CCE8")]
			public float collisionThreshold;
		}

		[Token(Token = "0x200033E")]
		public new delegate void CollisionDelegate(MuscleCollision m);

		[Token(Token = "0x200033F")]
		public delegate void CollisionImpulseDelegate(MuscleCollision m, float impulse);

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x1252A74", Offset = "0x1252A74")]
		public MasterProps masterProps;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252AAC", Offset = "0x1252AAC")]
		public LayerMask groundLayers;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252AE4", Offset = "0x1252AE4")]
		public LayerMask collisionLayers;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252B1C", Offset = "0x1252B1C")]
		public float collisionThreshold;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Weight collisionResistance;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252B54", Offset = "0x1252B54")]
		public CollisionResistanceMultiplier[] collisionResistanceMultipliers;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252B8C", Offset = "0x1252B8C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1252B8C", Offset = "0x1252B8C")]
		public int maxCollisions;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252BE0", Offset = "0x1252BE0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1252BE0", Offset = "0x1252BE0")]
		public float regainPinSpeed;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252C38", Offset = "0x1252C38")]
		public float boostFalloff;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x1252C70", Offset = "0x1252C70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252C70", Offset = "0x1252C70")]
		public MuscleProps defaults;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252CD0", Offset = "0x1252CD0")]
		public MusclePropsGroup[] groupOverrides;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x1252D08", Offset = "0x1252D08")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252D08", Offset = "0x1252D08")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1252D08", Offset = "0x1252D08")]
		public float knockOutDistance;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252D84", Offset = "0x1252D84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1252D84", Offset = "0x1252D84")]
		public float unpinnedMuscleWeightMlp;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252DD8", Offset = "0x1252DD8")]
		public float maxRigidbodyVelocity;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252E10", Offset = "0x1252E10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1252E10", Offset = "0x1252E10")]
		public float pinWeightThreshold;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252E64", Offset = "0x1252E64")]
		public bool unpinnedMuscleKnockout;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x181")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252E9C", Offset = "0x1252E9C")]
		public bool dropProps;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x182")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x1252ED4", Offset = "0x1252ED4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252ED4", Offset = "0x1252ED4")]
		public bool canGetUp;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252F34", Offset = "0x1252F34")]
		public float getUpDelay;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252F6C", Offset = "0x1252F6C")]
		public float blendToAnimationTime;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252FA4", Offset = "0x1252FA4")]
		public float maxGetUpVelocity;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1252FDC", Offset = "0x1252FDC")]
		public float minGetUpDuration;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253014", Offset = "0x1253014")]
		public float getUpCollisionResistanceMlp;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125304C", Offset = "0x125304C")]
		public float getUpRegainPinSpeedMlp;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253084", Offset = "0x1253084")]
		public float getUpKnockOutDistanceMlp;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12530BC", Offset = "0x12530BC")]
		public Vector3 getUpOffsetProne;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12530F4", Offset = "0x12530F4")]
		public Vector3 getUpOffsetSupine;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x125312C", Offset = "0x125312C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125312C", Offset = "0x125312C")]
		public PuppetEvent onGetUpProne;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125318C", Offset = "0x125318C")]
		public PuppetEvent onGetUpSupine;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12531C4", Offset = "0x12531C4")]
		public PuppetEvent onLoseBalance;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12531FC", Offset = "0x12531FC")]
		public PuppetEvent onLoseBalanceFromPuppet;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253234", Offset = "0x1253234")]
		public PuppetEvent onLoseBalanceFromGetUp;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125326C", Offset = "0x125326C")]
		public PuppetEvent onRegainBalance;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public CollisionDelegate OnCollision;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public CollisionImpulseDelegate OnCollisionImpulse;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12532A4", Offset = "0x12532A4")]
		private State <state>k__BackingField;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		[HideInInspector]
		public bool canMoveTarget;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private float unpinnedTimer;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		private float getUpTimer;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private Vector3 hipsForward;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		private Vector3 hipsUp;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private float getupAnimationBlendWeight;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		private float getupAnimationBlendWeightV;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private bool getUpTargetFixed;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		private NormalMode lastNormalMode;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private int collisions;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		private bool eventsEnabled;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private float lastKnockOutDistance;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		private float knockOutDistanceSqr;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private bool getupDisabled;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A1")]
		private bool hasCollidedSinceGetUp;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A2")]
		private bool hasBoosted;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private MuscleCollisionBroadcaster broadcaster;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private Vector3 getUpPosition;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		private bool dropPropFlag;

		[Token(Token = "0x1700002C")]
		public State state
		{
			[Token(Token = "0x6000B87")]
			[Address(RVA = "0x1A7C1CC", Offset = "0x1A7C1CC", VA = "0x1A7C1CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260D44", Offset = "0x1260D44")]
			get
			{
				return default(State);
			}
			[Token(Token = "0x6000B88")]
			[Address(RVA = "0x1A7C1D4", Offset = "0x1A7C1D4", VA = "0x1A7C1D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260D54", Offset = "0x1260D54")]
			private set
			{
			}
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x1A7C134", Offset = "0x1A7C134", VA = "0x1A7C134")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1260CD4", Offset = "0x1260CD4")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x1A7C180", Offset = "0x1A7C180", VA = "0x1A7C180")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1260D0C", Offset = "0x1260D0C")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x1A7C1DC", Offset = "0x1A7C1DC", VA = "0x1A7C1DC", Slot = "4")]
		public override void OnReactivate()
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x1A7C488", Offset = "0x1A7C488", VA = "0x1A7C488")]
		public void Reset(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x1A7C4F4", Offset = "0x1A7C4F4", VA = "0x1A7C4F4", Slot = "10")]
		public override void OnTeleport(Quaternion deltaRotation, Vector3 deltaPosition, Vector3 pivot, bool moveToTarget)
		{
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0x1A7C664", Offset = "0x1A7C664", VA = "0x1A7C664", Slot = "15")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0x1A7CC14", Offset = "0x1A7CC14", VA = "0x1A7CC14", Slot = "13")]
		protected override void OnActivate()
		{
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0x1A7D43C", Offset = "0x1A7D43C", VA = "0x1A7D43C", Slot = "8")]
		public override void KillStart()
		{
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0x1A7D4D8", Offset = "0x1A7D4D8", VA = "0x1A7D4D8", Slot = "9")]
		public override void KillEnd()
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0x1A7D4E0", Offset = "0x1A7D4E0", VA = "0x1A7D4E0", Slot = "5")]
		public override void Resurrect()
		{
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x1A7D56C", Offset = "0x1A7D56C", VA = "0x1A7D56C", Slot = "14")]
		protected override void OnDeactivate()
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x1A7D578", Offset = "0x1A7D578", VA = "0x1A7D578", Slot = "16")]
		protected override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x1A7DE24", Offset = "0x1A7DE24", VA = "0x1A7DE24", Slot = "18")]
		protected override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x1A7E140", Offset = "0x1A7E140", VA = "0x1A7E140")]
		private bool SetKinematic()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x1A7E214", Offset = "0x1A7E214", VA = "0x1A7E214", Slot = "21")]
		protected override void OnReadBehaviour()
		{
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x1A7DFA8", Offset = "0x1A7DFA8", VA = "0x1A7DFA8")]
		private void BlendMuscleMapping(int muscleIndex, ref bool to)
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x1A7EA20", Offset = "0x1A7EA20", VA = "0x1A7EA20", Slot = "11")]
		public override void OnMuscleAdded(Muscle m)
		{
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x1A7EA60", Offset = "0x1A7EA60", VA = "0x1A7EA60", Slot = "12")]
		public override void OnMuscleRemoved(Muscle m)
		{
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0x1A7E4A4", Offset = "0x1A7E4A4", VA = "0x1A7E4A4")]
		protected void MoveTarget(Vector3 position)
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x1A7EA98", Offset = "0x1A7EA98", VA = "0x1A7EA98")]
		protected void RotateTarget(Quaternion rotation)
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x1A7EAD0", Offset = "0x1A7EAD0", VA = "0x1A7EAD0", Slot = "27")]
		protected override void GroundTarget(LayerMask layers)
		{
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x1A7EAE4", Offset = "0x1A7EAE4", VA = "0x1A7EAE4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x1A7ECE8", Offset = "0x1A7ECE8", VA = "0x1A7ECE8")]
		public void Boost(float immunity, float impulseMlp)
		{
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x1A7ED78", Offset = "0x1A7ED78", VA = "0x1A7ED78")]
		public void Boost(int muscleIndex, float immunity, float impulseMlp)
		{
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x1A7EF60", Offset = "0x1A7EF60", VA = "0x1A7EF60")]
		public void Boost(int muscleIndex, float immunity, float impulseMlp, float boostParents, float boostChildren)
		{
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x1A7F1A4", Offset = "0x1A7F1A4", VA = "0x1A7F1A4")]
		public void BoostImmunity(float immunity)
		{
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x1A7EDBC", Offset = "0x1A7EDBC", VA = "0x1A7EDBC")]
		public void BoostImmunity(int muscleIndex, float immunity)
		{
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x1A7F21C", Offset = "0x1A7F21C", VA = "0x1A7F21C")]
		public void BoostImmunity(int muscleIndex, float immunity, float boostParents, float boostChildren)
		{
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x1A7F2C0", Offset = "0x1A7F2C0", VA = "0x1A7F2C0")]
		public void BoostImpulseMlp(float impulseMlp)
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x1A7EE90", Offset = "0x1A7EE90", VA = "0x1A7EE90")]
		public void BoostImpulseMlp(int muscleIndex, float impulseMlp)
		{
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x1A7F330", Offset = "0x1A7F330", VA = "0x1A7F330")]
		public void BoostImpulseMlp(int muscleIndex, float impulseMlp, float boostParents, float boostChildren)
		{
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x1A7F3D4", Offset = "0x1A7F3D4", VA = "0x1A7F3D4")]
		public void Unpin()
		{
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x1A7F450", Offset = "0x1A7F450", VA = "0x1A7F450", Slot = "23")]
		protected override void OnMuscleHitBehaviour(MuscleHit hit)
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x1A7F630", Offset = "0x1A7F630", VA = "0x1A7F630", Slot = "24")]
		protected override void OnMuscleCollisionBehaviour(MuscleCollision m)
		{
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x1A7FCF8", Offset = "0x1A7FCF8", VA = "0x1A7FCF8")]
		private float GetImpulse(MuscleCollision m, ref float layerThreshold)
		{
			return default(float);
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x1A7F534", Offset = "0x1A7F534", VA = "0x1A7F534")]
		private void UnPin(int muscleIndex, float unpin)
		{
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x1A803A4", Offset = "0x1A803A4", VA = "0x1A803A4")]
		private void UnPinMuscle(int muscleIndex, float unpin)
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x1A801BC", Offset = "0x1A801BC", VA = "0x1A801BC")]
		private bool Activate(Collision collision, float impulse)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x1A805B0", Offset = "0x1A805B0", VA = "0x1A805B0")]
		public bool IsProne()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x1A7F080", Offset = "0x1A7F080", VA = "0x1A7F080")]
		private float GetFalloff(int i, int muscleIndex, float falloffParents, float falloffChildren)
		{
			return default(float);
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x1A80254", Offset = "0x1A80254", VA = "0x1A80254")]
		private float GetFalloff(int i, int muscleIndex, float falloffParents, float falloffChildren, float falloffGroup)
		{
			return default(float);
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x1A80728", Offset = "0x1A80728", VA = "0x1A80728")]
		private bool InGroup(Muscle.Group group1, Muscle.Group group2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x1A7DD3C", Offset = "0x1A7DD3C", VA = "0x1A7DD3C")]
		private MuscleProps GetProps(Muscle.Group group)
		{
			return default(MuscleProps);
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x1A7CCC8", Offset = "0x1A7CCC8", VA = "0x1A7CCC8")]
		public void SetState(State newState)
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x1A808FC", Offset = "0x1A808FC", VA = "0x1A808FC")]
		public void SetColliders(bool unpinned)
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x1A7C2B4", Offset = "0x1A7C2B4", VA = "0x1A7C2B4")]
		private void SetColliders(Muscle m, bool unpinned)
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x1A8098C", Offset = "0x1A8098C", VA = "0x1A8098C")]
		public BehaviourPuppet()
		{
		}
	}
	[Token(Token = "0x200019F")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x124EBF8", Offset = "0x124EBF8")]
	public class BehaviourTemplate : BehaviourBase
	{
		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public SubBehaviourCOM centerOfMass;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public LayerMask groundLayers;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public PuppetEvent onLoseBalance;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float loseBalanceAngle;

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x1A80C30", Offset = "0x1A80C30", VA = "0x1A80C30", Slot = "15")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x1A80C54", Offset = "0x1A80C54", VA = "0x1A80C54", Slot = "13")]
		protected override void OnActivate()
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x1A80C58", Offset = "0x1A80C58", VA = "0x1A80C58", Slot = "4")]
		public override void OnReactivate()
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x1A80C5C", Offset = "0x1A80C5C", VA = "0x1A80C5C", Slot = "14")]
		protected override void OnDeactivate()
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x1A80C60", Offset = "0x1A80C60", VA = "0x1A80C60", Slot = "16")]
		protected override void OnFixedUpdate()
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x1A80C98", Offset = "0x1A80C98", VA = "0x1A80C98", Slot = "18")]
		protected override void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x1A80C9C", Offset = "0x1A80C9C", VA = "0x1A80C9C", Slot = "23")]
		protected override void OnMuscleHitBehaviour(MuscleHit hit)
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x1A80CA4", Offset = "0x1A80CA4", VA = "0x1A80CA4", Slot = "24")]
		protected override void OnMuscleCollisionBehaviour(MuscleCollision m)
		{
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x1A80CAC", Offset = "0x1A80CAC", VA = "0x1A80CAC")]
		public BehaviourTemplate()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A0")]
	public class SubBehaviourBalancer : SubBehaviourBase
	{
		[Serializable]
		[Token(Token = "0x2000340")]
		public class Settings
		{
			[Token(Token = "0x4001354")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CD20", Offset = "0x125CD20")]
			public float damperForSpring;

			[Token(Token = "0x4001355")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CD58", Offset = "0x125CD58")]
			public float maxForceMlp;

			[Token(Token = "0x4001356")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CD90", Offset = "0x125CD90")]
			public float IMlp;

			[Token(Token = "0x4001357")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CDC8", Offset = "0x125CDC8")]
			public float velocityF;

			[Token(Token = "0x4001358")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CE00", Offset = "0x125CE00")]
			public Vector3 copOffset;

			[Token(Token = "0x4001359")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CE38", Offset = "0x125CE38")]
			public float torqueMlp;

			[Token(Token = "0x400135A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CE70", Offset = "0x125CE70")]
			public float maxTorqueMag;

			[Token(Token = "0x60016BA")]
			[Address(RVA = "0x2311068", Offset = "0x2311068", VA = "0x2311068")]
			public Settings()
			{
			}
		}

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12532C4", Offset = "0x12532C4")]
		private ConfigurableJoint <joint>k__BackingField;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12532D4", Offset = "0x12532D4")]
		private Vector3 <dir>k__BackingField;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12532E4", Offset = "0x12532E4")]
		private Vector3 <dirVel>k__BackingField;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12532F4", Offset = "0x12532F4")]
		private Vector3 <cop>k__BackingField;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1253304", Offset = "0x1253304")]
		private Vector3 <com>k__BackingField;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1253314", Offset = "0x1253314")]
		private Vector3 <comV>k__BackingField;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Settings settings;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody[] rigidbodies;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform[] copPoints;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PressureSensor pressureSensor;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Rigidbody Ibody;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 I;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion toJointSpace;

		[Token(Token = "0x1700002D")]
		public ConfigurableJoint joint
		{
			[Token(Token = "0x6000BBF")]
			[Address(RVA = "0x23107C4", Offset = "0x23107C4", VA = "0x23107C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260D64", Offset = "0x1260D64")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BC0")]
			[Address(RVA = "0x23107CC", Offset = "0x23107CC", VA = "0x23107CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260D74", Offset = "0x1260D74")]
			private set
			{
			}
		}

		[Token(Token = "0x1700002E")]
		public Vector3 dir
		{
			[Token(Token = "0x6000BC1")]
			[Address(RVA = "0x23107D4", Offset = "0x23107D4", VA = "0x23107D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260D84", Offset = "0x1260D84")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000BC2")]
			[Address(RVA = "0x23107E0", Offset = "0x23107E0", VA = "0x23107E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260D94", Offset = "0x1260D94")]
			private set
			{
			}
		}

		[Token(Token = "0x1700002F")]
		public Vector3 dirVel
		{
			[Token(Token = "0x6000BC3")]
			[Address(RVA = "0x23107EC", Offset = "0x23107EC", VA = "0x23107EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260DA4", Offset = "0x1260DA4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000BC4")]
			[Address(RVA = "0x23107F8", Offset = "0x23107F8", VA = "0x23107F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260DB4", Offset = "0x1260DB4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000030")]
		public Vector3 cop
		{
			[Token(Token = "0x6000BC5")]
			[Address(RVA = "0x2310804", Offset = "0x2310804", VA = "0x2310804")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260DC4", Offset = "0x1260DC4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000BC6")]
			[Address(RVA = "0x2310810", Offset = "0x2310810", VA = "0x2310810")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260DD4", Offset = "0x1260DD4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000031")]
		public Vector3 com
		{
			[Token(Token = "0x6000BC7")]
			[Address(RVA = "0x231081C", Offset = "0x231081C", VA = "0x231081C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260DE4", Offset = "0x1260DE4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000BC8")]
			[Address(RVA = "0x2310828", Offset = "0x2310828", VA = "0x2310828")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260DF4", Offset = "0x1260DF4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000032")]
		public Vector3 comV
		{
			[Token(Token = "0x6000BC9")]
			[Address(RVA = "0x2310834", Offset = "0x2310834", VA = "0x2310834")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260E04", Offset = "0x1260E04")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000BCA")]
			[Address(RVA = "0x2310840", Offset = "0x2310840", VA = "0x2310840")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260E14", Offset = "0x1260E14")]
			private set
			{
			}
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0x231084C", Offset = "0x231084C", VA = "0x231084C")]
		public void Initiate(BehaviourBase behaviour, Settings settings, Rigidbody Ibody, Rigidbody[] rigidbodies, ConfigurableJoint joint, Transform[] copPoints, PressureSensor pressureSensor)
		{
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0x23109C4", Offset = "0x23109C4", VA = "0x23109C4")]
		private void Solve()
		{
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0x2310F9C", Offset = "0x2310F9C", VA = "0x2310F9C")]
		public SubBehaviourBalancer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A1")]
	public abstract class SubBehaviourBase
	{
		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected BehaviourBase behaviour;

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0x2311084", Offset = "0x2311084", VA = "0x2311084")]
		protected static Vector2 XZ(Vector3 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0x23110B4", Offset = "0x23110B4", VA = "0x23110B4")]
		protected static Vector3 XYZ(Vector2 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x23110F0", Offset = "0x23110F0", VA = "0x23110F0")]
		protected static Vector3 Flatten(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x2311128", Offset = "0x2311128", VA = "0x2311128")]
		protected static Vector3 SetY(Vector3 v, float y)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x2311060", Offset = "0x2311060", VA = "0x2311060")]
		protected SubBehaviourBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A2")]
	public class SubBehaviourCOM : SubBehaviourBase
	{
		[Serializable]
		[Token(Token = "0x2000341")]
		public enum Mode
		{
			[Token(Token = "0x400135C")]
			FeetCentroid,
			[Token(Token = "0x400135D")]
			CenterOfPressure
		}

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mode mode;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float velocityDamper;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float velocityLerpSpeed;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float velocityMax;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float centerOfPressureSpeed;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 offset;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1253324", Offset = "0x1253324")]
		private Vector3 <position>k__BackingField;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1253334", Offset = "0x1253334")]
		private Vector3 <direction>k__BackingField;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1253344", Offset = "0x1253344")]
		private float <angle>k__BackingField;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1253354", Offset = "0x1253354")]
		private Vector3 <velocity>k__BackingField;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1253364", Offset = "0x1253364")]
		private Vector3 <centerOfPressure>k__BackingField;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1253374", Offset = "0x1253374")]
		private Quaternion <rotation>k__BackingField;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1253384", Offset = "0x1253384")]
		private Quaternion <inverseRotation>k__BackingField;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1253394", Offset = "0x1253394")]
		private bool <isGrounded>k__BackingField;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12533A4", Offset = "0x12533A4")]
		private float <lastGroundedTime>k__BackingField;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public bool[] groundContacts;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public Vector3[] groundContactPoints;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private LayerMask groundLayers;

		[Token(Token = "0x17000033")]
		public Vector3 position
		{
			[Token(Token = "0x6000BD3")]
			[Address(RVA = "0x2311160", Offset = "0x2311160", VA = "0x2311160")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260E24", Offset = "0x1260E24")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000BD4")]
			[Address(RVA = "0x231116C", Offset = "0x231116C", VA = "0x231116C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260E34", Offset = "0x1260E34")]
			private set
			{
			}
		}

		[Token(Token = "0x17000034")]
		public Vector3 direction
		{
			[Token(Token = "0x6000BD5")]
			[Address(RVA = "0x2311178", Offset = "0x2311178", VA = "0x2311178")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260E44", Offset = "0x1260E44")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000BD6")]
			[Address(RVA = "0x2311184", Offset = "0x2311184", VA = "0x2311184")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260E54", Offset = "0x1260E54")]
			private set
			{
			}
		}

		[Token(Token = "0x17000035")]
		public float angle
		{
			[Token(Token = "0x6000BD7")]
			[Address(RVA = "0x2311190", Offset = "0x2311190", VA = "0x2311190")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260E64", Offset = "0x1260E64")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BD8")]
			[Address(RVA = "0x2311198", Offset = "0x2311198", VA = "0x2311198")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260E74", Offset = "0x1260E74")]
			private set
			{
			}
		}

		[Token(Token = "0x17000036")]
		public Vector3 velocity
		{
			[Token(Token = "0x6000BD9")]
			[Address(RVA = "0x23111A0", Offset = "0x23111A0", VA = "0x23111A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260E84", Offset = "0x1260E84")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000BDA")]
			[Address(RVA = "0x23111AC", Offset = "0x23111AC", VA = "0x23111AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260E94", Offset = "0x1260E94")]
			private set
			{
			}
		}

		[Token(Token = "0x17000037")]
		public Vector3 centerOfPressure
		{
			[Token(Token = "0x6000BDB")]
			[Address(RVA = "0x23111B8", Offset = "0x23111B8", VA = "0x23111B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260EA4", Offset = "0x1260EA4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000BDC")]
			[Address(RVA = "0x23111C4", Offset = "0x23111C4", VA = "0x23111C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260EB4", Offset = "0x1260EB4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000038")]
		public Quaternion rotation
		{
			[Token(Token = "0x6000BDD")]
			[Address(RVA = "0x23111D0", Offset = "0x23111D0", VA = "0x23111D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260EC4", Offset = "0x1260EC4")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000BDE")]
			[Address(RVA = "0x23111DC", Offset = "0x23111DC", VA = "0x23111DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260ED4", Offset = "0x1260ED4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000039")]
		public Quaternion inverseRotation
		{
			[Token(Token = "0x6000BDF")]
			[Address(RVA = "0x23111E8", Offset = "0x23111E8", VA = "0x23111E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260EE4", Offset = "0x1260EE4")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000BE0")]
			[Address(RVA = "0x23111F4", Offset = "0x23111F4", VA = "0x23111F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260EF4", Offset = "0x1260EF4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700003A")]
		public bool isGrounded
		{
			[Token(Token = "0x6000BE1")]
			[Address(RVA = "0x2311200", Offset = "0x2311200", VA = "0x2311200")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260F04", Offset = "0x1260F04")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BE2")]
			[Address(RVA = "0x2311208", Offset = "0x2311208", VA = "0x2311208")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260F14", Offset = "0x1260F14")]
			private set
			{
			}
		}

		[Token(Token = "0x1700003B")]
		public float lastGroundedTime
		{
			[Token(Token = "0x6000BE3")]
			[Address(RVA = "0x2311214", Offset = "0x2311214", VA = "0x2311214")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260F24", Offset = "0x1260F24")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BE4")]
			[Address(RVA = "0x231121C", Offset = "0x231121C", VA = "0x231121C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260F34", Offset = "0x1260F34")]
			private set
			{
			}
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x2311224", Offset = "0x2311224", VA = "0x2311224")]
		public void Initiate(BehaviourBase behaviour, LayerMask groundLayers)
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x23115A0", Offset = "0x23115A0", VA = "0x23115A0")]
		private void OnHierarchyChanged()
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x2311640", Offset = "0x2311640", VA = "0x2311640")]
		private void OnPreMuscleCollision(MuscleCollision c)
		{
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x23118D8", Offset = "0x23118D8", VA = "0x23118D8")]
		private void OnPreMuscleCollisionExit(MuscleCollision c)
		{
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x23119D8", Offset = "0x23119D8", VA = "0x23119D8")]
		private void OnPreActivate()
		{
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0x2311E58", Offset = "0x2311E58", VA = "0x2311E58")]
		private void OnPreLateUpdate()
		{
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0x2312614", Offset = "0x2312614", VA = "0x2312614")]
		private void OnPreDeactivate()
		{
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x2311738", Offset = "0x2311738", VA = "0x2311738")]
		private Vector3 GetCollisionCOP(Collision collision)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0x23121EC", Offset = "0x23121EC", VA = "0x23121EC")]
		private bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0x2311AF4", Offset = "0x2311AF4", VA = "0x2311AF4")]
		private Vector3 GetCenterOfMass()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x23123D4", Offset = "0x23123D4", VA = "0x23123D4")]
		private Vector3 GetCenterOfMassVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x2312684", Offset = "0x2312684", VA = "0x2312684")]
		private Vector3 GetMomentum()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x2312250", Offset = "0x2312250", VA = "0x2312250")]
		private Vector3 GetCenterOfPressure()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x2311CC4", Offset = "0x2311CC4", VA = "0x2311CC4")]
		private Vector3 GetFeetCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x231283C", Offset = "0x231283C", VA = "0x231283C")]
		public SubBehaviourCOM()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A3")]
	public class Booster
	{
		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12533D4", Offset = "0x12533D4")]
		public bool fullBody;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125340C", Offset = "0x125340C")]
		public ConfigurableJoint[] muscles;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253444", Offset = "0x1253444")]
		public Muscle.Group[] groups;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125347C", Offset = "0x125347C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125347C", Offset = "0x125347C")]
		public float immunity;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12534D0", Offset = "0x12534D0")]
		public float impulseMlp;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253508", Offset = "0x1253508")]
		public float boostParents;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253540", Offset = "0x1253540")]
		public float boostChildren;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253578", Offset = "0x1253578")]
		public float delay;

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x1A8583C", Offset = "0x1A8583C", VA = "0x1A8583C")]
		public void Boost(BehaviourPuppet puppet)
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x1A85A48", Offset = "0x1A85A48", VA = "0x1A85A48")]
		public Booster()
		{
		}
	}
	[Token(Token = "0x20001A4")]
	public class JointBreakBroadcaster : MonoBehaviour
	{
		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		public PuppetMaster puppetMaster;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		public int muscleIndex;

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x1A85B48", Offset = "0x1A85B48", VA = "0x1A85B48")]
		private void OnJointBreak()
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x1A85B50", Offset = "0x1A85B50", VA = "0x1A85B50")]
		public JointBreakBroadcaster()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A5")]
	public class Muscle
	{
		[Serializable]
		[Token(Token = "0x2000342")]
		public enum Group
		{
			[Token(Token = "0x400135F")]
			Hips,
			[Token(Token = "0x4001360")]
			Spine,
			[Token(Token = "0x4001361")]
			Head,
			[Token(Token = "0x4001362")]
			Arm,
			[Token(Token = "0x4001363")]
			Hand,
			[Token(Token = "0x4001364")]
			Leg,
			[Token(Token = "0x4001365")]
			Foot,
			[Token(Token = "0x4001366")]
			Tail,
			[Token(Token = "0x4001367")]
			Prop
		}

		[Serializable]
		[Token(Token = "0x2000343")]
		public class Props
		{
			[Token(Token = "0x4001368")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CEA8", Offset = "0x125CEA8")]
			public Group group;

			[Token(Token = "0x4001369")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CEE0", Offset = "0x125CEE0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125CEE0", Offset = "0x125CEE0")]
			public float mappingWeight;

			[Token(Token = "0x400136A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CF34", Offset = "0x125CF34")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125CF34", Offset = "0x125CF34")]
			public float pinWeight;

			[Token(Token = "0x400136B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CF88", Offset = "0x125CF88")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125CF88", Offset = "0x125CF88")]
			public float muscleWeight;

			[Token(Token = "0x400136C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125CFDC", Offset = "0x125CFDC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125CFDC", Offset = "0x125CFDC")]
			public float muscleDamper;

			[Token(Token = "0x400136D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D030", Offset = "0x125D030")]
			public bool mapPosition;

			[Token(Token = "0x60016BB")]
			[Address(RVA = "0x1A8A5CC", Offset = "0x1A8A5CC", VA = "0x1A8A5CC")]
			public Props()
			{
			}

			[Token(Token = "0x60016BC")]
			[Address(RVA = "0x1A8A60C", Offset = "0x1A8A60C", VA = "0x1A8A60C")]
			public Props(float pinWeight, float muscleWeight, float mappingWeight, float muscleDamper, bool mapPosition, Group group = Group.Hips)
			{
			}

			[Token(Token = "0x60016BD")]
			[Address(RVA = "0x1A8967C", Offset = "0x1A8967C", VA = "0x1A8967C")]
			public void Clamp()
			{
			}
		}

		[Token(Token = "0x2000344")]
		public struct State
		{
			[Token(Token = "0x400136E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float mappingWeightMlp;

			[Token(Token = "0x400136F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float pinWeightMlp;

			[Token(Token = "0x4001370")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float muscleWeightMlp;

			[Token(Token = "0x4001371")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float maxForceMlp;

			[Token(Token = "0x4001372")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float muscleDamperMlp;

			[Token(Token = "0x4001373")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float muscleDamperAdd;

			[Token(Token = "0x4001374")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float immunity;

			[Token(Token = "0x4001375")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float impulseMlp;

			[Token(Token = "0x4001376")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 velocity;

			[Token(Token = "0x4001377")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 angularVelocity;

			[Token(Token = "0x17000144")]
			public static State Default
			{
				[Token(Token = "0x60016BE")]
				[Address(RVA = "0x1A86CD4", Offset = "0x1A86CD4", VA = "0x1A86CD4")]
				get
				{
					return default(State);
				}
			}

			[Token(Token = "0x60016BF")]
			[Address(RVA = "0x1A89758", Offset = "0x1A89758", VA = "0x1A89758")]
			public void Clamp()
			{
			}
		}

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public string name;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ConfigurableJoint joint;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform target;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Props props;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public State state;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public int[] parentIndexes;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public int[] childIndexes;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public bool[] childFlags;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public int[] kinshipDegrees;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public MuscleCollisionBroadcaster broadcaster;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public JointBreakBroadcaster jointBreakBroadcaster;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Vector3 positionOffset;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12536A0", Offset = "0x12536A0")]
		private Transform <transform>k__BackingField;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12536B0", Offset = "0x12536B0")]
		private Rigidbody <rigidbody>k__BackingField;

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12536C0", Offset = "0x12536C0")]
		private Transform <connectedBodyTarget>k__BackingField;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12536D0", Offset = "0x12536D0")]
		private Vector3 <targetAnimatedPosition>k__BackingField;

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12536E0", Offset = "0x12536E0")]
		private Vector3 <targetVelocity>k__BackingField;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12536F0", Offset = "0x12536F0")]
		private Vector3 <targetAngularVelocity>k__BackingField;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[HideInInspector]
		public Vector3 mappedVelocity;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[HideInInspector]
		public Vector3 mappedAngularVelocity;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1253720", Offset = "0x1253720")]
		private Quaternion <targetRotationRelative>k__BackingField;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1253730", Offset = "0x1253730")]
		private Rigidbody <rebuildConnectedBody>k__BackingField;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1253740", Offset = "0x1253740")]
		private Transform <rebuildTargetParent>k__BackingField;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Transform rebuildParent;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 rebuildPosition;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Quaternion rebuildRotation;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private Vector3 rebuildTargetPosition;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Quaternion rebuildTargetRotation;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private ConfigurableJointMotion rebuildAngularXMotion;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private ConfigurableJointMotion rebuildAngularYMotion;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private ConfigurableJointMotion rebuildAngularZMotion;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private JointDrive slerpDrive;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float lastJointDriveRotationWeight;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float lastRotationDamper;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Vector3 defaultPosition;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private Vector3 defaultTargetLocalPosition;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private Vector3 lastMappedPosition;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private Quaternion localRotationConvert;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private Quaternion toParentSpace;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private Quaternion toJointSpaceInverse;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private Quaternion toJointSpaceDefault;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		private Quaternion targetAnimatedRotation;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private Quaternion targetAnimatedWorldRotation;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private Quaternion defaultRotation;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		private Quaternion rotationRelativeToTarget;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		private Quaternion defaultTargetLocalRotation;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		private Quaternion lastMappedRotation;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private Transform targetParent;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private Transform connectedBodyTransform;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private ConfigurableJointMotion angularXMotionDefault;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		private ConfigurableJointMotion angularYMotionDefault;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private ConfigurableJointMotion angularZMotionDefault;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		private bool directTargetParent;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x275")]
		private bool initiated;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private Collider[] _colliders;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private float lastReadTime;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		private float lastWriteTime;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private bool[] disabledColliders;

		[Token(Token = "0x1700003C")]
		public Transform transform
		{
			[Token(Token = "0x6000BF8")]
			[Address(RVA = "0x1A868E8", Offset = "0x1A868E8", VA = "0x1A868E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260F44", Offset = "0x1260F44")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BF9")]
			[Address(RVA = "0x1A868F0", Offset = "0x1A868F0", VA = "0x1A868F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260F54", Offset = "0x1260F54")]
			private set
			{
			}
		}

		[Token(Token = "0x1700003D")]
		public Rigidbody rigidbody
		{
			[Token(Token = "0x6000BFA")]
			[Address(RVA = "0x1A868F8", Offset = "0x1A868F8", VA = "0x1A868F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260F64", Offset = "0x1260F64")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BFB")]
			[Address(RVA = "0x1A86900", Offset = "0x1A86900", VA = "0x1A86900")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260F74", Offset = "0x1260F74")]
			private set
			{
			}
		}

		[Token(Token = "0x1700003E")]
		public Transform connectedBodyTarget
		{
			[Token(Token = "0x6000BFC")]
			[Address(RVA = "0x1A86908", Offset = "0x1A86908", VA = "0x1A86908")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260F84", Offset = "0x1260F84")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BFD")]
			[Address(RVA = "0x1A86910", Offset = "0x1A86910", VA = "0x1A86910")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260F94", Offset = "0x1260F94")]
			private set
			{
			}
		}

		[Token(Token = "0x1700003F")]
		public Vector3 targetAnimatedPosition
		{
			[Token(Token = "0x6000BFE")]
			[Address(RVA = "0x1A86918", Offset = "0x1A86918", VA = "0x1A86918")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260FA4", Offset = "0x1260FA4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000BFF")]
			[Address(RVA = "0x1A86924", Offset = "0x1A86924", VA = "0x1A86924")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260FB4", Offset = "0x1260FB4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000040")]
		public Collider[] colliders
		{
			[Token(Token = "0x6000C00")]
			[Address(RVA = "0x1A86930", Offset = "0x1A86930", VA = "0x1A86930")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000041")]
		public Vector3 targetVelocity
		{
			[Token(Token = "0x6000C01")]
			[Address(RVA = "0x1A86938", Offset = "0x1A86938", VA = "0x1A86938")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260FC4", Offset = "0x1260FC4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000C02")]
			[Address(RVA = "0x1A86944", Offset = "0x1A86944", VA = "0x1A86944")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260FD4", Offset = "0x1260FD4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000042")]
		public Vector3 targetAngularVelocity
		{
			[Token(Token = "0x6000C03")]
			[Address(RVA = "0x1A86950", Offset = "0x1A86950", VA = "0x1A86950")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260FE4", Offset = "0x1260FE4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000C04")]
			[Address(RVA = "0x1A8695C", Offset = "0x1A8695C", VA = "0x1A8695C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1260FF4", Offset = "0x1260FF4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000043")]
		public Quaternion targetRotationRelative
		{
			[Token(Token = "0x6000C05")]
			[Address(RVA = "0x1A86968", Offset = "0x1A86968", VA = "0x1A86968")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261004", Offset = "0x1261004")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000C06")]
			[Address(RVA = "0x1A86978", Offset = "0x1A86978", VA = "0x1A86978")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261014", Offset = "0x1261014")]
			private set
			{
			}
		}

		[Token(Token = "0x17000044")]
		public Rigidbody rebuildConnectedBody
		{
			[Token(Token = "0x6000C08")]
			[Address(RVA = "0x1A86B6C", Offset = "0x1A86B6C", VA = "0x1A86B6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261024", Offset = "0x1261024")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C09")]
			[Address(RVA = "0x1A86B74", Offset = "0x1A86B74", VA = "0x1A86B74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261034", Offset = "0x1261034")]
			private set
			{
			}
		}

		[Token(Token = "0x17000045")]
		public Transform rebuildTargetParent
		{
			[Token(Token = "0x6000C0A")]
			[Address(RVA = "0x1A86B84", Offset = "0x1A86B84", VA = "0x1A86B84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261044", Offset = "0x1261044")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C0B")]
			[Address(RVA = "0x1A86B8C", Offset = "0x1A86B8C", VA = "0x1A86B8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261054", Offset = "0x1261054")]
			private set
			{
			}
		}

		[Token(Token = "0x17000046")]
		private Quaternion localRotation
		{
			[Token(Token = "0x6000C20")]
			[Address(RVA = "0x1A87F04", Offset = "0x1A87F04", VA = "0x1A87F04")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x17000047")]
		private Quaternion parentRotation
		{
			[Token(Token = "0x6000C21")]
			[Address(RVA = "0x1A880A4", Offset = "0x1A880A4", VA = "0x1A880A4")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x17000048")]
		private Quaternion targetParentRotation
		{
			[Token(Token = "0x6000C22")]
			[Address(RVA = "0x1A87FEC", Offset = "0x1A87FEC", VA = "0x1A87FEC")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x17000049")]
		private Quaternion targetLocalRotation
		{
			[Token(Token = "0x6000C23")]
			[Address(RVA = "0x1A881F4", Offset = "0x1A881F4", VA = "0x1A881F4")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x1A86988", Offset = "0x1A86988", VA = "0x1A86988")]
		public bool IsValid(bool log)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x1A86B9C", Offset = "0x1A86B9C", VA = "0x1A86B9C")]
		public void Rebuild()
		{
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x1A86CF0", Offset = "0x1A86CF0", VA = "0x1A86CF0", Slot = "4")]
		public virtual void Initiate(Muscle[] colleagues)
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x1A87D10", Offset = "0x1A87D10", VA = "0x1A87D10")]
		public void UpdateColliders()
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x1A888F0", Offset = "0x1A888F0", VA = "0x1A888F0")]
		public void DisableColliders()
		{
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x1A889B0", Offset = "0x1A889B0", VA = "0x1A889B0")]
		public void EnableColliders()
		{
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x1A88594", Offset = "0x1A88594", VA = "0x1A88594")]
		private void AddColliders(Transform t, ref Collider[] C, bool includeMeshColliders)
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x1A887E8", Offset = "0x1A887E8", VA = "0x1A887E8")]
		private void AddCompoundColliders(Transform t, ref Collider[] colliders)
		{
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x1A88A5C", Offset = "0x1A88A5C", VA = "0x1A88A5C")]
		public void IgnoreCollisions(Muscle m, bool ignore)
		{
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x1A88C28", Offset = "0x1A88C28", VA = "0x1A88C28")]
		public void IgnoreAngularLimits(bool ignore)
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x1A88CC8", Offset = "0x1A88CC8", VA = "0x1A88CC8")]
		public void FixTargetTransforms()
		{
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x1A88D34", Offset = "0x1A88D34", VA = "0x1A88D34")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x1A88F84", Offset = "0x1A88F84", VA = "0x1A88F84")]
		public void MoveToTarget()
		{
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x1A88314", Offset = "0x1A88314", VA = "0x1A88314")]
		public void Read()
		{
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0x1A890D0", Offset = "0x1A890D0", VA = "0x1A890D0")]
		public void ClearVelocities()
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0x1A891E8", Offset = "0x1A891E8", VA = "0x1A891E8")]
		public void UpdateAnchor(bool supportTranslationAnimation)
		{
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0x1A89580", Offset = "0x1A89580", VA = "0x1A89580", Slot = "5")]
		public virtual void Update(float pinWeightMaster, float muscleWeightMaster, float muscleSpring, float muscleDamper, float pinPow, float pinDistanceFalloff, bool rotationTargetChanged, float deltaTime)
		{
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0x1A89D50", Offset = "0x1A89D50", VA = "0x1A89D50")]
		public void Map(float mappingWeightMaster)
		{
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0x1A8A14C", Offset = "0x1A8A14C", VA = "0x1A8A14C")]
		public void CalculateMappedVelocity()
		{
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x1A89848", Offset = "0x1A89848", VA = "0x1A89848")]
		private void Pin(float pinWeightMaster, float pinPow, float pinDistanceFalloff, float deltaTime)
		{
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x1A89B50", Offset = "0x1A89B50", VA = "0x1A89B50")]
		private void MuscleRotation(float muscleWeightMaster, float muscleSpring, float muscleDamper)
		{
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x1A8A308", Offset = "0x1A8A308", VA = "0x1A8A308")]
		private Quaternion LocalToJointSpace(Quaternion localRotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x1A89460", Offset = "0x1A89460", VA = "0x1A89460")]
		private static Vector3 InverseTransformPointUnscaled(Vector3 position, Quaternion rotation, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x1A87E34", Offset = "0x1A87E34", VA = "0x1A87E34")]
		private Vector3 CalculateInertiaTensorCuboid(Vector3 size, float mass)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x1A8A3FC", Offset = "0x1A8A3FC", VA = "0x1A8A3FC")]
		public Muscle()
		{
		}
	}
	[Token(Token = "0x20001A6")]
	public struct MuscleCollision
	{
		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int muscleIndex;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Collision collision;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isStay;

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x1A8A67C", Offset = "0x1A8A67C", VA = "0x1A8A67C")]
		public MuscleCollision(int muscleIndex, Collision collision, bool isStay = false)
		{
		}
	}
	[Token(Token = "0x20001A7")]
	public struct MuscleHit
	{
		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int muscleIndex;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float unPin;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 force;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 position;

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0x1A8A79C", Offset = "0x1A8A79C", VA = "0x1A8A79C")]
		public MuscleHit(int muscleIndex, float unPin, Vector3 force, Vector3 position)
		{
		}
	}
	[Token(Token = "0x20001A8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x124EC30", Offset = "0x124EC30")]
	public class MuscleCollisionBroadcaster : MonoBehaviour
	{
		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		public PuppetMaster puppetMaster;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		public int muscleIndex;

		[Token(Token = "0x40009E6")]
		private const string onMuscleHit = "OnMuscleHit";

		[Token(Token = "0x40009E7")]
		private const string onMuscleCollision = "OnMuscleCollision";

		[Token(Token = "0x40009E8")]
		private const string onMuscleCollisionExit = "OnMuscleCollisionExit";

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MuscleCollisionBroadcaster otherBroadcaster;

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0x1A8A6B4", Offset = "0x1A8A6B4", VA = "0x1A8A6B4")]
		public void Hit(float unPin, Vector3 force, Vector3 position)
		{
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0x1A8A7B4", Offset = "0x1A8A7B4", VA = "0x1A8A7B4")]
		public MuscleCollisionBroadcaster()
		{
		}
	}
	[Token(Token = "0x20001A9")]
	public static class PhysXTools
	{
		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0x1A8A7BC", Offset = "0x1A8A7BC", VA = "0x1A8A7BC")]
		public static void Predict(Rigidbody r, int steps, out Vector3 position, out Quaternion rotation)
		{
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0x1A8A858", Offset = "0x1A8A858", VA = "0x1A8A858")]
		public static void Predict(Rigidbody r, int steps, out Vector3 position, out Quaternion rotation, Vector3 gravity, float drag, float angularDrag)
		{
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x1A8A958", Offset = "0x1A8A958", VA = "0x1A8A958")]
		public static void Predict(ref Vector3 position, ref Quaternion rotation, ref Vector3 velocity, ref Vector3 angularVelocity, Vector3 gravity, float drag, float angularDrag)
		{
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x1A8AC48", Offset = "0x1A8AC48", VA = "0x1A8AC48")]
		public static Vector3 GetCenterOfMass(PuppetMaster puppet)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x1A8AE84", Offset = "0x1A8AE84", VA = "0x1A8AE84")]
		public static Vector3 GetCenterOfMass(Rigidbody[] rigidbodies)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0x1A8B07C", Offset = "0x1A8B07C", VA = "0x1A8B07C")]
		public static Vector3 GetCenterOfMassVelocity(Rigidbody[] rigidbodies)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0x1A8B274", Offset = "0x1A8B274", VA = "0x1A8B274")]
		public static void DivByInertia(ref Vector3 v, Quaternion rotation, Vector3 inertiaTensor)
		{
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0x1A8B3B4", Offset = "0x1A8B3B4", VA = "0x1A8B3B4")]
		public static void ScaleByInertia(ref Vector3 v, Quaternion rotation, Vector3 inertiaTensor)
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x1A8B4F0", Offset = "0x1A8B4F0", VA = "0x1A8B4F0")]
		public static Vector3 GetFromToAcceleration(Vector3 fromV, Vector3 toV)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0x1A8B654", Offset = "0x1A8B654", VA = "0x1A8B654")]
		public static Vector3 GetAngularAcceleration(Quaternion fromR, Quaternion toR)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0x1A8B8E0", Offset = "0x1A8B8E0", VA = "0x1A8B8E0")]
		public static void AddFromToTorque(Rigidbody r, Quaternion toR, ForceMode forceMode)
		{
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0x1A8BB90", Offset = "0x1A8BB90", VA = "0x1A8BB90")]
		public static void AddFromToTorque(Rigidbody r, Vector3 fromV, Vector3 toV, ForceMode forceMode)
		{
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x1A8BE44", Offset = "0x1A8BE44", VA = "0x1A8BE44")]
		public static void AddFromToForce(Rigidbody r, Vector3 fromV, Vector3 toV, ForceMode forceMode)
		{
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0x1A8C0B0", Offset = "0x1A8C0B0", VA = "0x1A8C0B0")]
		public static Vector3 GetLinearAcceleration(Vector3 fromPoint, Vector3 toPoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0x1A8C184", Offset = "0x1A8C184", VA = "0x1A8C184")]
		public static Quaternion ToJointSpace(ConfigurableJoint joint)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0x1A8C2D4", Offset = "0x1A8C2D4", VA = "0x1A8C2D4")]
		public static Vector3 CalculateInertiaTensorCuboid(Vector3 size, float mass)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0x1A8B374", Offset = "0x1A8B374", VA = "0x1A8B374")]
		public static Vector3 Div(Vector3 v, Vector3 v2)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20001AA")]
	public class PressureSensor : MonoBehaviour
	{
		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool visualize;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LayerMask layers;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12537C0", Offset = "0x12537C0")]
		private Vector3 <center>k__BackingField;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12537D0", Offset = "0x12537D0")]
		private bool <inContact>k__BackingField;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12537E0", Offset = "0x12537E0")]
		private Vector3 <bottom>k__BackingField;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12537F0", Offset = "0x12537F0")]
		private Rigidbody <r>k__BackingField;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool fixedFrame;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 P;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int count;

		[Token(Token = "0x1700004A")]
		public Vector3 center
		{
			[Token(Token = "0x6000C3D")]
			[Address(RVA = "0x1A8C338", Offset = "0x1A8C338", VA = "0x1A8C338")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261064", Offset = "0x1261064")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000C3E")]
			[Address(RVA = "0x1A8C344", Offset = "0x1A8C344", VA = "0x1A8C344")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261074", Offset = "0x1261074")]
			private set
			{
			}
		}

		[Token(Token = "0x1700004B")]
		public bool inContact
		{
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0x1A8C350", Offset = "0x1A8C350", VA = "0x1A8C350")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261084", Offset = "0x1261084")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C40")]
			[Address(RVA = "0x1A8C358", Offset = "0x1A8C358", VA = "0x1A8C358")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261094", Offset = "0x1261094")]
			private set
			{
			}
		}

		[Token(Token = "0x1700004C")]
		public Vector3 bottom
		{
			[Token(Token = "0x6000C41")]
			[Address(RVA = "0x1A8C364", Offset = "0x1A8C364", VA = "0x1A8C364")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12610A4", Offset = "0x12610A4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000C42")]
			[Address(RVA = "0x1A8C370", Offset = "0x1A8C370", VA = "0x1A8C370")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12610B4", Offset = "0x12610B4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700004D")]
		public Rigidbody r
		{
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0x1A8C37C", Offset = "0x1A8C37C", VA = "0x1A8C37C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12610C4", Offset = "0x12610C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C44")]
			[Address(RVA = "0x1A8C384", Offset = "0x1A8C384", VA = "0x1A8C384")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12610D4", Offset = "0x12610D4")]
			private set
			{
			}
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x1A8C38C", Offset = "0x1A8C38C", VA = "0x1A8C38C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x1A8C414", Offset = "0x1A8C414", VA = "0x1A8C414")]
		private void OnCollisionEnter(Collision c)
		{
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x1A8C634", Offset = "0x1A8C634", VA = "0x1A8C634")]
		private void OnCollisionStay(Collision c)
		{
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x1A8C638", Offset = "0x1A8C638", VA = "0x1A8C638")]
		private void OnCollisionExit(Collision c)
		{
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x1A8C640", Offset = "0x1A8C640", VA = "0x1A8C640")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x1A8C6D4", Offset = "0x1A8C6D4", VA = "0x1A8C6D4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x1A8C418", Offset = "0x1A8C418", VA = "0x1A8C418")]
		private void ProcessCollision(Collision c)
		{
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x1A8C784", Offset = "0x1A8C784", VA = "0x1A8C784")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x1A8C7A8", Offset = "0x1A8C7A8", VA = "0x1A8C7A8")]
		public PressureSensor()
		{
		}
	}
	[Token(Token = "0x20001AB")]
	public abstract class Prop : MonoBehaviour
	{
		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253800", Offset = "0x1253800")]
		public int propType;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x1253838", Offset = "0x1253838")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253838", Offset = "0x1253838")]
		public ConfigurableJoint muscle;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253898", Offset = "0x1253898")]
		public Muscle.Props muscleProps;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12538D0", Offset = "0x12538D0")]
		public bool forceLayers;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x1253908", Offset = "0x1253908")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253908", Offset = "0x1253908")]
		public ConfigurableJoint additionalPin;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253968", Offset = "0x1253968")]
		public Transform additionalPinTarget;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12539A0", Offset = "0x12539A0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12539A0", Offset = "0x12539A0")]
		public float additionalPinWeight;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12539F4", Offset = "0x12539F4")]
		private PropRoot <propRoot>k__BackingField;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ConfigurableJointMotion xMotion;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private ConfigurableJointMotion yMotion;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ConfigurableJointMotion zMotion;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private ConfigurableJointMotion angularXMotion;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ConfigurableJointMotion angularYMotion;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private ConfigurableJointMotion angularZMotion;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Collider[] colliders;

		[Token(Token = "0x1700004E")]
		public bool isPickedUp
		{
			[Token(Token = "0x6000C4E")]
			[Address(RVA = "0x1A8C7B0", Offset = "0x1A8C7B0", VA = "0x1A8C7B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700004F")]
		public PropRoot propRoot
		{
			[Token(Token = "0x6000C4F")]
			[Address(RVA = "0x1A8C820", Offset = "0x1A8C820", VA = "0x1A8C820")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12610E4", Offset = "0x12610E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C50")]
			[Address(RVA = "0x1A8C828", Offset = "0x1A8C828", VA = "0x1A8C828")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12610F4", Offset = "0x12610F4")]
			private set
			{
			}
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x1A8C830", Offset = "0x1A8C830", VA = "0x1A8C830")]
		public void PickUp(PropRoot propRoot)
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x1A8C9E4", Offset = "0x1A8C9E4", VA = "0x1A8C9E4")]
		public void Drop()
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x1A8CA18", Offset = "0x1A8CA18", VA = "0x1A8CA18")]
		public void StartPickedUp(PropRoot propRoot)
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x1A8CA20", Offset = "0x1A8CA20", VA = "0x1A8CA20", Slot = "4")]
		protected virtual void OnPickUp(PropRoot propRoot)
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x1A8CA24", Offset = "0x1A8CA24", VA = "0x1A8CA24", Slot = "5")]
		protected virtual void OnDrop()
		{
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x1A8CA28", Offset = "0x1A8CA28", VA = "0x1A8CA28", Slot = "6")]
		protected virtual void OnStart()
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x1A8CA2C", Offset = "0x1A8CA2C", VA = "0x1A8CA2C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x1A8CC3C", Offset = "0x1A8CC3C", VA = "0x1A8CC3C")]
		private void ReleaseJoint()
		{
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x1A8CD88", Offset = "0x1A8CD88", VA = "0x1A8CD88")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0x1A8CF38", Offset = "0x1A8CF38", VA = "0x1A8CF38")]
		protected Prop()
		{
		}
	}
	[Token(Token = "0x20001AC")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x124EC68", Offset = "0x124EC68")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x124EC68", Offset = "0x124EC68")]
	public class PropRoot : MonoBehaviour
	{
		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253A04", Offset = "0x1253A04")]
		public PuppetMaster puppetMaster;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253A3C", Offset = "0x1253A3C")]
		public Rigidbody connectTo;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253A74", Offset = "0x1253A74")]
		public Prop currentProp;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Prop lastProp;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool fixedUpdateCalled;

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x1A8CFFC", Offset = "0x1A8CFFC", VA = "0x1A8CFFC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261104", Offset = "0x1261104")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x1A8D048", Offset = "0x1A8D048", VA = "0x1A8D048")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x126113C", Offset = "0x126113C")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x1A8D094", Offset = "0x1A8D094", VA = "0x1A8D094")]
		public void DropImmediate()
		{
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x1A8D194", Offset = "0x1A8D194", VA = "0x1A8D194")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x1A8D22C", Offset = "0x1A8D22C", VA = "0x1A8D22C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x1A8D39C", Offset = "0x1A8D39C", VA = "0x1A8D39C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x1A8D5A0", Offset = "0x1A8D5A0", VA = "0x1A8D5A0")]
		private void AttachProp(Prop prop)
		{
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x1A8E1A8", Offset = "0x1A8E1A8", VA = "0x1A8E1A8")]
		public PropRoot()
		{
		}
	}
	[Token(Token = "0x20001AD")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x124ECC8", Offset = "0x124ECC8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x124ECC8", Offset = "0x124ECC8")]
	public class PropTemplate : Prop
	{
		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x1A8E1B0", Offset = "0x1A8E1B0", VA = "0x1A8E1B0", Slot = "6")]
		protected override void OnStart()
		{
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x1A8E1B4", Offset = "0x1A8E1B4", VA = "0x1A8E1B4", Slot = "4")]
		protected override void OnPickUp(PropRoot propRoot)
		{
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x1A8E1B8", Offset = "0x1A8E1B8", VA = "0x1A8E1B8", Slot = "5")]
		protected override void OnDrop()
		{
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x1A8E1BC", Offset = "0x1A8E1BC", VA = "0x1A8E1BC")]
		public PropTemplate()
		{
		}
	}
	[Token(Token = "0x20001AE")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x124ED28", Offset = "0x124ED28")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x124ED28", Offset = "0x124ED28")]
	public class PuppetMaster : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000345")]
		public enum Mode
		{
			[Token(Token = "0x4001379")]
			Active,
			[Token(Token = "0x400137A")]
			Kinematic,
			[Token(Token = "0x400137B")]
			Disabled
		}

		[Token(Token = "0x2000346")]
		public delegate void UpdateDelegate();

		[Token(Token = "0x2000347")]
		public delegate void MuscleDelegate(Muscle muscle);

		[Serializable]
		[Token(Token = "0x2000348")]
		public enum UpdateMode
		{
			[Token(Token = "0x400137D")]
			Normal,
			[Token(Token = "0x400137E")]
			AnimatePhysics,
			[Token(Token = "0x400137F")]
			FixedUpdate
		}

		[Serializable]
		[Token(Token = "0x2000349")]
		public enum State
		{
			[Token(Token = "0x4001381")]
			Alive,
			[Token(Token = "0x4001382")]
			Dead,
			[Token(Token = "0x4001383")]
			Frozen
		}

		[Serializable]
		[Token(Token = "0x200034A")]
		public struct StateSettings
		{
			[Token(Token = "0x4001384")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D068", Offset = "0x125D068")]
			public float killDuration;

			[Token(Token = "0x4001385")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D0A0", Offset = "0x125D0A0")]
			public float deadMuscleWeight;

			[Token(Token = "0x4001386")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D0D8", Offset = "0x125D0D8")]
			public float deadMuscleDamper;

			[Token(Token = "0x4001387")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D110", Offset = "0x125D110")]
			public float maxFreezeSqrVelocity;

			[Token(Token = "0x4001388")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D148", Offset = "0x125D148")]
			public bool freezePermanently;

			[Token(Token = "0x4001389")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D180", Offset = "0x125D180")]
			public bool enableAngularLimitsOnKill;

			[Token(Token = "0x400138A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D1B8", Offset = "0x125D1B8")]
			public bool enableInternalCollisionsOnKill;

			[Token(Token = "0x17000145")]
			public static StateSettings Default
			{
				[Token(Token = "0x60016C9")]
				[Address(RVA = "0x230CCF0", Offset = "0x230CCF0", VA = "0x230CCF0")]
				get
				{
					return default(StateSettings);
				}
			}

			[Token(Token = "0x60016C8")]
			[Address(RVA = "0x230CCCC", Offset = "0x230CCCC", VA = "0x230CCCC")]
			public StateSettings(float killDuration, float deadMuscleWeight = 0.01f, float deadMuscleDamper = 2f, float maxFreezeSqrVelocity = 0.02f, bool freezePermanently = false, bool enableAngularLimitsOnKill = true, bool enableInternalCollisionsOnKill = true)
			{
			}
		}

		[Token(Token = "0x200034B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251B38", Offset = "0x1251B38")]
		private sealed class <DisabledToActive>d__142 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400138B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400138C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400138D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PuppetMaster <>4__this;

			[Token(Token = "0x17000146")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016CD")]
				[Address(RVA = "0x230C5CC", Offset = "0x230C5CC", VA = "0x230C5CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000147")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016CF")]
				[Address(RVA = "0x230C634", Offset = "0x230C634", VA = "0x230C634", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016CA")]
			[Address(RVA = "0x230C2E0", Offset = "0x230C2E0", VA = "0x230C2E0")]
			[DebuggerHidden]
			public <DisabledToActive>d__142(int <>1__state)
			{
			}

			[Token(Token = "0x60016CB")]
			[Address(RVA = "0x230C30C", Offset = "0x230C30C", VA = "0x230C30C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016CC")]
			[Address(RVA = "0x230C310", Offset = "0x230C310", VA = "0x230C310", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016CE")]
			[Address(RVA = "0x230C5D4", Offset = "0x230C5D4", VA = "0x230C5D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200034C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251B48", Offset = "0x1251B48")]
		private sealed class <KinematicToActive>d__144 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400138E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400138F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001390")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PuppetMaster <>4__this;

			[Token(Token = "0x17000148")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016D3")]
				[Address(RVA = "0x230C884", Offset = "0x230C884", VA = "0x230C884", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000149")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016D5")]
				[Address(RVA = "0x230C8EC", Offset = "0x230C8EC", VA = "0x230C8EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016D0")]
			[Address(RVA = "0x230C63C", Offset = "0x230C63C", VA = "0x230C63C")]
			[DebuggerHidden]
			public <KinematicToActive>d__144(int <>1__state)
			{
			}

			[Token(Token = "0x60016D1")]
			[Address(RVA = "0x230C668", Offset = "0x230C668", VA = "0x230C668", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016D2")]
			[Address(RVA = "0x230C66C", Offset = "0x230C66C", VA = "0x230C66C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016D4")]
			[Address(RVA = "0x230C88C", Offset = "0x230C88C", VA = "0x230C88C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200034D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251B58", Offset = "0x1251B58")]
		private sealed class <ActiveToDisabled>d__145 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001391")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001392")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001393")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PuppetMaster <>4__this;

			[Token(Token = "0x1700014A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016D9")]
				[Address(RVA = "0x230B9E8", Offset = "0x230B9E8", VA = "0x230B9E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016DB")]
				[Address(RVA = "0x230BA50", Offset = "0x230BA50", VA = "0x230BA50", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016D6")]
			[Address(RVA = "0x230B850", Offset = "0x230B850", VA = "0x230B850")]
			[DebuggerHidden]
			public <ActiveToDisabled>d__145(int <>1__state)
			{
			}

			[Token(Token = "0x60016D7")]
			[Address(RVA = "0x230B87C", Offset = "0x230B87C", VA = "0x230B87C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016D8")]
			[Address(RVA = "0x230B880", Offset = "0x230B880", VA = "0x230B880", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016DA")]
			[Address(RVA = "0x230B9F0", Offset = "0x230B9F0", VA = "0x230B9F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200034E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251B68", Offset = "0x1251B68")]
		private sealed class <ActiveToKinematic>d__146 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001394")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001395")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001396")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PuppetMaster <>4__this;

			[Token(Token = "0x1700014C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016DF")]
				[Address(RVA = "0x230BC28", Offset = "0x230BC28", VA = "0x230BC28", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016E1")]
				[Address(RVA = "0x230BC90", Offset = "0x230BC90", VA = "0x230BC90", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016DC")]
			[Address(RVA = "0x230BA58", Offset = "0x230BA58", VA = "0x230BA58")]
			[DebuggerHidden]
			public <ActiveToKinematic>d__146(int <>1__state)
			{
			}

			[Token(Token = "0x60016DD")]
			[Address(RVA = "0x230BA84", Offset = "0x230BA84", VA = "0x230BA84", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016DE")]
			[Address(RVA = "0x230BA88", Offset = "0x230BA88", VA = "0x230BA88", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016E0")]
			[Address(RVA = "0x230BC30", Offset = "0x230BC30", VA = "0x230BC30", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200034F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251B78", Offset = "0x1251B78")]
		private sealed class <AliveToDead>d__198 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001397")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001398")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001399")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PuppetMaster <>4__this;

			[Token(Token = "0x400139A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool freeze;

			[Token(Token = "0x400139B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <range>5__2;

			[Token(Token = "0x400139C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <mW>5__3;

			[Token(Token = "0x1700014E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016E5")]
				[Address(RVA = "0x230C270", Offset = "0x230C270", VA = "0x230C270", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016E7")]
				[Address(RVA = "0x230C2D8", Offset = "0x230C2D8", VA = "0x230C2D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016E2")]
			[Address(RVA = "0x230BC98", Offset = "0x230BC98", VA = "0x230BC98")]
			[DebuggerHidden]
			public <AliveToDead>d__198(int <>1__state)
			{
			}

			[Token(Token = "0x60016E3")]
			[Address(RVA = "0x230BCC4", Offset = "0x230BCC4", VA = "0x230BCC4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016E4")]
			[Address(RVA = "0x230BCC8", Offset = "0x230BCC8", VA = "0x230BCC8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016E6")]
			[Address(RVA = "0x230C278", Offset = "0x230C278", VA = "0x230C278", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253AAC", Offset = "0x1253AAC")]
		public PuppetMasterHumanoidConfig humanoidConfig;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform targetRoot;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x1253AE4", Offset = "0x1253AE4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253AE4", Offset = "0x1253AE4")]
		public State state;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "ContextMenuItemAttribute", RVA = "0x1253B44", Offset = "0x1253B44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253B44", Offset = "0x1253B44")]
		public StateSettings stateSettings;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253BC0", Offset = "0x1253BC0")]
		public Mode mode;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253BF8", Offset = "0x1253BF8")]
		public float blendTime;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253C30", Offset = "0x1253C30")]
		public bool fixTargetTransforms;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253C68", Offset = "0x1253C68")]
		public int solverIterationCount;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253CA0", Offset = "0x1253CA0")]
		public bool visualizeTargetPose;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x1253CD8", Offset = "0x1253CD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253CD8", Offset = "0x1253CD8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1253CD8", Offset = "0x1253CD8")]
		public float mappingWeight;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253D50", Offset = "0x1253D50")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1253D50", Offset = "0x1253D50")]
		public float pinWeight;

		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253DA4", Offset = "0x1253DA4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1253DA4", Offset = "0x1253DA4")]
		public float muscleWeight;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x1253DF8", Offset = "0x1253DF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253DF8", Offset = "0x1253DF8")]
		public float muscleSpring;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253E58", Offset = "0x1253E58")]
		public float muscleDamper;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253E90", Offset = "0x1253E90")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1253E90", Offset = "0x1253E90")]
		public float pinPow;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253EE4", Offset = "0x1253EE4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1253EE4", Offset = "0x1253EE4")]
		public float pinDistanceFalloff;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253F3C", Offset = "0x1253F3C")]
		public bool updateJointAnchors;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253F74", Offset = "0x1253F74")]
		public bool supportTranslationAnimation;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253FAC", Offset = "0x1253FAC")]
		public bool angularLimits;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1253FE4", Offset = "0x1253FE4")]
		public bool internalCollisions;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x125401C", Offset = "0x125401C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125401C", Offset = "0x125401C")]
		public Muscle[] muscles;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UpdateDelegate OnPostInitiate;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UpdateDelegate OnRead;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UpdateDelegate OnWrite;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UpdateDelegate OnPostLateUpdate;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public UpdateDelegate OnFixTransforms;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public UpdateDelegate OnHierarchyChanged;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public MuscleDelegate OnMuscleRemoved;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Animator _targetAnimator;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125407C", Offset = "0x125407C")]
		private Animation <targetAnimation>k__BackingField;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125408C", Offset = "0x125408C")]
		private BehaviourBase[] <behaviours>k__BackingField;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125409C", Offset = "0x125409C")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		public List<SolverManager> solvers;

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool internalCollisionsEnabled;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool angularLimitsEnabled;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE2")]
		private bool fixedFrame;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private int lastSolverIterationCount;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool isLegacy;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
		private bool animatorDisabled;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEA")]
		private bool awakeFailed;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEB")]
		private bool interpolated;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private bool freezeFlag;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
		private bool hasBeenDisabled;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEE")]
		private bool hierarchyIsFlat;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEF")]
		private bool teleport;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 teleportPosition;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private Quaternion teleportRotation;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool teleportMoveToTarget;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10D")]
		private bool rebuildFlag;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10E")]
		private bool onPostRebuildFlag;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Muscle[] defaultMuscles;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 rebuildPelvisPos;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Quaternion rebuildPelvisRot;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12540BC", Offset = "0x12540BC")]
		private bool <isSwitchingMode>k__BackingField;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Mode activeMode;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private Mode lastMode;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private float mappingBlend;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12540CC", Offset = "0x12540CC")]
		private bool <isKilling>k__BackingField;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public UpdateDelegate OnFreeze;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public UpdateDelegate OnUnfreeze;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public UpdateDelegate OnDeath;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public UpdateDelegate OnResurrection;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private State activeState;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private State lastState;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool angularLimitsEnabledOnKill;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x171")]
		private bool internalCollisionsEnabledOnKill;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x172")]
		private bool animationDisabledbyStates;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x173")]
		[HideInInspector]
		public bool storeTargetMappedState;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private Transform[] targetChildren;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Vector3[] targetMappedPositions;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Quaternion[] targetMappedRotations;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Vector3[] targetSampledPositions;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private Quaternion[] targetSampledRotations;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private bool targetMappedStateStored;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A1")]
		private bool targetMappedStateSampled;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A2")]
		private bool sampleTargetMappedState;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A3")]
		private bool hasProp;

		[Token(Token = "0x17000050")]
		public Animator targetAnimator
		{
			[Token(Token = "0x6000C73")]
			[Address(RVA = "0x1A7B3D4", Offset = "0x1A7B3D4", VA = "0x1A7B3D4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C74")]
			[Address(RVA = "0x1A8E400", Offset = "0x1A8E400", VA = "0x1A8E400")]
			set
			{
			}
		}

		[Token(Token = "0x17000051")]
		public Animation targetAnimation
		{
			[Token(Token = "0x6000C75")]
			[Address(RVA = "0x1A8E408", Offset = "0x1A8E408", VA = "0x1A8E408")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12613DC", Offset = "0x12613DC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C76")]
			[Address(RVA = "0x1A8E410", Offset = "0x1A8E410", VA = "0x1A8E410")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12613EC", Offset = "0x12613EC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000052")]
		public BehaviourBase[] behaviours
		{
			[Token(Token = "0x6000C77")]
			[Address(RVA = "0x1A8E418", Offset = "0x1A8E418", VA = "0x1A8E418")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12613FC", Offset = "0x12613FC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C78")]
			[Address(RVA = "0x1A8E420", Offset = "0x1A8E420", VA = "0x1A8E420")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x126140C", Offset = "0x126140C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000053")]
		public bool isActive
		{
			[Token(Token = "0x6000C79")]
			[Address(RVA = "0x1A7DCBC", Offset = "0x1A7DCBC", VA = "0x1A7DCBC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000054")]
		public bool initiated
		{
			[Token(Token = "0x6000C7A")]
			[Address(RVA = "0x1A8E428", Offset = "0x1A8E428", VA = "0x1A8E428")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x126141C", Offset = "0x126141C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C7B")]
			[Address(RVA = "0x1A8E430", Offset = "0x1A8E430", VA = "0x1A8E430")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x126142C", Offset = "0x126142C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000055")]
		public UpdateMode updateMode
		{
			[Token(Token = "0x6000C7C")]
			[Address(RVA = "0x1A8E43C", Offset = "0x1A8E43C", VA = "0x1A8E43C")]
			get
			{
				return default(UpdateMode);
			}
		}

		[Token(Token = "0x17000056")]
		public bool controlsAnimator
		{
			[Token(Token = "0x6000C7D")]
			[Address(RVA = "0x1A8E578", Offset = "0x1A8E578", VA = "0x1A8E578")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000057")]
		public bool isBlending
		{
			[Token(Token = "0x6000C7E")]
			[Address(RVA = "0x1A7BC10", Offset = "0x1A7BC10", VA = "0x1A7BC10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000058")]
		private bool autoSimulate
		{
			[Token(Token = "0x6000C80")]
			[Address(RVA = "0x1A8E614", Offset = "0x1A8E614", VA = "0x1A8E614")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000059")]
		private AnimatorUpdateMode targetUpdateMode
		{
			[Token(Token = "0x6000C94")]
			[Address(RVA = "0x1A8E47C", Offset = "0x1A8E47C", VA = "0x1A8E47C")]
			get
			{
				return default(AnimatorUpdateMode);
			}
		}

		[Token(Token = "0x1700005A")]
		public bool isSwitchingMode
		{
			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0x1A94670", Offset = "0x1A94670", VA = "0x1A94670")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12614E4", Offset = "0x12614E4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CA9")]
			[Address(RVA = "0x1A94678", Offset = "0x1A94678", VA = "0x1A94678")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12614F4", Offset = "0x12614F4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700005B")]
		public bool isSwitchingState
		{
			[Token(Token = "0x6000CCA")]
			[Address(RVA = "0x1A8E5D8", Offset = "0x1A8E5D8", VA = "0x1A8E5D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700005C")]
		public bool isKilling
		{
			[Token(Token = "0x6000CCB")]
			[Address(RVA = "0x1A97E40", Offset = "0x1A97E40", VA = "0x1A97E40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261694", Offset = "0x1261694")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CCC")]
			[Address(RVA = "0x1A97E48", Offset = "0x1A97E48", VA = "0x1A97E48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12616A4", Offset = "0x12616A4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700005D")]
		public bool isAlive
		{
			[Token(Token = "0x6000CCD")]
			[Address(RVA = "0x1A7DD2C", Offset = "0x1A7DD2C", VA = "0x1A7DD2C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700005E")]
		public bool isFrozen
		{
			[Token(Token = "0x6000CCE")]
			[Address(RVA = "0x1A7E494", Offset = "0x1A7E494", VA = "0x1A7E494")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x1A8E1C0", Offset = "0x1A8E1C0", VA = "0x1A8E1C0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261174", Offset = "0x1261174")]
		private void SetUpdateJointAnchors()
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x1A8E1CC", Offset = "0x1A8E1CC", VA = "0x1A8E1CC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12611AC", Offset = "0x12611AC")]
		private void OpenUserManualSetup()
		{
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x1A8E218", Offset = "0x1A8E218", VA = "0x1A8E218")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12611E4", Offset = "0x12611E4")]
		private void OpenUserManualComponent()
		{
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x1A8E264", Offset = "0x1A8E264", VA = "0x1A8E264")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x126121C", Offset = "0x126121C")]
		private void OpenUserManualPerformance()
		{
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x1A8E2B0", Offset = "0x1A8E2B0", VA = "0x1A8E2B0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261254", Offset = "0x1261254")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x1A8E2FC", Offset = "0x1A8E2FC", VA = "0x1A8E2FC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x126128C", Offset = "0x126128C")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x1A8E348", Offset = "0x1A8E348", VA = "0x1A8E348")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12612C4", Offset = "0x12612C4")]
		private void OpenComponentTutorial()
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x1A8E394", Offset = "0x1A8E394", VA = "0x1A8E394")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12612FC", Offset = "0x12612FC")]
		private void SetKinematic()
		{
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x1A8E3A0", Offset = "0x1A8E3A0", VA = "0x1A8E3A0")]
		private void ResetStateSettings()
		{
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x1A8E3E0", Offset = "0x1A8E3E0", VA = "0x1A8E3E0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261334", Offset = "0x1261334")]
		public void setTransitionTime()
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x1A8E3E8", Offset = "0x1A8E3E8", VA = "0x1A8E3E8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x126136C", Offset = "0x126136C")]
		public void angularLimitsAndCollisions()
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x1A8E3F4", Offset = "0x1A8E3F4", VA = "0x1A8E3F4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12613A4", Offset = "0x12613A4")]
		public void setSolver()
		{
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x1A8E5EC", Offset = "0x1A8E5EC", VA = "0x1A8E5EC")]
		public void Teleport(Vector3 position, Quaternion rotation, bool moveToTarget)
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x1A8E61C", Offset = "0x1A8E61C", VA = "0x1A8E61C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x1A8E6C4", Offset = "0x1A8E6C4", VA = "0x1A8E6C4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x1A8EE10", Offset = "0x1A8EE10", VA = "0x1A8EE10")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x1A8F870", Offset = "0x1A8F870", VA = "0x1A8F870")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x1A8F918", Offset = "0x1A8F918", VA = "0x1A8F918")]
		public Transform FindTargetRootRecursive(Transform t)
		{
			return null;
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x1A8EE54", Offset = "0x1A8EE54", VA = "0x1A8EE54")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0x1A90CE0", Offset = "0x1A90CE0", VA = "0x1A90CE0")]
		private void ActivateBehaviour(BehaviourBase behaviour)
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x1A90DD8", Offset = "0x1A90DD8", VA = "0x1A90DD8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x1A90ECC", Offset = "0x1A90ECC", VA = "0x1A90ECC")]
		private bool IsInterpolated()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x1A90F58", Offset = "0x1A90F58", VA = "0x1A90F58")]
		private void OnRebuild()
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x1A91260", Offset = "0x1A91260", VA = "0x1A91260")]
		public void OnPreSimulate(float deltaTime)
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x1A92228", Offset = "0x1A92228", VA = "0x1A92228")]
		public void OnPostSimulate()
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x1A92964", Offset = "0x1A92964", VA = "0x1A92964", Slot = "4")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x1A92E1C", Offset = "0x1A92E1C", VA = "0x1A92E1C", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x1A92EFC", Offset = "0x1A92EFC", VA = "0x1A92EFC", Slot = "6")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x1A9307C", Offset = "0x1A9307C", VA = "0x1A9307C", Slot = "7")]
		protected virtual void OnLateUpdate()
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x1A92548", Offset = "0x1A92548", VA = "0x1A92548")]
		public void MoveToTarget()
		{
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0x1A91808", Offset = "0x1A91808", VA = "0x1A91808")]
		private void Read()
		{
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x1A9167C", Offset = "0x1A9167C", VA = "0x1A9167C")]
		private void FixTargetTransforms()
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x1A93304", Offset = "0x1A93304", VA = "0x1A93304")]
		private void VisualizeTargetPose()
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x1A935AC", Offset = "0x1A935AC", VA = "0x1A935AC")]
		private void VisualizeHierarchy(Transform t, Color color)
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x1A92094", Offset = "0x1A92094", VA = "0x1A92094")]
		private void SetInternalCollisions(bool collide)
		{
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0x1A9218C", Offset = "0x1A9218C", VA = "0x1A9218C")]
		private void SetAngularLimits(bool limited)
		{
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x1A9372C", Offset = "0x1A9372C", VA = "0x1A9372C")]
		public void SetPinWeight(float val)
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0x1A8D7DC", Offset = "0x1A8D7DC", VA = "0x1A8D7DC")]
		public void AddMuscle(ConfigurableJoint joint, Transform target, Rigidbody connectTo, Transform targetParent, [Optional] Muscle.Props muscleProps, bool forceTreeHierarchy = false, bool forceLayers = true)
		{
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0x1A93B4C", Offset = "0x1A93B4C", VA = "0x1A93B4C")]
		public void Rebuild()
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x1A79EC8", Offset = "0x1A79EC8", VA = "0x1A79EC8")]
		public void RemoveMuscleRecursive(ConfigurableJoint joint, bool attachTarget, bool blockTargetAnimation = false, MuscleRemoveMode removeMode = MuscleRemoveMode.Sever)
		{
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x1A93EC0", Offset = "0x1A93EC0", VA = "0x1A93EC0")]
		public void ReplaceMuscle(ConfigurableJoint oldJoint, ConfigurableJoint newJoint)
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x1A93F60", Offset = "0x1A93F60", VA = "0x1A93F60")]
		public void SetMuscles(Muscle[] newMuscles)
		{
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0x1A94000", Offset = "0x1A94000", VA = "0x1A94000")]
		public void DisableMuscleRecursive(ConfigurableJoint joint)
		{
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x1A940A0", Offset = "0x1A940A0", VA = "0x1A940A0")]
		public void EnableMuscleRecursive(ConfigurableJoint joint)
		{
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x1A94140", Offset = "0x1A94140", VA = "0x1A94140")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x126143C", Offset = "0x126143C")]
		public void FlattenHierarchy()
		{
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0x1A94250", Offset = "0x1A94250", VA = "0x1A94250")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261474", Offset = "0x1261474")]
		public void TreeHierarchy()
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0x1A943C4", Offset = "0x1A943C4", VA = "0x1A943C4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12614AC", Offset = "0x12614AC")]
		public void FixMusclePositions()
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0x1A94500", Offset = "0x1A94500", VA = "0x1A94500")]
		private void AddIndexesRecursive(int index, ref int[] indexes)
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0x1A90878", Offset = "0x1A90878", VA = "0x1A90878")]
		private bool HierarchyIsFlat()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0x1A93D30", Offset = "0x1A93D30", VA = "0x1A93D30")]
		private void DisconnectJoint(ConfigurableJoint joint)
		{
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0x1A93DF8", Offset = "0x1A93DF8", VA = "0x1A93DF8")]
		private void KillJoint(ConfigurableJoint joint)
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x1A94684", Offset = "0x1A94684", VA = "0x1A94684")]
		public void DisableImmediately()
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0x1A94720", Offset = "0x1A94720", VA = "0x1A94720", Slot = "8")]
		protected virtual void SwitchModes()
		{
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0x1A94884", Offset = "0x1A94884", VA = "0x1A94884")]
		private void DisabledToKinematic()
		{
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0x1A949C8", Offset = "0x1A949C8", VA = "0x1A949C8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1261504", Offset = "0x1261504")]
		private IEnumerator DisabledToActive()
		{
			return null;
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x1A94A44", Offset = "0x1A94A44", VA = "0x1A94A44")]
		private void KinematicToDisabled()
		{
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x1A94AE0", Offset = "0x1A94AE0", VA = "0x1A94AE0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1261568", Offset = "0x1261568")]
		private IEnumerator KinematicToActive()
		{
			return null;
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x1A94B5C", Offset = "0x1A94B5C", VA = "0x1A94B5C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12615CC", Offset = "0x12615CC")]
		private IEnumerator ActiveToDisabled()
		{
			return null;
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x1A94BD8", Offset = "0x1A94BD8", VA = "0x1A94BD8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1261630", Offset = "0x1261630")]
		private IEnumerator ActiveToKinematic()
		{
			return null;
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x1A94C54", Offset = "0x1A94C54", VA = "0x1A94C54")]
		private void UpdateInternalCollisions()
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x1A94D24", Offset = "0x1A94D24", VA = "0x1A94D24")]
		public void SetMuscleWeights(Muscle.Group group, float muscleWeight, float pinWeight = 1f, float mappingWeight = 1f, float muscleDamper = 1f)
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x1A94DF4", Offset = "0x1A94DF4", VA = "0x1A94DF4")]
		public void SetMuscleWeights(Transform target, float muscleWeight, float pinWeight = 1f, float mappingWeight = 1f, float muscleDamper = 1f)
		{
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x1A95228", Offset = "0x1A95228", VA = "0x1A95228")]
		public void SetMuscleWeights(HumanBodyBones humanBodyBone, float muscleWeight, float pinWeight = 1f, float mappingWeight = 1f, float muscleDamper = 1f)
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x1A954DC", Offset = "0x1A954DC", VA = "0x1A954DC")]
		public void SetMuscleWeightsRecursive(Transform target, float muscleWeight, float pinWeight = 1f, float mappingWeight = 1f, float muscleDamper = 1f)
		{
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x1A95610", Offset = "0x1A95610", VA = "0x1A95610")]
		public void SetMuscleWeightsRecursive(int muscleIndex, float muscleWeight, float pinWeight = 1f, float mappingWeight = 1f, float muscleDamper = 1f)
		{
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x1A956FC", Offset = "0x1A956FC", VA = "0x1A956FC")]
		public void SetMuscleWeightsRecursive(HumanBodyBones humanBodyBone, float muscleWeight, float pinWeight = 1f, float mappingWeight = 1f, float muscleDamper = 1f)
		{
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x1A95054", Offset = "0x1A95054", VA = "0x1A95054")]
		public void SetMuscleWeights(int muscleIndex, float muscleWeight, float pinWeight, float mappingWeight, float muscleDamper)
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x1A95784", Offset = "0x1A95784", VA = "0x1A95784")]
		public Muscle GetMuscle(Transform target)
		{
			return null;
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x1A937C4", Offset = "0x1A937C4", VA = "0x1A937C4")]
		public Muscle GetMuscle(Rigidbody rigidbody)
		{
			return null;
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0x1A959B8", Offset = "0x1A959B8", VA = "0x1A959B8")]
		public Muscle GetMuscle(ConfigurableJoint joint)
		{
			return null;
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0x1A91170", Offset = "0x1A91170", VA = "0x1A91170")]
		public bool ContainsJoint(ConfigurableJoint joint)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x1A952B0", Offset = "0x1A952B0", VA = "0x1A952B0")]
		public int GetMuscleIndex(HumanBodyBones humanBodyBone)
		{
			return default(int);
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x1A94E7C", Offset = "0x1A94E7C", VA = "0x1A94E7C")]
		public int GetMuscleIndex(Transform target)
		{
			return default(int);
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x1A957E0", Offset = "0x1A957E0", VA = "0x1A957E0")]
		public int GetMuscleIndex(Rigidbody rigidbody)
		{
			return default(int);
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x1A93B58", Offset = "0x1A93B58", VA = "0x1A93B58")]
		public int GetMuscleIndex(ConfigurableJoint joint)
		{
			return default(int);
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x1A95A14", Offset = "0x1A95A14", VA = "0x1A95A14")]
		public static PuppetMaster SetUp(Transform target, Transform ragdoll, int characterControllerLayer, int ragdollLayer)
		{
			return null;
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x1A965F4", Offset = "0x1A965F4", VA = "0x1A965F4")]
		public static PuppetMaster SetUp(Transform target, int characterControllerLayer, int ragdollLayer)
		{
			return null;
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x1A95B08", Offset = "0x1A95B08", VA = "0x1A95B08")]
		public void SetUpTo(Transform setUpTo, int characterControllerLayer, int ragdollLayer)
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x1A96754", Offset = "0x1A96754", VA = "0x1A96754")]
		public static void RemoveRagdollComponents(Transform target, int characterControllerLayer)
		{
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x1A96F78", Offset = "0x1A96F78", VA = "0x1A96F78")]
		private void SetUpMuscles(Transform setUpTo)
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x1A97998", Offset = "0x1A97998", VA = "0x1A97998")]
		private static Muscle.Group FindGroup(Animator animator, Transform t)
		{
			return default(Muscle.Group);
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x1A96B7C", Offset = "0x1A96B7C", VA = "0x1A96B7C")]
		private void RemoveUnnecessaryBones()
		{
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x1A97684", Offset = "0x1A97684", VA = "0x1A97684")]
		private static bool IsClothCollider(Collider collider, Cloth[] cloths)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x1A97E54", Offset = "0x1A97E54", VA = "0x1A97E54")]
		public void Kill()
		{
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x1A97E60", Offset = "0x1A97E60", VA = "0x1A97E60")]
		public void Kill(StateSettings stateSettings)
		{
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x1A97E7C", Offset = "0x1A97E7C", VA = "0x1A97E7C")]
		public void Freeze()
		{
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x1A97E88", Offset = "0x1A97E88", VA = "0x1A97E88")]
		public void Freeze(StateSettings stateSettings)
		{
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x1A97EA4", Offset = "0x1A97EA4", VA = "0x1A97EA4")]
		public void Resurrect()
		{
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x1A97EAC", Offset = "0x1A97EAC", VA = "0x1A97EAC", Slot = "9")]
		protected virtual void SwitchStates()
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x1A97FAC", Offset = "0x1A97FAC", VA = "0x1A97FAC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12616B4", Offset = "0x12616B4")]
		private IEnumerator AliveToDead(bool freeze)
		{
			return null;
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0x1A926E0", Offset = "0x1A926E0", VA = "0x1A926E0")]
		private void OnFreezeFlag()
		{
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0x1A9803C", Offset = "0x1A9803C", VA = "0x1A9803C")]
		private void DeadToAlive()
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0x1A8EB3C", Offset = "0x1A8EB3C", VA = "0x1A8EB3C")]
		private void SetAnimationEnabled(bool to)
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0x1A9814C", Offset = "0x1A9814C", VA = "0x1A9814C")]
		private void DeadToFrozen()
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x1A98158", Offset = "0x1A98158", VA = "0x1A98158")]
		private void FrozenToAlive()
		{
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x1A98378", Offset = "0x1A98378", VA = "0x1A98378")]
		private void FrozenToDead()
		{
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x1A8EC3C", Offset = "0x1A8EC3C", VA = "0x1A8EC3C")]
		private void ActivateRagdoll(bool kinematic = false)
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x1A9844C", Offset = "0x1A9844C", VA = "0x1A9844C")]
		private bool CanFreeze()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0x1A80808", Offset = "0x1A80808", VA = "0x1A80808")]
		public void SampleTargetMappedState()
		{
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0x1A7E4DC", Offset = "0x1A7E4DC", VA = "0x1A7E4DC")]
		public void FixTargetToSampledState(float weight)
		{
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x1A90988", Offset = "0x1A90988", VA = "0x1A90988")]
		public void StoreTargetMappedState()
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0x1A90648", Offset = "0x1A90648", VA = "0x1A90648")]
		private void UpdateHierarchies()
		{
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x1A98AA8", Offset = "0x1A98AA8", VA = "0x1A98AA8")]
		private bool HasProp()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x1A9893C", Offset = "0x1A9893C", VA = "0x1A9893C")]
		private void UpdateBroadcasterMuscleIndexes()
		{
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x1A98508", Offset = "0x1A98508", VA = "0x1A98508")]
		private void AssignParentAndChildIndexes()
		{
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0x1A98B20", Offset = "0x1A98B20", VA = "0x1A98B20")]
		private void AddToParentsRecursive(ConfigurableJoint joint, ref int[] indexes)
		{
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x1A98C98", Offset = "0x1A98C98", VA = "0x1A98C98")]
		private void AddToChildrenRecursive(ConfigurableJoint joint, ref int[] indexes, ref bool[] childFlags)
		{
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x1A98824", Offset = "0x1A98824", VA = "0x1A98824")]
		private void AssignKinshipDegrees()
		{
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x1A98F78", Offset = "0x1A98F78", VA = "0x1A98F78")]
		private void AssignKinshipsDownRecursive(ref int[] kinshipDegrees, int degree, int index)
		{
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x1A990DC", Offset = "0x1A990DC", VA = "0x1A990DC")]
		private void AssignKinshipsUpRecursive(ref int[] kinshipDegrees, int degree, int index)
		{
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x1A98E9C", Offset = "0x1A98E9C", VA = "0x1A98E9C")]
		private int GetMuscleIndexLowLevel(ConfigurableJoint joint)
		{
			return default(int);
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x1A8FC8C", Offset = "0x1A8FC8C", VA = "0x1A8FC8C")]
		public bool IsValid(bool log)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x1A93820", Offset = "0x1A93820", VA = "0x1A93820")]
		private bool CheckMassVariation(float threshold, bool log)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x1A93734", Offset = "0x1A93734", VA = "0x1A93734")]
		private bool CheckIfInitiated()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x1A99340", Offset = "0x1A99340", VA = "0x1A99340")]
		public PuppetMaster()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AF")]
	public enum MuscleRemoveMode
	{
		[Token(Token = "0x4000A55")]
		Sever,
		[Token(Token = "0x4000A56")]
		Explode,
		[Token(Token = "0x4000A57")]
		Numb
	}
	[Token(Token = "0x20001B0")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x124ED88", Offset = "0x124ED88")]
	public class PuppetMasterHumanoidConfig : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x2000350")]
		public class HumanoidMuscle
		{
			[Token(Token = "0x400139D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			[HideInInspector]
			public string name;

			[Token(Token = "0x400139E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HumanBodyBones bone;

			[Token(Token = "0x400139F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Muscle.Props props;

			[Token(Token = "0x60016E8")]
			[Address(RVA = "0x230D2D4", Offset = "0x230D2D4", VA = "0x230D2D4")]
			public HumanoidMuscle()
			{
			}
		}

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x12540EC", Offset = "0x12540EC")]
		public PuppetMaster.State state;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public PuppetMaster.StateSettings stateSettings;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PuppetMaster.Mode mode;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float blendTime;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool fixTargetTransforms;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int solverIterationCount;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool visualizeTargetPose;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x1254124", Offset = "0x1254124")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1254124", Offset = "0x1254124")]
		public float mappingWeight;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1254178", Offset = "0x1254178")]
		public float pinWeight;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1254190", Offset = "0x1254190")]
		public float muscleWeight;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x12541A8", Offset = "0x12541A8")]
		public float muscleSpring;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float muscleDamper;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12541E0", Offset = "0x12541E0")]
		public float pinPow;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12541F8", Offset = "0x12541F8")]
		public float pinDistanceFalloff;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool updateJointAnchors;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool supportTranslationAnimation;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public bool angularLimits;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		public bool internalCollisions;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x1254214", Offset = "0x1254214")]
		public HumanoidMuscle[] muscles;

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x230CD64", Offset = "0x230CD64", VA = "0x230CD64")]
		public void ApplyTo(PuppetMaster p)
		{
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x230D0E0", Offset = "0x230D0E0", VA = "0x230D0E0")]
		private Muscle GetMuscle(HumanBodyBones boneId, Animator animator, PuppetMaster puppetMaster)
		{
			return null;
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x230D214", Offset = "0x230D214", VA = "0x230D214")]
		public PuppetMasterHumanoidConfig()
		{
		}
	}
	[Token(Token = "0x20001B1")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x124EDF4", Offset = "0x124EDF4")]
	public class PuppetMasterSettings : Singleton<PuppetMasterSettings>
	{
		[Serializable]
		[Token(Token = "0x2000351")]
		public class PuppetUpdateLimit
		{
			[Token(Token = "0x40013A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125D228", Offset = "0x125D228")]
			public int puppetsPerFrame;

			[Token(Token = "0x40013A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private int index;

			[Token(Token = "0x60016E9")]
			[Address(RVA = "0x230D958", Offset = "0x230D958", VA = "0x230D958")]
			public PuppetUpdateLimit()
			{
			}

			[Token(Token = "0x60016EA")]
			[Address(RVA = "0x230D788", Offset = "0x230D788", VA = "0x230D788")]
			public void Step(int puppetCount)
			{
			}

			[Token(Token = "0x60016EB")]
			[Address(RVA = "0x230D438", Offset = "0x230D438", VA = "0x230D438")]
			public bool Update(List<PuppetMaster> puppets, PuppetMaster puppetMaster)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x125424C", Offset = "0x125424C")]
		public PuppetUpdateLimit kinematicCollidersUpdateLimit;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PuppetUpdateLimit freeUpdateLimit;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PuppetUpdateLimit fixedUpdateLimit;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool collisionStayMessages;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool collisionExitMessages;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float activePuppetCollisionThresholdMlp;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1254284", Offset = "0x1254284")]
		private int <currentlyActivePuppets>k__BackingField;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1254294", Offset = "0x1254294")]
		private int <currentlyKinematicPuppets>k__BackingField;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12542A4", Offset = "0x12542A4")]
		private int <currentlyDisabledPuppets>k__BackingField;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<PuppetMaster> _puppets;

		[Token(Token = "0x1700005F")]
		public int currentlyActivePuppets
		{
			[Token(Token = "0x6000CF2")]
			[Address(RVA = "0x230D2DC", Offset = "0x230D2DC", VA = "0x230D2DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261718", Offset = "0x1261718")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CF3")]
			[Address(RVA = "0x230D2E4", Offset = "0x230D2E4", VA = "0x230D2E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261728", Offset = "0x1261728")]
			private set
			{
			}
		}

		[Token(Token = "0x17000060")]
		public int currentlyKinematicPuppets
		{
			[Token(Token = "0x6000CF4")]
			[Address(RVA = "0x230D2EC", Offset = "0x230D2EC", VA = "0x230D2EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261738", Offset = "0x1261738")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CF5")]
			[Address(RVA = "0x230D2F4", Offset = "0x230D2F4", VA = "0x230D2F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261748", Offset = "0x1261748")]
			private set
			{
			}
		}

		[Token(Token = "0x17000061")]
		public int currentlyDisabledPuppets
		{
			[Token(Token = "0x6000CF6")]
			[Address(RVA = "0x230D2FC", Offset = "0x230D2FC", VA = "0x230D2FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261758", Offset = "0x1261758")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CF7")]
			[Address(RVA = "0x230D304", Offset = "0x230D304", VA = "0x230D304")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261768", Offset = "0x1261768")]
			private set
			{
			}
		}

		[Token(Token = "0x17000062")]
		public List<PuppetMaster> puppets
		{
			[Token(Token = "0x6000CF8")]
			[Address(RVA = "0x230D30C", Offset = "0x230D30C", VA = "0x230D30C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x230D314", Offset = "0x230D314", VA = "0x230D314")]
		public void Register(PuppetMaster puppetMaster)
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x230D3AC", Offset = "0x230D3AC", VA = "0x230D3AC")]
		public void Unregister(PuppetMaster puppetMaster)
		{
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x230D414", Offset = "0x230D414", VA = "0x230D414")]
		public bool UpdateMoveToTarget(PuppetMaster puppetMaster)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0x230D550", Offset = "0x230D550", VA = "0x230D550")]
		public bool UpdateFree(PuppetMaster puppetMaster)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x230D574", Offset = "0x230D574", VA = "0x230D574")]
		public bool UpdateFixed(PuppetMaster puppetMaster)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x230D598", Offset = "0x230D598", VA = "0x230D598")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x230D7A4", Offset = "0x230D7A4", VA = "0x230D7A4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x230D814", Offset = "0x230D814", VA = "0x230D814")]
		public PuppetMasterSettings()
		{
		}
	}
	[Token(Token = "0x20001B2")]
	public static class PuppetMasterTools
	{
		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x230D984", Offset = "0x230D984", VA = "0x230D984")]
		public static void PositionRagdoll(PuppetMaster puppetMaster)
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x230E00C", Offset = "0x230E00C", VA = "0x230E00C")]
		public static void RealignRagdoll(PuppetMaster puppetMaster)
		{
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x230E910", Offset = "0x230E910", VA = "0x230E910")]
		private static Vector3 DirectionIntToVector3(int dir)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x230E9C8", Offset = "0x230E9C8", VA = "0x230E9C8")]
		private static int DirectionVector3ToInt(Vector3 dir)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20001B3")]
	public class Weight
	{
		[Serializable]
		[Token(Token = "0x2000352")]
		public enum Mode
		{
			[Token(Token = "0x40013A3")]
			Float,
			[Token(Token = "0x40013A4")]
			Curve
		}

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mode mode;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float floatValue;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve curve;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string tooltip;

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x2312850", Offset = "0x2312850", VA = "0x2312850")]
		public Weight(float floatValue)
		{
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0x23128C4", Offset = "0x23128C4", VA = "0x23128C4")]
		public Weight(float floatValue, string tooltip)
		{
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0x2312954", Offset = "0x2312954", VA = "0x2312954")]
		public float GetValue(float param)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001B4")]
	public class InitialVelocity : MonoBehaviour
	{
		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 initialVelocity;

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x1A85AD8", Offset = "0x1A85AD8", VA = "0x1A85AD8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0x1A85B40", Offset = "0x1A85B40", VA = "0x1A85B40")]
		public InitialVelocity()
		{
		}
	}
	[Token(Token = "0x20001B5")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x124EE2C", Offset = "0x124EE2C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x124EE2C", Offset = "0x124EE2C")]
	public class BipedRagdollCreator : RagdollCreator
	{
		[Serializable]
		[Token(Token = "0x2000353")]
		public struct Options
		{
			[Token(Token = "0x40013A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float weight;

			[Token(Token = "0x40013A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x125D244", Offset = "0x125D244")]
			public bool spine;

			[Token(Token = "0x40013A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
			public bool chest;

			[Token(Token = "0x40013A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
			public bool hands;

			[Token(Token = "0x40013A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7")]
			public bool feet;

			[Token(Token = "0x40013AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x125D27C", Offset = "0x125D27C")]
			public JointType joints;

			[Token(Token = "0x40013AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float jointRange;

			[Token(Token = "0x40013AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x125D2B4", Offset = "0x125D2B4")]
			public float colliderLengthOverlap;

			[Token(Token = "0x40013AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public ColliderType torsoColliders;

			[Token(Token = "0x40013AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ColliderType headCollider;

			[Token(Token = "0x40013AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public ColliderType armColliders;

			[Token(Token = "0x40013B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ColliderType handColliders;

			[Token(Token = "0x40013B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public ColliderType legColliders;

			[Token(Token = "0x40013B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ColliderType footColliders;

			[Token(Token = "0x17000150")]
			public static Options Default
			{
				[Token(Token = "0x60016EC")]
				[Address(RVA = "0x1A80FD0", Offset = "0x1A80FD0", VA = "0x1A80FD0")]
				get
				{
					return default(Options);
				}
			}
		}

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool canBuild;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BipedRagdollReferences references;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Options options;

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x1A80CBC", Offset = "0x1A80CBC", VA = "0x1A80CBC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261778", Offset = "0x1261778")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x1A80D08", Offset = "0x1A80D08", VA = "0x1A80D08")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12617B0", Offset = "0x12617B0")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x1A80D54", Offset = "0x1A80D54", VA = "0x1A80D54")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12617E8", Offset = "0x12617E8")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0x1A80DA0", Offset = "0x1A80DA0", VA = "0x1A80DA0")]
		public static Options AutodetectOptions(BipedRagdollReferences r)
		{
			return default(Options);
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0x1A810DC", Offset = "0x1A810DC", VA = "0x1A810DC")]
		public static void Create(BipedRagdollReferences r, Options options)
		{
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x1A81A78", Offset = "0x1A81A78", VA = "0x1A81A78")]
		private static void CreateColliders(BipedRagdollReferences r, Options options)
		{
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0x1A83420", Offset = "0x1A83420", VA = "0x1A83420")]
		private static void CreateHandCollider(Transform hand, Transform lowerArm, Transform root, Options options)
		{
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0x1A83718", Offset = "0x1A83718", VA = "0x1A83718")]
		private static void CreateFootCollider(Transform foot, Transform lowerLeg, Transform upperLeg, Transform root, Options options)
		{
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0x1A83D4C", Offset = "0x1A83D4C", VA = "0x1A83D4C")]
		private static Vector3 GetChildCentroid(Transform t, Vector3 fallback)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0x1A826B4", Offset = "0x1A826B4", VA = "0x1A826B4")]
		private static void MassDistribution(BipedRagdollReferences r, Options o)
		{
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0x1A82B18", Offset = "0x1A82B18", VA = "0x1A82B18")]
		private static void CreateJoints(BipedRagdollReferences r, Options o)
		{
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0x1A83EFC", Offset = "0x1A83EFC", VA = "0x1A83EFC")]
		private static void CreateLimbJoints(Transform connectedBone, Transform bone1, Transform bone2, Transform bone3, Transform root, Vector3 defaultWorldDirection, JointType jointType, CreateJointParams.Limits limits1, CreateJointParams.Limits limits2, CreateJointParams.Limits limits3)
		{
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0x1A84600", Offset = "0x1A84600", VA = "0x1A84600")]
		public static void ClearBipedRagdoll(BipedRagdollReferences r)
		{
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0x1A84A78", Offset = "0x1A84A78", VA = "0x1A84A78")]
		public static bool IsClear(BipedRagdollReferences r)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0x1A8333C", Offset = "0x1A8333C", VA = "0x1A8333C")]
		private static Vector3 GetUpperArmToHeadCentroid(BipedRagdollReferences r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0x1A81008", Offset = "0x1A81008", VA = "0x1A81008")]
		private static Vector3 GetUpperArmCentroid(BipedRagdollReferences r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x1A84B74", Offset = "0x1A84B74", VA = "0x1A84B74")]
		public BipedRagdollCreator()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B6")]
	public struct BipedRagdollReferences
	{
		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Transform root;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform hips;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform spine;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform chest;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform head;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftUpperLeg;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftLowerLeg;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform leftFoot;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform rightUpperLeg;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform rightLowerLeg;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform rightFoot;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftUpperArm;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform leftLowerArm;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform leftHand;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform rightUpperArm;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform rightLowerArm;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform rightHand;

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x1A81224", Offset = "0x1A81224", VA = "0x1A81224")]
		public bool IsValid(ref string msg)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0x1A84BB0", Offset = "0x1A84BB0", VA = "0x1A84BB0")]
		private bool IsChildRecursive(Transform t, Transform parent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0x1A84CC0", Offset = "0x1A84CC0", VA = "0x1A84CC0")]
		public bool IsEmpty(bool considerRoot)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0x1A8505C", Offset = "0x1A8505C", VA = "0x1A8505C")]
		public bool Contains(Transform t, bool ignoreRoot = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0x1A84678", Offset = "0x1A84678", VA = "0x1A84678")]
		public Transform[] GetRagdollTransforms()
		{
			return null;
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0x1A853FC", Offset = "0x1A853FC", VA = "0x1A853FC")]
		public static BipedRagdollReferences FromAvatar(Animator animator)
		{
			return default(BipedRagdollReferences);
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x1A85684", Offset = "0x1A85684", VA = "0x1A85684")]
		public static BipedRagdollReferences FromBipedReferences(BipedReferences biped)
		{
			return default(BipedRagdollReferences);
		}
	}
	[Token(Token = "0x20001B7")]
	public static class JointConverter
	{
		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x1A85B58", Offset = "0x1A85B58", VA = "0x1A85B58")]
		public static void ToConfigurable(GameObject root)
		{
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x1A86034", Offset = "0x1A86034", VA = "0x1A86034")]
		public static void HingeToConfigurable(HingeJoint src)
		{
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0x1A862E8", Offset = "0x1A862E8", VA = "0x1A862E8")]
		public static void FixedToConfigurable(FixedJoint src)
		{
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0x1A86434", Offset = "0x1A86434", VA = "0x1A86434")]
		public static void SpringToConfigurable(SpringJoint src)
		{
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0x1A85DF4", Offset = "0x1A85DF4", VA = "0x1A85DF4")]
		public static void CharacterToConfigurable(CharacterJoint src)
		{
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0x1A865DC", Offset = "0x1A865DC", VA = "0x1A865DC")]
		private static void ConvertJoint(ref ConfigurableJoint conf, Joint src)
		{
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0x1A86714", Offset = "0x1A86714", VA = "0x1A86714")]
		private static SoftJointLimit ConvertToHighSoftJointLimit(JointLimits src, JointSpring spring, bool useSpring)
		{
			return default(SoftJointLimit);
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x1A867D0", Offset = "0x1A867D0", VA = "0x1A867D0")]
		private static SoftJointLimit ConvertToLowSoftJointLimit(JointLimits src, JointSpring spring, bool useSpring)
		{
			return default(SoftJointLimit);
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0x1A86778", Offset = "0x1A86778", VA = "0x1A86778")]
		private static SoftJointLimitSpring ConvertToSoftJointLimitSpring(JointLimits src, JointSpring spring, bool useSpring)
		{
			return default(SoftJointLimitSpring);
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x1A86834", Offset = "0x1A86834", VA = "0x1A86834")]
		private static SoftJointLimit CopyLimit(SoftJointLimit src)
		{
			return default(SoftJointLimit);
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x1A86894", Offset = "0x1A86894", VA = "0x1A86894")]
		private static SoftJointLimitSpring CopyLimitSpring(SoftJointLimitSpring src)
		{
			return default(SoftJointLimitSpring);
		}
	}
	[Token(Token = "0x20001B8")]
	public abstract class RagdollCreator : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000354")]
		public enum ColliderType
		{
			[Token(Token = "0x40013B4")]
			Box,
			[Token(Token = "0x40013B5")]
			Capsule
		}

		[Serializable]
		[Token(Token = "0x2000355")]
		public enum JointType
		{
			[Token(Token = "0x40013B7")]
			Configurable,
			[Token(Token = "0x40013B8")]
			Character
		}

		[Serializable]
		[Token(Token = "0x2000356")]
		public enum Direction
		{
			[Token(Token = "0x40013BA")]
			X,
			[Token(Token = "0x40013BB")]
			Y,
			[Token(Token = "0x40013BC")]
			Z
		}

		[Token(Token = "0x2000357")]
		public struct CreateJointParams
		{
			[Token(Token = "0x200042D")]
			public struct Limits
			{
				[Token(Token = "0x4001729")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public float minSwing;

				[Token(Token = "0x400172A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
				public float maxSwing;

				[Token(Token = "0x400172B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public float swing2;

				[Token(Token = "0x400172C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
				public float twist;

				[Token(Token = "0x60019FC")]
				[Address(RVA = "0x23106C4", Offset = "0x23106C4", VA = "0x23106C4")]
				public Limits(float minSwing, float maxSwing, float swing2, float twist)
				{
				}
			}

			[Token(Token = "0x40013BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Rigidbody rigidbody;

			[Token(Token = "0x40013BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Rigidbody connectedBody;

			[Token(Token = "0x40013BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform child;

			[Token(Token = "0x40013C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 worldSwingAxis;

			[Token(Token = "0x40013C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Limits limits;

			[Token(Token = "0x40013C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public JointType type;

			[Token(Token = "0x60016ED")]
			[Address(RVA = "0x231061C", Offset = "0x231061C", VA = "0x231061C")]
			public CreateJointParams(Rigidbody rigidbody, Rigidbody connectedBody, Transform child, Vector3 worldSwingAxis, Limits limits, JointType type)
			{
			}
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0x230EB20", Offset = "0x230EB20", VA = "0x230EB20")]
		public static void ClearAll(Transform root)
		{
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0x230ED20", Offset = "0x230ED20", VA = "0x230ED20")]
		protected static void ClearTransform(Transform transform)
		{
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0x230EF54", Offset = "0x230EF54", VA = "0x230EF54")]
		protected static void CreateCollider(Transform t, Vector3 startPoint, Vector3 endPoint, ColliderType colliderType, float lengthOverlap, float width)
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0x230F4D0", Offset = "0x230F4D0", VA = "0x230F4D0")]
		protected static void CreateCollider(Transform t, Vector3 startPoint, Vector3 endPoint, ColliderType colliderType, float lengthOverlap, float width, float proportionAspect, Vector3 widthDirection)
		{
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0x230F348", Offset = "0x230F348", VA = "0x230F348")]
		protected static float GetScaleF(Transform t)
		{
			return default(float);
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x230F8C8", Offset = "0x230F8C8", VA = "0x230F8C8")]
		protected static Vector3 Abs(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x230F8F8", Offset = "0x230F8F8", VA = "0x230F8F8")]
		protected static void Vector3Abs(ref Vector3 v)
		{
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x230F978", Offset = "0x230F978", VA = "0x230F978")]
		protected static Vector3 DirectionIntToVector3(int dir)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x230FA30", Offset = "0x230FA30", VA = "0x230FA30")]
		protected static Vector3 DirectionToVector3(Direction dir)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x230F378", Offset = "0x230F378", VA = "0x230F378")]
		protected static int DirectionVector3ToInt(Vector3 dir)
		{
			return default(int);
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x230FAE8", Offset = "0x230FAE8", VA = "0x230FAE8")]
		protected static Vector3 GetLocalOrthoDirection(Transform transform, Vector3 worldDir)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x230FE00", Offset = "0x230FE00", VA = "0x230FE00")]
		protected static Rigidbody GetConnectedBody(Transform bone, ref Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x230FFC0", Offset = "0x230FFC0", VA = "0x230FFC0")]
		protected static void CreateJoint(CreateJointParams p)
		{
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0x23105E0", Offset = "0x23105E0", VA = "0x23105E0")]
		private static SoftJointLimit ToSoftJointLimit(float limit)
		{
			return default(SoftJointLimit);
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x2310614", Offset = "0x2310614", VA = "0x2310614")]
		protected RagdollCreator()
		{
		}
	}
	[Token(Token = "0x20001B9")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x124EE8C", Offset = "0x124EE8C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x124EE8C", Offset = "0x124EE8C")]
	public class RagdollEditor : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000358")]
		public enum Mode
		{
			[Token(Token = "0x40013C4")]
			Colliders,
			[Token(Token = "0x40013C5")]
			Joints
		}

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public Rigidbody selectedRigidbody;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public Collider selectedCollider;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public bool symmetry;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		public Mode mode;

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x23106D0", Offset = "0x23106D0", VA = "0x23106D0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261820", Offset = "0x1261820")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0x231071C", Offset = "0x231071C", VA = "0x231071C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261858", Offset = "0x1261858")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0x2310768", Offset = "0x2310768", VA = "0x2310768")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261890", Offset = "0x1261890")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x23107B4", Offset = "0x23107B4", VA = "0x23107B4")]
		public RagdollEditor()
		{
		}
	}
}
namespace RootMotion.Demos
{
	[Token(Token = "0x20001BA")]
	public class AimBoxing : MonoBehaviour
	{
		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform pin;

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0x1CB1718", Offset = "0x1CB1718", VA = "0x1CB1718")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0x1CB179C", Offset = "0x1CB179C", VA = "0x1CB179C")]
		public AimBoxing()
		{
		}
	}
	[Token(Token = "0x20001BB")]
	public class AimSwing : MonoBehaviour
	{
		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK ik;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12542F4", Offset = "0x12542F4")]
		public Vector3 animatedSwingDirection;

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0x1CB17A4", Offset = "0x1CB17A4", VA = "0x1CB17A4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x1CB18AC", Offset = "0x1CB18AC", VA = "0x1CB18AC")]
		public AimSwing()
		{
		}
	}
	[Token(Token = "0x20001BC")]
	public class SimpleAimingSystem : MonoBehaviour
	{
		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125432C", Offset = "0x125432C")]
		public AimPoser aimPoser;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254364", Offset = "0x1254364")]
		public AimIK aim;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125439C", Offset = "0x125439C")]
		public LookAtIK lookAt;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12543D4", Offset = "0x12543D4")]
		public Animator animator;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125440C", Offset = "0x125440C")]
		public float crossfadeTime;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254444", Offset = "0x1254444")]
		public float minAimDistance;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AimPoser.Pose aimPose;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AimPoser.Pose lastPose;

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x1CC8704", Offset = "0x1CC8704", VA = "0x1CC8704")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x1CC8748", Offset = "0x1CC8748", VA = "0x1CC8748")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0x1CC889C", Offset = "0x1CC889C", VA = "0x1CC889C")]
		private void Pose()
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0x1CC8ABC", Offset = "0x1CC8ABC", VA = "0x1CC8ABC")]
		private void LimitAimTarget()
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0x1CC8CB4", Offset = "0x1CC8CB4", VA = "0x1CC8CB4")]
		private void DirectCrossFade(string state, float target)
		{
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0x1CC8D8C", Offset = "0x1CC8D8C", VA = "0x1CC8D8C")]
		public SimpleAimingSystem()
		{
		}
	}
	[Token(Token = "0x20001BD")]
	public class TerrainOffset : MonoBehaviour
	{
		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 raycastOffset;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask raycastLayers;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float min;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float max;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float lerpSpeed;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private RaycastHit hit;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 offset;

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0x1CC9FB8", Offset = "0x1CC9FB8", VA = "0x1CC9FB8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0x1CCA21C", Offset = "0x1CCA21C", VA = "0x1CCA21C")]
		private Vector3 GetGroundHeightOffset(Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0x1CCA46C", Offset = "0x1CCA46C", VA = "0x1CCA46C")]
		public TerrainOffset()
		{
		}
	}
	[Token(Token = "0x20001BE")]
	public class BipedIKvsAnimatorIK : MonoBehaviour
	{
		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x125447C", Offset = "0x125447C")]
		public Animator animator;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BipedIK bipedIK;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x12544B4", Offset = "0x12544B4")]
		public Transform lookAtTargetBiped;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform lookAtTargetAnimator;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12544EC", Offset = "0x12544EC")]
		public float lookAtWeight;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1254504", Offset = "0x1254504")]
		public float lookAtBodyWeight;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125451C", Offset = "0x125451C")]
		public float lookAtHeadWeight;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1254534", Offset = "0x1254534")]
		public float lookAtEyesWeight;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125454C", Offset = "0x125454C")]
		public float lookAtClampWeight;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1254564", Offset = "0x1254564")]
		public float lookAtClampWeightHead;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125457C", Offset = "0x125457C")]
		public float lookAtClampWeightEyes;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x1254594", Offset = "0x1254594")]
		public Transform footTargetBiped;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform footTargetAnimator;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12545CC", Offset = "0x12545CC")]
		public float footPositionWeight;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12545E4", Offset = "0x12545E4")]
		public float footRotationWeight;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x12545FC", Offset = "0x12545FC")]
		public Transform handTargetBiped;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform handTargetAnimator;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1254634", Offset = "0x1254634")]
		public float handPositionWeight;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125464C", Offset = "0x125464C")]
		public float handRotationWeight;

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0x1CB38C8", Offset = "0x1CB38C8", VA = "0x1CB38C8")]
		private void OnAnimatorIK(int layer)
		{
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0x1CB3D74", Offset = "0x1CB3D74", VA = "0x1CB3D74")]
		public BipedIKvsAnimatorIK()
		{
		}
	}
	[Token(Token = "0x20001BF")]
	public class MechSpider : MonoBehaviour
	{
		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask raycastLayers;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float scale;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform body;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MechSpiderLeg[] legs;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float legRotationWeight;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rootPositionSpeed;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float breatheSpeed;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float breatheMagnitude;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float height;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float minHeight;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float raycastHeight;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float raycastDistance;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 defaultBodyLocalPosition;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float sine;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RaycastHit rootHit;

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0x1CC07F4", Offset = "0x1CC07F4", VA = "0x1CC07F4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0x1CC1228", Offset = "0x1CC1228", VA = "0x1CC1228")]
		private Vector3 GetLegCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0x1CC0F10", Offset = "0x1CC0F10", VA = "0x1CC0F10")]
		private Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0x1CC13D0", Offset = "0x1CC13D0", VA = "0x1CC13D0")]
		public MechSpider()
		{
		}
	}
	[Token(Token = "0x20001C0")]
	public class MechSpiderController : MonoBehaviour
	{
		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform cameraTransform;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speed;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float turnSpeed;

		[Token(Token = "0x17000063")]
		public Vector3 inputVector
		{
			[Token(Token = "0x6000D53")]
			[Address(RVA = "0x1CC13FC", Offset = "0x1CC13FC", VA = "0x1CC13FC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0x1CC149C", Offset = "0x1CC149C", VA = "0x1CC149C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0x1CC1734", Offset = "0x1CC1734", VA = "0x1CC1734")]
		public MechSpiderController()
		{
		}
	}
	[Token(Token = "0x20001C1")]
	public class MechSpiderLeg : MonoBehaviour
	{
		[Token(Token = "0x2000359")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251B88", Offset = "0x1251B88")]
		private sealed class <Step>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MechSpiderLeg <>4__this;

			[Token(Token = "0x40013C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 stepStartPosition;

			[Token(Token = "0x40013CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 targetPosition;

			[Token(Token = "0x17000151")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016F1")]
				[Address(RVA = "0x1CC2444", Offset = "0x1CC2444", VA = "0x1CC2444", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000152")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016F3")]
				[Address(RVA = "0x1CC24AC", Offset = "0x1CC24AC", VA = "0x1CC24AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016EE")]
			[Address(RVA = "0x1CC20C8", Offset = "0x1CC20C8", VA = "0x1CC20C8")]
			[DebuggerHidden]
			public <Step>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x60016EF")]
			[Address(RVA = "0x1CC2124", Offset = "0x1CC2124", VA = "0x1CC2124", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016F0")]
			[Address(RVA = "0x1CC2128", Offset = "0x1CC2128", VA = "0x1CC2128", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016F2")]
			[Address(RVA = "0x1CC244C", Offset = "0x1CC244C", VA = "0x1CC244C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MechSpiderLeg unSync;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 offset;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minDelay;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxOffset;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float stepSpeed;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float footHeight;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float velocityPrediction;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float raycastFocus;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve yOffset;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ParticleSystem sand;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IK ik;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float stepProgress;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float lastStepTime;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private RaycastHit hit;

		[Token(Token = "0x17000064")]
		public bool isStepping
		{
			[Token(Token = "0x6000D56")]
			[Address(RVA = "0x1CC1748", Offset = "0x1CC1748", VA = "0x1CC1748")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000065")]
		public Vector3 position
		{
			[Token(Token = "0x6000D57")]
			[Address(RVA = "0x1CC139C", Offset = "0x1CC139C", VA = "0x1CC139C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000D58")]
			[Address(RVA = "0x1CC175C", Offset = "0x1CC175C", VA = "0x1CC175C")]
			set
			{
			}
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0x1CC17AC", Offset = "0x1CC17AC", VA = "0x1CC17AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0x1CC180C", Offset = "0x1CC180C", VA = "0x1CC180C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0x1CC19B4", Offset = "0x1CC19B4", VA = "0x1CC19B4")]
		private Vector3 GetStepTarget(out bool stepFound, float focus, float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0x1CC1D84", Offset = "0x1CC1D84", VA = "0x1CC1D84")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0x1CC1EAC", Offset = "0x1CC1EAC", VA = "0x1CC1EAC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0x1CC1DF4", Offset = "0x1CC1DF4", VA = "0x1CC1DF4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12618C8", Offset = "0x12618C8")]
		private IEnumerator Step(Vector3 stepStartPosition, Vector3 targetPosition)
		{
			return null;
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0x1CC20F4", Offset = "0x1CC20F4", VA = "0x1CC20F4")]
		public MechSpiderLeg()
		{
		}
	}
	[Token(Token = "0x20001C2")]
	public class MechSpiderParticles : MonoBehaviour
	{
		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpiderController mechSpiderController;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem particles;

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0x1CC24B4", Offset = "0x1CC24B4", VA = "0x1CC24B4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0x1CC2570", Offset = "0x1CC2570", VA = "0x1CC2570")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0x1CC2804", Offset = "0x1CC2804", VA = "0x1CC2804")]
		public MechSpiderParticles()
		{
		}
	}
	[Token(Token = "0x20001C3")]
	public class AnimationWarping : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200035A")]
		public struct Warp
		{
			[Token(Token = "0x40013CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D2EC", Offset = "0x125D2EC")]
			public int animationLayer;

			[Token(Token = "0x40013CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D324", Offset = "0x125D324")]
			public string animationState;

			[Token(Token = "0x40013CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D35C", Offset = "0x125D35C")]
			public AnimationCurve weightCurve;

			[Token(Token = "0x40013CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D394", Offset = "0x125D394")]
			public Transform warpFrom;

			[Token(Token = "0x40013CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D3CC", Offset = "0x125D3CC")]
			public Transform warpTo;

			[Token(Token = "0x40013D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D404", Offset = "0x125D404")]
			public FullBodyBipedEffector effector;
		}

		[Serializable]
		[Token(Token = "0x200035B")]
		public enum EffectorMode
		{
			[Token(Token = "0x40013D2")]
			PositionOffset,
			[Token(Token = "0x40013D3")]
			Position
		}

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254664", Offset = "0x1254664")]
		public Animator animator;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125469C", Offset = "0x125469C")]
		public EffectorMode effectorMode;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x12546D4", Offset = "0x12546D4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12546D4", Offset = "0x12546D4")]
		public Warp[] warps;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private EffectorMode lastMode;

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0x1CB1924", Offset = "0x1CB1924", VA = "0x1CB1924", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0x1CB1950", Offset = "0x1CB1950", VA = "0x1CB1950")]
		public float GetWarpWeight(int warpIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x1CB1B70", Offset = "0x1CB1B70", VA = "0x1CB1B70", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x1CB1F24", Offset = "0x1CB1F24", VA = "0x1CB1F24")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x1CB1FC4", Offset = "0x1CB1FC4", VA = "0x1CB1FC4")]
		public AnimationWarping()
		{
		}
	}
	[Token(Token = "0x20001C4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x124EEEC", Offset = "0x124EEEC")]
	public class AnimatorController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotateSpeed;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blendSpeed;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxAngle;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float moveSpeed;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rootMotionWeight;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Animator animator;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 moveBlend;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Vector3 moveInput;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Vector3 velocity;

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x1CB1FCC", Offset = "0x1CB1FCC", VA = "0x1CB1FCC", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0x1CB202C", Offset = "0x1CB202C", VA = "0x1CB202C")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0x1CB2264", Offset = "0x1CB2264", VA = "0x1CB2264", Slot = "5")]
		public virtual void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x1CB24C8", Offset = "0x1CB24C8", VA = "0x1CB24C8")]
		public AnimatorController3rdPerson()
		{
		}
	}
	[Token(Token = "0x20001C5")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x124EF50", Offset = "0x124EF50")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x124EF50", Offset = "0x124EF50")]
	public class AnimatorController3rdPersonIK : AnimatorController3rdPerson
	{
		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1254724", Offset = "0x1254724")]
		public float headLookWeight;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 gunHoldOffset;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Recoil recoil;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AimIK aim;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 headLookAxis;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 leftHandPosRelToRightHand;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion leftHandRotRelToRightHand;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 aimTarget;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0x1CB24DC", Offset = "0x1CB24DC", VA = "0x1CB24DC", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0x1CB2688", Offset = "0x1CB2688", VA = "0x1CB2688", Slot = "5")]
		public override void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x1CB26FC", Offset = "0x1CB26FC", VA = "0x1CB26FC")]
		private void Read()
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x1CB2854", Offset = "0x1CB2854", VA = "0x1CB2854")]
		private void AimIK()
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x1CB289C", Offset = "0x1CB289C", VA = "0x1CB289C")]
		private void FBBIK()
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x1CB2E94", Offset = "0x1CB2E94", VA = "0x1CB2E94")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x1CB2C58", Offset = "0x1CB2C58", VA = "0x1CB2C58")]
		private void HeadLookAt(Vector3 lookAtTarget)
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x1CB31EC", Offset = "0x1CB31EC", VA = "0x1CB31EC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x1CB3308", Offset = "0x1CB3308", VA = "0x1CB3308")]
		public AnimatorController3rdPersonIK()
		{
		}
	}
	[Token(Token = "0x20001C6")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x124EFDC", Offset = "0x124EFDC")]
	public class CharacterAnimationThirdPersonIK : CharacterAnimationThirdPerson
	{
		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0x1CB563C", Offset = "0x1CB563C", VA = "0x1CB563C", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0x1CB56A4", Offset = "0x1CB56A4", VA = "0x1CB56A4", Slot = "7")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0x1CB5968", Offset = "0x1CB5968", VA = "0x1CB5968")]
		private void RotateEffector(IKEffector effector, Quaternion rotation, float mlp)
		{
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0x1CB5B20", Offset = "0x1CB5B20", VA = "0x1CB5B20")]
		public CharacterAnimationThirdPersonIK()
		{
		}
	}
	[Token(Token = "0x20001C7")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1250040", Offset = "0x1250040")]
	public class CharacterController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private CameraController cam;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AnimatorController3rdPerson animatorController;

		[Token(Token = "0x17000066")]
		private static Vector3 inputVector
		{
			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0x1CB698C", Offset = "0x1CB698C", VA = "0x1CB698C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000067")]
		private static Vector3 inputVectorRaw
		{
			[Token(Token = "0x6000D7C")]
			[Address(RVA = "0x1CB6A2C", Offset = "0x1CB6A2C", VA = "0x1CB6A2C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0x1CB66D0", Offset = "0x1CB66D0", VA = "0x1CB66D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0x1CB6748", Offset = "0x1CB6748", VA = "0x1CB6748")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0x1CB6ACC", Offset = "0x1CB6ACC", VA = "0x1CB6ACC")]
		public CharacterController3rdPerson()
		{
		}
	}
	[Token(Token = "0x20001C8")]
	public class EffectorOffset : OffsetModifier
	{
		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125474C", Offset = "0x125474C")]
		public float handsMaintainRelativePositionWeight;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 bodyOffset;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 leftShoulderOffset;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rightShoulderOffset;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 leftThighOffset;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 rightThighOffset;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Vector3 rightHandOffset;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector3 leftFootOffset;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 rightFootOffset;

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0x1CBA6A8", Offset = "0x1CBA6A8", VA = "0x1CBA6A8", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0x1CBAC8C", Offset = "0x1CBAC8C", VA = "0x1CBAC8C")]
		public EffectorOffset()
		{
		}
	}
	[Token(Token = "0x20001C9")]
	public class ExplosionDemo : MonoBehaviour
	{
		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SimpleLocomotion character;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float forceMlp;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float upForce;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weightFalloffSpeed;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve weightFalloff;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve explosionForceByDistance;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve scale;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float weight;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 defaultScale;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody r;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0x1CBAC94", Offset = "0x1CBAC94", VA = "0x1CBAC94")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0x1CBAD48", Offset = "0x1CBAD48", VA = "0x1CBAD48")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0x1CBB1C4", Offset = "0x1CBB1C4", VA = "0x1CBB1C4")]
		private void SetEffectorWeights(float w)
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0x1CBB270", Offset = "0x1CBB270", VA = "0x1CBB270")]
		public ExplosionDemo()
		{
		}
	}
	[Token(Token = "0x20001CA")]
	public class FBBIKSettings : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200035C")]
		public class Limb
		{
			[Token(Token = "0x40013D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FBIKChain.Smoothing reachSmoothing;

			[Token(Token = "0x40013D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float maintainRelativePositionWeight;

			[Token(Token = "0x40013D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float mappingWeight;

			[Token(Token = "0x60016F4")]
			[Address(RVA = "0x1CBB444", Offset = "0x1CBB444", VA = "0x1CBB444")]
			public void Apply(FullBodyBipedChain chain, IKSolverFullBodyBiped solver)
			{
			}

			[Token(Token = "0x60016F5")]
			[Address(RVA = "0x1CBB578", Offset = "0x1CBB578", VA = "0x1CBB578")]
			public Limb()
			{
			}
		}

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool disableAfterStart;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Limb leftArm;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Limb rightArm;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Limb leftLeg;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Limb rightLeg;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rootPin;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bodyEffectChildNodes;

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0x1CBB2F8", Offset = "0x1CBB2F8", VA = "0x1CBB2F8")]
		public void UpdateSettings()
		{
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0x1CBB4C8", Offset = "0x1CBB4C8", VA = "0x1CBB4C8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0x1CBB564", Offset = "0x1CBB564", VA = "0x1CBB564")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0x1CBB568", Offset = "0x1CBB568", VA = "0x1CBB568")]
		public FBBIKSettings()
		{
		}
	}
	[Token(Token = "0x20001CB")]
	public class FBIKBendGoal : MonoBehaviour
	{
		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedChain chain;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float weight;

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x1CBB588", Offset = "0x1CBB588", VA = "0x1CBB588")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x1CBB5F4", Offset = "0x1CBB5F4", VA = "0x1CBB5F4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x1CBB6D8", Offset = "0x1CBB6D8", VA = "0x1CBB6D8")]
		public FBIKBendGoal()
		{
		}
	}
	[Token(Token = "0x20001CC")]
	public class FBIKBoxing : MonoBehaviour
	{
		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254764", Offset = "0x1254764")]
		public Transform target;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125479C", Offset = "0x125479C")]
		public Transform pin;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12547D4", Offset = "0x12547D4")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125480C", Offset = "0x125480C")]
		public AimIK aim;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254844", Offset = "0x1254844")]
		public float weight;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125487C", Offset = "0x125487C")]
		public FullBodyBipedEffector effector;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12548B4", Offset = "0x12548B4")]
		public AnimationCurve aimWeight;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Animator animator;

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x1CBB6E0", Offset = "0x1CBB6E0", VA = "0x1CBB6E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0x1CBB740", Offset = "0x1CBB740", VA = "0x1CBB740")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0x1CBB8DC", Offset = "0x1CBB8DC", VA = "0x1CBB8DC")]
		public FBIKBoxing()
		{
		}
	}
	[Token(Token = "0x20001CD")]
	public class FBIKHandsOnProp : MonoBehaviour
	{
		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool leftHanded;

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0x1CBB8E4", Offset = "0x1CBB8E4", VA = "0x1CBB8E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0x1CBB9B4", Offset = "0x1CBB9B4", VA = "0x1CBB9B4")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0x1CBBA44", Offset = "0x1CBBA44", VA = "0x1CBBA44")]
		private void HandsOnProp(IKEffector mainHand, IKEffector otherHand)
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x1CBBF58", Offset = "0x1CBBF58", VA = "0x1CBBF58")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0x1CBC074", Offset = "0x1CBC074", VA = "0x1CBC074")]
		public FBIKHandsOnProp()
		{
		}
	}
	[Token(Token = "0x20001CE")]
	public class FPSAiming : MonoBehaviour
	{
		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12548EC", Offset = "0x12548EC")]
		public float aimWeight;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1254904", Offset = "0x1254904")]
		public float sightWeight;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125491C", Offset = "0x125491C")]
		public float maxAngle;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 aimOffset;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool animatePhysics;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform gun;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform gunTarget;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AimIK gunAim;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private CameraControllerFPS cam;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Recoil recoil;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12549A8", Offset = "0x12549A8")]
		private float cameraRecoilWeight;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 gunTargetDefaultLocalPosition;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion gunTargetDefaultLocalRotation;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 camDefaultLocalPosition;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector3 camRelativeToGunTarget;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool updateFrame;

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0x1CBC07C", Offset = "0x1CBC07C", VA = "0x1CBC07C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0x1CBC1DC", Offset = "0x1CBC1DC", VA = "0x1CBC1DC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0x1CBC1E8", Offset = "0x1CBC1E8", VA = "0x1CBC1E8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0x1CBC528", Offset = "0x1CBC528", VA = "0x1CBC528")]
		private void Aiming()
		{
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0x1CBC790", Offset = "0x1CBC790", VA = "0x1CBC790")]
		private void LookDownTheSight()
		{
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x1CBC2AC", Offset = "0x1CBC2AC", VA = "0x1CBC2AC")]
		private void RotateCharacter()
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x1CBD19C", Offset = "0x1CBD19C", VA = "0x1CBD19C")]
		public FPSAiming()
		{
		}
	}
	[Token(Token = "0x20001CF")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12500A4", Offset = "0x12500A4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12500A4", Offset = "0x12500A4")]
	public class FPSCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12549E8", Offset = "0x12549E8")]
		public float walkSpeed;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float sVel;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FPSAiming FPSAiming;

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x1CBD1BC", Offset = "0x1CBD1BC", VA = "0x1CBD1BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x1CBD240", Offset = "0x1CBD240", VA = "0x1CBD240")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x1CBD364", Offset = "0x1CBD364", VA = "0x1CBD364")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x1CBD414", Offset = "0x1CBD414", VA = "0x1CBD414")]
		public FPSCharacter()
		{
		}
	}
	[Token(Token = "0x20001D0")]
	public class HitReactionTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HitReaction hitReaction;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float hitForce;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x1CBE194", Offset = "0x1CBE194", VA = "0x1CBE194")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x1CBE360", Offset = "0x1CBE360", VA = "0x1CBE360")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x1CBE524", Offset = "0x1CBE524", VA = "0x1CBE524")]
		public HitReactionTrigger()
		{
		}
	}
	[Token(Token = "0x20001D1")]
	public class HoldingHands : MonoBehaviour
	{
		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK rightHandChar;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedIK leftHandChar;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform rightHandTarget;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float crossFade;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float speed;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandRotation;

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x1CBE8D4", Offset = "0x1CBE8D4", VA = "0x1CBE8D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0x1CBEA80", Offset = "0x1CBEA80", VA = "0x1CBEA80")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x1CBEE3C", Offset = "0x1CBEE3C", VA = "0x1CBEE3C")]
		public HoldingHands()
		{
		}
	}
	[Token(Token = "0x20001D2")]
	public class InteractionC2CDemo : MonoBehaviour
	{
		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem character1;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem character2;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject handShake;

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0x1CBEE4C", Offset = "0x1CBEE4C", VA = "0x1CBEE4C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0x1CBEF80", Offset = "0x1CBEF80", VA = "0x1CBEF80")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0x1CBF0D0", Offset = "0x1CBF0D0", VA = "0x1CBF0D0")]
		public InteractionC2CDemo()
		{
		}
	}
	[Token(Token = "0x20001D3")]
	public class InteractionDemo : MonoBehaviour
	{
		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool interrupt;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject ball;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractionObject benchMain;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractionObject benchHands;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionObject button;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractionObject cigarette;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionObject door;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isSitting;

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x1CBF0D8", Offset = "0x1CBF0D8", VA = "0x1CBF0D8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x1CBF7A8", Offset = "0x1CBF7A8", VA = "0x1CBF7A8")]
		public InteractionDemo()
		{
		}
	}
	[Token(Token = "0x20001D4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1250130", Offset = "0x1250130")]
	public class InteractionSystemTestGUI : MonoBehaviour
	{
		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254A20", Offset = "0x1254A20")]
		[SerializeField]
		private InteractionObject interactionObject;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254A6C", Offset = "0x1254A6C")]
		[SerializeField]
		private FullBodyBipedEffector[] effectors;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x1CBF7B0", Offset = "0x1CBF7B0", VA = "0x1CBF7B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0x1CBF810", Offset = "0x1CBF810", VA = "0x1CBF810")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0x1CBFB1C", Offset = "0x1CBFB1C", VA = "0x1CBFB1C")]
		public InteractionSystemTestGUI()
		{
		}
	}
	[Token(Token = "0x20001D5")]
	public class KissingRig : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200035D")]
		public class Partner
		{
			[Token(Token = "0x40013D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedIK ik;

			[Token(Token = "0x40013D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform mouth;

			[Token(Token = "0x40013D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform mouthTarget;

			[Token(Token = "0x40013DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform touchTargetLeftHand;

			[Token(Token = "0x40013DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform touchTargetRightHand;

			[Token(Token = "0x40013DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float bodyWeightHorizontal;

			[Token(Token = "0x40013DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float bodyWeightVertical;

			[Token(Token = "0x40013DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float neckRotationWeight;

			[Token(Token = "0x40013DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float headTiltAngle;

			[Token(Token = "0x40013E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 headTiltAxis;

			[Token(Token = "0x40013E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Quaternion neckRotation;

			[Token(Token = "0x17000153")]
			private Transform neck
			{
				[Token(Token = "0x60016F8")]
				[Address(RVA = "0x1CC053C", Offset = "0x1CC053C", VA = "0x1CC053C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016F6")]
			[Address(RVA = "0x1CBFC74", Offset = "0x1CBFC74", VA = "0x1CBFC74")]
			public void Initiate()
			{
			}

			[Token(Token = "0x60016F7")]
			[Address(RVA = "0x1CBFCF4", Offset = "0x1CBFCF4", VA = "0x1CBFCF4")]
			public void Update(float weight)
			{
			}

			[Token(Token = "0x60016F9")]
			[Address(RVA = "0x1CC0360", Offset = "0x1CC0360", VA = "0x1CC0360")]
			private void InverseTransformEffector(FullBodyBipedEffector effector, Transform target, Vector3 targetPosition, float weight)
			{
			}

			[Token(Token = "0x60016FA")]
			[Address(RVA = "0x1CC0594", Offset = "0x1CC0594", VA = "0x1CC0594")]
			public Partner()
			{
			}
		}

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Partner partner1;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Partner partner2;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weight;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int iterations;

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x1CBFC40", Offset = "0x1CBFC40", VA = "0x1CBFC40")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0x1CBFC94", Offset = "0x1CBFC94", VA = "0x1CBFC94")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0x1CC0350", Offset = "0x1CC0350", VA = "0x1CC0350")]
		public KissingRig()
		{
		}
	}
	[Token(Token = "0x20001D6")]
	public class MotionAbsorb : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200035E")]
		public enum Mode
		{
			[Token(Token = "0x40013E3")]
			Position,
			[Token(Token = "0x40013E4")]
			PositionOffset
		}

		[Serializable]
		[Token(Token = "0x200035F")]
		public class Absorber
		{
			[Token(Token = "0x40013E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D43C", Offset = "0x125D43C")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x40013E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D474", Offset = "0x125D474")]
			public float weight;

			[Token(Token = "0x40013E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Vector3 position;

			[Token(Token = "0x40013E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private Quaternion rotation;

			[Token(Token = "0x40013E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IKEffector e;

			[Token(Token = "0x60016FB")]
			[Address(RVA = "0x1CC2980", Offset = "0x1CC2980", VA = "0x1CC2980")]
			public void SetToBone(IKSolverFullBodyBiped solver, Mode mode)
			{
			}

			[Token(Token = "0x60016FC")]
			[Address(RVA = "0x1CC2B74", Offset = "0x1CC2B74", VA = "0x1CC2B74")]
			public void UpdateEffectorWeights(float w)
			{
			}

			[Token(Token = "0x60016FD")]
			[Address(RVA = "0x1CC2BB0", Offset = "0x1CC2BB0", VA = "0x1CC2BB0")]
			public void SetPosition(float w)
			{
			}

			[Token(Token = "0x60016FE")]
			[Address(RVA = "0x1CC2D60", Offset = "0x1CC2D60", VA = "0x1CC2D60")]
			public void SetRotation(float w)
			{
			}

			[Token(Token = "0x60016FF")]
			[Address(RVA = "0x1CC2FA8", Offset = "0x1CC2FA8", VA = "0x1CC2FA8")]
			public Absorber()
			{
			}
		}

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254AB8", Offset = "0x1254AB8")]
		public Mode mode;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254AF0", Offset = "0x1254AF0")]
		public Absorber[] absorbers;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254B28", Offset = "0x1254B28")]
		public AnimationCurve falloff;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254B60", Offset = "0x1254B60")]
		public float falloffSpeed;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float timer;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float w;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Mode initialMode;

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0x1CC280C", Offset = "0x1CC280C", VA = "0x1CC280C", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0x1CC28F4", Offset = "0x1CC28F4", VA = "0x1CC28F4")]
		private void OnCollisionEnter(Collision c)
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0x1CC2A68", Offset = "0x1CC2A68", VA = "0x1CC2A68", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0x1CC2CD8", Offset = "0x1CC2CD8", VA = "0x1CC2CD8")]
		private void AfterIK()
		{
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0x1CC2E70", Offset = "0x1CC2E70", VA = "0x1CC2E70", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0x1CC2F98", Offset = "0x1CC2F98", VA = "0x1CC2F98")]
		public MotionAbsorb()
		{
		}
	}
	[Token(Token = "0x20001D7")]
	public class MotionAbsorbCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MotionAbsorb motionAbsorb;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform cube;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float cubeRandomPosition;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve motionAbsorbWeight;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 cubeDefaultPosition;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorStateInfo info;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigidbody;

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x1CC3028", Offset = "0x1CC3028", VA = "0x1CC3028")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x1CC30A8", Offset = "0x1CC30A8", VA = "0x1CC30A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x1CC3174", Offset = "0x1CC3174", VA = "0x1CC3174")]
		private void SwingStart()
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x1CC32D4", Offset = "0x1CC32D4", VA = "0x1CC32D4")]
		public MotionAbsorbCharacter()
		{
		}
	}
	[Token(Token = "0x20001D8")]
	public class OffsetEffector : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000360")]
		public class EffectorLink
		{
			[Token(Token = "0x40013EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x40013EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float weightMultiplier;

			[Token(Token = "0x40013EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public Vector3 localPosition;

			[Token(Token = "0x6001700")]
			[Address(RVA = "0x1CC4170", Offset = "0x1CC4170", VA = "0x1CC4170")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x1CC3E3C", Offset = "0x1CC3E3C", VA = "0x1CC3E3C", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x1CC3F3C", Offset = "0x1CC3F3C", VA = "0x1CC3F3C", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x1CC4168", Offset = "0x1CC4168", VA = "0x1CC4168")]
		public OffsetEffector()
		{
		}
	}
	[Token(Token = "0x20001D9")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1250194", Offset = "0x1250194")]
	public class PendulumExample : MonoBehaviour
	{
		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254B98", Offset = "0x1254B98")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1254B98", Offset = "0x1254B98")]
		public float weight;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254BEC", Offset = "0x1254BEC")]
		public float hangingDistanceMlp;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254C24", Offset = "0x1254C24")]
		[HideInInspector]
		public Vector3 rootTargetPosition;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254C70", Offset = "0x1254C70")]
		[HideInInspector]
		public Quaternion rootTargetRotation;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform target;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Transform leftHandTarget;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Transform rightHandTarget;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Transform leftFootTarget;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform rightFootTarget;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Transform pelvisTarget;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform bodyTarget;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Transform headTarget;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Vector3 pelvisDownAxis;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion rootRelativeToPelvis;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 pelvisToRoot;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float lastWeight;

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0x1CC4180", Offset = "0x1CC4180", VA = "0x1CC4180")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0x1CC44D0", Offset = "0x1CC44D0", VA = "0x1CC44D0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0x1CC4C20", Offset = "0x1CC4C20", VA = "0x1CC4C20")]
		public PendulumExample()
		{
		}
	}
	[Token(Token = "0x20001DA")]
	public abstract class PickUp2Handed : MonoBehaviour
	{
		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int GUIspace;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject obj;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform pivot;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform holdPoint;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pickUpTime;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float holdWeight;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float holdWeightVel;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x17000068")]
		private bool holding
		{
			[Token(Token = "0x6000DC6")]
			[Address(RVA = "0x1CC4F64", Offset = "0x1CC4F64", VA = "0x1CC4F64")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0x1CC4CA4", Offset = "0x1CC4CA4", VA = "0x1CC4CA4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000DC0")]
		protected abstract void RotatePivot();

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0x1CC4F84", Offset = "0x1CC4F84", VA = "0x1CC4F84")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0x1CC511C", Offset = "0x1CC511C", VA = "0x1CC511C")]
		private void OnPause(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0x1CC5298", Offset = "0x1CC5298", VA = "0x1CC5298")]
		private void OnStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0x1CC5378", Offset = "0x1CC5378", VA = "0x1CC5378")]
		private void OnDrop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0x1CC54A4", Offset = "0x1CC54A4", VA = "0x1CC54A4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x1CC56B4", Offset = "0x1CC56B4", VA = "0x1CC56B4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x1CC5898", Offset = "0x1CC5898", VA = "0x1CC5898")]
		protected PickUp2Handed()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	public class PickUpBox : PickUp2Handed
	{
		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x1CC58AC", Offset = "0x1CC58AC", VA = "0x1CC58AC", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x1CC5AA0", Offset = "0x1CC5AA0", VA = "0x1CC5AA0")]
		public PickUpBox()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	public class PickUpSphere : PickUp2Handed
	{
		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x1CC5AB4", Offset = "0x1CC5AB4", VA = "0x1CC5AB4", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0x1CC5C60", Offset = "0x1CC5C60", VA = "0x1CC5C60")]
		public PickUpSphere()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	public class RagdollUtilityDemo : MonoBehaviour
	{
		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RagdollUtility ragdollUtility;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform root;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody pelvis;

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x1CC76E0", Offset = "0x1CC76E0", VA = "0x1CC76E0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x1CC77B8", Offset = "0x1CC77B8", VA = "0x1CC77B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x1CC7960", Offset = "0x1CC7960", VA = "0x1CC7960")]
		public RagdollUtilityDemo()
		{
		}
	}
	[Token(Token = "0x20001DE")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12501F8", Offset = "0x12501F8")]
	public class RecoilTest : MonoBehaviour
	{
		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float magnitude;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Recoil recoil;

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0x1CC7C58", Offset = "0x1CC7C58", VA = "0x1CC7C58")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x1CC7CB8", Offset = "0x1CC7CB8", VA = "0x1CC7CB8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x1CC7D14", Offset = "0x1CC7D14", VA = "0x1CC7D14")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x1CC7DEC", Offset = "0x1CC7DEC", VA = "0x1CC7DEC")]
		public RecoilTest()
		{
		}
	}
	[Token(Token = "0x20001DF")]
	public class ResetInteractionObject : MonoBehaviour
	{
		[Token(Token = "0x2000361")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251B98", Offset = "0x1251B98")]
		private sealed class <ResetObject>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float resetTime;

			[Token(Token = "0x40013F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ResetInteractionObject <>4__this;

			[Token(Token = "0x17000154")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001704")]
				[Address(RVA = "0x1CC8198", Offset = "0x1CC8198", VA = "0x1CC8198", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000155")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001706")]
				[Address(RVA = "0x1CC8200", Offset = "0x1CC8200", VA = "0x1CC8200", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001701")]
			[Address(RVA = "0x1CC7F9C", Offset = "0x1CC7F9C", VA = "0x1CC7F9C")]
			[DebuggerHidden]
			public <ResetObject>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001702")]
			[Address(RVA = "0x1CC7FD8", Offset = "0x1CC7FD8", VA = "0x1CC7FD8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001703")]
			[Address(RVA = "0x1CC7FDC", Offset = "0x1CC7FDC", VA = "0x1CC7FDC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001705")]
			[Address(RVA = "0x1CC81A0", Offset = "0x1CC81A0", VA = "0x1CC81A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float resetDelay;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform defaultParent;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody r;

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x1CC7DFC", Offset = "0x1CC7DFC", VA = "0x1CC7DFC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x1CC7EC8", Offset = "0x1CC7EC8", VA = "0x1CC7EC8")]
		private void OnPickUp(Transform t)
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x1CC7F10", Offset = "0x1CC7F10", VA = "0x1CC7F10")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x126192C", Offset = "0x126192C")]
		private IEnumerator ResetObject(float resetTime)
		{
			return null;
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x1CC7FC8", Offset = "0x1CC7FC8", VA = "0x1CC7FC8")]
		public ResetInteractionObject()
		{
		}
	}
	[Token(Token = "0x20001E0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x125025C", Offset = "0x125025C")]
	public class SoccerDemo : MonoBehaviour
	{
		[Token(Token = "0x2000362")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251BA8", Offset = "0x1251BA8")]
		private sealed class <ResetDelayed>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoccerDemo <>4__this;

			[Token(Token = "0x17000156")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600170A")]
				[Address(RVA = "0x1CC9F48", Offset = "0x1CC9F48", VA = "0x1CC9F48", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000157")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600170C")]
				[Address(RVA = "0x1CC9FB0", Offset = "0x1CC9FB0", VA = "0x1CC9FB0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001707")]
			[Address(RVA = "0x1CC9DD8", Offset = "0x1CC9DD8", VA = "0x1CC9DD8")]
			[DebuggerHidden]
			public <ResetDelayed>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001708")]
			[Address(RVA = "0x1CC9E0C", Offset = "0x1CC9E0C", VA = "0x1CC9E0C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001709")]
			[Address(RVA = "0x1CC9E10", Offset = "0x1CC9E10", VA = "0x1CC9E10", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600170B")]
			[Address(RVA = "0x1CC9F50", Offset = "0x1CC9F50", VA = "0x1CC9F50", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator animator;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x1CC9CA0", Offset = "0x1CC9CA0", VA = "0x1CC9CA0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x1CC9D5C", Offset = "0x1CC9D5C", VA = "0x1CC9D5C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1261990", Offset = "0x1261990")]
		private IEnumerator ResetDelayed()
		{
			return null;
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x1CC9E04", Offset = "0x1CC9E04", VA = "0x1CC9E04")]
		public SoccerDemo()
		{
		}
	}
	[Token(Token = "0x20001E1")]
	public class TouchWalls : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000363")]
		public class EffectorLink
		{
			[Token(Token = "0x40013F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x40013F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x40013F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InteractionObject interactionObject;

			[Token(Token = "0x40013F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spherecastFrom;

			[Token(Token = "0x40013F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float spherecastRadius;

			[Token(Token = "0x40013F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float minDistance;

			[Token(Token = "0x40013FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public LayerMask touchLayers;

			[Token(Token = "0x40013FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float lerpSpeed;

			[Token(Token = "0x40013FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float minSwitchTime;

			[Token(Token = "0x40013FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float releaseDistance;

			[Token(Token = "0x40013FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool sliding;

			[Token(Token = "0x40013FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private Vector3 raycastDirectionLocal;

			[Token(Token = "0x4001400")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float raycastDistance;

			[Token(Token = "0x4001401")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private bool inTouch;

			[Token(Token = "0x4001402")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private RaycastHit hit;

			[Token(Token = "0x4001403")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 targetPosition;

			[Token(Token = "0x4001404")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Quaternion targetRotation;

			[Token(Token = "0x4001405")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private bool initiated;

			[Token(Token = "0x4001406")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private float nextSwitchTime;

			[Token(Token = "0x4001407")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private float speedF;

			[Token(Token = "0x600170D")]
			[Address(RVA = "0x1CCA558", Offset = "0x1CCA558", VA = "0x1CCA558")]
			public void Initiate(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x600170E")]
			[Address(RVA = "0x1CCB268", Offset = "0x1CCB268", VA = "0x1CCB268")]
			private bool FindWalls(Vector3 direction)
			{
				return default(bool);
			}

			[Token(Token = "0x600170F")]
			[Address(RVA = "0x1CCA8D4", Offset = "0x1CCA8D4", VA = "0x1CCA8D4")]
			public void Update(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6001710")]
			[Address(RVA = "0x1CCB350", Offset = "0x1CCB350", VA = "0x1CCB350")]
			private void StopTouch(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6001711")]
			[Address(RVA = "0x1CCB4EC", Offset = "0x1CCB4EC", VA = "0x1CCB4EC")]
			private void OnInteractionStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6001712")]
			[Address(RVA = "0x1CCB588", Offset = "0x1CCB588", VA = "0x1CCB588")]
			private void OnInteractionResume(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6001713")]
			[Address(RVA = "0x1CCB620", Offset = "0x1CCB620", VA = "0x1CCB620")]
			private void OnInteractionStop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6001714")]
			[Address(RVA = "0x1CCB0B4", Offset = "0x1CCB0B4", VA = "0x1CCB0B4")]
			public void Destroy(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6001715")]
			[Address(RVA = "0x1CCB6B8", Offset = "0x1CCB6B8", VA = "0x1CCB6B8")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x1CCA4E0", Offset = "0x1CCA4E0", VA = "0x1CCA4E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x1CCA868", Offset = "0x1CCA868", VA = "0x1CCA868")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x1CCAFEC", Offset = "0x1CCAFEC", VA = "0x1CCAFEC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x1CCB260", Offset = "0x1CCB260", VA = "0x1CCB260")]
		public TouchWalls()
		{
		}
	}
	[Token(Token = "0x20001E2")]
	public class TransferMotion : MonoBehaviour
	{
		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254D5C", Offset = "0x1254D5C")]
		public Transform to;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254D94", Offset = "0x1254D94")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1254D94", Offset = "0x1254D94")]
		public float transferMotion;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x1A75A04", Offset = "0x1A75A04", VA = "0x1A75A04")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x1A75A40", Offset = "0x1A75A40", VA = "0x1A75A40")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x1A75B98", Offset = "0x1A75B98", VA = "0x1A75B98")]
		public TransferMotion()
		{
		}
	}
	[Token(Token = "0x20001E3")]
	public class TwoHandedProp : MonoBehaviour
	{
		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254DE8", Offset = "0x1254DE8")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 targetPosRelativeToRight;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion targetRotRelativeToRight;

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x1A75D6C", Offset = "0x1A75D6C", VA = "0x1A75D6C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x1A75F4C", Offset = "0x1A75F4C", VA = "0x1A75F4C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x1A761E8", Offset = "0x1A761E8", VA = "0x1A761E8")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x1A762B4", Offset = "0x1A762B4", VA = "0x1A762B4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x1A763D0", Offset = "0x1A763D0", VA = "0x1A763D0")]
		public TwoHandedProp()
		{
		}
	}
	[Token(Token = "0x20001E4")]
	public class UserControlInteractions : UserControlThirdPerson
	{
		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private CharacterThirdPerson character;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private bool disableInputInInteraction;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float enableInputAtProgress;

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x1A76C7C", Offset = "0x1A76C7C", VA = "0x1A76C7C", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x1A770F4", Offset = "0x1A770F4", VA = "0x1A770F4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x1A7734C", Offset = "0x1A7734C", VA = "0x1A7734C")]
		public UserControlInteractions()
		{
		}
	}
	[Token(Token = "0x20001E5")]
	public class GrounderDemo : MonoBehaviour
	{
		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] characters;

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x1CBDE10", Offset = "0x1CBDE10", VA = "0x1CBDE10")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x1CBE10C", Offset = "0x1CBE10C", VA = "0x1CBE10C")]
		public void Activate(int index)
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x1CBE18C", Offset = "0x1CBE18C", VA = "0x1CBE18C")]
		public GrounderDemo()
		{
		}
	}
	[Token(Token = "0x20001E6")]
	public class PlatformRotator : MonoBehaviour
	{
		[Token(Token = "0x2000364")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251BB8", Offset = "0x1251BB8")]
		private sealed class <SwitchRotation>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001408")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001409")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400140A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlatformRotator <>4__this;

			[Token(Token = "0x17000158")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001719")]
				[Address(RVA = "0x1CC66F4", Offset = "0x1CC66F4", VA = "0x1CC66F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000159")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600171B")]
				[Address(RVA = "0x1CC675C", Offset = "0x1CC675C", VA = "0x1CC675C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001716")]
			[Address(RVA = "0x1CC63A4", Offset = "0x1CC63A4", VA = "0x1CC63A4")]
			[DebuggerHidden]
			public <SwitchRotation>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6001717")]
			[Address(RVA = "0x1CC65B0", Offset = "0x1CC65B0", VA = "0x1CC65B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001718")]
			[Address(RVA = "0x1CC65B4", Offset = "0x1CC65B4", VA = "0x1CC65B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600171A")]
			[Address(RVA = "0x1CC66FC", Offset = "0x1CC66FC", VA = "0x1CC66FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxAngle;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float switchRotationTime;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float random;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotationSpeed;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 movePosition;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float moveSpeed;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int characterLayer;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion targetRotation;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 targetPosition;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 velocity;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody r;

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0x1CC5FD8", Offset = "0x1CC5FD8", VA = "0x1CC5FD8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x1CC617C", Offset = "0x1CC617C", VA = "0x1CC617C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x1CC6100", Offset = "0x1CC6100", VA = "0x1CC6100")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12619F4", Offset = "0x12619F4")]
		private IEnumerator SwitchRotation()
		{
			return null;
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x1CC63D0", Offset = "0x1CC63D0", VA = "0x1CC63D0")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x1CC64B4", Offset = "0x1CC64B4", VA = "0x1CC64B4")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x1CC6594", Offset = "0x1CC6594", VA = "0x1CC6594")]
		public PlatformRotator()
		{
		}
	}
	[Token(Token = "0x20001E7")]
	public class BendGoal : MonoBehaviour
	{
		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbIK limbIK;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1254E50", Offset = "0x1254E50")]
		public float weight;

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x1CB3790", Offset = "0x1CB3790", VA = "0x1CB3790")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x1CB37FC", Offset = "0x1CB37FC", VA = "0x1CB37FC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0x1CB38B8", Offset = "0x1CB38B8", VA = "0x1CB38B8")]
		public BendGoal()
		{
		}
	}
	[Token(Token = "0x20001E8")]
	public class Turret : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000365")]
		public class Part
		{
			[Token(Token = "0x400140B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x400140C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private RotationLimit rotationLimit;

			[Token(Token = "0x600171C")]
			[Address(RVA = "0x1A75C24", Offset = "0x1A75C24", VA = "0x1A75C24")]
			public void AimAt(Transform target)
			{
			}

			[Token(Token = "0x600171D")]
			[Address(RVA = "0x1A75D64", Offset = "0x1A75D64", VA = "0x1A75D64")]
			public Part()
			{
			}
		}

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Part[] parts;

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0x1A75BAC", Offset = "0x1A75BAC", VA = "0x1A75BAC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x1A75D5C", Offset = "0x1A75D5C", VA = "0x1A75D5C")]
		public Turret()
		{
		}
	}
	[Token(Token = "0x20001E9")]
	public class HitReactionVRIKTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HitReactionVRIK hitReaction;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float hitForce;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x1CBE534", Offset = "0x1CBE534", VA = "0x1CBE534")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x1CBE700", Offset = "0x1CBE700", VA = "0x1CBE700")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x1CBE8C4", Offset = "0x1CBE8C4", VA = "0x1CBE8C4")]
		public HitReactionVRIKTrigger()
		{
		}
	}
	[Token(Token = "0x20001EA")]
	public class VRIKCalibrationController : MonoBehaviour
	{
		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254E88", Offset = "0x1254E88")]
		public VRIK ik;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254EC0", Offset = "0x1254EC0")]
		public VRIKCalibrator.Settings settings;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254EF8", Offset = "0x1254EF8")]
		public Transform headTracker;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254F30", Offset = "0x1254F30")]
		public Transform bodyTracker;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254F68", Offset = "0x1254F68")]
		public Transform leftHandTracker;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254FA0", Offset = "0x1254FA0")]
		public Transform rightHandTracker;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1254FD8", Offset = "0x1254FD8")]
		public Transform leftFootTracker;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255010", Offset = "0x1255010")]
		public Transform rightFootTracker;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1255048", Offset = "0x1255048")]
		public VRIKCalibrator.CalibrationData data;

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0x1A773B4", Offset = "0x1A773B4", VA = "0x1A773B4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0x1A7751C", Offset = "0x1A7751C", VA = "0x1A7751C")]
		public VRIKCalibrationController()
		{
		}
	}
	[Token(Token = "0x20001EB")]
	public class VRIKPlatform : MonoBehaviour
	{
		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion lastRotation;

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x1A77590", Offset = "0x1A77590", VA = "0x1A77590")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x1A775EC", Offset = "0x1A775EC", VA = "0x1A775EC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x1A77800", Offset = "0x1A77800", VA = "0x1A77800")]
		public VRIKPlatform()
		{
		}
	}
	[Token(Token = "0x20001EC")]
	public class VRIKPlatformController : MonoBehaviour
	{
		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trackingSpace;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform platform;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool moveToPlatform;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform lastPlatform;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x1A77878", Offset = "0x1A77878", VA = "0x1A77878")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0x1A77DE0", Offset = "0x1A77DE0", VA = "0x1A77DE0")]
		public VRIKPlatformController()
		{
		}
	}
	[Token(Token = "0x20001ED")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12502C0", Offset = "0x12502C0")]
	public class AnimatorIKDemo : MonoBehaviour
	{
		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform leftHandIKTarget;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0x1CB3324", Offset = "0x1CB3324", VA = "0x1CB3324")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0x1CB3384", Offset = "0x1CB3384", VA = "0x1CB3384")]
		private void OnAnimatorIK(int layer)
		{
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0x1CB33E0", Offset = "0x1CB33E0", VA = "0x1CB33E0")]
		public AnimatorIKDemo()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	public class BallShooter : MonoBehaviour
	{
		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyCode keyCode;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ball;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 spawnOffset;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 force;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float mass;

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0x1CB342C", Offset = "0x1CB342C", VA = "0x1CB342C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0x1CB36F4", Offset = "0x1CB36F4", VA = "0x1CB36F4")]
		public BallShooter()
		{
		}
	}
	[Token(Token = "0x20001EF")]
	public class BoardController : MonoBehaviour
	{
		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int groundLayer;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rotationTarget;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float torque;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float skidDrag;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float turnSensitivity;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody r;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool isGrounded;

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0x1CB3D94", Offset = "0x1CB3D94", VA = "0x1CB3D94")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0x1CB3DF4", Offset = "0x1CB3DF4", VA = "0x1CB3DF4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0x1CB3FC4", Offset = "0x1CB3FC4", VA = "0x1CB3FC4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0x1CB42E8", Offset = "0x1CB42E8", VA = "0x1CB42E8")]
		private void OnCollisionEnter(Collision c)
		{
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0x1CB4344", Offset = "0x1CB4344", VA = "0x1CB4344")]
		private void OnCollisionStay(Collision c)
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x1CB43A0", Offset = "0x1CB43A0", VA = "0x1CB43A0")]
		private void OnCollisionExit(Collision c)
		{
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0x1CB43F8", Offset = "0x1CB43F8", VA = "0x1CB43F8")]
		public BoardController()
		{
		}
	}
	[Token(Token = "0x20001F0")]
	public class CharacterAnimationMeleeDemo : CharacterAnimationThirdPerson
	{
		[Token(Token = "0x17000069")]
		private CharacterMeleeDemo melee
		{
			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0x1CB49FC", Offset = "0x1CB49FC", VA = "0x1CB49FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0x1CB4A80", Offset = "0x1CB4A80", VA = "0x1CB4A80", Slot = "9")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0x1CB4F7C", Offset = "0x1CB4F7C", VA = "0x1CB4F7C")]
		public CharacterAnimationMeleeDemo()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	public class CharacterMeleeDemo : CharacterPuppet
	{
		[Serializable]
		[Token(Token = "0x2000366")]
		public class Action
		{
			[Serializable]
			[Token(Token = "0x200042E")]
			public class Anim
			{
				[Token(Token = "0x400172D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public string stateName;

				[Token(Token = "0x400172E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public int layer;

				[Token(Token = "0x400172F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				public float transitionDuration;

				[Token(Token = "0x4001730")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public float fixedTime;

				[Token(Token = "0x60019FD")]
				[Address(RVA = "0x1CB70CC", Offset = "0x1CB70CC", VA = "0x1CB70CC")]
				public Anim()
				{
				}
			}

			[Token(Token = "0x400140D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string name;

			[Token(Token = "0x400140E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int inputActionIndex;

			[Token(Token = "0x400140F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float duration;

			[Token(Token = "0x4001410")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float minFrequency;

			[Token(Token = "0x4001411")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Anim anim;

			[Token(Token = "0x4001412")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int[] requiredPropTypes;

			[Token(Token = "0x4001413")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Booster[] boosters;

			[Token(Token = "0x600171E")]
			[Address(RVA = "0x1CB70BC", Offset = "0x1CB70BC", VA = "0x1CB70BC")]
			public Action()
			{
			}
		}

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1255080", Offset = "0x1255080")]
		public Action[] actions;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		[HideInInspector]
		public int currentActionIndex;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		[HideInInspector]
		public float lastActionTime;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private float lastActionMoveMag;

		[Token(Token = "0x1700006A")]
		public Action currentAction
		{
			[Token(Token = "0x6000E12")]
			[Address(RVA = "0x1CB4F30", Offset = "0x1CB4F30", VA = "0x1CB4F30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0x1CB6AD4", Offset = "0x1CB6AD4", VA = "0x1CB6AD4", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0x1CB6B64", Offset = "0x1CB6B64", VA = "0x1CB6B64", Slot = "7")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0x1CB6DEC", Offset = "0x1CB6DEC", VA = "0x1CB6DEC")]
		private bool StartAction(Action action)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0x1CB70AC", Offset = "0x1CB70AC", VA = "0x1CB70AC")]
		public CharacterMeleeDemo()
		{
		}
	}
	[Token(Token = "0x20001F2")]
	public class CharacterPuppet : CharacterThirdPerson
	{
		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x12550D8", Offset = "0x12550D8")]
		public PropRoot propRoot;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1255110", Offset = "0x1255110")]
		private BehaviourPuppet <puppet>k__BackingField;

		[Token(Token = "0x1700006B")]
		public BehaviourPuppet puppet
		{
			[Token(Token = "0x6000E16")]
			[Address(RVA = "0x1CB70D4", Offset = "0x1CB70D4", VA = "0x1CB70D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261A58", Offset = "0x1261A58")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E17")]
			[Address(RVA = "0x1CB70DC", Offset = "0x1CB70DC", VA = "0x1CB70DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261A68", Offset = "0x1261A68")]
			private set
			{
			}
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x1CB6AE0", Offset = "0x1CB6AE0", VA = "0x1CB6AE0", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0x1CB7298", Offset = "0x1CB7298", VA = "0x1CB7298", Slot = "4")]
		public override void Move(Vector3 deltaPosition, Quaternion deltaRotation)
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0x1CB74D8", Offset = "0x1CB74D8", VA = "0x1CB74D8", Slot = "9")]
		protected override void Rotate()
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x1CB7BA0", Offset = "0x1CB7BA0", VA = "0x1CB7BA0", Slot = "10")]
		protected override bool Jump()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0x1CB70B8", Offset = "0x1CB70B8", VA = "0x1CB70B8")]
		public CharacterPuppet()
		{
		}
	}
	[Token(Token = "0x20001F3")]
	public class CreatePuppetInRuntime : MonoBehaviour
	{
		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255120", Offset = "0x1255120")]
		public Transform ragdollPrefab;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255158", Offset = "0x1255158")]
		public string instanceName;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255190", Offset = "0x1255190")]
		public int characterControllerLayer;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12551C8", Offset = "0x12551C8")]
		public int ragdollLayer;

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x1CB9A1C", Offset = "0x1CB9A1C", VA = "0x1CB9A1C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x1CB9B74", Offset = "0x1CB9B74", VA = "0x1CB9B74")]
		public CreatePuppetInRuntime()
		{
		}
	}
	[Token(Token = "0x20001F4")]
	public class CreateRagdollInRuntime : MonoBehaviour
	{
		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255200", Offset = "0x1255200")]
		public GameObject prefab;

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x1CB9BD4", Offset = "0x1CB9BD4", VA = "0x1CB9BD4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x1CB9D18", Offset = "0x1CB9D18", VA = "0x1CB9D18")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x1CB9D1C", Offset = "0x1CB9D1C", VA = "0x1CB9D1C")]
		public CreateRagdollInRuntime()
		{
		}
	}
	[Token(Token = "0x20001F5")]
	public class Destructor : MonoBehaviour
	{
		[Token(Token = "0x2000367")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251BC8", Offset = "0x1251BC8")]
		private sealed class <Destruct>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001414")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001415")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001416")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Destructor <>4__this;

			[Token(Token = "0x1700015A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001722")]
				[Address(RVA = "0x1CB9F04", Offset = "0x1CB9F04", VA = "0x1CB9F04", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001724")]
				[Address(RVA = "0x1CB9F6C", Offset = "0x1CB9F6C", VA = "0x1CB9F6C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600171F")]
			[Address(RVA = "0x1CB9DCC", Offset = "0x1CB9DCC", VA = "0x1CB9DCC")]
			[DebuggerHidden]
			public <Destruct>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6001720")]
			[Address(RVA = "0x1CB9E08", Offset = "0x1CB9E08", VA = "0x1CB9E08", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001721")]
			[Address(RVA = "0x1CB9E0C", Offset = "0x1CB9E0C", VA = "0x1CB9E0C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001723")]
			[Address(RVA = "0x1CB9F0C", Offset = "0x1CB9F0C", VA = "0x1CB9F0C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float delay;

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x1CB9D24", Offset = "0x1CB9D24", VA = "0x1CB9D24")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0x1CB9D50", Offset = "0x1CB9D50", VA = "0x1CB9D50")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1261A78", Offset = "0x1261A78")]
		private IEnumerator Destruct()
		{
			return null;
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0x1CB9DF8", Offset = "0x1CB9DF8", VA = "0x1CB9DF8")]
		public Destructor()
		{
		}
	}
	[Token(Token = "0x20001F6")]
	public class Dying : MonoBehaviour
	{
		[Token(Token = "0x2000368")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251BD8", Offset = "0x1251BD8")]
		private sealed class <FadeOutPinWeight>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001417")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001418")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001419")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Dying <>4__this;

			[Token(Token = "0x1700015C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001728")]
				[Address(RVA = "0x1CBA638", Offset = "0x1CBA638", VA = "0x1CBA638", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600172A")]
				[Address(RVA = "0x1CBA6A0", Offset = "0x1CBA6A0", VA = "0x1CBA6A0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001725")]
			[Address(RVA = "0x1CBA2F0", Offset = "0x1CBA2F0", VA = "0x1CBA2F0")]
			[DebuggerHidden]
			public <FadeOutPinWeight>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001726")]
			[Address(RVA = "0x1CBA540", Offset = "0x1CBA540", VA = "0x1CBA540", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001727")]
			[Address(RVA = "0x1CBA544", Offset = "0x1CBA544", VA = "0x1CBA544", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001729")]
			[Address(RVA = "0x1CBA640", Offset = "0x1CBA640", VA = "0x1CBA640", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000369")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251BE8", Offset = "0x1251BE8")]
		private sealed class <FadeOutMuscleWeight>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400141A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400141B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400141C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Dying <>4__this;

			[Token(Token = "0x1700015E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600172E")]
				[Address(RVA = "0x1CBA4D0", Offset = "0x1CBA4D0", VA = "0x1CBA4D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001730")]
				[Address(RVA = "0x1CBA538", Offset = "0x1CBA538", VA = "0x1CBA538", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600172B")]
			[Address(RVA = "0x1CBA31C", Offset = "0x1CBA31C", VA = "0x1CBA31C")]
			[DebuggerHidden]
			public <FadeOutMuscleWeight>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x600172C")]
			[Address(RVA = "0x1CBA3D4", Offset = "0x1CBA3D4", VA = "0x1CBA3D4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600172D")]
			[Address(RVA = "0x1CBA3D8", Offset = "0x1CBA3D8", VA = "0x1CBA3D8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600172F")]
			[Address(RVA = "0x1CBA4D8", Offset = "0x1CBA4D8", VA = "0x1CBA4D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255238", Offset = "0x1255238")]
		public PuppetMaster puppetMaster;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255270", Offset = "0x1255270")]
		public float fadeOutPinWeightSpeed;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12552A8", Offset = "0x12552A8")]
		public float fadeOutMuscleWeightSpeed;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12552E0", Offset = "0x12552E0")]
		public float deadMuscleWeight;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator animator;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool isDead;

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x1CB9F74", Offset = "0x1CB9F74", VA = "0x1CB9F74")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0x1CBA01C", Offset = "0x1CBA01C", VA = "0x1CBA01C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0x1CBA1F8", Offset = "0x1CBA1F8", VA = "0x1CBA1F8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1261ADC", Offset = "0x1261ADC")]
		private IEnumerator FadeOutPinWeight()
		{
			return null;
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0x1CBA274", Offset = "0x1CBA274", VA = "0x1CBA274")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1261B40", Offset = "0x1261B40")]
		private IEnumerator FadeOutMuscleWeight()
		{
			return null;
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0x1CBA348", Offset = "0x1CBA348", VA = "0x1CBA348")]
		public Dying()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1250324", Offset = "0x1250324")]
	public class FXCollisionBlood : MonoBehaviour
	{
		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BehaviourPuppet puppet;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minCollisionImpulse;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int emission;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float emissionImpulseAdd;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int maxEmission;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ParticleSystem particles;

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0x1CBD424", Offset = "0x1CBD424", VA = "0x1CBD424")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0x1CBD510", Offset = "0x1CBD510", VA = "0x1CBD510")]
		private void OnCollisionImpulse(MuscleCollision m, float impulse)
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x1CBD708", Offset = "0x1CBD708", VA = "0x1CBD708")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x1CBD81C", Offset = "0x1CBD81C", VA = "0x1CBD81C")]
		public FXCollisionBlood()
		{
		}
	}
	[Token(Token = "0x20001F8")]
	public class Grab : MonoBehaviour
	{
		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255318", Offset = "0x1255318")]
		public PuppetMaster puppetMaster;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255350", Offset = "0x1255350")]
		public UserControlMelee userControl;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255388", Offset = "0x1255388")]
		public int grabLayer;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool grabbed;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody r;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Collider c;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BehaviourPuppet otherPuppet;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Collider otherCollider;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ConfigurableJoint joint;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float nextGrabTime;

		[Token(Token = "0x4000BF6")]
		private const float massMlp = 5f;

		[Token(Token = "0x4000BF7")]
		private const int solverIterationMlp = 10;

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x1CBD83C", Offset = "0x1CBD83C", VA = "0x1CBD83C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x1CBD8C0", Offset = "0x1CBD8C0", VA = "0x1CBD8C0")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x1CBDCC0", Offset = "0x1CBDCC0", VA = "0x1CBDCC0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x1CBDE08", Offset = "0x1CBDE08", VA = "0x1CBDE08")]
		public Grab()
		{
		}
	}
	[Token(Token = "0x20001F9")]
	public class Killing : MonoBehaviour
	{
		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12553C0", Offset = "0x12553C0")]
		public PuppetMaster puppetMaster;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12553F8", Offset = "0x12553F8")]
		public PuppetMaster.StateSettings stateSettings;

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x1CBFB24", Offset = "0x1CBFB24", VA = "0x1CBFB24")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x1CBFBF4", Offset = "0x1CBFBF4", VA = "0x1CBFBF4")]
		public Killing()
		{
		}
	}
	[Token(Token = "0x20001FA")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1250388", Offset = "0x1250388")]
	public class LayerSetup : MonoBehaviour
	{
		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1255430", Offset = "0x1255430")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255430", Offset = "0x1255430")]
		public Transform characterController;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1255490", Offset = "0x1255490")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255490", Offset = "0x1255490")]
		public int characterControllerLayer;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12554F0", Offset = "0x12554F0")]
		public int ragdollLayer;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255528", Offset = "0x1255528")]
		public LayerMask ignoreCollisionWithCharacterController;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255560", Offset = "0x1255560")]
		public LayerMask ignoreCollisionWithRagdoll;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PuppetMaster puppetMaster;

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x1CC05A8", Offset = "0x1CC05A8", VA = "0x1CC05A8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x1CC07EC", Offset = "0x1CC07EC", VA = "0x1CC07EC")]
		public LayerSetup()
		{
		}
	}
	[Token(Token = "0x20001FB")]
	public class NavMeshPuppet : MonoBehaviour
	{
		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BehaviourPuppet puppet;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NavMeshAgent agent;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform target;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Animator animator;

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x1CC32E8", Offset = "0x1CC32E8", VA = "0x1CC32E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x1CC33DC", Offset = "0x1CC33DC", VA = "0x1CC33DC")]
		public NavMeshPuppet()
		{
		}
	}
	[Token(Token = "0x20001FC")]
	public class Planet : MonoBehaviour
	{
		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float mass;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody[] rigidbodies;

		[Token(Token = "0x4000C06")]
		private const float G = 6.672E-11f;

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x1CC5C74", Offset = "0x1CC5C74", VA = "0x1CC5C74")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x1CC5D4C", Offset = "0x1CC5D4C", VA = "0x1CC5D4C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x1CC5DD8", Offset = "0x1CC5DD8", VA = "0x1CC5DD8")]
		private void ApplyGravity(Rigidbody r)
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x1CC5FC8", Offset = "0x1CC5FC8", VA = "0x1CC5FC8")]
		public Planet()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	public class PropDemo : MonoBehaviour
	{
		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255598", Offset = "0x1255598")]
		public Prop prop;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12555D0", Offset = "0x12555D0")]
		public PropRoot propRootLeft;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255608", Offset = "0x1255608")]
		public PropRoot propRootRight;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255640", Offset = "0x1255640")]
		public bool pickUpOnStart;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool right;

		[Token(Token = "0x1700006C")]
		private PropRoot connectTo
		{
			[Token(Token = "0x6000E3E")]
			[Address(RVA = "0x1CC67A8", Offset = "0x1CC67A8", VA = "0x1CC67A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x1CC6764", Offset = "0x1CC6764", VA = "0x1CC6764")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x1CC67C4", Offset = "0x1CC67C4", VA = "0x1CC67C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x1CC68C0", Offset = "0x1CC68C0", VA = "0x1CC68C0")]
		public PropDemo()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	public class PropMelee : Prop
	{
		[Token(Token = "0x200036A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251BF8", Offset = "0x1251BF8")]
		private sealed class <Action>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400141D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400141E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400141F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PropMelee <>4__this;

			[Token(Token = "0x4001420")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float duration;

			[Token(Token = "0x4001421")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <additionalPinMuscleIndex>5__2;

			[Token(Token = "0x17000160")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001734")]
				[Address(RVA = "0x1CC6DF0", Offset = "0x1CC6DF0", VA = "0x1CC6DF0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000161")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001736")]
				[Address(RVA = "0x1CC6E58", Offset = "0x1CC6E58", VA = "0x1CC6E58", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001731")]
			[Address(RVA = "0x1CC695C", Offset = "0x1CC695C", VA = "0x1CC695C")]
			[DebuggerHidden]
			public <Action>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6001732")]
			[Address(RVA = "0x1CC6BBC", Offset = "0x1CC6BBC", VA = "0x1CC6BBC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001733")]
			[Address(RVA = "0x1CC6BC0", Offset = "0x1CC6BC0", VA = "0x1CC6BC0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001735")]
			[Address(RVA = "0x1CC6DF8", Offset = "0x1CC6DF8", VA = "0x1CC6DF8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x1255678", Offset = "0x1255678")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255678", Offset = "0x1255678")]
		public CapsuleCollider capsuleCollider;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12556D8", Offset = "0x12556D8")]
		public BoxCollider boxCollider;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255710", Offset = "0x1255710")]
		public float actionColliderRadiusMlp;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255748", Offset = "0x1255748")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1255748", Offset = "0x1255748")]
		public float actionAdditionalPinWeight;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125579C", Offset = "0x125579C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125579C", Offset = "0x125579C")]
		public float actionMassMlp;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12557F4", Offset = "0x12557F4")]
		public Vector3 COMOffset;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float defaultColliderRadius;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float defaultMass;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float defaultAddMass;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Rigidbody r;

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0x1CB6F88", Offset = "0x1CB6F88", VA = "0x1CB6F88")]
		public void StartAction(float duration)
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x1CC68D0", Offset = "0x1CC68D0", VA = "0x1CC68D0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1261BA4", Offset = "0x1261BA4")]
		public IEnumerator Action(float duration)
		{
			return null;
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0x1CC6988", Offset = "0x1CC6988", VA = "0x1CC6988", Slot = "6")]
		protected override void OnStart()
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0x1CC6AB4", Offset = "0x1CC6AB4", VA = "0x1CC6AB4", Slot = "4")]
		protected override void OnPickUp(PropRoot propRoot)
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x1CC6B2C", Offset = "0x1CC6B2C", VA = "0x1CC6B2C", Slot = "5")]
		protected override void OnDrop()
		{
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x1CC6BA4", Offset = "0x1CC6BA4", VA = "0x1CC6BA4")]
		public PropMelee()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public class PropPickUpTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Prop prop;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LayerMask characterLayers;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CharacterPuppet characterPuppet;

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x1CC6E60", Offset = "0x1CC6E60", VA = "0x1CC6E60")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0x1CC7008", Offset = "0x1CC7008", VA = "0x1CC7008")]
		public PropPickUpTrigger()
		{
		}
	}
	[Token(Token = "0x2000200")]
	public class PuppetBoard : MonoBehaviour
	{
		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125582C", Offset = "0x125582C")]
		public Rigidbody target;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255864", Offset = "0x1255864")]
		public Transform bodyTargetPivot;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125589C", Offset = "0x125589C")]
		public Transform bodyTarget;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody r;

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0x1CC7010", Offset = "0x1CC7010", VA = "0x1CC7010")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x1CC70C4", Offset = "0x1CC70C4", VA = "0x1CC70C4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0x1CC72E8", Offset = "0x1CC72E8", VA = "0x1CC72E8")]
		public PuppetBoard()
		{
		}
	}
	[Token(Token = "0x2000201")]
	public class PuppetScaling : MonoBehaviour
	{
		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PuppetMaster puppetMaster;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12558D4", Offset = "0x12558D4")]
		public float masterScale;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int muscleIndex;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12558F0", Offset = "0x12558F0")]
		public float muscleScale;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float defaultMuscleSpring;

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0x1CC72F0", Offset = "0x1CC72F0", VA = "0x1CC72F0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0x1CC7330", Offset = "0x1CC7330", VA = "0x1CC7330")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x1CC76CC", Offset = "0x1CC76CC", VA = "0x1CC76CC")]
		public PuppetScaling()
		{
		}
	}
	[Token(Token = "0x2000202")]
	public class RaycastShooter : MonoBehaviour
	{
		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask layers;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float unpin;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float force;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSystem blood;

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x1CC7968", Offset = "0x1CC7968", VA = "0x1CC7968")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x1CC7C48", Offset = "0x1CC7C48", VA = "0x1CC7C48")]
		public RaycastShooter()
		{
		}
	}
	[Token(Token = "0x2000203")]
	public class Respawning : MonoBehaviour
	{
		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125590C", Offset = "0x125590C")]
		public Transform pool;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255944", Offset = "0x1255944")]
		public BehaviourPuppet puppet;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125597C", Offset = "0x125597C")]
		public string idleAnimation;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform puppetRoot;

		[Token(Token = "0x1700006D")]
		private bool isPooled
		{
			[Token(Token = "0x6000E50")]
			[Address(RVA = "0x1CC8208", Offset = "0x1CC8208", VA = "0x1CC8208")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x1CC82A0", Offset = "0x1CC82A0", VA = "0x1CC82A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x1CC8308", Offset = "0x1CC8308", VA = "0x1CC8308")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x1CC84EC", Offset = "0x1CC84EC", VA = "0x1CC84EC")]
		private void Pool()
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x1CC8510", Offset = "0x1CC8510", VA = "0x1CC8510")]
		private void Respawn(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0x1CC860C", Offset = "0x1CC860C", VA = "0x1CC860C")]
		public Respawning()
		{
		}
	}
	[Token(Token = "0x2000204")]
	public class RotateShoulderToTarget : MonoBehaviour
	{
		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform shoulder;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 euler;

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0x1CC8614", Offset = "0x1CC8614", VA = "0x1CC8614")]
		private void OnPuppetMasterRead()
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x1CC86FC", Offset = "0x1CC86FC", VA = "0x1CC86FC")]
		public RotateShoulderToTarget()
		{
		}
	}
	[Token(Token = "0x2000205")]
	public class SkeletonShooter : MonoBehaviour
	{
		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PuppetMaster puppetMaster;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Skeleton skeleton;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MuscleRemoveMode removeMuscleMode;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask layers;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float unpin;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float force;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ParticleSystem particles;

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0x1CC974C", Offset = "0x1CC974C", VA = "0x1CC974C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0x1CC9B98", Offset = "0x1CC9B98", VA = "0x1CC9B98")]
		public SkeletonShooter()
		{
		}
	}
	[Token(Token = "0x2000206")]
	public class UserControlAIMelee : UserControlThirdPerson
	{
		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public BehaviourPuppet targetPuppet;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float stoppingDistance;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float stoppingThreshold;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isAttacking;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float attackTimer;

		[Token(Token = "0x1700006E")]
		private Transform moveTarget
		{
			[Token(Token = "0x6000E5A")]
			[Address(RVA = "0x1A76748", Offset = "0x1A76748", VA = "0x1A76748")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0x1A7679C", Offset = "0x1A7679C", VA = "0x1A7679C", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0x1A76A4C", Offset = "0x1A76A4C", VA = "0x1A76A4C")]
		private bool CanAttack()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0x1A76C60", Offset = "0x1A76C60", VA = "0x1A76C60")]
		public UserControlAIMelee()
		{
		}
	}
	[Token(Token = "0x2000207")]
	public class UserControlMelee : UserControlThirdPerson
	{
		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public KeyCode hitKey;

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0x1A77370", Offset = "0x1A77370", VA = "0x1A77370", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0x1A773A4", Offset = "0x1A773A4", VA = "0x1A773A4")]
		public UserControlMelee()
		{
		}
	}
	[Token(Token = "0x2000208")]
	public abstract class CharacterAnimationBase : MonoBehaviour
	{
		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool smoothFollow;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float smoothFollowSpeed;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected bool animatePhysics;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 localPosition;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion localRotation;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x1700006F")]
		public virtual bool animationGrounded
		{
			[Token(Token = "0x6000E61")]
			[Address(RVA = "0x1CB4440", Offset = "0x1CB4440", VA = "0x1CB4440", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0x1CB441C", Offset = "0x1CB441C", VA = "0x1CB441C", Slot = "4")]
		public virtual Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0x1CB4448", Offset = "0x1CB4448", VA = "0x1CB4448")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0x1CB450C", Offset = "0x1CB450C", VA = "0x1CB450C", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0x1CB4764", Offset = "0x1CB4764", VA = "0x1CB4764", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x1CB49D4", Offset = "0x1CB49D4", VA = "0x1CB49D4", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0x1CB4774", Offset = "0x1CB4774", VA = "0x1CB4774")]
		private void SmoothFollow()
		{
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x1CB49E4", Offset = "0x1CB49E4", VA = "0x1CB49E4")]
		protected CharacterAnimationBase()
		{
		}
	}
	[Token(Token = "0x2000209")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12503EC", Offset = "0x12503EC")]
	public class CharacterAnimationSimple : CharacterAnimationBase
	{
		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private CharacterThirdPerson characterController;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float pivotOffset;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private AnimationCurve moveSpeed;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator animator;

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x1CB4FC4", Offset = "0x1CB4FC4", VA = "0x1CB4FC4", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x1CB502C", Offset = "0x1CB502C", VA = "0x1CB502C", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x1CB5158", Offset = "0x1CB5158", VA = "0x1CB5158")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x1CB52D4", Offset = "0x1CB52D4", VA = "0x1CB52D4")]
		public CharacterAnimationSimple()
		{
		}
	}
	[Token(Token = "0x200020A")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1250450", Offset = "0x1250450")]
	public class CharacterAnimationThirdPerson : CharacterAnimationBase
	{
		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float turnSensitivity;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private float turnSpeed;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private float runCycleLegOffset;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1255A14", Offset = "0x1255A14")]
		[SerializeField]
		private float animSpeedMultiplier;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Animator animator;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 lastForward;

		[Token(Token = "0x4000C4B")]
		private const string groundedDirectional = "Grounded Directional";

		[Token(Token = "0x4000C4C")]
		private const string groundedStrafe = "Grounded Strafe";

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float deltaAngle;

		[Token(Token = "0x17000070")]
		public override bool animationGrounded
		{
			[Token(Token = "0x6000E6E")]
			[Address(RVA = "0x1CB5398", Offset = "0x1CB5398", VA = "0x1CB5398", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x1CB52EC", Offset = "0x1CB52EC", VA = "0x1CB52EC", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x1CB537C", Offset = "0x1CB537C", VA = "0x1CB537C", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0x1CB4B7C", Offset = "0x1CB4B7C", VA = "0x1CB4B7C", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0x1CB5488", Offset = "0x1CB5488", VA = "0x1CB5488")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0x1CB4FA0", Offset = "0x1CB4FA0", VA = "0x1CB4FA0")]
		public CharacterAnimationThirdPerson()
		{
		}
	}
	[Token(Token = "0x200020B")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12504B4", Offset = "0x12504B4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12504B4", Offset = "0x12504B4")]
	public abstract class CharacterBase : MonoBehaviour
	{
		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1255A58", Offset = "0x1255A58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255A58", Offset = "0x1255A58")]
		public Transform gravityTarget;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255AB8", Offset = "0x1255AB8")]
		[SerializeField]
		protected float gravityMultiplier;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		protected float airborneThreshold;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float slopeStartAngle;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float slopeEndAngle;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float spherecastRadius;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private LayerMask groundLayers;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PhysicMaterial zeroFrictionMaterial;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PhysicMaterial highFrictionMaterial;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Rigidbody r;

		[Token(Token = "0x4000C58")]
		protected const float half = 0.5f;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float originalHeight;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected Vector3 originalCenter;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected CapsuleCollider capsule;

		[Token(Token = "0x6000E72")]
		public abstract void Move(Vector3 deltaPosition, Quaternion deltaRotation);

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0x1CB5B44", Offset = "0x1CB5B44", VA = "0x1CB5B44")]
		protected Vector3 GetGravity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0x1CB5CC8", Offset = "0x1CB5CC8", VA = "0x1CB5CC8", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x1CB5E90", Offset = "0x1CB5E90", VA = "0x1CB5E90", Slot = "6")]
		protected virtual RaycastHit GetSpherecastHit()
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0x1CB6108", Offset = "0x1CB6108", VA = "0x1CB6108")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0x1CB61CC", Offset = "0x1CB61CC", VA = "0x1CB61CC")]
		protected void RigidbodyRotateAround(Vector3 point, Vector3 axis, float angle)
		{
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0x1CB63B4", Offset = "0x1CB63B4", VA = "0x1CB63B4")]
		protected void ScaleCapsule(float mlp)
		{
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0x1CB6564", Offset = "0x1CB6564", VA = "0x1CB6564")]
		protected void HighFriction()
		{
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0x1CB6588", Offset = "0x1CB6588", VA = "0x1CB6588")]
		protected void ZeroFriction()
		{
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0x1CB65AC", Offset = "0x1CB65AC", VA = "0x1CB65AC")]
		protected float GetSlopeDamper(Vector3 velocity, Vector3 groundNormal)
		{
			return default(float);
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0x1CB66B0", Offset = "0x1CB66B0", VA = "0x1CB66B0")]
		protected CharacterBase()
		{
		}
	}
	[Token(Token = "0x200020C")]
	public class CharacterThirdPerson : CharacterBase
	{
		[Serializable]
		[Token(Token = "0x200036B")]
		public enum MoveMode
		{
			[Token(Token = "0x4001423")]
			Directional,
			[Token(Token = "0x4001424")]
			Strafe
		}

		[Token(Token = "0x200036C")]
		public struct AnimState
		{
			[Token(Token = "0x4001425")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 moveDirection;

			[Token(Token = "0x4001426")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool jump;

			[Token(Token = "0x4001427")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			public bool crouch;

			[Token(Token = "0x4001428")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			public bool onGround;

			[Token(Token = "0x4001429")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			public bool isStrafing;

			[Token(Token = "0x400142A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float yVelocity;

			[Token(Token = "0x400142B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool doubleJump;
		}

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1255B54", Offset = "0x1255B54")]
		public CharacterAnimationBase characterAnimation;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UserControlThirdPerson userControl;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public CameraController cam;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1255B8C", Offset = "0x1255B8C")]
		public MoveMode moveMode;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool smoothPhysics;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float smoothAccelerationTime;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float linearAccelerationSpeed;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float platformFriction;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float groundStickyEffect;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float maxVerticalVelocityOnGround;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float velocityToGroundTangentWeight;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1255BC4", Offset = "0x1255BC4")]
		public bool lookInCameraDirection;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float turnSpeed;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float stationaryTurnSpeedMlp;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1255BFC", Offset = "0x1255BFC")]
		public float airSpeed;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float airControl;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float jumpPower;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float jumpRepeatDelayTime;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool doubleJumpEnabled;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float doubleJumpPowerMlp;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1255C34", Offset = "0x1255C34")]
		[SerializeField]
		private LayerMask wallRunLayers;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float wallRunMaxLength;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float wallRunMinMoveMag;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float wallRunMinVelocityY;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float wallRunRotationSpeed;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float wallRunMaxRotationAngle;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float wallRunWeightSpeed;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1255C80", Offset = "0x1255C80")]
		public float crouchCapsuleScaleMlp;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1255CB8", Offset = "0x1255CB8")]
		private bool <onGround>k__BackingField;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public AnimState animState;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected Vector3 moveDirection;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Animator animator;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 normal;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 platformVelocity;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 platformAngularVelocity;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private RaycastHit hit;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float jumpLeg;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float jumpEndTime;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float forwardMlp;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float groundDistance;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float lastAirTime;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float stickyForce;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Vector3 wallNormal;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private Vector3 moveDirectionVelocity;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private float wallRunWeight;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private float lastWallRunWeight;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private Vector3 fixedDeltaPosition;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private Quaternion fixedDeltaRotation;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private bool fixedFrame;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private float wallRunEndTime;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private Vector3 gravity;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private Vector3 verticalVelocity;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private float velocityY;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private bool doubleJumped;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E1")]
		private bool jumpReleased;

		[Token(Token = "0x17000071")]
		public bool onGround
		{
			[Token(Token = "0x6000E7D")]
			[Address(RVA = "0x1CB7E84", Offset = "0x1CB7E84", VA = "0x1CB7E84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261C08", Offset = "0x1261C08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E7E")]
			[Address(RVA = "0x1CB7E8C", Offset = "0x1CB7E8C", VA = "0x1CB7E8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261C18", Offset = "0x1261C18")]
			private set
			{
			}
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0x1CB70EC", Offset = "0x1CB70EC", VA = "0x1CB70EC", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0x1CB7E98", Offset = "0x1CB7E98", VA = "0x1CB7E98")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0x1CB739C", Offset = "0x1CB739C", VA = "0x1CB739C", Slot = "4")]
		public override void Move(Vector3 deltaPosition, Quaternion deltaRotation)
		{
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x1CB7F28", Offset = "0x1CB7F28", VA = "0x1CB7F28")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x1CB6FD0", Offset = "0x1CB6FD0", VA = "0x1CB6FD0", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x1CB9120", Offset = "0x1CB9120", VA = "0x1CB9120", Slot = "8")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x1CB8534", Offset = "0x1CB8534", VA = "0x1CB8534")]
		private void MoveFixed(Vector3 deltaPosition)
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x1CB9200", Offset = "0x1CB9200", VA = "0x1CB9200")]
		private void WallRun()
		{
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x1CB97F0", Offset = "0x1CB97F0", VA = "0x1CB97F0")]
		private bool CanWallRun()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x1CB8E64", Offset = "0x1CB8E64", VA = "0x1CB8E64")]
		private Vector3 GetMoveDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x1CB7730", Offset = "0x1CB7730", VA = "0x1CB7730", Slot = "9")]
		protected virtual void Rotate()
		{
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x1CB9890", Offset = "0x1CB9890", VA = "0x1CB9890")]
		private Vector3 GetForwardDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x1CB7BC8", Offset = "0x1CB7BC8", VA = "0x1CB7BC8", Slot = "10")]
		protected virtual bool Jump()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0x1CB8A44", Offset = "0x1CB8A44", VA = "0x1CB8A44")]
		private void GroundCheck()
		{
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0x1CB7D5C", Offset = "0x1CB7D5C", VA = "0x1CB7D5C")]
		public CharacterThirdPerson()
		{
		}
	}
	[Token(Token = "0x200020D")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1250540", Offset = "0x1250540")]
	public class SimpleLocomotion : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200036D")]
		public enum RotationMode
		{
			[Token(Token = "0x400142D")]
			Smooth,
			[Token(Token = "0x400142E")]
			Linear
		}

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255CC8", Offset = "0x1255CC8")]
		[SerializeField]
		private CameraController cameraController;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255D14", Offset = "0x1255D14")]
		[SerializeField]
		private float accelerationTime;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255D60", Offset = "0x1255D60")]
		[SerializeField]
		private float turnTime;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255DAC", Offset = "0x1255DAC")]
		[SerializeField]
		private bool walkByDefault;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255DF8", Offset = "0x1255DF8")]
		[SerializeField]
		private RotationMode rotationMode;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255E44", Offset = "0x1255E44")]
		[SerializeField]
		private float moveSpeed;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1255E90", Offset = "0x1255E90")]
		private bool <isGrounded>k__BackingField;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator animator;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float speed;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float angleVel;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float speedVel;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 linearTargetDirection;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private CharacterController characterController;

		[Token(Token = "0x17000072")]
		public bool isGrounded
		{
			[Token(Token = "0x6000E8E")]
			[Address(RVA = "0x1CC8DA0", Offset = "0x1CC8DA0", VA = "0x1CC8DA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261C28", Offset = "0x1261C28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E8F")]
			[Address(RVA = "0x1CC8DA8", Offset = "0x1CC8DA8", VA = "0x1CC8DA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261C38", Offset = "0x1261C38")]
			private set
			{
			}
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0x1CC8DB4", Offset = "0x1CC8DB4", VA = "0x1CC8DB4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x1CC8E50", Offset = "0x1CC8E50", VA = "0x1CC8E50")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0x1CC954C", Offset = "0x1CC954C", VA = "0x1CC954C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0x1CC8EA4", Offset = "0x1CC8EA4", VA = "0x1CC8EA4")]
		private void Rotate()
		{
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x1CC92A4", Offset = "0x1CC92A4", VA = "0x1CC92A4")]
		private void Move()
		{
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x1CC958C", Offset = "0x1CC958C", VA = "0x1CC958C")]
		private Vector3 GetInputVector()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x1CC9684", Offset = "0x1CC9684", VA = "0x1CC9684")]
		private Vector3 GetInputVectorRaw()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x1CC9724", Offset = "0x1CC9724", VA = "0x1CC9724")]
		public SimpleLocomotion()
		{
		}
	}
	[Token(Token = "0x200020E")]
	public class UserControlAI : UserControlThirdPerson
	{
		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform moveTarget;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float stoppingDistance;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float stoppingThreshold;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Navigator navigator;

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x1A763D8", Offset = "0x1A763D8", VA = "0x1A763D8", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x1A7645C", Offset = "0x1A7645C", VA = "0x1A7645C", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x1A766F4", Offset = "0x1A766F4", VA = "0x1A766F4")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x1A7671C", Offset = "0x1A7671C", VA = "0x1A7671C")]
		public UserControlAI()
		{
		}
	}
	[Token(Token = "0x200020F")]
	public class UserControlThirdPerson : MonoBehaviour
	{
		[Token(Token = "0x200036E")]
		public struct State
		{
			[Token(Token = "0x400142F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 move;

			[Token(Token = "0x4001430")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 lookPos;

			[Token(Token = "0x4001431")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool crouch;

			[Token(Token = "0x4001432")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			public bool jump;

			[Token(Token = "0x4001433")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int actionIndex;
		}

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool walkByDefault;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool canCrouch;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool canJump;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public State state;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform cam;

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x1A7641C", Offset = "0x1A7641C", VA = "0x1A7641C", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x1A76D90", Offset = "0x1A76D90", VA = "0x1A76D90", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x1A76738", Offset = "0x1A76738", VA = "0x1A76738")]
		public UserControlThirdPerson()
		{
		}
	}
	[Token(Token = "0x2000210")]
	public class ApplicationQuit : MonoBehaviour
	{
		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x1CB33E8", Offset = "0x1CB33E8", VA = "0x1CB33E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x1CB3424", Offset = "0x1CB3424", VA = "0x1CB3424")]
		public ApplicationQuit()
		{
		}
	}
	[Token(Token = "0x2000211")]
	public class SlowMo : MonoBehaviour
	{
		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private KeyCode[] keyCodes;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool mouse0;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		private bool mouse1;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float slowMoTimeScale;

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x1CC9BA8", Offset = "0x1CC9BA8", VA = "0x1CC9BA8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x1CC9BDC", Offset = "0x1CC9BDC", VA = "0x1CC9BDC")]
		private bool IsSlowMotion()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0x1CC9C8C", Offset = "0x1CC9C8C", VA = "0x1CC9C8C")]
		public SlowMo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000212")]
	public class Navigator
	{
		[Token(Token = "0x200036F")]
		public enum State
		{
			[Token(Token = "0x4001435")]
			Idle,
			[Token(Token = "0x4001436")]
			Seeking,
			[Token(Token = "0x4001437")]
			OnPath
		}

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255EE0", Offset = "0x1255EE0")]
		public bool activeTargetSeeking;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255F18", Offset = "0x1255F18")]
		public float cornerRadius;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255F50", Offset = "0x1255F50")]
		public float recalculateOnPathDistance;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255F88", Offset = "0x1255F88")]
		public float maxSampleDistance;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1255FC0", Offset = "0x1255FC0")]
		public float nextPathInterval;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1255FF8", Offset = "0x1255FF8")]
		private Vector3 <normalizedDeltaPosition>k__BackingField;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1256008", Offset = "0x1256008")]
		private State <state>k__BackingField;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform transform;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int cornerIndex;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[] corners;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private NavMeshPath path;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 lastTargetPosition;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool initiated;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float nextPathTime;

		[Token(Token = "0x17000073")]
		public Vector3 normalizedDeltaPosition
		{
			[Token(Token = "0x6000EA4")]
			[Address(RVA = "0x1CC33E4", Offset = "0x1CC33E4", VA = "0x1CC33E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261C48", Offset = "0x1261C48")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000EA5")]
			[Address(RVA = "0x1CC33F0", Offset = "0x1CC33F0", VA = "0x1CC33F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261C58", Offset = "0x1261C58")]
			private set
			{
			}
		}

		[Token(Token = "0x17000074")]
		public State state
		{
			[Token(Token = "0x6000EA6")]
			[Address(RVA = "0x1CC33FC", Offset = "0x1CC33FC", VA = "0x1CC33FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261C68", Offset = "0x1261C68")]
			get
			{
				return default(State);
			}
			[Token(Token = "0x6000EA7")]
			[Address(RVA = "0x1CC3404", Offset = "0x1CC3404", VA = "0x1CC3404")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261C78", Offset = "0x1261C78")]
			private set
			{
			}
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x1CC340C", Offset = "0x1CC340C", VA = "0x1CC340C")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x1CC3504", Offset = "0x1CC3504", VA = "0x1CC3504")]
		public void Update(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x1CC3A5C", Offset = "0x1CC3A5C", VA = "0x1CC3A5C")]
		private void CalculatePath(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x1CC3ACC", Offset = "0x1CC3ACC", VA = "0x1CC3ACC")]
		private bool Find(Vector3 targetPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x1CC3924", Offset = "0x1CC3924", VA = "0x1CC3924")]
		private void Stop()
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x1CC3998", Offset = "0x1CC3998", VA = "0x1CC3998")]
		private float HorDistance(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x1CC3C14", Offset = "0x1CC3C14", VA = "0x1CC3C14")]
		public void Visualize()
		{
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0x1CC3DC4", Offset = "0x1CC3DC4", VA = "0x1CC3DC4")]
		public Navigator()
		{
		}
	}
}
namespace RootMotion.FinalIK
{
	[Token(Token = "0x2000213")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x12505A4", Offset = "0x12505A4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12505A4", Offset = "0x12505A4")]
	public class BipedIK : SolverManager
	{
		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BipedIKSolvers solvers;

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x2318598", Offset = "0x2318598", VA = "0x2318598")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261C88", Offset = "0x1261C88")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0x23185E4", Offset = "0x23185E4", VA = "0x23185E4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261CC0", Offset = "0x1261CC0")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0x2318630", Offset = "0x2318630", VA = "0x2318630")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261CF8", Offset = "0x1261CF8")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0x231867C", Offset = "0x231867C", VA = "0x231867C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261D30", Offset = "0x1261D30")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0x23186C8", Offset = "0x23186C8", VA = "0x23186C8")]
		public float GetIKPositionWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0x2318764", Offset = "0x2318764", VA = "0x2318764")]
		public float GetIKRotationWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0x2318784", Offset = "0x2318784", VA = "0x2318784")]
		public void SetIKPositionWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0x23187B4", Offset = "0x23187B4", VA = "0x23187B4")]
		public void SetIKRotationWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0x23187E4", Offset = "0x23187E4", VA = "0x23187E4")]
		public void SetIKPosition(AvatarIKGoal goal, Vector3 IKPosition)
		{
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0x2318824", Offset = "0x2318824", VA = "0x2318824")]
		public void SetIKRotation(AvatarIKGoal goal, Quaternion IKRotation)
		{
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0x2318868", Offset = "0x2318868", VA = "0x2318868")]
		public Vector3 GetIKPosition(AvatarIKGoal goal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0x231888C", Offset = "0x231888C", VA = "0x231888C")]
		public Quaternion GetIKRotation(AvatarIKGoal goal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0x23188B0", Offset = "0x23188B0", VA = "0x23188B0")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes)
		{
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0x23188D8", Offset = "0x23188D8", VA = "0x23188D8")]
		public void SetLookAtPosition(Vector3 lookAtPosition)
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x2318904", Offset = "0x2318904", VA = "0x2318904")]
		public void SetSpinePosition(Vector3 spinePosition)
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0x2318930", Offset = "0x2318930", VA = "0x2318930")]
		public void SetSpineWeight(float weight)
		{
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x23186E8", Offset = "0x23186E8", VA = "0x23186E8")]
		public IKSolverLimb GetGoalIK(AvatarIKGoal goal)
		{
			return null;
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x2318958", Offset = "0x2318958", VA = "0x2318958")]
		public void InitiateBipedIK()
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x2318964", Offset = "0x2318964", VA = "0x2318964")]
		public void UpdateBipedIK()
		{
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x2318970", Offset = "0x2318970", VA = "0x2318970")]
		public void SetToDefaults()
		{
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x2318C98", Offset = "0x2318C98", VA = "0x2318C98", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0x2318D40", Offset = "0x2318D40", VA = "0x2318D40", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0x231908C", Offset = "0x231908C", VA = "0x231908C", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0x2319574", Offset = "0x2319574", VA = "0x2319574")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0x23195A8", Offset = "0x23195A8", VA = "0x23195A8")]
		public BipedIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000214")]
	public class BipedIKSolvers
	{
		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IKSolverLimb leftFoot;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IKSolverLimb rightFoot;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IKSolverLimb leftHand;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IKSolverLimb rightHand;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolverFABRIK spine;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt lookAt;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverAim aim;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Constraints pelvis;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb[] _limbs;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IKSolver[] _ikSolvers;

		[Token(Token = "0x17000075")]
		public IKSolverLimb[] limbs
		{
			[Token(Token = "0x6000EC9")]
			[Address(RVA = "0x2318B10", Offset = "0x2318B10", VA = "0x2318B10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000076")]
		public IKSolver[] ikSolvers
		{
			[Token(Token = "0x6000ECA")]
			[Address(RVA = "0x23197EC", Offset = "0x23197EC", VA = "0x23197EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0x2318F10", Offset = "0x2318F10", VA = "0x2318F10")]
		public void AssignReferences(BipedReferences references)
		{
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0x2319644", Offset = "0x2319644", VA = "0x2319644")]
		public BipedIKSolvers()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000215")]
	public abstract class Constraint
	{
		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float weight;

		[Token(Token = "0x17000077")]
		public bool isValid
		{
			[Token(Token = "0x6000ECD")]
			[Address(RVA = "0x231CAC8", Offset = "0x231CAC8", VA = "0x231CAC8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000ECE")]
		public abstract void UpdateConstraint();

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0x231CB38", Offset = "0x231CB38", VA = "0x231CB38")]
		protected Constraint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000216")]
	public class ConstraintPosition : Constraint
	{
		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 position;

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0x231CB40", Offset = "0x231CB40", VA = "0x231CB40", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0x231CC4C", Offset = "0x231CC4C", VA = "0x231CC4C")]
		public ConstraintPosition()
		{
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0x231CC54", Offset = "0x231CC54", VA = "0x231CC54")]
		public ConstraintPosition(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000217")]
	public class ConstraintPositionOffset : Constraint
	{
		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 offset;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 defaultLocalPosition;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 lastLocalPosition;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initiated;

		[Token(Token = "0x17000078")]
		private bool positionChanged
		{
			[Token(Token = "0x6000ED6")]
			[Address(RVA = "0x231CE24", Offset = "0x231CE24", VA = "0x231CE24")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0x231CC88", Offset = "0x231CC88", VA = "0x231CC88", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x231CEE0", Offset = "0x231CEE0", VA = "0x231CEE0")]
		public ConstraintPositionOffset()
		{
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0x231CEE8", Offset = "0x231CEE8", VA = "0x231CEE8")]
		public ConstraintPositionOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000218")]
	public class ConstraintRotation : Constraint
	{
		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rotation;

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x231CF1C", Offset = "0x231CF1C", VA = "0x231CF1C", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x231D044", Offset = "0x231D044", VA = "0x231D044")]
		public ConstraintRotation()
		{
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x231D04C", Offset = "0x231D04C", VA = "0x231D04C")]
		public ConstraintRotation(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000219")]
	public class ConstraintRotationOffset : Constraint
	{
		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion offset;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastLocalRotation;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion defaultTargetLocalRotation;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool initiated;

		[Token(Token = "0x17000079")]
		private bool rotationChanged
		{
			[Token(Token = "0x6000EDD")]
			[Address(RVA = "0x231D220", Offset = "0x231D220", VA = "0x231D220")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x231D080", Offset = "0x231D080", VA = "0x231D080", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x231D2F0", Offset = "0x231D2F0", VA = "0x231D2F0")]
		public ConstraintRotationOffset()
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0x231D2F8", Offset = "0x231D2F8", VA = "0x231D2F8")]
		public ConstraintRotationOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200021A")]
	public class Constraints
	{
		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 positionOffset;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 position;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1256018", Offset = "0x1256018")]
		public float positionWeight;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 rotationOffset;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rotation;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1256030", Offset = "0x1256030")]
		public float rotationWeight;

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0x231D32C", Offset = "0x231D32C", VA = "0x231D32C")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0x2319034", Offset = "0x2319034", VA = "0x2319034")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0x2319214", Offset = "0x2319214", VA = "0x2319214")]
		public void Update()
		{
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0x2319A1C", Offset = "0x2319A1C", VA = "0x2319A1C")]
		public Constraints()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200021B")]
	public class Finger
	{
		[Serializable]
		[Token(Token = "0x2000370")]
		public enum DOF
		{
			[Token(Token = "0x4001439")]
			One,
			[Token(Token = "0x400143A")]
			Three
		}

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256048", Offset = "0x1256048")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1256048", Offset = "0x1256048")]
		public float weight;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125609C", Offset = "0x125609C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125609C", Offset = "0x125609C")]
		public float rotationWeight;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12560F0", Offset = "0x12560F0")]
		public DOF rotationDOF;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256128", Offset = "0x1256128")]
		public Transform bone1;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256160", Offset = "0x1256160")]
		public Transform bone2;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256198", Offset = "0x1256198")]
		public Transform bone3;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12561D0", Offset = "0x12561D0")]
		public Transform tip;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256208", Offset = "0x1256208")]
		public Transform target;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1256240", Offset = "0x1256240")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb solver;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion bone3RelativeToTarget;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 bone3DefaultLocalPosition;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion bone3DefaultLocalRotation;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 bone1Axis;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 tipAxis;

		[Token(Token = "0x1700007A")]
		public bool initiated
		{
			[Token(Token = "0x6000EE2")]
			[Address(RVA = "0x2ADAE58", Offset = "0x2ADAE58", VA = "0x2ADAE58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261D68", Offset = "0x1261D68")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EE3")]
			[Address(RVA = "0x2ADAE60", Offset = "0x2ADAE60", VA = "0x2ADAE60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261D78", Offset = "0x1261D78")]
			private set
			{
			}
		}

		[Token(Token = "0x1700007B")]
		public Vector3 IKPosition
		{
			[Token(Token = "0x6000EE4")]
			[Address(RVA = "0x2ADAE6C", Offset = "0x2ADAE6C", VA = "0x2ADAE6C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000EE5")]
			[Address(RVA = "0x2ADAE8C", Offset = "0x2ADAE8C", VA = "0x2ADAE8C")]
			set
			{
			}
		}

		[Token(Token = "0x1700007C")]
		public Quaternion IKRotation
		{
			[Token(Token = "0x6000EE6")]
			[Address(RVA = "0x2ADAEAC", Offset = "0x2ADAEAC", VA = "0x2ADAEAC")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000EE7")]
			[Address(RVA = "0x2ADAECC", Offset = "0x2ADAECC", VA = "0x2ADAECC")]
			set
			{
			}
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x2ADAEEC", Offset = "0x2ADAEEC", VA = "0x2ADAEEC")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x2ADAFF8", Offset = "0x2ADAFF8", VA = "0x2ADAFF8")]
		public void Initiate(Transform hand, int index)
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x2ADB588", Offset = "0x2ADB588", VA = "0x2ADB588")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x2ADB664", Offset = "0x2ADB664", VA = "0x2ADB664")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0x2ADB72C", Offset = "0x2ADB72C", VA = "0x2ADB72C")]
		public void Update(float masterWeight)
		{
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0x2ADBB48", Offset = "0x2ADBB48", VA = "0x2ADBB48")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x200021C")]
	public class FingerRig : SolverManager
	{
		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256250", Offset = "0x1256250")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1256250", Offset = "0x1256250")]
		public float weight;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Finger[] fingers;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12562A4", Offset = "0x12562A4")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x1700007D")]
		public bool initiated
		{
			[Token(Token = "0x6000EEE")]
			[Address(RVA = "0x2ADBB58", Offset = "0x2ADBB58", VA = "0x2ADBB58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261D88", Offset = "0x1261D88")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EEF")]
			[Address(RVA = "0x2ADBB60", Offset = "0x2ADBB60", VA = "0x2ADBB60")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261D98", Offset = "0x1261D98")]
			private set
			{
			}
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0x2ADBB6C", Offset = "0x2ADBB6C", VA = "0x2ADBB6C")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0x2ADBBF4", Offset = "0x2ADBBF4", VA = "0x2ADBBF4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261DA8", Offset = "0x1261DA8")]
		public void AutoDetect()
		{
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0x2ADBF6C", Offset = "0x2ADBF6C", VA = "0x2ADBF6C")]
		public void AddFinger(Transform bone1, Transform bone2, Transform bone3, Transform tip, [Optional] Transform target)
		{
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0x2ADC128", Offset = "0x2ADC128", VA = "0x2ADC128")]
		public void RemoveFinger(int index)
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0x2ADBE5C", Offset = "0x2ADBE5C", VA = "0x2ADBE5C")]
		private void AddChildrenRecursive(Transform parent, ref Transform[] array)
		{
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0x2ADC2AC", Offset = "0x2ADC2AC", VA = "0x2ADC2AC", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0x2ADC36C", Offset = "0x2ADC36C", VA = "0x2ADC36C")]
		public void UpdateFingerSolvers()
		{
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x2ADC3E4", Offset = "0x2ADC3E4", VA = "0x2ADC3E4")]
		public void FixFingerTransforms()
		{
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x2ADC458", Offset = "0x2ADC458", VA = "0x2ADC458")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x2ADC4C0", Offset = "0x2ADC4C0", VA = "0x2ADC4C0", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x2ADC4C4", Offset = "0x2ADC4C4", VA = "0x2ADC4C4", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x2ADC4D8", Offset = "0x2ADC4D8", VA = "0x2ADC4D8")]
		public FingerRig()
		{
		}
	}
	[Token(Token = "0x200021D")]
	public abstract class Grounder : MonoBehaviour
	{
		[Token(Token = "0x2000371")]
		public delegate void GrounderDelegate();

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12562B4", Offset = "0x12562B4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12562B4", Offset = "0x12562B4")]
		public float weight;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256308", Offset = "0x1256308")]
		public Grounding solver;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrounderDelegate OnPreGrounder;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrounderDelegate OnPostGrounder;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1256340", Offset = "0x1256340")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x1700007E")]
		public bool initiated
		{
			[Token(Token = "0x6000EFD")]
			[Address(RVA = "0x2ADD5B0", Offset = "0x2ADD5B0", VA = "0x2ADD5B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261DE0", Offset = "0x1261DE0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EFE")]
			[Address(RVA = "0x2ADD5B8", Offset = "0x2ADD5B8", VA = "0x2ADD5B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1261DF0", Offset = "0x1261DF0")]
			protected set
			{
			}
		}

		[Token(Token = "0x6000EFC")]
		public abstract void ResetPosition();

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x2ADD5C4", Offset = "0x2ADD5C4", VA = "0x2ADD5C4")]
		protected Vector3 GetSpineOffsetTarget()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x2ADD898", Offset = "0x2ADD898", VA = "0x2ADD898")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x2ADD708", Offset = "0x2ADD708", VA = "0x2ADD708")]
		private Vector3 GetLegSpineBendVector(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x2ADD8CC", Offset = "0x2ADD8CC", VA = "0x2ADD8CC")]
		private Vector3 GetLegSpineTangent(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F03")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x6000F04")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x2ADDAD4", Offset = "0x2ADDAD4", VA = "0x2ADDAD4")]
		protected Grounder()
		{
		}
	}
	[Token(Token = "0x200021E")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x1250604", Offset = "0x1250604")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250604", Offset = "0x1250604")]
	public class GrounderBipedIK : Grounder
	{
		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256350", Offset = "0x1256350")]
		public BipedIK ik;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256388", Offset = "0x1256388")]
		public float spineBend;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12563C0", Offset = "0x12563C0")]
		public float spineSpeed;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform[] feet;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion[] footRotations;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 spineOffset;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastWeight;

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0x2ADDE4C", Offset = "0x2ADDE4C", VA = "0x2ADDE4C", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261E00", Offset = "0x1261E00")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0x2ADDE98", Offset = "0x2ADDE98", VA = "0x2ADDE98", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261E38", Offset = "0x1261E38")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0x2ADDEE4", Offset = "0x2ADDEE4", VA = "0x2ADDEE4", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0x2ADDFE8", Offset = "0x2ADDFE8", VA = "0x2ADDFE8")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x2ADE098", Offset = "0x2ADE098", VA = "0x2ADE098")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0x2ADE14C", Offset = "0x2ADE14C", VA = "0x2ADE14C")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x2ADE740", Offset = "0x2ADE740", VA = "0x2ADE740")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0x2ADE794", Offset = "0x2ADE794", VA = "0x2ADE794")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0x2ADEF48", Offset = "0x2ADEF48", VA = "0x2ADEF48")]
		private void SetLegIK(IKSolverLimb limb, int index)
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0x2ADF0A8", Offset = "0x2ADF0A8", VA = "0x2ADF0A8")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0x2ADF238", Offset = "0x2ADF238", VA = "0x2ADF238")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0x2ADF3F4", Offset = "0x2ADF3F4", VA = "0x2ADF3F4")]
		public GrounderBipedIK()
		{
		}
	}
	[Token(Token = "0x200021F")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x1250664", Offset = "0x1250664")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250664", Offset = "0x1250664")]
	public class GrounderFBBIK : Grounder
	{
		[Serializable]
		[Token(Token = "0x2000372")]
		public class SpineEffector
		{
			[Token(Token = "0x400143B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D4BC", Offset = "0x125D4BC")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x400143C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D4F4", Offset = "0x125D4F4")]
			public float horizontalWeight;

			[Token(Token = "0x400143D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D52C", Offset = "0x125D52C")]
			public float verticalWeight;

			[Token(Token = "0x600173B")]
			[Address(RVA = "0x2AE0328", Offset = "0x2AE0328", VA = "0x2AE0328")]
			public SpineEffector()
			{
			}

			[Token(Token = "0x600173C")]
			[Address(RVA = "0x2AE0338", Offset = "0x2AE0338", VA = "0x2AE0338")]
			public SpineEffector(FullBodyBipedEffector effectorType, float horizontalWeight, float verticalWeight)
			{
			}
		}

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12563F8", Offset = "0x12563F8")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256430", Offset = "0x1256430")]
		public float spineBend;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256468", Offset = "0x1256468")]
		public float spineSpeed;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SpineEffector[] spine;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] feet;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 spineOffset;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool firstSolve;

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0x2ADF48C", Offset = "0x2ADF48C", VA = "0x2ADF48C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261E70", Offset = "0x1261E70")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0x2ADF4D8", Offset = "0x2ADF4D8", VA = "0x2ADF4D8", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261EA8", Offset = "0x1261EA8")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0x2ADF524", Offset = "0x2ADF524", VA = "0x2ADF524", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261EE0", Offset = "0x1261EE0")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0x2ADF570", Offset = "0x2ADF570", VA = "0x2ADF570", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0x2ADF5F0", Offset = "0x2ADF5F0", VA = "0x2ADF5F0")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0x2ADF688", Offset = "0x2ADF688", VA = "0x2ADF688")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0x2ADF98C", Offset = "0x2ADF98C", VA = "0x2ADF98C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0x2ADF998", Offset = "0x2ADF998", VA = "0x2ADF998")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x2ADF744", Offset = "0x2ADF744", VA = "0x2ADF744")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x2ADF9A4", Offset = "0x2ADF9A4", VA = "0x2ADF9A4")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0x2ADFE44", Offset = "0x2ADFE44", VA = "0x2ADFE44")]
		private void SetLegIK(IKEffector effector, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x2AE0004", Offset = "0x2AE0004", VA = "0x2AE0004")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x2AE0160", Offset = "0x2AE0160", VA = "0x2AE0160")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x2AE0290", Offset = "0x2AE0290", VA = "0x2AE0290")]
		public GrounderFBBIK()
		{
		}
	}
	[Token(Token = "0x2000220")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x12506C4", Offset = "0x12506C4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12506C4", Offset = "0x12506C4")]
	public class GrounderIK : Grounder
	{
		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IK[] legs;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12564A0", Offset = "0x12564A0")]
		public Transform pelvis;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12564D8", Offset = "0x12564D8")]
		public Transform characterRoot;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256510", Offset = "0x1256510")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1256510", Offset = "0x1256510")]
		public float rootRotationWeight;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256564", Offset = "0x1256564")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125659C", Offset = "0x125659C")]
		public float maxRootRotationAngle;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform[] feet;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] footRotations;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int solvedFeet;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool solved;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastWeight;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x2AE0380", Offset = "0x2AE0380", VA = "0x2AE0380", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261F18", Offset = "0x1261F18")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x2AE03CC", Offset = "0x2AE03CC", VA = "0x2AE03CC", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261F50", Offset = "0x1261F50")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x2AE0418", Offset = "0x2AE0418", VA = "0x2AE0418", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x2AE0430", Offset = "0x2AE0430", VA = "0x2AE0430")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x2AE0620", Offset = "0x2AE0620", VA = "0x2AE0620")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x2AE0720", Offset = "0x2AE0720", VA = "0x2AE0720")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x2AE0E68", Offset = "0x2AE0E68", VA = "0x2AE0E68")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x2AE12C0", Offset = "0x2AE12C0", VA = "0x2AE12C0")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x2AE1530", Offset = "0x2AE1530", VA = "0x2AE1530")]
		private void SetLegIK(int index)
		{
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0x2AE1850", Offset = "0x2AE1850", VA = "0x2AE1850")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0x2AE19DC", Offset = "0x2AE19DC", VA = "0x2AE19DC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0x2AE1BE0", Offset = "0x2AE1BE0", VA = "0x2AE1BE0")]
		public GrounderIK()
		{
		}
	}
	[Token(Token = "0x2000221")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x1250724", Offset = "0x1250724")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250724", Offset = "0x1250724")]
	public class GrounderQuadruped : Grounder
	{
		[Token(Token = "0x2000373")]
		public struct Foot
		{
			[Token(Token = "0x400143E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IKSolver solver;

			[Token(Token = "0x400143F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x4001440")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Quaternion rotation;

			[Token(Token = "0x4001441")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grounding.Leg leg;

			[Token(Token = "0x600173D")]
			[Address(RVA = "0x2AE2808", Offset = "0x2AE2808", VA = "0x2AE2808")]
			public Foot(IKSolver solver, Transform transform)
			{
			}
		}

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12565D4", Offset = "0x12565D4")]
		public Grounding forelegSolver;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125660C", Offset = "0x125660C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125660C", Offset = "0x125660C")]
		public float rootRotationWeight;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256660", Offset = "0x1256660")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1256660", Offset = "0x1256660")]
		public float minRootRotation;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12566B8", Offset = "0x12566B8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12566B8", Offset = "0x12566B8")]
		public float maxRootRotation;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256710", Offset = "0x1256710")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256748", Offset = "0x1256748")]
		public float maxLegOffset;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256780", Offset = "0x1256780")]
		public float maxForeLegOffset;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12567B8", Offset = "0x12567B8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12567B8", Offset = "0x12567B8")]
		public float maintainHeadRotationWeight;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125680C", Offset = "0x125680C")]
		public Transform characterRoot;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256844", Offset = "0x1256844")]
		public Transform pelvis;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125687C", Offset = "0x125687C")]
		public Transform lastSpineBone;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12568B4", Offset = "0x12568B4")]
		public Transform head;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IK[] legs;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IK[] forelegs;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Vector3 gravity;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Foot[] feet;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Quaternion animatedPelvisLocalRotation;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Quaternion animatedHeadLocalRotation;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion solvedPelvisLocalRotation;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion solvedHeadLocalRotation;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int solvedFeet;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool solved;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float angle;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Transform forefeetRoot;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Quaternion headRotation;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float lastWeight;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0x2AE1C78", Offset = "0x2AE1C78", VA = "0x2AE1C78", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261F88", Offset = "0x1261F88")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0x2AE1CC4", Offset = "0x2AE1CC4", VA = "0x2AE1CC4", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261FC0", Offset = "0x1261FC0")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0x2AE1D10", Offset = "0x2AE1D10", VA = "0x2AE1D10", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x2AE1D44", Offset = "0x2AE1D44", VA = "0x2AE1D44")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0x2AE1E74", Offset = "0x2AE1E74", VA = "0x2AE1E74")]
		private bool IsReadyToInitiateLegs(IK[] ikComponents)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x2AE2034", Offset = "0x2AE2034", VA = "0x2AE2034")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x2AE209C", Offset = "0x2AE209C", VA = "0x2AE209C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x2AE2154", Offset = "0x2AE2154", VA = "0x2AE2154")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x2AE2488", Offset = "0x2AE2488", VA = "0x2AE2488")]
		private Transform[] InitiateFeet(IK[] ikComponents, ref Foot[] f, int indexOffset)
		{
			return null;
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0x2AE286C", Offset = "0x2AE286C", VA = "0x2AE286C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0x2AE29B8", Offset = "0x2AE29B8", VA = "0x2AE29B8")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0x2AE2E5C", Offset = "0x2AE2E5C", VA = "0x2AE2E5C")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0x2AE364C", Offset = "0x2AE364C", VA = "0x2AE364C")]
		private void UpdateForefeetRoot()
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0x2AE390C", Offset = "0x2AE390C", VA = "0x2AE390C")]
		private void SetFootIK(Foot foot, float maxOffset)
		{
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0x2AE3A6C", Offset = "0x2AE3A6C", VA = "0x2AE3A6C")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0x2AE3D48", Offset = "0x2AE3D48", VA = "0x2AE3D48")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0x2AE3D80", Offset = "0x2AE3D80", VA = "0x2AE3D80")]
		private void DestroyLegs(IK[] ikComponents)
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0x2AE3F7C", Offset = "0x2AE3F7C", VA = "0x2AE3F7C")]
		public GrounderQuadruped()
		{
		}
	}
	[Token(Token = "0x2000222")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250784", Offset = "0x1250784")]
	public class GrounderVRIK : Grounder
	{
		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12568FC", Offset = "0x12568FC")]
		public VRIK ik;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform[] feet;

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0x2AE40B0", Offset = "0x2AE40B0", VA = "0x2AE40B0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1261FF8", Offset = "0x1261FF8")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0x2AE40B4", Offset = "0x2AE40B4", VA = "0x2AE40B4", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262030", Offset = "0x1262030")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0x2AE40B8", Offset = "0x2AE40B8", VA = "0x2AE40B8", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262068", Offset = "0x1262068")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0x2AE40BC", Offset = "0x2AE40BC", VA = "0x2AE40BC", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0x2AE40D4", Offset = "0x2AE40D4", VA = "0x2AE40D4")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0x2AE416C", Offset = "0x2AE416C", VA = "0x2AE416C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0x2AE4220", Offset = "0x2AE4220", VA = "0x2AE4220")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0x2AE4484", Offset = "0x2AE4484", VA = "0x2AE4484")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0x2AE4718", Offset = "0x2AE4718", VA = "0x2AE4718")]
		private void SetLegIK(IKSolverVR.PositionOffset positionOffset, Transform bone, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x2AE4820", Offset = "0x2AE4820", VA = "0x2AE4820")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0x2AE4A20", Offset = "0x2AE4A20", VA = "0x2AE4A20")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x2AE4B7C", Offset = "0x2AE4B7C", VA = "0x2AE4B7C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x2AE4D28", Offset = "0x2AE4D28", VA = "0x2AE4D28")]
		public GrounderVRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000223")]
	public class Grounding
	{
		[Serializable]
		[Token(Token = "0x2000374")]
		public enum Quality
		{
			[Token(Token = "0x4001443")]
			Fastest,
			[Token(Token = "0x4001444")]
			Simple,
			[Token(Token = "0x4001445")]
			Best
		}

		[Token(Token = "0x2000375")]
		public class Leg
		{
			[Token(Token = "0x4001446")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125D564", Offset = "0x125D564")]
			private bool <isGrounded>k__BackingField;

			[Token(Token = "0x4001447")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125D574", Offset = "0x125D574")]
			private Vector3 <IKPosition>k__BackingField;

			[Token(Token = "0x4001448")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Quaternion rotationOffset;

			[Token(Token = "0x4001449")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125D584", Offset = "0x125D584")]
			private bool <initiated>k__BackingField;

			[Token(Token = "0x400144A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125D594", Offset = "0x125D594")]
			private float <heightFromGround>k__BackingField;

			[Token(Token = "0x400144B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125D5A4", Offset = "0x125D5A4")]
			private Vector3 <velocity>k__BackingField;

			[Token(Token = "0x400144C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125D5B4", Offset = "0x125D5B4")]
			private Transform <transform>k__BackingField;

			[Token(Token = "0x400144D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125D5C4", Offset = "0x125D5C4")]
			private float <IKOffset>k__BackingField;

			[Token(Token = "0x400144E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public bool invertFootCenter;

			[Token(Token = "0x400144F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Grounding grounding;

			[Token(Token = "0x4001450")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private float lastTime;

			[Token(Token = "0x4001451")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			private float deltaTime;

			[Token(Token = "0x4001452")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Vector3 lastPosition;

			[Token(Token = "0x4001453")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion toHitNormal;

			[Token(Token = "0x4001454")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Quaternion r;

			[Token(Token = "0x4001455")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			private RaycastHit heelHit;

			[Token(Token = "0x4001456")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private Vector3 up;

			[Token(Token = "0x17000162")]
			public bool isGrounded
			{
				[Token(Token = "0x600173E")]
				[Address(RVA = "0x2AE6588", Offset = "0x2AE6588", VA = "0x2AE6588")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264B3C", Offset = "0x1264B3C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600173F")]
				[Address(RVA = "0x2AE6590", Offset = "0x2AE6590", VA = "0x2AE6590")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264B4C", Offset = "0x1264B4C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000163")]
			public Vector3 IKPosition
			{
				[Token(Token = "0x6001740")]
				[Address(RVA = "0x2AE659C", Offset = "0x2AE659C", VA = "0x2AE659C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264B5C", Offset = "0x1264B5C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001741")]
				[Address(RVA = "0x2AE65A8", Offset = "0x2AE65A8", VA = "0x2AE65A8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264B6C", Offset = "0x1264B6C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000164")]
			public bool initiated
			{
				[Token(Token = "0x6001742")]
				[Address(RVA = "0x2AE65B4", Offset = "0x2AE65B4", VA = "0x2AE65B4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264B7C", Offset = "0x1264B7C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001743")]
				[Address(RVA = "0x2AE65BC", Offset = "0x2AE65BC", VA = "0x2AE65BC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264B8C", Offset = "0x1264B8C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000165")]
			public float heightFromGround
			{
				[Token(Token = "0x6001744")]
				[Address(RVA = "0x2AE65C8", Offset = "0x2AE65C8", VA = "0x2AE65C8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264B9C", Offset = "0x1264B9C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001745")]
				[Address(RVA = "0x2AE65D0", Offset = "0x2AE65D0", VA = "0x2AE65D0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264BAC", Offset = "0x1264BAC")]
				private set
				{
				}
			}

			[Token(Token = "0x17000166")]
			public Vector3 velocity
			{
				[Token(Token = "0x6001746")]
				[Address(RVA = "0x2AE65D8", Offset = "0x2AE65D8", VA = "0x2AE65D8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264BBC", Offset = "0x1264BBC")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001747")]
				[Address(RVA = "0x2AE65E4", Offset = "0x2AE65E4", VA = "0x2AE65E4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264BCC", Offset = "0x1264BCC")]
				private set
				{
				}
			}

			[Token(Token = "0x17000167")]
			public Transform transform
			{
				[Token(Token = "0x6001748")]
				[Address(RVA = "0x2AE65F0", Offset = "0x2AE65F0", VA = "0x2AE65F0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264BDC", Offset = "0x1264BDC")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001749")]
				[Address(RVA = "0x2AE65F8", Offset = "0x2AE65F8", VA = "0x2AE65F8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264BEC", Offset = "0x1264BEC")]
				private set
				{
				}
			}

			[Token(Token = "0x17000168")]
			public float IKOffset
			{
				[Token(Token = "0x600174A")]
				[Address(RVA = "0x2AE6600", Offset = "0x2AE6600", VA = "0x2AE6600")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264BFC", Offset = "0x1264BFC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600174B")]
				[Address(RVA = "0x2AE6608", Offset = "0x2AE6608", VA = "0x2AE6608")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264C0C", Offset = "0x1264C0C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000169")]
			public float stepHeightFromGround
			{
				[Token(Token = "0x6001750")]
				[Address(RVA = "0x2AE7158", Offset = "0x2AE7158", VA = "0x2AE7158")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700016A")]
			private float rootYOffset
			{
				[Token(Token = "0x6001759")]
				[Address(RVA = "0x2AE744C", Offset = "0x2AE744C", VA = "0x2AE744C")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x600174C")]
			[Address(RVA = "0x2AE53D8", Offset = "0x2AE53D8", VA = "0x2AE53D8")]
			public void Initiate(Grounding grounding, Transform transform)
			{
			}

			[Token(Token = "0x600174D")]
			[Address(RVA = "0x2AE6610", Offset = "0x2AE6610", VA = "0x2AE6610")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x600174E")]
			[Address(RVA = "0x2AE60A8", Offset = "0x2AE60A8", VA = "0x2AE60A8")]
			public void Reset()
			{
			}

			[Token(Token = "0x600174F")]
			[Address(RVA = "0x2AE551C", Offset = "0x2AE551C", VA = "0x2AE551C")]
			public void Process()
			{
			}

			[Token(Token = "0x6001751")]
			[Address(RVA = "0x2AE6CF0", Offset = "0x2AE6CF0", VA = "0x2AE6CF0")]
			private RaycastHit GetCapsuleHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x6001752")]
			[Address(RVA = "0x2AE665C", Offset = "0x2AE665C", VA = "0x2AE665C")]
			private RaycastHit GetRaycastHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x6001753")]
			[Address(RVA = "0x2AE72D8", Offset = "0x2AE72D8", VA = "0x2AE72D8")]
			private Vector3 RotateNormal(Vector3 normal)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001754")]
			[Address(RVA = "0x2AE6980", Offset = "0x2AE6980", VA = "0x2AE6980")]
			private void SetFootToPoint(Vector3 normal, Vector3 point)
			{
			}

			[Token(Token = "0x6001755")]
			[Address(RVA = "0x2AE6A88", Offset = "0x2AE6A88", VA = "0x2AE6A88")]
			private void SetFootToPlane(Vector3 planeNormal, Vector3 planePoint, Vector3 heelHitPoint)
			{
			}

			[Token(Token = "0x6001756")]
			[Address(RVA = "0x2AE73D4", Offset = "0x2AE73D4", VA = "0x2AE73D4")]
			private float GetHeightFromGround(Vector3 hitPoint)
			{
				return default(float);
			}

			[Token(Token = "0x6001757")]
			[Address(RVA = "0x2AE71E4", Offset = "0x2AE71E4", VA = "0x2AE71E4")]
			private void RotateFoot()
			{
			}

			[Token(Token = "0x6001758")]
			[Address(RVA = "0x2AE7580", Offset = "0x2AE7580", VA = "0x2AE7580")]
			private Quaternion GetRotationOffsetTarget()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x600175A")]
			[Address(RVA = "0x2AE5328", Offset = "0x2AE5328", VA = "0x2AE5328")]
			public Leg()
			{
			}
		}

		[Token(Token = "0x2000376")]
		public class Pelvis
		{
			[Token(Token = "0x4001457")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125D5D4", Offset = "0x125D5D4")]
			private Vector3 <IKOffset>k__BackingField;

			[Token(Token = "0x4001458")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125D5E4", Offset = "0x125D5E4")]
			private float <heightOffset>k__BackingField;

			[Token(Token = "0x4001459")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Grounding grounding;

			[Token(Token = "0x400145A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 lastRootPosition;

			[Token(Token = "0x400145B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float damperF;

			[Token(Token = "0x400145C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool initiated;

			[Token(Token = "0x400145D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float lastTime;

			[Token(Token = "0x1700016B")]
			public Vector3 IKOffset
			{
				[Token(Token = "0x600175B")]
				[Address(RVA = "0x2AE7670", Offset = "0x2AE7670", VA = "0x2AE7670")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264C1C", Offset = "0x1264C1C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600175C")]
				[Address(RVA = "0x2AE767C", Offset = "0x2AE767C", VA = "0x2AE767C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264C2C", Offset = "0x1264C2C")]
				private set
				{
				}
			}

			[Token(Token = "0x1700016C")]
			public float heightOffset
			{
				[Token(Token = "0x600175D")]
				[Address(RVA = "0x2AE7688", Offset = "0x2AE7688", VA = "0x2AE7688")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264C3C", Offset = "0x1264C3C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600175E")]
				[Address(RVA = "0x2AE7690", Offset = "0x2AE7690", VA = "0x2AE7690")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264C4C", Offset = "0x1264C4C")]
				private set
				{
				}
			}

			[Token(Token = "0x600175F")]
			[Address(RVA = "0x2AE54D4", Offset = "0x2AE54D4", VA = "0x2AE54D4")]
			public void Initiate(Grounding grounding)
			{
			}

			[Token(Token = "0x6001760")]
			[Address(RVA = "0x2AE5FF8", Offset = "0x2AE5FF8", VA = "0x2AE5FF8")]
			public void Reset()
			{
			}

			[Token(Token = "0x6001761")]
			[Address(RVA = "0x2AE7698", Offset = "0x2AE7698", VA = "0x2AE7698")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x6001762")]
			[Address(RVA = "0x2AE5D8C", Offset = "0x2AE5D8C", VA = "0x2AE5D8C")]
			public void Process(float lowestOffset, float highestOffset, bool isGrounded)
			{
			}

			[Token(Token = "0x6001763")]
			[Address(RVA = "0x2AE53D0", Offset = "0x2AE53D0", VA = "0x2AE53D0")]
			public Pelvis()
			{
			}
		}

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256934", Offset = "0x1256934")]
		public LayerMask layers;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125696C", Offset = "0x125696C")]
		public float maxStep;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12569A4", Offset = "0x12569A4")]
		public float heightOffset;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12569DC", Offset = "0x12569DC")]
		public float footSpeed;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256A14", Offset = "0x1256A14")]
		public float footRadius;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256A4C", Offset = "0x1256A4C")]
		[HideInInspector]
		public float footCenterOffset;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256A98", Offset = "0x1256A98")]
		public float prediction;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256AD0", Offset = "0x1256AD0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1256AD0", Offset = "0x1256AD0")]
		public float footRotationWeight;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256B24", Offset = "0x1256B24")]
		public float footRotationSpeed;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256B5C", Offset = "0x1256B5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1256B5C", Offset = "0x1256B5C")]
		public float maxFootRotationAngle;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256BB4", Offset = "0x1256BB4")]
		public bool rotateSolver;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256BEC", Offset = "0x1256BEC")]
		public float pelvisSpeed;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256C24", Offset = "0x1256C24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1256C24", Offset = "0x1256C24")]
		public float pelvisDamper;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256C78", Offset = "0x1256C78")]
		public float lowerPelvisWeight;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256CB0", Offset = "0x1256CB0")]
		public float liftPelvisWeight;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256CE8", Offset = "0x1256CE8")]
		public float rootSphereCastRadius;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256D20", Offset = "0x1256D20")]
		public bool overstepFallsDown;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256D58", Offset = "0x1256D58")]
		public Quality quality;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1256D90", Offset = "0x1256D90")]
		private Leg[] <legs>k__BackingField;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1256DA0", Offset = "0x1256DA0")]
		private Pelvis <pelvis>k__BackingField;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1256DB0", Offset = "0x1256DB0")]
		private bool <isGrounded>k__BackingField;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1256DC0", Offset = "0x1256DC0")]
		private Transform <root>k__BackingField;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1256DD0", Offset = "0x1256DD0")]
		private RaycastHit <rootHit>k__BackingField;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool initiated;

		[Token(Token = "0x1700007F")]
		public Leg[] legs
		{
			[Token(Token = "0x6000F4B")]
			[Address(RVA = "0x2AE4D90", Offset = "0x2AE4D90", VA = "0x2AE4D90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12620A0", Offset = "0x12620A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F4C")]
			[Address(RVA = "0x2AE4D98", Offset = "0x2AE4D98", VA = "0x2AE4D98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12620B0", Offset = "0x12620B0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000080")]
		public Pelvis pelvis
		{
			[Token(Token = "0x6000F4D")]
			[Address(RVA = "0x2AE4DA0", Offset = "0x2AE4DA0", VA = "0x2AE4DA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12620C0", Offset = "0x12620C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F4E")]
			[Address(RVA = "0x2AE4DA8", Offset = "0x2AE4DA8", VA = "0x2AE4DA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12620D0", Offset = "0x12620D0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000081")]
		public bool isGrounded
		{
			[Token(Token = "0x6000F4F")]
			[Address(RVA = "0x2AE4DB0", Offset = "0x2AE4DB0", VA = "0x2AE4DB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12620E0", Offset = "0x12620E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F50")]
			[Address(RVA = "0x2AE4DB8", Offset = "0x2AE4DB8", VA = "0x2AE4DB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12620F0", Offset = "0x12620F0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000082")]
		public Transform root
		{
			[Token(Token = "0x6000F51")]
			[Address(RVA = "0x2AE4DC4", Offset = "0x2AE4DC4", VA = "0x2AE4DC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262100", Offset = "0x1262100")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F52")]
			[Address(RVA = "0x2AE4DCC", Offset = "0x2AE4DCC", VA = "0x2AE4DCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262110", Offset = "0x1262110")]
			private set
			{
			}
		}

		[Token(Token = "0x17000083")]
		public RaycastHit rootHit
		{
			[Token(Token = "0x6000F53")]
			[Address(RVA = "0x2AE4DD4", Offset = "0x2AE4DD4", VA = "0x2AE4DD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262120", Offset = "0x1262120")]
			get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x6000F54")]
			[Address(RVA = "0x2AE4DEC", Offset = "0x2AE4DEC", VA = "0x2AE4DEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262130", Offset = "0x1262130")]
			private set
			{
			}
		}

		[Token(Token = "0x17000084")]
		public bool rootGrounded
		{
			[Token(Token = "0x6000F55")]
			[Address(RVA = "0x2AE4E0C", Offset = "0x2AE4E0C", VA = "0x2AE4E0C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000085")]
		public Vector3 up
		{
			[Token(Token = "0x6000F5D")]
			[Address(RVA = "0x2ADF01C", Offset = "0x2ADF01C", VA = "0x2ADF01C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000086")]
		private bool useRootRotation
		{
			[Token(Token = "0x6000F60")]
			[Address(RVA = "0x2AE615C", Offset = "0x2AE615C", VA = "0x2AE615C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0x2AE4E60", Offset = "0x2AE4E60", VA = "0x2AE4E60")]
		public RaycastHit GetRootHit(float maxDistanceMlp = 10f)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0x2AE5240", Offset = "0x2AE5240", VA = "0x2AE5240")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0x2ADE488", Offset = "0x2ADE488", VA = "0x2ADE488")]
		public void Initiate(Transform root, Transform[] feet)
		{
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0x2ADECE0", Offset = "0x2ADECE0", VA = "0x2ADECE0")]
		public void Update()
		{
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0x2AE0C50", Offset = "0x2AE0C50", VA = "0x2AE0C50")]
		public Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0x2ADDF64", Offset = "0x2ADDF64", VA = "0x2ADDF64")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0x2AE5504", Offset = "0x2AE5504", VA = "0x2AE5504")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0x2AE622C", Offset = "0x2AE622C", VA = "0x2AE622C")]
		public float GetVerticalOffset(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0x2AE6394", Offset = "0x2AE6394", VA = "0x2AE6394")]
		public Vector3 Flatten(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0x2AE6498", Offset = "0x2AE6498", VA = "0x2AE6498")]
		public Vector3 GetFootCenterOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0x2ADDBA0", Offset = "0x2ADDBA0", VA = "0x2ADDBA0")]
		public Grounding()
		{
		}
	}
	[Token(Token = "0x2000224")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x12507BC", Offset = "0x12507BC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12507BC", Offset = "0x12507BC")]
	public class AimIK : IK
	{
		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverAim solver;

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0x2313B20", Offset = "0x2313B20", VA = "0x2313B20", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262140", Offset = "0x1262140")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0x2313B6C", Offset = "0x2313B6C", VA = "0x2313B6C", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262178", Offset = "0x1262178")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0x2313BB8", Offset = "0x2313BB8", VA = "0x2313BB8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12621B0", Offset = "0x12621B0")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0x2313C04", Offset = "0x2313C04", VA = "0x2313C04")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12621E8", Offset = "0x12621E8")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0x2313C50", Offset = "0x2313C50", VA = "0x2313C50")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262220", Offset = "0x1262220")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0x2313C9C", Offset = "0x2313C9C", VA = "0x2313C9C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0x2313CA4", Offset = "0x2313CA4", VA = "0x2313CA4")]
		public AimIK()
		{
		}
	}
	[Token(Token = "0x2000225")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x125081C", Offset = "0x125081C")]
	public class ArmIK : IK
	{
		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverArm solver;

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0x23183AC", Offset = "0x23183AC", VA = "0x23183AC", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262258", Offset = "0x1262258")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0x2318418", Offset = "0x2318418", VA = "0x2318418", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262290", Offset = "0x1262290")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0x2318484", Offset = "0x2318484", VA = "0x2318484")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12622C8", Offset = "0x12622C8")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0x23184D0", Offset = "0x23184D0", VA = "0x23184D0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262300", Offset = "0x1262300")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0x231851C", Offset = "0x231851C", VA = "0x231851C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0x2318524", Offset = "0x2318524", VA = "0x2318524")]
		public ArmIK()
		{
		}
	}
	[Token(Token = "0x2000226")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x1250854", Offset = "0x1250854")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250854", Offset = "0x1250854")]
	public class CCDIK : IK
	{
		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverCCD solver;

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0x2319CB0", Offset = "0x2319CB0", VA = "0x2319CB0", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262338", Offset = "0x1262338")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0x2319CFC", Offset = "0x2319CFC", VA = "0x2319CFC", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262370", Offset = "0x1262370")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0x2319D48", Offset = "0x2319D48", VA = "0x2319D48")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12623A8", Offset = "0x12623A8")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0x2319D94", Offset = "0x2319D94", VA = "0x2319D94")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12623E0", Offset = "0x12623E0")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0x2319DE0", Offset = "0x2319DE0", VA = "0x2319DE0", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0x2319DE8", Offset = "0x2319DE8", VA = "0x2319DE8")]
		public CCDIK()
		{
		}
	}
	[Token(Token = "0x2000227")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x12508B4", Offset = "0x12508B4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12508B4", Offset = "0x12508B4")]
	public class FABRIK : IK
	{
		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIK solver;

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0x231D39C", Offset = "0x231D39C", VA = "0x231D39C", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262418", Offset = "0x1262418")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0x231D3E8", Offset = "0x231D3E8", VA = "0x231D3E8", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262450", Offset = "0x1262450")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0x231D434", Offset = "0x231D434", VA = "0x231D434")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262488", Offset = "0x1262488")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0x231D480", Offset = "0x231D480", VA = "0x231D480")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12624C0", Offset = "0x12624C0")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0x231D4CC", Offset = "0x231D4CC", VA = "0x231D4CC", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0x231D4D4", Offset = "0x231D4D4", VA = "0x231D4D4")]
		public FABRIK()
		{
		}
	}
	[Token(Token = "0x2000228")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x1250914", Offset = "0x1250914")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250914", Offset = "0x1250914")]
	public class FABRIKRoot : IK
	{
		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIKRoot solver;

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0x231DB78", Offset = "0x231DB78", VA = "0x231DB78", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12624F8", Offset = "0x12624F8")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0x231DBC4", Offset = "0x231DBC4", VA = "0x231DBC4", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262530", Offset = "0x1262530")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0x231DC10", Offset = "0x231DC10", VA = "0x231DC10")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262568", Offset = "0x1262568")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0x231DC5C", Offset = "0x231DC5C", VA = "0x231DC5C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12625A0", Offset = "0x12625A0")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0x231DCA8", Offset = "0x231DCA8", VA = "0x231DCA8", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0x231DCB0", Offset = "0x231DCB0", VA = "0x231DCB0")]
		public FABRIKRoot()
		{
		}
	}
	[Token(Token = "0x2000229")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x1250974", Offset = "0x1250974")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250974", Offset = "0x1250974")]
	public class FullBodyBipedIK : IK
	{
		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverFullBodyBiped solver;

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0x2ADC54C", Offset = "0x2ADC54C", VA = "0x2ADC54C", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12625D8", Offset = "0x12625D8")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0x2ADC598", Offset = "0x2ADC598", VA = "0x2ADC598", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262610", Offset = "0x1262610")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0x2ADC5E4", Offset = "0x2ADC5E4", VA = "0x2ADC5E4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262648", Offset = "0x1262648")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0x2ADC630", Offset = "0x2ADC630", VA = "0x2ADC630")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262680", Offset = "0x1262680")]
		private void OpenInspectorTutorial()
		{
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0x2ADC67C", Offset = "0x2ADC67C", VA = "0x2ADC67C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12626B8", Offset = "0x12626B8")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0x2ADC6C8", Offset = "0x2ADC6C8", VA = "0x2ADC6C8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12626F0", Offset = "0x12626F0")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0x2ADC714", Offset = "0x2ADC714", VA = "0x2ADC714")]
		public void SetReferences(BipedReferences references, Transform rootNode)
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0x2ADC758", Offset = "0x2ADC758", VA = "0x2ADC758", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0x2ADC760", Offset = "0x2ADC760", VA = "0x2ADC760")]
		public bool ReferencesError(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0x2ADC928", Offset = "0x2ADC928", VA = "0x2ADC928")]
		public bool ReferencesWarning(ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0x2ADCC88", Offset = "0x2ADCC88", VA = "0x2ADCC88")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262728", Offset = "0x1262728")]
		private void Reinitiate()
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0x2ADCCA8", Offset = "0x2ADCCA8", VA = "0x2ADCCA8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262760", Offset = "0x1262760")]
		private void AutoDetectReferences()
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0x2ADCD9C", Offset = "0x2ADCD9C", VA = "0x2ADCD9C")]
		public FullBodyBipedIK()
		{
		}
	}
	[Token(Token = "0x200022A")]
	public abstract class IK : SolverManager
	{
		[Token(Token = "0x6000F8F")]
		public abstract IKSolver GetIKSolver();

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0x2AEA1E4", Offset = "0x2AEA1E4", VA = "0x2AEA1E4", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0x2AEA268", Offset = "0x2AEA268", VA = "0x2AEA268", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0x2AEA2D8", Offset = "0x2AEA2D8", VA = "0x2AEA2D8", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000F93")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x6000F94")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0x2ADCE3C", Offset = "0x2ADCE3C", VA = "0x2ADCE3C")]
		protected IK()
		{
		}
	}
	[Token(Token = "0x200022B")]
	public class IKExecutionOrder : MonoBehaviour
	{
		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256DE0", Offset = "0x1256DE0")]
		public IK[] IKComponents;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256E18", Offset = "0x1256E18")]
		public Animator animator;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool fixedFrame;

		[Token(Token = "0x17000087")]
		private bool animatePhysics
		{
			[Token(Token = "0x6000F96")]
			[Address(RVA = "0x2AED388", Offset = "0x2AED388", VA = "0x2AED388")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0x2AED424", Offset = "0x2AED424", VA = "0x2AED424")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0x2AED494", Offset = "0x2AED494", VA = "0x2AED494")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0x2AED550", Offset = "0x2AED550", VA = "0x2AED550")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0x2AED58C", Offset = "0x2AED58C", VA = "0x2AED58C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0x2AED4C8", Offset = "0x2AED4C8", VA = "0x2AED4C8")]
		private void FixTransforms()
		{
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0x2AED618", Offset = "0x2AED618", VA = "0x2AED618")]
		public IKExecutionOrder()
		{
		}
	}
	[Token(Token = "0x200022C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12509D4", Offset = "0x12509D4")]
	public class LegIK : IK
	{
		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLeg solver;

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0x29014CC", Offset = "0x29014CC", VA = "0x29014CC", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262798", Offset = "0x1262798")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0x2901538", Offset = "0x2901538", VA = "0x2901538", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12627D0", Offset = "0x12627D0")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0x29015A4", Offset = "0x29015A4", VA = "0x29015A4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262808", Offset = "0x1262808")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0x29015F0", Offset = "0x29015F0", VA = "0x29015F0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262840", Offset = "0x1262840")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0x290163C", Offset = "0x290163C", VA = "0x290163C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0x2901644", Offset = "0x2901644", VA = "0x2901644")]
		public LegIK()
		{
		}
	}
	[Token(Token = "0x200022D")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x1250A0C", Offset = "0x1250A0C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250A0C", Offset = "0x1250A0C")]
	public class LimbIK : IK
	{
		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLimb solver;

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0x29016B8", Offset = "0x29016B8", VA = "0x29016B8", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262878", Offset = "0x1262878")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0x2901704", Offset = "0x2901704", VA = "0x2901704", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12628B0", Offset = "0x12628B0")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0x2901750", Offset = "0x2901750", VA = "0x2901750")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12628E8", Offset = "0x12628E8")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0x290179C", Offset = "0x290179C", VA = "0x290179C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262920", Offset = "0x1262920")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0x29017E8", Offset = "0x29017E8", VA = "0x29017E8", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0x29017F0", Offset = "0x29017F0", VA = "0x29017F0")]
		public LimbIK()
		{
		}
	}
	[Token(Token = "0x200022E")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x1250A6C", Offset = "0x1250A6C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250A6C", Offset = "0x1250A6C")]
	public class LookAtIK : IK
	{
		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt solver;

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0x29026A8", Offset = "0x29026A8", VA = "0x29026A8", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262958", Offset = "0x1262958")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0x29026F4", Offset = "0x29026F4", VA = "0x29026F4", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262990", Offset = "0x1262990")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0x2902740", Offset = "0x2902740", VA = "0x2902740")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12629C8", Offset = "0x12629C8")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0x290278C", Offset = "0x290278C", VA = "0x290278C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262A00", Offset = "0x1262A00")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x29027D8", Offset = "0x29027D8", VA = "0x29027D8", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0x29027E0", Offset = "0x29027E0", VA = "0x29027E0")]
		public LookAtIK()
		{
		}
	}
	[Token(Token = "0x200022F")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x1250ACC", Offset = "0x1250ACC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250ACC", Offset = "0x1250ACC")]
	public class TrigonometricIK : IK
	{
		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverTrigonometric solver;

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0x23DBD24", Offset = "0x23DBD24", VA = "0x23DBD24", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262A38", Offset = "0x1262A38")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0x23DBD70", Offset = "0x23DBD70", VA = "0x23DBD70", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262A70", Offset = "0x1262A70")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0x23DBDBC", Offset = "0x23DBDBC", VA = "0x23DBDBC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262AA8", Offset = "0x1262AA8")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0x23DBE08", Offset = "0x23DBE08", VA = "0x23DBE08")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262AE0", Offset = "0x1262AE0")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0x23DBE54", Offset = "0x23DBE54", VA = "0x23DBE54", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0x23DBE5C", Offset = "0x23DBE5C", VA = "0x23DBE5C")]
		public TrigonometricIK()
		{
		}
	}
	[Token(Token = "0x2000230")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250B2C", Offset = "0x1250B2C")]
	public class VRIK : IK
	{
		[Serializable]
		[Token(Token = "0x2000377")]
		public class References
		{
			[Token(Token = "0x400145E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform root;

			[Token(Token = "0x400145F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform pelvis;

			[Token(Token = "0x4001460")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spine;

			[Token(Token = "0x4001461")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D5F4", Offset = "0x125D5F4")]
			public Transform chest;

			[Token(Token = "0x4001462")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D62C", Offset = "0x125D62C")]
			public Transform neck;

			[Token(Token = "0x4001463")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform head;

			[Token(Token = "0x4001464")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D664", Offset = "0x125D664")]
			public Transform leftShoulder;

			[Token(Token = "0x4001465")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Transform leftUpperArm;

			[Token(Token = "0x4001466")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Transform leftForearm;

			[Token(Token = "0x4001467")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Transform leftHand;

			[Token(Token = "0x4001468")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D69C", Offset = "0x125D69C")]
			public Transform rightShoulder;

			[Token(Token = "0x4001469")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Transform rightUpperArm;

			[Token(Token = "0x400146A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Transform rightForearm;

			[Token(Token = "0x400146B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Transform rightHand;

			[Token(Token = "0x400146C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D6D4", Offset = "0x125D6D4")]
			public Transform leftThigh;

			[Token(Token = "0x400146D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D70C", Offset = "0x125D70C")]
			public Transform leftCalf;

			[Token(Token = "0x400146E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D744", Offset = "0x125D744")]
			public Transform leftFoot;

			[Token(Token = "0x400146F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D77C", Offset = "0x125D77C")]
			public Transform leftToes;

			[Token(Token = "0x4001470")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D7B4", Offset = "0x125D7B4")]
			public Transform rightThigh;

			[Token(Token = "0x4001471")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D7EC", Offset = "0x125D7EC")]
			public Transform rightCalf;

			[Token(Token = "0x4001472")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D824", Offset = "0x125D824")]
			public Transform rightFoot;

			[Token(Token = "0x4001473")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D85C", Offset = "0x125D85C")]
			public Transform rightToes;

			[Token(Token = "0x1700016D")]
			public bool isFilled
			{
				[Token(Token = "0x6001765")]
				[Address(RVA = "0x23DD514", Offset = "0x23DD514", VA = "0x23DD514")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700016E")]
			public bool isEmpty
			{
				[Token(Token = "0x6001766")]
				[Address(RVA = "0x23DD098", Offset = "0x23DD098", VA = "0x23DD098")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001764")]
			[Address(RVA = "0x23DDBB0", Offset = "0x23DDBB0", VA = "0x23DDBB0")]
			public Transform[] GetTransforms()
			{
				return null;
			}

			[Token(Token = "0x6001767")]
			[Address(RVA = "0x23DCB74", Offset = "0x23DCB74", VA = "0x23DCB74")]
			public static bool AutoDetectReferences(Transform root, out References references)
			{
				return default(bool);
			}

			[Token(Token = "0x6001768")]
			[Address(RVA = "0x23DDBA8", Offset = "0x23DDBA8", VA = "0x23DDBA8")]
			public References()
			{
			}
		}

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "ContextMenuItemAttribute", RVA = "0x1256E50", Offset = "0x1256E50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256E50", Offset = "0x1256E50")]
		public References references;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256ECC", Offset = "0x1256ECC")]
		public IKSolverVR solver;

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0x23DCA28", Offset = "0x23DCA28", VA = "0x23DCA28", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262B18", Offset = "0x1262B18")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0x23DCA94", Offset = "0x23DCA94", VA = "0x23DCA94", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262B50", Offset = "0x1262B50")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0x23DCB00", Offset = "0x23DCB00", VA = "0x23DCB00")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262B88", Offset = "0x1262B88")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0x23DCB4C", Offset = "0x23DCB4C", VA = "0x23DCB4C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262BC0", Offset = "0x1262BC0")]
		public void AutoDetectReferences()
		{
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0x23DCFF4", Offset = "0x23DCFF4", VA = "0x23DCFF4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262BF8", Offset = "0x1262BF8")]
		public void GuessHandOrientations()
		{
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0x23DD01C", Offset = "0x23DD01C", VA = "0x23DD01C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0x23DD024", Offset = "0x23DD024", VA = "0x23DD024", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0x23DD990", Offset = "0x23DD990", VA = "0x23DD990", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x23DDB08", Offset = "0x23DDB08", VA = "0x23DDB08")]
		public VRIK()
		{
		}
	}
	[Token(Token = "0x2000231")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1250B64", Offset = "0x1250B64")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250B64", Offset = "0x1250B64")]
	public class AimIKJ : MonoBehaviour
	{
		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256F04", Offset = "0x1256F04")]
		public Transform target;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256F3C", Offset = "0x1256F3C")]
		public Transform poleTarget;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256F74", Offset = "0x1256F74")]
		public Transform aimTransform;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x1256FAC", Offset = "0x1256FAC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256FAC", Offset = "0x1256FAC")]
		public float axisX;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1256FFC", Offset = "0x1256FFC")]
		public float axisY;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257034", Offset = "0x1257034")]
		public float axisZ;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x125706C", Offset = "0x125706C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125706C", Offset = "0x125706C")]
		public float poleAxisX;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12570BC", Offset = "0x12570BC")]
		public float poleAxisY;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12570F4", Offset = "0x12570F4")]
		public float poleAxisZ;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x125712C", Offset = "0x125712C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125712C", Offset = "0x125712C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125712C", Offset = "0x125712C")]
		public float weight;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257194", Offset = "0x1257194")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257194", Offset = "0x1257194")]
		public float poleWeight;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12571E8", Offset = "0x12571E8")]
		public float tolerance;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257220", Offset = "0x1257220")]
		public int maxIterations;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257258", Offset = "0x1257258")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257258", Offset = "0x1257258")]
		public float clampWeight;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12572AC", Offset = "0x12572AC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12572AC", Offset = "0x12572AC")]
		public int clampSmoothing;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257300", Offset = "0x1257300")]
		public bool useRotationLimits;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257338", Offset = "0x1257338")]
		public bool XY;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x1257370", Offset = "0x1257370")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257370", Offset = "0x1257370")]
		public Transform[] bones;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12573C0", Offset = "0x12573C0")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator animator;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayableGraph graph;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AnimationScriptPlayable IKPlayable;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AimIKJob job;

		[Token(Token = "0x17000088")]
		public bool initiated
		{
			[Token(Token = "0x6000FBE")]
			[Address(RVA = "0x2313D18", Offset = "0x2313D18", VA = "0x2313D18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262C30", Offset = "0x1262C30")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FBF")]
			[Address(RVA = "0x2313D20", Offset = "0x2313D20", VA = "0x2313D20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262C40", Offset = "0x1262C40")]
			private set
			{
			}
		}

		[Token(Token = "0x17000089")]
		public Vector3 axis
		{
			[Token(Token = "0x6000FC0")]
			[Address(RVA = "0x2313D2C", Offset = "0x2313D2C", VA = "0x2313D2C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000FC1")]
			[Address(RVA = "0x2313D68", Offset = "0x2313D68", VA = "0x2313D68")]
			set
			{
			}
		}

		[Token(Token = "0x1700008A")]
		public Vector3 poleAxis
		{
			[Token(Token = "0x6000FC2")]
			[Address(RVA = "0x2313D74", Offset = "0x2313D74", VA = "0x2313D74")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000FC3")]
			[Address(RVA = "0x2313DB0", Offset = "0x2313DB0", VA = "0x2313DB0")]
			set
			{
			}
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0x2313DBC", Offset = "0x2313DBC", VA = "0x2313DBC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0x2314C04", Offset = "0x2314C04", VA = "0x2314C04")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0x2314FEC", Offset = "0x2314FEC", VA = "0x2314FEC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0x23150EC", Offset = "0x23150EC", VA = "0x23150EC")]
		public AimIKJ()
		{
		}
	}
	[Token(Token = "0x2000232")]
	public struct AimIKJob : IAnimationJob
	{
		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public TransformSceneHandle _target;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public TransformSceneHandle _poleTarget;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TransformStreamHandle _transform;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public PropertySceneHandle _IKPositionWeight;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public PropertySceneHandle _poleWeight;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public PropertySceneHandle _axisX;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public PropertySceneHandle _axisY;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public PropertySceneHandle _axisZ;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public PropertySceneHandle _poleAxisX;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public PropertySceneHandle _poleAxisY;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public PropertySceneHandle _poleAxisZ;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public PropertySceneHandle _clampWeight;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public PropertySceneHandle _clampSmoothing;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public PropertySceneHandle _maxIterations;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public PropertySceneHandle _tolerance;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public PropertySceneHandle _XY;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public PropertySceneHandle _useRotationLimits;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private NativeArray<TransformStreamHandle> bones;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private NativeArray<PropertySceneHandle> boneWeights;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 lastLocalDirection;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float step;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private NativeArray<Quaternion> limitDefaultLocalRotationArray;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private NativeArray<Vector3> limitAxisArray;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private NativeArray<int> hingeFlags;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private NativeArray<PropertySceneHandle> hingeMinArray;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private NativeArray<PropertySceneHandle> hingeMaxArray;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private NativeArray<PropertySceneHandle> hingeUseLimitsArray;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private NativeArray<Quaternion> hingeLastRotations;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private NativeArray<float> hingeLastAngles;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private NativeArray<int> angleFlags;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private NativeArray<Vector3> angleSecondaryAxisArray;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private NativeArray<PropertySceneHandle> angleLimitArray;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private NativeArray<PropertySceneHandle> angleTwistLimitArray;

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0x231453C", Offset = "0x231453C", VA = "0x231453C")]
		public void Setup(Animator animator, Transform[] bones, Transform target, Transform poleTarget, Transform aimTransform)
		{
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x2315188", Offset = "0x2315188", VA = "0x2315188")]
		private void SetUpRotationLimits(Animator animator, Transform[] bones)
		{
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x23157FC", Offset = "0x23157FC", VA = "0x23157FC")]
		private void DisposeRotationLimits()
		{
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0x2315900", Offset = "0x2315900", VA = "0x2315900", Slot = "5")]
		public void ProcessRootMotion(AnimationStream stream)
		{
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x2315904", Offset = "0x2315904", VA = "0x2315904", Slot = "4")]
		public void ProcessAnimation(AnimationStream stream)
		{
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x231593C", Offset = "0x231593C", VA = "0x231593C")]
		private void Update(AnimationStream s)
		{
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x2316A80", Offset = "0x2316A80", VA = "0x2316A80")]
		private void RotateToTarget(AnimationStream s, Vector3 targetPosition, Vector3 polePosition, int i, float weight, float poleWeight, bool XY, bool useRotationLimits, Vector3 axis, Vector3 poleAxis)
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x23167BC", Offset = "0x23167BC", VA = "0x23167BC")]
		public float GetAngle(AnimationStream s, Vector3 axis, Vector3 IKPosition)
		{
			return default(float);
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0x2316484", Offset = "0x2316484", VA = "0x2316484")]
		private Vector3 GetClampedIKPosition(AnimationStream s, float clampWeight, int clampSmoothing, Vector3 IKPosition, Vector3 transformPosition, Vector3 transformAxis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x2316960", Offset = "0x2316960", VA = "0x2316960")]
		private Vector3 GetLocalDirection(AnimationStream s, Vector3 transformAxis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x23178A8", Offset = "0x23178A8", VA = "0x23178A8")]
		private float GetPositionOffset(AnimationStream s, Vector3 localDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x2315080", Offset = "0x2315080", VA = "0x2315080")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x2000233")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1250BEC", Offset = "0x1250BEC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250BEC", Offset = "0x1250BEC")]
	public class CCDIKJ : MonoBehaviour
	{
		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12573D0", Offset = "0x12573D0")]
		public Transform target;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257408", Offset = "0x1257408")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257408", Offset = "0x1257408")]
		public float weight;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125745C", Offset = "0x125745C")]
		public float tolerance;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257494", Offset = "0x1257494")]
		public int maxIterations;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12574CC", Offset = "0x12574CC")]
		public bool useRotationLimits;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257504", Offset = "0x1257504")]
		public bool XY;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125753C", Offset = "0x125753C")]
		public Transform[] bones;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1257574", Offset = "0x1257574")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Animator animator;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PlayableGraph graph;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AnimationScriptPlayable IKPlayable;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CCDIKJob job;

		[Token(Token = "0x1700008B")]
		public bool initiated
		{
			[Token(Token = "0x6000FD4")]
			[Address(RVA = "0x2319E5C", Offset = "0x2319E5C", VA = "0x2319E5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262C50", Offset = "0x1262C50")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FD5")]
			[Address(RVA = "0x2319E64", Offset = "0x2319E64", VA = "0x2319E64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262C60", Offset = "0x1262C60")]
			private set
			{
			}
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0x2319E70", Offset = "0x2319E70", VA = "0x2319E70")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0x231A650", Offset = "0x231A650", VA = "0x231A650")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0x231A7E8", Offset = "0x231A7E8", VA = "0x231A7E8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x231A8FC", Offset = "0x231A8FC", VA = "0x231A8FC")]
		public CCDIKJ()
		{
		}
	}
	[Token(Token = "0x2000234")]
	public struct CCDIKJob : IAnimationJob
	{
		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public TransformSceneHandle _target;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PropertySceneHandle _IKPositionWeight;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PropertySceneHandle _maxIterations;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PropertySceneHandle _tolerance;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PropertySceneHandle _XY;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PropertySceneHandle _useRotationLimits;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private NativeArray<TransformStreamHandle> bones;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private NativeArray<PropertySceneHandle> boneWeights;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private NativeArray<float> boneSqrMags;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float chainSqrMag;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 lastLocalDirection;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private NativeArray<Quaternion> limitDefaultLocalRotationArray;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private NativeArray<Vector3> limitAxisArray;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private NativeArray<int> hingeFlags;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private NativeArray<PropertySceneHandle> hingeMinArray;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private NativeArray<PropertySceneHandle> hingeMaxArray;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private NativeArray<PropertySceneHandle> hingeUseLimitsArray;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private NativeArray<Quaternion> hingeLastRotations;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private NativeArray<float> hingeLastAngles;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private NativeArray<int> angleFlags;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private NativeArray<Vector3> angleSecondaryAxisArray;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private NativeArray<PropertySceneHandle> angleLimitArray;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private NativeArray<PropertySceneHandle> angleTwistLimitArray;

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x231A1F0", Offset = "0x231A1F0", VA = "0x231A1F0")]
		public void Setup(Animator animator, Transform[] bones, Transform target)
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0x231A980", Offset = "0x231A980", VA = "0x231A980")]
		private void SetUpRotationLimits(Animator animator, Transform[] bones)
		{
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0x231AFF4", Offset = "0x231AFF4", VA = "0x231AFF4")]
		private void DisposeRotationLimits()
		{
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0x231B0F8", Offset = "0x231B0F8", VA = "0x231B0F8", Slot = "5")]
		public void ProcessRootMotion(AnimationStream stream)
		{
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0x231B0FC", Offset = "0x231B0FC", VA = "0x231B0FC", Slot = "4")]
		public void ProcessAnimation(AnimationStream stream)
		{
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0x231B134", Offset = "0x231B134", VA = "0x231B134")]
		private void Update(AnimationStream s)
		{
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0x231B65C", Offset = "0x231B65C", VA = "0x231B65C")]
		private void Read(AnimationStream s)
		{
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0x231BE2C", Offset = "0x231BE2C", VA = "0x231BE2C")]
		private void Solve(AnimationStream s, Vector3 targetPosition, bool XY, float weight, int it, bool useRotationLimits)
		{
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0x231BB70", Offset = "0x231BB70", VA = "0x231BB70")]
		private Vector3 GetLocalDirection(AnimationStream s)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0x231BD7C", Offset = "0x231BD7C", VA = "0x231BD7C")]
		private float GetPositionOffset(AnimationStream s, Vector3 localDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0x231B828", Offset = "0x231B828", VA = "0x231B828")]
		private Vector3 GetSingularityOffset(AnimationStream s, Vector3 IKPosition, bool useRotationLimits)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0x231C85C", Offset = "0x231C85C", VA = "0x231C85C")]
		private bool SingularityDetected(AnimationStream s, Vector3 IKPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0x231A87C", Offset = "0x231A87C", VA = "0x231A87C")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x2000235")]
	public class IKJBoneParams : MonoBehaviour
	{
		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257584", Offset = "0x1257584")]
		public float weight;

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0x2AED620", Offset = "0x2AED620", VA = "0x2AED620")]
		public IKJBoneParams()
		{
		}
	}
	[Token(Token = "0x2000236")]
	public static class RotationLimitUtilities
	{
		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0x23DAC78", Offset = "0x23DAC78", VA = "0x23DAC78")]
		public static Quaternion LimitHinge(Quaternion rotation, float min, float max, bool useLimits, Vector3 axis, ref Quaternion lastRotation, ref float lastAngle)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0x23DAF98", Offset = "0x23DAF98", VA = "0x23DAF98")]
		public static Quaternion Limit1DOF(Quaternion rotation, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0x23DB07C", Offset = "0x23DB07C", VA = "0x23DB07C")]
		public static Quaternion LimitAngle(Quaternion rotation, Vector3 axis, Vector3 secondaryAxis, float limit, float twistLimit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0x23DB0E4", Offset = "0x23DB0E4", VA = "0x23DB0E4")]
		public static Quaternion LimitSwing(Quaternion rotation, Vector3 axis, float limit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0x23DB318", Offset = "0x23DB318", VA = "0x23DB318")]
		public static Quaternion LimitTwist(Quaternion rotation, Vector3 axis, Vector3 orthoAxis, float twistLimit)
		{
			return default(Quaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x2000237")]
	public class FABRIKChain
	{
		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FABRIK ik;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125759C", Offset = "0x125759C")]
		public float pull;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12575B4", Offset = "0x12575B4")]
		public float pin;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] children;

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0x231D548", Offset = "0x231D548", VA = "0x231D548")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0x231D61C", Offset = "0x231D61C", VA = "0x231D61C")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0x231D63C", Offset = "0x231D63C", VA = "0x231D63C")]
		public void Stage1(FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0x231DA0C", Offset = "0x231DA0C", VA = "0x231DA0C")]
		public void Stage2(Vector3 rootPosition, FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0x231D710", Offset = "0x231D710", VA = "0x231D710")]
		private Vector3 GetCentroid(FABRIKChain[] chain)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0x231DB04", Offset = "0x231DB04", VA = "0x231DB04")]
		public FABRIKChain()
		{
		}
	}
	[Token(Token = "0x2000238")]
	public class FBBIKArmBending : MonoBehaviour
	{
		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 bendDirectionOffsetLeft;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 bendDirectionOffsetRight;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 characterSpaceBendOffsetLeft;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 characterSpaceBendOffsetRight;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandTargetRotation;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion rightHandTargetRotation;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool initiated;

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0x231DD24", Offset = "0x231DD24", VA = "0x231DD24")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0x231E2A0", Offset = "0x231E2A0", VA = "0x231E2A0")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0x231E460", Offset = "0x231E460", VA = "0x231E460")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0x231E57C", Offset = "0x231E57C", VA = "0x231E57C")]
		public FBBIKArmBending()
		{
		}
	}
	[Token(Token = "0x2000239")]
	public class FBBIKHeadEffector : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000378")]
		public class BendBone
		{
			[Token(Token = "0x4001474")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D894", Offset = "0x125D894")]
			public Transform transform;

			[Token(Token = "0x4001475")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D8CC", Offset = "0x125D8CC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125D8CC", Offset = "0x125D8CC")]
			public float weight;

			[Token(Token = "0x4001476")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6001769")]
			[Address(RVA = "0x232170C", Offset = "0x232170C", VA = "0x232170C")]
			public BendBone()
			{
			}

			[Token(Token = "0x600176A")]
			[Address(RVA = "0x232178C", Offset = "0x232178C", VA = "0x232178C")]
			public BendBone(Transform transform, float weight)
			{
			}

			[Token(Token = "0x600176B")]
			[Address(RVA = "0x231EDCC", Offset = "0x231EDCC", VA = "0x231EDCC")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x600176C")]
			[Address(RVA = "0x231F1D0", Offset = "0x231F1D0", VA = "0x231F1D0")]
			public void FixTransforms()
			{
			}
		}

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12575CC", Offset = "0x12575CC")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x1257604", Offset = "0x1257604")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257604", Offset = "0x1257604")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257604", Offset = "0x1257604")]
		public float positionWeight;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125767C", Offset = "0x125767C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125767C", Offset = "0x125767C")]
		public float bodyWeight;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12576D0", Offset = "0x12576D0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12576D0", Offset = "0x12576D0")]
		public float thighWeight;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257724", Offset = "0x1257724")]
		public bool handsPullBody;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x125775C", Offset = "0x125775C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125775C", Offset = "0x125775C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125775C", Offset = "0x125775C")]
		public float rotationWeight;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12577D4", Offset = "0x12577D4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12577D4", Offset = "0x12577D4")]
		public float bodyClampWeight;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257828", Offset = "0x1257828")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257828", Offset = "0x1257828")]
		public float headClampWeight;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125787C", Offset = "0x125787C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125787C", Offset = "0x125787C")]
		public float bendWeight;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12578D0", Offset = "0x12578D0")]
		public BendBone[] bendBones;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x1257908", Offset = "0x1257908")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257908", Offset = "0x1257908")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257908", Offset = "0x1257908")]
		public float CCDWeight;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257980", Offset = "0x1257980")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257980", Offset = "0x1257980")]
		public float roll;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12579D4", Offset = "0x12579D4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12579D4", Offset = "0x12579D4")]
		public float damper;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257A2C", Offset = "0x1257A2C")]
		public Transform[] CCDBones;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x1257A64", Offset = "0x1257A64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257A64", Offset = "0x1257A64")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257A64", Offset = "0x1257A64")]
		public float postStretchWeight;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257ADC", Offset = "0x1257ADC")]
		public float maxStretch;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257B14", Offset = "0x1257B14")]
		public float stretchDamper;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257B4C", Offset = "0x1257B4C")]
		public bool fixHead;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257B84", Offset = "0x1257B84")]
		public Transform[] stretchBones;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0x1257BBC", Offset = "0x1257BBC")]
		public Vector3 chestDirection;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257BF4", Offset = "0x1257BF4")]
		public float chestDirectionWeight;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] chestBones;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IKSolver.UpdateDelegate OnPostHeadEffectorFK;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 offset;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 headToBody;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 shoulderCenterToHead;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 headToLeftThigh;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 headToRightThigh;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 leftShoulderPos;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 rightShoulderPos;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float shoulderDist;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float leftShoulderDist;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float rightShoulderDist;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion chestRotation;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion headRotationRelativeToRoot;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Quaternion[] ccdDefaultLocalRotations;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 headLocalPosition;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private Quaternion headLocalRotation;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3[] stretchLocalPositions;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Quaternion[] stretchLocalRotations;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3[] chestLocalPositions;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Quaternion[] chestLocalRotations;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int bendBonesCount;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int ccdBonesCount;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private int stretchBonesCount;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private int chestBonesCount;

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0x231E584", Offset = "0x231E584", VA = "0x231E584")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0x231E908", Offset = "0x231E908", VA = "0x231E908")]
		private void OnStoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0x231EE04", Offset = "0x231EE04", VA = "0x231EE04")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0x231F1F8", Offset = "0x231F1F8", VA = "0x231F1F8")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0x231FB70", Offset = "0x231FB70", VA = "0x231FB70")]
		private void SpineBend()
		{
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0x231FEBC", Offset = "0x231FEBC", VA = "0x231FEBC")]
		private void CCDPass()
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x2320258", Offset = "0x2320258", VA = "0x2320258")]
		private void Iterate(int iteration)
		{
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0x2320CC4", Offset = "0x2320CC4", VA = "0x2320CC4")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0x231F89C", Offset = "0x231F89C", VA = "0x231F89C")]
		private void ChestDirection()
		{
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0x2320ED4", Offset = "0x2320ED4", VA = "0x2320ED4")]
		private void PostStretching()
		{
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0x2320B80", Offset = "0x2320B80", VA = "0x2320B80")]
		private void LerpSolverPosition(IKEffector effector, Vector3 position, float weight, Vector3 offset)
		{
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0x23209E4", Offset = "0x23209E4", VA = "0x23209E4")]
		private void Solve(ref Vector3 pos1, ref Vector3 pos2, float nominalDistance)
		{
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0x2321240", Offset = "0x2321240", VA = "0x2321240")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0x2321524", Offset = "0x2321524", VA = "0x2321524")]
		public FBBIKHeadEffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200023A")]
	public class FBIKChain
	{
		[Serializable]
		[Token(Token = "0x2000379")]
		public class ChildConstraint
		{
			[Token(Token = "0x4001477")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float pushElasticity;

			[Token(Token = "0x4001478")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pullElasticity;

			[Token(Token = "0x4001479")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private Transform bone1;

			[Token(Token = "0x400147A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private Transform bone2;

			[Token(Token = "0x400147B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125D940", Offset = "0x125D940")]
			private float <nominalDistance>k__BackingField;

			[Token(Token = "0x400147C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125D950", Offset = "0x125D950")]
			private bool <isRigid>k__BackingField;

			[Token(Token = "0x400147D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float crossFade;

			[Token(Token = "0x400147E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float inverseCrossFade;

			[Token(Token = "0x400147F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int chain1Index;

			[Token(Token = "0x4001480")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int chain2Index;

			[Token(Token = "0x1700016F")]
			public float nominalDistance
			{
				[Token(Token = "0x600176D")]
				[Address(RVA = "0x2ADA86C", Offset = "0x2ADA86C", VA = "0x2ADA86C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264C5C", Offset = "0x1264C5C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600176E")]
				[Address(RVA = "0x2ADA874", Offset = "0x2ADA874", VA = "0x2ADA874")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264C6C", Offset = "0x1264C6C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000170")]
			public bool isRigid
			{
				[Token(Token = "0x600176F")]
				[Address(RVA = "0x2ADA87C", Offset = "0x2ADA87C", VA = "0x2ADA87C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264C7C", Offset = "0x1264C7C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001770")]
				[Address(RVA = "0x2ADA884", Offset = "0x2ADA884", VA = "0x2ADA884")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264C8C", Offset = "0x1264C8C")]
				private set
				{
				}
			}

			[Token(Token = "0x6001771")]
			[Address(RVA = "0x2ADA890", Offset = "0x2ADA890", VA = "0x2ADA890")]
			public ChildConstraint(Transform bone1, Transform bone2, float pushElasticity = 0f, float pullElasticity = 0f)
			{
			}

			[Token(Token = "0x6001772")]
			[Address(RVA = "0x2ADA8F8", Offset = "0x2ADA8F8", VA = "0x2ADA8F8")]
			public void Initiate(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6001773")]
			[Address(RVA = "0x2ADA950", Offset = "0x2ADA950", VA = "0x2ADA950")]
			public void OnPreSolve(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6001774")]
			[Address(RVA = "0x2ADAB54", Offset = "0x2ADAB54", VA = "0x2ADAB54")]
			public void Solve(IKSolverFullBody solver)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200037A")]
		public enum Smoothing
		{
			[Token(Token = "0x4001482")]
			None,
			[Token(Token = "0x4001483")]
			Exponential,
			[Token(Token = "0x4001484")]
			Cubic
		}

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257C0C", Offset = "0x1257C0C")]
		public float pin;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257C24", Offset = "0x1257C24")]
		public float pull;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257C3C", Offset = "0x1257C3C")]
		public float push;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257C54", Offset = "0x1257C54")]
		public float pushParent;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257C6C", Offset = "0x1257C6C")]
		public float reach;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Smoothing reachSmoothing;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Smoothing pushSmoothing;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolver.Node[] nodes;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int[] children;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChildConstraint[] childConstraints;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IKConstraintBend bendConstraint;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float rootLength;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool initiated;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float length;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float distance;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IKSolver.Point p;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float reachForce;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pullParentSum;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] crossFades;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sqrMag1;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float sqrMag2;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float sqrMagDif;

		[Token(Token = "0x4000E05")]
		private const float maxLimbLength = 0.99999f;

		[Token(Token = "0x6001005")]
		[Address(RVA = "0x232183C", Offset = "0x232183C", VA = "0x232183C")]
		public FBIKChain()
		{
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0x2321938", Offset = "0x2321938", VA = "0x2321938")]
		public FBIKChain(float pin, float pull, params Transform[] nodeTransforms)
		{
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0x2321A88", Offset = "0x2321A88", VA = "0x2321A88")]
		public void SetNodes(params Transform[] boneTransforms)
		{
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0x2321BBC", Offset = "0x2321BBC", VA = "0x2321BBC")]
		public int GetNodeIndex(Transform boneTransform)
		{
			return default(int);
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0x2321C98", Offset = "0x2321C98", VA = "0x2321C98")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0x2321DA8", Offset = "0x2321DA8", VA = "0x2321DA8")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0x23224C8", Offset = "0x23224C8", VA = "0x23224C8")]
		public void ReadPose(IKSolverFullBody solver, bool fullBody)
		{
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0x2321F48", Offset = "0x2321F48", VA = "0x2321F48")]
		private void CalculateBoneLengths(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0x23229B4", Offset = "0x23229B4", VA = "0x23229B4")]
		public void Reach(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0x2322D58", Offset = "0x2322D58", VA = "0x2322D58")]
		public Vector3 Push(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0x232313C", Offset = "0x232313C", VA = "0x232313C")]
		public void SolveTrigonometric(IKSolverFullBody solver, bool calculateBendDirection = false)
		{
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0x23236C0", Offset = "0x23236C0", VA = "0x23236C0")]
		public void Stage1(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0x2323C94", Offset = "0x2323C94", VA = "0x2323C94")]
		public void Stage2(IKSolverFullBody solver, Vector3 position)
		{
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0x2323F2C", Offset = "0x2323F2C", VA = "0x2323F2C")]
		public void SolveConstraintSystems(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0x2323B8C", Offset = "0x2323B8C", VA = "0x2323B8C")]
		private Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0x23234A8", Offset = "0x23234A8", VA = "0x23234A8")]
		protected Vector3 GetDirToBendPoint(Vector3 direction, Vector3 bendDirection, float directionMagnitude)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0x2323B10", Offset = "0x2323B10", VA = "0x2323B10")]
		private void SolveChildConstraints(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0x2324014", Offset = "0x2324014", VA = "0x2324014")]
		private void SolveLinearConstraint(IKSolver.Node node1, IKSolver.Node node2, float crossFade, float distance)
		{
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0x2323A30", Offset = "0x2323A30", VA = "0x2323A30")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0x2323E14", Offset = "0x2323E14", VA = "0x2323E14")]
		private void BackwardReach(Vector3 position)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200023B")]
	public class IKConstraintBend
	{
		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone1;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone2;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone3;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bendGoal;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 direction;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotationOffset;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257C84", Offset = "0x1257C84")]
		public float weight;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 defaultLocalDirection;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 defaultChildDirection;

		[NonSerialized]
		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float clampF;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int chainIndex1;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int nodeIndex1;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int chainIndex2;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int nodeIndex2;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int chainIndex3;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int nodeIndex3;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1257C9C", Offset = "0x1257C9C")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		private bool limbOrientationsSet;

		[Token(Token = "0x1700008C")]
		public bool initiated
		{
			[Token(Token = "0x600101A")]
			[Address(RVA = "0x2AEA500", Offset = "0x2AEA500", VA = "0x2AEA500")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262C70", Offset = "0x1262C70")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600101B")]
			[Address(RVA = "0x2AEA508", Offset = "0x2AEA508", VA = "0x2AEA508")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262C80", Offset = "0x1262C80")]
			private set
			{
			}
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0x2AEA338", Offset = "0x2AEA338", VA = "0x2AEA338")]
		public bool IsValid(IKSolverFullBody solver, Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0x2AEA514", Offset = "0x2AEA514", VA = "0x2AEA514")]
		public IKConstraintBend()
		{
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0x2AEA598", Offset = "0x2AEA598", VA = "0x2AEA598")]
		public IKConstraintBend(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0x2AEA64C", Offset = "0x2AEA64C", VA = "0x2AEA64C")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x2AEA69C", Offset = "0x2AEA69C", VA = "0x2AEA69C")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0x2AEAB8C", Offset = "0x2AEAB8C", VA = "0x2AEAB8C")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower, Vector3 last)
		{
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0x2AEADC4", Offset = "0x2AEADC4", VA = "0x2AEADC4")]
		public void LimitBend(float solverWeight, float positionWeight)
		{
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0x2AEB260", Offset = "0x2AEB260", VA = "0x2AEB260")]
		public Vector3 GetDir(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0x2AEA94C", Offset = "0x2AEA94C", VA = "0x2AEA94C")]
		private Vector3 OrthoToLimb(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0x2AEAA6C", Offset = "0x2AEAA6C", VA = "0x2AEAA6C")]
		private Vector3 OrthoToBone1(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x200023C")]
	public class IKEffector
	{
		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257CAC", Offset = "0x1257CAC")]
		public float positionWeight;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257CC4", Offset = "0x1257CC4")]
		public float rotationWeight;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 position;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion rotation;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 positionOffset;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1257CDC", Offset = "0x1257CDC")]
		private bool <isEndEffector>k__BackingField;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool effectChildNodes;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257CEC", Offset = "0x1257CEC")]
		public float maintainRelativePositionWeight;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform[] childBones;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform planeBone1;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform planeBone2;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform planeBone3;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Quaternion planeRotationOffset;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float posW;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float rotW;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] localPositions;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool usePlaneNodes;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion animatedPlaneRotation;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 animatedPosition;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool firstUpdate;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int chainIndex;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int nodeIndex;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int plane1ChainIndex;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int plane1NodeIndex;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int plane2ChainIndex;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int plane2NodeIndex;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int plane3ChainIndex;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int plane3NodeIndex;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int[] childChainIndexes;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int[] childNodeIndexes;

		[Token(Token = "0x1700008D")]
		public bool isEndEffector
		{
			[Token(Token = "0x6001026")]
			[Address(RVA = "0x2AEB8CC", Offset = "0x2AEB8CC", VA = "0x2AEB8CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262C90", Offset = "0x1262C90")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001027")]
			[Address(RVA = "0x2AEB8D4", Offset = "0x2AEB8D4", VA = "0x2AEB8D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262CA0", Offset = "0x1262CA0")]
			private set
			{
			}
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0x2AEB864", Offset = "0x2AEB864", VA = "0x2AEB864")]
		public IKSolver.Node GetNode(IKSolverFullBody solver)
		{
			return null;
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0x2AEB8E0", Offset = "0x2AEB8E0", VA = "0x2AEB8E0")]
		public void PinToBone(float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0x2AEB9B4", Offset = "0x2AEB9B4", VA = "0x2AEB9B4")]
		public IKEffector()
		{
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0x2AEBB20", Offset = "0x2AEBB20", VA = "0x2AEBB20")]
		public IKEffector(Transform bone, Transform[] childBones)
		{
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0x2AEBCC8", Offset = "0x2AEBCC8", VA = "0x2AEBCC8")]
		public bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0x2AEBFC4", Offset = "0x2AEBFC4", VA = "0x2AEBFC4")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0x2AEC29C", Offset = "0x2AEC29C", VA = "0x2AEC29C")]
		public void ResetOffset(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0x2AEC3DC", Offset = "0x2AEC3DC", VA = "0x2AEC3DC")]
		public void SetToTarget()
		{
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0x2AEC488", Offset = "0x2AEC488", VA = "0x2AEC488")]
		public void OnPreSolve(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0x2AECADC", Offset = "0x2AECADC", VA = "0x2AECADC")]
		public void OnPostWrite()
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0x2AECB4C", Offset = "0x2AECB4C", VA = "0x2AECB4C")]
		private Quaternion GetPlaneRotation(IKSolverFullBody solver)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0x2AECD64", Offset = "0x2AECD64", VA = "0x2AECD64")]
		public void Update(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0x2AED0AC", Offset = "0x2AED0AC", VA = "0x2AED0AC")]
		private Vector3 GetPosition(IKSolverFullBody solver, out Quaternion planeRotationOffset)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x200023D")]
	public class IKMapping
	{
		[Serializable]
		[Token(Token = "0x200037B")]
		public class BoneMap
		{
			[Token(Token = "0x4001485")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4001486")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int chainIndex;

			[Token(Token = "0x4001487")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int nodeIndex;

			[Token(Token = "0x4001488")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4001489")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x400148A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 localSwingAxis;

			[Token(Token = "0x400148B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 localTwistAxis;

			[Token(Token = "0x400148C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 planePosition;

			[Token(Token = "0x400148D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 ikPosition;

			[Token(Token = "0x400148E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion defaultLocalTargetRotation;

			[Token(Token = "0x400148F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			private Quaternion maintainRotation;

			[Token(Token = "0x4001490")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public float length;

			[Token(Token = "0x4001491")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Quaternion animatedRotation;

			[Token(Token = "0x4001492")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private Transform planeBone1;

			[Token(Token = "0x4001493")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Transform planeBone2;

			[Token(Token = "0x4001494")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Transform planeBone3;

			[Token(Token = "0x4001495")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private int plane1ChainIndex;

			[Token(Token = "0x4001496")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private int plane1NodeIndex;

			[Token(Token = "0x4001497")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private int plane2ChainIndex;

			[Token(Token = "0x4001498")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			private int plane2NodeIndex;

			[Token(Token = "0x4001499")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private int plane3ChainIndex;

			[Token(Token = "0x400149A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private int plane3NodeIndex;

			[Token(Token = "0x17000171")]
			public Vector3 swingDirection
			{
				[Token(Token = "0x6001776")]
				[Address(RVA = "0x2AED8CC", Offset = "0x2AED8CC", VA = "0x2AED8CC")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000172")]
			public bool isNodeBone
			{
				[Token(Token = "0x6001779")]
				[Address(RVA = "0x2AEDA38", Offset = "0x2AEDA38", VA = "0x2AEDA38")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000173")]
			private Quaternion lastAnimatedTargetRotation
			{
				[Token(Token = "0x600178D")]
				[Address(RVA = "0x2AEE048", Offset = "0x2AEE048", VA = "0x2AEE048")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x6001775")]
			[Address(RVA = "0x2AED87C", Offset = "0x2AED87C", VA = "0x2AED87C")]
			public void Initiate(Transform transform, IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6001777")]
			[Address(RVA = "0x2AED998", Offset = "0x2AED998", VA = "0x2AED998")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6001778")]
			[Address(RVA = "0x2AED9E8", Offset = "0x2AED9E8", VA = "0x2AED9E8")]
			public void FixTransform(bool position)
			{
			}

			[Token(Token = "0x600177A")]
			[Address(RVA = "0x2AEDA48", Offset = "0x2AEDA48", VA = "0x2AEDA48")]
			public void SetLength(BoneMap nextBone)
			{
			}

			[Token(Token = "0x600177B")]
			[Address(RVA = "0x2AEDB30", Offset = "0x2AEDB30", VA = "0x2AEDB30")]
			public void SetLocalSwingAxis(BoneMap swingTarget)
			{
			}

			[Token(Token = "0x600177C")]
			[Address(RVA = "0x2AEDB38", Offset = "0x2AEDB38", VA = "0x2AEDB38")]
			public void SetLocalSwingAxis(BoneMap bone1, BoneMap bone2)
			{
			}

			[Token(Token = "0x600177D")]
			[Address(RVA = "0x2AEDCC8", Offset = "0x2AEDCC8", VA = "0x2AEDCC8")]
			public void SetLocalTwistAxis(Vector3 twistDirection, Vector3 normalDirection)
			{
			}

			[Token(Token = "0x600177E")]
			[Address(RVA = "0x2AEDDD4", Offset = "0x2AEDDD4", VA = "0x2AEDDD4")]
			public void SetPlane(IKSolverFullBody solver, Transform planeBone1, Transform planeBone2, Transform planeBone3)
			{
			}

			[Token(Token = "0x600177F")]
			[Address(RVA = "0x2AEDE98", Offset = "0x2AEDE98", VA = "0x2AEDE98")]
			public void UpdatePlane(bool rotation, bool position)
			{
			}

			[Token(Token = "0x6001780")]
			[Address(RVA = "0x2AEE26C", Offset = "0x2AEE26C", VA = "0x2AEE26C")]
			public void SetIKPosition()
			{
			}

			[Token(Token = "0x6001781")]
			[Address(RVA = "0x2AEE2A4", Offset = "0x2AEE2A4", VA = "0x2AEE2A4")]
			public void MaintainRotation()
			{
			}

			[Token(Token = "0x6001782")]
			[Address(RVA = "0x2AEE2DC", Offset = "0x2AEE2DC", VA = "0x2AEE2DC")]
			public void SetToIKPosition()
			{
			}

			[Token(Token = "0x6001783")]
			[Address(RVA = "0x2AEE304", Offset = "0x2AEE304", VA = "0x2AEE304")]
			public void FixToNode(IKSolverFullBody solver, float weight, [Optional] IKSolver.Node fixNode)
			{
			}

			[Token(Token = "0x6001784")]
			[Address(RVA = "0x2AEE430", Offset = "0x2AEE430", VA = "0x2AEE430")]
			public Vector3 GetPlanePosition(IKSolverFullBody solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001785")]
			[Address(RVA = "0x2AEE778", Offset = "0x2AEE778", VA = "0x2AEE778")]
			public void PositionToPlane(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6001786")]
			[Address(RVA = "0x2AEE7A8", Offset = "0x2AEE7A8", VA = "0x2AEE7A8")]
			public void RotateToPlane(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x6001787")]
			[Address(RVA = "0x2AEE940", Offset = "0x2AEE940", VA = "0x2AEE940")]
			public void Swing(Vector3 swingTarget, float weight)
			{
			}

			[Token(Token = "0x6001788")]
			[Address(RVA = "0x2AEE9B0", Offset = "0x2AEE9B0", VA = "0x2AEE9B0")]
			public void Swing(Vector3 pos1, Vector3 pos2, float weight)
			{
			}

			[Token(Token = "0x6001789")]
			[Address(RVA = "0x2AEEBF4", Offset = "0x2AEEBF4", VA = "0x2AEEBF4")]
			public void Twist(Vector3 twistDirection, Vector3 normalDirection, float weight)
			{
			}

			[Token(Token = "0x600178A")]
			[Address(RVA = "0x2AEEE1C", Offset = "0x2AEEE1C", VA = "0x2AEEE1C")]
			public void RotateToMaintain(float weight)
			{
			}

			[Token(Token = "0x600178B")]
			[Address(RVA = "0x2AEEF34", Offset = "0x2AEEF34", VA = "0x2AEEF34")]
			public void RotateToEffector(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x600178C")]
			[Address(RVA = "0x2AEE574", Offset = "0x2AEE574", VA = "0x2AEE574")]
			private Quaternion GetTargetRotation(IKSolverFullBody solver)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x600178E")]
			[Address(RVA = "0x2AEF0D0", Offset = "0x2AEF0D0", VA = "0x2AEF0D0")]
			public BoneMap()
			{
			}
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0x2AED630", Offset = "0x2AED630", VA = "0x2AED630", Slot = "4")]
		public virtual bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0x2AED638", Offset = "0x2AED638", VA = "0x2AED638", Slot = "5")]
		public virtual void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0x2AED63C", Offset = "0x2AED63C", VA = "0x2AED63C")]
		protected bool BoneIsValid(Transform bone, IKSolver solver, ref string message, [Optional] Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0x2AED76C", Offset = "0x2AED76C", VA = "0x2AED76C")]
		protected Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0x2AED874", Offset = "0x2AED874", VA = "0x2AED874")]
		public IKMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200023E")]
	public class IKMappingBone : IKMapping
	{
		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257D04", Offset = "0x1257D04")]
		public float maintainRotationWeight;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoneMap boneMap;

		[Token(Token = "0x6001039")]
		[Address(RVA = "0x2AEF0EC", Offset = "0x2AEF0EC", VA = "0x2AEF0EC", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0x2AEF198", Offset = "0x2AEF198", VA = "0x2AEF198")]
		public IKMappingBone()
		{
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0x2AEF228", Offset = "0x2AEF228", VA = "0x2AEF228")]
		public IKMappingBone(Transform bone)
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0x2AEF2D4", Offset = "0x2AEF2D4", VA = "0x2AEF2D4")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0x2AEF2EC", Offset = "0x2AEF2EC", VA = "0x2AEF2EC")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0x2AEF308", Offset = "0x2AEF308", VA = "0x2AEF308", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0x2AEF3B4", Offset = "0x2AEF3B4", VA = "0x2AEF3B4")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0x2AEF3CC", Offset = "0x2AEF3CC", VA = "0x2AEF3CC")]
		public void WritePose(float solverWeight)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200023F")]
	public class IKMappingLimb : IKMapping
	{
		[Serializable]
		[Token(Token = "0x200037C")]
		public enum BoneMapType
		{
			[Token(Token = "0x400149C")]
			Parent,
			[Token(Token = "0x400149D")]
			Bone1,
			[Token(Token = "0x400149E")]
			Bone2,
			[Token(Token = "0x400149F")]
			Bone3
		}

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform parentBone;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone1;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone2;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bone3;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257D1C", Offset = "0x1257D1C")]
		public float maintainRotationWeight;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257D34", Offset = "0x1257D34")]
		public float weight;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BoneMap boneMapParent;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BoneMap boneMap1;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap boneMap2;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap boneMap3;

		[Token(Token = "0x6001041")]
		[Address(RVA = "0x2AEF3F0", Offset = "0x2AEF3F0", VA = "0x2AEF3F0", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0x2AEF474", Offset = "0x2AEF474", VA = "0x2AEF474")]
		public BoneMap GetBoneMap(BoneMapType boneMap)
		{
			return null;
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0x2AEF548", Offset = "0x2AEF548", VA = "0x2AEF548")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower)
		{
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0x2AEF89C", Offset = "0x2AEF89C", VA = "0x2AEF89C")]
		public IKMappingLimb()
		{
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0x2AEF9CC", Offset = "0x2AEF9CC", VA = "0x2AEF9CC")]
		public IKMappingLimb(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0x2AEFB34", Offset = "0x2AEFB34", VA = "0x2AEFB34")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0x2AEFB98", Offset = "0x2AEFB98", VA = "0x2AEFB98")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0x2AEFC40", Offset = "0x2AEFC40", VA = "0x2AEFC40")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0x2AEFCF8", Offset = "0x2AEFCF8", VA = "0x2AEFCF8", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0x2AEFFC0", Offset = "0x2AEFFC0", VA = "0x2AEFFC0")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0x2AF0078", Offset = "0x2AF0078", VA = "0x2AF0078")]
		public void WritePose(IKSolverFullBody solver, bool fullBody)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000240")]
	public class IKMappingSpine : IKMapping
	{
		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] spineBones;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform leftUpperArmBone;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rightUpperArmBone;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftThighBone;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightThighBone;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257D4C", Offset = "0x1257D4C")]
		public int iterations;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257D64", Offset = "0x1257D64")]
		public float twistWeight;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int rootNodeIndex;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap[] spine;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap leftUpperArm;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap rightUpperArm;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoneMap leftThigh;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BoneMap rightThigh;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useFABRIK;

		[Token(Token = "0x600104C")]
		[Address(RVA = "0x2AF01E4", Offset = "0x2AF01E4", VA = "0x2AF01E4", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0x2AF04DC", Offset = "0x2AF04DC", VA = "0x2AF04DC")]
		public IKMappingSpine()
		{
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0x2AF0634", Offset = "0x2AF0634", VA = "0x2AF0634")]
		public IKMappingSpine(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0x2AF07D4", Offset = "0x2AF07D4", VA = "0x2AF07D4")]
		public void SetBones(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0x2AF0854", Offset = "0x2AF0854", VA = "0x2AF0854")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0x2AF08BC", Offset = "0x2AF08BC", VA = "0x2AF08BC")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0x2AF093C", Offset = "0x2AF093C", VA = "0x2AF093C", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0x2AF1014", Offset = "0x2AF1014", VA = "0x2AF1014")]
		private bool UseFABRIK()
		{
			return default(bool);
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0x2AF104C", Offset = "0x2AF104C", VA = "0x2AF104C")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6001055")]
		[Address(RVA = "0x2AF132C", Offset = "0x2AF132C", VA = "0x2AF132C")]
		public void WritePose(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0x2AF16E0", Offset = "0x2AF16E0", VA = "0x2AF16E0")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0x2AF17CC", Offset = "0x2AF17CC", VA = "0x2AF17CC")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0x2AF1894", Offset = "0x2AF1894", VA = "0x2AF1894")]
		private void MapToSolverPositions(IKSolverFullBody solver)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000241")]
	public abstract class IKSolver
	{
		[Serializable]
		[Token(Token = "0x200037D")]
		public class Point
		{
			[Token(Token = "0x40014A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x40014A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125D960", Offset = "0x125D960")]
			public float weight;

			[Token(Token = "0x40014A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 solverPosition;

			[Token(Token = "0x40014A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Quaternion solverRotation;

			[Token(Token = "0x40014A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x40014A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x600178F")]
			[Address(RVA = "0x2AF33FC", Offset = "0x2AF33FC", VA = "0x2AF33FC")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6001790")]
			[Address(RVA = "0x2AF344C", Offset = "0x2AF344C", VA = "0x2AF344C")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x6001791")]
			[Address(RVA = "0x2AF35D4", Offset = "0x2AF35D4", VA = "0x2AF35D4")]
			public void UpdateSolverPosition()
			{
			}

			[Token(Token = "0x6001792")]
			[Address(RVA = "0x2AF360C", Offset = "0x2AF360C", VA = "0x2AF360C")]
			public void UpdateSolverLocalPosition()
			{
			}

			[Token(Token = "0x6001793")]
			[Address(RVA = "0x2AF3644", Offset = "0x2AF3644", VA = "0x2AF3644")]
			public void UpdateSolverState()
			{
			}

			[Token(Token = "0x6001794")]
			[Address(RVA = "0x2AF3694", Offset = "0x2AF3694", VA = "0x2AF3694")]
			public void UpdateSolverLocalState()
			{
			}

			[Token(Token = "0x6001795")]
			[Address(RVA = "0x2AF2EA4", Offset = "0x2AF2EA4", VA = "0x2AF2EA4")]
			public Point()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200037E")]
		public class Bone : Point
		{
			[Token(Token = "0x40014A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x40014A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float sqrMag;

			[Token(Token = "0x40014A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 axis;

			[Token(Token = "0x40014A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private RotationLimit _rotationLimit;

			[Token(Token = "0x40014AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool isLimited;

			[Token(Token = "0x17000174")]
			public RotationLimit rotationLimit
			{
				[Token(Token = "0x6001796")]
				[Address(RVA = "0x2AF2460", Offset = "0x2AF2460", VA = "0x2AF2460")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001797")]
				[Address(RVA = "0x2AF255C", Offset = "0x2AF255C", VA = "0x2AF255C")]
				set
				{
				}
			}

			[Token(Token = "0x6001798")]
			[Address(RVA = "0x2AF25F0", Offset = "0x2AF25F0", VA = "0x2AF25F0")]
			public void Swing(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6001799")]
			[Address(RVA = "0x2AF28B0", Offset = "0x2AF28B0", VA = "0x2AF28B0")]
			public static void SolverSwing(Bone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x600179A")]
			[Address(RVA = "0x2AF2B90", Offset = "0x2AF2B90", VA = "0x2AF2B90")]
			public void Swing2D(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x600179B")]
			[Address(RVA = "0x2AF2DF8", Offset = "0x2AF2DF8", VA = "0x2AF2DF8")]
			public void SetToSolverPosition()
			{
			}

			[Token(Token = "0x600179C")]
			[Address(RVA = "0x2AF2E20", Offset = "0x2AF2E20", VA = "0x2AF2E20")]
			public Bone()
			{
			}

			[Token(Token = "0x600179D")]
			[Address(RVA = "0x2AF2F24", Offset = "0x2AF2F24", VA = "0x2AF2F24")]
			public Bone(Transform transform)
			{
			}

			[Token(Token = "0x600179E")]
			[Address(RVA = "0x2AF2FC4", Offset = "0x2AF2FC4", VA = "0x2AF2FC4")]
			public Bone(Transform transform, float weight)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200037F")]
		public class Node : Point
		{
			[Token(Token = "0x40014AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x40014AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float effectorPositionWeight;

			[Token(Token = "0x40014AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float effectorRotationWeight;

			[Token(Token = "0x40014AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 offset;

			[Token(Token = "0x600179F")]
			[Address(RVA = "0x2AF3384", Offset = "0x2AF3384", VA = "0x2AF3384")]
			public Node()
			{
			}

			[Token(Token = "0x60017A0")]
			[Address(RVA = "0x2AF3388", Offset = "0x2AF3388", VA = "0x2AF3388")]
			public Node(Transform transform)
			{
			}

			[Token(Token = "0x60017A1")]
			[Address(RVA = "0x2AF33B8", Offset = "0x2AF33B8", VA = "0x2AF33B8")]
			public Node(Transform transform, float weight)
			{
			}
		}

		[Token(Token = "0x2000380")]
		public delegate void UpdateDelegate();

		[Token(Token = "0x2000381")]
		public delegate void IterationDelegate(int i);

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public Vector3 IKPosition;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1257D8C", Offset = "0x1257D8C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257D8C", Offset = "0x1257D8C")]
		public float IKPositionWeight;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1257DE0", Offset = "0x1257DE0")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateDelegate OnPreInitiate;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UpdateDelegate OnPostInitiate;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UpdateDelegate OnPreUpdate;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UpdateDelegate OnPostUpdate;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool firstInitiation;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		protected Transform root;

		[Token(Token = "0x1700008E")]
		public bool initiated
		{
			[Token(Token = "0x6001062")]
			[Address(RVA = "0x2AF1EB0", Offset = "0x2AF1EB0", VA = "0x2AF1EB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262CB0", Offset = "0x1262CB0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001063")]
			[Address(RVA = "0x2AF1EB8", Offset = "0x2AF1EB8", VA = "0x2AF1EB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262CC0", Offset = "0x1262CC0")]
			private set
			{
			}
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0x2AF1B7C", Offset = "0x2AF1B7C", VA = "0x2AF1B7C")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x600105A")]
		public abstract bool IsValid(ref string message);

		[Token(Token = "0x600105B")]
		[Address(RVA = "0x2ADB430", Offset = "0x2ADB430", VA = "0x2ADB430")]
		public void Initiate(Transform root)
		{
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0x2ADBAE0", Offset = "0x2ADBAE0", VA = "0x2ADBAE0")]
		public void Update()
		{
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0x2AF1E04", Offset = "0x2AF1E04", VA = "0x2AF1E04", Slot = "5")]
		public virtual Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0x2AF1E10", Offset = "0x2AF1E10", VA = "0x2AF1E10")]
		public void SetIKPosition(Vector3 position)
		{
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0x2AF1E1C", Offset = "0x2AF1E1C", VA = "0x2AF1E1C")]
		public float GetIKPositionWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0x2AF1E24", Offset = "0x2AF1E24", VA = "0x2AF1E24")]
		public void SetIKPositionWeight(float weight)
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0x2AF1EA8", Offset = "0x2AF1EA8", VA = "0x2AF1EA8")]
		public Transform GetRoot()
		{
			return null;
		}

		[Token(Token = "0x6001064")]
		public abstract Point[] GetPoints();

		[Token(Token = "0x6001065")]
		public abstract Point GetPoint(Transform transform);

		[Token(Token = "0x6001066")]
		public abstract void FixTransforms();

		[Token(Token = "0x6001067")]
		public abstract void StoreDefaultLocalState();

		[Token(Token = "0x6001068")]
		protected abstract void OnInitiate();

		[Token(Token = "0x6001069")]
		protected abstract void OnUpdate();

		[Token(Token = "0x600106A")]
		[Address(RVA = "0x2AF1EC4", Offset = "0x2AF1EC4", VA = "0x2AF1EC4")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0x2AF1EDC", Offset = "0x2AF1EDC", VA = "0x2AF1EDC")]
		public static Transform ContainsDuplicateBone(Bone[] bones)
		{
			return null;
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0x2AF2018", Offset = "0x2AF2018", VA = "0x2AF2018")]
		public static bool HierarchyIsValid(Bone[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0x2AF20C4", Offset = "0x2AF20C4", VA = "0x2AF20C4")]
		protected static float PreSolveBones(ref Bone[] bones)
		{
			return default(float);
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0x2AF2448", Offset = "0x2AF2448", VA = "0x2AF2448")]
		protected IKSolver()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000242")]
	public class IKSolverAim : IKSolverHeuristic
	{
		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform transform;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 axis;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Vector3 poleAxis;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Vector3 polePosition;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257E28", Offset = "0x1257E28")]
		public float poleWeight;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform poleTarget;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257E40", Offset = "0x1257E40")]
		public float clampWeight;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257E58", Offset = "0x1257E58")]
		public int clampSmoothing;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float step;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 clampedIKPosition;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RotationLimit transformLimit;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform lastTransform;

		[Token(Token = "0x1700008F")]
		public Vector3 transformAxis
		{
			[Token(Token = "0x6001070")]
			[Address(RVA = "0x2AF381C", Offset = "0x2AF381C", VA = "0x2AF381C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000090")]
		public Vector3 transformPoleAxis
		{
			[Token(Token = "0x6001071")]
			[Address(RVA = "0x2AF38E8", Offset = "0x2AF38E8", VA = "0x2AF38E8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000091")]
		protected override int minBones
		{
			[Token(Token = "0x6001074")]
			[Address(RVA = "0x2AF4678", Offset = "0x2AF4678", VA = "0x2AF4678", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000092")]
		protected override Vector3 localDirection
		{
			[Token(Token = "0x6001078")]
			[Address(RVA = "0x2AF4C1C", Offset = "0x2AF4C1C", VA = "0x2AF4C1C", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0x2AF371C", Offset = "0x2AF371C", VA = "0x2AF371C")]
		public float GetAngle()
		{
			return default(float);
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0x2AF39B4", Offset = "0x2AF39B4", VA = "0x2AF39B4", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0x2AF3C34", Offset = "0x2AF3C34", VA = "0x2AF3C34", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0x2AF45C4", Offset = "0x2AF45C4", VA = "0x2AF45C4")]
		private void Solve()
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0x2AF41EC", Offset = "0x2AF41EC", VA = "0x2AF41EC")]
		private Vector3 GetClampedIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0x2AF4680", Offset = "0x2AF4680", VA = "0x2AF4680")]
		private void RotateToTarget(Vector3 targetPosition, Bone bone, float weight)
		{
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0x2AF4C90", Offset = "0x2AF4C90", VA = "0x2AF4C90")]
		public IKSolverAim()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000243")]
	public class IKSolverArm : IKSolver
	{
		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257E70", Offset = "0x1257E70")]
		public float IKRotationWeight;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point chest;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point shoulder;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point upperArm;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point forearm;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point hand;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool isLeft;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IKSolverVR.Arm arm;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3[] positions;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion[] rotations;

		[Token(Token = "0x600107A")]
		[Address(RVA = "0x2AF4D28", Offset = "0x2AF4D28", VA = "0x2AF4D28", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0x2AF50E4", Offset = "0x2AF50E4", VA = "0x2AF50E4")]
		public bool SetChain(Transform chest, Transform shoulder, Transform upperArm, Transform forearm, Transform hand, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0x2AF5198", Offset = "0x2AF5198", VA = "0x2AF5198", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0x2AF5330", Offset = "0x2AF5330", VA = "0x2AF5330", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0x2AF54C8", Offset = "0x2AF54C8", VA = "0x2AF54C8", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0x2AF5514", Offset = "0x2AF5514", VA = "0x2AF5514", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0x2AF5574", Offset = "0x2AF5574", VA = "0x2AF5574", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0x2AF58E4", Offset = "0x2AF58E4", VA = "0x2AF58E4", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0x2AF5910", Offset = "0x2AF5910", VA = "0x2AF5910")]
		private void Solve()
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0x2AF55D8", Offset = "0x2AF55D8", VA = "0x2AF55D8")]
		private void Read()
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x2AF597C", Offset = "0x2AF597C", VA = "0x2AF597C")]
		private void Write()
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0x2AF5B08", Offset = "0x2AF5B08", VA = "0x2AF5B08")]
		public IKSolverArm()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000244")]
	public class IKSolverCCD : IKSolverHeuristic
	{
		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x6001086")]
		[Address(RVA = "0x2EC5D98", Offset = "0x2EC5D98", VA = "0x2EC5D98")]
		public void FadeOutBoneWeights()
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0x2EC5E48", Offset = "0x2EC5E48", VA = "0x2EC5E48", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0x2EC6448", Offset = "0x2EC6448", VA = "0x2EC6448", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0x2EC6BA8", Offset = "0x2EC6BA8", VA = "0x2EC6BA8")]
		private void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0x2EC730C", Offset = "0x2EC730C", VA = "0x2EC730C")]
		public IKSolverCCD()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000245")]
	public class IKSolverFABRIK : IKSolverHeuristic
	{
		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool[] limitedBones;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3[] solverLocalPositions;

		[Token(Token = "0x17000093")]
		protected override bool boneLengthCanBeZero
		{
			[Token(Token = "0x6001090")]
			[Address(RVA = "0x2EC85C0", Offset = "0x2EC85C0", VA = "0x2EC85C0", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0x2EC738C", Offset = "0x2EC738C", VA = "0x2EC738C")]
		public void SolveForward(Vector3 position)
		{
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0x2EC7AD0", Offset = "0x2EC7AD0", VA = "0x2EC7AD0")]
		public void SolveBackward(Vector3 position)
		{
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0x2EC7C04", Offset = "0x2EC7C04", VA = "0x2EC7C04", Slot = "5")]
		public override Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0x2EC7C9C", Offset = "0x2EC7C9C", VA = "0x2EC7C9C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0x2EC825C", Offset = "0x2EC825C", VA = "0x2EC825C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0x2EC85C8", Offset = "0x2EC85C8", VA = "0x2EC85C8")]
		private Vector3 SolveJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0x2EC745C", Offset = "0x2EC745C", VA = "0x2EC745C")]
		private void OnPreSolve()
		{
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0x2EC7BB0", Offset = "0x2EC7BB0", VA = "0x2EC7BB0")]
		private void OnPostSolve()
		{
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0x2EC8564", Offset = "0x2EC8564", VA = "0x2EC8564")]
		private void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0x2EC78F8", Offset = "0x2EC78F8", VA = "0x2EC78F8")]
		private void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0x2EC8E10", Offset = "0x2EC8E10", VA = "0x2EC8E10")]
		private void SolverMove(int index, Vector3 offset)
		{
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0x2EC8F20", Offset = "0x2EC8F20", VA = "0x2EC8F20")]
		private void SolverRotate(int index, Quaternion rotation, bool recursive)
		{
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0x2EC904C", Offset = "0x2EC904C", VA = "0x2EC904C")]
		private void SolverRotateChildren(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0x2EC9164", Offset = "0x2EC9164", VA = "0x2EC9164")]
		private void SolverMoveChildrenAroundPoint(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0x2EC7FC4", Offset = "0x2EC7FC4", VA = "0x2EC7FC4")]
		private Quaternion GetParentSolverRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0x2EC8110", Offset = "0x2EC8110", VA = "0x2EC8110")]
		private Vector3 GetParentSolverPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0x2EC9350", Offset = "0x2EC9350", VA = "0x2EC9350")]
		private Quaternion GetLimitedRotation(int index, Quaternion q, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0x2EC8884", Offset = "0x2EC8884", VA = "0x2EC8884")]
		private void LimitForward(int rotateBone, int limitBone)
		{
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0x2EC7BA0", Offset = "0x2EC7BA0", VA = "0x2EC7BA0")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0x2EC9AC0", Offset = "0x2EC9AC0", VA = "0x2EC9AC0")]
		private void BackwardReachUnlimited(Vector3 position)
		{
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0x2EC9528", Offset = "0x2EC9528", VA = "0x2EC9528")]
		private void BackwardReachLimited(Vector3 position)
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0x2EC86E0", Offset = "0x2EC86E0", VA = "0x2EC86E0")]
		private void MapToSolverPositions()
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0x2EC87C0", Offset = "0x2EC87C0", VA = "0x2EC87C0")]
		private void MapToSolverPositionsLimited()
		{
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0x2EC9B8C", Offset = "0x2EC9B8C", VA = "0x2EC9B8C")]
		public IKSolverFABRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000246")]
	public class IKSolverFABRIKRoot : IKSolver
	{
		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int iterations;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257E88", Offset = "0x1257E88")]
		public float rootPin;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FABRIKChain[] chains;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool zeroWeightApplied;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] isRoot;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 rootDefaultPosition;

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0x2EC9C18", Offset = "0x2EC9C18", VA = "0x2EC9C18", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0x2ECA5F0", Offset = "0x2ECA5F0", VA = "0x2ECA5F0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0x2ECA688", Offset = "0x2ECA688", VA = "0x2ECA688", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0x2ECA728", Offset = "0x2ECA728", VA = "0x2ECA728", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0x2ECA838", Offset = "0x2ECA838", VA = "0x2ECA838")]
		private bool IsRoot(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0x2ECA8D4", Offset = "0x2ECA8D4", VA = "0x2ECA8D4", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0x2ECAE3C", Offset = "0x2ECAE3C", VA = "0x2ECAE3C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x2ECB054", Offset = "0x2ECB054", VA = "0x2ECB054", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x2ECAEEC", Offset = "0x2ECAEEC", VA = "0x2ECAEEC")]
		private void AddPointsToArray(ref Point[] array, FABRIKChain chain)
		{
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x2ECAB08", Offset = "0x2ECAB08", VA = "0x2ECAB08")]
		private Vector3 GetCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x2ECB0EC", Offset = "0x2ECB0EC", VA = "0x2ECB0EC")]
		public IKSolverFABRIKRoot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000247")]
	public class IKSolverFullBody : IKSolver
	{
		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257EA0", Offset = "0x1257EA0")]
		public int iterations;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FBIKChain[] chain;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IKEffector[] effectors;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public IKMappingSpine spineMapping;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IKMappingBone[] boneMappings;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public IKMappingLimb[] limbMappings;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool FABRIKPass;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UpdateDelegate OnPreRead;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UpdateDelegate OnPreSolve;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public IterationDelegate OnPostIteration;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UpdateDelegate OnPreBend;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UpdateDelegate OnPostSolve;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UpdateDelegate OnStoreDefaultLocalState;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UpdateDelegate OnFixTransforms;

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x2ECB160", Offset = "0x2ECB160", VA = "0x2ECB160")]
		public IKEffector GetEffector(Transform t)
		{
			return null;
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0x2ECB254", Offset = "0x2ECB254", VA = "0x2ECB254")]
		public FBIKChain GetChain(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x2ECB2B0", Offset = "0x2ECB2B0", VA = "0x2ECB2B0")]
		public int GetChainIndex(Transform transform)
		{
			return default(int);
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x2ECB3E4", Offset = "0x2ECB3E4", VA = "0x2ECB3E4")]
		public Node GetNode(int chainIndex, int nodeIndex)
		{
			return null;
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x2ECB440", Offset = "0x2ECB440", VA = "0x2ECB440")]
		public void GetChainAndNodeIndexes(Transform transform, out int chainIndex, out int nodeIndex)
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0x2ECB4C0", Offset = "0x2ECB4C0", VA = "0x2ECB4C0", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x2ECB660", Offset = "0x2ECB660", VA = "0x2ECB660", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0x2ECB7D4", Offset = "0x2ECB7D4", VA = "0x2ECB7D4", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0x2ECB9DC", Offset = "0x2ECB9DC", VA = "0x2ECB9DC", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0x2ECBAB4", Offset = "0x2ECBAB4", VA = "0x2ECBAB4", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0x2ECBBA0", Offset = "0x2ECBBA0", VA = "0x2ECBBA0", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0x2ECBD14", Offset = "0x2ECBD14", VA = "0x2ECBD14", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x2ECBEDC", Offset = "0x2ECBEDC", VA = "0x2ECBEDC", Slot = "12")]
		protected virtual void ReadPose()
		{
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0x2ECC128", Offset = "0x2ECC128", VA = "0x2ECC128", Slot = "13")]
		protected virtual void Solve()
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0x2ECC404", Offset = "0x2ECC404", VA = "0x2ECC404", Slot = "14")]
		protected virtual void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0x2ECC448", Offset = "0x2ECC448", VA = "0x2ECC448", Slot = "15")]
		protected virtual void WritePose()
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0x2ECC538", Offset = "0x2ECC538", VA = "0x2ECC538")]
		public IKSolverFullBody()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000248")]
	public enum FullBodyBipedEffector
	{
		[Token(Token = "0x4000E8E")]
		Body,
		[Token(Token = "0x4000E8F")]
		LeftShoulder,
		[Token(Token = "0x4000E90")]
		RightShoulder,
		[Token(Token = "0x4000E91")]
		LeftThigh,
		[Token(Token = "0x4000E92")]
		RightThigh,
		[Token(Token = "0x4000E93")]
		LeftHand,
		[Token(Token = "0x4000E94")]
		RightHand,
		[Token(Token = "0x4000E95")]
		LeftFoot,
		[Token(Token = "0x4000E96")]
		RightFoot
	}
	[Serializable]
	[Token(Token = "0x2000249")]
	public enum FullBodyBipedChain
	{
		[Token(Token = "0x4000E98")]
		LeftArm,
		[Token(Token = "0x4000E99")]
		RightArm,
		[Token(Token = "0x4000E9A")]
		LeftLeg,
		[Token(Token = "0x4000E9B")]
		RightLeg
	}
	[Serializable]
	[Token(Token = "0x200024A")]
	public class IKSolverFullBodyBiped : IKSolverFullBody
	{
		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform rootNode;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257EB8", Offset = "0x1257EB8")]
		public float spineStiffness;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257ED0", Offset = "0x1257ED0")]
		public float pullBodyVertical;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257EE8", Offset = "0x1257EE8")]
		public float pullBodyHorizontal;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1257F00", Offset = "0x1257F00")]
		private Vector3 <pullBodyOffset>k__BackingField;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 offset;

		[Token(Token = "0x17000094")]
		public IKEffector bodyEffector
		{
			[Token(Token = "0x60010C0")]
			[Address(RVA = "0x2ECC64C", Offset = "0x2ECC64C", VA = "0x2ECC64C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000095")]
		public IKEffector leftShoulderEffector
		{
			[Token(Token = "0x60010C1")]
			[Address(RVA = "0x2ECC794", Offset = "0x2ECC794", VA = "0x2ECC794")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000096")]
		public IKEffector rightShoulderEffector
		{
			[Token(Token = "0x60010C2")]
			[Address(RVA = "0x2ECC79C", Offset = "0x2ECC79C", VA = "0x2ECC79C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000097")]
		public IKEffector leftThighEffector
		{
			[Token(Token = "0x60010C3")]
			[Address(RVA = "0x2ECC7A4", Offset = "0x2ECC7A4", VA = "0x2ECC7A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000098")]
		public IKEffector rightThighEffector
		{
			[Token(Token = "0x60010C4")]
			[Address(RVA = "0x2ECC7AC", Offset = "0x2ECC7AC", VA = "0x2ECC7AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000099")]
		public IKEffector leftHandEffector
		{
			[Token(Token = "0x60010C5")]
			[Address(RVA = "0x2ECC7B4", Offset = "0x2ECC7B4", VA = "0x2ECC7B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009A")]
		public IKEffector rightHandEffector
		{
			[Token(Token = "0x60010C6")]
			[Address(RVA = "0x2ECC7BC", Offset = "0x2ECC7BC", VA = "0x2ECC7BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009B")]
		public IKEffector leftFootEffector
		{
			[Token(Token = "0x60010C7")]
			[Address(RVA = "0x2ECC7C4", Offset = "0x2ECC7C4", VA = "0x2ECC7C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009C")]
		public IKEffector rightFootEffector
		{
			[Token(Token = "0x60010C8")]
			[Address(RVA = "0x2ECC7CC", Offset = "0x2ECC7CC", VA = "0x2ECC7CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009D")]
		public FBIKChain leftArmChain
		{
			[Token(Token = "0x60010C9")]
			[Address(RVA = "0x2ECC7D4", Offset = "0x2ECC7D4", VA = "0x2ECC7D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009E")]
		public FBIKChain rightArmChain
		{
			[Token(Token = "0x60010CA")]
			[Address(RVA = "0x2ECC80C", Offset = "0x2ECC80C", VA = "0x2ECC80C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009F")]
		public FBIKChain leftLegChain
		{
			[Token(Token = "0x60010CB")]
			[Address(RVA = "0x2ECC844", Offset = "0x2ECC844", VA = "0x2ECC844")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A0")]
		public FBIKChain rightLegChain
		{
			[Token(Token = "0x60010CC")]
			[Address(RVA = "0x2ECC87C", Offset = "0x2ECC87C", VA = "0x2ECC87C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A1")]
		public IKMappingLimb leftArmMapping
		{
			[Token(Token = "0x60010CD")]
			[Address(RVA = "0x2ECC8B4", Offset = "0x2ECC8B4", VA = "0x2ECC8B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A2")]
		public IKMappingLimb rightArmMapping
		{
			[Token(Token = "0x60010CE")]
			[Address(RVA = "0x2ECC8E8", Offset = "0x2ECC8E8", VA = "0x2ECC8E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A3")]
		public IKMappingLimb leftLegMapping
		{
			[Token(Token = "0x60010CF")]
			[Address(RVA = "0x2ECC920", Offset = "0x2ECC920", VA = "0x2ECC920")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A4")]
		public IKMappingLimb rightLegMapping
		{
			[Token(Token = "0x60010D0")]
			[Address(RVA = "0x2ECC958", Offset = "0x2ECC958", VA = "0x2ECC958")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A5")]
		public IKMappingBone headMapping
		{
			[Token(Token = "0x60010D1")]
			[Address(RVA = "0x2ECC990", Offset = "0x2ECC990", VA = "0x2ECC990")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A6")]
		public Vector3 pullBodyOffset
		{
			[Token(Token = "0x60010E1")]
			[Address(RVA = "0x2ECEC1C", Offset = "0x2ECEC1C", VA = "0x2ECEC1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262CD0", Offset = "0x1262CD0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60010E2")]
			[Address(RVA = "0x2ECEC28", Offset = "0x2ECEC28", VA = "0x2ECEC28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262CE0", Offset = "0x1262CE0")]
			private set
			{
			}
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0x2ECC9C4", Offset = "0x2ECC9C4", VA = "0x2ECC9C4")]
		public void SetChainWeights(FullBodyBipedChain c, float pull, float reach = 0f)
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0x2ECCAD0", Offset = "0x2ECCAD0", VA = "0x2ECCAD0")]
		public void SetEffectorWeights(FullBodyBipedEffector effector, float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0x2ECCA18", Offset = "0x2ECCA18", VA = "0x2ECCA18")]
		public FBIKChain GetChain(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0x2ECCBAC", Offset = "0x2ECCBAC", VA = "0x2ECCBAC")]
		public FBIKChain GetChain(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0x2ECC654", Offset = "0x2ECC654", VA = "0x2ECC654")]
		public IKEffector GetEffector(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0x2ECCC7C", Offset = "0x2ECCC7C", VA = "0x2ECCC7C")]
		public IKEffector GetEndEffector(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0x2ECCD34", Offset = "0x2ECCD34", VA = "0x2ECCD34")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0x2ECCDE8", Offset = "0x2ECCDE8", VA = "0x2ECCDE8")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0x2ECCE9C", Offset = "0x2ECCE9C", VA = "0x2ECCE9C")]
		public IKMappingSpine GetSpineMapping()
		{
			return null;
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0x2ECCEA4", Offset = "0x2ECCEA4", VA = "0x2ECCEA4")]
		public IKMappingBone GetHeadMapping()
		{
			return null;
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0x2ECCED8", Offset = "0x2ECCED8", VA = "0x2ECCED8")]
		public IKConstraintBend GetBendConstraint(FullBodyBipedChain limb)
		{
			return null;
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0x2ECCFA0", Offset = "0x2ECCFA0", VA = "0x2ECCFA0", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0x2ECD134", Offset = "0x2ECD134", VA = "0x2ECD134")]
		public void SetToReferences(BipedReferences references, [Optional] Transform rootNode)
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0x2ECE534", Offset = "0x2ECE534", VA = "0x2ECE534")]
		public static Transform DetectRootNodeBone(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0x2ECE9C8", Offset = "0x2ECE9C8", VA = "0x2ECE9C8")]
		public void SetLimbOrientations(BipedLimbOrientations o)
		{
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0x2ECEA28", Offset = "0x2ECEA28", VA = "0x2ECEA28")]
		private void SetLimbOrientation(FullBodyBipedChain chain, BipedLimbOrientations.LimbOrientation limbOrientation)
		{
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0x2ECE848", Offset = "0x2ECE848", VA = "0x2ECE848")]
		private static Transform GetLeftClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0x2ECE908", Offset = "0x2ECE908", VA = "0x2ECE908")]
		private static Transform GetRightClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0x2ECEC34", Offset = "0x2ECEC34", VA = "0x2ECEC34")]
		private static bool Contains(Transform[] array, Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0x2ECED10", Offset = "0x2ECED10", VA = "0x2ECED10", Slot = "12")]
		protected override void ReadPose()
		{
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0x2ECEE58", Offset = "0x2ECEE58", VA = "0x2ECEE58")]
		private void PullBody()
		{
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0x2ECEFE8", Offset = "0x2ECEFE8", VA = "0x2ECEFE8")]
		private Vector3 GetBodyOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0x2ECF1E8", Offset = "0x2ECF1E8", VA = "0x2ECF1E8")]
		private Vector3 GetHandBodyPull(IKEffector effector, FBIKChain arm, Vector3 offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0x2ECF3E8", Offset = "0x2ECF3E8", VA = "0x2ECF3E8", Slot = "14")]
		protected override void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0x2ECF71C", Offset = "0x2ECF71C", VA = "0x2ECF71C", Slot = "15")]
		protected override void WritePose()
		{
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0x2ECF81C", Offset = "0x2ECF81C", VA = "0x2ECF81C")]
		public IKSolverFullBodyBiped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200024B")]
	public class IKSolverHeuristic : IKSolver
	{
		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float tolerance;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int maxIterations;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useRotationLimits;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool XY;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Bone[] bones;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 lastLocalDirection;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float chainLength;

		[Token(Token = "0x170000A7")]
		protected virtual int minBones
		{
			[Token(Token = "0x60010F5")]
			[Address(RVA = "0x2ED00C0", Offset = "0x2ED00C0", VA = "0x2ED00C0", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A8")]
		protected virtual bool boneLengthCanBeZero
		{
			[Token(Token = "0x60010F6")]
			[Address(RVA = "0x2ED00C8", Offset = "0x2ED00C8", VA = "0x2ED00C8", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A9")]
		protected virtual bool allowCommonParent
		{
			[Token(Token = "0x60010F7")]
			[Address(RVA = "0x2ED00D0", Offset = "0x2ED00D0", VA = "0x2ED00D0", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AA")]
		protected virtual Vector3 localDirection
		{
			[Token(Token = "0x60010FB")]
			[Address(RVA = "0x2ED00E0", Offset = "0x2ED00E0", VA = "0x2ED00E0", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000AB")]
		protected float positionOffset
		{
			[Token(Token = "0x60010FC")]
			[Address(RVA = "0x2EC6AE4", Offset = "0x2EC6AE4", VA = "0x2EC6AE4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0x2ECF828", Offset = "0x2ECF828", VA = "0x2ECF828")]
		public bool SetChain(Transform[] hierarchy, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0x2ECF9DC", Offset = "0x2ECF9DC", VA = "0x2ECF9DC")]
		public void AddBone(Transform bone)
		{
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0x2ECFB40", Offset = "0x2ECFB40", VA = "0x2ECFB40", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0x2ECFBAC", Offset = "0x2ECFBAC", VA = "0x2ECFBAC", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0x2ECFC2C", Offset = "0x2ECFC2C", VA = "0x2ECFC2C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0x2ECFFC4", Offset = "0x2ECFFC4", VA = "0x2ECFFC4", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0x2ECFFCC", Offset = "0x2ECFFCC", VA = "0x2ECFFCC", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0x2ED00D8", Offset = "0x2ED00D8", VA = "0x2ED00D8", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x2ED00DC", Offset = "0x2ED00DC", VA = "0x2ED00DC", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x2EC5EC8", Offset = "0x2EC5EC8", VA = "0x2EC5EC8")]
		protected void InitiateBones()
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0x2EC6740", Offset = "0x2EC6740", VA = "0x2EC6740")]
		protected Vector3 GetSingularityOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0x2ED0214", Offset = "0x2ED0214", VA = "0x2ED0214")]
		private bool SingularityDetected()
		{
			return default(bool);
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0x2EC7310", Offset = "0x2EC7310", VA = "0x2EC7310")]
		public IKSolverHeuristic()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200024C")]
	public class IKSolverLeg : IKSolver
	{
		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257F10", Offset = "0x1257F10")]
		public float IKRotationWeight;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point pelvis;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point thigh;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point calf;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point foot;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point toe;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public IKSolverVR.Leg leg;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 heelOffset;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] positions;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion[] rotations;

		[Token(Token = "0x6001100")]
		[Address(RVA = "0x2ED04C8", Offset = "0x2ED04C8", VA = "0x2ED04C8", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0x2ED0884", Offset = "0x2ED0884", VA = "0x2ED0884")]
		public bool SetChain(Transform pelvis, Transform thigh, Transform calf, Transform foot, Transform toe, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0x2ED093C", Offset = "0x2ED093C", VA = "0x2ED093C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0x2ED0AD4", Offset = "0x2ED0AD4", VA = "0x2ED0AD4", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0x2ED0C6C", Offset = "0x2ED0C6C", VA = "0x2ED0C6C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0x2ED0CC8", Offset = "0x2ED0CC8", VA = "0x2ED0CC8", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0x2ED0D38", Offset = "0x2ED0D38", VA = "0x2ED0D38", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0x2ED10A4", Offset = "0x2ED10A4", VA = "0x2ED10A4", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0x2ED10D0", Offset = "0x2ED10D0", VA = "0x2ED10D0")]
		private void Solve()
		{
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0x2ED0D9C", Offset = "0x2ED0D9C", VA = "0x2ED0D9C")]
		private void Read()
		{
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0x2ED11D8", Offset = "0x2ED11D8", VA = "0x2ED11D8")]
		private void Write()
		{
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0x2ED1438", Offset = "0x2ED1438", VA = "0x2ED1438")]
		public IKSolverLeg()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200024D")]
	public class IKSolverLimb : IKSolverTrigonometric
	{
		[Serializable]
		[Token(Token = "0x2000382")]
		public enum BendModifier
		{
			[Token(Token = "0x40014B0")]
			Animation,
			[Token(Token = "0x40014B1")]
			Target,
			[Token(Token = "0x40014B2")]
			Parent,
			[Token(Token = "0x40014B3")]
			Arm,
			[Token(Token = "0x40014B4")]
			Goal
		}

		[Serializable]
		[Token(Token = "0x2000383")]
		public struct AxisDirection
		{
			[Token(Token = "0x40014B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 direction;

			[Token(Token = "0x40014B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 axis;

			[Token(Token = "0x40014B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float dot;

			[Token(Token = "0x60017AA")]
			[Address(RVA = "0x2ED2D64", Offset = "0x2ED2D64", VA = "0x2ED2D64")]
			public AxisDirection(Vector3 direction, Vector3 axis)
			{
			}
		}

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AvatarIKGoal goal;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public BendModifier bendModifier;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257F28", Offset = "0x1257F28")]
		public float maintainRotationWeight;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257F40", Offset = "0x1257F40")]
		public float bendModifierWeight;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform bendGoal;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool maintainBendFor1Frame;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool maintainRotationFor1Frame;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion defaultRootRotation;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion parentDefaultRotation;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion bone3RotationBeforeSolve;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion maintainRotation;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Quaternion bone3DefaultRotation;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 _bendNormal;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 animationNormal;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AxisDirection[] axisDirectionsLeft;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private AxisDirection[] axisDirectionsRight;

		[Token(Token = "0x170000AC")]
		private AxisDirection[] axisDirections
		{
			[Token(Token = "0x6001113")]
			[Address(RVA = "0x2ED2D48", Offset = "0x2ED2D48", VA = "0x2ED2D48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0x2ED15F0", Offset = "0x2ED15F0", VA = "0x2ED15F0")]
		public void MaintainRotation()
		{
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0x2ED1640", Offset = "0x2ED1640", VA = "0x2ED1640")]
		public void MaintainBend()
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0x2ED1754", Offset = "0x2ED1754", VA = "0x2ED1754", Slot = "12")]
		protected override void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0x2ED1DC4", Offset = "0x2ED1DC4", VA = "0x2ED1DC4", Slot = "13")]
		protected override void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0x2ED29A0", Offset = "0x2ED29A0", VA = "0x2ED29A0", Slot = "14")]
		protected override void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0x2ED2AE8", Offset = "0x2ED2AE8", VA = "0x2ED2AE8")]
		public IKSolverLimb()
		{
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0x2ED2CA8", Offset = "0x2ED2CA8", VA = "0x2ED2CA8")]
		public IKSolverLimb(AvatarIKGoal goal)
		{
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0x2ED1AD0", Offset = "0x2ED1AD0", VA = "0x2ED1AD0")]
		private void StoreAxisDirections(ref AxisDirection[] axisDirections)
		{
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0x2ED1EF0", Offset = "0x2ED1EF0", VA = "0x2ED1EF0")]
		private Vector3 GetModifiedBendNormal()
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x200024E")]
	public class IKSolverLookAt : IKSolver
	{
		[Serializable]
		[Token(Token = "0x2000384")]
		public class LookAtBone : Bone
		{
			[Token(Token = "0x17000175")]
			public Vector3 forward
			{
				[Token(Token = "0x60017AF")]
				[Address(RVA = "0x2ED4CDC", Offset = "0x2ED4CDC", VA = "0x2ED4CDC")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x60017AB")]
			[Address(RVA = "0x2ED5480", Offset = "0x2ED5480", VA = "0x2ED5480")]
			public LookAtBone()
			{
			}

			[Token(Token = "0x60017AC")]
			[Address(RVA = "0x2ED402C", Offset = "0x2ED402C", VA = "0x2ED402C")]
			public LookAtBone(Transform transform)
			{
			}

			[Token(Token = "0x60017AD")]
			[Address(RVA = "0x2ED43B4", Offset = "0x2ED43B4", VA = "0x2ED43B4")]
			public void Initiate(Transform root)
			{
			}

			[Token(Token = "0x60017AE")]
			[Address(RVA = "0x2ED50E0", Offset = "0x2ED50E0", VA = "0x2ED50E0")]
			public void LookAt(Vector3 direction, float weight)
			{
			}
		}

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LookAtBone[] spine;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LookAtBone head;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LookAtBone[] eyes;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257F58", Offset = "0x1257F58")]
		public float bodyWeight;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257F70", Offset = "0x1257F70")]
		public float headWeight;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257F88", Offset = "0x1257F88")]
		public float eyesWeight;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257FA0", Offset = "0x1257FA0")]
		public float clampWeight;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257FB8", Offset = "0x1257FB8")]
		public float clampWeightHead;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257FD0", Offset = "0x1257FD0")]
		public float clampWeightEyes;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1257FE8", Offset = "0x1257FE8")]
		public int clampSmoothing;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve spineWeightCurve;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 spineTargetOffset;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] spineForwards;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3[] headForwards;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3[] eyeForward;

		[Token(Token = "0x170000AD")]
		private bool spineIsValid
		{
			[Token(Token = "0x6001124")]
			[Address(RVA = "0x2ED3710", Offset = "0x2ED3710", VA = "0x2ED3710")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AE")]
		private bool spineIsEmpty
		{
			[Token(Token = "0x6001125")]
			[Address(RVA = "0x2ED38E8", Offset = "0x2ED38E8", VA = "0x2ED38E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AF")]
		private bool headIsValid
		{
			[Token(Token = "0x6001127")]
			[Address(RVA = "0x2ED37F4", Offset = "0x2ED37F4", VA = "0x2ED37F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B0")]
		private bool headIsEmpty
		{
			[Token(Token = "0x6001128")]
			[Address(RVA = "0x2ED390C", Offset = "0x2ED390C", VA = "0x2ED390C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B1")]
		private bool eyesIsValid
		{
			[Token(Token = "0x600112A")]
			[Address(RVA = "0x2ED3804", Offset = "0x2ED3804", VA = "0x2ED3804")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B2")]
		private bool eyesIsEmpty
		{
			[Token(Token = "0x600112B")]
			[Address(RVA = "0x2ED3988", Offset = "0x2ED3988", VA = "0x2ED3988")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0x2ED2DC4", Offset = "0x2ED2DC4", VA = "0x2ED2DC4")]
		public void SetLookAtWeight(float weight)
		{
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0x2ED2E48", Offset = "0x2ED2E48", VA = "0x2ED2E48")]
		public void SetLookAtWeight(float weight, float bodyWeight)
		{
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0x2ED2EF4", Offset = "0x2ED2EF4", VA = "0x2ED2EF4")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight)
		{
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0x2ED2FBC", Offset = "0x2ED2FBC", VA = "0x2ED2FBC")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight)
		{
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0x2ED30A8", Offset = "0x2ED30A8", VA = "0x2ED30A8")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
		{
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0x2ED31B4", Offset = "0x2ED31B4", VA = "0x2ED31B4")]
		public void SetLookAtWeight(float weight, float bodyWeight = 0f, float headWeight = 1f, float eyesWeight = 0.5f, float clampWeight = 0.5f, float clampWeightHead = 0.5f, float clampWeightEyes = 0.3f)
		{
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0x2ED32FC", Offset = "0x2ED32FC", VA = "0x2ED32FC", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0x2ED342C", Offset = "0x2ED342C", VA = "0x2ED342C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0x2ED3570", Offset = "0x2ED3570", VA = "0x2ED3570", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0x2ED39AC", Offset = "0x2ED39AC", VA = "0x2ED39AC", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0x2ED3C14", Offset = "0x2ED3C14", VA = "0x2ED3C14", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0x2ED3DB4", Offset = "0x2ED3DB4", VA = "0x2ED3DB4")]
		public bool SetChain(Transform[] spine, Transform head, Transform[] eyes, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0x2ED4060", Offset = "0x2ED4060", VA = "0x2ED4060", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0x2ED44F0", Offset = "0x2ED44F0", VA = "0x2ED44F0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0x2ED45F4", Offset = "0x2ED45F4", VA = "0x2ED45F4")]
		private void SolveSpine()
		{
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0x2ED4820", Offset = "0x2ED4820", VA = "0x2ED4820")]
		private void SolveHead()
		{
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0x2ED4A7C", Offset = "0x2ED4A7C", VA = "0x2ED4A7C")]
		private void SolveEyes()
		{
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0x2ED4DA8", Offset = "0x2ED4DA8", VA = "0x2ED4DA8")]
		private Vector3[] GetForwards(ref Vector3[] forwards, Vector3 baseForward, Vector3 targetForward, int bones, float clamp)
		{
			return null;
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0x2ED3E7C", Offset = "0x2ED3E7C", VA = "0x2ED3E7C")]
		private void SetBones(Transform[] array, ref LookAtBone[] bones)
		{
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0x2ED5248", Offset = "0x2ED5248", VA = "0x2ED5248")]
		public IKSolverLookAt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200024F")]
	public class IKSolverTrigonometric : IKSolver
	{
		[Serializable]
		[Token(Token = "0x2000385")]
		public class TrigonometricBone : Bone
		{
			[Token(Token = "0x40014B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion targetToLocalSpace;

			[Token(Token = "0x40014B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 defaultLocalBendNormal;

			[Token(Token = "0x60017B0")]
			[Address(RVA = "0x2ED6AD4", Offset = "0x2ED6AD4", VA = "0x2ED6AD4")]
			public void Initiate(Vector3 childPosition, Vector3 bendNormal)
			{
			}

			[Token(Token = "0x60017B1")]
			[Address(RVA = "0x2ED767C", Offset = "0x2ED767C", VA = "0x2ED767C")]
			public Quaternion GetRotation(Vector3 direction, Vector3 bendNormal)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60017B2")]
			[Address(RVA = "0x2ED1688", Offset = "0x2ED1688", VA = "0x2ED1688")]
			public Vector3 GetBendNormalFromCurrentRotation()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60017B3")]
			[Address(RVA = "0x2ED7744", Offset = "0x2ED7744", VA = "0x2ED7744")]
			public TrigonometricBone()
			{
			}
		}

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1258000", Offset = "0x1258000")]
		public float IKRotationWeight;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Quaternion IKRotation;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 bendNormal;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TrigonometricBone bone1;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TrigonometricBone bone2;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TrigonometricBone bone3;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Vector3 weightIKPosition;

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected bool directHierarchy;

		[Token(Token = "0x6001130")]
		[Address(RVA = "0x2ED5488", Offset = "0x2ED5488", VA = "0x2ED5488")]
		public void SetBendGoalPosition(Vector3 goalPosition, float weight)
		{
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0x2ED5678", Offset = "0x2ED5678", VA = "0x2ED5678")]
		public void SetBendPlaneToCurrent()
		{
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0x2ED582C", Offset = "0x2ED582C", VA = "0x2ED582C")]
		public void SetIKRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0x2ED5838", Offset = "0x2ED5838", VA = "0x2ED5838")]
		public void SetIKRotationWeight(float weight)
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0x2ED58BC", Offset = "0x2ED58BC", VA = "0x2ED58BC")]
		public Quaternion GetIKRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0x2ED58C8", Offset = "0x2ED58C8", VA = "0x2ED58C8")]
		public float GetIKRotationWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0x2ED58D0", Offset = "0x2ED58D0", VA = "0x2ED58D0", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0x2ED59F8", Offset = "0x2ED59F8", VA = "0x2ED59F8", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0x2ED5B18", Offset = "0x2ED5B18", VA = "0x2ED5B18", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0x2ED5B64", Offset = "0x2ED5B64", VA = "0x2ED5B64", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0x2ED5BC4", Offset = "0x2ED5BC4", VA = "0x2ED5BC4", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0x2ED5FD0", Offset = "0x2ED5FD0", VA = "0x2ED5FD0")]
		public bool SetChain(Transform bone1, Transform bone2, Transform bone3, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0x2ED6050", Offset = "0x2ED6050", VA = "0x2ED6050")]
		public static void Solve(Transform bone1, Transform bone2, Transform bone3, Vector3 targetPosition, Vector3 bendNormal, float weight)
		{
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0x2ED65F8", Offset = "0x2ED65F8", VA = "0x2ED65F8")]
		private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0x2ED6810", Offset = "0x2ED6810", VA = "0x2ED6810", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0x2ED69CC", Offset = "0x2ED69CC", VA = "0x2ED69CC")]
		private bool IsDirectHierarchy()
		{
			return default(bool);
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0x2ED6948", Offset = "0x2ED6948", VA = "0x2ED6948")]
		private void InitiateBones()
		{
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0x2ED6C74", Offset = "0x2ED6C74", VA = "0x2ED6C74", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0x2ED7738", Offset = "0x2ED7738", VA = "0x2ED7738", Slot = "12")]
		protected virtual void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0x2ED773C", Offset = "0x2ED773C", VA = "0x2ED773C", Slot = "13")]
		protected virtual void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0x2ED7740", Offset = "0x2ED7740", VA = "0x2ED7740", Slot = "14")]
		protected virtual void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0x2ED7380", Offset = "0x2ED7380", VA = "0x2ED7380")]
		protected Vector3 GetBendDirection(Vector3 IKPosition, Vector3 bendNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0x2ED2B74", Offset = "0x2ED2B74", VA = "0x2ED2B74")]
		public IKSolverTrigonometric()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000250")]
	public class IKSolverVR : IKSolver
	{
		[Serializable]
		[Token(Token = "0x2000386")]
		public class Arm : BodyPart
		{
			[Serializable]
			[Token(Token = "0x200042F")]
			public enum ShoulderRotationMode
			{
				[Token(Token = "0x4001732")]
				YawPitch,
				[Token(Token = "0x4001733")]
				FromTo
			}

			[Token(Token = "0x40014BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D978", Offset = "0x125D978")]
			public Transform target;

			[Token(Token = "0x40014BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D9B0", Offset = "0x125D9B0")]
			public Transform bendGoal;

			[Token(Token = "0x40014BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125D9E8", Offset = "0x125D9E8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125D9E8", Offset = "0x125D9E8")]
			public float positionWeight;

			[Token(Token = "0x40014BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DA3C", Offset = "0x125DA3C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125DA3C", Offset = "0x125DA3C")]
			public float rotationWeight;

			[Token(Token = "0x40014BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DA90", Offset = "0x125DA90")]
			public ShoulderRotationMode shoulderRotationMode;

			[Token(Token = "0x40014BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DAC8", Offset = "0x125DAC8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125DAC8", Offset = "0x125DAC8")]
			public float shoulderRotationWeight;

			[Token(Token = "0x40014C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public bool invertShoulderYaw;

			[Token(Token = "0x40014C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DB1C", Offset = "0x125DB1C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125DB1C", Offset = "0x125DB1C")]
			public float shoulderTwistWeight;

			[Token(Token = "0x40014C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DB70", Offset = "0x125DB70")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125DB70", Offset = "0x125DB70")]
			public float bendGoalWeight;

			[Token(Token = "0x40014C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DBC4", Offset = "0x125DBC4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125DBC4", Offset = "0x125DBC4")]
			public float swivelOffset;

			[Token(Token = "0x40014C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DC20", Offset = "0x125DC20")]
			public Vector3 wristToPalmAxis;

			[Token(Token = "0x40014C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DC58", Offset = "0x125DC58")]
			public Vector3 palmToThumbAxis;

			[Token(Token = "0x40014C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DC90", Offset = "0x125DC90")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125DC90", Offset = "0x125DC90")]
			public float armLengthMlp;

			[Token(Token = "0x40014C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DCE8", Offset = "0x125DCE8")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x40014C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x40014C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x40014CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public Vector3 bendDirection;

			[NonSerialized]
			[Token(Token = "0x40014CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			[HideInInspector]
			public Vector3 handPositionOffset;

			[Token(Token = "0x40014CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125DD60", Offset = "0x125DD60")]
			private Vector3 <position>k__BackingField;

			[Token(Token = "0x40014CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125DD70", Offset = "0x125DD70")]
			private Quaternion <rotation>k__BackingField;

			[Token(Token = "0x40014CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125DD80", Offset = "0x125DD80")]
			public float handForeArmAdjustWeight;

			[Token(Token = "0x40014CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
			private bool hasShoulder;

			[Token(Token = "0x40014D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private Vector3 chestForwardAxis;

			[Token(Token = "0x40014D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			private Vector3 chestUpAxis;

			[Token(Token = "0x40014D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			private Quaternion chestRotation;

			[Token(Token = "0x40014D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
			private Vector3 chestForward;

			[Token(Token = "0x40014D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			private Vector3 chestUp;

			[Token(Token = "0x40014D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			private Quaternion forearmRelToUpperArm;

			[Token(Token = "0x40014D6")]
			private const float yawOffsetAngle = 45f;

			[Token(Token = "0x40014D7")]
			private const float pitchOffsetAngle = -30f;

			[Token(Token = "0x40014D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
			private Quaternion beforeAdjustRotation;

			[Token(Token = "0x17000176")]
			public Vector3 position
			{
				[Token(Token = "0x60017B4")]
				[Address(RVA = "0x2EDD9C8", Offset = "0x2EDD9C8", VA = "0x2EDD9C8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264C9C", Offset = "0x1264C9C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60017B5")]
				[Address(RVA = "0x2EDD9D4", Offset = "0x2EDD9D4", VA = "0x2EDD9D4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264CAC", Offset = "0x1264CAC")]
				private set
				{
				}
			}

			[Token(Token = "0x17000177")]
			public Quaternion rotation
			{
				[Token(Token = "0x60017B6")]
				[Address(RVA = "0x2EDD9E0", Offset = "0x2EDD9E0", VA = "0x2EDD9E0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264CBC", Offset = "0x1264CBC")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x60017B7")]
				[Address(RVA = "0x2EDD9EC", Offset = "0x2EDD9EC", VA = "0x2EDD9EC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264CCC", Offset = "0x1264CCC")]
				private set
				{
				}
			}

			[Token(Token = "0x17000178")]
			private VirtualBone shoulder
			{
				[Token(Token = "0x60017B8")]
				[Address(RVA = "0x2EDD9F8", Offset = "0x2EDD9F8", VA = "0x2EDD9F8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000179")]
			private VirtualBone upperArm
			{
				[Token(Token = "0x60017B9")]
				[Address(RVA = "0x2EDDA2C", Offset = "0x2EDDA2C", VA = "0x2EDDA2C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017A")]
			private VirtualBone forearm
			{
				[Token(Token = "0x60017BA")]
				[Address(RVA = "0x2EDDA6C", Offset = "0x2EDDA6C", VA = "0x2EDDA6C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017B")]
			private VirtualBone hand
			{
				[Token(Token = "0x60017BB")]
				[Address(RVA = "0x2EDDAB8", Offset = "0x2EDDAB8", VA = "0x2EDDAB8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017BC")]
			[Address(RVA = "0x2EDDB04", Offset = "0x2EDDB04", VA = "0x2EDDB04", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x60017BD")]
			[Address(RVA = "0x2EDE2D8", Offset = "0x2EDE2D8", VA = "0x2EDE2D8", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x60017BE")]
			[Address(RVA = "0x2EDE4CC", Offset = "0x2EDE4CC", VA = "0x2EDE4CC", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x60017BF")]
			[Address(RVA = "0x2EDE578", Offset = "0x2EDE578", VA = "0x2EDE578")]
			private void Stretching()
			{
			}

			[Token(Token = "0x60017C0")]
			[Address(RVA = "0x2EDB660", Offset = "0x2EDB660", VA = "0x2EDB660")]
			public void Solve(bool isLeft)
			{
			}

			[Token(Token = "0x60017C1")]
			[Address(RVA = "0x2EDF1C4", Offset = "0x2EDF1C4", VA = "0x2EDF1C4")]
			public static Quaternion QuaternionLerp(Quaternion p, Quaternion q, float t, bool shortWay)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60017C2")]
			[Address(RVA = "0x2EDF340", Offset = "0x2EDF340", VA = "0x2EDF340")]
			public static Quaternion ScalarMultiply(Quaternion input, float scalar)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60017C3")]
			[Address(RVA = "0x2EDF380", Offset = "0x2EDF380", VA = "0x2EDF380", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x60017C4")]
			[Address(RVA = "0x2EDF3F0", Offset = "0x2EDF3F0", VA = "0x2EDF3F0", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x60017C5")]
			[Address(RVA = "0x2EDE990", Offset = "0x2EDE990", VA = "0x2EDE990")]
			private float DamperValue(float value, float min, float max, float weight = 1f)
			{
				return default(float);
			}

			[Token(Token = "0x60017C6")]
			[Address(RVA = "0x2EDEA68", Offset = "0x2EDEA68", VA = "0x2EDEA68")]
			private Vector3 GetBendNormal(Vector3 dir)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60017C7")]
			[Address(RVA = "0x2EDF610", Offset = "0x2EDF610", VA = "0x2EDF610")]
			private void Visualize(VirtualBone bone1, VirtualBone bone2, VirtualBone bone3, Color color)
			{
			}

			[Token(Token = "0x60017C8")]
			[Address(RVA = "0x2EDD888", Offset = "0x2EDD888", VA = "0x2EDD888")]
			public Arm()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000387")]
		public abstract class BodyPart
		{
			[Token(Token = "0x40014D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125DD98", Offset = "0x125DD98")]
			private float <sqrMag>k__BackingField;

			[Token(Token = "0x40014DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125DDA8", Offset = "0x125DDA8")]
			private float <mag>k__BackingField;

			[Token(Token = "0x40014DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public VirtualBone[] bones;

			[Token(Token = "0x40014DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected bool initiated;

			[Token(Token = "0x40014DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			protected Vector3 rootPosition;

			[Token(Token = "0x40014DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			protected Quaternion rootRotation;

			[Token(Token = "0x40014DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			protected int index;

			[Token(Token = "0x1700017C")]
			public float sqrMag
			{
				[Token(Token = "0x60017CE")]
				[Address(RVA = "0x2EDF7DC", Offset = "0x2EDF7DC", VA = "0x2EDF7DC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264CDC", Offset = "0x1264CDC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60017CF")]
				[Address(RVA = "0x2EDF7E4", Offset = "0x2EDF7E4", VA = "0x2EDF7E4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264CEC", Offset = "0x1264CEC")]
				private set
				{
				}
			}

			[Token(Token = "0x1700017D")]
			public float mag
			{
				[Token(Token = "0x60017D0")]
				[Address(RVA = "0x2EDF7EC", Offset = "0x2EDF7EC", VA = "0x2EDF7EC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264CFC", Offset = "0x1264CFC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60017D1")]
				[Address(RVA = "0x2EDF7F4", Offset = "0x2EDF7F4", VA = "0x2EDF7F4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264D0C", Offset = "0x1264D0C")]
				private set
				{
				}
			}

			[Token(Token = "0x60017C9")]
			protected abstract void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index);

			[Token(Token = "0x60017CA")]
			public abstract void PreSolve();

			[Token(Token = "0x60017CB")]
			public abstract void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations);

			[Token(Token = "0x60017CC")]
			public abstract void ApplyOffsets();

			[Token(Token = "0x60017CD")]
			public abstract void ResetOffsets();

			[Token(Token = "0x60017D2")]
			[Address(RVA = "0x2ED1364", Offset = "0x2ED1364", VA = "0x2ED1364")]
			public void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x60017D3")]
			[Address(RVA = "0x2EDF7FC", Offset = "0x2EDF7FC", VA = "0x2EDF7FC")]
			public void MovePosition(Vector3 position)
			{
			}

			[Token(Token = "0x60017D4")]
			[Address(RVA = "0x2EDF968", Offset = "0x2EDF968", VA = "0x2EDF968")]
			public void MoveRotation(Quaternion rotation)
			{
			}

			[Token(Token = "0x60017D5")]
			[Address(RVA = "0x2EDFA14", Offset = "0x2EDFA14", VA = "0x2EDFA14")]
			public void Translate(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x60017D6")]
			[Address(RVA = "0x2EDB470", Offset = "0x2EDB470", VA = "0x2EDB470")]
			public void TranslateRoot(Vector3 newRootPos, Quaternion newRootRot)
			{
			}

			[Token(Token = "0x60017D7")]
			[Address(RVA = "0x2EDF020", Offset = "0x2EDF020", VA = "0x2EDF020")]
			public void RotateTo(VirtualBone bone, Quaternion rotation, float weight = 1f)
			{
			}

			[Token(Token = "0x60017D8")]
			[Address(RVA = "0x2EDFA68", Offset = "0x2EDFA68", VA = "0x2EDFA68")]
			public void Visualize(Color color)
			{
			}

			[Token(Token = "0x60017D9")]
			[Address(RVA = "0x2EDFBAC", Offset = "0x2EDFBAC", VA = "0x2EDFBAC")]
			public void Visualize()
			{
			}

			[Token(Token = "0x60017DA")]
			[Address(RVA = "0x2EDF738", Offset = "0x2EDF738", VA = "0x2EDF738")]
			protected BodyPart()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000388")]
		public class Footstep
		{
			[Token(Token = "0x40014E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float stepSpeed;

			[Token(Token = "0x40014E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 characterSpaceOffset;

			[Token(Token = "0x40014E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 position;

			[Token(Token = "0x40014E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion rotation;

			[Token(Token = "0x40014E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Quaternion stepToRootRot;

			[Token(Token = "0x40014E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool isSupportLeg;

			[Token(Token = "0x40014E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125DDC8", Offset = "0x125DDC8")]
			private float <stepProgress>k__BackingField;

			[Token(Token = "0x40014E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 stepFrom;

			[Token(Token = "0x40014E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 stepTo;

			[Token(Token = "0x40014E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion stepFromRot;

			[Token(Token = "0x40014EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public Quaternion stepToRot;

			[Token(Token = "0x40014EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			private Quaternion footRelativeToRoot;

			[Token(Token = "0x40014EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float supportLegW;

			[Token(Token = "0x40014ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private float supportLegWV;

			[Token(Token = "0x1700017E")]
			public bool isStepping
			{
				[Token(Token = "0x60017DB")]
				[Address(RVA = "0x28ECB28", Offset = "0x28ECB28", VA = "0x28ECB28")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700017F")]
			public float stepProgress
			{
				[Token(Token = "0x60017DC")]
				[Address(RVA = "0x28ECB3C", Offset = "0x28ECB3C", VA = "0x28ECB3C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264D1C", Offset = "0x1264D1C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60017DD")]
				[Address(RVA = "0x28ECB44", Offset = "0x28ECB44", VA = "0x28ECB44")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264D2C", Offset = "0x1264D2C")]
				private set
				{
				}
			}

			[Token(Token = "0x60017DE")]
			[Address(RVA = "0x28ECB4C", Offset = "0x28ECB4C", VA = "0x28ECB4C")]
			public Footstep(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation, Vector3 characterSpaceOffset)
			{
			}

			[Token(Token = "0x60017DF")]
			[Address(RVA = "0x28ECCDC", Offset = "0x28ECCDC", VA = "0x28ECCDC")]
			public void Reset(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation)
			{
			}

			[Token(Token = "0x60017E0")]
			[Address(RVA = "0x28ECD24", Offset = "0x28ECD24", VA = "0x28ECD24")]
			public void StepTo(Vector3 p, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x60017E1")]
			[Address(RVA = "0x28ECE24", Offset = "0x28ECE24", VA = "0x28ECE24")]
			public void UpdateStepping(Vector3 p, Quaternion rootRotation, float speed)
			{
			}

			[Token(Token = "0x60017E2")]
			[Address(RVA = "0x28ECFFC", Offset = "0x28ECFFC", VA = "0x28ECFFC")]
			public void UpdateStanding(Quaternion rootRotation, float minAngle, float speed)
			{
			}

			[Token(Token = "0x60017E3")]
			[Address(RVA = "0x28ED1E8", Offset = "0x28ED1E8", VA = "0x28ED1E8")]
			public void Update(InterpolationMode interpolation, UnityEvent onStep)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000389")]
		public class Leg : BodyPart
		{
			[Token(Token = "0x40014EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DDD8", Offset = "0x125DDD8")]
			public Transform target;

			[Token(Token = "0x40014EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DE10", Offset = "0x125DE10")]
			public Transform bendGoal;

			[Token(Token = "0x40014F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DE48", Offset = "0x125DE48")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125DE48", Offset = "0x125DE48")]
			public float positionWeight;

			[Token(Token = "0x40014F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DE9C", Offset = "0x125DE9C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125DE9C", Offset = "0x125DE9C")]
			public float rotationWeight;

			[Token(Token = "0x40014F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DEF0", Offset = "0x125DEF0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125DEF0", Offset = "0x125DEF0")]
			public float bendGoalWeight;

			[Token(Token = "0x40014F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DF44", Offset = "0x125DF44")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125DF44", Offset = "0x125DF44")]
			public float swivelOffset;

			[Token(Token = "0x40014F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DFA0", Offset = "0x125DFA0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125DFA0", Offset = "0x125DFA0")]
			public float bendToTargetWeight;

			[Token(Token = "0x40014F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125DFF4", Offset = "0x125DFF4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125DFF4", Offset = "0x125DFF4")]
			public float legLengthMlp;

			[Token(Token = "0x40014F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E04C", Offset = "0x125E04C")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x40014F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x40014F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x40014F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[HideInInspector]
			public Vector3 footPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40014FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 heelPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40014FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion footRotationOffset;

			[NonSerialized]
			[Token(Token = "0x40014FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public float currentMag;

			[Token(Token = "0x40014FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125E0E4", Offset = "0x125E0E4")]
			private Vector3 <position>k__BackingField;

			[Token(Token = "0x40014FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125E0F4", Offset = "0x125E0F4")]
			private Quaternion <rotation>k__BackingField;

			[Token(Token = "0x40014FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125E104", Offset = "0x125E104")]
			private bool <hasToes>k__BackingField;

			[Token(Token = "0x4001500")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125E114", Offset = "0x125E114")]
			private Vector3 <thighRelativeToPelvis>k__BackingField;

			[Token(Token = "0x4001501")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private Vector3 footPosition;

			[Token(Token = "0x4001502")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private Quaternion footRotation;

			[Token(Token = "0x4001503")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			private Vector3 bendNormal;

			[Token(Token = "0x4001504")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private Quaternion calfRelToThigh;

			[Token(Token = "0x4001505")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
			private Quaternion thighRelToFoot;

			[Token(Token = "0x4001506")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
			private Vector3 bendNormalRelToPelvis;

			[Token(Token = "0x4001507")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
			private Vector3 bendNormalRelToTarget;

			[Token(Token = "0x17000180")]
			public Vector3 position
			{
				[Token(Token = "0x60017E4")]
				[Address(RVA = "0x28ED404", Offset = "0x28ED404", VA = "0x28ED404")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264D3C", Offset = "0x1264D3C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60017E5")]
				[Address(RVA = "0x28ED410", Offset = "0x28ED410", VA = "0x28ED410")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264D4C", Offset = "0x1264D4C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000181")]
			public Quaternion rotation
			{
				[Token(Token = "0x60017E6")]
				[Address(RVA = "0x28ED41C", Offset = "0x28ED41C", VA = "0x28ED41C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264D5C", Offset = "0x1264D5C")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x60017E7")]
				[Address(RVA = "0x28ED428", Offset = "0x28ED428", VA = "0x28ED428")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264D6C", Offset = "0x1264D6C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000182")]
			public bool hasToes
			{
				[Token(Token = "0x60017E8")]
				[Address(RVA = "0x28ED434", Offset = "0x28ED434", VA = "0x28ED434")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264D7C", Offset = "0x1264D7C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60017E9")]
				[Address(RVA = "0x28ED43C", Offset = "0x28ED43C", VA = "0x28ED43C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264D8C", Offset = "0x1264D8C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000183")]
			public VirtualBone thigh
			{
				[Token(Token = "0x60017EA")]
				[Address(RVA = "0x28ED448", Offset = "0x28ED448", VA = "0x28ED448")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000184")]
			private VirtualBone calf
			{
				[Token(Token = "0x60017EB")]
				[Address(RVA = "0x28ED47C", Offset = "0x28ED47C", VA = "0x28ED47C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000185")]
			private VirtualBone foot
			{
				[Token(Token = "0x60017EC")]
				[Address(RVA = "0x28ED4B4", Offset = "0x28ED4B4", VA = "0x28ED4B4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000186")]
			private VirtualBone toes
			{
				[Token(Token = "0x60017ED")]
				[Address(RVA = "0x28ED4EC", Offset = "0x28ED4EC", VA = "0x28ED4EC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000187")]
			public VirtualBone lastBone
			{
				[Token(Token = "0x60017EE")]
				[Address(RVA = "0x28ED524", Offset = "0x28ED524", VA = "0x28ED524")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000188")]
			public Vector3 thighRelativeToPelvis
			{
				[Token(Token = "0x60017EF")]
				[Address(RVA = "0x28ED564", Offset = "0x28ED564", VA = "0x28ED564")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264D9C", Offset = "0x1264D9C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60017F0")]
				[Address(RVA = "0x28ED570", Offset = "0x28ED570", VA = "0x28ED570")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264DAC", Offset = "0x1264DAC")]
				private set
				{
				}
			}

			[Token(Token = "0x60017F1")]
			[Address(RVA = "0x28ED57C", Offset = "0x28ED57C", VA = "0x28ED57C", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x60017F2")]
			[Address(RVA = "0x28EDC20", Offset = "0x28EDC20", VA = "0x28EDC20", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x60017F3")]
			[Address(RVA = "0x28EE430", Offset = "0x28EE430", VA = "0x28EE430", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x60017F4")]
			[Address(RVA = "0x28EE32C", Offset = "0x28EE32C", VA = "0x28EE32C")]
			private void ApplyPositionOffset(Vector3 offset, float weight)
			{
			}

			[Token(Token = "0x60017F5")]
			[Address(RVA = "0x28EE0F4", Offset = "0x28EE0F4", VA = "0x28EE0F4")]
			private void ApplyRotationOffset(Quaternion offset, float weight)
			{
			}

			[Token(Token = "0x60017F6")]
			[Address(RVA = "0x28EE9E8", Offset = "0x28EE9E8", VA = "0x28EE9E8")]
			public void Solve(bool stretch)
			{
			}

			[Token(Token = "0x60017F7")]
			[Address(RVA = "0x28EEFC0", Offset = "0x28EEFC0", VA = "0x28EEFC0")]
			private void Stretching()
			{
			}

			[Token(Token = "0x60017F8")]
			[Address(RVA = "0x28EFA6C", Offset = "0x28EFA6C", VA = "0x28EFA6C", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x60017F9")]
			[Address(RVA = "0x28EFC88", Offset = "0x28EFC88", VA = "0x28EFC88", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x60017FA")]
			[Address(RVA = "0x28EFD38", Offset = "0x28EFD38", VA = "0x28EFD38")]
			public Leg()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200038A")]
		public class Locomotion
		{
			[Token(Token = "0x4001508")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E124", Offset = "0x125E124")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125E124", Offset = "0x125E124")]
			public float weight;

			[Token(Token = "0x4001509")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E178", Offset = "0x125E178")]
			public float footDistance;

			[Token(Token = "0x400150A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E1B0", Offset = "0x125E1B0")]
			public float stepThreshold;

			[Token(Token = "0x400150B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E1E8", Offset = "0x125E1E8")]
			public float angleThreshold;

			[Token(Token = "0x400150C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E220", Offset = "0x125E220")]
			public float comAngleMlp;

			[Token(Token = "0x400150D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E258", Offset = "0x125E258")]
			public float maxVelocity;

			[Token(Token = "0x400150E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E290", Offset = "0x125E290")]
			public float velocityFactor;

			[Token(Token = "0x400150F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E2C8", Offset = "0x125E2C8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125E2C8", Offset = "0x125E2C8")]
			public float maxLegStretch;

			[Token(Token = "0x4001510")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E320", Offset = "0x125E320")]
			public float rootSpeed;

			[Token(Token = "0x4001511")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E358", Offset = "0x125E358")]
			public float stepSpeed;

			[Token(Token = "0x4001512")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E390", Offset = "0x125E390")]
			public AnimationCurve stepHeight;

			[Token(Token = "0x4001513")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E3C8", Offset = "0x125E3C8")]
			public AnimationCurve heelHeight;

			[Token(Token = "0x4001514")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E400", Offset = "0x125E400")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125E400", Offset = "0x125E400")]
			public float relaxLegTwistMinAngle;

			[Token(Token = "0x4001515")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E458", Offset = "0x125E458")]
			public float relaxLegTwistSpeed;

			[Token(Token = "0x4001516")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E490", Offset = "0x125E490")]
			public InterpolationMode stepInterpolation;

			[Token(Token = "0x4001517")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E4C8", Offset = "0x125E4C8")]
			public Vector3 offset;

			[Token(Token = "0x4001518")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[HideInInspector]
			public bool blockingEnabled;

			[Token(Token = "0x4001519")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[HideInInspector]
			public LayerMask blockingLayers;

			[Token(Token = "0x400151A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[HideInInspector]
			public float raycastRadius;

			[Token(Token = "0x400151B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[HideInInspector]
			public float raycastHeight;

			[Token(Token = "0x400151C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E540", Offset = "0x125E540")]
			public UnityEvent onLeftFootstep;

			[Token(Token = "0x400151D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E578", Offset = "0x125E578")]
			public UnityEvent onRightFootstep;

			[Token(Token = "0x400151E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125E5B0", Offset = "0x125E5B0")]
			private Vector3 <centerOfMass>k__BackingField;

			[Token(Token = "0x400151F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Footstep[] footsteps;

			[Token(Token = "0x4001520")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private Vector3 lastComPosition;

			[Token(Token = "0x4001521")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private Vector3 comVelocity;

			[Token(Token = "0x4001522")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private int leftFootIndex;

			[Token(Token = "0x4001523")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			private int rightFootIndex;

			[Token(Token = "0x17000189")]
			public Vector3 centerOfMass
			{
				[Token(Token = "0x60017FB")]
				[Address(RVA = "0x28EFE3C", Offset = "0x28EFE3C", VA = "0x28EFE3C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264DBC", Offset = "0x1264DBC")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60017FC")]
				[Address(RVA = "0x28EFE48", Offset = "0x28EFE48", VA = "0x28EFE48")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264DCC", Offset = "0x1264DCC")]
				private set
				{
				}
			}

			[Token(Token = "0x1700018A")]
			public Vector3 leftFootstepPosition
			{
				[Token(Token = "0x6001802")]
				[Address(RVA = "0x28F229C", Offset = "0x28F229C", VA = "0x28F229C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700018B")]
			public Vector3 rightFootstepPosition
			{
				[Token(Token = "0x6001803")]
				[Address(RVA = "0x28F22DC", Offset = "0x28F22DC", VA = "0x28F22DC")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700018C")]
			public Quaternion leftFootstepRotation
			{
				[Token(Token = "0x6001804")]
				[Address(RVA = "0x28F2320", Offset = "0x28F2320", VA = "0x28F2320")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x1700018D")]
			public Quaternion rightFootstepRotation
			{
				[Token(Token = "0x6001805")]
				[Address(RVA = "0x28F2360", Offset = "0x28F2360", VA = "0x28F2360")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x60017FD")]
			[Address(RVA = "0x28EFE54", Offset = "0x28EFE54", VA = "0x28EFE54")]
			public void Initiate(Vector3[] positions, Quaternion[] rotations, bool hasToes)
			{
			}

			[Token(Token = "0x60017FE")]
			[Address(RVA = "0x28F016C", Offset = "0x28F016C", VA = "0x28F016C")]
			public void Reset(Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x60017FF")]
			[Address(RVA = "0x28F03E0", Offset = "0x28F03E0", VA = "0x28F03E0")]
			public void AddDeltaRotation(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x6001800")]
			[Address(RVA = "0x28F07B8", Offset = "0x28F07B8", VA = "0x28F07B8")]
			public void AddDeltaPosition(Vector3 delta)
			{
			}

			[Token(Token = "0x6001801")]
			[Address(RVA = "0x28F0968", Offset = "0x28F0968", VA = "0x28F0968")]
			public void Solve(VirtualBone rootBone, Spine spine, Leg leftLeg, Leg rightLeg, Arm leftArm, Arm rightArm, int supportLegIndex, out Vector3 leftFootPosition, out Vector3 rightFootPosition, out Quaternion leftFootRotation, out Quaternion rightFootRotation, out float leftFootOffset, out float rightFootOffset, out float leftHeelOffset, out float rightHeelOffset)
			{
			}

			[Token(Token = "0x6001806")]
			[Address(RVA = "0x28F1EA8", Offset = "0x28F1EA8", VA = "0x28F1EA8")]
			private bool StepBlocked(Vector3 fromPosition, Vector3 toPosition, Vector3 rootPosition)
			{
				return default(bool);
			}

			[Token(Token = "0x6001807")]
			[Address(RVA = "0x28F204C", Offset = "0x28F204C", VA = "0x28F204C")]
			private bool CanStep()
			{
				return default(bool);
			}

			[Token(Token = "0x6001808")]
			[Address(RVA = "0x28F20D0", Offset = "0x28F20D0", VA = "0x28F20D0")]
			private static bool GetLineSphereCollision(Vector3 lineStart, Vector3 lineEnd, Vector3 sphereCenter, float sphereRadius)
			{
				return default(bool);
			}

			[Token(Token = "0x6001809")]
			[Address(RVA = "0x28F23A4", Offset = "0x28F23A4", VA = "0x28F23A4")]
			public Locomotion()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200038B")]
		public class Spine : BodyPart
		{
			[Token(Token = "0x4001524")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E5C0", Offset = "0x125E5C0")]
			public Transform headTarget;

			[Token(Token = "0x4001525")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E5F8", Offset = "0x125E5F8")]
			public Transform pelvisTarget;

			[Token(Token = "0x4001526")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E630", Offset = "0x125E630")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125E630", Offset = "0x125E630")]
			public float positionWeight;

			[Token(Token = "0x4001527")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E684", Offset = "0x125E684")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125E684", Offset = "0x125E684")]
			public float rotationWeight;

			[Token(Token = "0x4001528")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E6D8", Offset = "0x125E6D8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125E6D8", Offset = "0x125E6D8")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4001529")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E72C", Offset = "0x125E72C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125E72C", Offset = "0x125E72C")]
			public float pelvisRotationWeight;

			[Token(Token = "0x400152A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E780", Offset = "0x125E780")]
			public Transform chestGoal;

			[Token(Token = "0x400152B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E7B8", Offset = "0x125E7B8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125E7B8", Offset = "0x125E7B8")]
			public float chestGoalWeight;

			[Token(Token = "0x400152C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E80C", Offset = "0x125E80C")]
			public float minHeadHeight;

			[Token(Token = "0x400152D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E844", Offset = "0x125E844")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125E844", Offset = "0x125E844")]
			public float bodyPosStiffness;

			[Token(Token = "0x400152E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E898", Offset = "0x125E898")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125E898", Offset = "0x125E898")]
			public float bodyRotStiffness;

			[Token(Token = "0x400152F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E8EC", Offset = "0x125E8EC")]
			[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x125E8EC", Offset = "0x125E8EC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125E8EC", Offset = "0x125E8EC")]
			public float neckStiffness;

			[Token(Token = "0x4001530")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E964", Offset = "0x125E964")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125E964", Offset = "0x125E964")]
			public float rotateChestByHands;

			[Token(Token = "0x4001531")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125E9B8", Offset = "0x125E9B8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125E9B8", Offset = "0x125E9B8")]
			public float chestClampWeight;

			[Token(Token = "0x4001532")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125EA0C", Offset = "0x125EA0C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125EA0C", Offset = "0x125EA0C")]
			public float headClampWeight;

			[Token(Token = "0x4001533")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125EA60", Offset = "0x125EA60")]
			public float moveBodyBackWhenCrouching;

			[Token(Token = "0x4001534")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125EA98", Offset = "0x125EA98")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125EA98", Offset = "0x125EA98")]
			public float maintainPelvisPosition;

			[Token(Token = "0x4001535")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125EAEC", Offset = "0x125EAEC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125EAEC", Offset = "0x125EAEC")]
			public float maxRootAngle;

			[Token(Token = "0x4001536")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125EB44", Offset = "0x125EB44")]
			public bool invertChestYaw;

			[NonSerialized]
			[Token(Token = "0x4001537")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 IKPositionHead;

			[NonSerialized]
			[Token(Token = "0x4001538")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion IKRotationHead;

			[NonSerialized]
			[Token(Token = "0x4001539")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public Vector3 IKPositionPelvis;

			[NonSerialized]
			[Token(Token = "0x400153A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			[HideInInspector]
			public Quaternion IKRotationPelvis;

			[NonSerialized]
			[Token(Token = "0x400153B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[HideInInspector]
			public Vector3 goalPositionChest;

			[NonSerialized]
			[Token(Token = "0x400153C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[HideInInspector]
			public Vector3 pelvisPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400153D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			[HideInInspector]
			public Vector3 chestPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400153E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			[HideInInspector]
			public Vector3 headPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400153F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[HideInInspector]
			public Quaternion pelvisRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4001540")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			[HideInInspector]
			public Quaternion chestRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4001541")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			[HideInInspector]
			public Quaternion headRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4001542")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			[HideInInspector]
			public Vector3 faceDirection;

			[NonSerialized]
			[Token(Token = "0x4001543")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			[HideInInspector]
			public Vector3 locomotionHeadPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4001544")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
			[HideInInspector]
			public Vector3 headPosition;

			[Token(Token = "0x4001545")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125EC5C", Offset = "0x125EC5C")]
			private Quaternion <anchorRotation>k__BackingField;

			[Token(Token = "0x4001546")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
			private Quaternion headRotation;

			[Token(Token = "0x4001547")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
			private Quaternion pelvisRotation;

			[Token(Token = "0x4001548")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
			private Quaternion anchorRelativeToHead;

			[Token(Token = "0x4001549")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
			private Quaternion anchorRelativeToPelvis;

			[Token(Token = "0x400154A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
			private Quaternion pelvisRelativeRotation;

			[Token(Token = "0x400154B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
			private Quaternion chestRelativeRotation;

			[Token(Token = "0x400154C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
			private Vector3 headDeltaPosition;

			[Token(Token = "0x400154D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
			private Quaternion pelvisDeltaRotation;

			[Token(Token = "0x400154E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
			private Quaternion chestTargetRotation;

			[Token(Token = "0x400154F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
			private int pelvisIndex;

			[Token(Token = "0x4001550")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
			private int spineIndex;

			[Token(Token = "0x4001551")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
			private int chestIndex;

			[Token(Token = "0x4001552")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
			private int neckIndex;

			[Token(Token = "0x4001553")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
			private int headIndex;

			[Token(Token = "0x4001554")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
			private float length;

			[Token(Token = "0x4001555")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
			private bool hasChest;

			[Token(Token = "0x4001556")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x211")]
			private bool hasNeck;

			[Token(Token = "0x4001557")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x212")]
			private bool hasLegs;

			[Token(Token = "0x4001558")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
			private float headHeight;

			[Token(Token = "0x4001559")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
			private float sizeMlp;

			[Token(Token = "0x400155A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
			private Vector3 chestForward;

			[Token(Token = "0x1700018E")]
			public VirtualBone pelvis
			{
				[Token(Token = "0x600180A")]
				[Address(RVA = "0x28F1E28", Offset = "0x28F1E28", VA = "0x28F1E28")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018F")]
			public VirtualBone firstSpineBone
			{
				[Token(Token = "0x600180B")]
				[Address(RVA = "0x28F24AC", Offset = "0x28F24AC", VA = "0x28F24AC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000190")]
			public VirtualBone chest
			{
				[Token(Token = "0x600180C")]
				[Address(RVA = "0x28F24EC", Offset = "0x28F24EC", VA = "0x28F24EC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000191")]
			private VirtualBone neck
			{
				[Token(Token = "0x600180D")]
				[Address(RVA = "0x28F2540", Offset = "0x28F2540", VA = "0x28F2540")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000192")]
			public VirtualBone head
			{
				[Token(Token = "0x600180E")]
				[Address(RVA = "0x28F1E68", Offset = "0x28F1E68", VA = "0x28F1E68")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000193")]
			public Quaternion anchorRotation
			{
				[Token(Token = "0x600180F")]
				[Address(RVA = "0x28F2580", Offset = "0x28F2580", VA = "0x28F2580")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264DDC", Offset = "0x1264DDC")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6001810")]
				[Address(RVA = "0x28F2594", Offset = "0x28F2594", VA = "0x28F2594")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264DEC", Offset = "0x1264DEC")]
				private set
				{
				}
			}

			[Token(Token = "0x6001811")]
			[Address(RVA = "0x28F25A8", Offset = "0x28F25A8", VA = "0x28F25A8", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6001812")]
			[Address(RVA = "0x28F31F8", Offset = "0x28F31F8", VA = "0x28F31F8", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6001813")]
			[Address(RVA = "0x28F3408", Offset = "0x28F3408", VA = "0x28F3408", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6001814")]
			[Address(RVA = "0x28F39C0", Offset = "0x28F39C0", VA = "0x28F39C0")]
			private void CalculateChestTargetRotation(VirtualBone rootBone, Arm[] arms)
			{
			}

			[Token(Token = "0x6001815")]
			[Address(RVA = "0x28F40D0", Offset = "0x28F40D0", VA = "0x28F40D0")]
			public void Solve(VirtualBone rootBone, Leg[] legs, Arm[] arms)
			{
			}

			[Token(Token = "0x6001816")]
			[Address(RVA = "0x28F4A38", Offset = "0x28F4A38", VA = "0x28F4A38")]
			private void FABRIKPass(Vector3 animatedPelvisPos, Vector3 rootUp)
			{
			}

			[Token(Token = "0x6001817")]
			[Address(RVA = "0x28F5254", Offset = "0x28F5254", VA = "0x28F5254")]
			private void SolvePelvis()
			{
			}

			[Token(Token = "0x6001818")]
			[Address(RVA = "0x28F5A24", Offset = "0x28F5A24", VA = "0x28F5A24", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6001819")]
			[Address(RVA = "0x28F5C00", Offset = "0x28F5C00", VA = "0x28F5C00", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x600181A")]
			[Address(RVA = "0x28F3BF0", Offset = "0x28F3BF0", VA = "0x28F3BF0")]
			private void AdjustChestByHands(ref Quaternion chestTargetRotation, Arm[] arms)
			{
			}

			[Token(Token = "0x600181B")]
			[Address(RVA = "0x28F4E98", Offset = "0x28F4E98", VA = "0x28F4E98")]
			public void InverseTranslateToHead(Leg[] legs, bool limited, bool useCurrentLegMag, Vector3 offset, float w)
			{
			}

			[Token(Token = "0x600181C")]
			[Address(RVA = "0x28F462C", Offset = "0x28F462C", VA = "0x28F462C")]
			private void TranslatePelvis(Leg[] legs, Vector3 deltaPosition, Quaternion deltaRotation)
			{
			}

			[Token(Token = "0x600181D")]
			[Address(RVA = "0x28F5CFC", Offset = "0x28F5CFC", VA = "0x28F5CFC")]
			private Vector3 LimitPelvisPosition(Leg[] legs, Vector3 pelvisPosition, bool useCurrentLegMag, int it = 2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600181E")]
			[Address(RVA = "0x28F5008", Offset = "0x28F5008", VA = "0x28F5008")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x600181F")]
			[Address(RVA = "0x28F4BE4", Offset = "0x28F4BE4", VA = "0x28F4BE4")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x6001820")]
			[Address(RVA = "0x28F620C", Offset = "0x28F620C", VA = "0x28F620C")]
			public Spine()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200038C")]
		public enum PositionOffset
		{
			[Token(Token = "0x400155C")]
			Pelvis,
			[Token(Token = "0x400155D")]
			Chest,
			[Token(Token = "0x400155E")]
			Head,
			[Token(Token = "0x400155F")]
			LeftHand,
			[Token(Token = "0x4001560")]
			RightHand,
			[Token(Token = "0x4001561")]
			LeftFoot,
			[Token(Token = "0x4001562")]
			RightFoot,
			[Token(Token = "0x4001563")]
			LeftHeel,
			[Token(Token = "0x4001564")]
			RightHeel
		}

		[Serializable]
		[Token(Token = "0x200038D")]
		public enum RotationOffset
		{
			[Token(Token = "0x4001566")]
			Pelvis,
			[Token(Token = "0x4001567")]
			Chest,
			[Token(Token = "0x4001568")]
			Head
		}

		[Serializable]
		[Token(Token = "0x200038E")]
		public class VirtualBone
		{
			[Token(Token = "0x4001569")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 readPosition;

			[Token(Token = "0x400156A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Quaternion readRotation;

			[Token(Token = "0x400156B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 solverPosition;

			[Token(Token = "0x400156C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion solverRotation;

			[Token(Token = "0x400156D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float length;

			[Token(Token = "0x400156E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float sqrMag;

			[Token(Token = "0x400156F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3 axis;

			[Token(Token = "0x6001821")]
			[Address(RVA = "0x28EDB84", Offset = "0x28EDB84", VA = "0x28EDB84")]
			public VirtualBone(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001822")]
			[Address(RVA = "0x28EDC00", Offset = "0x28EDC00", VA = "0x28EDC00")]
			public void Read(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001823")]
			[Address(RVA = "0x28F63DC", Offset = "0x28F63DC", VA = "0x28F63DC")]
			public static void SwingRotation(VirtualBone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6001824")]
			[Address(RVA = "0x28F666C", Offset = "0x28F666C", VA = "0x28F666C")]
			public static float PreSolve(ref VirtualBone[] bones)
			{
				return default(float);
			}

			[Token(Token = "0x6001825")]
			[Address(RVA = "0x28F6024", Offset = "0x28F6024", VA = "0x28F6024")]
			public static void RotateAroundPoint(VirtualBone[] bones, int index, Vector3 point, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001826")]
			[Address(RVA = "0x28F6958", Offset = "0x28F6958", VA = "0x28F6958")]
			public static void RotateBy(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001827")]
			[Address(RVA = "0x28F6B90", Offset = "0x28F6B90", VA = "0x28F6B90")]
			public static void RotateBy(VirtualBone[] bones, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001828")]
			[Address(RVA = "0x28F6DC4", Offset = "0x28F6DC4", VA = "0x28F6DC4")]
			public static void RotateTo(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001829")]
			[Address(RVA = "0x28EF4C0", Offset = "0x28EF4C0", VA = "0x28EF4C0")]
			public static void SolveTrigonometric(VirtualBone[] bones, int first, int second, int third, Vector3 targetPosition, Vector3 bendNormal, float weight)
			{
			}

			[Token(Token = "0x600182A")]
			[Address(RVA = "0x28F6E7C", Offset = "0x28F6E7C", VA = "0x28F6E7C")]
			private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600182B")]
			[Address(RVA = "0x28F55DC", Offset = "0x28F55DC", VA = "0x28F55DC")]
			public static void SolveFABRIK(VirtualBone[] bones, Vector3 startPosition, Vector3 targetPosition, float weight, float minNormalizedTargetDistance, int iterations, float length, Vector3 startOffset)
			{
			}

			[Token(Token = "0x600182C")]
			[Address(RVA = "0x28F7094", Offset = "0x28F7094", VA = "0x28F7094")]
			private static Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600182D")]
			[Address(RVA = "0x28F719C", Offset = "0x28F719C", VA = "0x28F719C")]
			public static void SolveCCD(VirtualBone[] bones, Vector3 targetPosition, float weight, int iterations)
			{
			}
		}

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] solverTransforms;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool hasChest;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool hasNeck;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool hasShoulders;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool hasToes;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool hasLegs;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] readPositions;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] readRotations;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] solvedPositions;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion[] solvedRotations;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 rootV;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 rootVelocity;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 bodyOffset;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int supportLegIndex;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258018", Offset = "0x1258018")]
		public bool plantFeet;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1258050", Offset = "0x1258050")]
		private VirtualBone <rootBone>k__BackingField;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258060", Offset = "0x1258060")]
		public Spine spine;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258098", Offset = "0x1258098")]
		public Arm leftArm;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12580D0", Offset = "0x12580D0")]
		public Arm rightArm;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258108", Offset = "0x1258108")]
		public Leg leftLeg;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258140", Offset = "0x1258140")]
		public Leg rightLeg;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258178", Offset = "0x1258178")]
		public Locomotion locomotion;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Leg[] legs;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Arm[] arms;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Vector3 headPosition;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Vector3 headDeltaPosition;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 raycastOriginPelvis;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Vector3 lastOffset;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3 debugPos1;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private Vector3 debugPos2;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Vector3 debugPos3;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private Vector3 debugPos4;

		[Token(Token = "0x170000B3")]
		[HideInInspector]
		public VirtualBone rootBone
		{
			[Token(Token = "0x6001164")]
			[Address(RVA = "0x2EDD60C", Offset = "0x2EDD60C", VA = "0x2EDD60C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262CF0", Offset = "0x1262CF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001165")]
			[Address(RVA = "0x2EDD614", Offset = "0x2EDD614", VA = "0x2EDD614")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262D00", Offset = "0x1262D00")]
			private set
			{
			}
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0x2ED774C", Offset = "0x2ED774C", VA = "0x2ED774C")]
		public void SetToReferences(VRIK.References references)
		{
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0x2ED7BE0", Offset = "0x2ED7BE0", VA = "0x2ED7BE0")]
		public void GuessHandOrientations(VRIK.References references, bool onlyIfZero)
		{
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0x2ED7A68", Offset = "0x2ED7A68", VA = "0x2ED7A68")]
		public void DefaultAnimationCurves()
		{
		}

		[Token(Token = "0x600114A")]
		[Address(RVA = "0x2ED85CC", Offset = "0x2ED85CC", VA = "0x2ED85CC")]
		public void AddPositionOffset(PositionOffset positionOffset, Vector3 value)
		{
		}

		[Token(Token = "0x600114B")]
		[Address(RVA = "0x2ED88A8", Offset = "0x2ED88A8", VA = "0x2ED88A8")]
		public void AddRotationOffset(RotationOffset rotationOffset, Vector3 value)
		{
		}

		[Token(Token = "0x600114C")]
		[Address(RVA = "0x2ED894C", Offset = "0x2ED894C", VA = "0x2ED894C")]
		public void AddRotationOffset(RotationOffset rotationOffset, Quaternion value)
		{
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0x2ED8AE0", Offset = "0x2ED8AE0", VA = "0x2ED8AE0")]
		public void AddPlatformMotion(Vector3 deltaPosition, Quaternion deltaRotation, Vector3 platformPivot)
		{
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0x2ED8C6C", Offset = "0x2ED8C6C", VA = "0x2ED8C6C")]
		public void Reset()
		{
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0x2ED94D0", Offset = "0x2ED94D0", VA = "0x2ED94D0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0x2ED9644", Offset = "0x2ED9644", VA = "0x2ED9644", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0x2ED97E8", Offset = "0x2ED97E8", VA = "0x2ED97E8", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001152")]
		[Address(RVA = "0x2ED985C", Offset = "0x2ED985C", VA = "0x2ED985C", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001153")]
		[Address(RVA = "0x2ED98D0", Offset = "0x2ED98D0", VA = "0x2ED98D0", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0x2ED9AF0", Offset = "0x2ED9AF0", VA = "0x2ED9AF0")]
		private Vector3 GetNormal(Transform[] transforms)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0x2ED7E80", Offset = "0x2ED7E80", VA = "0x2ED7E80")]
		private Vector3 GuessWristToPalmAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0x2ED8058", Offset = "0x2ED8058", VA = "0x2ED8058")]
		private Vector3 GuessPalmToThumbAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0x2ED84A8", Offset = "0x2ED84A8", VA = "0x2ED84A8")]
		private static Keyframe[] GetSineKeyframes(float mag)
		{
			return null;
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0x2ED8DE4", Offset = "0x2ED8DE4", VA = "0x2ED8DE4")]
		private void UpdateSolverTransforms()
		{
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0x2ED9DD0", Offset = "0x2ED9DD0", VA = "0x2ED9DD0", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0x2ED9E18", Offset = "0x2ED9E18", VA = "0x2ED9E18", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0x2EDB21C", Offset = "0x2EDB21C", VA = "0x2EDB21C")]
		public void UpdateArms(bool updateLeft, bool updateRight)
		{
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0x2EDB2D8", Offset = "0x2EDB2D8", VA = "0x2EDB2D8")]
		public void UpdateArm(bool isLeft)
		{
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0x2EDB2C8", Offset = "0x2EDB2C8", VA = "0x2EDB2C8")]
		public void UpdateLeftArm()
		{
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0x2EDB2D0", Offset = "0x2EDB2D0", VA = "0x2EDB2D0")]
		public void UpdateRightArm()
		{
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0x2EDAFC0", Offset = "0x2EDAFC0", VA = "0x2EDAFC0")]
		private void WriteTransforms()
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0x2ED8F4C", Offset = "0x2ED8F4C", VA = "0x2ED8F4C")]
		private void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs)
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0x2ED9E84", Offset = "0x2ED9E84", VA = "0x2ED9E84")]
		private void Solve()
		{
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0x2EDCF80", Offset = "0x2EDCF80", VA = "0x2EDCF80")]
		private Vector3 GetPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0x2EDCFC8", Offset = "0x2EDCFC8", VA = "0x2EDCFC8")]
		private Quaternion GetRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0x2EDAE70", Offset = "0x2EDAE70", VA = "0x2EDAE70")]
		private void Write()
		{
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0x2EDD00C", Offset = "0x2EDD00C", VA = "0x2EDD00C")]
		private Vector3 GetPelvisOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0x2EDD61C", Offset = "0x2EDD61C", VA = "0x2EDD61C")]
		public IKSolverVR()
		{
		}
	}
	[Token(Token = "0x2000251")]
	public class TwistRelaxer : MonoBehaviour
	{
		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IK ik;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12581B0", Offset = "0x12581B0")]
		public Transform parent;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12581E8", Offset = "0x12581E8")]
		public Transform child;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258220", Offset = "0x1258220")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1258220", Offset = "0x1258220")]
		public float weight;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258274", Offset = "0x1258274")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1258274", Offset = "0x1258274")]
		public float parentChildCrossfade;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12582C8", Offset = "0x12582C8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12582C8", Offset = "0x12582C8")]
		public float twistAngleOffset;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 twistAxis;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 axis;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 axisRelativeToParentDefault;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 axisRelativeToChildDefault;

		[Token(Token = "0x6001169")]
		[Address(RVA = "0x23DBED0", Offset = "0x23DBED0", VA = "0x23DBED0")]
		public void Relax()
		{
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0x23DC2B0", Offset = "0x23DC2B0", VA = "0x23DC2B0")]
		private void Start()
		{
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0x23DC75C", Offset = "0x23DC75C", VA = "0x23DC75C")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0x23DC7E4", Offset = "0x23DC7E4", VA = "0x23DC7E4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0x23DC86C", Offset = "0x23DC86C", VA = "0x23DC86C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0x23DC994", Offset = "0x23DC994", VA = "0x23DC994")]
		public TwistRelaxer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000252")]
	public class InteractionEffector
	{
		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1258324", Offset = "0x1258324")]
		private FullBodyBipedEffector <effectorType>k__BackingField;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1258334", Offset = "0x1258334")]
		private bool <isPaused>k__BackingField;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1258344", Offset = "0x1258344")]
		private InteractionObject <interactionObject>k__BackingField;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Poser poser;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IKEffector effector;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timer;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float length;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float weight;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float fadeInSpeed;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float defaultPositionWeight;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float defaultRotationWeight;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float defaultPull;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float defaultReach;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float defaultPush;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float defaultPushParent;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float resetTimer;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool positionWeightUsed;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		private bool rotationWeightUsed;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		private bool pullUsed;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
		private bool reachUsed;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool pushUsed;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool pushParentUsed;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool pickedUp;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool defaults;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool pickUpOnPostFBBIK;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 pausePositionRelative;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion pauseRotationRelative;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private InteractionTarget interactionTarget;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform target;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private List<bool> triggered;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool started;

		[Token(Token = "0x170000B4")]
		public FullBodyBipedEffector effectorType
		{
			[Token(Token = "0x600116F")]
			[Address(RVA = "0x28F7AC0", Offset = "0x28F7AC0", VA = "0x28F7AC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262D10", Offset = "0x1262D10")]
			get
			{
				return default(FullBodyBipedEffector);
			}
			[Token(Token = "0x6001170")]
			[Address(RVA = "0x28F7AC8", Offset = "0x28F7AC8", VA = "0x28F7AC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262D20", Offset = "0x1262D20")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B5")]
		public bool isPaused
		{
			[Token(Token = "0x6001171")]
			[Address(RVA = "0x28F7AD0", Offset = "0x28F7AD0", VA = "0x28F7AD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262D30", Offset = "0x1262D30")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001172")]
			[Address(RVA = "0x28F7AD8", Offset = "0x28F7AD8", VA = "0x28F7AD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262D40", Offset = "0x1262D40")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B6")]
		public InteractionObject interactionObject
		{
			[Token(Token = "0x6001173")]
			[Address(RVA = "0x28F7AE4", Offset = "0x28F7AE4", VA = "0x28F7AE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262D50", Offset = "0x1262D50")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001174")]
			[Address(RVA = "0x28F7AEC", Offset = "0x28F7AEC", VA = "0x28F7AEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262D60", Offset = "0x1262D60")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B7")]
		public bool inInteraction
		{
			[Token(Token = "0x6001175")]
			[Address(RVA = "0x28F7AF4", Offset = "0x28F7AF4", VA = "0x28F7AF4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B8")]
		public float progress
		{
			[Token(Token = "0x600117E")]
			[Address(RVA = "0x28FA4AC", Offset = "0x28FA4AC", VA = "0x28FA4AC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0x28F7B64", Offset = "0x28F7B64", VA = "0x28F7B64")]
		public InteractionEffector(FullBodyBipedEffector effectorType)
		{
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0x28F7BF4", Offset = "0x28F7BF4", VA = "0x28F7BF4")]
		public void Initiate(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0x28F7CC4", Offset = "0x28F7CC4", VA = "0x28F7CC4")]
		private void StoreDefaults()
		{
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0x28F7E04", Offset = "0x28F7E04", VA = "0x28F7E04")]
		public bool ResetToDefaults(float speed)
		{
			return default(bool);
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0x28F8208", Offset = "0x28F8208", VA = "0x28F8208")]
		public bool Pause()
		{
			return default(bool);
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0x28F85C8", Offset = "0x28F85C8", VA = "0x28F85C8")]
		public bool Resume()
		{
			return default(bool);
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0x28F861C", Offset = "0x28F861C", VA = "0x28F861C")]
		public bool Start(InteractionObject interactionObject, string tag, float fadeInTime, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0x28F91B8", Offset = "0x28F91B8", VA = "0x28F91B8")]
		public void Update(Transform root, float speed)
		{
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0x28F9CE0", Offset = "0x28F9CE0", VA = "0x28F9CE0")]
		private void TriggerUntriggeredEvents(bool checkTime, out bool pickUp, out bool pause)
		{
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0x28F9F08", Offset = "0x28F9F08", VA = "0x28F9F08")]
		private void PickUp(Transform root)
		{
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0x28FA33C", Offset = "0x28FA33C", VA = "0x28FA33C")]
		public bool Stop()
		{
			return default(bool);
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0x28FA994", Offset = "0x28FA994", VA = "0x28FA994")]
		public void OnPostFBBIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000253")]
	public class InteractionLookAt
	{
		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258354", Offset = "0x1258354")]
		public LookAtIK ik;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125838C", Offset = "0x125838C")]
		public float lerpSpeed;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12583C4", Offset = "0x12583C4")]
		public float weightSpeed;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool isPaused;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform lookAtTarget;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float stopLookTime;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float weight;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstFBBIKSolve;

		[Token(Token = "0x6001183")]
		[Address(RVA = "0x28FABF8", Offset = "0x28FABF8", VA = "0x28FABF8")]
		public void Look(Transform target, float time)
		{
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0x28FAD7C", Offset = "0x28FAD7C", VA = "0x28FAD7C")]
		public void OnFixTransforms()
		{
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0x28FAE24", Offset = "0x28FAE24", VA = "0x28FAE24")]
		public void Update()
		{
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0x28FB078", Offset = "0x28FB078", VA = "0x28FB078")]
		public void SolveSpine()
		{
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0x28FB170", Offset = "0x28FB170", VA = "0x28FB170")]
		public void SolveHead()
		{
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0x28FB23C", Offset = "0x28FB23C", VA = "0x28FB23C")]
		public InteractionLookAt()
		{
		}
	}
	[Token(Token = "0x2000254")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x1250C74", Offset = "0x1250C74")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250C74", Offset = "0x1250C74")]
	public class InteractionObject : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200038F")]
		public class InteractionEvent
		{
			[Token(Token = "0x4001570")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125EC6C", Offset = "0x125EC6C")]
			public float time;

			[Token(Token = "0x4001571")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125ECA4", Offset = "0x125ECA4")]
			public bool pause;

			[Token(Token = "0x4001572")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125ECDC", Offset = "0x125ECDC")]
			public bool pickUp;

			[Token(Token = "0x4001573")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125ED14", Offset = "0x125ED14")]
			public AnimatorEvent[] animations;

			[Token(Token = "0x4001574")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125ED4C", Offset = "0x125ED4C")]
			public Message[] messages;

			[Token(Token = "0x4001575")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125ED84", Offset = "0x125ED84")]
			public UnityEvent unityEvent;

			[Token(Token = "0x600182E")]
			[Address(RVA = "0x28FA4E8", Offset = "0x28FA4E8", VA = "0x28FA4E8")]
			public void Activate(Transform t)
			{
			}

			[Token(Token = "0x600182F")]
			[Address(RVA = "0x28FC4F0", Offset = "0x28FC4F0", VA = "0x28FC4F0")]
			public InteractionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000390")]
		public class Message
		{
			[Token(Token = "0x4001576")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125EDBC", Offset = "0x125EDBC")]
			public string function;

			[Token(Token = "0x4001577")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125EDF4", Offset = "0x125EDF4")]
			public GameObject recipient;

			[Token(Token = "0x4001578")]
			private const string empty = "";

			[Token(Token = "0x6001830")]
			[Address(RVA = "0x28FC400", Offset = "0x28FC400", VA = "0x28FC400")]
			public void Send(Transform t)
			{
			}

			[Token(Token = "0x6001831")]
			[Address(RVA = "0x28FC4F8", Offset = "0x28FC4F8", VA = "0x28FC4F8")]
			public Message()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000391")]
		public class AnimatorEvent
		{
			[Token(Token = "0x4001579")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125EE2C", Offset = "0x125EE2C")]
			public Animator animator;

			[Token(Token = "0x400157A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125EE64", Offset = "0x125EE64")]
			public Animation animation;

			[Token(Token = "0x400157B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125EE9C", Offset = "0x125EE9C")]
			public string animationState;

			[Token(Token = "0x400157C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125EED4", Offset = "0x125EED4")]
			public float crossfadeTime;

			[Token(Token = "0x400157D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125EF0C", Offset = "0x125EF0C")]
			public int layer;

			[Token(Token = "0x400157E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125EF44", Offset = "0x125EF44")]
			public bool resetNormalizedTime;

			[Token(Token = "0x400157F")]
			private const string empty = "";

			[Token(Token = "0x6001832")]
			[Address(RVA = "0x28FC160", Offset = "0x28FC160", VA = "0x28FC160")]
			public void Activate(bool pickUp)
			{
			}

			[Token(Token = "0x6001833")]
			[Address(RVA = "0x28FC254", Offset = "0x28FC254", VA = "0x28FC254")]
			private void Activate(Animator animator)
			{
			}

			[Token(Token = "0x6001834")]
			[Address(RVA = "0x28FC30C", Offset = "0x28FC30C", VA = "0x28FC30C")]
			private void Activate(Animation animation)
			{
			}

			[Token(Token = "0x6001835")]
			[Address(RVA = "0x28FC3EC", Offset = "0x28FC3EC", VA = "0x28FC3EC")]
			public AnimatorEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000392")]
		public class WeightCurve
		{
			[Serializable]
			[Token(Token = "0x2000430")]
			public enum Type
			{
				[Token(Token = "0x4001735")]
				PositionWeight,
				[Token(Token = "0x4001736")]
				RotationWeight,
				[Token(Token = "0x4001737")]
				PositionOffsetX,
				[Token(Token = "0x4001738")]
				PositionOffsetY,
				[Token(Token = "0x4001739")]
				PositionOffsetZ,
				[Token(Token = "0x400173A")]
				Pull,
				[Token(Token = "0x400173B")]
				Reach,
				[Token(Token = "0x400173C")]
				RotateBoneWeight,
				[Token(Token = "0x400173D")]
				Push,
				[Token(Token = "0x400173E")]
				PushParent,
				[Token(Token = "0x400173F")]
				PoserWeight
			}

			[Token(Token = "0x4001580")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125EF7C", Offset = "0x125EF7C")]
			public Type type;

			[Token(Token = "0x4001581")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125EFB4", Offset = "0x125EFB4")]
			public AnimationCurve curve;

			[Token(Token = "0x6001836")]
			[Address(RVA = "0x28FB950", Offset = "0x28FB950", VA = "0x28FB950")]
			public float GetValue(float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6001837")]
			[Address(RVA = "0x28FC510", Offset = "0x28FC510", VA = "0x28FC510")]
			public WeightCurve()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000393")]
		public class Multiplier
		{
			[Token(Token = "0x4001582")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125EFEC", Offset = "0x125EFEC")]
			public WeightCurve.Type curve;

			[Token(Token = "0x4001583")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F024", Offset = "0x125F024")]
			public float multiplier;

			[Token(Token = "0x4001584")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F05C", Offset = "0x125F05C")]
			public WeightCurve.Type result;

			[Token(Token = "0x6001838")]
			[Address(RVA = "0x28FBFB4", Offset = "0x28FBFB4", VA = "0x28FBFB4")]
			public float GetValue(WeightCurve weightCurve, float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6001839")]
			[Address(RVA = "0x28FC500", Offset = "0x28FC500", VA = "0x28FC500")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125840C", Offset = "0x125840C")]
		public Transform otherLookAtTarget;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258444", Offset = "0x1258444")]
		public Transform otherTargetsRoot;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125847C", Offset = "0x125847C")]
		public Transform positionOffsetSpace;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WeightCurve[] weightCurves;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Multiplier[] multipliers;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionEvent[] events;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12584B4", Offset = "0x12584B4")]
		private float <length>k__BackingField;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12584C4", Offset = "0x12584C4")]
		private InteractionSystem <lastUsedInteractionSystem>k__BackingField;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private InteractionTarget[] targets;

		[Token(Token = "0x170000B9")]
		public float length
		{
			[Token(Token = "0x600118F")]
			[Address(RVA = "0x28FB418", Offset = "0x28FB418", VA = "0x28FB418")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262EC0", Offset = "0x1262EC0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001190")]
			[Address(RVA = "0x28FB420", Offset = "0x28FB420", VA = "0x28FB420")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262ED0", Offset = "0x1262ED0")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		public InteractionSystem lastUsedInteractionSystem
		{
			[Token(Token = "0x6001191")]
			[Address(RVA = "0x28FB428", Offset = "0x28FB428", VA = "0x28FB428")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262EE0", Offset = "0x1262EE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001192")]
			[Address(RVA = "0x28FB430", Offset = "0x28FB430", VA = "0x28FB430")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1262EF0", Offset = "0x1262EF0")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		public Transform lookAtTarget
		{
			[Token(Token = "0x6001194")]
			[Address(RVA = "0x28FB654", Offset = "0x28FB654", VA = "0x28FB654")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BC")]
		public Transform targetsRoot
		{
			[Token(Token = "0x600119C")]
			[Address(RVA = "0x28FA868", Offset = "0x28FA868", VA = "0x28FA868")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0x28FB250", Offset = "0x28FB250", VA = "0x28FB250")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262D70", Offset = "0x1262D70")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0x28FB29C", Offset = "0x28FB29C", VA = "0x28FB29C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262DA8", Offset = "0x1262DA8")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0x28FB2E8", Offset = "0x28FB2E8", VA = "0x28FB2E8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262DE0", Offset = "0x1262DE0")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0x28FB334", Offset = "0x28FB334", VA = "0x28FB334")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262E18", Offset = "0x1262E18")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0x28FB380", Offset = "0x28FB380", VA = "0x28FB380")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262E50", Offset = "0x1262E50")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0x28FB3CC", Offset = "0x28FB3CC", VA = "0x28FB3CC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262E88", Offset = "0x1262E88")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0x28FB438", Offset = "0x28FB438", VA = "0x28FB438")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0x28FB6E4", Offset = "0x28FB6E4", VA = "0x28FB6E4")]
		public InteractionTarget GetTarget(FullBodyBipedEffector effectorType, InteractionSystem interactionSystem)
		{
			return null;
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0x28F8BD8", Offset = "0x28F8BD8", VA = "0x28F8BD8")]
		public bool CurveUsed(WeightCurve.Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0x28FB868", Offset = "0x28FB868", VA = "0x28FB868")]
		public InteractionTarget[] GetTargets()
		{
			return null;
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0x28F8A8C", Offset = "0x28F8A8C", VA = "0x28F8A8C")]
		public Transform GetTarget(FullBodyBipedEffector effectorType, string tag)
		{
			return null;
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0x28F8BD0", Offset = "0x28F8BD0", VA = "0x28F8BD0")]
		public void OnStartInteraction(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0x28F98C4", Offset = "0x28F98C4", VA = "0x28F98C4")]
		public void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, InteractionTarget target, float timer, float weight)
		{
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0x28FA114", Offset = "0x28FA114", VA = "0x28FA114")]
		public float GetValue(WeightCurve.Type weightCurveType, InteractionTarget target, float timer)
		{
			return default(float);
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0x28FBFF0", Offset = "0x28FBFF0", VA = "0x28FBFF0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0x28FB96C", Offset = "0x28FB96C", VA = "0x28FB96C")]
		private void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, WeightCurve.Type type, float value, float weight)
		{
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0x28FB870", Offset = "0x28FB870", VA = "0x28FB870")]
		private Transform GetTarget(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0x28FBF4C", Offset = "0x28FBF4C", VA = "0x28FBF4C")]
		private int GetWeightCurveIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0x28FBFF4", Offset = "0x28FBFF4", VA = "0x28FBFF4")]
		private int GetMultiplierIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0x28FC05C", Offset = "0x28FC05C", VA = "0x28FC05C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262F00", Offset = "0x1262F00")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0x28FC0A8", Offset = "0x28FC0A8", VA = "0x28FC0A8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262F38", Offset = "0x1262F38")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0x28FC0F4", Offset = "0x28FC0F4", VA = "0x28FC0F4")]
		public InteractionObject()
		{
		}
	}
	[Token(Token = "0x2000255")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x1250CD4", Offset = "0x1250CD4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250CD4", Offset = "0x1250CD4")]
	public class InteractionSystem : MonoBehaviour
	{
		[Token(Token = "0x2000394")]
		public delegate void InteractionDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject);

		[Token(Token = "0x2000395")]
		public delegate void InteractionEventDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject, InteractionObject.InteractionEvent interactionEvent);

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12584D4", Offset = "0x12584D4")]
		public string targetTag;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125850C", Offset = "0x125850C")]
		public float fadeInTime;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258544", Offset = "0x1258544")]
		public float speed;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125857C", Offset = "0x125857C")]
		public float resetToDefaultsSpeed;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x12585B4", Offset = "0x12585B4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12585B4", Offset = "0x12585B4")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x12585B4", Offset = "0x12585B4")]
		public Collider characterCollider;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258638", Offset = "0x1258638")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0x1258638", Offset = "0x1258638")]
		public Transform FPSCamera;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258698", Offset = "0x1258698")]
		public LayerMask camRaycastLayers;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12586D0", Offset = "0x12586D0")]
		public float camRaycastDistance;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1258708", Offset = "0x1258708")]
		private List<InteractionTrigger> <triggersInRange>k__BackingField;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<InteractionTrigger> inContact;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> bestRangeIndexes;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public InteractionDelegate OnInteractionStart;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public InteractionDelegate OnInteractionPause;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InteractionDelegate OnInteractionPickUp;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public InteractionDelegate OnInteractionResume;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public InteractionDelegate OnInteractionStop;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public InteractionEventDelegate OnInteractionEvent;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public RaycastHit raycastHit;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x1258718", Offset = "0x1258718")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258718", Offset = "0x1258718")]
		[SerializeField]
		private FullBodyBipedIK fullBody;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258778", Offset = "0x1258778")]
		public InteractionLookAt lookAt;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InteractionEffector[] interactionEffectors;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool initiated;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider lastCollider;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Collider c;

		[Token(Token = "0x170000BD")]
		public bool inInteraction
		{
			[Token(Token = "0x60011AB")]
			[Address(RVA = "0x28FC6E0", Offset = "0x28FC6E0", VA = "0x28FC6E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BE")]
		public FullBodyBipedIK ik
		{
			[Token(Token = "0x60011C5")]
			[Address(RVA = "0x28FE338", Offset = "0x28FE338", VA = "0x28FE338")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011C6")]
			[Address(RVA = "0x28FE340", Offset = "0x28FE340", VA = "0x28FE340")]
			set
			{
			}
		}

		[Token(Token = "0x170000BF")]
		public List<InteractionTrigger> triggersInRange
		{
			[Token(Token = "0x60011C7")]
			[Address(RVA = "0x28FE348", Offset = "0x28FE348", VA = "0x28FE348")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12630C0", Offset = "0x12630C0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011C8")]
			[Address(RVA = "0x28FE350", Offset = "0x28FE350", VA = "0x28FE350")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12630D0", Offset = "0x12630D0")]
			private set
			{
			}
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0x28FC518", Offset = "0x28FC518", VA = "0x28FC518")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262F70", Offset = "0x1262F70")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0x28FC564", Offset = "0x28FC564", VA = "0x28FC564")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262FA8", Offset = "0x1262FA8")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0x28FC5B0", Offset = "0x28FC5B0", VA = "0x28FC5B0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1262FE0", Offset = "0x1262FE0")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0x28FC5FC", Offset = "0x28FC5FC", VA = "0x28FC5FC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1263018", Offset = "0x1263018")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0x28FC648", Offset = "0x28FC648", VA = "0x28FC648")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1263050", Offset = "0x1263050")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0x28FC694", Offset = "0x28FC694", VA = "0x28FC694")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1263088", Offset = "0x1263088")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0x28FC870", Offset = "0x28FC870", VA = "0x28FC870")]
		public bool IsInInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0x28FC93C", Offset = "0x28FC93C", VA = "0x28FC93C")]
		public bool IsPaused(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0x28FCA08", Offset = "0x28FCA08", VA = "0x28FCA08")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0x28FCAB4", Offset = "0x28FCAB4", VA = "0x28FCAB4")]
		public bool IsInSync()
		{
			return default(bool);
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0x28FCBAC", Offset = "0x28FCBAC", VA = "0x28FCBAC")]
		public bool StartInteraction(FullBodyBipedEffector effectorType, InteractionObject interactionObject, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0x28FCCC8", Offset = "0x28FCCC8", VA = "0x28FCCC8")]
		public bool PauseInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0x28FCD58", Offset = "0x28FCD58", VA = "0x28FCD58")]
		public bool ResumeInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0x28FCDE8", Offset = "0x28FCDE8", VA = "0x28FCDE8")]
		public bool StopInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0x28FCE78", Offset = "0x28FCE78", VA = "0x28FCE78")]
		public void PauseAll()
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0x28FCEEC", Offset = "0x28FCEEC", VA = "0x28FCEEC")]
		public void ResumeAll()
		{
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0x28FCF60", Offset = "0x28FCF60", VA = "0x28FCF60")]
		public void StopAll()
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0x28FCFC8", Offset = "0x28FCFC8", VA = "0x28FCFC8")]
		public InteractionObject GetInteractionObject(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0x28FD054", Offset = "0x28FD054", VA = "0x28FD054")]
		public float GetProgress(FullBodyBipedEffector effectorType)
		{
			return default(float);
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0x28FD108", Offset = "0x28FD108", VA = "0x28FD108")]
		public float GetMinActiveProgress()
		{
			return default(float);
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0x28FD1EC", Offset = "0x28FD1EC", VA = "0x28FD1EC")]
		public bool TriggerInteraction(int index, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0x28FD490", Offset = "0x28FD490", VA = "0x28FD490")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionObject interactionObject)
		{
			return default(bool);
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0x28FD680", Offset = "0x28FD680", VA = "0x28FD680")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionTarget interactionTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0x28FD904", Offset = "0x28FD904", VA = "0x28FD904")]
		public InteractionTrigger.Range GetClosestInteractionRange()
		{
			return null;
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0x28FDBF8", Offset = "0x28FDBF8", VA = "0x28FDBF8")]
		public InteractionObject GetClosestInteractionObjectInRange()
		{
			return null;
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0x28FDC3C", Offset = "0x28FDC3C", VA = "0x28FDC3C")]
		public InteractionTarget GetClosestInteractionTargetInRange()
		{
			return null;
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0x28FDCB4", Offset = "0x28FDCB4", VA = "0x28FDCB4")]
		public InteractionObject[] GetClosestInteractionObjectsInRange()
		{
			return null;
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0x28FDDEC", Offset = "0x28FDDEC", VA = "0x28FDDEC")]
		public InteractionTarget[] GetClosestInteractionTargetsInRange()
		{
			return null;
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0x28FDF64", Offset = "0x28FDF64", VA = "0x28FDF64")]
		public bool TriggerEffectorsReady(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0x28FE20C", Offset = "0x28FE20C", VA = "0x28FE20C")]
		public InteractionTrigger.Range GetTriggerRange(int index)
		{
			return null;
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0x28FDA04", Offset = "0x28FDA04", VA = "0x28FDA04")]
		public int GetClosestTriggerIndex()
		{
			return default(int);
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0x28FE358", Offset = "0x28FE358", VA = "0x28FE358")]
		private void Start()
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0x28FEB0C", Offset = "0x28FEB0C", VA = "0x28FEB0C")]
		private void InteractionPause(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0x28FEB2C", Offset = "0x28FEB2C", VA = "0x28FEB2C")]
		private void InteractionResume(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0x28FEB48", Offset = "0x28FEB48", VA = "0x28FEB48")]
		private void InteractionStop(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x28FEB64", Offset = "0x28FEB64", VA = "0x28FEB64")]
		private void LookAtInteraction(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0x28FEBC4", Offset = "0x28FEBC4", VA = "0x28FEBC4")]
		public void OnTriggerEnter(Collider c)
		{
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0x28FECE0", Offset = "0x28FECE0", VA = "0x28FECE0")]
		public void OnTriggerExit(Collider c)
		{
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0x28FEDDC", Offset = "0x28FEDDC", VA = "0x28FEDDC")]
		private bool ContactIsInRange(int index, out int bestRangeIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0x28FF13C", Offset = "0x28FF13C", VA = "0x28FF13C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0x28FF254", Offset = "0x28FF254", VA = "0x28FF254")]
		private void Update()
		{
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0x28FF4A0", Offset = "0x28FF4A0", VA = "0x28FF4A0")]
		private void Raycasting()
		{
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0x28FE86C", Offset = "0x28FE86C", VA = "0x28FE86C")]
		private void UpdateTriggerEventBroadcasting()
		{
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0x28FF5E0", Offset = "0x28FF5E0", VA = "0x28FF5E0")]
		private void UpdateEffectors()
		{
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0x28FF70C", Offset = "0x28FF70C", VA = "0x28FF70C")]
		private void OnPreFBBIK()
		{
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0x28FF7B4", Offset = "0x28FF7B4", VA = "0x28FF7B4")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0x28FF89C", Offset = "0x28FF89C", VA = "0x28FF89C")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0x28FF8B4", Offset = "0x28FF8B4", VA = "0x28FF8B4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0x28FC78C", Offset = "0x28FC78C", VA = "0x28FC78C")]
		private bool IsValid(bool log)
		{
			return default(bool);
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0x28FD38C", Offset = "0x28FD38C", VA = "0x28FD38C")]
		private bool TriggerIndexIsValid(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0x28FFC78", Offset = "0x28FFC78", VA = "0x28FFC78")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12630E0", Offset = "0x12630E0")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0x28FFCC4", Offset = "0x28FFCC4", VA = "0x28FFCC4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1263118", Offset = "0x1263118")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0x28FFD10", Offset = "0x28FFD10", VA = "0x28FFD10")]
		public InteractionSystem()
		{
		}
	}
	[Token(Token = "0x2000256")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x1250D34", Offset = "0x1250D34")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250D34", Offset = "0x1250D34")]
	public class InteractionTarget : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000396")]
		public class Multiplier
		{
			[Token(Token = "0x4001585")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F094", Offset = "0x125F094")]
			public InteractionObject.WeightCurve.Type curve;

			[Token(Token = "0x4001586")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F0CC", Offset = "0x125F0CC")]
			public float multiplier;

			[Token(Token = "0x6001842")]
			[Address(RVA = "0x290055C", Offset = "0x290055C", VA = "0x290055C")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12587B0", Offset = "0x12587B0")]
		public FullBodyBipedEffector effectorType;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12587E8", Offset = "0x12587E8")]
		public Multiplier[] multipliers;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258820", Offset = "0x1258820")]
		public float interactionSpeedMlp;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258858", Offset = "0x1258858")]
		public Transform pivot;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258890", Offset = "0x1258890")]
		public Vector3 twistAxis;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12588C8", Offset = "0x12588C8")]
		public float twistWeight;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258900", Offset = "0x1258900")]
		public float swingWeight;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258938", Offset = "0x1258938")]
		public bool rotateOnce;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform lastPivot;

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0x2900270", Offset = "0x2900270", VA = "0x2900270")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1263150", Offset = "0x1263150")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0x29002BC", Offset = "0x29002BC", VA = "0x29002BC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1263188", Offset = "0x1263188")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0x2900308", Offset = "0x2900308", VA = "0x2900308")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12631C0", Offset = "0x12631C0")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0x2900354", Offset = "0x2900354", VA = "0x2900354")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12631F8", Offset = "0x12631F8")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0x29003A0", Offset = "0x29003A0", VA = "0x29003A0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1263230", Offset = "0x1263230")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0x29003EC", Offset = "0x29003EC", VA = "0x29003EC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1263268", Offset = "0x1263268")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0x28FB8E0", Offset = "0x28FB8E0", VA = "0x28FB8E0")]
		public float GetValue(InteractionObject.WeightCurve.Type curveType)
		{
			return default(float);
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0x28FA8F8", Offset = "0x28FA8F8", VA = "0x28FA8F8")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0x28F8C8C", Offset = "0x28F8C8C", VA = "0x28F8C8C")]
		public void RotateTo(Vector3 position)
		{
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0x2900438", Offset = "0x2900438", VA = "0x2900438")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12632A0", Offset = "0x12632A0")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0x2900484", Offset = "0x2900484", VA = "0x2900484")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12632D8", Offset = "0x12632D8")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0x29004D0", Offset = "0x29004D0", VA = "0x29004D0")]
		public InteractionTarget()
		{
		}
	}
	[Token(Token = "0x2000257")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x1250D94", Offset = "0x1250D94")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250D94", Offset = "0x1250D94")]
	public class InteractionTrigger : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000397")]
		public class CharacterPosition
		{
			[Token(Token = "0x4001587")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F104", Offset = "0x125F104")]
			public bool use;

			[Token(Token = "0x4001588")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F13C", Offset = "0x125F13C")]
			public Vector2 offset;

			[Token(Token = "0x4001589")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F174", Offset = "0x125F174")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125F174", Offset = "0x125F174")]
			public float angleOffset;

			[Token(Token = "0x400158A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F1D0", Offset = "0x125F1D0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125F1D0", Offset = "0x125F1D0")]
			public float maxAngle;

			[Token(Token = "0x400158B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F228", Offset = "0x125F228")]
			public float radius;

			[Token(Token = "0x400158C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F260", Offset = "0x125F260")]
			public bool orbit;

			[Token(Token = "0x400158D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F298", Offset = "0x125F298")]
			public bool fixYAxis;

			[Token(Token = "0x17000194")]
			public Vector3 offset3D
			{
				[Token(Token = "0x6001843")]
				[Address(RVA = "0x2900CF0", Offset = "0x2900CF0", VA = "0x2900CF0")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000195")]
			public Vector3 direction3D
			{
				[Token(Token = "0x6001844")]
				[Address(RVA = "0x2900D2C", Offset = "0x2900D2C", VA = "0x2900D2C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6001845")]
			[Address(RVA = "0x2900E24", Offset = "0x2900E24", VA = "0x2900E24")]
			public bool IsInRange(Transform character, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6001846")]
			[Address(RVA = "0x29014A0", Offset = "0x29014A0", VA = "0x29014A0")]
			public CharacterPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000398")]
		public class CameraPosition
		{
			[Token(Token = "0x400158E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F2D0", Offset = "0x125F2D0")]
			public Collider lookAtTarget;

			[Token(Token = "0x400158F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F308", Offset = "0x125F308")]
			public Vector3 direction;

			[Token(Token = "0x4001590")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F340", Offset = "0x125F340")]
			public float maxDistance;

			[Token(Token = "0x4001591")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F378", Offset = "0x125F378")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125F378", Offset = "0x125F378")]
			public float maxAngle;

			[Token(Token = "0x4001592")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F3D0", Offset = "0x125F3D0")]
			public bool fixYAxis;

			[Token(Token = "0x6001847")]
			[Address(RVA = "0x29007DC", Offset = "0x29007DC", VA = "0x29007DC")]
			public Quaternion GetRotation()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6001848")]
			[Address(RVA = "0x2900984", Offset = "0x2900984", VA = "0x2900984")]
			public bool IsInRange(Transform raycastFrom, RaycastHit hit, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6001849")]
			[Address(RVA = "0x2900C64", Offset = "0x2900C64", VA = "0x2900C64")]
			public CameraPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000399")]
		public class Range
		{
			[Serializable]
			[Token(Token = "0x2000431")]
			public class Interaction
			{
				[Token(Token = "0x4001740")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1260488", Offset = "0x1260488")]
				public InteractionObject interactionObject;

				[Token(Token = "0x4001741")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12604C0", Offset = "0x12604C0")]
				public FullBodyBipedEffector[] effectors;

				[Token(Token = "0x60019FE")]
				[Address(RVA = "0x29014C4", Offset = "0x29014C4", VA = "0x29014C4")]
				public Interaction()
				{
				}
			}

			[Token(Token = "0x4001593")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			[SerializeField]
			public string name;

			[Token(Token = "0x4001594")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			[SerializeField]
			public bool show;

			[Token(Token = "0x4001595")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F478", Offset = "0x125F478")]
			public CharacterPosition characterPosition;

			[Token(Token = "0x4001596")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F4B0", Offset = "0x125F4B0")]
			public CameraPosition cameraPosition;

			[Token(Token = "0x4001597")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F4E8", Offset = "0x125F4E8")]
			public Interaction[] interactions;

			[Token(Token = "0x600184A")]
			[Address(RVA = "0x290064C", Offset = "0x290064C", VA = "0x290064C")]
			public bool IsInRange(Transform character, Transform raycastFrom, RaycastHit raycastHit, Transform trigger, out float maxError)
			{
				return default(bool);
			}

			[Token(Token = "0x600184B")]
			[Address(RVA = "0x29014B4", Offset = "0x29014B4", VA = "0x29014B4")]
			public Range()
			{
			}
		}

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258970", Offset = "0x1258970")]
		public Range[] ranges;

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0x2900564", Offset = "0x2900564", VA = "0x2900564")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1263310", Offset = "0x1263310")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0x29005B0", Offset = "0x29005B0", VA = "0x29005B0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1263348", Offset = "0x1263348")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0x29005FC", Offset = "0x29005FC", VA = "0x29005FC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1263380", Offset = "0x1263380")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0x2900648", Offset = "0x2900648", VA = "0x2900648")]
		private void Start()
		{
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0x28FEF80", Offset = "0x28FEF80", VA = "0x28FEF80")]
		public int GetBestRangeIndex(Transform character, Transform raycastFrom, RaycastHit raycastHit)
		{
			return default(int);
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0x2900770", Offset = "0x2900770", VA = "0x2900770")]
		public InteractionTrigger()
		{
		}
	}
	[Token(Token = "0x2000258")]
	public class GenericPoser : Poser
	{
		[Serializable]
		[Token(Token = "0x200039A")]
		public class Map
		{
			[Token(Token = "0x4001598")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform bone;

			[Token(Token = "0x4001599")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform target;

			[Token(Token = "0x400159A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector3 defaultLocalPosition;

			[Token(Token = "0x400159B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x600184C")]
			[Address(RVA = "0x2ADD138", Offset = "0x2ADD138", VA = "0x2ADD138")]
			public Map(Transform bone, Transform target)
			{
			}

			[Token(Token = "0x600184D")]
			[Address(RVA = "0x2ADD558", Offset = "0x2ADD558", VA = "0x2ADD558")]
			public void StoreDefaultState()
			{
			}

			[Token(Token = "0x600184E")]
			[Address(RVA = "0x2ADD50C", Offset = "0x2ADD50C", VA = "0x2ADD50C")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x600184F")]
			[Address(RVA = "0x2ADD304", Offset = "0x2ADD304", VA = "0x2ADD304")]
			public void Update(float localRotationWeight, float localPositionWeight)
			{
			}
		}

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Map[] maps;

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0x2ADCE44", Offset = "0x2ADCE44", VA = "0x2ADCE44", Slot = "7")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12633B8", Offset = "0x12633B8")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0x2ADD1F8", Offset = "0x2ADD1F8", VA = "0x2ADD1F8", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0x2ADD1FC", Offset = "0x2ADD1FC", VA = "0x2ADD1FC", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0x2ADD4A4", Offset = "0x2ADD4A4", VA = "0x2ADD4A4", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0x2ADD190", Offset = "0x2ADD190", VA = "0x2ADD190")]
		private void StoreDefaultState()
		{
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0x2ADD098", Offset = "0x2ADD098", VA = "0x2ADD098")]
		private Transform GetTargetNamed(string tName, Transform[] array)
		{
			return null;
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0x2ADD5A8", Offset = "0x2ADD5A8", VA = "0x2ADD5A8")]
		public GenericPoser()
		{
		}
	}
	[Token(Token = "0x2000259")]
	public class HandPoser : Poser
	{
		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform[] children;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _poseRoot;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] poseChildren;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0x2AE76F8", Offset = "0x2AE76F8", VA = "0x2AE76F8", Slot = "7")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0x2AE77C0", Offset = "0x2AE77C0", VA = "0x2AE77C0", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0x2AE79A4", Offset = "0x2AE79A4", VA = "0x2AE79A4", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0x2AE7AA0", Offset = "0x2AE7AA0", VA = "0x2AE7AA0", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0x2AE7828", Offset = "0x2AE7828", VA = "0x2AE7828")]
		protected void StoreDefaultState()
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0x2AE7E50", Offset = "0x2AE7E50", VA = "0x2AE7E50")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x200025A")]
	public abstract class Poser : SolverManager
	{
		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform poseRoot;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12589A8", Offset = "0x12589A8")]
		public float weight;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12589C0", Offset = "0x12589C0")]
		public float localRotationWeight;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12589D8", Offset = "0x12589D8")]
		public float localPositionWeight;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool initiated;

		[Token(Token = "0x60011FE")]
		public abstract void AutoMapping();

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0x2904174", Offset = "0x2904174", VA = "0x2904174")]
		public void UpdateManual()
		{
		}

		[Token(Token = "0x6001200")]
		protected abstract void InitiatePoser();

		[Token(Token = "0x6001201")]
		protected abstract void UpdatePoser();

		[Token(Token = "0x6001202")]
		protected abstract void FixPoserTransforms();

		[Token(Token = "0x6001203")]
		[Address(RVA = "0x2904180", Offset = "0x2904180", VA = "0x2904180", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0x29041D4", Offset = "0x29041D4", VA = "0x29041D4", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0x2904210", Offset = "0x2904210", VA = "0x2904210", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0x2904228", Offset = "0x2904228", VA = "0x2904228")]
		protected Poser()
		{
		}
	}
	[Token(Token = "0x200025B")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1250DF4", Offset = "0x1250DF4")]
	public class RagdollUtility : MonoBehaviour
	{
		[Token(Token = "0x200039B")]
		public class Rigidbone
		{
			[Token(Token = "0x400159C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody r;

			[Token(Token = "0x400159D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform t;

			[Token(Token = "0x400159E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Collider collider;

			[Token(Token = "0x400159F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Joint joint;

			[Token(Token = "0x40015A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Rigidbody c;

			[Token(Token = "0x40015A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool updateAnchor;

			[Token(Token = "0x40015A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 deltaPosition;

			[Token(Token = "0x40015A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Quaternion deltaRotation;

			[Token(Token = "0x40015A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float deltaTime;

			[Token(Token = "0x40015A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 lastPosition;

			[Token(Token = "0x40015A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Quaternion lastRotation;

			[Token(Token = "0x6001850")]
			[Address(RVA = "0x2904858", Offset = "0x2904858", VA = "0x2904858")]
			public Rigidbone(Rigidbody r)
			{
			}

			[Token(Token = "0x6001851")]
			[Address(RVA = "0x29054D0", Offset = "0x29054D0", VA = "0x29054D0")]
			public void RecordVelocity()
			{
			}

			[Token(Token = "0x6001852")]
			[Address(RVA = "0x29052B4", Offset = "0x29052B4", VA = "0x29052B4")]
			public void WakeUp(float velocityWeight, float angularVelocityWeight)
			{
			}
		}

		[Token(Token = "0x200039C")]
		public class Child
		{
			[Token(Token = "0x40015A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x40015A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 localPosition;

			[Token(Token = "0x40015A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion localRotation;

			[Token(Token = "0x6001853")]
			[Address(RVA = "0x2904A08", Offset = "0x2904A08", VA = "0x2904A08")]
			public Child(Transform transform)
			{
			}

			[Token(Token = "0x6001854")]
			[Address(RVA = "0x290566C", Offset = "0x290566C", VA = "0x290566C")]
			public void FixTransform(float weight)
			{
			}

			[Token(Token = "0x6001855")]
			[Address(RVA = "0x290561C", Offset = "0x290561C", VA = "0x290561C")]
			public void StoreLocalState()
			{
			}
		}

		[Token(Token = "0x200039D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251C08", Offset = "0x1251C08")]
		private sealed class <DisableRagdollSmooth>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RagdollUtility <>4__this;

			[Token(Token = "0x17000196")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001859")]
				[Address(RVA = "0x2905CCC", Offset = "0x2905CCC", VA = "0x2905CCC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000197")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600185B")]
				[Address(RVA = "0x2905D34", Offset = "0x2905D34", VA = "0x2905D34", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001856")]
			[Address(RVA = "0x2904A80", Offset = "0x2904A80", VA = "0x2904A80")]
			[DebuggerHidden]
			public <DisableRagdollSmooth>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6001857")]
			[Address(RVA = "0x2905A64", Offset = "0x2905A64", VA = "0x2905A64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001858")]
			[Address(RVA = "0x2905A68", Offset = "0x2905A68", VA = "0x2905A68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600185A")]
			[Address(RVA = "0x2905CD4", Offset = "0x2905CD4", VA = "0x2905CD4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12589F0", Offset = "0x12589F0")]
		public IK ik;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258A28", Offset = "0x1258A28")]
		public float ragdollToAnimationTime;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258A60", Offset = "0x1258A60")]
		public bool applyIkOnRagdoll;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258A98", Offset = "0x1258A98")]
		public float applyVelocity;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258AD0", Offset = "0x1258AD0")]
		public float applyAngularVelocity;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator animator;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbone[] rigidbones;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Child[] children;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool enableRagdollFlag;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorUpdateMode animatorUpdateMode;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IK[] allIKComponents;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool[] fixTransforms;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float ragdollWeight;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float ragdollWeightV;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool fixedFrame;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] disabledIKComponents;

		[Token(Token = "0x170000C0")]
		private bool isRagdoll
		{
			[Token(Token = "0x6001212")]
			[Address(RVA = "0x2904270", Offset = "0x2904270", VA = "0x2904270")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C1")]
		private bool ikUsed
		{
			[Token(Token = "0x6001214")]
			[Address(RVA = "0x2904E6C", Offset = "0x2904E6C", VA = "0x2904E6C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0x2904238", Offset = "0x2904238", VA = "0x2904238")]
		public void EnableRagdoll()
		{
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0x29042E8", Offset = "0x29042E8", VA = "0x29042E8")]
		public void DisableRagdoll()
		{
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0x2904424", Offset = "0x2904424", VA = "0x2904424")]
		public void Start()
		{
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0x29043A8", Offset = "0x29043A8", VA = "0x29043A8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12633F0", Offset = "0x12633F0")]
		private IEnumerator DisableRagdollSmooth()
		{
			return null;
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0x2904AAC", Offset = "0x2904AAC", VA = "0x2904AAC")]
		private void Update()
		{
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0x2904CF8", Offset = "0x2904CF8", VA = "0x2904CF8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0x2904DB0", Offset = "0x2904DB0", VA = "0x2904DB0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0x2904FF0", Offset = "0x2904FF0", VA = "0x2904FF0")]
		private void AfterLastIK()
		{
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0x2904E30", Offset = "0x2904E30", VA = "0x2904E30")]
		private void AfterAnimation()
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0x2904FAC", Offset = "0x2904FAC", VA = "0x2904FAC")]
		private void OnFinalPose()
		{
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0x290508C", Offset = "0x290508C", VA = "0x290508C")]
		private void RagdollEnabler()
		{
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0x2905024", Offset = "0x2905024", VA = "0x2905024")]
		private void RecordVelocities()
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0x2904340", Offset = "0x2904340", VA = "0x2904340")]
		private void StoreLocalState()
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0x2904D38", Offset = "0x2904D38", VA = "0x2904D38")]
		private void FixTransforms(float weight)
		{
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0x2905834", Offset = "0x2905834", VA = "0x2905834")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0x290595C", Offset = "0x290595C", VA = "0x290595C")]
		public RagdollUtility()
		{
		}
	}
	[Token(Token = "0x200025C")]
	public abstract class RotationLimit : MonoBehaviour
	{
		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public Quaternion defaultLocalRotation;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool initiated;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool applicationQuit;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		private bool defaultLocalRotationSet;

		[Token(Token = "0x170000C2")]
		public Vector3 secondaryAxis
		{
			[Token(Token = "0x600121D")]
			[Address(RVA = "0x23D76A0", Offset = "0x23D76A0", VA = "0x23D76A0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000C3")]
		public Vector3 crossAxis
		{
			[Token(Token = "0x600121E")]
			[Address(RVA = "0x23D76DC", Offset = "0x23D76DC", VA = "0x23D76DC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0x23D7328", Offset = "0x23D7328", VA = "0x23D7328")]
		public void SetDefaultLocalRotation()
		{
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0x23D736C", Offset = "0x23D736C", VA = "0x23D736C")]
		public Quaternion GetLimitedLocalRotation(Quaternion localRotation, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0x23D75F8", Offset = "0x23D75F8", VA = "0x23D75F8")]
		public bool Apply()
		{
			return default(bool);
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0x23D7668", Offset = "0x23D7668", VA = "0x23D7668")]
		public void Disable()
		{
		}

		[Token(Token = "0x600121F")]
		protected abstract Quaternion LimitRotation(Quaternion rotation);

		[Token(Token = "0x6001220")]
		[Address(RVA = "0x23D7508", Offset = "0x23D7508", VA = "0x23D7508")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0x23D77AC", Offset = "0x23D77AC", VA = "0x23D77AC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0x23D77B0", Offset = "0x23D77B0", VA = "0x23D77B0")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0x23D7898", Offset = "0x23D7898", VA = "0x23D7898")]
		protected static Quaternion Limit1DOF(Quaternion rotation, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0x23D797C", Offset = "0x23D797C", VA = "0x23D797C")]
		protected static Quaternion LimitTwist(Quaternion rotation, Vector3 axis, Vector3 orthoAxis, float twistLimit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0x23D7BF8", Offset = "0x23D7BF8", VA = "0x23D7BF8")]
		protected static float GetOrthogonalAngle(Vector3 v1, Vector3 v2, Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0x23D7CB4", Offset = "0x23D7CB4", VA = "0x23D7CB4")]
		protected RotationLimit()
		{
		}
	}
	[Token(Token = "0x200025D")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x1250E58", Offset = "0x1250E58")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250E58", Offset = "0x1250E58")]
	public class RotationLimitAngle : RotationLimit
	{
		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1258B18", Offset = "0x1258B18")]
		public float limit;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1258B34", Offset = "0x1258B34")]
		public float twistLimit;

		[Token(Token = "0x6001227")]
		[Address(RVA = "0x23D7D2C", Offset = "0x23D7D2C", VA = "0x23D7D2C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1263454", Offset = "0x1263454")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0x23D7D78", Offset = "0x23D7D78", VA = "0x23D7D78")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x126348C", Offset = "0x126348C")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0x23D7DC4", Offset = "0x23D7DC4", VA = "0x23D7DC4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12634C4", Offset = "0x12634C4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0x23D7E10", Offset = "0x23D7E10", VA = "0x23D7E10")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12634FC", Offset = "0x12634FC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0x23D7E5C", Offset = "0x23D7E5C", VA = "0x23D7E5C", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0x23D7F14", Offset = "0x23D7F14", VA = "0x23D7F14")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0x23D815C", Offset = "0x23D815C", VA = "0x23D815C")]
		public RotationLimitAngle()
		{
		}
	}
	[Token(Token = "0x200025E")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x1250EB8", Offset = "0x1250EB8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250EB8", Offset = "0x1250EB8")]
	public class RotationLimitHinge : RotationLimit
	{
		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		public bool useLimits;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float min;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float max;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public float zeroAxisDisplayOffset;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion lastRotation;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float lastAngle;

		[Token(Token = "0x600122E")]
		[Address(RVA = "0x23D816C", Offset = "0x23D816C", VA = "0x23D816C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1263534", Offset = "0x1263534")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0x23D81B8", Offset = "0x23D81B8", VA = "0x23D81B8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x126356C", Offset = "0x126356C")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0x23D8204", Offset = "0x23D8204", VA = "0x23D8204")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12635A4", Offset = "0x12635A4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0x23D8250", Offset = "0x23D8250", VA = "0x23D8250")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12635DC", Offset = "0x12635DC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0x23D829C", Offset = "0x23D829C", VA = "0x23D829C", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0x23D82C4", Offset = "0x23D82C4", VA = "0x23D82C4")]
		private Quaternion LimitHinge(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0x23D85C4", Offset = "0x23D85C4", VA = "0x23D85C4")]
		public RotationLimitHinge()
		{
		}
	}
	[Token(Token = "0x200025F")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x1250F18", Offset = "0x1250F18")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250F18", Offset = "0x1250F18")]
	public class RotationLimitPolygonal : RotationLimit
	{
		[Serializable]
		[Token(Token = "0x200039E")]
		public class ReachCone
		{
			[Token(Token = "0x40015AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] tetrahedron;

			[Token(Token = "0x40015AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float volume;

			[Token(Token = "0x40015AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 S;

			[Token(Token = "0x40015B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 B;

			[Token(Token = "0x17000198")]
			public Vector3 o
			{
				[Token(Token = "0x600185C")]
				[Address(RVA = "0x23DA650", Offset = "0x23DA650", VA = "0x23DA650")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000199")]
			public Vector3 a
			{
				[Token(Token = "0x600185D")]
				[Address(RVA = "0x23DA688", Offset = "0x23DA688", VA = "0x23DA688")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700019A")]
			public Vector3 b
			{
				[Token(Token = "0x600185E")]
				[Address(RVA = "0x23DA6C4", Offset = "0x23DA6C4", VA = "0x23DA6C4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700019B")]
			public Vector3 c
			{
				[Token(Token = "0x600185F")]
				[Address(RVA = "0x23DA700", Offset = "0x23DA700", VA = "0x23DA700")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700019C")]
			public bool isValid
			{
				[Token(Token = "0x6001861")]
				[Address(RVA = "0x23D9794", Offset = "0x23D9794", VA = "0x23D9794")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001860")]
			[Address(RVA = "0x23D9DE0", Offset = "0x23D9DE0", VA = "0x23D9DE0")]
			public ReachCone(Vector3 _o, Vector3 _a, Vector3 _b, Vector3 _c)
			{
			}

			[Token(Token = "0x6001862")]
			[Address(RVA = "0x23D9F54", Offset = "0x23D9F54", VA = "0x23D9F54")]
			public void Calculate()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200039F")]
		public class LimitPoint
		{
			[Token(Token = "0x40015B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 point;

			[Token(Token = "0x40015B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float tangentWeight;

			[Token(Token = "0x6001863")]
			[Address(RVA = "0x23D97A4", Offset = "0x23D97A4", VA = "0x23D97A4")]
			public LimitPoint()
			{
			}
		}

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1258B60", Offset = "0x1258B60")]
		public float twistLimit;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1258B7C", Offset = "0x1258B7C")]
		public int smoothIterations;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public LimitPoint[] points;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		public Vector3[] P;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		public ReachCone[] reachCones;

		[Token(Token = "0x6001235")]
		[Address(RVA = "0x23D864C", Offset = "0x23D864C", VA = "0x23D864C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1263614", Offset = "0x1263614")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0x23D8698", Offset = "0x23D8698", VA = "0x23D8698")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x126364C", Offset = "0x126364C")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0x23D86E4", Offset = "0x23D86E4", VA = "0x23D86E4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1263684", Offset = "0x1263684")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0x23D8730", Offset = "0x23D8730", VA = "0x23D8730")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12636BC", Offset = "0x12636BC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0x23D877C", Offset = "0x23D877C", VA = "0x23D877C")]
		public void SetLimitPoints(LimitPoint[] points)
		{
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0x23D8CBC", Offset = "0x23D8CBC", VA = "0x23D8CBC", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0x23D8DB4", Offset = "0x23D8DB4", VA = "0x23D8DB4")]
		private void Start()
		{
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0x23D93B4", Offset = "0x23D93B4", VA = "0x23D93B4")]
		public void ResetToDefault()
		{
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0x23D8824", Offset = "0x23D8824", VA = "0x23D8824")]
		public void BuildReachCones()
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0x23D9828", Offset = "0x23D9828", VA = "0x23D9828")]
		private Vector3[] SmoothPoints()
		{
			return null;
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0x23DA114", Offset = "0x23DA114", VA = "0x23DA114")]
		private float GetScalar(int k)
		{
			return default(float);
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0x23DA158", Offset = "0x23DA158", VA = "0x23DA158")]
		private Vector3 PointToTangentPlane(Vector3 p, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0x23DA2A0", Offset = "0x23DA2A0", VA = "0x23DA2A0")]
		private Vector3 TangentPointToSphere(Vector3 q, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0x23D907C", Offset = "0x23D907C", VA = "0x23D907C")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0x23DA430", Offset = "0x23DA430", VA = "0x23DA430")]
		private int GetReachCone(Vector3 L)
		{
			return default(int);
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0x23DA5E0", Offset = "0x23DA5E0", VA = "0x23DA5E0")]
		public RotationLimitPolygonal()
		{
		}
	}
	[Token(Token = "0x2000260")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x1250F78", Offset = "0x1250F78")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1250F78", Offset = "0x1250F78")]
	public class RotationLimitSpline : RotationLimit
	{
		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1258C3C", Offset = "0x1258C3C")]
		public float twistLimit;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public AnimationCurve spline;

		[Token(Token = "0x6001245")]
		[Address(RVA = "0x23DA73C", Offset = "0x23DA73C", VA = "0x23DA73C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x12636F4", Offset = "0x12636F4")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0x23DA788", Offset = "0x23DA788", VA = "0x23DA788")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x126372C", Offset = "0x126372C")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0x23DA7D4", Offset = "0x23DA7D4", VA = "0x23DA7D4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x1263764", Offset = "0x1263764")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0x23DA820", Offset = "0x23DA820", VA = "0x23DA820")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0x126379C", Offset = "0x126379C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0x23DA86C", Offset = "0x23DA86C", VA = "0x23DA86C")]
		public void SetSpline(Keyframe[] keyframes)
		{
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0x23DA888", Offset = "0x23DA888", VA = "0x23DA888", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0x23DA940", Offset = "0x23DA940", VA = "0x23DA940")]
		public Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0x23DAC6C", Offset = "0x23DAC6C", VA = "0x23DAC6C")]
		public RotationLimitSpline()
		{
		}
	}
	[Token(Token = "0x2000261")]
	public class AimController : MonoBehaviour
	{
		[Token(Token = "0x20003A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251C18", Offset = "0x1251C18")]
		private sealed class <TurnToTarget>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AimController <>4__this;

			[Token(Token = "0x1700019D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001867")]
				[Address(RVA = "0x2313AB0", Offset = "0x2313AB0", VA = "0x2313AB0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700019E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001869")]
				[Address(RVA = "0x2313B18", Offset = "0x2313B18", VA = "0x2313B18", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001864")]
			[Address(RVA = "0x2313880", Offset = "0x2313880", VA = "0x2313880")]
			[DebuggerHidden]
			public <TurnToTarget>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6001865")]
			[Address(RVA = "0x2313980", Offset = "0x2313980", VA = "0x2313980", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001866")]
			[Address(RVA = "0x2313984", Offset = "0x2313984", VA = "0x2313984", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001868")]
			[Address(RVA = "0x2313AB8", Offset = "0x2313AB8", VA = "0x2313AB8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258C90", Offset = "0x1258C90")]
		public AimIK ik;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258CC8", Offset = "0x1258CC8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1258CC8", Offset = "0x1258CC8")]
		public float weight;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1258D1C", Offset = "0x1258D1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258D1C", Offset = "0x1258D1C")]
		public Transform target;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258D7C", Offset = "0x1258D7C")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258DB4", Offset = "0x1258DB4")]
		public float weightSmoothTime;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1258DEC", Offset = "0x1258DEC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258DEC", Offset = "0x1258DEC")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258E4C", Offset = "0x1258E4C")]
		public float maxRadiansDelta;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258E84", Offset = "0x1258E84")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258EBC", Offset = "0x1258EBC")]
		public float slerpSpeed;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258EF4", Offset = "0x1258EF4")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258F2C", Offset = "0x1258F2C")]
		public float minDistance;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258F64", Offset = "0x1258F64")]
		public Vector3 offset;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1258F9C", Offset = "0x1258F9C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1258F9C", Offset = "0x1258F9C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1258F9C", Offset = "0x1258F9C")]
		public float maxRootAngle;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259018", Offset = "0x1259018")]
		public bool turnToTarget;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259050", Offset = "0x1259050")]
		public float turnToTargetTime;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1259088", Offset = "0x1259088")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259088", Offset = "0x1259088")]
		public bool useAnimatedAimDirection;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12590E8", Offset = "0x12590E8")]
		public Vector3 animatedAimDirection;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform lastTarget;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float switchWeight;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float switchWeightV;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float weightV;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 dir;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool turningToTarget;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float turnToTargetMlp;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float turnToTargetMlpV;

		[Token(Token = "0x170000C4")]
		private Vector3 pivot
		{
			[Token(Token = "0x600124F")]
			[Address(RVA = "0x2312A84", Offset = "0x2312A84", VA = "0x2312A84")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0x2312984", Offset = "0x2312984", VA = "0x2312984")]
		private void Start()
		{
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0x2312BD0", Offset = "0x2312BD0", VA = "0x2312BD0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0x23132F8", Offset = "0x23132F8", VA = "0x23132F8")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0x2313494", Offset = "0x2313494", VA = "0x2313494")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0x2313804", Offset = "0x2313804", VA = "0x2313804")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12637D4", Offset = "0x12637D4")]
		private IEnumerator TurnToTarget()
		{
			return null;
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0x23138AC", Offset = "0x23138AC", VA = "0x23138AC")]
		public AimController()
		{
		}
	}
	[Token(Token = "0x2000262")]
	public class AimPoser : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003A1")]
		public class Pose
		{
			[Token(Token = "0x40015B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool visualize;

			[Token(Token = "0x40015B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x40015B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 direction;

			[Token(Token = "0x40015B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float yaw;

			[Token(Token = "0x40015BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float pitch;

			[Token(Token = "0x40015BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float angleBuffer;

			[Token(Token = "0x600186A")]
			[Address(RVA = "0x2317A34", Offset = "0x2317A34", VA = "0x2317A34")]
			public bool IsInDirection(Vector3 d)
			{
				return default(bool);
			}

			[Token(Token = "0x600186B")]
			[Address(RVA = "0x2317DAC", Offset = "0x2317DAC", VA = "0x2317DAC")]
			public void SetAngleBuffer(float value)
			{
			}

			[Token(Token = "0x600186C")]
			[Address(RVA = "0x2317DB4", Offset = "0x2317DB4", VA = "0x2317DB4")]
			public Pose()
			{
			}
		}

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float angleBuffer;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pose[] poses;

		[Token(Token = "0x6001254")]
		[Address(RVA = "0x2317958", Offset = "0x2317958", VA = "0x2317958")]
		public Pose GetPose(Vector3 localDirection)
		{
			return null;
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0x2317CCC", Offset = "0x2317CCC", VA = "0x2317CCC")]
		public void SetPoseActive(Pose pose)
		{
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0x2317D38", Offset = "0x2317D38", VA = "0x2317D38")]
		public AimPoser()
		{
		}
	}
	[Token(Token = "0x2000263")]
	public class Amplifier : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20003A2")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x2000432")]
			public class EffectorLink
			{
				[Token(Token = "0x4001742")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12604F8", Offset = "0x12604F8")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4001743")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1260530", Offset = "0x1260530")]
				public float weight;

				[Token(Token = "0x60019FF")]
				[Address(RVA = "0x23183A4", Offset = "0x23183A4", VA = "0x23183A4")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x40015BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F520", Offset = "0x125F520")]
			public Transform transform;

			[Token(Token = "0x40015BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F558", Offset = "0x125F558")]
			public Transform relativeTo;

			[Token(Token = "0x40015BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F590", Offset = "0x125F590")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x40015BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F5C8", Offset = "0x125F5C8")]
			public float verticalWeight;

			[Token(Token = "0x40015C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F600", Offset = "0x125F600")]
			public float horizontalWeight;

			[Token(Token = "0x40015C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F638", Offset = "0x125F638")]
			public float speed;

			[Token(Token = "0x40015C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 lastRelativePos;

			[Token(Token = "0x40015C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 smoothDelta;

			[Token(Token = "0x40015C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private bool firstUpdate;

			[Token(Token = "0x600186D")]
			[Address(RVA = "0x2317F10", Offset = "0x2317F10", VA = "0x2317F10")]
			public void Update(IKSolverFullBodyBiped solver, float w, float deltaTime)
			{
			}

			[Token(Token = "0x600186E")]
			[Address(RVA = "0x231837C", Offset = "0x231837C", VA = "0x231837C")]
			private static Vector3 Multiply(Vector3 v1, Vector3 v2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600186F")]
			[Address(RVA = "0x231838C", Offset = "0x231838C", VA = "0x231838C")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259120", Offset = "0x1259120")]
		public Body[] bodies;

		[Token(Token = "0x6001257")]
		[Address(RVA = "0x2317DD0", Offset = "0x2317DD0", VA = "0x2317DD0", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0x2318374", Offset = "0x2318374", VA = "0x2318374")]
		public Amplifier()
		{
		}
	}
	[Token(Token = "0x2000264")]
	public class BodyTilt : OffsetModifier
	{
		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259158", Offset = "0x1259158")]
		public float tiltSpeed;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259190", Offset = "0x1259190")]
		public float tiltSensitivity;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12591C8", Offset = "0x12591C8")]
		public OffsetPose poseLeft;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259200", Offset = "0x1259200")]
		public OffsetPose poseRight;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float tiltAngle;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 lastForward;

		[Token(Token = "0x6001259")]
		[Address(RVA = "0x2319A24", Offset = "0x2319A24", VA = "0x2319A24", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0x2319A6C", Offset = "0x2319A6C", VA = "0x2319A6C", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0x2319C9C", Offset = "0x2319C9C", VA = "0x2319C9C")]
		public BodyTilt()
		{
		}
	}
	[Token(Token = "0x2000265")]
	public class HitReaction : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20003A3")]
		public abstract class HitPoint
		{
			[Token(Token = "0x40015C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F670", Offset = "0x125F670")]
			public string name;

			[Token(Token = "0x40015C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F6A8", Offset = "0x125F6A8")]
			public Collider collider;

			[Token(Token = "0x40015C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F6E0", Offset = "0x125F6E0")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x40015C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125F72C", Offset = "0x125F72C")]
			private float <crossFader>k__BackingField;

			[Token(Token = "0x40015C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125F73C", Offset = "0x125F73C")]
			private float <timer>k__BackingField;

			[Token(Token = "0x40015CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125F74C", Offset = "0x125F74C")]
			private Vector3 <force>k__BackingField;

			[Token(Token = "0x40015CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125F75C", Offset = "0x125F75C")]
			private Vector3 <point>k__BackingField;

			[Token(Token = "0x40015CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x40015CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x40015CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x1700019F")]
			public bool inProgress
			{
				[Token(Token = "0x6001870")]
				[Address(RVA = "0x2AE7F14", Offset = "0x2AE7F14", VA = "0x2AE7F14")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170001A0")]
			protected float crossFader
			{
				[Token(Token = "0x6001871")]
				[Address(RVA = "0x2AE84BC", Offset = "0x2AE84BC", VA = "0x2AE84BC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264E9C", Offset = "0x1264E9C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001872")]
				[Address(RVA = "0x2AE84C4", Offset = "0x2AE84C4", VA = "0x2AE84C4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264EAC", Offset = "0x1264EAC")]
				private set
				{
				}
			}

			[Token(Token = "0x170001A1")]
			protected float timer
			{
				[Token(Token = "0x6001873")]
				[Address(RVA = "0x2AE84CC", Offset = "0x2AE84CC", VA = "0x2AE84CC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264EBC", Offset = "0x1264EBC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001874")]
				[Address(RVA = "0x2AE84D4", Offset = "0x2AE84D4", VA = "0x2AE84D4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264ECC", Offset = "0x1264ECC")]
				private set
				{
				}
			}

			[Token(Token = "0x170001A2")]
			protected Vector3 force
			{
				[Token(Token = "0x6001875")]
				[Address(RVA = "0x2AE84DC", Offset = "0x2AE84DC", VA = "0x2AE84DC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264EDC", Offset = "0x1264EDC")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001876")]
				[Address(RVA = "0x2AE84E8", Offset = "0x2AE84E8", VA = "0x2AE84E8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264EEC", Offset = "0x1264EEC")]
				private set
				{
				}
			}

			[Token(Token = "0x170001A3")]
			protected Vector3 point
			{
				[Token(Token = "0x6001877")]
				[Address(RVA = "0x2AE84F4", Offset = "0x2AE84F4", VA = "0x2AE84F4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264EFC", Offset = "0x1264EFC")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001878")]
				[Address(RVA = "0x2AE8500", Offset = "0x2AE8500", VA = "0x2AE8500")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264F0C", Offset = "0x1264F0C")]
				private set
				{
				}
			}

			[Token(Token = "0x6001879")]
			[Address(RVA = "0x2AE8388", Offset = "0x2AE8388", VA = "0x2AE8388")]
			public void Hit(Vector3 force, Vector3 point)
			{
			}

			[Token(Token = "0x600187A")]
			[Address(RVA = "0x2AE7FFC", Offset = "0x2AE7FFC", VA = "0x2AE7FFC")]
			public void Apply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x600187B")]
			protected abstract float GetLength();

			[Token(Token = "0x600187C")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x600187D")]
			protected abstract void OnApply(IKSolverFullBodyBiped solver, float weight);

			[Token(Token = "0x600187E")]
			[Address(RVA = "0x2AE850C", Offset = "0x2AE850C", VA = "0x2AE850C")]
			protected HitPoint()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003A4")]
		public class HitPointEffector : HitPoint
		{
			[Serializable]
			[Token(Token = "0x2000433")]
			public class EffectorLink
			{
				[Token(Token = "0x4001744")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1260568", Offset = "0x1260568")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4001745")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12605A0", Offset = "0x12605A0")]
				public float weight;

				[Token(Token = "0x4001746")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x4001747")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6001A00")]
				[Address(RVA = "0x2AE8E88", Offset = "0x2AE8E88", VA = "0x2AE8E88")]
				public void Apply(IKSolverFullBodyBiped solver, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6001A01")]
				[Address(RVA = "0x2AE8C7C", Offset = "0x2AE8C7C", VA = "0x2AE8C7C")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6001A02")]
				[Address(RVA = "0x2AE8FC4", Offset = "0x2AE8FC4", VA = "0x2AE8FC4")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x40015CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F76C", Offset = "0x125F76C")]
			public AnimationCurve offsetInForceDirection;

			[Token(Token = "0x40015D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F7A4", Offset = "0x125F7A4")]
			public AnimationCurve offsetInUpDirection;

			[Token(Token = "0x40015D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F7DC", Offset = "0x125F7DC")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x600187F")]
			[Address(RVA = "0x2AE8A98", Offset = "0x2AE8A98", VA = "0x2AE8A98", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x6001880")]
			[Address(RVA = "0x2AE8C10", Offset = "0x2AE8C10", VA = "0x2AE8C10", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6001881")]
			[Address(RVA = "0x2AE8C90", Offset = "0x2AE8C90", VA = "0x2AE8C90", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6001882")]
			[Address(RVA = "0x2AE8FB0", Offset = "0x2AE8FB0", VA = "0x2AE8FB0")]
			public HitPointEffector()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003A5")]
		public class HitPointBone : HitPoint
		{
			[Serializable]
			[Token(Token = "0x2000434")]
			public class BoneLink
			{
				[Token(Token = "0x4001748")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12605D8", Offset = "0x12605D8")]
				public Transform bone;

				[Token(Token = "0x4001749")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1260610", Offset = "0x1260610")]
				[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1260610", Offset = "0x1260610")]
				public float weight;

				[Token(Token = "0x400174A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				private Quaternion lastValue;

				[Token(Token = "0x400174B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
				private Quaternion current;

				[Token(Token = "0x6001A03")]
				[Address(RVA = "0x2AE88A0", Offset = "0x2AE88A0", VA = "0x2AE88A0")]
				public void Apply(IKSolverFullBodyBiped solver, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6001A04")]
				[Address(RVA = "0x2AE8628", Offset = "0x2AE8628", VA = "0x2AE8628")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6001A05")]
				[Address(RVA = "0x2AE8A10", Offset = "0x2AE8A10", VA = "0x2AE8A10")]
				public BoneLink()
				{
				}
			}

			[Token(Token = "0x40015D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F814", Offset = "0x125F814")]
			public AnimationCurve aroundCenterOfMass;

			[Token(Token = "0x40015D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F84C", Offset = "0x125F84C")]
			public BoneLink[] boneLinks;

			[Token(Token = "0x40015D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x6001883")]
			[Address(RVA = "0x2AE8520", Offset = "0x2AE8520", VA = "0x2AE8520", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x6001884")]
			[Address(RVA = "0x2AE85C4", Offset = "0x2AE85C4", VA = "0x2AE85C4", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6001885")]
			[Address(RVA = "0x2AE8634", Offset = "0x2AE8634", VA = "0x2AE8634", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6001886")]
			[Address(RVA = "0x2AE89FC", Offset = "0x2AE89FC", VA = "0x2AE89FC")]
			public HitPointBone()
			{
			}
		}

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259238", Offset = "0x1259238")]
		public HitPointEffector[] effectorHitPoints;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259270", Offset = "0x1259270")]
		public HitPointBone[] boneHitPoints;

		[Token(Token = "0x170000C5")]
		public bool inProgress
		{
			[Token(Token = "0x600125C")]
			[Address(RVA = "0x2AE7E58", Offset = "0x2AE7E58", VA = "0x2AE7E58")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0x2AE7F28", Offset = "0x2AE7F28", VA = "0x2AE7F28", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0x2AE8148", Offset = "0x2AE8148", VA = "0x2AE8148")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0x2AE84B4", Offset = "0x2AE84B4", VA = "0x2AE84B4")]
		public HitReaction()
		{
		}
	}
	[Token(Token = "0x2000266")]
	public class HitReactionVRIK : OffsetModifierVRIK
	{
		[Serializable]
		[Token(Token = "0x20003A6")]
		public abstract class Offset
		{
			[Token(Token = "0x40015D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F884", Offset = "0x125F884")]
			public string name;

			[Token(Token = "0x40015D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F8BC", Offset = "0x125F8BC")]
			public Collider collider;

			[Token(Token = "0x40015D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F8F4", Offset = "0x125F8F4")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x40015D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125F940", Offset = "0x125F940")]
			private float <crossFader>k__BackingField;

			[Token(Token = "0x40015D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125F950", Offset = "0x125F950")]
			private float <timer>k__BackingField;

			[Token(Token = "0x40015DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125F960", Offset = "0x125F960")]
			private Vector3 <force>k__BackingField;

			[Token(Token = "0x40015DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x125F970", Offset = "0x125F970")]
			private Vector3 <point>k__BackingField;

			[Token(Token = "0x40015DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x40015DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x40015DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x170001A4")]
			protected float crossFader
			{
				[Token(Token = "0x6001887")]
				[Address(RVA = "0x2AE957C", Offset = "0x2AE957C", VA = "0x2AE957C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264F1C", Offset = "0x1264F1C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001888")]
				[Address(RVA = "0x2AE9584", Offset = "0x2AE9584", VA = "0x2AE9584")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264F2C", Offset = "0x1264F2C")]
				private set
				{
				}
			}

			[Token(Token = "0x170001A5")]
			protected float timer
			{
				[Token(Token = "0x6001889")]
				[Address(RVA = "0x2AE958C", Offset = "0x2AE958C", VA = "0x2AE958C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264F3C", Offset = "0x1264F3C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600188A")]
				[Address(RVA = "0x2AE9594", Offset = "0x2AE9594", VA = "0x2AE9594")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264F4C", Offset = "0x1264F4C")]
				private set
				{
				}
			}

			[Token(Token = "0x170001A6")]
			protected Vector3 force
			{
				[Token(Token = "0x600188B")]
				[Address(RVA = "0x2AE959C", Offset = "0x2AE959C", VA = "0x2AE959C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264F5C", Offset = "0x1264F5C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600188C")]
				[Address(RVA = "0x2AE95A8", Offset = "0x2AE95A8", VA = "0x2AE95A8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264F6C", Offset = "0x1264F6C")]
				private set
				{
				}
			}

			[Token(Token = "0x170001A7")]
			protected Vector3 point
			{
				[Token(Token = "0x600188D")]
				[Address(RVA = "0x2AE95B4", Offset = "0x2AE95B4", VA = "0x2AE95B4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264F7C", Offset = "0x1264F7C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600188E")]
				[Address(RVA = "0x2AE95C0", Offset = "0x2AE95C0", VA = "0x2AE95C0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1264F8C", Offset = "0x1264F8C")]
				private set
				{
				}
			}

			[Token(Token = "0x600188F")]
			[Address(RVA = "0x2AE9434", Offset = "0x2AE9434", VA = "0x2AE9434")]
			public void Hit(Vector3 force, AnimationCurve[] curves, Vector3 point)
			{
			}

			[Token(Token = "0x6001890")]
			[Address(RVA = "0x2AE9098", Offset = "0x2AE9098", VA = "0x2AE9098")]
			public void Apply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6001891")]
			protected abstract float GetLength(AnimationCurve[] curves);

			[Token(Token = "0x6001892")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x6001893")]
			protected abstract void OnApply(VRIK ik, AnimationCurve[] curves, float weight);

			[Token(Token = "0x6001894")]
			[Address(RVA = "0x2AE95CC", Offset = "0x2AE95CC", VA = "0x2AE95CC")]
			protected Offset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003A7")]
		public class PositionOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x2000435")]
			public class PositionOffsetLink
			{
				[Token(Token = "0x400174C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1260664", Offset = "0x1260664")]
				public IKSolverVR.PositionOffset positionOffset;

				[Token(Token = "0x400174D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x126069C", Offset = "0x126069C")]
				public float weight;

				[Token(Token = "0x400174E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x400174F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6001A06")]
				[Address(RVA = "0x2AE9A88", Offset = "0x2AE9A88", VA = "0x2AE9A88")]
				public void Apply(VRIK ik, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6001A07")]
				[Address(RVA = "0x2AE9844", Offset = "0x2AE9844", VA = "0x2AE9844")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6001A08")]
				[Address(RVA = "0x2AE9BA4", Offset = "0x2AE9BA4", VA = "0x2AE9BA4")]
				public PositionOffsetLink()
				{
				}
			}

			[Token(Token = "0x40015DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F980", Offset = "0x125F980")]
			public int forceDirCurveIndex;

			[Token(Token = "0x40015E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F9B8", Offset = "0x125F9B8")]
			public int upDirCurveIndex;

			[Token(Token = "0x40015E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125F9F0", Offset = "0x125F9F0")]
			public PositionOffsetLink[] offsetLinks;

			[Token(Token = "0x6001895")]
			[Address(RVA = "0x2AE95E0", Offset = "0x2AE95E0", VA = "0x2AE95E0", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x6001896")]
			[Address(RVA = "0x2AE97D8", Offset = "0x2AE97D8", VA = "0x2AE97D8", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6001897")]
			[Address(RVA = "0x2AE9858", Offset = "0x2AE9858", VA = "0x2AE9858", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6001898")]
			[Address(RVA = "0x2AE9B88", Offset = "0x2AE9B88", VA = "0x2AE9B88")]
			public PositionOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003A8")]
		public class RotationOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x2000436")]
			public class RotationOffsetLink
			{
				[Token(Token = "0x4001750")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12606D4", Offset = "0x12606D4")]
				public IKSolverVR.RotationOffset rotationOffset;

				[Token(Token = "0x4001751")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x126070C", Offset = "0x126070C")]
				[AttributeAttribute(Name = "RangeAttribute", RVA = "0x126070C", Offset = "0x126070C")]
				public float weight;

				[Token(Token = "0x4001752")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Quaternion lastValue;

				[Token(Token = "0x4001753")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private Quaternion current;

				[Token(Token = "0x6001A09")]
				[Address(RVA = "0x2AEA020", Offset = "0x2AEA020", VA = "0x2AEA020")]
				public void Apply(VRIK ik, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6001A0A")]
				[Address(RVA = "0x2AE9CF4", Offset = "0x2AE9CF4", VA = "0x2AE9CF4")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6001A0B")]
				[Address(RVA = "0x2AEA15C", Offset = "0x2AEA15C", VA = "0x2AEA15C")]
				public RotationOffsetLink()
				{
				}
			}

			[Token(Token = "0x40015E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FA28", Offset = "0x125FA28")]
			public int curveIndex;

			[Token(Token = "0x40015E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FA60", Offset = "0x125FA60")]
			public RotationOffsetLink[] offsetLinks;

			[Token(Token = "0x40015E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x6001899")]
			[Address(RVA = "0x2AE9BAC", Offset = "0x2AE9BAC", VA = "0x2AE9BAC", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x600189A")]
			[Address(RVA = "0x2AE9C90", Offset = "0x2AE9C90", VA = "0x2AE9C90", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x600189B")]
			[Address(RVA = "0x2AE9D00", Offset = "0x2AE9D00", VA = "0x2AE9D00", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x600189C")]
			[Address(RVA = "0x2AEA148", Offset = "0x2AEA148", VA = "0x2AEA148")]
			public RotationOffset()
			{
			}
		}

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve[] offsetCurves;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12592A8", Offset = "0x12592A8")]
		public PositionOffset[] positionOffsets;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12592E0", Offset = "0x12592E0")]
		public RotationOffset[] rotationOffsets;

		[Token(Token = "0x6001260")]
		[Address(RVA = "0x2AE8FCC", Offset = "0x2AE8FCC", VA = "0x2AE8FCC", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0x2AE91EC", Offset = "0x2AE91EC", VA = "0x2AE91EC")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0x2AE9574", Offset = "0x2AE9574", VA = "0x2AE9574")]
		public HitReactionVRIK()
		{
		}
	}
	[Token(Token = "0x2000267")]
	public class Inertia : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20003A9")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x2000437")]
			public class EffectorLink
			{
				[Token(Token = "0x4001754")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1260760", Offset = "0x1260760")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4001755")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1260798", Offset = "0x1260798")]
				public float weight;

				[Token(Token = "0x6001A0C")]
				[Address(RVA = "0x28F7AB8", Offset = "0x28F7AB8", VA = "0x28F7AB8")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x40015E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FA98", Offset = "0x125FA98")]
			public Transform transform;

			[Token(Token = "0x40015E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FAD0", Offset = "0x125FAD0")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x40015E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FB08", Offset = "0x125FB08")]
			public float speed;

			[Token(Token = "0x40015E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FB40", Offset = "0x125FB40")]
			public float acceleration;

			[Token(Token = "0x40015E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FB78", Offset = "0x125FB78")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125FB78", Offset = "0x125FB78")]
			public float matchVelocity;

			[Token(Token = "0x40015EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FBCC", Offset = "0x125FBCC")]
			public float gravity;

			[Token(Token = "0x40015EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 delta;

			[Token(Token = "0x40015EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lazyPoint;

			[Token(Token = "0x40015ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 direction;

			[Token(Token = "0x40015EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 lastPosition;

			[Token(Token = "0x40015EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private bool firstUpdate;

			[Token(Token = "0x600189D")]
			[Address(RVA = "0x28F7488", Offset = "0x28F7488", VA = "0x28F7488")]
			public void Reset()
			{
			}

			[Token(Token = "0x600189E")]
			[Address(RVA = "0x28F7648", Offset = "0x28F7648", VA = "0x28F7648")]
			public void Update(IKSolverFullBodyBiped solver, float weight, float deltaTime)
			{
			}

			[Token(Token = "0x600189F")]
			[Address(RVA = "0x28F7A9C", Offset = "0x28F7A9C", VA = "0x28F7A9C")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259318", Offset = "0x1259318")]
		public Body[] bodies;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259350", Offset = "0x1259350")]
		public OffsetLimits[] limits;

		[Token(Token = "0x6001263")]
		[Address(RVA = "0x28F7410", Offset = "0x28F7410", VA = "0x28F7410")]
		public void ResetBodies()
		{
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0x28F7564", Offset = "0x28F7564", VA = "0x28F7564", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0x28F7A7C", Offset = "0x28F7A7C", VA = "0x28F7A7C")]
		public Inertia()
		{
		}
	}
	[Token(Token = "0x2000268")]
	public class LookAtController : MonoBehaviour
	{
		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LookAtIK ik;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1259388", Offset = "0x1259388")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259388", Offset = "0x1259388")]
		public Transform target;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12593E8", Offset = "0x12593E8")]
		public float weight;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 offset;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259400", Offset = "0x1259400")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259438", Offset = "0x1259438")]
		public float weightSmoothTime;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x1259470", Offset = "0x1259470")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259470", Offset = "0x1259470")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12594D0", Offset = "0x12594D0")]
		public float maxRadiansDelta;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259508", Offset = "0x1259508")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259540", Offset = "0x1259540")]
		public float slerpSpeed;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259578", Offset = "0x1259578")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12595B0", Offset = "0x12595B0")]
		public float minDistance;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x12595E8", Offset = "0x12595E8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12595E8", Offset = "0x12595E8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12595E8", Offset = "0x12595E8")]
		public float maxRootAngle;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lastTarget;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float switchWeight;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float switchWeightV;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float weightV;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 dir;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x170000C6")]
		private Vector3 pivot
		{
			[Token(Token = "0x6001268")]
			[Address(RVA = "0x290194C", Offset = "0x290194C", VA = "0x290194C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0x2901864", Offset = "0x2901864", VA = "0x2901864")]
		private void Start()
		{
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0x2901A98", Offset = "0x2901A98", VA = "0x2901A98")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0x290213C", Offset = "0x290213C", VA = "0x290213C")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0x29022D8", Offset = "0x29022D8", VA = "0x29022D8")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0x29025F4", Offset = "0x29025F4", VA = "0x29025F4")]
		public LookAtController()
		{
		}
	}
	[Token(Token = "0x2000269")]
	public abstract class OffsetModifier : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003AA")]
		public class OffsetLimits
		{
			[Token(Token = "0x40015F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FC04", Offset = "0x125FC04")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x40015F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FC3C", Offset = "0x125FC3C")]
			public float spring;

			[Token(Token = "0x40015F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FC74", Offset = "0x125FC74")]
			public bool x;

			[Token(Token = "0x40015F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FCAC", Offset = "0x125FCAC")]
			public bool y;

			[Token(Token = "0x40015F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FCE4", Offset = "0x125FCE4")]
			public bool z;

			[Token(Token = "0x40015F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FD1C", Offset = "0x125FD1C")]
			public float minX;

			[Token(Token = "0x40015F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FD54", Offset = "0x125FD54")]
			public float maxX;

			[Token(Token = "0x40015F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FD8C", Offset = "0x125FD8C")]
			public float minY;

			[Token(Token = "0x40015F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FDC4", Offset = "0x125FDC4")]
			public float maxY;

			[Token(Token = "0x40015F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FDFC", Offset = "0x125FDFC")]
			public float minZ;

			[Token(Token = "0x40015FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FE34", Offset = "0x125FE34")]
			public float maxZ;

			[Token(Token = "0x60018A0")]
			[Address(RVA = "0x2902A34", Offset = "0x2902A34", VA = "0x2902A34")]
			public void Apply(IKEffector e, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x60018A1")]
			[Address(RVA = "0x2902F80", Offset = "0x2902F80", VA = "0x2902F80")]
			private float SpringAxis(float value, float min, float max)
			{
				return default(float);
			}

			[Token(Token = "0x60018A2")]
			[Address(RVA = "0x2902FB0", Offset = "0x2902FB0", VA = "0x2902FB0")]
			private float Spring(float value, float limit, bool negative)
			{
				return default(float);
			}

			[Token(Token = "0x60018A3")]
			[Address(RVA = "0x2903088", Offset = "0x2903088", VA = "0x2903088")]
			public OffsetLimits()
			{
			}
		}

		[Token(Token = "0x20003AB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251C28", Offset = "0x1251C28")]
		private sealed class <Initiate>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifier <>4__this;

			[Token(Token = "0x170001A8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60018A7")]
				[Address(RVA = "0x2902F10", Offset = "0x2902F10", VA = "0x2902F10", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60018A9")]
				[Address(RVA = "0x2902F78", Offset = "0x2902F78", VA = "0x2902F78", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018A4")]
			[Address(RVA = "0x29028FC", Offset = "0x29028FC", VA = "0x29028FC")]
			[DebuggerHidden]
			public <Initiate>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60018A5")]
			[Address(RVA = "0x2902DB0", Offset = "0x2902DB0", VA = "0x2902DB0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60018A6")]
			[Address(RVA = "0x2902DB4", Offset = "0x2902DB4", VA = "0x2902DB4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60018A8")]
			[Address(RVA = "0x2902F18", Offset = "0x2902F18", VA = "0x2902F18", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259664", Offset = "0x1259664")]
		public float weight;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125969C", Offset = "0x125969C")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float lastTime;

		[Token(Token = "0x170000C7")]
		protected float deltaTime
		{
			[Token(Token = "0x600126C")]
			[Address(RVA = "0x28F761C", Offset = "0x28F761C", VA = "0x28F761C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600126D")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x600126E")]
		[Address(RVA = "0x2902854", Offset = "0x2902854", VA = "0x2902854", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0x2902880", Offset = "0x2902880", VA = "0x2902880")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1263838", Offset = "0x1263838")]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0x2902928", Offset = "0x2902928", VA = "0x2902928")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0x28F79C0", Offset = "0x28F79C0", VA = "0x28F79C0")]
		protected void ApplyLimits(OffsetLimits[] limits)
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0x2902C94", Offset = "0x2902C94", VA = "0x2902C94", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0x28F7A8C", Offset = "0x28F7A8C", VA = "0x28F7A8C")]
		protected OffsetModifier()
		{
		}
	}
	[Token(Token = "0x200026A")]
	public abstract class OffsetModifierVRIK : MonoBehaviour
	{
		[Token(Token = "0x20003AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251C38", Offset = "0x1251C38")]
		private sealed class <Initiate>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001600")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifierVRIK <>4__this;

			[Token(Token = "0x170001AA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60018AD")]
				[Address(RVA = "0x2903528", Offset = "0x2903528", VA = "0x2903528", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60018AF")]
				[Address(RVA = "0x2903590", Offset = "0x2903590", VA = "0x2903590", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018AA")]
			[Address(RVA = "0x2903164", Offset = "0x2903164", VA = "0x2903164")]
			[DebuggerHidden]
			public <Initiate>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60018AB")]
			[Address(RVA = "0x29033C8", Offset = "0x29033C8", VA = "0x29033C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60018AC")]
			[Address(RVA = "0x29033CC", Offset = "0x29033CC", VA = "0x29033CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60018AE")]
			[Address(RVA = "0x2903530", Offset = "0x2903530", VA = "0x2903530", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12596D4", Offset = "0x12596D4")]
		public float weight;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125970C", Offset = "0x125970C")]
		public VRIK ik;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastTime;

		[Token(Token = "0x170000C8")]
		protected float deltaTime
		{
			[Token(Token = "0x6001274")]
			[Address(RVA = "0x2903090", Offset = "0x2903090", VA = "0x2903090")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001275")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x6001276")]
		[Address(RVA = "0x29030BC", Offset = "0x29030BC", VA = "0x29030BC", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0x29030E8", Offset = "0x29030E8", VA = "0x29030E8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x126389C", Offset = "0x126389C")]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0x2903190", Offset = "0x2903190", VA = "0x2903190")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0x290329C", Offset = "0x290329C", VA = "0x290329C", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0x29033B8", Offset = "0x29033B8", VA = "0x29033B8")]
		protected OffsetModifierVRIK()
		{
		}
	}
	[Token(Token = "0x200026B")]
	public class OffsetPose : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003AD")]
		public class EffectorLink
		{
			[Token(Token = "0x4001601")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4001602")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 offset;

			[Token(Token = "0x4001603")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 pin;

			[Token(Token = "0x4001604")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 pinWeight;

			[Token(Token = "0x60018B0")]
			[Address(RVA = "0x2903658", Offset = "0x2903658", VA = "0x2903658")]
			public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
			{
			}

			[Token(Token = "0x60018B1")]
			[Address(RVA = "0x2903AB4", Offset = "0x2903AB4", VA = "0x2903AB4")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x600127B")]
		[Address(RVA = "0x2903598", Offset = "0x2903598", VA = "0x2903598")]
		public void Apply(IKSolverFullBodyBiped solver, float weight)
		{
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0x2903990", Offset = "0x2903990", VA = "0x2903990")]
		public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
		{
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0x2903A48", Offset = "0x2903A48", VA = "0x2903A48")]
		public OffsetPose()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class PenetrationAvoidance : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20003AE")]
		public class Avoider
		{
			[Serializable]
			[Token(Token = "0x2000438")]
			public class EffectorLink
			{
				[Token(Token = "0x4001756")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12607D0", Offset = "0x12607D0")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4001757")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1260808", Offset = "0x1260808")]
				public float weight;

				[Token(Token = "0x6001A0D")]
				[Address(RVA = "0x290416C", Offset = "0x290416C", VA = "0x290416C")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4001605")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FE6C", Offset = "0x125FE6C")]
			public Transform[] raycastFrom;

			[Token(Token = "0x4001606")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FEA4", Offset = "0x125FEA4")]
			public Transform raycastTo;

			[Token(Token = "0x4001607")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FEDC", Offset = "0x125FEDC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125FEDC", Offset = "0x125FEDC")]
			public float raycastRadius;

			[Token(Token = "0x4001608")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FF30", Offset = "0x125FF30")]
			public EffectorLink[] effectors;

			[Token(Token = "0x4001609")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FF68", Offset = "0x125FF68")]
			public float smoothTimeIn;

			[Token(Token = "0x400160A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FFA0", Offset = "0x125FFA0")]
			public float smoothTimeOut;

			[Token(Token = "0x400160B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125FFD8", Offset = "0x125FFD8")]
			public LayerMask layers;

			[Token(Token = "0x400160C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 offset;

			[Token(Token = "0x400160D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 offsetTarget;

			[Token(Token = "0x400160E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 offsetV;

			[Token(Token = "0x60018B2")]
			[Address(RVA = "0x2903B40", Offset = "0x2903B40", VA = "0x2903B40")]
			public void Solve(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x60018B3")]
			[Address(RVA = "0x2903D4C", Offset = "0x2903D4C", VA = "0x2903D4C")]
			private Vector3 GetOffsetTarget(IKSolverFullBodyBiped solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60018B4")]
			[Address(RVA = "0x2903EE4", Offset = "0x2903EE4", VA = "0x2903EE4")]
			private Vector3 Raycast(Vector3 from, Vector3 to)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60018B5")]
			[Address(RVA = "0x2904158", Offset = "0x2904158", VA = "0x2904158")]
			public Avoider()
			{
			}
		}

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259744", Offset = "0x1259744")]
		public Avoider[] avoiders;

		[Token(Token = "0x600127E")]
		[Address(RVA = "0x2903ABC", Offset = "0x2903ABC", VA = "0x2903ABC", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0x2903D3C", Offset = "0x2903D3C", VA = "0x2903D3C")]
		public PenetrationAvoidance()
		{
		}
	}
	[Token(Token = "0x200026D")]
	public class Recoil : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20003AF")]
		public class RecoilOffset
		{
			[Serializable]
			[Token(Token = "0x2000439")]
			public class EffectorLink
			{
				[Token(Token = "0x4001758")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1260840", Offset = "0x1260840")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4001759")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1260878", Offset = "0x1260878")]
				public float weight;

				[Token(Token = "0x6001A0E")]
				[Address(RVA = "0x23D7320", Offset = "0x23D7320", VA = "0x23D7320")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x400160F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1260010", Offset = "0x1260010")]
			public Vector3 offset;

			[Token(Token = "0x4001610")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1260048", Offset = "0x1260048")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1260048", Offset = "0x1260048")]
			public float additivity;

			[Token(Token = "0x4001611")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x126009C", Offset = "0x126009C")]
			public float maxAdditiveOffsetMag;

			[Token(Token = "0x4001612")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12600D4", Offset = "0x12600D4")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4001613")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 additiveOffset;

			[Token(Token = "0x4001614")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lastOffset;

			[Token(Token = "0x60018B6")]
			[Address(RVA = "0x2905F64", Offset = "0x2905F64", VA = "0x2905F64")]
			public void Start()
			{
			}

			[Token(Token = "0x60018B7")]
			[Address(RVA = "0x2906B18", Offset = "0x2906B18", VA = "0x2906B18")]
			public void Apply(IKSolverFullBodyBiped solver, Quaternion rotation, float masterWeight, float length, float timeLeft)
			{
			}

			[Token(Token = "0x60018B8")]
			[Address(RVA = "0x2907260", Offset = "0x2907260", VA = "0x2907260")]
			public RecoilOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003B0")]
		public enum Handedness
		{
			[Token(Token = "0x4001616")]
			Right,
			[Token(Token = "0x4001617")]
			Left
		}

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125977C", Offset = "0x125977C")]
		public AimIK aimIK;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12597B4", Offset = "0x12597B4")]
		public bool aimIKSolvedLast;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12597EC", Offset = "0x12597EC")]
		public Handedness handedness;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259824", Offset = "0x1259824")]
		public bool twoHanded;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125985C", Offset = "0x125985C")]
		public AnimationCurve recoilWeight;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259894", Offset = "0x1259894")]
		public float magnitudeRandom;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12598CC", Offset = "0x12598CC")]
		public Vector3 rotationRandom;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259904", Offset = "0x1259904")]
		public Vector3 handRotationOffset;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125993C", Offset = "0x125993C")]
		public float blendTime;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x1259974", Offset = "0x1259974")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259974", Offset = "0x1259974")]
		public RecoilOffset[] offsets;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Quaternion rotationOffset;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float magnitudeMlp;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float endTime;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion handRotation;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Quaternion secondaryHandRelativeRotation;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion randomRotation;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float length;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool initiated;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float blendWeight;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float w;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion primaryHandRotation;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool handRotationsSet;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 aimIKAxis;

		[Token(Token = "0x170000C9")]
		public bool isFinished
		{
			[Token(Token = "0x6001280")]
			[Address(RVA = "0x2905D3C", Offset = "0x2905D3C", VA = "0x2905D3C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CA")]
		private IKEffector primaryHandEffector
		{
			[Token(Token = "0x6001286")]
			[Address(RVA = "0x2906DCC", Offset = "0x2906DCC", VA = "0x2906DCC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CB")]
		private IKEffector secondaryHandEffector
		{
			[Token(Token = "0x6001287")]
			[Address(RVA = "0x2906E0C", Offset = "0x2906E0C", VA = "0x2906E0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CC")]
		private Transform primaryHand
		{
			[Token(Token = "0x6001288")]
			[Address(RVA = "0x2906D8C", Offset = "0x2906D8C", VA = "0x2906D8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CD")]
		private Transform secondaryHand
		{
			[Token(Token = "0x6001289")]
			[Address(RVA = "0x2906DAC", Offset = "0x2906DAC", VA = "0x2906DAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0x2905D6C", Offset = "0x2905D6C", VA = "0x2905D6C")]
		public void SetHandRotations(Quaternion leftHandRotation, Quaternion rightHandRotation)
		{
		}

		[Token(Token = "0x6001282")]
		[Address(RVA = "0x2905D98", Offset = "0x2905D98", VA = "0x2905D98")]
		public void Fire(float magnitude)
		{
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0x2906014", Offset = "0x2906014", VA = "0x2906014", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0x2906E4C", Offset = "0x2906E4C", VA = "0x2906E4C")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0x2906FA4", Offset = "0x2906FA4", VA = "0x2906FA4")]
		private void AfterAimIK()
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0x2906FE0", Offset = "0x2906FE0", VA = "0x2906FE0", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0x29071AC", Offset = "0x29071AC", VA = "0x29071AC")]
		public Recoil()
		{
		}
	}
	[Token(Token = "0x200026E")]
	public class ShoulderRotator : MonoBehaviour
	{
		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12599D4", Offset = "0x12599D4")]
		public float weight;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259A0C", Offset = "0x1259A0C")]
		public float offset;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool skip;

		[Token(Token = "0x600128C")]
		[Address(RVA = "0x23DB594", Offset = "0x23DB594", VA = "0x23DB594")]
		private void Start()
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0x23DB688", Offset = "0x23DB688", VA = "0x23DB688")]
		private void RotateShoulders()
		{
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0x23DB774", Offset = "0x23DB774", VA = "0x23DB774")]
		private void RotateShoulder(FullBodyBipedChain chain, float weight, float offset)
		{
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0x23DBBBC", Offset = "0x23DBBBC", VA = "0x23DBBBC")]
		private IKMapping.BoneMap GetParentBoneMap(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0x23DBBF4", Offset = "0x23DBBF4", VA = "0x23DBBF4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0x23DBD10", Offset = "0x23DBD10", VA = "0x23DBD10")]
		public ShoulderRotator()
		{
		}
	}
	[Token(Token = "0x200026F")]
	public static class VRIKCalibrator
	{
		[Serializable]
		[Token(Token = "0x20003B1")]
		public class Settings
		{
			[Token(Token = "0x4001618")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x126010C", Offset = "0x126010C")]
			public float scaleMlp;

			[Token(Token = "0x4001619")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1260144", Offset = "0x1260144")]
			public Vector3 headTrackerForward;

			[Token(Token = "0x400161A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x126017C", Offset = "0x126017C")]
			public Vector3 headTrackerUp;

			[Token(Token = "0x400161B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12601B4", Offset = "0x12601B4")]
			public Vector3 bodyTrackerForward;

			[Token(Token = "0x400161C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12601EC", Offset = "0x12601EC")]
			public Vector3 bodyTrackerUp;

			[Token(Token = "0x400161D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1260224", Offset = "0x1260224")]
			public Vector3 handTrackerForward;

			[Token(Token = "0x400161E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x126025C", Offset = "0x126025C")]
			public Vector3 handTrackerUp;

			[Token(Token = "0x400161F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1260294", Offset = "0x1260294")]
			public Vector3 footTrackerForward;

			[Token(Token = "0x4001620")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12602CC", Offset = "0x12602CC")]
			public Vector3 footTrackerUp;

			[Token(Token = "0x4001621")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x1260304", Offset = "0x1260304")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1260304", Offset = "0x1260304")]
			public Vector3 headOffset;

			[Token(Token = "0x4001622")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1260354", Offset = "0x1260354")]
			public Vector3 handOffset;

			[Token(Token = "0x4001623")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x126038C", Offset = "0x126038C")]
			public float footForwardOffset;

			[Token(Token = "0x4001624")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12603C4", Offset = "0x12603C4")]
			public float footInwardOffset;

			[Token(Token = "0x4001625")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x12603FC", Offset = "0x12603FC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x12603FC", Offset = "0x12603FC")]
			public float footHeadingOffset;

			[Token(Token = "0x4001626")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1260458", Offset = "0x1260458")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4001627")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1260470", Offset = "0x1260470")]
			public float pelvisRotationWeight;

			[Token(Token = "0x60018B9")]
			[Address(RVA = "0x23E117C", Offset = "0x23E117C", VA = "0x23E117C")]
			public Settings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003B2")]
		public class CalibrationData
		{
			[Serializable]
			[Token(Token = "0x200043A")]
			public class Target
			{
				[Token(Token = "0x400175A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public bool used;

				[Token(Token = "0x400175B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				public Vector3 localPosition;

				[Token(Token = "0x400175C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public Quaternion localRotation;

				[Token(Token = "0x6001A0F")]
				[Address(RVA = "0x23E01A8", Offset = "0x23E01A8", VA = "0x23E01A8")]
				public Target(Transform t)
				{
				}

				[Token(Token = "0x6001A10")]
				[Address(RVA = "0x23E0D1C", Offset = "0x23E0D1C", VA = "0x23E0D1C")]
				public void SetTo(Transform t)
				{
				}
			}

			[Token(Token = "0x4001628")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float scale;

			[Token(Token = "0x4001629")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Target head;

			[Token(Token = "0x400162A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Target leftHand;

			[Token(Token = "0x400162B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Target rightHand;

			[Token(Token = "0x400162C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Target pelvis;

			[Token(Token = "0x400162D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Target leftFoot;

			[Token(Token = "0x400162E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Target rightFoot;

			[Token(Token = "0x400162F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Target leftLegGoal;

			[Token(Token = "0x4001630")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Target rightLegGoal;

			[Token(Token = "0x4001631")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Vector3 pelvisTargetRight;

			[Token(Token = "0x4001632")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4001633")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public float pelvisRotationWeight;

			[Token(Token = "0x60018BA")]
			[Address(RVA = "0x23DF5EC", Offset = "0x23DF5EC", VA = "0x23DF5EC")]
			public CalibrationData()
			{
			}
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0x23DE104", Offset = "0x23DE104", VA = "0x23DE104")]
		public static void RecalibrateScale(VRIK ik, Settings settings)
		{
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0x23DE26C", Offset = "0x23DE26C", VA = "0x23DE26C")]
		public static CalibrationData Calibrate(VRIK ik, Settings settings, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
			return null;
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0x23DF764", Offset = "0x23DF764", VA = "0x23DF764")]
		private static void CalibrateLeg(Settings settings, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0x23E026C", Offset = "0x23E026C", VA = "0x23E026C")]
		public static void Calibrate(VRIK ik, CalibrationData data, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0x23E0D7C", Offset = "0x23E0D7C", VA = "0x23E0D7C")]
		private static void CalibrateLeg(CalibrationData data, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}
	}
	[Token(Token = "0x2000270")]
	public class VRIKRootController : MonoBehaviour
	{
		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1259A44", Offset = "0x1259A44")]
		private Vector3 <pelvisTargetRight>k__BackingField;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform pelvisTarget;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform leftFootTarget;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform rightFootTarget;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VRIK ik;

		[Token(Token = "0x170000CE")]
		public Vector3 pelvisTargetRight
		{
			[Token(Token = "0x6001297")]
			[Address(RVA = "0x23E1274", Offset = "0x23E1274", VA = "0x23E1274")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263900", Offset = "0x1263900")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001298")]
			[Address(RVA = "0x23E1280", Offset = "0x23E1280", VA = "0x23E1280")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263910", Offset = "0x1263910")]
			private set
			{
			}
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0x23E128C", Offset = "0x23E128C", VA = "0x23E128C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0x23DFF4C", Offset = "0x23DFF4C", VA = "0x23DFF4C")]
		public void Calibrate()
		{
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0x23E0FD4", Offset = "0x23E0FD4", VA = "0x23E0FD4")]
		public void Calibrate(VRIKCalibrator.CalibrationData data)
		{
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0x23E1388", Offset = "0x23E1388", VA = "0x23E1388")]
		private void OnPreUpdate()
		{
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0x23E182C", Offset = "0x23E182C", VA = "0x23E182C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0x23E1948", Offset = "0x23E1948", VA = "0x23E1948")]
		public VRIKRootController()
		{
		}
	}
}
namespace VRMPlaystation
{
	[Token(Token = "0x2000271")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x1250FD8", Offset = "0x1250FD8")]
	public class PlaystationRegionData : ScriptableObject
	{
		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string masterVersion;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string contentID;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public string npTitleIdDat;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public int ageRating;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private string basePackage;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private string lastFQAPackage;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private string scriptingDefineSymbols;

		[Token(Token = "0x170000CF")]
		public string Define
		{
			[Token(Token = "0x600129F")]
			[Address(RVA = "0x274BF20", Offset = "0x274BF20", VA = "0x274BF20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0x274BF44", Offset = "0x274BF44", VA = "0x274BF44")]
		public PlaystationRegionData()
		{
		}
	}
}
namespace Obi
{
	[Token(Token = "0x2000272")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1251038", Offset = "0x1251038")]
	public class ObiParticleRenderer : MonoBehaviour
	{
		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool render;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Color particleColor;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float radiusScale;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ObiActor actor;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Mesh> meshes;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material material;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Vector3> vertices;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Vector3> normals;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<Color> colors;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<int> triangles;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int particlesPerDrawcall;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int drawcallCount;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3[] particleOffsets;

		[Token(Token = "0x170000D0")]
		public IEnumerable<Mesh> ParticleMeshes
		{
			[Token(Token = "0x60012A1")]
			[Address(RVA = "0x25AA9CC", Offset = "0x25AA9CC", VA = "0x25AA9CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D1")]
		public Material ParticleMaterial
		{
			[Token(Token = "0x60012A2")]
			[Address(RVA = "0x25AA9D4", Offset = "0x25AA9D4", VA = "0x25AA9D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0x25AA9DC", Offset = "0x25AA9DC", VA = "0x25AA9DC")]
		public void Awake()
		{
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0x25AAA3C", Offset = "0x25AAA3C", VA = "0x25AAA3C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0x25AAC40", Offset = "0x25AAC40", VA = "0x25AAC40")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0x25AAEBC", Offset = "0x25AAEBC", VA = "0x25AAEBC")]
		private void Actor_solver_OnFrameEnd(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0x25AB6B4", Offset = "0x25AB6B4", VA = "0x25AB6B4")]
		private void DrawParticles()
		{
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0x25AB63C", Offset = "0x25AB63C", VA = "0x25AB63C")]
		private void Apply(Mesh mesh)
		{
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0x25AAD8C", Offset = "0x25AAD8C", VA = "0x25AAD8C")]
		private void ClearMeshes()
		{
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0x25AB300", Offset = "0x25AB300", VA = "0x25AB300")]
		private void AddParticle(int i, Vector3 position, Color color, float radius)
		{
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0x25AB8D4", Offset = "0x25AB8D4", VA = "0x25AB8D4")]
		public ObiParticleRenderer()
		{
		}
	}
	[Token(Token = "0x2000273")]
	public class ShadowmapExposer : MonoBehaviour
	{
		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Light light;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CommandBuffer afterShadow;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ObiParticleRenderer[] particleRenderers;

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0x270E0DC", Offset = "0x270E0DC", VA = "0x270E0DC")]
		public void Awake()
		{
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0x270E13C", Offset = "0x270E13C", VA = "0x270E13C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0x270E244", Offset = "0x270E244", VA = "0x270E244")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0x270E1F0", Offset = "0x270E1F0", VA = "0x270E1F0")]
		private void Cleanup()
		{
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0x270E248", Offset = "0x270E248", VA = "0x270E248")]
		public void SetupFluidShadowsCommandBuffer()
		{
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0x270E5F4", Offset = "0x270E5F4", VA = "0x270E5F4")]
		private void Update()
		{
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0x270E674", Offset = "0x270E674", VA = "0x270E674")]
		public ShadowmapExposer()
		{
		}
	}
	[Token(Token = "0x2000274")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	public abstract class ObiActor : MonoBehaviour, IObiSolverClient
	{
		[Token(Token = "0x20003B3")]
		public class ObiActorSolverArgs : EventArgs
		{
			[Token(Token = "0x4001634")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private ObiSolver solver;

			[Token(Token = "0x170001AC")]
			public ObiSolver Solver
			{
				[Token(Token = "0x60018BB")]
				[Address(RVA = "0x1DBF02C", Offset = "0x1DBF02C", VA = "0x1DBF02C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018BC")]
			[Address(RVA = "0x1DBDB30", Offset = "0x1DBDB30", VA = "0x1DBDB30")]
			public ObiActorSolverArgs(ObiSolver solver)
			{
			}
		}

		[Token(Token = "0x20003B4")]
		public enum TetherType
		{
			[Token(Token = "0x4001636")]
			AnchorToFixed,
			[Token(Token = "0x4001637")]
			Hierarchical
		}

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1259AE4", Offset = "0x1259AE4")]
		public float worldVelocityScale;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public ObiCollisionMaterial collisionMaterial;

		[NonSerialized]
		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public int[] particleIndices;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Dictionary<Oni.ConstraintType, ObiBatchedConstraints> constraints;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public bool[] active;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public Vector3[] positions;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public Vector4[] restPositions;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public Vector3[] velocities;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public float[] invMasses;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public float[] solidRadii;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public int[] phases;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public Color[] colors;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public int[] deformableTriangles;

		[NonSerialized]
		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected int trianglesOffset;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool inSolver;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		protected bool initializing;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		[SerializeField]
		protected ObiSolver solver;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		[SerializeField]
		protected bool selfCollisions;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		[HideInInspector]
		[SerializeField]
		protected bool initialized;

		[Token(Token = "0x170000D2")]
		public ObiSolver Solver
		{
			[Token(Token = "0x60012B7")]
			[Address(RVA = "0x1DBCFF4", Offset = "0x1DBCFF4", VA = "0x1DBCFF4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012B8")]
			[Address(RVA = "0x1DBCFFC", Offset = "0x1DBCFFC", VA = "0x1DBCFFC")]
			set
			{
			}
		}

		[Token(Token = "0x170000D3")]
		public ObiCollisionMaterial CollisionMaterial
		{
			[Token(Token = "0x60012B9")]
			[Address(RVA = "0x1DBD0B8", Offset = "0x1DBD0B8", VA = "0x1DBD0B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012BA")]
			[Address(RVA = "0x1DBD0C0", Offset = "0x1DBD0C0", VA = "0x1DBD0C0")]
			set
			{
			}
		}

		[Token(Token = "0x170000D4")]
		public bool Initializing
		{
			[Token(Token = "0x60012BB")]
			[Address(RVA = "0x1DBD17C", Offset = "0x1DBD17C", VA = "0x1DBD17C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D5")]
		public bool Initialized
		{
			[Token(Token = "0x60012BC")]
			[Address(RVA = "0x1DBD184", Offset = "0x1DBD184", VA = "0x1DBD184")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D6")]
		public bool InSolver
		{
			[Token(Token = "0x60012BD")]
			[Address(RVA = "0x1DBD18C", Offset = "0x1DBD18C", VA = "0x1DBD18C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D7")]
		public virtual bool SelfCollisions
		{
			[Token(Token = "0x60012BE")]
			[Address(RVA = "0x1DBD194", Offset = "0x1DBD194", VA = "0x1DBD194", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60012BF")]
			[Address(RVA = "0x1DBD19C", Offset = "0x1DBD19C", VA = "0x1DBD19C", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		public virtual Matrix4x4 ActorLocalToWorldMatrix
		{
			[Token(Token = "0x60012C0")]
			[Address(RVA = "0x1DBD1CC", Offset = "0x1DBD1CC", VA = "0x1DBD1CC", Slot = "10")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x170000D9")]
		public virtual Matrix4x4 ActorWorldToLocalMatrix
		{
			[Token(Token = "0x60012C1")]
			[Address(RVA = "0x1DBD200", Offset = "0x1DBD200", VA = "0x1DBD200", Slot = "11")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x170000DA")]
		public virtual bool UsesCustomExternalForces
		{
			[Token(Token = "0x60012C2")]
			[Address(RVA = "0x1DBD234", Offset = "0x1DBD234", VA = "0x1DBD234", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000003")]
		public event EventHandler<ObiActorSolverArgs> OnAddedToSolver
		{
			[Token(Token = "0x60012B3")]
			[Address(RVA = "0x1DBCD64", Offset = "0x1DBCD64", VA = "0x1DBCD64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263920", Offset = "0x1263920")]
			add
			{
			}
			[Token(Token = "0x60012B4")]
			[Address(RVA = "0x1DBCE08", Offset = "0x1DBCE08", VA = "0x1DBCE08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263930", Offset = "0x1263930")]
			remove
			{
			}
		}

		[Token(Token = "0x14000004")]
		public event EventHandler<ObiActorSolverArgs> OnRemovedFromSolver
		{
			[Token(Token = "0x60012B5")]
			[Address(RVA = "0x1DBCEAC", Offset = "0x1DBCEAC", VA = "0x1DBCEAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263940", Offset = "0x1263940")]
			add
			{
			}
			[Token(Token = "0x60012B6")]
			[Address(RVA = "0x1DBCF50", Offset = "0x1DBCF50", VA = "0x1DBCF50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263950", Offset = "0x1263950")]
			remove
			{
			}
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0x1DBD23C", Offset = "0x1DBD23C", VA = "0x1DBD23C", Slot = "13")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0x1DBD240", Offset = "0x1DBD240", VA = "0x1DBD240", Slot = "14")]
		public virtual void Start()
		{
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0x1DBD288", Offset = "0x1DBD288", VA = "0x1DBD288", Slot = "15")]
		public virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0x1DBD29C", Offset = "0x1DBD29C", VA = "0x1DBD29C", Slot = "16")]
		public virtual void DestroyRequiredComponents()
		{
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0x1DBD2A0", Offset = "0x1DBD2A0", VA = "0x1DBD2A0", Slot = "17")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0x1DBD448", Offset = "0x1DBD448", VA = "0x1DBD448", Slot = "18")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0x1DBD61C", Offset = "0x1DBD61C", VA = "0x1DBD61C", Slot = "19")]
		public virtual void ResetActor()
		{
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0x1DBD620", Offset = "0x1DBD620", VA = "0x1DBD620", Slot = "20")]
		public virtual void UpdateParticlePhases()
		{
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0x1DBD6F0", Offset = "0x1DBD6F0", VA = "0x1DBD6F0", Slot = "21")]
		public virtual bool AddToSolver(object info)
		{
			return default(bool);
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0x1DBD940", Offset = "0x1DBD940", VA = "0x1DBD940")]
		public void UpdateDeformableTriangles()
		{
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0x1DBDBB4", Offset = "0x1DBDBB4", VA = "0x1DBDBB4", Slot = "22")]
		public virtual bool RemoveFromSolver(object info)
		{
			return default(bool);
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0x1DBDFA0", Offset = "0x1DBDFA0", VA = "0x1DBDFA0", Slot = "23")]
		public virtual void PushDataToSolver(ParticleData data = ParticleData.NONE)
		{
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0x1DBE584", Offset = "0x1DBE584", VA = "0x1DBE584", Slot = "24")]
		public virtual void PullDataFromSolver(ParticleData data = ParticleData.NONE)
		{
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0x1DBE834", Offset = "0x1DBE834", VA = "0x1DBE834")]
		public Vector3 GetParticlePosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0x1DBE994", Offset = "0x1DBE994", VA = "0x1DBE994", Slot = "25")]
		public virtual bool GenerateTethers(TetherType type)
		{
			return default(bool);
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0x1DBE99C", Offset = "0x1DBE99C", VA = "0x1DBE99C")]
		public void ClearTethers()
		{
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0x1DBEA80", Offset = "0x1DBEA80", VA = "0x1DBEA80", Slot = "26")]
		public virtual void OnSolverPreInterpolation()
		{
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0x1DBEA84", Offset = "0x1DBEA84", VA = "0x1DBEA84", Slot = "27")]
		public virtual void OnSolverStepBegin()
		{
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0x1DBEF78", Offset = "0x1DBEF78", VA = "0x1DBEF78", Slot = "28")]
		public virtual void OnSolverStepEnd()
		{
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0x1DBEF7C", Offset = "0x1DBEF7C", VA = "0x1DBEF7C", Slot = "29")]
		public virtual void OnSolverFrameBegin()
		{
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0x1DBEF80", Offset = "0x1DBEF80", VA = "0x1DBEF80", Slot = "30")]
		public virtual void OnSolverFrameEnd()
		{
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0x1DBEF84", Offset = "0x1DBEF84", VA = "0x1DBEF84", Slot = "31")]
		public virtual bool ReadParticlePropertyFromTexture(Texture2D source, Action<int, Color> onReadProperty)
		{
			return default(bool);
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0x1DBEF8C", Offset = "0x1DBEF8C", VA = "0x1DBEF8C")]
		protected ObiActor()
		{
		}
	}
	[Token(Token = "0x2000275")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12510E4", Offset = "0x12510E4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12510E4", Offset = "0x12510E4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12510E4", Offset = "0x12510E4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12510E4", Offset = "0x12510E4")]
	public class ObiBone : ObiActor
	{
		[Token(Token = "0x20003B5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251C48", Offset = "0x1251C48")]
		private sealed class <EnumerateBonesBreadthFirst>d__19 : IEnumerable<object>, IEnumerable, IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001638")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001639")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400163A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x400163B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ObiBone <>4__this;

			[Token(Token = "0x400163C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <count>5__2;

			[Token(Token = "0x400163D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Queue<Transform> <queue>5__3;

			[Token(Token = "0x400163E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Transform <current>5__4;

			[Token(Token = "0x170001AD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60018C0")]
				[Address(RVA = "0x259C880", Offset = "0x259C880", VA = "0x259C880", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60018C2")]
				[Address(RVA = "0x259C8E8", Offset = "0x259C8E8", VA = "0x259C8E8", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018BD")]
			[Address(RVA = "0x259BB14", Offset = "0x259BB14", VA = "0x259BB14")]
			[DebuggerHidden]
			public <EnumerateBonesBreadthFirst>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x60018BE")]
			[Address(RVA = "0x259C438", Offset = "0x259C438", VA = "0x259C438", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60018BF")]
			[Address(RVA = "0x259C43C", Offset = "0x259C43C", VA = "0x259C43C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60018C1")]
			[Address(RVA = "0x259C888", Offset = "0x259C888", VA = "0x259C888", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60018C3")]
			[Address(RVA = "0x259C8F0", Offset = "0x259C8F0", VA = "0x259C8F0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<object> System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60018C4")]
			[Address(RVA = "0x259C9A4", Offset = "0x259C9A4", VA = "0x259C9A4", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20003B6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251C58", Offset = "0x1251C58")]
		private sealed class <GeneratePhysicRepresentationForBones>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400163F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001640")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001641")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ObiBone <>4__this;

			[Token(Token = "0x4001642")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private ObiDistanceConstraintBatch <distanceBatch>5__2;

			[Token(Token = "0x4001643")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private ObiBendConstraintBatch <bendingBatch>5__3;

			[Token(Token = "0x4001644")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private ObiSkinConstraintBatch <skinBatch>5__4;

			[Token(Token = "0x4001645")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <i>5__5;

			[Token(Token = "0x170001AF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60018C8")]
				[Address(RVA = "0x259E038", Offset = "0x259E038", VA = "0x259E038", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60018CA")]
				[Address(RVA = "0x259E0A0", Offset = "0x259E0A0", VA = "0x259E0A0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018C5")]
			[Address(RVA = "0x259BBC8", Offset = "0x259BBC8", VA = "0x259BBC8")]
			[DebuggerHidden]
			public <GeneratePhysicRepresentationForBones>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x60018C6")]
			[Address(RVA = "0x259C9A8", Offset = "0x259C9A8", VA = "0x259C9A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60018C7")]
			[Address(RVA = "0x259C9AC", Offset = "0x259C9AC", VA = "0x259C9AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60018C9")]
			[Address(RVA = "0x259E040", Offset = "0x259E040", VA = "0x259E040", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001022")]
		public const float DEFAULT_PARTICLE_MASS = 0.1f;

		[Token(Token = "0x4001023")]
		public const float MAX_YOUNG_MODULUS = 20f;

		[Token(Token = "0x4001024")]
		public const float MIN_YOUNG_MODULUS = 0.0001f;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259C54", Offset = "0x1259C54")]
		public float particleRadius;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[SerializeField]
		private List<Transform> bones;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[SerializeField]
		private int[] parentIndices;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public bool[] frozen;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected ObiAnimatorController animatorController;

		[Token(Token = "0x170000DB")]
		public ObiSkinConstraints SkinConstraints
		{
			[Token(Token = "0x60012DA")]
			[Address(RVA = "0x259B330", Offset = "0x259B330", VA = "0x259B330")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DC")]
		public ObiDistanceConstraints DistanceConstraints
		{
			[Token(Token = "0x60012DB")]
			[Address(RVA = "0x259B3D0", Offset = "0x259B3D0", VA = "0x259B3D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DD")]
		public ObiBendingConstraints BendingConstraints
		{
			[Token(Token = "0x60012DC")]
			[Address(RVA = "0x259B470", Offset = "0x259B470", VA = "0x259B470")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0x259B510", Offset = "0x259B510", VA = "0x259B510", Slot = "13")]
		public override void Awake()
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0x259B668", Offset = "0x259B668", VA = "0x259B668", Slot = "30")]
		public override void OnSolverFrameEnd()
		{
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0x259B994", Offset = "0x259B994", VA = "0x259B994", Slot = "21")]
		public override bool AddToSolver(object info)
		{
			return default(bool);
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0x259B9E4", Offset = "0x259B9E4", VA = "0x259B9E4", Slot = "22")]
		public override bool RemoveFromSolver(object info)
		{
			return default(bool);
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0x259B538", Offset = "0x259B538", VA = "0x259B538")]
		private void SetupAnimatorController()
		{
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0x259BA88", Offset = "0x259BA88", VA = "0x259BA88")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1263960", Offset = "0x1263960")]
		private IEnumerable EnumerateBonesBreadthFirst()
		{
			return null;
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0x259BB4C", Offset = "0x259BB4C", VA = "0x259BB4C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x12639C4", Offset = "0x12639C4")]
		public IEnumerator GeneratePhysicRepresentationForBones()
		{
			return null;
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0x259BBF4", Offset = "0x259BBF4", VA = "0x259BBF4", Slot = "27")]
		public override void OnSolverStepBegin()
		{
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0x259C1D0", Offset = "0x259C1D0", VA = "0x259C1D0", Slot = "28")]
		public override void OnSolverStepEnd()
		{
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0x259B690", Offset = "0x259B690", VA = "0x259B690")]
		public void UpdateBones()
		{
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0x259C270", Offset = "0x259C270", VA = "0x259C270", Slot = "19")]
		public override void ResetActor()
		{
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0x259C424", Offset = "0x259C424", VA = "0x259C424")]
		public ObiBone()
		{
		}
	}
	[Token(Token = "0x2000276")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x12511CC", Offset = "0x12511CC")]
	public class ObiEmitter : ObiActor
	{
		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public int fluidPhase;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[HideInInspector]
		private ObiEmitterMaterial emitterMaterial;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259D44", Offset = "0x1259D44")]
		[SerializeField]
		[HideInInspector]
		private int numParticles;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259DA0", Offset = "0x1259DA0")]
		public float speed;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259DD8", Offset = "0x1259DD8")]
		public float lifespan;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x1259E10", Offset = "0x1259E10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259E10", Offset = "0x1259E10")]
		public float randomVelocity;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private ObiEmitterShape emitterShape;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int activeParticleCount;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		public float[] life;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float unemittedBursts;

		[Token(Token = "0x170000DE")]
		public int NumParticles
		{
			[Token(Token = "0x60012EA")]
			[Address(RVA = "0x25A5664", Offset = "0x25A5664", VA = "0x25A5664")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012E9")]
			[Address(RVA = "0x25A506C", Offset = "0x25A506C", VA = "0x25A506C")]
			set
			{
			}
		}

		[Token(Token = "0x170000DF")]
		public int ActiveParticles
		{
			[Token(Token = "0x60012EB")]
			[Address(RVA = "0x25A566C", Offset = "0x25A566C", VA = "0x25A566C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000E0")]
		public override bool SelfCollisions
		{
			[Token(Token = "0x60012EC")]
			[Address(RVA = "0x25A5674", Offset = "0x25A5674", VA = "0x25A5674", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E1")]
		public ObiEmitterShape EmitterShape
		{
			[Token(Token = "0x60012ED")]
			[Address(RVA = "0x25A567C", Offset = "0x25A567C", VA = "0x25A567C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012EE")]
			[Address(RVA = "0x25A5684", Offset = "0x25A5684", VA = "0x25A5684")]
			set
			{
			}
		}

		[Token(Token = "0x170000E2")]
		public ObiEmitterMaterial EmitterMaterial
		{
			[Token(Token = "0x60012F0")]
			[Address(RVA = "0x25A5C2C", Offset = "0x25A5C2C", VA = "0x25A5C2C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012EF")]
			[Address(RVA = "0x25A5838", Offset = "0x25A5838", VA = "0x25A5838")]
			set
			{
			}
		}

		[Token(Token = "0x170000E3")]
		public override bool UsesCustomExternalForces
		{
			[Token(Token = "0x60012F1")]
			[Address(RVA = "0x25A5C34", Offset = "0x25A5C34", VA = "0x25A5C34", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0x25A5C3C", Offset = "0x25A5C3C", VA = "0x25A5C3C", Slot = "13")]
		public override void Awake()
		{
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0x25A5C6C", Offset = "0x25A5C6C", VA = "0x25A5C6C", Slot = "17")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0x25A5D40", Offset = "0x25A5D40", VA = "0x25A5D40", Slot = "18")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0x25A5E14", Offset = "0x25A5E14", VA = "0x25A5E14", Slot = "16")]
		public override void DestroyRequiredComponents()
		{
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0x25A5E18", Offset = "0x25A5E18", VA = "0x25A5E18", Slot = "21")]
		public override bool AddToSolver(object info)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0x25A5F6C", Offset = "0x25A5F6C", VA = "0x25A5F6C", Slot = "22")]
		public override bool RemoveFromSolver(object info)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0x25A5E70", Offset = "0x25A5E70", VA = "0x25A5E70")]
		public void CalculateParticleMass()
		{
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0x25A60C0", Offset = "0x25A60C0", VA = "0x25A60C0")]
		public void SetParticleRestRadius()
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0x25A5084", Offset = "0x25A5084", VA = "0x25A5084")]
		public void GeneratePhysicRepresentation()
		{
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0x25A6280", Offset = "0x25A6280", VA = "0x25A6280", Slot = "20")]
		public override void UpdateParticlePhases()
		{
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0x25A5730", Offset = "0x25A5730", VA = "0x25A5730")]
		private void UpdateEmitterDistribution()
		{
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0x25A5BD8", Offset = "0x25A5BD8", VA = "0x25A5BD8")]
		private void EmitterMaterial_OnChangesMade(object sender, ObiEmitterMaterial.MaterialChangeEventArgs e)
		{
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0x25A63F8", Offset = "0x25A63F8", VA = "0x25A63F8")]
		public void ResetParticlePosition(int index, float offset)
		{
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0x25A6A4C", Offset = "0x25A6A4C", VA = "0x25A6A4C")]
		public bool EmitParticle(float offset)
		{
			return default(bool);
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0x25A6AEC", Offset = "0x25A6AEC", VA = "0x25A6AEC")]
		public bool KillParticle(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0x25A6C40", Offset = "0x25A6C40", VA = "0x25A6C40")]
		public void KillAll()
		{
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0x25A6C90", Offset = "0x25A6C90", VA = "0x25A6C90", Slot = "27")]
		public override void OnSolverStepBegin()
		{
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0x25A6FB0", Offset = "0x25A6FB0", VA = "0x25A6FB0")]
		public ObiEmitter()
		{
		}
	}
	[Token(Token = "0x2000277")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1251218", Offset = "0x1251218")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1251218", Offset = "0x1251218")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1251218", Offset = "0x1251218")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1251218", Offset = "0x1251218")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1251218", Offset = "0x1251218")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1251218", Offset = "0x1251218")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1251218", Offset = "0x1251218")]
	[DisallowMultipleComponent]
	public class ObiRope : ObiActor
	{
		[Token(Token = "0x20003B7")]
		public enum RenderingMode
		{
			[Token(Token = "0x4001647")]
			ProceduralRope,
			[Token(Token = "0x4001648")]
			Chain,
			[Token(Token = "0x4001649")]
			Line
		}

		[Token(Token = "0x20003B8")]
		public class CurveFrame
		{
			[Token(Token = "0x400164A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 position;

			[Token(Token = "0x400164B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 tangent;

			[Token(Token = "0x400164C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 normal;

			[Token(Token = "0x400164D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 binormal;

			[Token(Token = "0x60018CB")]
			[Address(RVA = "0x26FF7DC", Offset = "0x26FF7DC", VA = "0x26FF7DC")]
			public void Reset()
			{
			}

			[Token(Token = "0x60018CC")]
			[Address(RVA = "0x26FF87C", Offset = "0x26FF87C", VA = "0x26FF87C")]
			public CurveFrame(float twist)
			{
			}

			[Token(Token = "0x60018CD")]
			[Address(RVA = "0x26FF9CC", Offset = "0x26FF9CC", VA = "0x26FF9CC")]
			public void Transport(Vector3 newPosition, Vector3 newTangent, float twist)
			{
			}
		}

		[Token(Token = "0x20003B9")]
		public delegate void ObiRopeEvent();

		[Token(Token = "0x20003BA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251C68", Offset = "0x1251C68")]
		private sealed class <GeneratePhysicRepresentationForMesh>d__110 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400164E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400164F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001650")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ObiRope <>4__this;

			[Token(Token = "0x4001651")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <numSegments>5__2;

			[Token(Token = "0x4001652")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <radius>5__3;

			[Token(Token = "0x4001653")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private ObiDistanceConstraintBatch <distanceBatch>5__4;

			[Token(Token = "0x4001654")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private ObiBendConstraintBatch <bendingBatch>5__5;

			[Token(Token = "0x4001655")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <i>5__6;

			[Token(Token = "0x170001B1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60018D5")]
				[Address(RVA = "0x26FF76C", Offset = "0x26FF76C", VA = "0x26FF76C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60018D7")]
				[Address(RVA = "0x26FF7D4", Offset = "0x26FF7D4", VA = "0x26FF7D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018D2")]
			[Address(RVA = "0x26FEC64", Offset = "0x26FEC64", VA = "0x26FEC64")]
			[DebuggerHidden]
			public <GeneratePhysicRepresentationForMesh>d__110(int <>1__state)
			{
			}

			[Token(Token = "0x60018D3")]
			[Address(RVA = "0x26FEC90", Offset = "0x26FEC90", VA = "0x26FEC90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60018D4")]
			[Address(RVA = "0x26FEC94", Offset = "0x26FEC94", VA = "0x26FEC94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60018D6")]
			[Address(RVA = "0x26FF774", Offset = "0x26FF774", VA = "0x26FF774", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003BB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251C78", Offset = "0x1251C78")]
		private sealed class <>c
		{
			[Token(Token = "0x4001656")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001657")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Comparison<KeyValuePair<float, int>> <>9__142_0;

			[Token(Token = "0x60018D9")]
			[Address(RVA = "0x25B519C", Offset = "0x25B519C", VA = "0x25B519C")]
			public <>c()
			{
			}

			[Token(Token = "0x60018DA")]
			[Address(RVA = "0x25B51A4", Offset = "0x25B51A4", VA = "0x25B51A4")]
			internal int <GenerateFixedTethers>b__142_0(KeyValuePair<float, int> x, KeyValuePair<float, int> y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4001034")]
		public const float DEFAULT_PARTICLE_MASS = 0.1f;

		[Token(Token = "0x4001035")]
		public const float MAX_YOUNG_MODULUS = 200f;

		[Token(Token = "0x4001036")]
		public const float MIN_YOUNG_MODULUS = 0.0001f;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259E74", Offset = "0x1259E74")]
		public int pooledParticles;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x1259EAC", Offset = "0x1259EAC")]
		public ObiCurve ropePath;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[SerializeField]
		private ObiRopeSection section;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[SerializeField]
		private float sectionTwist;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[HideInInspector]
		[SerializeField]
		private float sectionThicknessScale;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[SerializeField]
		private bool thicknessFromParticles;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[HideInInspector]
		[SerializeField]
		private Vector2 uvScale;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[HideInInspector]
		[SerializeField]
		private float uvAnchor;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		[SerializeField]
		private bool normalizeV;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125A06C", Offset = "0x125A06C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125A06C", Offset = "0x125A06C")]
		public float resolution;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		[SerializeField]
		private uint smoothing;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public bool tearable;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125A0F8", Offset = "0x125A0F8")]
		[Delayed]
		public float tearResistanceMultiplier;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[HideInInspector]
		public float[] tearResistance;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[HideInInspector]
		[SerializeField]
		private RenderingMode renderMode;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public List<GameObject> chainLinks;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[HideInInspector]
		[SerializeField]
		private Vector3 linkScale;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[HideInInspector]
		[SerializeField]
		private bool randomizeLinks;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[HideInInspector]
		public Mesh ropeMesh;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[HideInInspector]
		[SerializeField]
		private List<GameObject> linkInstances;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public GameObject startPrefab;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public GameObject endPrefab;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public GameObject tearPrefab;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125A244", Offset = "0x125A244")]
		public float thickness;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private GameObject[] tearPrefabPool;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[HideInInspector]
		[SerializeField]
		private bool closed;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		[HideInInspector]
		[SerializeField]
		private float interParticleDistance;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[HideInInspector]
		[SerializeField]
		private float restLength;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		[HideInInspector]
		[SerializeField]
		private int usedParticles;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[HideInInspector]
		[SerializeField]
		private int totalParticles;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private MeshFilter meshFilter;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private GameObject startPrefabInstance;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private GameObject endPrefabInstance;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float curveLength;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float curveSections;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private List<Vector4[]> curves;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private List<Vector3> vertices;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private List<Vector3> normals;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private List<Vector4> tangents;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private List<Vector2> uvs;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private List<int> tris;

		[Token(Token = "0x170000E4")]
		public ObiDistanceConstraints DistanceConstraints
		{
			[Token(Token = "0x6001304")]
			[Address(RVA = "0x25AD92C", Offset = "0x25AD92C", VA = "0x25AD92C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E5")]
		public ObiBendingConstraints BendingConstraints
		{
			[Token(Token = "0x6001305")]
			[Address(RVA = "0x25AD9CC", Offset = "0x25AD9CC", VA = "0x25AD9CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E6")]
		public ObiTetherConstraints TetherConstraints
		{
			[Token(Token = "0x6001306")]
			[Address(RVA = "0x25ADA6C", Offset = "0x25ADA6C", VA = "0x25ADA6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E7")]
		public ObiPinConstraints PinConstraints
		{
			[Token(Token = "0x6001307")]
			[Address(RVA = "0x25ADB0C", Offset = "0x25ADB0C", VA = "0x25ADB0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E8")]
		public RenderingMode RenderMode
		{
			[Token(Token = "0x6001309")]
			[Address(RVA = "0x25ADDB4", Offset = "0x25ADDB4", VA = "0x25ADDB4")]
			get
			{
				return default(RenderingMode);
			}
			[Token(Token = "0x6001308")]
			[Address(RVA = "0x25ADBAC", Offset = "0x25ADBAC", VA = "0x25ADBAC")]
			set
			{
			}
		}

		[Token(Token = "0x170000E9")]
		public ObiRopeSection Section
		{
			[Token(Token = "0x600130B")]
			[Address(RVA = "0x25ADF54", Offset = "0x25ADF54", VA = "0x25ADF54")]
			get
			{
				return null;
			}
			[Token(Token = "0x600130A")]
			[Address(RVA = "0x25ADDBC", Offset = "0x25ADDBC", VA = "0x25ADDBC")]
			set
			{
			}
		}

		[Token(Token = "0x170000EA")]
		public float SectionThicknessScale
		{
			[Token(Token = "0x600130D")]
			[Address(RVA = "0x25AE0E0", Offset = "0x25AE0E0", VA = "0x25AE0E0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600130C")]
			[Address(RVA = "0x25ADF5C", Offset = "0x25ADF5C", VA = "0x25ADF5C")]
			set
			{
			}
		}

		[Token(Token = "0x170000EB")]
		public bool ThicknessFromParticles
		{
			[Token(Token = "0x600130F")]
			[Address(RVA = "0x25AE120", Offset = "0x25AE120", VA = "0x25AE120")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600130E")]
			[Address(RVA = "0x25AE0E8", Offset = "0x25AE0E8", VA = "0x25AE0E8")]
			set
			{
			}
		}

		[Token(Token = "0x170000EC")]
		public float SectionTwist
		{
			[Token(Token = "0x6001311")]
			[Address(RVA = "0x25AE140", Offset = "0x25AE140", VA = "0x25AE140")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001310")]
			[Address(RVA = "0x25AE128", Offset = "0x25AE128", VA = "0x25AE128")]
			set
			{
			}
		}

		[Token(Token = "0x170000ED")]
		public uint Smoothing
		{
			[Token(Token = "0x6001313")]
			[Address(RVA = "0x25AE160", Offset = "0x25AE160", VA = "0x25AE160")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6001312")]
			[Address(RVA = "0x25AE148", Offset = "0x25AE148", VA = "0x25AE148")]
			set
			{
			}
		}

		[Token(Token = "0x170000EE")]
		public Vector3 LinkScale
		{
			[Token(Token = "0x6001315")]
			[Address(RVA = "0x25AEA18", Offset = "0x25AEA18", VA = "0x25AEA18")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001314")]
			[Address(RVA = "0x25AE168", Offset = "0x25AE168", VA = "0x25AE168")]
			set
			{
			}
		}

		[Token(Token = "0x170000EF")]
		public Vector2 UVScale
		{
			[Token(Token = "0x6001317")]
			[Address(RVA = "0x25AEADC", Offset = "0x25AEADC", VA = "0x25AEADC")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6001316")]
			[Address(RVA = "0x25AEA28", Offset = "0x25AEA28", VA = "0x25AEA28")]
			set
			{
			}
		}

		[Token(Token = "0x170000F0")]
		public float UVAnchor
		{
			[Token(Token = "0x6001319")]
			[Address(RVA = "0x25AEAFC", Offset = "0x25AEAFC", VA = "0x25AEAFC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001318")]
			[Address(RVA = "0x25AEAE4", Offset = "0x25AEAE4", VA = "0x25AEAE4")]
			set
			{
			}
		}

		[Token(Token = "0x170000F1")]
		public bool NormalizeV
		{
			[Token(Token = "0x600131B")]
			[Address(RVA = "0x25AEB28", Offset = "0x25AEB28", VA = "0x25AEB28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600131A")]
			[Address(RVA = "0x25AEB04", Offset = "0x25AEB04", VA = "0x25AEB04")]
			set
			{
			}
		}

		[Token(Token = "0x170000F2")]
		public bool RandomizeLinks
		{
			[Token(Token = "0x600131D")]
			[Address(RVA = "0x25AED3C", Offset = "0x25AED3C", VA = "0x25AED3C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600131C")]
			[Address(RVA = "0x25AEB30", Offset = "0x25AEB30", VA = "0x25AEB30")]
			set
			{
			}
		}

		[Token(Token = "0x170000F3")]
		public float InterparticleDistance
		{
			[Token(Token = "0x600131E")]
			[Address(RVA = "0x25AED44", Offset = "0x25AED44", VA = "0x25AED44")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000F4")]
		public int TotalParticles
		{
			[Token(Token = "0x600131F")]
			[Address(RVA = "0x25AED74", Offset = "0x25AED74", VA = "0x25AED74")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000F5")]
		public int UsedParticles
		{
			[Token(Token = "0x6001320")]
			[Address(RVA = "0x25AED7C", Offset = "0x25AED7C", VA = "0x25AED7C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001321")]
			[Address(RVA = "0x25AED84", Offset = "0x25AED84", VA = "0x25AED84")]
			set
			{
			}
		}

		[Token(Token = "0x170000F6")]
		public float RestLength
		{
			[Token(Token = "0x6001322")]
			[Address(RVA = "0x25AED98", Offset = "0x25AED98", VA = "0x25AED98")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001323")]
			[Address(RVA = "0x25AEDA0", Offset = "0x25AEDA0", VA = "0x25AEDA0")]
			set
			{
			}
		}

		[Token(Token = "0x170000F7")]
		public bool Closed
		{
			[Token(Token = "0x6001324")]
			[Address(RVA = "0x25AEDA8", Offset = "0x25AEDA8", VA = "0x25AEDA8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F8")]
		public int PooledParticles
		{
			[Token(Token = "0x6001325")]
			[Address(RVA = "0x25AEDB0", Offset = "0x25AEDB0", VA = "0x25AEDB0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000005")]
		public event ObiRopeEvent OnTear
		{
			[Token(Token = "0x6001349")]
			[Address(RVA = "0x25B3EC4", Offset = "0x25B3EC4", VA = "0x25B3EC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263A8C", Offset = "0x1263A8C")]
			add
			{
			}
			[Token(Token = "0x600134A")]
			[Address(RVA = "0x25B3F6C", Offset = "0x25B3F6C", VA = "0x25B3F6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263A9C", Offset = "0x1263A9C")]
			remove
			{
			}
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0x25AEDB8", Offset = "0x25AEDB8", VA = "0x25AEDB8", Slot = "13")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0x25AEE58", Offset = "0x25AEE58", VA = "0x25AEE58", Slot = "17")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0x25AEF40", Offset = "0x25AEF40", VA = "0x25AEF40", Slot = "18")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0x25AF020", Offset = "0x25AF020", VA = "0x25AF020")]
		public void RopePreCull(Camera cam)
		{
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0x25AFBC0", Offset = "0x25AFBC0", VA = "0x25AFBC0", Slot = "28")]
		public override void OnSolverStepEnd()
		{
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0x25B003C", Offset = "0x25B003C", VA = "0x25B003C", Slot = "30")]
		public override void OnSolverFrameEnd()
		{
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0x25B0064", Offset = "0x25B0064", VA = "0x25B0064", Slot = "15")]
		public override void OnDestroy()
		{
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0x25B0244", Offset = "0x25B0244", VA = "0x25B0244", Slot = "21")]
		public override bool AddToSolver(object info)
		{
			return default(bool);
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0x25B0294", Offset = "0x25B0294", VA = "0x25B0294", Slot = "22")]
		public override bool RemoveFromSolver(object info)
		{
			return default(bool);
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0x25B0338", Offset = "0x25B0338", VA = "0x25B0338")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1263A28", Offset = "0x1263A28")]
		public IEnumerator GeneratePhysicRepresentationForMesh()
		{
			return null;
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0x25B03B4", Offset = "0x25B03B4", VA = "0x25B03B4")]
		public void RegenerateRestPositions()
		{
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0x25B0700", Offset = "0x25B0700", VA = "0x25B0700")]
		public void RecalculateLenght()
		{
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0x25B0824", Offset = "0x25B0824", VA = "0x25B0824")]
		public float CalculateLength()
		{
			return default(float);
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0x25ADD78", Offset = "0x25ADD78", VA = "0x25ADD78")]
		public void GenerateVisualRepresentation()
		{
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0x25AE10C", Offset = "0x25AE10C", VA = "0x25AE10C")]
		public void UpdateVisualRepresentation()
		{
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0x25ADE68", Offset = "0x25ADE68", VA = "0x25ADE68")]
		private void GenerateProceduralRopeMesh()
		{
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0x25B0A2C", Offset = "0x25B0A2C", VA = "0x25B0A2C")]
		private void GeneratePrefabInstances()
		{
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0x25B00EC", Offset = "0x25B00EC", VA = "0x25B00EC")]
		private void ClearPrefabInstances()
		{
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0x25AEB54", Offset = "0x25AEB54", VA = "0x25AEB54")]
		public void GenerateProceduralChainLinks()
		{
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0x25ADC54", Offset = "0x25ADC54", VA = "0x25ADC54")]
		private void ClearChainLinkInstances()
		{
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0x25B0D4C", Offset = "0x25B0D4C", VA = "0x25B0D4C")]
		private Vector4[] ChaikinSmoothing(Vector4[] input, uint k)
		{
			return null;
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0x25B13AC", Offset = "0x25B13AC", VA = "0x25B13AC")]
		private float CalculateCurveLength(Vector4[] curve)
		{
			return default(float);
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0x25B152C", Offset = "0x25B152C", VA = "0x25B152C")]
		public int GetConstraintIndexAtNormalizedCoordinate(float coord)
		{
			return default(int);
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0x25B1630", Offset = "0x25B1630", VA = "0x25B1630")]
		private List<int> CountContinuousSections()
		{
			return null;
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0x25B1834", Offset = "0x25B1834", VA = "0x25B1834")]
		private void SmoothCurvesFromParticles()
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0x25B1DF0", Offset = "0x25B1DF0", VA = "0x25B1DF0")]
		private void PlaceObjectAtCurveFrame(CurveFrame frame, GameObject obj, Space space, bool reverseLookDirection)
		{
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0x25ADFFC", Offset = "0x25ADFFC", VA = "0x25ADFFC")]
		public void UpdateProceduralRopeMesh()
		{
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0x25B2D64", Offset = "0x25B2D64", VA = "0x25B2D64")]
		private void ClearMeshData()
		{
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0x25B2E24", Offset = "0x25B2E24", VA = "0x25B2E24")]
		private void CommitMeshData()
		{
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0x25B2144", Offset = "0x25B2144", VA = "0x25B2144")]
		private void UpdateRopeMesh()
		{
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0x25AF034", Offset = "0x25AF034", VA = "0x25AF034")]
		private void UpdateLineMesh(Camera camera)
		{
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0x25AE244", Offset = "0x25AE244", VA = "0x25AE244")]
		public void UpdateProceduralChainLinks()
		{
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0x25B2EB0", Offset = "0x25B2EB0", VA = "0x25B2EB0", Slot = "19")]
		public override void ResetActor()
		{
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0x25AFCD0", Offset = "0x25AFCD0", VA = "0x25AFCD0")]
		private void ApplyTearing()
		{
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0x25B3B50", Offset = "0x25B3B50", VA = "0x25B3B50")]
		public bool DoesBendConstraintSpanDistanceConstraint(ObiDistanceConstraintBatch dbatch, ObiBendConstraintBatch bbatch, int d, int b)
		{
			return default(bool);
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0x25B2FFC", Offset = "0x25B2FFC", VA = "0x25B2FFC")]
		public void Tear(int constraintIndex)
		{
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0x25B4014", Offset = "0x25B4014", VA = "0x25B4014", Slot = "25")]
		public override bool GenerateTethers(TetherType type)
		{
			return default(bool);
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0x25B41CC", Offset = "0x25B41CC", VA = "0x25B41CC")]
		private void GenerateFixedTethers(int maxTethers)
		{
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0x25B4084", Offset = "0x25B4084", VA = "0x25B4084")]
		private void GenerateHierarchicalTethers(int maxLevels)
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0x25B4EB4", Offset = "0x25B4EB4", VA = "0x25B4EB4")]
		public ObiRope()
		{
		}
	}
	[Token(Token = "0x2000278")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x1251388", Offset = "0x1251388")]
	public class ObiStitcher : MonoBehaviour, IObiSolverClient
	{
		[Serializable]
		[Token(Token = "0x20003BC")]
		public class Stitch
		{
			[Token(Token = "0x4001658")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int particleIndex1;

			[Token(Token = "0x4001659")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int particleIndex2;

			[Token(Token = "0x60018DB")]
			[Address(RVA = "0x270A614", Offset = "0x270A614", VA = "0x270A614")]
			public Stitch(int particleIndex1, int particleIndex2)
			{
			}
		}

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private List<Stitch> stitches;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private ObiActor actor1;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private ObiActor actor2;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IntPtr batch;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool inSolver;

		[Token(Token = "0x170000F9")]
		public ObiActor Actor1
		{
			[Token(Token = "0x6001351")]
			[Address(RVA = "0x2709F24", Offset = "0x2709F24", VA = "0x2709F24")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001350")]
			[Address(RVA = "0x2709B84", Offset = "0x2709B84", VA = "0x2709B84")]
			set
			{
			}
		}

		[Token(Token = "0x170000FA")]
		public ObiActor Actor2
		{
			[Token(Token = "0x6001353")]
			[Address(RVA = "0x270A1CC", Offset = "0x270A1CC", VA = "0x270A1CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001352")]
			[Address(RVA = "0x2709F2C", Offset = "0x2709F2C", VA = "0x2709F2C")]
			set
			{
			}
		}

		[Token(Token = "0x170000FB")]
		public int StitchCount
		{
			[Token(Token = "0x6001354")]
			[Address(RVA = "0x270A1D4", Offset = "0x270A1D4", VA = "0x270A1D4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000FC")]
		public IEnumerable<Stitch> Stitches
		{
			[Token(Token = "0x6001355")]
			[Address(RVA = "0x270A224", Offset = "0x270A224", VA = "0x270A224")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0x270A27C", Offset = "0x270A27C", VA = "0x270A27C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0x270A55C", Offset = "0x270A55C", VA = "0x270A55C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0x270A568", Offset = "0x270A568", VA = "0x270A568")]
		public int AddStitch(int particle1, int particle2)
		{
			return default(int);
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0x270A64C", Offset = "0x270A64C", VA = "0x270A64C")]
		public void RemoveStitch(int index)
		{
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0x270A6D4", Offset = "0x270A6D4", VA = "0x270A6D4")]
		public void Clear()
		{
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0x2709E24", Offset = "0x2709E24", VA = "0x2709E24")]
		private void Actor_OnRemovedFromSolver(object sender, ObiActor.ObiActorSolverArgs e)
		{
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0x2709E28", Offset = "0x2709E28", VA = "0x2709E28")]
		private void Actor_OnAddedToSolver(object sender, ObiActor.ObiActorSolverArgs e)
		{
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0x270A9F4", Offset = "0x270A9F4", VA = "0x270A9F4", Slot = "4")]
		public bool AddToSolver(object info)
		{
			return default(bool);
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0x270A988", Offset = "0x270A988", VA = "0x270A988", Slot = "5")]
		public bool RemoveFromSolver(object info)
		{
			return default(bool);
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0x270A734", Offset = "0x270A734", VA = "0x270A734", Slot = "6")]
		public void PushDataToSolver(ParticleData data = ParticleData.NONE)
		{
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0x270ACFC", Offset = "0x270ACFC", VA = "0x270ACFC", Slot = "7")]
		public void PullDataFromSolver(ParticleData data = ParticleData.NONE)
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0x270AD00", Offset = "0x270AD00", VA = "0x270AD00")]
		public ObiStitcher()
		{
		}
	}
	[Token(Token = "0x2000279")]
	public class ObiBoxShapeTracker2D : ObiShapeTracker
	{
		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector2 size;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector2 center;

		[Token(Token = "0x6001362")]
		[Address(RVA = "0x259E2FC", Offset = "0x259E2FC", VA = "0x259E2FC")]
		public ObiBoxShapeTracker2D(BoxCollider2D collider)
		{
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0x259E34C", Offset = "0x259E34C", VA = "0x259E34C", Slot = "5")]
		public override void UpdateIfNeeded()
		{
		}
	}
	[Token(Token = "0x200027A")]
	public class ObiCapsuleShapeTracker2D : ObiShapeTracker
	{
		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CapsuleDirection2D direction;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector2 size;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector2 center;

		[Token(Token = "0x6001364")]
		[Address(RVA = "0x259E968", Offset = "0x259E968", VA = "0x259E968")]
		public ObiCapsuleShapeTracker2D(CapsuleCollider2D collider)
		{
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0x259E9B8", Offset = "0x259E9B8", VA = "0x259E9B8", Slot = "5")]
		public override void UpdateIfNeeded()
		{
		}
	}
	[Token(Token = "0x200027B")]
	public class ObiCircleShapeTracker2D : ObiShapeTracker
	{
		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float radius;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector2 center;

		[Token(Token = "0x6001366")]
		[Address(RVA = "0x259F594", Offset = "0x259F594", VA = "0x259F594")]
		public ObiCircleShapeTracker2D(CircleCollider2D collider)
		{
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0x259F5E4", Offset = "0x259F5E4", VA = "0x259F5E4", Slot = "5")]
		public override void UpdateIfNeeded()
		{
		}
	}
	[Token(Token = "0x200027C")]
	public class ObiEdgeShapeTracker2D : ObiShapeTracker
	{
		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int pointCount;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private GCHandle pointsHandle;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GCHandle indicesHandle;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool edgeDataHasChanged;

		[Token(Token = "0x6001368")]
		[Address(RVA = "0x25A0318", Offset = "0x25A0318", VA = "0x25A0318")]
		public ObiEdgeShapeTracker2D(EdgeCollider2D collider)
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0x25A4C38", Offset = "0x25A4C38", VA = "0x25A4C38")]
		public void UpdateEdgeData()
		{
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0x25A4ED0", Offset = "0x25A4ED0", VA = "0x25A4ED0", Slot = "5")]
		public override void UpdateIfNeeded()
		{
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0x25A5034", Offset = "0x25A5034", VA = "0x25A5034", Slot = "4")]
		public override void Destroy()
		{
		}
	}
	[Token(Token = "0x200027D")]
	public class ObiBoxShapeTracker : ObiShapeTracker
	{
		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 size;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 center;

		[Token(Token = "0x600136C")]
		[Address(RVA = "0x259E0A8", Offset = "0x259E0A8", VA = "0x259E0A8")]
		public ObiBoxShapeTracker(BoxCollider collider)
		{
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0x259E0F4", Offset = "0x259E0F4", VA = "0x259E0F4", Slot = "5")]
		public override void UpdateIfNeeded()
		{
		}
	}
	[Token(Token = "0x200027E")]
	public class ObiCapsuleShapeTracker : ObiShapeTracker
	{
		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int direction;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float radius;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float height;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 center;

		[Token(Token = "0x600136E")]
		[Address(RVA = "0x259E55C", Offset = "0x259E55C", VA = "0x259E55C")]
		public ObiCapsuleShapeTracker(CapsuleCollider collider)
		{
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0x259E5A8", Offset = "0x259E5A8", VA = "0x259E5A8")]
		public ObiCapsuleShapeTracker(CharacterController collider)
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0x259E5F4", Offset = "0x259E5F4", VA = "0x259E5F4", Slot = "5")]
		public override void UpdateIfNeeded()
		{
		}
	}
	[Token(Token = "0x200027F")]
	public class ObiMeshShapeTracker : ObiShapeTracker
	{
		[Token(Token = "0x20003BD")]
		private class MeshDataHandles
		{
			[Token(Token = "0x400165A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int refCount;

			[Token(Token = "0x400165B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private GCHandle verticesHandle;

			[Token(Token = "0x400165C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private GCHandle indicesHandle;

			[Token(Token = "0x170001B3")]
			public int RefCount
			{
				[Token(Token = "0x60018DC")]
				[Address(RVA = "0x25A7E0C", Offset = "0x25A7E0C", VA = "0x25A7E0C")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x170001B4")]
			public IntPtr VerticesAddress
			{
				[Token(Token = "0x60018DD")]
				[Address(RVA = "0x25A7C34", Offset = "0x25A7C34", VA = "0x25A7C34")]
				get
				{
					return default(IntPtr);
				}
			}

			[Token(Token = "0x170001B5")]
			public IntPtr IndicesAddress
			{
				[Token(Token = "0x60018DE")]
				[Address(RVA = "0x25A7C40", Offset = "0x25A7C40", VA = "0x25A7C40")]
				get
				{
					return default(IntPtr);
				}
			}

			[Token(Token = "0x60018DF")]
			[Address(RVA = "0x25A7A14", Offset = "0x25A7A14", VA = "0x25A7A14")]
			public void FromMesh(Mesh mesh)
			{
			}

			[Token(Token = "0x60018E0")]
			[Address(RVA = "0x25A7A04", Offset = "0x25A7A04", VA = "0x25A7A04")]
			public void Ref()
			{
			}

			[Token(Token = "0x60018E1")]
			[Address(RVA = "0x25A79A0", Offset = "0x25A79A0", VA = "0x25A79A0")]
			public void Unref()
			{
			}

			[Token(Token = "0x60018E2")]
			[Address(RVA = "0x25A79F4", Offset = "0x25A79F4", VA = "0x25A79F4")]
			public MeshDataHandles()
			{
			}
		}

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Mesh, MeshDataHandles> meshDataCache;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool meshDataHasChanged;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MeshDataHandles handles;

		[Token(Token = "0x6001371")]
		[Address(RVA = "0x259FB10", Offset = "0x259FB10", VA = "0x259FB10")]
		public ObiMeshShapeTracker(MeshCollider collider)
		{
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0x25A7794", Offset = "0x25A7794", VA = "0x25A7794")]
		public void UpdateMeshData()
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0x25A7A84", Offset = "0x25A7A84", VA = "0x25A7A84", Slot = "5")]
		public override void UpdateIfNeeded()
		{
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0x25A7C4C", Offset = "0x25A7C4C", VA = "0x25A7C4C", Slot = "4")]
		public override void Destroy()
		{
		}
	}
	[Token(Token = "0x2000280")]
	public abstract class ObiShapeTracker
	{
		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Component collider;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Oni.Shape adaptor;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected IntPtr oniShape;

		[Token(Token = "0x170000FD")]
		public IntPtr OniShape
		{
			[Token(Token = "0x6001376")]
			[Address(RVA = "0x2702328", Offset = "0x2702328", VA = "0x2702328")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0x2702330", Offset = "0x2702330", VA = "0x2702330", Slot = "4")]
		public virtual void Destroy()
		{
		}

		[Token(Token = "0x6001378")]
		public abstract void UpdateIfNeeded();

		[Token(Token = "0x6001379")]
		[Address(RVA = "0x27023FC", Offset = "0x27023FC", VA = "0x27023FC")]
		protected ObiShapeTracker()
		{
		}
	}
	[Token(Token = "0x2000281")]
	public class ObiSphereShapeTracker : ObiShapeTracker
	{
		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float radius;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 center;

		[Token(Token = "0x600137A")]
		[Address(RVA = "0x2708B34", Offset = "0x2708B34", VA = "0x2708B34")]
		public ObiSphereShapeTracker(SphereCollider collider)
		{
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0x2708BF8", Offset = "0x2708BF8", VA = "0x2708BF8", Slot = "5")]
		public override void UpdateIfNeeded()
		{
		}
	}
	[Token(Token = "0x2000282")]
	public class ObiTerrainShapeTracker : ObiShapeTracker
	{
		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 size;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int resolutionU;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int resolutionV;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private GCHandle dataHandle;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool heightmapDataHasChanged;

		[Token(Token = "0x600137C")]
		[Address(RVA = "0x270AD7C", Offset = "0x270AD7C", VA = "0x270AD7C")]
		public ObiTerrainShapeTracker(TerrainCollider collider)
		{
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0x270ADC4", Offset = "0x270ADC4", VA = "0x270ADC4")]
		public void UpdateHeightData()
		{
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0x270B058", Offset = "0x270B058", VA = "0x270B058", Slot = "5")]
		public override void UpdateIfNeeded()
		{
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0x270B2D4", Offset = "0x270B2D4", VA = "0x270B2D4", Slot = "4")]
		public override void Destroy()
		{
		}
	}
	[Token(Token = "0x2000283")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12513D4", Offset = "0x12513D4")]
	public class ObiCollider : ObiColliderBase
	{
		[Token(Token = "0x6001380")]
		[Address(RVA = "0x259F790", Offset = "0x259F790", VA = "0x259F790", Slot = "4")]
		protected override void CreateTracker()
		{
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0x259FB60", Offset = "0x259FB60", VA = "0x259FB60", Slot = "5")]
		protected override bool IsUnityColliderEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0x259FBE8", Offset = "0x259FBE8", VA = "0x259FBE8", Slot = "6")]
		protected override void UpdateColliderAdaptor()
		{
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0x259FDB4", Offset = "0x259FDB4", VA = "0x259FDB4", Slot = "7")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0x25A0070", Offset = "0x25A0070", VA = "0x25A0070")]
		public ObiCollider()
		{
		}
	}
	[Token(Token = "0x2000284")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x1251448", Offset = "0x1251448")]
	public class ObiCollider2D : ObiColliderBase
	{
		[Token(Token = "0x6001385")]
		[Address(RVA = "0x25A0164", Offset = "0x25A0164", VA = "0x25A0164", Slot = "4")]
		protected override void CreateTracker()
		{
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0x25A036C", Offset = "0x25A036C", VA = "0x25A036C", Slot = "5")]
		protected override bool IsUnityColliderEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0x25A03F4", Offset = "0x25A03F4", VA = "0x25A03F4", Slot = "6")]
		protected override void UpdateColliderAdaptor()
		{
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0x25A05C0", Offset = "0x25A05C0", VA = "0x25A05C0", Slot = "7")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0x25A066C", Offset = "0x25A066C", VA = "0x25A066C")]
		public ObiCollider2D()
		{
		}
	}
	[Token(Token = "0x2000285")]
	public abstract class ObiColliderBase : MonoBehaviour
	{
		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<int, Component> idToCollider;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private ObiCollisionMaterial material;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int phase;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float thickness;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[SerializeField]
		protected Component unityCollider;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected IntPtr oniCollider;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected ObiRigidbody obiRigidbody;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected int currentLayer;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected bool wasUnityColliderEnabled;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected float oldPhase;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected float oldThickness;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected HashSet<ObiSolver> solvers;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected ObiShapeTracker tracker;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Oni.Collider adaptor;

		[Token(Token = "0x170000FE")]
		public ObiCollisionMaterial CollisionMaterial
		{
			[Token(Token = "0x600138B")]
			[Address(RVA = "0x25A0790", Offset = "0x25A0790", VA = "0x25A0790")]
			get
			{
				return null;
			}
			[Token(Token = "0x600138A")]
			[Address(RVA = "0x25A06D0", Offset = "0x25A06D0", VA = "0x25A06D0")]
			set
			{
			}
		}

		[Token(Token = "0x170000FF")]
		public IntPtr OniCollider
		{
			[Token(Token = "0x600138C")]
			[Address(RVA = "0x25A0798", Offset = "0x25A0798", VA = "0x25A0798")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x600138D")]
		protected abstract void CreateTracker();

		[Token(Token = "0x600138E")]
		protected abstract bool IsUnityColliderEnabled();

		[Token(Token = "0x600138F")]
		protected abstract void UpdateColliderAdaptor();

		[Token(Token = "0x6001390")]
		[Address(RVA = "0x25A07A0", Offset = "0x25A07A0", VA = "0x25A07A0")]
		protected void CreateRigidbody()
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0x25A08F8", Offset = "0x25A08F8", VA = "0x25A08F8")]
		public void RegisterInSolver(ObiSolver solver, bool addToSolver)
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0x25A0A08", Offset = "0x25A0A08", VA = "0x25A0A08")]
		public void RemoveFromSolver(ObiSolver solver)
		{
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0x25A0A84", Offset = "0x25A0A84", VA = "0x25A0A84")]
		private void FindSolvers(bool addToSolvers)
		{
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0x25A0C7C", Offset = "0x25A0C7C", VA = "0x25A0C7C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0x259FE60", Offset = "0x259FE60", VA = "0x259FE60", Slot = "7")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0x25A0C84", Offset = "0x25A0C84", VA = "0x25A0C84")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0x25A0E2C", Offset = "0x25A0E2C", VA = "0x25A0E2C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0x25A0F2C", Offset = "0x25A0F2C", VA = "0x25A0F2C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0x25A102C", Offset = "0x25A102C", VA = "0x25A102C")]
		private void UpdateIfNeeded(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0x25A13D0", Offset = "0x25A13D0", VA = "0x25A13D0")]
		private void UpdateRigidbody(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0x25A00D4", Offset = "0x25A00D4", VA = "0x25A00D4")]
		protected ObiColliderBase()
		{
		}
	}
	[Token(Token = "0x2000286")]
	public class ObiCollisionMaterial : ScriptableObject
	{
		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr oniCollisionMaterial;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Oni.CollisionMaterial adaptor;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float friction;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float stickiness;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float stickDistance;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Oni.MaterialCombineMode frictionCombine;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Oni.MaterialCombineMode stickinessCombine;

		[Token(Token = "0x17000100")]
		public IntPtr OniCollisionMaterial
		{
			[Token(Token = "0x600139D")]
			[Address(RVA = "0x25A168C", Offset = "0x25A168C", VA = "0x25A168C")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0x25A1694", Offset = "0x25A1694", VA = "0x25A1694")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0x25A16F8", Offset = "0x25A16F8", VA = "0x25A16F8")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0x25A16D4", Offset = "0x25A16D4", VA = "0x25A16D4")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0x25A1748", Offset = "0x25A1748", VA = "0x25A1748")]
		public ObiCollisionMaterial()
		{
		}
	}
	[Token(Token = "0x2000287")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12514BC", Offset = "0x12514BC")]
	public class ObiRigidbody : MonoBehaviour
	{
		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool kinematicForParticles;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IntPtr oniRigidbody;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody unityRigidbody;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool dirty;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private Oni.Rigidbody adaptor;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		private Oni.RigidbodyVelocities oniVelocities;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 velocity;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 angularVelocity;

		[Token(Token = "0x17000101")]
		public IntPtr OniRigidbody
		{
			[Token(Token = "0x60013A2")]
			[Address(RVA = "0x25AD80C", Offset = "0x25AD80C", VA = "0x25AD80C")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0x25AD814", Offset = "0x25AD814", VA = "0x25AD814")]
		public void Awake()
		{
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0x25AD888", Offset = "0x25AD888", VA = "0x25AD888")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0x25A134C", Offset = "0x25A134C", VA = "0x25A134C")]
		public void UpdateIfNeeded()
		{
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0x25A1460", Offset = "0x25A1460", VA = "0x25A1460")]
		public void UpdateVelocities()
		{
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0x25AD8D8", Offset = "0x25AD8D8", VA = "0x25AD8D8")]
		public ObiRigidbody()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000288")]
	public class ObiAerodynamicConstraintBatch : ObiConstraintBatch
	{
		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public List<int> aerodynamicIndices;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public List<float> aerodynamicCoeffs;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int[] solverIndices;

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0x1DBF034", Offset = "0x1DBF034", VA = "0x1DBF034")]
		public ObiAerodynamicConstraintBatch(bool cooked, bool sharesParticles)
		{
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0x1DBF120", Offset = "0x1DBF120", VA = "0x1DBF120", Slot = "4")]
		public override Oni.ConstraintType GetConstraintType()
		{
			return default(Oni.ConstraintType);
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0x1DBF128", Offset = "0x1DBF128", VA = "0x1DBF128", Slot = "5")]
		public override void Clear()
		{
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0x1DBF1B0", Offset = "0x1DBF1B0", VA = "0x1DBF1B0")]
		public void AddConstraint(int index, float area, float drag, float lift)
		{
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0x1DBF29C", Offset = "0x1DBF29C", VA = "0x1DBF29C")]
		public void RemoveConstraint(int index)
		{
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0x1DBF3FC", Offset = "0x1DBF3FC", VA = "0x1DBF3FC", Slot = "11")]
		public override List<int> GetConstraintsInvolvingParticle(int particleIndex)
		{
			return null;
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0x1DBF4EC", Offset = "0x1DBF4EC", VA = "0x1DBF4EC", Slot = "7")]
		protected override void OnAddToSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0x1DBF608", Offset = "0x1DBF608", VA = "0x1DBF608", Slot = "8")]
		protected override void OnRemoveFromSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0x1DBF60C", Offset = "0x1DBF60C", VA = "0x1DBF60C", Slot = "9")]
		public override void PushDataToSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0x1DBF7B0", Offset = "0x1DBF7B0", VA = "0x1DBF7B0", Slot = "10")]
		public override void PullDataFromSolver(ObiBatchedConstraints constraints)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000289")]
	public class ObiBendConstraintBatch : ObiConstraintBatch
	{
		[Token(Token = "0x20003BE")]
		public enum BendIndexType
		{
			[Token(Token = "0x400165E")]
			First,
			[Token(Token = "0x400165F")]
			Second,
			[Token(Token = "0x4001660")]
			Pivot
		}

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public List<int> bendingIndices;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public List<float> restBends;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public List<Vector2> bendingStiffnesses;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int[] solverIndices;

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0x1DC1690", Offset = "0x1DC1690", VA = "0x1DC1690")]
		public ObiBendConstraintBatch(bool cooked, bool sharesParticles)
		{
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0x1DC17B0", Offset = "0x1DC17B0", VA = "0x1DC17B0")]
		public ObiBendConstraintBatch(bool cooked, bool sharesParticles, float minYoungModulus, float maxYoungModulus)
		{
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0x1DC18E8", Offset = "0x1DC18E8", VA = "0x1DC18E8", Slot = "4")]
		public override Oni.ConstraintType GetConstraintType()
		{
			return default(Oni.ConstraintType);
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0x1DC18F0", Offset = "0x1DC18F0", VA = "0x1DC18F0", Slot = "5")]
		public override void Clear()
		{
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0x1DC1990", Offset = "0x1DC1990", VA = "0x1DC1990")]
		public void AddConstraint(int index1, int index2, int index3, float restBend, float bending, float stiffness)
		{
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0x1DC1ACC", Offset = "0x1DC1ACC", VA = "0x1DC1ACC")]
		public void InsertConstraint(int constraintIndex, int index1, int index2, int index3, float restBend, float bending, float stiffness)
		{
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0x1DC1CCC", Offset = "0x1DC1CCC", VA = "0x1DC1CCC")]
		public void SetParticleIndex(int constraintIndex, int particleIndex, BendIndexType type, bool wraparound)
		{
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0x1DC1DCC", Offset = "0x1DC1DCC", VA = "0x1DC1DCC")]
		public void RemoveConstraint(int index)
		{
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0x1DC1F48", Offset = "0x1DC1F48", VA = "0x1DC1F48", Slot = "11")]
		public override List<int> GetConstraintsInvolvingParticle(int particleIndex)
		{
			return null;
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0x1DC20B0", Offset = "0x1DC20B0", VA = "0x1DC20B0", Slot = "6")]
		public override void Cook()
		{
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0x1DC238C", Offset = "0x1DC238C", VA = "0x1DC238C", Slot = "7")]
		protected override void OnAddToSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0x1DC25B0", Offset = "0x1DC25B0", VA = "0x1DC25B0", Slot = "8")]
		protected override void OnRemoveFromSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0x1DC25B4", Offset = "0x1DC25B4", VA = "0x1DC25B4", Slot = "9")]
		public override void PushDataToSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0x1DC27CC", Offset = "0x1DC27CC", VA = "0x1DC27CC", Slot = "10")]
		public override void PullDataFromSolver(ObiBatchedConstraints constraints)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028A")]
	public abstract class ObiConstraintBatch
	{
		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected IntPtr batch;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxYoungModulus;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float minYoungModulus;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		protected int constraintCount;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[HideInInspector]
		protected bool cooked;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[SerializeField]
		[HideInInspector]
		protected bool sharesParticles;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		protected List<int> activeConstraints;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		protected List<int> phaseSizes;

		[Token(Token = "0x17000102")]
		public IntPtr OniBatch
		{
			[Token(Token = "0x60013C0")]
			[Address(RVA = "0x25A1794", Offset = "0x25A1794", VA = "0x25A1794")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x17000103")]
		public int ConstraintCount
		{
			[Token(Token = "0x60013C1")]
			[Address(RVA = "0x25A179C", Offset = "0x25A179C", VA = "0x25A179C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000104")]
		public bool IsCooked
		{
			[Token(Token = "0x60013C2")]
			[Address(RVA = "0x25A17A4", Offset = "0x25A17A4", VA = "0x25A17A4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000105")]
		public bool SharesParticles
		{
			[Token(Token = "0x60013C3")]
			[Address(RVA = "0x25A17AC", Offset = "0x25A17AC", VA = "0x25A17AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000106")]
		public IEnumerable<int> ActiveConstraints
		{
			[Token(Token = "0x60013C4")]
			[Address(RVA = "0x25A17B4", Offset = "0x25A17B4", VA = "0x25A17B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013C5")]
		public abstract Oni.ConstraintType GetConstraintType();

		[Token(Token = "0x60013C6")]
		public abstract void Clear();

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0x25A180C", Offset = "0x25A180C", VA = "0x25A180C", Slot = "6")]
		public virtual void Cook()
		{
		}

		[Token(Token = "0x60013C8")]
		protected abstract void OnAddToSolver(ObiBatchedConstraints constraints);

		[Token(Token = "0x60013C9")]
		protected abstract void OnRemoveFromSolver(ObiBatchedConstraints constraints);

		[Token(Token = "0x60013CA")]
		public abstract void PushDataToSolver(ObiBatchedConstraints constraints);

		[Token(Token = "0x60013CB")]
		public abstract void PullDataFromSolver(ObiBatchedConstraints constraints);

		[Token(Token = "0x60013CC")]
		public abstract List<int> GetConstraintsInvolvingParticle(int particleIndex);

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0x25A1810", Offset = "0x25A1810", VA = "0x25A1810")]
		protected float StiffnessToCompliance(float stiffness)
		{
			return default(float);
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0x25A18BC", Offset = "0x25A18BC", VA = "0x25A18BC")]
		public void ActivateConstraint(int index)
		{
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0x25A1954", Offset = "0x25A1954", VA = "0x25A1954")]
		public void DeactivateConstraint(int index)
		{
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0x25A19BC", Offset = "0x25A19BC", VA = "0x25A19BC")]
		public ObiConstraintBatch(bool cooked, bool sharesParticles)
		{
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0x25A1A94", Offset = "0x25A1A94", VA = "0x25A1A94")]
		public ObiConstraintBatch(bool cooked, bool sharesParticles, float minYoungModulus, float maxYoungModulus)
		{
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0x25A1B80", Offset = "0x25A1B80", VA = "0x25A1B80")]
		public void AddToSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0x25A1BFC", Offset = "0x25A1BFC", VA = "0x25A1BFC")]
		public void RemoveFromSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0x25A1C88", Offset = "0x25A1C88", VA = "0x25A1C88")]
		public void SetActiveConstraints()
		{
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0x25A1D00", Offset = "0x25A1D00", VA = "0x25A1D00")]
		public void Enable()
		{
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0x25A1D10", Offset = "0x25A1D10", VA = "0x25A1D10")]
		public void Disable()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028B")]
	public class ObiDistanceConstraintBatch : ObiConstraintBatch
	{
		[Token(Token = "0x20003BF")]
		public enum DistanceIndexType
		{
			[Token(Token = "0x4001662")]
			First,
			[Token(Token = "0x4001663")]
			Second
		}

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public List<int> springIndices;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public List<float> restLengths;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public List<Vector2> stiffnesses;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int[] solverIndices;

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0x25A3614", Offset = "0x25A3614", VA = "0x25A3614")]
		public ObiDistanceConstraintBatch(bool cooked, bool sharesParticles)
		{
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0x259DD48", Offset = "0x259DD48", VA = "0x259DD48")]
		public ObiDistanceConstraintBatch(bool cooked, bool sharesParticles, float minYoungModulus, float maxYoungModulus)
		{
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0x25A3730", Offset = "0x25A3730", VA = "0x25A3730", Slot = "4")]
		public override Oni.ConstraintType GetConstraintType()
		{
			return default(Oni.ConstraintType);
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0x25A3738", Offset = "0x25A3738", VA = "0x25A3738", Slot = "5")]
		public override void Clear()
		{
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0x259DF24", Offset = "0x259DF24", VA = "0x259DF24")]
		public void AddConstraint(int index1, int index2, float restLength, float stretchStiffness, float compressionStiffness)
		{
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0x25A37D8", Offset = "0x25A37D8", VA = "0x25A37D8")]
		public void InsertConstraint(int constraintIndex, int index1, int index2, float restLength, float stretchStiffness, float compressionStiffness)
		{
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0x25A39C4", Offset = "0x25A39C4", VA = "0x25A39C4")]
		public void SetParticleIndex(int constraintIndex, int particleIndex, DistanceIndexType type, bool wraparound)
		{
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0x25A3ABC", Offset = "0x25A3ABC", VA = "0x25A3ABC")]
		public void RemoveConstraint(int index)
		{
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0x25A3C38", Offset = "0x25A3C38", VA = "0x25A3C38", Slot = "11")]
		public override List<int> GetConstraintsInvolvingParticle(int particleIndex)
		{
			return null;
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0x25A3D88", Offset = "0x25A3D88", VA = "0x25A3D88", Slot = "6")]
		public override void Cook()
		{
		}

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0x25A4064", Offset = "0x25A4064", VA = "0x25A4064", Slot = "7")]
		protected override void OnAddToSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0x25A422C", Offset = "0x25A422C", VA = "0x25A422C", Slot = "8")]
		protected override void OnRemoveFromSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0x25A4230", Offset = "0x25A4230", VA = "0x25A4230", Slot = "9")]
		public override void PushDataToSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0x25A44A0", Offset = "0x25A44A0", VA = "0x25A44A0", Slot = "10")]
		public override void PullDataFromSolver(ObiBatchedConstraints constraints)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028C")]
	public class ObiPinConstraintBatch : ObiConstraintBatch
	{
		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public List<int> pinIndices;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public List<ObiCollider> pinBodies;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public List<Vector4> pinOffsets;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public List<float> stiffnesses;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public List<float> pinBreakResistance;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int[] solverIndices;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private IntPtr[] solverColliders;

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0x25ABB6C", Offset = "0x25ABB6C", VA = "0x25ABB6C")]
		public ObiPinConstraintBatch(bool cooked, bool sharesParticles)
		{
		}

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0x25ABD0C", Offset = "0x25ABD0C", VA = "0x25ABD0C")]
		public ObiPinConstraintBatch(bool cooked, bool sharesParticles, float minYoungModulus, float maxYoungModulus)
		{
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0x25ABEC4", Offset = "0x25ABEC4", VA = "0x25ABEC4", Slot = "4")]
		public override Oni.ConstraintType GetConstraintType()
		{
			return default(Oni.ConstraintType);
		}

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0x25ABECC", Offset = "0x25ABECC", VA = "0x25ABECC", Slot = "5")]
		public override void Clear()
		{
		}

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0x25ABF94", Offset = "0x25ABF94", VA = "0x25ABF94")]
		public void AddConstraint(int index1, ObiCollider body, Vector3 offset, float stiffness)
		{
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0x25AC0E4", Offset = "0x25AC0E4", VA = "0x25AC0E4")]
		public void RemoveConstraint(int index)
		{
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0x25AC28C", Offset = "0x25AC28C", VA = "0x25AC28C", Slot = "11")]
		public override List<int> GetConstraintsInvolvingParticle(int particleIndex)
		{
			return null;
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0x25AC37C", Offset = "0x25AC37C", VA = "0x25AC37C", Slot = "7")]
		protected override void OnAddToSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0x25AC584", Offset = "0x25AC584", VA = "0x25AC584", Slot = "8")]
		protected override void OnRemoveFromSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0x25AC588", Offset = "0x25AC588", VA = "0x25AC588", Slot = "9")]
		public override void PushDataToSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0x25AC750", Offset = "0x25AC750", VA = "0x25AC750", Slot = "10")]
		public override void PullDataFromSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0x25AC754", Offset = "0x25AC754", VA = "0x25AC754")]
		public void BreakConstraints()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028D")]
	public class ObiSkinConstraintBatch : ObiConstraintBatch
	{
		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public List<int> skinIndices;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public List<Vector4> skinPoints;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public List<Vector4> skinNormals;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public List<float> skinRadiiBackstop;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public List<float> skinStiffnesses;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int[] solverIndices;

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0x2702448", Offset = "0x2702448", VA = "0x2702448")]
		public ObiSkinConstraintBatch(bool cooked, bool sharesParticles)
		{
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0x27025B8", Offset = "0x27025B8", VA = "0x27025B8")]
		public ObiSkinConstraintBatch(bool cooked, bool sharesParticles, float minYoungModulus, float maxYoungModulus)
		{
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0x2702740", Offset = "0x2702740", VA = "0x2702740", Slot = "4")]
		public override Oni.ConstraintType GetConstraintType()
		{
			return default(Oni.ConstraintType);
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0x2702748", Offset = "0x2702748", VA = "0x2702748", Slot = "5")]
		public override void Clear()
		{
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0x2702808", Offset = "0x2702808", VA = "0x2702808")]
		public void AddConstraint(int index, Vector4 point, Vector4 normal, float radius, float collisionRadius, float backstop, float stiffness)
		{
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0x2702974", Offset = "0x2702974", VA = "0x2702974")]
		public void RemoveConstraint(int index)
		{
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0x2702B20", Offset = "0x2702B20", VA = "0x2702B20", Slot = "11")]
		public override List<int> GetConstraintsInvolvingParticle(int particleIndex)
		{
			return null;
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0x2702C10", Offset = "0x2702C10", VA = "0x2702C10", Slot = "6")]
		public override void Cook()
		{
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0x27034B0", Offset = "0x27034B0", VA = "0x27034B0", Slot = "7")]
		protected override void OnAddToSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0x270362C", Offset = "0x270362C", VA = "0x270362C", Slot = "8")]
		protected override void OnRemoveFromSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0x2703630", Offset = "0x2703630", VA = "0x2703630", Slot = "9")]
		public override void PushDataToSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0x2703938", Offset = "0x2703938", VA = "0x2703938", Slot = "10")]
		public override void PullDataFromSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0x2703B0C", Offset = "0x2703B0C", VA = "0x2703B0C")]
		public Vector3 GetSkinPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0x2703BCC", Offset = "0x2703BCC", VA = "0x2703BCC")]
		public Vector3 GetSkinNormal(int index)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x200028E")]
	public class ObiTetherConstraintBatch : ObiConstraintBatch
	{
		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public List<int> tetherIndices;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public List<Vector2> maxLengthsScales;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public List<float> stiffnesses;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int[] solverIndices;

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0x270B2F8", Offset = "0x270B2F8", VA = "0x270B2F8")]
		public ObiTetherConstraintBatch(bool cooked, bool sharesParticles)
		{
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0x270B418", Offset = "0x270B418", VA = "0x270B418")]
		public ObiTetherConstraintBatch(bool cooked, bool sharesParticles, float minYoungModulus, float maxYoungModulus)
		{
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0x270B550", Offset = "0x270B550", VA = "0x270B550", Slot = "4")]
		public override Oni.ConstraintType GetConstraintType()
		{
			return default(Oni.ConstraintType);
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0x270B558", Offset = "0x270B558", VA = "0x270B558", Slot = "5")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0x270B5F8", Offset = "0x270B5F8", VA = "0x270B5F8")]
		public void AddConstraint(int index1, int index2, float maxLength, float scale, float stiffness)
		{
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0x270B70C", Offset = "0x270B70C", VA = "0x270B70C")]
		public void RemoveConstraint(int index)
		{
		}

		[Token(Token = "0x6001405")]
		[Address(RVA = "0x270B888", Offset = "0x270B888", VA = "0x270B888", Slot = "11")]
		public override List<int> GetConstraintsInvolvingParticle(int particleIndex)
		{
			return null;
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0x270B9D8", Offset = "0x270B9D8", VA = "0x270B9D8", Slot = "6")]
		public override void Cook()
		{
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0x270BE1C", Offset = "0x270BE1C", VA = "0x270BE1C", Slot = "7")]
		protected override void OnAddToSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0x270BFE0", Offset = "0x270BFE0", VA = "0x270BFE0", Slot = "8")]
		protected override void OnRemoveFromSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0x270BFE4", Offset = "0x270BFE4", VA = "0x270BFE4", Slot = "9")]
		public override void PushDataToSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0x270C230", Offset = "0x270C230", VA = "0x270C230", Slot = "10")]
		public override void PullDataFromSolver(ObiBatchedConstraints constraints)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028F")]
	public class ObiVolumeConstraintBatch : ObiConstraintBatch
	{
		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public List<int> triangleIndices;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public List<int> firstTriangle;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public List<int> numTriangles;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public List<float> restVolumes;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public List<Vector2> pressureStiffness;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int[] solverIndices;

		[Token(Token = "0x600140B")]
		[Address(RVA = "0x270CC00", Offset = "0x270CC00", VA = "0x270CC00")]
		public ObiVolumeConstraintBatch(bool cooked, bool sharesParticles)
		{
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0x270CD4C", Offset = "0x270CD4C", VA = "0x270CD4C", Slot = "4")]
		public override Oni.ConstraintType GetConstraintType()
		{
			return default(Oni.ConstraintType);
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0x270CD54", Offset = "0x270CD54", VA = "0x270CD54", Slot = "5")]
		public override void Clear()
		{
		}

		[Token(Token = "0x600140E")]
		[Address(RVA = "0x270CE14", Offset = "0x270CE14", VA = "0x270CE14")]
		public void AddConstraint(int[] triangles, float restVolume, float pressure, float stiffness)
		{
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0x270CF84", Offset = "0x270CF84", VA = "0x270CF84")]
		public void RemoveConstraint(int index)
		{
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0x270D184", Offset = "0x270D184", VA = "0x270D184", Slot = "11")]
		public override List<int> GetConstraintsInvolvingParticle(int particleIndex)
		{
			return null;
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0x270D2EC", Offset = "0x270D2EC", VA = "0x270D2EC", Slot = "7")]
		protected override void OnAddToSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0x270D408", Offset = "0x270D408", VA = "0x270D408", Slot = "8")]
		protected override void OnRemoveFromSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0x270D40C", Offset = "0x270D40C", VA = "0x270D40C", Slot = "9")]
		public override void PushDataToSolver(ObiBatchedConstraints constraints)
		{
		}

		[Token(Token = "0x6001414")]
		[Address(RVA = "0x270D710", Offset = "0x270D710", VA = "0x270D710", Slot = "10")]
		public override void PullDataFromSolver(ObiBatchedConstraints constraints)
		{
		}
	}
	[Token(Token = "0x2000290")]
	[DisallowMultipleComponent]
	public class ObiAerodynamicConstraints : ObiBatchedConstraints
	{
		[Serializable]
		[Token(Token = "0x20003C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251C88", Offset = "0x1251C88")]
		private sealed class <>c
		{
			[Token(Token = "0x4001664")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001665")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Converter<ObiAerodynamicConstraintBatch, ObiConstraintBatch> <>9__5_0;

			[Token(Token = "0x60018E4")]
			[Address(RVA = "0x1DC0010", Offset = "0x1DC0010", VA = "0x1DC0010")]
			public <>c()
			{
			}

			[Token(Token = "0x60018E5")]
			[Address(RVA = "0x1DC0018", Offset = "0x1DC0018", VA = "0x1DC0018")]
			internal ObiConstraintBatch <GetBatches>b__5_0(ObiAerodynamicConstraintBatch x)
			{
				return null;
			}
		}

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125A774", Offset = "0x125A774")]
		public float airDensity;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125A7AC", Offset = "0x125A7AC")]
		public float dragCoefficient;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125A7E4", Offset = "0x125A7E4")]
		public float liftCoefficient;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private List<ObiAerodynamicConstraintBatch> batches;

		[Token(Token = "0x6001415")]
		[Address(RVA = "0x1DBF7B4", Offset = "0x1DBF7B4", VA = "0x1DBF7B4", Slot = "8")]
		public override Oni.ConstraintType GetConstraintType()
		{
			return default(Oni.ConstraintType);
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0x1DBF7BC", Offset = "0x1DBF7BC", VA = "0x1DBF7BC", Slot = "9")]
		public override List<ObiConstraintBatch> GetBatches()
		{
			return null;
		}

		[Token(Token = "0x6001417")]
		[Address(RVA = "0x1DBF8BC", Offset = "0x1DBF8BC", VA = "0x1DBF8BC")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x6001418")]
		[Address(RVA = "0x1DBF964", Offset = "0x1DBF964", VA = "0x1DBF964", Slot = "10")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6001419")]
		[Address(RVA = "0x1DBF9C4", Offset = "0x1DBF9C4", VA = "0x1DBF9C4")]
		public void AddBatch(ObiAerodynamicConstraintBatch batch)
		{
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0x1DBFA6C", Offset = "0x1DBFA6C", VA = "0x1DBFA6C")]
		public void RemoveBatch(ObiAerodynamicConstraintBatch batch)
		{
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0x1DBFAD4", Offset = "0x1DBFAD4", VA = "0x1DBFAD4")]
		public void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0x1DBFF0C", Offset = "0x1DBFF0C", VA = "0x1DBFF0C")]
		public ObiAerodynamicConstraints()
		{
		}
	}
	[Token(Token = "0x2000291")]
	[ExecuteInEditMode]
	public abstract class ObiBatchedConstraints : MonoBehaviour, IObiSolverClient
	{
		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool visualize;

		[NonSerialized]
		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ObiActor actor;

		[NonSerialized]
		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected bool inSolver;

		[Token(Token = "0x17000107")]
		public ObiActor Actor
		{
			[Token(Token = "0x600141D")]
			[Address(RVA = "0x1DC0F48", Offset = "0x1DC0F48", VA = "0x1DC0F48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000108")]
		public bool InSolver
		{
			[Token(Token = "0x600141E")]
			[Address(RVA = "0x1DC0F50", Offset = "0x1DC0F50", VA = "0x1DC0F50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600141F")]
		public abstract Oni.ConstraintType GetConstraintType();

		[Token(Token = "0x6001420")]
		public abstract List<ObiConstraintBatch> GetBatches();

		[Token(Token = "0x6001421")]
		public abstract void Clear();

		[Token(Token = "0x6001422")]
		[Address(RVA = "0x1DC0F58", Offset = "0x1DC0F58", VA = "0x1DC0F58")]
		protected void OnAddToSolver(object info)
		{
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0x1DC1060", Offset = "0x1DC1060", VA = "0x1DC1060")]
		protected void OnRemoveFromSolver(object info)
		{
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0x1DC1168", Offset = "0x1DC1168", VA = "0x1DC1168", Slot = "6")]
		public void PushDataToSolver(ParticleData data = ParticleData.NONE)
		{
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0x1DC1274", Offset = "0x1DC1274", VA = "0x1DC1274", Slot = "7")]
		public void PullDataFromSolver(ParticleData data = ParticleData.NONE)
		{
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0x1DC1380", Offset = "0x1DC1380", VA = "0x1DC1380")]
		public void SetActiveConstraints()
		{
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0x1DC1484", Offset = "0x1DC1484", VA = "0x1DC1484")]
		public void Enable()
		{
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0x1DC1588", Offset = "0x1DC1588", VA = "0x1DC1588")]
		public void Disable()
		{
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0x1DBDA4C", Offset = "0x1DBDA4C", VA = "0x1DBDA4C", Slot = "4")]
		public bool AddToSolver(object info)
		{
			return default(bool);
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0x1DBDEF4", Offset = "0x1DBDEF4", VA = "0x1DBDEF4", Slot = "5")]
		public bool RemoveFromSolver(object info)
		{
			return default(bool);
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0x1DBD3E4", Offset = "0x1DBD3E4", VA = "0x1DBD3E4")]
		public void GrabActor()
		{
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0x1DBD444", Offset = "0x1DBD444", VA = "0x1DBD444")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0x1DBD580", Offset = "0x1DBD580", VA = "0x1DBD580")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0x1DC168C", Offset = "0x1DC168C", VA = "0x1DC168C")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0x1DBFFA0", Offset = "0x1DBFFA0", VA = "0x1DBFFA0")]
		protected ObiBatchedConstraints()
		{
		}
	}
	[Token(Token = "0x2000292")]
	[DisallowMultipleComponent]
	public class ObiBendingConstraints : ObiBatchedConstraints
	{
		[Serializable]
		[Token(Token = "0x20003C1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251C98", Offset = "0x1251C98")]
		private sealed class <>c
		{
			[Token(Token = "0x4001666")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001667")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Converter<ObiBendConstraintBatch, ObiConstraintBatch> <>9__4_0;

			[Token(Token = "0x60018E7")]
			[Address(RVA = "0x1DC3008", Offset = "0x1DC3008", VA = "0x1DC3008")]
			public <>c()
			{
			}

			[Token(Token = "0x60018E8")]
			[Address(RVA = "0x1DC3010", Offset = "0x1DC3010", VA = "0x1DC3010")]
			internal ObiConstraintBatch <GetBatches>b__4_0(ObiBendConstraintBatch x)
			{
				return null;
			}
		}

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125A854", Offset = "0x125A854")]
		public float maxBending;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125A88C", Offset = "0x125A88C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125A88C", Offset = "0x125A88C")]
		public float stiffness;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private List<ObiBendConstraintBatch> batches;

		[Token(Token = "0x6001430")]
		[Address(RVA = "0x1DC27D0", Offset = "0x1DC27D0", VA = "0x1DC27D0", Slot = "8")]
		public override Oni.ConstraintType GetConstraintType()
		{
			return default(Oni.ConstraintType);
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0x1DC27D8", Offset = "0x1DC27D8", VA = "0x1DC27D8", Slot = "9")]
		public override List<ObiConstraintBatch> GetBatches()
		{
			return null;
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0x1DC28D8", Offset = "0x1DC28D8", VA = "0x1DC28D8", Slot = "10")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0x1DC2938", Offset = "0x1DC2938", VA = "0x1DC2938")]
		public void AddBatch(ObiBendConstraintBatch batch)
		{
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0x1DC29E0", Offset = "0x1DC29E0", VA = "0x1DC29E0")]
		public void RemoveBatch(ObiBendConstraintBatch batch)
		{
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0x1DC2A48", Offset = "0x1DC2A48", VA = "0x1DC2A48")]
		public void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0x1DC2F1C", Offset = "0x1DC2F1C", VA = "0x1DC2F1C")]
		public ObiBendingConstraints()
		{
		}
	}
	[Token(Token = "0x2000293")]
	[DisallowMultipleComponent]
	public class ObiDistanceConstraints : ObiBatchedConstraints
	{
		[Serializable]
		[Token(Token = "0x20003C2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251CA8", Offset = "0x1251CA8")]
		private sealed class <>c
		{
			[Token(Token = "0x4001668")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001669")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Converter<ObiDistanceConstraintBatch, ObiConstraintBatch> <>9__5_0;

			[Token(Token = "0x60018EA")]
			[Address(RVA = "0x25A4C28", Offset = "0x25A4C28", VA = "0x25A4C28")]
			public <>c()
			{
			}

			[Token(Token = "0x60018EB")]
			[Address(RVA = "0x25A4C30", Offset = "0x25A4C30", VA = "0x25A4C30")]
			internal ObiConstraintBatch <GetBatches>b__5_0(ObiDistanceConstraintBatch x)
			{
				return null;
			}
		}

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125A918", Offset = "0x125A918")]
		public float stretchingScale;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125A950", Offset = "0x125A950")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125A950", Offset = "0x125A950")]
		public float stiffness;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125A9A4", Offset = "0x125A9A4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125A9A4", Offset = "0x125A9A4")]
		public float slack;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private List<ObiDistanceConstraintBatch> batches;

		[Token(Token = "0x6001437")]
		[Address(RVA = "0x25A44A4", Offset = "0x25A44A4", VA = "0x25A44A4", Slot = "8")]
		public override Oni.ConstraintType GetConstraintType()
		{
			return default(Oni.ConstraintType);
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0x25A44AC", Offset = "0x25A44AC", VA = "0x25A44AC", Slot = "9")]
		public override List<ObiConstraintBatch> GetBatches()
		{
			return null;
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0x25A45AC", Offset = "0x25A45AC", VA = "0x25A45AC", Slot = "10")]
		public override void Clear()
		{
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0x259DE7C", Offset = "0x259DE7C", VA = "0x259DE7C")]
		public void AddBatch(ObiDistanceConstraintBatch batch)
		{
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0x25A4614", Offset = "0x25A4614", VA = "0x25A4614")]
		public void RemoveBatch(ObiDistanceConstraintBatch batch)
		{
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0x25A467C", Offset = "0x25A467C", VA = "0x25A467C")]
		public void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0x25A4B3C", Offset = "0x25A4B3C", VA = "0x25A4B3C")]
		public ObiDistanceConstraints()
		{
		}
	}
	[Token(Token = "0x2000294")]
	[DisallowMultipleComponent]
	public class ObiPinConstraints : ObiBatchedConstraints
	{
		[Serializable]
		[Token(Token = "0x20003C3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251CB8", Offset = "0x1251CB8")]
		private sealed class <>c
		{
			[Token(Token = "0x400166A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400166B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Converter<ObiPinConstraintBatch, ObiConstraintBatch> <>9__3_0;

			[Token(Token = "0x60018ED")]
			[Address(RVA = "0x25AD14C", Offset = "0x25AD14C", VA = "0x25AD14C")]
			public <>c()
			{
			}

			[Token(Token = "0x60018EE")]
			[Address(RVA = "0x25AD154", Offset = "0x25AD154", VA = "0x25AD154")]
			internal ObiConstraintBatch <GetBatches>b__3_0(ObiPinConstraintBatch x)
			{
				return null;
			}
		}

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125AA30", Offset = "0x125AA30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125AA30", Offset = "0x125AA30")]
		public float stiffness;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		private List<ObiPinConstraintBatch> batches;

		[Token(Token = "0x600143E")]
		[Address(RVA = "0x25AC884", Offset = "0x25AC884", VA = "0x25AC884", Slot = "8")]
		public override Oni.ConstraintType GetConstraintType()
		{
			return default(Oni.ConstraintType);
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0x25AC88C", Offset = "0x25AC88C", VA = "0x25AC88C", Slot = "9")]
		public override List<ObiConstraintBatch> GetBatches()
		{
			return null;
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0x25AC98C", Offset = "0x25AC98C", VA = "0x25AC98C", Slot = "10")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0x25AC9F4", Offset = "0x25AC9F4", VA = "0x25AC9F4")]
		public void AddBatch(ObiPinConstraintBatch batch)
		{
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0x25ACA9C", Offset = "0x25ACA9C", VA = "0x25ACA9C")]
		public void RemoveBatch(ObiPinConstraintBatch batch)
		{
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0x25ACB04", Offset = "0x25ACB04", VA = "0x25ACB04")]
		public void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0x25AD060", Offset = "0x25AD060", VA = "0x25AD060")]
		public ObiPinConstraints()
		{
		}
	}
	[Token(Token = "0x2000295")]
	[DisallowMultipleComponent]
	public class ObiSkinConstraints : ObiBatchedConstraints
	{
		[Serializable]
		[Token(Token = "0x20003C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251CC8", Offset = "0x1251CC8")]
		private sealed class <>c
		{
			[Token(Token = "0x400166C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400166D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Converter<ObiSkinConstraintBatch, ObiConstraintBatch> <>9__3_0;

			[Token(Token = "0x60018F0")]
			[Address(RVA = "0x2704610", Offset = "0x2704610", VA = "0x2704610")]
			public <>c()
			{
			}

			[Token(Token = "0x60018F1")]
			[Address(RVA = "0x2704618", Offset = "0x2704618", VA = "0x2704618")]
			internal ObiConstraintBatch <GetBatches>b__3_0(ObiSkinConstraintBatch x)
			{
				return null;
			}
		}

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125AABC", Offset = "0x125AABC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125AABC", Offset = "0x125AABC")]
		public float stiffness;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		private List<ObiSkinConstraintBatch> batches;

		[Token(Token = "0x6001445")]
		[Address(RVA = "0x2703C8C", Offset = "0x2703C8C", VA = "0x2703C8C", Slot = "8")]
		public override Oni.ConstraintType GetConstraintType()
		{
			return default(Oni.ConstraintType);
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0x2703C94", Offset = "0x2703C94", VA = "0x2703C94", Slot = "9")]
		public override List<ObiConstraintBatch> GetBatches()
		{
			return null;
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0x2703D94", Offset = "0x2703D94", VA = "0x2703D94", Slot = "10")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0x2703DFC", Offset = "0x2703DFC", VA = "0x2703DFC")]
		public void AddBatch(ObiSkinConstraintBatch batch)
		{
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0x2703EA4", Offset = "0x2703EA4", VA = "0x2703EA4")]
		public void RemoveBatch(ObiSkinConstraintBatch batch)
		{
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0x2703F0C", Offset = "0x2703F0C", VA = "0x2703F0C")]
		public void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0x2704524", Offset = "0x2704524", VA = "0x2704524")]
		public ObiSkinConstraints()
		{
		}
	}
	[Token(Token = "0x2000296")]
	[DisallowMultipleComponent]
	public class ObiTetherConstraints : ObiBatchedConstraints
	{
		[Serializable]
		[Token(Token = "0x20003C5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251CD8", Offset = "0x1251CD8")]
		private sealed class <>c
		{
			[Token(Token = "0x400166E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400166F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Converter<ObiTetherConstraintBatch, ObiConstraintBatch> <>9__4_0;

			[Token(Token = "0x60018F3")]
			[Address(RVA = "0x270CA64", Offset = "0x270CA64", VA = "0x270CA64")]
			public <>c()
			{
			}

			[Token(Token = "0x60018F4")]
			[Address(RVA = "0x270CA6C", Offset = "0x270CA6C", VA = "0x270CA6C")]
			internal ObiConstraintBatch <GetBatches>b__4_0(ObiTetherConstraintBatch x)
			{
				return null;
			}
		}

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125AB48", Offset = "0x125AB48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125AB48", Offset = "0x125AB48")]
		public float tetherScale;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125ABA0", Offset = "0x125ABA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125ABA0", Offset = "0x125ABA0")]
		public float stiffness;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private List<ObiTetherConstraintBatch> batches;

		[Token(Token = "0x600144C")]
		[Address(RVA = "0x270C234", Offset = "0x270C234", VA = "0x270C234", Slot = "8")]
		public override Oni.ConstraintType GetConstraintType()
		{
			return default(Oni.ConstraintType);
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0x270C23C", Offset = "0x270C23C", VA = "0x270C23C", Slot = "9")]
		public override List<ObiConstraintBatch> GetBatches()
		{
			return null;
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0x270C33C", Offset = "0x270C33C", VA = "0x270C33C", Slot = "10")]
		public override void Clear()
		{
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0x270C3A4", Offset = "0x270C3A4", VA = "0x270C3A4")]
		public void AddBatch(ObiTetherConstraintBatch batch)
		{
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0x270C44C", Offset = "0x270C44C", VA = "0x270C44C")]
		public void RemoveBatch(ObiTetherConstraintBatch batch)
		{
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0x270C4B4", Offset = "0x270C4B4", VA = "0x270C4B4")]
		public void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0x270C978", Offset = "0x270C978", VA = "0x270C978")]
		public ObiTetherConstraints()
		{
		}
	}
	[Token(Token = "0x2000297")]
	[DisallowMultipleComponent]
	public class ObiVolumeConstraints : ObiBatchedConstraints
	{
		[Serializable]
		[Token(Token = "0x20003C6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251CE8", Offset = "0x1251CE8")]
		private sealed class <>c
		{
			[Token(Token = "0x4001670")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001671")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Converter<ObiVolumeConstraintBatch, ObiConstraintBatch> <>9__4_0;

			[Token(Token = "0x60018F6")]
			[Address(RVA = "0x270E0CC", Offset = "0x270E0CC", VA = "0x270E0CC")]
			public <>c()
			{
			}

			[Token(Token = "0x60018F7")]
			[Address(RVA = "0x270E0D4", Offset = "0x270E0D4", VA = "0x270E0D4")]
			internal ObiConstraintBatch <GetBatches>b__4_0(ObiVolumeConstraintBatch x)
			{
				return null;
			}
		}

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125AC2C", Offset = "0x125AC2C")]
		public float overpressure;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125AC64", Offset = "0x125AC64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125AC64", Offset = "0x125AC64")]
		public float stiffness;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private List<ObiVolumeConstraintBatch> batches;

		[Token(Token = "0x6001453")]
		[Address(RVA = "0x270D714", Offset = "0x270D714", VA = "0x270D714", Slot = "8")]
		public override Oni.ConstraintType GetConstraintType()
		{
			return default(Oni.ConstraintType);
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0x270D71C", Offset = "0x270D71C", VA = "0x270D71C", Slot = "9")]
		public override List<ObiConstraintBatch> GetBatches()
		{
			return null;
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0x270D81C", Offset = "0x270D81C", VA = "0x270D81C", Slot = "10")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0x270D884", Offset = "0x270D884", VA = "0x270D884")]
		public void AddBatch(ObiVolumeConstraintBatch batch)
		{
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0x270D92C", Offset = "0x270D92C", VA = "0x270D92C")]
		public void RemoveBatch(ObiVolumeConstraintBatch batch)
		{
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0x270D994", Offset = "0x270D994", VA = "0x270D994")]
		public void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0x270DFE0", Offset = "0x270DFE0", VA = "0x270DFE0")]
		public ObiVolumeConstraints()
		{
		}
	}
	[Token(Token = "0x2000298")]
	public class CoroutineJob
	{
		[Token(Token = "0x20003C7")]
		public class ProgressInfo
		{
			[Token(Token = "0x4001672")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string userReadableInfo;

			[Token(Token = "0x4001673")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float progress;

			[Token(Token = "0x60018F8")]
			[Address(RVA = "0x1DBCABC", Offset = "0x1DBCABC", VA = "0x1DBCABC")]
			public ProgressInfo(string userReadableInfo, float progress)
			{
			}
		}

		[Token(Token = "0x20003C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251CF8", Offset = "0x1251CF8")]
		private sealed class <Start>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001674")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001675")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001676")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CoroutineJob <>4__this;

			[Token(Token = "0x4001677")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IEnumerator coroutine;

			[Token(Token = "0x4001678")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Stopwatch <sw>5__2;

			[Token(Token = "0x170001B6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60018FC")]
				[Address(RVA = "0x1DBCA4C", Offset = "0x1DBCA4C", VA = "0x1DBCA4C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60018FE")]
				[Address(RVA = "0x1DBCAB4", Offset = "0x1DBCAB4", VA = "0x1DBCAB4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018F9")]
			[Address(RVA = "0x1DBC6D0", Offset = "0x1DBC6D0", VA = "0x1DBC6D0")]
			[DebuggerHidden]
			public <Start>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x60018FA")]
			[Address(RVA = "0x1DBC710", Offset = "0x1DBC710", VA = "0x1DBC710", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60018FB")]
			[Address(RVA = "0x1DBC714", Offset = "0x1DBC714", VA = "0x1DBC714", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60018FD")]
			[Address(RVA = "0x1DBCA54", Offset = "0x1DBCA54", VA = "0x1DBCA54", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private object result;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isDone;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool raisedException;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		private bool stop;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Exception e;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int asyncThreshold;

		[Token(Token = "0x17000109")]
		public object Result
		{
			[Token(Token = "0x600145A")]
			[Address(RVA = "0x1DBC3C8", Offset = "0x1DBC3C8", VA = "0x1DBC3C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010A")]
		public bool IsDone
		{
			[Token(Token = "0x600145B")]
			[Address(RVA = "0x1DBC424", Offset = "0x1DBC424", VA = "0x1DBC424")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010B")]
		public bool RaisedException
		{
			[Token(Token = "0x600145C")]
			[Address(RVA = "0x1DBC42C", Offset = "0x1DBC42C", VA = "0x1DBC42C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0x1DBC434", Offset = "0x1DBC434", VA = "0x1DBC434")]
		private void Init()
		{
		}

		[Token(Token = "0x600145E")]
		[Address(RVA = "0x1DBC448", Offset = "0x1DBC448", VA = "0x1DBC448")]
		public static object RunSynchronously(IEnumerator coroutine)
		{
			return null;
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0x1DBC638", Offset = "0x1DBC638", VA = "0x1DBC638")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1263AAC", Offset = "0x1263AAC")]
		public IEnumerator Start(IEnumerator coroutine)
		{
			return null;
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0x1DBC6FC", Offset = "0x1DBC6FC", VA = "0x1DBC6FC")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0x1DBC708", Offset = "0x1DBC708", VA = "0x1DBC708")]
		public CoroutineJob()
		{
		}
	}
	[Token(Token = "0x2000299")]
	public class EditorCoroutine
	{
		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IEnumerator routine;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object result;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool isDone;

		[Token(Token = "0x1700010C")]
		public object Result
		{
			[Token(Token = "0x6001463")]
			[Address(RVA = "0x1DBCBFC", Offset = "0x1DBCBFC", VA = "0x1DBCBFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010D")]
		public bool IsDone
		{
			[Token(Token = "0x6001464")]
			[Address(RVA = "0x1DBCC04", Offset = "0x1DBCC04", VA = "0x1DBCC04")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0x1DBCB04", Offset = "0x1DBCB04", VA = "0x1DBCB04")]
		public static EditorCoroutine StartCoroutine(IEnumerator _routine)
		{
			return null;
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0x1DBCB98", Offset = "0x1DBCB98", VA = "0x1DBCB98")]
		private EditorCoroutine(IEnumerator _routine)
		{
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0x1DBCBCC", Offset = "0x1DBCBCC", VA = "0x1DBCBCC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0x1DBCD54", Offset = "0x1DBCD54", VA = "0x1DBCD54")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0x1DBCC0C", Offset = "0x1DBCC0C", VA = "0x1DBCC0C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0x1DBCD60", Offset = "0x1DBCD60", VA = "0x1DBCD60")]
		public static void ShowCoroutineProgressBar(string title, EditorCoroutine coroutine)
		{
		}
	}
	[Token(Token = "0x200029A")]
	public class ObiParticleCache : ScriptableObject
	{
		[Token(Token = "0x20003C9")]
		public class UncompressedFrame
		{
			[Token(Token = "0x4001679")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<int> indices;

			[Token(Token = "0x400167A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<Vector3> positions;

			[Token(Token = "0x60018FF")]
			[Address(RVA = "0x25A980C", Offset = "0x25A980C", VA = "0x25A980C")]
			public UncompressedFrame()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003CA")]
		public class Frame
		{
			[Token(Token = "0x400167B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float time;

			[Token(Token = "0x400167C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<Vector3> positions;

			[Token(Token = "0x400167D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<int> indices;

			[Token(Token = "0x6001900")]
			[Address(RVA = "0x25A89C0", Offset = "0x25A89C0", VA = "0x25A89C0")]
			public Frame()
			{
			}

			[Token(Token = "0x6001901")]
			[Address(RVA = "0x25A9798", Offset = "0x25A9798", VA = "0x25A9798")]
			public void Clear()
			{
			}

			[Token(Token = "0x6001902")]
			[Address(RVA = "0x25A9238", Offset = "0x25A9238", VA = "0x25A9238")]
			public int SizeInBytes()
			{
				return default(int);
			}

			[Token(Token = "0x6001903")]
			[Address(RVA = "0x25A93F4", Offset = "0x25A93F4", VA = "0x25A93F4")]
			public static void Lerp(Frame a, Frame b, ref Frame result, float mu)
			{
			}
		}

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float referenceIntervalSeconds;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool localSpace;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float duration;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<Frame> frames;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private List<int> references;

		[Token(Token = "0x1700010E")]
		public float Duration
		{
			[Token(Token = "0x600146A")]
			[Address(RVA = "0x25A8FDC", Offset = "0x25A8FDC", VA = "0x25A8FDC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700010F")]
		public int FrameCount
		{
			[Token(Token = "0x600146B")]
			[Address(RVA = "0x25A8FE4", Offset = "0x25A8FE4", VA = "0x25A8FE4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0x25A9034", Offset = "0x25A9034", VA = "0x25A9034")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0x25A9124", Offset = "0x25A9124", VA = "0x25A9124")]
		public int SizeInBytes()
		{
			return default(int);
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0x25A92A4", Offset = "0x25A92A4", VA = "0x25A92A4")]
		public void Clear()
		{
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0x25A9334", Offset = "0x25A9334", VA = "0x25A9334")]
		private int GetBaseFrame(float time)
		{
			return default(int);
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0x25A8A74", Offset = "0x25A8A74", VA = "0x25A8A74")]
		public void AddFrame(Frame frame)
		{
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0x25A8C88", Offset = "0x25A8C88", VA = "0x25A8C88")]
		public void GetFrame(float time, bool interpolate, ref Frame result)
		{
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0x25A9780", Offset = "0x25A9780", VA = "0x25A9780")]
		public ObiParticleCache()
		{
		}
	}
	[Token(Token = "0x200029B")]
	public class ObiRopeSection : ScriptableObject
	{
		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public List<Vector2> vertices;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int snapX;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int snapY;

		[Token(Token = "0x17000110")]
		public int Segments
		{
			[Token(Token = "0x6001473")]
			[Address(RVA = "0x2701FC8", Offset = "0x2701FC8", VA = "0x2701FC8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0x270201C", Offset = "0x270201C", VA = "0x270201C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0x27020BC", Offset = "0x27020BC", VA = "0x27020BC")]
		public void CirclePreset(int segments)
		{
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0x270224C", Offset = "0x270224C", VA = "0x270224C")]
		public static int SnapTo(float val, int snapInterval, int threshold)
		{
			return default(int);
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0x2702320", Offset = "0x2702320", VA = "0x2702320")]
		public ObiRopeSection()
		{
		}
	}
	[Token(Token = "0x200029C")]
	public abstract class ObiEmitterMaterial : ScriptableObject
	{
		[Token(Token = "0x20003CB")]
		public class MaterialChangeEventArgs : EventArgs
		{
			[Token(Token = "0x400167E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MaterialChanges changes;

			[Token(Token = "0x6001904")]
			[Address(RVA = "0x25A5B5C", Offset = "0x25A5B5C", VA = "0x25A5B5C")]
			public MaterialChangeEventArgs(MaterialChanges changes)
			{
			}
		}

		[Token(Token = "0x20003CC")]
		[Flags]
		public enum MaterialChanges
		{
			[Token(Token = "0x4001680")]
			PER_MATERIAL_DATA = 0,
			[Token(Token = "0x4001681")]
			PER_PARTICLE_DATA = 1
		}

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float resolution;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float restDensity;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private EventHandler<MaterialChangeEventArgs> onChangesMade;

		[Token(Token = "0x14000006")]
		public event EventHandler<MaterialChangeEventArgs> OnChangesMade
		{
			[Token(Token = "0x6001478")]
			[Address(RVA = "0x25A5A94", Offset = "0x25A5A94", VA = "0x25A5A94")]
			add
			{
			}
			[Token(Token = "0x6001479")]
			[Address(RVA = "0x25A5A04", Offset = "0x25A5A04", VA = "0x25A5A04")]
			remove
			{
			}
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0x25A6FD4", Offset = "0x25A6FD4", VA = "0x25A6FD4")]
		public void CommitChanges(MaterialChanges changes)
		{
		}

		[Token(Token = "0x600147B")]
		[Address(RVA = "0x25A61DC", Offset = "0x25A61DC", VA = "0x25A61DC")]
		public float GetParticleSize(Oni.SolverParameters.Mode mode)
		{
			return default(float);
		}

		[Token(Token = "0x600147C")]
		[Address(RVA = "0x25A6010", Offset = "0x25A6010", VA = "0x25A6010")]
		public float GetParticleMass(Oni.SolverParameters.Mode mode)
		{
			return default(float);
		}

		[Token(Token = "0x600147D")]
		public abstract Oni.FluidMaterial GetEquivalentOniMaterial(Oni.SolverParameters.Mode mode);

		[Token(Token = "0x600147E")]
		[Address(RVA = "0x25A706C", Offset = "0x25A706C", VA = "0x25A706C")]
		protected ObiEmitterMaterial()
		{
		}
	}
	[Token(Token = "0x200029D")]
	public class ObiEmitterMaterialFluid : ObiEmitterMaterial
	{
		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float smoothing;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float viscosity;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float surfaceTension;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float buoyancy;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float atmosphericDrag;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float atmosphericPressure;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float vorticity;

		[Token(Token = "0x600147F")]
		[Address(RVA = "0x25A7080", Offset = "0x25A7080", VA = "0x25A7080")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x6001480")]
		[Address(RVA = "0x25A7158", Offset = "0x25A7158", VA = "0x25A7158", Slot = "4")]
		public override Oni.FluidMaterial GetEquivalentOniMaterial(Oni.SolverParameters.Mode mode)
		{
			return default(Oni.FluidMaterial);
		}

		[Token(Token = "0x6001481")]
		[Address(RVA = "0x25A71A8", Offset = "0x25A71A8", VA = "0x25A71A8")]
		public ObiEmitterMaterialFluid()
		{
		}
	}
	[Token(Token = "0x200029E")]
	public class ObiEmitterMaterialGranular : ObiEmitterMaterial
	{
		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float randomness;

		[Token(Token = "0x6001482")]
		[Address(RVA = "0x25A71C8", Offset = "0x25A71C8", VA = "0x25A71C8")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0x25A7278", Offset = "0x25A7278", VA = "0x25A7278", Slot = "4")]
		public override Oni.FluidMaterial GetEquivalentOniMaterial(Oni.SolverParameters.Mode mode)
		{
			return default(Oni.FluidMaterial);
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0x25A72C0", Offset = "0x25A72C0", VA = "0x25A72C0")]
		public ObiEmitterMaterialGranular()
		{
		}
	}
	[Token(Token = "0x200029F")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	public abstract class ObiEmitterShape : MonoBehaviour
	{
		[Token(Token = "0x20003CD")]
		public enum SamplingMethod
		{
			[Token(Token = "0x4001683")]
			SURFACE,
			[Token(Token = "0x4001684")]
			LAYER,
			[Token(Token = "0x4001685")]
			FILL
		}

		[Token(Token = "0x20003CE")]
		public struct DistributionPoint
		{
			[Token(Token = "0x4001686")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4001687")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 velocity;

			[Token(Token = "0x4001688")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Color color;

			[Token(Token = "0x6001905")]
			[Address(RVA = "0x25A74A8", Offset = "0x25A74A8", VA = "0x25A74A8")]
			public DistributionPoint(Vector3 position, Vector3 velocity)
			{
			}

			[Token(Token = "0x6001906")]
			[Address(RVA = "0x25A74E0", Offset = "0x25A74E0", VA = "0x25A74E0")]
			public DistributionPoint(Vector3 position, Vector3 velocity, Color color)
			{
			}
		}

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SamplingMethod samplingMethod;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public float particleSize;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected List<DistributionPoint> distribution;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected int lastDistributionPoint;

		[Token(Token = "0x17000111")]
		public int DistributionPointsCount
		{
			[Token(Token = "0x6001485")]
			[Address(RVA = "0x25A6F60", Offset = "0x25A6F60", VA = "0x25A6F60")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0x25A72D4", Offset = "0x25A72D4", VA = "0x25A72D4")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0x25A7380", Offset = "0x25A7380", VA = "0x25A7380")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001488")]
		public abstract void GenerateDistribution();

		[Token(Token = "0x6001489")]
		public abstract bool SupportsAllSamplingMethods();

		[Token(Token = "0x600148A")]
		[Address(RVA = "0x25A6984", Offset = "0x25A6984", VA = "0x25A6984")]
		public DistributionPoint GetDistributionPoint()
		{
			return default(DistributionPoint);
		}

		[Token(Token = "0x600148B")]
		[Address(RVA = "0x25A742C", Offset = "0x25A742C", VA = "0x25A742C")]
		protected ObiEmitterShape()
		{
		}
	}
	[Token(Token = "0x20002A0")]
	[Flags]
	public enum ParticleData
	{
		[Token(Token = "0x4001104")]
		NONE = 0,
		[Token(Token = "0x4001105")]
		ACTIVE_STATUS = 1,
		[Token(Token = "0x4001106")]
		ACTOR_ID = 2,
		[Token(Token = "0x4001107")]
		POSITIONS = 4,
		[Token(Token = "0x4001108")]
		VELOCITIES = 8,
		[Token(Token = "0x4001109")]
		INV_MASSES = 0x10,
		[Token(Token = "0x400110A")]
		VORTICITIES = 0x20,
		[Token(Token = "0x400110B")]
		SOLID_RADII = 0x40,
		[Token(Token = "0x400110C")]
		PHASES = 0x80,
		[Token(Token = "0x400110D")]
		REST_POSITIONS = 0x100,
		[Token(Token = "0x400110E")]
		COLLISION_MATERIAL = 0x200,
		[Token(Token = "0x400110F")]
		ALL = -1
	}
	[Token(Token = "0x20002A1")]
	public interface IObiSolverClient
	{
		[Token(Token = "0x600148C")]
		bool AddToSolver(object info);

		[Token(Token = "0x600148D")]
		bool RemoveFromSolver(object info);

		[Token(Token = "0x600148E")]
		void PushDataToSolver(ParticleData data = ParticleData.NONE);

		[Token(Token = "0x600148F")]
		void PullDataFromSolver(ParticleData data = ParticleData.NONE);
	}
	[Token(Token = "0x20002A2")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12515F8", Offset = "0x12515F8")]
	[DisallowMultipleComponent]
	public class ObiAnimatorController : MonoBehaviour
	{
		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool updatedThisStep;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x6001490")]
		[Address(RVA = "0x1DC0348", Offset = "0x1DC0348", VA = "0x1DC0348")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001491")]
		[Address(RVA = "0x1DC03A8", Offset = "0x1DC03A8", VA = "0x1DC03A8")]
		public void UpdateAnimation()
		{
		}

		[Token(Token = "0x6001492")]
		[Address(RVA = "0x1DC0490", Offset = "0x1DC0490", VA = "0x1DC0490")]
		public void ResetUpdateFlag()
		{
		}

		[Token(Token = "0x6001493")]
		[Address(RVA = "0x1DC0498", Offset = "0x1DC0498", VA = "0x1DC0498")]
		public void ResumeAutonomousUpdate()
		{
		}

		[Token(Token = "0x6001494")]
		[Address(RVA = "0x1DC0554", Offset = "0x1DC0554", VA = "0x1DC0554")]
		public ObiAnimatorController()
		{
		}
	}
	[Token(Token = "0x20002A3")]
	public class ObiArbiter
	{
		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<ObiSolver> solvers;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int solverCounter;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static int profileThrottle;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static int stepCounter;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static bool frameStarted;

		[Token(Token = "0x14000007")]
		public static event EventHandler OnFrameStart
		{
			[Token(Token = "0x6001495")]
			[Address(RVA = "0x1DC055C", Offset = "0x1DC055C", VA = "0x1DC055C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263B10", Offset = "0x1263B10")]
			add
			{
			}
			[Token(Token = "0x6001496")]
			[Address(RVA = "0x1DC064C", Offset = "0x1DC064C", VA = "0x1DC064C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263B20", Offset = "0x1263B20")]
			remove
			{
			}
		}

		[Token(Token = "0x14000008")]
		public static event EventHandler OnFrameEnd
		{
			[Token(Token = "0x6001497")]
			[Address(RVA = "0x1DC073C", Offset = "0x1DC073C", VA = "0x1DC073C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263B30", Offset = "0x1263B30")]
			add
			{
			}
			[Token(Token = "0x6001498")]
			[Address(RVA = "0x1DC082C", Offset = "0x1DC082C", VA = "0x1DC082C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263B40", Offset = "0x1263B40")]
			remove
			{
			}
		}

		[Token(Token = "0x6001499")]
		[Address(RVA = "0x1DC091C", Offset = "0x1DC091C", VA = "0x1DC091C")]
		public static void RegisterSolver(ObiSolver solver)
		{
		}

		[Token(Token = "0x600149A")]
		[Address(RVA = "0x1DC09E0", Offset = "0x1DC09E0", VA = "0x1DC09E0")]
		public static void UnregisterSolver(ObiSolver solver)
		{
		}

		[Token(Token = "0x600149B")]
		[Address(RVA = "0x1DC0AA4", Offset = "0x1DC0AA4", VA = "0x1DC0AA4")]
		public static void FrameStart()
		{
		}

		[Token(Token = "0x600149C")]
		[Address(RVA = "0x1DC0B90", Offset = "0x1DC0B90", VA = "0x1DC0B90")]
		public static double FrameEnd()
		{
			return default(double);
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0x1DC0B98", Offset = "0x1DC0B98", VA = "0x1DC0B98")]
		public static Oni.ProfileInfo[] GetProfileInfo()
		{
			return null;
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0x1DC0C0C", Offset = "0x1DC0C0C", VA = "0x1DC0C0C")]
		public static void WaitForAllSolvers()
		{
		}

		[Token(Token = "0x600149F")]
		[Address(RVA = "0x1DC0E9C", Offset = "0x1DC0E9C", VA = "0x1DC0E9C")]
		public ObiArbiter()
		{
		}
	}
	[Token(Token = "0x20002A4")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x125166C", Offset = "0x125166C")]
	[DisallowMultipleComponent]
	public sealed class ObiSolver : MonoBehaviour
	{
		[Token(Token = "0x20003CF")]
		public enum SimulationOrder
		{
			[Token(Token = "0x400168A")]
			FixedUpdate,
			[Token(Token = "0x400168B")]
			AfterFixedUpdate,
			[Token(Token = "0x400168C")]
			LateUpdate
		}

		[Token(Token = "0x20003D0")]
		public class ObiCollisionEventArgs : EventArgs
		{
			[Token(Token = "0x400168D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Oni.Contact[] contacts;

			[Token(Token = "0x6001907")]
			[Address(RVA = "0x2707B3C", Offset = "0x2707B3C", VA = "0x2707B3C")]
			public ObiCollisionEventArgs(Oni.Contact[] contacts)
			{
			}
		}

		[Token(Token = "0x20003D1")]
		public class ObiFluidEventArgs : EventArgs
		{
			[Token(Token = "0x400168E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int[] indices;

			[Token(Token = "0x400168F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector4[] vorticities;

			[Token(Token = "0x4001690")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float[] densities;

			[Token(Token = "0x6001908")]
			[Address(RVA = "0x270790C", Offset = "0x270790C", VA = "0x270790C")]
			public ObiFluidEventArgs(int[] indices, Vector4[] vorticities, float[] densities)
			{
			}
		}

		[Token(Token = "0x20003D2")]
		public class ParticleInActor
		{
			[Token(Token = "0x4001691")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ObiActor actor;

			[Token(Token = "0x4001692")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int indexInActor;

			[Token(Token = "0x6001909")]
			[Address(RVA = "0x270624C", Offset = "0x270624C", VA = "0x270624C")]
			public ParticleInActor(ObiActor actor, int indexInActor)
			{
			}
		}

		[Token(Token = "0x4001119")]
		public const int MAX_NEIGHBOURS = 92;

		[Token(Token = "0x400111A")]
		public const int CONSTRAINT_GROUPS = 12;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int maxParticles;

		[NonSerialized]
		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[HideInInspector]
		public bool simulate;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125AE00", Offset = "0x125AE00")]
		public bool simulateWhenInvisible;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125AE38", Offset = "0x125AE38")]
		public bool simulateInLocalSpace;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x125AE70", Offset = "0x125AE70")]
		public SimulationOrder simulationOrder;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public LayerMask collisionLayers;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Oni.SolverParameters parameters;

		[NonSerialized]
		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public List<ObiActor> actors;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int allocatedParticleCount;

		[NonSerialized]
		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public ParticleInActor[] particleToActor;

		[NonSerialized]
		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public int[] materialIndices;

		[NonSerialized]
		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public int[] fluidMaterialIndices;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int[] activeParticles;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private List<ObiEmitterMaterial> emitterMaterials;

		[NonSerialized]
		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		public Vector4[] renderablePositions;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		public int[] constraintsOrder;

		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Oni.ConstraintParameters distanceConstraintParameters;

		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
		public Oni.ConstraintParameters bendingConstraintParameters;

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFA")]
		public Oni.ConstraintParameters particleCollisionConstraintParameters;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x107")]
		public Oni.ConstraintParameters collisionConstraintParameters;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public Oni.ConstraintParameters skinConstraintParameters;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
		public Oni.ConstraintParameters volumeConstraintParameters;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12E")]
		public Oni.ConstraintParameters tetherConstraintParameters;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13B")]
		public Oni.ConstraintParameters pinConstraintParameters;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public Oni.ConstraintParameters stitchConstraintParameters;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x155")]
		public Oni.ConstraintParameters densityConstraintParameters;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private IntPtr oniSolver;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private ObiEmitterMaterial defaultFluidMaterial;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private Bounds bounds;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Matrix4x4 lastTransform;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private bool initialized;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D1")]
		private bool isVisible;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private float smoothDelta;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private int renderablePositionsClients;

		[Token(Token = "0x17000112")]
		public IntPtr OniSolver
		{
			[Token(Token = "0x60014B3")]
			[Address(RVA = "0x27051A8", Offset = "0x27051A8", VA = "0x27051A8")]
			get
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x17000113")]
		public Bounds Bounds
		{
			[Token(Token = "0x60014B4")]
			[Address(RVA = "0x27051B0", Offset = "0x27051B0", VA = "0x27051B0")]
			get
			{
				return default(Bounds);
			}
		}

		[Token(Token = "0x17000114")]
		public Matrix4x4 LastTransform
		{
			[Token(Token = "0x60014B5")]
			[Address(RVA = "0x27051C8", Offset = "0x27051C8", VA = "0x27051C8")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x17000115")]
		public bool IsVisible
		{
			[Token(Token = "0x60014B6")]
			[Address(RVA = "0x27051DC", Offset = "0x27051DC", VA = "0x27051DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000116")]
		public int AllocParticleCount
		{
			[Token(Token = "0x60014B7")]
			[Address(RVA = "0x27051E4", Offset = "0x27051E4", VA = "0x27051E4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000117")]
		public bool IsUpdating
		{
			[Token(Token = "0x60014B8")]
			[Address(RVA = "0x27051EC", Offset = "0x27051EC", VA = "0x27051EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000009")]
		public event EventHandler OnFrameBegin
		{
			[Token(Token = "0x60014A1")]
			[Address(RVA = "0x2704620", Offset = "0x2704620", VA = "0x2704620")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263B50", Offset = "0x1263B50")]
			add
			{
			}
			[Token(Token = "0x60014A2")]
			[Address(RVA = "0x27046C4", Offset = "0x27046C4", VA = "0x27046C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263B60", Offset = "0x1263B60")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000A")]
		public event EventHandler OnStepBegin
		{
			[Token(Token = "0x60014A3")]
			[Address(RVA = "0x2704768", Offset = "0x2704768", VA = "0x2704768")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263B70", Offset = "0x1263B70")]
			add
			{
			}
			[Token(Token = "0x60014A4")]
			[Address(RVA = "0x270480C", Offset = "0x270480C", VA = "0x270480C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263B80", Offset = "0x1263B80")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000B")]
		public event EventHandler OnFixedParticlesUpdated
		{
			[Token(Token = "0x60014A5")]
			[Address(RVA = "0x27048B0", Offset = "0x27048B0", VA = "0x27048B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263B90", Offset = "0x1263B90")]
			add
			{
			}
			[Token(Token = "0x60014A6")]
			[Address(RVA = "0x2704954", Offset = "0x2704954", VA = "0x2704954")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263BA0", Offset = "0x1263BA0")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000C")]
		public event EventHandler OnStepEnd
		{
			[Token(Token = "0x60014A7")]
			[Address(RVA = "0x27049F8", Offset = "0x27049F8", VA = "0x27049F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263BB0", Offset = "0x1263BB0")]
			add
			{
			}
			[Token(Token = "0x60014A8")]
			[Address(RVA = "0x2704A9C", Offset = "0x2704A9C", VA = "0x2704A9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263BC0", Offset = "0x1263BC0")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000D")]
		public event EventHandler OnBeforePositionInterpolation
		{
			[Token(Token = "0x60014A9")]
			[Address(RVA = "0x2704B40", Offset = "0x2704B40", VA = "0x2704B40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263BD0", Offset = "0x1263BD0")]
			add
			{
			}
			[Token(Token = "0x60014AA")]
			[Address(RVA = "0x2704BE4", Offset = "0x2704BE4", VA = "0x2704BE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263BE0", Offset = "0x1263BE0")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000E")]
		public event EventHandler OnBeforeActorsFrameEnd
		{
			[Token(Token = "0x60014AB")]
			[Address(RVA = "0x2704C88", Offset = "0x2704C88", VA = "0x2704C88")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263BF0", Offset = "0x1263BF0")]
			add
			{
			}
			[Token(Token = "0x60014AC")]
			[Address(RVA = "0x2704D2C", Offset = "0x2704D2C", VA = "0x2704D2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263C00", Offset = "0x1263C00")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000F")]
		public event EventHandler OnFrameEnd
		{
			[Token(Token = "0x60014AD")]
			[Address(RVA = "0x2704DD0", Offset = "0x2704DD0", VA = "0x2704DD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263C10", Offset = "0x1263C10")]
			add
			{
			}
			[Token(Token = "0x60014AE")]
			[Address(RVA = "0x2704E74", Offset = "0x2704E74", VA = "0x2704E74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263C20", Offset = "0x1263C20")]
			remove
			{
			}
		}

		[Token(Token = "0x14000010")]
		public event EventHandler<ObiCollisionEventArgs> OnCollision
		{
			[Token(Token = "0x60014AF")]
			[Address(RVA = "0x2704F18", Offset = "0x2704F18", VA = "0x2704F18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263C30", Offset = "0x1263C30")]
			add
			{
			}
			[Token(Token = "0x60014B0")]
			[Address(RVA = "0x2704FBC", Offset = "0x2704FBC", VA = "0x2704FBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263C40", Offset = "0x1263C40")]
			remove
			{
			}
		}

		[Token(Token = "0x14000011")]
		public event EventHandler<ObiFluidEventArgs> OnFluidUpdated
		{
			[Token(Token = "0x60014B1")]
			[Address(RVA = "0x2705060", Offset = "0x2705060", VA = "0x2705060")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263C50", Offset = "0x1263C50")]
			add
			{
			}
			[Token(Token = "0x60014B2")]
			[Address(RVA = "0x2705104", Offset = "0x2705104", VA = "0x2705104")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263C60", Offset = "0x1263C60")]
			remove
			{
			}
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0x2705224", Offset = "0x2705224", VA = "0x2705224")]
		public void RequireRenderablePositions()
		{
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0x2705234", Offset = "0x2705234", VA = "0x2705234")]
		public void RelinquishRenderablePositions()
		{
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0x2705248", Offset = "0x2705248", VA = "0x2705248")]
		private void Awake()
		{
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0x270553C", Offset = "0x270553C", VA = "0x270553C")]
		private void Start()
		{
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0x270561C", Offset = "0x270561C", VA = "0x270561C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0x27058C4", Offset = "0x27058C4", VA = "0x27058C4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0x2705940", Offset = "0x2705940", VA = "0x2705940")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0x27052AC", Offset = "0x27052AC", VA = "0x27052AC")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0x2705700", Offset = "0x2705700", VA = "0x2705700")]
		private void Teardown()
		{
		}

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0x2706000", Offset = "0x2706000", VA = "0x2706000")]
		public bool AddActor(ObiActor actor, int numParticles)
		{
			return default(bool);
		}

		[Token(Token = "0x60014C3")]
		[Address(RVA = "0x27063C8", Offset = "0x27063C8", VA = "0x27063C8")]
		public int RemoveActor(ObiActor actor)
		{
			return default(int);
		}

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0x2705E44", Offset = "0x2705E44", VA = "0x2705E44")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0x2706294", Offset = "0x2706294", VA = "0x2706294")]
		public void UpdateActiveParticles()
		{
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0x2705A4C", Offset = "0x2705A4C", VA = "0x2705A4C")]
		public void UpdateEmitterMaterials()
		{
		}

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0x27068F4", Offset = "0x27068F4", VA = "0x27068F4")]
		private void emitterMaterial_OnChangesMade(object sender, ObiEmitterMaterial.MaterialChangeEventArgs e)
		{
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0x2706A3C", Offset = "0x2706A3C", VA = "0x2706A3C")]
		public void AccumulateSimulationTime(float dt)
		{
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0x2706AD4", Offset = "0x2706AD4", VA = "0x2706AD4")]
		public void ResetSimulationTime()
		{
		}

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0x2706B5C", Offset = "0x2706B5C", VA = "0x2706B5C")]
		public void SimulateStep(float stepTime)
		{
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0x2706E70", Offset = "0x2706E70", VA = "0x2706E70")]
		public void EndFrame(float frameDelta)
		{
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0x27072F8", Offset = "0x27072F8", VA = "0x27072F8")]
		private void TriggerFluidUpdateEvents()
		{
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0x27079C0", Offset = "0x27079C0", VA = "0x27079C0")]
		private void TriggerCollisionEvents()
		{
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0x2707BC0", Offset = "0x2707BC0", VA = "0x2707BC0")]
		private bool AreBoundsValid(Bounds bounds)
		{
			return default(bool);
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0x2707454", Offset = "0x2707454", VA = "0x2707454")]
		private void CheckVisibility()
		{
		}

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0x2708314", Offset = "0x2708314", VA = "0x2708314")]
		private void Update()
		{
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0x2708530", Offset = "0x2708530", VA = "0x2708530")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60014D2")]
		[Address(RVA = "0x2708598", Offset = "0x2708598", VA = "0x2708598")]
		public void AllSolversStepEnd()
		{
		}

		[Token(Token = "0x60014D3")]
		[Address(RVA = "0x27086EC", Offset = "0x27086EC", VA = "0x27086EC")]
		public ObiSolver()
		{
		}

		[Token(Token = "0x60014D4")]
		[Address(RVA = "0x2708AE0", Offset = "0x2708AE0", VA = "0x2708AE0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1263C70", Offset = "0x1263C70")]
		private Oni.FluidMaterial <UpdateEmitterMaterials>b__92_0(ObiEmitterMaterial a)
		{
			return default(Oni.FluidMaterial);
		}
	}
	[Token(Token = "0x20002A5")]
	public class ObiSolverData
	{
		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ParticleData particleData;

		[Token(Token = "0x60014D5")]
		[Address(RVA = "0x2708B08", Offset = "0x2708B08", VA = "0x2708B08")]
		public ObiSolverData(ParticleData particleData)
		{
		}
	}
	[Token(Token = "0x20002A6")]
	public class ObiAmbientForceZone : ObiExternalForce
	{
		[Token(Token = "0x60014D6")]
		[Address(RVA = "0x1DC0020", Offset = "0x1DC0020", VA = "0x1DC0020", Slot = "4")]
		public override void ApplyForcesToActor(ObiActor actor)
		{
		}

		[Token(Token = "0x60014D7")]
		[Address(RVA = "0x1DC0270", Offset = "0x1DC0270", VA = "0x1DC0270")]
		public void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0x1DC0340", Offset = "0x1DC0340", VA = "0x1DC0340")]
		public ObiAmbientForceZone()
		{
		}
	}
	[Token(Token = "0x20002A7")]
	public abstract class ObiExternalForce : MonoBehaviour
	{
		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float intensity;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float turbulence;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float turbulenceFrequency;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float turbulenceSeed;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ObiSolver[] affectedSolvers;

		[Token(Token = "0x60014D9")]
		[Address(RVA = "0x25A74F8", Offset = "0x25A74F8", VA = "0x25A74F8")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x60014DA")]
		[Address(RVA = "0x25A76EC", Offset = "0x25A76EC", VA = "0x25A76EC")]
		protected float GetTurbulence(float turbulenceIntensity)
		{
			return default(float);
		}

		[Token(Token = "0x60014DB")]
		public abstract void ApplyForcesToActor(ObiActor actor);

		[Token(Token = "0x60014DC")]
		[Address(RVA = "0x25A7784", Offset = "0x25A7784", VA = "0x25A7784")]
		protected ObiExternalForce()
		{
		}
	}
	[Token(Token = "0x20002A8")]
	public class ObiSphericalForceZone : ObiExternalForce
	{
		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float radius;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool radial;

		[Token(Token = "0x60014DD")]
		[Address(RVA = "0x2708ED4", Offset = "0x2708ED4", VA = "0x2708ED4")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60014DE")]
		[Address(RVA = "0x2708F3C", Offset = "0x2708F3C", VA = "0x2708F3C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60014DF")]
		[Address(RVA = "0x2708FA8", Offset = "0x2708FA8", VA = "0x2708FA8", Slot = "4")]
		public override void ApplyForcesToActor(ObiActor actor)
		{
		}

		[Token(Token = "0x60014E0")]
		[Address(RVA = "0x2709554", Offset = "0x2709554", VA = "0x2709554")]
		public void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60014E1")]
		[Address(RVA = "0x2709B6C", Offset = "0x2709B6C", VA = "0x2709B6C")]
		public ObiSphericalForceZone()
		{
		}
	}
	[Token(Token = "0x20002A9")]
	[ExecuteInEditMode]
	public class ObiBezierCurve : ObiCurve
	{
		[Token(Token = "0x20003D3")]
		public enum BezierCPMode
		{
			[Token(Token = "0x4001694")]
			Free,
			[Token(Token = "0x4001695")]
			Aligned,
			[Token(Token = "0x4001696")]
			Mirrored
		}

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public List<BezierCPMode> controlPointModes;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public BezierCPMode lastOpenCPMode;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[HideInInspector]
		public Vector3 lastOpenCP;

		[Token(Token = "0x60014E2")]
		[Address(RVA = "0x1DC3018", Offset = "0x1DC3018", VA = "0x1DC3018", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x60014E3")]
		[Address(RVA = "0x1DC30F8", Offset = "0x1DC30F8", VA = "0x1DC30F8", Slot = "5")]
		protected override void SetClosed(bool closed)
		{
		}

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0x1DC35D0", Offset = "0x1DC35D0", VA = "0x1DC35D0", Slot = "7")]
		public override int GetNumSpans()
		{
			return default(int);
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0x1DC3650", Offset = "0x1DC3650", VA = "0x1DC3650")]
		public bool IsHandle(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0x1DC3678", Offset = "0x1DC3678", VA = "0x1DC3678")]
		public int GetHandleControlPointIndex(int index)
		{
			return default(int);
		}

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0x1DC3718", Offset = "0x1DC3718", VA = "0x1DC3718")]
		public List<int> GetHandleIndicesForControlPoint(int index)
		{
			return null;
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0x1DC3894", Offset = "0x1DC3894", VA = "0x1DC3894", Slot = "6")]
		public override void DisplaceControlPoint(int index, Vector3 delta)
		{
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0x1DC3DA8", Offset = "0x1DC3DA8", VA = "0x1DC3DA8", Slot = "8")]
		public override int GetSpanControlPointForMu(float mu, out float spanMu)
		{
			return default(int);
		}

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0x1DC3E28", Offset = "0x1DC3E28", VA = "0x1DC3E28")]
		public BezierCPMode GetControlPointMode(int index)
		{
			return default(BezierCPMode);
		}

		[Token(Token = "0x60014EB")]
		[Address(RVA = "0x1DC3EBC", Offset = "0x1DC3EBC", VA = "0x1DC3EBC")]
		public void SetControlPointMode(int index, BezierCPMode mode)
		{
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0x1DC329C", Offset = "0x1DC329C", VA = "0x1DC329C")]
		public void EnforceMode(int index)
		{
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0x1DC3FAC", Offset = "0x1DC3FAC", VA = "0x1DC3FAC")]
		public void AddSpan()
		{
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0x1DC41F4", Offset = "0x1DC41F4", VA = "0x1DC41F4")]
		public void RemoveCurvePoint(int curvePoint)
		{
		}

		[Token(Token = "0x60014EF")]
		[Address(RVA = "0x1DC43FC", Offset = "0x1DC43FC", VA = "0x1DC43FC", Slot = "9")]
		protected override float Evaluate1D(float y0, float y1, float y2, float y3, float mu)
		{
			return default(float);
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0x1DC444C", Offset = "0x1DC444C", VA = "0x1DC444C", Slot = "10")]
		protected override float EvaluateFirstDerivative1D(float y0, float y1, float y2, float y3, float mu)
		{
			return default(float);
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0x1DC4498", Offset = "0x1DC4498", VA = "0x1DC4498", Slot = "11")]
		protected override float EvaluateSecondDerivative1D(float y0, float y1, float y2, float y3, float mu)
		{
			return default(float);
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0x1DC44E4", Offset = "0x1DC44E4", VA = "0x1DC44E4")]
		public ObiBezierCurve()
		{
		}
	}
	[Token(Token = "0x20002AA")]
	[ExecuteInEditMode]
	public class ObiCatmullRomCurve : ObiCurve
	{
		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Vector3 lastOpenCP0;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[HideInInspector]
		public Vector3 lastOpenCP1;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public Vector3 lastOpenCPN;

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0x259EC5C", Offset = "0x259EC5C", VA = "0x259EC5C", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0x259EDE0", Offset = "0x259EDE0", VA = "0x259EDE0", Slot = "5")]
		protected override void SetClosed(bool closed)
		{
		}

		[Token(Token = "0x60014F5")]
		[Address(RVA = "0x259F024", Offset = "0x259F024", VA = "0x259F024", Slot = "6")]
		public override void DisplaceControlPoint(int index, Vector3 delta)
		{
		}

		[Token(Token = "0x60014F6")]
		[Address(RVA = "0x259F368", Offset = "0x259F368", VA = "0x259F368", Slot = "7")]
		public override int GetNumSpans()
		{
			return default(int);
		}

		[Token(Token = "0x60014F7")]
		[Address(RVA = "0x259F3C4", Offset = "0x259F3C4", VA = "0x259F3C4", Slot = "8")]
		public override int GetSpanControlPointForMu(float mu, out float spanMu)
		{
			return default(int);
		}

		[Token(Token = "0x60014F8")]
		[Address(RVA = "0x259F440", Offset = "0x259F440", VA = "0x259F440", Slot = "9")]
		protected override float Evaluate1D(float y0, float y1, float y2, float y3, float mu)
		{
			return default(float);
		}

		[Token(Token = "0x60014F9")]
		[Address(RVA = "0x259F4AC", Offset = "0x259F4AC", VA = "0x259F4AC", Slot = "10")]
		protected override float EvaluateFirstDerivative1D(float y0, float y1, float y2, float y3, float mu)
		{
			return default(float);
		}

		[Token(Token = "0x60014FA")]
		[Address(RVA = "0x259F518", Offset = "0x259F518", VA = "0x259F518", Slot = "11")]
		protected override float EvaluateSecondDerivative1D(float y0, float y1, float y2, float y3, float mu)
		{
			return default(float);
		}

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0x259F56C", Offset = "0x259F56C", VA = "0x259F56C")]
		public ObiCatmullRomCurve()
		{
		}
	}
	[Token(Token = "0x20002AB")]
	[ExecuteInEditMode]
	public abstract class ObiCurve : MonoBehaviour
	{
		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected int arcLenghtSamples;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected int minPoints;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected int unusedPoints;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected int pointStride;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public List<Vector3> controlPoints;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		[SerializeField]
		protected List<float> arcLengthTable;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		[SerializeField]
		protected float totalSplineLenght;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[HideInInspector]
		[SerializeField]
		protected bool closed;

		[Token(Token = "0x17000118")]
		public bool Closed
		{
			[Token(Token = "0x60014FC")]
			[Address(RVA = "0x25A1D20", Offset = "0x25A1D20", VA = "0x25A1D20")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60014FD")]
			[Address(RVA = "0x25A1D28", Offset = "0x25A1D28", VA = "0x25A1D28")]
			set
			{
			}
		}

		[Token(Token = "0x17000119")]
		public float Length
		{
			[Token(Token = "0x60014FE")]
			[Address(RVA = "0x25A1D38", Offset = "0x25A1D38", VA = "0x25A1D38")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0x259EC6C", Offset = "0x259EC6C", VA = "0x259EC6C", Slot = "4")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x6001500")]
		protected abstract void SetClosed(bool closed);

		[Token(Token = "0x6001501")]
		public abstract void DisplaceControlPoint(int index, Vector3 delta);

		[Token(Token = "0x6001502")]
		public abstract int GetNumSpans();

		[Token(Token = "0x6001503")]
		[Address(RVA = "0x25A1D40", Offset = "0x25A1D40", VA = "0x25A1D40")]
		public float RecalculateSplineLenght(float acc, int maxevals)
		{
			return default(float);
		}

		[Token(Token = "0x6001504")]
		[Address(RVA = "0x25A22BC", Offset = "0x25A22BC", VA = "0x25A22BC")]
		private float GaussLobattoIntegrationStep(Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4, float a, float b, float fa, float fb, int nevals, int maxevals, float acc)
		{
			return default(float);
		}

		[Token(Token = "0x6001505")]
		[Address(RVA = "0x25A2A34", Offset = "0x25A2A34", VA = "0x25A2A34")]
		public float GetMuAtLenght(float length)
		{
			return default(float);
		}

		[Token(Token = "0x6001506")]
		public abstract int GetSpanControlPointForMu(float mu, out float spanMu);

		[Token(Token = "0x6001507")]
		[Address(RVA = "0x25A2BE4", Offset = "0x25A2BE4", VA = "0x25A2BE4")]
		public Vector3 GetPositionAt(float mu)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0x25A2FF8", Offset = "0x25A2FF8", VA = "0x25A2FF8")]
		public Vector3 GetFirstDerivativeAt(float mu)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0x25A3318", Offset = "0x25A3318", VA = "0x25A3318")]
		public Vector3 GetSecondDerivativeAt(float mu)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0x25A2F08", Offset = "0x25A2F08", VA = "0x25A2F08")]
		private Vector3 Evaluate3D(Vector3 y0, Vector3 y1, Vector3 y2, Vector3 y3, float mu)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600150B")]
		protected abstract float Evaluate1D(float y0, float y1, float y2, float y3, float mu);

		[Token(Token = "0x600150C")]
		[Address(RVA = "0x25A21CC", Offset = "0x25A21CC", VA = "0x25A21CC")]
		private Vector3 EvaluateFirstDerivative3D(Vector3 y0, Vector3 y1, Vector3 y2, Vector3 y3, float mu)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600150D")]
		protected abstract float EvaluateFirstDerivative1D(float y0, float y1, float y2, float y3, float mu);

		[Token(Token = "0x600150E")]
		[Address(RVA = "0x25A3524", Offset = "0x25A3524", VA = "0x25A3524")]
		private Vector3 EvaluateSecondDerivative3D(Vector3 y0, Vector3 y1, Vector3 y2, Vector3 y3, float mu)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600150F")]
		protected abstract float EvaluateSecondDerivative1D(float y0, float y1, float y2, float y3, float mu);

		[Token(Token = "0x6001510")]
		[Address(RVA = "0x259F580", Offset = "0x259F580", VA = "0x259F580")]
		protected ObiCurve()
		{
		}
	}
	[Token(Token = "0x20002AC")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12516F8", Offset = "0x12516F8")]
	public class ObiParticleBaker : MonoBehaviour
	{
		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ObiParticleCache cache;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float playhead;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int frameSkip;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int fixedBakeFramerate;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool interpolate;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool loopPlayback;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool bakeOnAwake;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
		public bool playOnAwake;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool baking;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool playing;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool paused;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int framesToSkip;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ObiSolver solver;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ObiParticleCache.Frame frame;

		[Token(Token = "0x1700011A")]
		public bool Baking
		{
			[Token(Token = "0x6001511")]
			[Address(RVA = "0x25A7E14", Offset = "0x25A7E14", VA = "0x25A7E14")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001512")]
			[Address(RVA = "0x25A7E1C", Offset = "0x25A7E1C", VA = "0x25A7E1C")]
			set
			{
			}
		}

		[Token(Token = "0x1700011B")]
		public bool Playing
		{
			[Token(Token = "0x6001513")]
			[Address(RVA = "0x25A7F00", Offset = "0x25A7F00", VA = "0x25A7F00")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001514")]
			[Address(RVA = "0x25A7F08", Offset = "0x25A7F08", VA = "0x25A7F08")]
			set
			{
			}
		}

		[Token(Token = "0x1700011C")]
		public bool Paused
		{
			[Token(Token = "0x6001515")]
			[Address(RVA = "0x25A7F40", Offset = "0x25A7F40", VA = "0x25A7F40")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001516")]
			[Address(RVA = "0x25A7F48", Offset = "0x25A7F48", VA = "0x25A7F48")]
			set
			{
			}
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0x25A7F54", Offset = "0x25A7F54", VA = "0x25A7F54")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001518")]
		[Address(RVA = "0x25A8014", Offset = "0x25A8014", VA = "0x25A8014")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001519")]
		[Address(RVA = "0x25A80DC", Offset = "0x25A80DC", VA = "0x25A80DC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600151A")]
		[Address(RVA = "0x25A81B0", Offset = "0x25A81B0", VA = "0x25A81B0")]
		private void Solver_OnFrameEnd(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x600151B")]
		[Address(RVA = "0x25A852C", Offset = "0x25A852C", VA = "0x25A852C")]
		private void Solver_OnBeforeActorsFrameEnd(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x600151C")]
		[Address(RVA = "0x25A8278", Offset = "0x25A8278", VA = "0x25A8278")]
		public void BakeFrame(float time)
		{
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0x25A8630", Offset = "0x25A8630", VA = "0x25A8630")]
		private void PlaybackFrame(float time)
		{
		}

		[Token(Token = "0x600151E")]
		[Address(RVA = "0x25A8F58", Offset = "0x25A8F58", VA = "0x25A8F58")]
		public ObiParticleBaker()
		{
		}
	}
	[Token(Token = "0x20002AD")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x125176C", Offset = "0x125176C")]
	public class ObiParticleGridDebugger : MonoBehaviour
	{
		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ObiSolver solver;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Oni.GridCell[] cells;

		[Token(Token = "0x600151F")]
		[Address(RVA = "0x25A98BC", Offset = "0x25A98BC", VA = "0x25A98BC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0x25A996C", Offset = "0x25A996C", VA = "0x25A996C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001521")]
		[Address(RVA = "0x25A99F8", Offset = "0x25A99F8", VA = "0x25A99F8")]
		private void Solver_OnFrameEnd(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x6001522")]
		[Address(RVA = "0x25A9A8C", Offset = "0x25A9A8C", VA = "0x25A9A8C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001523")]
		[Address(RVA = "0x25A9B60", Offset = "0x25A9B60", VA = "0x25A9B60")]
		public ObiParticleGridDebugger()
		{
		}
	}
	[Token(Token = "0x20002AE")]
	[ExecuteInEditMode]
	public class ObiParticleHandle : MonoBehaviour
	{
		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private ObiActor actor;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private List<int> handledParticleIndices;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private List<Vector3> handledParticlePositions;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		private List<float> handledParticleInvMasses;

		[Token(Token = "0x4001170")]
		private const float HANDLED_PARTICLE_MASS = 0.0001f;

		[Token(Token = "0x1700011D")]
		public int ParticleCount
		{
			[Token(Token = "0x6001524")]
			[Address(RVA = "0x25A9B68", Offset = "0x25A9B68", VA = "0x25A9B68")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700011E")]
		public ObiActor Actor
		{
			[Token(Token = "0x6001526")]
			[Address(RVA = "0x25A9DD4", Offset = "0x25A9DD4", VA = "0x25A9DD4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001525")]
			[Address(RVA = "0x25A9BB8", Offset = "0x25A9BB8", VA = "0x25A9BB8")]
			set
			{
			}
		}

		[Token(Token = "0x6001527")]
		[Address(RVA = "0x25A9DDC", Offset = "0x25A9DDC", VA = "0x25A9DDC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001528")]
		[Address(RVA = "0x25A9EF0", Offset = "0x25A9EF0", VA = "0x25A9EF0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001529")]
		[Address(RVA = "0x25AA00C", Offset = "0x25AA00C", VA = "0x25AA00C")]
		private void ResetInvMasses()
		{
		}

		[Token(Token = "0x600152A")]
		[Address(RVA = "0x25AA1A4", Offset = "0x25AA1A4", VA = "0x25AA1A4")]
		public void Clear()
		{
		}

		[Token(Token = "0x600152B")]
		[Address(RVA = "0x25AA234", Offset = "0x25AA234", VA = "0x25AA234")]
		public void AddParticle(int index, Vector3 position, float invMass)
		{
		}

		[Token(Token = "0x600152C")]
		[Address(RVA = "0x25AA318", Offset = "0x25AA318", VA = "0x25AA318")]
		public void RemoveParticle(int index)
		{
		}

		[Token(Token = "0x600152D")]
		[Address(RVA = "0x25AA4DC", Offset = "0x25AA4DC", VA = "0x25AA4DC")]
		private void Actor_solver_OnFrameBegin(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x600152E")]
		[Address(RVA = "0x25AA8E8", Offset = "0x25AA8E8", VA = "0x25AA8E8")]
		public ObiParticleHandle()
		{
		}
	}
	[Token(Token = "0x20002AF")]
	public class ObiProfiler : MonoBehaviour
	{
		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GUISkin skin;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool showPercentages;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int maxVisibleThreads;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Oni.ProfileInfo[] info;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static double frameDuration;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float zoom;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector2 scrollPosition;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int numThreads;

		[Token(Token = "0x600152F")]
		[Address(RVA = "0x25AD15C", Offset = "0x25AD15C", VA = "0x25AD15C")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001530")]
		[Address(RVA = "0x25AD190", Offset = "0x25AD190", VA = "0x25AD190")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001531")]
		[Address(RVA = "0x25AD19C", Offset = "0x25AD19C", VA = "0x25AD19C")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6001532")]
		[Address(RVA = "0x25AD784", Offset = "0x25AD784", VA = "0x25AD784")]
		public ObiProfiler()
		{
		}
	}
	[Token(Token = "0x20002B0")]
	public class ObiRopeCursor : MonoBehaviour
	{
		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ObiRope rope;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x125B100", Offset = "0x125B100")]
		public float normalizedCoord;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool direction;

		[Token(Token = "0x6001533")]
		[Address(RVA = "0x26FFD98", Offset = "0x26FFD98", VA = "0x26FFD98")]
		private int FindHotConstraint(ObiDistanceConstraintBatch distanceBatch, int constraint, int maxAmount)
		{
			return default(int);
		}

		[Token(Token = "0x6001534")]
		[Address(RVA = "0x26FFFA4", Offset = "0x26FFFA4", VA = "0x26FFFA4")]
		private int AddParticles(int amount)
		{
			return default(int);
		}

		[Token(Token = "0x6001535")]
		[Address(RVA = "0x2700EBC", Offset = "0x2700EBC", VA = "0x2700EBC")]
		private int RemoveParticles(int amount)
		{
			return default(int);
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0x27014D0", Offset = "0x27014D0", VA = "0x27014D0")]
		public void ChangeLength(float newLength)
		{
		}

		[Token(Token = "0x6001537")]
		[Address(RVA = "0x2701914", Offset = "0x2701914", VA = "0x2701914")]
		public ObiRopeCursor()
		{
		}
	}
	[Token(Token = "0x20002B1")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12517E0", Offset = "0x12517E0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x12517E0", Offset = "0x12517E0")]
	public class ObiRopeHelper : MonoBehaviour
	{
		[Token(Token = "0x20003D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251D18", Offset = "0x1251D18")]
		private sealed class <Setup>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001697")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001698")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001699")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ObiRopeHelper <>4__this;

			[Token(Token = "0x170001B8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600190D")]
				[Address(RVA = "0x2701F58", Offset = "0x2701F58", VA = "0x2701F58", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600190F")]
				[Address(RVA = "0x2701FC0", Offset = "0x2701FC0", VA = "0x2701FC0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600190A")]
			[Address(RVA = "0x2701CAC", Offset = "0x2701CAC", VA = "0x2701CAC")]
			[DebuggerHidden]
			public <Setup>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x600190B")]
			[Address(RVA = "0x2701CE0", Offset = "0x2701CE0", VA = "0x2701CE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600190C")]
			[Address(RVA = "0x2701CE4", Offset = "0x2701CE4", VA = "0x2701CE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600190E")]
			[Address(RVA = "0x2701F60", Offset = "0x2701F60", VA = "0x2701F60", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ObiSolver solver;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObiRopeSection section;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material material;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform start;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform end;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ObiRope rope;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ObiCatmullRomCurve path;

		[Token(Token = "0x6001538")]
		[Address(RVA = "0x2701924", Offset = "0x2701924", VA = "0x2701924")]
		private void Start()
		{
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0x2701C30", Offset = "0x2701C30", VA = "0x2701C30")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x1263C80", Offset = "0x1263C80")]
		private IEnumerator Setup()
		{
			return null;
		}

		[Token(Token = "0x600153A")]
		[Address(RVA = "0x2701CD8", Offset = "0x2701CD8", VA = "0x2701CD8")]
		public ObiRopeHelper()
		{
		}
	}
	[Token(Token = "0x20002B2")]
	public static class Constants
	{
		[Token(Token = "0x4001183")]
		public const int maxVertsPerMesh = 65000;
	}
	[Token(Token = "0x20002B3")]
	public static class ObiUtils
	{
		[Token(Token = "0x600153B")]
		[Address(RVA = "0x2709898", Offset = "0x2709898", VA = "0x2709898")]
		public static void DrawArrowGizmo(float bodyLenght, float bodyWidth, float headLenght, float headWidth)
		{
		}

		[Token(Token = "0x600153C")]
		public static void ArrayFill<T>(T[] arrayToFill, T[] fillValue)
		{
		}

		[Token(Token = "0x600153D")]
		public static IList<T> Swap<T>(this IList<T> list, int indexA, int indexB)
		{
			return null;
		}

		[Token(Token = "0x600153E")]
		public static void AddRange<T>(ref T[] array, T[] other)
		{
		}

		[Token(Token = "0x600153F")]
		public static void RemoveRange<T>(ref T[] array, int index, int count)
		{
		}

		[Token(Token = "0x6001540")]
		[Address(RVA = "0x2707D20", Offset = "0x2707D20", VA = "0x2707D20")]
		public static Bounds Transform(this Bounds b, Matrix4x4 m)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001541")]
		[Address(RVA = "0x270CA74", Offset = "0x270CA74", VA = "0x270CA74")]
		public static float Remap(this float value, float from1, float to1, float from2, float to2)
		{
			return default(float);
		}

		[Token(Token = "0x6001542")]
		[Address(RVA = "0x2701898", Offset = "0x2701898", VA = "0x2701898")]
		public static float Mod(float a, float b)
		{
			return default(float);
		}

		[Token(Token = "0x6001543")]
		[Address(RVA = "0x270CA90", Offset = "0x270CA90", VA = "0x270CA90")]
		public static float TriangleArea(Vector3 p1, Vector3 p2, Vector3 p3)
		{
			return default(float);
		}
	}
}
namespace DG.Tweening
{
	[Token(Token = "0x20002B4")]
	public static class DOTweenModuleAudio
	{
		[Token(Token = "0x20003D5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251D28", Offset = "0x1251D28")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x400169A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioSource target;

			[Token(Token = "0x6001910")]
			[Address(RVA = "0x1DAF7A8", Offset = "0x1DAF7A8", VA = "0x1DAF7A8")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x6001911")]
			[Address(RVA = "0x1DAFF98", Offset = "0x1DAFF98", VA = "0x1DAFF98")]
			internal float <DOFade>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x6001912")]
			[Address(RVA = "0x1DAFFB4", Offset = "0x1DAFFB4", VA = "0x1DAFFB4")]
			internal void <DOFade>b__1(float x)
			{
			}
		}

		[Token(Token = "0x20003D6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251D38", Offset = "0x1251D38")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x400169B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioSource target;

			[Token(Token = "0x6001913")]
			[Address(RVA = "0x1DAF8FC", Offset = "0x1DAF8FC", VA = "0x1DAF8FC")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x6001914")]
			[Address(RVA = "0x1DAFFD0", Offset = "0x1DAFFD0", VA = "0x1DAFFD0")]
			internal float <DOPitch>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x6001915")]
			[Address(RVA = "0x1DAFFEC", Offset = "0x1DAFFEC", VA = "0x1DAFFEC")]
			internal void <DOPitch>b__1(float x)
			{
			}
		}

		[Token(Token = "0x20003D7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251D48", Offset = "0x1251D48")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x400169C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioMixer target;

			[Token(Token = "0x400169D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string floatName;

			[Token(Token = "0x6001916")]
			[Address(RVA = "0x1DAFA64", Offset = "0x1DAFA64", VA = "0x1DAFA64")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6001917")]
			[Address(RVA = "0x1DB0008", Offset = "0x1DB0008", VA = "0x1DB0008")]
			internal float <DOSetFloat>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x6001918")]
			[Address(RVA = "0x1DB0048", Offset = "0x1DB0048", VA = "0x1DB0048")]
			internal void <DOSetFloat>b__1(float x)
			{
			}
		}

		[Token(Token = "0x6001544")]
		[Address(RVA = "0x1DAF634", Offset = "0x1DAF634", VA = "0x1DAF634")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001545")]
		[Address(RVA = "0x1DAF7B0", Offset = "0x1DAF7B0", VA = "0x1DAF7B0")]
		public static TweenerCore<float, float, FloatOptions> DOPitch(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001546")]
		[Address(RVA = "0x1DAF904", Offset = "0x1DAF904", VA = "0x1DAF904")]
		public static TweenerCore<float, float, FloatOptions> DOSetFloat(this AudioMixer target, string floatName, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001547")]
		[Address(RVA = "0x1DAFA6C", Offset = "0x1DAFA6C", VA = "0x1DAFA6C")]
		public static int DOComplete(this AudioMixer target, bool withCallbacks = false)
		{
			return default(int);
		}

		[Token(Token = "0x6001548")]
		[Address(RVA = "0x1DAFAE4", Offset = "0x1DAFAE4", VA = "0x1DAFAE4")]
		public static int DOKill(this AudioMixer target, bool complete = false)
		{
			return default(int);
		}

		[Token(Token = "0x6001549")]
		[Address(RVA = "0x1DAFB5C", Offset = "0x1DAFB5C", VA = "0x1DAFB5C")]
		public static int DOFlip(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x600154A")]
		[Address(RVA = "0x1DAFBC4", Offset = "0x1DAFBC4", VA = "0x1DAFBC4")]
		public static int DOGoto(this AudioMixer target, float to, bool andPlay = false)
		{
			return default(int);
		}

		[Token(Token = "0x600154B")]
		[Address(RVA = "0x1DAFC4C", Offset = "0x1DAFC4C", VA = "0x1DAFC4C")]
		public static int DOPause(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x600154C")]
		[Address(RVA = "0x1DAFCB4", Offset = "0x1DAFCB4", VA = "0x1DAFCB4")]
		public static int DOPlay(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x600154D")]
		[Address(RVA = "0x1DAFD1C", Offset = "0x1DAFD1C", VA = "0x1DAFD1C")]
		public static int DOPlayBackwards(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x600154E")]
		[Address(RVA = "0x1DAFD84", Offset = "0x1DAFD84", VA = "0x1DAFD84")]
		public static int DOPlayForward(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x600154F")]
		[Address(RVA = "0x1DAFDEC", Offset = "0x1DAFDEC", VA = "0x1DAFDEC")]
		public static int DORestart(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001550")]
		[Address(RVA = "0x1DAFE5C", Offset = "0x1DAFE5C", VA = "0x1DAFE5C")]
		public static int DORewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001551")]
		[Address(RVA = "0x1DAFEC8", Offset = "0x1DAFEC8", VA = "0x1DAFEC8")]
		public static int DOSmoothRewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001552")]
		[Address(RVA = "0x1DAFF30", Offset = "0x1DAFF30", VA = "0x1DAFF30")]
		public static int DOTogglePause(this AudioMixer target)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002B5")]
	public static class DOTweenModulePhysics
	{
		[Token(Token = "0x20003D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251D58", Offset = "0x1251D58")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x400169E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x6001919")]
			[Address(RVA = "0x1DB01EC", Offset = "0x1DB01EC", VA = "0x1DB01EC")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x600191A")]
			[Address(RVA = "0x1DB1674", Offset = "0x1DB1674", VA = "0x1DB1674")]
			internal Vector3 <DOMove>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003D9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251D68", Offset = "0x1251D68")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x400169F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x600191B")]
			[Address(RVA = "0x1DB038C", Offset = "0x1DB038C", VA = "0x1DB038C")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x600191C")]
			[Address(RVA = "0x1DB17B0", Offset = "0x1DB17B0", VA = "0x1DB17B0")]
			internal Vector3 <DOMoveX>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003DA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251D78", Offset = "0x1251D78")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x40016A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x600191D")]
			[Address(RVA = "0x1DB052C", Offset = "0x1DB052C", VA = "0x1DB052C")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x600191E")]
			[Address(RVA = "0x1DB17CC", Offset = "0x1DB17CC", VA = "0x1DB17CC")]
			internal Vector3 <DOMoveY>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003DB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251D88", Offset = "0x1251D88")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x40016A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x600191F")]
			[Address(RVA = "0x1DB06CC", Offset = "0x1DB06CC", VA = "0x1DB06CC")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x6001920")]
			[Address(RVA = "0x1DB17E8", Offset = "0x1DB17E8", VA = "0x1DB17E8")]
			internal Vector3 <DOMoveZ>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251D98", Offset = "0x1251D98")]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x40016A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x6001921")]
			[Address(RVA = "0x1DB0850", Offset = "0x1DB0850", VA = "0x1DB0850")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x6001922")]
			[Address(RVA = "0x1DB1804", Offset = "0x1DB1804", VA = "0x1DB1804")]
			internal Quaternion <DORotate>b__0()
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x20003DD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251DA8", Offset = "0x1251DA8")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x40016A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x6001923")]
			[Address(RVA = "0x1DB0A4C", Offset = "0x1DB0A4C", VA = "0x1DB0A4C")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x6001924")]
			[Address(RVA = "0x1DB1820", Offset = "0x1DB1820", VA = "0x1DB1820")]
			internal Quaternion <DOLookAt>b__0()
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x20003DE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251DB8", Offset = "0x1251DB8")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x40016A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x40016A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float startPosY;

			[Token(Token = "0x40016A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool offsetYSet;

			[Token(Token = "0x40016A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float offsetY;

			[Token(Token = "0x40016A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Sequence s;

			[Token(Token = "0x40016A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 endValue;

			[Token(Token = "0x40016AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Tween yTween;

			[Token(Token = "0x6001925")]
			[Address(RVA = "0x1DB0F04", Offset = "0x1DB0F04", VA = "0x1DB0F04")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x6001926")]
			[Address(RVA = "0x1DB183C", Offset = "0x1DB183C", VA = "0x1DB183C")]
			internal Vector3 <DOJump>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001927")]
			[Address(RVA = "0x1DB1858", Offset = "0x1DB1858", VA = "0x1DB1858")]
			internal void <DOJump>b__1()
			{
			}

			[Token(Token = "0x6001928")]
			[Address(RVA = "0x1DB188C", Offset = "0x1DB188C", VA = "0x1DB188C")]
			internal Vector3 <DOJump>b__2()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001929")]
			[Address(RVA = "0x1DB18A8", Offset = "0x1DB18A8", VA = "0x1DB18A8")]
			internal Vector3 <DOJump>b__3()
			{
				return default(Vector3);
			}

			[Token(Token = "0x600192A")]
			[Address(RVA = "0x1DB18C4", Offset = "0x1DB18C4", VA = "0x1DB18C4")]
			internal void <DOJump>b__4()
			{
			}
		}

		[Token(Token = "0x20003DF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251DC8", Offset = "0x1251DC8")]
		private sealed class <>c__DisplayClass7_0
		{
			[Token(Token = "0x40016AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x600192B")]
			[Address(RVA = "0x1DB1108", Offset = "0x1DB1108", VA = "0x1DB1108")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x600192C")]
			[Address(RVA = "0x1DB1984", Offset = "0x1DB1984", VA = "0x1DB1984")]
			internal Vector3 <DOPath>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251DD8", Offset = "0x1251DD8")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x40016AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform trans;

			[Token(Token = "0x40016AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Rigidbody target;

			[Token(Token = "0x600192D")]
			[Address(RVA = "0x1DB132C", Offset = "0x1DB132C", VA = "0x1DB132C")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x600192E")]
			[Address(RVA = "0x1DB19A0", Offset = "0x1DB19A0", VA = "0x1DB19A0")]
			internal Vector3 <DOLocalPath>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x600192F")]
			[Address(RVA = "0x1DB19BC", Offset = "0x1DB19BC", VA = "0x1DB19BC")]
			internal void <DOLocalPath>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x20003E1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251DE8", Offset = "0x1251DE8")]
		private sealed class <>c__DisplayClass9_0
		{
			[Token(Token = "0x40016AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x6001930")]
			[Address(RVA = "0x1DB14BC", Offset = "0x1DB14BC", VA = "0x1DB14BC")]
			public <>c__DisplayClass9_0()
			{
			}

			[Token(Token = "0x6001931")]
			[Address(RVA = "0x1DB1AC0", Offset = "0x1DB1AC0", VA = "0x1DB1AC0")]
			internal Vector3 <DOPath>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003E2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251DF8", Offset = "0x1251DF8")]
		private sealed class <>c__DisplayClass10_0
		{
			[Token(Token = "0x40016AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform trans;

			[Token(Token = "0x40016B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Rigidbody target;

			[Token(Token = "0x6001932")]
			[Address(RVA = "0x1DB166C", Offset = "0x1DB166C", VA = "0x1DB166C")]
			public <>c__DisplayClass10_0()
			{
			}

			[Token(Token = "0x6001933")]
			[Address(RVA = "0x1DB1690", Offset = "0x1DB1690", VA = "0x1DB1690")]
			internal Vector3 <DOLocalPath>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001934")]
			[Address(RVA = "0x1DB16AC", Offset = "0x1DB16AC", VA = "0x1DB16AC")]
			internal void <DOLocalPath>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x6001553")]
		[Address(RVA = "0x1DB006C", Offset = "0x1DB006C", VA = "0x1DB006C")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMove(this Rigidbody target, Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001554")]
		[Address(RVA = "0x1DB01F4", Offset = "0x1DB01F4", VA = "0x1DB01F4")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveX(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001555")]
		[Address(RVA = "0x1DB0394", Offset = "0x1DB0394", VA = "0x1DB0394")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveY(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001556")]
		[Address(RVA = "0x1DB0534", Offset = "0x1DB0534", VA = "0x1DB0534")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveZ(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001557")]
		[Address(RVA = "0x1DB06D4", Offset = "0x1DB06D4", VA = "0x1DB06D4")]
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DORotate(this Rigidbody target, Vector3 endValue, float duration, RotateMode mode = RotateMode.Fast)
		{
			return null;
		}

		[Token(Token = "0x6001558")]
		[Address(RVA = "0x1DB0858", Offset = "0x1DB0858", VA = "0x1DB0858")]
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DOLookAt(this Rigidbody target, Vector3 towards, float duration, AxisConstraint axisConstraint = AxisConstraint.None, [Optional] Vector3? up)
		{
			return null;
		}

		[Token(Token = "0x6001559")]
		[Address(RVA = "0x1DB0A54", Offset = "0x1DB0A54", VA = "0x1DB0A54")]
		public static Sequence DOJump(this Rigidbody target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600155A")]
		[Address(RVA = "0x1DB0F0C", Offset = "0x1DB0F0C", VA = "0x1DB0F0C")]
		public static TweenerCore<Vector3, Path, PathOptions> DOPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x600155B")]
		[Address(RVA = "0x1DB1110", Offset = "0x1DB1110", VA = "0x1DB1110")]
		public static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x600155C")]
		[Address(RVA = "0x1DB1334", Offset = "0x1DB1334", VA = "0x1DB1334")]
		internal static TweenerCore<Vector3, Path, PathOptions> DOPath(this Rigidbody target, Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}

		[Token(Token = "0x600155D")]
		[Address(RVA = "0x1DB14C4", Offset = "0x1DB14C4", VA = "0x1DB14C4")]
		internal static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(this Rigidbody target, Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B6")]
	public static class DOTweenModulePhysics2D
	{
		[Token(Token = "0x20003E3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251E08", Offset = "0x1251E08")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x40016B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody2D target;

			[Token(Token = "0x6001935")]
			[Address(RVA = "0x1DB1C54", Offset = "0x1DB1C54", VA = "0x1DB1C54")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x6001936")]
			[Address(RVA = "0x1DB2D64", Offset = "0x1DB2D64", VA = "0x1DB2D64")]
			internal Vector2 <DOMove>b__0()
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x20003E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251E18", Offset = "0x1251E18")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x40016B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody2D target;

			[Token(Token = "0x6001937")]
			[Address(RVA = "0x1DB1DE0", Offset = "0x1DB1DE0", VA = "0x1DB1DE0")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x6001938")]
			[Address(RVA = "0x1DB2D80", Offset = "0x1DB2D80", VA = "0x1DB2D80")]
			internal Vector2 <DOMoveX>b__0()
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x20003E5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251E28", Offset = "0x1251E28")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x40016B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody2D target;

			[Token(Token = "0x6001939")]
			[Address(RVA = "0x1DB1F6C", Offset = "0x1DB1F6C", VA = "0x1DB1F6C")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x600193A")]
			[Address(RVA = "0x1DB2D9C", Offset = "0x1DB2D9C", VA = "0x1DB2D9C")]
			internal Vector2 <DOMoveY>b__0()
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x20003E6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251E38", Offset = "0x1251E38")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x40016B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody2D target;

			[Token(Token = "0x600193B")]
			[Address(RVA = "0x1DB20C4", Offset = "0x1DB20C4", VA = "0x1DB20C4")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x600193C")]
			[Address(RVA = "0x1DB2DB8", Offset = "0x1DB2DB8", VA = "0x1DB2DB8")]
			internal float <DORotate>b__0()
			{
				return default(float);
			}
		}

		[Token(Token = "0x20003E7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251E48", Offset = "0x1251E48")]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x40016B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody2D target;

			[Token(Token = "0x40016B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float startPosY;

			[Token(Token = "0x40016B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool offsetYSet;

			[Token(Token = "0x40016B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float offsetY;

			[Token(Token = "0x40016B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Sequence s;

			[Token(Token = "0x40016BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector2 endValue;

			[Token(Token = "0x40016BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Tween yTween;

			[Token(Token = "0x600193D")]
			[Address(RVA = "0x1DB2478", Offset = "0x1DB2478", VA = "0x1DB2478")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x600193E")]
			[Address(RVA = "0x1DB2DD4", Offset = "0x1DB2DD4", VA = "0x1DB2DD4")]
			internal Vector2 <DOJump>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x600193F")]
			[Address(RVA = "0x1DB2DF0", Offset = "0x1DB2DF0", VA = "0x1DB2DF0")]
			internal void <DOJump>b__1(Vector2 x)
			{
			}

			[Token(Token = "0x6001940")]
			[Address(RVA = "0x1DB2E0C", Offset = "0x1DB2E0C", VA = "0x1DB2E0C")]
			internal void <DOJump>b__2()
			{
			}

			[Token(Token = "0x6001941")]
			[Address(RVA = "0x1DB2E40", Offset = "0x1DB2E40", VA = "0x1DB2E40")]
			internal Vector2 <DOJump>b__3()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6001942")]
			[Address(RVA = "0x1DB2E5C", Offset = "0x1DB2E5C", VA = "0x1DB2E5C")]
			internal void <DOJump>b__4(Vector2 x)
			{
			}

			[Token(Token = "0x6001943")]
			[Address(RVA = "0x1DB2E78", Offset = "0x1DB2E78", VA = "0x1DB2E78")]
			internal void <DOJump>b__5()
			{
			}
		}

		[Token(Token = "0x20003E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251E58", Offset = "0x1251E58")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x40016BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody2D target;

			[Token(Token = "0x6001944")]
			[Address(RVA = "0x1DB273C", Offset = "0x1DB273C", VA = "0x1DB273C")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x6001945")]
			[Address(RVA = "0x1DB2FA0", Offset = "0x1DB2FA0", VA = "0x1DB2FA0")]
			internal Vector3 <DOPath>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001946")]
			[Address(RVA = "0x1DB3030", Offset = "0x1DB3030", VA = "0x1DB3030")]
			internal void <DOPath>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x20003E9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251E68", Offset = "0x1251E68")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x40016BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform trans;

			[Token(Token = "0x40016BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Rigidbody2D target;

			[Token(Token = "0x6001947")]
			[Address(RVA = "0x1DB2A20", Offset = "0x1DB2A20", VA = "0x1DB2A20")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x6001948")]
			[Address(RVA = "0x1DB30D4", Offset = "0x1DB30D4", VA = "0x1DB30D4")]
			internal Vector3 <DOLocalPath>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001949")]
			[Address(RVA = "0x1DB30F0", Offset = "0x1DB30F0", VA = "0x1DB30F0")]
			internal void <DOLocalPath>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x20003EA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251E78", Offset = "0x1251E78")]
		private sealed class <>c__DisplayClass7_0
		{
			[Token(Token = "0x40016BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody2D target;

			[Token(Token = "0x600194A")]
			[Address(RVA = "0x1DB2BAC", Offset = "0x1DB2BAC", VA = "0x1DB2BAC")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x600194B")]
			[Address(RVA = "0x1DB321C", Offset = "0x1DB321C", VA = "0x1DB321C")]
			internal Vector3 <DOPath>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x600194C")]
			[Address(RVA = "0x1DB32AC", Offset = "0x1DB32AC", VA = "0x1DB32AC")]
			internal void <DOPath>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x20003EB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251E88", Offset = "0x1251E88")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x40016C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform trans;

			[Token(Token = "0x40016C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Rigidbody2D target;

			[Token(Token = "0x600194D")]
			[Address(RVA = "0x1DB2D5C", Offset = "0x1DB2D5C", VA = "0x1DB2D5C")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x600194E")]
			[Address(RVA = "0x1DB3350", Offset = "0x1DB3350", VA = "0x1DB3350")]
			internal Vector3 <DOLocalPath>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x600194F")]
			[Address(RVA = "0x1DB336C", Offset = "0x1DB336C", VA = "0x1DB336C")]
			internal void <DOLocalPath>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x600155E")]
		[Address(RVA = "0x1DB1ADC", Offset = "0x1DB1ADC", VA = "0x1DB1ADC")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMove(this Rigidbody2D target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600155F")]
		[Address(RVA = "0x1DB1C5C", Offset = "0x1DB1C5C", VA = "0x1DB1C5C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMoveX(this Rigidbody2D target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001560")]
		[Address(RVA = "0x1DB1DE8", Offset = "0x1DB1DE8", VA = "0x1DB1DE8")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMoveY(this Rigidbody2D target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001561")]
		[Address(RVA = "0x1DB1F74", Offset = "0x1DB1F74", VA = "0x1DB1F74")]
		public static TweenerCore<float, float, FloatOptions> DORotate(this Rigidbody2D target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001562")]
		[Address(RVA = "0x1DB20CC", Offset = "0x1DB20CC", VA = "0x1DB20CC")]
		public static Sequence DOJump(this Rigidbody2D target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001563")]
		[Address(RVA = "0x1DB2480", Offset = "0x1DB2480", VA = "0x1DB2480")]
		public static TweenerCore<Vector3, Path, PathOptions> DOPath(this Rigidbody2D target, Vector2[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x6001564")]
		[Address(RVA = "0x1DB2744", Offset = "0x1DB2744", VA = "0x1DB2744")]
		public static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(this Rigidbody2D target, Vector2[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x6001565")]
		[Address(RVA = "0x1DB2A28", Offset = "0x1DB2A28", VA = "0x1DB2A28")]
		internal static TweenerCore<Vector3, Path, PathOptions> DOPath(this Rigidbody2D target, Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}

		[Token(Token = "0x6001566")]
		[Address(RVA = "0x1DB2BB4", Offset = "0x1DB2BB4", VA = "0x1DB2BB4")]
		internal static TweenerCore<Vector3, Path, PathOptions> DOLocalPath(this Rigidbody2D target, Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B7")]
	public static class DOTweenModuleSprite
	{
		[Token(Token = "0x20003EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251E98", Offset = "0x1251E98")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x40016C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SpriteRenderer target;

			[Token(Token = "0x6001950")]
			[Address(RVA = "0x1DB360C", Offset = "0x1DB360C", VA = "0x1DB360C")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x6001951")]
			[Address(RVA = "0x1DB3B3C", Offset = "0x1DB3B3C", VA = "0x1DB3B3C")]
			internal Color <DOColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x6001952")]
			[Address(RVA = "0x1DB3B58", Offset = "0x1DB3B58", VA = "0x1DB3B58")]
			internal void <DOColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x20003ED")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251EA8", Offset = "0x1251EA8")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x40016C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SpriteRenderer target;

			[Token(Token = "0x6001953")]
			[Address(RVA = "0x1DB3760", Offset = "0x1DB3760", VA = "0x1DB3760")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x6001954")]
			[Address(RVA = "0x1DB3B74", Offset = "0x1DB3B74", VA = "0x1DB3B74")]
			internal Color <DOFade>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x6001955")]
			[Address(RVA = "0x1DB3B90", Offset = "0x1DB3B90", VA = "0x1DB3B90")]
			internal void <DOFade>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x20003EE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251EB8", Offset = "0x1251EB8")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x40016C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Color to;

			[Token(Token = "0x40016C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SpriteRenderer target;

			[Token(Token = "0x6001956")]
			[Address(RVA = "0x1DB3B34", Offset = "0x1DB3B34", VA = "0x1DB3B34")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x6001957")]
			[Address(RVA = "0x1DB3BAC", Offset = "0x1DB3BAC", VA = "0x1DB3BAC")]
			internal Color <DOBlendableColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x6001958")]
			[Address(RVA = "0x1DB3BB8", Offset = "0x1DB3BB8", VA = "0x1DB3BB8")]
			internal void <DOBlendableColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x6001567")]
		[Address(RVA = "0x1DB3498", Offset = "0x1DB3498", VA = "0x1DB3498")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001568")]
		[Address(RVA = "0x1DB3614", Offset = "0x1DB3614", VA = "0x1DB3614")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this SpriteRenderer target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001569")]
		[Address(RVA = "0x1DB3768", Offset = "0x1DB3768", VA = "0x1DB3768")]
		public static Sequence DOGradientColor(this SpriteRenderer target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x600156A")]
		[Address(RVA = "0x1DB3940", Offset = "0x1DB3940", VA = "0x1DB3940")]
		public static Tweener DOBlendableColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B8")]
	public static class DOTweenModuleUI
	{
		[Token(Token = "0x20003EF")]
		public static class Utils
		{
			[Token(Token = "0x6001959")]
			[Address(RVA = "0x1DB921C", Offset = "0x1DB921C", VA = "0x1DB921C")]
			public static Vector2 SwitchToRectTransform(RectTransform from, RectTransform to)
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x20003F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251EC8", Offset = "0x1251EC8")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x40016C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CanvasGroup target;

			[Token(Token = "0x600195A")]
			[Address(RVA = "0x1DB3DB0", Offset = "0x1DB3DB0", VA = "0x1DB3DB0")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x600195B")]
			[Address(RVA = "0x1DB7FF8", Offset = "0x1DB7FF8", VA = "0x1DB7FF8")]
			internal float <DOFade>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x600195C")]
			[Address(RVA = "0x1DB8014", Offset = "0x1DB8014", VA = "0x1DB8014")]
			internal void <DOFade>b__1(float x)
			{
			}
		}

		[Token(Token = "0x20003F1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251ED8", Offset = "0x1251ED8")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x40016C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Graphic target;

			[Token(Token = "0x600195D")]
			[Address(RVA = "0x1DB3F2C", Offset = "0x1DB3F2C", VA = "0x1DB3F2C")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x600195E")]
			[Address(RVA = "0x1DB8268", Offset = "0x1DB8268", VA = "0x1DB8268")]
			internal Color <DOColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x600195F")]
			[Address(RVA = "0x1DB828C", Offset = "0x1DB828C", VA = "0x1DB828C")]
			internal void <DOColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x20003F2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251EE8", Offset = "0x1251EE8")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x40016C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Graphic target;

			[Token(Token = "0x6001960")]
			[Address(RVA = "0x1DB4080", Offset = "0x1DB4080", VA = "0x1DB4080")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6001961")]
			[Address(RVA = "0x1DB88F4", Offset = "0x1DB88F4", VA = "0x1DB88F4")]
			internal Color <DOFade>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x6001962")]
			[Address(RVA = "0x1DB8918", Offset = "0x1DB8918", VA = "0x1DB8918")]
			internal void <DOFade>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x20003F3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251EF8", Offset = "0x1251EF8")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x40016C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Image target;

			[Token(Token = "0x6001963")]
			[Address(RVA = "0x1DB41FC", Offset = "0x1DB41FC", VA = "0x1DB41FC")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x6001964")]
			[Address(RVA = "0x1DB8DC0", Offset = "0x1DB8DC0", VA = "0x1DB8DC0")]
			internal Color <DOColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x6001965")]
			[Address(RVA = "0x1DB8DE4", Offset = "0x1DB8DE4", VA = "0x1DB8DE4")]
			internal void <DOColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x20003F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251F08", Offset = "0x1251F08")]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x40016CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Image target;

			[Token(Token = "0x6001966")]
			[Address(RVA = "0x1DB4350", Offset = "0x1DB4350", VA = "0x1DB4350")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x6001967")]
			[Address(RVA = "0x1DB8F08", Offset = "0x1DB8F08", VA = "0x1DB8F08")]
			internal Color <DOFade>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x6001968")]
			[Address(RVA = "0x1DB8F2C", Offset = "0x1DB8F2C", VA = "0x1DB8F2C")]
			internal void <DOFade>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x20003F5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251F18", Offset = "0x1251F18")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x40016CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Image target;

			[Token(Token = "0x6001969")]
			[Address(RVA = "0x1DB44C8", Offset = "0x1DB44C8", VA = "0x1DB44C8")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x600196A")]
			[Address(RVA = "0x1DB8F50", Offset = "0x1DB8F50", VA = "0x1DB8F50")]
			internal float <DOFillAmount>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x600196B")]
			[Address(RVA = "0x1DB8F6C", Offset = "0x1DB8F6C", VA = "0x1DB8F6C")]
			internal void <DOFillAmount>b__1(float x)
			{
			}
		}

		[Token(Token = "0x20003F6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251F28", Offset = "0x1251F28")]
		private sealed class <>c__DisplayClass7_0
		{
			[Token(Token = "0x40016CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LayoutElement target;

			[Token(Token = "0x600196C")]
			[Address(RVA = "0x1DB4824", Offset = "0x1DB4824", VA = "0x1DB4824")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x600196D")]
			[Address(RVA = "0x1DB8F88", Offset = "0x1DB8F88", VA = "0x1DB8F88")]
			internal Vector2 <DOFlexibleSize>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x600196E")]
			[Address(RVA = "0x1DB9008", Offset = "0x1DB9008", VA = "0x1DB9008")]
			internal void <DOFlexibleSize>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x20003F7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251F38", Offset = "0x1251F38")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x40016CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LayoutElement target;

			[Token(Token = "0x600196F")]
			[Address(RVA = "0x1DB49A0", Offset = "0x1DB49A0", VA = "0x1DB49A0")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x6001970")]
			[Address(RVA = "0x1DB9064", Offset = "0x1DB9064", VA = "0x1DB9064")]
			internal Vector2 <DOMinSize>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6001971")]
			[Address(RVA = "0x1DB90E4", Offset = "0x1DB90E4", VA = "0x1DB90E4")]
			internal void <DOMinSize>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x20003F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251F48", Offset = "0x1251F48")]
		private sealed class <>c__DisplayClass9_0
		{
			[Token(Token = "0x40016CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LayoutElement target;

			[Token(Token = "0x6001972")]
			[Address(RVA = "0x1DB4B1C", Offset = "0x1DB4B1C", VA = "0x1DB4B1C")]
			public <>c__DisplayClass9_0()
			{
			}

			[Token(Token = "0x6001973")]
			[Address(RVA = "0x1DB9140", Offset = "0x1DB9140", VA = "0x1DB9140")]
			internal Vector2 <DOPreferredSize>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6001974")]
			[Address(RVA = "0x1DB91C0", Offset = "0x1DB91C0", VA = "0x1DB91C0")]
			internal void <DOPreferredSize>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x20003F9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251F58", Offset = "0x1251F58")]
		private sealed class <>c__DisplayClass10_0
		{
			[Token(Token = "0x40016CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Outline target;

			[Token(Token = "0x6001975")]
			[Address(RVA = "0x1DB4C98", Offset = "0x1DB4C98", VA = "0x1DB4C98")]
			public <>c__DisplayClass10_0()
			{
			}

			[Token(Token = "0x6001976")]
			[Address(RVA = "0x1DB8030", Offset = "0x1DB8030", VA = "0x1DB8030")]
			internal Color <DOColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x6001977")]
			[Address(RVA = "0x1DB8050", Offset = "0x1DB8050", VA = "0x1DB8050")]
			internal void <DOColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x20003FA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251F68", Offset = "0x1251F68")]
		private sealed class <>c__DisplayClass11_0
		{
			[Token(Token = "0x40016D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Outline target;

			[Token(Token = "0x6001978")]
			[Address(RVA = "0x1DB4DEC", Offset = "0x1DB4DEC", VA = "0x1DB4DEC")]
			public <>c__DisplayClass11_0()
			{
			}

			[Token(Token = "0x6001979")]
			[Address(RVA = "0x1DB806C", Offset = "0x1DB806C", VA = "0x1DB806C")]
			internal Color <DOFade>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x600197A")]
			[Address(RVA = "0x1DB808C", Offset = "0x1DB808C", VA = "0x1DB808C")]
			internal void <DOFade>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x20003FB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251F78", Offset = "0x1251F78")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x40016D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Outline target;

			[Token(Token = "0x600197B")]
			[Address(RVA = "0x1DB4F50", Offset = "0x1DB4F50", VA = "0x1DB4F50")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x600197C")]
			[Address(RVA = "0x1DB80A8", Offset = "0x1DB80A8", VA = "0x1DB80A8")]
			internal Vector2 <DOScale>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x600197D")]
			[Address(RVA = "0x1DB80C4", Offset = "0x1DB80C4", VA = "0x1DB80C4")]
			internal void <DOScale>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x20003FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251F88", Offset = "0x1251F88")]
		private sealed class <>c__DisplayClass13_0
		{
			[Token(Token = "0x40016D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x600197E")]
			[Address(RVA = "0x1DB50CC", Offset = "0x1DB50CC", VA = "0x1DB50CC")]
			public <>c__DisplayClass13_0()
			{
			}

			[Token(Token = "0x600197F")]
			[Address(RVA = "0x1DB80E0", Offset = "0x1DB80E0", VA = "0x1DB80E0")]
			internal Vector2 <DOAnchorPos>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6001980")]
			[Address(RVA = "0x1DB80FC", Offset = "0x1DB80FC", VA = "0x1DB80FC")]
			internal void <DOAnchorPos>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x20003FD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251F98", Offset = "0x1251F98")]
		private sealed class <>c__DisplayClass14_0
		{
			[Token(Token = "0x40016D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x6001981")]
			[Address(RVA = "0x1DB5254", Offset = "0x1DB5254", VA = "0x1DB5254")]
			public <>c__DisplayClass14_0()
			{
			}

			[Token(Token = "0x6001982")]
			[Address(RVA = "0x1DB8118", Offset = "0x1DB8118", VA = "0x1DB8118")]
			internal Vector2 <DOAnchorPosX>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6001983")]
			[Address(RVA = "0x1DB8134", Offset = "0x1DB8134", VA = "0x1DB8134")]
			internal void <DOAnchorPosX>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x20003FE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251FA8", Offset = "0x1251FA8")]
		private sealed class <>c__DisplayClass15_0
		{
			[Token(Token = "0x40016D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x6001984")]
			[Address(RVA = "0x1DB53DC", Offset = "0x1DB53DC", VA = "0x1DB53DC")]
			public <>c__DisplayClass15_0()
			{
			}

			[Token(Token = "0x6001985")]
			[Address(RVA = "0x1DB8150", Offset = "0x1DB8150", VA = "0x1DB8150")]
			internal Vector2 <DOAnchorPosY>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6001986")]
			[Address(RVA = "0x1DB816C", Offset = "0x1DB816C", VA = "0x1DB816C")]
			internal void <DOAnchorPosY>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x20003FF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251FB8", Offset = "0x1251FB8")]
		private sealed class <>c__DisplayClass16_0
		{
			[Token(Token = "0x40016D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x6001987")]
			[Address(RVA = "0x1DB5560", Offset = "0x1DB5560", VA = "0x1DB5560")]
			public <>c__DisplayClass16_0()
			{
			}

			[Token(Token = "0x6001988")]
			[Address(RVA = "0x1DB8188", Offset = "0x1DB8188", VA = "0x1DB8188")]
			internal Vector3 <DOAnchorPos3D>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001989")]
			[Address(RVA = "0x1DB81A4", Offset = "0x1DB81A4", VA = "0x1DB81A4")]
			internal void <DOAnchorPos3D>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x2000400")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251FC8", Offset = "0x1251FC8")]
		private sealed class <>c__DisplayClass17_0
		{
			[Token(Token = "0x40016D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x600198A")]
			[Address(RVA = "0x1DB56FC", Offset = "0x1DB56FC", VA = "0x1DB56FC")]
			public <>c__DisplayClass17_0()
			{
			}

			[Token(Token = "0x600198B")]
			[Address(RVA = "0x1DB81C0", Offset = "0x1DB81C0", VA = "0x1DB81C0")]
			internal Vector3 <DOAnchorPos3DX>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x600198C")]
			[Address(RVA = "0x1DB81DC", Offset = "0x1DB81DC", VA = "0x1DB81DC")]
			internal void <DOAnchorPos3DX>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x2000401")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251FD8", Offset = "0x1251FD8")]
		private sealed class <>c__DisplayClass18_0
		{
			[Token(Token = "0x40016D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x600198D")]
			[Address(RVA = "0x1DB5898", Offset = "0x1DB5898", VA = "0x1DB5898")]
			public <>c__DisplayClass18_0()
			{
			}

			[Token(Token = "0x600198E")]
			[Address(RVA = "0x1DB81F8", Offset = "0x1DB81F8", VA = "0x1DB81F8")]
			internal Vector3 <DOAnchorPos3DY>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x600198F")]
			[Address(RVA = "0x1DB8214", Offset = "0x1DB8214", VA = "0x1DB8214")]
			internal void <DOAnchorPos3DY>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x2000402")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251FE8", Offset = "0x1251FE8")]
		private sealed class <>c__DisplayClass19_0
		{
			[Token(Token = "0x40016D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x6001990")]
			[Address(RVA = "0x1DB5A34", Offset = "0x1DB5A34", VA = "0x1DB5A34")]
			public <>c__DisplayClass19_0()
			{
			}

			[Token(Token = "0x6001991")]
			[Address(RVA = "0x1DB8230", Offset = "0x1DB8230", VA = "0x1DB8230")]
			internal Vector3 <DOAnchorPos3DZ>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001992")]
			[Address(RVA = "0x1DB824C", Offset = "0x1DB824C", VA = "0x1DB824C")]
			internal void <DOAnchorPos3DZ>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x2000403")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1251FF8", Offset = "0x1251FF8")]
		private sealed class <>c__DisplayClass20_0
		{
			[Token(Token = "0x40016D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x6001993")]
			[Address(RVA = "0x1DB5BB0", Offset = "0x1DB5BB0", VA = "0x1DB5BB0")]
			public <>c__DisplayClass20_0()
			{
			}

			[Token(Token = "0x6001994")]
			[Address(RVA = "0x1DB82B0", Offset = "0x1DB82B0", VA = "0x1DB82B0")]
			internal Vector2 <DOAnchorMax>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6001995")]
			[Address(RVA = "0x1DB82CC", Offset = "0x1DB82CC", VA = "0x1DB82CC")]
			internal void <DOAnchorMax>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000404")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252008", Offset = "0x1252008")]
		private sealed class <>c__DisplayClass21_0
		{
			[Token(Token = "0x40016DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x6001996")]
			[Address(RVA = "0x1DB5D2C", Offset = "0x1DB5D2C", VA = "0x1DB5D2C")]
			public <>c__DisplayClass21_0()
			{
			}

			[Token(Token = "0x6001997")]
			[Address(RVA = "0x1DB82E8", Offset = "0x1DB82E8", VA = "0x1DB82E8")]
			internal Vector2 <DOAnchorMin>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6001998")]
			[Address(RVA = "0x1DB8304", Offset = "0x1DB8304", VA = "0x1DB8304")]
			internal void <DOAnchorMin>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000405")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252018", Offset = "0x1252018")]
		private sealed class <>c__DisplayClass22_0
		{
			[Token(Token = "0x40016DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x6001999")]
			[Address(RVA = "0x1DB5E90", Offset = "0x1DB5E90", VA = "0x1DB5E90")]
			public <>c__DisplayClass22_0()
			{
			}

			[Token(Token = "0x600199A")]
			[Address(RVA = "0x1DB8320", Offset = "0x1DB8320", VA = "0x1DB8320")]
			internal Vector2 <DOPivot>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x600199B")]
			[Address(RVA = "0x1DB833C", Offset = "0x1DB833C", VA = "0x1DB833C")]
			internal void <DOPivot>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000406")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252028", Offset = "0x1252028")]
		private sealed class <>c__DisplayClass23_0
		{
			[Token(Token = "0x40016DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x600199C")]
			[Address(RVA = "0x1DB6014", Offset = "0x1DB6014", VA = "0x1DB6014")]
			public <>c__DisplayClass23_0()
			{
			}

			[Token(Token = "0x600199D")]
			[Address(RVA = "0x1DB8358", Offset = "0x1DB8358", VA = "0x1DB8358")]
			internal Vector2 <DOPivotX>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x600199E")]
			[Address(RVA = "0x1DB8374", Offset = "0x1DB8374", VA = "0x1DB8374")]
			internal void <DOPivotX>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000407")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252038", Offset = "0x1252038")]
		private sealed class <>c__DisplayClass24_0
		{
			[Token(Token = "0x40016DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x600199F")]
			[Address(RVA = "0x1DB6198", Offset = "0x1DB6198", VA = "0x1DB6198")]
			public <>c__DisplayClass24_0()
			{
			}

			[Token(Token = "0x60019A0")]
			[Address(RVA = "0x1DB8390", Offset = "0x1DB8390", VA = "0x1DB8390")]
			internal Vector2 <DOPivotY>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60019A1")]
			[Address(RVA = "0x1DB83AC", Offset = "0x1DB83AC", VA = "0x1DB83AC")]
			internal void <DOPivotY>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000408")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252048", Offset = "0x1252048")]
		private sealed class <>c__DisplayClass25_0
		{
			[Token(Token = "0x40016DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60019A2")]
			[Address(RVA = "0x1DB6314", Offset = "0x1DB6314", VA = "0x1DB6314")]
			public <>c__DisplayClass25_0()
			{
			}

			[Token(Token = "0x60019A3")]
			[Address(RVA = "0x1DB83C8", Offset = "0x1DB83C8", VA = "0x1DB83C8")]
			internal Vector2 <DOSizeDelta>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60019A4")]
			[Address(RVA = "0x1DB83E4", Offset = "0x1DB83E4", VA = "0x1DB83E4")]
			internal void <DOSizeDelta>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000409")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252058", Offset = "0x1252058")]
		private sealed class <>c__DisplayClass26_0
		{
			[Token(Token = "0x40016DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60019A5")]
			[Address(RVA = "0x1DB64DC", Offset = "0x1DB64DC", VA = "0x1DB64DC")]
			public <>c__DisplayClass26_0()
			{
			}

			[Token(Token = "0x60019A6")]
			[Address(RVA = "0x1DB8400", Offset = "0x1DB8400", VA = "0x1DB8400")]
			internal Vector3 <DOPunchAnchorPos>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60019A7")]
			[Address(RVA = "0x1DB8490", Offset = "0x1DB8490", VA = "0x1DB8490")]
			internal void <DOPunchAnchorPos>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x200040A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252068", Offset = "0x1252068")]
		private sealed class <>c__DisplayClass27_0
		{
			[Token(Token = "0x40016E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60019A8")]
			[Address(RVA = "0x1DB667C", Offset = "0x1DB667C", VA = "0x1DB667C")]
			public <>c__DisplayClass27_0()
			{
			}

			[Token(Token = "0x60019A9")]
			[Address(RVA = "0x1DB8534", Offset = "0x1DB8534", VA = "0x1DB8534")]
			internal Vector3 <DOShakeAnchorPos>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60019AA")]
			[Address(RVA = "0x1DB85C4", Offset = "0x1DB85C4", VA = "0x1DB85C4")]
			internal void <DOShakeAnchorPos>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x200040B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252078", Offset = "0x1252078")]
		private sealed class <>c__DisplayClass28_0
		{
			[Token(Token = "0x40016E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60019AB")]
			[Address(RVA = "0x1DB6868", Offset = "0x1DB6868", VA = "0x1DB6868")]
			public <>c__DisplayClass28_0()
			{
			}

			[Token(Token = "0x60019AC")]
			[Address(RVA = "0x1DB8668", Offset = "0x1DB8668", VA = "0x1DB8668")]
			internal Vector3 <DOShakeAnchorPos>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60019AD")]
			[Address(RVA = "0x1DB86F8", Offset = "0x1DB86F8", VA = "0x1DB86F8")]
			internal void <DOShakeAnchorPos>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x200040C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252088", Offset = "0x1252088")]
		private sealed class <>c__DisplayClass29_0
		{
			[Token(Token = "0x40016E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x40016E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float startPosY;

			[Token(Token = "0x40016E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool offsetYSet;

			[Token(Token = "0x40016E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float offsetY;

			[Token(Token = "0x40016E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Sequence s;

			[Token(Token = "0x40016E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector2 endValue;

			[Token(Token = "0x60019AE")]
			[Address(RVA = "0x1DB6C14", Offset = "0x1DB6C14", VA = "0x1DB6C14")]
			public <>c__DisplayClass29_0()
			{
			}

			[Token(Token = "0x60019AF")]
			[Address(RVA = "0x1DB879C", Offset = "0x1DB879C", VA = "0x1DB879C")]
			internal Vector2 <DOJumpAnchorPos>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60019B0")]
			[Address(RVA = "0x1DB87B8", Offset = "0x1DB87B8", VA = "0x1DB87B8")]
			internal void <DOJumpAnchorPos>b__1(Vector2 x)
			{
			}

			[Token(Token = "0x60019B1")]
			[Address(RVA = "0x1DB87D4", Offset = "0x1DB87D4", VA = "0x1DB87D4")]
			internal void <DOJumpAnchorPos>b__2()
			{
			}

			[Token(Token = "0x60019B2")]
			[Address(RVA = "0x1DB8808", Offset = "0x1DB8808", VA = "0x1DB8808")]
			internal Vector2 <DOJumpAnchorPos>b__3()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60019B3")]
			[Address(RVA = "0x1DB8824", Offset = "0x1DB8824", VA = "0x1DB8824")]
			internal void <DOJumpAnchorPos>b__4(Vector2 x)
			{
			}

			[Token(Token = "0x60019B4")]
			[Address(RVA = "0x1DB8840", Offset = "0x1DB8840", VA = "0x1DB8840")]
			internal void <DOJumpAnchorPos>b__5()
			{
			}
		}

		[Token(Token = "0x200040D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252098", Offset = "0x1252098")]
		private sealed class <>c__DisplayClass30_0
		{
			[Token(Token = "0x40016E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ScrollRect target;

			[Token(Token = "0x60019B5")]
			[Address(RVA = "0x1DB6D84", Offset = "0x1DB6D84", VA = "0x1DB6D84")]
			public <>c__DisplayClass30_0()
			{
			}

			[Token(Token = "0x60019B6")]
			[Address(RVA = "0x1DB893C", Offset = "0x1DB893C", VA = "0x1DB893C")]
			internal Vector2 <DONormalizedPos>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60019B7")]
			[Address(RVA = "0x1DB89AC", Offset = "0x1DB89AC", VA = "0x1DB89AC")]
			internal void <DONormalizedPos>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x200040E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12520A8", Offset = "0x12520A8")]
		private sealed class <>c__DisplayClass31_0
		{
			[Token(Token = "0x40016E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ScrollRect target;

			[Token(Token = "0x60019B8")]
			[Address(RVA = "0x1DB6EE4", Offset = "0x1DB6EE4", VA = "0x1DB6EE4")]
			public <>c__DisplayClass31_0()
			{
			}

			[Token(Token = "0x60019B9")]
			[Address(RVA = "0x1DB89F8", Offset = "0x1DB89F8", VA = "0x1DB89F8")]
			internal float <DOHorizontalNormalizedPos>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x60019BA")]
			[Address(RVA = "0x1DB8A14", Offset = "0x1DB8A14", VA = "0x1DB8A14")]
			internal void <DOHorizontalNormalizedPos>b__1(float x)
			{
			}
		}

		[Token(Token = "0x200040F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12520B8", Offset = "0x12520B8")]
		private sealed class <>c__DisplayClass32_0
		{
			[Token(Token = "0x40016EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ScrollRect target;

			[Token(Token = "0x60019BB")]
			[Address(RVA = "0x1DB7044", Offset = "0x1DB7044", VA = "0x1DB7044")]
			public <>c__DisplayClass32_0()
			{
			}

			[Token(Token = "0x60019BC")]
			[Address(RVA = "0x1DB8A30", Offset = "0x1DB8A30", VA = "0x1DB8A30")]
			internal float <DOVerticalNormalizedPos>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x60019BD")]
			[Address(RVA = "0x1DB8A4C", Offset = "0x1DB8A4C", VA = "0x1DB8A4C")]
			internal void <DOVerticalNormalizedPos>b__1(float x)
			{
			}
		}

		[Token(Token = "0x2000410")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12520C8", Offset = "0x12520C8")]
		private sealed class <>c__DisplayClass33_0
		{
			[Token(Token = "0x40016EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Slider target;

			[Token(Token = "0x60019BE")]
			[Address(RVA = "0x1DB71B0", Offset = "0x1DB71B0", VA = "0x1DB71B0")]
			public <>c__DisplayClass33_0()
			{
			}

			[Token(Token = "0x60019BF")]
			[Address(RVA = "0x1DB8A68", Offset = "0x1DB8A68", VA = "0x1DB8A68")]
			internal float <DOValue>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x60019C0")]
			[Address(RVA = "0x1DB8A8C", Offset = "0x1DB8A8C", VA = "0x1DB8A8C")]
			internal void <DOValue>b__1(float x)
			{
			}
		}

		[Token(Token = "0x2000411")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12520D8", Offset = "0x12520D8")]
		private sealed class <>c__DisplayClass34_0
		{
			[Token(Token = "0x40016EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Text target;

			[Token(Token = "0x60019C1")]
			[Address(RVA = "0x1DB732C", Offset = "0x1DB732C", VA = "0x1DB732C")]
			public <>c__DisplayClass34_0()
			{
			}

			[Token(Token = "0x60019C2")]
			[Address(RVA = "0x1DB8AB0", Offset = "0x1DB8AB0", VA = "0x1DB8AB0")]
			internal Color <DOColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60019C3")]
			[Address(RVA = "0x1DB8AD4", Offset = "0x1DB8AD4", VA = "0x1DB8AD4")]
			internal void <DOColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x2000412")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12520E8", Offset = "0x12520E8")]
		private sealed class <>c__DisplayClass35_0
		{
			[Token(Token = "0x40016ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int v;

			[Token(Token = "0x40016EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Text target;

			[Token(Token = "0x40016EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool addThousandsSeparator;

			[Token(Token = "0x40016F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public CultureInfo cInfo;

			[Token(Token = "0x60019C4")]
			[Address(RVA = "0x1DB74F4", Offset = "0x1DB74F4", VA = "0x1DB74F4")]
			public <>c__DisplayClass35_0()
			{
			}

			[Token(Token = "0x60019C5")]
			[Address(RVA = "0x1DB8AF8", Offset = "0x1DB8AF8", VA = "0x1DB8AF8")]
			internal int <DOCounter>b__0()
			{
				return default(int);
			}

			[Token(Token = "0x60019C6")]
			[Address(RVA = "0x1DB8B00", Offset = "0x1DB8B00", VA = "0x1DB8B00")]
			internal void <DOCounter>b__1(int x)
			{
			}
		}

		[Token(Token = "0x2000413")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12520F8", Offset = "0x12520F8")]
		private sealed class <>c__DisplayClass36_0
		{
			[Token(Token = "0x40016F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Text target;

			[Token(Token = "0x60019C7")]
			[Address(RVA = "0x1DB7648", Offset = "0x1DB7648", VA = "0x1DB7648")]
			public <>c__DisplayClass36_0()
			{
			}

			[Token(Token = "0x60019C8")]
			[Address(RVA = "0x1DB8BA0", Offset = "0x1DB8BA0", VA = "0x1DB8BA0")]
			internal Color <DOFade>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60019C9")]
			[Address(RVA = "0x1DB8BC4", Offset = "0x1DB8BC4", VA = "0x1DB8BC4")]
			internal void <DOFade>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x2000414")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252108", Offset = "0x1252108")]
		private sealed class <>c__DisplayClass37_0
		{
			[Token(Token = "0x40016F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Text target;

			[Token(Token = "0x60019CA")]
			[Address(RVA = "0x1DB7834", Offset = "0x1DB7834", VA = "0x1DB7834")]
			public <>c__DisplayClass37_0()
			{
			}

			[Token(Token = "0x60019CB")]
			[Address(RVA = "0x1DB8BE8", Offset = "0x1DB8BE8", VA = "0x1DB8BE8")]
			internal string <DOText>b__0()
			{
				return null;
			}

			[Token(Token = "0x60019CC")]
			[Address(RVA = "0x1DB8C0C", Offset = "0x1DB8C0C", VA = "0x1DB8C0C")]
			internal void <DOText>b__1(string x)
			{
			}
		}

		[Token(Token = "0x2000415")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252118", Offset = "0x1252118")]
		private sealed class <>c__DisplayClass38_0
		{
			[Token(Token = "0x40016F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Color to;

			[Token(Token = "0x40016F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Graphic target;

			[Token(Token = "0x60019CD")]
			[Address(RVA = "0x1DB7A38", Offset = "0x1DB7A38", VA = "0x1DB7A38")]
			public <>c__DisplayClass38_0()
			{
			}

			[Token(Token = "0x60019CE")]
			[Address(RVA = "0x1DB8C30", Offset = "0x1DB8C30", VA = "0x1DB8C30")]
			internal Color <DOBlendableColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60019CF")]
			[Address(RVA = "0x1DB8C3C", Offset = "0x1DB8C3C", VA = "0x1DB8C3C")]
			internal void <DOBlendableColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x2000416")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252128", Offset = "0x1252128")]
		private sealed class <>c__DisplayClass39_0
		{
			[Token(Token = "0x40016F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Color to;

			[Token(Token = "0x40016F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Image target;

			[Token(Token = "0x60019D0")]
			[Address(RVA = "0x1DB7C3C", Offset = "0x1DB7C3C", VA = "0x1DB7C3C")]
			public <>c__DisplayClass39_0()
			{
			}

			[Token(Token = "0x60019D1")]
			[Address(RVA = "0x1DB8CF8", Offset = "0x1DB8CF8", VA = "0x1DB8CF8")]
			internal Color <DOBlendableColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60019D2")]
			[Address(RVA = "0x1DB8D04", Offset = "0x1DB8D04", VA = "0x1DB8D04")]
			internal void <DOBlendableColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x2000417")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252138", Offset = "0x1252138")]
		private sealed class <>c__DisplayClass40_0
		{
			[Token(Token = "0x40016F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Color to;

			[Token(Token = "0x40016F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Text target;

			[Token(Token = "0x60019D3")]
			[Address(RVA = "0x1DB7E40", Offset = "0x1DB7E40", VA = "0x1DB7E40")]
			public <>c__DisplayClass40_0()
			{
			}

			[Token(Token = "0x60019D4")]
			[Address(RVA = "0x1DB8E08", Offset = "0x1DB8E08", VA = "0x1DB8E08")]
			internal Color <DOBlendableColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60019D5")]
			[Address(RVA = "0x1DB8E14", Offset = "0x1DB8E14", VA = "0x1DB8E14")]
			internal void <DOBlendableColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x2000418")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252148", Offset = "0x1252148")]
		private sealed class <>c__DisplayClass41_0
		{
			[Token(Token = "0x40016F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60019D6")]
			[Address(RVA = "0x1DB7FF0", Offset = "0x1DB7FF0", VA = "0x1DB7FF0")]
			public <>c__DisplayClass41_0()
			{
			}

			[Token(Token = "0x60019D7")]
			[Address(RVA = "0x1DB8ED0", Offset = "0x1DB8ED0", VA = "0x1DB8ED0")]
			internal Vector2 <DOShapeCircle>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60019D8")]
			[Address(RVA = "0x1DB8EEC", Offset = "0x1DB8EEC", VA = "0x1DB8EEC")]
			internal void <DOShapeCircle>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x600156B")]
		[Address(RVA = "0x1DB3C64", Offset = "0x1DB3C64", VA = "0x1DB3C64")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this CanvasGroup target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600156C")]
		[Address(RVA = "0x1DB3DB8", Offset = "0x1DB3DB8", VA = "0x1DB3DB8")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600156D")]
		[Address(RVA = "0x1DB3F34", Offset = "0x1DB3F34", VA = "0x1DB3F34")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Graphic target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600156E")]
		[Address(RVA = "0x1DB4088", Offset = "0x1DB4088", VA = "0x1DB4088")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600156F")]
		[Address(RVA = "0x1DB4204", Offset = "0x1DB4204", VA = "0x1DB4204")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0x1DB4358", Offset = "0x1DB4358", VA = "0x1DB4358")]
		public static TweenerCore<float, float, FloatOptions> DOFillAmount(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001571")]
		[Address(RVA = "0x1DB44D0", Offset = "0x1DB44D0", VA = "0x1DB44D0")]
		public static Sequence DOGradientColor(this Image target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001572")]
		[Address(RVA = "0x1DB46B0", Offset = "0x1DB46B0", VA = "0x1DB46B0")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOFlexibleSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001573")]
		[Address(RVA = "0x1DB482C", Offset = "0x1DB482C", VA = "0x1DB482C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMinSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001574")]
		[Address(RVA = "0x1DB49A8", Offset = "0x1DB49A8", VA = "0x1DB49A8")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPreferredSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001575")]
		[Address(RVA = "0x1DB4B24", Offset = "0x1DB4B24", VA = "0x1DB4B24")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Outline target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001576")]
		[Address(RVA = "0x1DB4CA0", Offset = "0x1DB4CA0", VA = "0x1DB4CA0")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Outline target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001577")]
		[Address(RVA = "0x1DB4DF4", Offset = "0x1DB4DF4", VA = "0x1DB4DF4")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOScale(this Outline target, Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001578")]
		[Address(RVA = "0x1DB4F58", Offset = "0x1DB4F58", VA = "0x1DB4F58")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPos(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001579")]
		[Address(RVA = "0x1DB50D4", Offset = "0x1DB50D4", VA = "0x1DB50D4")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600157A")]
		[Address(RVA = "0x1DB525C", Offset = "0x1DB525C", VA = "0x1DB525C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600157B")]
		[Address(RVA = "0x1DB53E4", Offset = "0x1DB53E4", VA = "0x1DB53E4")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3D(this RectTransform target, Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600157C")]
		[Address(RVA = "0x1DB5568", Offset = "0x1DB5568", VA = "0x1DB5568")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600157D")]
		[Address(RVA = "0x1DB5704", Offset = "0x1DB5704", VA = "0x1DB5704")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600157E")]
		[Address(RVA = "0x1DB58A0", Offset = "0x1DB58A0", VA = "0x1DB58A0")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DZ(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600157F")]
		[Address(RVA = "0x1DB5A3C", Offset = "0x1DB5A3C", VA = "0x1DB5A3C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMax(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001580")]
		[Address(RVA = "0x1DB5BB8", Offset = "0x1DB5BB8", VA = "0x1DB5BB8")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMin(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001581")]
		[Address(RVA = "0x1DB5D34", Offset = "0x1DB5D34", VA = "0x1DB5D34")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivot(this RectTransform target, Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001582")]
		[Address(RVA = "0x1DB5E98", Offset = "0x1DB5E98", VA = "0x1DB5E98")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotX(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001583")]
		[Address(RVA = "0x1DB601C", Offset = "0x1DB601C", VA = "0x1DB601C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotY(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001584")]
		[Address(RVA = "0x1DB61A0", Offset = "0x1DB61A0", VA = "0x1DB61A0")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOSizeDelta(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001585")]
		[Address(RVA = "0x1DB631C", Offset = "0x1DB631C", VA = "0x1DB631C")]
		public static Tweener DOPunchAnchorPos(this RectTransform target, Vector2 punch, float duration, int vibrato = 10, float elasticity = 1f, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001586")]
		[Address(RVA = "0x1DB64E4", Offset = "0x1DB64E4", VA = "0x1DB64E4")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, float strength = 100f, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x6001587")]
		[Address(RVA = "0x1DB6684", Offset = "0x1DB6684", VA = "0x1DB6684")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, Vector2 strength, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x6001588")]
		[Address(RVA = "0x1DB6870", Offset = "0x1DB6870", VA = "0x1DB6870")]
		public static Sequence DOJumpAnchorPos(this RectTransform target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001589")]
		[Address(RVA = "0x1DB6C1C", Offset = "0x1DB6C1C", VA = "0x1DB6C1C")]
		public static Tweener DONormalizedPos(this ScrollRect target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600158A")]
		[Address(RVA = "0x1DB6D8C", Offset = "0x1DB6D8C", VA = "0x1DB6D8C")]
		public static Tweener DOHorizontalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0x1DB6EEC", Offset = "0x1DB6EEC", VA = "0x1DB6EEC")]
		public static Tweener DOVerticalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0x1DB704C", Offset = "0x1DB704C", VA = "0x1DB704C")]
		public static TweenerCore<float, float, FloatOptions> DOValue(this Slider target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0x1DB71B8", Offset = "0x1DB71B8", VA = "0x1DB71B8")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Text target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600158E")]
		[Address(RVA = "0x1DB7334", Offset = "0x1DB7334", VA = "0x1DB7334")]
		public static TweenerCore<int, int, NoOptions> DOCounter(this Text target, int fromValue, int endValue, float duration, bool addThousandsSeparator = true, [Optional] CultureInfo culture)
		{
			return null;
		}

		[Token(Token = "0x600158F")]
		[Address(RVA = "0x1DB74FC", Offset = "0x1DB74FC", VA = "0x1DB74FC")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Text target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0x1DB7650", Offset = "0x1DB7650", VA = "0x1DB7650")]
		public static TweenerCore<string, string, StringOptions> DOText(this Text target, string endValue, float duration, bool richTextEnabled = true, ScrambleMode scrambleMode = ScrambleMode.None, [Optional] string scrambleChars)
		{
			return null;
		}

		[Token(Token = "0x6001591")]
		[Address(RVA = "0x1DB783C", Offset = "0x1DB783C", VA = "0x1DB783C")]
		public static Tweener DOBlendableColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001592")]
		[Address(RVA = "0x1DB7A40", Offset = "0x1DB7A40", VA = "0x1DB7A40")]
		public static Tweener DOBlendableColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001593")]
		[Address(RVA = "0x1DB7C44", Offset = "0x1DB7C44", VA = "0x1DB7C44")]
		public static Tweener DOBlendableColor(this Text target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001594")]
		[Address(RVA = "0x1DB7E48", Offset = "0x1DB7E48", VA = "0x1DB7E48")]
		public static TweenerCore<Vector2, Vector2, CircleOptions> DOShapeCircle(this RectTransform target, Vector2 center, float endValueDegrees, float duration, bool relativeCenter = false, bool snapping = false)
		{
			return null;
		}
	}
	[Token(Token = "0x20002B9")]
	public static class DOTweenModuleUnityVersion
	{
		[Token(Token = "0x2000419")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252158", Offset = "0x1252158")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x40016FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material target;

			[Token(Token = "0x40016FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int propertyID;

			[Token(Token = "0x60019D9")]
			[Address(RVA = "0x1DB9F7C", Offset = "0x1DB9F7C", VA = "0x1DB9F7C")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x60019DA")]
			[Address(RVA = "0x1DBA7AC", Offset = "0x1DBA7AC", VA = "0x1DBA7AC")]
			internal Vector2 <DOOffset>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60019DB")]
			[Address(RVA = "0x1DBA7D0", Offset = "0x1DBA7D0", VA = "0x1DBA7D0")]
			internal void <DOOffset>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x200041A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252168", Offset = "0x1252168")]
		private sealed class <>c__DisplayClass9_0
		{
			[Token(Token = "0x40016FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material target;

			[Token(Token = "0x40016FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int propertyID;

			[Token(Token = "0x60019DC")]
			[Address(RVA = "0x1DBA154", Offset = "0x1DBA154", VA = "0x1DBA154")]
			public <>c__DisplayClass9_0()
			{
			}

			[Token(Token = "0x60019DD")]
			[Address(RVA = "0x1DBA7F4", Offset = "0x1DBA7F4", VA = "0x1DBA7F4")]
			internal Vector2 <DOTiling>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60019DE")]
			[Address(RVA = "0x1DBA818", Offset = "0x1DBA818", VA = "0x1DBA818")]
			internal void <DOTiling>b__1(Vector2 x)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200041B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252178", Offset = "0x1252178")]
		private struct <AsyncWaitForCompletion>d__10 : IAsyncStateMachine
		{
			[Token(Token = "0x40016FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x40016FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001700")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001701")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60019DF")]
			[Address(RVA = "0x1DBA83C", Offset = "0x1DBA83C", VA = "0x1DBA83C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60019E0")]
			[Address(RVA = "0x1DBAA80", Offset = "0x1DBAA80", VA = "0x1DBAA80", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200041C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252188", Offset = "0x1252188")]
		private struct <AsyncWaitForRewind>d__11 : IAsyncStateMachine
		{
			[Token(Token = "0x4001702")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001703")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001704")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001705")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60019E1")]
			[Address(RVA = "0x1DBB190", Offset = "0x1DBB190", VA = "0x1DBB190", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60019E2")]
			[Address(RVA = "0x1DBB3F8", Offset = "0x1DBB3F8", VA = "0x1DBB3F8", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200041D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x1252198", Offset = "0x1252198")]
		private struct <AsyncWaitForKill>d__12 : IAsyncStateMachine
		{
			[Token(Token = "0x4001706")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001707")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001708")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001709")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60019E3")]
			[Address(RVA = "0x1DBACE4", Offset = "0x1DBACE4", VA = "0x1DBACE4", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60019E4")]
			[Address(RVA = "0x1DBAF14", Offset = "0x1DBAF14", VA = "0x1DBAF14", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200041E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12521A8", Offset = "0x12521A8")]
		private struct <AsyncWaitForElapsedLoops>d__13 : IAsyncStateMachine
		{
			[Token(Token = "0x400170A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400170B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x400170C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x400170D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int elapsedLoops;

			[Token(Token = "0x400170E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60019E5")]
			[Address(RVA = "0x1DBAA8C", Offset = "0x1DBAA8C", VA = "0x1DBAA8C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60019E6")]
			[Address(RVA = "0x1DBACD8", Offset = "0x1DBACD8", VA = "0x1DBACD8", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x200041F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12521B8", Offset = "0x12521B8")]
		private struct <AsyncWaitForPosition>d__14 : IAsyncStateMachine
		{
			[Token(Token = "0x400170F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001710")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001711")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001712")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float position;

			[Token(Token = "0x4001713")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60019E7")]
			[Address(RVA = "0x1DBAF20", Offset = "0x1DBAF20", VA = "0x1DBAF20", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60019E8")]
			[Address(RVA = "0x1DBB184", Offset = "0x1DBB184", VA = "0x1DBB184", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000420")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x12521C8", Offset = "0x12521C8")]
		private struct <AsyncWaitForStart>d__15 : IAsyncStateMachine
		{
			[Token(Token = "0x4001714")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001715")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001716")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001717")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x60019E9")]
			[Address(RVA = "0x1DBB404", Offset = "0x1DBB404", VA = "0x1DBB404", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x60019EA")]
			[Address(RVA = "0x1DBB63C", Offset = "0x1DBB63C", VA = "0x1DBB63C", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x6001595")]
		[Address(RVA = "0x1DB94C8", Offset = "0x1DB94C8", VA = "0x1DB94C8")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001596")]
		[Address(RVA = "0x1DB96A4", Offset = "0x1DB96A4", VA = "0x1DB96A4")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, string property, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001597")]
		[Address(RVA = "0x1DB9894", Offset = "0x1DB9894", VA = "0x1DB9894")]
		public static CustomYieldInstruction WaitForCompletion(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6001598")]
		[Address(RVA = "0x1DB9968", Offset = "0x1DB9968", VA = "0x1DB9968")]
		public static CustomYieldInstruction WaitForRewind(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6001599")]
		[Address(RVA = "0x1DB9A3C", Offset = "0x1DB9A3C", VA = "0x1DB9A3C")]
		public static CustomYieldInstruction WaitForKill(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x600159A")]
		[Address(RVA = "0x1DB9B10", Offset = "0x1DB9B10", VA = "0x1DB9B10")]
		public static CustomYieldInstruction WaitForElapsedLoops(this Tween t, int elapsedLoops, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0x1DB9BF4", Offset = "0x1DB9BF4", VA = "0x1DB9BF4")]
		public static CustomYieldInstruction WaitForPosition(this Tween t, float position, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0x1DB9CD8", Offset = "0x1DB9CD8", VA = "0x1DB9CD8")]
		public static CustomYieldInstruction WaitForStart(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x600159D")]
		[Address(RVA = "0x1DB9DAC", Offset = "0x1DB9DAC", VA = "0x1DB9DAC")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOOffset(this Material target, Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}

		[Token(Token = "0x600159E")]
		[Address(RVA = "0x1DB9F84", Offset = "0x1DB9F84", VA = "0x1DB9F84")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOTiling(this Material target, Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}

		[Token(Token = "0x600159F")]
		[Address(RVA = "0x1DBA15C", Offset = "0x1DBA15C", VA = "0x1DBA15C")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x12642C4", Offset = "0x12642C4")]
		public static Task AsyncWaitForCompletion(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x60015A0")]
		[Address(RVA = "0x1DBA264", Offset = "0x1DBA264", VA = "0x1DBA264")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x1264338", Offset = "0x1264338")]
		public static Task AsyncWaitForRewind(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x60015A1")]
		[Address(RVA = "0x1DBA36C", Offset = "0x1DBA36C", VA = "0x1DBA36C")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x12643AC", Offset = "0x12643AC")]
		public static Task AsyncWaitForKill(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x60015A2")]
		[Address(RVA = "0x1DBA474", Offset = "0x1DBA474", VA = "0x1DBA474")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x1264420", Offset = "0x1264420")]
		public static Task AsyncWaitForElapsedLoops(this Tween t, int elapsedLoops)
		{
			return null;
		}

		[Token(Token = "0x60015A3")]
		[Address(RVA = "0x1DBA58C", Offset = "0x1DBA58C", VA = "0x1DBA58C")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x1264494", Offset = "0x1264494")]
		public static Task AsyncWaitForPosition(this Tween t, float position)
		{
			return null;
		}

		[Token(Token = "0x60015A4")]
		[Address(RVA = "0x1DBA6A4", Offset = "0x1DBA6A4", VA = "0x1DBA6A4")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0x1264508", Offset = "0x1264508")]
		public static Task AsyncWaitForStart(this Tween t)
		{
			return null;
		}
	}
	[Token(Token = "0x20002BA")]
	public static class DOTweenCYInstruction
	{
		[Token(Token = "0x2000421")]
		public class WaitForCompletion : CustomYieldInstruction
		{
			[Token(Token = "0x4001718")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170001BA")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60019EB")]
				[Address(RVA = "0x1DAF33C", Offset = "0x1DAF33C", VA = "0x1DAF33C", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60019EC")]
			[Address(RVA = "0x1DAF370", Offset = "0x1DAF370", VA = "0x1DAF370")]
			public WaitForCompletion(Tween tween)
			{
			}
		}

		[Token(Token = "0x2000422")]
		public class WaitForRewind : CustomYieldInstruction
		{
			[Token(Token = "0x4001719")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170001BB")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60019ED")]
				[Address(RVA = "0x1DAF534", Offset = "0x1DAF534", VA = "0x1DAF534", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60019EE")]
			[Address(RVA = "0x1DAF598", Offset = "0x1DAF598", VA = "0x1DAF598")]
			public WaitForRewind(Tween tween)
			{
			}
		}

		[Token(Token = "0x2000423")]
		public class WaitForKill : CustomYieldInstruction
		{
			[Token(Token = "0x400171A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170001BC")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60019EF")]
				[Address(RVA = "0x1DAF438", Offset = "0x1DAF438", VA = "0x1DAF438", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60019F0")]
			[Address(RVA = "0x1DAF454", Offset = "0x1DAF454", VA = "0x1DAF454")]
			public WaitForKill(Tween tween)
			{
			}
		}

		[Token(Token = "0x2000424")]
		public class WaitForElapsedLoops : CustomYieldInstruction
		{
			[Token(Token = "0x400171B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x400171C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly int elapsedLoops;

			[Token(Token = "0x170001BD")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60019F1")]
				[Address(RVA = "0x1DAF3A4", Offset = "0x1DAF3A4", VA = "0x1DAF3A4", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60019F2")]
			[Address(RVA = "0x1DAF3F0", Offset = "0x1DAF3F0", VA = "0x1DAF3F0")]
			public WaitForElapsedLoops(Tween tween, int elapsedLoops)
			{
			}
		}

		[Token(Token = "0x2000425")]
		public class WaitForPosition : CustomYieldInstruction
		{
			[Token(Token = "0x400171D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x400171E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly float position;

			[Token(Token = "0x170001BE")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60019F3")]
				[Address(RVA = "0x1DAF488", Offset = "0x1DAF488", VA = "0x1DAF488", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60019F4")]
			[Address(RVA = "0x1DAF4EC", Offset = "0x1DAF4EC", VA = "0x1DAF4EC")]
			public WaitForPosition(Tween tween, float position)
			{
			}
		}

		[Token(Token = "0x2000426")]
		public class WaitForStart : CustomYieldInstruction
		{
			[Token(Token = "0x400171F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170001BF")]
			public override bool keepWaiting
			{
				[Token(Token = "0x60019F5")]
				[Address(RVA = "0x1DAF5CC", Offset = "0x1DAF5CC", VA = "0x1DAF5CC", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60019F6")]
			[Address(RVA = "0x1DAF600", Offset = "0x1DAF600", VA = "0x1DAF600")]
			public WaitForStart(Tween tween)
			{
			}
		}
	}
	[Token(Token = "0x20002BB")]
	public static class DOTweenModuleUtils
	{
		[Token(Token = "0x2000427")]
		public static class Physics
		{
			[Token(Token = "0x60019F7")]
			[Address(RVA = "0x1DBB78C", Offset = "0x1DBB78C", VA = "0x1DBB78C")]
			public static void SetOrientationOnPath(PathOptions options, Tween t, Quaternion newRot, Transform trans)
			{
			}

			[Token(Token = "0x60019F8")]
			[Address(RVA = "0x1DBB894", Offset = "0x1DBB894", VA = "0x1DBB894")]
			public static bool HasRigidbody2D(Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x60019F9")]
			[Address(RVA = "0x1DBB924", Offset = "0x1DBB924", VA = "0x1DBB924")]
			[Preserve]
			public static bool HasRigidbody(Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x60019FA")]
			[Address(RVA = "0x1DBB9B4", Offset = "0x1DBB9B4", VA = "0x1DBB9B4")]
			[Preserve]
			public static TweenerCore<Vector3, Path, PathOptions> CreateDOTweenPathTween(MonoBehaviour target, bool tweenRigidbody, bool isLocal, Path path, float duration, PathMode pathMode)
			{
				return null;
			}
		}

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _initialized;

		[Token(Token = "0x60015A5")]
		[Address(RVA = "0x1DBB648", Offset = "0x1DBB648", VA = "0x1DBB648")]
		[Preserve]
		public static void Init()
		{
		}

		[Token(Token = "0x60015A6")]
		[Address(RVA = "0x1DBB6EC", Offset = "0x1DBB6EC", VA = "0x1DBB6EC")]
		[Preserve]
		private static void Preserver()
		{
		}
	}
}
namespace VRMBuildManager
{
	[Serializable]
	[Token(Token = "0x20002BC")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x12518DC", Offset = "0x12518DC")]
	public class VersionData : ScriptableObject
	{
		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VersionData _instance;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string versionNumberFilePath;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int versionNumber;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string versionName;

		[Token(Token = "0x1700011F")]
		public static VersionData Instance
		{
			[Token(Token = "0x60015A7")]
			[Address(RVA = "0x274BB90", Offset = "0x274BB90", VA = "0x274BB90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015A8")]
		[Address(RVA = "0x274BCC8", Offset = "0x274BCC8", VA = "0x274BCC8")]
		public VersionData()
		{
		}
	}
	[Token(Token = "0x20002BD")]
	public class VersionDataDisplay : MonoBehaviour
	{
		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI thisText;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VersionData versionDataFile;

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0x274BD44", Offset = "0x274BD44", VA = "0x274BD44")]
		private void Awake()
		{
		}

		[Token(Token = "0x60015AB")]
		[Address(RVA = "0x274BF18", Offset = "0x274BF18", VA = "0x274BF18")]
		public VersionDataDisplay()
		{
		}
	}
}
namespace Blobcreate.ProjectileToolkit
{
	[Token(Token = "0x20002BE")]
	public static class Projectile
	{
		[Token(Token = "0x60015AC")]
		[Address(RVA = "0x1DAD8B4", Offset = "0x1DAD8B4", VA = "0x1DAD8B4")]
		public static Vector3 VelocityByA(Vector3 start, Vector3 end, float a)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60015AD")]
		[Address(RVA = "0x1DADA30", Offset = "0x1DADA30", VA = "0x1DADA30")]
		public static Vector3 VelocityByAngle(Vector3 start, Vector3 end, float elevationAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60015AE")]
		[Address(RVA = "0x1DADBBC", Offset = "0x1DADBBC", VA = "0x1DADBBC")]
		public static Vector3 VelocityByTime(Vector3 start, Vector3 end, float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60015AF")]
		[Address(RVA = "0x1DADC5C", Offset = "0x1DADC5C", VA = "0x1DADC5C")]
		public static Vector3 VelocityByHeight(Vector3 start, Vector3 end, float heightFromEnd)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60015B0")]
		[Address(RVA = "0x1DADD7C", Offset = "0x1DADD7C", VA = "0x1DADD7C")]
		public static bool AnglesBySpeed(Vector3 start, Vector3 end, float speed, out float lowAngle, out float highAngle)
		{
			return default(bool);
		}

		[Token(Token = "0x60015B1")]
		[Address(RVA = "0x1DADF38", Offset = "0x1DADF38", VA = "0x1DADF38")]
		public static bool VelocitiesBySpeed(Vector3 start, Vector3 end, float speed, out Vector3 lowAngleV, out Vector3 highAngleV)
		{
			return default(bool);
		}

		[Token(Token = "0x60015B2")]
		[Address(RVA = "0x1DAE164", Offset = "0x1DAE164", VA = "0x1DAE164")]
		public static Vector3 PositionAtTime(Vector3 origin, Vector3 originVelocity, float time, float gAcceleration)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60015B3")]
		[Address(RVA = "0x1DAE264", Offset = "0x1DAE264", VA = "0x1DAE264")]
		public static void Positions(Vector3 origin, Vector3 originVelocity, float distance, int count, float gAcceleration, Vector3[] positions)
		{
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0x1DAE400", Offset = "0x1DAE400", VA = "0x1DAE400")]
		public static (Collider, Vector3) FirstHit(Vector3 origin, Vector3 originVelocity, int distance, LayerMask mask)
		{
			return default((Collider, Vector3));
		}

		[Token(Token = "0x60015B5")]
		[Address(RVA = "0x1DAE924", Offset = "0x1DAE924", VA = "0x1DAE924")]
		public static bool VerticalFlightTest(Vector3 start, Vector3 end, Vector3 startVelocity, out Vector2 timesOfFlight)
		{
			return default(bool);
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0x1DAEA64", Offset = "0x1DAEA64", VA = "0x1DAEA64")]
		public static bool FlightTest(Vector3 start, Vector3 end, Vector3 startVelocity, FlightTestMode testMode, out float timeOfFlight)
		{
			return default(bool);
		}

		[Token(Token = "0x60015B7")]
		[Address(RVA = "0x1DAEC8C", Offset = "0x1DAEC8C", VA = "0x1DAEC8C")]
		public static float ElevationalReach(Vector3 start, float endElevation, float speed)
		{
			return default(float);
		}

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0x1DAED6C", Offset = "0x1DAED6C", VA = "0x1DAED6C")]
		public static float ElevationalReach(Vector3 start, float endElevation, float speed, out float angle)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20002BF")]
	public enum FlightTestMode
	{
		[Token(Token = "0x400118C")]
		Horizontal,
		[Token(Token = "0x400118D")]
		VerticalB,
		[Token(Token = "0x400118E")]
		VerticalA,
		[Token(Token = "0x400118F")]
		Both
	}
	[Token(Token = "0x20002C0")]
	public class TrajectoryPredictor : MonoBehaviour
	{
		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private LineRenderer line;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3[] positions;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int validCount;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 gravity;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float gAcceleration;

		[Token(Token = "0x17000120")]
		public LineRenderer Line
		{
			[Token(Token = "0x60015B9")]
			[Address(RVA = "0x1DAEE6C", Offset = "0x1DAEE6C", VA = "0x1DAEE6C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015BA")]
			[Address(RVA = "0x1DAEE74", Offset = "0x1DAEE74", VA = "0x1DAEE74")]
			set
			{
			}
		}

		[Token(Token = "0x17000121")]
		public Vector3[] Positions
		{
			[Token(Token = "0x60015BB")]
			[Address(RVA = "0x1DAEE7C", Offset = "0x1DAEE7C", VA = "0x1DAEE7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000122")]
		public int PositionCount
		{
			[Token(Token = "0x60015BC")]
			[Address(RVA = "0x1DAEE84", Offset = "0x1DAEE84", VA = "0x1DAEE84")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000123")]
		public Vector3 Gravity
		{
			[Token(Token = "0x60015BD")]
			[Address(RVA = "0x1DAEE8C", Offset = "0x1DAEE8C", VA = "0x1DAEE8C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60015BE")]
			[Address(RVA = "0x1DAEE98", Offset = "0x1DAEE98", VA = "0x1DAEE98")]
			set
			{
			}
		}

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0x1DAEED0", Offset = "0x1DAEED0", VA = "0x1DAEED0", Slot = "4")]
		public virtual void Render(Vector3 origin, Vector3 originVelocity, float distance, int count = 16)
		{
		}

		[Token(Token = "0x60015C0")]
		[Address(RVA = "0x1DAF040", Offset = "0x1DAF040", VA = "0x1DAF040", Slot = "5")]
		public virtual void Render(Vector3 origin, Vector3 originVelocity, Vector3 end, int count = 16)
		{
		}

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0x1DAF164", Offset = "0x1DAF164", VA = "0x1DAF164", Slot = "6")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0x1DAF1EC", Offset = "0x1DAF1EC", VA = "0x1DAF1EC", Slot = "7")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0x1DAF284", Offset = "0x1DAF284", VA = "0x1DAF284", Slot = "8")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60015C4")]
		[Address(RVA = "0x1DAF31C", Offset = "0x1DAF31C", VA = "0x1DAF31C")]
		public TrajectoryPredictor()
		{
		}
	}
}
